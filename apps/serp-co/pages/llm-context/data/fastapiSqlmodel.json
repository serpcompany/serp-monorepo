[
  {
    "owner": "fastapi",
    "repo": "sqlmodel",
    "content": "TITLE: Defining a Table Model Class with SQLModel in Python\nDESCRIPTION: Creates a Hero class that inherits from SQLModel to represent a database table. The class is configured with table=True and includes fields for id, name, secret_name, and age. The id field is set as the primary key.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/create-db-and-table.md#2025-04-13_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional\n\nfrom sqlmodel import Field, SQLModel\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n```\n\n----------------------------------------\n\nTITLE: Defining a SQL Table Model in Python with SQLModel\nDESCRIPTION: Creates a Hero class that represents a SQL table with id, name, secret_name, and age columns. The class inherits from SQLModel and uses Field for column configurations, including primary key definition and optional values.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/index.md#2025-04-13_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional\n\nfrom sqlmodel import Field, SQLModel\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n```\n\n----------------------------------------\n\nTITLE: Python Database Model with SQLModel\nDESCRIPTION: Complete code example showing how to define a Hero database model class with SQLModel, including field definitions and database setup logic\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/create_db_and_table/annotations/en/tutorial003.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\nfrom sqlmodel import Field, SQLModel, create_engine\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url)\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\nif __name__ == \"__main__\":\n    create_db_and_tables()\n```\n\n----------------------------------------\n\nTITLE: Defining a SQLModel Table Model in Python\nDESCRIPTION: Creates a Hero class that defines both a SQLAlchemy table and a Pydantic model. The model includes id, name, secret_name, and age fields with appropriate types and constraints.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/README.md#2025-04-13_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional\n\nfrom sqlmodel import Field, SQLModel\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n```\n\n----------------------------------------\n\nTITLE: FastAPI App Initialization with SQLModel\nDESCRIPTION: Creates FastAPI application instance and sets up SQLModel database connection with thread-safe configuration.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/simple-hero-api.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\napp = FastAPI()\n```\n\n----------------------------------------\n\nTITLE: Querying Database Data with SQLModel\nDESCRIPTION: Shows how to query data from a database using SQLModel's select function. The example creates a session, builds a simple query with a where clause, executes it to retrieve a Hero by name, and prints the result.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/index.md#2025-04-13_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nengine = create_engine(\"sqlite:///database.db\")\n\nwith Session(engine) as session:\n    statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n    hero = session.exec(statement).first()\n    print(hero)\n```\n\n----------------------------------------\n\nTITLE: Creating and Writing to a Database with SQLModel in Python\nDESCRIPTION: Complete example showing how to define a model, create instances, connect to a SQLite database, create tables, and insert data. Uses Session and engine concepts from SQLAlchemy.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/README.md#2025-04-13_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nhero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\nhero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nhero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n\nengine = create_engine(\"sqlite:///database.db\")\n\n\nSQLModel.metadata.create_all(engine)\n\nwith Session(engine) as session:\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n    session.commit()\n```\n\n----------------------------------------\n\nTITLE: Complete Database Write Example with SQLModel\nDESCRIPTION: A full example showing how to define a model, create instances, initialize a database engine, create tables, and save data to a SQLite database. The code demonstrates the Session usage pattern for database operations.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/index.md#2025-04-13_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nhero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\nhero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nhero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n\nengine = create_engine(\"sqlite:///database.db\")\n\n\nSQLModel.metadata.create_all(engine)\n\nwith Session(engine) as session:\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n    session.commit()\n```\n\n----------------------------------------\n\nTITLE: Hero API Endpoints Implementation\nDESCRIPTION: Implements POST and GET endpoints for creating and reading hero records using SQLModel sessions.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/simple-hero-api.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp = FastAPI()\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_tables()\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n```\n\n----------------------------------------\n\nTITLE: Application Entry Point with SQLModel\nDESCRIPTION: Main application file showing table creation using imported SQLModel from database module.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/create-db-and-table.md#2025-04-13_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# app.py\nfrom .db import engine, SQLModel\n\nSQLModel.metadata.create_all(engine)\n```\n\n----------------------------------------\n\nTITLE: Defining Relationship Attributes in Model Classes\nDESCRIPTION: Demonstrates how to define relationship attributes in both Team and Hero models to establish bidirectional relationships using back_populates parameter.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/define-relationships-attributes.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple SQLModel Classes for Hero Data\nDESCRIPTION: Demonstrates creating separate model classes for database operations (Hero), data creation (HeroCreate), and public responses (HeroPublic). Only the Hero class is marked as a database table.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/multiple-models.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n```\n\n----------------------------------------\n\nTITLE: Creating Database Engine and Tables in SQLModel\nDESCRIPTION: Creates a SQLite database engine and defines a function to create all the tables based on the SQLModel classes. This code establishes the database structure with related tables.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/create-connected-tables.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport sqlite3\n\nfrom sqlmodel import SQLModel, create_engine\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n```\n\n----------------------------------------\n\nTITLE: Creating Hero Data with Team Relationships in Python using SQLModel\nDESCRIPTION: Function to create sample hero and team data demonstrating many-to-many relationships. Creates teams 'Z-Force' and 'Preventers', and heroes 'Deadpond', 'Rusty-Man', and 'Spider-Boy' with their team associations.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/many-to-many/create-data.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef create_heroes(session: Session):\n    team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n    team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n\n    deadpond = Hero(\n        name=\"Deadpond\",\n        secret_name=\"Dive Wilson\",\n        teams=[team_z_force, team_preventers],\n    )\n\n    rusty_man = Hero(\n        name=\"Rusty-Man\",\n        secret_name=\"Tommy Sharp\",\n        age=48,\n        teams=[team_preventers],\n    )\n\n    spider_boy = Hero(\n        name=\"Spider-Boy\",\n        secret_name=\"Pedro Parqueador\",\n        teams=[team_preventers],\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a FastAPI Dependency for Database Session\nDESCRIPTION: This snippet shows how to create a FastAPI dependency function that yields a database session. It uses a context manager to ensure proper session handling and cleanup.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/session-with-dependency.md#2025-04-13_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef get_session():\n    with Session(engine) as session:\n        yield session\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Path Operations with Session Dependency\nDESCRIPTION: This snippet shows how to update multiple FastAPI path operations to use the get_session dependency. It demonstrates the consistent use of the session parameter across different CRUD operations.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/session-with-dependency.md#2025-04-13_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Depends\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n@app.post(\"/heroes/\", response_model=HeroRead)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n@app.get(\"/heroes/\", response_model=List[HeroRead])\ndef read_heroes(*, session: Session = Depends(get_session)):\n    heroes = session.exec(select(Hero)).all()\n    return heroes\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroRead)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroRead)\ndef update_hero(*, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n```\n\n----------------------------------------\n\nTITLE: Querying a Database with SQLModel in Python\nDESCRIPTION: Example showing how to query data from the database using SQLModel. Demonstrates creating a select statement with a filter condition and executing it to retrieve a specific hero by name.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/README.md#2025-04-13_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nengine = create_engine(\"sqlite:///database.db\")\n\nwith Session(engine) as session:\n    statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n    hero = session.exec(statement).first()\n    print(hero)\n```\n\n----------------------------------------\n\nTITLE: Creating Database Engine in Python\nDESCRIPTION: Create a single shared engine for the entire application to interact with the database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/select/annotations/en/tutorial002.md#2025-04-13_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nengine = create_engine(\"sqlite:///database.db\")\n```\n\n----------------------------------------\n\nTITLE: Complete SELECT Implementation with SQLModel\nDESCRIPTION: A complete example showing how to read data from a database using SQLModel, including model definition, database setup, and query execution.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/select.md#2025-04-13_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Creating Explicit Link Model Relationships in SQLModel\nDESCRIPTION: Code demonstrating how to create heroes, teams, and explicitly link them together using the HeroTeamLink model with additional data like the is_training status.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/many-to-many/link-with-extra-fields.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef create_heroes():\n    with Session(engine) as session:\n        team_z = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n\n        hero_deadpond = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n        hero_rusty_man = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n\n        deadpond_team_z = HeroTeamLink(\n            team=team_z,\n            hero=hero_deadpond,\n            is_training=False,\n        )\n        deadpond_preventers = HeroTeamLink(\n            team=team_preventers,\n            hero=hero_deadpond,\n            is_training=True,\n        )\n        spider_boy_preventers = HeroTeamLink(\n            team=team_preventers,\n            hero=hero_spider_boy,\n            is_training=True,\n        )\n        rusty_man_preventers = HeroTeamLink(\n            team=team_preventers,\n            hero=hero_rusty_man,\n            is_training=False,\n        )\n\n        session.add(deadpond_team_z)\n        session.add(deadpond_preventers)\n        session.add(spider_boy_preventers)\n        session.add(rusty_man_preventers)\n\n        session.commit()\n```\n\n----------------------------------------\n\nTITLE: Comprehensive API Testing with Database Fixtures\nDESCRIPTION: Shows implementation of multiple test cases using both client and session fixtures. Tests include creating heroes, handling invalid data, and reading hero lists.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/tests.md#2025-04-13_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlmodel import Session\nfrom fastapi.testclient import TestClient\nfrom .main import Hero\n\ndef test_read_heroes(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\")\n    hero_2 = Hero(name=\"Rusty-Man\")\n    session.add(hero_1)\n    session.add(hero_2)\n    session.commit()\n\n    response = client.get(\"/heroes/\")\n    data = response.json()\n\n    assert response.status_code == 200\n    assert len(data) == 2\n    assert data[0][\"name\"] == \"Deadpond\"\n    assert data[1][\"name\"] == \"Rusty-Man\"\n```\n\n----------------------------------------\n\nTITLE: Implementing FastAPI Dependency in a Path Operation\nDESCRIPTION: This code demonstrates how to use the get_session dependency in a FastAPI path operation. It shows the import of Depends, the dependency declaration in the function parameters, and the usage of the session within the function.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/session-with-dependency.md#2025-04-13_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Depends\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n@app.post(\"/heroes/\", response_model=HeroRead)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n```\n\n----------------------------------------\n\nTITLE: Implementing PATCH Endpoint for Hero Updates\nDESCRIPTION: FastAPI path operation that handles hero updates using PATCH method. It reads the existing hero, applies partial updates using model_dump with exclude_unset, and updates the database record.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/update.md#2025-04-13_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroRead)\ndef update_hero(session: Session, hero_id: int, hero: HeroUpdate):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    db_hero.sqlmodel_update(hero_data)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n```\n\n----------------------------------------\n\nTITLE: Defining Hero Table Model with SQLModel in Python\nDESCRIPTION: This snippet defines the Hero table model that inherits from HeroBase. It includes an id field as the primary key and inherits other fields from the base model.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/multiple-models.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing GET Endpoint for Single Hero in FastAPI\nDESCRIPTION: Creates a FastAPI endpoint that retrieves a single hero by ID from the database. Includes error handling for non-existent heroes and returns a HeroPublic model. Uses path parameters for ID validation and raises HTTP 404 exception when hero is not found.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/read-one.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, HTTPException\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    hero = Hero.get(hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n```\n\n----------------------------------------\n\nTITLE: Defining SQLModel Models in a Single File\nDESCRIPTION: Demonstrates how to define multiple SQLModel models (Hero and Team) in a single file to avoid circular import issues.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/code-structure.md#2025-04-13_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional, List\nfrom sqlmodel import Field, Relationship, SQLModel\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n```\n\n----------------------------------------\n\nTITLE: Database Startup Event Handler\nDESCRIPTION: Configures FastAPI startup event to create database tables when application starts.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/simple-hero-api.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp = FastAPI()\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_tables()\n```\n\n----------------------------------------\n\nTITLE: Creating Database and Tables with SQLModel in Python\nDESCRIPTION: Uses SQLModel.metadata.create_all() with the engine to create the database file and all registered tables. This must be called after all table models have been defined to ensure they are properly registered in SQLModel.metadata.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/create-db-and-table.md#2025-04-13_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nSQLModel.metadata.create_all(engine)\n```\n\n----------------------------------------\n\nTITLE: Creating a SQLite Database Engine with SQLModel in Python\nDESCRIPTION: Creates a SQLAlchemy engine using SQLModel's create_engine function. The engine connects to a SQLite database with echo=True for SQL statement logging, which is helpful for debugging and learning.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/create-db-and-table.md#2025-04-13_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n```\n\n----------------------------------------\n\nTITLE: Basic FastAPI Test Setup with pytest\nDESCRIPTION: This snippet demonstrates the basic structure of a pytest test for a FastAPI application. It includes creating a test client and making a POST request to create a hero.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/tests.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session\n\nfrom .main import app, Hero\n\nclient = TestClient(app)\n\n\ndef test_create_hero():\n        # Some code here omitted, we will see it later 👈\n    response = client.post(\"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"})\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpond\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] is not None\n        # Some code here omitted, we will see it later 👈\n\n# Code below omitted 👇\n```\n\n----------------------------------------\n\nTITLE: Secure Database Query with SQLModel\nDESCRIPTION: Safe approach to querying a database using SQLModel, which automatically handles parameter sanitization to prevent SQL injection attacks.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/db-to-code.md#2025-04-13_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nuser_id = input(\"Type the user ID: \")\n\nsession.exec(\n    select(Hero).where(Hero.id == user_id)\n).all()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Database Engine and Creating Tables\nDESCRIPTION: Creates a SQLite database engine and a function to create all the tables defined in the models. Uses SQLModel.metadata.create_all() to generate the tables in the database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/many-to-many/create-models-with-link.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\"sqlite:///database.db\")\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n```\n\n----------------------------------------\n\nTITLE: Creating Hero Endpoint Implementation\nDESCRIPTION: Shows how to implement a FastAPI endpoint that creates a new hero using the multiple model approach. Uses HeroCreate for input validation and HeroPublic for response schema.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/multiple-models.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/heroes/\", response_model=HeroPublic)\nasync def create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n```\n\n----------------------------------------\n\nTITLE: Defining Relationship Attributes with Forward References in SQLModel\nDESCRIPTION: This code demonstrates how to define SQLModel classes with relationship attributes using string literals for forward references. The Team class references the Hero class before it's defined, requiring the use of list[\"Hero\"] notation to avoid Python interpreter errors while maintaining type checking capabilities.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/type-annotation-strings.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional, List\nfrom sqlmodel import Field, Relationship, SQLModel\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = None\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n```\n\n----------------------------------------\n\nTITLE: Reading Connected Data with SQL JOIN Clause\nDESCRIPTION: SQL query that selects hero data along with team information using the JOIN clause with ON to establish the relationship between tables.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/read-connected-data.md#2025-04-13_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT hero.id, hero.name, team.name\nFROM hero\nJOIN team\nON hero.team_id = team.id\n```\n\n----------------------------------------\n\nTITLE: Creating Hero Model with Foreign Key in SQLModel\nDESCRIPTION: Defines the Hero model with a team_id foreign key field that references the Team model's id. This establishes a many-to-one relationship between heroes and teams.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/create-connected-tables.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\nfrom sqlmodel import Field, SQLModel\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = None\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n```\n\n----------------------------------------\n\nTITLE: Creating Model Classes with Proper Relationships Using back_populates\nDESCRIPTION: Defines Hero and Team model classes with relationship attributes properly using back_populates to maintain bidirectional relationships, ensuring data consistency.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/back-populates.md#2025-04-13_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with SQLModel Session in Python\nDESCRIPTION: This snippet shows how to create Hero instances, add them to a SQLModel session, and commit the changes to the database. It demonstrates proper session management using a 'with' block for automatic resource cleanup.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/insert.md#2025-04-13_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlmodel import Session\n\nwith Session(engine) as session:\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n```\n\n----------------------------------------\n\nTITLE: Creating Testing Engine and Session for SQLModel\nDESCRIPTION: This snippet demonstrates how to create a separate SQLite testing database engine and session for SQLModel in FastAPI tests. It includes creating tables and setting up the test client.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/tests.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\n\nfrom .main import app, Hero, get_session\n\nsqlite_file_name = \"testing.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True, connect_args={\"check_same_thread\": False})\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session_override():\n    return Session(engine)\n\n\napp.dependency_overrides[get_session] = get_session_override\n\nclient = TestClient(app)\n\n\ndef test_create_hero():\n    create_db_and_tables()\n    response = client.post(\"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"})\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpond\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] is not None\n```\n\n----------------------------------------\n\nTITLE: Creating Models with Relationship Fields in FastAPI\nDESCRIPTION: Defines new models that include relationship fields but avoid infinite recursion by referencing the base models.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/relationships.md#2025-04-13_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclass HeroPublicWithTeam(HeroPublic):\n    team: Optional[TeamPublic] = None\n\n\nclass TeamPublicWithHeroes(TeamPublic):\n    heroes: List[HeroPublic] = []\n```\n\n----------------------------------------\n\nTITLE: Defining Team Models with SQLModel\nDESCRIPTION: Creates base, table, and data models for teams using SQLModel. Includes TeamBase as the foundation, Team as the table model, and additional models for creation and updates with relationship attributes.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/teams.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\nfrom sqlmodel import Field, Relationship, SQLModel\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamRead(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: Reading Connected Data with SQL WHERE Clause\nDESCRIPTION: SQL query that selects hero data along with team information by using the WHERE clause to join the tables on foreign key relationship.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/read-connected-data.md#2025-04-13_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT hero.id, hero.name, team.name\nFROM hero, team\nWHERE hero.team_id = team.id\n```\n\n----------------------------------------\n\nTITLE: JOIN with Team Data Selection in SQLModel\nDESCRIPTION: SQLModel query that joins and selects both Hero and Team data with filtering for specific team members.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/read-connected-data.md#2025-04-13_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nstatement = select(Hero, Team).join(Team).where(Team.name == \"Preventers\")\nresults = session.exec(statement)\n\nfor hero, team in results:\n    print(\"Preventer Hero:\", hero, \"Team:\", team)\n```\n\n----------------------------------------\n\nTITLE: Selecting Related Data with SQLModel WHERE Clause\nDESCRIPTION: Python function that queries heroes with their teams using SQLModel's select() function with a where clause to join the tables based on team_id.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/read-connected-data.md#2025-04-13_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef select_heroes(session: Session):\n    statement = select(Hero, Team).where(Hero.team_id == Team.id)\n    results = session.exec(statement)\n    for hero, team in results:\n        print(\"Hero:\", hero, \"Team:\", team)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response without Relationship Data\nDESCRIPTION: Shows the initial JSON response format for a hero, which includes only the hero's data with the team_id but no team details.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/relationships.md#2025-04-13_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"name\": \"Deadpond\",\n    \"secret_name\": \"Dive Wilson\",\n    \"age\": null,\n    \"team_id\": 1,\n    \"id\": 1,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up FastAPI App with SQLModel\nDESCRIPTION: Demonstrates how to set up a FastAPI application using SQLModel, including importing models, engine, and creating database tables.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/code-structure.md#2025-04-13_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom sqlmodel import Session\n\nfrom .database import create_db_and_tables, engine\nfrom .models import Hero, Team\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n# ... rest of the FastAPI app code ...\n\n\ndef main():\n    # ... main function code ...\n\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Adding Limit and Offset Query Parameters in FastAPI\nDESCRIPTION: This snippet shows how to add limit and offset query parameters to a FastAPI endpoint. It uses default values and validates the limit to be less than or equal to 100.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/limit-and-offset.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\n@app.get(\"/heroes\", response_model=list[HeroRead])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n```\n\n----------------------------------------\n\nTITLE: Configuring Hero Model with Link Relationship in SQLModel\nDESCRIPTION: Updated Hero model definition that replaces a direct teams relationship with team_links to support the explicit link model pattern.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/many-to-many/link-with-extra-fields.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n    team_links: List[\"HeroTeamLink\"] = Relationship(back_populates=\"hero\")\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory SQLite Database for FastAPI Tests\nDESCRIPTION: This code shows how to set up an in-memory SQLite database for FastAPI tests with SQLModel. It includes configuring the engine and creating tables in memory.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/tests.md#2025-04-13_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\n\nfrom .main import app, Hero, get_session\n\nsqlite_url = \"sqlite:///:memory:\"\n\nengine = create_engine(\n    sqlite_url,\n    connect_args={\"check_same_thread\": False},\n    poolclass=StaticPool,\n)\n\n# Code below omitted 👇\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with FastAPI and SQLModel\nDESCRIPTION: Implements a DELETE endpoint that removes a hero record by ID. The operation includes error handling for non-existent records and returns a success confirmation response.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/delete.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n```\n\n----------------------------------------\n\nTITLE: Filtering Heroes with SQLModel's where() Method\nDESCRIPTION: Example of using SQLModel's where() method to filter heroes, equivalent to the SQL WHERE clause.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/where.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n```\n\n----------------------------------------\n\nTITLE: Selecting and Updating a Hero Object with SQLModel in Python\nDESCRIPTION: This code snippet demonstrates the process of selecting a hero from the database, updating its age, and saving the changes. It includes SQL query execution, object manipulation, session management, and database commit operations.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/update/annotations/en/tutorial002.md#2025-04-13_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\n```\n\nLANGUAGE: python\nCODE:\n```\nHero: name='Spider-Boy' secret_name='Pedro Parqueador' age=None id=2\n```\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE hero SET age=? WHERE hero.id = ?\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\n```\n\nLANGUAGE: python\nCODE:\n```\nUpdated hero: name='Spider-Boy' secret_name='Pedro Parqueador' age=16 id=2\n```\n\n----------------------------------------\n\nTITLE: Using Multiple WHERE Clauses in SQLModel (Python)\nDESCRIPTION: Shows how to use multiple WHERE clauses in a SQLModel query to apply multiple conditions using AND logic.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/where.md#2025-04-13_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nstatement = select(Hero).where(Hero.age >= 35).where(Hero.age < 40)\nresults = session.exec(statement)\n\nfor hero in results:\n    print(hero)\n```\n\n----------------------------------------\n\nTITLE: Example of Multiple Relationships with back_populates\nDESCRIPTION: Shows how to set up multiple relationships between different models using back_populates, demonstrating how each relationship correctly references the attribute in the other model.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/back-populates.md#2025-04-13_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Weapon(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    power: int\n\n    hero_id: Optional[int] = Field(default=None, foreign_key=\"hero.id\")\n    hero: Optional[\"Hero\"] = Relationship(back_populates=\"weapons\")\n\n\nclass Power(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    description: str\n\n    hero_id: Optional[int] = Field(default=None, foreign_key=\"hero.id\")\n    hero: Optional[\"Hero\"] = Relationship(back_populates=\"powers\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Hero Model with Many-to-Many Relationship\nDESCRIPTION: Defines a Hero model with a many-to-many relationship to teams through the HeroTeamLink table. Uses the Relationship function with link_model parameter to establish the connection.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/many-to-many/create-models-with-link.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n```\n\n----------------------------------------\n\nTITLE: Implementing Team Path Operations\nDESCRIPTION: Creates FastAPI path operations for team CRUD operations including create, read, update, and delete functionality with database session management.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/teams.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/teams/\", response_model=TeamRead)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.from_orm(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=List[TeamRead])\ndef read_teams(*, session: Session = Depends(get_session), offset: int = 0, limit: int = Query(default=100, lte=100)):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamRead)\ndef read_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamRead)\ndef update_team(*, session: Session = Depends(get_session), team_id: int, team: TeamUpdate):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.dict(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n```\n\n----------------------------------------\n\nTITLE: Importing Relationship from SQLModel\nDESCRIPTION: Shows how to import the Relationship class from SQLModel which is used to define relationship attributes.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/define-relationships-attributes.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n```\n\n----------------------------------------\n\nTITLE: Basic Pytest Fixture Setup for Database Testing\nDESCRIPTION: Demonstrates setting up a basic pytest fixture for database testing in FastAPI applications. Creates an in-memory SQLite database and session for testing.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/tests.md#2025-04-13_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Iterator\n\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\n\nfrom .main import app, get_session\n\n@pytest.fixture\ndef session() -> Iterator[Session]:\n    engine = create_engine(\n        \"sqlite:///test.db\",\n        connect_args={\"check_same_thread\": False}\n    )\n    SQLModel.metadata.create_all(engine)\n    with Session(engine) as session:\n        yield session\n    SQLModel.metadata.drop_all(engine)\n```\n\n----------------------------------------\n\nTITLE: Creating Instances with Relationship Attributes in SQLModel\nDESCRIPTION: Modern approach using relationship attributes to create Hero and Team instances where Team objects can be directly assigned to heroes without needing to commit teams first.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/create-and-update-relationships.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Create some teams\nteam_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\nteam_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n# Create some heroes\nhero_deadpond = Hero(\n    name=\"Deadpond\",\n    secret_name=\"Dive Wilson\",\n    team=team_z_force,\n)\nhero_rusty_man = Hero(\n    name=\"Rusty-Man\",\n    secret_name=\"Tommy Sharp\",\n    team=team_preventers,\n)\nhero_spider_boy = Hero(\n    name=\"Spider-Boy\",\n    secret_name=\"Pedro Parqueador\",\n    team=team_preventers,\n)\n\nsession.add(hero_deadpond)\nsession.add(hero_rusty_man)\nsession.add(hero_spider_boy)\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Testing Hero Creation Endpoint with FastAPI TestClient\nDESCRIPTION: Test code that validates the creation of a hero through a POST request to the API. Checks response status code and validates hero attributes including name, secret name, age, and auto-generated ID.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001_py39/annotations/en/test_main_001.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.testclient import TestClient\nfrom main import app\n\nclient = TestClient(app)\n\nresponse = client.post(\"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"})\ndata = response.json()\n\nassert response.status_code == 200\nassert data[\"name\"] == \"Deadpond\"\nassert data[\"secret_name\"] == \"Dive Wilson\"\nassert data[\"age\"] is None\nassert data[\"id\"] is not None\n```\n\n----------------------------------------\n\nTITLE: Single Hero Update with SQLModel\nDESCRIPTION: Python code showing how to update a single hero's age using SQLModel, including selecting the hero, updating the value, and committing the change.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/update.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef update_heroes(session: Session):\n    hero = select(Hero).where(Hero.name == \"Spider-Boy\").first()\n    print(\"Hero:\", hero)\n    \n    hero.age = 16\n    session.add(hero)\n    session.commit()\n    \n    session.refresh(hero)\n    print(\"Updated hero:\", hero)\n```\n\n----------------------------------------\n\nTITLE: Defining a Link Table Model in SQLModel\nDESCRIPTION: Creates a HeroTeamLink class that serves as a link table connecting heroes and teams in a many-to-many relationship. Both fields are defined as primary keys and foreign keys to their respective tables.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/many-to-many/create-models-with-link.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int = Field(foreign_key=\"team.id\", primary_key=True)\n    hero_id: int = Field(foreign_key=\"hero.id\", primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Selecting Related Data with SQLModel JOIN Method\nDESCRIPTION: Python function that queries heroes with their teams using SQLModel's join() method, which automatically determines the relationship based on the foreign key.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/read-connected-data.md#2025-04-13_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef select_heroes(session: Session):\n    statement = select(Hero, Team).join(Team)\n    results = session.exec(statement)\n    for hero, team in results:\n        print(\"Hero:\", hero, \"Team:\", team)\n```\n\n----------------------------------------\n\nTITLE: Assigning a Relationship in SQLModel\nDESCRIPTION: Demonstrates how to directly assign a Team instance to a Hero's team attribute instead of using team_id, leveraging the relationship attributes.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/create-and-update-relationships.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\"sqlite:///database.db\")\n\nwith Session(engine) as session:\n    # Reassign hero to a different team\n    hero_spider_boy.team = team_z_force\n    session.add(hero_spider_boy)\n    session.commit()\n```\n\n----------------------------------------\n\nTITLE: Updating Team Relationship in SQLModel with Python\nDESCRIPTION: Code snippet showing how to update a hero's team_id to establish a database relationship. It demonstrates fetching a hero by ID, updating its team_id value, and saving the changes to the database using session.add() and commit().\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/update-data-connections.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nhero_spider_boy = select(Hero).where(Hero.name == \"Spider-Boy\").first()\n\nhero_spider_boy.team_id = 1\nsession.add(hero_spider_boy)\nsession.commit()\nsession.refresh(hero_spider_boy)\nprint(\"Updated hero:\", hero_spider_boy)\n```\n\n----------------------------------------\n\nTITLE: Using pytest Fixtures with FastAPI and SQLModel\nDESCRIPTION: Example showing how to declare a pytest fixture for database testing with SQLModel. The fixture creates an in-memory database session that can be used in test functions. The yield statement ensures proper cleanup of resources.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001/annotations/en/test_main_005.md#2025-04-13_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n@pytest.fixture()\ndef session():\n    # Create engine, create tables, create session\n    # ...\n    with Session(engine) as session:\n        yield session\n        # Session closes automatically after yield\n```\n\n----------------------------------------\n\nTITLE: Handling Circular Imports in SQLModel with TYPE_CHECKING\nDESCRIPTION: Shows how to use TYPE_CHECKING to handle circular imports between Hero and Team models in separate files while maintaining editor support.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/code-structure.md#2025-04-13_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import TYPE_CHECKING, List, Optional\nfrom sqlmodel import Field, Relationship, SQLModel\n\nif TYPE_CHECKING:\n    from .team_model import Team\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[\"Team\"] = Relationship(back_populates=\"heroes\")\n```\n\n----------------------------------------\n\nTITLE: Defining Hero Models with Password Fields in SQLModel\nDESCRIPTION: Creates a Hero table model with a hashed_password field and corresponding HeroCreate and HeroUpdate data models with password fields. This demonstrates how to structure models to handle password information securely.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/update-extra-data.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroRead(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: Using get() for ID Queries\nDESCRIPTION: Shows how to use the get() method as a shortcut for querying by primary key ID.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/one.md#2025-04-13_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as session:\n    hero = session.get(Hero, 1)\n    print(\"Hero:\", hero)\n```\n\n----------------------------------------\n\nTITLE: Creating Team Model in SQLModel\nDESCRIPTION: Defines the Team model with id, name, and headquarters fields. This model will be used to create the 'team' table in the database with appropriate columns.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/create-connected-tables.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\nfrom sqlmodel import Field, SQLModel\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n```\n\n----------------------------------------\n\nTITLE: Building a SELECT Statement with SQLModel\nDESCRIPTION: Shows how to create a SELECT statement using SQLModel's select function, which specifies what model (and underlying table) to query.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/select.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstatement = select(Hero)\n```\n\n----------------------------------------\n\nTITLE: Adding New Relationships with Link Models in SQLModel\nDESCRIPTION: Function that demonstrates how to create a new relationship by creating a HeroTeamLink instance and connecting it to existing hero and team instances.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/many-to-many/link-with-extra-fields.md#2025-04-13_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef update_heroes():\n    with Session(engine) as session:\n        hero = session.exec(select(Hero).where(Hero.name == \"Spider-Boy\")).one()\n        team = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        hero_team_link = HeroTeamLink(\n            team=team,\n            hero=hero,\n            is_training=True,\n        )\n        session.add(hero_team_link)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero.team_links)\n        print(\"Z-Force heroes:\", team.hero_links)\n```\n\n----------------------------------------\n\nTITLE: Creating Hero Model with Indexed Fields in SQLModel\nDESCRIPTION: Defines a Hero model class with indexed fields for name and age to improve query performance. The model includes a primary key id field and demonstrates proper index configuration using Field() declarations.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/indexes.md#2025-04-13_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\nfrom sqlmodel import Field, SQLModel\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Optional[int] = Field(default=None, index=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Team Model with Many-to-Many Relationship\nDESCRIPTION: Defines a Team model with a many-to-many relationship to heroes through the HeroTeamLink table. Uses the Relationship function with link_model parameter to establish the connection.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/many-to-many/create-models-with-link.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    headquarters: str\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with Decimal Field in SQLModel\nDESCRIPTION: Creates a Hero model with a Decimal money field that can have a maximum of 5 total digits with 3 decimal places. This ensures precision for financial values.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/advanced/decimal.md#2025-04-13_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional\nfrom sqlmodel import Field, SQLModel\nfrom pydantic import condecimal\nfrom decimal import Decimal\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    money: Decimal = Field(sa_type=condecimal(max_digits=5, decimal_places=3))\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with OFFSET and LIMIT\nDESCRIPTION: Demonstrates pagination by combining OFFSET and LIMIT to get the next batch of results.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/limit-and-offset.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef select_heroes():\n    statement = select(Hero).offset(3).limit(3)\n    results = session.exec(statement)\n    heroes = results.all()\n    print(\"Next 3 heroes:\", heroes)\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Expressions in a Single WHERE Clause in SQLModel (Python)\nDESCRIPTION: Demonstrates how to use multiple expressions in a single WHERE clause in SQLModel to apply multiple conditions.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/where.md#2025-04-13_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nstatement = select(Hero).where(Hero.age >= 35, Hero.age < 40)\nresults = session.exec(statement)\n\nfor hero in results:\n    print(hero)\n```\n\n----------------------------------------\n\nTITLE: Verifying Hero Deletion in Python\nDESCRIPTION: This snippet demonstrates how to verify that a hero has been deleted by querying the database again and checking for None result.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/delete.md#2025-04-13_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef delete_heroes(session: Session):\n    statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n    results = session.exec(statement)\n    hero = results.one()\n    print(\"Hero: \", hero)\n\n    session.delete(hero)\n    session.commit()\n\n    print(\"Deleted hero:\", hero)\n\n    statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n    results = session.exec(statement)\n    hero = results.first()\n\n    if hero is None:\n        print(\"There's no hero named Spider-Youngster\")\n    else:\n        print(\"Hero: \", hero)\n```\n\n----------------------------------------\n\nTITLE: Creating HeroBase Data Model with SQLModel in Python\nDESCRIPTION: This snippet defines the HeroBase data model with name, secret_name, and age fields. It uses Field(index=True) for name and age, which will be used when creating database indexes in the Hero table model.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/multiple-models.md#2025-04-13_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Using Not Equal Comparison in SQLModel WHERE Clause (Python)\nDESCRIPTION: Shows how to use the not equal (!=) comparison operator in a SQLModel WHERE clause to filter data.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/where.md#2025-04-13_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nstatement = select(Hero).where(Hero.name != \"Deadpond\")\nresults = session.exec(statement)\n\nfor hero in results:\n    print(hero)\n```\n\n----------------------------------------\n\nTITLE: Advanced Pytest Fixture with TestClient Integration\nDESCRIPTION: Shows how to create a TestClient fixture that uses the session fixture for testing. Implements dependency overrides and proper cleanup.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/tests.md#2025-04-13_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Iterator\n\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\n\nfrom .main import app, get_session\n\n@pytest.fixture\ndef session() -> Iterator[Session]:\n    engine = create_engine(\n        \"sqlite:///test.db\",\n        connect_args={\"check_same_thread\": False}\n    )\n    SQLModel.metadata.create_all(engine)\n    with Session(engine) as session:\n        yield session\n    SQLModel.metadata.drop_all(engine)\n\n@pytest.fixture\ndef client(session: Session) -> Iterator[TestClient]:\n    def get_session_override():\n        return session\n\n    app.dependency_overrides[get_session] = get_session_override\n    client = TestClient(app)\n    yield client\n    app.dependency_overrides.clear()\n\ndef test_create_hero(client: TestClient):\n    response = client.post(\"/heroes/\", json={\"name\": \"Deadpond\"})\n```\n\n----------------------------------------\n\nTITLE: Updating Hero Models with Team Relationships\nDESCRIPTION: Updates the hero models to include team relationships and foreign keys. Defines HeroBase with team_id field and creates related models for different operations.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/teams.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroRead(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n```\n\n----------------------------------------\n\nTITLE: Database Configuration Module\nDESCRIPTION: Alternative approach with database configuration in a separate module including engine creation and model imports.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/create-db-and-table.md#2025-04-13_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# db.py\nfrom sqlmodel import SQLModel, create_engine\nfrom . import models\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url)\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Query Results\nDESCRIPTION: Shows how to loop through query results returned from the database and process each row of data.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/select.md#2025-04-13_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfor hero in results:\n    print(hero)\n```\n\n----------------------------------------\n\nTITLE: Accessing Team Relationship Using SQLModel Relationship Attributes in Python\nDESCRIPTION: New simplified way to access a hero's related team using relationship attributes. SQLModel automatically fetches the corresponding data from the database when the attribute is accessed.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/read-relationships.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.exec(select(Hero)).first()\n        print(\"Hero:\", hero)\n        \n        print(\"Team:\", hero.team)\n```\n\n----------------------------------------\n\nTITLE: Querying and Computing with Decimal Values in SQLModel\nDESCRIPTION: Shows how to query Hero models with Decimal fields and perform arithmetic operations that maintain precision. The example demonstrates that Decimal types avoid the floating-point rounding errors common with regular floats.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/advanced/decimal.md#2025-04-13_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef select_heroes():\n    engine = create_engine(\"sqlite:///database.db\")\n\n    with Session(engine) as session:\n        hero_1 = session.exec(select(Hero).where(Hero.name == \"Deadpond\")).one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        hero_2 = session.exec(statement).one()\n        print(\"Hero 2:\", hero_2)\n\n        statement = select(Hero).where(Hero.name == \"Rusty-Man\")\n        hero_3 = session.exec(statement).one()\n        print(\"Hero 3:\", hero_3)\n        \n        total = hero_1.money + hero_3.money\n        print(f\"Total money: {total}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Link Model with Extra Fields in SQLModel\nDESCRIPTION: Definition of a HeroTeamLink model that includes an extra is_training field along with relationship attributes pointing to hero and team models.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/many-to-many/link-with-extra-fields.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n```\n\n----------------------------------------\n\nTITLE: Creating HeroPublic Data Model with SQLModel in Python\nDESCRIPTION: This snippet defines the HeroPublic model that inherits from HeroBase and adds a required id field. It's used for reading hero data from the API, ensuring the id is always present.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/multiple-models.md#2025-04-13_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\nclass HeroCreate(HeroBase):\n    pass\n\nclass HeroPublic(HeroBase):\n    id: int\n```\n\n----------------------------------------\n\nTITLE: Reading Data Objects with SQLModel Select Statements\nDESCRIPTION: Demonstrates how to retrieve Hero and Team objects from the database using SQLModel's select statement with the session.exec() method.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/back-populates.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhero_spider_boy = session.exec(\n    select(Hero).where(Hero.name == \"Spider-Boy\")\n).one()\n\npreventers_team = session.exec(\n    select(Team).where(Team.name == \"Preventers\")\n).one()\n```\n\n----------------------------------------\n\nTITLE: Filtered JOIN in SQLModel\nDESCRIPTION: SQLModel query that joins Hero and Team tables with a WHERE clause to filter for specific team members.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/read-connected-data.md#2025-04-13_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nstatement = select(Hero).join(Team).where(Team.name == \"Preventers\")\nresults = session.exec(statement)\n\nfor hero in results:\n    print(\"Preventer Hero:\", hero)\n```\n\n----------------------------------------\n\nTITLE: Creating Hero Object with Extra Data\nDESCRIPTION: Uses Hero.model_validate() with the update parameter to create a Hero table model object from a HeroCreate data model, adding the hashed password as extra data.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/update-extra-data.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nhashed_password = get_password_hash(hero.password)\nextra_data = {\"hashed_password\": hashed_password}\ndb_hero = Hero.model_validate(hero, update=extra_data)\ndb.add(db_hero)\ndb.commit()\ndb.refresh(db_hero)\nreturn db_hero\n```\n\n----------------------------------------\n\nTITLE: Accessing Team Relationship Using Traditional SQL Select in SQLModel Python\nDESCRIPTION: Traditional way to access a hero's related team using a select statement, session.exec(), and first(). This demonstrates the standard SQL query approach before using relationship attributes.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/read-relationships.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.exec(select(Hero)).first()\n        print(\"Hero:\", hero)\n        \n        # Traditional way, with select\n        statement = select(Team).where(Team.id == hero.team_id)\n        team = session.exec(statement).first()\n        print(\"Team:\", team)\n```\n\n----------------------------------------\n\nTITLE: Updating Hero Object with Extra Data\nDESCRIPTION: Demonstrates how to update a Hero object with extra data using db_hero.sqlmodel_update(). This handles password hashing when updating and ensures only set fields are modified.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/update-extra-data.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nhero_data = hero.model_dump(exclude_unset=True)\n\nif \"password\" in hero_data:\n    password = hero_data[\"password\"]\n    hashed_password = get_password_hash(password)\n    hero_data[\"hashed_password\"] = hashed_password\n    del hero_data[\"password\"]\n\ndb_hero.sqlmodel_update(hero_data)\ndb.add(db_hero)\ndb.commit()\ndb.refresh(db_hero)\nreturn db_hero\n```\n\n----------------------------------------\n\nTITLE: Selecting Heroes Using Session.get() with UUID\nDESCRIPTION: Demonstrates an alternative method for selecting Hero records using session.get() with UUID primary keys, providing a more direct way to fetch records by ID.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/advanced/uuid.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nhero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nsession.add(hero_2)\nsession.commit()\n\nprint(\"Created hero:\")\nprint(hero_2)\nprint(\"Created hero ID:\")\nprint(hero_2.id)\n\nselected_hero = session.get(Hero, hero_2.id)\n\nprint(\"Selected hero:\")\nprint(selected_hero)\nprint(\"Selected hero ID:\")\nprint(selected_hero.id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Team Model with Link Relationship in SQLModel\nDESCRIPTION: Updated Team model definition that replaces a direct heroes relationship with hero_links to support the explicit link model pattern.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/many-to-many/link-with-extra-fields.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    headquarters: str\n\n    hero_links: List[\"HeroTeamLink\"] = Relationship(back_populates=\"team\")\n```\n\n----------------------------------------\n\nTITLE: Creating Team Records in SQLModel\nDESCRIPTION: Creates team records in the database by instantiating Team models and using SQLModel session management. Demonstrates creating Preventers and Z-Force teams.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/create-connected-rows.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n```\n\n----------------------------------------\n\nTITLE: Selecting Heroes with SQLModel\nDESCRIPTION: Example of selecting all heroes from the database using SQLModel's select() function.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/where.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n```\n\n----------------------------------------\n\nTITLE: Committing Session Changes to Database\nDESCRIPTION: Commits the session changes to actually save the data in the database. This sends the SQL INSERT statements to the database in a single transaction.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/insert.md#2025-04-13_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    \n    session = Session(engine)\n    \n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n    \n    session.commit()\n```\n\n----------------------------------------\n\nTITLE: Installing SQLModel via pip\nDESCRIPTION: Command to install SQLModel package using pip package manager. This installation automatically includes dependencies like SQLAlchemy and Pydantic.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/install.md#2025-04-13_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install sqlmodel\n---> 100%\nSuccessfully installed sqlmodel pydantic sqlalchemy\n```\n\n----------------------------------------\n\nTITLE: Defining a Hero Model with Optional ID in SQLModel\nDESCRIPTION: Creates a SQLModel Hero class with an optional ID field that uses None as default but is a primary key in the database. This allows the ID to be None in Python before database insertion while ensuring it's not NULL in the database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/automatic-id-none-refresh.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n```\n\n----------------------------------------\n\nTITLE: Defining SQLModel Classes with Cascade Delete\nDESCRIPTION: Shows how to define SQLModel classes with cascade delete relationships using cascade_delete=True in Relationship() and ondelete='CASCADE' in Field()\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/cascade-delete-relationships.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n    team_id: int | None = Field(\n        default=None,\n        foreign_key=\"team.id\",\n        ondelete=\"CASCADE\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Hero Records with UUID\nDESCRIPTION: Demonstrates creating a new Hero instance with an auto-generated UUID and accessing the ID field. Shows how the UUID is generated before database insertion and remains consistent throughout the operation.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/advanced/uuid.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\nprint(\"The hero before saving in the DB\")\nprint(hero_1)\nprint(\"The hero ID was already set\")\nprint(hero_1.id)\n\nsession.add(hero_1)\nsession.commit()\nsession.refresh(hero_1)\n\nprint(\"After saving in the DB\")\nprint(hero_1)\n```\n\n----------------------------------------\n\nTITLE: Creating a Team with Heroes in SQLModel\nDESCRIPTION: Shows how to create a Team instance by first creating Hero instances and then passing them in the heroes list parameter, demonstrating the reverse relationship direction.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/create-and-update-relationships.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\"sqlite:///database.db\")\n\nwith Session(engine) as session:\n    # Create a team with heroes\n    hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\")\n    hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n    team_wakaland = Team(\n        name=\"Wakaland\",\n        headquarters=\"Wakaland Capital City\",\n        heroes=[hero_black_lion, hero_sure_e],\n    )\n    session.add(team_wakaland)\n    session.commit()\n```\n\n----------------------------------------\n\nTITLE: Defining Response Model for List of Heroes in FastAPI with SQLModel\nDESCRIPTION: Example of using response_model with list[Hero] to define the schema for a list of Hero objects in the response. This allows the API docs to show the expected response format for collections.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/response-model.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/heroes/\", response_model=list[Hero])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n```\n\n----------------------------------------\n\nTITLE: Using Expressions in SQLModel WHERE Clause (Python)\nDESCRIPTION: Demonstrates how to use expressions in the WHERE clause of a SQLModel query to filter data based on a condition.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/where.md#2025-04-13_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nselect(Hero).where(Hero.name == \"Deadpond\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Relationships in SQLModel\nDESCRIPTION: Demonstrates how to access deeply nested relationships between Hero and Team objects, showcasing the circular reference capability in SQLModel.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/code-structure.md#2025-04-13_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nhero.team.heroes[0].team.heroes[1].team.heroes[2].name\n```\n\n----------------------------------------\n\nTITLE: Executing a SELECT Statement with WHERE Clause in SQLModel (Python)\nDESCRIPTION: Demonstrates how to execute a SELECT statement with a WHERE clause using SQLModel and iterate over the results.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/where.md#2025-04-13_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nstatement = select(Hero).where(Hero.name == \"Deadpond\")\nresults = session.exec(statement)\n\nfor hero in results:\n    print(hero)\n```\n\n----------------------------------------\n\nTITLE: Printing Data Objects to Show Relationship Contents\nDESCRIPTION: Shows how to print the Hero and Team objects, including the relationship between them, to visualize the data before making changes.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/back-populates.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nhero_spider_boy = session.exec(\n    select(Hero).where(Hero.name == \"Spider-Boy\")\n).one()\n\npreventers_team = session.exec(\n    select(Team).where(Team.name == \"Preventers\")\n).one()\n\nprint(\"Preventers Team Heroes:\", preventers_team.heroes)\nprint(\"Spider-Boy:\", hero_spider_boy)\n```\n\n----------------------------------------\n\nTITLE: Creating Models with Decimal Values in SQLModel\nDESCRIPTION: Demonstrates creating Hero instances with floating-point values that get automatically converted to Decimal types. The create_db_and_tables function sets up the database schema.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/advanced/decimal.md#2025-04-13_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\", money=1.1)\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", money=0.0)\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", money=2.2)\n\n    engine = create_engine(\"sqlite:///database.db\")\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.commit()\n```\n\n----------------------------------------\n\nTITLE: Creating Instances with Fields in SQLModel\nDESCRIPTION: Traditional approach to creating Team and Hero instances where teams must be added and committed to the session first to generate IDs before creating heroes that reference them.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/create-and-update-relationships.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Create some teams\nteam_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\nteam_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\nsession.add(team_preventers)\nsession.add(team_z_force)\nsession.commit()\n\n# Create some heroes\nhero_deadpond = Hero(\n    name=\"Deadpond\",\n    secret_name=\"Dive Wilson\",\n    team_id=team_z_force.id,\n)\nhero_rusty_man = Hero(\n    name=\"Rusty-Man\",\n    secret_name=\"Tommy Sharp\",\n    team_id=team_preventers.id,\n)\nhero_spider_boy = Hero(\n    name=\"Spider-Boy\",\n    secret_name=\"Pedro Parqueador\",\n    team_id=team_preventers.id,\n)\n\nsession.add(hero_deadpond)\nsession.add(hero_rusty_man)\nsession.add(hero_spider_boy)\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Reading First Row with SQLModel\nDESCRIPTION: Demonstrates how to read the first row from a filtered query result using the first() method.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/one.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as session:\n    statement = select(Hero).where(Hero.age <= 35)\n    results = session.exec(statement)\n    hero = results.first()\n    print(\"Hero:\", hero)\n```\n\n----------------------------------------\n\nTITLE: Correct SQLModel Table Creation\nDESCRIPTION: Proper implementation of table creation by importing models before metadata creation.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/create-db-and-table.md#2025-04-13_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlmodel import SQLModel\n\nfrom . import models\nfrom .db import engine\n\nSQLModel.metadata.create_all(engine)\n```\n\n----------------------------------------\n\nTITLE: Committing Session Changes and Printing Hero Objects\nDESCRIPTION: Demonstrates committing session changes to save the heroes to the database. After commit, the objects are marked as expired which causes them to print without data until their attributes are accessed.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/automatic-id-none-refresh.md#2025-04-13_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as session:\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n    \n    print(\"After adding to the session\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n    \n    session.commit()\n    \n    print(\"After committing the session\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n```\n\n----------------------------------------\n\nTITLE: Including Relationship Objects on the Many Side in SQLModel\nDESCRIPTION: Demonstrates how to add heroes to a team by appending them to the team's heroes list attribute, showing how to work with the 'many' side of a many-to-one relationship.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/create-and-update-relationships.md#2025-04-13_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\"sqlite:///database.db\")\n\nwith Session(engine) as session:\n    # Add heroes to a team\n    hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\")\n    hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\")\n    hero_cap = Hero(\n        name=\"Captain North America\", secret_name=\"Esteban Rogelios\"\n    )\n    team_preventers.heroes.append(hero_tarantula)\n    team_preventers.heroes.append(hero_dr_weird)\n    team_preventers.heroes.append(hero_cap)\n    session.add(team_preventers)\n    session.commit()\n```\n\n----------------------------------------\n\nTITLE: Executing a SELECT Statement\nDESCRIPTION: Demonstrates executing a prepared select statement using the database session to retrieve data from the database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/select.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresults = session.exec(statement)\n```\n\n----------------------------------------\n\nTITLE: Adding an Index to a SQLModel Model\nDESCRIPTION: Updated Hero model with an index on the 'name' field. By setting index=True in the Field constructor, SQLModel will create an index for this column when generating the database schema.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/indexes.md#2025-04-13_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = None\n```\n\n----------------------------------------\n\nTITLE: Using OR Logic in SQLModel WHERE Clause (Python)\nDESCRIPTION: Shows how to use OR logic in a SQLModel WHERE clause to filter data based on multiple conditions where any can be true.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/where.md#2025-04-13_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlmodel import or_\n\n# ... (other imports and setup)\n\nstatement = select(Hero).where(or_(Hero.age <= 35, Hero.age > 90))\nresults = session.exec(statement)\n\nfor hero in results:\n    print(hero)\n```\n\n----------------------------------------\n\nTITLE: Accessing Hero Attributes to Trigger Data Refresh\nDESCRIPTION: Shows how accessing specific object attributes like ID triggers SQLModel to refresh the data from the database after a commit. This demonstrates the lazy-loading behavior of SQLModel objects.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/automatic-id-none-refresh.md#2025-04-13_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as session:\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n    \n    print(\"After adding to the session\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n    \n    session.commit()\n    \n    print(\"After committing the session\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n    \n    print(\"After committing the session, show IDs\")\n    print(\"Hero 1 ID:\", hero_1.id)\n    print(\"Hero 2 ID:\", hero_2.id)\n    print(\"Hero 3 ID:\", hero_3.id)\n    \n    print(\"After committing the session, show names\")\n    print(\"Hero 1 name:\", hero_1.name)\n    print(\"Hero 2 name:\", hero_2.name)\n    print(\"Hero 3 name:\", hero_3.name)\n```\n\n----------------------------------------\n\nTITLE: Updating Heroes Before Deleting Team with RESTRICT\nDESCRIPTION: This code snippet shows how to update heroes by disassociating them from a team before deleting the team when RESTRICT is in place.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/cascade-delete-relationships.md#2025-04-13_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as session:\n    team = session.exec(select(Team).where(Team.name == \"Wakaland\")).one()\n    print(f\"Team Wakaland: {team}\")\n\n    team.heroes.clear()\n    session.add(team)\n    session.commit()\n    print(f\"Team with removed heroes: {team}\")\n\n    session.delete(team)\n    session.commit()\n```\n\n----------------------------------------\n\nTITLE: Creating Hero Records with Team References\nDESCRIPTION: Creates hero records with team relationships using foreign keys. Shows how to create heroes with and without team associations.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/create-connected-rows.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", \n            secret_name=\"Pedro Parqueador\"\n        )\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Column Name in SQLModel WHERE Clause (Python)\nDESCRIPTION: Shows the correct way to use a column name in a WHERE clause expression, which would be autocompleted by the editor.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/where.md#2025-04-13_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nselect(Hero).where(Hero.secret_name == \"Pedro Parqueador\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Session for Database Operations\nDESCRIPTION: Demonstrates creating a new database session to perform read operations. Sessions are created for each group of database operations.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/select.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as session:\n```\n\n----------------------------------------\n\nTITLE: Updating Path Operations to Include Relationship Data\nDESCRIPTION: Updates the path operations to use the new models that include relationship data, allowing the API to return related data.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/relationships.md#2025-04-13_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublicWithTeam)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublicWithHeroes)\ndef read_team(team_id: int):\n    with Session(engine) as session:\n        team = session.get(Team, team_id)\n        if not team:\n            raise HTTPException(status_code=404, detail=\"Team not found\")\n        return team\n```\n\n----------------------------------------\n\nTITLE: Defining Base Hero Model with Inheritance\nDESCRIPTION: Shows how to create a base model class that contains common fields shared across different hero-related models to avoid code duplication.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/multiple-models.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass HeroBase(SQLModel):\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n```\n\n----------------------------------------\n\nTITLE: Using col() Function in SQLModel's .where() Method for Python\nDESCRIPTION: This code demonstrates how to use the col() function in SQLModel's .where() method to filter query results. It wraps the Hero.age attribute in col() to resolve type annotation issues in the editor.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/where.md#2025-04-13_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nstatement = select(Hero).where(col(Hero.age) > 35)\nresults = session.exec(statement)\nfor hero in results:\n    print(hero)\n```\n\n----------------------------------------\n\nTITLE: Importing select and Defining Models in SQLModel\nDESCRIPTION: This snippet shows the import of the select function and the definition of Hero and Team models with a many-to-many relationship.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/many-to-many/update-remove-relationships.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# ... (rest of the model definitions)\n```\n\n----------------------------------------\n\nTITLE: Refreshing and Printing Hero Records\nDESCRIPTION: Demonstrates how to refresh hero records from the database and print their details including team associations.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/create-connected-rows.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n```\n\n----------------------------------------\n\nTITLE: Defining FastAPI Application with SQLModel Hero Models\nDESCRIPTION: This code snippet shows the main FastAPI application file with hero models using SQLModel. It includes route definitions and a session dependency.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/tests.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n./docs_src/tutorial/fastapi/app_testing/tutorial001/main.py ln[0]\n```\n\n----------------------------------------\n\nTITLE: Creating Database Indexes in SQLModel/Python\nDESCRIPTION: Code snippet showing how to create database indexes for optimizing query performance. Marked as a preview/sneak-peek example for experienced SQL users.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/indexes.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n./docs_src/tutorial/indexes/tutorial002_py310.py ln[0]\n```\n\n----------------------------------------\n\nTITLE: Combining WHERE with LIMIT and OFFSET\nDESCRIPTION: Demonstrates how to combine filtering conditions with pagination using WHERE, LIMIT, and OFFSET.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/limit-and-offset.md#2025-04-13_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef select_heroes():\n    statement = select(Hero).where(Hero.age > 32).offset(1).limit(2)\n    results = session.exec(statement)\n    heroes = results.all()\n    print(\"Filtered and paginated heroes:\", heroes)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Hero from the Session in Python\nDESCRIPTION: This snippet shows how to delete a hero object from the session using SQLModel's session.delete() method.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/delete.md#2025-04-13_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef delete_heroes(session: Session):\n    statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n    results = session.exec(statement)\n    hero = results.one()\n    print(\"Hero: \", hero)\n\n    session.delete(hero)\n    session.commit()\n```\n\n----------------------------------------\n\nTITLE: Testing FastAPI Hero Creation with TestClient\nDESCRIPTION: Test code that validates the creation of a hero through a FastAPI endpoint. Verifies the response status code, hero attributes, and database ID assignment using TestClient assertions.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001/annotations/en/test_main_001.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.testclient import TestClient\nfrom main import app\n\nclient = TestClient(app)\n\nresponse = client.post(\"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"})\ndata = response.json()\n\nassert response.status_code == 200\nassert data[\"name\"] == \"Deadpond\"\nassert data[\"secret_name\"] == \"Dive Wilson\"\nassert data[\"age\"] is None\nassert data[\"id\"] is not None\n```\n\n----------------------------------------\n\nTITLE: Retrieving a List of Hero Objects with SQLModel in Python\nDESCRIPTION: This snippet demonstrates how to use SQLModel to query the database and retrieve all Hero objects as a list. It uses the select() function and the session.exec() method, then calls .all() to get all results.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/select.md#2025-04-13_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nstatement = select(Hero)\nresults = session.exec(statement)\nheroes = results.all()\nprint(heroes)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Hero Entries in SQLModel (Python)\nDESCRIPTION: Illustrates how to create multiple hero entries in the database using SQLModel to set up data for comparison examples.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/where.md#2025-04-13_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n    session.add(hero_4)\n    session.add(hero_5)\n    session.add(hero_6)\n    session.add(hero_7)\n\n    session.commit()\n\n    session.close()\n```\n\n----------------------------------------\n\nTITLE: Executing Database Table Creation\nDESCRIPTION: Calls the create_db_and_tables function from the main function, which is executed when the script runs directly. This creates all the defined tables in the database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/many-to-many/create-models-with-link.md#2025-04-13_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Results with first()\nDESCRIPTION: Shows how to handle cases where no rows match the query criteria using first(), which returns None for empty results.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/one.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as session:\n    statement = select(Hero).where(Hero.age <= 25)\n    results = session.exec(statement)\n    hero = results.first()\n    print(\"Hero:\", hero)\n```\n\n----------------------------------------\n\nTITLE: Deleting Team with Cascade Delete\nDESCRIPTION: Example showing how to delete a team record which will automatically delete associated heroes due to cascade configuration\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/cascade-delete-relationships.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstatement = select(Team).where(Team.name == \"Wakaland\")\nresult = session.exec(statement)\nteam = result.one()\n\nsession.delete(team)\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: JSON Response with Team and Heroes Relationship Data\nDESCRIPTION: Shows the enhanced JSON response format for a team that now includes the list of heroes on that team.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/relationships.md#2025-04-13_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"name\": \"Preventers\",\n    \"headquarters\": \"Sharp Tower\",\n    \"id\": 2,\n    \"heroes\": [\n        {\n            \"name\": \"Rusty-Man\",\n            \"secret_name\": \"Tommy Sharp\",\n            \"age\": 48,\n            \"team_id\": 2,\n            \"id\": 2\n        },\n        {\n            \"name\": \"Spider-Boy\",\n            \"secret_name\": \"Pedro Parqueador\",\n            \"age\": null,\n            \"team_id\": 2,\n            \"id\": 3\n        },\n        {\n            \"name\": \"Tarantula\",\n            \"secret_name\": \"Natalia Roman-on\",\n            \"age\": 32,\n            \"team_id\": 2,\n            \"id\": 6\n        },\n        {\n            \"name\": \"Dr. Weird\",\n            \"secret_name\": \"Steve Weird\",\n            \"age\": 36,\n            \"team_id\": 2,\n            \"id\": 7\n        },\n        {\n            \"name\": \"Captain North America\",\n            \"secret_name\": \"Esteban Rogelios\",\n            \"age\": 93,\n            \"team_id\": 2,\n            \"id\": 8\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: SQLModel Query with Editor Support\nDESCRIPTION: Example of using SQLModel for queries, which provides editor features like autocompletion and error checking for model attributes.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/db-to-code.md#2025-04-13_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndatabase.execute(\n    select(Hero).where(Hero.secret_name == \"Dive Wilson\")\n).all()\n```\n\n----------------------------------------\n\nTITLE: Creating Model Instances in Python with SQLModel\nDESCRIPTION: Demonstrates how to create instances of the Hero model, representing rows in the database table. Each instance has values for name and secret_name fields, with the third instance also including an age value.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/README.md#2025-04-13_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nhero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\nhero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nhero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n```\n\n----------------------------------------\n\nTITLE: Querying Exactly One Row\nDESCRIPTION: Demonstrates using the one() method to ensure exactly one row matches the query, raising an error if multiple or no rows are found.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/one.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as session:\n    statement = select(Hero).where(Hero.name == \"Deadpond\")\n    results = session.exec(statement)\n    hero = results.one()\n    print(\"Hero:\", hero)\n```\n\n----------------------------------------\n\nTITLE: Importing select from SQLModel\nDESCRIPTION: Shows how to import the select function from SQLModel for building database queries.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/select.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlmodel import select\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Hero Data in SQLModel\nDESCRIPTION: Creates multiple hero records in the database to demonstrate range selection examples.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/limit-and-offset.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n    session.add(hero_4)\n    session.add(hero_5)\n    session.add(hero_6)\n    session.add(hero_7)\n    session.commit()\n```\n\n----------------------------------------\n\nTITLE: Getting List of Heroes from Team Using Relationship Attributes in SQLModel Python\nDESCRIPTION: Accessing the 'many' side of a one-to-many relationship by getting all heroes belonging to a team using the relationship attribute. This returns a list of Hero objects.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/read-relationships.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef select_heroes():\n    with Session(engine) as session:\n        team = session.exec(select(Team).where(Team.name == \"Preventers\")).first()\n        print(\"Team:\", team)\n        \n        print(\"Preventers heroes:\", team.heroes)\n```\n\n----------------------------------------\n\nTITLE: Multiple Heroes Update with SQLModel\nDESCRIPTION: Example showing how to update multiple heroes and multiple fields in a single transaction using SQLModel.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/update.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef update_heroes(session: Session):\n    hero_spider = select(Hero).where(Hero.name == \"Spider-Boy\").first()\n    hero_spider.age = 16\n    hero_spider.secret_name = \"Pedro Parqueador Junior\"\n    \n    hero_deadpond = select(Hero).where(Hero.name == \"Deadpond\").first()\n    hero_deadpond.age = 25\n    hero_deadpond.secret_name = \"Dive Wilson Senior\"\n    \n    session.add_all([hero_spider, hero_deadpond])\n    session.commit()\n    \n    session.refresh(hero_spider)\n    session.refresh(hero_deadpond)\n    print(\"Updated hero:\", hero_spider)\n    print(\"Updated hero:\", hero_deadpond)\n```\n\n----------------------------------------\n\nTITLE: Updating Link Relationship Attributes in SQLModel\nDESCRIPTION: Code showing how to iterate through hero-team links to find and update specific relationships, such as changing a hero's training status.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/many-to-many/link-with-extra-fields.md#2025-04-13_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef update_heroes():\n    # Previous code omitted\n    \n    hero = session.exec(select(Hero).where(Hero.name == \"Spider-Boy\")).one()\n    for link in hero.team_links:\n        if link.team.name == \"Preventers\":\n            link.is_training = False\n\n    session.commit()\n```\n\n----------------------------------------\n\nTITLE: Using Less Than Comparison in SQLModel WHERE Clause (Python)\nDESCRIPTION: Illustrates how to use the less than (<) comparison operator in a SQLModel WHERE clause to filter data.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/where.md#2025-04-13_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nstatement = select(Hero).where(Hero.age < 35)\nresults = session.exec(statement)\n\nfor hero in results:\n    print(hero)\n```\n\n----------------------------------------\n\nTITLE: Defining SQLModel Hero Model with UUID Primary Key\nDESCRIPTION: Creates a Hero model class using SQLModel with a UUID primary key field that auto-generates values using uuid4. The model includes basic hero attributes and uses uuid.uuid4 as the default_factory for ID generation.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/advanced/uuid.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\nimport uuid\nfrom sqlmodel import Field, SQLModel\n\n\nclass Hero(SQLModel, table=True):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n```\n\n----------------------------------------\n\nTITLE: Compact Query with first()\nDESCRIPTION: Shows a more concise way to write queries using method chaining.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/one.md#2025-04-13_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as session:\n    hero = session.exec(select(Hero).where(Hero.name == \"Deadpond\")).first()\n    print(\"Hero:\", hero)\n```\n\n----------------------------------------\n\nTITLE: Configuring RESTRICT Behavior in SQLModel Relationships\nDESCRIPTION: This code snippet demonstrates how to set up RESTRICT behavior for deleting related records. It uses ondelete='RESTRICT' in the Hero model and passive_deletes='all' in the Team model.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/cascade-delete-relationships.md#2025-04-13_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional, List\nfrom sqlmodel import Field, Relationship, SQLModel\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\")\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n```\n\n----------------------------------------\n\nTITLE: SQLModel Hero Class Definition\nDESCRIPTION: Definition of a Hero model class using SQLModel, demonstrating how database tables are represented as Python classes with type annotations.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/db-to-code.md#2025-04-13_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nclass Hero(SQLModel):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n```\n\n----------------------------------------\n\nTITLE: Defining Response Model for Single Hero in FastAPI with SQLModel\nDESCRIPTION: Example of using response_model parameter in a FastAPI endpoint to define the schema for a single Hero object response. This tells FastAPI what data schema to expect in the response.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/response-model.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/heroes/{hero_id}\", response_model=Hero)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n```\n\n----------------------------------------\n\nTITLE: Defining Dependency Override for Database Session in FastAPI\nDESCRIPTION: This snippet demonstrates how to define a dependency override function for a database session in FastAPI. It replaces the original get_session dependency with a new function that returns a different session, typically used for testing with a separate database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001_py310/annotations/en/test_main_002.md#2025-04-13_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nsession: Session = Depends(get_session)\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables for Testing with SQLModel\nDESCRIPTION: Code to create all database tables in the testing environment. This relies on SQLModel.metadata which is automatically populated when models are imported.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001/annotations/en/test_main_003.md#2025-04-13_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nSQLModel.metadata.create_all(engine)\n```\n\n----------------------------------------\n\nTITLE: Creating an Index with SQL Syntax\nDESCRIPTION: SQL command to create an index named 'ix_hero_name' on the 'name' column of the 'hero' table. This demonstrates the standard SQL syntax for index creation.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/indexes.md#2025-04-13_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE INDEX ix_hero_name\nON hero (name)\n```\n\n----------------------------------------\n\nTITLE: Adding a Hero to a Team in SQLModel\nDESCRIPTION: This snippet demonstrates how to add a many-to-many relationship by adding Spider-Boy to the Z-Force team.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/many-to-many/update-remove-relationships.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n```\n\n----------------------------------------\n\nTITLE: Filtering Heroes with WHERE Clause in SQL\nDESCRIPTION: SQL query demonstrating how to filter heroes using a WHERE clause to select only Deadpond.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/where.md#2025-04-13_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name, secret_name, age\nFROM hero\nWHERE name = \"Deadpond\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Session in Python\nDESCRIPTION: Creates a new database session using the engine. The session will be used to manage transactions and interact with the database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/insert.md#2025-04-13_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    \n    session = Session(engine)\n```\n\n----------------------------------------\n\nTITLE: Refreshing Session Objects in SQLModel\nDESCRIPTION: Demonstrates how to explicitly refresh database objects using session.refresh() and handle object states after session operations. Shows interaction patterns between session and database objects.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/automatic-id-none-refresh.md#2025-04-13_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\nhero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\nhero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nhero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\nengine = create_engine(\"sqlite:///database.db\", echo=True)\n\nSQLModel.metadata.create_all(engine)\n\nwith Session(engine) as session:\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n    session.commit()\n    session.refresh(hero_1)\n    session.refresh(hero_2)\n    session.refresh(hero_3)\n    print(\"After refreshing the heroes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Request for Partial Update\nDESCRIPTION: Example JSON payload demonstrating how to send a partial update request to update specific fields of a hero record.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/update.md#2025-04-13_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"name\": \"Deadpuddle\"\n}\n```\n\n----------------------------------------\n\nTITLE: SQLite Foreign Key Support Configuration\nDESCRIPTION: Code showing how to enable foreign key support in SQLite for testing cascade delete functionality.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/cascade-delete-relationships.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import event\n\n@event.listens_for(engine.sync_engine, \"connect\")\ndef set_sqlite_pragma(dbapi_connection, connection_record):\n    cursor = dbapi_connection.cursor()\n    cursor.execute(\"PRAGMA foreign_keys=ON\")\n    cursor.close()\n```\n\n----------------------------------------\n\nTITLE: Basic SQL SELECT Statement\nDESCRIPTION: Shows the basic syntax of a SQL SELECT statement for retrieving all columns from a table.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/select.md#2025-04-13_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name, secret_name, age\nFROM hero\n```\n\n----------------------------------------\n\nTITLE: FastAPI Dependency Parameter Example in Python\nDESCRIPTION: Example showing how dependency injection is typically used in FastAPI route handlers to get database sessions. This pattern is common across path operation functions that need database access.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001_py39/annotations/en/test_main_002.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsession: Session = Depends(get_session)\n```\n\n----------------------------------------\n\nTITLE: Breaking Database Connection by Setting Foreign Key to None in Python\nDESCRIPTION: Updates a hero record to remove its team association by setting the team_id foreign key to None. The code first gets the hero by ID, sets team_id to None, commits the change, and refreshes the record to show the updated state.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/remove-data-connections.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nhero = session.get(Hero, 3)\nprint(\"Preventer Hero:\", hero)\nhero.team_id = None\nsession.add(hero)\nsession.commit()\nsession.refresh(hero)\nprint(\"No longer Preventer:\", hero)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with SQL INSERT Statement\nDESCRIPTION: Demonstrates the SQL syntax for inserting a new record into the 'hero' table. This SQL statement creates a new row with values for the name and secret_name columns.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/insert.md#2025-04-13_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO \"hero\" (\"name\", \"secret_name\")\nVALUES (\"Deadpond\", \"Dive Wilson\");\n```\n\n----------------------------------------\n\nTITLE: Compact Version of Querying Hero Objects with SQLModel in Python\nDESCRIPTION: This snippet shows a more compact way to retrieve all Hero objects from the database using SQLModel. It combines the select statement, session execution, and retrieval of all results into a single line of code.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/select.md#2025-04-13_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nheroes = session.exec(select(Hero)).all()\nprint(heroes)\n```\n\n----------------------------------------\n\nTITLE: Deleting Data with SQL\nDESCRIPTION: This SQL snippet shows how to delete a specific hero from the database using a DELETE statement.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/delete.md#2025-04-13_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE\nFROM hero\nWHERE name = \"Spider-Youngster\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Results Error with one()\nDESCRIPTION: Shows how one() raises an error when multiple rows match the query criteria.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/one.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as session:\n    statement = select(Hero).where(Hero.age <= 35)\n    results = session.exec(statement)\n    hero = results.one()\n    print(\"Hero:\", hero)\n```\n\n----------------------------------------\n\nTITLE: Removing a Hero from a Team in SQLModel\nDESCRIPTION: This code shows how to remove a many-to-many relationship by removing Spider-Boy from the Z-Force team.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/many-to-many/update-remove-relationships.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef update_heroes():\n    with Session(engine) as session:\n        # ... (previous code)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n```\n\n----------------------------------------\n\nTITLE: Configuring FastAPI Session Dependency Override\nDESCRIPTION: Example showing how to use dependency parameters in FastAPI path operations. This pattern is used when defining routes that require database session access.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001/annotations/en/test_main_002.md#2025-04-13_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nsession: Session = Depends(get_session)\n```\n\n----------------------------------------\n\nTITLE: Adding Model Instances to Session\nDESCRIPTION: Adds the Hero model instances to the session. At this point, the data is still only in memory and not yet saved to the database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/insert.md#2025-04-13_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    \n    session = Session(engine)\n    \n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n```\n\n----------------------------------------\n\nTITLE: SQL Query with WHERE Clause\nDESCRIPTION: SQL query that filters results based on a specific record ID. This demonstrates how parameters are used in SQL statements.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/db-to-code.md#2025-04-13_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT *\nFROM hero\nWHERE id = 2;\n```\n\n----------------------------------------\n\nTITLE: Testing POST Request Using FastAPI TestClient\nDESCRIPTION: Test case that creates a new hero via POST request and validates the response. It checks the status code, hero attributes like name, secret_name, age, and verifies the database-generated ID.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001_py310/annotations/en/test_main_001.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.testclient import TestClient\nfrom main import app\n\nclient = TestClient(app)\n\nresponse = client.post(\"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"})\ndata = response.json()\n\nassert response.status_code == 200\nassert data[\"name\"] == \"Deadpond\"\nassert data[\"secret_name\"] == \"Dive Wilson\"\nassert data[\"age\"] is None\nassert data[\"id\"] is not None\n```\n\n----------------------------------------\n\nTITLE: LEFT OUTER JOIN in SQLModel\nDESCRIPTION: Python code using SQLModel to perform a LEFT OUTER JOIN between Hero and Team models using isouter=True parameter.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/read-connected-data.md#2025-04-13_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nstatement = select(Hero, Team).join(Team, isouter=True)\nresults = session.exec(statement)\n\nfor hero, team in results:\n    print(\"Hero:\", hero, \"Team:\", team)\n```\n\n----------------------------------------\n\nTITLE: Relative Imports in SQLModel Project\nDESCRIPTION: Shows how to use relative imports in a SQLModel project structure, importing models and database components from sibling modules.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/code-structure.md#2025-04-13_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom .models import Hero, Team\nfrom .database import engine\n```\n\n----------------------------------------\n\nTITLE: Running SQLModel Script with Many-to-Many Relationships\nDESCRIPTION: This console output demonstrates the execution of a Python script using SQLModel. It shows SQL queries for selecting, updating, and committing data related to heroes and teams, including link model operations.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/many-to-many/link-with-extra-fields.md#2025-04-13_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ python app.py\n\n// Previous output omitted 🙈\n\n// Automatically fetch team data on attribute access\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [generated in 0.00015s] (2,)\n\n// Update link row\nINFO Engine UPDATE heroteamlink SET is_training=? WHERE heroteamlink.team_id = ? AND heroteamlink.hero_id = ?\nINFO Engine [generated in 0.00020s] (0, 2, 2)\n\n// Save current transaction to database\nINFO Engine COMMIT\n\n// Automatically start a new transaction\nINFO Engine BEGIN (implicit)\n\n// Automatically fetch data on attribute access\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.2004s ago] (2,)\nINFO Engine SELECT heroteamlink.team_id AS heroteamlink_team_id, heroteamlink.hero_id AS heroteamlink_hero_id, heroteamlink.is_training AS heroteamlink_is_training\nFROM heroteamlink\nWHERE ? = heroteamlink.hero_id\nINFO Engine [cached since 0.1005s ago] (2,)\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [cached since 0.09707s ago] (2,)\n\n// Print Spider-Boy team, including link data, if is training\nSpider-Boy team: headquarters='Sharp Tower' id=2 name='Preventers' is training: False\n\n// Automatically fetch data on attribute access\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [cached since 0.2097s ago] (1,)\n\n// Print Spider-Boy team, including link data, if is training\nSpider-Boy team: headquarters='Sister Margaret's Bar' id=1 name='Z-Force' is training: True\nINFO Engine ROLLBACK\n```\n\n----------------------------------------\n\nTITLE: Creating Hero Table with Foreign Key in SQL\nDESCRIPTION: SQL statement for creating the hero table with a foreign key reference to the team table. This shows how the relationship is represented at the SQL level.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/create-connected-tables.md#2025-04-13_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE hero (\n    id INTEGER,\n    name TEXT NOT NULL,\n    secret_name TEXT NOT NULL,\n    age INTEGER,\n    team_id INTEGER,\n    PRIMARY KEY (id),\n    FOREIGN KEY(team_id) REFERENCES team (id)\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Override in FastAPI Application\nDESCRIPTION: This code shows how to set up a dependency override in a FastAPI application. It uses the app.dependency_overrides dictionary to replace the original get_session dependency with a new get_session_override function.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001_py310/annotations/en/test_main_002.md#2025-04-13_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\napp.dependency_overrides[get_session] = get_session_override\n```\n\n----------------------------------------\n\nTITLE: SQL Update Statement Example\nDESCRIPTION: Basic SQL UPDATE statement showing how to modify a hero's age in the database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/update.md#2025-04-13_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE hero\nSET age=16\nWHERE name = \"Spider-Boy\"\n```\n\n----------------------------------------\n\nTITLE: Creating TestClient Fixture with Dependency Override\nDESCRIPTION: Creates a pytest fixture that sets up a TestClient instance with session dependency override for testing FastAPI applications. The fixture handles both setup and cleanup of dependency overrides using yield.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001/annotations/en/test_main_006.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef client(session):\n    def get_session_override():\n        return session\n    \n    app.dependency_overrides[get_session] = get_session_override\n    client = TestClient(app)\n    yield client\n    app.dependency_overrides.clear()\n```\n\n----------------------------------------\n\nTITLE: Creating Hero Model Instances in Python\nDESCRIPTION: Creates instances of the Hero model to represent rows that will be inserted into the database. This demonstrates creating Python objects in memory before they're saved to the database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/insert.md#2025-04-13_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nhero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\nheroes_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nhero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n```\n\n----------------------------------------\n\nTITLE: Using Greater Than Comparison in SQLModel WHERE Clause (Python)\nDESCRIPTION: Demonstrates how to use the greater than (>) comparison operator in a SQLModel WHERE clause to filter data.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/where.md#2025-04-13_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nstatement = select(Hero).where(Hero.age > 35)\nresults = session.exec(statement)\n\nfor hero in results:\n    print(hero)\n```\n\n----------------------------------------\n\nTITLE: SQL SELECT with Specific Columns\nDESCRIPTION: Shows how to select only specific columns from a database table using SQL.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/select.md#2025-04-13_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name\nFROM hero\n```\n\n----------------------------------------\n\nTITLE: Creating Team Table in SQL\nDESCRIPTION: SQL statement for creating the team table with id, name, and headquarters columns. This is the SQL equivalent of the Team SQLModel class definition.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/create-connected-tables.md#2025-04-13_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE team (\n    id INTEGER,\n    name TEXT NOT NULL,\n    headquarters TEXT NOT NULL,\n    PRIMARY KEY (id)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Password Hashing Function\nDESCRIPTION: Implements a fake password hashing function for demonstration purposes. In a real application, this would use a secure hashing library like passlib.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/update-extra-data.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_password_hash(password: str) -> str:\n    return f\"fakehashed{password}\"\n\n# Later in code\nhashed_password = get_password_hash(hero.password)\n```\n\n----------------------------------------\n\nTITLE: Output of Displaying Hero Object After Session Closure in Python\nDESCRIPTION: This snippet shows the output of printing a Hero object after the session has been closed. It demonstrates that all attributes of the Hero object are still accessible and retain their values.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/automatic_id_none_refresh/annotations/en/tutorial002.md#2025-04-13_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nHero 3: age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\n```\n\n----------------------------------------\n\nTITLE: Creating Hero Model Class in Python\nDESCRIPTION: Define the Hero class model that represents the hero table in the database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/select/annotations/en/tutorial002.md#2025-04-13_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass Hero(SQLModel, table=True):\n    # Define fields here\n```\n\n----------------------------------------\n\nTITLE: Creating SQLModel Engine and Database Tables\nDESCRIPTION: Shows how to create a SQLAlchemy engine and a function to create database tables for SQLModel in a separate database file.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/code-structure.md#2025-04-13_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlmodel import SQLModel, create_engine\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n```\n\n----------------------------------------\n\nTITLE: Using Greater Than or Equal Comparison in SQLModel WHERE Clause (Python)\nDESCRIPTION: Shows how to use the greater than or equal to (>=) comparison operator in a SQLModel WHERE clause to filter data.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/where.md#2025-04-13_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nstatement = select(Hero).where(Hero.age >= 35)\nresults = session.exec(statement)\n\nfor hero in results:\n    print(hero)\n```\n\n----------------------------------------\n\nTITLE: Team Deletion Code with SET NULL\nDESCRIPTION: Code snippet showing how to delete a team when SET NULL is configured.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/cascade-delete-relationships.md#2025-04-13_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nteam = session.exec(\n    select(Team).where(Team.id == team_id)\n).first()\nprint(f\"Team {team.name}: {team}\")\nsession.delete(team)\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Selecting by ID with where()\nDESCRIPTION: Demonstrates how to query a single row by its primary key ID using where().\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/one.md#2025-04-13_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as session:\n    statement = select(Hero).where(Hero.id == 1)\n    results = session.exec(statement)\n    hero = results.first()\n    print(\"Hero:\", hero)\n```\n\n----------------------------------------\n\nTITLE: Updating Main Function to Include Hero Updates\nDESCRIPTION: This code updates the main function to include a call to update_heroes(), which will modify the many-to-many relationships.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/many-to-many/update-remove-relationships.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    create_teams()\n    update_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Updating Objects Before Committing to Show Inconsistency\nDESCRIPTION: Demonstrates the issue with relationships without back_populates by updating an object and showing how the related collection doesn't update until committing.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/back-populates.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nhero_spider_boy = session.exec(\n    select(Hero).where(Hero.name == \"Spider-Boy\")\n).one()\n\nhero_spider_boy.team = None\nprint(\"Spider-Boy without team:\", hero_spider_boy)\nprint(\"Preventers Team Heroes again:\", preventers_team.heroes)\n```\n\n----------------------------------------\n\nTITLE: Printing Hero Objects Before Database Interaction\nDESCRIPTION: Shows how to print the Hero objects before adding them to the database to demonstrate that their ID values are None at this point, as defined by the default value in the model.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/automatic-id-none-refresh.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nhero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\nhero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nhero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\nprint(\"Before interacting with the database\")\nprint(\"Hero 1:\", hero_1)\nprint(\"Hero 2:\", hero_2)\nprint(\"Hero 3:\", hero_3)\n```\n\n----------------------------------------\n\nTITLE: Overriding FastAPI Dependency for Testing\nDESCRIPTION: This code shows how to override the get_session dependency in FastAPI tests to use a separate testing database. It includes creating a new session and using app.dependency_overrides.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/tests.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session\n\nfrom .main import app, Hero, get_session\n\nclient = TestClient(app)\n\n\ndef test_create_hero():\n    # Create a separate database session for testing\n    session = Session(testing_engine)\n\n    def get_session_override():\n        return session\n\n    app.dependency_overrides[get_session] = get_session_override\n\n    # Test code here\n    response = client.post(\"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"})\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpond\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] is not None\n\n# Code below omitted 👇\n```\n\n----------------------------------------\n\nTITLE: Using Less Than or Equal Comparison in SQLModel WHERE Clause (Python)\nDESCRIPTION: Demonstrates how to use the less than or equal to (<=) comparison operator in a SQLModel WHERE clause to filter data.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/where.md#2025-04-13_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nstatement = select(Hero).where(Hero.age <= 35)\nresults = session.exec(statement)\n\nfor hero in results:\n    print(hero)\n```\n\n----------------------------------------\n\nTITLE: Failed SQLModel Table Creation Example\nDESCRIPTION: Example showing incorrect table creation due to improper import ordering that results in empty metadata.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/create-db-and-table.md#2025-04-13_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlmodel import SQLModel\n\nfrom .db import engine\n\nSQLModel.metadata.create_all(engine)\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Synchronize the Database\nDESCRIPTION: Shows how committing changes to the database forces a refresh of the data and resolves the inconsistency issue that was present before the commit.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/back-populates.md#2025-04-13_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nhero_spider_boy = session.exec(\n    select(Hero).where(Hero.name == \"Spider-Boy\")\n).one()\n\nhero_spider_boy.team = None\nsession.add(hero_spider_boy)\nsession.commit()\n\nprint(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n```\n\n----------------------------------------\n\nTITLE: Adding Function to Main Execution in SQLModel Application (Python)\nDESCRIPTION: This code shows how to add the update_heroes() function to the main() function so it executes when the program runs. The function is called after creating heroes and teams, demonstrating the execution flow of the application.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/remove-relationships.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef main() -> None:\n    create_db_and_tables()\n    create_heroes()\n    create_teams()\n    update_heroes()\n```\n\n----------------------------------------\n\nTITLE: Creating Model Classes with Incomplete Relationship (without back_populates)\nDESCRIPTION: Defines Hero and Team model classes with relationship attributes but without using back_populates, which can lead to inconsistencies before committing changes to the database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/back-populates.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLModel Database URL for Testing\nDESCRIPTION: Shows how to specify a separate SQLite database URL for testing purposes, with thread checking disabled.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001/annotations/en/test_main_003.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsqlite:///testing.db\n```\n\n----------------------------------------\n\nTITLE: Confirming Cascade Deletion\nDESCRIPTION: Code that verifies the cascade deletion by checking if the related heroes were also deleted from the database\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/cascade-delete-relationships.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstatement = select(Hero).where(Hero.name == \"Black Lion\")\nresult = session.exec(statement)\nblack_lion = result.first()\nprint(\"Black Lion:\", black_lion)\n\nstatement = select(Hero).where(Hero.name == \"Princess Sure-E\")\nresult = session.exec(statement)\nprincess = result.first()\nprint(\"Princess Sure-E:\", princess)\n```\n\n----------------------------------------\n\nTITLE: Accessing Data After Session Closure in SQLModel\nDESCRIPTION: Shows how to access object data after closing the database session. Demonstrates that object data remains accessible even after session closure.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/automatic-id-none-refresh.md#2025-04-13_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprint(\"After the session closes\")\nprint(\"Hero 1:\", hero_1)\nprint(\"Hero 2:\", hero_2)\nprint(\"Hero 3:\", hero_3)\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function to Initialize Database\nDESCRIPTION: Defines and calls a main function that invokes the create_db_and_tables function. This is the entry point for initializing the database with the defined schema.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/create-connected-tables.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Removing a Relationship Between Entities in SQLModel (Python)\nDESCRIPTION: This code demonstrates how to remove a relationship between entities by setting the relationship attribute to None. In this example, Spider-Boy is removed from the Preventers team by setting hero.team to None and committing the changes to the database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/remove-relationships.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef update_heroes(session: Session) -> None:\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"Updated hero:\", hero_spider_boy)\n        print(\"Hero team:\", hero_spider_boy.team)\n```\n\n----------------------------------------\n\nTITLE: JSON Response with Hero and Team Relationship Data\nDESCRIPTION: Shows the enhanced JSON response format for a hero that now includes the team details.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/relationships.md#2025-04-13_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"name\": \"Deadpond\",\n    \"secret_name\": \"Dive Wilson\",\n    \"age\": null,\n    \"team_id\": 1,\n    \"id\": 1,\n    \"team\": {\n        \"name\": \"Z-Force\",\n        \"headquarters\": \"Sister Margaret's Bar\",\n        \"id\": 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQLite In-Memory Database in SQLModel\nDESCRIPTION: Demonstrates the correct URL format for connecting to an in-memory SQLite database, omitting the file name portion of the connection string.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001/annotations/en/test_main_004.md#2025-04-13_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsqlite://\n```\n\n----------------------------------------\n\nTITLE: Managing Database Session and Printing Hero Data in Python\nDESCRIPTION: Code to commit the session, refresh the hero data, and print hero information including their associated teams. Demonstrates how to access related data through relationship attributes.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/many-to-many/create-data.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    session.add(deadpond)\n    session.add(rusty_man)\n    session.add(spider_boy)\n    session.commit()\n\n    session.refresh(deadpond)\n    session.refresh(rusty_man)\n    session.refresh(spider_boy)\n\n    print(\"Deadpond:\", deadpond)\n    print(\"Deadpond teams:\", deadpond.teams)\n\n    print(\"Rusty-Man:\", rusty_man)\n    print(\"Rusty-Man Teams:\", rusty_man.teams)\n\n    print(\"Spider-Boy:\", spider_boy)\n    print(\"Spider-Boy Teams:\", spider_boy.teams)\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results with LIMIT\nDESCRIPTION: Shows how to limit the query results to first 3 records using the .limit() method.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/limit-and-offset.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef select_heroes():\n    statement = select(Hero).limit(3)\n    results = session.exec(statement)\n    heroes = results.all()\n    print(\"First 3 heroes:\", heroes)\n```\n\n----------------------------------------\n\nTITLE: SQL SELECT with Table Name Qualification\nDESCRIPTION: Demonstrates prefixing column names with table names in SQL SELECT statements for clarity and to avoid ambiguity.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/select.md#2025-04-13_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\n```\n\n----------------------------------------\n\nTITLE: Displaying Hero Object After Session Closure in Python\nDESCRIPTION: This code snippet demonstrates how to print a Hero object after closing the database session. It shows that the object's data persists even after the session is closed, indicating that SQLModel detaches the object from the session.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/automatic_id_none_refresh/annotations/en/tutorial002.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(hero_3)\n```\n\n----------------------------------------\n\nTITLE: Defining Base Models without Relationship Fields in FastAPI\nDESCRIPTION: Shows how the initial Hero and Team models are defined without relationship attributes, which is why related data is not included in responses.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/relationships.md#2025-04-13_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass HeroBase(SQLModel):\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass TeamBase(SQLModel):\n    name: str\n    headquarters: str\n\n\nclass TeamPublic(TeamBase):\n    id: int\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI Dependencies - Console Commands\nDESCRIPTION: Commands to install FastAPI and Uvicorn server with standard dependencies in a virtual environment.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/simple-hero-api.md#2025-04-13_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install fastapi \"uvicorn[standard]\"\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Selecting a Hero for Deletion in Python\nDESCRIPTION: This snippet demonstrates how to select a specific hero from the database using SQLModel, which will be used for deletion later.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/delete.md#2025-04-13_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef delete_heroes(session: Session):\n    statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n    results = session.exec(statement)\n    hero = results.one()\n    print(\"Hero: \", hero)\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables in Test Environment\nDESCRIPTION: Creates all registered tables in the testing database using SQLModel metadata. This ensures the test database schema matches the application models.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001_py39/annotations/en/test_main_003.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSQLModel.metadata.create_all(engine)\n```\n\n----------------------------------------\n\nTITLE: Selecting Heroes Using UUID Primary Key\nDESCRIPTION: Shows how to query and select Hero records using UUID primary keys, demonstrating the use of SQLModel's select statement with UUID comparison.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/advanced/uuid.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nhero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nsession.add(hero_2)\nsession.commit()\n\nprint(\"Created hero:\")\nprint(hero_2)\nprint(\"Created hero ID:\")\nprint(hero_2.id)\n\nstatement = select(Hero).where(Hero.id == hero_2.id)\nresult = session.exec(statement)\nselected_hero = result.one()\n\nprint(\"Selected hero:\")\nprint(selected_hero)\nprint(\"Selected hero ID:\")\nprint(selected_hero.id)\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Application - Uvicorn Commands\nDESCRIPTION: Commands to start the FastAPI application using Uvicorn server, including development mode with auto-reload.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/simple-hero-api.md#2025-04-13_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ uvicorn main:app\n\n$ uvicorn main:app --reload\n```\n\n----------------------------------------\n\nTITLE: Path Operations Using Basic Response Models in FastAPI\nDESCRIPTION: Shows how the path operations are initially configured with basic response models that don't include relationship data.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/relationships.md#2025-04-13_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(team_id: int):\n    with Session(engine) as session:\n        team = session.get(Team, team_id)\n        if not team:\n            raise HTTPException(status_code=404, detail=\"Team not found\")\n        return team\n```\n\n----------------------------------------\n\nTITLE: DELETE Operation Success Response Format\nDESCRIPTION: Shows the JSON response structure returned after a successful deletion operation.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/delete.md#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Hero Objects to the Session and Printing\nDESCRIPTION: Demonstrates adding Hero objects to a SQLModel session and printing them to show that their IDs remain None until the session is committed.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/automatic-id-none-refresh.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nhero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\nhero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nhero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\nprint(\"Before interacting with the database\")\nprint(\"Hero 1:\", hero_1)\nprint(\"Hero 2:\", hero_2)\nprint(\"Hero 3:\", hero_3)\n\nwith Session(engine) as session:\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n    \n    print(\"After adding to the session\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n```\n\n----------------------------------------\n\nTITLE: Adding select_heroes() to main()\nDESCRIPTION: Shows how to integrate the select_heroes function into the main application function so it runs when the program executes.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/select.md#2025-04-13_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nselect_heroes()\n```\n\n----------------------------------------\n\nTITLE: Inserting Heroes into Database in Python\nDESCRIPTION: Create a new session, add the heroes to the database, and commit the changes.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/select/annotations/en/tutorial002.md#2025-04-13_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nwith Session(engine) as session:\n    session.add(hero1)\n    session.add(hero2)\n    session.add(hero3)\n    session.commit()\n```\n\n----------------------------------------\n\nTITLE: Defining HeroCreate Data Model with SQLModel in Python\nDESCRIPTION: This snippet creates the HeroCreate model that inherits from HeroBase. It uses 'pass' as it doesn't add any new fields but creates a separate model for API documentation clarity.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/multiple-models.md#2025-04-13_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\nclass HeroCreate(HeroBase):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring TestClient with Session Override in FastAPI\nDESCRIPTION: Setting up a test client fixture that overrides database session dependencies for FastAPI tests. Demonstrates how to create a TestClient instance with proper session management and cleanup.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001_py310/annotations/en/test_main_006.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef client(session):\n    def get_session_override():\n        return session\n    \n    app.dependency_overrides[get_session] = get_session_override\n    client = TestClient(app)\n    yield client\n    app.dependency_overrides.clear()\n```\n\n----------------------------------------\n\nTITLE: Database Select Operations\nDESCRIPTION: SQL select statements showing how the database retrieves hero information when accessing object attributes.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/automatic_id_none_refresh/annotations/en/tutorial002.md#2025-04-13_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\n```\n\n----------------------------------------\n\nTITLE: Handling Missing ID with get()\nDESCRIPTION: Demonstrates how get() returns None when no row matches the given ID.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/one.md#2025-04-13_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as session:\n    hero = session.get(Hero, 9001)\n    print(\"Hero:\", hero)\n```\n\n----------------------------------------\n\nTITLE: Selecting Heroes in SQLModel Python\nDESCRIPTION: Function to select heroes from the database to demonstrate relationship access. It creates a session and selects the first hero to work with.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/read-relationships.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.exec(select(Hero)).first()\n        print(\"Hero:\", hero)\n\n\n# in the main function\ndefault_engine = create_engine(\"sqlite:///database.db\")\nselect_heroes()\n```\n\n----------------------------------------\n\nTITLE: SQL Command to Drop Index\nDESCRIPTION: SQL command to remove an unnecessary index from the database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/release-notes.md#2025-04-13_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nDROP INDEX ix_hero_secret_name\n```\n\n----------------------------------------\n\nTITLE: Database Interaction Log Output\nDESCRIPTION: SQL engine output showing database operations including INSERT statements and transactions for creating hero records.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/automatic_id_none_refresh/annotations/en/tutorial002.md#2025-04-13_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINFO Engine BEGIN (implicit)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [generated in 0.00018s] ('Deadpond', 'Dive Wilson', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.0008968s ago] ('Spider-Boy', 'Pedro Parqueador', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.001143s ago] ('Rusty-Man', 'Tommy Sharp', 48)\nINFO Engine COMMIT\n```\n\n----------------------------------------\n\nTITLE: Querying Data Using an Indexed Field in SQLModel\nDESCRIPTION: Code example showing how to query data using the indexed 'name' field. Even though the query syntax is unchanged, the database will automatically use the index to optimize the query execution.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/indexes.md#2025-04-13_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        heroes = session.exec(statement).first()\n        print(heroes)\n```\n\n----------------------------------------\n\nTITLE: FastAPI Dependency Example - Python\nDESCRIPTION: Example showing how dependencies are normally declared in FastAPI for comparison with pytest fixtures\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001_py310/annotations/en/test_main_005.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsession: Session = Depends(session_fixture)\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables in Python\nDESCRIPTION: Create all tables for the models registered in SQLModel.metadata, which also creates the database if it doesn't exist.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/select/annotations/en/tutorial002.md#2025-04-13_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nSQLModel.metadata.create_all(engine)\n```\n\n----------------------------------------\n\nTITLE: Creating SQLite Testing Engine in Python\nDESCRIPTION: This snippet shows how to create a SQLite database engine for testing purposes. It uses a different database file and includes a connection argument to allow multiple threads.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001_py310/annotations/en/test_main_003.md#2025-04-13_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nsqlite:///testing.db\n```\n\n----------------------------------------\n\nTITLE: Creating Hero Objects in Python\nDESCRIPTION: Create individual Hero objects to be inserted into the database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/select/annotations/en/tutorial002.md#2025-04-13_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nhero1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\nhero2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nhero3 = Hero(name=\"Rusty-Man\", age=48, secret_name=\"Tommy Sharp\")\n```\n\n----------------------------------------\n\nTITLE: FastAPI Session Dependency Example\nDESCRIPTION: Example showing the standard FastAPI dependency injection syntax for session management. This is provided as a comparison to the pytest fixture approach.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001_py39/annotations/en/test_main_005.md#2025-04-13_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nsession: Session = Depends(session_fixture)\n```\n\n----------------------------------------\n\nTITLE: Querying Hero Record - Spider-Boy\nDESCRIPTION: SQL query output showing the selection of a hero record with name 'Spider-Boy' from the database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/update/annotations/en/tutorial004.md#2025-04-13_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00018s] ('Spider-Boy',)\n```\n\n----------------------------------------\n\nTITLE: Importing SQLModel Components in Python\nDESCRIPTION: Import all necessary components from the sqlmodel module, including the new select() function.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/select/annotations/en/tutorial002.md#2025-04-13_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlmodel import *\n```\n\n----------------------------------------\n\nTITLE: SQLModel Table Definitions with SET NULL\nDESCRIPTION: Model definitions for Team and Hero tables with SET NULL configuration for handling deleted team references.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/cascade-delete-relationships.md#2025-04-13_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\")\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n```\n\n----------------------------------------\n\nTITLE: Running Code Formatting Script\nDESCRIPTION: Command to run the formatting script that cleans and auto-formats code including import sorting\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/contributing.md#2025-04-13_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ bash scripts/format.sh\n```\n\n----------------------------------------\n\nTITLE: Restoring Original Dependencies in FastAPI\nDESCRIPTION: This snippet demonstrates how to remove all dependency overrides and restore the FastAPI application to its original state. It clears the app.dependency_overrides dictionary, ensuring that the original dependencies are used.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001_py310/annotations/en/test_main_002.md#2025-04-13_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\napp.dependency_overrides.clear()\n```\n\n----------------------------------------\n\nTITLE: Raw SQL Query in Python Code\nDESCRIPTION: Example showing how raw SQL is typically executed in Python by passing a SQL string to a database execution method. This approach lacks editor support and type safety.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/db-to-code.md#2025-04-13_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nstatement = \"SELECT * FROM hero;\"\n\nresults = database.execute(statement)\n```\n\n----------------------------------------\n\nTITLE: Specifying SQLite URL for In-Memory Database in Python\nDESCRIPTION: This code demonstrates how to specify the SQLite URL for an in-memory database. Instead of providing a file name, an empty URL is used to indicate an in-memory database to SQLModel and SQLAlchemy.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001_py310/annotations/en/test_main_004.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsqlite://\n```\n\n----------------------------------------\n\nTITLE: Hero Object Output - Spider-Boy\nDESCRIPTION: Console output showing the retrieved hero object data for Spider-Boy.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/update/annotations/en/tutorial004.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nHero 1: name='Spider-Boy' secret_name='Pedro Parqueador' age=None id=2\n```\n\n----------------------------------------\n\nTITLE: Basic LEFT OUTER JOIN in SQL\nDESCRIPTION: SQL query demonstrating LEFT OUTER JOIN between hero and team tables to include all heroes even if they don't have a team.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/read-connected-data.md#2025-04-13_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT hero.id, hero.name, team.name\nFROM hero\nLEFT OUTER JOIN team\nON hero.team_id = team.id\n```\n\n----------------------------------------\n\nTITLE: Creating Hero Instances with None IDs\nDESCRIPTION: Demonstrates creating new Hero objects without providing ID values, which results in them having None as their ID until they're saved to the database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/automatic-id-none-refresh.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\nhero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nhero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n```\n\n----------------------------------------\n\nTITLE: Hero Object State Output\nDESCRIPTION: Console output showing hero object states at different stages of the database interaction process.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/automatic_id_none_refresh/annotations/en/tutorial002.md#2025-04-13_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nHero 1: id=None name='Deadpond' secret_name='Dive Wilson' age=None\nHero 2: id=None name='Spider-Boy' secret_name='Pedro Parqueador' age=None\nHero 3: id=None name='Rusty-Man' secret_name='Tommy Sharp' age=48\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies with pip\nDESCRIPTION: Command to install required packages for SQLModel development from requirements.txt file\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/contributing.md#2025-04-13_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install -r requirements.txt\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Importing Separate Model Files in SQLModel App\nDESCRIPTION: Demonstrates how to import models from separate files in a SQLModel application, avoiding circular import issues.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/code-structure.md#2025-04-13_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom sqlmodel import Session\n\nfrom .database import create_db_and_tables, engine\nfrom .hero_model import Hero\nfrom .team_model import Team\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n# ... rest of the FastAPI app code ...\n```\n\n----------------------------------------\n\nTITLE: Updated Hero Output - First Hero\nDESCRIPTION: Console output showing the updated hero data for the first hero after modifications.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/update/annotations/en/tutorial004.md#2025-04-13_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nUpdated hero 1: name='Spider-Youngster' secret_name='Pedro Parqueador' age=16 id=2\n```\n\n----------------------------------------\n\nTITLE: No Results Error with one()\nDESCRIPTION: Demonstrates how one() raises an error when no rows match the query criteria.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/one.md#2025-04-13_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as session:\n    statement = select(Hero).where(Hero.age < 25)\n    results = session.exec(statement)\n    hero = results.one()\n    print(\"Hero:\", hero)\n```\n\n----------------------------------------\n\nTITLE: Getting Final Batch with OFFSET and LIMIT\nDESCRIPTION: Shows how to retrieve the final batch of records using appropriate offset.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/limit-and-offset.md#2025-04-13_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef select_heroes():\n    statement = select(Hero).offset(6).limit(3)\n    results = session.exec(statement)\n    heroes = results.all()\n    print(\"Last batch of heroes:\", heroes)\n```\n\n----------------------------------------\n\nTITLE: Querying All Data from Hero Table in SQL\nDESCRIPTION: This SQL snippet demonstrates a simple SELECT query to retrieve all data from a table named 'hero'. It uses the asterisk (*) wildcard to select all columns.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/databases.md#2025-04-13_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT *\nFROM hero;\n```\n\n----------------------------------------\n\nTITLE: Importing StaticPool from SQLModel in Python\nDESCRIPTION: This snippet shows how to import the StaticPool class from SQLModel, which is used for managing database connections in multi-threaded environments.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001_py310/annotations/en/test_main_004.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlmodel import StaticPool\n```\n\n----------------------------------------\n\nTITLE: Main Function Setup for SQLModel Application\nDESCRIPTION: Main function configuration that calls create_heroes() when the program is run directly. Sets up the entry point for the application.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/many-to-many/create-data.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef main():\n    create_db_and_tables()\n    create_heroes()\n```\n\n----------------------------------------\n\nTITLE: Running a Python Script in Virtual Environment\nDESCRIPTION: Executes a Python script using the Python interpreter from the active virtual environment, with access to all installed packages.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\nHello World\n```\n\n----------------------------------------\n\nTITLE: Basic Select All Query in SQLModel\nDESCRIPTION: Demonstrates the basic select statement to retrieve all heroes from the database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/limit-and-offset.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef select_heroes():\n    statement = select(Hero)\n    results = session.exec(statement)\n    heroes = results.all()\n    print(\"Heroes:\", heroes)\n```\n\n----------------------------------------\n\nTITLE: Basic Hero Model Definition in SQLModel\nDESCRIPTION: Original Hero model definition without an index. This shows the base SQLModel class that will be modified to include an index.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/indexes.md#2025-04-13_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n```\n\n----------------------------------------\n\nTITLE: Running Python Script from Command Line\nDESCRIPTION: This snippet demonstrates how to run the Python script from the command line. It shows the expected console output when executing the script.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/insert/annotations/en/tutorial003.md#2025-04-13_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python app.py\n\n// Do whatever is in the main block 🚀\n```\n\n----------------------------------------\n\nTITLE: Defining SQLModel Hero Class With Selective Indexes\nDESCRIPTION: Example showing how to selectively define indexes only for specific columns (name and age) after the breaking change.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/release-notes.md#2025-04-13_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n```\n\n----------------------------------------\n\nTITLE: Adding select_heroes() to main() in Python\nDESCRIPTION: Add the select_heroes() function to the main() function to execute when the program runs from the command line.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/select/annotations/en/tutorial002.md#2025-04-13_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef main():\n    select_heroes()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment on Linux/macOS\nDESCRIPTION: This command activates a virtual environment on Linux or macOS systems. It modifies environment variables, particularly PATH, to use the Python installation in the virtual environment.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ source .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Adding create_heroes() to Main Function\nDESCRIPTION: Updates the main function to include the create_heroes() call for program execution.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/create-connected-rows.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef main():\n    create_db_and_tables()\n    create_heroes()\n```\n\n----------------------------------------\n\nTITLE: Passive Deletes Table Configuration\nDESCRIPTION: Model definitions using passive_deletes to let the database handle deletions automatically.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/cascade-delete-relationships.md#2025-04-13_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\")\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment with uv\nDESCRIPTION: Creates a new Python virtual environment using the uv tool, which automatically places it in a .venv directory.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uv venv\n```\n\n----------------------------------------\n\nTITLE: Creating a Main Function for Script Execution\nDESCRIPTION: Defines a main function that calls the database and table creation function followed by the hero creation function. This organizes the code that should run when the script is executed directly.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/insert.md#2025-04-13_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef main():\n    create_db_and_tables()\n    create_heroes()\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Live Server\nDESCRIPTION: Command to start the live documentation server that watches for changes and auto-reloads\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/contributing.md#2025-04-13_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ python ./scripts/docs.py live\n\n[INFO] Serving on http://127.0.0.1:8008\n[INFO] Start watching changes\n[INFO] Start detecting changes\n```\n\n----------------------------------------\n\nTITLE: Executing Main Function in Python Script\nDESCRIPTION: This snippet shows how to execute the main() function when the script is run from the command line. It demonstrates the standard Python idiom for script execution.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/insert/annotations/en/tutorial003.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Simple SQL Query to Select All Heroes\nDESCRIPTION: A basic SQL query that selects all records from the hero table. This demonstrates raw SQL syntax for data retrieval.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/db-to-code.md#2025-04-13_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT *\nFROM hero;\n```\n\n----------------------------------------\n\nTITLE: Importing Session from SQLModel\nDESCRIPTION: Imports the Session class from SQLModel, which is needed to create a session for interacting with the database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/insert.md#2025-04-13_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlmodel import Session\n```\n\n----------------------------------------\n\nTITLE: Example of Infinite Recursion Problem in Relationships\nDESCRIPTION: Illustrates the potential infinite recursion problem when including all relationship data without careful planning.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/relationships.md#2025-04-13_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"name\": \"Rusty-Man\",\n    \"secret_name\": \"Tommy Sharp\",\n    \"age\": 48,\n    \"team_id\": 1,\n    \"id\": 1,\n    \"team\": {\n        \"name\": \"Preventers\",\n        \"headquarters\": \"Sharp Tower\",\n        \"id\": 2,\n        \"heroes\": [\n            {\n                \"name\": \"Rusty-Man\",\n                \"secret_name\": \"Tommy Sharp\",\n                \"age\": 48,\n                \"team_id\": 1,\n                \"id\": 1,\n                \"team\": {\n                    \"name\": \"Preventers\",\n                    \"headquarters\": \"Sharp Tower\",\n                    \"id\": 2,\n                    \"heroes\": [\n                        {\n                            \"name\": \"Rusty-Man\",\n                            \"secret_name\": \"Tommy Sharp\",\n                            \"age\": 48,\n                            \"team_id\": 1,\n                            \"id\": 1,\n                            \"team\": {\n                                \"name\": \"Preventers\",\n                                \"headquarters\": \"Sharp Tower\",\n                                \"id\": 2,\n                                \"heroes\": [\n                                    ...with infinite data here... 😱\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for SQLModel Project\nDESCRIPTION: This snippet defines the required Python packages and their versions for the SQLModel project. It includes development dependencies, testing frameworks, code coverage tools, type checkers, and related FastAPI components. The file uses pip's requirements file format to specify these dependencies.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/requirements-tests.txt#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e .\n-r requirements-docs-tests.txt\npytest >=7.0.1,<8.0.0\ncoverage[toml] >=6.2,<8.0\nmypy ==1.4.1\nruff ==0.9.6\n# For FastAPI tests\nfastapi >=0.103.2\nhttpx ==0.24.1\ndirty-equals ==0.9.0\njinja2 ==3.1.6\ntyping-extensions ==4.12.2\n```\n\n----------------------------------------\n\nTITLE: Importing col() Function in SQLModel for Python\nDESCRIPTION: This snippet shows how to import the col() function from SQLModel, which is used to specify columns in query filters and resolve type annotation issues in the editor.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/where.md#2025-04-13_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlmodel import Field, Session, SQLModel, col, create_engine, select\n```\n\n----------------------------------------\n\nTITLE: Python Module Import Example\nDESCRIPTION: Example showing how to import the Hero model from the main application file\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/create_db_and_table/annotations/en/tutorial003.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom app import Hero\n```\n\n----------------------------------------\n\nTITLE: Refresh Hero Query - Second Hero\nDESCRIPTION: SQL output showing the refresh operation for the second hero using cached transaction.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/update/annotations/en/tutorial004.md#2025-04-13_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001709s ago] (7,)\n```\n\n----------------------------------------\n\nTITLE: Simple Python Mapping Function Example\nDESCRIPTION: A basic Python function demonstrating the concept of mapping from one set to another, illustrating the 'Mapper' part of ORM (Object-Relational Mapper).\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/db-to-code.md#2025-04-13_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef map_lower_to_upper(value: str):\n    return value.upper()\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for FastAPI SQLModel Documentation\nDESCRIPTION: This requirements file specifies the exact versions of packages needed for building and testing the documentation for the FastAPI SQLModel project. It includes MkDocs and its extensions, image processing libraries, and other utilities for enhanced documentation features.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/requirements-docs.txt#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e .\n-r requirements-docs-tests.txt\nmkdocs-material==9.5.18\nmdx-include >=1.4.1,<2.0.0\nmkdocs-redirects>=1.2.1,<1.3.0\npyyaml >=5.3.1,<7.0.0\n# For Material for MkDocs, Chinese search\n# jieba==0.42.1\n# For image processing by Material for MkDocs\npillow==11.0.0\n# For image processing by Material for MkDocs\ncairosvg==2.7.1\n# mkdocstrings[python]==0.25.1\ngriffe-typingdoc==0.2.5\n# For griffe, it formats with black\ntyper == 0.12.3\nmkdocs-macros-plugin==1.0.5\nmarkdown-include-variants==0.0.4\n```\n\n----------------------------------------\n\nTITLE: SQL SELECT Statement with Shortcut\nDESCRIPTION: Demonstrates the SQL shortcut for selecting all columns using the asterisk symbol.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/select.md#2025-04-13_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM hero\n```\n\n----------------------------------------\n\nTITLE: Defining SQLModel Hero Class With All Explicit Indexes\nDESCRIPTION: Example showing how to explicitly define indexes for all columns after the breaking change if needed.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/release-notes.md#2025-04-13_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str = Field(index=True)\n    age: Optional[int] = Field(default=None, index=True)\n```\n\n----------------------------------------\n\nTITLE: SQLite Database URL Configuration\nDESCRIPTION: Demonstrates the correct URL format for creating an in-memory SQLite database instead of a file-based database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001_py39/annotations/en/test_main_004.md#2025-04-13_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsqlite:///testing.db\n```\n\nLANGUAGE: text\nCODE:\n```\nsqlite://\n```\n\n----------------------------------------\n\nTITLE: Jinja2 Template for Rendering Team Members\nDESCRIPTION: A Jinja2 template loop that iterates through team members and displays their GitHub profile information including avatar and username as clickable links.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/management.md#2025-04-13_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{% for user in members[\"members\"] %}\n\n<div class=\"user\"><a href=\"https://github.com/{{ user.login }}\" target=\"_blank\"><div class=\"avatar-wrapper\"><img src=\"https://github.com/{{ user.login }}.png\"/></div><div class=\"title\">@{{ user.login }}</div></a></div>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Python Code with SQL Injection Risk\nDESCRIPTION: Example of unsafe code that directly interpolates user input into SQL statements, creating a SQL injection vulnerability. The code is shown as an anti-pattern to avoid.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/db-to-code.md#2025-04-13_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# Never do this! 🚨 Continue reading.\n\nuser_id = input(\"Type the user ID: \")\n\nstatement = f\"SELECT * FROM hero WHERE id = {user_id};\"\n\nresults = database.execute(statement)\n```\n\n----------------------------------------\n\nTITLE: Enabling Foreign Key Support in SQLite for RESTRICT\nDESCRIPTION: This code snippet shows how to enable foreign key support in SQLite, which is necessary for the RESTRICT constraint to work properly.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/cascade-delete-relationships.md#2025-04-13_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine, event\n\nengine = create_engine(\"sqlite:///database.db\")\n\n@event.listens_for(engine, \"connect\")\ndef set_sqlite_pragma(dbapi_connection, connection_record):\n    cursor = dbapi_connection.cursor()\n    cursor.execute(\"PRAGMA foreign_keys=ON\")\n    cursor.close()\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Keyword Arguments in SQLModel WHERE Clause (Python)\nDESCRIPTION: Shows an unsupported way of using keyword arguments in the WHERE clause, which is not allowed in SQLModel.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/where.md#2025-04-13_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nselect(Hero).where(name=\"Deadpond\")\n```\n\n----------------------------------------\n\nTITLE: Adding Select Function to Main\nDESCRIPTION: Code that adds the select_heroes function to the main function ensuring it gets executed when the program runs.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/connect/read-connected-data.md#2025-04-13_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n```\n\n----------------------------------------\n\nTITLE: Upgrading pip in a Virtual Environment\nDESCRIPTION: Updates the pip package manager to the latest version within the virtual environment to avoid installation errors with newer packages.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ python -m pip install --upgrade pip\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Running Test Coverage Script\nDESCRIPTION: Command to run tests and generate HTML coverage reports\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/contributing.md#2025-04-13_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ bash scripts/test-cov-html.sh\n```\n\n----------------------------------------\n\nTITLE: Checking Active Python Interpreter on Windows PowerShell\nDESCRIPTION: This command checks which Python interpreter is currently active on Windows PowerShell. It's useful for verifying if the correct virtual environment is activated.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n```\n\n----------------------------------------\n\nTITLE: Batch Update SQL Operation\nDESCRIPTION: SQL output showing the batch update of multiple hero records in a single transaction.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/update/annotations/en/tutorial004.md#2025-04-13_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINFO Engine UPDATE hero SET name=?, age=? WHERE hero.id = ?\nINFO Engine [generated in 0.00028s] (('Spider-Youngster', 16, 2), ('Captain North America Except Canada', 110, 7))\nINFO Engine COMMIT\n```\n\n----------------------------------------\n\nTITLE: Setting Up Script Entry Point\nDESCRIPTION: Sets up the script entry point with the if __name__ == \"__main__\" pattern, calling the main function when the script is run directly.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/insert.md#2025-04-13_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Creating a Hero Table in SQLite with SQL\nDESCRIPTION: SQL command for creating a 'hero' table with four columns: id (primary key), name (required text), secret_name (required text), and age (nullable integer). This demonstrates the basic structure of a CREATE TABLE statement in SQLite.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/create-db-and-table-with-db-browser.md#2025-04-13_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"hero\" (\n  \"id\"  INTEGER,\n  \"name\"  TEXT NOT NULL,\n  \"secret_name\" TEXT NOT NULL,\n  \"age\" INTEGER,\n  PRIMARY KEY(\"id\")\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Packages from requirements.txt with uv\nDESCRIPTION: Installs all packages listed in the requirements.txt file at their specified versions using uv.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install -r requirements.txt\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Creating a .gitignore for the Virtual Environment\nDESCRIPTION: Creates a .gitignore file inside the virtual environment directory to prevent Git from tracking installed packages, keeping the repository size manageable.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ echo \"*\" > .venv/.gitignore\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in PowerShell\nDESCRIPTION: Demonstrates setting and using environment variables in Windows PowerShell.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/environment-variables.md#2025-04-13_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:MY_NAME = \"Wade Wilson\"\necho \"Hello $Env:MY_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrect Column Name in SQLModel WHERE Clause (Python)\nDESCRIPTION: Illustrates how using an incorrect column name in a WHERE clause expression would result in an error that can be caught by the editor.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/where.md#2025-04-13_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nselect(Hero).where(Hero.secret_identity == \"Pedro Parqueador\")\n```\n\n----------------------------------------\n\nTITLE: Checking Active Virtual Environment on Windows PowerShell\nDESCRIPTION: Verifies the active Python interpreter is from the virtual environment by showing its path in Windows PowerShell, confirming the environment is properly activated.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment in Windows PowerShell\nDESCRIPTION: Activates the Python virtual environment in Windows PowerShell, making its Python interpreter and packages available in the current shell session.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ .venv\\Scripts\\Activate.ps1\n```\n\n----------------------------------------\n\nTITLE: Sample JSON for Nullifying Fields\nDESCRIPTION: Example JSON payload showing how to explicitly set a field to null/None in the database.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/update.md#2025-04-13_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"age\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment on Linux/macOS\nDESCRIPTION: Activates the Python virtual environment in a Linux or macOS terminal, making its Python interpreter and packages available in the current shell session.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ source .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Python Package Dependencies\nDESCRIPTION: Installs the local package in editable mode (-e flag) and includes test/documentation dependencies as well as pre-commit hooks. References external requirements files for tests and docs.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/requirements.txt#2025-04-13_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e .\n\n-r requirements-tests.txt\n-r requirements-docs.txt\n\npre-commit >=2.17.0,<4.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining SQLModel Hero Class Without Explicit Indexes\nDESCRIPTION: Example of a SQLModel Hero class definition before the breaking change, where indexes were created automatically for all columns.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/release-notes.md#2025-04-13_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional\n\nfrom sqlmodel import Field, SQLModel\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Package Version with pip\nDESCRIPTION: This snippet demonstrates how to install a specific version of a package using pip. It's used to illustrate the problem of conflicting package versions in a global environment.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ pip install \"harry==1\"\n```\n\n----------------------------------------\n\nTITLE: Refresh Hero Query - First Hero\nDESCRIPTION: SQL output showing the refresh operation for the first hero with a new transaction.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/update/annotations/en/tutorial004.md#2025-04-13_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nINFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00023s] (2,)\n```\n\n----------------------------------------\n\nTITLE: Checking Active Virtual Environment on Linux/macOS/Windows Bash\nDESCRIPTION: Verifies the active Python interpreter is from the virtual environment by showing its path, confirming the environment is properly activated.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n```\n\n----------------------------------------\n\nTITLE: Raw SQL Query with Potential Column Name Error\nDESCRIPTION: Example showing how raw SQL in strings provides no editor support for column name validation, making it prone to errors.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/db-to-code.md#2025-04-13_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nstatement = \"SELECT * FROM hero WHERE secret_identity = 'Dive Wilson';\"\n\nresults = database.execute(statement)\n```\n\n----------------------------------------\n\nTITLE: Checking Active Python Interpreter on Linux/macOS\nDESCRIPTION: This command checks which Python interpreter is currently active on Linux or macOS. It's useful for verifying if the correct virtual environment is activated.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n```\n\n----------------------------------------\n\nTITLE: Hero Object Output - Captain North America\nDESCRIPTION: Console output showing the retrieved hero object data for Captain North America.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/update/annotations/en/tutorial004.md#2025-04-13_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nHero 2: name='Captain North America' secret_name='Esteban Rogelios' age=93 id=7\n```\n\n----------------------------------------\n\nTITLE: Installing Packages from requirements.txt with pip\nDESCRIPTION: Installs all packages listed in the requirements.txt file at their specified versions using pip.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ pip install -r requirements.txt\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Different Project Directory in Console\nDESCRIPTION: This snippet demonstrates how to change the current directory to a different project folder using the 'cd' command in the console.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/code/prisoner-of-azkaban\n```\n\n----------------------------------------\n\nTITLE: Querying Hero Record - Captain North America\nDESCRIPTION: SQL query output showing the selection of a hero record with transaction begin statement.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/update/annotations/en/tutorial004.md#2025-04-13_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00020s] ('Captain North America',)\n```\n\n----------------------------------------\n\nTITLE: Installing a Package with uv\nDESCRIPTION: Installs the SQLModel package in the active virtual environment using uv, a faster alternative to pip.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install sqlmodel\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Session Rollback\nDESCRIPTION: SQL output showing the final rollback operation when the session ends.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/update/annotations/en/tutorial004.md#2025-04-13_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nINFO Engine ROLLBACK\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment on Windows Bash\nDESCRIPTION: This command activates a virtual environment using Bash on Windows (e.g., Git Bash). It modifies environment variables to use the Python installation in the virtual environment.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ source .venv/Scripts/activate\n```\n\n----------------------------------------\n\nTITLE: Querying Heroes from Database in Python\nDESCRIPTION: Create a new session to query data, use select() to create a statement, and execute it to retrieve all Hero objects.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/select/annotations/en/tutorial002.md#2025-04-13_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nwith Session(engine) as session:\n    statement = select(Hero)\n    results = session.exec(statement)\n    for hero in results:\n        print(hero)\n```\n\n----------------------------------------\n\nTITLE: Updated Hero Output - Second Hero\nDESCRIPTION: Console output showing the updated hero data for the second hero after modifications.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/update/annotations/en/tutorial004.md#2025-04-13_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nUpdated hero 2: name='Captain North America Except Canada' secret_name='Esteban Rogelios' age=110 id=7\n```\n\n----------------------------------------\n\nTITLE: Running Python Script with Incorrect Virtual Environment in Console\nDESCRIPTION: This example shows the error that occurs when trying to run a Python script without the correct virtual environment activated, resulting in an import error.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_24\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/code/prisoner-of-azkaban\n\n$ python main.py\n\n// Error importing sirius, it's not installed 😱\nTraceback (most recent call last):\n    File \"main.py\", line 1, in <module>\n        import sirius\n```\n\n----------------------------------------\n\nTITLE: Creating Database Rows as Model Instances in SQLModel\nDESCRIPTION: Demonstrates how to create instances of a Hero model to represent database rows. Each instance defines values for the model's attributes that correspond to table columns.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/index.md#2025-04-13_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nhero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\nhero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nhero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n```\n\n----------------------------------------\n\nTITLE: SQL Command to Drop Index with Table Specification\nDESCRIPTION: Alternative SQL command to remove an unnecessary index, specifying the table name.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/release-notes.md#2025-04-13_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nDROP INDEX ix_hero_secret_name ON hero;\n```\n\n----------------------------------------\n\nTITLE: Manual Documentation Server Setup\nDESCRIPTION: Commands to manually navigate to docs directory and start the mkdocs server\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/contributing.md#2025-04-13_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ cd docs/\n$ mkdocs serve --dev-addr 8008\n```\n\n----------------------------------------\n\nTITLE: Installing a Package with pip\nDESCRIPTION: Installs the SQLModel package in the active virtual environment using pip, the standard Python package installer.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ pip install sqlmodel\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Installing Typer CLI Completion\nDESCRIPTION: Command to install shell completion for Typer CLI to enable autocompletion of commands\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/contributing.md#2025-04-13_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ typer --install-completion\n\nzsh completion installed in /home/user/.bashrc.\nCompletion will take effect once you restart the terminal.\n```\n\n----------------------------------------\n\nTITLE: Basic Model Classes with Foreign Key Connection\nDESCRIPTION: Shows model classes with a foreign key relationship where Hero has a team_id field that references the Team table.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/relationship-attributes/define-relationships-attributes.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n```\n\n----------------------------------------\n\nTITLE: Example requirements.txt File Format\nDESCRIPTION: Shows the format of a requirements.txt file specifying exact versions of Python packages to install for the project.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_13\n\nLANGUAGE: requirements.txt\nCODE:\n```\nsqlmodel==0.13.0\nrich==13.7.1\n```\n\n----------------------------------------\n\nTITLE: Project Directory Setup Commands\nDESCRIPTION: Creates a structured directory hierarchy for organizing Python projects, with a main code directory containing individual project folders.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n// Go to the home directory\n$ cd\n// Create a directory for all your code projects\n$ mkdir code\n// Enter into that code directory\n$ cd code\n// Create a directory for this project\n$ mkdir awesome-project\n// Enter into that project directory\n$ cd awesome-project\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment on Windows PowerShell\nDESCRIPTION: This command activates a virtual environment using Windows PowerShell. It modifies environment variables to use the Python installation in the virtual environment.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ .venv\\Scripts\\Activate.ps1\n```\n\n----------------------------------------\n\nTITLE: Deactivating and Activating Virtual Environments in Console\nDESCRIPTION: This snippet demonstrates how to deactivate the current virtual environment, navigate to a new project directory, activate its virtual environment, and successfully run a Python script.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_25\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/code/prisoner-of-azkaban\n\n// You don't need to be in the old directory to deactivate, you can do it wherever you are, even after going to the other project 😎\n$ deactivate\n\n// Activate the virtual environment in prisoner-of-azkaban/.venv 🚀\n$ source .venv/bin/activate\n\n// Now when you run python, it will find the package sirius installed in this virtual environment ✨\n$ python main.py\n\nI solemnly swear 🐺\n```\n\n----------------------------------------\n\nTITLE: Specifying Git Dependencies for FastAPI/SQLModel Project\nDESCRIPTION: This code snippet defines three Git repository dependencies using HTTPS URLs with authentication tokens. It includes MkDocs Material Insiders, a custom Griffe plugin for typing deprecation, and a custom MkDocstrings Python plugin.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/requirements-docs-insiders.txt#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngit+https://${TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git@9.5.30-insiders-4.53.11\ngit+https://${TOKEN}@github.com/pawamoy-insiders/griffe-typing-deprecated.git\ngit+https://${TOKEN}@github.com/pawamoy-insiders/mkdocstrings-python.git\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for FastAPI SQLModel\nDESCRIPTION: This snippet lists the required Python packages and their version constraints for the FastAPI SQLModel project. It includes PyGithub for GitHub integration, pydantic for data validation, pydantic-settings for settings management, httpx for HTTP client functionality, and smokeshow for testing purposes.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/requirements-github-actions.txt#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPyGithub>=2.3.0,<3.0.0\npydantic>=2.5.3,<3.0.0\npydantic-settings>=2.1.0,<3.0.0\nhttpx>=0.27.0,<0.28.0\nsmokeshow\n```\n\n----------------------------------------\n\nTITLE: Creating FastAPI Test Client Fixture with SQLModel\nDESCRIPTION: Demonstrates how to create a pytest fixture that sets up a TestClient for FastAPI testing, including session dependency override and cleanup. The fixture yields a TestClient instance that can be used in tests to make API requests.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001_py39/annotations/en/test_main_006.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef client(session):\n    def get_session_override():\n        return session\n\n    app.dependency_overrides[get_session] = get_session_override\n    \n    client = TestClient(app)\n    yield client\n    \n    app.dependency_overrides.clear()\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment with venv\nDESCRIPTION: Creates a new Python virtual environment in a directory named .venv using the built-in venv module.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ python -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment in Windows Bash\nDESCRIPTION: Activates the Python virtual environment in Windows Bash (like Git Bash), making its Python interpreter and packages available in the current shell session.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ source .venv/Scripts/activate\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Bash\nDESCRIPTION: Shows how to set and use environment variables in Linux/macOS Bash terminal.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/environment-variables.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport MY_NAME=\"Wade Wilson\"\necho \"Hello $MY_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Black Dependency for FastAPI SQLModel Project\nDESCRIPTION: This snippet specifies the Black code formatter as a development dependency with a minimum version requirement. It's used for formatting code in documentation and code generation processes.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/requirements-docs-tests.txt#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# For mkdocstrings and code generator using templates\nblack >=22.10\n```\n\n----------------------------------------\n\nTITLE: Defining HeroUpdate Model in Python with SQLModel\nDESCRIPTION: Creates a Hero model for updating records with all optional fields to support partial updates. This model allows clients to update name, secret_name, and age fields without requiring all fields to be present.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/tutorial/fastapi/update.md#2025-04-13_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n```\n\n----------------------------------------\n\nTITLE: Deactivating a Virtual Environment\nDESCRIPTION: Exits the virtual environment and returns to the global Python environment, removing the virtual environment's packages from the current PATH.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/virtual-environments.md#2025-04-13_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ deactivate\n```\n\n----------------------------------------\n\nTITLE: Basic FastAPI Test Using TestClient\nDESCRIPTION: Example of a test function using the TestClient fixture to make API requests and verify responses. The test leverages the previously defined client fixture for simplified testing.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001/annotations/en/test_main_006.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef test_api_endpoint(client):\n    response = client.get(\"/some-endpoint\")\n    assert response.status_code == 200\n    assert response.json() == expected_data\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependency in FastAPI Test\nDESCRIPTION: Code snippet showing how dependencies would be declared in a FastAPI application. This is contrasted with the pytest approach of using parameter names to inject dependencies.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001/annotations/en/test_main_005.md#2025-04-13_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nsession: Session = Depends(session_fixture)\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Tables for SQLModel in Python\nDESCRIPTION: This code creates all the necessary tables in the testing database using SQLModel's metadata. It assumes that table models have been imported and registered in SQLModel.metadata.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001_py310/annotations/en/test_main_003.md#2025-04-13_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nSQLModel.metadata.create_all(engine)\n```\n\n----------------------------------------\n\nTITLE: Reading Environment Variables in Python\nDESCRIPTION: Demonstrates how to read environment variables in Python using os.getenv() with a default fallback value. The code shows reading a MY_NAME environment variable with 'World' as the default value.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs/environment-variables.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nname = os.getenv(\"MY_NAME\", \"World\")\nprint(f\"Hello {name} from Python\")\n```\n\n----------------------------------------\n\nTITLE: Incorrect SQLite Database File Connection String\nDESCRIPTION: Shows an example of a SQLite connection string that points to a file-based database, which is not what we want for in-memory operation.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001/annotations/en/test_main_004.md#2025-04-13_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsqlite:///testing.db\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Database URL in SQLModel\nDESCRIPTION: Defines the SQLite database URL for testing purposes with specific connection parameters.\nSOURCE: https://github.com/fastapi/sqlmodel/blob/main/docs_src/tutorial/fastapi/app_testing/tutorial001_py39/annotations/en/test_main_003.md#2025-04-13_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsqlite:///testing.db\n```"
  }
]