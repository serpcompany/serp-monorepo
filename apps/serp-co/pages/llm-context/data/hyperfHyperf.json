[
  {
    "owner": "hyperf",
    "repo": "hyperf",
    "content": "TITLE: Convert Doctrine Annotations to PHP8 Attributes\nDESCRIPTION: This command requires the hyperf/code-generator package. It executes a PHP script that automates the conversion of Doctrine Annotations to PHP8 Attributes in the app directory. This is a crucial step in migrating to Hyperf 3.0, as the framework has removed support for `@Annotation` in favor of PHP8's native `Attribute` feature.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog/3.0.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp bin/hyperf.php code:generate -D app\n```\n\n----------------------------------------\n\nTITLE: Returning JSON Response in Hyperf\nDESCRIPTION: Demonstrates how to return a JSON response using the `json()` method of the `Hyperf\\HttpServer\\Contract\\ResponseInterface`. The content type is automatically set to `application/json`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/response.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function json(ResponseInterface $response): Psr7ResponseInterface\n    {\n        $data = [\n            'key' => 'value'\n        ];\n        return $response->json($data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection via Constructor in Hyperf\nDESCRIPTION: This snippet demonstrates dependency injection in Hyperf using constructor injection. It shows how to declare a dependency (UserService) as a parameter in the constructor of a controller, and Hyperf will automatically inject the corresponding object. The `UserService` is then used within the `info` method to retrieve user information.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/overview.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse App\\Service\\UserService;\n\n#[AutoController]\nclass IndexController\n{\n\n    private UserService $userService;\n    \n    // Declare the parameter type within the constructor's arguments, and Hyperf will automatically inject the corresponding object or value.\n    public function __construct(UserService $userService)\n    {\n        $this->userService = $userService;\n    }\n    \n    // /index/info\n    public function info(RequestInterface $request)\n    {\n        $id = $request->input('id', 1);\n        return $this->userService->getInfoById((int)$id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ClassLoader in Hyperf entry file (bin/hyperf.php)\nDESCRIPTION: This snippet demonstrates how to initialize the ClassLoader in the framework entry file `bin/hyperf.php`. This is required due to changes in the underlying AOP logic in Hyperf 2.0. The initialization code `Hyperf\\Di\\ClassLoader::init();` needs to be added at the beginning of the entry anonymous function.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.0.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nini_set('display_errors', 'on');\nini_set('display_startup_errors', 'on');\n\nerror_reporting(E_ALL);\ndate_default_timezone_set('Asia/Shanghai');\n\n! defined('BASE_PATH') && define('BASE_PATH', dirname(__DIR__, 1));\n! defined('SWOOLE_HOOK_FLAGS') && define('SWOOLE_HOOK_FLAGS', SWOOLE_HOOK_ALL);\n\nrequire BASE_PATH . '/vendor/autoload.php';\n\n// Self-called anonymous function that creates its own scope and keep the global namespace clean.\n(function () {\n    Hyperf\\Di\\ClassLoader::init();\n\n    /** @var \\Psr\\Container\\ContainerInterface $container */\n    $container = require BASE_PATH . '/config/container.php';\n\n    $application = $container->get(\\Hyperf\\Contract\\ApplicationInterface::class);\n    $application->run();\n})();\n\n```\n\n----------------------------------------\n\nTITLE: Get Config Value by #[Value] Annotation - PHP\nDESCRIPTION: Shows how to inject configuration values into a class property using the `#[Value]` annotation. The configuration value is automatically injected when the object is created by the DI container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/config.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Config\\Annotation\\Value;\n\nclass IndexController\n{\n    \n    #[Value(key: \"config.key\")]\n    private $configValue;\n    \n    public function index()\n    {\n        return $this->configValue;\n    }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection via Constructor in Hyperf\nDESCRIPTION: This snippet showcases dependency injection using the constructor. The `UserService` is automatically injected into the `IndexController` constructor.  The type hint in the constructor argument is used by Hyperf to resolve and inject the dependency.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/overview.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse App\\Service\\UserService;\n\n#[AutoController]\nclass IndexController\n{\n    private UserService $userService;\n    \n    // 在建構函式宣告引數的型別，Hyperf 會自動注入對應的物件或值\n    public function __construct(UserService $userService)\n    {\n        $this->userService = $userService;\n    }\n    \n    // /index/info\n    public function info(RequestInterface $request)\n    {\n        $id = $request->input('id', 1);\n        return $this->userService->getInfoById((int)$id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Use Form Request in Controller\nDESCRIPTION: Demonstrates how to use a FormRequest class in a controller method. By type-hinting the FormRequest, the framework automatically validates the request before the controller logic is executed. The `validated()` method retrieves the validated data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Request\\FooRequest;\n\nclass IndexController\n{\n    public function index(FooRequest $request)\n    {\n        // 传入的请求通过验证...\n        \n        // 获取通过验证的数据...\n        $validated = $request->validated();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Managing Database Transactions in Hyperf (PHP)\nDESCRIPTION: This snippet demonstrates how to manually manage database transactions in Hyperf using `beginTransaction`, `commit`, and `rollBack` methods.  The code shows how to start a transaction, execute database operations, and either commit the transaction if successful or roll it back if an exception occurs.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/quick-start.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\nDb::beginTransaction();\ntry{\n\n    // Do something...\n\n    Db::commit();\n} catch(\\Throwable $ex){\n    Db::rollBack();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Redis Sentinel Mode\nDESCRIPTION: This configuration snippet shows how to enable and configure Redis Sentinel mode in Hyperf, specifying the master name, sentinel nodes, and authentication details.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/redis.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', null),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'timeout' => 30.0,\n        'reserved' => null,\n        'retry_interval' => 0,\n        'sentinel' => [\n            'enable' => (bool) env('REDIS_SENTINEL_ENABLE', false),\n            'master_name' => env('REDIS_MASTER_NAME', 'mymaster'),\n            'nodes' => explode(';', env('REDIS_SENTINEL_NODE', '')),\n            'persistent' => false,\n            'read_timeout' => 30.0,\n            'auth' =>  env('REDIS_SENTINEL_PASSWORD', ''),\n        ],\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Returning JSON Response in Hyperf\nDESCRIPTION: This snippet demonstrates how to return a JSON response using the `json()` method of the `Hyperf\\HttpServer\\Contract\\ResponseInterface`. It sets the `Content-Type` header to `application/json` and accepts an array or an object that implements the `Hyperf\\Contract\\Arrayable` interface as data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/response.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function json(ResponseInterface $response): Psr7ResponseInterface\n    {\n        $data = [\n            'key' => 'value'\n        ];\n        return $response->json($data);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Saga Transaction Example in Hyperf\nDESCRIPTION: This PHP code demonstrates a Saga distributed transaction using DTM-Client within a Hyperf controller. It initializes a Saga transaction, adds two sub-transactions (transOut and transIn) with their respective compensation operations, and then submits the Saga transaction. The `add` method is used to register the forward and compensation operations for each sub-transaction. The example retrieves the global transaction ID using `TransContext::getGid()` after submitting the transaction.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/distributed-transaction.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse DtmClient\\Saga;\nuse DtmClient\\TransContext;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\GetMapping;\n\n#[Controller(prefix: '/saga')]\nclass SagaController\n{\n\n    protected string $serviceUri = 'http://127.0.0.1:9501';\n    \n    #[Inject]\n    protected Saga $saga;\n\n    #[GetMapping(path: 'successCase')]\n    public function successCase(): string\n    {\n        $payload = ['amount' => 50];\n        // 初始化 Saga 事务\n        $this->saga->init();\n        // 增加转出子事务\n        $this->saga->add(\n            $this->serviceUri . '/saga/transOut', \n            $this->serviceUri . '/saga/transOutCompensate', \n            $payload\n        );\n        // 增加转入子事务\n        $this->saga->add(\n            $this->serviceUri . '/saga/transIn', \n            $this->serviceUri . '/saga/transInCompensate', \n            $payload\n        );\n        // 提交 Saga 事务\n        $this->saga->submit();\n        // 通过 TransContext::getGid() 获得 全局事务ID 并返回\n        return TransContext::getGid();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading Failed/Timeout Messages\nDESCRIPTION: Presents the command to reload all failed or timed-out messages to the waiting queue. Replace {queue_name} with the queue config name and {channel_name} with the channel name (failed or timeout).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php queue:reload {queue_name} -Q {channel_name}\n```\n\n----------------------------------------\n\nTITLE: Define Foreign Key Cascade Delete\nDESCRIPTION: This code shows how to specify the `on delete` action for a foreign key constraint using the `onDelete()` method.  When a row in the 'users' table is deleted, the corresponding rows in the 'posts' table with the same 'user_id' are also deleted due to the 'cascade' setting.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\n$table->foreign('user_id')\n      ->references('id')->on('users')\n      ->onDelete('cascade');\n```\n\n----------------------------------------\n\nTITLE: Delete Records in Hyperf PHP\nDESCRIPTION: Deletes records from the 'users' table. The first example deletes all records, while the second deletes records where 'votes' is greater than 100.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->delete();\n\nDb::table('users')->where('votes', '>', 100)->delete();\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Process via Annotation - Hyperf PHP\nDESCRIPTION: This code snippet demonstrates registering a custom process in Hyperf using the #[Process] annotation.  The annotation simplifies registration by marking the class, allowing Hyperf to automatically discover and manage the process. Requires `use Hyperf\\Process\\Annotation\\Process;`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/process.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process(name: \"foo_process\")]\nclass FooProcess extends AbstractProcess\n{\n    public function handle(): void\n    {\n        // Your code...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Hyperf Nano Application\nDESCRIPTION: This code creates a basic Hyperf Nano application that listens on a specified host and port. It defines a route for the root path ('/') that returns a JSON response containing a personalized greeting and the HTTP method used. It uses the AppFactory to bootstrap the application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nano.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// index.php\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create('0.0.0.0', 9051);\n\n$app->get('/', function () {\n\n    $user = $this->request->input('user', 'nano');\n    $method = $this->request->getMethod();\n\n    return [\n        'message' => \"hello {$user}\",\n        'method' => $method,\n    ];\n\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Automatic Proxy Consumer Configuration PHP\nDESCRIPTION: This code snippet shows how to configure service consumers for automatic proxy creation in the `config/autoload/services.php` file. It defines the consumer's name, service interface, protocol, load balancing, registry information, and other options such as connection timeouts and retry settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/json-rpc.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'consumers' => [\n        [\n            // name must be the same as the name attribute of the service provider\n            'name' => 'CalculatorService',\n            // Service interface name. It's optional and the default value is equal to the value configured by name. If name is directly defined as an interface class, you can ignore this configuration. If name is a string, you need to configure service to correspond to the interface class\n            'service' => \\App\\JsonRpc\\CalculatorServiceInterface::class,\n            // Corresponding container object. It's optional and the default value is equal to the value of the service configuration. To define the key of dependency injection.\n            'id' => \\App\\JsonRpc\\CalculatorServiceInterface::class,\n            // The service agreement of the service provider. It's optional and the default value is jsonrpc-http\n            // jsonrpc-http, jsonrpc, and jsonrpc-tcp-length-check are available\n            'protocol' => 'jsonrpc-http',\n            // Load balancing algorithm, optional, the default value is random\n            'load_balancer' => 'random',\n            // From which service center the consumer will obtain node information, if it is not configured, the node information will not be obtained from the service center\n            'registry' => [\n                'protocol' => 'consul',\n                'address' => 'http://127.0.0.1:8500',\n            ],\n            // If the registry configuration above is not specified, it means to directly consume the specified node. Configure the node information of the service provider through the nodes parameter below\n            'nodes' => [\n                ['host' => '127.0.0.1', 'port' => 9504],\n            ],\n            // Configuration, this may affect Packer and Transporter\n            'options' => [\n                'connect_timeout' => 5.0,\n                'recv_timeout' => 5.0,\n                'settings' => [\n                    // Different protocol, different configuration\n                    'open_eof_split' => true,\n                    'package_eof' => \"\\r\\n\",\n                    // 'open_length_check' => true,\n                    // 'package_length_type' => 'N',\n                    // 'package_length_offset' => 0,\n                    // 'package_body_offset' => 4,\n                ],\n                // Retrie count, the default value is 2, no retry will be performed when the packet is received over time. Only supports JsonRpcPoolTransporter, currently.\n                'retry_count' => 2,\n                // Retry interval, in milliseconds\n                'retry_interval' => 100,\n                // The following configuration will be used when using JsonRpcPoolTransporter\n                'pool' => [\n                    'min_connections' => 1,\n                    'max_connections' => 32,\n                    'connect_timeout' => 10.0,\n                    'wait_timeout' => 3.0,\n                    'heartbeat' => -1,\n                    'max_idle_time' => 60.0,\n                ],\n            ],\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Saga Pattern in Hyperf\nDESCRIPTION: This code snippet showcases the implementation of the Saga pattern within a Hyperf controller using the DtmClient library. It demonstrates how to initiate a Saga global transaction, add sub-transactions with their corresponding compensation operations, and submit the global transaction. The `add` method specifies the URLs for the main and compensation transactions, along with the payload.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/distributed-transaction.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse DtmClient\\Saga;\nuse DtmClient\\TransContext;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\GetMapping;\n\n#[Controller(prefix: '/saga')]\nclass SagaController\n{\n\n    protected string $serviceUri = 'http://127.0.0.1:9501';\n    \n    #[Inject]\n    protected Saga $saga;\n\n    #[GetMapping(path: 'successCase')]\n    public function successCase(): string\n    {\n        $payload = ['amount' => 50];\n        // Init Saga global transaction\n        $this->saga->init();\n        // Add TransOut sub-transaction\n        $this->saga->add(\n            $this->serviceUri . '/saga/transOut', \n            $this->serviceUri . '/saga/transOutCompensate', \n            $payload\n        );\n        // Add TransIn sub-transaction\n        $this->saga->add(\n            $this->serviceUri . '/saga/transIn', \n            $this->serviceUri . '/saga/transInCompensate', \n            $payload\n        );\n        // Submit Saga global transaction\n        $this->saga->submit();\n        // Get the global transaction ID through TransContext::getGid() and return it to the client\n        return TransContext::getGid();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Model Accessor - Hyperf - PHP\nDESCRIPTION: This code snippet demonstrates how to use the defined accessor to retrieve the modified `first_name` property from a model instance. The accessor `getFirstNameAttribute` automatically formats the name. Requires an existing `User` model instance fetched from the database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = App\\User::find(1);\n\n$firstName = $user->first_name;\n```\n\n----------------------------------------\n\nTITLE: Managing Database Transactions in PHP\nDESCRIPTION: Demonstrates how to use the `transaction` method to automatically manage database transactions. If an exception occurs within the closure, the transaction is rolled back; otherwise, it is committed. Also shows how to manually manage transactions with beginTransaction, commit, and rollback.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/quick-start.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\nDb::transaction(function () {\n    Db::table('user')->update(['votes' => 1]);\n\n    Db::table('posts')->delete();\n});\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\nDb::beginTransaction();\ntry{\n\n    // Do something...\n\n    Db::commit();\n} catch(\\Throwable $ex){\n    Db::rollBack();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Unique Validation with Additional Where Clause\nDESCRIPTION: Shows how to add an additional `where` clause to the unique validation query, allowing for more specific uniqueness constraints.  The example adds a constraint that `account_id` must be 1. Requires the 'users' table name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_40\n\nLANGUAGE: PHP\nCODE:\n```\n'email' => Rule::unique('users')->where(function ($query) {\n    $query->where('account_id', 1);\n})\n```\n\n----------------------------------------\n\nTITLE: Obtaining Request Object via Dependency Injection - PHP\nDESCRIPTION: This example demonstrates how to obtain the Request object via dependency injection in a Hyperf controller. The RequestInterface is injected into the controller method, providing access to the current request's PSR-7 Request object. The object is available only within the onRequest lifecycle.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass IndexController\n{\n    public function info(RequestInterface $request)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Job Definition\nDESCRIPTION: Demonstrates the correct way to define a Hyperf asynchronous queue job by only including necessary data as dependencies. This ensures that the serialized job size remains small and avoids issues with serializing complex objects.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Job;\n\nuse Hyperf\\AsyncQueue\\Job;\n\nclass ExampleJob extends Job\n{\n    public $params;\n    \n    /**\n     * 任务执行失败后的重试次数，即最大执行次数为 $maxAttempts+1 次\n     */\n    protected int $maxAttempts = 2;\n\n    public function __construct($params)\n    {\n        // 这里最好是普通数据，不要使用携带 IO 的对象，比如 PDO 对象\n        $this->params = $params;\n    }\n\n    public function handle()\n    {\n        // 根据参数处理具体逻辑\n        // 通过具体参数获取模型等\n        // 这里的逻辑会在 ConsumerProcess 进程中执行\n        var_dump($this->params);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Middleware Class Structure in Hyperf\nDESCRIPTION: This snippet shows the structure of a typical middleware class in Hyperf. It implements the `MiddlewareInterface` and includes a `process` method that handles the request and response flow.  It uses dependency injection to get instances of ContainerInterface, HttpResponse, and RequestInterface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/middleware/middleware.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Middleware\\Auth;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface as HttpResponse;\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass FooMiddleware implements MiddlewareInterface\n{\n    /**\n     * @var ContainerInterface\n     */\n    protected $container;\n\n    /**\n     * @var RequestInterface\n     */\n    protected $request;\n\n    /**\n     * @var HttpResponse\n     */\n    protected $response;\n\n    public function __construct(ContainerInterface $container, HttpResponse $response, RequestInterface $request)\n    {\n        $this->container = $container;\n        $this->response = $response;\n        $this->request = $request;\n    }\n\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // According to the specific business judgment logic, it is assumed that the token carried by the user is valid here.\n        $isValidToken = true;\n        if ($isValidToken) {\n            return $handler->handle($request);\n        }\n\n        return $this->response->json(\n            [\n                'code' => -1,\n                'data' => [\n                    'error' => 'The token is invalid, preventing further execution.',\n                ],\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Date Conversion Properties - Hyperf - PHP\nDESCRIPTION: This code defines the `$dates` property in a Hyperf model to specify which attributes should be automatically converted to Carbon instances. The `seen_at` attribute will be converted to a Carbon instance when retrieved from the database. Requires the `Hyperf\\DbConnection\\Model\\Model` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * Properties that should be converted to date format.\n     *\n     * @var array\n     */\n    protected $dates = [\n        'seen_at',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Query Builder Pagination in Hyperf\nDESCRIPTION: This snippet demonstrates how to paginate query results using the Query Builder in Hyperf. It queries the 'users' table and returns 10 records per page. The current page is determined by the 'page' parameter in the HTTP request.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/paginator.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Show all users in the app, 10 pieces of data per page\nreturn Db::table('users')->paginate(10);\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller in Hyperf\nDESCRIPTION: This PHP code defines a basic controller with an index method that receives request and response objects through dependency injection. It extracts the 'target' parameter from the request and returns a greeting string. The RequestInterface and ResponseInterface are injected by the dependency injection container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/controller.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\n\nclass IndexController\n{\n    // Related objects will be automatically injected by the dependency injection container if you obtain such objects by defining RequestInterface and ResponseInterface on the parameters.\n    public function index(RequestInterface $request, ResponseInterface $response)\n    {\n        $target = $request->input('target', 'World');\n        return 'Hello ' . $target;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Producing Kafka Messages in Controller\nDESCRIPTION: This code demonstrates how to produce Kafka messages within a Hyperf controller. It injects the `Hyperf\\Kafka\\Producer` and calls the `send` method to send a message to a specified topic with a value and a key. This requires enabling the `AutoController` annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/kafka.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Kafka\\Producer;\n\n#[AutoController]\nclass IndexController extends AbstractController\n{\n    public function index(Producer $producer)\n    {\n        $producer->send('hyperf', 'value', 'key');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Model in Hyperf\nDESCRIPTION: This code shows how to insert a new record into the database using the `save` method on a new model instance. It creates a new `User` model, sets the `name` property, and then calls `save` to persist the data to the database. The `created_at` and `updated_at` timestamps are automatically managed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = new User();\n\n$user->name = 'Hyperf';\n\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Manually Create Validator Instance\nDESCRIPTION: Demonstrates how to manually create a validator instance using the `ValidatorFactoryInterface`. Inject the interface, then call the `make` method with the data to be validated, the validation rules, and optional custom error messages.  This allows for more granular control over the validation process.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\Validation\\Contract\\ValidatorFactoryInterface;\n\nclass IndexController\n{\n    #[Inject]\n    protected ValidatorFactoryInterface $validationFactory;\n\n    public function foo(RequestInterface $request)\n    {\n        $validator = $this->validationFactory->make(\n            $request->all(),\n            [\n                'foo' => 'required',\n                'bar' => 'required',\n            ],\n            [\n                'foo.required' => 'foo is required',\n                'bar.required' => 'bar is required',\n            ]\n        );\n\n        if ($validator->fails()){\n            // Handle exception\n            $errorMessage = $validator->errors()->first();  \n        }\n        // Do something\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Model Definition with MorphOne Relation PHP\nDESCRIPTION: Defines the `Book` and `User` models with a `morphOne` relationship to the `Image` model. This allows each book and user to have one associated image. The second parameter of `morphOne` specifies the name of the polymorphic relation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/relationship.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Model;\n\nclass Book extends Model\n{\n    public function image()\n    {\n        return $this->morphOne(Image::class, 'imageable');\n    }\n}\n\nclass User extends Model\n{\n    public function image()\n    {\n        return $this->morphOne(Image::class, 'imageable');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Logger in Hyperf\nDESCRIPTION: This code snippet shows the default logger configuration file (logger.php) in a Hyperf project.  It sets up a StreamHandler to write logs to a file and configures a LineFormatter to format the log messages. The stream path, log level, and formatting options are configurable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/logger.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'handler' => [\n            'class' => \\Monolog\\Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => BASE_PATH . '/runtime/logs/hyperf.log',\n                'level' => \\Monolog\\Level::Debug,\n            ],\n        ],\n        'formatter' => [\n            'class' => \\Monolog\\Formatter\\LineFormatter::class,\n            'constructor' => [\n                'format' => null,\n                'dateFormat' => null,\n                'allowInlineLineBreaks' => true,\n            ]\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster with Seeds\nDESCRIPTION: This configuration demonstrates enabling Redis Cluster mode using the 'seeds' option, directly specifying the cluster node addresses.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/redis.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Ignore the other irrelevant configurations\nreturn [\n    'default' => [\n        'cluster' => [\n            'enable' => true,\n            'name' => null,\n            'seeds' => [\n                '192.168.1.110:6379',\n                '192.168.1.111:6379',\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Table Name\nDESCRIPTION: This snippet shows how to specify a custom table name for the model by defining the `$table` property.  If the table property is not set, Hyperf assumes the table name is the plural, snake-cased version of the class name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected ?string $table = 'user';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Coroutine Server in Hyperf\nDESCRIPTION: This code snippet demonstrates how to configure the Hyperf server to use the coroutine style by setting the `type` to `Hyperf\\Server\\CoroutineServer::class` in the `autoload/server.php` configuration file. It defines a single HTTP server with specific host, port, and callback settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/coroutine-server.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\nuse Hyperf\\Server\\Server;\n\nreturn [\n    'type' => Hyperf\\Server\\CoroutineServer::class,\n    'servers' => [\n        [\n            'name' => 'http',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9501,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [Hyperf\\HttpServer\\Server::class, 'onRequest'],\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Registering Exception Handler via Annotation in Hyperf\nDESCRIPTION: This snippet showcases how to register an exception handler using annotations in Hyperf. It utilizes the `Hyperf\\ExceptionHandler\\Annotation\\ExceptionHandler` annotation to associate the `AppExceptionHandler` class with the 'http' server and defines a priority. The `handle` method logs the error and returns a standardized error response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/exception-handler.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\ExceptionHandler\\ExceptionHandler;\nuse Hyperf\\HttpMessage\\Stream\\SwooleStream;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Throwable;\nuse Hyperf\\ExceptionHandler\\Annotation\\ExceptionHandler as RegisterHandler;\n\n// 這裡的 http 對應 config/autoload/server.php 內的 server 所對應的 name 值\n// priority 為排序\n#[RegisterHandler(server: 'http')]\nclass AppExceptionHandler extends ExceptionHandler\n{\n    public function __construct(protected StdoutLoggerInterface $logger)\n    {\n    }\n\n    public function handle(Throwable $throwable, ResponseInterface $response)\n    {\n        $this->logger->error(sprintf('%s[%s] in %s', $throwable->getMessage(), $throwable->getLine(), $throwable->getFile()));\n        $this->logger->error($throwable->getTraceAsString());\n        return $response->withHeader('Server', 'Hyperf')->withStatus(500)->withBody(new SwooleStream('Internal Server Error.'));\n    }\n\n    public function isValid(Throwable $throwable): bool\n    {\n        return true;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Optimizing Composer Autoload and Generating Hyperf Cache\nDESCRIPTION: These commands optimize the Composer autoloader and generate proxy classes and annotation caches for Hyperf. They are essential for improving memory usage and startup speed in production deployments.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/important.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 优化 Composer 索引\ncomposer dump-autoload -o\n# 生成代理类和注解缓存\nphp bin/hyperf.php\n```\n\n----------------------------------------\n\nTITLE: Limiting and offsetting results using skip/take and limit/offset in Hyperf\nDESCRIPTION: This snippet illustrates how to limit the number of returned results or skip a certain number of results using `skip` and `take` or `offset` and `limit`.  These methods are useful for implementing pagination.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->skip(10)->take(5)->get();\n\n$users = Db::table('users')->offset(10)->limit(5)->get();\n```\n\n----------------------------------------\n\nTITLE: Creating Coroutine Guzzle Client using ClientFactory - PHP\nDESCRIPTION: Demonstrates how to create a coroutine-enabled Guzzle client using the ClientFactory. The ClientFactory simplifies the creation of Guzzle clients configured to work within a Hyperf coroutine environment. The options array mirrors the GuzzleHttp\\Client constructor's config argument.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/guzzle.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Guzzle\\ClientFactory;\n\nclass Foo\n{\n    private ClientFactory $clientFactory;\n\n    public function __construct(ClientFactory $clientFactory)\n    {\n        $this->clientFactory = $clientFactory;\n    }\n    \n    public function bar()\n    {\n        // $options 等同於 GuzzleHttp\\Client 建構函式的 $config 引數\n        $options = [];\n        // $client 為協程化的 GuzzleHttp\\Client 物件\n        $client = $this->clientFactory->create($options);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Insert, Update, and Delete Queries in PHP\nDESCRIPTION: Demonstrates how to execute INSERT, UPDATE, and DELETE queries using the `Db` facade. The examples show inserting a new user, updating an existing user, and deleting a user. Also shows how to execute a stored procedure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/quick-start.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\DbConnection\\Db;\n\n$inserted = Db::insert('INSERT INTO user (id, name) VALUES (?, ?)', [1, 'Hyperf']); // 返回是否成功 bool\n\n$affected = Db::update('UPDATE user set name = ? WHERE id = ?', ['John', 1]); // 返回受影响的行数 int\n\n$affected = Db::delete('DELETE FROM user WHERE id = ?', [1]); // 返回受影响的行数 int\n\n$result = Db::statement(\"CALL pro_test(?, '?')\", [1, 'your words']);  // 返回 bool  CALL pro_test(?，?) 为存储过程，属性为 MODIFIES SQL DATA\n```\n\n----------------------------------------\n\nTITLE: Unique Validation with Custom Column for Uniqueness\nDESCRIPTION: Demonstrates how to specify a different column name for the uniqueness check. The example validates against 'email_address' instead of the attribute name. Requires the 'users' table name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_39\n\nLANGUAGE: PHP\nCODE:\n```\nRule::unique('users', 'email_address')->ignore($user->id),\n```\n\n----------------------------------------\n\nTITLE: Configure Multiple Handlers - PHP\nDESCRIPTION: This snippet demonstrates how to configure multiple handlers for a single log group in Hyperf, allowing logs to be written to multiple files based on log level.  It defines two stream handlers, one for `hyperf.log` and another for `hyperf-debug.log`, with different log levels and formatters. The first handler writes `INFO` level logs to `hyperf.log` using `LineFormatter`, and the second handler writes `INFO` level logs to `hyperf-debug.log` using `JsonFormatter`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/logger.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Monolog\\Handler;\nuse Monolog\\Formatter;\nuse Monolog\\Level;\n\nreturn [\n    'default' => [\n        'handlers' => [\n            [\n                'class' => Handler\\StreamHandler::class,\n                'constructor' => [\n                    'stream' => BASE_PATH . '/runtime/logs/hyperf.log',\n                    'level' => Level::Info,\n                ],\n                'formatter' => [\n                    'class' => Formatter\\LineFormatter::class,\n                    'constructor' => [\n                        'format' => null,\n                        'dateFormat' => null,\n                        'allowInlineLineBreaks' => true,\n                    ],\n                ],\n            ],\n            [\n                'class' => Handler\\StreamHandler::class,\n                'constructor' => [\n                    'stream' => BASE_PATH . '/runtime/logs/hyperf-debug.log',\n                    'level' => Level::Info,\n                ],\n                'formatter' => [\n                    'class' => Formatter\\JsonFormatter::class,\n                    'constructor' => [\n                        'batchMode' => Formatter\\JsonFormatter::BATCH_MODE_JSON,\n                        'appendNewline' => true,\n                    ],\n                ],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a One-to-One Relationship in Hyperf\nDESCRIPTION: This code snippet defines a one-to-one relationship between the `User` and `Role` models in Hyperf. The `role` method in the `User` model calls the `hasOne` method to establish the relationship, using 'user_id' as the foreign key in the `Role` table and 'id' as the local key in the `User` table. Requires the `Hyperf\\DbConnection\\Model\\Model` base class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/relationship.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    public function role()\n    {\n        return $this->hasOne(Role::class, 'user_id', 'id');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Soft Deletes\nDESCRIPTION: Shows how to enable soft deletes on a model using the `SoftDeletes` trait. When a soft-deleted model is 'deleted', the `deleted_at` column is set to the current timestamp instead of physically removing the record. Requires the `deleted_at` column to exist in the database table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Model;\n\nuse Hyperf\\Database\\Model\\Model;\nuse Hyperf\\Database\\Model\\SoftDeletes;\n\nclass User extends Model\n{\n    use SoftDeletes;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Exception Class in Hyperf\nDESCRIPTION: This PHP code snippet shows how to define a custom exception class `FooException` in Hyperf by extending the `Hyperf\\Server\\Exception\\ServerException` class. This allows creating specific exception types tailored to the application's needs.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/exception-handler.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Exception;\n\nuse App\\Constants\\ErrorCode;\nuse Hyperf\\Server\\Exception\\ServerException;\nuse Throwable;\n\nclass FooException extends ServerException\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Controller Annotation in Hyperf\nDESCRIPTION: This snippet illustrates how to define routes using the `#[Controller]` and `#[RequestMapping]` annotations. It allows for finer-grained control over route definitions, specifying methods and paths. Requires `use Hyperf\\HttpServer\\Annotation\\Controller;` and `use Hyperf\\HttpServer\\Annotation\\RequestMapping;`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/overview.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\n\n#[Controller]\nclass IndexController\n{\n    // Hyperf 會自動為此方法生成一個 /index/index 的路由，允許透過 GET 或 POST 方式請求\n    #[RequestMapping(path: \"index\", methods: \"get,post\")]\n    public function index(RequestInterface $request)\n    {\n        // 從請求中獲得 id 引數\n        $id = $request->input('id', 1);\n        return (string)$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Short-Lived Objects with Dependency Injection in Hyperf\nDESCRIPTION: This snippet demonstrates how to create short-lived objects in Hyperf using the `make()` function, allowing you to inject dependencies through the DI container. This creates a new instance, unlike the long-lived objects managed directly by the container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/di.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$userService = make(UserService::class, ['enableCache' => true]);\n```\n\n----------------------------------------\n\nTITLE: Basic Database Configuration in Hyperf\nDESCRIPTION: This code snippet demonstrates a basic database configuration in Hyperf. It defines connection parameters such as driver, host, port, database name, username, password, charset, collation, prefix, and connection pool settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/quick-start.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER','mysql'),\n        'host' => env('DB_HOST','localhost'),\n        'port' => env('DB_PORT', 3306),\n        'database' => env('DB_DATABASE','hyperf'),\n        'username' => env('DB_USERNAME','root'),\n        'password' => env('DB_PASSWORD',''),\n        'charset' => env('DB_CHARSET','utf8'),\n        'collation' => env('DB_COLLATION','utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX',''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float)env('DB_MAX_IDLE_TIME', 60),\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Signal Handlers for Process Stop in Hyperf\nDESCRIPTION: This PHP code snippet configures signal handlers to ensure the safe shutdown of Hyperf processes, especially important for asynchronous queue consumers.  It defines the `ProcessStopHandler` to be executed when a process stop signal is received, allowing it to complete any in-progress tasks before termination.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'handlers' => [\n        Hyperf\\Process\\Handler\\ProcessStopHandler::class,\n    ],\n    'timeout' => 5.0,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Configure JsonRpcPoolTransporter in dependencies.php (Hyperf)\nDESCRIPTION: This code snippet demonstrates how to configure the `JsonRpcPoolTransporter` to replace the default `JsonRpcTransporter` in the `dependencies.php` file. This improves connection management by using a connection pool, especially in high-concurrency scenarios. It returns an associative array that maps the `JsonRpcTransporter` interface to its `JsonRpcPoolTransporter` implementation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/json-rpc.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\JsonRpc\\JsonRpcPoolTransporter;\nuse Hyperf\\JsonRpc\\JsonRpcTransporter;\n\nreturn [\n    JsonRpcTransporter::class => JsonRpcPoolTransporter::class,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from Hyperf Session\nDESCRIPTION: Retrieves data from the session using the `get` method.  The `get` method takes a string representing the key and an optional default value. If the key exists, the corresponding value is returned; otherwise, the default value is returned.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/session.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$this->session->get('foo', $default = null);\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with #[Controller] and #[RequestMapping] Annotations in Hyperf (PHP)\nDESCRIPTION: This code snippet shows how to define routes using the `#[Controller]` and `#[RequestMapping]` annotations. The `#[Controller]` annotation marks a class as a controller, while `#[RequestMapping]` defines the request methods and paths. Requires `use Hyperf\\HttpServer\\Annotation\\Controller;` and `use Hyperf\\HttpServer\\Annotation\\RequestMapping;`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/overview.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\n\n#[Controller]\nclass IndexController\n{\n    // Hyperf 會自動為此方法生成一個 /index/index 的路由，允許通過 GET 或 POST 方式請求\n    #[RequestMapping(path: \"index\", methods: \"get,post\")]\n    public function index(RequestInterface $request)\n    {\n        // 從請求中獲得 id 參數\n        $id = $request->input('id', 1);\n        return (string)$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Object Injection: UserService Class\nDESCRIPTION: Defines a simple UserService class with a getInfoById method. This class is used as a dependency in subsequent examples.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Service;\n\nclass UserService\n{\n    public function getInfoById(int $id)\n    {\n        // 我们假设存在一个 Info 实体\n        return (new Info())->fill($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Producing Batch Kafka Messages in Controller\nDESCRIPTION: This code demonstrates how to produce a batch of Kafka messages within a Hyperf controller. It injects the `Hyperf\\Kafka\\Producer` and calls the `sendBatch` method to send multiple messages to specified topics with values and keys.  This requires enabling the `AutoController` annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/kafka.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Kafka\\Producer;\nuse longlang\\phpkafka\\Producer\\ProduceMessage;\n\n#[AutoController]\nclass IndexController extends AbstractController\n{\n    public function index(Producer $producer)\n    {\n        $producer->sendBatch([\n            new ProduceMessage('hyperf1', 'hyperf1_value', 'hyperf1_key'),\n            new ProduceMessage('hyperf2', 'hyperf2_value', 'hyperf2_key'),\n            new ProduceMessage('hyperf3', 'hyperf3_value', 'hyperf3_key'),\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Testing the Controller with cURL\nDESCRIPTION: This bash command demonstrates how to test the defined controller using cURL. It sends a GET request to the specified address with a 'target' parameter set to 'Hyperf'. The expected output is 'Hello Hyperf.'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/controller.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ curl http://127.0.0.1:9501/\\?target\\=Hyperf\nHello Hyperf.\n```\n\n----------------------------------------\n\nTITLE: Generating AMQP Producer\nDESCRIPTION: This command uses the Hyperf CLI to generate a new AMQP producer class named DemoProducer. This simplifies the creation of a producer for sending messages to the AMQP broker.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/amqp.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:amqp-producer DemoProducer\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Database Connections in Hyperf (PHP)\nDESCRIPTION: This snippet demonstrates how to configure multiple database connections within the Hyperf framework. It defines the 'default' and 'test' connections, specifying the driver, host, database, username, password, charset, collation, prefix, and connection pool settings for each. Environment variables are used to configure database settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/quick-start.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER','mysql'),\n        'host' => env('DB_HOST','localhost'),\n        'database' => env('DB_DATABASE','hyperf'),\n        'username' => env('DB_USERNAME','root'),\n        'password' => env('DB_PASSWORD',''),\n        'charset' => env('DB_CHARSET','utf8'),\n        'collation' => env('DB_COLLATION','utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX',''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('DB_MAX_IDLE_TIME', 60),\n        ],\n    ],\n    'test'=>[\n        'driver' => env('DB_DRIVER','mysql'),\n        'host' => env('DB_HOST2','localhost'),\n        'database' => env('DB_DATABASE','hyperf'),\n        'username' => env('DB_USERNAME','root'),\n        'password' => env('DB_PASSWORD',''),\n        'charset' => env('DB_CHARSET','utf8'),\n        'collation' => env('DB_COLLATION','utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX',''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('DB_MAX_IDLE_TIME', 60),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Updating JSON Fields - PHP\nDESCRIPTION: This snippet demonstrates how to update a JSON field within a database record. This is supported in MySQL 5.7+.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('id', 1)->update(['options->enabled' => true]);\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Middlewares via #[Middlewares] Annotation\nDESCRIPTION: Illustrates defining multiple middleware using the `#[Middlewares]` annotation in Hyperf.  The `#[Middlewares]` annotation takes an array of middleware classes, ensuring that all listed middleware are executed for requests handled by the annotated controller. Requires the `#[AutoController]` or `#[Controller]` annotation to be present on the same class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/middleware/middleware.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Middleware\\BarMiddleware;\nuse App\\Middleware\\FooMiddleware;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\HttpServer\\Annotation\\Middleware;\nuse Hyperf\\HttpServer\\Annotation\\Middlewares;\n\n#[AutoController]\n#[Middlewares([FooMiddleware::class, BarMiddleware::class])]\nclass IndexController\n{\n    public function index()\n    {\n        return 'Hello Hyperf.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migration Class Structure in Hyperf\nDESCRIPTION: This code shows the basic structure of a migration class in Hyperf. It includes the `up` method for applying changes and the `down` method for reverting them. Requires the `Hyperf\\Database\\Schema\\Schema`, `Hyperf\\Database\\Schema\\Blueprint`, and `Hyperf\\Database\\Migrations\\Migration` classes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Database\\Schema\\Schema;\nuse Hyperf\\Database\\Schema\\Blueprint;\nuse Hyperf\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('true', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('true');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster with 'seeds' in PHP\nDESCRIPTION: This PHP configuration enables Redis Cluster mode by directly providing a list of seed nodes. This allows the client to discover the cluster topology.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/redis.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// 省略其他配置\nreturn [\n    'default' => [\n        'cluster' => [\n            'enable' => true,\n            'name' => null,\n            'seeds' => [\n                '192.168.1.110:6379',\n                '192.168.1.111:6379',\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Defining Routes via Configuration File in Hyperf (PHP)\nDESCRIPTION: This code snippet demonstrates how to define routes in the `config/routes.php` file using the `Hyperf\\HttpServer\\Router\\Router` class. It shows how to bind different HTTP methods (GET, POST, HEAD) to specific controller methods using different syntax.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/overview.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\HttpServer\\Router\\Router;\n\n// 此處代碼示例為每個示例都提供了三種不同的綁定定義方式，實際配置時僅可採用一種且僅定義一次相同的路由\n\n// 設置一個 GET 請求的路由，綁定訪問地址 '/get' 到 App\\Controller\\IndexController 的 get 方法\nRouter::get('/get', 'App\\Controller\\IndexController::get');\nRouter::get('/get', 'App\\Controller\\IndexController@get');\nRouter::get('/get', [\\App\\Controller\\IndexController::class, 'get']);\n\n// 設置一個 POST 請求的路由，綁定訪問地址 '/post' 到 App\\Controller\\IndexController 的 post 方法\nRouter::post('/post', 'App\\Controller\\IndexController::post');\nRouter::post('/post', 'App\\Controller\\IndexController@post');\nRouter::post('/post', [\\App\\Controller\\IndexController::class, 'post']);\n\n// 設置一個允許 GET、POST 和 HEAD 請求的路由，綁定訪問地址 '/multi' 到 App\\Controller\\IndexController 的 multi 方法\nRouter::addRoute(['GET', 'POST', 'HEAD'], '/multi', 'App\\Controller\\IndexController::multi');\nRouter::addRoute(['GET', 'POST', 'HEAD'], '/multi', 'App\\Controller\\IndexController@multi');\nRouter::addRoute(['GET', 'POST', 'HEAD'], '/multi', [\\App\\Controller\\IndexController::class, 'multi']);\n```\n\n----------------------------------------\n\nTITLE: Interface Binding Configuration PHP\nDESCRIPTION: This code snippet defines the binding between the service interface `CalculatorServiceInterface` and its implementation `CalculatorServiceConsumer` in the `config/autoload/dependencies.php` file. This allows the client to use the consumer by injecting the interface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/json-rpc.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    App\\JsonRpc\\CalculatorServiceInterface::class => App\\JsonRpc\\CalculatorServiceConsumer::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Service Configuration (Hyperf)\nDESCRIPTION: This configuration file (config/autoload/services.php) controls the service discovery and registration behavior.  It defines whether discovery and registration are enabled, along with configuration for the Consul and Nacos drivers, including server addresses, credentials, and health check settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/service-register.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'enable' => [\n        // 开启服务发现\n        'discovery' => true,\n        // 开启服务注册\n        'register' => true,\n    ],\n    // 服务消费者相关配置\n    'consumers' => [],\n    // 服务提供者相关配置\n    'providers' => [],\n    // 服务驱动相关配置\n    'drivers' => [\n        'consul' => [\n            'uri' => 'http://127.0.0.1:8500',\n            'token' => '',\n            'check' => [\n                'deregister_critical_service_after' => '90m',\n                'interval' => '1s',\n            ],\n        ],\n        'nacos' => [\n            // nacos server url like https://nacos.hyperf.io, Priority is higher than host:port\n            // 'url' => '',\n            // The nacos host info\n            'host' => '127.0.0.1',\n            'port' => 8848,\n            // The nacos account info\n            'username' => null,\n            'password' => null,\n            'guzzle' => [\n                'config' => null,\n            ],\n            'group_name' => 'api',\n            'namespace_id' => 'namespace_id',\n            'heartbeat' => 5,\n            'ephemeral' => false, // 是否注册临时实例\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Multi-Database Configuration in PHP\nDESCRIPTION: Configures multiple database connections, named `default` and `test`, with different host configurations.  This allows the application to connect to different databases based on the selected connection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/quick-start.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER', 'mysql'),\n        'host' => env('DB_HOST', 'localhost'),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => env('DB_CHARSET', 'utf8'),\n        'collation' => env('DB_COLLATION', 'utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX', ''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('DB_MAX_IDLE_TIME', 60),\n        ],\n    ],\n    'test'=>[\n        'driver' => env('DB_DRIVER', 'mysql'),\n        'host' => env('DB_HOST2', 'localhost'),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => env('DB_CHARSET', 'utf8'),\n        'collation' => env('DB_COLLATION', 'utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX', ''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('DB_MAX_IDLE_TIME', 60),\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Testing DemoLogic with Inject Mock\nDESCRIPTION: This snippet demonstrates testing `DemoLogic` when `DemoApi` is injected via the `#[Inject]` annotation. It overrides the `DemoApi` binding in the container with a mock and verifies the result.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/testing.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace HyperfTest\\Cases;\n\nuse App\\Api\\DemoApi;\nuse App\\Logic\\DemoLogic;\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Context\\ApplicationContext;\nuse HyperfTest\\HttpTestCase;\nuse Mockery;\n\nclass DemoLogicTest extends HttpTestCase\n{\n    /**\n     * @after\n     */\n    public function tearDownAfterMethod()\n    {\n        Mockery::close();\n    }\n\n    public function testIndex()\n    {\n        $this->getContainer();\n\n        $res = $this->getContainer()->get(DemoLogic::class)->test();\n\n        $this->assertEquals(11, $res['status']);\n    }\n\n    /**\n     * @return Container\n     */\n    protected function getContainer()\n    {\n        $container = ApplicationContext::getContainer();\n\n        $apiStub = $this->createMock(DemoApi::class);\n\n        $apiStub->method('test')->willReturn([\n            'status' => 11\n        ]);\n\n        $container->define(DemoApi::class, function () use ($apiStub) {\n            return $apiStub;\n        });\n        \n        return $container;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Select Statement - PHP\nDESCRIPTION: This snippet shows how to select specific columns from a database table using the `select()` method. It retrieves the 'name' and 'email' columns from the 'user' table, aliasing 'email' as 'user_email'. It also demonstrates using distinct() to only retrieve unique records.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->select('name', 'email as user_email')->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->distinct()->get();\n```\n\n----------------------------------------\n\nTITLE: Defining a Polymorphic One-to-One Relationship in Hyperf\nDESCRIPTION: This code snippet shows how to define a polymorphic one-to-one relationship in Hyperf. The `Image` model uses `morphTo` to define the inverse relationship, while `Book` and `User` models use `morphOne` to define the relationship to `Image`. This allows `Image` to belong to either `Book` or `User`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/relationship.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Model;\n\nclass Image extends Model\n{\n    public function imageable()\n    {\n        return $this->morphTo();\n    }\n}\n\nclass Book extends Model\n{\n    public function image()\n    {\n        return $this->morphOne(Image::class, 'imageable');\n    }\n}\n\nclass User extends Model\n{\n    public function image()\n    {\n        return $this->morphOne(Image::class, 'imageable');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Specifying a Select statement in Hyperf\nDESCRIPTION: This snippet shows how to use the `select()` method to customize the fields to be retrieved from a database table. It retrieves only the 'name' and 'email' fields from the 'user' table, aliasing 'email' as 'user_email'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->select('name', 'email as user_email')->get();\n```\n\n----------------------------------------\n\nTITLE: Using orderByRaw method in Hyperf\nDESCRIPTION: This snippet demonstrates the use of `orderByRaw` method for setting a raw string as the value of the `order by` clause. It orders the results based on the difference between `updated_at` and `created_at` in descending order.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('order')\n    ->orderByRaw('updated_at - created_at DESC')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Creating Models: firstOrCreate\nDESCRIPTION: Demonstrates the use of `firstOrCreate` to find an existing model or create a new one. It shows two examples: one with only the identifying attributes and another with both identifying and creating attributes. This method attempts to retrieve a model based on the given criteria. If no matching model exists, it creates a new model using the provided attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n// 通过 name 来查找用户，不存在则创建...\n$user = User::firstOrCreate(['name' => 'Hyperf']);\n\n// 通过 name 查找用户，不存在则使用 name 和 gender, age 属性创建...\n$user = User::firstOrCreate(\n    ['name' => 'Hyperf'],\n    ['gender' => 1, 'age' => 20]\n);\n\n```\n\n----------------------------------------\n\nTITLE: Define Command Signature (PHP)\nDESCRIPTION: This code defines a command `test:test` with the signature string. The signature defines an argument `id` and an option `name`.  The `handle` method dumps both arguments and options, demonstrating how to access them when using signature-based command definition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Psr\\Container\\ContainerInterface;\n\n#[Command]\nclass DebugCommand extends HyperfCommand\n{\n    protected ContainerInterface $container;\n\n    protected ?string $signature = 'test:test {id : user_id} {--name= : user_name}';\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n        parent::__construct();\n    }\n\n    public function configure()\n    {\n        parent::configure();\n        $this->setDescription('Hyperf Demo Command');\n    }\n\n    public function handle()\n    {\n        var_dump($this->input->getArguments());\n        var_dump($this->input->getOptions());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Form Request in Controller\nDESCRIPTION: This code shows how to use a FormRequest in a controller by type-hinting it as a parameter in the controller method. The validation will be automatically triggered before the controller logic is executed.  Validated data can be accessed via the `validated()` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Request\\FooRequest;\n\nclass IndexController\n{\n    public function index(FooRequest $request)\n    {\n        // The incoming request is verified...\n\n        // Get the verified data...\n        $validated = $request->validated();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running a DAG with Hyperf\nDESCRIPTION: This example demonstrates how to create a DAG, add vertices representing tasks (using closures with sleep for simulation), define dependencies between tasks using edges, and then run the DAG. It showcases the concurrent execution capabilities where tasks without dependencies can run simultaneously.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/dag.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$dag = new \\Hyperf\\Dag\\Dag();\n$a = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"A\\n\";});\n$b = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"B\\n\";});\n$c = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"C\\n\";});\n$d = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"D\\n\";});\n$e = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"E\\n\";});\n$f = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"F\\n\";});\n$g = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"G\\n\";});\n$h = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"H\\n\";});\n$i = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"I\\n\";});\n$dag->addVertex($a)\n    ->addVertex($b)\n    ->addVertex($c)\n    ->addVertex($d)\n    ->addVertex($e)\n    ->addVertex($f)\n    ->addVertex($g)\n    ->addVertex($h)\n    ->addVertex($i)\n    ->addEdge($a, $b)\n    ->addEdge($a, $c)\n    ->addEdge($a, $d)\n    ->addEdge($b, $h)\n    ->addEdge($b, $e)\n    ->addEdge($b, $f)\n    ->addEdge($c, $f)\n    ->addEdge($c, $g)\n    ->addEdge($d, $g)\n    ->addEdge($h, $i)\n    ->addEdge($e, $i)\n    ->addEdge($f, $i)\n    ->addEdge($g, $i);\n    \n// 需要在协程环境下执行\n$dag->run()\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware Priority in Hyperf\nDESCRIPTION: These snippets demonstrate how to configure middleware priority in Hyperf for global, route, and class levels.  A higher priority value results in earlier execution.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/middleware/middleware.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// middleware.php\nreturn [\n    'http' => [\n        YourMiddleware::class,\n        YourMiddlewareB::class => 3,\n    ],\n];\n```\n\nLANGUAGE: PHP\nCODE:\n```\nRouter::addGroup(\n    '/v2', function () {\n        Router::get('/index', [\\App\\Controller\\IndexController::class, 'index']);\n    },\n    [\n        'middleware' => [\n            FooMiddleware::class,\n            FooMiddlewareB::class => 3,\n        ]\n    ]\n);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n#[AutoController]\n#[Middleware(FooMiddleware::class)]\n#[Middleware(FooMiddlewareB::class, 3)]\n#[Middlewares([FooMiddlewareC::class => 1, BarMiddlewareD::class => 4])]\nclass IndexController\n{\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Configure ETCD Connection in Hyperf\nDESCRIPTION: This configuration file defines the connection parameters for the ETCD server, including the URI, version, and various options like timeout.  This configuration is essential for the Hyperf application to establish a connection with the ETCD server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/etcd.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'uri' => 'http://192.168.1.200:2379',\n    'version' => 'v3beta',\n    'options' => [\n        'timeout' => 10,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Validating Existance of a Record\nDESCRIPTION: This example demonstrates how to validate if a record exists in a database table using Rule::exists with a custom query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($data, [\n    'email' => [\n        'required',\n        Rule::exists('staff')->where(function ($query) {\n            $query->where('account_id', 1);\n        }),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Custom Meta Generator\nDESCRIPTION: This code snippet defines a custom ID generator that uses a User ID to generate the Snowflake ID, demonstrating how to override the default Meta generator.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/snowflake.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Snowflake\\IdGenerator\\SnowflakeIdGenerator;\n\nclass UserDefinedIdGenerator\n{\n    protected SnowflakeIdGenerator $idGenerator;\n\n    public function __construct(SnowflakeIdGenerator $idGenerator)\n    {\n        $this->idGenerator = $idGenerator;\n    }\n\n    public function generate(int $userId)\n    {\n        $meta = $this->idGenerator->getMetaGenerator()->generate();\n\n        return $this->idGenerator->generate($meta->setWorkerId($userId % 31));\n    }\n\n    public function degenerate(int $id)\n    {\n        return $this->idGenerator->degenerate($id);\n    }\n}\n\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n$generator = $container->get(UserDefinedIdGenerator::class);\n$userId = 20190620;\n\n$id = $generator->generate($userId);\n\n```\n\n----------------------------------------\n\nTITLE: Generating Migration File (Bash)\nDESCRIPTION: This command generates a new migration file for creating a users table. The filename parameter (create_users_table) typically reflects the purpose of the migration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:migration create_users_table\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection via #[Inject] Annotation in Hyperf\nDESCRIPTION: This snippet demonstrates dependency injection in Hyperf using the `#[Inject]` annotation.  It shows how to declare a dependency (UserService) as a property of a controller, annotate it with `#[Inject]`, and Hyperf will automatically inject the corresponding object. Requires the namespace `use Hyperf\\Di\\Annotation\\Inject;`. The `UserService` is then used within the `info` method to retrieve user information.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/overview.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse App\\Service\\UserService;\n\n#[AutoController]\nclass IndexController\n{\n    #[Inject]\n    private UserService $userService;\n    \n    // /index/info\n    public function info(RequestInterface $request)\n    {\n        $id = $request->input('id', 1);\n        return $this->userService->getInfoById((int)$id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Crontab Tasks via Config - PHP\nDESCRIPTION: This configuration in `config/autoload/crontab.php` defines cron tasks using the `Hyperf\\Crontab\\Crontab` class. It showcases defining callback, command, and closure based cron tasks with different options.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/crontab.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// config/autoload/crontab.php\nuse Hyperf\\Crontab\\Crontab;\nreturn [\n    'enable' => true,\n    // 通过配置文件定义的定时任务\n    'crontab' => [\n        // Callback类型定时任务（默认）\n        (new Crontab())->setName('Foo')->setRule('* * * * *')->setCallback([App\\Task\\FooTask::class, 'execute'])->setMemo('这是一个示例的定时任务'),\n        // Command类型定时任务\n        (new Crontab())->setType('command')->setName('Bar')->setRule('* * * * *')->setCallback([\n            'command' => 'swiftmailer:spool:send',\n            // (optional) arguments\n            'fooArgument' => 'barValue',\n            // (optional) options\n            '--message-limit' => 1,\n            // 记住要加上，否则会导致主进程退出\n            '--disable-event-dispatcher' => true,\n        ])->setEnvironments(['develop', 'production']),\n        // Closure 类型定时任务 (仅在 Coroutine style server 中支持)\n        (new Crontab())->setType('closure')->setName('Closure')->setRule('* * * * *')->setCallback(function () {\n            var_dump(date('Y-m-d H:i:s'));\n        })->setEnvironments('production'),\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Aggregation Queries (count, max, min, avg, sum) in Hyperf\nDESCRIPTION: Shows how to perform aggregation queries using methods like `count()`, `max()`, `min()`, `avg()`, and `sum()` to retrieve aggregated data from the database. This is useful for getting summary statistics from your data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$count = Db::table('user')->count();\n```\n\n----------------------------------------\n\nTITLE: Automatically Managing Database Transactions in Hyperf (PHP)\nDESCRIPTION: This snippet demonstrates how to automatically manage database transactions using the `Db::transaction()` method in Hyperf. The code within the closure is executed as a transaction. If an exception occurs, the transaction is rolled back; otherwise, it is committed automatically.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/quick-start.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\nDb::transaction(function () {\n    Db::table('user')->update(['votes' => 1]);\n\n    Db::table('posts')->delete();\n});\n\n```\n\n----------------------------------------\n\nTITLE: Filter Many-to-Many Relationship with Pivot Table Conditions (PHP)\nDESCRIPTION: This code demonstrates how to filter the results of a many-to-many relationship based on conditions in the pivot table. It uses the wherePivot and wherePivotIn methods to apply these conditions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nreturn $this->belongsToMany('App\\Role')->wherePivot('approved', 1);\n\nreturn $this->belongsToMany('App\\Role')->wherePivotIn('priority', [1, 2]);\n\n```\n\n----------------------------------------\n\nTITLE: Creating an RPC Service in Hyperf\nDESCRIPTION: This code snippet shows how to create an RPC service in Hyperf using annotations. The `RpcService` annotation defines the service name, server, and protocol. The class implements a service interface (`CalculatorServiceInterface`).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/rpc-multiplex.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\RPC;\n\nuse App\\JsonRpc\\CalculatorServiceInterface;\nuse Hyperf\\RpcMultiplex\\Constant;\nuse Hyperf\\RpcServer\\Annotation\\RpcService;\n\n/**\n * @RpcService(name=\"CalculatorService\", server=\"rpc\", protocol=Constant::PROTOCOL_DEFAULT)\n */\nclass CalculatorService implements CalculatorServiceInterface\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Results with Db::select() and get() - PHP\nDESCRIPTION: This code snippet demonstrates how to fetch data from a database table using both `Db::select()` and `Db::table('user')->get()` methods in Hyperf. `Db::select()` returns an array, while `get()` returns a `Hyperf\\Collection\\Collection` of `stdClass` objects.  These methods are used to retrieve data from the 'user' table. The select statement can retrieve all fields or specific fields with aliasing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\DbConnection\\Db;\n\n$users = Db::select('SELECT * FROM user;');\n$users = Db::table('user')->get();\n$users = Db::table('user')->select('name', 'gender as user_gender')->get();\n```\n\n----------------------------------------\n\nTITLE: Default Redis Configuration\nDESCRIPTION: This PHP code defines the default Redis connection configuration within a Hyperf application. It includes settings for host, authentication, port, database, cluster mode, connection pool, and client options.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/redis.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', ''),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'cluster' => [\n            'enable' => (bool) env('REDIS_CLUSTER_ENABLE', false),\n            'name' => null,\n            'seeds' => [],\n        ],\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n        'options' => [ // Redis 客户端 Options, 参照 https://github.com/phpredis/phpredis#setoption\n            \\Redis::OPT_PREFIX => env('REDIS_PREFIX', ''),\n            // or 'prefix' => env('REDIS_PREFIX', ''), v3.0.38 或更高版本\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Register Service using #[RpcService] annotation PHP\nDESCRIPTION: This code snippet demonstrates how to register a service in Hyperf using the `#[RpcService]` annotation. It defines a class `CalculatorService` that implements the `CalculatorServiceInterface` and exposes a `calculate` method.  The `name`, `protocol`, and `server` parameters are specified for the annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/service-register.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\JsonRpc;\n\nuse Hyperf\\RpcServer\\Annotation\\RpcService;\n\n#[RpcService(name: \"CalculatorService\", protocol: \"jsonrpc-http\", server: \"jsonrpc-http\")]\nclass CalculatorService implements CalculatorServiceInterface\n{\n    // Implement an add method with only int type in this example.\n    public function calculate(int $a, int $b): int\n    {\n        // Specific implementation of the service method\n        return $a + $b;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Delete with Cache Clearing\nDESCRIPTION: Demonstrates how to perform bulk deletes on models while automatically clearing the corresponding cached data using `Model::query`.  The first parameter of `User::query` enables the cache deletion.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model-cache.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Delete user data from the database and the framework will automatically delete the corresponding cached data.\nUser::query(true)->where('gender', '>', 1)->delete();\n```\n\n----------------------------------------\n\nTITLE: Getting Session Data\nDESCRIPTION: This code demonstrates how to retrieve data from the session using the `get()` method of the `SessionInterface`.  It takes a string as the key (`foo`) and an optional default value (`null`) which will be returned if the key is not found in the session.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/session.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$this->session->get('foo', $default = null);\n```\n\n----------------------------------------\n\nTITLE: Defining Routes using Closures in Hyperf\nDESCRIPTION: This code snippet demonstrates how to define a simple route in Hyperf using a closure. The route maps the URI `/hello-hyperf` to a closure that returns the string 'Hello Hyperf.'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/router.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\HttpServer\\Router\\Router;\n\nRouter::get('/hello-hyperf', function () {\n    return 'Hello Hyperf.';\n});\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Configuration\nDESCRIPTION: Configuration to enable lazy loading for UserService. This creates a proxy class that instantiates the real UserService only when it's actually used.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    /**\n     * 格式为：代理类名 => 原类名\n     * 代理类此时是不存在的，Hyperf会在runtime文件夹下自动生成该类。\n     * 代理类类名和命名空间可以自由定义。\n     */\n    'App\\Service\\LazyUserService' => \\App\\Service\\UserServiceInterface::class\n];\n```\n\n----------------------------------------\n\nTITLE: Specify Database Connection (Hyperf)\nDESCRIPTION: Demonstrates how to specify a specific database connection for a Hyperf model by defining the `$connection` property. The `connection-name` must be defined in the `databases.php` configuration file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected ?string $connection = 'connection-name';\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Container Object via Constructor\nDESCRIPTION: Demonstrates how to obtain the DI container instance by injecting Psr\\Container\\ContainerInterface into a class constructor.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Psr\\Container\\ContainerInterface;\n\nclass IndexController\n{\n    private ContainerInterface $container;\n    \n    // 通过在构造函数的参数上声明参数类型完成自动注入\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Model Property Modification and Save in PHP\nDESCRIPTION: This code demonstrates how to modify properties of a value object associated with a model and persist the changes to the database. It highlights the behavior in Hyperf where direct modifications to the value object fields are not immediately reflected in the model's attributes, but are synchronized upon saving the model.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$user = App\\User::find(1);\n\n$user->address->lineOne = 'Updated Address Value';\n$user->address->lineTwo = '#10000';\n\n$user->save();\n\nvar_dump($user->getAttributes());\n//[\n//    'address_line_one' => 'Updated Address Value',\n//    'address_line_two' => '#10000'\n//];\n```\n\n----------------------------------------\n\nTITLE: Retrieving results with Db::select() and Db::table()->get() in Hyperf\nDESCRIPTION: This snippet demonstrates how to retrieve data from a database table using the `Db::select()` method with a raw SQL query and using the `Db::table()` method with the `get()` method in Hyperf.  The `Db::select()` method returns an array, while `Db::table('user')->get()` returns a `Hyperf\\Collection\\Collection` of `stdClass` objects. It also shows how to use select() method to choose specific columns.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\DbConnection\\Db;\n\n$users = Db::select('SELECT * FROM user;');\n$users = Db::table('user')->get();\n$users = Db::table('user')->select('name', 'gender as user_gender')->get();\n```\n\n----------------------------------------\n\nTITLE: Globally Change Request/Response Objects - Hyperf - PHP\nDESCRIPTION: This snippet demonstrates how to globally change the request and response objects within the coroutine context in Hyperf using the Context class. It sets the modified request and response objects in the context, allowing subsequent non-transitive code to access the updated objects.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/middleware/middleware.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\n// $request and $response are the modified objects\n$request = \\Hyperf\\Context\\Context::set(ServerRequestInterface::class, $request);\n$response = \\Hyperf\\Context\\Context::set(ResponseInterface::class, $response);\n```\n\n----------------------------------------\n\nTITLE: Counting records in Hyperf\nDESCRIPTION: Demonstrates usage of the `count()` aggregate function, to get the number of User records with gender = 1.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$count = User::query()->where('gender', 1)->count();\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Routes in Hyperf\nDESCRIPTION: This code snippet showcases how to define standard routes using a Controller and Action. Each `Router::get` call binds the `/hello-hyperf` URI to the `hello` method within the `App\\Controller\\IndexController` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/router.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\HttpServer\\Router\\Router;\n\n// 下面三种方式的任意一种都可以达到同样的效果\nRouter::get('/hello-hyperf', 'App\\Controller\\IndexController::hello');\nRouter::get('/hello-hyperf', 'App\\Controller\\IndexController@hello');\nRouter::get('/hello-hyperf', [App\\Controller\\IndexController::class, 'hello']);\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Association\nDESCRIPTION: Defines a many-to-many relationship between the User and Role models using the belongsToMany method. This example uses the default table name based on alphabetical order. The return value is used to query roles associated with a user.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/relationship.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    public function roles()\n    {\n        return $this->belongsToMany(Role::class);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Usage\nDESCRIPTION: This example demonstrates how to retrieve the Redis client from the Hyperf container and execute a basic command (keys('*')). Requires the Hyperf Context component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/redis.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n\n$redis = $container->get(\\Hyperf\\Redis\\Redis::class);\n$result = $redis->keys('*');\n\n```\n\n----------------------------------------\n\nTITLE: Basic Hyperf Middleware Structure\nDESCRIPTION: Illustrates the basic structure of a Hyperf middleware.  A Hyperf middleware implements the `MiddlewareInterface` and contains a `process` method which receives the request and a handler.  The middleware can modify the request or response, or delegate the request to the handler to continue the request processing chain.  It should return a `ResponseInterface` object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/middleware/middleware.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Middleware\\Auth;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface as HttpResponse;\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass FooMiddleware implements MiddlewareInterface\n{\n    protected ContainerInterface $container;\n\n    protected RequestInterface $request;\n\n    protected HttpResponse $response;\n\n    public function __construct(ContainerInterface $container, HttpResponse $response, RequestInterface $request)\n    {\n        $this->container = $container;\n        $this->response = $response;\n        $this->request = $request;\n    }\n\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // 根据具体业务判断逻辑走向，这里假设用户携带的token有效\n        $isValidToken = true;\n        if ($isValidToken) {\n            return $handler->handle($request);\n        }\n\n        return $this->response->json(\n            [\n                'code' => -1,\n                'data' => [\n                    'error' => '中间件验证token无效，阻止继续向下执行',\n                ],\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Append Request ID Processor - PHP\nDESCRIPTION: This snippet defines a custom Monolog processor that appends a unique request ID and coroutine ID to each log record. It uses the Hyperf Context to store and retrieve the request ID, ensuring that all logs within the same request have the same ID. It depends on the Hyperf Context and Coroutine components.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/logger.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Kernel\\Log;\n\nuse Hyperf\\Context\\Context;\nuse Hyperf\\Coroutine\\Coroutine;\nuse Monolog\\LogRecord;\nuse Monolog\\Processor\\ProcessorInterface;\n\nclass AppendRequestIdProcessor implements ProcessorInterface\n{\n    public const REQUEST_ID = 'log.request.id';\n\n    public function __invoke(array|LogRecord $record)\n    {\n        $record['extra']['request_id'] = Context::getOrSet(self::REQUEST_ID, uniqid());\n        $record['extra']['coroutine_id'] = Coroutine::id();\n        return $record;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting RequestInterface to Get Request Object PHP\nDESCRIPTION: Demonstrates how to inject Hyperf\\HttpServer\\Contract\\RequestInterface through the container to obtain the corresponding Hyperf\\HttpServer\\Request object within a controller. This allows access to the request information during the request lifecycle.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/request.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass IndexController\n{\n    public function info(RequestInterface $request)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Validation Rule - PHP\nDESCRIPTION: Explains how to register custom validation rules using the `ValidatorFactoryResolved` event. The example registers a 'foo' validator that checks if the value is equal to 'foo'.  It also demonstrates how to define a custom placeholder for error messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Listener;\n\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Validation\\Contract\\ValidatorFactoryInterface;\nuse Hyperf\\Validation\\Event\\ValidatorFactoryResolved;\nuse Hyperf\\Validation\\Validator;\n\n#[Listener]\nclass ValidatorFactoryResolvedListener implements ListenerInterface\n{\n\n    public function listen(): array\n    {\n        return [\n            ValidatorFactoryResolved::class,\n        ];\n    }\n\n    public function process(object $event): void\n    {\n        /** @var ValidatorFactoryInterface $validatorFactory */\n        $validatorFactory = $event->validatorFactory;\n        // registered foo validator\n        $validatorFactory->extend('foo', function (string $attribute, mixed $value, array $parameters, Validator $validator): bool {\n            return $value == 'foo';\n        });\n        // When creating a custom validation rule, you may sometimes need to define a custom placeholder for error messages. Here is an extension of the :foo placeholder\n        $validatorFactory->replacer('foo', function (string $message, string $attribute, string $rule, array $parameters): array|string {\n            return str_replace(':foo', $attribute, $message);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Register RPC Service (Hyperf)\nDESCRIPTION: Registers a class as an RPC service using the `#[RpcService]` annotation. The annotation takes `name`, `protocol`, `server`, and `publishTo` as parameters. `name` defines a globally unique service name. `protocol` specifies the protocol (jsonrpc or jsonrpc-http). `server` binds the service to a specific server.  `publishTo` defines the service center (consul, nacos, or empty). Requires `use Hyperf\\RpcServer\\Annotation\\RpcService;`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/service-register.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\JsonRpc;\n\nuse Hyperf\\RpcServer\\Annotation\\RpcService;\n\n#[RpcService(name: \"CalculatorService\", protocol: \"jsonrpc-http\", server: \"jsonrpc-http\")]\nclass CalculatorService implements CalculatorServiceInterface\n{\n    // 實現一個加法方法，這裡簡單的認為引數都是 int 型別\n    public function calculate(int $a, int $b): int\n    {\n        // 這裡是服務方法的具體實現\n        return $a + $b;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking the Async Queue Driver\nDESCRIPTION: This PHP code demonstrates how to invoke the asynchronous queue driver in Hyperf to push a new job onto the 'other' queue. It retrieves the driver factory from the application context, obtains the specific driver instance for 'other', and then pushes an instance of `ExampleJob` onto the queue. Requires the Hyperf context and async queue components.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\AsyncQueue\\Driver\\DriverFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$driver = ApplicationContext::getContainer()->get(DriverFactory::class)->get('other');\nreturn $driver->push(new ExampleJob());\n```\n\n----------------------------------------\n\nTITLE: Retrieving Model with findOrFail and firstOrFail in Hyperf\nDESCRIPTION: This code demonstrates how to retrieve a model instance using `findOrFail` and `firstOrFail` methods. `findOrFail` retrieves a model by its primary key, throwing a `ModelNotFoundException` if not found. `firstOrFail` retrieves the first model matching the query criteria, also throwing a `ModelNotFoundException` if no matching model is found. Requires the `App\\Model\\User` model to be defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$model = User::findOrFail(1);\n$model = User::where('age', '>', 18)->firstOrFail();\n```\n\n----------------------------------------\n\nTITLE: Configure Apollo in hyperf/config: apollo.php\nDESCRIPTION: This code snippet shows the configuration file (apollo.php) for integrating Apollo Configuration Center with Hyperf. It defines settings like enabling the configuration center process, Apollo server address, application ID (appid), cluster, namespaces, strict mode, and update interval.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/config-center.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // Whether to enable the process of the configuration center. When true, a ConfigFetcherProcess process is automatically started to update the configuration\n    'enable' => true,\n    // Apollo Server\n    'server' => 'http://127.0.0.1:8080',\n    // Your AppId\n    'appid' => 'test',\n    // The cluster where the current application is located\n    'cluster' => 'default',\n    // Namespace that the current application needs to access, can be configured multiple namespcaes\n    'namespaces' => [\n        'application',\n    ],\n    // Strict mode. When the value is false, the configuration value that pulled from Apollo will always is string type, when the value is true, the configuration value will transfer to the suitable type according to the original value type on config container.\n    'strict_mode' => false,\n    // The interval of update configuration (seconds)\n    'interval' => 5,\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a NATS Consumer with Annotations in Hyperf\nDESCRIPTION: This PHP code defines a NATS consumer using Hyperf's annotation-based configuration.  The `#[Consumer]` annotation specifies the subject, queue (optional, for exclusive consumption), consumer name, and number of concurrent consumers. The `consume` method is the entry point for processing messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nats.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Nats\\Consumer;\n\nuse Hyperf\\Nats\\AbstractConsumer;\nuse Hyperf\\Nats\\Annotation\\Consumer;\nuse Hyperf\\Nats\\Message;\n\n#[Consumer(subject: 'hyperf.demo', queue: 'hyperf.demo', name: 'DemoConsumer', nums: 1)]\nclass DemoConsumer extends AbstractConsumer\n{\n    public function consume(Message $payload)\n    {\n        // Do something...\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example Test Case with Hyperf Testing Client\nDESCRIPTION: This snippet provides an example test case using PHPUnit and the `Hyperf\\Testing\\Client` to test API endpoints. It defines a class `ExampleTest` that extends `TestCase`, initializes the client, and includes assertions on the response data from various HTTP requests (GET, POST, JSON, FILE).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/testing.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace HyperfTest\\Cases;\n\nuse Hyperf\\Testing\\Client;\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @internal\n * @coversNothing\n */\nclass ExampleTest extends TestCase\n{\n    protected Client $client;\n\n    public function __construct($name = null, array $data = [], $dataName = '')\n    {\n        parent::__construct($name, $data, $dataName);\n        $this->client = make(Client::class);\n    }\n\n    public function testExample()\n    {\n        $this->assertTrue(true);\n\n        $res = $this->client->get('/');\n\n        $this->assertSame(0, $res['code']);\n        $this->assertSame('Hello Hyperf.', $res['data']['message']);\n        $this->assertSame('GET', $res['data']['method']);\n        $this->assertSame('Hyperf', $res['data']['user']);\n\n        $res = $this->client->get('/', ['user' => 'developer']);\n\n        $this->assertSame(0, $res['code']);\n        $this->assertSame('developer', $res['data']['user']);\n\n        $res = $this->client->post('/', [\n            'user' => 'developer',\n        ]);\n        $this->assertSame('Hello Hyperf.', $res['data']['message']);\n        $this->assertSame('POST', $res['data']['method']);\n        $this->assertSame('developer', $res['data']['user']);\n\n        $res = $this->client->json('/', [\n            'user' => 'developer',\n        ]);\n        $this->assertSame('Hello Hyperf.', $res['data']['message']);\n        $this->assertSame('POST', $res['data']['method']);\n        $this->assertSame('developer', $res['data']['user']);\n\n        $res = $this->client->file('/', ['name' => 'file', 'file' => BASE_PATH . '/README.md']);\n\n        $this->assertSame('Hello Hyperf.', $res['data']['message']);\n        $this->assertSame('POST', $res['data']['method']);\n        $this->assertSame('README.md', $res['data']['file']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flushing Cache Using DeleteListenerEvent in Hyperf\nDESCRIPTION: This code demonstrates how to flush the cache by dispatching a `DeleteListenerEvent` in Hyperf. The `EventDispatcherInterface` is used to dispatch the event, which triggers the cache invalidation process. The listener name ('user-update') is used to identify the cache entries to be deleted, and the arguments array contains the parameters required to construct the cache key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/cache.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Cache\\Listener\\DeleteListenerEvent;\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\n\nclass SystemService\n{\n    #[Inject]\n    protected EventDispatcherInterface $dispatcher;\n\n    public function flushCache($userId)\n    {\n        $this->dispatcher->dispatch(new DeleteListenerEvent('user-update', [$userId]));\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Async Queues in Hyperf\nDESCRIPTION: This PHP code configures multiple asynchronous queues using the Hyperf framework. It defines two queues, 'default' and 'other', each with its own Redis driver, channel, timeout settings, retry configurations, process limits, and concurrency settings. The 'channel' parameter specifies the Redis list/zset name for each queue.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => Hyperf\\AsyncQueue\\Driver\\RedisDriver::class,\n        'channel' => '{queue}',\n        'timeout' => 2,\n        'retry_seconds' => 5,\n        'handle_timeout' => 10,\n        'processes' => 1,\n        'concurrent' => [\n            'limit' => 2,\n        ],\n    ],\n    'other' => [\n        'driver' => Hyperf\\AsyncQueue\\Driver\\RedisDriver::class,\n        'channel' => '{other.queue}',\n        'timeout' => 2,\n        'retry_seconds' => 5,\n        'handle_timeout' => 10,\n        'processes' => 1,\n        'concurrent' => [\n            'limit' => 2,\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration via Config Object\nDESCRIPTION: Shows how to retrieve configuration values using the `Hyperf\\Contract\\ConfigInterface` object. The `get` method retrieves configuration by key, with an optional default value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @var \\Hyperf\\Contract\\ConfigInterface\n */\n// 通过 get(string $key, $default): mixed 方法获取 $key 所对应的配置，$key 值可以通过 . 连接符定位到下级数组，$default 则是当对应的值不存在时返回的默认值\n$config->get($key，$default);\n```\n\n----------------------------------------\n\nTITLE: Example: Using Asynchronous IO with Swoole Timer\nDESCRIPTION: This snippet illustrates how to use asynchronous IO within a custom process using Swoole Timer. It sets up a timer to execute a function repeatedly every 1000 milliseconds while keeping the process alive in the while loop. Demonstrates an approach for handling non-blocking operations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/process.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\nuse Hyperf\\Process\\Annotation\\Process;\nuse Swoole\\Timer;\n\n#[Process(name: \"demo_process\")]\nclass DemoProcess extends AbstractProcess\n{\n    public function handle(): void\n    {\n        Timer::tick(1000, function(){\n            var_dump(1);\n            // Do something...\n        });\n\n        while (true) {\n            sleep(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection\nDESCRIPTION: This configuration sets up the default Redis connection in Hyperf, including host, authentication, port, database, and cluster settings. It also defines connection pool parameters and client options.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/redis.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', ''),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'cluster' => [\n            'enable' => (bool) env('REDIS_CLUSTER_ENABLE', false),\n            'name' => null,\n            'seeds' => [],\n        ],\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n        'options' => [ // Options of Redis Client, see https://github.com/phpredis/phpredis#setoption\n            \\Redis::OPT_PREFIX => env('REDIS_PREFIX', ''),\n            // or 'prefix' => env('REDIS_PREFIX', ''), v3.0.38 or later\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: UserService Implementation\nDESCRIPTION: This shows the `UserService` class implementing the `UserServiceInterface`. It's the concrete implementation that will be injected when the interface is requested.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/di.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Service;\n\nclass UserService implements UserServiceInterface\n{\n    public function getInfoById(int $id)\n    {\n        // Assume that there is an entity of Info.\n        return (new Info())->fill($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering HTTP Method Routes in Hyperf\nDESCRIPTION: This snippet shows how to register routes for various HTTP methods using the `Router` class. It includes examples for GET, POST, PUT, PATCH, DELETE, and HEAD requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/router.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\HttpServer\\Router\\Router;\n\n// 注册与方法名一致的 HTTP METHOD 的路由\nRouter::get($uri, $callback);\nRouter::post($uri, $callback);\nRouter::put($uri, $callback);\nRouter::patch($uri, $callback);\nRouter::delete($uri, $callback);\nRouter::head($uri, $callback);\n\n// 注册任意 HTTP METHOD 的路由\nRouter::addRoute($httpMethod, $uri, $callback);\n```\n\n----------------------------------------\n\nTITLE: Model Configuration with Specific Connection in Hyperf\nDESCRIPTION: Illustrates how to configure a Hyperf model to use a specific database connection by setting the `$connection` property. This allows each model to interact with a different database defined in the configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/quick-start.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n *\n * @link     https://www.hyperf.io\n * @document https://doc.hyperf.io\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\n\nnamespace App\\Model;\n\n/**\n * @property int $id\n * @property string $mobile\n * @property string $realname\n */\nclass User extends Model\n{\n    /**\n     * The table associated with the model.\n     *\n     * @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * The connection name for the model.\n     *\n     * @var string\n     */\n    protected $connection = 'test';\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = ['id', 'mobile', 'realname'];\n\n    /**\n     * The attributes that should be cast to native types.\n     *\n     * @var array\n     */\n    protected $casts = ['id' => 'integer'];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Chunked results with chunkById() for updating\nDESCRIPTION: This code shows how to use `chunkById()` method for updating records in chunks. It paginates the results based on the primary key ('id') and updates the 'update_time' field for each user in the chunk. It also applies a `where` clause to filter users by gender.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\DbConnection\\Db;\n\nDb::table('user')->where('gender', 1)->chunkById(100, function ($users) {\n    foreach ($users as $user) {\n        Db::table('user')\n            ->where('id', $user->id)\n            ->update(['update_time' => time()]);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Hyperf Model\nDESCRIPTION: Shows how to update an existing record in the database by retrieving the model, setting the attributes to update, and calling the `save()` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = User::query()->find(1);\n\n$user->name = 'Hi Hyperf';\n\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Get Config Value by Config Object - PHP\nDESCRIPTION: Demonstrates how to retrieve a configuration value using the `Hyperf\\Contract\\ConfigInterface` object. The `get()` method is used to access configuration values by key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/config.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @var \\Hyperf\\Contract\\ConfigInterface\n */\n// Get the configuration corresponding to $key by get(string $key, $default): mixed method, the $key value can be positioned to the subordinate array by the . connector, and $default is the default value returned when the corresponding value does not exist.\n$config->get($key, $default);\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS Middleware in Hyperf PHP\nDESCRIPTION: This PHP code snippet demonstrates how to implement a CORS middleware in Hyperf. It sets the necessary headers to allow cross-origin requests, including `Access-Control-Allow-Origin`, `Access-Control-Allow-Credentials`, and `Access-Control-Allow-Headers`. It returns the response directly for OPTIONS requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/middleware/middleware.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Middleware;\n\nuse Hyperf\\Context\\Context;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass CorsMiddleware implements MiddlewareInterface\n{\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        $response = Context::get(ResponseInterface::class);\n        $response = $response->withHeader('Access-Control-Allow-Origin', '*')\n            ->withHeader('Access-Control-Allow-Credentials', 'true')\n            // Headers 可以根據實際情況進行改寫。\n            ->withHeader('Access-Control-Allow-Headers', 'DNT,Keep-Alive,User-Agent,Cache-Control,Content-Type,Authorization');\n\n        Context::set(ResponseInterface::class, $response);\n\n        if ($request->getMethod() == 'OPTIONS') {\n            return $response;\n        }\n\n        return $handler->handle($request);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Abstract Object Binding\nDESCRIPTION: This configures the dependency injection container to inject the `UserService` class when the `UserServiceInterface` is requested.  This is done in `config/autoload/dependencies.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/di.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    \\App\\Service\\UserServiceInterface::class => \\App\\Service\\UserService::class\n];\n```\n\n----------------------------------------\n\nTITLE: Multi-Database Configuration\nDESCRIPTION: This PHP code demonstrates how to configure multiple Redis databases in Hyperf. It defines two connection pools, 'default' and 'foo', each with its own database number. This setup allows you to use separate Redis databases within the same application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/redis.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', ''),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'cluster' => [\n            'enable' => (bool) env('REDIS_CLUSTER_ENABLE', false),\n            'name' => null,\n            'seeds' => [],\n        ],\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n    ],\n    // 增加一个名为 foo 的 Redis 连接池\n    'foo' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', ''),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => 1,\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Custom Polymorphic Mapping Listener PHP\nDESCRIPTION: Defines a listener that executes when the application boots, registering the custom polymorphic mapping.  This ensures the mapping is available throughout the application's lifecycle.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/relationship.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n *\n * @link     https://www.hyperf.io\n * @document https://doc.hyperf.io\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\nnamespace App\\Listener;\n\nuse App\\Model;\nuse Hyperf\\Database\\Model\\Relations\\Relation;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\n\n#[Listener]\nclass MorphMapRelationListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            BootApplication::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        Relation::morphMap([\n            'user' => Model\\User::class,\n            'book' => Model\\Book::class,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Hyperf Model\nDESCRIPTION: Demonstrates how to insert a new record into the database by creating a new model instance, setting its attributes, and calling the `save()` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = new User();\n\n$user->name = 'Hyperf';\n\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Storing Data in Hyperf Session\nDESCRIPTION: Stores data in the session using the `set` method. The `set` method takes a string representing the key and the value to be stored. No return value. The example stores the value 'bar' under the key 'foo'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/session.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$this->session->set('foo','bar');\n```\n\n----------------------------------------\n\nTITLE: Inject Interface with #[Inject]\nDESCRIPTION: This example shows how to inject the `UserService` through the `UserServiceInterface` using annotation injection.  The container will resolve the `UserServiceInterface` to the configured `UserService` implementation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/di.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserServiceInterface;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\nclass IndexController\n{\n    #[Inject]\n    private UserServiceInterface $userService;\n    \n    public function index()\n    {\n        $id = 1;\n        // Use directly\n        return $this->userService->getInfoById($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Or Where Statement - Hyperf PHP\nDESCRIPTION: Shows how to chain `where` constraints with `or` clauses using the `orWhere` method in Hyperf. The `orWhere` method allows you to add conditions where at least one of them must be met. The example demonstrates combining a `where` clause with an `orWhere` clause.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')\n    ->where('gender', 1)\n    ->orWhere('name', 'John')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Association\nDESCRIPTION: Defines a one-to-many relationship between the User and Book models using the hasMany method. The first parameter is the class name of the associated model, and the other two parameters specify the foreign and local keys for the relationship.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/relationship.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    public function books()\n    {\n        return $this->hasMany(Book::class, 'user_id', 'id');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Relationships (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to conditionally include a relationship in the resource using `whenLoaded`. The 'posts' key and its associated data are only included if the 'posts' relationship has been loaded on the model. This prevents N+1 query problems.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'posts' => PostResource::collection($this->whenLoaded('posts')),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Doctrine DBAL Dependency with Composer\nDESCRIPTION: This command adds the Doctrine DBAL library as a dependency to your project using Composer. Doctrine DBAL is required for modifying database fields, as it is used to determine the current state of a field and generate the SQL queries needed for adjustments.  The version constraint `^3.0` ensures compatibility with versions 3.0 and above.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require \"doctrine/dbal:^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Config Component - Bash\nDESCRIPTION: Installs the hyperf/config component using Composer. This component is essential for managing application configurations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/config.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/config\n```\n\n----------------------------------------\n\nTITLE: Including Associated Resources\nDESCRIPTION: This PHP code demonstrates how to include associated resources in a resource's response. The `User` resource includes the user's posts by using `PostResource::collection($this->posts)` within the `toArray` method.  This will nest the posts data under the 'posts' key in the JSON response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'posts' => PostResource::collection($this->posts),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Database Configuration with Model Cache\nDESCRIPTION: This configuration shows how to enable and configure the model cache within the database configuration file. It includes settings for the handler, cache key, prefix, TTL, empty model TTL, and other related parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model-cache.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER', 'mysql'),\n        'host' => env('DB_HOST', 'localhost'),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => env('DB_CHARSET', 'utf8'),\n        'collation' => env('DB_COLLATION', 'utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX', ''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float)env('DB_MAX_IDLE_TIME', 60),\n        ],\n        'cache' => [\n            'handler' => \\Hyperf\\ModelCache\\Handler\\RedisHandler::class,\n            'cache_key' => 'mc:%s:m:%s:%s:%s',\n            'prefix' => 'default',\n            'ttl' => 3600 * 24,\n            'empty_model_ttl' => 3600,\n            'load_script' => true,\n            'use_default_value' => false,\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a Job\nDESCRIPTION: Defines a job class `ExampleJob` by extending the `Job` class. The constructor receives parameters, and the `handle` method contains the logic to be executed asynchronously. It receives the params in the constructor and dumps them using `var_dump`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/async-queue.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Job;\n\nuse Hyperf\\AsyncQueue\\Job;\n\nclass ExampleJob extends Job\n{\n    public $params;\n\n    public function __construct($params)\n    {\n        // It's best to use normal data here. Don't pass the objects that carry IO, such as PDO objects.\n        $this->params = $params;\n    }\n\n    public function handle()\n    {\n        // Process specific logic based on parameters\n        var_dump($this->params);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Hyperf Listener\nDESCRIPTION: This PHP code defines a UserRegisteredListener that implements the ListenerInterface. It specifies the UserRegistered event to listen to and includes a process method to handle the event when triggered, allowing execution of specific logic, such as sending a welcome email.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/event.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Listener;\n\nuse App\\Event\\UserRegistered;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\n\nclass UserRegisteredListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        // Returns an array of events to be listened to by this listener, can listen to multiple events at the same time\n        return [\n            UserRegistered::class,\n        ];\n    }\n\n    /**\n     * @param UserRegistered $event\n     */\n    public function process(object $event): void\n    {\n        // The code to be executed by the listener after the event is triggered is written here, such as sending a user registration success message, etc. in this example.\n        // Directly access the user property of $event to get the parameter value passed when the event fires.\n        // $event->user;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using static methods of DB class in Hyperf\nDESCRIPTION: Demonstrates how to use the static methods of the DB class in Hyperf to execute a query. It directly calls the query method on the DB class to run a select query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/db.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\DB\\DB;\n\n$res = DB::query('SELECT * FROM `user` WHERE gender = ?;', [1]);\n\n```\n\n----------------------------------------\n\nTITLE: Increment Field Value in Hyperf PHP\nDESCRIPTION: Increments the 'votes' column in the 'users' table. The first example increments by 1, while the second increments by 5.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes');\n\nDb::table('users')->increment('votes', 5);\n```\n\n----------------------------------------\n\nTITLE: Chunking Results - PHP\nDESCRIPTION: This snippet demonstrates how to process a large number of database records in chunks using the `chunk()` method. It retrieves the 'user' table data in chunks of 100 records, ordered by 'id', and processes each chunk within a closure. The first example shows a basic chunk operation, and the second shows how to stop the chunk operation by returning false from the closure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\nDb::table('user')->orderBy('id')->chunk(100, function ($users) {\n    foreach ($users as $user) {\n        //\n    }\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\DbConnection\\Db;\n\nDb::table('user')->orderBy('id')->chunk(100, function ($users) {\n\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Routes via #[AutoController] Annotation in Hyperf\nDESCRIPTION: This snippet demonstrates how to define routes using the `#[AutoController]` annotation in Hyperf. When using `#[AutoController]`, Hyperf automatically parses all public methods of the class and provides GET and POST requests for each of those methods. It requires the namespace `use Hyperf\\HttpServer\\Annotation\\AutoController;`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/overview.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass IndexController\n{\n    // Hyperf will automatically generate a `/index/index` route for this method, allowing GET or POST requests\n    public function index(RequestInterface $request)\n    {\n        // Retrieve the id parameter from the request\n        $id = $request->input('id', 1);\n        return (string)$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Model with Hyperf CLI\nDESCRIPTION: This command generates a model based on the specified table name. It utilizes AST for model generation, allowing for easy model resetting. The command includes options for specifying the connection pool, model path, force casting, table prefix, inheritance, and more.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp bin/hyperf.php gen:model table_name\n```\n\n----------------------------------------\n\nTITLE: Modifying UserInfo and Synchronizing with Attributes in PHP\nDESCRIPTION: This code demonstrates how modifying the `userInfo` property of a `User` model (using the `UserInfoCaster` and `UserInfo` classes) allows the data to be synchronized with the attributes array. Modifying `$user->userInfo->name` will directly reflect in `$user->getAttributes()`, ensuring immediate consistency.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** @var User $user */\n$user = User::query()->find(100);\n$user->userInfo->name = 'John1';\nvar_dump($user->getAttributes()); // ['name' => 'John1']\n```\n\n----------------------------------------\n\nTITLE: Flush Cache with Custom Value Arguments\nDESCRIPTION: Demonstrates how to flush the cache when using a custom `value` in the `Cacheable` annotation. It highlights the need to adjust the `$arguments` array in the `DeleteListenerEvent` to match the value configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/cache.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Cache\\Listener\\DeleteListenerEvent;\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\n\nclass SystemService\n{\n    #[Inject]\n    protected EventDispatcherInterface $dispatcher;\n\n    public function flushCache($userId)\n    {\n        $this->dispatcher->dispatch(new DeleteListenerEvent('user-update', ['id' => $userId]));\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inject by Constructor\nDESCRIPTION: This demonstrates dependency injection using the constructor.  The UserService is automatically injected into the IndexController's constructor by type hinting.  The controller must be created by the DI container for this to work.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/di.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserService;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\nclass IndexController\n{\n    /**\n     * @var UserService\n     */\n    private $userService;\n    \n    // Automatic injection is completed by declaring the parameter type on the parameters of the constructor\n    public function __construct(UserService $userService)\n    {\n        $this->userService = $userService;\n    }\n    \n    public function index()\n    {\n        $id = 1;\n        // Use directly\n        return $this->userService->getInfoById($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an AMQP Producer Class\nDESCRIPTION: Defines an AMQP producer class extending `ProducerMessage` in Hyperf. It configures the exchange and routing key via the `#[Producer]` attribute, sets the payload to be sent, and specifies the connection pool to use.  It retrieves user data based on the provided ID and prepares it for sending as a message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/amqp.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Amqp\\Producers;\n\nuse Hyperf\\Amqp\\Annotation\\Producer;\nuse Hyperf\\Amqp\\Message\\ProducerMessage;\nuse App\\Models\\User;\n\n#[Producer(exchange: \"hyperf\", routingKey: \"hyperf\")]\nclass DemoProducer extends ProducerMessage\n{\n    public function __construct($id)\n    {\n        // 設定不同 pool\n        $this->poolName = 'pool2';\n\n        $user = User::where('id', $id)->first();\n        $this->payload = [\n            'id' => $id,\n            'data' => $user->toArray()\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting JSON Input Information PHP\nDESCRIPTION: Explains how to access JSON data from the request body using the `input()` method, assuming the `Content-Type` header is set to `application/json`. Dot syntax can be used to access nested values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/request.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// Return value or null if it does not exist\n$name = $request->input('user.name');\n\n// Return value or default value of 'Hyperf' if it does not exist\n$name = $request->input('user.name','Hyperf');\n\n// Return all Json data as an array\n$name = $request->all();\n```\n\n----------------------------------------\n\nTITLE: Translate with TranslatorInterface\nDESCRIPTION: This snippet shows how to translate a string using the `TranslatorInterface`. Inject the interface and call the `trans` method, providing the key, replacements (empty array here), and optionally the locale.  It retrieves and translates a message based on the provided key and locale.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/translation.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Contract\\TranslatorInterface;\n\nclass FooController\n{\n    #[Inject]\n    private TranslatorInterface $translator;\n    \n    public function index()\n    {\n        return $this->translator->trans('messages.welcome', [], 'zh_CN');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Select Columns with select() in Hyperf\nDESCRIPTION: Explains how to use the `select()` method to retrieve specific columns from a database table. It also shows the usage of the `distinct()` method to get unique values. Additionally covers adding columns to existing queries.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->select('name', 'email as user_email')->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->distinct()->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$query = Db::table('users')->select('name');\n\n$users = $query->addSelect('age')->get();\n```\n\n----------------------------------------\n\nTITLE: Querying JSON fields in Hyperf using Db::table\nDESCRIPTION: This snippet demonstrates how to use the Hyperf database query builder to query JSON fields within a database table. It leverages the `where` method to filter results based on values within the JSON structure, supporting nested paths.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->where('options->language', 'en')\n    ->get();\n\n$users = Db::table('users')\n    ->where('preferences->dining->meal', 'salad')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Storing Uploaded File\nDESCRIPTION: Explains how to store an uploaded file to a persistent location using the `moveTo(string $targetPath): void` method of the `UploadedFile` object. Also demonstrates how to check if the file has been moved using `isMoved(): bool`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/request.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$file = $request->file('photo');\n$file->moveTo('/foo/bar.jpg');\n\n// 通过 isMoved(): bool 方法判断方法是否已移动\nif ($file->isMoved()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Exception Handler in Hyperf\nDESCRIPTION: This PHP code snippet illustrates how to define a custom exception handler in Hyperf by extending the `Hyperf\\ExceptionHandler\\ExceptionHandler` class.  The `handle` method checks if the caught exception is a `FooException`, formats the output, and prevents further propagation. Otherwise, it passes the exception to the next handler.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/exception-handler.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Exception\\Handler;\n\nuse Hyperf\\ExceptionHandler\\ExceptionHandler;\nuse Hyperf\\HttpMessage\\Stream\\SwooleStream;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse App\\Exception\\FooException;\nuse Throwable;\n\nclass FooExceptionHandler extends  ExceptionHandler\n{\n    public function handle(Throwable $throwable, ResponseInterface $response)\n    {\n        // Determine that the caught exception is the wanted exception\n        if ($throwable instanceof FooException) {\n            // Formatted output\n            $data = json_encode([\n                'code' => $throwable->getCode(),\n                'message' => $throwable->getMessage(),\n            ], JSON_UNESCAPED_UNICODE);\n\n            // Prevent bubbling\n            $this->stopPropagation();\n            return $response->withStatus(500)->withBody(new SwooleStream($data));\n        }\n\n        // Hand over to the next exception handler\n        return $response;\n\n        // Or directly shield the exception without processing\n    }\n\n    /**\n     * Determine whether the exception handler needs to handle the exception or not\n     */\n    public function isValid(Throwable $throwable): bool\n    {\n        return true;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Config via Value Annotation\nDESCRIPTION: Demonstrates how to retrieve configuration values using the `#[Value]` annotation.  The annotated property will be automatically injected with the configuration value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Config\\Annotation\\Value;\n\nclass IndexController\n{\n    #[Value(\"config.key\")]\n    private $configValue;\n\n    public function index()\n    {\n        return $this->configValue;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-Origin Resource Sharing (CORS) Middleware - Hyperf - PHP\nDESCRIPTION: This snippet shows how to implement a CORS middleware in Hyperf to handle cross-origin requests. It sets the necessary headers in the response, such as `Access-Control-Allow-Origin`, `Access-Control-Allow-Credentials`, and `Access-Control-Allow-Headers`, to enable cross-origin communication.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/middleware/middleware.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Middleware;\n\nuse Hyperf\\Context\\Context;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass CorsMiddleware implements MiddlewareInterface\n{\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        $response = Context::get(ResponseInterface::class);\n        $response = $response->withHeader('Access-Control-Allow-Origin', '*')\n            ->withHeader('Access-Control-Allow-Credentials', 'true')\n            // Headers can be rewritten according to actual conditions.\n            ->withHeader('Access-Control-Allow-Headers', 'DNT,Keep-Alive,User-Agent,Cache-Control,Content-Type,Authorization');\n\n        Context::set(ResponseInterface::class, $response);\n\n        if ($request->getMethod() == 'OPTIONS') {\n            return $response;\n        }\n\n        return $handler->handle($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Records - PHP\nDESCRIPTION: This snippet demonstrates how to insert multiple records into the database using the `insert` method. It accepts an array of arrays, where each inner array represents a record.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert([\n    ['email' => 'taylor@example.com', 'votes' => 0],\n    ['email' => 'dayle@example.com', 'votes' => 0]\n]);\n```\n\n----------------------------------------\n\nTITLE: Sending Chunked Response in Hyperf\nDESCRIPTION: This snippet demonstrates how to send a chunked response in Hyperf using the `write()` method of the `ResponseInterface`. The `write()` method sends data to the client in chunks, setting the `Transfer-Encoding` header to `chunked`. Note that after calling `write()`, any data returned using `return` will not be sent.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/response.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\n\nclass IndexController\n{\n    public function index(ResponseInterface $response)\n    {\n        for ($i=0; $i<10; $i++) {\n            $response->write((string) $i);\n        }\n\n        return 'Hello Hyperf';\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Update Statement - Hyperf PHP\nDESCRIPTION: Shows how to update existing records using the `update` method in Hyperf. The method accepts an array containing the fields and values to update. You can constrain the update query with a `where` clause.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('id', 1)->update(['votes' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Async Queue Retry Seconds Configuration Array\nDESCRIPTION: Demonstrates configuring retry intervals for failed queue jobs using an array.  The retry_seconds array specifies the delay in seconds before each retry attempt.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => Hyperf\\AsyncQueue\\Driver\\RedisDriver::class,\n        'channel' => 'queue',\n        'retry_seconds' => [1, 5, 10, 20],\n        'processes' => 1,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie in Hyperf\nDESCRIPTION: This snippet demonstrates how to set a cookie using the `withCookie()` method of the `Hyperf\\HttpServer\\Contract\\ResponseInterface`. It requires the `Hyperf\\HttpMessage\\Cookie\\Cookie` class to create a cookie object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/response.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\nuse Hyperf\\HttpMessage\\Cookie\\Cookie;\n\nclass IndexController\n{\n    public function cookie(ResponseInterface $response): Psr7ResponseInterface\n    {\n        $cookie = new Cookie('key', 'value');\n        return $response->withCookie($cookie)->withContent('Hello Hyperf.');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Config\nDESCRIPTION: Shows how to use the `env()` function to retrieve environment variables and use them as default values in configuration files. This allows overriding configuration values based on the environment.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// config/config.php\nreturn [\n    'app_name' => env('APP_NAME', 'Hyperf Skeleton'),\n];\n```\n\n----------------------------------------\n\nTITLE: Define Custom CastsAttributes Class - Hyperf - PHP\nDESCRIPTION: This code defines a custom class `Json` that implements the `CastsAttributes` interface.  It provides custom logic for converting data to and from JSON format. The `get` method decodes the JSON string from the database, and the `set` method encodes the value to be stored in the database. Requires the `Hyperf\\Contract\\CastsAttributes` interface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Casts;\n\nuse Hyperf\\Contract\\CastsAttributes;\n\nclass Json implements CastsAttributes\n{\n    /**\n     * Convert the extracted data\n     */\n    public function get($model, $key, $value, $attributes)\n    {\n        return json_decode($value, true);\n    }\n\n    /**\n     * Convert to the value to be stored\n     */\n    public function set($model, $key, $value, $attributes)\n    {\n        return json_encode($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Conditional Validation using 'sometimes' - PHP\nDESCRIPTION: Illustrates how to use the `sometimes` method on the `Validator` instance for more complex conditional validation. A closure determines if a rule should be applied based on the input data.  Here, 'reason' is required only if 'games' is greater than or equal to 100.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$v->sometimes('reason','required|max:500', function($input) {\n    return $input->games >= 100;\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Circuit Breaker Handler in Hyperf\nDESCRIPTION: This PHP code demonstrates how to create a custom circuit breaker handler by extending the `AbstractHandler` class. It defines a `process` method that intercepts the execution of a method protected by the circuit breaker and allows for custom logic to determine whether to break the circuit.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/circuit-breaker.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace Hyperf\\CircuitBreaker\\Handler;\n\nuse Hyperf\\CircuitBreaker\\Annotation\\CircuitBreaker as Annotation;\nuse Hyperf\\CircuitBreaker\\CircuitBreaker;\nuse Hyperf\\CircuitBreaker\\Exception\\TimeoutException;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\nclass DemoHandler extends AbstractHandler\n{\n    const DEFAULT_TIMEOUT = 5;\n\n    protected function process(ProceedingJoinPoint $proceedingJoinPoint, CircuitBreaker $breaker, Annotation $annotation)\n    {\n        $result = $proceedingJoinPoint->process();\n\n        if (is_break()) {\n            throw new TimeoutException('timeout, use ' . $use . 's', $result);\n        }\n\n        return $result;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Exists Validation\nDESCRIPTION: This snippet shows basic usage of the `exists` rule to validate that a field exists in a specified data table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n'state' => 'exists:states'\n```\n\n----------------------------------------\n\nTITLE: Querying and Updating a Hyperf Model\nDESCRIPTION: Demonstrates how to query a Hyperf model, update its attributes, and save the changes to the database using the `query()`, `where()`, `first()`, `save()` methods.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = User::query()->where('id', 1)->first();\n$user->name = 'Hyperf';\n$user->save();\n\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Model in Hyperf\nDESCRIPTION: This snippet demonstrates how to update an existing record in the database using the `save` method. It retrieves an existing `User` model, modifies the `name` property, and then calls `save` to update the record in the database. The `updated_at` timestamp is updated automatically.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = User::query()->find(1);\n\n$user->name = 'Hi Hyperf';\n\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Middleware Implementation Example - PHP\nDESCRIPTION: This code snippet provides an example implementation of a middleware class, demonstrating how to access the request and response, and how to handle the request and pass it to the next middleware or handler.  It checks for a valid token and either proceeds or returns an error response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/middleware/middleware.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Middleware\\Auth;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface as HttpResponse;\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass FooMiddleware implements MiddlewareInterface\n{\n    protected ContainerInterface $container;\n\n    protected RequestInterface $request;\n\n    protected HttpResponse $response;\n\n    public function __construct(ContainerInterface $container, HttpResponse $response, RequestInterface $request)\n    {\n        $this->container = $container;\n        $this->response = $response;\n        $this->request = $request;\n    }\n\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // 根據具體業務判斷邏輯走向，這裡假設使用者攜帶的token有效\n        $isValidToken = true;\n        if ($isValidToken) {\n            return $handler->handle($request);\n        }\n\n        return $this->response->json(\n            [\n                'code' => -1,\n                'data' => [\n                    'error' => '中介軟體驗證token無效，阻止繼續向下執行',\n                ],\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scheduled Tasks Using Annotations\nDESCRIPTION: Defines a timed task using the `#[Crontab]` annotation. The task named `Foo` executes `App\\Task\\FooTask::execute()` every minute. Demonstrates how to inject dependencies and define multiple cron jobs within a class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/crontab.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Task;\n\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Crontab\\Annotation\\Crontab;\nuse Hyperf\\Di\\Annotation\\Inject;\n\n#[Crontab(name: \"Foo\", rule: \"* * * * *\", callback: \"execute\", memo: \"This is an example scheduled task\")]\nclass FooTask\n{\n     #[Inject]\n    private StdoutLoggerInterface $logger;\n\n    public function execute()\n    {\n        $this->logger->info(date('Y-m-d H:i:s', time()));\n    }\n\n    #[Crontab(rule: \"* * * * * *\", memo: \"foo\")]\n    public function foo()\n    {\n        var_dump('foo');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Databases Configuration in Hyperf (PHP)\nDESCRIPTION: This code demonstrates how to configure multiple database connections in Hyperf. It defines two database configurations: 'default' and 'test', each with its own set of connection parameters. This allows the application to connect to different databases.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/quick-start.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER', 'mysql'),\n        'host' => env('DB_HOST', 'localhost'),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => env('DB_CHARSET', 'utf8'),\n        'collation' => env('DB_COLLATION', 'utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX', ''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('DB_MAX_IDLE_TIME', 60),\n        ],\n    ],\n    'test'=>[\n        'driver' => env('DB_DRIVER', 'mysql'),\n        'host' => env('DB_HOST2', 'localhost'),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => env('DB_CHARSET', 'utf8'),\n        'collation' => env('DB_COLLATION', 'utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX', ''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('DB_MAX_IDLE_TIME', 60),\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Define a ConfigProvider Class PHP\nDESCRIPTION: Defines a ConfigProvider class with an __invoke method that returns an array containing configuration information for the component. This configuration includes dependencies, annotations, commands, listeners, publishable files, and other configurations that will be merged into Hyperf's configuration system.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/component-guide/configprovider.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace Hyperf\\Foo;\n\nclass ConfigProvider\n{\n     public function __invoke(): array\n     {\n         return [\n             // merged into config/autoload/dependencies.php file\n             'dependencies' => [],\n             // merged into config/autoload/annotations.php file\n             'annotations' => [\n                 'scan' => [\n                     'paths' => [\n                         __DIR__,\n                     ],\n                 ],\n             ],\n             // The definition of the default Command is merged into Hyperf\\Contract\\ConfigInterface, another way to understand it is corresponding to config/autoload/commands.php\n             'commands' => [],\n             // similar to commands\n             'listeners' => [],\n             // Component default configuration file, that is, after executing the command, the file corresponding to source will be copied to the file corresponding to destination\n             'publish' => [\n                 [\n                     'id' => 'config',\n                     'description' => 'description of this config file.', // description\n                     // It is recommended that the default configuration be placed in the publish folder, and the file name is the same as the component name\n                     'source' => __DIR__ . '/../publish/file.php', // corresponding configuration file path\n                     'destination' => BASE_PATH . '/config/autoload/file.php', // copy as the file under this path\n                 ],\n             ],\n             // You can also continue to define other configurations, which will eventually be merged into the configuration storage corresponding to ConfigInterface\n         ];\n     }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Factory Object Injection: Factory Class\nDESCRIPTION: Defines a factory class for creating UserService instances.  The factory resolves dependencies like ConfigInterface from the container and injects values into the UserService constructor.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php \nnamespace App\\Service;\n\nuse Hyperf\\Contract\\ConfigInterface;\nuse Psr\\Container\\ContainerInterface;\n\nclass UserServiceFactory\n{\n    // 实现一个 __invoke() 方法来完成对象的生产，方法参数会自动注入一个当前的容器实例和一个参数数组\n    public function __invoke(ContainerInterface $container, array $parameters = [])\n    {\n        $config = $container->get(ConfigInterface::class);\n        // 我们假设对应的配置的 key 为 cache.enable\n        $enableCache = $config->get('cache.enable', false);\n        return make(UserService::class, compact('enableCache'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Producing Kafka Batch Messages\nDESCRIPTION: This code shows how to send a batch of messages to Kafka using the Hyperf Kafka producer. It creates an array of `ProduceMessage` objects, each representing a message to be sent, and then uses the `sendBatch` method to publish them to their respective topics. The `longlang\\phpkafka\\Producer\\ProduceMessage` class needs to be available for this to work.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/kafka.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Kafka\\Producer;\nuse longlang\\phpkafka\\Producer\\ProduceMessage;\n\n#[AutoController]\nclass IndexController extends AbstractController\n{\n    public function index(Producer $producer)\n    {\n        $producer->sendBatch([\n            new ProduceMessage('hyperf1', 'hyperf1_value', 'hyperf1_key'),\n            new ProduceMessage('hyperf2', 'hyperf2_value', 'hyperf2_key'),\n            new ProduceMessage('hyperf3', 'hyperf3_value', 'hyperf3_key'),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Producing Batch Kafka Messages - PHP\nDESCRIPTION: This code shows how to send multiple messages to Kafka at once using `Hyperf\\Kafka\\Producer::sendBatch()`. It creates an array of `ProduceMessage` objects, each representing a message to be sent. Requires `longlang\\phpkafka\\Producer\\ProduceMessage` dependency.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/kafka.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Kafka\\Producer;\nuse longlang\\phpkafka\\Producer\\ProduceMessage;\n\n#[AutoController]\nclass IndexController extends AbstractController\n{\n    public function index(Producer $producer)\n    {\n        $producer->sendBatch([\n            new ProduceMessage('hyperf1', 'hyperf1_value', 'hyperf1_key'),\n            new ProduceMessage('hyperf2', 'hyperf2_value', 'hyperf2_key'),\n            new ProduceMessage('hyperf3', 'hyperf3_value', 'hyperf3_key'),\n        ]);\n\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Validating Each Element of an Array - PHP\nDESCRIPTION: This snippet demonstrates how to validate each element of an array input. It checks if each email within the `person.*.email` array is a valid email address and unique in the `users` table. It also requires the `first_name` if the `last_name` is present.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_49\n\nLANGUAGE: PHP\nCODE:\n```\n$validator = $this->validationFactory->make($request->all(), [\n    'person.*.email' => 'email|unique:users',\n    'person.*.first_name' => 'required_with:person.*.last_name',\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Redis Package (Composer)\nDESCRIPTION: Installs the hyperf/redis package using Composer, which is the dependency required to use Redis in a Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/redis.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/redis\n```\n\n----------------------------------------\n\nTITLE: Example Test Case using Hyperf Testing Client\nDESCRIPTION: This PHP code defines a test case, `ExampleTest`, using PHPUnit and the `Hyperf\\Testing\\Client`. It initializes the client in the constructor and includes a `testExample` method that demonstrates various HTTP requests (GET, POST, JSON, FILE) and assertions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/testing.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace HyperfTest\\Cases;\n\nuse Hyperf\\Testing\\Client;\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @internal\n * @coversNothing\n */\nclass ExampleTest extends TestCase\n{\n    /**\n     * @var Client\n     */\n    protected $client;\n\n    public function __construct($name = null, array $data = [], $dataName ='')\n    {\n        parent::__construct($name, $data, $dataName);\n        $this->client = make(Client::class);\n    }\n\n    public function testExample()\n    {\n        $this->assertTrue(true);\n\n        $res = $this->client->get('/');\n\n        $this->assertSame(0, $res['code']);\n        $this->assertSame('Hello Hyperf.', $res['data']['message']);\n        $this->assertSame('GET', $res['data']['method']);\n        $this->assertSame('Hyperf', $res['data']['user']);\n\n        $res = $this->client->get('/', ['user' =>'developer']);\n\n        $this->assertSame(0, $res['code']);\n        $this->assertSame('developer', $res['data']['user']);\n\n        $res = $this->client->post('/', [\n            'user' =>'developer',\n        ]);\n        $this->assertSame('Hello Hyperf.', $res['data']['message']);\n        $this->assertSame('POST', $res['data']['method']);\n        $this->assertSame('developer', $res['data']['user']);\n\n        $res = $this->client->json('/', [\n            'user' =>'developer',\n        ]);\n        $this->assertSame('Hello Hyperf.', $res['data']['message']);\n        $this->assertSame('POST', $res['data']['method']);\n        $this->assertSame('developer', $res['data']['user']);\n\n        $res = $this->client->file('/', ['name' =>'file','file' => BASE_PATH.'/README.md']);\n\n        $this->assertSame('Hello Hyperf.', $res['data']['message']);\n        $this->assertSame('POST', $res['data']['method']);\n        $this->assertSame('README.md', $res['data']['file']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Service Method in Hyperf Controller\nDESCRIPTION: This PHP snippet shows the implementation of the `sayHello` method in the `HiController` class.  It receives a `HiUser` object, creates a `HiReply` object, sets the message and user, and returns the reply.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/grpc.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\npublic function sayHello(HiUser $user) \n{\n    $message = new HiReply();\n    $message->setMessage(\"Hello World\");\n    $message->setUser($user);\n    return $message;\n}\n```\n\n----------------------------------------\n\nTITLE: Annotation Injection with Required Parameter\nDESCRIPTION: Demonstrates optional dependency injection using the #[Inject] annotation with the required parameter set to false. If UserService cannot be resolved, $userService will be null.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserService;\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass IndexController\n{\n    /**\n     * 通过 `#[Inject]` 注解注入由注解声明的属性类型对象\n     * 当 UserService 不存在于 DI 容器内或不可创建时，则注入 null\n     */\n    #[Inject(required: false)]\n    private ?UserService $userService;\n    \n    public function index()\n    {\n        $id = 1;\n        if ($this->userService instanceof UserService) {\n            // 仅值存在时 $userService 可用\n            return $this->userService->getInfoById($id);    \n        }\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Migrations (Bash)\nDESCRIPTION: This command executes all pending migration files in the project. It applies the changes defined in the `up` methods of the migrations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate\n```\n\n----------------------------------------\n\nTITLE: UserService Class\nDESCRIPTION: This defines a simple UserService class with a method to retrieve user info by ID. It's used as an example for dependency injection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/di.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Service;\n\nclass UserService\n{\n    public function getInfoById(int $id)\n    {\n        // Assume that there is an entity of Info.\n        return (new Info())->fill($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing hyperf/di\nDESCRIPTION: Installs the hyperf/di component using Composer. This command is required when using the dependency injection features outside of the hyperf-skeleton project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/di\n```\n\n----------------------------------------\n\nTITLE: Using FilesystemFactory for Multiple Disks\nDESCRIPTION: This example demonstrates how to use the `Hyperf\\Filesystem\\FilesystemFactory` to dynamically select different filesystem drivers.  It retrieves instances of the 'local' and 's3' drivers and performs write operations on each.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/filesystem.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nclass IndexController\n{\n    public function example(\\Hyperf\\Filesystem\\FilesystemFactory $factory)\n    {\n    \t$local = $factory->get('local');\n        // Write Files\n        $local->write('path/to/file.txt', 'contents');\n\n        $s3 = $factory->get('s3');\n\n        $s3->write('path/to/file.txt', 'contents');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Kafka Consumer with Annotation - PHP\nDESCRIPTION: This code defines a Kafka consumer using the `Hyperf\\Kafka\\Annotation\\Consumer` annotation. It subscribes to the 'hyperf' topic, sets the number of consumer processes to 5, assigns the 'hyperf' group ID, and enables automatic commit.  The `consume` method processes each received message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/kafka.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\kafka;\n\nuse Hyperf\\Kafka\\AbstractConsumer;\nuse Hyperf\\Kafka\\Annotation\\Consumer;\nuse longlang\\phpkafka\\Consumer\\ConsumeMessage;\n\n#[Consumer(topic: \"hyperf\", nums: 5, groupId: \"hyperf\", autoCommit: true)]\nclass KafkaConsumer extends AbstractConsumer\n{\n    public function consume(ConsumeMessage $message): string\n    {\n        var_dump($message->getTopic() . ':' . $message->getKey() . ':' . $message->getValue());\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Define One-to-Many Relation in User Model (PHP)\nDESCRIPTION: This code defines a one-to-many relationship between the User and Book models using the hasMany method. It specifies the related model class, foreign key, and local key. The hasMany method enables retrieving multiple books associated with a user.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    public function books()\n    {\n        return $this->hasMany(Book::class, 'user_id', 'id');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure Task Worker in server.php - PHP\nDESCRIPTION: Configures the Task component in the `server.php` file.  This includes setting the number of task workers and disabling coroutines for task execution to avoid data corruption. The `ON_TASK` and `ON_FINISH` callbacks are also defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/task.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // Other irrelevant configuration items are omitted here\n    'settings' => [\n        // Number of Task Workers, configure the appropriate number based on your server configuration\n        'task_worker_num' => 8,\n        // Because `Task` mainly deals with methods that cannot be coroutined, it is recommended to set `false` here to avoid data confusion under coroutines\n        'task_enable_coroutine' => false,\n    ],\n    'callbacks' => [\n        // Task callbacks\n        Event::ON_TASK => [Hyperf\\Framework\\Bootstrap\\TaskCallback::class, 'onTask'],\n        Event::ON_FINISH => [Hyperf\\Framework\\Bootstrap\\FinishCallback::class, 'onFinish'],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Using the Logger in a Service Class\nDESCRIPTION: This code demonstrates how to use the `LoggerFactory` to obtain a Logger instance within a service class. It injects the `LoggerFactory` via the constructor and uses the `get` method to retrieve a logger instance with a specified name and configuration key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/logger.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse Psr\\Log\\LoggerInterface;\nuse Hyperf\\Logger\\LoggerFactory;\n\nclass DemoService\n{\n\n    protected LoggerInterface $logger;\n\n    public function __construct(LoggerFactory $loggerFactory)\n    {\n        // 第一个参数对应日志的 name, 第二个参数对应 config/autoload/logger.php 内的 key\n        $this->logger = $loggerFactory->get('log', 'default');\n    }\n\n    public function method()\n    {\n        // Do something.\n        $this->logger->info(\"Your log message.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a One-to-Many Relationship in Hyperf\nDESCRIPTION: This code snippet defines a one-to-many relationship between a User model and a Book model using the hasMany method. It assumes that the Book model has a user_id foreign key referencing the User model's id. The books() method returns the result of the hasMany method, specifying the Book model class, the foreign key (user_id), and the local key (id).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/relationship.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    public function books()\n    {\n        return $this->hasMany(Book::class, 'user_id', 'id');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Records - PHP\nDESCRIPTION: This snippet demonstrates how to update existing records in the database using the `update` method. It requires a `where` clause to specify which records to update.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('id', 1)->update(['votes' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Validating Each Element of an Array - PHP\nDESCRIPTION: Shows how to validate each element within an array using the `*` wildcard.  This example validates that each email in `person.*.email` is a valid email and unique in the `users` table, and that 'person.*.first_name' is required with 'person.*.last_name'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$validator = $this->validationFactory->make($request->all(), [\n    'person.*.email' => 'email|unique:users',\n    'person.*.first_name' => 'required_with:person.*.last_name',\n]);\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Association\nDESCRIPTION: Demonstrates eager loading of the 'role' relationship for the User model using the 'with' method.  This helps to avoid the N+1 query problem by loading the relationships in a single query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/relationship.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    public function role()\n    {\n        return $this->hasOne(Role::class, 'user_id', 'id');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Converting classes to commands with AsCommand annotation\nDESCRIPTION: This code snippet demonstrates how to convert a class into a command by using the `AsCommand` annotation in Hyperf. Multiple commands can be defined for the same class using the annotation. It leverages `InteractsWithIO` trait for console output. It shows how to define signature, handle method and description.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Service;\n\nuse Hyperf\\Command\\Annotation\\AsCommand;\nuse Hyperf\\Command\\Concerns\\InteractsWithIO;\n\n#[AsCommand(signature: 'foo:bar1', handle: 'bar1', description: 'The description of foo:bar1 command.')]\n#[AsCommand(signature: 'foo', description: 'The description of foo command.')]\nclass FooService\n{\n    use InteractsWithIO;\n\n    #[AsCommand(signature: 'foo:bar {--bar=1 : Bar Value}', description: 'The description of foo:bar command.')]\n    public function bar($bar)\n    {\n        $this->output?->info('Bar Value: ' . $bar);\n\n        return $bar;\n    }\n\n    public function bar1()\n    {\n        $this->output?->info(__METHOD__);\n    }\n\n    public function handle()\n    {\n        $this->output?->info(__METHOD__);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define a Computed Model Accessor - Hyperf - PHP\nDESCRIPTION: This code demonstrates how to define an accessor that returns a computed value based on other properties of the model (first_name and last_name). It constructs the full name by concatenating the first and last names. Requires the `Hyperf\\DbConnection\\Model\\Model` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * Get the user's name.\n     *\n     * @return string\n     */\n    public function getFullNameAttribute()\n    {\n        return \"{$this->first_name} {$this->last_name}\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Image Dimensions Validation\nDESCRIPTION: This snippet demonstrates how to validate image dimensions using the `dimensions` rule in Hyperf. It sets constraints for minimum width, minimum height, and aspect ratio.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n'avatar' => 'dimensions:min_width=100,min_height=200'\n```\n\n----------------------------------------\n\nTITLE: Configure Whoops Exception Handler - PHP\nDESCRIPTION: Configures the `WhoopsExceptionHandler` as the exception handler for the 'http' server in `config/autoload/exceptions.php`. This enables Whoops to handle uncaught exceptions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/exception-handler.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// config/autoload/exceptions.php\nreturn [\n    'handler' => [\n        'http' => [\n            \\Hyperf\\ExceptionHandler\\Handler\\WhoopsExceptionHandler::class,\n        ],    \n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Default Cache Configuration\nDESCRIPTION: Defines the default cache configuration array for the Hyperf application. It specifies the driver, packer, prefix, and skip cache results. The default driver is `RedisDriver`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/cache.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => Hyperf\\Cache\\Driver\\RedisDriver::class,\n        'packer' => Hyperf\\Codec\\Packer\\PhpSerializerPacker::class,\n        'prefix' => 'c:',\n        'skip_cache_results' => [],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Validation Message Placeholders\nDESCRIPTION: This example demonstrates the usage of placeholders within custom validation messages. `:attribute` refers to the field name, while others like `:other`, `:size`, `:input`, `:min`, `:max`, and `:values` are specific to certain validation rules.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$messages = [\n    'same' => 'The :attribute and :other must match.',\n    'size' => 'The :attribute must be exactly :size.',\n    'between' => 'The :attribute value :input is not between :min-:max.',\n    'in' => 'The :attribute must be one of the following types: :values',\n];\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Requests in Hyperf (MVC Example)\nDESCRIPTION: This code demonstrates handling HTTP requests using the MVC pattern. It shows an `IndexController` that retrieves an 'id' parameter from the request and returns it as a string.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/overview.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass IndexController\n{\n    // Hyperf 會自動為此方法生成一個 /index/index 的路由，允許透過 GET 或 POST 方式請求\n    public function index(RequestInterface $request)\n    {\n        // 從請求中獲得 id 引數\n        $id = $request->input('id', 1);\n        // 轉換 $id 為字串格式並以 plain/text 的 Content-Type 返回 $id 的值給客戶端\n        return (string)$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CacheAhead Annotation Example in Hyperf\nDESCRIPTION: This snippet illustrates the `CacheAhead` annotation usage in Hyperf. The `CacheAhead` annotation attempts to refresh the cache before it expires. Parameters like `aheadSeconds` and `lockSeconds` control the cache pre-warming process to minimize cache misses.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/cache.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\CacheAhead;\n\nclass UserService\n{\n    #[CacheAhead(prefix: \"user\", ttl: 7200, aheadSeconds: 600, lockSeconds: 10)]\n    public function user(int $id): array\n    {\n        $user = User::query()->find($id);\n\n        return [\n            'user' => $user->toArray(),\n            'uuid' => $this->unique(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implement CacheableInterface in Model\nDESCRIPTION: Demonstrates how to implement the `CacheableInterface` in a model and use the `Cacheable` trait to enable model caching. The class should extend `Hyperf\\DbConnection\\Model\\Model`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model-cache.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\DbConnection\\Model\\Model;\nuse Hyperf\\ModelCache\\Cacheable;\nuse Hyperf\\ModelCache\\CacheableInterface;\n\n/**\n * @property $id\n * @property $name\n * @property $gender\n * @property $created_at\n * @property $updated_at\n */\nclass User extends Model implements CacheableInterface\n{\n    use Cacheable;\n\n    /**\n     * The table associated with the model.\n     *\n     * @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = ['id', 'name', 'gender', 'created_at', 'updated_at'];\n\n    protected $casts = ['id' => 'integer', 'gender' => 'integer'];\n}\n\n// Query a single cache\n$model = User::findFromCache($id);\n\n// Batch query cache, return Hyperf\\Database\\Model\\Collection\n$models = User::findManyFromCache($ids);\n```\n\n----------------------------------------\n\nTITLE: Read/Write Splitting Database Configuration in Hyperf (PHP)\nDESCRIPTION: This code configures read/write splitting for the database connection in Hyperf. It defines separate hosts for read and write operations and includes a 'sticky' option to ensure immediate read of written data within the same request cycle.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/quick-start.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER', 'mysql'),\n        'read' => [\n            'host' => ['192.168.1.1'],\n        ],\n        'write' => [\n            'host' => ['196.168.1.2'],\n        ],\n        'sticky'    => true,\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => env('DB_CHARSET', 'utf8'),\n        'collation' => env('DB_COLLATION', 'utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX', ''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('DB_MAX_IDLE_TIME', 60),\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Getting JSON Input Data - PHP\nDESCRIPTION: Shows how to access JSON data from the request body using the `input()` method. The `Content-Type` header must be set to `application/json`. Dot notation can be used to access nested JSON values. Using `all()` will retrieve all JSON data in array form.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n// 存在則返回，不存在則返回 null\n$name = $request->input('user.name');\n// 存在則返回，不存在則返回默認值 Hyperf\n$name = $request->input('user.name', 'Hyperf');\n// 以數組形式返回所有 Json 數據\n$name = $request->all();\n```\n\n----------------------------------------\n\nTITLE: Define One-to-One Relation in User Model (PHP)\nDESCRIPTION: This code defines a one-to-one relationship between the User and Role models using the hasOne method. It specifies the related model class, foreign key, and local key. The hasOne method returns the relationship which can be used to query the related role.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    public function role()\n    {\n        return $this->hasOne(Role::class, 'user_id', 'id');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Annotation Injection\nDESCRIPTION: Demonstrates property injection using the #[Inject] annotation.  The UserService is injected into the $userService property of the IndexController.  Requires use Hyperf\\Di\\Annotation\\Inject namespace.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserService;\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass IndexController\n{\n\n    #[Inject]\n    private UserService $userService;\n    \n    public function index()\n    {\n        $id = 1;\n        // 直接使用\n        return $this->userService->getInfoById($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chunking Results by ID - PHP\nDESCRIPTION: This code demonstrates how to process database records in chunks using `chunkById()`, which is useful when updating records within the chunk callback.  It retrieves records from the 'user' table where 'gender' is 1, in chunks of 100, ordered by the primary key. Inside the closure, it updates the 'update_time' column for each user.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\nDb::table('user')->where('gender', 1)->chunkById(100, function ($users) {\n    foreach ($users as $user) {\n        Db::table('user')\n            ->where('id', $user->id)\n            ->update(['update_time' => time()]);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Default Database Configuration in PHP\nDESCRIPTION: Defines the default database configuration array for Hyperf, including driver, host, port, database, username, password, charset, collation, prefix, and connection pool settings. The values are pulled from environment variables using the `env()` helper function.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/quick-start.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER', 'mysql'),\n        'host' => env('DB_HOST', 'localhost'),\n        'port' => env('DB_PORT', 3306),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => env('DB_CHARSET', 'utf8'),\n        'collation' => env('DB_COLLATION', 'utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX', ''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float)env('DB_MAX_IDLE_TIME', 60),\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Single Middleware via Annotation in Hyperf\nDESCRIPTION: Demonstrates defining a single middleware using the `#[Middleware]` annotation in Hyperf.  This annotation is applied at the class level of a controller, ensuring that the specified middleware (`FooMiddleware`) is executed for all requests handled by that controller.  Requires the `#[AutoController]` or `#[Controller]` annotation to be present on the same class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/middleware/middleware.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Middleware\\FooMiddleware;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\HttpServer\\Annotation\\Middleware;\n\n#[AutoController]\n#[Middleware(FooMiddleware::class)]\nclass IndexController\n{\n    public function index()\n    {\n        return 'Hello Hyperf.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Custom Retry Annotation PHP\nDESCRIPTION: This code demonstrates a more advanced custom retry annotation, configuring it to retry only user-defined `TimeoutException` exceptions and use a variable-length interval with a base of 100ms. It includes `MaxAttemptsRetryPolicy`, `ClassifierRetryPolicy`, and `SleepRetryPolicy` to control the number of retries, the types of exceptions to retry, and the sleep interval between retries, respectively. Requires the `Hyperf\\Retry\\BackoffStrategy` class and `\\App\\Exception\\TimeoutException`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/retry.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Annotation;\n\nuse Doctrine\\Common\\Annotations\\Annotation\\Target;\n\n#[Attribute(Attribute::TARGET_METHOD)]\nclass MyRetry extends \\Hyperf\\Retry\\Annotation\\Retry\n{\n    public $policies = [\n        MaxAttemptsRetryPolicy::class,\n        ClassifierRetryPolicy::class,\n        SleepRetryPolicy::class,\n    ];\n    public $maxAttempts = 3;\n    public $base = 100;\n    public $strategy = \\Hyperf\\Retry\\BackoffStrategy::class;\n    public $retryThrowables = [\\App\\Exception\\TimeoutException::class];\n}\n```\n\n----------------------------------------\n\nTITLE: Getting uploaded file - PHP\nDESCRIPTION: Demonstrates how to retrieve an uploaded file from the request using the `file()` method. It returns an instance of `Hyperf\\HttpMessage\\Upload\\UploadedFile` or `null` if the file does not exist.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n// 存在則返回一個 Hyperf\\HttpMessage\\Upload\\UploadedFile 對象，不存在則返回 null\n$file = $request->file('photo');\n```\n\n----------------------------------------\n\nTITLE: Creating a Hyperf Model with Mass Assignment\nDESCRIPTION: Shows how to create a new model instance and populate its attributes using the `create()` method.  This requires specifying the `fillable` or `guarded` properties on the model to protect against mass assignment vulnerabilities.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected array $fillable = ['name'];\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$user = User::create(['name' => 'Hyperf']);\n```\n\n----------------------------------------\n\nTITLE: Making a Field Nullable and Changing Length in PHP\nDESCRIPTION: This PHP code shows how to modify a database field to allow null values and change its length.  It modifies the 'name' field in the 'users' table, setting its length to 50 and allowing null values. The `doctrine/dbal` dependency is required for this functionality.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nSchema::table('users', function (Blueprint $table) {\n    // Modify the length of the field to 50 and allow null\n    $table->string('name', 50)->nullable()->change();\n});\n```\n\n----------------------------------------\n\nTITLE: Routing with Regular Expressions - Hyperf (PHP)\nDESCRIPTION: Defines routes in Hyperf with regular expressions to validate parameters.  This demonstrates how to use the `Router::addRoute` method to create routes with specific parameter constraints (e.g., only digits) and optional route segments.  The `handler` argument represents the controller or function that will handle the request.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/router.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\HttpServer\\Router\\Router;\n\n// Matches /user/42, but not /user/xyz\nRouter::addRoute('GET', '/user/{id:\\d+}', 'handler');\n\n// Matches /user/foobar, but not /user/foo/bar\nRouter::addRoute('GET', '/user/{name}', 'handler');\n\n// Matches /user/foo/bar as well\nRouter::addRoute('GET', '/user/{name:.+}', 'handler');\n\n// This route\nRouter::addRoute('GET', '/user/{id:\\d+}[/{name}]', 'handler');\n// Is equivalent to these two routes\nRouter::addRoute('GET', '/user/{id:\\d+}', 'handler');\nRouter::addRoute('GET', '/user/{id:\\d+}/{name}', 'handler');\n\n// Multiple nested optional parts are possible as well\nRouter::addRoute('GET', '/user[/{id:\\d+}[/{name}]]', 'handler');\n\n// This route is NOT valid, because optional parts can only occur at the end\nRouter::addRoute('GET', '/user[/{id:\\d+}]/{name}', 'handler');\n```\n\n----------------------------------------\n\nTITLE: Creating Models: firstOrNew\nDESCRIPTION: Illustrates the usage of `firstOrNew` to find an existing model or instantiate a new one. The returned model is not saved to the database until the `save` method is called. Two examples demonstrate finding a model by name, and using name, gender, and age if the model is not found. This is useful for populating forms with default values if a model doesn't yet exist.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n//  通过 name 查找用户，不存在则创建一个实例...\n$user = User::firstOrNew(['name' => 'Hyperf']);\n\n// 通过 name 查找用户，不存在则使用 name 和 gender, age 属性创建一个实例...\n$user = User::firstOrNew(\n    ['name' => 'Hyperf'],\n    ['gender' => 1, 'age' => 20]\n);\n\n```\n\n----------------------------------------\n\nTITLE: Extending BaseClient for gRPC Client\nDESCRIPTION: This PHP code demonstrates how to extend the `BaseClient` to create a gRPC client.  This example provides a `sayHello` method that calls `_simpleRequest` from `BaseClient` with the correct parameters (RPC endpoint, request object and decoding method).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/grpc.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass HiClient extends BaseClient\n{\n    public function sayHello(HiUser $argument)\n    {\n        return $this->_simpleRequest(\n            '/grpc.hi/sayHello',\n            $argument,\n            [HiReply::class, 'decode']\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ClassMap Implementation for Guzzle Client\nDESCRIPTION: Example of using ClassMap to replace the Guzzle Client class with a custom implementation that integrates with Hyperf's coroutine handler. This allows for transparently enabling coroutines for Guzzle clients even when the handler cannot be directly modified. This example conditionally uses `CoroutineHandler` or `PoolHandler` based on whether the code is running in a coroutine.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/guzzle.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace GuzzleHttp;\n\nuse GuzzleHttp\\Psr7;\nuse Hyperf\\Guzzle\\CoroutineHandler;\nuse Hyperf\\Coroutine\\Coroutine;\n\nclass Client implements ClientInterface\n{\n    // 代码省略其他不变的代码\n\n    public function __construct(array $config = [])\n    {\n        $inCoroutine = Coroutine::inCoroutine();\n        if (!isset($config['handler'])) {\n            // 对应的 Handler 可以按需选择 CoroutineHandler 或 PoolHandler\n            $config['handler'] = HandlerStack::create($inCoroutine ? new CoroutineHandler() : null);\n        } elseif ($inCoroutine && $config['handler'] instanceof HandlerStack) {\n            $config['handler']->setHandler(new CoroutineHandler());\n        } elseif (!is_callable($config['handler'])) {\n            throw new \\InvalidArgumentException('handler must be a callable');\n        }\n\n        // Convert the base_uri to a UriInterface\n        if (isset($config['base_uri'])) {\n            $config['base_uri'] = Psr7\\uri_for($config['base_uri']);\n        }\n\n        $this->configureDefaults($config);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting SessionInterface in Hyperf Controller\nDESCRIPTION: Demonstrates how to inject the SessionInterface into a Hyperf controller using the Inject annotation. This allows access to the session object within the controller's methods. The session object is then accessible via `$this->session`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/session.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Contract\\SessionInterface;\n\nclass IndexController\n{\n    #[Inject]\n    private SessionInterface $session;\n\n    public function index()\n    {\n        // Use directly via $this->session\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route Groups in Hyperf\nDESCRIPTION: This code snippet demonstrates how to define route groups in Hyperf, adding a common prefix to multiple routes.  In this example, all routes within the group will have the `/user/` prefix.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/router.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nRouter::addGroup('/user/', function (){\n    Router::get('index', 'App\\Controller\\UserController@index');\n    Router::post('store', 'App\\Controller\\UserController@store');\n    Router::get('update', 'App\\Controller\\UserController@update');\n    Router::post('delete', 'App\\Controller\\UserController@delete');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an Enum Class with Constants and Messages in PHP\nDESCRIPTION: This code defines an enum class named `ErrorCode` using PHP 8.1's enum feature. It uses the `Hyperf\\Constants\\Annotation\\Constants` annotation to mark the class as a constants class, and the `Hyperf\\Constants\\Annotation\\Message` annotation to associate messages with each constant. It also imports `EnumConstantsTrait` to get additional functionalities.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/constants.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Constants;\n\nuse Hyperf\\Constants\\Annotation\\Constants;\nuse Hyperf\\Constants\\Annotation\\Message;\nuse Hyperf\\Constants\\EnumConstantsTrait;\n\n#[Constants]\nenum ErrorCode: int\n{\n    use EnumConstantsTrait\n    #[Message(\"Server Error！\")]\n    case SERVER_ERROR = 500;\n\n    #[Message(\"系统参数错误\")]\n    case SYSTEM_INVALID = 700;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Async Queue Configuration\nDESCRIPTION: Defines the default configuration for the Hyperf asynchronous queue, including the driver, Redis connection, channel, timeout, retry settings, and process limits. This configuration file sets up the basic parameters for the queue system.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => Hyperf\\AsyncQueue\\Driver\\RedisDriver::class,\n        'redis' => [\n            'pool' => 'default'\n        ],\n        'channel' => 'queue',\n        'timeout' => 2,\n        'retry_seconds' => 5,\n        'handle_timeout' => 10,\n        'processes' => 1,\n        'concurrent' => [\n            'limit' => 10,\n        ],\n        'max_messages' => 0,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: UserServiceInterface Definition\nDESCRIPTION: This defines an interface `UserServiceInterface` which the `UserService` class implements. This is used for abstract object injection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/di.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Service;\n\ninterface UserServiceInterface\n{\n    public function getInfoById(int $id);\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting multiple records with insert in Hyperf\nDESCRIPTION: This example shows how to insert multiple records into a database table using the `insert` method in Hyperf's query builder. It inserts two new users with their respective email addresses and votes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert([\n    ['email' => 'taylor@example.com', 'votes' => 0],\n    ['email' => 'dayle@example.com', 'votes' => 0]\n]);\n```\n\n----------------------------------------\n\nTITLE: Modify Column Properties using change()\nDESCRIPTION: This code snippet demonstrates how to modify an existing column's properties, such as length or nullability, using the `change()` method.  It requires the `doctrine/dbal` package to be installed. It updates the 'name' column in the 'users' table, changing its length to 50 and allowing null values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nSchema::create('users', function (Blueprint $table) {\n    // 将字段的长度修改为 50\n    $table->string('name', 50)->change();\n});\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Configuration with Priority\nDESCRIPTION: This code snippet shows how to configure global middleware with priority in Hyperf via the `config/autoload/middlewares.php` file.  Priority can be set by defining the middleware as a key-value pair, where the key is the middleware class and the value is the priority. Higher priority middleware is executed earlier.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/middleware/middleware.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n// 全局中間件配置文件 middleware.php\nreturn [\n    'http' => [\n        YourMiddleware::class,\n        YourMiddlewareB::class => 3,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Filesystem Storage Drivers in Hyperf\nDESCRIPTION: This code snippet configures various filesystem storage drivers for use within the Hyperf framework. It defines the 'default' driver and configurations for 'local', 'ftp', 'memory', 's3', 'minio', 'oss', 'qiniu', and 'cos' storage options, including adapter factories, credentials, regions, endpoints, and bucket names. Environment variables are used to define sensitive information, such as keys and secrets.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/filesystem.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Select the key corresponding to the driver under storage.\n    'default' => 'local',\n    'storage' => [\n        'local' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\LocalAdapterFactory::class,\n            'root' => __DIR__ . '/../../runtime',\n        ],\n        'ftp' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\FtpAdapterFactory::class,\n            'host' => 'ftp.example.com',\n            'username' => 'username',\n            'password' => 'password',\n\n            /* optional config settings */\n            'port' => 21,\n            'root' => '/path/to/root',\n            'passive' => true,\n            'ssl' => true,\n            'timeout' => 30,\n            'ignorePassiveAddress' => false,\n        ],\n        'memory' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\MemoryAdapterFactory::class,\n        ],\n        's3' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\S3AdapterFactory::class,\n            'credentials' => [\n                'key' => env('S3_KEY'),\n                'secret' => env('S3_SECRET'),\n            ],\n            'region' => env('S3_REGION'),\n            'version' => 'latest',\n            'bucket_endpoint' => false,\n            'use_path_style_endpoint' => false,\n            'endpoint' => env('S3_ENDPOINT'),\n            'bucket_name' => env('S3_BUCKET'),\n        ],\n        'minio' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\S3AdapterFactory::class,\n            'credentials' => [\n                'key' => env('S3_KEY'),\n                'secret' => env('S3_SECRET'),\n            ],\n            'region' => env('S3_REGION'),\n            'version' => 'latest',\n            'bucket_endpoint' => false,\n            'use_path_style_endpoint' => true,\n            'endpoint' => env('S3_ENDPOINT'),\n            'bucket_name' => env('S3_BUCKET'),\n        ],\n        'oss' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\AliyunOssAdapterFactory::class,\n            'accessId' => env('OSS_ACCESS_ID'),\n            'accessSecret' => env('OSS_ACCESS_SECRET'),\n            'bucket' => env('OSS_BUCKET'),\n            'endpoint' => env('OSS_ENDPOINT'),\n            // 'timeout'        => 3600,\n            // 'connectTimeout' => 10,\n            // 'isCName'        => false,\n            // 'token'          => '',\n        ],\n        'qiniu' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\QiniuAdapterFactory::class,\n            'accessKey' => env('QINIU_ACCESS_KEY'),\n            'secretKey' => env('QINIU_SECRET_KEY'),\n            'bucket' => env('QINIU_BUCKET'),\n            'domain' => env('QINIU_DOMAIN'),\n        ],\n        'cos' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\CosAdapterFactory::class,\n            'region' => env('COS_REGION'),\n            // overtrue/flysystem-cos ^2.0 The configuration is as follows\n            'credentials' => [\n                'appId' => env('COS_APPID'),\n                'secretId' => env('COS_SECRET_ID'),\n                'secretKey' => env('COS_SECRET_KEY'),\n            ],\n            // overtrue/flysystem-cos ^3.0 The configuration is as follows\n            'app_id' => env('COS_APPID'),\n            'secret_id' => env('COS_SECRET_ID'),\n            'secret_key' => env('COS_SECRET_KEY'),\n            // Optional, please turn this on if the bucket has private access\n            // 'signed_url' => false,\n            'bucket' => env('COS_BUCKET'),\n            'read_from_cdn' => false,\n            // 'timeout'         => 60,\n            // 'connect_timeout' => 60,\n            // 'cdn'             => '',\n            // 'scheme'          => 'https',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Eager Load Relation (PHP)\nDESCRIPTION: This code demonstrates how to eager load the 'role' relationship when querying users, preventing the N+1 query problem.  The `with()` method specifies the relationship to load along with the parent model.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n$users = User::query()->with('role')->get();\n\nforeach ($users as $user){\n    echo $user->role->name;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Broadcast Message with MessageBus\nDESCRIPTION: This code demonstrates how to use the `MessageBusInterface` to broadcast messages across all processes in a Hyperf application.  The `onNext` method is used to send a message, and the `subscribe` method is used to receive messages.  This provides a simple way to share information across all processes, including custom processes, and can be used to implement features such as configuration centers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/reactive-x.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$bus = make(Hyperf\\ReactiveX\\MessageBusInterface::class);\n// 全进程广播信息\n$bus->onNext('Hello Hyperf');\n// 订阅信息\n$bus->subscribe(function($message){\n    echo $message;\n});\n\n```\n\n----------------------------------------\n\nTITLE: Customizing CoreMiddleware Behavior in Hyperf\nDESCRIPTION: Demonstrates how to customize the behavior of Hyperf's `CoreMiddleware` for handling 404 and 405 HTTP status codes.  By creating a custom `CoreMiddleware` class and registering it as a dependency, you can override the default handling logic for these scenarios.  Requires registering the custom middleware in `config/autoload/dependencies.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/middleware/middleware.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Middleware;\n\nuse Hyperf\\Contract\\Arrayable;\nuse Hyperf\\HttpMessage\\Stream\\SwooleStream;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass CoreMiddleware extends \\Hyperf\\HttpServer\\CoreMiddleware\n{\n    /**\n     * Handle the response when cannot found any routes.\n     *\n     * @return array|Arrayable|mixed|ResponseInterface|string\n     */\n    protected function handleNotFound(ServerRequestInterface $request)\n    {\n        // 重写路由找不到的处理逻辑\n        return $this->response()->withStatus(404);\n    }\n\n    /**\n     * Handle the response when the routes found but doesn't match any available methods.\n     *\n     * @return array|Arrayable|mixed|ResponseInterface|string\n     */\n    protected function handleMethodNotAllowed(array $methods, ServerRequestInterface $request)\n    {\n        // 重写 HTTP 方法不允许的处理逻辑\n        return $this->response()->withStatus(405);\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\HttpServer\\CoreMiddleware::class => App\\Middleware\\CoreMiddleware::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Defining an AMQP Consumer Class\nDESCRIPTION: Defines an AMQP consumer class in Hyperf, extending `ConsumerMessage`.  It configures the exchange, routing key, and queue via the `#[Consumer]` attribute, and implements the `consumeMessage` method to process incoming messages. The method receives the message data and AMQP message, prints the data, and acknowledges the message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/amqp.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Amqp\\Consumers;\n\nuse Hyperf\\Amqp\\Annotation\\Consumer;\nuse Hyperf\\Amqp\\Message\\ConsumerMessage;\nuse Hyperf\\Amqp\\Result;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n#[Consumer(exchange: \"hyperf\", routingKey: \"hyperf\", queue: \"hyperf\", nums: 1)]\nclass DemoConsumer extends ConsumerMessage\n{\n    public function consumeMessage($data, AMQPMessage $message): Result\n    {\n        print_r($data);\n        return Result::ACK;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Translate String via Global Function\nDESCRIPTION: Translates a string using the global functions `__()` or `trans()`. These functions provide a convenient way to translate strings within a Hyperf application without injecting the `TranslatorInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/translation.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\necho __('messages.welcome');\necho trans('messages.welcome');\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Multiple WebSocket Servers\nDESCRIPTION: This Nginx configuration sets up a load balancer for multiple WebSocket servers running on the same port (9502) but different hosts (ws1, ws2). It forwards WebSocket connections to the upstream 'io_nodes' group.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/websocket-server.md#_snippet_8\n\nLANGUAGE: nginx\nCODE:\n```\n# /etc/nginx/conf.d/ng_socketio.conf\n# 多個 ws server\nupstream io_nodes {\n    server ws1:9502;\n    server ws2:9502;\n}\nserver {\n  listen 9502;\n  # server_name your.socket.io;\n  location / {\n    proxy_set_header Upgrade \"websocket\";\n    proxy_set_header Connection \"upgrade\";\n    # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    # proxy_set_header Host $host;\n    # proxy_http_version 1.1;\n    # 轉發到多個 ws server\n    proxy_pass http://io_nodes;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Queue Consumer Process\nDESCRIPTION: Registers the default asynchronous queue consumer process in the processes.php configuration file. This ensures that the queue consumer process is started when the Hyperf application is launched.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    Hyperf\\AsyncQueue\\Process\\ConsumerProcess::class,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Get User Images Association PHP\nDESCRIPTION: Retrieves all images associated with a user using the defined `images` relationship. It finds a user with ID 1 and then iterates through the `images` collection to access each related image model.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/relationship.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$user = User::query()->find(1);\nforeach ($user->images as $image) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Aspect with Classes and Annotations in Hyperf (PHP)\nDESCRIPTION: This code defines an Aspect in Hyperf that intercepts calls to classes and methods annotated with specific annotations. It uses the `#[Aspect]` attribute and extends the `AbstractAspect` class. The `$classes` array specifies the classes or traits to intercept, while the `$annotations` array specifies the annotations to intercept. The `process` method is the entry point for the aspect's logic, allowing modification of the original method's behavior before and after its execution.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/aop.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Aspect;\n\nuse App\\Service\\SomeClass;\nuse App\\Annotation\\SomeAnnotation;\nuse Hyperf\\Di\\Annotation\\Aspect;\nuse Hyperf\\Di\\Aop\\AbstractAspect;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\n#[Aspect]\nclass FooAspect extends AbstractAspect\n{\n    // 要切入的類或 Trait，可以多個，亦可透過 :: 標識到具體的某個方法，透過 * 可以模糊匹配\n    public array $classes = [\n        SomeClass::class,\n        'App\\Service\\SomeClass::someMethod',\n        'App\\Service\\SomeClass::*Method',\n    ];\n\n    // 要切入的註解，具體切入的還是使用了這些註解的類，僅可切入類註解和類方法註解\n    public array $annotations = [\n        SomeAnnotation::class,\n    ];\n\n    public function process(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        // 切面切入後，執行對應的方法會由此來負責\n        // $proceedingJoinPoint 為連線點，透過該類的 process() 方法呼叫原方法並獲得結果\n        // 在呼叫前進行某些處理\n        $result = $proceedingJoinPoint->process();\n        // 在呼叫後進行某些處理\n        return $result;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: AMQP Producer Implementation (PHP)\nDESCRIPTION: Defines an AMQP producer class named `DemoProducer` that extends `ProducerMessage`. It sets the exchange and routing key using the `#[Producer]` attribute and populates the payload with user data retrieved from the database.  Uses pool2 as connection pool. Requires Hyperf DI Container and Eloquent.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Amqp\\Producers;\n\nuse Hyperf\\Amqp\\Annotation\\Producer;\nuse Hyperf\\Amqp\\Message\\ProducerMessage;\nuse App\\Models\\User;\n\n#[Producer(exchange: \"hyperf\", routingKey: \"hyperf\")]\nclass DemoProducer extends ProducerMessage\n{\n    public function __construct($id)\n    {\n        // 设置不同 pool\n        $this->poolName = 'pool2';\n\n        $user = User::where('id', $id)->first();\n        $this->payload = [\n            'id' => $id,\n            'data' => $user->toArray()\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying and Saving a Model\nDESCRIPTION: This snippet demonstrates how to query for a model, modify its attributes, and save the changes back to the database. It utilizes the `query()`, `where()`, `first()`, and `save()` methods.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = User::query()->where('id', 1)->first();\n$user->name = 'Hyperf';\n$user->save();\n\n```\n\n----------------------------------------\n\nTITLE: Deleting records using delete in Hyperf\nDESCRIPTION: This snippet demonstrates how to delete records from a database table using the `delete` method. A `where` clause can be used to specify which records to delete.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->delete();\n\nDb::table('users')->where('votes', '>', 100)->delete();\n```\n\n----------------------------------------\n\nTITLE: UserTest Class for Testing UserDao\nDESCRIPTION: This PHP code defines a test class `UserTest` extending `HttpTestCase`. It tests the `UserDao::first()` method by retrieving a user model and asserting that the retrieved model's ID matches the expected value. It uses `var_dump` for debugging.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/testing.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace HyperfTest\\Cases;\n\nuse HyperfTest\\HttpTestCase;\nuse App\\Service\\Dao\\UserDao;\n\n/**\n * @internal\n * @coversNothing\n */\nclass UserTest extends HttpTestCase\n{\n    public function testUserDaoFirst()\n    {\n        $model = \\Hyperf\\Context\\ApplicationContext::getContainer()->get(UserDao::class)->first(1);\n\n        var_dump($model);\n\n        $this->assertSame(1, $model->id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define a Service Provider with #[RpcService] Annotation (PHP)\nDESCRIPTION: Defines a service provider class using the #[RpcService] annotation. The annotation includes parameters for service name, protocol, server, and publishing to a service center.  Requires `use Hyperf\\RpcServer\\Annotation\\RpcService;`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/json-rpc.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\JsonRpc;\n\nuse Hyperf\\RpcServer\\Annotation\\RpcService;\n\n/**\n * 注意，如希望通过服务中心来管理服务，需在注解内增加 publishTo 属性\n */\n#[RpcService(name: \"CalculatorService\", protocol: \"jsonrpc-http\", server: \"jsonrpc-http\")]\nclass CalculatorService implements CalculatorServiceInterface\n{\n    // 实现一个加法方法，这里简单的认为参数都是 int 类型\n    public function add(int $a, int $b): int\n    {\n        // 这里是服务方法的具体实现\n        return $a + $b;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading via Annotation\nDESCRIPTION: Example of using lazy loading by the annotation #[Inject(lazy: true)]\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Di\\Annotation\\Inject;\nuse App\\Service\\UserServiceInterface;\n\nclass Foo\n{\n    /**\n     * @var UserServiceInterface\n     */\n    #[Inject(lazy: true)]\n    public $service;\n}\n```\n\n----------------------------------------\n\nTITLE: Model Event Listener in Hyperf\nDESCRIPTION: This code shows how to create a model event listener in Hyperf. This listener listens for `Deleted` and `Saved` events and deletes the model's cache when either of these events occur. The listener implements `ListenerInterface` and uses the `CacheableInterface` to determine if the model has a cache to delete.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/event.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\ModelCache\\Listener;\n\nuse Hyperf\\Database\\Model\\Events\\Deleted;\nuse Hyperf\\Database\\Model\\Events\\Event;\nuse Hyperf\\Database\\Model\\Events\\Saved;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\ModelCache\\CacheableInterface;\n\n#[Listener]\nclass DeleteCacheListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            Deleted::class,\n            Saved::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        if ($event instanceof Event) {\n            $model = $event->getModel();\n            if ($model instanceof CacheableInterface) {\n                $model->deleteCache();\n            }\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Coroutine Guzzle Client\nDESCRIPTION: Demonstrates how to create a coroutine-based Guzzle client using the ClientFactory provided by the hyperf/guzzle component.  The ClientFactory simplifies the creation of a Guzzle client that utilizes the Swoole HTTP client for coroutine support. The $options array corresponds to the configuration parameters of the GuzzleHttp\\Client constructor.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/guzzle.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php \nuse Hyperf\\Guzzle\\ClientFactory;\n\nclass Foo {\n    /**\n     * @var \\Hyperf\\Guzzle\\ClientFactory\n     */\n    private $clientFactory;\n    \n    public function __construct(ClientFactory $clientFactory)\n    {\n        $this->clientFactory = $clientFactory;\n    }\n    \n    public function bar()\n    {\n        // $options is equivalent to the $config parameter of the GuzzleHttp\\Client constructor\n        $options = [];\n        // $client is a coroutineized GuzzleHttp\\Client object\n        $client = $this->clientFactory->create($options);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering by date using latest and oldest in Hyperf\nDESCRIPTION: This snippet shows how to easily order results by date using the `latest` and `oldest` methods. These methods use the `created_at` column by default but can be customized with a different column name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$user = Db::table('users')->latest()->first();\n```\n\n----------------------------------------\n\nTITLE: Defining Foreign Key Constraint in Hyperf (PHP)\nDESCRIPTION: Shows how to define a foreign key constraint using Hyperf's schema builder. The `foreign()`, `references()`, and `on()` methods are chained to create the constraint.  It also shows how to define the action to perform on delete.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nSchema::table('posts', function (Blueprint $table) {\n    $table->unsignedInteger('user_id');\n\n    $table->foreign('user_id')->references('id')->on('users');\n});\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$table->foreign('user_id')\n      ->references('id')->on('users')\n      ->onDelete('cascade');\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Foreign Key Constraints in Hyperf (PHP)\nDESCRIPTION: Shows how to enable or disable foreign key constraints using the `enableForeignKeyConstraints()` and `disableForeignKeyConstraints()` methods in Hyperf's schema builder. These methods can be used in migration files to temporarily disable constraints during data manipulation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\n// Enable foreign key constraints\nSchema::enableForeignKeyConstraints();\n// Disable foreign key constraints\nSchema::disableForeignKeyConstraints();\n```\n\n----------------------------------------\n\nTITLE: Using Redis Client via Dependency Injection (Hyperf)\nDESCRIPTION: Demonstrates how to obtain an instance of the Redis client in Hyperf using dependency injection. It retrieves the Redis object from the container and then uses it to perform a keys command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/redis.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n\n$redis = $container->get(\\Hyperf\\Redis\\Redis::class);\n$result = $redis->keys('*');\n\n```\n\n----------------------------------------\n\nTITLE: Queue Controller Example\nDESCRIPTION: Demonstrates how to use the `QueueService` within a controller to push a message to the queue when the `index` action is accessed. Injects the `QueueService` dependency using the `Inject` annotation and calls the `push` method to add a job to the queue.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/async-queue.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse App\\Service\\QueueService;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass QueueController extends Controller\n{\n    #[Inject]\n    protected QueueService $service;\n\n    public function index()\n    {\n        $this->service->push([\n            'group@hyperf.io',\n            'https://doc.hyperf.io',\n            'https://www.hyperf.io',\n        ]);\n\n        return 'success';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection via Constructor - Hyperf PHP\nDESCRIPTION: This code snippet demonstrates dependency injection in Hyperf using constructor injection.  The `UserService` is injected into the `IndexController` via its constructor. Hyperf automatically resolves and injects the `UserService` instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/overview.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse App\\Service\\UserService;\n\n#[AutoController]\nclass IndexController\n{\n    private UserService $userService;\n    \n    // 在构造函数声明参数的类型，Hyperf 会自动注入对应的对象或值\n    public function __construct(UserService $userService)\n    {\n        $this->userService = $userService;\n    }\n    \n    // /index/info\n    public function info(RequestInterface $request)\n    {\n        $id = $request->input('id', 1);\n        return $this->userService->getInfoById((int)$id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TCC Transaction Example in Hyperf\nDESCRIPTION: This PHP code demonstrates the usage of the DTM Client to implement a TCC (Try-Confirm-Cancel) distributed transaction within a Hyperf controller. It defines a `successCase` method that initiates a global TCC transaction, calling Try, Confirm, and Cancel methods of two sub-transactions (transA and transB).  Error handling is included.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/distributed-transaction.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse DtmClient\\TCC;\nuse DtmClient\\TransContext;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\GetMapping;\nuse Throwable;\n\n#[Controller(prefix: '/tcc')]\nclass TccController\n{\n\n    protected string $serviceUri = 'http://127.0.0.1:9501';\n\n    #[Inject]\n    protected TCC $tcc;\n\n    #[GetMapping(path: 'successCase')]\n    public function successCase()\n    {\n        try {\n            \n            $this->tcc->globalTransaction(function (TCC $tcc) {\n                // 建立子事務 A 的呼叫資料\n                $tcc->callBranch(\n                    // 呼叫 Try 方法的引數\n                    ['amount' => 30],\n                    // Try 方法的 URL\n                    $this->serviceUri . '/tcc/transA/try',\n                    // Confirm 方法的 URL\n                    $this->serviceUri . '/tcc/transA/confirm',\n                    // Cancel 方法的 URL\n                    $this->serviceUri . '/tcc/transA/cancel'\n                );\n                // 建立子事務 B 的呼叫資料，以此類推\n                $tcc->callBranch(\n                    ['amount' => 30],\n                    $this->serviceUri . '/tcc/transB/try',\n                    $this->serviceUri . '/tcc/transB/confirm',\n                    $this->serviceUri . '/tcc/transB/cancel'\n                );\n            });\n        } catch (Throwable $e) {\n            var_dump($e->getMessage(), $e->getTraceAsString());\n        }\n        // 透過 TransContext::getGid() 獲得 全域性事務ID 並返回\n        return TransContext::getGid();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Array & JSON Casting in Hyperf Model\nDESCRIPTION: Defines attribute casting for array and JSON data in a Hyperf model. The `array` type casting allows automatic conversion between JSON strings stored in the database and PHP arrays when accessing and setting the attribute.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/mutators.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 應進行型別轉換的屬性\n     *\n     * @var array\n     */\n    protected $casts = [\n        'options' => 'array',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Error Messages in Form Request\nDESCRIPTION: Overrides the `messages` method in a FormRequest to provide custom error messages for specific validation rules.  This allows you to tailor the error messages to be more user-friendly.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n/**\n * 获取已定义验证规则的错误消息\n */\npublic function messages(): array\n{\n    return [\n        'foo.required' => 'foo is required',\n        'bar.required'  => 'bar is required',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating records using update in Hyperf\nDESCRIPTION: This snippet demonstrates how to update existing records in a database table using the `update` method. It accepts an array of field names and values to update. A `where` clause can be used to specify which records to update.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('id', 1)->update(['votes' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON RPC Service with #[RpcService]\nDESCRIPTION: This code snippet demonstrates how to define a JSON RPC service provider using the `#[RpcService]` attribute in Hyperf. The `name`, `protocol`, and `server` attributes configure the service's identity, protocol, and server binding. The `publishTo` attribute determines the service registry to publish to. The service implements the `CalculatorServiceInterface` interface and provides the `add` method as a service endpoint.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/json-rpc.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\JsonRpc;\n\nuse Hyperf\\RpcServer\\Annotation\\RpcService;\n\n/**\n * 注意，如希望透過服務中心來管理服務，需在註解內增加 publishTo 屬性\n */\n#[RpcService(name: \"CalculatorService\", protocol: \"jsonrpc-http\", server: \"jsonrpc-http\")]\nclass CalculatorService implements CalculatorServiceInterface\n{\n    // 實現一個加法方法，這裡簡單的認為引數都是 int 型別\n    public function add(int $a, int $b): int\n    {\n        // 這裡是服務方法的具體實現\n        return $a + $b;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listen for Config Changed Event in Hyperf\nDESCRIPTION: This code snippet demonstrates how to create a listener in Hyperf to react to configuration changes triggered by the configuration center. It listens for the `Hyperf\\ConfigCenter\\Event\\ConfigChanged` event and executes a `process` method when the event is dispatched, allowing for custom logic to be executed upon configuration updates. The var_dump($event) will print the event details.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/config-center.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\ConfigCenter\\Event\\ConfigChanged;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\n\n#[Listener]\nclass DbQueryExecutedListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            ConfigChanged::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        var_dump($event);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Raw Methods - PHP\nDESCRIPTION: This section shows how to use the raw methods `selectRaw`, `whereRaw`, `havingRaw`, and `orderByRaw` to inject raw SQL expressions into different parts of the query. These methods provide a way to bypass the query builder's abstraction layer and use database-specific syntax or functions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('order')\n    ->selectRaw('price * ? as price_with_tax', [1.0825])\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('order')\n    ->whereRaw('price > IF(state = \"TX\", ?, 100)', [200])\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('order')\n    ->select('department', Db::raw('SUM(price) as total_sales'))\n    ->groupBy('department')\n    ->havingRaw('SUM(price) > ?', [2500])\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('order')\n    ->orderByRaw('updated_at - created_at DESC')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Unique Validation Ignoring a Given ID\nDESCRIPTION: Illustrates how to use the `Rule::unique()` method with the `ignore()` method to exclude a specific ID from the uniqueness check. It uses the `Hyperf\\Validation\\Rule` class to define the rule and allows updates to the same record without triggering a uniqueness error.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($data, [\n    'email' => [\n        'required',\n        Rule::unique('users')->ignore($user->id),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Define Many-to-Many Relation with Timestamps (PHP)\nDESCRIPTION: This code defines a many-to-many relationship and enables automatic maintenance of created_at and updated_at timestamps in the pivot table by using the withTimestamps method during relationship definition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nreturn $this->belongsToMany(Role::class)->withTimestamps();\n\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Process Properties\nDESCRIPTION: This snippet demonstrates how to set custom process properties, such as the number of processes, name, and redirection behavior. This can be done either by overriding properties in the class or by setting attributes within the `#[Process]` annotation. Properties defined via annotation take precedence.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/process.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process(name: \"user-process\", redirectStdinStdout: false, pipeType: 2, enableCoroutine: true)]\nclass FooProcess extends AbstractProcess\n{\n    /**\n     * 進程數量\n     */\n    public int $nums = 1;\n\n    /**\n     * 進程名稱\n     */\n    public string $name = 'user-process';\n\n    /**\n     * 重定向自定義進程的標準輸入和輸出\n     */\n    public bool $redirectStdinStdout = false;\n\n    /**\n     * 管道類型\n     */\n    public int $pipeType = 2;\n\n    /**\n     * 是否啓用協程\n     */\n    public bool $enableCoroutine = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Annotation Usage in Hyperf\nDESCRIPTION: This code demonstrates using the `Hyperf\\RateLimit\\Annotation\\RateLimit` annotation to apply rate limiting to controller methods. It configures different QPS and peak values for two methods, `test` and `test2`, showing how to limit the number of requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/rate-limit.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\nuse Hyperf\\RateLimit\\Annotation\\RateLimit;\n\n#[Controller(prefix: \"rate-limit\")]\nclass RateLimitController\n{\n    #[RequestMapping(path: \"test\")]\n    #[RateLimit(create: 1, capacity: 3)]\n    public function test()\n    {\n        return [\"QPS 1, Peek3\"];\n    }\n\n    #[RequestMapping(path: \"test2\")]\n    #[RateLimit(create: 2, consume: 2, capacity: 4)]\n    public function test2()\n    {\n        return [\"QPS 2, Peek2\"];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting All Input Data PHP\nDESCRIPTION: Illustrates how to retrieve all input data from the request as an associative array using the `all()` method. This includes data from query parameters, request body (form data), and JSON input.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/request.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$all = $request->all();\n```\n\n----------------------------------------\n\nTITLE: Factory Object Binding\nDESCRIPTION: This configures the dependency injection container to use the `UserServiceFactory` to create instances of `UserServiceInterface`.  This is done in `config/autoload/dependencies.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/di.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    \\App\\Service\\UserServiceInterface::class => \\App\\Service\\UserServiceFactory::class\n];\n```\n\n----------------------------------------\n\nTITLE: Add Validation Middleware to Hyperf\nDESCRIPTION: Adds the `Hyperf\\Validation\\Middleware\\ValidationMiddleware` to the global middleware configuration for the specified server (e.g., 'http'). This ensures that validation rules are applied before the request reaches the controller.  The order of middleware is important and should be adjusted accordingly.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // 下面的 http 字符串对应 config/autoload/server.php 内每个 server 的 name 属性对应的值，意味着对应的中间件配置仅应用在该 Server 中\n    'http' => [\n        // 数组内配置您的全局中间件，顺序根据该数组的顺序\n        \\Hyperf\\Validation\\Middleware\\ValidationMiddleware::class\n        // 这里隐藏了其它中间件\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Adjusting Dockerfile for optimized startup\nDESCRIPTION: This snippet shows how to adjust the `Dockerfile` to optimize startup time and memory usage in a production environment. It involves executing the `php bin/hyperf.php` command during the image build process to pre-generate proxy classes and annotation scanning caches.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.0.md#_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV TIMEZONE=${timezone:-'Asia/Shanghai'} \\\n    APP_ENV=prod \\\n    SCAN_CACHEABLE=(true)\n\nCOPY . /opt/www\nRUN composer install --no-dev -o && php bin/hyperf.php\n\nEXPOSE 9501\n\nENTRYPOINT [\"php\", \"/opt/www/bin/hyperf.php\", \"start\"]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sentinel Mode using Environment Variables\nDESCRIPTION: This shows configuration settings, in `.env` format, for enabling Redis Sentinel mode within a Hyperf application. It defines variables for the Redis master's password, enables the Sentinel feature, specifies the Sentinel password, and lists the Sentinel nodes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/redis.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nREDIS_HOST=\nREDIS_AUTH=Redis實例密碼\nREDIS_PORT=\nREDIS_DB=\nREDIS_SENTINEL_ENABLE=true\nREDIS_SENTINEL_PASSWORD=Redis哨兵密碼\nREDIS_SENTINEL_NODE=192.168.89.129:26381;192.168.89.129:26380;\n```\n\n----------------------------------------\n\nTITLE: Using firstOrCreate and firstOrNew in Hyperf\nDESCRIPTION: This code demonstrates the use of `firstOrCreate` and `firstOrNew` methods for creating or retrieving model instances. `firstOrCreate` finds a record or creates it if it doesn't exist and saves to the database. `firstOrNew` finds a record or creates a new unsaved instance. Requires the `App\\Model\\User` model to be defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n// Find the user by name, create it if it does not exist...\n$user = User::firstOrCreate(['name' => 'Hyperf']);\n\n// Find the user by name. If it does not exist, use the name and gender, age attributes to create...\n$user = User::firstOrCreate(\n    ['name' => 'Hyperf'],\n    ['gender' => 1, 'age' => 20]\n);\n\n// Find the user by name, create an instance if it does not exist...\n$user = User::firstOrNew(['name' => 'Hyperf']);\n\n// Find the user by name. If it does not exist, use the name and gender, age attributes to create an instance...\n$user = User::firstOrNew(\n    ['name' => 'Hyperf'],\n    ['gender' => 1, 'age' => 20]\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Date Attributes to Hyperf Model\nDESCRIPTION: Adds the `seen_at` attribute to the `$dates` array in a Hyperf model. This tells the model to automatically convert the `seen_at` attribute to a `Carbon` instance when retrieved from the database, providing convenient date manipulation methods.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/mutators.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 應該轉換為日期格式的屬性.\n     *\n     * @var array\n     */\n    protected $dates = [\n        'seen_at',\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Optimize SQL query listener with ReactiveX\nDESCRIPTION: This code snippet demonstrates how to optimize a SQL query listener using ReactiveX. It filters SQL queries that take longer than 100ms and limits the logging to once per second per connection, preventing excessive disk writes from problematic queries. It uses `Observable::fromEvent` to convert the `QueryExecuted` event into an observable sequence, and the `filter`, `groupBy`, `flatMap`, `throttle`, `map`, and `subscribe` operators to process the events.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/reactive-x.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\ReactiveX\\Example;\n\nuse Hyperf\\Database\\Events\\QueryExecuted;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BeforeWorkerStart;\nuse Hyperf\\Logger\\LoggerFactory;\nuse Hyperf\\ReactiveX\\Observable;\nuse Hyperf\\Collection\\Arr;\nuse Hyperf\\Stringable\\Str;\nuse Psr\\Container\\ContainerInterface;\n\nclass SqlListener implements ListenerInterface\n{\n    private $logger;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->logger = $container->get(LoggerFactory::class)->get('sql');\n    }\n\n    public function listen(): array\n    {\n        return [\n            BeforeWorkerStart::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        Observable::fromEvent(QueryExecuted::class)\n            ->filter(\n                fn ($event) => $event->time > 100\n            )\n            ->groupBy(\n                fn ($event) => $event->connectionName\n            )\n            ->flatMap(\n                fn ($group) => $group->throttle(1000)\n            )\n            ->map(\n                function ($event) {\n                    $sql = $event->sql;\n                    if (! Arr::isAssoc($event->bindings)) {\n                        foreach ($event->bindings as $key => $value) {\n                            $sql = Str::replaceFirst('?', \"'{$value}'\", $sql);\n                        }\n                    }\n                    return [$event->connectionName, $event->time, $sql];\n                }\n            )->subscribe(\n                fn ($message) => $this->logger->info(sprintf('slow log: [%s] [%s] %s', ...$message))\n            );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Inner Join Clause - PHP\nDESCRIPTION: This snippet demonstrates how to perform an inner join between three tables ('users', 'contacts', and 'orders') using the `join()` method. It selects all columns from the 'users' table and specific columns from the 'contacts' and 'orders' tables, joining them based on the 'id' and 'user_id' columns.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->join('contacts', 'users.id', '=', 'contacts.user_id')\n    ->join('orders', 'users.id', '=', 'orders.user_id')\n    ->select('users.*', 'contacts.phone', 'orders.price')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Paginating Resources with Hyperf\nDESCRIPTION: This PHP code shows how to paginate a collection of `User` models using Hyperf's resource system. It retrieves a paginated set of users and then transforms it into a `UserCollection` resource, which automatically handles the pagination metadata in the API response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\UserCollection;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserCollection(User::paginate()))->toResponse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Model Observer in Hyperf\nDESCRIPTION: This code defines a model observer in Hyperf using the `ModelListener` annotation. It observes the `User` model and provides methods to handle the `creating` and `created` events. The observer is automatically registered as a singleton in the container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/event.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\ModelListener\\Annotation\\ModelListener;\nuse App\\Model\\User;\nuse Hyperf\\Database\\Model\\Events\\Creating;\nuse Hyperf\\Database\\Model\\Events\\Created;\n\n/**\n * 定义一个 UserObserver 观察者，监听 User 模型的事件.\n * 也可以监听多个模型，只需要在 models 属性中传入多个模型即可\n * 需要注意，此类将会被自动注册到容器中成为单例\n */\n#[ModelListener(models: [ User::class ])]\nclass UserObserver\n{\n    public function creating(Creating $event)\n    {\n        $user = $event->getModel();\n        // 创建用户时触发\n    }\n    \n    public function created(Created $event)\n    {\n        $user = $event->getModel();\n        // 用户创建完成后触发\n    }\n    \n    //... 省略其他事件\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install Nacos Adapter (Hyperf)\nDESCRIPTION: This command installs the hyperf/service-governance-nacos component, which provides the adapter for using Nacos as the service registry.  This is necessary if you want to use Nacos for service registration and discovery.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/service-register.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/service-governance-nacos\n```\n\n----------------------------------------\n\nTITLE: Registering Listeners via Config\nDESCRIPTION: This PHP code snippet shows how to register a listener in Hyperf using the `listeners.php` configuration file. The listener class name is added to the array, making it discoverable by the dispatcher. The order in this array determines the trigger order of the listeners.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/event.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    \\App\\Listener\\UserRegisteredListener::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Register All Public Methods as Events in Hyperf Socket.IO\nDESCRIPTION: This PHP code shows how to register all public methods in a Hyperf controller as Socket.IO event handlers using the `#[Event]` annotation.  This approach automatically maps method names to event names, simplifying event registration. It requires careful naming of methods to avoid conflicts with other public methods.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/socketio-server.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\SocketIOServer\\Annotation\\SocketIONamespace;\nuse Hyperf\\SocketIOServer\\Annotation\\Event;\nuse Hyperf\\SocketIOServer\\BaseNamespace;\nuse Hyperf\\SocketIOServer\\Socket;\n\n#[SocketIONamespace(\"/\")]\n#[Event]\nclass WebSocketController extends BaseNamespace\n{\n    public function echo(Socket $socket, $data)\n    {\n        $socket->emit('event', $data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating or Inserting Records - PHP\nDESCRIPTION: This snippet demonstrates how to update an existing record or insert a new one if it doesn't exist using the `updateOrInsert` method. It accepts two arrays: one for finding the record and another for updating/inserting.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->updateOrInsert(\n    ['email' => 'john@example.com', 'name' => 'John'],\n    ['votes' => '2']\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Coroutine Guzzle Client with ClientFactory\nDESCRIPTION: Demonstrates how to create a coroutine-enabled Guzzle client using the `ClientFactory`. The `$options` array corresponds to the configuration parameters used by the `GuzzleHttp\\Client` constructor. The factory returns a coroutine-enabled `GuzzleHttp\\Client` object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/guzzle.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php \nuse Hyperf\\Guzzle\\ClientFactory;\n\nclass Foo\n{\n    private ClientFactory $clientFactory;\n\n    public function __construct(ClientFactory $clientFactory)\n    {\n        $this->clientFactory = $clientFactory;\n    }\n    \n    public function bar()\n    {\n        // $options 等同於 GuzzleHttp\\Client 構造函數的 $config 參數\n        $options = [];\n        // $client 為協程化的 GuzzleHttp\\Client 對象\n        $client = $this->clientFactory->create($options);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Mass Assignment with create (Hyperf)\nDESCRIPTION: Demonstrates how to use the `create` method for mass assignment to create a new model instance and insert data into the database. This requires defining the `$fillable` or `$guarded` properties on the model to control which attributes can be mass assigned.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected array $fillable = ['name'];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$user = User::create(['name' => 'Hyperf']);\n```\n\n----------------------------------------\n\nTITLE: Array Type Conversion in PHP\nDESCRIPTION: This code demonstrates how to define an `array` type conversion within the `$casts` property of a model. When accessing the `options` property, the JSON data stored in the database will be automatically converted to a PHP array. When setting the value of the `options` property, the given array will be automatically serialized to JSON before storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * Properties that should be typecast\n     *\n     * @var array\n     */\n    protected $casts = [\n        'options' => 'array',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Kafka Consumer\nDESCRIPTION: This code defines a Kafka consumer class using annotations in Hyperf. It specifies the topic to listen to, the number of consumer processes, the group ID, and whether to auto-commit offsets.  The `consume` method is implemented to process received messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/kafka.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\kafka;\n\nuse Hyperf\\Kafka\\AbstractConsumer;\nuse Hyperf\\Kafka\\Annotation\\Consumer;\nuse longlang\\phpkafka\\Consumer\\ConsumeMessage;\n\n#[Consumer(topic: \"hyperf\", nums: 5, groupId: \"hyperf\", autoCommit: true)]\nclass KafkaConsumer extends AbstractConsumer\n{\n    public function consume(ConsumeMessage $message): string\n    {\n        var_dump($message->getTopic() . ':' . $message->getKey() . ':' . $message->getValue());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS Middleware in Hyperf\nDESCRIPTION: This snippet shows how to implement a CORS middleware in Hyperf to handle cross-origin requests. It sets the necessary headers for allowing requests from any origin, allowing credentials, and specifying allowed headers. This middleware should be registered within your Hyperf application's middleware configuration to apply globally or on specific routes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/middleware/middleware.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Middleware;\n\nuse Hyperf\\Context\\Context;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass CorsMiddleware implements MiddlewareInterface\n{\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        $response = Context::get(ResponseInterface::class);\n        $response = $response->withHeader('Access-Control-Allow-Origin', '*')\n            ->withHeader('Access-Control-Allow-Credentials', 'true')\n            // Headers 可以根據實際情況進行改寫。\n            ->withHeader('Access-Control-Allow-Headers', 'DNT,Keep-Alive,User-Agent,Cache-Control,Content-Type,Authorization');\n\n        Context::set(ResponseInterface::class, $response);\n\n        if ($request->getMethod() == 'OPTIONS') {\n            return $response;\n        }\n\n        return $handler->handle($request);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Routes via Configuration File in Hyperf\nDESCRIPTION: This snippet demonstrates how to define routes in the `config/routes.php` file using the `nikic/fast-route` component. It shows examples for GET, POST, and combined HTTP method routes, binding them to controller methods.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/overview.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\HttpServer\\Router\\Router;\n\n// 此處程式碼示例為每個示例都提供了三種不同的繫結定義方式，實際配置時僅可採用一種且僅定義一次相同的路由\n\n// 設定一個 GET 請求的路由，繫結訪問地址 '/get' 到 App\\Controller\\IndexController 的 get 方法\nRouter::get('/get', 'App\\Controller\\IndexController::get');\nRouter::get('/get', 'App\\Controller\\IndexController@get');\nRouter::get('/get', [\\App\\Controller\\IndexController::class, 'get']);\n\n// 設定一個 POST 請求的路由，繫結訪問地址 '/post' 到 App\\Controller\\IndexController 的 post 方法\nRouter::post('/post', 'App\\Controller\\IndexController::post');\nRouter::post('/post', 'App\\Controller\\IndexController@post');\nRouter::post('/post', [\\App\\Controller\\IndexController::class, 'post']);\n\n// 設定一個允許 GET、POST 和 HEAD 請求的路由，繫結訪問地址 '/multi' 到 App\\Controller\\IndexController 的 multi 方法\nRouter::addRoute(['GET', 'POST', 'HEAD'], '/multi', 'App\\Controller\\IndexController::multi');\nRouter::addRoute(['GET', 'POST', 'HEAD'], '/multi', 'App\\Controller\\IndexController@multi');\nRouter::addRoute(['GET', 'POST', 'HEAD'], '/multi', [\\App\\Controller\\IndexController::class, 'multi']);\n```\n\n----------------------------------------\n\nTITLE: Unique Validation with Custom Column\nDESCRIPTION: Demonstrates how to use the `unique` validation rule in Hyperf, specifying a custom column name for the uniqueness check. It validates the 'email' field against the 'email_address' column in the 'users' table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\n'email' => 'unique:users,email_address'\n```\n\n----------------------------------------\n\nTITLE: Model Definition with MorphTo Relation PHP\nDESCRIPTION: Defines the `Image` model with a `morphTo` relationship, which allows it to belong to different types of models. The `imageable` method returns the polymorphic relationship, enabling access to the related model.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/relationship.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Model;\n\nclass Image extends Model\n{\n    public function imageable()\n    {\n        return $this->morphTo();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple GraphQL Query in Hyperf\nDESCRIPTION: This code snippet demonstrates how to create a GraphQL controller in Hyperf that handles incoming GraphQL requests and executes queries. It includes dependency injection for the GraphQL schema and defines a simple 'hello' query that returns a personalized greeting. It also contains the route definition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/graphql.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse GraphQL\\GraphQL;\nuse GraphQL\\Type\\Schema;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\GraphQL\\Annotation\\Query;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\PostMapping;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\n\n#[Controller]\nclass GraphQLController\n{\n    #[Inject]\n    protected Schema $schema;\n\n    #[PostMapping(path: \"/graphql\")]\n    public function test(RequestInterface $request)\n    {\n        $rawInput = $request->getBody()->getContents();\n        $input = json_decode($rawInput, true);\n        $query = $input['query'];\n        $variableValues = isset($input['variables']) ? $input['variables'] : null;\n        return GraphQL::executeQuery($this->schema, $query, null, null, $variableValues)->toArray();\n    }\n\n    #[Query]\n    public function hello(string $name): string\n    {\n        return $name;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using the Scene Annotation in Hyperf\nDESCRIPTION: This code snippet demonstrates the use of the `Scene` annotation in Hyperf controllers to automatically switch validation scenes.  The `#[Scene(scene:'bar1')]` annotation specifies that the `bar1` scene should be used when the `bar1` method is called. The `argument` parameter can be used to specify which method parameter should be used as the request object for validation. The default scene is the method name if no scene is provided.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Request\\DebugRequest;\nuse App\\Request\\SceneRequest;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Validation\\Annotation\\Scene;\n\n#[AutoController(prefix: 'foo')]\nclass FooController extends Controller\n{\n    #[Scene(scene:'bar1')]\n    public function bar1(SceneRequest $request)\n    {\n        return $this->response->success($request->all());\n    }\n\n    #[Scene(scene:'bar2', argument: 'request')] // bind $request\n    public function bar2(SceneRequest $request)\n    {\n        return $this->response->success($request->all());\n    }\n\n    #[Scene(scene:'bar3', argument: 'request')] // bind $request\n    #[Scene(scene:'bar3', argument: 'req')] // bind $req\n    public function bar3(SceneRequest $request, DebugRequest $req)\n    {\n        return $this->response->success($request->all());\n    }\n\n    #[Scene()] // the default scene is method name, The effect is equivalent to #[Scene(scene: 'bar1')]\n    public function bar1(SceneRequest $request)\n    {\n        return $this->response->success($request->all());\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Listener - PHP\nDESCRIPTION: Defines an event listener, `UserRegisteredListener`, which implements the `ListenerInterface`. The `listen()` method specifies the events this listener subscribes to (in this case, `UserRegistered::class`). The `process()` method contains the logic to be executed when the event is triggered, such as sending a user registration success SMS.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/event.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Listener;\n\nuse App\\Event\\UserRegistered;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\n\nclass UserRegisteredListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        // 返回一个该监听器要监听的事件数组，可以同时监听多个事件\n        return [\n            UserRegistered::class,\n        ];\n    }\n\n    /**\n     * @param UserRegistered $event\n     */\n    public function process(object $event): void\n    {\n        // 事件触发后该监听器要执行的代码写在这里，比如该示例下的发送用户注册成功短信等\n        // 直接访问 $event 的 user 属性获得事件触发时传递的参数值\n        // $event->user;\n        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Exception Handler via Configuration in Hyperf\nDESCRIPTION: This PHP code snippet shows how to register a custom exception handler within the Hyperf framework by modifying the `config/autoload/exceptions.php` configuration file. It defines which exception handler should be used for a specific server (e.g., 'http').\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/exception-handler.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/exceptions.php\nreturn [\n    'handler' => [\n        // The http here corresponds to the name value corresponding to the server in config/autoload/server.php\n        'http' => [\n            // The registration of the exception handler has done by configuring the complete class namespace address here\n            \\App\\Exception\\Handler\\FooExceptionHandler::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies with Type Hinting in PHP 8 - Hyperf\nDESCRIPTION: This snippet demonstrates how to use the `@Inject` annotation in PHP 8 with member property type declarations, replacing the need for `@var` declarations.  This simplifies dependency injection by utilizing PHP 7.4+ typed properties. No specific dependencies are required other than Hyperf's DI container and PHP 8.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/changelog/2.0.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Example {\n    /**\n     * @Inject\n     */\n    private ExampleService $exampleService;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Data from Hyperf Session\nDESCRIPTION: Deletes one or more pieces of data from the session using the `forget` method.  The `forget` method takes a string or an array of strings representing the keys to be deleted. When an array is passed, multiple pieces of data are deleted.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/session.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$this->session->forget('foo');\n$this->session->forget(['foo','bar']);\n```\n\n----------------------------------------\n\nTITLE: Deleting Data Directly by Primary Key in Hyperf\nDESCRIPTION: This code demonstrates how to delete model data directly by primary key using the `destroy` method. It accepts a single primary key, multiple primary keys as an array, or a collection of primary keys. Requires the `App\\Model\\User` model to be defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Model\\User;\n\nUser::destroy(1);\n\nUser::destroy([1,2,3]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Generation Hyperf PHP\nDESCRIPTION: This PHP configuration array allows customization of the model generation process.  It sets the path, enables force casts, defines inheritance, refreshes fillable attributes, configures table mappings, adds comments, and specifies the property case using constants from `Hyperf\\Database\\Commands\\ModelOption`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/gen.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Database\\Commands\\ModelOption;\n\nreturn [\n    'default' => [\n        // 忽略其他配置\n        'commands' => [\n            'gen:model' => [\n                'path' => 'app/Model',\n                'force_casts' => true,\n                'inheritance' => 'Model',\n                'uses' => '',\n                'refresh_fillable' => true,\n                'table_mapping' => [],\n                'with_comments' => true,\n                'property_case' => ModelOption::PROPERTY_SNAKE_CASE,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Access One-to-Many Relation as Dynamic Property (PHP)\nDESCRIPTION: This code shows how to access the collection of related Book models through the User model using the dynamically defined books property. It queries for a specific user and then iterates through the associated books.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$books = User::query()->find(1)->books;\n\nforeach ($books as $book) {\n    //\n}\n\n```\n\n----------------------------------------\n\nTITLE: Image Dimensions Validation Using Rule Class in Hyperf\nDESCRIPTION: This snippet demonstrates the use of the `Rule::dimensions` method in Hyperf to build complex image dimension validation rules. It includes constraints for maximum width, maximum height, and aspect ratio.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\npublic function rules(): array\n{\nreturn [\n           'avatar' => [\n              'required',\n              Rule::dimensions()->maxWidth(1000)->maxHeight(500)->ratio(3 / 2),\n           ],\n       ];\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Listeners with Annotation\nDESCRIPTION: This PHP code demonstrates registering a listener using the #[Listener] annotation in Hyperf. By adding this annotation to the listener class, it's automatically registered within the Hyperf annotation scan domain, simplifying the registration process. The priority can also be defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/event.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Listener;\n\nuse App\\Event\\UserRegistered;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\n\n#[Listener]\nclass UserRegisteredListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        // Returns an array of events to be listened to by this listener, can listen to multiple events at the same time\n        return [\n            UserRegistered::class,\n        ];\n    }\n\n    /**\n     * @param UserRegistered $event\n     */\n    public function process(object $event): void\n    {\n        // The code to be executed by the listener after the event is triggered is written here, such as sending a user registration success message, etc. in this example.\n        // Directly access the user property of $event to get the parameter value passed when the event fires.\n        // $event->user;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Base Resource Class for a Collection\nDESCRIPTION: Demonstrates how to customize the resource class used for items within a resource collection by overriding the `$collects` property of the resource collection class. This allows mapping the collection to a different resource class than the default.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * collects 属性定义了资源类。\n     *\n     * @var string\n     */\n    public $collects = 'App\\Resource\\Member';\n\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Redis Client via Dependency Injection\nDESCRIPTION: This PHP code demonstrates how to use the Redis client in Hyperf by injecting the `\\Hyperf\\Redis\\Redis` class. The example retrieves the container, gets the Redis instance, and executes the `keys('*')` command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/redis.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n\n$redis = $container->get(\\Hyperf\\Redis\\Redis::class);\n$result = $redis->keys('*');\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Database Query Listener in PHP\nDESCRIPTION: This snippet demonstrates how to create a custom listener for database query events in Hyperf. It captures `QueryExecuted` events, extracts the SQL query and bindings, replaces placeholders with actual values, and logs the formatted SQL statement along with the execution time. This requires the `hyperf/event`, `hyperf/database`, `hyperf/logger`, `hyperf/collection`, and `hyperf/stringable` components.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/event.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listeners;\n\nuse Hyperf\\Database\\Events\\QueryExecuted;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Logger\\LoggerFactory;\nuse Hyperf\\Collection\\Arr;\nuse Hyperf\\Stringable\\Str;\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\Log\\LoggerInterface;\n\n#[Listener]\nclass DbQueryExecutedListener implements ListenerInterface\n{\n    /**\n     * @var LoggerInterface\n     */\n    private $logger;\n\n    public function __construct(LoggerFactory $loggerFactory)\n    {\n        $this->logger = $loggerFactory->get('sql');\n    }\n\n    public function listen(): array\n    {\n        return [\n            QueryExecuted::class,\n        ];\n    }\n\n    /**\n     * @param QueryExecuted $event\n     */\n    public function process(object $event)\n    {\n        if ($event instanceof QueryExecuted) {\n            $sql = $event->sql;\n            if (! Arr::isAssoc($event->bindings)) {\n                foreach ($event->bindings as $key => $value) {\n                    $sql = Str::replaceFirst('?', \"'{$value}'\", $sql);\n                }\n            }\n\n            $this->logger->info(sprintf('[%s] %s', $event->time, $sql));\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration via #[Value] Annotation\nDESCRIPTION: Demonstrates accessing configuration values using the `#[Value]` annotation.  The annotation specifies the configuration key to be injected into the class property.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Config\\Annotation\\Value;\n\nclass IndexController\n{\n    #[Value(\"config.key\")]\n    private $configValue;\n\n    public function index()\n    {\n        return $this->configValue;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Polymorphic One-to-Many Relationship in Hyperf\nDESCRIPTION: This code snippet demonstrates how to define a polymorphic one-to-many relationship in Hyperf. The `Image` model defines the inverse using `morphTo`, while `Book` and `User` models use `morphMany` to define their relationship to `Image`. This enables both `Book` and `User` to have multiple associated `Image` records.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/relationship.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Model;\n\nclass Image extends Model\n{\n    public function imageable()\n    {\n        return $this->morphTo();\n    }\n}\n\nclass Book extends Model\n{\n    public function images()\n    {\n        return $this->morphMany(Image::class, 'imageable');\n    }\n}\n\nclass User extends Model\n{\n    public function images()\n    {\n        return $this->morphMany(Image::class, 'imageable');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Model Instance in Hyperf\nDESCRIPTION: This code shows how to delete a model instance using the `delete` method. It retrieves an existing `User` model and then calls `delete` to remove the corresponding record from the database. Requires the `App\\Model\\User` model to be defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Model\\User;\n\n$user = User::query()->find(1);\n\n$user->delete();\n```\n\n----------------------------------------\n\nTITLE: Hyperf Testing Bootstrap File\nDESCRIPTION: This snippet shows the default `bootstrap.php` file for Hyperf testing, which initializes the application and loads necessary components. It sets up error reporting, timezone, defines constants, enables coroutines, autoloads dependencies, initializes the class loader and retrieves the application instance from the container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/testing.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nerror_reporting(E_ALL);\ndate_default_timezone_set('Asia/Shanghai');\n\n! defined('BASE_PATH') && define('BASE_PATH', dirname(__DIR__, 1));\n! defined('SWOOLE_HOOK_FLAGS') && define('SWOOLE_HOOK_FLAGS', SWOOLE_HOOK_ALL);\n\n// 默认开启 当使用 pest --parallel 特性或其他涉及到原生并行操作时需要注释掉\nSwoole\\Runtime::enableCoroutine(true);\n\nrequire BASE_PATH . '/vendor/autoload.php';\n\nHyperf\\Di\\ClassLoader::init();\n\n$container = require BASE_PATH . '/config/container.php';\n\n$container->get(Hyperf\\Contract\\ApplicationInterface::class);\n```\n\n----------------------------------------\n\nTITLE: Defining Commands with AsCommand Annotation in Hyperf\nDESCRIPTION: This snippet demonstrates using the `AsCommand` annotation to register a class as a console command in Hyperf. It shows how to define command signatures, descriptions, and associate methods to be executed when the command is run. It utilizes `InteractsWithIO` trait for console output.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Service;\n\nuse Hyperf\\Command\\Annotation\\AsCommand;\nuse Hyperf\\Command\\Concerns\\InteractsWithIO;\n\n#[AsCommand(signature: 'foo:bar1', handle: 'bar1', description: 'The description of foo:bar1 command.')]\n#[AsCommand(signature: 'foo', description: 'The description of foo command.')]\nclass FooService\n{\n    use InteractsWithIO;\n\n    #[AsCommand(signature: 'foo:bar {--bar=1 : Bar Value}', description: 'The description of foo:bar command.')]\n    public function bar($bar)\n    {\n        $this->output?->info('Bar Value: ' . $bar);\n\n        return $bar;\n    }\n\n    public function bar1()\n    {\n        $this->output?->info(__METHOD__);\n    }\n\n    public function handle()\n    {\n        $this->output?->info(__METHOD__);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Array Type Conversion with JSON Data in PHP\nDESCRIPTION: This code shows how to use the `array` type conversion defined in the model. It retrieves a user, accesses the `options` property (which is automatically converted from JSON to an array), modifies the array, sets the modified array back to the `options` property, and saves the model. The array is automatically serialized back to JSON for storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$user = App\\User::find(1);\n\n$options = $user->options;\n\n$options['key'] = 'value';\n\n$user->options = $options;\n\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Conditional Validation for Multiple Fields - PHP\nDESCRIPTION: Extends the 'sometimes' example to show how to apply rules to multiple fields based on a single condition. Both 'reason' and 'cost' are required if 'games' is greater than or equal to 100.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$v->sometimes(['reason','cost'],'required', function($input) {\n    return $input->games >= 100;\n});\n```\n\n----------------------------------------\n\nTITLE: Required If Validation Rule Using Rule Class in Hyperf\nDESCRIPTION: This snippet demonstrates how to use the `Rule::requiredIf` method to conditionally apply the `required` validation rule in Hyperf based on a boolean value or the result of a closure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($request->all(), [\n    'role_id' => Rule::requiredIf($request->user()->is_admin),\n]);\n\n$validator = $this->validationFactory->make($request->all(), [\n    'role_id' => Rule::requiredIf(function () use ($request) {\n        return $request->user()->is_admin;\n    }),\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Exception Class in Hyperf\nDESCRIPTION: This snippet defines a custom exception class `BusinessException` that extends `ServerException` in Hyperf.  It takes an `ErrorCode` or integer code and an optional message as input.  If no message is provided, it retrieves the message from the `ErrorCode` enum or using `ErrorCode::getMessage($code)`.  The constructor ensures the correct error code is set using the enum's value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/constants.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Exception;\n\nuse App\\Constants\\ErrorCode;\nuse Hyperf\\Server\\Exception\\ServerException;\nuse Throwable;\n\nclass BusinessException extends ServerException\n{\n    public function __construct(ErrorCode|int $code = 0, ?string $message = null, ?Throwable $previous = null)\n    {\n        if (is_null($message)) {\n            if ($code instanceof ErrorCode) {\n                $message = $code->getMessage();\n            } else {\n                $message = ErrorCode::getMessage($code);\n            }\n        }\n\n        $code = $code instanceof ErrorCode ? $code->value : $code;\n\n        parent::__construct($message, $code, $previous);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Configuration\nDESCRIPTION: This code snippet demonstrates how to configure global middleware in Hyperf via the `config/autoload/middlewares.php` file. The `http` key corresponds to the server name defined in `config/autoload/server.php`. The array under each server name lists the global middleware classes, which are applied to all requests handled by that server, in the order specified in the array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/middleware/middleware.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    // http 對應 config/autoload/server.php 內每個 server 的 name 屬性對應的值，該配置僅應用在該 Server 中\n    'http' => [\n        // 數組內配置您的全局中間件，順序根據該數組的順序\n        YourMiddleware::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Customizing Methods with Anonymous Functions in Hyperf DB\nDESCRIPTION: Demonstrates how to use an anonymous function to interact directly with PDO for custom database operations.  This allows fine-grained control over query execution, including setting the fetch mode. Requires manually handling compatibility issues.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/db.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DB\\DB;\n\n$sql = 'SELECT * FROM `user` WHERE id = ?;';\n$bindings = [2];\n$mode = \\PDO::FETCH_OBJ;\n$res = DB::run(function (\\PDO $pdo) use ($sql, $bindings, $mode) {\n    $statement = $pdo->prepare($sql);\n\n    $this->bindValues($statement, $bindings);\n\n    $statement->execute();\n\n    return $statement->fetchAll($mode);\n});\n```\n\n----------------------------------------\n\nTITLE: Where Exists Statement - Hyperf PHP\nDESCRIPTION: Demonstrates the use of the `whereExists` method in Hyperf, which allows you to use the `where exists SQL` statement. The method accepts a Closure which receives a query builder instance allowing definition of queries placed in the exists clause.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->whereExists(function ($query) {\n    $query->select(Db::raw(1))\n            ->from('orders')\n            ->whereRaw('orders.user_id = users.id');\n})\n->get();\n```\n\n----------------------------------------\n\nTITLE: Queue Service for Pushing Messages\nDESCRIPTION: Defines a service class for pushing messages to the asynchronous queue. It uses the `DriverFactory` to get the queue driver and pushes a new `ExampleJob` with the provided parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Job\\ExampleJob;\nuse Hyperf\\AsyncQueue\\Driver\\DriverFactory;\nuse Hyperf\\AsyncQueue\\Driver\\DriverInterface;\n\nclass QueueService\n{\n    protected DriverInterface $driver;\n\n    public function __construct(DriverFactory $driverFactory)\n    {\n        $this->driver = $driverFactory->get('default');\n    }\n\n    /**\n     * 生產訊息.\n     * @param $params 資料\n     * @param int $delay 延時時間 單位秒\n     */\n    public function push($params, int $delay = 0): bool\n    {\n        // 這裡的 `ExampleJob` 會被序列化存到 Redis 中，所以內部變數最好只傳入普通資料\n        // 同理，如果內部使用了註解 @Value 會把對應物件一起序列化，導致訊息體變大。\n        // 所以這裡也不推薦使用 `make` 方法來建立 `Job` 物件。\n        return $this->driver->push(new ExampleJob($params), $delay);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing UserInfoCaster in PHP\nDESCRIPTION: This snippet shows the implementation of the `UserInfoCaster` class, which implements the `Hyperf\\Contract\\CastsAttributes` interface.  The `get` method creates a `UserInfo` object from the model's attributes, and the `set` method converts the `UserInfo` object back to an array of attributes for storage.  `Arr::only` ensures only 'name' and 'gender' are used from the attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Caster;\n\nuse Hyperf\\Contract\\CastsAttributes;\nuse Hyperf\\Collection\\Arr;\n\nclass UserInfoCaster implements CastsAttributes\n{\n    public function get($model, string $key, $value, array $attributes): UserInfo\n    {\n        return new UserInfo($model, Arr::only($attributes, ['name', 'gender']));\n    }\n\n    public function set($model, string $key, $value, array $attributes)\n    {\n        return [\n            'name' => $value->name,\n            'gender' => $value->gender,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Type Casting to Hyperf Model Attribute\nDESCRIPTION: Applies the custom `Json` type casting to the `options` attribute in a Hyperf model. This configures the model to use the `Json` caster defined previously when getting or setting the `options` attribute.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/mutators.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse App\\Casts\\Json;\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 應進行類型轉換的屬性\n     *\n     * @var array\n     */\n    protected $casts = [\n        'options' => Json::class,\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Server in Hyperf\nDESCRIPTION: This code snippet configures a WebSocket server named 'ws' in the `config/autoload/server.php` file. It defines the server type as `SERVER_WEBSOCKET`, sets the host and port, and specifies callbacks for handshake, message, and close events.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/websocket-server.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'servers' => [\n        [\n            'name' => 'ws',\n            'type' => Server::SERVER_WEBSOCKET,\n            'host' => '0.0.0.0',\n            'port' => 9502,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_HAND_SHAKE => [Hyperf\\WebSocketServer\\Server::class, 'onHandShake'],\n                Event::ON_MESSAGE => [Hyperf\\WebSocketServer\\Server::class, 'onMessage'],\n                Event::ON_CLOSE => [Hyperf\\WebSocketServer\\Server::class, 'onClose'],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Getting Route Parameters Using Request Object PHP\nDESCRIPTION: Demonstrates how to retrieve route parameters using the `route` method of the Request object. It allows specifying a default value if the parameter is missing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/request.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass IndexController\n{\n    public function info(RequestInterface $request)\n    {\n        // Returns the route parameter id if defined or null if the value is missing\n        $id = $request->route('id');\n\n        // Returns the route parameter id if defined or 0 if the value is missing\n        $id = $request->route('id', 0);\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Aspect in Hyperf\nDESCRIPTION: This code snippet demonstrates how to define an Aspect in Hyperf using the `Hyperf\\Di\\Aop\\AbstractAspect` class and the `Hyperf\\Di\\Annotation\\Aspect` annotation. It shows how to specify the target classes and annotations to be intercepted and how to implement the `process` method to modify the execution of the original method.  Dependencies: `Hyperf\\Di\\Aop\\AbstractAspect`, `Hyperf\\Di\\Annotation\\Aspect`, `Hyperf\\Di\\Aop\\ProceedingJoinPoint`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/aop.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Aspect;\n\nuse App\\Service\\SomeClass;\nuse App\\Annotation\\SomeAnnotation;\nuse Hyperf\\Di\\Annotation\\Aspect;\nuse Hyperf\\Di\\Aop\\AbstractAspect;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\n#[Aspect]\nclass FooAspect extends AbstractAspect\n{\n    // The class to be cut in can be multiple, or can be identified by `::` to the specific method, or use * for fuzzy matching\n    public array $classes = [\n        SomeClass::class,\n        'App\\\\Service\\\\SomeClass::someMethod',\n        'App\\\\Service\\\\SomeClass::*Method',\n    ];\n    \n    // The annotations to be cut into, means the classes that use these annotations to be cut into, can only cut into class annotations and class method annotations.\n    public array $annotations = [\n        SomeAnnotation::class,\n    ];\n\n    public function process(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        // After the Aspect is cut into, the corresponding method will be responsible by this method.\n        // $proceedingJoinPoint is the joining point, the original method is called by the process() method of the class and obtain the result.\n        // Do something before original method\n        $result = $proceedingJoinPoint->process();\n        // Do something after original method\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define a Mutator in Hyperf Model (setFooAttribute)\nDESCRIPTION: Defines a mutator for the `first_name` attribute in a Hyperf model. This method is automatically called when the `first_name` attribute is set. It receives the new attribute value, allowing for modification before setting it on the model's `$attributes` array. In this example, the first name is converted to lowercase.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/mutators.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 設定使用者的姓名.\n     * This is a mutator for `first_name` attribute.\n     *\n     * @param  string  $value\n     * @return void\n     */\n    public function setFirstNameAttribute($value)\n    {\n        $this->attributes['first_name'] = strtolower($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Active Method Task Delivery - PHP\nDESCRIPTION: Demonstrates how to execute a task by actively delivering it using `TaskExecutor`.  It retrieves the `TaskExecutor` from the container, creates a `Task` instance with the method and arguments, and then executes it. It utilizes `Hyperf\\Task\\TaskExecutor` and `Hyperf\\Task\\Task` classes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/task.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Coroutine\\Coroutine;\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\Task\\TaskExecutor;\nuse Hyperf\\Task\\Task;\n\nclass MethodTask\n{\n    public function handle($cid)\n    {\n        return [\n            'worker.cid' => $cid,\n            // Returns -1 when task_enable_coroutine is false, otherwise returns the corresponding coroutine ID\n            'task.cid' => Coroutine::id(),\n        ];\n    }\n}\n\n$container = ApplicationContext::getContainer();\n$exec = $container->get(TaskExecutor::class);\n$result = $exec->execute(new Task([MethodTask::class, 'handle'], [Coroutine::id()]));\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Required If Validation (Boolean)\nDESCRIPTION: This snippet uses `Rule::requiredIf` with a boolean to conditionally require a field based on a condition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($request->all(), [\n    'role_id' => Rule::requiredIf($request->user()->is_admin),\n]);\n```\n\n----------------------------------------\n\nTITLE: Simple Where Clauses with where() in Hyperf\nDESCRIPTION: Explains how to construct `where` clauses using the `where()` method with column name, operator, and value. It shows different ways to express equality, inequality, and comparison operators, also demonstrates passing an array of conditions and using closures for complex conditions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->where('gender', '=', 1)->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->where('gender', 1)->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->where('gender', '>=', 0)->get();\n\n$users = Db::table('users')->where('gender', '<>', 1)->get();\n\n$users = Db::table('users')->where('name', 'like', 'T%')->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->where([\n    ['status', '=', '1'],\n    ['gender', '=', '1'],\n])->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->where([\n    ['status', '=', '1'],\n    ['gender', '=', '1'],\n    [function ($query) {\n        $query->where('type', 3)->orWhere('type', 6);\n    }]\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutator in Hyperf Model (setFooAttribute)\nDESCRIPTION: Defines a mutator for the `first_name` attribute in a Hyperf model. Mutators allow you to modify model attribute values before they are saved to the database. In this example, the mutator converts the `first_name` attribute to lowercase using the `strtolower` function.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/mutators.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 設置用户的姓名.\n     *\n     * @param  string  $value\n     * @return void\n     */\n    public function setFirstNameAttribute($value)\n    {\n        $this->attributes['first_name'] = strtolower($value);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Hyperf Migration\nDESCRIPTION: This code snippet demonstrates how to create a new table within a Hyperf migration using the `Schema::create` method. It defines the table name and a closure to define columns. Requires the `Hyperf\\Database\\Schema\\Schema` and `Hyperf\\Database\\Schema\\Blueprint` classes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Database\\Schema\\Schema;\nuse Hyperf\\Database\\Schema\\Blueprint;\nuse Hyperf\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    public function up(): void\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->timestamps();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AMQP Consumer Implementation (PHP)\nDESCRIPTION: Defines an AMQP consumer class named `DemoConsumer` that extends `ConsumerMessage`. It specifies the exchange, routing key, and queue using the `#[Consumer]` attribute and implements the `consumeMessage` method to process the received data. Requires PhpAmqpLib library.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Amqp\\Consumers;\n\nuse Hyperf\\Amqp\\Annotation\\Consumer;\nuse Hyperf\\Amqp\\Message\\ConsumerMessage;\nuse Hyperf\\Amqp\\Result;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n#[Consumer(exchange: \"hyperf\", routingKey: \"hyperf\", queue: \"hyperf\", nums: 1)]\nclass DemoConsumer extends ConsumerMessage\n{\n    public function consumeMessage($data, AMQPMessage $message): Result\n    {\n        print_r($data);\n        return Result::ACK;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Async Queue Configuration (async_queue.php)\nDESCRIPTION: Configures the asynchronous queue component, including the driver, Redis connection, queue channel, timeouts, retry settings, and concurrency limits.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => Hyperf\\AsyncQueue\\Driver\\RedisDriver::class,\n        'redis' => [\n            'pool' => 'default'\n        ],\n        'channel' => 'queue',\n        'timeout' => 2,\n        'retry_seconds' => 5,\n        'handle_timeout' => 10,\n        'processes' => 1,\n        'concurrent' => [\n            'limit' => 10,\n        ],\n        'max_messages' => 0,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Define POST Endpoint with Swagger Annotations (PHP)\nDESCRIPTION: Defines a POST endpoint `/test` using Swagger annotations for documentation. Includes request body definition, schema with required properties, and response description. Requires the `Hyperf\\Swagger\\Annotation as SA` namespace.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/swagger.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n#[SA\\Post(path: '/test', summary: 'POST form example', tags: ['Api/Test'])]\n#[SA\\RequestBody(\n    description: 'Request parameters'.\n    content: [\n        new SA\\MediaType(\n            mediaType: 'application/x-www-form-urlencoded'.\n            schema: new SA\\Schema(\n                required: ['username', 'age'].\n                properties: [\n                    new SA\\Property(property: 'username', description: 'User name field description', type: 'string').\n                    new SA\\Property(property: 'age', description: 'Age field description', type: 'string').\n                    new SA\\Property(property: 'city', description: 'City field description', type: 'string').\n                ]\n            ).\n        ).\n    ].\n)]\n#[SA\\Response(response: 200, description: 'Description of the returned value')]\npublic function test()\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Database Connection in Hyperf Model\nDESCRIPTION: Shows how to specify a different database connection for a Hyperf model using the `$connection` property. The connection name must exist as a key in the `databases.php` configuration file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected ?string $connection = 'connection-name';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Accessor in Hyperf Model (getFooAttribute)\nDESCRIPTION: Defines an accessor for the `first_name` attribute in a Hyperf model. Accessors allow you to format model attribute values when retrieved.  In this example, the accessor capitalizes the first letter of the `first_name` attribute using the `ucfirst` function.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/mutators.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 獲取用户的姓名.\n     *\n     * @param  string  $value\n     * @return string\n     */\n    public function getFirstNameAttribute($value)\n    {\n        return ucfirst($value);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Unique Rule with Custom Column Name - PHP\nDESCRIPTION: This snippet allows to override the default column name associated with the property being validated by passing it as the second parameter to `Rule::unique('users', 'email_address')`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_43\n\nLANGUAGE: PHP\nCODE:\n```\nRule::unique('users', 'email_address')->ignore($user->id),\n```\n\n----------------------------------------\n\nTITLE: Constructor Injection\nDESCRIPTION: Demonstrates constructor injection in a Controller.  The UserService is automatically injected into the IndexController's constructor.  Requires the IndexController to be created by the DI container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserService;\n\nclass IndexController\n{\n    private UserService $userService;\n    \n    // 通过在构造函数的参数上声明参数类型完成自动注入\n    public function __construct(UserService $userService)\n    {\n        $this->userService = $userService;\n    }\n    \n    public function index()\n    {\n        $id = 1;\n        // 直接使用\n        return $this->userService->getInfoById($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Requested URL PHP\nDESCRIPTION: Shows how to retrieve the full URL of the request, including or excluding query parameters, using the `url()` and `fullUrl()` methods respectively.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/request.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// No query parameters\n$url = $request->url();\n\n// With query parameters\n$url = $request->fullUrl();\n```\n\n----------------------------------------\n\nTITLE: Define Custom Exception Handler - Hyperf PHP\nDESCRIPTION: Defines a custom exception handler in Hyperf by extending the `Hyperf\\ExceptionHandler\\ExceptionHandler` class.  The `handle` method processes specific exceptions (e.g., `FooException`), formats the output, and prevents further propagation using `$this->stopPropagation()`. The `isValid` method determines if the handler should process the given exception.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/exception-handler.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Exception\\Handler;\n\nuse Hyperf\\ExceptionHandler\\ExceptionHandler;\nuse Hyperf\\HttpMessage\\Stream\\SwooleStream;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse App\\Exception\\FooException;\nuse Throwable;\n\nclass FooExceptionHandler extends  ExceptionHandler\n{\n    public function handle(Throwable $throwable, ResponseInterface $response)\n    {\n        // 判斷被捕獲到的異常是希望被捕獲的異常\n        if ($throwable instanceof FooException) {\n            // 格式化輸出\n            $data = json_encode([\n                'code' => $throwable->getCode(),\n                'message' => $throwable->getMessage(),\n            ], JSON_UNESCAPED_UNICODE);\n\n            // 阻止異常冒泡\n            $this->stopPropagation();\n            return $response->withStatus(500)->withBody(new SwooleStream($data));\n        }\n\n        // 交給下一個異常處理器\n        return $response;\n\n        // 或者不做處理直接屏蔽異常\n    }\n\n    /**\n     * 判斷該異常處理器是否要對該異常進行處理\n     */\n    public function isValid(Throwable $throwable): bool\n    {\n        return true;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Method-Level Middleware Configuration via Annotation\nDESCRIPTION: This example demonstrates defining middleware at the method level using annotations. By placing the `#[Middleware]` annotation directly above a method, the specified middleware will only be applied to requests handled by that method. Class-level middleware is executed before method-level middleware.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/middleware/middleware.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Middleware\\BarMiddleware;\nuse App\\Middleware\\FooMiddleware;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\HttpServer\\Annotation\\Middleware;\nuse Hyperf\\HttpServer\\Annotation\\Middlewares;\n\n#[AutoController]\n#[Middlewares([FooMiddleware::class])]\nclass IndexController\n{\n    #[Middleware(BarMiddleware::class)]\n    public function index()\n    {\n        return 'Hello Hyperf.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Validation Attributes\nDESCRIPTION: This code snippet shows how to customize the attribute names used in validation messages by overriding the `attributes` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * 獲取驗證錯誤的自定義屬性\n */\npublic function attributes(): array\n{\n    return [\n        'foo' => 'foo of request',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Timestamps\nDESCRIPTION: This snippet demonstrates how to disable automatic timestamp management by setting the `$timestamps` property to `false`. By default, Hyperf expects `created_at` and `updated_at` columns to exist in the table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    public bool $timestamps = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Requests in Hyperf (MVC Mode)\nDESCRIPTION: This snippet demonstrates how to handle HTTP requests in Hyperf using the MVC mode. It shows an example `IndexController` with an `index` method that retrieves the `id` parameter from the request, converts it to a string, and returns it to the client. The controller extends `Hyperf\\HttpServer\\Contract\\RequestInterface` to access request data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/overview.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass IndexController\n{\n    // Hyperf will automatically generate a `/index/index` route for this method, allowing GET or POST requests\n    public function index(RequestInterface $request)\n    {\n        // Retrieve the id parameter from the request\n        $id = $request->input('id', 1);\n        // Transfer $id parameter to a string, and return $id to the client with Content-Type:plain/text\n        return (string)$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Models by ID\nDESCRIPTION: This snippet shows how to retrieve multiple model instances by their IDs using the `find()` method with an array of IDs.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$users = User::query()->find([1, 2, 3]);\n\n```\n\n----------------------------------------\n\nTITLE: Install Consul Adapter (Hyperf)\nDESCRIPTION: This command installs the hyperf/service-governance-consul component, which provides the adapter for using Consul as the service registry.  This is necessary if you want to use Consul for service registration and discovery.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/service-register.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/service-governance-consul\n```\n\n----------------------------------------\n\nTITLE: Deleting Models by Primary Key\nDESCRIPTION: Illustrates deleting model(s) directly by their primary key using the `destroy` method. The method accepts a single ID, an array of IDs, or a collection of IDs. It skips the retrieval step, directly deleting the records. This assumes the primary key is named 'id'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\nUser::destroy(1);\n\nUser::destroy([1,2,3]);\n\n```\n\n----------------------------------------\n\nTITLE: Add Validation Exception Handler\nDESCRIPTION: Configures the `Hyperf\\Validation\\ValidationExceptionHandler` to handle `Hyperf\\Validation\\ValidationException` exceptions, which are thrown when validation fails. You need to add this exception handler to your `config/autoload/exceptions.php` file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'handler' => [\n        // 这里对应您当前的 Server 名称\n        'http' => [\n            \\Hyperf\\Validation\\ValidationExceptionHandler::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using Guzzle Connection Pool\nDESCRIPTION: Example of using the PoolHandler for Guzzle to enable connection pooling. This helps manage TCP connections efficiently and reduce TIME-WAIT issues. This is used with RetryMiddleware for handling retries.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/guzzle.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse GuzzleHttp\\Client;\nuse Hyperf\\Coroutine\\Coroutine;\nuse GuzzleHttp\\HandlerStack;\nuse Hyperf\\Guzzle\\PoolHandler;\nuse Hyperf\\Guzzle\\RetryMiddleware;\n\n$handler = null;\nif (Coroutine::inCoroutine()) {\n    $handler = make(PoolHandler::class, [\n        'option' => [\n            'max_connections' => 50,\n        ],\n    ]);\n}\n\n// 默认的重试Middleware\n$retry = make(RetryMiddleware::class, [\n    'retries' => 1,\n    'delay' => 10,\n]);\n\n$stack = HandlerStack::create($handler);\n$stack->push($retry->getMiddleware(), 'retry');\n\n$client = make(Client::class, [\n    'config' => [\n        'handler' => $stack,\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Usage Example: Monitoring a Failure Queue - Hyperf PHP\nDESCRIPTION: This code snippet provides a practical example of using a custom process in Hyperf to monitor the number of items in a failure queue. It retrieves the queue length using Redis, logs a warning message if the count exceeds zero, and repeats this process at intervals.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/process.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\nuse Hyperf\\Process\\Annotation\\Process;\nuse Hyperf\\Contract\\StdoutLoggerInterface;\n\n#[Process(name: \"demo_process\")]\nclass DemoProcess extends AbstractProcess\n{\n    public function handle(): void\n    {\n        $logger = $this->container->get(StdoutLoggerInterface::class);\n\n        while (true) {\n            $redis = $this->container->get(\\Redis::class);\n            $count = $redis->llen('queue:failed');\n\n            if ($count > 0) {\n                $logger->warning('The num of failed queue is ' . $count);\n            }\n\n            sleep(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Middleware in Hyperf\nDESCRIPTION: Configures the SessionMiddleware as a global middleware for the HTTP server. This middleware intercepts requests to handle session data.  The 'http' key corresponds to the default server name.  Adjust the configuration if you're using session on other servers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/session.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    // Here http corresponds to the default server name. If you need to use session on other servers, you need to configure the corresponding global middleware\n    'http' => [\n        \\Hyperf\\Session\\Middleware\\SessionMiddleware::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Define TCP Server for jsonrpc Protocol (PHP)\nDESCRIPTION: Configures a TCP server in the server.php file to handle JSON RPC requests using the jsonrpc protocol.  It specifies the server name, type, host, port, callbacks, and settings for handling TCP connections.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/json-rpc.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 这里省略了该文件的其它配置\n    'servers' => [\n        [\n            'name' => 'jsonrpc',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9503,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_RECEIVE => [\\Hyperf\\JsonRpc\\TcpServer::class, 'onReceive'],\n            ],\n            'settings' => [\n                'open_eof_split' => true,\n                'package_eof' => \"\\r\\n\",\n                'package_max_length' => 1024 * 1024 * 2,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Process Example: Using Asynchronous IO with Timer - Hyperf (PHP)\nDESCRIPTION: Presents an example of using asynchronous IO within a custom process by utilizing `Swoole\\Timer` to perform actions periodically. The example dumps the number 1 every 1000ms.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/process.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\nuse Hyperf\\Process\\Annotation\\Process;\nuse Swoole\\Timer;\n\n#[Process(name: \"demo_process\")]\nclass DemoProcess extends AbstractProcess\n{\n    public function handle(): void\n    {\n        Timer::tick(1000, function(){\n            var_dump(1);\n            // Do something...\n        });\n\n        while (true) {\n            sleep(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Record (Hyperf)\nDESCRIPTION: Illustrates how to insert a new record into the database by creating a new model instance, setting its attributes, and calling the `save` method in Hyperf.  The `created_at` and `updated_at` timestamps are automatically managed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = new User();\n\n$user->name = 'Hyperf';\n\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Local Middleware Configuration via Router\nDESCRIPTION: This code snippet shows how to define local middleware for specific routes using the `Hyperf\\HttpServer\\Router\\Router` class. The `middleware` option in the `$options` array passed to each route definition method allows you to specify an array of middleware classes that should be applied to that route.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/middleware/middleware.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Middleware\\FooMiddleware;\nuse Hyperf\\HttpServer\\Router\\Router;\n\n// 每個路由定義方法都可接收一個 $options 參數\nRouter::get('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\nRouter::post('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\nRouter::put('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\nRouter::patch('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\nRouter::delete('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\nRouter::head('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\nRouter::addRoute(['GET', 'POST', 'HEAD'], '/index', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\n\n// 該 Group 下的所有路由都將應用配置的中間件\nRouter::addGroup(\n    '/v2', function () {\n        Router::get('/index', [\\App\\Controller\\IndexController::class, 'index']);\n    },\n    ['middleware' => [FooMiddleware::class]]\n);\n```\n\n----------------------------------------\n\nTITLE: Unique Rule Ignoring a Given ID - PHP\nDESCRIPTION: Shows how to ignore a specific ID when checking for uniqueness. This is particularly useful when updating records. It leverages the `Rule` class from `Hyperf\\Validation` to specify the ignore condition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($data, [\n    'email' => [\n        'required',\n        Rule::unique('users')->ignore($user->id),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Making RPC calls (Hyperf AMQP)\nDESCRIPTION: This snippet shows how to make an RPC call using Hyperf's AMQP component. It retrieves the `RpcClient` from the container, creates a `DynamicRpcMessage` with the exchange, routing key, and message data, and then calls the `call` method on the `RpcClient` to send the message and retrieve the response. It assumes that the corresponding RPC consumer is running and configured to handle the request.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/amqp.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Amqp\\Message\\DynamicRpcMessage;\nuse Hyperf\\Amqp\\RpcClient;\nuse Hyperf\\Context\\ApplicationContext;\n\n$rpcClient = ApplicationContext::getContainer()->get(RpcClient::class);\n//Set Exchange and RoutingKey consistent with Consumer on DynamicRpcMessage\n$result = $rpcClient->call(new DynamicRpcMessage('hyperf', 'hyperf', ['message' => 'Hello Hyperf'])); \n\n// $result:\n// array(1) {\n//     [\"message\"]=>\n//     string(18) \"Reply:Hello Hyperf\"\n// }\n\n```\n\n----------------------------------------\n\nTITLE: Increment with Update Field in Hyperf PHP\nDESCRIPTION: Increments the 'votes' column in the 'users' table by 1 and simultaneously updates the 'name' column to 'John'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes', 1, ['name' => 'John']);\n```\n\n----------------------------------------\n\nTITLE: Get Container Object via Constructor Injection in Hyperf\nDESCRIPTION: This code shows how to obtain the `ContainerInterface` object through constructor injection in a Hyperf controller. By type-hinting the `ContainerInterface` in the constructor, the container will automatically inject the container instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/di.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Psr\\Container\\ContainerInterface;\n\nclass IndexController\n{\n    /**\n     * @var ContainerInterface\n     */\n    private $container;\n    \n    // Automatic injection is completed by declaring the parameter type on the parameters of the constructor\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Where Between - PHP\nDESCRIPTION: Demonstrates how to use the `whereBetween()` method to filter results based on a range of values.  This method verifies that a field's value is within the specified range (inclusive).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->whereBetween('votes', [1, 100])->get();\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutator in Hyperf Model (PHP)\nDESCRIPTION: This code shows how to define a mutator for the `first_name` attribute in a Hyperf model.  The `setFirstNameAttribute` method is automatically called when the `first_name` attribute is set, allowing you to modify the value before it's stored in the `$attributes` array. In this case, the first name is converted to lowercase using `strtolower()`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/mutators.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 设置用户的姓名.\n     *\n     * @param  string  $value\n     * @return void\n     */\n    public function setFirstNameAttribute($value)\n    {\n        $this->attributes['first_name'] = strtolower($value);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Performing Redirect in Hyperf\nDESCRIPTION: This snippet demonstrates how to perform a redirect using the `redirect()` method of the `Hyperf\\HttpServer\\Contract\\ResponseInterface`. The method returns a `Psr\\Http\\Message\\ResponseInterface` object with the redirect status set.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/response.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function redirect(ResponseInterface $response): Psr7ResponseInterface\n    {\n        // redirect() 方法返回的是一個 Psr\\Http\\Message\\ResponseInterface 對象，需再 return 回去\n        return $response->redirect('/anotherUrl');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Returning JSON Response in Hyperf\nDESCRIPTION: Demonstrates how to return a JSON response using the `json()` method of the `ResponseInterface`. It sets the `Content-Type` to `application/json` and accepts an array or an object implementing the `Hyperf\\Contract\\Arrayable` interface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/response.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function json(ResponseInterface $response): Psr7ResponseInterface\n    {\n        $data = [\n            'key' => 'value'\n        ];\n        return $response->json($data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NSQ Consumer with Annotation\nDESCRIPTION: This code defines an NSQ consumer using the `Hyperf\\Nsq\\Annotation\\Consumer` annotation.  It specifies the topic, channel, consumer name, and number of processes for consuming messages, as well as overriding the `consume` method to process the message payload.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nsq.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Nsq\\Consumer;\n\nuse Hyperf\\Nsq\\AbstractConsumer;\nuse Hyperf\\Nsq\\Annotation\\Consumer;\nuse Hyperf\\Nsq\\Message;\nuse Hyperf\\Nsq\\Result;\n\n#[Consumer(topic: \"hyperf\", channel: \"hyperf\", name: \"DemoNsqConsumer\", nums: 1)]\nclass DemoNsqConsumer extends AbstractConsumer\n{\n    public function consume(Message $payload): string \n    {\n        var_dump($payload->getBody());\n\n        return Result::ACK;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Index with Field Array\nDESCRIPTION: This snippet demonstrates how to drop an index by passing an array of fields to the `dropIndex()` method. The schema builder then automatically generates the index name based on the table name, fields, and key type.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nSchema:table('users', function (Blueprint $table) {\n    $table->dropIndex(['account_id', 'created_at']);\n});\n```\n\n----------------------------------------\n\nTITLE: Log Output Example\nDESCRIPTION: This shows example outputs written to `hyperf.log` and `hyperf-debug.log` based on the previous configurations. It illustrates the different formatting applied by `LineFormatter` and `JsonFormatter` and demonstrates how log levels affect which handlers receive the log entries.  The first entry is from `hyperf.log`, formatted as a simple string. The subsequent entries are from `hyperf-debug.log`, formatted as JSON objects including message, context, level, channel, datetime, and extra information.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/logger.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n==> runtime/logs/hyperf.log <==\n[2019-11-08 11:11:35] hyperf.INFO: 5dc4dce791690 [] []\n\n==> runtime/logs/hyperf-debug.log <==\n{\"message\":\"5dc4dce791690\",\"context\":[],\"level\":200,\"level_name\":\"INFO\",\"channel\":\"hyperf\",\"datetime\":{\"date\":\"2019-11-08 11:11:35.597153\",\"timezone_type\":3,\"timezone\":\"Asia/Shanghai\"},\"extra\":[]}\n{\"message\":\"xxxx\",\"context\":[],\"level\":100,\"level_name\":\"DEBUG\",\"channel\":\"hyperf\",\"datetime\":{\"date\":\"2019-11-08 11:11:35.597635\",\"timezone_type\":3,\"timezone\":\"Asia/Shanghai\"},\"extra\":[]}\n```\n\n----------------------------------------\n\nTITLE: Constructor Injection PHP\nDESCRIPTION: Demonstrates constructor injection of the UserService into IndexController. The UserService is automatically injected via type hinting in the constructor.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserService;\n\nclass IndexController\n{\n    private UserService $userService;\n    \n    // 通過在構造函數的參數上聲明參數類型完成自動注入\n    public function __construct(UserService $userService)\n    {\n        $this->userService = $userService;\n    }\n    \n    public function index()\n    {\n        $id = 1;\n        // 直接使用\n        return $this->userService->getInfoById($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Many-to-Many Relation with Custom Pivot Columns (PHP)\nDESCRIPTION: This code snippet demonstrates how to define extra columns in the pivot table when defining a many-to-many relationship. The withPivot method specifies which columns from the pivot table should be included in the retrieved models.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nreturn $this->belongsToMany(Role::class)->withPivot('column1', 'column2');\n\n```\n\n----------------------------------------\n\nTITLE: Checking if a File Exists PHP\nDESCRIPTION: Demonstrates how to check if a file exists in the request using the `hasFile()` method.  Returns true if the file exists, false otherwise.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/request.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nif ($request->hasFile('photo')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using raw expressions in Hyperf queries\nDESCRIPTION: This snippet demonstrates how to use raw expressions in Hyperf queries using `Db::raw()`. It selects the 'gender' and counts the occurrences of each gender using `COUNT(0) AS count`, grouping the results by 'gender'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\DbConnection\\Db;\n\n$res = Db::table('user')->select('gender', Db::raw('COUNT(0) AS `count`'))->groupBy('gender')->get();\n```\n\n----------------------------------------\n\nTITLE: PHP Error Handling Example with Exception Catch\nDESCRIPTION: This PHP code snippet demonstrates how a PHP error, such as accessing an undefined array offset, can be caught as an `ErrorException` if the `ErrorExceptionHandler` listener is configured. Otherwise, a PHP Notice will be generated.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/exception-handler.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\ntry {\n    $a = [];\n    var_dump($a[1]);\n} catch (\\Throwable $throwable) {\n    var_dump(get_class($throwable), $throwable->getMessage());\n}\n\n// string(14) \"ErrorException\"\n// string(19) \"Undefined offset: 1\"\n```\n\n----------------------------------------\n\nTITLE: Creating a TCP Server Class in Hyperf (PHP)\nDESCRIPTION: This code snippet defines a TCP server class, `TcpServer`, that implements the `OnReceiveInterface`. The `onReceive` method is triggered when the server receives data from a client. It sends back the received data prefixed with 'recv:'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tcp-server.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnReceiveInterface;\n\nclass TcpServer implements OnReceiveInterface\n{\n    public function onReceive($server, int $fd, int $reactorId, string $data): void\n    {\n        $server->send($fd, 'recv:' . $data);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Form Request Rules Method\nDESCRIPTION: This code defines the `rules` method within a FormRequest class, which specifies the validation rules for the request data. It returns an array where keys are the input field names and values are the validation rules.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the validation rules applied to the request\n */\npublic function rules(): array\n{\n    return [\n        'foo' => 'required|max:255',\n        'bar' => 'required',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Command Logic in the handle Method - PHP\nDESCRIPTION: Implement the command's logic within the `handle` method.  This method serves as the entry point for the command's execution and performs the desired actions. Requires Hyperf Command component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    /**\n     * 执行的命令行\n     */\n    protected ?string $name = 'foo:hello';\n\n    public function handle()\n    {\n        // 通过内置方法 line 在 Console 输出 Hello Hyperf.\n        $this->line('Hello Hyperf.', 'info');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling Rate Limit Trigger with Callback\nDESCRIPTION: This example shows how to handle rate limit triggers using a callback function specified in the `limitCallback` configuration. When the rate limit is exceeded, the `limitCallback` function is executed, allowing you to customize the response or take alternative actions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/rate-limit.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\nuse Hyperf\\RateLimit\\Annotation\\RateLimit;\n\n#[Controller(prefix: \"rate-limit\")]\n#[RateLimit(limitCallback: {RateLimitController::class, \"limitCallback\"})]\nclass RateLimitController\n{\n    #[RequestMapping(path: \"test\")]\n    #[RateLimit(create: 1, capacity: 3)]\n    public function test()\n    {\n        return [\"QPS 1, Peek3\"];\n    }\n    \n    public static function limitCallback(float $seconds, ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        // $seconds Token generation time interval, in seconds\n        // $proceedingJoinPoint The entry point for the execution of this request\n        // You can handle it by yourself, or continue its execution by calling `$proceedingJoinPoint->process()`\n        return $proceedingJoinPoint->process();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Grouping in Where Clauses - PHP\nDESCRIPTION: Demonstrates how to group where conditions within parentheses using a closure within the `where()` method. This allows for creating more complex logical conditions.  It is important to call the group using `orWhere` to avoid unexpected behavior due to global scopes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('name', '=', 'John')\n    ->where(function ($query) {\n        $query->where('votes', '>', 100)\n                ->orWhere('title', '=', 'Admin');\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Querying Many-to-Many Relationship (PHP)\nDESCRIPTION: This code shows how to add additional constraints to a many-to-many relationship query using the query builder. It retrieves the roles associated with a user, ordered by name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$roles = User::find(1)->roles()->orderBy('name')->get();\n\n```\n\n----------------------------------------\n\nTITLE: Reload Channel Listener Configuration\nDESCRIPTION: Enables the ReloadChannelListener, which automatically moves messages from the 'timeout' queue to the 'waiting' queue after a certain number of messages have been processed. This is useful if the messages are idempotent.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    Hyperf\\AsyncQueue\\Listener\\ReloadChannelListener::class\n];\n\n```\n\n----------------------------------------\n\nTITLE: Returning XML Response in Hyperf\nDESCRIPTION: Demonstrates how to return an XML response using the `xml()` method of the `Hyperf\\HttpServer\\Contract\\ResponseInterface`. The content type is automatically set to `application/xml`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/response.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function xml(ResponseInterface $response): Psr7ResponseInterface\n    {\n        $data = [\n            'key' => 'value'\n        ];\n        return $response->xml($data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Custom Polymorphic Type Mapping (PHP)\nDESCRIPTION: This code demonstrates how to define a custom mapping for polymorphic types. It uses Relation::morphMap to associate short names (e.g., 'user', 'book') with their corresponding model classes. This avoids storing full class names in the database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Model;\nuse Hyperf\\Database\\Model\\Relations\\Relation;\nRelation::morphMap([\n    'user' => Model\\User::class,\n    'book' => Model\\Book::class,\n]);\n\n```\n\n----------------------------------------\n\nTITLE: Calling Service with Object Parameters - Hyperf\nDESCRIPTION: This snippet demonstrates how to call a JSON-RPC service that accepts and returns PHP objects. It retrieves the `CalculatorServiceInterface` from the application context, creates two `MathValue` objects, calls the `sum` method, and then accesses the `$value` property of the returned `MathValue` object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/json-rpc.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Context\\ApplicationContext;\nuse App\\JsonRpc\\CalculatorServiceInterface;\nuse App\\JsonRpc\\MathValue;\n\n$client = ApplicationContext::getContainer()->get(CalculatorServiceInterface::class);\n\n/** @var MathValue $result */\n$result = $client->sum(new MathValue(1), new MathValue(2));\n\nvar_dump($result->value);\n```\n\n----------------------------------------\n\nTITLE: Create Hyperf Project with Composer (Swoole)\nDESCRIPTION: This command creates a new Hyperf project based on the hyperf-skeleton using Composer. It uses the Swoole engine.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer create-project hyperf/hyperf-skeleton \n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Validation Component\nDESCRIPTION: This command installs the `hyperf/validation` component using composer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/validation\n```\n\n----------------------------------------\n\nTITLE: Value Object Type Casting in Hyperf Model\nDESCRIPTION: Defines a custom type casting class `AddressCaster` that implements the `CastsAttributes` interface. This caster converts multiple model attributes (`address_line_one`, `address_line_two`) into a single `Address` value object and back.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/mutators.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Casts;\n\nuse App\\Address;\nuse Hyperf\\Contract\\CastsAttributes;\n\nclass AddressCaster implements CastsAttributes\n{\n    /**\n     * 將取出的數據進行轉換\n     */\n    public function get($model, $key, $value, $attributes): Address\n    {\n        return new Address(\n            $attributes['address_line_one'],\n            $attributes['address_line_two']\n        );\n    }\n\n    /**\n     * 轉換成將要進行存儲的值\n     */\n    public function set($model, $key, $value, $attributes)\n    {\n        return [\n            'address_line_one' => $value->lineOne,\n            'address_line_two' => $value->lineTwo,\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Abstract Object Injection: Controller\nDESCRIPTION: Demonstrates injecting the UserServiceInterface into the IndexController using annotation injection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserServiceInterface;\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass IndexController\n{\n    #[Inject]\n    private UserServiceInterface $userService;\n    \n    public function index()\n    {\n        $id = 1;\n        // 直接使用\n        return $this->userService->getInfoById($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Middleware in Hyperf\nDESCRIPTION: This snippet demonstrates how to configure global middleware in Hyperf through the `middlewares.php` configuration file.  The middleware is applied to all requests under the configured server. The 'http' key corresponds to the server name in `server.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/middleware/middleware.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    // `http` corresponds to the value corresponding to the name attribute of each server in config/autoload/server.php. This configuration is only applied to the server you configured.\n    'http' => [\n        // Configure your global middleware in an array, in order according to the order of the array\n        YourMiddleware::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster with Name\nDESCRIPTION: This configuration demonstrates enabling Redis Cluster mode using the 'name' option. It requires setting the 'name' and defining cluster seeds in php.ini.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/redis.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Ignore the other irrelevant configurations\nreturn [\n    'default' => [\n        'cluster' => [\n            'enable' => true,\n            'name' => 'mycluster',\n            'seeds' => [],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configure Lazy Loading Proxy in Hyperf\nDESCRIPTION: This code snippet shows how to configure lazy loading proxy classes in Hyperf using the `config/lazy_loader.php` file.  It defines the relationship between a proxy class and its corresponding interface or original class. The framework will generate the proxy class in the runtime folder.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/di.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    /**\n     * Format: proxy class name => original class name\n     * The proxy class does not exist at this time, and Hyperf will automatically generate this class in the runtime folder.\n     * The proxy class name and namespace can be defined by yourself.\n     */\n    'App\\Service\\LazyUserService' => \\App\\Service\\UserServiceInterface::class\n];\n```\n\n----------------------------------------\n\nTITLE: Checking Table/Column Existence in Hyperf Migration\nDESCRIPTION: This code shows how to check if a table or column exists in a Hyperf migration using the `Schema::hasTable` and `Schema::hasColumn` methods. Requires the table and column names for the check.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nif (Schema::hasTable('users')) {\n    //\n}\n\nif (Schema::hasColumn('name', 'email')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Redis Client via Dependency Injection\nDESCRIPTION: This PHP code demonstrates how to access the Redis client within the Hyperf framework using dependency injection. It retrieves the Redis client instance from the application context and executes a 'keys' command to retrieve all keys.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/redis.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n\n$redis = $container->get(\\Hyperf\\Redis\\Redis::class);\n$result = $redis->keys('*');\n\n```\n\n----------------------------------------\n\nTITLE: Server Configuration for Hyperf RPC Multiplex\nDESCRIPTION: This code snippet demonstrates the server configuration for the Hyperf RPC Multiplex component. It configures a TCP server with specific settings for length checking, package length, and event callbacks. The `package_max_length` setting needs to be consistent between server and client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/rpc-multiplex.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\nuse Hyperf\\Server\\Server;\n\nreturn [\n    'servers' => [\n        [\n            'name' => 'rpc',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9502,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_RECEIVE => [Hyperf\\RpcMultiplex\\TcpServer::class, 'onReceive'],\n            ],\n            'settings' => [\n                'open_length_check' => true,\n                'package_length_type' => 'N',\n                'package_length_offset' => 0,\n                'package_body_offset' => 4,\n                'package_max_length' => 1024 * 1024 * 2,\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Implement Socket.IO Server Controller in Hyperf (PHP)\nDESCRIPTION: This code defines a Socket.IO controller in Hyperf using annotations for mapping events and namespaces.  It includes event handlers for 'event', 'join-room', and 'say' events, demonstrating response sending, room joining, and broadcasting messages to rooms.  The controller extends `BaseNamespace` and uses `Socket` for interacting with clients.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/socketio-server.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\SocketIOServer\\Annotation\\Event;\nuse Hyperf\\SocketIOServer\\Annotation\\SocketIONamespace;\nuse Hyperf\\SocketIOServer\\BaseNamespace;\nuse Hyperf\\SocketIOServer\\Socket;\nuse Hyperf\\Codec\\Json;\n\n#[SocketIONamespace(\"/\")]\nclass WebSocketController extends BaseNamespace\n{\n    /**\n     * @param string $data\n     */\n    #[Event(\"event\")]\n    public function onEvent(Socket $socket, $data)\n    {\n        // 应答\n        return 'Event Received: ' . $data;\n    }\n\n    /**\n     * @param string $data\n     */\n    #[Event(\"join-room\")]\n    public function onJoinRoom(Socket $socket, $data)\n    {\n        // 将当前用户加入房间\n        $socket->join($data);\n        // 向房间内其他用户推送（不含当前用户）\n        $socket->to($data)->emit('event', $socket->getSid() . \"has joined {$data}\");\n        // 向房间内所有人广播（含当前用户）\n        $this->emit('event', 'There are ' . count($socket->getAdapter()->clients($data)) . \" players in {$data}\");\n    }\n\n    /**\n     * @param string $data\n     */\n    #[Event(\"say\")]\n    public function onSay(Socket $socket, $data)\n    {\n        $data = Json::decode($data);\n        $socket->to($data['room'])->emit('event', $socket->getSid() . \" say: {$data['message']}\");\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Converting Results to Array Format - PHP\nDESCRIPTION: This listener modifies the default fetch mode to return results as associative arrays instead of `stdClass` objects. It listens to the `Hyperf\\Database\\Events\\StatementPrepared` event and sets the fetch mode to `PDO::FETCH_ASSOC` on the prepared statement. This snippet requires the `Hyperf\\Database\\Events\\StatementPrepared` and `Hyperf\\Event\\Annotation\\Listener` classes, and the `PDO` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Database\\Events\\StatementPrepared;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse PDO;\n\n#[Listener]\nclass FetchModeListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            StatementPrepared::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        if ($event instanceof StatementPrepared) {\n            $event->statement->setFetchMode(PDO::FETCH_ASSOC);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Queue Service for Pushing Messages\nDESCRIPTION: Defines a service class for pushing messages to the asynchronous queue. It retrieves the queue driver using the DriverFactory and pushes a new job with the provided parameters and delay.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Job\\ExampleJob;\nuse Hyperf\\AsyncQueue\\Driver\\DriverFactory;\nuse Hyperf\\AsyncQueue\\Driver\\DriverInterface;\n\nclass QueueService\n{\n    protected DriverInterface $driver;\n\n    public function __construct(DriverFactory $driverFactory)\n    {\n        $this->driver = $driverFactory->get('default');\n    }\n\n    /**\n     * 生产消息.\n     * @param $params 数据\n     * @param int $delay 延时时间 单位秒\n     */\n    public function push($params, int $delay = 0): bool\n    {\n        // 这里的 `ExampleJob` 会被序列化存到 Redis 中，所以内部变量最好只传入普通数据\n        // 同理，如果内部使用了注解 @Value 会把对应对象一起序列化，导致消息体变大。\n        // 所以这里也不推荐使用 `make` 方法来创建 `Job` 对象。\n        return $this->driver->push(new ExampleJob($params), $delay);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using SimplePool in Hyperf\nDESCRIPTION: This example demonstrates how to use the `SimplePool` in Hyperf.  It gets an instance of `PoolFactory` from the container, creates a new pool with a factory function that returns a `Swoole\\Coroutine\\Http\\Client`, gets a connection from the pool, and then releases the connection back to the pool.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/pool.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Pool\\SimplePool\\PoolFactory;\nuse Swoole\\Coroutine\\Http\\Client;\n\n$factory = $container->get(PoolFactory::class);\n\n$pool = $factory->get('your pool name', function () use ($host, $port, $ssl) {\n    return new Client($host, $port, $ssl);\n}, [\n    'max_connections' => 50\n]);\n\n$connection = $pool->get();\n\n$client = $connection->getConnection(); // The Client which mentioned above.\n\n// Do something.\n\n$connection->release();\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Delay Consumer\nDESCRIPTION: This PHP code defines a delay consumer class `DelayDirectConsumer`. It uses both `ProducerDelayedMessageTrait` and `ConsumerDelayedMessageTrait`, and it's annotated with `Consumer` to configure the queue, exchange, and routing key.  It implements the `consumeMessage` method to process the delayed message and returns `Result::ACK` to acknowledge successful consumption. It uses annotations to define configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/amqp.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Amqp\\Consumer;\n\nuse Hyperf\\Amqp\\Annotation\\Consumer;\nuse Hyperf\\Amqp\\Message\\ConsumerDelayedMessageTrait;\nuse Hyperf\\Amqp\\Message\\ConsumerMessage;\nuse Hyperf\\Amqp\\Message\\ProducerDelayedMessageTrait;\nuse Hyperf\\Amqp\\Message\\Type;\nuse Hyperf\\Amqp\\Result;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n#[Consumer(nums: 1)]\nclass DelayDirectConsumer extends ConsumerMessage\n{\n    use ProducerDelayedMessageTrait;\n    use ConsumerDelayedMessageTrait;\n\n    protected $exchange = 'ext.hyperf.delay';\n    \n    protected $queue = 'queue.hyperf.delay';\n    \n    protected $type = Type::DIRECT; //Type::FANOUT;\n    \n    protected $routingKey = '';\n\n    public function consumeMessage($data, AMQPMessage $message): Result\n    {\n        var_dump($data, 'delay+direct consumeTime:' . (microtime(true)));\n        return Result::ACK;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Config.php Configuration Example\nDESCRIPTION: Demonstrates how to define a configuration directly in `config/config.php`.  This shows the structure required to achieve the same configuration key as the autoloaded example.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'client' => [\n        'request' => [\n            'timeout' => 10,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Redis\nDESCRIPTION: This command installs the hyperf/redis package using Composer, which provides Redis integration for Hyperf applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/redis.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/redis\n```\n\n----------------------------------------\n\nTITLE: Configure Temporary Locale in Controller\nDESCRIPTION: Demonstrates how to set a temporary locale within a Hyperf controller. This allows you to change the language for a specific request or coroutine, overriding the default locale setting. Requires the `Hyperf\\Di\\Annotation\\Inject` and `Hyperf\\Contract\\TranslatorInterface` dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/translation.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Contract\\TranslatorInterface;\n\nclass FooController\n{\n    #[Inject]\n    private TranslatorInterface $translator;\n    \n    public function index()\n    {\n        // Only valid for the current request or coroutine lifetime\n        $this->translator->setLocale('zh_CN');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Field (PHP)\nDESCRIPTION: This code demonstrates how to create a string field named 'name' in a table using the Schema builder within a migration's `up` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Database\\Schema\\Schema;\nuse Hyperf\\Database\\Schema\\Blueprint;\nuse Hyperf\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    public function up(): void\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->string('name');\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Async Queue Configuration\nDESCRIPTION: Configures the async queue component, specifying the driver (Redis), channel name, retry interval, and the number of consumer processes. Only Redis driver is supported.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/async-queue.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => Hyperf\\AsyncQueue\\Driver\\RedisDriver::class,\n        'channel' => 'queue',\n        'retry_seconds' => 5,\n        'processes' => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Returning a Resource Collection from Controller (Custom)\nDESCRIPTION: This PHP code demonstrates returning a custom `UserCollection` instance from a controller action. It fetches all users and transforms them into a `UserCollection` resource, then converts the collection to a response using `toResponse()`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\UserCollection;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserCollection(User::all()))->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Model Pagination PHP\nDESCRIPTION: This code snippet demonstrates how to paginate query results using an Eloquent Model in Hyperf. It retrieves all users from the 'User' model, displaying 10 users per page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/paginator.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// 展示应用中的所有用户，每页显示 10 条数据\nreturn User::paginate(10);\n```\n\n----------------------------------------\n\nTITLE: Using WebSocket Connection Context\nDESCRIPTION: This PHP code demonstrates how to use the WebSocket connection context to store and retrieve state information across different WebSocket events (onMessage, onOpen) within the same connection. It sets the username in the onOpen event and retrieves it in the onMessage event using the `Context` facade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/websocket-server.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnMessageInterface;\nuse Hyperf\\Contract\\OnOpenInterface;\nuse Hyperf\\Engine\\WebSocket\\Frame;\nuse Hyperf\\Engine\\WebSocket\\Response;\nuse Hyperf\\WebSocketServer\\Context;\nuse Swoole\\WebSocket\\Server as WebSocketServer;\n\nclass WebSocketController implements OnMessageInterface, OnOpenInterface\n{\n    public function onMessage($server, $frame): void\n    {\n        $response = (new Response($server))->init($frame);\n        $response->push(new Frame(payloadData: 'Username: ' . Context::get('username')));\n    }\n\n    public function onOpen($server, $request): void\n    {\n        Context::set('username', $request->cookie['username']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Controller - PHP\nDESCRIPTION: This code defines a GraphQL controller in Hyperf. It handles incoming GraphQL queries, executes them against a schema, and returns the results. It uses annotations for dependency injection and route mapping.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/graphql.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse GraphQL\\GraphQL;\nuse GraphQL\\Type\\Schema;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\GraphQL\\Annotation\\Query;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\PostMapping;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\n\n#[Controller]\nclass GraphQLController\n{\n    #[Inject]\n    protected Schema $schema;\n\n    #[PostMapping(path: \"/graphql\")]\n    public function test(RequestInterface $request)\n    {\n        $rawInput = $request->getBody()->getContents();\n        $input = json_decode($rawInput, true);\n        $query = $input['query'];\n        $variableValues = isset($input['variables']) ? $input['variables'] : null;\n        return GraphQL::executeQuery($this->schema, $query, null, null, $variableValues)->toArray();\n    }\n\n    #[Query]\n    public function hello(string $name): string\n    {\n        return $name;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Custom Basic Resource Class (collects)\nDESCRIPTION: This PHP code demonstrates how to customize the resource class used for each item in a resource collection by overriding the `$collects` property of the resource collection. In this example, the `UserCollection` will map each user instance to a `Member` resource instead of the default `User` resource.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * collects properties define resource classes.\n     *\n     * @var string\n     */\n    public $collects = 'App\\Resource\\Member';\n\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Chunking with IDs for Updates using chunkById() in Hyperf\nDESCRIPTION: Demonstrates how to use `chunkById()` method to update database records in chunks, ensuring consistency by ordering results by the primary key. This is useful when updating records in batches to avoid inconsistencies with the query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\nDb::table('user')->where('gender', 1)->chunkById(100, function ($users) {\n    foreach ($users as $user) {\n        Db::table('user')\n            ->where('id', $user->id)\n            ->update(['update_time' => time()]);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Hyperf Migration\nDESCRIPTION: This code shows how to create a database table using the `Schema::create` method within a Hyperf migration. It defines a table named 'users' with an auto-incrementing 'id' and timestamps.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Database\\Schema\\Schema;\nuse Hyperf\\Database\\Schema\\Blueprint;\nuse Hyperf\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    public function up(): void\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->timestamps();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Consumer Process for a Specific Queue\nDESCRIPTION: This PHP code defines a consumer process for a specific queue named 'other' in Hyperf. It extends the ConsumerProcess class and overrides the $queue property to specify the queue to consume from.  The #[Process] attribute marks this class as a process that should be managed by the Hyperf process manager.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\AsyncQueue\\Process\\ConsumerProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process]\nclass OtherConsumerProcess extends ConsumerProcess\n{\n    protected string $queue = 'other';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Signal Handler for Safe Shutdown - PHP\nDESCRIPTION: This snippet shows how to configure the `ProcessStopHandler` for safe shutdown of asynchronous queue processes in Hyperf. The handler is added to the `handlers` array in the `signal.php` configuration file, ensuring that the queue processes can gracefully stop during termination.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'handlers' => [\n        Hyperf\\Process\\Handler\\ProcessStopHandler::class,\n    ],\n    'timeout' => 5.0,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Obtaining Request Object via Dependency Injection\nDESCRIPTION: Demonstrates how to obtain the Request object in a Hyperf controller using dependency injection.  The `RequestInterface` is injected into the controller method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/request.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass IndexController\n{\n    public function info(RequestInterface $request)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Process via Configuration - Hyperf (PHP)\nDESCRIPTION: Registers a custom process class within the `processes.php` configuration file, allowing Hyperf to automatically create and manage the process during server startup.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/process.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/processes.php\nreturn [\n    \\App\\Process\\FooProcess::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Manual Consumer Registry Configuration PHP\nDESCRIPTION: This code snippet defines the configuration for the manually created consumer class in the `config/autoload/services.php` file. It specifies the consumer's name and the registry from which it obtains node information, or the specific nodes to consume directly.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/json-rpc.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'consumers' => [\n        [\n            // $serviceName corresponding to the consumer class\n            'name' => 'CalculatorService',\n            // From which service center the consumer will obtain node information. If it is not configured, the node information will not be obtained from the service center\n            'registry' => [\n                'protocol' => 'consul',\n                'address' => 'http://127.0.0.1:8500',\n            ],\n            // If the registry configuration above is not specified, it means to directly consume the specified node. Configure the node information of the service provider through the nodes parameter below\n            'nodes' => [\n                ['host' => '127.0.0.1', 'port' => 9504],\n            ],\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Define Validation Rules in Form Request\nDESCRIPTION: This code snippet defines the validation rules for the `FooRequest` form request. It requires that the `foo` and `bar` fields are present, and `foo` cannot exceed 255 characters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * 獲取應用到請求的驗證規則\n */\npublic function rules(): array\n{\n    return [\n        'foo' => 'required|max:255',\n        'bar' => 'required',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Install hyperf/db component\nDESCRIPTION: Installs the hyperf/db component using composer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/db.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/db\n```\n\n----------------------------------------\n\nTITLE: Converting Query Results to Array Format in Hyperf\nDESCRIPTION: This code shows how to configure the query builder to return results as arrays instead of `stdClass` objects by listening to the `Hyperf\\Database\\Events\\StatementPrepared` event and setting the fetch mode to `PDO::FETCH_ASSOC`. It requires defining a listener class and registering it with the Hyperf event system.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Database\\Events\\StatementPrepared;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse PDO;\n\n#[Listener]\nclass FetchModeListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            StatementPrepared::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        if ($event instanceof StatementPrepared) {\n            $event->statement->setFetchMode(PDO::FETCH_ASSOC);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Coroutine Parallel Example PHP\nDESCRIPTION: This code demonstrates the use of Parallel to execute multiple coroutines concurrently and wait for their completion. The `add` method adds a callable to be executed in a separate coroutine, and `wait` blocks until all coroutines have finished and returns their results.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/coroutine.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$parallel = new \\Hyperf\\Coroutine\\Parallel();\n$parallel->add(function () {\n    \\Hyperf\\Coroutine\\Coroutine::sleep(1);\n    return \\Hyperf\\Coroutine\\Coroutine::id();\n});\n$parallel->add(function () {\n    \\Hyperf\\Coroutine\\Coroutine::sleep(1);\n    return \\Hyperf\\Coroutine\\Coroutine::id();\n});\n// $result is [1, 2]\n$result = $parallel->wait();\n```\n\n----------------------------------------\n\nTITLE: JSON Where Contains Statement - Hyperf PHP\nDESCRIPTION: Shows how to use `whereJsonContains` in Hyperf to query `JSON` arrays.  This method allows you to check if a `JSON` array contains a specific value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereJsonContains('options->languages', 'en')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Defining Local Middleware via Configuration in Hyperf\nDESCRIPTION: This snippet demonstrates how to define local middleware for specific routes using the configuration file. The `middleware` key in the `$options` array passed to the route definition methods is used to specify an array of middleware classes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/middleware/middleware.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Middleware\\FooMiddleware;\nuse Hyperf\\HttpServer\\Router\\Router;\n\n// Each route definition method can accept a $options parameter\nRouter::get('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [ForMiddleware::class]]);\nRouter::post('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [ForMiddleware::class]]);\nRouter::put('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [ForMiddleware::class]]);\nRouter::patch('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [ForMiddleware::class]]);\nRouter::delete('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [ForMiddleware::class]]);\nRouter::head('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [ForMiddleware::class]]);\nRouter::addRoute(['GET', 'POST', 'HEAD'], '/index', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [ForMiddleware::class]]);\n\n// All routings under the group will apply the configured middleware\nRouter::addGroup(\n    '/v2', function () {\n        Router::get('/index', [\\App\\Controller\\IndexController::class, 'index']);\n    },\n    ['middleware' => [ForMiddleware::class]]\n);\n\n```\n\n----------------------------------------\n\nTITLE: Hyperf View Configuration (PHP)\nDESCRIPTION: This PHP code defines the configuration array for the Hyperf View component, specifying the engine to use (BladeEngine), the rendering mode (Task), the view path, and the cache path. The view and cache paths need to be created manually.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nuse Hyperf\\View\\Mode;\nuse Hyperf\\View\\Engine\\BladeEngine;\n\nreturn [\n    // 使用的渲染引擎\n    'engine' => BladeEngine::class,\n    // 不填写则默认为 Task 模式，推荐使用 Task 模式\n    'mode' => Mode::TASK,\n    'config' => [\n        // 若下列文件夹不存在请自行创建\n        'view_path' => BASE_PATH . '/storage/view/',\n        'cache_path' => BASE_PATH . '/runtime/view/',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Apply Scene using Annotation\nDESCRIPTION: Demonstrates the use of the `Scene` annotation to specify a scene for validation in a controller method.  The annotation can be applied to multiple parameters, allowing different validation logic to be triggered for different requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Request\\DebugRequest;\nuse App\\Request\\SceneRequest;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Validation\\Annotation\\Scene;\n\n#[AutoController(prefix: 'foo')]\nclass FooController extends Controller\n{\n    #[Scene(scene:'bar1')]\n    public function bar1(SceneRequest $request)\n    {\n        return $this->response->success($request->all());\n    }\n\n    #[Scene(scene:'bar2', argument: 'request')] // 绑定到 $request\n    public function bar2(SceneRequest $request)\n    {\n        return $this->response->success($request->all());\n    }\n\n    #[Scene(scene:'bar3', argument: 'request')]\n    #[Scene(scene:'bar3', argument: 'req')] // 支持多个参数\n    public function bar3(SceneRequest $request, DebugRequest $req)\n    {\n        return $this->response->success($request->all());\n    }\n\n    #[Scene()] // 默认 scene 为方法名，效果等于 #[Scene(scene: 'bar1')]\n    public function bar1(SceneRequest $request)\n    {\n        return $this->response->success($request->all());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Connection Pool Implementation in Hyperf\nDESCRIPTION: This code demonstrates how to create a custom connection pool in Hyperf by extending the `Hyperf\\Pool\\Pool` class and implementing the `createConnection` method. This method should return an object that implements the `Hyperf\\Contract\\ConnectionInterface` interface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/pool.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Pool;\n\nuse Hyperf\\Contract\\ConnectionInterface;\nuse Hyperf\\Pool\\Pool;\n\nclass MyConnectionPool extends Pool\n{\n    public function createConnection(): ConnectionInterface\n    {\n        return new MyConnection();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Models with Query\nDESCRIPTION: Demonstrates how to delete models based on a query condition using the `delete` method on a query builder instance. This example deletes all users with `gender` equal to 1. It's crucial to include `where` conditions to avoid accidental deletion of the entire table. Note that bulk deletes do not trigger model events.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n// 注意使用 delete 方法时必须建立在某些查询条件基础之上才能安全删除数据，不存在 where 条件，会导致删除整个数据表\nUser::query()->where('gender', 1)->delete(); \n\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Socket.io/WebSocket Proxy\nDESCRIPTION: This Nginx configuration demonstrates how to set up a reverse proxy for Socket.IO and WebSocket connections to a Hyperf backend.  It includes necessary headers for WebSocket upgrades, such as `Upgrade` and `Connection`, and forwards the client's IP address.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/socketio-server.md#_snippet_18\n\nLANGUAGE: Nginx\nCODE:\n```\nserver {\n    location ^~/socket.io/ {\n        # 執行代理訪問真實服務器\n        proxy_pass http://hyperf;\n        proxy_http_version 1.1;\n        proxy_set_header Host $host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Dispatching an Event - PHP\nDESCRIPTION: Demonstrates how to dispatch a `UserRegistered` event using the `EventDispatcherInterface`. The `UserService::register()` method creates a new user, saves it, and then dispatches the `UserRegistered` event, passing the user object as data to the listeners.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/event.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Service;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\nuse App\\Event\\UserRegistered; \n\nclass UserService\n{\n    #[Inject]\n    private EventDispatcherInterface $eventDispatcher;\n    \n    public function register()\n    {\n        // 我们假设存在 User 这个实体\n        $user = new User();\n        $result = $user->save();\n        // 完成账号注册的逻辑\n        // 这里 dispatch(object $event) 会逐个运行监听该事件的监听器\n        $this->eventDispatcher->dispatch(new UserRegistered($user));\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Inverse One-to-Many (Belongs To) Relation (PHP)\nDESCRIPTION: This code defines the inverse of a one-to-many relationship in the Book model, using the belongsTo method to associate a Book with its User (author). It specifies the related model class, foreign key, and owner key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass Book extends Model\n{\n    public function author()\n    {\n        return $this->belongsTo(User::class, 'user_id', 'id');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Checking for Input Value Existence - PHP\nDESCRIPTION: Demonstrates how to determine if an input value exists in the request using the `has()` method. It can check for the existence of a single key or multiple keys simultaneously.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n// 僅判斷單個值\nif ($request->has('name')) {\n    // ...\n}\n// 同時判斷多個值\nif ($request->has(['name', 'email'])) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Process Class in Hyperf\nDESCRIPTION: This snippet demonstrates how to create a custom process class by extending `Hyperf\\Process\\AbstractProcess` and implementing the `handle()` method, which contains the logic for the process. The class needs to be registered to the ProcessManager either via configuration or annotation to be used.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/process.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\n\nclass FooProcess extends AbstractProcess\n{\n    public function handle(): void\n    {\n        // 您的代碼 ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Connection Pooling with Hyperf Guzzle\nDESCRIPTION: Demonstrates how to use connection pooling with Hyperf Guzzle to reuse TCP connections and reduce the impact of TIME-WAIT.  The `PoolHandler` is used with a `RetryMiddleware` to handle potential connection issues. The `$handler` will be `null` if not running in a coroutine.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/guzzle.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse GuzzleHttp\\Client;\nuse Hyperf\\Coroutine\\Coroutine;\nuse GuzzleHttp\\HandlerStack;\nuse Hyperf\\Guzzle\\PoolHandler;\nuse Hyperf\\Guzzle\\RetryMiddleware;\n\n$handler = null;\nif (Coroutine::inCoroutine()) {\n    $handler = make(PoolHandler::class, [\n        'option' => [\n            'max_connections' => 50,\n        ],\n    ]);\n}\n\n// 默認的重試Middleware\n$retry = make(RetryMiddleware::class, [\n    'retries' => 1,\n    'delay' => 10,\n]);\n\n$stack = HandlerStack::create($handler);\n$stack->push($retry->getMiddleware(), 'retry');\n\n$client = make(Client::class, [\n    'config' => [\n        'handler' => $stack,\n    ],\n]);\n\n```\n\n----------------------------------------\n\nTITLE: Queue Service with Annotation\nDESCRIPTION: Demonstrates using annotations to define an asynchronous queue message handler. This approach simplifies message handling by automatically pushing messages to the queue.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse Hyperf\\AsyncQueue\\Annotation\\AsyncQueueMessage;\n\nclass QueueService\n{\n    #[AsyncQueueMessage]\n    public function example($params)\n    {\n        // 需要异步执行的代码逻辑\n        // 这里的逻辑会在 ConsumerProcess 进程中执行\n        var_dump($params);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Models in Hyperf\nDESCRIPTION: This code demonstrates how to update multiple models that match specific criteria using the `update` method on a query builder. It updates all `User` models where `gender` is 1, setting the `gender_show` attribute to 'male'. Note that batch updates do not trigger model events or execute casts.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Model\\User;\n\nUser::query()->where('gender', 1)->update(['gender_show' => 'male']);\n```\n\n----------------------------------------\n\nTITLE: Configure Model Cache in database.php\nDESCRIPTION: Configures model caching settings within the `databases` configuration file in Hyperf. Defines the cache handler, cache key format, prefix, pool, TTL, and other relevant parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model-cache.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER', 'mysql'),\n        'host' => env('DB_HOST', 'localhost'),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => env('DB_CHARSET', 'utf8'),\n        'collation' => env('DB_COLLATION', 'utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX', ''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float)env('DB_MAX_IDLE_TIME', 60),\n        ],\n        'cache' => [\n            'handler' => \\Hyperf\\DbConnection\\Cache\\Handler\\RedisHandler::class,\n            'cache_key' => 'mc:%s:m:%s:%s:%s',\n            'prefix' => 'default',\n            'ttl' => 3600 * 24,\n            'empty_model_ttl' => 3600,\n            'load_script' => true,\n            'use_default_value' => false,\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection via Inject Annotation - Hyperf PHP\nDESCRIPTION: This code snippet demonstrates dependency injection in Hyperf using the `#[Inject]` annotation.  The `UserService` is injected into the `IndexController` using the `#[Inject]` annotation on the `$userService` property.  Requires the `Hyperf\\Di\\Annotation\\Inject` namespace.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/overview.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse App\\Service\\UserService;\n\n#[AutoController]\nclass IndexController\n{\n\n    #[Inject]\n    private UserService $userService;\n    \n    // /index/info\n    public function info(RequestInterface $request)\n    {\n        $id = $request->input('id', 1);\n        return $this->userService->getInfoById((int)$id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional query execution with when in Hyperf\nDESCRIPTION: This snippet illustrates how to conditionally apply a query clause using the `when` method in Hyperf's query builder.  If `$role` has a value it will filter users by `role_id`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$role = $request->input('role');\n\n$users = Db::table('users')\n    ->when($role, function ($query, $role) {\n        return $query->where('role_id', $role);\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Custom Type Casting in Hyperf Model\nDESCRIPTION: Defines a custom type casting class `Json` that implements the `CastsAttributes` interface. This example replicates the built-in `json` casting, encoding the value for storage and decoding it upon retrieval.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/mutators.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Casts;\n\nuse Hyperf\\Contract\\CastsAttributes;\n\nclass Json implements CastsAttributes\n{\n    /**\n     * 將取出的數據進行轉換\n     */\n    public function get($model, $key, $value, $attributes)\n    {\n        return json_decode($value, true);\n    }\n\n    /**\n     * 轉換成將要進行存儲的值\n     */\n    public function set($model, $key, $value, $attributes)\n    {\n        return json_encode($value);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Binding Custom CoreMiddleware\nDESCRIPTION: This code snippet illustrates how to bind the custom `CoreMiddleware` implementation using the dependency injection container. By defining a mapping in `config/autoload/dependencies.php`, you can replace the default `CoreMiddleware` with your custom implementation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/middleware/middleware.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\HttpServer\\CoreMiddleware::class => App\\Middleware\\CoreMiddleware::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Getting Cookies from the Request PHP\nDESCRIPTION: Shows how to retrieve cookies from the request. `getCookieParams()` retrieves all cookies as an array. The `cookie()` method retrieves a single cookie value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/request.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$cookies = $request->getCookieParams();\n```\n\nLANGUAGE: php\nCODE:\n```\n// Return value if the cookie exists or return null if it doesn't exist\n$name = $request->cookie('name');\n\n// Return value if the cookie exists or return a default value of 'Hyperf' if it doesn't exist\n$name = $request->cookie('name','Hyperf');\n```\n\n----------------------------------------\n\nTITLE: gRPC Server Configuration in Hyperf\nDESCRIPTION: This PHP code snippet configures a gRPC server within the Hyperf framework. It defines a server named 'grpc' that listens on port 9503 and uses the \\Hyperf\\GrpcServer\\Server::onRequest callback to handle incoming requests. Ensure that the necessary Hyperf gRPC server package is installed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/grpc.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'servers' => [\n    ....\n    [\n        'name' => 'grpc',\n        'type' => Server::SERVER_HTTP,\n        'host' => '0.0.0.0',\n        'port' => 9503,\n        'sock_type' => SWOOLE_SOCK_TCP,\n        'callbacks' => [\n            Event::ON_REQUEST => [\\Hyperf\\GrpcServer\\Server::class, 'onRequest'],\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Triggering Custom Exception in Hyperf Controller\nDESCRIPTION: This PHP code snippet demonstrates how to trigger a custom exception (`FooException`) within a Hyperf controller. When the `index` method is called, it throws a `FooException` with a message and code, which will then be handled by the registered exception handlers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/exception-handler.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Exception\\FooException;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        throw new FooException('Foo Exception...', 800);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing ETCD Config Center Client (Hyperf)\nDESCRIPTION: This command installs the ETCD client for Hyperf, allowing the application to retrieve configurations from an ETCD key-value store.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config-center.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-etcd\n```\n\n----------------------------------------\n\nTITLE: Configuring a TCP Server in Hyperf (PHP)\nDESCRIPTION: This code snippet shows the configuration array for a TCP server in Hyperf. It defines the server name, type, host, port, socket type, and callbacks. The `ON_RECEIVE` event is mapped to the `onReceive` method of the `TcpServer` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tcp-server.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 以下删除了其他不相关的配置项\n    'servers' => [\n        [\n            'name' => 'tcp',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9504,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_RECEIVE => [App\\Controller\\TcpServer::class, 'onReceive'],\n            ],\n            'settings' => [\n                // 按需配置\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Metric Driver Configuration\nDESCRIPTION: This PHP code snippet shows how to define the default metric driver in the configuration file. The `default` option specifies which driver to use. The configuration is retrieved from the environment variable `METRIC_DRIVER` with a fallback to `prometheus`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n'default' => env('METRIC_DRIVER', 'prometheus'),\n```\n\n----------------------------------------\n\nTITLE: Apply Validation Scene with Annotation\nDESCRIPTION: This code shows how to apply a validation scene to a controller action using the `Scene` annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Request\\DebugRequest;\nuse App\\Request\\SceneRequest;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Validation\\Annotation\\Scene;\n\n#[AutoController(prefix: 'foo')]\nclass FooController extends Controller\n{\n    #[Scene(scene:'bar1')]\n    public function bar1(SceneRequest $request)\n    {\n        return $this->response->success($request->all());\n    }\n\n    #[Scene(scene:'bar2', argument: 'request')] // 繫結到 $request\n    public function bar2(SceneRequest $request)\n    {\n        return $this->response->success($request->all());\n    }\n\n    #[Scene(scene:'bar3', argument: 'request')]\n    #[Scene(scene:'bar3', argument: 'req')] // 支援多個引數\n    public function bar3(SceneRequest $request, DebugRequest $req)\n    {\n        return $this->response->success($request->all());\n    }\n\n    #[Scene()] // 預設 scene 為方法名，效果等於 #[Scene(scene: 'bar1')]\n    public function bar1(SceneRequest $request)\n    {\n        return $this->response->success($request->all());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Each Element of an Array\nDESCRIPTION: Shows how to validate each element of an array. The example validates that each 'email' field within the 'person' array is a valid email and unique in the 'users' table, and that the 'first_name' is required if the 'last_name' exists. This targets arrays like person[][email].\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_45\n\nLANGUAGE: PHP\nCODE:\n```\n$validator = $this->validationFactory->make($request->all(), [\n    'person.*.email' => 'email|unique:users',\n    'person.*.first_name' => 'required_with:person.*.last_name',\n]);\n```\n\n----------------------------------------\n\nTITLE: CastsValue Implementation with UserInfo and UserInfoCaster\nDESCRIPTION: This code snippet demonstrates the implementation of a custom type casting system in Hyperf using `CastsValue`. It defines a `UserInfo` class inheriting from `CastsValue` to represent user information with properties like name and gender. The `UserInfoCaster` class implements the `CastsAttributes` interface to handle the conversion between the model's attributes and the `UserInfo` object. The get method creates a `UserInfo` object using specified attributes (name, gender) from the model, and the set method returns an array to update the models attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/mutators.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Caster;\n\nuse Hyperf\\Contract\\CastsAttributes;\nuse Hyperf\\Collection\\Arr;\n\nclass UserInfoCaster implements CastsAttributes\n{\n    public function get($model, string $key, $value, array $attributes): UserInfo\n    {\n        return new UserInfo($model, Arr::only($attributes, ['name', 'gender']));\n    }\n\n    public function set($model, string $key, $value, array $attributes)\n    {\n        return [\n            'name' => $value->name,\n            'gender' => $value->gender,\n        ];\n    }\n\n}\n\nnamespace App\\Caster;\n\nuse Hyperf\\Database\\Model\\CastsValue;\n\n/**\n * @property string $name\n * @property int $gender\n */\nclass UserInfo extends CastsValue\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Query-time Type Conversion in PHP\nDESCRIPTION: This code demonstrates how to perform type conversion during query execution using the `withCasts` method.  In this example, the `last_posted_at` attribute, which is retrieved as a string from the database, is typecast to a 'date' type during the query. This conversion is applied only for the results of this particular query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Post;\nuse App\\User;\n\n$users = User::select([\n    'users.*',\n    'last_posted_at' => Post::selectRaw('MAX(created_at)')\n            ->whereColumn('user_id', 'users.id')\n])->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$users = User::select([\n    'users.*',\n    'last_posted_at' => Post::selectRaw('MAX(created_at)')\n            ->whereColumn('user_id', 'users.id')\n])->withCasts([\n    'last_posted_at' => 'date'\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Unique Rule Ignoring Model Instance - PHP\nDESCRIPTION: Demonstrates how to pass an entire model instance to the `ignore` method of the `unique` rule. The component automatically extracts the primary key value from the model.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nRule::unique('users')->ignore($user)\n```\n\n----------------------------------------\n\nTITLE: Querying and Updating a Model (Hyperf)\nDESCRIPTION: Illustrates how to query a model, modify its attributes, and save the changes back to the database in Hyperf. The example fetches a user by ID, updates the name attribute, and persists the changes using the `save` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = User::query()->where('id', 1)->first();\n$user->name = 'Hyperf';\n$user->save();\n\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Configuration in Hyperf\nDESCRIPTION: Configures global middleware for Hyperf HTTP server.  This snippet demonstrates how to define global middleware in the `config/autoload/middlewares.php` file, associating them with specific server names defined in `config/autoload/server.php`. The middleware will be applied to all requests handled by the specified server. The order of middlewares in the array determines the execution order.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/middleware/middleware.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // http 对应 config/autoload/server.php 内每个 server 的 name 属性对应的值，该配置仅应用在该 Server 中\n    'http' => [\n        // 数组内配置您的全局中间件，顺序根据该数组的顺序\n        YourMiddleware::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Getting Request Method\nDESCRIPTION: Demonstrates how to get the HTTP request method using `getMethod()` and how to verify it using `isMethod(string $method)`.  Used to check whether the current request is a POST request.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/request.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$method = $request->getMethod();\n\nif ($request->isMethod('post')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Guzzle Client with ClassMap\nDESCRIPTION: Demonstrates how to replace the default `GuzzleHttp\\Client` with a custom implementation using Hyperf's `ClassMap` feature.  This allows for injecting a coroutine handler into the client. The handler will be a `CoroutineHandler` when inside a coroutine, and null otherwise. `CoroutineHandler` or `PoolHandler` can be selected as needed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/guzzle.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace GuzzleHttp;\n\nuse GuzzleHttp\\Psr7;\nuse Hyperf\\Guzzle\\CoroutineHandler;\nuse Hyperf\\Coroutine\\Coroutine;\n\nclass Client implements ClientInterface\n{\n    // 代碼省略其他不變的代碼\n\n    public function __construct(array $config = [])\n    {\n        $inCoroutine = Coroutine::inCoroutine();\n        if (!isset($config['handler'])) {\n            // 對應的 Handler 可以按需選擇 CoroutineHandler 或 PoolHandler\n            $config['handler'] = HandlerStack::create($inCoroutine ? new CoroutineHandler() : null);\n        } elseif ($inCoroutine && $config['handler'] instanceof HandlerStack) {\n            $config['handler']->setHandler(new CoroutineHandler());\n        } elseif (!is_callable($config['handler'])) {\n            throw new \\InvalidArgumentException('handler must be a callable');\n        }\n\n        // Convert the base_uri to a UriInterface\n        if (isset($config['base_uri'])) {\n            $config['base_uri'] = Psr7\\uri_for($config['base_uri']);\n        }\n\n        $this->configureDefaults($config);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Model Event Listener in PHP\nDESCRIPTION: This snippet demonstrates how to implement a model event listener to monitor all model events, such as model creation, modification, and deletion. The listener captures `Deleted` and `Saved` events and deletes the corresponding cache when a model is modified or deleted. This requires the `hyperf/event` and `hyperf/model-cache` components. The `CacheableInterface` must be implemented by the model.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/event.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\ModelCache\\Listener;\n\nuse Hyperf\\Database\\Model\\Events\\Deleted;\nuse Hyperf\\Database\\Model\\Events\\Event;\nuse Hyperf\\Database\\Model\\Events\\Saved;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\ModelCache\\CacheableInterface;\n\n#[Listener]\nclass DeleteCacheListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            Deleted::class,\n            Saved::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        if ($event instanceof Event) {\n            $model = $event->getModel();\n            if ($model instanceof CacheableInterface) {\n                $model->deleteCache();\n            }\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Raw Expressions - PHP\nDESCRIPTION: This shows how to use raw SQL expressions within a query using `Db::raw()`. It selects the 'gender' column and a count of each gender, grouping the results by gender. This is useful for performing complex calculations or using database-specific functions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$res = Db::table('user')->select('gender', Db::raw('COUNT(0) AS `count`'))->groupBy('gender')->get();\n```\n\n----------------------------------------\n\nTITLE: Mass Assignment using create()\nDESCRIPTION: This snippet demonstrates how to use the `create()` method for mass assignment, emphasizing the importance of defining either the `$fillable` or `$guarded` property on the model to protect against unintended attribute modifications. This example sets the fillable attribute to 'name'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected array $fillable = ['name'];\n}\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$user = User::create(['name' => 'Hyperf']);\n\n```\n\n----------------------------------------\n\nTITLE: Bulk Adding Records to the Search Index\nDESCRIPTION: Adds a collection of models to the search index using the model query builder. The `searchable` method is chained to the query builder to chunk the results and add them to the index. This can be done through a query, relationship, or collection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// Use the Model Query Builder to add...\n    App\\Order::where('price', '>', 100)->searchable();\n\n    // Adding records using model relationships...\n    $user->orders()->searchable();\n\n    // Adding records using collections...\n    $orders->searchable();\n```\n\n----------------------------------------\n\nTITLE: Defining Scheduled Tasks Using Schedule Class\nDESCRIPTION: Defines scheduled tasks in the `crontabs.php` configuration file using the `Hyperf\\Crontab\\Schedule` class. This is a simplified configuration method introduced in version 3.1, demonstrating command, class method, and closure callbacks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/crontab.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/crontabs.php\nuse Hyperf\\Crontab\\Schedule;\n\nSchedule::command('foo:bar')->setName('foo-bar')->setRule('* * * * *');\nSchedule::call([Foo::class, 'bar'])->setName('foo-bar')->setRule('* * * * *');\nSchedule::call(fn() => (new Foo)->bar())->setName('foo-bar')->setRule('* * * * *');\n```\n\n----------------------------------------\n\nTITLE: Inserting records using insert in Hyperf\nDESCRIPTION: This snippet demonstrates how to insert new records into a database table using the `insert` method. It accepts an array of field names and values. It shows examples for inserting single and multiple records.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n\nDb::table('users')->insert([\n    ['email' => 'taylor@example.com', 'votes' => 0],\n    ['email' => 'dayle@example.com', 'votes' => 0]\n]);\n```\n\n----------------------------------------\n\nTITLE: MessageBusInterface Usage (PHP)\nDESCRIPTION: This code snippet demonstrates the use of `MessageBusInterface` to send and receive information shared by all processes. It showcases broadcasting a message and subscribing to receive messages. Requires `Hyperf\\ReactiveX\\MessageBusInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/reactive-x.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$bus = make(Hyperf\\ReactiveX\\MessageBusInterface::class);\n// whole process broadcast information\n$bus->onNext('Hello Hyperf');\n// subscription info\n$bus->subscribe(function($message){\n    echo $message;\n});\n\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Middlewares with Annotations in Hyperf\nDESCRIPTION: This snippet demonstrates how to define multiple middlewares for a controller using the `#[Middlewares]` and `#[Middleware]` annotations in Hyperf.  The `#[AutoController]` or `#[Controller]` annotation must also be present for the middleware to be applied. Multiple `#[Middleware]` annotations are defined within the `#[Middlewares]` annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/middleware/middleware.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse App\\Middleware\\BarMiddleware;\nuse App\\Middleware\\FooMiddleware;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\HttpServer\\Annotation\\Middleware;\nuse Hyperf\\HttpServer\\Annotation\\Middlewares;\n\n#[AutoController]\n#[Middlewares([FooMiddleware::class, BarMiddleware::class])]\nclass IndexController\n{\n    public function index()\n    {\n        return 'Hello Hyperf.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Crontab Tasks via Annotation - PHP\nDESCRIPTION: This PHP code defines a scheduled task using the `#[Crontab]` annotation. The annotation is used on the `FooTask` class, specifying the name, rule, callback (method to execute), and memo for the task. It also shows how to inject dependencies using `#[Inject]` and defines a second crontab on `foo` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/crontab.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Task;\n\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Crontab\\Annotation\\Crontab;\nuse Hyperf\\Di\\Annotation\\Inject;\n\n#[Crontab(name: \"Foo\", rule: \"* * * * *\", callback: \"execute\", memo: \"這是一個示例的定時任務\")]\nclass FooTask\n{\n    #[Inject]\n    private StdoutLoggerInterface $logger;\n\n    public function execute()\n    {\n        $this->logger->info(date('Y-m-d H:i:s', time()));\n    }\n\n    #[Crontab(rule: \"* * * * *\", memo: \"foo\")]\n    public function foo()\n    {\n        var_dump('foo');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Timeout in autoload\nDESCRIPTION: Demonstrates setting a client request timeout within an `autoload` configuration file. The file's name (`client.php`) is used as the first level key in the configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'request' => [\n        'timeout' => 10,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Generating a Migration File in Hyperf\nDESCRIPTION: This command generates a new migration file with a given name. The filename should indicate the purpose of the migration.  This command requires the Hyperf framework to be installed and the `bin/hyperf.php` script to be executable.  The generated file is placed in the `migrations` directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:migration create_users_table\n```\n\n----------------------------------------\n\nTITLE: Translation Configuration - PHP\nDESCRIPTION: Shows the configuration options for the translation component, located in `config/autoload/translation.php`.  It defines the default locale, fallback locale, and the path to the language files. The 'locale' key sets the default language, 'fallback_locale' provides a backup language, and 'path' specifies the directory where language files are located.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/translation.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/translation.php\n\nreturn [\n    // 默认语言\n    'locale' => 'zh_CN',\n    // 回退语言，当默认语言的语言文本没有提供时，就会使用回退语言的对应语言文本\n    'fallback_locale' => 'en',\n    // 语言文件存放的文件夹\n    'path' => BASE_PATH . '/storage/languages',\n];\n```\n\n----------------------------------------\n\nTITLE: Dropping a Table in Hyperf Migration\nDESCRIPTION: This code shows how to drop a table in a Hyperf migration using the `Schema::drop` and `Schema::dropIfExists` methods. The `dropIfExists` method will only drop the table if it exists. Requires the table name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nSchema::drop('users');\n\nSchema::dropIfExists('users');\n```\n\n----------------------------------------\n\nTITLE: Skip and Take Statement - Hyperf PHP\nDESCRIPTION: Demonstrates limiting the number of results returned or skipping a specified number of results using `skip` and `take` methods in Hyperf, also presents their alias functions `offset` and `limit`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->skip(10)->take(5)->get();\n\n$users = Db::table('users')->offset(10)->limit(5)->get();\n```\n\n----------------------------------------\n\nTITLE: Getting Coroutine Context Value in Hyperf\nDESCRIPTION: Demonstrates retrieving a value from the current coroutine context using the `Context::get()` method. If the key does not exist, the method returns a default value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/coroutine.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Context\\Context;\n\n// 從當前協程上下文中取出 key 為 foo 的值，如不存在則返回 bar 字符串\n$foo = Context::get('foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Require Doctrine DBAL via Composer\nDESCRIPTION: This command adds the Doctrine DBAL library as a dependency to the project.  It is required for modifying existing columns using the `change` method. The Doctrine DBAL library is used to determine the current state of the fields and create the SQL queries.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_18\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require \"doctrine/dbal:^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Db::select() and get() - PHP\nDESCRIPTION: Demonstrates how to retrieve data from a database table using the `Db::select()` method, which returns an array, and the `Db::table('user')->get()` method, which returns a `Hyperf\\Collection\\Collection` of `stdClass` objects.  The `select()` method is used for raw SQL queries, while `table()->get()` provides a more structured way to retrieve data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\DbConnection\\Db;\n\n$users = Db::select('SELECT * FROM user;');\n$users = Db::table('user')->get();\n$users = Db::table('user')->select('name', 'gender as user_gender')->get();\n```\n\n----------------------------------------\n\nTITLE: gRPC Client Example\nDESCRIPTION: This PHP code demonstrates a gRPC client implementation in Hyperf. It creates a client for the 'Hi' service, creates a 'HiUser' request, calls the 'sayHello' method, and retrieves the response message. The client is coroutine-safe and can be reused.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/grpc.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function hello()\n{\n    // This client is coroutine-safe and can be reused\n    $client = new \\App\\Grpc\\HiClient('127.0.0.1:9503', [\n        'credentials' => null,\n    ]);\n\n    $request = new \\Grpc\\HiUser();\n    $request->setName('hyperf');\n    $request->setSex(1);\n\n    /**\n        * @var \\Grpc\\HiReply $reply\n        */\n    list($reply, $status) = $client->sayHello($request);\n\n    $message = $reply->getMessage();\n    $user = $reply->getUser();\n    \n    var_dump(memory_get_usage(true));\n    return $message;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Process - Hyperf PHP\nDESCRIPTION: This code snippet shows how to configure various parameters of a custom process in Hyperf, such as the number of processes, process name, standard input/output redirection, pipe type, and whether to enable coroutines. These parameters can be configured either by overriding attributes on the subclass or defining attributes in the #[Process] annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/process.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process(name: \"foo_process\", name: \"user-process\", redirectStdinStdout: false, pipeType: 2, enableCoroutine: true)]\nclass FooProcess extends AbstractProcess\n{\n    /**\n     * Number of processes\n     * @var int\n     */\n    public $nums = 1;\n\n    /**\n     * Process name\n     * @var string\n     */\n    public $name = 'user-process';\n\n    /**\n     * Redirect the standard input and output of a custom process\n     * @var bool\n     */\n    public $redirectStdinStdout = false;\n\n    /**\n     * Pipe type\n     * @var int\n     */\n    public $pipeType = 2;\n\n    /**\n     * Whether to enable coroutine\n     * @var bool\n     */\n    public $enableCoroutine = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Consul\nDESCRIPTION: Installs the hyperf/consul package using composer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/consul.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/consul\n```\n\n----------------------------------------\n\nTITLE: Registering a Service using RpcService annotation (Hyperf)\nDESCRIPTION: This code demonstrates how to register a service using the #[RpcService] annotation.  It defines the service name, protocol (JSON RPC), and the server to bind to.  The `CalculatorService` class implements the `CalculatorServiceInterface` interface and provides the actual service logic.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/service-register.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\JsonRpc;\n\nuse Hyperf\\RpcServer\\Annotation\\RpcService;\n\n#[RpcService(name: \"CalculatorService\", protocol: \"jsonrpc-http\", server: \"jsonrpc-http\")]\nclass CalculatorService implements CalculatorServiceInterface\n{\n    // 实现一个加法方法，这里简单的认为参数都是 int 类型\n    public function calculate(int $a, int $b): int\n    {\n        // 这里是服务方法的具体实现\n        return $a + $b;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Validation Attributes in Form Request\nDESCRIPTION: Overrides the `attributes` method in a FormRequest to define custom attribute names for use in validation error messages. This enhances the clarity of the error messages presented to the user.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/**\n * 获取验证错误的自定义属性\n */\npublic function attributes(): array\n{\n    return [\n        'foo' => 'foo of request',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a TCP Server in Hyperf\nDESCRIPTION: This code snippet shows the configuration required to set up a TCP server in Hyperf. It defines the server name, type, host, port, socket type, and callbacks.  The `Event::ON_RECEIVE` callback is configured to use the `onReceive` method of the `App\\Controller\\TcpServer` class. The configuration returns an array of server settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tcp-server.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // The following has removed other irrelevant configuration items\n    'servers' => [\n        [\n            'name' => 'tcp',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9504,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_RECEIVE => [App\\Controller\\TcpServer::class, 'onReceive'],\n            ],\n            'settings' => [\n                // Configure on demand\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Using Factory Class for Dynamic Databases\nDESCRIPTION: This PHP code shows how to use the RedisFactory class to dynamically obtain Redis clients for different connection pools. It retrieves the RedisFactory from the container and then calls the get() method with the desired pool name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/redis.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Redis\\RedisFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n\n// 通過 DI 容器獲取或直接注入 RedisFactory 類\n$redis = $container->get(RedisFactory::class)->get('foo');\n$result = $redis->keys('*');\n\n```\n\n----------------------------------------\n\nTITLE: Add Validation Middleware\nDESCRIPTION: This code snippet shows how to add the `Hyperf\\Validation\\Middleware\\ValidationMiddleware` to the global middleware configuration in `config/autoload/middlewares.php`. This middleware is essential for the `FormRequest` feature to work.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // The following http string corresponds to the value corresponding to the name attribute of each server in config/autoload/server.php, which means that the corresponding middleware configuration is only applied to the server\n    'http' => [\n        // Configure your global middleware in the array, the order is based on the order of the array\n        \\Hyperf\\Validation\\Middleware\\ValidationMiddleware::class\n        // Other middleware goes here\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Redis Package via Composer\nDESCRIPTION: This command installs the hyperf/redis package using Composer, a dependency manager for PHP. This package provides Redis integration for the Hyperf framework.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/redis.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/redis\n```\n\n----------------------------------------\n\nTITLE: RPC Reply Consumer (Hyperf AMQP)\nDESCRIPTION: This code defines an AMQP consumer `ReplyConsumer` that handles RPC replies. It consumes messages from the `hyperf` exchange with the routing key `hyperf` and queue `rpc.reply`. The `consumeMessage` method receives the message data, modifies it, and then uses the `$this->reply()` method to send the data back to the RPC client. It relies on the `Hyperf\\Amqp\\Annotation\\Consumer` annotation to define the consumer's properties.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/amqp.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Amqp\\Consumer;\n\nuse Hyperf\\Amqp\\Annotation\\Consumer;\nuse Hyperf\\Amqp\\Message\\ConsumerMessage;\nuse Hyperf\\Amqp\\Result;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n#[Consumer(exchange: \"hyperf\", routingKey: \"hyperf\", queue: \"rpc.reply\", name: \"ReplyConsumer\", nums: 1, enable: true)]\nclass ReplyConsumer extends ConsumerMessage\n{\n    public function consumeMessage($data, AMQPMessage $message): Result\n    {\n        $data['message'] .= 'Reply:' . $data['message'];\n\n        $this->reply($data, $message);\n\n        return Result::ACK;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Available Routing Methods in Hyperf\nDESCRIPTION: This code snippet lists the available routing methods in Hyperf, including methods for different HTTP request types and a method for registering routes for any HTTP method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/router.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\HttpServer\\Router\\Router;\n\n// Register the route of the HTTP METHOD consistent with the method name\nRouter::get($uri, $callback);\nRouter::post($uri, $callback);\nRouter::put($uri, $callback);\nRouter::patch($uri, $callback);\nRouter::delete($uri, $callback);\nRouter::head($uri, $callback);\n\n// Register the route of any HTTP METHOD\nRouter::addRoute($httpMethod, $uri, $callback);\n```\n\n----------------------------------------\n\nTITLE: Order By Statement - Hyperf PHP\nDESCRIPTION: Explains the use of `orderBy` method to sort the result set by a given field in Hyperf. The first parameter is the field to sort by, and the second is the sorting direction (`asc` or `desc`).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->orderBy('name', 'desc')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Adding Searchable Trait to a Model\nDESCRIPTION: Adds the `Hyperf\\Scout\\Searchable` trait to a model, enabling full-text search functionality. This trait registers a model observer that automatically synchronizes model data with the search index when the model is created, updated, or deleted.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\Database\\Model\\Model;\nuse Hyperf\\Scout\\Searchable;\n\nclass Post extends Model\n{\n    use Searchable;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Crontab Tasks via Schedule - PHP\nDESCRIPTION: This configuration in `config/crontabs.php` defines cron tasks using the `Hyperf\\Crontab\\Schedule` facade. It demonstrates defining command, call and closure based cron tasks with different options.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/crontab.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// config/crontabs.php\nuse Hyperf\\Crontab\\Schedule;\n\nSchedule::command('foo:bar')->setName('foo-bar')->setRule('* * * * *');\nSchedule::call([Foo::class, 'bar'])->setName('foo-bar')->setRule('* * * * *');\nSchedule::call(fn() => (new Foo)->bar())->setName('foo-bar')->setRule('* * * * *');\n```\n\n----------------------------------------\n\nTITLE: Multiple Local Middleware via Middlewares Annotation\nDESCRIPTION: This code snippet demonstrates defining multiple local middleware using the `#[Middlewares]` annotation.  It shows how to define multiple middleware classes within the array passed to the `#[Middlewares]` annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/middleware/middleware.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Middleware\\BarMiddleware;\nuse App\\Middleware\\FooMiddleware;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\HttpServer\\Annotation\\Middleware;\nuse Hyperf\\HttpServer\\Annotation\\Middlewares;\n\n#[AutoController]\n#[Middlewares([FooMiddleware::class, BarMiddleware::class])]\nclass IndexController\n{\n    public function index()\n    {\n        return 'Hello Hyperf.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying One-to-Many Relationship (PHP)\nDESCRIPTION: This code demonstrates how to apply additional constraints to a one-to-many relationship using the query builder. It retrieves a specific book for a user where the title matches a specific value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$book = User::query()->find(1)->books()->where('title', '一个月精通Hyperf框架')->first();\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Record to the Index\nDESCRIPTION: This code demonstrates adding a new model instance to the search index.  The `save` method on a model with the `Searchable` trait will automatically add or update the record in the search index.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$order = new App\\Order;\n\n// ...\n\n$order->save();\n```\n\n----------------------------------------\n\nTITLE: Configure WebSocket Server - PHP\nDESCRIPTION: This configuration snippet defines a WebSocket server in the `config/autoload/server.php` file. It specifies the server name, type, host, port, socket type, and callbacks for handling WebSocket events like handshakes, messages, and close events. This configuration is essential for setting up the WebSocket server within Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/websocket-server.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'servers' => [\n        [\n            'name' => 'ws',\n            'type' => Server::SERVER_WEBSOCKET,\n            'host' => '0.0.0.0',\n            'port' => 9502,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_HAND_SHAKE => [Hyperf\\WebSocketServer\\Server::class, 'onHandShake'],\n                Event::ON_MESSAGE => [Hyperf\\WebSocketServer\\Server::class, 'onMessage'],\n                Event::ON_CLOSE => [Hyperf\\WebSocketServer\\Server::class, 'onClose'],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a One-to-One Relationship in Hyperf\nDESCRIPTION: This code snippet defines a one-to-one relationship between a User model and a Role model using the hasOne method. It assumes that the Role model has a user_id foreign key referencing the User model's id. The role() method returns the result of the hasOne method, specifying the Role model class, the foreign key (user_id), and the local key (id).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/relationship.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    public function role()\n    {\n        return $this->hasOne(Role::class, 'user_id', 'id');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Hyperf WebSocket Client\nDESCRIPTION: This code demonstrates how to create a WebSocket client, send a message to a WebSocket server, and receive a response. It uses the ClientFactory to create a client object and then uses the push and recv methods to interact with the server.  It injects the ClientFactory dependency and specifies the server address.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/websocket-client.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\WebSocketClient\\ClientFactory;\nuse Hyperf\\WebSocketClient\\Frame;\n\nclass IndexController\n{\n    #[Inject]\n    protected ClientFactory $clientFactory;\n\n    public function index()\n    {\n        // 對端服務的地址，如沒有提供 ws:// 或 wss:// 前綴，則默認補充 ws://\n        $host = '127.0.0.1:9502';\n        // 通過 ClientFactory 創建 Client 對象，創建出來的對象為短生命週期對象\n        $client = $this->clientFactory->create($host);\n        // 向 WebSocket 服務端發送消息\n        $client->push('HttpServer 中使用 WebSocket Client 發送數據。');\n        // 獲取服務端響應的消息，服務端需要通過 push 向本客户端的 fd 投遞消息，才能獲取；以下設置超時時間 2s，接收到的數據類型為 Frame 對象。\n        /** @var Frame $msg */\n        $msg = $client->recv(2);\n        // 獲取文本數據：$res_msg->data\n        return $msg->data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Hyperf Commands with AsCommand Annotation (PHP)\nDESCRIPTION: This snippet demonstrates how to define command-line commands in Hyperf using the `AsCommand` annotation.  It shows how to define multiple commands within a single class using attributes, specifying the signature, description, and handler method for each command. The class utilizes `InteractsWithIO` trait to interact with input/output.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Service;\n\nuse Hyperf\\Command\\Annotation\\AsCommand;\nuse Hyperf\\Command\\Concerns\\InteractsWithIO;\n\n#[AsCommand(signature: 'foo:bar1', handle: 'bar1', description: 'The description of foo:bar1 command.')]\n#[AsCommand(signature: 'foo', description: 'The description of foo command.')]\nclass FooService\n{\n    use InteractsWithIO;\n\n    #[AsCommand(signature: 'foo:bar {--bar=1 : Bar Value}', description: 'The description of foo:bar command.')]\n    public function bar($bar)\n    {\n        $this->output?->info('Bar Value: ' . $bar);\n\n        return $bar;\n    }\n\n    public function bar1()\n    {\n        $this->output?->info(__METHOD__);\n    }\n\n    public function handle()\n    {\n        $this->output?->info(__METHOD__);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Queue Consumer Process\nDESCRIPTION: This code snippet shows how to configure the default asynchronous queue consumer process in the `config/autoload/processes.php` file. This process will listen for and consume messages from the queue.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    Hyperf\\AsyncQueue\\Process\\ConsumerProcess::class,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Batch Assignment: Defining guarded Attributes in Hyperf\nDESCRIPTION: This code defines the `$guarded` attribute on the `User` model, specifying which attributes cannot be mass-assigned.  This acts as a blacklist. In this example, the `gender_show` attribute cannot be mass-assigned. Note: You can only use either `$fillable` or `$guarded`, but not both.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected $guarded = ['gender_show'];\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Soft Deletes in Hyperf\nDESCRIPTION: This code shows how to enable soft deletes for a model by using the `Hyperf\\Database\\Model\\SoftDeletes` trait.  When a model is 'soft deleted', it is not actually removed from the database, but the `deleted_at` column is set to the current timestamp. Requires the `App\\Model\\User` model to be defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Model;\n\nuse Hyperf\\Database\\Model\\Model;\nuse Hyperf\\Database\\Model\\SoftDeletes;\n\nclass User extends Model\n{\n    use SoftDeletes;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Retry Annotation with Sleep and Exception Handling\nDESCRIPTION: This code demonstrates how to fully customize the `MyRetry` annotation by adding `SleepRetryPolicy`, configuring a base sleep time, backoff strategy, and specifying a custom exception (`TimeoutException`) to retry on.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/retry.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Annotation;\n\nuse Doctrine\\Common\\Annotations\\Annotation\\Target;\n\n#[Attribute(Attribute::TARGET_METHOD)]\nclass MyRetry extends \\Hyperf\\Retry\\Annotation\\Retry\n{\n    public $policies = [\n        MaxAttemptsRetryPolicy::class,\n        ClassifierRetryPolicy::class,\n        SleepRetryPolicy::class,\n    ];\n    public $maxAttempts = 3;\n    public $base = 100;\n    public $strategy = \\Hyperf\\Retry\\BackoffStrategy::class;\n    public $retryThrowables = [\\App\\Exception\\TimeoutException::class];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Whoops Exception Handler in Hyperf\nDESCRIPTION: This snippet demonstrates how to configure the Whoops exception handler in Hyperf. By specifying `\\Hyperf\\ExceptionHandler\\Handler\\WhoopsExceptionHandler::class` in the configuration file, all unhandled exceptions will be displayed using the Whoops error reporting tool.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/exception-handler.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// config/autoload/exceptions.php\nreturn [\n    'handler' => [\n        'http' => [\n            \\Hyperf\\ExceptionHandler\\Handler\\WhoopsExceptionHandler::class,\n        ],    \n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Chunked results with chunk() in Hyperf\nDESCRIPTION: This snippet illustrates how to use the `chunk()` method to process large database tables in smaller, more manageable chunks. It processes 100 user records at a time, ordered by 'id', using a closure to perform operations on each chunk of users.  This is useful for memory management when dealing with large datasets.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\nDb::table('user')->orderBy('id')->chunk(100, function ($users) {\n    foreach ($users as $user) {\n        //\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing UserInfo Caster in Hyperf (PHP)\nDESCRIPTION: This code shows the implementation of `UserInfoCaster` class, which implements the `CastsAttributes` interface to provide type casting between model attributes and a `UserInfo` value object.  It retrieves `name` and `gender` attributes and creates the object. It sets the `name` and `gender` values to attributes to be stored.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/mutators.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Caster;\n\nuse Hyperf\\Contract\\CastsAttributes;\nuse Hyperf\\Collection\\Arr;\n\nclass UserInfoCaster implements CastsAttributes\n{\n    public function get($model, string $key, $value, array $attributes): UserInfo\n    {\n        return new UserInfo($model, Arr::only($attributes, ['name', 'gender']));\n    }\n\n    public function set($model, string $key, $value, array $attributes)\n    {\n        return [\n            'name' => $value->name,\n            'gender' => $value->gender,\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining POST Endpoint with Swagger Annotations\nDESCRIPTION: This code snippet demonstrates how to define a POST endpoint with detailed Swagger documentation using annotations. It includes request body definition using `SA\\RequestBody` and response definition using `SA\\Response`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/swagger.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n#[SA\\Post(path: '/test', summary: 'POST 表单示例', tags: ['Api/Test'])]\n#[SA\\RequestBody(\n    description: '请求参数',\n    content: [\n        new SA\\MediaType(\n            mediaType: 'application/x-www-form-urlencoded',\n            schema: new SA\\Schema(\n                required: ['username', 'age'],\n                properties: [\n                    new SA\\Property(property: 'username', description: '用户名字段描述', type: 'string'),\n                    new SA\\Property(property: 'age', description: '年龄字段描述', type: 'string'),\n                    new SA\\Property(property: 'city', description: '城市字段描述', type: 'string'),\n                ]\n            ),\n        ),\n    ],\n)]\n#[SA\\Response(response: 200, description: '返回值的描述')]\npublic function test()\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Insert, Update, Delete in Hyperf (PHP)\nDESCRIPTION: This code demonstrates how to execute `INSERT`, `UPDATE`, and `DELETE` queries using the `Db` facade in Hyperf. The `insert` method returns a boolean indicating success, while `update` and `delete` return the number of affected rows. It also covers executing stored procedures.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/quick-start.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\DbConnection\\Db;\n\n$inserted = Db::insert('INSERT INTO user (id, name) VALUES (?, ?)', [1, 'Hyperf']); // 返回是否成功 bool\n\n$affected = Db::update('UPDATE user set name = ? WHERE id = ?', ['John', 1]); // 返回受影響的行數 int\n\n$affected = Db::delete('DELETE FROM user WHERE id = ?', [1]); // 返回受影響的行數 int\n\n$result = Db::statement(\"CALL pro_test(?, '?')\", [1, 'your words']);  // 返回 bool  CALL pro_test(?，?) 為存儲過程，屬性為 MODIFIES SQL DATA\n```\n\n----------------------------------------\n\nTITLE: Publishing a message using NATS\nDESCRIPTION: This PHP code snippet demonstrates how to publish a message to a NATS subject using the `publish` method provided by the `Hyperf\\Nats\\Driver\\DriverInterface`. It defines a `NatsController` with a `publish` action that publishes a message to the `hyperf.demo` subject.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nats.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Nats\\Driver\\DriverInterface;\n\n#[AutoController(prefix: \"nats\")]\nclass NatsController extends AbstractController\n{\n    #[Inject]\n    protected DriverInterface $nats;\n\n    public function publish()\n    {\n        $res = $this->nats->publish('hyperf.demo', [\n            'id' => 'Hyperf',\n        ]);\n\n        return $this->response->success($res);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Concurrent Example for Limiting Concurrent Execution\nDESCRIPTION: This example shows how to use the `Concurrent` class to control the number of coroutines executing within a block of code. The `Concurrent` class ensures that only 10 coroutines are running simultaneously, which can be useful for managing resource usage or preventing overload.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/coroutine.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Coroutine\\Concurrent;\n\n$concurrent = new Concurrent(10);\n\nfor ($i = 0; $i < 15; ++$i) {\n    $concurrent->create(function () {\n        // Do something...\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a ConfigProvider Class PHP\nDESCRIPTION: This code snippet demonstrates how to define a ConfigProvider class in Hyperf. The `__invoke` method returns an array containing configuration for dependencies, annotations, commands, listeners, publishable files, and other configurations. These configurations are merged into the `Hyperf\\Contract\\ConfigInterface` implementation during the framework's startup.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/component-guide/configprovider.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Hyperf\\Foo;\n\nclass ConfigProvider\n{\n    public function __invoke(): array\n    {\n        return [\n            // 合併到  config/autoload/dependencies.php 檔案\n            'dependencies' => [],\n            // 合併到  config/autoload/annotations.php 檔案\n            'annotations' => [\n                'scan' => [\n                    'paths' => [\n                        __DIR__,\n                    ],\n                ],\n            ],\n            // 預設 Command 的定義，合併到 Hyperf\\Contract\\ConfigInterface 內，換個方式理解也就是與 config/autoload/commands.php 對應\n            'commands' => [],\n            // 與 commands 類似\n            'listeners' => [],\n            // 元件預設配置檔案，即執行命令後會把 source 的對應的檔案複製為 destination 對應的的檔案\n            'publish' => [\n                [\n                    'id' => 'config',\n                    'description' => 'description of this config file.', // 描述\n                    // 建議預設配置放在 publish 資料夾中，檔案命名和元件名稱相同\n                    'source' => __DIR__ . '/../publish/file.php',  // 對應的配置檔案路徑\n                    'destination' => BASE_PATH . '/config/autoload/file.php', // 複製為這個路徑下的該檔案\n                ],\n            ],\n            // 亦可繼續定義其它配置，最終都會合併到與 ConfigInterface 對應的配置儲存器中\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Validator Manually\nDESCRIPTION: This code demonstrates how to manually create a validator instance using the `ValidatorFactoryInterface`. It injects the factory, then uses the `make` method to create a validator instance, passing the data, rules, and custom messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\Validation\\Contract\\ValidatorFactoryInterface;\n\nclass IndexController\n{\n    #[Inject]\n    protected ValidatorFactoryInterface $validationFactory;\n\n    public function foo(RequestInterface $request)\n    {\n        $validator = $this->validationFactory->make(\n            $request->all(),\n            [\n                'foo' => 'required',\n                'bar' => 'required',\n            ],\n            [\n                'foo.required' => 'foo is required',\n                'bar.required' => 'bar is required',\n            ]\n        );\n\n        if ($validator->fails()){\n            // Handle exception\n            $errorMessage = $validator->errors()->first();\n        }\n        // Do something\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Queue Controller for Annotation Message Delivery\nDESCRIPTION: Defines a controller action for invoking the annotated asynchronous queue message handler. This simplifies message delivery to the queue by directly calling the method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse App\\Service\\QueueService;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass QueueController extends AbstractController\n{\n    #[Inject]\n    protected QueueService $service;\n\n    /**\n     * 注解模式投递消息\n     */\n    public function example()\n    {\n        $this->service->example([\n            'group@hyperf.io',\n            'https://doc.hyperf.io',\n            'https://www.hyperf.io',\n        ]);\n\n        return 'success';\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Controller and RequestMapping Annotations in Hyperf\nDESCRIPTION: This snippet demonstrates how to use the `#[Controller]` and `#[RequestMapping]` annotations in Hyperf to define a route with specific HTTP methods and paths. It generates a `/user/index` route for the `index` method that accepts GET or POST requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/router.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\n\n#[Controller]\nclass UserController\n{\n    // Hyperf 會自動為此方法生成一個 /user/index 的路由，允許通過 GET 或 POST 方式請求\n    #[RequestMapping(path: \"index\", methods: \"get,post\")]\n    public function index(RequestInterface $request)\n    {\n        // 從請求中獲得 id 參數\n        $id = $request->input('id', 1);\n        return (string)$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Data with Native SQL in Hyperf (PHP)\nDESCRIPTION: This snippet demonstrates how to modify data using native SQL statements within the Hyperf framework.  It includes examples for INSERT, UPDATE, DELETE, and executing stored procedures using the `Db::insert()`, `Db::update()`, `Db::delete()`, and `Db::statement()` methods, respectively.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/quick-start.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\DbConnection\\Db;\n\n$inserted = Db::insert('INSERT INTO user (id, name) VALUES (?, ?)', [1,'Hyperf']); // Returns whether it is successful bool\n\n$affected = Db::update('UPDATE user set name =? WHERE id = ?', ['John', 1]); // Returns the number of affected rows int\n\n$affected = Db::delete('DELETE FROM user WHERE id = ?', [1]); // Returns the number of affected rows int\n\n$result = Db::statement(\"CALL pro_test(?,'?')\", [1,'your words']); // return bool CALL pro_test(?,?) is a stored procedure, the attribute is MODIFIES SQL DATA\n```\n\n----------------------------------------\n\nTITLE: Encapsulating Log Class in Hyperf\nDESCRIPTION: This code demonstrates how to create a custom Log class in Hyperf that provides a static interface for accessing Logger instances. It uses the ApplicationContext to retrieve the LoggerFactory and obtain a Logger instance by name, simplifying the logging process throughout the application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/logger.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\Logger\\Logger;\nuse Hyperf\\Context\\ApplicationContext;\n\n\nclass Log\n{\n    public static function get(string $name = 'app')\n    {\n        return ApplicationContext::getContainer()->get(\\Hyperf\\Logger\\LoggerFactory::class)->get($name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Socket.IO Events Manually in Hyperf (PHP)\nDESCRIPTION: This code snippet demonstrates how to manually register Socket.IO events within a Hyperf controller without relying on annotations. It defines a WebSocketController that extends BaseNamespace and registers an 'event' event handler within the constructor. The handler echoes the received data back to the client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/socketio-server.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\SocketIOServer\\BaseNamespace;\nuse Hyperf\\SocketIOServer\\SidProvider\\SidProviderInterface;\nuse Hyperf\\SocketIOServer\\Socket;\nuse Hyperf\\WebSocketServer\\Sender;\n\nclass WebSocketController extends BaseNamespace\n{\n    public function __construct(Sender $sender, SidProviderInterface $sidProvider) {\n        parent::__construct($sender,$sidProvider);\n        $this->on('event', [$this,'echo']);\n    }\n\n    public function echo(Socket $socket, $data)\n    {\n        $socket->emit('event', $data);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calling gRPC Service from Client\nDESCRIPTION: This PHP code demonstrates how to call the 'sayHello' gRPC method from a client. It creates a 'HiClient' instance, creates a 'HiUser' request object, calls the 'sayHello' method, and retrieves the response.  It retrieves the message from the response and returns it.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/grpc.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\npublic function hello()\n{\n    // 這個client是協程安全的，可以複用\n    $client = new \\App\\Grpc\\HiClient('127.0.0.1:9503', [\n        'credentials' => null,\n    ]);\n\n    $request = new \\Grpc\\HiUser();\n    $request->setName('hyperf');\n    $request->setSex(1);\n\n    /**\n     * @var \\Grpc\\HiReply $reply\n     */\n    list($reply, $status) = $client->sayHello($request);\n\n    $message = $reply->getMessage();\n    $user = $reply->getUser();\n    \n    var_dump(memory_get_usage(true));\n    return $message;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating JSON field in Hyperf\nDESCRIPTION: This snippet shows how to update a JSON field in a database table using Hyperf's query builder.  This updates the 'options->enabled' to true for user with ID 1. Requires MySQL 5.7+.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('id', 1)->update(['options->enabled' => true]);\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Metric via Composer\nDESCRIPTION: This command installs the hyperf/metric component, which provides metrics collection and reporting capabilities for Hyperf applications. It includes Prometheus dependencies by default. Additional composer require commands are provided for StatsD and InfluxDB dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/metric\n```\n\n----------------------------------------\n\nTITLE: Restricting Alpha Numeric Validation to ASCII\nDESCRIPTION: This example demonstrates how to restrict the alpha_num validation rule to only allow ASCII characters (a-z and A-Z) and numbers. It uses the ascii option.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n'username' => 'alpha_num:ascii',\n```\n\n----------------------------------------\n\nTITLE: Decrement Field Value in Hyperf PHP\nDESCRIPTION: Decrements the 'votes' column in the 'users' table. The first example decrements by 1, while the second decrements by 5.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->decrement('votes');\n\nDb::table('users')->decrement('votes', 5);\n```\n\n----------------------------------------\n\nTITLE: Filesystem Configuration (PHP)\nDESCRIPTION: This PHP code provides a detailed configuration example for the Hyperf filesystem, defining various storage drivers like local, FTP, memory, S3, MinIO, OSS, Qiniu, and COS.  It includes the necessary credentials and settings for each driver, pulled from environment variables.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/filesystem.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    // 选择storage下对应驱动的键即可。\n    'default' => 'local',\n    'storage' => [\n        'local' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\LocalAdapterFactory::class,\n            'root' => __DIR__ . '/../../runtime',\n        ],\n        'ftp' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\FtpAdapterFactory::class,\n            'host' => 'ftp.example.com',\n            'username' => 'username',\n            'password' => 'password',\n\n            /* optional config settings */\n            'port' => 21,\n            'root' => '/path/to/root',\n            'passive' => true,\n            'ssl' => true,\n            'timeout' => 30,\n            'ignorePassiveAddress' => false,\n        ],\n        'memory' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\MemoryAdapterFactory::class,\n        ],\n        's3' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\S3AdapterFactory::class,\n            'credentials' => [\n                'key' => env('S3_KEY'),\n                'secret' => env('S3_SECRET'),\n            ],\n            'region' => env('S3_REGION'),\n            'version' => 'latest',\n            'bucket_endpoint' => false,\n            'use_path_style_endpoint' => false,\n            'endpoint' => env('S3_ENDPOINT'),\n            'bucket_name' => env('S3_BUCKET'),\n        ],\n        'minio' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\S3AdapterFactory::class,\n            'credentials' => [\n                'key' => env('S3_KEY'),\n                'secret' => env('S3_SECRET'),\n            ],\n            'region' => env('S3_REGION'),\n            'version' => 'latest',\n            'bucket_endpoint' => false,\n            'use_path_style_endpoint' => true,\n            'endpoint' => env('S3_ENDPOINT'),\n            'bucket_name' => env('S3_BUCKET'),\n        ],\n        'oss' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\AliyunOssAdapterFactory::class,\n            'accessId' => env('OSS_ACCESS_ID'),\n            'accessSecret' => env('OSS_ACCESS_SECRET'),\n            'bucket' => env('OSS_BUCKET'),\n            'endpoint' => env('OSS_ENDPOINT'),\n            // 'timeout'        => 3600,\n            // 'connectTimeout' => 10,\n            // 'isCName'        => false,\n            // 'token'          => '',\n        ],\n        'qiniu' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\QiniuAdapterFactory::class,\n            'accessKey' => env('QINIU_ACCESS_KEY'),\n            'secretKey' => env('QINIU_SECRET_KEY'),\n            'bucket' => env('QINIU_BUCKET'),\n            'domain' => env('QINIU_DOMAIN'),\n        ],\n        'cos' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\CosAdapterFactory::class,\n            'region' => env('COS_REGION'),\n            // overtrue/flysystem-cos ^2.0 配置如下\n            'credentials' => [\n                'appId' => env('COS_APPID'),\n                'secretId' => env('COS_SECRET_ID'),\n                'secretKey' => env('COS_SECRET_KEY'),\n            ],\n            // overtrue/flysystem-cos ^3.0 配置如下\n            'app_id' => env('COS_APPID'),\n            'secret_id' => env('COS_SECRET_ID'),\n            'secret_key' => env('COS_SECRET_KEY'),\n            // 可选，如果 bucket 为私有访问请打开此项\n            // 'signed_url' => false,\n            'bucket' => env('COS_BUCKET'),\n            'read_from_cdn' => false,\n            // 'timeout'         => 60,\n            // 'connect_timeout' => 60,\n            // 'cdn'             => '',\n            // 'scheme'          => 'https',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Subjoin query using joinSub\nDESCRIPTION: This code shows the use of `joinSub` to join a query as a subquery. It constructs a subquery that selects the latest post creation date for each user and then joins it with the 'users' table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$latestPosts = Db::table('posts')\n    ->select('user_id', Db::raw('MAX(created_at) as last_post_created_at'))\n    ->where('is_published', true)\n    ->groupBy('user_id');\n\n$users = Db::table('users')\n    ->joinSub($latestPosts, 'latest_posts', function($join) {\n        $join->on('users.id', '=', 'latest_posts.user_id');\n    })->get();\n```\n\n----------------------------------------\n\nTITLE: Renaming a Column in Schema\nDESCRIPTION: This code snippet demonstrates how to rename a column using the `renameColumn` method within a Schema builder. It takes two arguments: the current column name ('from') and the desired new column name ('to').\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nSchema::table('users', function (Blueprint $table) {\n    // 將欄位從 from 重新命名為 to\n    $table->renameColumn('from', 'to')->change();\n});\n```\n\n----------------------------------------\n\nTITLE: Default Bootstrap File for Unit Tests\nDESCRIPTION: This PHP code snippet represents a default bootstrap file for Hyperf unit tests. It sets up error reporting, timezone, defines constants, enables coroutines, loads the autoloader, initializes the class loader, and gets the application container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/testing.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nerror_reporting(E_ALL);\ndate_default_timezone_set('Asia/Shanghai');\n\n! defined('BASE_PATH') && define('BASE_PATH', dirname(__DIR__, 1));\n! defined('SWOOLE_HOOK_FLAGS') && define('SWOOLE_HOOK_FLAGS', SWOOLE_HOOK_ALL);\n\nSwoole\\Runtime::enableCoroutine(true);\n\nrequire BASE_PATH.'/vendor/autoload.php';\n\nHyperf\\Di\\ClassLoader::init();\n\n$container = require BASE_PATH.'/config/container.php';\n\n$container->get(Hyperf\\Contract\\ApplicationInterface::class);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Handlers with References - PHP\nDESCRIPTION: This configuration defines multiple Monolog handlers by referencing named configurations. The 'default' log group references 'single' and 'daily' handlers. The 'single' handler logs to 'hyperf.log' using LineFormatter, while the 'daily' handler logs to 'hyperf-debug.log' using JsonFormatter. It utilizes the Monolog StreamHandler.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/logger.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Monolog\\Handler;\nuse Monolog\\Formatter;\nuse Monolog\\Level;\n\nreturn [\n    'default' => [\n        'handlers' => ['single', 'daily'],\n    ],\n\n    'single' => [\n        'handler' => [\n            'class' => Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => BASE_PATH . '/runtime/logs/hyperf.log',\n                'level' => Level::Info,\n            ],\n        ],\n        'formatter' => [\n            'class' => Formatter\\LineFormatter::class,\n            'constructor' => [\n                'format' => null,\n                'dateFormat' => null,\n                'allowInlineLineBreaks' => true,\n            ],\n        ],\n    ],\n\n    'daily' => [\n        'handler' => [\n            'class' => Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => BASE_PATH . '/runtime/logs/hyperf-debug.log',\n                'level' => Level::Info,\n            ],\n        ],\n        'formatter' => [\n            'class' => Formatter\\JsonFormatter::class,\n            'constructor' => [\n                'batchMode' => Formatter\\JsonFormatter::BATCH_MODE_JSON,\n                'appendNewline' => true,\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Customize CoreMiddleware Configuration - Hyperf - PHP\nDESCRIPTION: This snippet demonstrates how to configure the dependency injection container to use the customized CoreMiddleware class instead of the default one. It involves defining an object relationship in `config/autoload/dependencies.php` to map the original CoreMiddleware to the custom implementation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/middleware/middleware.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\HttpServer\\CoreMiddleware::class => App\\Middleware\\CoreMiddleware::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Requests in WebSocket Server\nDESCRIPTION: This code shows how to configure a WebSocket server to also handle HTTP requests. It defines a singleton config for `HttpServer` and modifies the `callbacks` configuration to include `onRequest` to be handled by the `HttpServer`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/websocket-server.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'HttpServer' => Hyperf\\HttpServer\\Server::class,\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\nuse Hyperf\\Server\\Server;\n\nreturn [\n    'mode' => SWOOLE_BASE,\n    'servers' => [\n        [\n            'name' => 'ws',\n            'type' => Server::SERVER_WEBSOCKET,\n            'host' => '0.0.0.0',\n            'port' => 9502,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => ['HttpServer', 'onRequest'],\n                Event::ON_HAND_SHAKE => [Hyperf\\WebSocketServer\\Server::class, 'onHandShake'],\n                Event::ON_MESSAGE => [Hyperf\\WebSocketServer\\Server::class, 'onMessage'],\n                Event::ON_CLOSE => [Hyperf\\WebSocketServer\\Server::class, 'onClose'],\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: NSQ Consumer Implementation with Annotation\nDESCRIPTION: This code defines an NSQ consumer using the `Hyperf\\Nsq\\Annotation\\Consumer` annotation. It extends the `Hyperf\\Nsq\\AbstractConsumer` class and implements the `consume` method to process incoming messages. The annotation specifies the topic, channel, consumer name, and number of processes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nsq.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Nsq\\Consumer;\n\nuse Hyperf\\Nsq\\AbstractConsumer;\nuse Hyperf\\Nsq\\Annotation\\Consumer;\nuse Hyperf\\Nsq\\Message;\nuse Hyperf\\Nsq\\Result;\n\n#[Consumer(topic: \"hyperf\", channel: \"hyperf\", name: \"DemoNsqConsumer\", nums: 1)]\nclass DemoNsqConsumer extends AbstractConsumer\n{\n    public function consume(Message $payload): string \n    {\n        var_dump($payload->getBody());\n\n        return Result::ACK;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Data Access Object (DAO)\nDESCRIPTION: This snippet demonstrates how to test a DAO using PHPUnit. It retrieves a DAO instance from the container, calls the `first` method, and asserts that the returned model has the expected ID.  It uses `var_dump` for debugging.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/testing.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace HyperfTest\\Cases;\n\nuse HyperfTest\\HttpTestCase;\nuse App\\Service\\Dao\\UserDao;\n/**\n * @internal\n * @coversNothing\n */\nclass UserTest extends HttpTestCase\n{\n    public function testUserDaoFirst()\n    {\n        $model = \\Hyperf\\Context\\ApplicationContext::getContainer()->get(UserDao::class)->first(1);\n\n        var_dump($model);\n\n        $this->assertSame(1, $model->id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Constants with Annotations in PHP\nDESCRIPTION: This snippet defines an enum class `ErrorCode` in PHP, using annotations from the `Hyperf\\Constants` package. It utilizes `#[Constants]` to mark it as an enum, `#[Message]` to associate messages with each enum case, and the `EnumConstantsTrait` for added functionality.  The code defines two error codes, SERVER_ERROR and SYSTEM_INVALID, along with their associated messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/constants.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Constants;\n\nuse Hyperf\\Constants\\Annotation\\Constants;\nuse Hyperf\\Constants\\Annotation\\Message;\nuse Hyperf\\Constants\\EnumConstantsTrait;\n\n#[Constants]\nenum ErrorCode: int\n{\n    use EnumConstantsTrait;\n\n    #[Message(\"Server Error!\")]\n    case SERVER_ERROR = 500;\n\n    #[Message(\"System parameter error\")]\n    case SYSTEM_INVALID = 700;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Routes in Hyperf Nano\nDESCRIPTION: Demonstrates how to define routes using the `$app` instance in Hyperf Nano.  This example shows how to create route groups and define routes with parameter constraints. Requires the `hyperf/nano` package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nano.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addGroup('/nano', function () use ($app) {\n    $app->addRoute(['GET', 'POST'], '/{id:\\d+}', function($id) {\n        return '/nano/'.$id;\n    });\n    $app->put('/{name:.+}', function($name) {\n        return '/nano/'.$name;\n    });\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Restore or Create Model\nDESCRIPTION: Demonstrates how to use the `restoreOrCreate` method to find a soft deleted model by given attributes and restore it. If the model doesn't exist, it's created. The example uses 'name' and additional attributes like 'gender' and 'age'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n// 透過 name 查詢使用者，不存在則使用 name 和 gender, age 屬性建立...\n$user = User::restoreOrCreate(\n    ['name' => 'Hyperf'],\n    ['gender' => 1, 'age' => 20]\n);\n\n```\n\n----------------------------------------\n\nTITLE: Chunking Results with chunk() in Hyperf\nDESCRIPTION: Explains how to process large datasets efficiently using the `chunk()` method, which retrieves records in smaller batches and applies a closure to each batch. It is useful when dealing with a large number of records.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\nDb::table('user')->orderBy('id')->chunk(100, function ($users) {\n    foreach ($users as $user) {\n        //\n    }\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\DbConnection\\Db;\n\nDb::table('user')->orderBy('id')->chunk(100, function ($users) {\n\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Reusing Configuration with PHP Loops - Hyperf\nDESCRIPTION: This snippet demonstrates how to dynamically generate service consumer configurations using PHP loops. It defines a `$services` array containing service names and interfaces, then iterates through this array to create consumer configurations, including the 'name', 'service', and 'registry' settings. This allows for flexible and automated configuration generation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/json-rpc.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    // 此處省略了其它同層級的配置\n    'consumers' => value(function () {\n        $consumers = [];\n        // 這裡示例自動建立代理消費者類的配置形式，顧存在 name 和 service 兩個配置項，這裡的做法不是唯一的，僅說明可以透過 PHP 程式碼來生成配置\n        // 下面的 FooServiceInterface 和 BarServiceInterface 僅示例多服務，並不是在文件示例中真實存在的\n        $services = [\n            'FooService' => App\\JsonRpc\\FooServiceInterface::class,\n            'BarService' => App\\JsonRpc\\BarServiceInterface::class,\n        ];\n        foreach ($services as $name => $interface) {\n            $consumers[] = [\n                'name' => $name,\n                'service' => $interface,\n                'registry' => [\n                   'protocol' => 'consul',\n                   'address' => 'http://127.0.0.1:8500',\n                ]\n            ];\n        }\n        return $consumers;\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Model with Batch Assignment in Hyperf\nDESCRIPTION: This snippet demonstrates how to create a new model instance using the `create` method with batch assignment. It creates a new `User` model and sets the `name` attribute using an array.  The `$fillable` attribute must be defined on the model to allow mass assignment. Requires the `App\\Model\\User` model to be defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Model\\User;\n\n$user = User::create(['name' => 'Hyperf']);\n```\n\n----------------------------------------\n\nTITLE: Unique Validation Ignoring a Model Instance\nDESCRIPTION: Demonstrates using `Rule::unique()` with `ignore()` by passing a model instance. The component automatically extracts the primary key value from the model instance for the ignore operation. The rule also requires 'users' table name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\nRule::unique('users')->ignore($user)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Business Exception Class in PHP\nDESCRIPTION: This code defines a custom exception class `BusinessException` that extends `Hyperf\\Server\\Exception\\ServerException`. It accepts an `ErrorCode` enum or an integer as the error code, and an optional message. If no message is provided, it retrieves the message from the `ErrorCode` enum or the `ErrorCode` class based on the provided code.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/constants.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Exception;\n\nuse App\\Constants\\ErrorCode;\nuse Hyperf\\Server\\Exception\\ServerException;\nuse Throwable;\n\nclass BusinessException extends ServerException\n{\n    public function __construct(ErrorCode|int $code = 0, ?string $message = null, ?Throwable $previous = null)\n    {\n        if (is_null($message)) {\n            if ($code instanceof ErrorCode) {\n                $message = $code->getMessage();\n            } else {\n                $message = ErrorCode::getMessage($code);\n            }\n        }\n\n        $code = $code instanceof ErrorCode ? $code->value : $code;\n\n        parent::__construct($message, $code, $previous);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Delete Model by Primary Key\nDESCRIPTION: Illustrates deleting models directly by their primary keys using the `destroy` static method.  The method accepts a single primary key, an array of primary keys, or a collection of primary keys. This avoids the need to first retrieve the model from the database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Model\\User;\n\nUser::destroy(1);\n\nUser::destroy([1,2,3]);\n\n```\n\n----------------------------------------\n\nTITLE: Task Execution via Annotation (Hyperf)\nDESCRIPTION: This example demonstrates how to use the `#[Task]` annotation to dispatch a task. The `AnnotationTask` class has a `handle` method annotated with `#[Task]`. When the `handle` method is called in the Worker process, it's automatically dispatched to the Task process and waits for the result.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/task.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Coroutine\\Coroutine;\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\Task\\Annotation\\Task;\n\nclass AnnotationTask\n{\n    #[Task]\n    public function handle($cid)\n    {\n        return [\n            'worker.cid' => $cid,\n            // task_enable_coroutine=false 時返回 -1，反之 返回對應的協程 ID\n            'task.cid' => Coroutine::id(),\n        ];\n    }\n}\n\n$container = ApplicationContext::getContainer();\n$task = $container->get(AnnotationTask::class);\n$result = $task->handle(Coroutine::id());\n```\n\n----------------------------------------\n\nTITLE: Configuring Jaeger Tracer in Hyperf\nDESCRIPTION: This code shows how to configure the Jaeger tracer within the 'config/autoload/opentracing.php' file. It defines the application name, sampler type and parameters, and the address of the local Jaeger agent.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tracer.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Tracer\\Adapter\\JaegerTracerFactory;\nuse const Jaeger\\SAMPLER_TYPE_CONST;\n\nreturn [\n    // 选择默认的 Tracer\n    'default' => env('TRACER_DRIVER', 'jaeger'),\n\n    // 这里的代码演示不对 enable 内的配置进行展开\n    'enable' => [],\n\n    'tracer' => [\n        // Jaeger 驱动配置\n        'jaeger' => [\n            'driver' => JaegerTracerFactory::class,\n            // 项目名称\n            'name' => env('APP_NAME', 'skeleton'),\n            'options' => [\n                // 采样器，默认为所有请求的都追踪\n                'sampler' => [\n                    'type' => SAMPLER_TYPE_CONST,\n                    'param' => true,\n                ],\n                // 上报地址\n                'local_agent' => [\n                    'reporting_host' => env('JAEGER_REPORTING_HOST', 'localhost'),\n                    'reporting_port' => env('JAEGER_REPORTING_PORT', 5775),\n                ],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Date Validation After a Given Date in Hyperf\nDESCRIPTION: This snippet demonstrates how to validate if a date field is after a given date using the `after` rule in Hyperf. It shows how to specify a date string and another field for comparison.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n'start_date' => 'required|date|after:tomorrow'\n```\n\n----------------------------------------\n\nTITLE: Ordering Results with orderBy - PHP\nDESCRIPTION: This snippet demonstrates how to sort the result set by a given field using the `orderBy` method. The first parameter specifies the field to sort by, and the second parameter specifies the sorting direction ('asc' or 'desc').\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->orderBy('name', 'desc')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Generated Model Example\nDESCRIPTION: This is an example of a model generated by the `gen:model` command. It demonstrates setting the table name, fillable attributes, and casts. The model extends `Hyperf\\DbConnection\\Model\\Model`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\n/**\n * @property $id\n * @property $name\n * @property $gender\n * @property $created_at\n * @property $updated_at\n */\nclass User extends Model\n{\n    /**\n     * The table associated with the model.\n     * \n     * @var string\n     */\n    protected ?string $table = 'user';\n\n    /**\n     * The attributes that are mass assignable.\n     * \n     * @var array\n     */\n    protected array $fillable = ['id', 'name', 'gender', 'created_at', 'updated_at'];\n\n    /**\n     * The attributes that should be cast to native types.\n     * \n     * @var array\n     */\n    protected array $casts = ['id' => 'integer', 'gender' => 'integer'];\n}\n```\n\n----------------------------------------\n\nTITLE: Where In/Not In Clauses with whereIn()/whereNotIn() in Hyperf\nDESCRIPTION: Demonstrates how to use the `whereIn()` and `whereNotIn()` methods to filter records based on whether a column's value is present in or absent from a given array of values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->whereIn('id', [1, 2, 3])->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->whereNotIn('id', [1, 2, 3])->get();\n```\n\n----------------------------------------\n\nTITLE: Deleting Session Data\nDESCRIPTION: This snippet demonstrates how to delete one or more data entries from the session using the `forget()` method of the `SessionInterface`.  It can accept either a single key (string) or an array of keys (strings) to remove multiple entries at once.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/session.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$this->session->forget('foo');\n$this->session->forget(['foo', 'bar']);\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters via RequestInterface in Hyperf\nDESCRIPTION: This snippet demonstrates how to retrieve route parameters within a controller method using the `RequestInterface`. The `route` method retrieves the value of the 'id' parameter, returning null or a default value if the parameter is not present.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/router.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\npublic function index(RequestInterface $request)\n{\n        // 存在则返回，不存在则返回默认值 null\n        $id = $request->route('id');\n        // 存在则返回，不存在则返回默认值 0\n        $id = $request->route('id', 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Configure app_env and scan_cacheable in config.php\nDESCRIPTION: This snippet shows how to configure the `app_env` and `scan_cacheable` options in the `config/config.php` file. Setting `scan_cacheable` to `true` will skip the annotation scanning process during startup, optimizing the startup time and reducing memory usage. The `app_env` setting determines the application environment (e.g., prod, dev).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.0.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    // 生產環境使用 prod 值\n    'app_env' => env('APP_ENV', 'dev'),\n    // 是否使用註解掃描緩存\n    'scan_cacheable' => env('SCAN_CACHEABLE', false),\n];\n\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Client - PHP\nDESCRIPTION: Configures the client settings for an RPC service consumer in Hyperf. It specifies the service name, interface class, protocol, load balancer, and node information. Options include connect timeout, receive timeout, maximum package length, retry count, retry interval, client count for multiplexing, and heartbeat interval. Defines how the client connects to the RPC service.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/rpc-multiplex/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'consumers' => [\n        [\n            'name' => 'CalculatorService',\n            'service' => App\\JsonRpc\\CalculatorServiceInterface::class,\n            'id' => App\\JsonRpc\\CalculatorServiceInterface::class,\n            'protocol' => Hyperf\\RpcMultiplex\\Constant::PROTOCOL_DEFAULT,\n            'load_balancer' => 'random',\n            'nodes' => [\n                ['host' => '127.0.0.1', 'port' => 9502],\n            ],\n            'options' => [\n                'connect_timeout' => 5.0,\n                'recv_timeout' => 5.0,\n                'settings' => [\n                    // 包体最大值，若小于 Server 返回的数据大小，则会抛出异常，故尽量控制包体大小\n                    'package_max_length' => 1024 * 1024 * 2,\n                ],\n                // 重试次数，默认值为 2\n                'retry_count' => 2,\n                // 重试间隔，毫秒\n                'retry_interval' => 100,\n                // 多路复用客户端数量\n                'client_count' => 4,\n                // 心跳间隔 非 numeric 表示不开启心跳\n                'heartbeat' => 30,\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Build and Run a DAG with Hyperf\nDESCRIPTION: This code demonstrates how to create a DAG, add vertices representing tasks (using closures that simulate work with `sleep` and `echo`), define dependencies between tasks using edges, and run the DAG in a coroutine environment.  Each task outputs a letter, and the order reflects the DAG's execution schedule.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/dag.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$dag = new \\Hyperf\\Dag\\Dag();\n$a = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"A\\n\";});\n$b = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"B\\n\";});\n$c = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"C\\n\";});\n$d = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"D\\n\";});\n$e = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"E\\n\";});\n$f = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"F\\n\";});\n$g = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"G\\n\";});\n$h = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"H\\n\";});\n$i = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"I\\n\";});\n$dag->addVertex($a)\n    ->addVertex($b)\n    ->addVertex($c)\n    ->addVertex($d)\n    ->addVertex($e)\n    ->addVertex($f)\n    ->addVertex($g)\n    ->addVertex($h)\n    ->addVertex($i)\n    ->addEdge($a, $b)\n    ->addEdge($a, $c)\n    ->addEdge($a, $d)\n    ->addEdge($b, $h)\n    ->addEdge($b, $e)\n    ->addEdge($b, $f)\n    ->addEdge($c, $f)\n    ->addEdge($c, $g)\n    ->addEdge($d, $g)\n    ->addEdge($h, $i)\n    ->addEdge($e, $i)\n    ->addEdge($f, $i)\n    ->addEdge($g, $i);\n    \n// 需要在協程環境下執行\n$dag->run()\n```\n\n----------------------------------------\n\nTITLE: Use WebSocket Connection Context\nDESCRIPTION: This code demonstrates how to use the connection-level context in a WebSocket controller.  It uses the `Hyperf\\WebSocketServer\\Context` class to store and retrieve data specific to a WebSocket connection.  In the `onOpen` method, it sets the 'username' context variable using data from the request's cookies. In the `onMessage` method, it retrieves the 'username' from the context and includes it in the message sent back to the client. Connection context is used because `onOpen`, `onMessage` and `onClose` are not triggered under the same coroutine.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/websocket-server.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnMessageInterface;\nuse Hyperf\\Contract\\OnOpenInterface;\nuse Hyperf\\Engine\\WebSocket\\Frame;\nuse Hyperf\\Engine\\WebSocket\\Response;\nuse Hyperf\\WebSocketServer\\Context;\nuse Swoole\\WebSocket\\Server as WebSocketServer;\n\nclass WebSocketController implements OnMessageInterface, OnOpenInterface\n{\n    public function onMessage($server, $frame): void\n    {\n        $response = (new Response($server))->init($frame);\n        $response->push(new Frame(payloadData: 'Username: ' . Context::get('username')));\n    }\n\n    public function onOpen($server, $request): void\n    {\n        Context::set('username', $request->cookie['username']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure VALUE_NONE Option (PHP)\nDESCRIPTION: This code configures an option 'opt' (or -o) as a flag (VALUE_NONE). The `handle` method retrieves the option's boolean value, indicating if the option was present when the command was executed. This demonstrates defining boolean options.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addOption('opt', 'o', InputOption::VALUE_NONE, 'Whether to optimize');\n}\n\npublic function handle()\n{\n    var_dump($this->input->getOption('opt'));\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Async Queue Configurations\nDESCRIPTION: Demonstrates using multiple configurations for the Hyperf asynchronous queue to handle different priority queues.  This allows segregating tasks into different queues, such as a 'fast' queue for high-priority jobs.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => Hyperf\\AsyncQueue\\Driver\\RedisDriver::class,\n        'redis' => [\n            'pool' => 'default'\n        ],\n        'channel' => 'queue',\n        'timeout' => 2,\n        'retry_seconds' => 5,\n        'handle_timeout' => 10,\n        'processes' => 1,\n        'concurrent' => [\n            'limit' => 5,\n        ],\n    ],\n    'fast' => [\n        'driver' => Hyperf\\AsyncQueue\\Driver\\RedisDriver::class,\n        'redis' => [\n            'pool' => 'default'\n        ],\n        'channel' => '{queue:fast}',\n        'timeout' => 2,\n        'retry_seconds' => 5,\n        'handle_timeout' => 10,\n        'processes' => 1,\n        'concurrent' => [\n            'limit' => 5,\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Defining an AMQP Producer\nDESCRIPTION: This PHP code defines an AMQP producer class named DemoProducer. It extends `ProducerMessage`, uses the `Producer` annotation to specify the exchange and routing key, and constructs the payload from a user ID using the `User` model.  It requires the `Hyperf\\Amqp\\Annotation\\Producer`, `Hyperf\\Amqp\\Message\\ProducerMessage`, and `App\\Models\\User` classes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/amqp.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Amqp\\Producers;\n\nuse Hyperf\\Amqp\\Annotation\\Producer;\nuse Hyperf\\Amqp\\Message\\ProducerMessage;\nuse App\\Models\\User;\n\n#[Producer(exchange: 'hyperf', routingKey: 'hyperf')]\nclass DemoProducer extends ProducerMessage\n{\n    public function __construct($id)\n    {\n        $user = User::where('id', $id)->first();\n        $this->payload = [\n            'id' => $id,\n            'data' => $user->toArray()\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying and Saving a Model\nDESCRIPTION: This snippet demonstrates querying a model, updating an attribute, and saving the changes to the database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = User::query()->where('id', 1)->first();\n$user->name = 'Hyperf';\n$user->save();\n\n```\n\n----------------------------------------\n\nTITLE: Chunking with ID - PHP\nDESCRIPTION: Illustrates how to use the `chunkById()` method for chunking results when updating database records.  This method automatically paginates results based on the primary key, ensuring consistent results even when records are updated during the chunking process. Requires the `Hyperf\\DbConnection\\Db` facade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\nDb::table('user')->where('gender', 1)->chunkById(100, function ($users) {\n    foreach ($users as $user) {\n        Db::table('user')\n            ->where('id', $user->id)\n            ->update(['update_time' => time()]);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Modify Column to Allow Null Values\nDESCRIPTION: This snippet demonstrates how to modify an existing column to allow null values using the `nullable()` and `change()` methods. It updates the 'name' column in the 'users' table, changing its length to 50 and allowing null values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nSchema::table('users', function (Blueprint $table) {\n    // 将字段的长度修改为 50 并允许为空\n    $table->string('name', 50)->nullable()->change();\n});\n```\n\n----------------------------------------\n\nTITLE: Annotation Task Delivery - PHP\nDESCRIPTION: Shows how to use the `#[Task]` annotation to automatically deliver a method to the Task process.  When the `handle` method is called in the Worker process, it will be automatically delivered to a Task worker, and the coroutine will wait for the result.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/task.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Coroutine\\Coroutine;\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\Task\\Annotation\\Task;\n\nclass AnnotationTask\n{\n    #[Task]\n    public function handle($cid)\n    {\n        return [\n            'worker.cid' => $cid,\n            // Returns -1 when task_enable_coroutine=false, otherwise returns the corresponding coroutine ID\n            'task.cid' => Coroutine::id(),\n        ];\n    }\n}\n\n$container = ApplicationContext::getContainer();\n$task = $container->get(AnnotationTask::class);\n$result = $task->handle(Coroutine::id());\n```\n\n----------------------------------------\n\nTITLE: In Validation with Rule Object\nDESCRIPTION: The `in:foo,bar…` rule validates that the field under validation is included in the given list of values.  This snippet shows how to construct the rule using `Rule::in`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($data, [\n    'zones' => [\n        'required',\n        Rule::in(['first-zone', 'second-zone']),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding a Record to Index\nDESCRIPTION: This code demonstrates how to add a record to the search index by creating and saving a model instance. The `Searchable` trait automatically synchronizes the model with the index when the model is saved.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$order = new App\\Order;\n\n// ...\n\n$order->save();\n```\n\n----------------------------------------\n\nTITLE: Registering Components in View Configuration (PHP)\nDESCRIPTION: This code demonstrates how to register components in the `config/autoload/view.php` file.  The `components` array maps a component alias (e.g., 'alert') to the fully qualified class name of the component.  This allows using the component via `<x-alert/>` in Blade templates. This config file is loaded by Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // ...\n    'components' => [\n        'alert' => \\App\\View\\Component\\Alert::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Unique Rule with Additional Where Clause - PHP\nDESCRIPTION: This code demonstrates how to add a custom `where` clause to the `Rule::unique()` validator. It adds a constraint to the uniqueness check, ensuring that only users with 'account_id' equal to 1 are considered. It uses a closure to define the `where` clause. Requires `Hyperf\\Validation\\Rule` and a `$data` array for validation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_43\n\nLANGUAGE: PHP\nCODE:\n```\n'email' => Rule::unique('users')->where(function ($query) {\n    $query->where('account_id', 1);\n})\n```\n\n----------------------------------------\n\nTITLE: Config Changed Event Listener (Hyperf)\nDESCRIPTION: This PHP code defines an event listener that listens for the `ConfigChanged` event in Hyperf. When a configuration change occurs in the Config Center, this listener will be triggered, and the `process` method will be executed.  In this example, it simply dumps the event data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config-center.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\ConfigCenter\\Event\\ConfigChanged;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\n\n#[Listener]\nclass DbQueryExecutedListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            ConfigChanged::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        var_dump($event);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Serving a File Download in Hyperf\nDESCRIPTION: This snippet shows how to serve a file download in Hyperf using the `download()` method of the `ResponseInterface`. It takes the absolute path to the file and an optional filename for the client to download as. If `if-match` or `if-none-match` headers are present, Hyperf performs ETag comparison and returns a 304 status code if matched. Returns a `Psr7ResponseInterface` configured for file download.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/response.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function index(ResponseInterface $response): Psr7ResponseInterface\n    {\n        return $response->download(BASE_PATH . '/public/file.csv', 'filename.csv');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Injecting Interface PHP\nDESCRIPTION: Demonstrates injecting the UserServiceInterface into the IndexController, which resolves to the UserService implementation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserServiceInterface;\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass IndexController\n{\n    #[Inject]\n    private UserServiceInterface $userService;\n    \n    public function index()\n    {\n        $id = 1;\n        // 直接使用\n        return $this->userService->getInfoById($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Single Middleware with Annotation in Hyperf\nDESCRIPTION: This snippet demonstrates how to define a single middleware for a controller using the `#[Middleware]` annotation in Hyperf.  The `#[AutoController]` or `#[Controller]` annotation must also be present for the middleware to be applied.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/middleware/middleware.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse App\\Middleware\\FooMiddleware;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\HttpServer\\Annotation\\Middleware;\n\n #[AutoController]\n #[Middleware(FooMiddleware::class)]\nclass IndexController\n{\n    public function index()\n    {\n        return 'Hello Hyperf.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes via #[Controller] Annotation in Hyperf\nDESCRIPTION: This snippet demonstrates how to define routes using the `#[Controller]` and `#[RequestMapping]` annotations in Hyperf. Using a `#[Controller]` annotation in a class makes it a `Controller class`, and the `#[RequestMapping]` annotation can be used to define the request methods and paths. This provides more flexible routing definitions compared to #[AutoController].\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/overview.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\n\n#[Controller]\nclass IndexController\n{\n    // Hyperf will automatically generate a `/index/index` route for this method, allowing GET or POST requests\n    #[RequestMapping(path: \"index\", methods: \"get,post\")]\n    public function index(RequestInterface $request)\n    {\n        // Retrieve the id parameter from the request\n        $id = $request->input('id', 1);\n        return (string)$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Merge Data using 'mergeWhen' (Hyperf, PHP)\nDESCRIPTION: Demonstrates using the `mergeWhen` method in a Hyperf resource to conditionally merge multiple properties into the JSON response. If `Auth::user()->isAdmin()` returns `true`, the `first-secret` and `second-secret` keys are added to the response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            $this->mergeWhen(Auth::user()->isAdmin(), [\n                'first-secret' => 'value',\n                'second-secret' => 'value',\n            ]),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Where Clauses with Closures - PHP\nDESCRIPTION: Demonstrates how to use closures to create more complex where clauses.  This allows for grouping conditions with `orWhere`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->where([\n    ['status', '=', '1'],\n    ['gender', '=', '1'],\n    [function ($query) {\n        $query->where('type', 3)->orWhere('type', 6);\n    }]\n])->get();\n```\n\n----------------------------------------\n\nTITLE: After Validation Hook\nDESCRIPTION: Demonstrates the use of the `after` method to add a callback that executes after the validation process completes. This allows for additional validation logic or error message additions based on complex conditions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\Validation\\Contract\\ValidatorFactoryInterface;\n\nclass IndexController\n{\n    #[Inject]\n    protected ValidatorFactoryInterface $validationFactory;\n\n    public function foo(RequestInterface $request)\n    {\n        $validator = $this->validationFactory->make(\n            $request->all(),\n            [\n                'foo' => 'required',\n                'bar' => 'required',\n            ],\n            [\n                'foo.required' => 'foo is required',\n                'bar.required' => 'bar is required',\n            ]\n        );\n\n        $validator->after(function ($validator) {\n            if ($this->somethingElseIsInvalid()) {\n                $validator->errors()->add('field', 'Something is wrong with this field!');\n            }\n        });\n        \n        if ($validator->fails()) {\n            //\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Encapsulating the Logger in a Log Class\nDESCRIPTION: This code demonstrates how to create a `Log` class with a static `get` method that retrieves a Logger instance from the container using the `LoggerFactory`. This allows for easy access to the logger from anywhere in the application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/logger.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\Logger\\LoggerFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\nclass Log\n{\n    public static function get(string $name = 'app')\n    {\n        return ApplicationContext::getContainer()->get(LoggerFactory::class)->get($name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Table Options (php)\nDESCRIPTION: This code snippet shows how to define table options such as storage engine, character set, collation, and create temporary tables.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// 指定表儲存引擎\n$table->engine = 'InnoDB';\n// 指定資料表的預設字符集\n$table->charset = 'utf8';\n// 指定資料表預設的排序規則\n$table->collation = 'utf8_unicode_ci';\n// 建立臨時表\n$table->temporary();\n```\n\n----------------------------------------\n\nTITLE: Refreshing Model with refresh()\nDESCRIPTION: This snippet shows how to refresh an existing model with fresh data from the database using the `refresh()` method. This also reloads any previously loaded relationships.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = User::query()->where('name','Hyperf')->first();\n\n$user->name = 'Hyperf2';\n\n$user->refresh();\n\necho $user->name; // Hyperf\n```\n\n----------------------------------------\n\nTITLE: Using Accessor to Return Computed Value in Hyperf Model (PHP)\nDESCRIPTION: This snippet demonstrates how to use an accessor to return a computed value based on existing attributes in a Hyperf model. In this example, `getFullNameAttribute` concatenates `first_name` and `last_name` to return the full name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/mutators.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 获取用户的姓名.\n     *\n     * @return string\n     */\n    public function getFullNameAttribute()\n    {\n        return \"{$this->first_name} {$this->last_name}\";\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Hyperf Config Center Configuration\nDESCRIPTION: This PHP code snippet shows the configuration for integrating with various configuration centers like Apollo, Nacos, Aliyun ACM, Etcd, and Zookeeper. It defines parameters such as server addresses, app IDs, namespaces, access keys, and other driver-specific settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config-center.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\ConfigCenter\\Mode;\n\nreturn [\n    // 是否開啟配置中心\n    'enable' => (bool) env('CONFIG_CENTER_ENABLE', true),\n    // 使用的驅動型別，對應同級別配置 drivers 下的 key\n    'driver' => env('CONFIG_CENTER_DRIVER', 'apollo'),\n    // 配置中心的執行模式，多程序模型推薦使用 PROCESS 模式，單程序模型推薦使用 COROUTINE 模式\n    'mode' => env('CONFIG_CENTER_MODE', Mode::PROCESS),\n    'drivers' => [\n        'apollo' => [\n            'driver' => Hyperf\\ConfigApollo\\ApolloDriver::class,\n            // Apollo Server\n            'server' => 'http://127.0.0.1:9080',\n            // 您的 AppId\n            'appid' => 'test',\n            // 當前應用所在的叢集\n            'cluster' => 'default',\n            // 當前應用需要接入的 Namespace，可配置多個\n            'namespaces' => [\n                'application',\n            ],\n            // 配置更新間隔（秒）\n            'interval' => 5,\n            // 嚴格模式，當為 false 時，拉取的配置值均為 string 型別，當為 true 時，拉取的配置值會轉化為原配置值的資料型別\n            'strict_mode' => false,\n            // 客戶端IP\n            'client_ip' => \\Hyperf\\Support\\Network::ip(),\n            // 拉取配置超時時間\n            'pullTimeout' => 10,\n            // 拉取配置間隔\n            'interval_timeout' => 1,\n        ],\n        'nacos' => [\n            'driver' => Hyperf\\ConfigNacos\\NacosDriver::class,\n            // 配置合併方式，支援覆蓋和合並\n            'merge_mode' => Hyperf\\ConfigNacos\\Constants::CONFIG_MERGE_OVERWRITE,\n            'interval' => 3,\n            // 如果對應的對映 key 沒有設定，則使用預設的 key\n            'default_key' => 'nacos_config',\n            'listener_config' => [\n                // dataId, group, tenant, type, content\n                // 對映後的配置 KEY => Nacos 中實際的配置\n                'nacos_config' => [\n                    'tenant' => 'tenant', // corresponding with service.namespaceId\n                    'data_id' => 'hyperf-service-config',\n                    'group' => 'DEFAULT_GROUP',\n                ],\n                'nacos_config.data' => [\n                    'data_id' => 'hyperf-service-config-yml',\n                    'group' => 'DEFAULT_GROUP',\n                    'type' => 'yml',\n                ],\n            ],\n            'client' => [\n                // nacos server url like https://nacos.hyperf.io, Priority is higher than host:port\n                // 'uri' => '',\n                'host' => '127.0.0.1',\n                'port' => 8848,\n                'username' => null,\n                'password' => null,\n                'guzzle' => [\n                    'config' => null,\n                ],\n            ],\n        ],\n        'aliyun_acm' => [\n            'driver' => Hyperf\\ConfigAliyunAcm\\AliyunAcmDriver::class,\n            // 配置更新間隔（秒）\n            'interval' => 5,\n            // 阿里雲 ACM 斷點地址，取決於您的可用區\n            'endpoint' => env('ALIYUN_ACM_ENDPOINT', 'acm.aliyun.com'),\n            // 當前應用需要接入的 Namespace\n            'namespace' => env('ALIYUN_ACM_NAMESPACE', ''),\n            // 您的配置對應的 Data ID\n            'data_id' => env('ALIYUN_ACM_DATA_ID', ''),\n            // 您的配置對應的 Group\n            'group' => env('ALIYUN_ACM_GROUP', 'DEFAULT_GROUP'),\n            // 您的阿里雲賬號的 Access Key\n            'access_key' => env('ALIYUN_ACM_AK', ''),\n            // 您的阿里雲賬號的 Secret Key\n            'secret_key' => env('ALIYUN_ACM_SK', ''),\n            'ecs_ram_role' => env('ALIYUN_ACM_RAM_ROLE', ''),\n        ],\n        'etcd' => [\n            'driver' => Hyperf\\ConfigEtcd\\EtcdDriver::class,\n            'packer' => Hyperf\\Codec\\Packer\\JsonPacker::class,\n            // 需要同步的資料字首\n            'namespaces' => [\n                '/application',\n            ],\n            // `Etcd` 與 `Config` 的對映關係。對映中不存在的 `key`，則不會被同步到 `Config` 中\n            'mapping' => [\n                // etcd key => config key\n                '/application/test' => 'test',\n            ],\n            // 配置更新間隔（秒）\n            'interval' => 5,\n            'client' => [\n                # Etcd Client\n                'uri' => 'http://127.0.0.1:2379',\n                'version' => 'v3beta',\n                'options' => [\n                    'timeout' => 10,\n                ],\n            ],\n        ],\n        'zookeeper' => [\n            'driver' => Hyperf\\ConfigZookeeper\\ZookeeperDriver::class,\n            'server' => env('ZOOKEEPER_SERVER', '127.0.0.1:2181'),\n            'path' => env('ZOOKEEPER_CONFIG_PATH', '/conf'),\n            'interval' => 5,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configure Array Option (PHP)\nDESCRIPTION: This configures an option 'name' (or -N) that accepts multiple values as an array. The `handle` method retrieves and dumps the array of option values. This demonstrates how to configure and handle array-type options in Hyperf commands.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addOption('name', 'N', InputOption::VALUE_IS_ARRAY | InputOption::VALUE_OPTIONAL, 'name');\n}\n\npublic function handle()\n{\n    var_dump($this->input->getOption('name'));\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Example for Coroutine Communication\nDESCRIPTION: This example demonstrates the use of Channels for communication between coroutines. A channel is created, and one coroutine pushes data onto the channel, while another coroutine pops the data from the channel. This allows for synchronized data transfer between coroutines.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/coroutine.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nco(function () {\n    $channel = new \\Swoole\\Coroutine\\Channel();\n    co(function () use ($channel) {\n        $channel->push('data');\n    });\n    $data = $channel->pop();\n});\n```\n\n----------------------------------------\n\nTITLE: Hyperf Scout Configuration File\nDESCRIPTION: Shows the content of the scout.php configuration file.  It includes settings for the default engine, chunk sizes for indexing, index prefix, soft delete behavior, concurrency, and engine-specific settings (in this case, Elasticsearch).  The Elasticsearch settings include the driver class, index name (or null for model-specific indexes), and host(s).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => env('SCOUT_ENGINE', 'elasticsearch'),\n    'chunk' => [\n        'searchable' => 500,\n        'unsearchable' => 500,\n    ],\n    'prefix' => env('SCOUT_PREFIX', ''),\n    'soft_delete' => false,\n    'concurrency' => 100,\n    'engine' => [\n        'elasticsearch' => [\n            'driver' => Hyperf\\Scout\\Provider\\ElasticsearchProvider::class,\n            // If index is set to null, each model corresponds to an index, otherwise each model corresponds to a type\n            'index' => null,\n            'hosts' => [\n                env('ELASTICSEARCH_HOST', 'http://127.0.0.1:9200'),\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Querying JSON field in Hyperf\nDESCRIPTION: This snippet shows how to query a JSON field in a database table using Hyperf's database query builder. It retrieves users whose 'options->language' field is 'en'. It requires a database that supports JSON types.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->where('options->language', 'en')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Value Object Type Conversion with AddressCaster in PHP\nDESCRIPTION: This code defines a custom type conversion class `AddressCaster` to convert multiple model properties (`address_line_one`, `address_line_two`) into a single `Address` value object. The `get` method converts database attributes into an `Address` object, while the `set` method converts the `Address` object back into an array of key-value pairs for storage. Requires the `Hyperf\\Contract\\CastsAttributes` interface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Casts;\n\nuse App\\Address;\nuse Hyperf\\Contract\\CastsAttributes;\n\nclass AddressCaster implements CastsAttributes\n{\n    /**\n     * Convert the extracted data\n     */\n    public function get($model, $key, $value, $attributes): Address\n    {\n        return new Address(\n            $attributes['address_line_one'],\n            $attributes['address_line_two']\n        );\n    }\n\n    /**\n     * Convert to the value to be stored\n     */\n    public function set($model, $key, $value, $attributes)\n    {\n        return [\n            'address_line_one' => $value->lineOne,\n            'address_line_two' => $value->lineTwo,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Custom Exception Handler - PHP\nDESCRIPTION: Defines a custom exception handler class that extends `Hyperf\\ExceptionHandler\\ExceptionHandler`. The `handle` method processes the exception, formats the output, and prevents further propagation if the exception is of type `FooException`.  It requires `Hyperf\\HttpMessage\\Stream\\SwooleStream`, `Psr\\Http\\Message\\ResponseInterface`, and `Throwable`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/exception-handler.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Exception\\Handler;\n\nuse Hyperf\\ExceptionHandler\\ExceptionHandler;\nuse Hyperf\\HttpMessage\\Stream\\SwooleStream;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse App\\Exception\\FooException;\nuse Throwable;\n\nclass FooExceptionHandler extends  ExceptionHandler\n{\n    public function handle(Throwable $throwable, ResponseInterface $response)\n    {\n        // 判断被捕获到的异常是希望被捕获的异常\n        if ($throwable instanceof FooException) {\n            // 格式化输出\n            $data = json_encode([\n                'code' => $throwable->getCode(),\n                'message' => $throwable->getMessage(),\n            ], JSON_UNESCAPED_UNICODE);\n\n            // 阻止异常冒泡\n            $this->stopPropagation();\n            return $response->withStatus(500)->withBody(new SwooleStream($data));\n        }\n\n        // 交给下一个异常处理器\n        return $response;\n\n        // 或者不做处理直接屏蔽异常\n    }\n\n    /**\n     * 判断该异常处理器是否要对该异常进行处理\n     */\n    public function isValid(Throwable $throwable): bool\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Multiple Queues\nDESCRIPTION: Configure multiple asynchronous queues with different settings, such as different Redis connections, queue channels, and concurrency limits.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => Hyperf\\AsyncQueue\\Driver\\RedisDriver::class,\n        'redis' => [\n            'pool' => 'default'\n        ],\n        'channel' => 'queue',\n        'timeout' => 2,\n        'retry_seconds' => 5,\n        'handle_timeout' => 10,\n        'processes' => 1,\n        'concurrent' => [\n            'limit' => 5,\n        ],\n    ],\n    'fast' => [\n        'driver' => Hyperf\\AsyncQueue\\Driver\\RedisDriver::class,\n        'redis' => [\n            'pool' => 'default'\n        ],\n        'channel' => '{queue:fast}',\n        'timeout' => 2,\n        'retry_seconds' => 5,\n        'handle_timeout' => 10,\n        'processes' => 1,\n        'concurrent' => [\n            'limit' => 5,\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Define a Model Accessor - Hyperf - PHP\nDESCRIPTION: This code defines an accessor for the `first_name` property of a Hyperf model. The accessor converts the first letter of the raw value to uppercase when the `first_name` property is accessed on a model instance. It requires the `Hyperf\\DbConnection\\Model\\Model` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * Get the user's name.\n     * @param  string  $value\n     * @return string\n     */\n    public function getFirstNameAttribute($value)\n    {\n        return ucfirst($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Static Resource Access\nDESCRIPTION: This configuration snippet shows how to enable static file serving for files uploaded to the local filesystem.  It modifies the `document_root` and `enable_static_handler` settings in `config/autoload/server.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/filesystem.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'settings' => [\n        ...\n        // 將 public 替換為上傳目錄\n        'document_root' => BASE_PATH . '/public',\n        'enable_static_handler' => true,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Cacheable with Value Expression Example in Hyperf\nDESCRIPTION: This example demonstrates the use of the `Cacheable` annotation in Hyperf with a value expression. The value expression allows you to define a custom cache key based on method arguments and/or object properties. In this case, the cache key is derived from the `user.id` property of the `User` object passed to the `userBook` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/cache.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass UserBookService\n{\n    #[Cacheable(prefix: \"userBook\", ttl: 6666, value: \"_#{user.id}\")]\n    public function userBook(User $user): array\n    {\n        return [\n            'book' => $user->book->toArray(),\n            'uuid' => $this->unique(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Log Class\nDESCRIPTION: This code shows how to create a static `Log` class in Hyperf to simplify access to the logger. It uses the `__callStatic` magic method to delegate calls to the underlying `LoggerFactory`. The `ApplicationContext` is used to retrieve the LoggerFactory instance from the container. It is crucial that the name passed to the logger factory is not tied to the request to prevent memory leaks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/logger.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\Logger\\LoggerFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\nclass Log\n{\n    public static function get(string $name = 'app')\n    {\n        return ApplicationContext::getContainer()->get(LoggerFactory::class)->get($name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get All Session Data\nDESCRIPTION: Retrieves all data stored in the session as an associative array using the `all()` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/session.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$data = $this->session->all();\n```\n\n----------------------------------------\n\nTITLE: Inject Lazy Loading Proxy via Annotation in Hyperf\nDESCRIPTION: This example shows how to use the `#[Inject(lazy: true)]` annotation to inject a lazy loading proxy in Hyperf. This approach eliminates the need for a configuration file. The `UserServiceInterface` will be proxied.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/di.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Di\\Annotation\\Inject;\nuse App\\Service\\UserServiceInterface;\n\nclass Foo{\n    /**\n     * @var UserServiceInterface\n     */\n    #[Inject(lazy: true)]\n    public $service;\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping a Table in Hyperf Migration\nDESCRIPTION: This code demonstrates how to drop a table using either `Schema::drop` or `Schema::dropIfExists` methods in Hyperf migration. `drop` throws an exception if the table does not exist. `dropIfExists` does not.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nSchema::drop('users');\n\nSchema::dropIfExists('users');\n```\n\n----------------------------------------\n\nTITLE: Load Relationships using EagerLoader\nDESCRIPTION: Demonstrates how to use the `EagerLoader` class directly to load model relationships from the cache. The `EagerLoader` is retrieved from the application context.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model-cache.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\ModelCache\\EagerLoad\\EagerLoader;\nuse Hyperf\\Context\\ApplicationContext;\n\n$books = Book::findManyFromCache([1,2,3]);\n$loader = ApplicationContext::getContainer()->get(EagerLoader::class);\n$loader->load($books, ['user']);\n\nforeach ($books as $book){\n    var_dump($book->user);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Server in server.php\nDESCRIPTION: This PHP code configures a gRPC server within the 'server.php' file. It defines the server name, type (HTTP), host, port, and callbacks. The 'onRequest' callback is mapped to the `\\Hyperf\\GrpcServer\\Server::class` to handle incoming gRPC requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/grpc.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n'servers' => [\n    ....\n    [\n        'name' => 'grpc',\n        'type' => Server::SERVER_HTTP,\n        'host' => '0.0.0.0',\n        'port' => 9503,\n        'sock_type' => SWOOLE_SOCK_TCP,\n        'callbacks' => [\n            Event::ON_REQUEST => [\\Hyperf\\GrpcServer\\Server::class，'onRequest'],\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Checking Table/Column Existence (PHP)\nDESCRIPTION: These lines demonstrate how to check if a table or a column exists using the `hasTable` and `hasColumn` methods of the Schema builder.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nif (Schema::hasTable('users')) {\n    //\n}\n\nif (Schema::hasColumn('name', 'email')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Update JSON Fields - Hyperf PHP\nDESCRIPTION: Demonstrates updating JSON fields in Hyperf using the `->` syntax to access the corresponding value in the JSON object. This feature is supported on MySQL 5.7+.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('id', 1)->update(['options->enabled' => true]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Error Messages for All Fields in Hyperf\nDESCRIPTION: This PHP code retrieves all error messages for all fields from the validator's error bag. It uses the `all()` method of the `MessageBag` instance, which returns an array of all error messages.  The code then iterates through this array to process each message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nforeach ($errors->all() as $message) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Alpha Validation to ASCII\nDESCRIPTION: This example demonstrates how to restrict the alpha validation rule to only allow ASCII characters (a-z and A-Z). It uses the ascii option.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n'username' => 'alpha:ascii',\n```\n\n----------------------------------------\n\nTITLE: Defining Method-Level Middleware via Annotation\nDESCRIPTION: Demonstrates defining middleware at the method level using annotations in Hyperf.  Applying the `#[Middleware]` annotation directly to a method ensures that the specified middleware is executed only for requests handled by that method. Class-level middleware will be executed before method-level middleware.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/middleware/middleware.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Middleware\\BarMiddleware;\nuse App\\Middleware\\FooMiddleware;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\HttpServer\\Annotation\\Middleware;\nuse Hyperf\\HttpServer\\Annotation\\Middlewares;\n\n#[AutoController]\n#[Middlewares([FooMiddleware::class])]\nclass IndexController\n{\n    #[Middleware(BarMiddleware::class)]\n    public function index()\n    {\n        return 'Hello Hyperf.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Input Values\nDESCRIPTION: Shows how to retrieve specific input values using the `input(string $key, $default = null)` method.  Also shows how to retrieve multiple values using the `inputs` method. Demonstrates how to use the dot syntax to access array elements within the input data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/request.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// 存在则返回，不存在则返回 null\n$name = $request->input('name');\n// 存在则返回，不存在则返回默认值 Hyperf\n$name = $request->input('name', 'Hyperf');\n```\n\nLANGUAGE: php\nCODE:\n```\n$name = $request->input('products.0.name');\n\n$names = $request->input('products.*.name');\n```\n\n----------------------------------------\n\nTITLE: Nacos Configuration File\nDESCRIPTION: This PHP code represents the configuration file for the Hyperf Nacos client. It allows you to specify the Nacos server's host, port, username, password, and Guzzle HTTP client configuration. The 'url' parameter allows configuring the server using a URL.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nacos.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    // Developers who cannot use the IP port form can directly configure the url\n    // 'url' => '',\n    'host' => '127.0.0.1',\n    'port' => 8848,\n    'username' => null,\n    'password' => null,\n    'guzzle' => [\n        'config' => null,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Coroutine Style Server in Hyperf\nDESCRIPTION: This code snippet demonstrates how to configure a Hyperf server to use the coroutine style by setting the 'type' key to 'Hyperf\\Server\\CoroutineServer::class' in the `autoload/server.php` configuration file. It defines an HTTP server with specified host, port, socket type, and request callback.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/coroutine-server.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\nuse Hyperf\\Server\\Server;\n\nreturn [\n    'type' => Hyperf\\Server\\CoroutineServer::class,\n    'servers' => [\n        [\n            'name' => 'http',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9501,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [Hyperf\\HttpServer\\Server::class, 'onRequest'],\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Store Data in Session\nDESCRIPTION: Stores data in the session using the `set()` method. The first argument is the key (name) of the session variable, and the second argument is the value to be stored. Returns void.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/session.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$this->session->set('foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Inner Join Clause with join() in Hyperf\nDESCRIPTION: Demonstrates how to perform inner joins using the `join()` method. It shows how to join multiple tables together based on specified column relationships and select data from the joined tables.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->join('contacts', 'users.id', '=', 'contacts.user_id')\n    ->join('orders', 'users.id', '=', 'orders.user_id')\n    ->select('users.*', 'contacts.phone', 'orders.price')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Creating a Command for Delayed Messages (Hyperf)\nDESCRIPTION: This code snippet demonstrates how to create a Hyperf command to produce delayed messages using the AMQP component. It defines a command named `DelayCommand` that sends messages to a specific exchange with a specified delay.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse App\\Amqp\\Producer\\DelayDirectProducer;\n//use App\\Amqp\\Producer\\DelayFanoutProducer;\n//use App\\Amqp\\Producer\\DelayTopicProducer;\nuse Hyperf\\Amqp\\Producer;\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Context\\ApplicationContext;\nuse Psr\\Container\\ContainerInterface;\n\n#[Command]\nclass DelayCommand extends HyperfCommand\n{\n    protected ContainerInterface $container;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n\n        parent::__construct('demo:command');\n    }\n\n    public function configure()\n    {\n        parent::configure();\n        $this->setDescription('Hyperf Demo Command');\n    }\n\n    public function handle()\n    {\n        //1.delayed + direct\n        $message = new DelayDirectProducer('delay+direct produceTime:'.(microtime(true)));\n        //2.delayed + fanout\n        //$message = new DelayFanoutProducer('delay+fanout produceTime:'.(microtime(true)));\n        //3.delayed + topic\n        //$message = new DelayTopicProducer('delay+topic produceTime:' . (microtime(true)));\n        $message->setDelayMs(5000);\n        $producer = ApplicationContext::getContainer()->get(Producer::class);\n        $producer->produce($message);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Use Resource with Preserved Keys\nDESCRIPTION: Demonstrates usage of a resource collection with preserved keys in the controller. `keyBy->id` is used on the `User::all()` collection to specify 'id' as the key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\User as UserResource;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return UserResource::collection(User::all()->keyBy->id)->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: AMQP Delay Consumer Implementation (PHP)\nDESCRIPTION: Defines an AMQP consumer class named `DelayDirectConsumer` for delayed messages, extending `ConsumerMessage` and utilizing `ProducerDelayedMessageTrait` and `ConsumerDelayedMessageTrait`. It sets the exchange, queue, type (DIRECT), and routing key for consuming delayed messages. Requires `ConsumerDelayedMessageTrait` and `ProducerDelayedMessageTrait` to be defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Amqp\\Consumer;\n\nuse Hyperf\\Amqp\\Annotation\\Consumer;\nuse Hyperf\\Amqp\\Message\\ConsumerDelayedMessageTrait;\nuse Hyperf\\Amqp\\Message\\ConsumerMessage;\nuse Hyperf\\Amqp\\Message\\ProducerDelayedMessageTrait;\nuse Hyperf\\Amqp\\Message\\Type;\nuse Hyperf\\Amqp\\Result;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n#[Consumer(nums: 1)]\nclass DelayDirectConsumer extends ConsumerMessage\n{\n    use ProducerDelayedMessageTrait;\n    use ConsumerDelayedMessageTrait;\n\n    protected string $exchange = 'ext.hyperf.delay';\n    \n    protected string $queue = 'queue.hyperf.delay';\n    \n    protected Type|string $type = Type::DIRECT; //Type::FANOUT;\n    \n    protected array|string $routingKey = '';\n\n    public function consumeMessage($data, AMQPMessage $message): Result\n    {\n        var_dump($data, 'delay+direct consumeTime:' . (microtime(true)));\n        return Result::ACK;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Throwing a Business Exception\nDESCRIPTION: This snippet demonstrates how to throw a custom `BusinessException` with an `ErrorCode` enum value in a controller action.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/constants.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse App\\Constants\\ErrorCode;\nuse App\\Exception\\BusinessException;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        throw new BusinessException(ErrorCode::SERVER_ERROR);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unique Rule with Custom Database Connection - PHP\nDESCRIPTION: This snippet shows how to specify a custom database connection when using the `unique` validation rule.  It validates the 'email' field's uniqueness in the 'users' table, but uses the 'connection' database connection instead of the default. It assumes the Hyperf validation component is configured.  No specific inputs, requires a `$data` array for validation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_38\n\nLANGUAGE: PHP\nCODE:\n```\n'email' => 'unique:connection.users,email_address'\n```\n\n----------------------------------------\n\nTITLE: Config Center Configuration in config_center.php (Hyperf)\nDESCRIPTION: This PHP configuration snippet shows the structure of the `config_center.php` file in Hyperf. It defines settings for enabling the configuration center, selecting the driver (e.g., Apollo, Nacos), configuring the running mode (e.g., PROCESS, COROUTINE), and setting up specific drivers with their respective options such as server address, AppId, namespaces, and merge modes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config-center.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\ConfigCenter\\Mode;\n\nreturn [\n    // 是否开启配置中心\n    'enable' => (bool) env('CONFIG_CENTER_ENABLE', true),\n    // 使用的驱动类型，对应同级别配置 drivers 下的 key\n    'driver' => env('CONFIG_CENTER_DRIVER', 'apollo'),\n    // 配置中心的运行模式，多进程模型推荐使用 PROCESS 模式，单进程模型推荐使用 COROUTINE 模式\n    'mode' => env('CONFIG_CENTER_MODE', Mode::PROCESS),\n    'drivers' => [\n        'apollo' => [\n            'driver' => Hyperf\\ConfigApollo\\ApolloDriver::class,\n            // Apollo Server\n            'server' => 'http://127.0.0.1:9080',\n            // 您的 AppId\n            'appid' => 'test',\n            // 当前应用所在的集群\n            'cluster' => 'default',\n            // 当前应用需要接入的 Namespace，可配置多个\n            'namespaces' => [\n                'application',\n            ],\n            // 配置更新间隔（秒）\n            'interval' => 5,\n            // 严格模式，当为 false 时，拉取的配置值均为 string 类型，当为 true 时，拉取的配置值会转化为原配置值的数据类型\n            'strict_mode' => false,\n            // 客户端IP\n            'client_ip' => \\Hyperf\\Support\\Network::ip(),\n            // 拉取配置超时时间\n            'pullTimeout' => 10,\n            // 拉取配置间隔\n            'interval_timeout' => 1,\n        ],\n        'nacos' => [\n            'driver' => Hyperf\\ConfigNacos\\NacosDriver::class,\n            // 配置合并方式，支持覆盖和合并\n            'merge_mode' => Hyperf\\ConfigNacos\\Constants::CONFIG_MERGE_OVERWRITE,\n            'interval' => 3,\n            // 如果对应的映射 key 没有设置，则使用默认的 key\n            'default_key' => 'nacos_config',\n            'listener_config' => [\n                // dataId, group, tenant, type, content\n                // 映射后的配置 KEY => Nacos 中实际的配置\n                'nacos_config' => [\n                    'tenant' => 'tenant', // corresponding with service.namespaceId\n                    'data_id' => 'hyperf-service-config',\n                    'group' => 'DEFAULT_GROUP',\n                ],\n                'nacos_config.data' => [\n                    'data_id' => 'hyperf-service-config-yml',\n                    'group' => 'DEFAULT_GROUP',\n                    'type' => 'yml',\n                ],\n            ],\n            'client' => [\n                // nacos server url like https://nacos.hyperf.io, Priority is higher than host:port\n                // 'uri' => '',\n                'host' => '127.0.0.1',\n                'port' => 8848,\n                'username' => null,\n                'password' => null,\n                'guzzle' => [\n                    'config' => null,\n                ],\n            ],\n        ],\n        'aliyun_acm' => [\n            'driver' => Hyperf\\ConfigAliyunAcm\\AliyunAcmDriver::class,\n            // 配置更新间隔（秒）\n            'interval' => 5,\n            // 阿里云 ACM 断点地址，取决于您的可用区\n            'endpoint' => env('ALIYUN_ACM_ENDPOINT', 'acm.aliyun.com'),\n            // 当前应用需要接入的 Namespace\n            'namespace' => env('ALIYUN_ACM_NAMESPACE', ''),\n            // 您的配置对应的 Data ID\n            'data_id' => env('ALIYUN_ACM_DATA_ID', ''),\n            // 您的配置对应的 Group\n            'group' => env('ALIYUN_ACM_GROUP', 'DEFAULT_GROUP'),\n            // 您的阿里云账号的 Access Key\n            'access_key' => env('ALIYUN_ACM_AK', ''),\n            // 您的阿里云账号的 Secret Key\n            'secret_key' => env('ALIYUN_ACM_SK', ''),\n            'ecs_ram_role' => env('ALIYUN_ACM_RAM_ROLE', ''),\n        ],\n        'etcd' => [\n            'driver' => Hyperf\\ConfigEtcd\\EtcdDriver::class,\n            'packer' => Hyperf\\Codec\\Packer\\JsonPacker::class,\n            // 需要同步的数据前缀\n            'namespaces' => [\n                '/application',\n            ],\n            // `Etcd` 与 `Config` 的映射关系。映射中不存在的 `key`，则不会被同步到 `Config` 中\n            'mapping' => [\n                // etcd key => config key\n                '/application/test' => 'test',\n            ],\n            // 配置更新间隔（秒）\n            'interval' => 5,\n            'client' => [\n                # Etcd Client\n                'uri' => 'http://127.0.0.1:2379',\n                'version' => 'v3beta',\n                'options' => [\n                    'timeout' => 10,\n                ],\n            ],\n        ],\n        'zookeeper' => [\n            'driver' => Hyperf\\ConfigZookeeper\\ZookeeperDriver::class,\n            'server' => env('ZOOKEEPER_SERVER', '127.0.0.1:2181'),\n            'path' => env('ZOOKEEPER_CONFIG_PATH', '/conf'),\n            'interval' => 5,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Publish Message to NSQ\nDESCRIPTION: This PHP code demonstrates how to publish a message to an NSQ topic using the `Hyperf\\Nsq\\Nsq::publish()` method.  It retrieves the Nsq instance from the container, defines the topic and message, and then calls the publish method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nsq.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Nsq\\Nsq;\n\n#[Command]\nclass NsqCommand extends HyperfCommand\n{\n    protected $name = 'nsq:pub';\n\n    public function handle()\n    {\n        /** @var Nsq $nsq */\n        $nsq = make(Nsq::class);\n        $topic = 'hyperf';\n        $message = 'This is message at ' . time();\n        $nsq->publish($topic, $message);\n\n        $this->line('success', 'info');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define a Resource Class\nDESCRIPTION: Defines a resource class that extends `JsonResource`. The `toArray` method defines how the model's attributes are transformed into an array for the API response. This method is used to customize the data format.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Define Many-to-Many Relation in User Model (PHP)\nDESCRIPTION: This code defines a many-to-many relationship between the User and Role models using the belongsToMany method. The relationship is named 'roles'.  This example uses the default table name convention (alphabetical order).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    public function roles()\n    {\n        return $this->belongsToMany(Role::class);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating Migration File in Hyperf\nDESCRIPTION: This command generates a new migration file in the `migrations` directory. The filename argument specifies the purpose of the migration.  The `--table` and `--create` options can be used to specify the table name, with `--create` generating a migration for creating the table and `--table` generating a migration for modifying the table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:migration create_users_table\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:migration create_users_table --table=users\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:migration create_users_table --create=users\n```\n\n----------------------------------------\n\nTITLE: Define a Hyperf Listener\nDESCRIPTION: Defines a listener class UserRegisteredListener that implements the ListenerInterface. It listens for the UserRegistered event and defines a process method to handle the event. The listen method returns an array of events to listen to.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/event.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Listener;\n\nuse App\\Event\\UserRegistered;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\n\nclass UserRegisteredListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        // 返回一個該監聽器要監聽的事件數組，可以同時監聽多個事件\n        return [\n            UserRegistered::class,\n        ];\n    }\n\n    /**\n     * @param UserRegistered $event\n     */\n    public function process(object $event): void\n    {\n        // 事件觸發後該監聽器要執行的代碼寫在這裏，比如該示例下的發送用户註冊成功短信等\n        // 直接訪問 $event 的 user 屬性獲得事件觸發時傳遞的參數值\n        // $event->user;\n        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SceneRequest in Hyperf\nDESCRIPTION: This code snippet creates a custom `SceneRequest` class extending `FormRequest` in Hyperf.  It defines validation rules and scenes that specify which rules apply in different scenarios. The `authorize` method determines if the user is authorized to make the request, and the `rules` method defines the base validation rules. The `$scenes` property maps scene names to the rules that should be applied in those scenarios.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\nnamespace App\\Request;\nuse Hyperf\\Validation\\Request\\FormRequest;\nclass SceneRequest extends FormRequest\n{\n    protected array $scenes = [\n        'foo' => ['username'],\n        'bar' => ['username', 'password'],\n    ];\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n    /**\n     * Get the validation rules that apply to the request.\n     */\n    public function rules(): array\n    {\n        return [\n            'username' => 'required',\n            'gender' => 'required',\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Incrementing Field Values - PHP\nDESCRIPTION: This snippet demonstrates how to increment a field value using the `increment` method. It also demonstrates incrementing by a specific amount and updating other fields during the operation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes');\n\nDb::table('users')->increment('votes', 5);\n\nDb::table('users')->increment('votes', 1, ['name' => 'John']);\n```\n\n----------------------------------------\n\nTITLE: Getting Cookies\nDESCRIPTION: Shows how to retrieve all cookies as an associative array using `getCookieParams()`.  Also demonstrates how to retrieve a specific cookie using the `cookie(string $key, $default = null)` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/request.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$cookies = $request->getCookieParams();\n```\n\nLANGUAGE: php\nCODE:\n```\n// 存在则返回，不存在则返回 null\n$name = $request->cookie('name');\n// 存在则返回，不存在则返回默认值 Hyperf\n$name = $request->cookie('name', 'Hyperf');\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Hyperf Models\nDESCRIPTION: Demonstrates how to update multiple models that match a given query using the `update()` method. This example updates the `gender_show` attribute for all users where `gender` is 1.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\nUser::query()->where('gender', 1)->update(['gender_show' => '男性']);\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Statement - Hyperf PHP\nDESCRIPTION: Explains how to use the `updateOrInsert` method in Hyperf to update an existing record or create a new one if it doesn't exist. The method accepts two arrays: conditions to find the record, and key-value pairs containing the record to update/insert.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->updateOrInsert(\n    ['email' => 'john@example.com', 'name' => 'John'],\n    ['votes' => '2']\n);\n```\n\n----------------------------------------\n\nTITLE: Insert Statement - Hyperf PHP\nDESCRIPTION: Explains how to insert records into the database using the `insert` method in Hyperf. The method accepts an array of field names and values for insertion, and can also be used to insert multiple records.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n\nDb::table('users')->insert([\n    ['email' => 'taylor@example.com', 'votes' => 0],\n    ['email' => 'dayle@example.com', 'votes' => 0]\n]);\n```\n\n----------------------------------------\n\nTITLE: UserServiceInterface Definition PHP\nDESCRIPTION: Defines a simple UserServiceInterface interface with a getInfoById method.  This interface is used for abstract object injection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Service;\n\ninterface UserServiceInterface\n{\n    public function getInfoById(int $id);\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Task Example (Hyperf PHP)\nDESCRIPTION: This example demonstrates how to use the Task component with MongoDB. It defines a `MongoTask` class with `insert` and `query` methods annotated with `#[Task]`, allowing these operations to be executed in a separate task worker.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/task.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Task;\n\nuse Hyperf\\Task\\Annotation\\Task;\nuse MongoDB\\Driver\\BulkWrite;\nuse MongoDB\\Driver\\Manager;\nuse MongoDB\\Driver\\Query;\nuse MongoDB\\Driver\\WriteConcern;\n\nclass MongoTask\n{\n    public Manager $manager;\n\n    #[Task]\n    public function insert(string $namespace, array $document)\n    {\n        $writeConcern = new WriteConcern(WriteConcern::MAJORITY, 1000);\n        $bulk = new BulkWrite();\n        $bulk->insert($document);\n\n        $result = $this->manager()->executeBulkWrite($namespace, $bulk, $writeConcern);\n        return $result->getUpsertedCount();\n    }\n\n    #[Task]\n    public function query(string $namespace, array $filter = [], array $options = [])\n    {\n        $query = new Query($filter, $options);\n        $cursor = $this->manager()->executeQuery($namespace, $query);\n        return $cursor->toArray();\n    }\n\n    protected function manager()\n    {\n        if ($this->manager instanceof Manager) {\n            return $this->manager;\n        }\n        $uri = 'mongodb://127.0.0.1:27017';\n        return $this->manager = new Manager($uri, []);\n    }\n}\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Task\\MongoTask;\nuse Hyperf\\Context\\ApplicationContext;\n\n$client = ApplicationContext::getContainer()->get(MongoTask::class);\n$client->insert('hyperf.test', ['id' => rand(0, 99999999)]);\n\n$result = $client->query('hyperf.test', [], [\n    'sort' => ['id' => -1],\n    'limit' => 5,\n]);\n```\n\n----------------------------------------\n\nTITLE: Aggregation Queries - PHP\nDESCRIPTION: Demonstrates how to use aggregation methods like `count()`, `max()`, `min()`, `avg()`, and `sum()` to perform aggregate calculations on database tables.  These methods return a single aggregated value. Requires the `Hyperf\\DbConnection\\Db` facade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$count = Db::table('user')->count();\n```\n\n----------------------------------------\n\nTITLE: Exists Validation Basic Usage\nDESCRIPTION: The `exists:table,column` rule validates that the field under validation exists in the specified database table.  This snippet shows the basic usage of the rule, where the column defaults to the field name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n'state' => 'exists:states'\n```\n\n----------------------------------------\n\nTITLE: File Download in Hyperf\nDESCRIPTION: Demonstrates how to trigger a file download using the `download()` method of the `ResponseInterface`.  It takes the absolute file path and an optional filename for the download. If the request contains `if-match` or `if-none-match` headers, Hyperf compares the ETag and may return a 304 status code.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/response.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function index(ResponseInterface $response): Psr7ResponseInterface\n    {\n        return $response->download(BASE_PATH . '/public/file.csv', 'filename.csv');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting JSON Input\nDESCRIPTION: Explains how to access JSON data from the request body using the `input(string $key, $default = null)` method.  Requires the `Content-Type` header to be set to `application/json`.  Also demonstrates the dot syntax for accessing JSON array elements.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/request.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// 存在则返回，不存在则返回 null\n$name = $request->input('user.name');\n// 存在则返回，不存在则返回默认值 Hyperf\n$name = $request->input('user.name', 'Hyperf');\n// 以数组形式返回所有 Json 数据\n$name = $request->all();\n```\n\n----------------------------------------\n\nTITLE: Database Configuration with PDO Options in Hyperf\nDESCRIPTION: Configures the database connection in Hyperf with specific PDO options, such as attribute casing, error mode, null handling, stringification of fetches, and emulation of prepares. This configuration allows fine-grained control over the PDO driver behavior.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/quick-start.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER', 'mysql'),\n        'host' => env('DB_HOST', 'localhost'),\n        'port' => env('DB_PORT', 3306),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => env('DB_CHARSET', 'utf8'),\n        'collation' => env('DB_COLLATION', 'utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX', ''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('DB_MAX_IDLE_TIME', 60),\n        ],\n        'options' => [\n            // 框架預設配置\n            PDO::ATTR_CASE => PDO::CASE_NATURAL,\n            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n            PDO::ATTR_ORACLE_NULLS => PDO::NULL_NATURAL,\n            PDO::ATTR_STRINGIFY_FETCHES => false,\n            // 如果使用的為非原生 MySQL 或雲廠商提供的 DB 如從庫/分析型例項等不支援 MySQL prepare 協議的, 將此項設定為 true\n            PDO::ATTR_EMULATE_PREPARES => false,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Apply Scene to Request Programmatically\nDESCRIPTION: Illustrates setting a scene on the `SceneRequest` instance and validating the resolved data within a controller method.  This is necessary when the `ValidationMiddleware` is configured, to avoid premature validation before setting the scene.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Request\\DebugRequest;\nuse App\\Request\\SceneRequest;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController(prefix: 'foo')]\nclass FooController extends Controller\n{\n    public function scene()\n    {\n        $request = $this->container->get(SceneRequest::class);\n        $request->scene('foo')->validateResolved();\n\n        return $this->response->success($request->all());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exists Validation with Custom Connection\nDESCRIPTION: This snippet illustrates how to specify the database connection to use for the `exists` query by using the `.` pre-database connection before the table name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'exists:connection.staff,email'\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Log Handlers in Hyperf (Array)\nDESCRIPTION: This configuration demonstrates setting up multiple log handlers in Hyperf to write logs to different files based on the log level. It configures two handlers, one writing INFO level logs to hyperf.log using a LineFormatter, and another writing INFO level logs to hyperf-debug.log using a JsonFormatter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/logger.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Monolog\\Handler;\nuse Monolog\\Formatter;\nuse Monolog\\Level;\n\nreturn [\n    'default' => [\n        'handlers' => [\n            [\n                'class' => Handler\\StreamHandler::class,\n                'constructor' => [\n                    'stream' => BASE_PATH . '/runtime/logs/hyperf.log',\n                    'level' => Level::Info,\n                ],\n                'formatter' => [\n                    'class' => Formatter\\LineFormatter::class,\n                    'constructor' => [\n                        'format' => null,\n                        'dateFormat' => null,\n                        'allowInlineLineBreaks' => true,\n                    ],\n                ],\n            ],\n            [\n                'class' => Handler\\StreamHandler::class,\n                'constructor' => [\n                    'stream' => BASE_PATH . '/runtime/logs/hyperf-debug.log',\n                    'level' => Level::Info,\n                ],\n                'formatter' => [\n                    'class' => Formatter\\JsonFormatter::class,\n                    'constructor' => [\n                        'batchMode' => Formatter\\JsonFormatter::BATCH_MODE_JSON,\n                        'appendNewline' => true,\n                    ],\n                ],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Queue Controller for Traditional Message Delivery\nDESCRIPTION: Defines a controller action for pushing messages to the asynchronous queue using the traditional approach. It uses the QueueService to push a new job with sample data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse App\\Service\\QueueService;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass QueueController extends AbstractController\n{\n    #[Inject]\n    protected QueueService $service;\n\n    /**\n     * 传统模式投递消息\n     */\n    public function index()\n    {\n        $this->service->push([\n            'group@hyperf.io',\n            'https://doc.hyperf.io',\n            'https://www.hyperf.io',\n        ]);\n\n        return 'success';\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Customize Error Messages\nDESCRIPTION: This code snippet demonstrates how to customize error messages for specific validation rules in a form request by overriding the `messages` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * 獲取已定義驗證規則的錯誤訊息\n */\npublic function messages(): array\n{\n    return [\n        'foo.required' => 'foo is required',\n        'bar.required'  => 'bar is required',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Monolog Basic Usage Example\nDESCRIPTION: This code snippet demonstrates the fundamental concepts of Monolog, including creating a logger, handlers, and formatters. It shows how to configure a stream handler and a FirePHP handler, set a log format, and push processors to add extra data to log records.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/logger.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Monolog\\Formatter\\LineFormatter;\nuse Monolog\\Handler\\FirePHPHandler;\nuse Monolog\\Handler\\StreamHandler;\nuse Monolog\\Logger;\n\n// Create a Channel. The parameter log is the name of the Channel\n$log = new Logger('log');\n\n// Create two Handlers, corresponding to variables $stream and $fire\n$stream = new StreamHandler('test.log', Logger::WARNING);\n$fire = new FirePHPHandler();\n\n// Define the time format as \"Y-m-d H:i:s\"\n$dateFormat = \"Y n j, g:i a\";\n// Define the log format as \"[%datetime%] %channel%.%level_name%: %message% %context% %extra%\\n\"\n$output = \"%datetime%||%channel||%level_name%||%message%||%context%||%extra%\\n\";\n// Create a Formatter based on the time format and log format\n$formatter = new LineFormatter($output, $dateFormat);\n\n// Set Formatter to Handler\n$stream->setFormatter($formatter);\n\n// Push the Handler into the Handler queue of the Channel\n$log->pushHandler($stream);\n$log->pushHandler($fire);\n\n// Clone new log channel\n$log2 = $log->withName('log2');\n\n// Add records to the log\n$log->warning('Foo');\n\n// Add extra data to record\n// 1. log context\n$log->error('a new user', ['username' => 'daydaygo']);\n// 2. processor\n$log->pushProcessor(function ($record) {\n    $record['extra']['dummy'] = 'hello';\n    return $record;\n});\n$log->pushProcessor(new \\Monolog\\Processor\\MemoryPeakUsageProcessor());\n$log->alert('czl');\n```\n\n----------------------------------------\n\nTITLE: Creating HandlerStack with HandlerStackFactory\nDESCRIPTION: Shows how to use the `HandlerStackFactory` to simplify the creation of a `HandlerStack` instance for Guzzle. This factory provides a convenient way to set up the handler stack with default middleware.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/guzzle.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Guzzle\\HandlerStackFactory;\nuse GuzzleHttp\\Client;\n\n$factory = new HandlerStackFactory();\n$stack = $factory->create();\n\n$client = make(Client::class, [\n    'config' => [\n        'handler' => $stack,\n    ],\n]);\n\n```\n\n----------------------------------------\n\nTITLE: Using Hyperf ETCD KVInterface\nDESCRIPTION: This snippet demonstrates how to retrieve an instance of the KVInterface from the Hyperf container to interact with the ETCD server. This allows for key-value operations against ETCD.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/etcd.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\Etcd\\KVInterface;\n\n$client = ApplicationContext::getContainer()->get(KVInterface::class);\n```\n\n----------------------------------------\n\nTITLE: Using Cacheable Annotation in Hyperf\nDESCRIPTION: This example demonstrates the usage of the `Cacheable` annotation to automatically cache the results of a method in Hyperf. The `prefix`, `ttl` (time-to-live), and `listener` parameters are used to configure the cache key, expiration time, and cache invalidation listener, respectively.  When the method is called the first time, the result is stored in the cache. Subsequent calls return the cached value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/cache.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass UserService\n{\n    #[Cacheable(prefix: \"user\", ttl: 9000, listener: \"user-update\")]\n    public function user($id)\n    {\n        $user = User::query()->where('id',$id)->first();\n\n        if($user){\n            return $user->toArray();\n        }\n\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message\nDESCRIPTION: Publishes a message to the queue using the `DriverFactory` to get the default driver and the `push` method to add the `ExampleJob` to the queue. A delay can be optionally specified.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/async-queue.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Job\\ExampleJob;\nuse Hyperf\\AsyncQueue\\Driver\\DriverFactory;\nuse Hyperf\\AsyncQueue\\Driver\\DriverInterface;\n\nclass QueueService\n{\n    /**\n     * @var DriverInterface\n     */\n    protected $driver;\n\n    public function __construct(DriverFactory $driverFactory)\n    {\n        $this->driver = $driverFactory->get('default');\n    }\n\n    /**\n     * Publish the message.\n     */\n    public function push($params, int $delay = 0): bool\n    {\n        // The `ExampleJob` here will be serialized and stored in Redis, so internal variables of the object are best passed only normal data.\n        // Similarly, if the annotation is used internally, @Value will serialize the corresponding object, causing the message body to become larger.\n        // So it is NOT recommended to use the `make` method to create a `Job` object.\n        return $this->driver->push(new ExampleJob($params), $delay);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Migrations in Hyperf\nDESCRIPTION: These commands demonstrate how to run, force run, rollback, reset, refresh, and fresh migrations in Hyperf. `--force` bypasses confirmation prompts. `--step` specifies the number of migrations to rollback/refresh. `--seed` executes seeders after refreshing/freshening the database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate --force\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:rollback\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:rollback --step=5\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:reset\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:refresh\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:refresh --seed\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:refresh --step=5\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:fresh\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:fresh --seed\n```\n\n----------------------------------------\n\nTITLE: Unique Rule with Custom ID Column - PHP\nDESCRIPTION: This snippet illustrates how to specify a custom primary key column name when using the `ignore()` method of the `Rule::unique()` validator. This is necessary when the primary key column is not named 'id'.  It requires the `Hyperf\\Validation\\Rule` and `$user->id` along with the custom column name ('user_id' in this case) and a `$data` array for validation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_41\n\nLANGUAGE: PHP\nCODE:\n```\n'email' => Rule::unique('users')->ignore($user->id, 'user_id')\n```\n\n----------------------------------------\n\nTITLE: Kafka Consumer Implementation with Annotation\nDESCRIPTION: This code defines a Kafka consumer class using the `Hyperf\\Kafka\\Annotation\\Consumer` annotation. The annotation specifies the topic, number of consumers, group ID, and other consumer-related settings. The `consume` method handles the processing of consumed messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/kafka.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\kafka;\n\nuse Hyperf\\Kafka\\AbstractConsumer;\nuse Hyperf\\Kafka\\Annotation\\Consumer;\nuse longlang\\phpkafka\\Consumer\\ConsumeMessage;\n\n#[Consumer(topic: \"hyperf\", nums: 5, groupId: \"hyperf\", autoCommit: true)]\nclass KafkaConsumer extends AbstractConsumer\n{\n    public function consume(ConsumeMessage $message): string\n    {\n        var_dump($message->getTopic() . ':' . $message->getKey() . ':' . $message->getValue());\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: This is an example of a GraphQL query that can be sent to the GraphQL endpoint.  It invokes the 'hello' query, passing in the argument 'name' with the value 'graphql'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/graphql.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    hello(name: \"graphql\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Exception Class\nDESCRIPTION: This snippet shows how to define a custom exception class that extends `Hyperf\\Server\\Exception\\ServerException` and uses the `ErrorCode` enum to retrieve error messages. It handles both `ErrorCode` instances and integer error codes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/constants.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Exception;\n\nuse App\\Constants\\ErrorCode;\nuse Hyperf\\Server\\Exception\\ServerException;\nuse Throwable;\n\nclass BusinessException extends ServerException\n{\n    public function __construct(ErrorCode|int $code = 0, ?string $message = null, ?Throwable $previous = null)\n    {\n        if (is_null($message)) {\n            if ($code instanceof ErrorCode) {\n                $message = $code->getMessage();\n            } else {\n                $message = ErrorCode::getMessage($code);\n            }\n        }\n\n        $code = $code instanceof ErrorCode ? $code->value : $code;\n\n        parent::__construct($message, $code, $previous);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Controller in Hyperf\nDESCRIPTION: This code creates a WebSocket controller that implements the `OnMessageInterface`, `OnOpenInterface`, and `OnCloseInterface`. It defines the `onMessage`, `onClose`, and `onOpen` methods to handle WebSocket events, pushing messages to the client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/websocket-server.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnCloseInterface;\nuse Hyperf\\Contract\\OnMessageInterface;\nuse Hyperf\\Contract\\OnOpenInterface;\nuse Swoole\\Http\\Request;\nuse Swoole\\Server;\nuse Swoole\\Websocket\\Frame;\nuse Swoole\\WebSocket\\Server as WebSocketServer;\n\nclass WebSocketController implements OnMessageInterface, OnOpenInterface, OnCloseInterface\n{\n    public function onMessage($server, Frame $frame): void\n    {\n        $server->push($frame->fd, 'Recv: ' . $frame->data);\n    }\n\n    public function onClose($server, int $fd, int $reactorId): void\n    {\n        var_dump('closed');\n    }\n\n    public function onOpen($server, Request $request): void\n    {\n        $server->push($request->fd, 'Opened');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Whoops Exception Handler - Hyperf PHP\nDESCRIPTION: Configures the `WhoopsExceptionHandler` as the exception handler for the 'http' server in `config/autoload/exceptions.php`. This handler uses the Whoops library to provide a more detailed and interactive error page during development.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/exception-handler.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// config/autoload/exceptions.php\nreturn [\n    'handler' => [\n        'http' => [\n            \\Hyperf\\ExceptionHandler\\Handler\\WhoopsExceptionHandler::class,\n        ],    \n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Define Crontab Tasks in Configuration\nDESCRIPTION: This configuration defines Crontab tasks in the `config/autoload/crontab.php` file.  It includes examples of callback, command, and closure types. It sets the name, rule, callback, and memo for each task.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/crontab.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/crontab.php\nuse Hyperf\\Crontab\\Crontab;\nreturn [\n    'enable' => true,\n    // 通過配置文件定義的定時任務\n    'crontab' => [\n        // Callback類型定時任務（默認）\n        (new Crontab())->setName('Foo')->setRule('* * * * *')->setCallback([App\\Task\\FooTask::class, 'execute'])->setMemo('這是一個示例的定時任務'),\n        // Command類型定時任務\n        (new Crontab())->setType('command')->setName('Bar')->setRule('* * * * *')->setCallback([\n            'command' => 'swiftmailer:spool:send',\n            // (optional) arguments\n            'fooArgument' => 'barValue',\n            // (optional) options\n            '--message-limit' => 1,\n            // 記住要加上，否則會導致主進程退出\n            '--disable-event-dispatcher' => true,\n        ])->setEnvironments(['develop', 'production']),\n        // Closure 類型定時任務 (僅在 Coroutine style server 中支持)\n        (new Crontab())->setType('closure')->setName('Closure')->setRule('* * * * *')->setCallback(function () {\n            var_dump(date('Y-m-d H:i:s'));\n        })->setEnvironments('production'),\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Conditionally Loading Relationships in Hyperf Resources\nDESCRIPTION: This PHP code shows how to conditionally include a relationship ('posts') in a resource response using the `whenLoaded` method.  This prevents the 'N+1' query problem by only including the relationship if it has already been loaded on the model.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'posts' => PostResource::collection($this->whenLoaded('posts')),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install DTM-Client via Composer\nDESCRIPTION: Installs the dtm-client package using Composer.  This command adds the necessary DTM client libraries to your project, allowing you to interact with a DTM Server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/distributed-transaction.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require dtm/dtm-client\n```\n\n----------------------------------------\n\nTITLE: Exists Validation with Custom Column\nDESCRIPTION: This snippet demonstrates how to specify a custom column name when using the `exists` rule to validate that a field exists in a specified data table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n'state' => 'exists:states,abbreviation'\n```\n\n----------------------------------------\n\nTITLE: Fluent Retry with Classifier and Max Attempts\nDESCRIPTION: This code demonstrates the fluent API for retrying a function call with a ClassifierRetryPolicy (retrying all Throwables) and a MaxAttemptsRetryPolicy (max 5 retries).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/retry.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$result = \\Hyperf\\Retry\\Retry::with(\n    new \\Hyperf\\Retry\\Policy\\ClassifierRetryPolicy(), //默认重试所有Throwable\n    new \\Hyperf\\Retry\\Policy\\MaxAttemptsRetryPolicy(5) //最多重试5次\n)->call(function(){\n    if (rand(1, 100) >= 20){\n        return true;\n    }\n    throw new Exception;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Top-Level Metadata to Hyperf Resources via `additional` Method\nDESCRIPTION: This PHP code shows how to add top-level metadata to a resource response when constructing the resource instance in the controller.  The `additional` method is used to pass an array of data that will be included in the response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\UserCollection;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserCollection(User::all()->load('roles')))\n            ->additional(['meta' => [\n                'key' => 'value',\n            ]])->toResponse();    \n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Mass Assigning Attributes with Fill\nDESCRIPTION: Demonstrates using the `fill` method of the model to mass assign an array of values to attributes of that model. Requires `fillable` or `guarded` properties to be defined in the model.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$user->fill(['name' => 'Hyperf']);\n```\n\n----------------------------------------\n\nTITLE: Produce Kafka Message\nDESCRIPTION: This PHP code demonstrates how to send a message to a Kafka topic from a Hyperf controller using the `Producer::send()` method. It injects the `Producer` class and then calls the `send` method to publish a message to the 'hyperf' topic.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/kafka.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Kafka\\Producer;\n\n#[AutoController]\nclass IndexController extends AbstractController\n{\n    public function index(Producer $producer)\n    {\n        $producer->send('hyperf', 'value', 'key');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Create WebSocket Controller - PHP\nDESCRIPTION: This snippet defines a WebSocket controller class, `WebSocketController`, implementing the `OnMessageInterface`, `OnOpenInterface`, and `OnCloseInterface` contracts.  It handles WebSocket events such as message reception, connection opening, and connection closing, enabling interaction with connected clients.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/websocket-server.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnCloseInterface;\nuse Hyperf\\Contract\\OnMessageInterface;\nuse Hyperf\\Contract\\OnOpenInterface;\nuse Hyperf\\Engine\\WebSocket\\Frame;\nuse Hyperf\\Engine\\WebSocket\\Response;\nuse Hyperf\\WebSocketServer\\Constant\\Opcode;\nuse Swoole\\Server;\nuse Swoole\\WebSocket\\Server as WebSocketServer;\n\nclass WebSocketController implements OnMessageInterface, OnOpenInterface, OnCloseInterface\n{\n    public function onMessage($server, $frame): void\n    {\n        $response = (new Response($server))->init($frame);\n        if($frame->opcode == Opcode::PING) {\n            // 如果使用协程 Server，在判断是 PING 帧后，需要手动处理，返回 PONG 帧。\n            // 异步风格 Server，可以直接通过 Swoole 配置处理，详情请见 https://wiki.swoole.com/#/websocket_server?id=open_websocket_ping_frame\n            $response->push(new Frame(opcode: Opcode::PONG));\n            return;\n        }\n        $response->push(new Frame(payloadData: 'Recv: ' . $frame->data));\n    }\n\n    public function onClose($server, int $fd, int $reactorId): void\n    {\n        var_dump('closed');\n    }\n\n    public function onOpen($server, $request): void\n    {\n        $response = (new Response($server))->init($request);\n        $response->push(new Frame(payloadData: 'Opened'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define JSON RPC Service Provider with Annotation\nDESCRIPTION: Defines a JSON RPC service provider using the #[RpcService] annotation. The annotation specifies the service name, protocol, and server to bind to. Requires the Hyperf\\RpcServer\\Annotation\\RpcService namespace.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/json-rpc.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\JsonRpc;\n\nuse Hyperf\\RpcServer\\Annotation\\RpcService;\n\n/**\n * 注意，如希望通過服務中心來管理服務，需在註解內增加 publishTo 屬性\n */\n#[RpcService(name: \"CalculatorService\", protocol: \"jsonrpc-http\", server: \"jsonrpc-http\")]\nclass CalculatorService implements CalculatorServiceInterface\n{\n    // 實現一個加法方法，這裏簡單的認為參數都是 int 類型\n    public function add(int $a, int $b): int\n    {\n        // 這裏是服務方法的具體實現\n        return $a + $b;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cacheable Annotation with Custom Value in Hyperf\nDESCRIPTION: This example shows how to use the `Cacheable` annotation with a custom value parameter. When a custom value is defined, the key name is generated based on the provided expression, which can include method arguments. In this case, the cache key incorporates the `id` parameter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/cache.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service\\Cache;\n\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass DemoService\n{\n\n    #[Cacheable(prefix: \"cache\", value: \"_#{id}\", listener: \"user-update\")]\n    public function getCache(int $id)\n    {\n        return $id . '_' . uniqid();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Middleware in Hyperf PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a middleware in Hyperf that executes logic both before and after the request is handled. It uses a `try...finally` block to ensure the post-execution logic is always executed, even if an exception occurs during request handling. Requires `Hyperf\\HttpServer\\Contract\\RequestInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/middleware/middleware.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Middleware;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass OpenApiMiddleware implements MiddlewareInterface\n{\n    public function __construct(protected ContainerInterface $container)\n    {\n    }\n\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // TODO: 前置操作\n        try{\n            $result = $handler->handle($request);\n        } finally {\n            // TODO: 後置操作\n        }\n        return $result;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Hyperf Resource Class\nDESCRIPTION: This PHP code defines a basic resource class `User` extending `JsonResource`. The `toArray` method transforms model properties (`id`, `name`, `email`) into an array for JSON serialization.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Set Calculation Precision in PHP\nDESCRIPTION: This PHP code snippet shows how to set the calculation precision for an RPN expression. The `calculate()` method is used with an additional parameter specifying the desired precision (2 in this case). The expected output is '14.00'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/rpn.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->calculate('5 1 2 + 4 * + 3 -', [], 2); // '14.00'\n```\n\n----------------------------------------\n\nTITLE: Creating a UDP Server Class in Hyperf (PHP)\nDESCRIPTION: This code snippet defines a UDP server class, `UdpServer`, that implements the `OnPacketInterface`. The `onPacket` method is triggered when the server receives a UDP packet. It sends back the received data prefixed with 'Server：' to the client's address and port.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tcp-server.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnPacketInterface;\n\nclass UdpServer implements OnPacketInterface\n{\n    public function onPacket($server, $data, $clientInfo): void\n    {\n        var_dump($clientInfo);\n        $server->sendto($clientInfo['address'], $clientInfo['port'], 'Server：' . $data);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Optional Dependency Injection\nDESCRIPTION: This example shows how to inject an optional dependency using a nullable type hint. If UserService cannot be resolved, $userService will be null, preventing errors.  Requires Hyperf 1.1.0 or higher.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/di.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserService;\n\nclass IndexController\n{\n    /**\n     * @var null|UserService\n     */\n    private $userService;\n    \n    // Declare an optional parameter by setting it as nullable.\n    public function __construct(?UserService $userService)\n    {\n        $this->userService = $userService;\n    }\n    \n    public function index()\n    {\n        $id = 1;\n        if ($this->userService instanceof UserService) {\n            // $userService is available only in the condition that it is not null\n            return $this->userService->getInfoById($id);    \n        }\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Model Example (PHP)\nDESCRIPTION: This code represents an example of a generated model. It defines the namespace, class name, table association, fillable attributes, and casting rules.  Annotations like `@property` provide type hints for properties, enhancing code readability and IDE support.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/gen.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\n/**\n * @property $id\n * @property $name\n * @property $gender\n * @property $created_at\n * @property $updated_at\n */\nclass User extends Model\n{\n    /**\n     * The table associated with the model.\n     */\n    protected ?string $table = 'user';\n\n    /**\n     * The attributes that are mass assignable.\n     */\n    protected array $fillable = ['id', 'name', 'gender', 'created_at', 'updated_at'];\n\n    /**\n     * The attributes that should be cast to native types.\n     */\n    protected array $casts = ['id' => 'integer', 'gender' => 'integer'];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a POST Endpoint with Swagger Annotations\nDESCRIPTION: This code demonstrates how to define a POST endpoint using Swagger annotations.  It specifies the path, summary, tags, request body, and response details. The `SA\\RequestBody` annotation describes the expected request parameters, including data types and descriptions, while the `SA\\Response` annotation defines the response structure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/swagger.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n#[SA\\Post(path: '/test', summary: 'POST 表單示例', tags: ['Api/Test'])]\n#[SA\\RequestBody(\n    description: '請求引數',\n    content: [\n        new SA\\MediaType(\n            mediaType: 'application/x-www-form-urlencoded',\n            schema: new SA\\Schema(\n                required: ['username', 'age'],\n                properties: [\n                    new SA\\Property(property: 'username', description: '使用者名稱欄位描述', type: 'string'),\n                    new SA\\Property(property: 'age', description: '年齡欄位描述', type: 'string'),\n                    new SA\\Property(property: 'city', description: '城市欄位描述', type: 'string'),\n                ]\n            ),\n        ),\n    ],\n)]\n#[SA\\Response(response: 200, description: '返回值的描述')]\npublic function test()\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Configure VALUE_REQUIRED Option (PHP)\nDESCRIPTION: This configures a required option 'name' (or -N) with a default value of 'Hyperf'. The `handle` method retrieves and outputs the option value. This showcases setting up options with required values and a default.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addOption('name', 'N', InputOption::VALUE_REQUIRED, 'name', 'Hyperf');\n}\n\npublic function handle()\n{\n    var_dump($this->input->getOption('name'));\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection via Constructor in Hyperf (PHP)\nDESCRIPTION: This code demonstrates dependency injection using the constructor. Hyperf automatically injects the `UserService` instance into the `IndexController`'s constructor. This allows the controller to use the `UserService` without manually creating an instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/overview.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse App\\Service\\UserService;\n\n#[AutoController]\nclass IndexController\n{\n    private UserService $userService;\n    \n    // 在構造函數聲明參數的類型，Hyperf 會自動注入對應的對象或值\n    public function __construct(UserService $userService)\n    {\n        $this->userService = $userService;\n    }\n    \n    // /index/info\n    public function info(RequestInterface $request)\n    {\n        $id = $request->input('id', 1);\n        return $this->userService->getInfoById((int)$id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating MIME Types\nDESCRIPTION: This example validates the MIME types of an uploaded video file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n'video' => 'mimetypes:video/avi,video/mpeg,video/quicktime'\n```\n\n----------------------------------------\n\nTITLE: Advanced Join Statements - PHP\nDESCRIPTION: This shows how to use a closure to define more complex join conditions using a `JoinClause` object. This allows for using orOn and where clauses within the join.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->join('contacts', function ($join) {\n        $join->on('users.id', '=', 'contacts.user_id')->orOn(...);\n    })\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->join('contacts', function ($join) {\n        $join->on('users.id', '=', 'contacts.user_id')\n                ->where('contacts.user_id', '>', 5);\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Command Component\nDESCRIPTION: Install the hyperf/command component using composer. This component provides tools for creating and managing console commands within a Hyperf project, leveraging symfony/console.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/command\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Storage for Prometheus Metrics (PHP)\nDESCRIPTION: Shows how to configure Redis as the storage adapter for Prometheus metrics, instead of the default memory storage. This is done by modifying the `dependencies.php` file and binding the `Prometheus\\Storage\\Adapter` interface to the `Hyperf\\Metric\\Adapter\\Prometheus\\RedisStorageFactory::class` implementation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    Prometheus\\Storage\\Adapter::class => Hyperf\\Metric\\Adapter\\Prometheus\\RedisStorageFactory::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Subquery Joins - PHP\nDESCRIPTION: This demonstrates how to use a subquery as a join using `joinSub`. First, a subquery selecting the last post of each user is created. Then the subquery is joined against the users table on the user id.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$latestPosts = Db::table('posts')\n    ->select('user_id', Db::raw('MAX(created_at) as last_post_created_at'))\n    ->where('is_published', true)\n    ->groupBy('user_id');\n\n$users = Db::table('users')\n    ->joinSub($latestPosts, 'latest_posts', function($join) {\n        $join->on('users.id', '=', 'latest_posts.user_id');\n    })->get();\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom Database Connection\nDESCRIPTION: This snippet demonstrates how to specify a custom database connection for a model using the `$connection` property. The connection name must exist in the `databases.php` configuration file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected ?string $connection = 'connection-name';\n}\n```\n\n----------------------------------------\n\nTITLE: Read/Write Separation Database Configuration in PHP\nDESCRIPTION: Configures read/write separation by defining separate host arrays for read and write connections.  The `sticky` option ensures that read operations in the same request cycle as write operations use the write connection, avoiding replication lag.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/quick-start.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER', 'mysql'),\n        'read' => [\n            'host' => ['192.168.1.1'],\n        ],\n        'write' => [\n            'host' => ['196.168.1.2'],\n        ],\n        'sticky'    => true,\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => env('DB_CHARSET', 'utf8'),\n        'collation' => env('DB_COLLATION', 'utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX', ''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('DB_MAX_IDLE_TIME', 60),\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Model Pagination with Condition PHP\nDESCRIPTION: This code snippet demonstrates how to paginate query results with a where condition using an Eloquent Model in Hyperf. It retrieves all male users (gender = 1) from the 'User' model, displaying 10 users per page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/paginator.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php \n// 展示应用中的所有用户，每页显示 10 条数据\nreturn User::where('gender', 1)->paginate(10);\n```\n\n----------------------------------------\n\nTITLE: Implement RPC Interface - Hyperf\nDESCRIPTION: Implements the `PushInterface` for an SMS sending RPC service. The `RpcService` annotation registers this implementation as a service.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/rpc-multiplex.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\RPC;\n\nuse RPC\\Push\\PushInterface;\nuse Hyperf\\RpcMultiplex\\Constant;\nuse Hyperf\\RpcServer\\Annotation\\RpcService;\n\n#[RpcService(name: PushInterface::class, server: 'rpc', protocol: Constant::PROTOCOL_DEFAULT)]\nclass PushService implements PushInterface\n{\n    public function sendSmsCode(string $mobile, string $code): bool\n    {\n        // 實際處理邏輯\n        return true;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Polymorphic Mapping in Hyperf\nDESCRIPTION: This code snippet demonstrates how to define custom mappings for polymorphic relations in Hyperf. It uses the Relation::morphMap method to map short, application-specific names (e.g., 'user', 'book') to their corresponding model class names (e.g., Model\\User::class, Model\\Book::class). This allows you to decouple database values from internal class names, increasing flexibility and maintainability.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/relationship.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Model;\nuse Hyperf\\Database\\Model\\Relations\\Relation;\nRelation::morphMap([\n    'user' => Model\\User::class,\n    'book' => Model\\Book::class,\n]);\n\n```\n\n----------------------------------------\n\nTITLE: Queue Service for Pushing Messages\nDESCRIPTION: This code defines a `QueueService` that encapsulates the logic for pushing messages onto the asynchronous queue. It uses the `DriverFactory` to get an instance of the queue driver and pushes a new `ExampleJob` onto the queue.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Job\\ExampleJob;\nuse Hyperf\\AsyncQueue\\Driver\\DriverFactory;\nuse Hyperf\\AsyncQueue\\Driver\\DriverInterface;\n\nclass QueueService\n{\n    protected DriverInterface $driver;\n\n    public function __construct(DriverFactory $driverFactory)\n    {\n        $this->driver = $driverFactory->get('default');\n    }\n\n    /**\n     * 生產消息.\n     * @param $params 數據\n     * @param int $delay 延時時間 單位秒\n     */\n    public function push($params, int $delay = 0): bool\n    {\n        // 這裏的 `ExampleJob` 會被序列化存到 Redis 中，所以內部變量最好只傳入普通數據\n        // 同理，如果內部使用了註解 @Value 會把對應對象一起序列化，導致消息體變大。\n        // 所以這裏也不推薦使用 `make` 方法來創建 `Job` 對象。\n        return $this->driver->push(new ExampleJob($params), $delay);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Simple Where Clauses - PHP\nDESCRIPTION: Illustrates how to create simple `where` clauses using the `where()` method with three parameters: column name, operator, and value.  Also, shows how to shorten the syntax for equality comparisons and using an array of conditions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->where('gender', '=', 1)->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->where('gender', 1)->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->where('gender', '>=', 0)->get();\n\n$users = Db::table('users')->where('gender', '<>', 1)->get();\n\n$users = Db::table('users')->where('name', 'like', 'T%')->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->where([\n    ['status', '=', '1'],\n    ['gender', '=', '1'],\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Command with Devtool (Bash)\nDESCRIPTION: Generates a custom command class within the 'app/Command' directory using the hyperf/devtool component.  Requires hyperf/devtool to be installed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:command FooCommand\n```\n\n----------------------------------------\n\nTITLE: Complex Conditional Validation - PHP\nDESCRIPTION: This code illustrates how to use the `sometimes` method on the Validator instance to add complex conditional validation rules. The 'reason' field is only required and limited to 500 characters if the 'games' field is greater than or equal to 100. Requires an instance of `Hyperf\\Validation\\Validator` named `$v` and a `$data` array for validation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_45\n\nLANGUAGE: PHP\nCODE:\n```\n$v->sometimes('reason', 'required|max:500', function($input) {\n    return $input->games >= 100;\n});\n```\n\n----------------------------------------\n\nTITLE: Define Attribute Casting - Hyperf - PHP\nDESCRIPTION: This code defines the `$casts` property in a Hyperf model to specify attribute type conversions. The `is_admin` attribute, which is stored as an integer in the database, will be automatically cast to a boolean value when accessed.  Requires the `Hyperf\\DbConnection\\Model\\Model` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * The attributes that should be cast.\n     *\n     * @var array\n     */\n    protected $casts = [\n        'is_admin' => 'boolean',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Register HTTP Method Routes in Hyperf\nDESCRIPTION: This snippet demonstrates how to register routes for different HTTP methods in Hyperf. It shows how to use `Router::get`, `Router::post`, `Router::put`, `Router::patch`, `Router::delete`, `Router::head`, and `Router::addRoute`. Requires `Hyperf\\HttpServer\\Router\\Router`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/router.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\HttpServer\\Router\\Router;\n\n// 註冊與方法名一致的 HTTP METHOD 的路由\nRouter::get($uri, $callback);\nRouter::post($uri, $callback);\nRouter::put($uri, $callback);\nRouter::patch($uri, $callback);\nRouter::delete($uri, $callback);\nRouter::head($uri, $callback);\n\n// 註冊任意 HTTP METHOD 的路由\nRouter::addRoute($httpMethod, $uri, $callback);\n```\n\n----------------------------------------\n\nTITLE: Create Validator Manually\nDESCRIPTION: Demonstrates how to manually create a validator instance using the ValidatorFactoryInterface. Injects the ValidatorFactoryInterface, gets the request data using RequestInterface, and calls make() to create a validator instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\Validation\\Contract\\ValidatorFactoryInterface;\n\nclass IndexController\n{\n    #[Inject]\n    protected ValidatorFactoryInterface $validationFactory;\n\n    public function foo(RequestInterface $request)\n    {\n        $validator = $this->validationFactory->make(\n            $request->all(),\n            [\n                'foo' => 'required',\n                'bar' => 'required',\n            ],\n            [\n                'foo.required' => 'foo is required',\n                'bar.required' => 'bar is required',\n            ]\n        );\n\n        if ($validator->fails()){\n            // Handle exception\n            $errorMessage = $validator->errors()->first();  \n        }\n        // Do something\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Proxy Class for Connection Pools\nDESCRIPTION: This PHP code demonstrates how to create a proxy class, `FooRedis`, extending `Hyperf\\Redis\\Redis` to specify a specific Redis connection pool (`foo`).  This allows for easy switching of connection pools by simply getting the `FooRedis` instance from the container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/redis.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Redis\\Redis;\n\nclass FooRedis extends Redis\n{\n    // 对应的 Pool 的 key 值\n    protected $poolName = 'foo';\n}\n\n// 通过 DI 容器获取或直接注入当前类\n$redis = $this->container->get(FooRedis::class);\n\n$result = $redis->keys('*');\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Generation Options\nDESCRIPTION: This code snippet shows how to configure the model generation command options within the `databases.php` configuration file.  These configurations override the default settings when generating models using the `gen:model` command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Database\\Commands\\ModelOption;\n\nreturn [\n    'default' => [\n        // Ignore other configurations.\n        'commands' => [\n            'gen:model' => [\n                'path' => 'app/Model',\n                'force_casts' => true,\n                'inheritance' => 'Model',\n                'uses' => '',\n                'refresh_fillable' => true,\n                'table_mapping' => [],\n                'with_comments' => true,\n                'property_case' => ModelOption::PROPERTY_SNAKE_CASE,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Unique Rule with Custom Connection - PHP\nDESCRIPTION: This snippet shows how to specify a custom database connection for the `unique` validation rule in Hyperf. It sets the `connection.users` table to be checked for uniqueness when validating the `email` field.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_39\n\nLANGUAGE: PHP\nCODE:\n```\n'email' => 'unique:connection.users,email_address'\n```\n\n----------------------------------------\n\nTITLE: Returning a Resource from a Controller\nDESCRIPTION: This PHP code demonstrates returning a `UserResource` instance from a controller action.  It fetches the first user and transforms it into a resource using `UserResource`, then converts the resource to a response using `toResponse()`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Resource\\User as UserResource;\nuse App\\Model\\User;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserResource(User::first()))->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Retry Component\nDESCRIPTION: This command installs the Hyperf Retry component using Composer, the PHP package manager. It adds the necessary files to your project to enable retry functionality.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/retry.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/retry\n```\n\n----------------------------------------\n\nTITLE: Deleting a Model Instance\nDESCRIPTION: Shows how to delete a model instance using the `delete` method. The example retrieves a user model with ID 1 and then deletes it. This will physically remove the record from the database table, triggering any associated events. It assumes `App\\Model\\User` exists and is properly configured.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$user = User::query()->find(1);\n\n$user->delete();\n\n```\n\n----------------------------------------\n\nTITLE: Select Tracer Driver\nDESCRIPTION: Selects the default Tracer driver (Zipkin or Jaeger) using the `default` configuration option and configures the driver specific settings under the `tracer` array in `config/autoload/opentracing.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tracer.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    // Select the default Tracer driver, the selected Tracer name corresponds to the key defined under tracers\n    'default' => env('TRACER_DRIVER', 'staging_zipkin'),\n\n    // Other configurations are omitted here in this example\n    'enable' => [],\n\n    'tracer' => [\n        // Zipkin config\n        'staging_zipkin' => [\n            'driver' => \\Hyperf\\Tracer\\Adapter\\ZipkinTracerFactory::class,\n        ],\n        // another Zipkin config\n        'producton_zipkin' => [\n            'driver' => \\Hyperf\\Tracer\\Adapter\\ZipkinTracerFactory::class,\n        ],\n        // Jaeger config\n        'jaeger' => [\n            'driver' => \\Hyperf\\Tracer\\Adapter\\JaegerTracerFactory::class,\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Post-Middleware Implementation - Hyperf - PHP\nDESCRIPTION: This snippet demonstrates how to create a post-middleware in Hyperf that executes logic after the request has been handled.  It uses a `try...finally` block to ensure that the post-operation logic is always executed, regardless of whether an exception occurs during request handling.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/middleware/middleware.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Middleware;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass OpenApiMiddleware implements MiddlewareInterface\n{\n    public function __construct(protected ContainerInterface $container)\n    {\n    }\n\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // TODO: pre-operation\n        try{\n            $result = $handler->handle($request);\n        } finally {\n            // TODO: post operation\n        }\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Aliyun ACM Configuration Center via Composer\nDESCRIPTION: This command installs the hyperf/config-aliyun-acm package, which provides integration with the Aliyun ACM (Application Configuration Manager) service for Hyperf applications. It uses Composer, the PHP dependency manager, to download and install the necessary files.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/config-center.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-aliyun-acm\n```\n\n----------------------------------------\n\nTITLE: Create Elasticsearch Client Manually (Hyperf)\nDESCRIPTION: Creates an Elasticsearch client manually, configuring the handler to use a coroutine-compatible pool handler if running within a coroutine.  This provides more control over handler configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/elasticsearch.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Elasticsearch\\ClientBuilder;\nuse Hyperf\\Guzzle\\RingPHP\\PoolHandler;\nuse Swoole\\Coroutine;\n\n$builder = ClientBuilder::create();\nif (Coroutine::getCid() > 0) {\n    $handler = make(PoolHandler::class, [\n        'option' => [\n            'max_connections' => 50,\n        ],\n    ]);\n    $builder->setHandler($handler);\n}\n\n$client = $builder->setHosts(['http://127.0.0.1:9200'])->build();\n\n$info = $client->info();\n```\n\n----------------------------------------\n\nTITLE: Installing hyperf/db-connection for Hyperf\nDESCRIPTION: This command installs the `hyperf/db-connection` package, which provides database connection pooling for Hyperf applications based on `hyperf/pool`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/quick-start.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/db-connection\n```\n\n----------------------------------------\n\nTITLE: Configuration for ClassMap\nDESCRIPTION: This code snippet demonstrates the configuration required in `config/autoload/annotations.php` to enable the ClassMap functionality. It maps the original Guzzle Client class to the custom implementation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/guzzle.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse GuzzleHttp\\Client;\n\nreturn [\n    'scan' => [\n        // ...\n        'class_map' => [\n            Client::class => BASE_PATH . '/class_map/GuzzleHttp/Client.php',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Simulate HTTP Request with Cookies\nDESCRIPTION: Demonstrates how to send cookies with a simulated HTTP request using Hyperf\\Testing\\Client.  It creates a request, adds a cookie, sends the request and decodes the JSON response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Testing\\Client;\nuse Hyperf\\Codec\\Json;\n\n$client = make(Client::class);\n\n$response = $client->sendRequest($client->initRequest('POST', '/request')->withCookieParams([\n    'X-CODE' => $id = uniqid(),\n]));\n\n$data = Json::decode((string) $response->getBody());\n```\n\n----------------------------------------\n\nTITLE: Defining Routes via File Configuration in Hyperf\nDESCRIPTION: This snippet demonstrates how to define routes in Hyperf using the `config/routes.php` file. It showcases different ways to bind routes to controller methods for GET, POST, and other HTTP request methods. The example shows how to register multiple routes to the same controller action using different router methods.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/overview.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\HttpServer\\Router\\Router;\n\n// The code example here provides three different binding definitions for each example. In practice, you only need to define one of them.\n\n// Set the route for a GET request, bind the access address '/get' to App\\Controller\\IndexController::get()\nRouter::get('/get', 'App\\Controller\\IndexController::get');\nRouter::get('/get', 'App\\Controller\\IndexController@get');\nRouter::get('/get', [\\App\\Controller\\IndexController::class, 'get']);\n\n// Set the route for a POST request, bind the access address '/post' to App\\Controller\\IndexController::post()\nRouter::post('/post', 'App\\Controller\\IndexController::post');\nRouter::post('/post', 'App\\Controller\\IndexController@post');\nRouter::post('/post', [\\App\\Controller\\IndexController::class, 'post']);\n\n// Set a route that allows GET, POST, and HEAD requests, bind the access address '/multi' to App\\Controller\\IndexController::multi()\nRouter::addRoute(['GET', 'POST', 'HEAD'], '/multi', 'App\\Controller\\IndexController::multi');\nRouter::addRoute(['GET', 'POST', 'HEAD'], '/multi', 'App\\Controller\\IndexController@multi');\nRouter::addRoute(['GET', 'POST', 'HEAD'], '/multi', [\\App\\Controller\\IndexController::class, 'multi']);\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Interface in Hyperf\nDESCRIPTION: This snippet shows how to implement an RPC interface in a Hyperf service. It implements the `PushInterface` and uses the `#[RpcService]` annotation to register the service with the specified name, server, and protocol.  The `sendSmsCode` method provides the actual implementation logic.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/rpc-multiplex.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\RPC;\n\nuse RPC\\Push\\PushInterface;\nuse Hyperf\\RpcMultiplex\\Constant;\nuse Hyperf\\RpcServer\\Annotation\\RpcService;\n\n#[RpcService(name: PushInterface::class, server: 'rpc', protocol: Constant::PROTOCOL_DEFAULT)]\nclass PushService implements PushInterface\n{\n    public function sendSmsCode(string $mobile, string $code): bool\n    {\n        // 实际处理逻辑\n        return true;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Query Builder Pagination in Hyperf\nDESCRIPTION: This code snippet demonstrates how to paginate data using the Query Builder in Hyperf. It retrieves all users from the 'users' table and paginates the results, displaying 10 users per page. The paginate() method automatically handles the limit and offset based on the current page number from the HTTP request's 'page' parameter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/paginator.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// 展示應用中的所有使用者，每頁顯示 10 條資料\nreturn Db::table('users')->paginate(10);\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Column Names in Hyperf Model\nDESCRIPTION: Demonstrates how to customize the names of the timestamp columns (created_at and updated_at) in a Hyperf model by defining the `CREATED_AT` and `UPDATED_AT` constants. Setting one of these constants to null indicates that the ORM should not handle the corresponding field.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    const CREATED_AT = 'creation_date';\n\n    const UPDATED_AT = 'last_update';\n}\n```\n\n----------------------------------------\n\nTITLE: Clear All Session Data\nDESCRIPTION: Removes all data stored in the current session, effectively resetting the session to an empty state.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/session.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$this->session->clear();\n```\n\n----------------------------------------\n\nTITLE: Validating a Value is within the given list\nDESCRIPTION: This example demonstrates how to use Rule::in to validate that a value is within a predefined list of acceptable values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($data, [\n    'zones' => [\n        'required',\n        Rule::in(['first-zone', 'second-zone']),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Getting a single column value with pluck() in Hyperf\nDESCRIPTION: This code snippet demonstrates how to use the `pluck()` method to retrieve a collection containing a single column of values from a database table in Hyperf. It first retrieves a collection of 'name' values from the 'user' table and then iterates through the collection to display each name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$names = Db::table('user')->pluck('name');\n\nforeach ($names as $name) {\n    echo $names;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Excluding a Field Based on Admin Status (Boolean)\nDESCRIPTION: This example demonstrates how to use Rule::excludeIf to conditionally exclude a field from validation based on the user's admin status. It shows both passing a boolean and a closure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$this->validationFactory->make($request->all(), [\n    'role_id' => Rule::excludeIf($request->user()->is_admin),\n]);\n\n$this->validationFactory->make($request->all(), [\n    'role_id' => Rule::excludeIf(fn () => $request->user()->is_admin),\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Kafka\nDESCRIPTION: This command installs the hyperf/kafka component using Composer, which is required to integrate Kafka functionality into a Hyperf project. It fetches the necessary dependencies and sets up the Kafka client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/kafka.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/kafka\n```\n\n----------------------------------------\n\nTITLE: Using WebSocket Sender in HTTP Controller\nDESCRIPTION: This PHP code shows how to use the `Hyperf\\WebSocketServer\\Sender` class within an HTTP controller to push messages to or disconnect WebSocket clients based on their file descriptors (fd). It injects the Sender dependency and uses it within the `close` and `send` methods.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/websocket-server.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\WebSocketServer\\Sender;\nuse function Hyperf\\Coroutine\\go;\n\n#[AutoController]\nclass ServerController\n{\n    #[Inject]\n    protected Sender $sender;\n\n    public function close(int $fd)\n    {\n        go(function () use ($fd) {\n            sleep(1);\n            $this->sender->disconnect($fd);\n        });\n\n        return '';\n    }\n\n    public function send(int $fd)\n    {\n        $this->sender->push($fd, 'Hello World.');\n\n        return '';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install S3 Adapter (Flysystem v2.0)\nDESCRIPTION: This command installs the AWS S3 adapter for Flysystem v2.0, along with the Hyperf Guzzle HTTP client, allowing the application to interact with AWS S3 storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/filesystem.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"league/flysystem-aws-s3-v3:^2.0\"\ncomposer require hyperf/guzzle\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection in Hyperf (redis.php)\nDESCRIPTION: Defines the default Redis connection configuration including host, authentication, port, database, cluster settings, connection pool, and client options.  It retrieves configuration values from environment variables, allowing for flexible deployment settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/redis.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', ''),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'cluster' => [\n            'enable' => (bool) env('REDIS_CLUSTER_ENABLE', false),\n            'name' => null,\n            'seeds' => [],\n        ],\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n        'options' => [ // Redis 客戶端 Options, 參照 https://github.com/phpredis/phpredis#setoption\n            \\Redis::OPT_PREFIX => env('REDIS_PREFIX', ''),\n            // or 'prefix' => env('REDIS_PREFIX', ''), v3.0.38 或更高版本\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Routes in Hyperf\nDESCRIPTION: This PHP snippet configures a gRPC route in Hyperf's `routes.php` file. It maps the `/grpc.hi/sayHello` endpoint to the `sayHello` method of the `HiController` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/grpc.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nRouter::addServer('grpc'，function () {\n    Router::addGroup('/grpc.hi'，function () {\n        Router::post('/sayHello'，'App\\Controller\\HiController@sayHello');\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing hyperf/rpc-server component\nDESCRIPTION: This command installs the hyperf/rpc-server component, which is required for creating a JSON RPC service provider in Hyperf. This allows the service to expose its functionality via the JSON RPC protocol.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/json-rpc.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/rpc-server\n```\n\n----------------------------------------\n\nTITLE: Using loadCache for Eager Loading - PHP\nDESCRIPTION: This snippet demonstrates how to use the `loadCache` method to eager load model relationships from the cache. It first retrieves books from the cache and then loads the 'user' relationship from the cache.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model-cache.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$books = Book::findManyFromCache([1,2,3]);\n$books->loadCache(['user']);\n\nforeach ($books as $book){\n    var_dump($book->user);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data using DB Instance\nDESCRIPTION: Demonstrates how to query data using the DB instance obtained from the ApplicationContext.  It retrieves the DB class from the container and then uses its query method to execute a SQL query with bound parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/db.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\DB\\DB;\n\n$db = ApplicationContext::getContainer()->get(DB::class);\n\n$res = $db->query('SELECT * FROM `user` WHERE gender = ?;', [1]);\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Command with Constructor (PHP)\nDESCRIPTION: Defines a command name using the class constructor. This initializes the parent class with the command name. It is an alternative way to define commands.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    public function __construct()\n    {\n        parent::__construct('foo:hello');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example Model with Specific Data Types (PHP)\nDESCRIPTION: This snippet illustrates a model definition that includes specific data types such as `int`, `string`, and `Carbon`.  It demonstrates how data types are declared in the `@property` annotations and how they are cast using the `$casts` property within the model class.  This example showcases how data types for a particular table can be defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/gen.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\n/**\n * @property int $id\n * @property int $count\n * @property string $float_num // decimal\n * @property string $str\n * @property string $json\n * @property \\Carbon\\Carbon $created_at\n * @property \\Carbon\\Carbon $updated_at\n */\nclass UserExt extends Model\n{\n    /**\n     * The table associated with the model.\n     */\n    protected ?string $table = 'user_ext';\n\n    /**\n     * The attributes that are mass assignable.\n     */\n    protected array $fillable = ['id', 'count', 'float_num', 'str', 'json', 'created_at', 'updated_at'];\n\n    /**\n     * The attributes that should be cast to native types.\n     */\n    protected array $casts = ['id' => 'integer', 'count' => 'integer', 'float_num' => 'string', 'created_at' => 'datetime', 'updated_at' => 'datetime'];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install InfluxDB Dependencies via Composer\nDESCRIPTION: This command installs the influxdb/influxdb-php package, which is required for using the InfluxDB adapter with the Hyperf metric component. This allows the application to send metrics to an InfluxDB database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# InfluxDB required dependencies\ncomposer require influxdb/influxdb-php \n```\n\n----------------------------------------\n\nTITLE: Displaying commands defined by AsCommand\nDESCRIPTION: This demonstrates the output when running `php bin/hyperf.php` command in shell, it displays the commands that were defined using the `AsCommand` annotation, including their signatures and descriptions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n$ php bin/hyperf.php\n\n...\nfoo\n  foo:bar                   The description of foo:bar command.\n  foo:bar1                  The description of foo:bar1 command.\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Row with first() in Hyperf\nDESCRIPTION: Demonstrates how to retrieve only the first row from a database table using the `first()` method in Hyperf. This method automatically adds a `LIMIT 1` clause to the SQL query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$row = Db::table('user')->first(); // sql 會自動加上 limit 1\nvar_dump($row);\n```\n\n----------------------------------------\n\nTITLE: Defining Route Parameters in Hyperf\nDESCRIPTION: This code snippet defines a route with a parameter `{id}` and shows two ways to access the parameter in the controller: using method injection and accessing the `RequestInterface` object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/router.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nRouter::get('/user/{id}', 'App\\Controller\\UserController::info');\n?>\n\n<?php\npublic function info(int $id)\n{\n    $user = User::find($id);\n    return $user->toArray();\n}\n?>\n\n<?php\npublic function index(RequestInterface $request)\n{\n    // If it exists, it will return, if it does not exist, it will return the default value null\n    $id = $request->route('id');\n    // If it exists, it returns, if it doesn't exist, it returns the default value 0\n    $id = $request->route('id', 0);\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Using the Model Modifier - Hyperf - PHP\nDESCRIPTION: This code snippet demonstrates how to use the defined modifier to set the `first_name` property of a model instance. The modifier `setFirstNameAttribute` automatically converts the input value to lowercase before storing it. Requires an existing `User` model instance fetched from the database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$user = App\\User::find(1);\n\n$user->first_name = 'Sally';\n```\n\n----------------------------------------\n\nTITLE: Coroutine Channel Usage Example\nDESCRIPTION: Illustrates the use of Swoole Coroutine Channels for inter-coroutine communication. This example creates two coroutines, one pushing data to the channel and the other popping data from the channel, demonstrating a simple data exchange between concurrent execution units.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/coroutine.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nco(function () {\n    $channel = new \\Swoole\\Coroutine\\Channel();\n    co(function () use ($channel) {\n        $channel->push('data');\n    });\n    $data = $channel->pop();\n});\n```\n\n----------------------------------------\n\nTITLE: Filesystem Factory Usage Example (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to use the `Hyperf\\Filesystem\\FilesystemFactory` class to dynamically select and use different storage drivers (e.g., 'local', 's3'). It injects the `FilesystemFactory` and retrieves specific filesystem instances by name.  It then performs a write operation on both the local and S3 filesystems.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/filesystem.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nclass IndexController\n{\n    public function example(\\Hyperf\\Filesystem\\FilesystemFactory $factory)\n    {\n    \t$local = $factory->get('local');\n        // Write Files\n        $local->write('path/to/file.txt', 'contents');\n\n        $s3 = $factory->get('s3');\n\n        $s3->write('path/to/file.txt', 'contents');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing All Data from Hyperf Session\nDESCRIPTION: Clears all data from the current session using the `clear` method. The `clear` method removes all key-value pairs currently stored in the session.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/session.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$this->session->clear();\n```\n\n----------------------------------------\n\nTITLE: Error Example - PHP\nDESCRIPTION: Demonstrates how a PHP notice is converted into an `ErrorException` when the `ErrorExceptionHandler` listener is enabled.  The `try...catch` block catches the exception and dumps its class and message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/exception-handler.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ntry {\n    $a = [];\n    var_dump($a[1]);\n} catch (\\Throwable $throwable) {\n    var_dump(get_class($throwable), $throwable->getMessage());\n}\n\n// string(14) \"ErrorException\"\n// string(19) \"Undefined offset: 1\"\n```\n\n----------------------------------------\n\nTITLE: Conditionally Requiring a Field Based on Admin Status (Boolean)\nDESCRIPTION: This example demonstrates how to use Rule::requiredIf to conditionally require a field based on the user's admin status. It shows both passing a boolean and a closure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($request->all(), [\n    'role_id' => Rule::requiredIf($request->user()->is_admin),\n]);\n\n$validator = $this->validationFactory->make($request->all(), [\n    'role_id' => Rule::requiredIf(function () use ($request) {\n        return $request->user()->is_admin;\n    }),\n]);\n```\n\n----------------------------------------\n\nTITLE: Conditional Required If Validation (Closure)\nDESCRIPTION: This snippet uses `Rule::requiredIf` with a closure to conditionally require a field based on a dynamic condition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($request->all(), [\n    'role_id' => Rule::requiredIf(function () use ($request) {\n        return $request->user()->is_admin;\n    }),\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating an RPC Consumer in Hyperf\nDESCRIPTION: This code demonstrates how to create an RPC consumer using Hyperf's AMQP component. The consumer listens to a specific exchange and routing key, processes the message, and replies with modified data using the `reply` method. It uses `Hyperf\\Amqp\\Annotation\\Consumer` to define the consumer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/amqp.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Amqp\\Consumer;\n\nuse Hyperf\\Amqp\\Annotation\\Consumer;\nuse Hyperf\\Amqp\\Message\\ConsumerMessage;\nuse Hyperf\\Amqp\\Result;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n#[Consumer(exchange: \"hyperf\", routingKey: \"hyperf\", queue: \"rpc.reply\", name: \"ReplyConsumer\", nums: 1, enable: true)]\nclass ReplyConsumer extends ConsumerMessage\n{\n    public function consumeMessage($data, AMQPMessage $message): Result\n    {\n        $data['message'] .= 'Reply:' . $data['message'];\n\n        $this->reply($data, $message);\n\n        return Result::ACK;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: DTM-Client Configuration File (PHP)\nDESCRIPTION: Example configuration file for DTM-Client, defining settings such as communication protocol, server address, ports, sub-transaction barrier configuration (DB and Redis), and Guzzle client options.  This configuration is essential for the client to properly connect and interact with the DTM Server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/distributed-transaction.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse DtmClient\\Constants\\Protocol;\nuse DtmClient\\Constants\\DbType;\n\nreturn [\n    // The communication protocol between the client and the DTM Server, supports Protocol::HTTP and Protocol::GRPC\n    'protocol' => Protocol::HTTP,\n    // DTM Server address\n    'server' => '127.0.0.1',\n    // DTM Server port\n    'port' => [\n        'http' => 36789,\n        'grpc' => 36790,\n    ],\n    // Sub-transaction barrier\n    'barrier' => [\n        // Subtransaction barrier configuration in DB mode \n        'db' => [\n            'type' => DbType::MySQL\n        ],\n        // Subtransaction barrier configuration in Redis mode\n        'redis' => [\n            // Timeout for subtransaction barrier records\n            'expire_seconds' => 7 * 86400,\n        ],\n        // Classes that apply sub-transaction barriers in non-Hyperf frameworks or without annotation usage\n        'apply' => [],\n    ],\n    // Options of Guzzle client under HTTP protocol\n    'guzzle' => [\n        'options' => [],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Convert Coroutine Result to Observable Sequence\nDESCRIPTION: This code creates multiple coroutines, executes them concurrently, and converts their results into an Observable sequence. It returns the result of the first coroutine that completes, similar to JavaScript's `Promise.race`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/reactive-x.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\ReactiveX\\Observable;\nuse Swoole\\Coroutine\\Channel;\n\n$result = new Channel(1);\n$o = Observable::fromCoroutine([function () {\n    sleep(2);\n    return 1;\n}, function () {\n    sleep(1);\n    return 2;\n}]);\n$o->take(1)->subscribe(\n    function ($x) use ($result) {\n        $result->push($x);\n    }\n);\necho $result->pop(); // 2;\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Filesystem Component\nDESCRIPTION: Installs the core `hyperf/filesystem` package using Composer, providing the base Flysystem integration for Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/filesystem.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/filesystem\n```\n\n----------------------------------------\n\nTITLE: Removing and Retrieving Data from Hyperf Session\nDESCRIPTION: Removes and retrieves a piece of data from the session using the `remove` method. The `remove` method takes a string representing the key, removes the corresponding value from the session, and returns the removed value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/session.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$data = $this->session->remove('foo');\n```\n\n----------------------------------------\n\nTITLE: Running commands within a Hyperf Command class\nDESCRIPTION: This example demonstrates how to call another command from within a Hyperf Command class. It uses the `$this->call()` method to execute the 'bar' command with a '--foo' parameter. The command class is defined using the `#[Command]` attribute.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\nuse Psr\\Container\\ContainerInterface;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    protected ContainerInterface $container;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n\n        parent::__construct('foo');\n    }\n\n    public function configure()\n    {\n        parent::configure();\n        $this->setDescription('foo command');\n    }\n\n    public function handle()\n    {\n        $this->call('bar', [\n            '--foo' => 'foo'\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Register Shutdown Callback\nDESCRIPTION: This PHP code snippet demonstrates how to register a shutdown callback to the Hyperf server. It's necessary for properly unregistering the service when the server shuts down.  The callback is added to the ON_SHUTDOWN event.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nacos.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Server\\Event;\nreturn [\n    // ...other\n    'callbacks' => [\n        // ...other\n        Event::ON_SHUTDOWN => [Hyperf\\Framework\\Bootstrap\\ShutdownCallback::class, 'onShutdown']\n    ]\n];\n\n```\n\n----------------------------------------\n\nTITLE: Iterating through results from Db::table()->get()\nDESCRIPTION: This snippet illustrates how to iterate through the results obtained from `Db::table('user')->get()`. Each element in the collection is an `stdClass` object, and you can access its properties directly using the `->` operator. It assumes that `$users` has been previously assigned the results from a database query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding /metrics Route in Hyperf\nDESCRIPTION: This code snippet demonstrates how to add a /metrics route in Hyperf using the Router class. It retrieves the Prometheus CollectorRegistry from the application context, renders the metrics using Prometheus\\RenderTextFormat, and returns the rendered output.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\HttpServer\\Router\\Router;\n\nRouter::get('/metrics', function(){\n    $registry = Hyperf\\Context\\ApplicationContext::getContainer()->get(Prometheus\\CollectorRegistry::class);\n    $renderer = new Prometheus\\RenderTextFormat();\n    return $renderer->render($registry->getMetricFamilySamples());\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Enum with Message with Placeholders in PHP\nDESCRIPTION: This code snippet showcases how to define an enum in PHP using the `Hyperf\\Constants` package, which includes the ability to define placeholder message strings that accept variable parameters. This is used for creating dynamic error messages, allowing values to be injected into the message string during retrieval.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/constants.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n\nuse Hyperf\\Constants\\Annotation\\Constants;\nuse Hyperf\\Constants\\Annotation\\Message;\nuse Hyperf\\Constants\\EnumConstantsTrait;\n\n#[Constants]\nenum ErrorCode: int\n{\n    use EnumConstantsTrait;\n    \n    #[Message(\"Params %s is invalid.\")]\n    case PARAMS_INVALID = 1000;\n}\n\n$message = ErrorCode::PARAMS_INVALID->getMessage(['user_id']);\n\n```\n\n----------------------------------------\n\nTITLE: Defining Single Middleware with Annotation - PHP\nDESCRIPTION: This code snippet demonstrates how to define a single middleware for a controller using the `#[Middleware]` annotation. Requires `use Hyperf\\HttpServer\\Annotation\\Middleware;` and should be used with `#[AutoController]` or `#[Controller]`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/middleware/middleware.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Middleware\\FooMiddleware;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\HttpServer\\Annotation\\Middleware;\n\n#[AutoController]\n#[Middleware(FooMiddleware::class)]\nclass IndexController\n{\n    public function index()\n    {\n        return 'Hello Hyperf.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Service Governance Driver (Hyperf)\nDESCRIPTION: This code demonstrates creating a custom service governance driver, `FooDriver`, by implementing the `Hyperf\\ServiceGovernance\\DriverInterface`. This allows users to integrate with different service registries or implement custom logic for service discovery and registration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/service-register.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\ServiceGovernance;\n\nuse Hyperf\\ServiceGovernance\\DriverInterface;\n\nclass FooDriver implements DriverInterface\n{\n    public function getNodes(string $uri, string $name, array $metadata): array\n    {\n        return [];\n    }\n\n    public function register(string $name, string $host, int $port, array $metadata): void\n    {\n    }\n\n    public function isRegistered(string $name, string $address, int $port, array $metadata): bool\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregate Queries - PHP\nDESCRIPTION: This snippet illustrates how to perform aggregate queries using the Hyperf query builder. It calculates the total number of records in the 'user' table using the `count()` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$count = Db::table('user')->count();\n```\n\n----------------------------------------\n\nTITLE: Define Custom Exception Class - PHP\nDESCRIPTION: Defines a custom exception class `FooException` that extends `Hyperf\\Server\\Exception\\ServerException`.  This allows you to create specific exception types for your application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/exception-handler.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Exception;\n\nuse App\\Constants\\ErrorCode;\nuse Hyperf\\Server\\Exception\\ServerException;\nuse Throwable;\n\nclass FooException extends ServerException\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Generating NATS Consumer\nDESCRIPTION: This command generates a NATS consumer class using the Hyperf console. The generated consumer can then be configured to handle messages from a specific subject and queue.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nats.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nphp bin/hyperf.php gen:nats-consumer DemoConsumer\n```\n\n----------------------------------------\n\nTITLE: Checking if Input Value Exists PHP\nDESCRIPTION: Demonstrates how to check if a value exists in the request using the `has()` method. It can check for a single key or multiple keys at once.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/request.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// Only judge a single value\nif ($request->has('name')) {\n    // ...\n}\n\n// Judge multiple values at the same time\nif ($request->has(['name','email'])) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Define Command by Annotation (PHP)\nDESCRIPTION: This code snippet demonstrates defining a command named `foo:hello` using the `#[Command]` annotation with the `name` parameter.  The command extends `HyperfCommand`. This method provides a declarative way to define the command name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\n\n#[Command(name: \"foo:hello\")]\nclass FooCommand extends HyperfCommand\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Tracer driver in Hyperf\nDESCRIPTION: This code shows how to configure the default tracer driver and tracer configurations within the 'config/autoload/opentracing.php' file. The 'default' key specifies the driver to use, while the 'tracer' key holds specific configurations for each supported driver (Zipkin, Jaeger).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tracer.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    // 选择默认的 Tracer 驱动，所选 Tracer 名称对应 tracers 下定义的键\n    'default' => env('TRACER_DRIVER', 'staging_zipkin'),\n\n    // 这里暂时省略其他配置\n    'enable' => [],\n\n    'tracer' => [\n        // Zipkin 配置\n        'staging_zipkin' => [\n            'driver' => \\Hyperf\\Tracer\\Adapter\\ZipkinTracerFactory::class,\n        ],\n        // 另一套 Zipkin 配置\n        'producton_zipkin' => [\n            'driver' => \\Hyperf\\Tracer\\Adapter\\ZipkinTracerFactory::class,\n        ],\n        // Jaeger 配置\n        'jaeger' => [\n            'driver' => \\Hyperf\\Tracer\\Adapter\\JaegerTracerFactory::class,\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Defining VALUE_NONE Option (PHP)\nDESCRIPTION: Defines an option that acts as a boolean flag using `InputOption::VALUE_NONE`.  The presence of the option is checked using `$this->input->getOption()` in the `handle()` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addOption('opt', 'o', InputOption::VALUE_NONE, '是否優化');\n}\n\npublic function handle()\n{\n    var_dump($this->input->getOption('opt'));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Delay Producer\nDESCRIPTION: This PHP code defines a delay producer class named `DelayDirectProducer`. It extends `ProducerMessage`, uses `ProducerDelayedMessageTrait` to add delay functionality, and specifies the exchange and type. It also sets the payload. It uses annotations to configure the producer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/amqp.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Amqp\\Producer;\n\nuse Hyperf\\Amqp\\Annotation\\Producer;\nuse Hyperf\\Amqp\\Message\\ProducerDelayedMessageTrait;\nuse Hyperf\\Amqp\\Message\\ProducerMessage;\nuse Hyperf\\Amqp\\Message\\Type;\n\n#[Producer]\nclass DelayDirectProducer extends ProducerMessage\n{\n    use ProducerDelayedMessageTrait;\n\n    protected $exchange = 'ext.hyperf.delay';\n\n    protected $type = Type::DIRECT;\n\n    protected $routingKey = '';\n\n    public function __construct($data)\n    {\n        $this->payload = $data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Exception Handler via Configuration in Hyperf\nDESCRIPTION: This snippet demonstrates how to register a custom exception handler in Hyperf using the configuration file. It defines an array structure with the 'handler' key, specifying the server context ('http' in this case) and a fully qualified class name for the exception handler.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/exception-handler.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// config/autoload/exceptions.php\nreturn [\n    'handler' => [\n        // 這裡的 http 對應 config/autoload/server.php 內的 server 所對應的 name 值\n        'http' => [\n            // 這裡配置完整的類名稱空間地址已完成對該異常處理器的註冊\n            \\App\\Exception\\Handler\\FooExceptionHandler::class,\n        ],    \n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Publishing Filesystem Configuration\nDESCRIPTION: Publishes the default filesystem configuration file to `config/autoload/file.php`. This allows customizing the default driver and credentials.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/filesystem.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/filesystem\n```\n\n----------------------------------------\n\nTITLE: Short-lived Object Creation with make()\nDESCRIPTION: Creates a short-lived UserService instance using the make() function, allowing for constructor dependency injection. The object's dependencies are long-lived objects.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$userService = make(UserService::class, ['enableCache' => true]);\n```\n\n----------------------------------------\n\nTITLE: Setting Redis Client Options\nDESCRIPTION: This PHP code demonstrates how to modify Redis client options, such as setting the serializer to PHP serialization.  This example uses the `options` array in the Redis configuration to define the `Redis::OPT_SERIALIZER`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/redis.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', null),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n        'options' => [\n            \\Redis::OPT_SERIALIZER => \\Redis::SERIALIZER_PHP,\n            // 或者 'serializer' => \\Redis::SERIALIZER_PHP, v3.0.38 或更高版本\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Validating Finish Date After Start Date\nDESCRIPTION: This example demonstrates how to validate if the finish_date field is a date and occurs after the start_date field. It uses the after:date rule with another field as the comparison value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n'finish_date' => 'required|date|after:start_date'\n```\n\n----------------------------------------\n\nTITLE: Configure Aliyun Nacos Authentication\nDESCRIPTION: Configures authentication with Alibaba Cloud's Nacos service using access key and secret key. This configuration is used when the Nacos service requires AK/SK authentication.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nacos.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    // nacos server url like https://nacos.hyperf.io, Priority is higher than host:port\n    // 'uri' => 'http://127.0.0.1:8848/',\n    // The nacos host info\n    'host' => '127.0.0.1',\n    'port' => 8848,\n    // The nacos account info\n    'username' => null,\n    'password' => null,\n    'access_key' => 'xxxx',\n    'access_secret' => 'yyyy',\n    'guzzle' => [\n        'config' => null,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Use Custom CastsAttributes Class in Model - Hyperf - PHP\nDESCRIPTION: This code demonstrates how to use the custom `Json` cast defined earlier.  The `options` attribute of the `User` model is assigned the `Json::class` which tells Hyperf to use the custom `Json` class to handle the type conversion for this attribute. Requires the `Hyperf\\DbConnection\\Model\\Model` class and the `App\\Casts\\Json` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse App\\Casts\\Json;\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * Properties that should be typecast\n     *\n     * @var array\n     */\n    protected $casts = [\n        'options' => Json::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Signal Handlers for Safe Shutdown\nDESCRIPTION: This PHP code configures signal handlers for safe shutdown of processes in Hyperf. It specifies the `ProcessStopHandler` to be used when a process stop signal is received, allowing the asynchronous queue consumer to complete its current tasks before exiting.  The timeout specifies the maximum time to wait for the process to stop gracefully.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'handlers' => [\n        Hyperf\\Process\\Handler\\ProcessStopHandler::class,\n    ],\n    'timeout' => 5.0,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Changing Scan Adapter\nDESCRIPTION: This example show how to replace the scan adapter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nHyperf\\Di\\ClassLoader::init(handler: new Hyperf\\Di\\ScanHandler\\ProcScanHandler());\n```\n\n----------------------------------------\n\nTITLE: Define Command Logic (PHP)\nDESCRIPTION: This code defines the logic of the `FooCommand` within the `handle` method.  It outputs 'Hello Hyperf.' to the console using the `line()` method.  The command is registered with the `#[Command]` annotation and has a `$name` property defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    /**\n     * The command\n     *\n     * @var string\n     */\n    protected ?string $name = 'foo:hello';\n    \n    public function handle()\n    {\n        // Output Hello Hyperf. in the Console via the built-in method line()\n        $this->line('Hello Hyperf.', 'info');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Relational Query PHP\nDESCRIPTION: Queries for images that are related to either a `User` or a `Book` with an ID of 1. It uses the `whereHasMorph` method to filter images based on the type and ID of their related model.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/relationship.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\Book;\nuse App\\Model\\Image;\nuse App\\Model\\User;\nuse Hyperf\\Database\\Model\\Builder;\n\n$images = Image::query()->whereHasMorph(\n    'imageable',\n    [\n        User::class,\n        Book::class,\n    ],\n    function (Builder $query) {\n        $query->where('imageable_id', 1);\n    }\n)->get();\n```\n\n----------------------------------------\n\nTITLE: Registering Listener via Annotation - PHP\nDESCRIPTION: Registers the `UserRegisteredListener` using the `#[Listener]` annotation.  This simplifies listener registration as long as the listener class is within the Hyperf annotation scanning scope. The priority can be set using `#[Listener(priority=1)]`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/event.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Listener;\n\nuse App\\Event\\UserRegistered;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\n\n#[Listener]\nclass UserRegisteredListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        // 返回一个该监听器要监听的事件数组，可以同时监听多个事件\n        return [\n            UserRegistered::class,\n        ];\n    }\n\n    /**\n     * @param UserRegistered $event\n     */\n    public function process(object $event): void\n    {\n        // 事件触发后该监听器要执行的代码写在这里，比如该示例下的发送用户注册成功短信等\n        // 直接访问 $event 的 user 属性获得事件触发时传递的参数值\n        // $event->user;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with #[AutoController] Annotation in Hyperf (PHP)\nDESCRIPTION: This code snippet demonstrates how to define routes using the `#[AutoController]` annotation.  When used, Hyperf automatically generates routes for all public methods in the controller, allowing access via GET and POST requests. Requires `use Hyperf\\HttpServer\\Annotation\\AutoController;`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/overview.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass IndexController\n{\n    // Hyperf 會自動為此方法生成一個 /index/index 的路由，允許通過 GET 或 POST 方式請求\n    public function index(RequestInterface $request)\n    {\n        // 從請求中獲得 id 參數\n        $id = $request->input('id', 1);\n        return (string)$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Migrations (Bash)\nDESCRIPTION: This command reverts the last batch of migrations that were run. It executes the `down` methods of the migrations to undo the changes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:rollback\n```\n\n----------------------------------------\n\nTITLE: Custom Service Governance Driver Interface (Hyperf)\nDESCRIPTION: This defines a custom service governance driver interface `FooDriver` implementing `Hyperf\\ServiceGovernance\\DriverInterface`. It includes methods for getting nodes (`getNodes`), registering the service (`register`), and checking if the service is registered (`isRegistered`).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/service-register.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\ServiceGovernance;\n\nuse Hyperf\\ServiceGovernance\\DriverInterface;\n\nclass FooDriver implements DriverInterface\n{\n    public function getNodes(string $uri, string $name, array $metadata): array\n    {\n        return [];\n    }\n\n    public function register(string $name, string $host, int $port, array $metadata): void\n    {\n    }\n\n    public function isRegistered(string $name, string $address, int $port, array $metadata): bool\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional query with default execution in Hyperf\nDESCRIPTION: This example demonstrates how to use `when` with a default closure. If `$sortBy` is null, it sorts by 'name'; otherwise, it sorts by `$sortBy`. It uses Hyperf's database query builder.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$sortBy = null;\n\n$users = Db::table('users')\n    ->when($sortBy, function ($query, $sortBy) {\n        return $query->orderBy($sortBy);\n    }, function ($query) {\n        return $query->orderBy('name');\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Config Package\nDESCRIPTION: This command installs the hyperf/config package, which provides the configuration management features for Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config\n```\n\n----------------------------------------\n\nTITLE: Checking Config Existence\nDESCRIPTION: Illustrates how to check if a configuration key exists using the `has()` method of the `Hyperf\\Contract\\ConfigInterface` object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @var \\Hyperf\\Contract\\ConfigInterface\n */\n// 透過 has(): bool 方法判斷對應的 $key 值是否存在於配置中，$key 值可以透過 . 連線符定位到下級陣列\n$config->has($key);\n```\n\n----------------------------------------\n\nTITLE: Verifying Successful Upload PHP\nDESCRIPTION: Shows how to verify if an uploaded file is valid using the `isValid()` method of the `UploadedFile` object.  Returns true if the upload was successful and the file is valid, false otherwise.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/request.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nif ($request->file('photo')->isValid()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering results with orderBy in Hyperf\nDESCRIPTION: This code demonstrates how to order the result set by a given field using the `orderBy` method in Hyperf's query builder. The example sorts users by the 'name' field in descending order ('desc').\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->orderBy('name', 'desc')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Customizing Rate Limit Key in Hyperf\nDESCRIPTION: Demonstrates how to customize the rate limit key using a callable specified in the `key` parameter of the `@RateLimit` annotation. This allows for rate limiting based on parameters other than the request URL, such as user ID.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/rate-limit.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\nuse Hyperf\\RateLimit\\Annotation\\RateLimit;\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\n\nclass TestController\n{\n    /**\n     * @RateLimit(create=1, capacity=3, key={TestController::class, \"getUserId\"})\n     */\n    public function test()\n    {\n        return [\"QPS 1, 峯值3\"];\n    }\n\n    public static function getUserId(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        $request = ApplicationContext::getContainer()->get(RequestInterface::class);\n        // 同理可以根據手機號、IP地址等不同緯度進行限流\n        return $request->input('user_id');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Column Attributes in Schema\nDESCRIPTION: This code snippet demonstrates how to modify existing column attributes, such as length, and nullability, using the `change` method within a Schema builder. It involves creating a 'users' table and altering the 'name' column.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nSchema::create('users', function (Blueprint $table) {\n    // 將欄位的長度修改為 50\n    $table->string('name', 50)->change();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Redis Read Timeout Option\nDESCRIPTION: This configuration shows how to set the Redis read timeout to never timeout, by setting the \\Redis::OPT_READ_TIMEOUT option to -1.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/redis.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', null),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n        'options' => [\n            \\Redis::OPT_READ_TIMEOUT => -1,\n            // or 'read_timeout' => -1, v3.0.38 or later\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configure RPC Server - Hyperf\nDESCRIPTION: Configures the RPC server in the `config/autoload/server.php` file.  Specifies the host, port, sock_type, callbacks, and settings for the server, including the package length check settings which are crucial for the multiplex protocol. The `send_channel_capacity` option is essential to prevent errors caused by cross-coroutine socket writes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/rpc-multiplex.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\nuse Hyperf\\Server\\Server;\n\nreturn [\n    'servers' => [\n        [\n            'name' => 'rpc',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9502,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_RECEIVE => [Hyperf\\RpcMultiplex\\TcpServer::class, 'onReceive'],\n            ],\n            'settings' => [\n                'open_length_check' => true,\n                'package_length_type' => 'N',\n                'package_length_offset' => 0,\n                'package_body_offset' => 4,\n                'package_max_length' => 1024 * 1024 * 2,\n            ],\n            'options' => [\n                // 多路複用下，避免跨協程 Socket 跨協程多寫報錯\n                'send_channel_capacity' => 65535,\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Storing uploaded file - PHP\nDESCRIPTION: Shows how to move an uploaded file from its temporary location to a permanent location using the `moveTo()` method. Also shows how to check if the file has already been moved with the `isMoved()` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n$file = $request->file('photo');\n$file->moveTo('/foo/bar.jpg');\n\n// 通過 isMoved(): bool 方法判斷方法是否已移動\nif ($file->isMoved()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Command Using the $name Property - PHP\nDESCRIPTION: Define a command's name by setting the `$name` property within the command class. This is one of the three ways to assign a name for the console command. Requires Hyperf Command component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    /**\n     * 执行的命令行\n     */\n    protected ?string $name = 'foo:hello';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Advanced Join Statement with Closure\nDESCRIPTION: This snippet demonstrates advanced join statements by passing a closure as the second parameter of the `join` method. The closure accepts a `JoinClause` object to specify constraints.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->join('contacts', function ($join) {\n        $join->on('users.id', '=', 'contacts.user_id')->orOn(...);\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Using Socket API in Hyperf\nDESCRIPTION: This PHP code snippet illustrates how to utilize the Socket API within a Hyperf Socket.IO event handler.  It demonstrates emitting events to the client, broadcasting messages to all clients except the sender, sending messages to specific rooms, and sending messages with acknowledgement.  The snippet provides a comprehensive overview of the different communication patterns possible with the Socket API.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/socketio-server.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n#[Event(\"SomeEvent\")]\nfunction onSomeEvent(\\Hyperf\\SocketIOServer\\Socket $socket){\n\n  // sending to the client\n  // 向连接推送 hello 事件\n  $socket->emit('hello', 'can you hear me?', 1, 2, 'abc');\n\n  // sending to all clients except sender\n  // 向所有连接推送 broadcast 事件，但是不包括当前连接。\n  $socket->broadcast->emit('broadcast', 'hello friends!');\n\n  // sending to all clients in 'game' room except sender\n  // 向 game 房间内所有连接推送 nice game 事件，但是不包括当前连接。\n  $socket->to('game')->emit('nice game', \"let's play a game\");\n\n  // sending to all clients in 'game1' and/or in 'game2' room, except sender\n  // 向 game1 房间 和 game2 房间内所有连接取并集推送 nice game 事件，但是不包括当前连接。\n  $socket->to('game1')->to('game2')->emit('nice game', \"let's play a game (too)\");\n\n  // WARNING: `$socket->to($socket->getSid())->emit()` will NOT work, as it will send to everyone in the room\n  // named `$socket->getSid()` but the sender. Please use the classic `$socket->emit()` instead.\n  // 注意：自己给自己推送的时候不要加to，因为$socket->to()总是排除自己。直接$socket->emit()就好了。\n\n  // sending with acknowledgement\n  // 发送信息，并且等待并接收客户端响应。\n  $reply = $socket->emit('question', 'do you think so?')->reply();\n\n  // sending without compression\n  // 无压缩推送\n  $socket->compress(false)->emit('uncompressed', \"that's rough\");\n}\n```\n\n----------------------------------------\n\nTITLE: Access Polymorphic One-to-Many Relation (PHP)\nDESCRIPTION: This code demonstrates how to access a polymorphic one-to-many relation. It retrieves a `User` by ID and iterates over the related `Image` models.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Model\\User;\n\n$user = User::query()->find(1);\nforeach ($user->images as $image) {\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Distributing Socket.IO Events Using Annotations in Hyperf (PHP)\nDESCRIPTION: This snippet shows how to use annotations to distribute Socket.IO events in a Hyperf controller. The #[SocketIONamespace(\"/\")] and #[Event] annotations are used to automatically register the 'echo' method as an event handler for the root namespace.  It's important to avoid conflicts with other public methods that might inadvertently be treated as event handlers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/socketio-server.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\SocketIOServer\\Annotation\\SocketIONamespace;\nuse Hyperf\\SocketIOServer\\Annotation\\Event;\nuse Hyperf\\SocketIOServer\\BaseNamespace;\nuse Hyperf\\SocketIOServer\\Socket;\n\n#[SocketIONamespace(\"/\")]\n#[Event]\nclass WebSocketController extends BaseNamespace\n{\n    public function echo(Socket $socket, $data)\n    {\n        $socket->emit('event', $data);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer to Use a Local Component\nDESCRIPTION: This JSON snippet demonstrates how to configure the `composer.json` file to use an unpublished component package located on the local filesystem. It defines a `path` repository pointing to the component's directory, allowing Composer to resolve the component's dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/component-guide/create.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"require\": {\n        \"your_component/your_component\": \"dev-master\"\n    },\n    \"repositories\": {\n        \"your_component\": {\n            \"type\": \"path\",\n            \"url\": \"/opt/your_component\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Hyperf WebSocket Client to Send and Receive Messages\nDESCRIPTION: Demonstrates how to use the ClientFactory to create a WebSocket client, send a message to the server, and receive a response. Requires the Hyperf DI container and the Hyperf\\WebSocketClient components.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/websocket-client.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\WebSocketClient\\ClientFactory;\nuse Hyperf\\WebSocketClient\\Frame;\n\nclass IndexController\n{\n    #[Inject]\n    protected ClientFactory $clientFactory;\n\n    public function index()\n    {\n        // The address of the peer service. If there is no prefix like ws:// or wss://, then the ws:// would be used as default.\n        $host = '127.0.0.1:9502';\n        // Create Client object through ClientFactory. Short-lived objects will be created.\n        $client = $this->clientFactory->create($host);\n        // Send a message to the WebSocket server\n        $client->push('Use WebSocket Client to send data in HttpServer.');\n        // Get a response from the server. The server should use 'push()' to send messages to fd of the client, only in this way, can the response be received.\n        // A Frame object is taken as an example in following with 2 seconds timeout.\n        /** @var Frame $msg */\n        $msg = $client->recv(2);\n        // Get text data: $res_msg->data\n        return $msg->data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Context Usage in WebSocket - PHP\nDESCRIPTION: This snippet demonstrates how to use connection-level context in a WebSocket controller. It sets the 'username' in the `onOpen` method using the request cookies and retrieves it in the `onMessage` method. This provides a way to store and access data specific to a WebSocket connection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/websocket-server.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnMessageInterface;\nuse Hyperf\\Contract\\OnOpenInterface;\nuse Hyperf\\Engine\\WebSocket\\Frame;\nuse Hyperf\\Engine\\WebSocket\\Response;\nuse Hyperf\\WebSocketServer\\Context;\nuse Swoole\\WebSocket\\Server as WebSocketServer;\n\nclass WebSocketController implements OnMessageInterface, OnOpenInterface\n{\n    public function onMessage($server, $frame): void\n    {\n        $response = (new Response($server))->init($frame);\n        $response->push(new Frame(payloadData: 'Username: ' . Context::get('username')));\n    }\n\n    public function onOpen($server, $request): void\n    {\n        Context::set('username', $request->cookie['username']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: whereNotIn Statement - Hyperf PHP\nDESCRIPTION: Demonstrates the usage of the `whereNotIn` method in Hyperf. This method is used to ensure that the field's value does not exist in the provided array. The method accepts the field name and the array of values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->whereNotIn('id', [1, 2, 3])->get();\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Resource Collection\nDESCRIPTION: This PHP code demonstrates how to add metadata, such as links, to a resource collection. By including the 'links' key in the `toArray` method of the `UserCollection` resource, you can add custom metadata to the resource response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Service Configuration (Hyperf)\nDESCRIPTION: This is the configuration file (`config/autoload/services.php`) for service governance in Hyperf.  It configures service discovery, registration, consumers, providers, and drivers (Consul and Nacos). The 'enable' section toggles discovery and registration. 'drivers' contains Consul and Nacos specific configurations like URI, token, host, port, and account information.  It returns an array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/service-register.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'enable' => [\n        // 開啟服務發現\n        'discovery' => true,\n        // 開啟服務註冊\n        'register' => true,\n    ],\n    // 服務消費者相關配置\n    'consumers' => [],\n    // 服務提供者相關配置\n    'providers' => [],\n    // 服務驅動相關配置\n    'drivers' => [\n        'consul' => [\n            'uri' => 'http://127.0.0.1:8500',\n            'token' => '',\n            'check' => [\n                'deregister_critical_service_after' => '90m',\n                'interval' => '1s',\n            ],\n        ],\n        'nacos' => [\n            // nacos server url like https://nacos.hyperf.io, Priority is higher than host:port\n            // 'url' => '',\n            // The nacos host info\n            'host' => '127.0.0.1',\n            'port' => 8848,\n            // The nacos account info\n            'username' => null,\n            'password' => null,\n            'guzzle' => [\n                'config' => null,\n            ],\n            'group_name' => 'api',\n            'namespace_id' => 'namespace_id',\n            'heartbeat' => 5,\n            'ephemeral' => false, // 是否註冊臨時例項\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Throwing 'Not Found' Exception (Hyperf)\nDESCRIPTION: Illustrates how to use `findOrFail` and `firstOrFail` methods to retrieve models and throw a `ModelNotFoundException` if no matching record is found. This is useful for controllers and routes where a model is expected to exist.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$model = User::findOrFail(1);\n$model = User::where('age', '>', 18)->firstOrFail();\n```\n\n----------------------------------------\n\nTITLE: Configure WebSocket Proxy for Hyperf in Nginx\nDESCRIPTION: This Nginx configuration sets up a WebSocket reverse proxy for Hyperf. It defines an upstream block with Hyperf WebSocket server addresses, configures WebSocket-specific headers, and sets the proxy_pass directive to route WebSocket connections to the Hyperf upstream.  It includes an ip_hash directive for sticky sessions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/nginx.md#_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\n# 至少需要一個 Hyperf 節點，多個配置多行\nupstream hyperf_websocket {\n    # 設置負載均衡模式為 IP Hash 算法模式，這樣不同的客户端每次請求都會與同一節點進行交互\n    ip_hash;\n    # Hyperf WebSocket Server 的 IP 及 端口\n    server 127.0.0.1:9503;\n    server 127.0.0.1:9504;\n}\n\nserver {\n    listen 80;\n    server_name websocket.hyperf.io;\n    \n    location / {\n        # WebSocket Header\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade websocket;\n        proxy_set_header Connection \"Upgrade\";\n        \n        # 將客户端的 Host 和 IP 信息一併轉發到對應節點  \n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n    \n        # 客户端與服務端無交互 60s 後自動斷開連接，請根據實際業務場景設置\n        proxy_read_timeout 60s ;\n        \n        # 執行代理訪問真實服務器\n        proxy_pass http://hyperf_websocket;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Type with Annotations\nDESCRIPTION: This code demonstrates how to define a GraphQL type using annotations. The `Product` class is annotated with `@Type`, and its properties are exposed as GraphQL fields using the `@Field` annotation. This defines the structure of the Product object returned by the GraphQL API.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/graphql.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Model;\n\nuse Hyperf\\GraphQL\\Annotation\\Type;\nuse Hyperf\\GraphQL\\Annotation\\Field;\n\n#[Type]\nclass Product\n{\n    protected $name;\n    protected $price;\n\n    public function __construct(string $name, float $price)\n    {\n        $this->name = $name;\n        $this->price = $price;\n    }\n\n    #[Field]\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    #[Field]\n    public function getPrice(): ?float\n    {\n        return $this->price;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Applying the Connection Pool Handler\nDESCRIPTION: Illustrates how to use the PoolHandler to implement a connection pool for Guzzle clients, optimizing TCP connection reuse and minimizing TIME-WAIT issues. The PoolHandler is based on Hyperf\\Pool\\SimplePool. It also sets up a retry middleware to automatically retry failed requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/guzzle.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse GuzzleHttp\\Client;\nuse Hyperf\\Coroutine\\Coroutine;\nuse GuzzleHttp\\HandlerStack;\nuse Hyperf\\Guzzle\\PoolHandler;\nuse Hyperf\\Guzzle\\RetryMiddleware;\n\n$handler = null;\nif (Coroutine::inCoroutine()) {\n    $handler = make(PoolHandler::class, [\n        'option' => [\n            'max_connections' => 50,\n        ],\n    ]);\n}\n\n// Default retry middleware\n$retry = make(RetryMiddleware::class, [\n    'retries' => 1,\n    'delay' => 10,\n]);\n\n$stack = HandlerStack::create($handler);\n$stack->push($retry->getMiddleware(), 'retry');\n\n$client = make(Client::class, [\n    'config' => [\n        'handler' => $stack,\n    ],\n]);\n\n```\n\n----------------------------------------\n\nTITLE: Model Pagination in PHP\nDESCRIPTION: This snippet shows how to use the paginate method directly on a model to retrieve a paginated list of users, displaying 10 items per page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/paginator.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// 展示應用中的所有用户，每頁顯示 10 條數據\nreturn User::paginate(10);\n```\n\n----------------------------------------\n\nTITLE: Defining POST Endpoint with Swagger Annotations\nDESCRIPTION: This code snippet demonstrates how to define a POST endpoint and its parameters using Swagger annotations. It includes annotations for the path, summary, tags, request body, and response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/swagger.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n#[SA\\Post(path: '/test', summary: 'POST 表單示例', tags: ['Api/Test'])]\n#[SA\\RequestBody(\n    description: '請求參數',\n    content: [\n        new SA\\MediaType(\n            mediaType: 'application/x-www-form-urlencoded',\n            schema: new SA\\Schema(\n                required: ['username', 'age'],\n                properties: [\n                    new SA\\Property(property: 'username', description: '用户名字段描述', type: 'string'),\n                    new SA\\Property(property: 'age', description: '年齡字段描述', type: 'string'),\n                    new SA\\Property(property: 'city', description: '城市字段描述', type: 'string'),\n                ]\n            ),\n        ),\n    ],\n)]\n#[SA\\Response(response: 200, description: '返回值的描述')]\npublic function test()\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Abstract Object Injection: Configuration\nDESCRIPTION: Configuration file (dependencies.php) to bind the UserServiceInterface to the UserService implementation.  Located at config/autoload/dependencies.php\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    \\App\\Service\\UserServiceInterface::class => \\App\\Service\\UserService::class\n];\n```\n\n----------------------------------------\n\nTITLE: Calling RPC Method via ClientFactory in Hyperf Jet\nDESCRIPTION: This code snippet demonstrates how to obtain a service client using the `ClientFactory` class and call a remote method on the client. The example calls the `add` method with parameters 1 and 2.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/jet.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Jet\\ClientFactory;\n\n$clientFactory = new ClientFactory();\n$client = $clientFactory->create($service = 'CalculatorService', $protocol = 'jsonrpc');\n```\n\nLANGUAGE: php\nCODE:\n```\n// 調用遠程方法 `add` 並帶上參數 `1` 和 `2`\n// $result 即為遠程方法的返回值\n$result = $client->add(1, 2);\n```\n\n----------------------------------------\n\nTITLE: Using Different Database Connections with Query Builder (PHP)\nDESCRIPTION: This snippet demonstrates how to use different database connections with the Hyperf query builder. It shows how to specify the 'default' and 'test' connections when querying the database, using the `Db::connection()` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/quick-start.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\DbConnection\\Db;\n// default\nDb::select('SELECT * FROM user;');\nDb::connection('default')->select('SELECT * FROM user;');\n\n// test\nDb::connection('test')->select('SELECT * FROM user;');\n```\n\n----------------------------------------\n\nTITLE: Defining Route with Controller Annotation in Hyperf\nDESCRIPTION: This snippet demonstrates how to use the `Controller` and `RequestMapping` annotations to define a route with specific HTTP methods and paths. The `index` method is mapped to the `/user/index` route and accepts GET and POST requests. It retrieves the 'id' parameter from the request and returns it as a string.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/router.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\n\n#[Controller]\nclass UserController\n{\n    // Hyperf 会自动为此方法生成一个 /user/index 的路由，允许通过 GET 或 POST 方式请求\n    #[RequestMapping(path: \"index\", methods: \"get,post\")]\n    public function index(RequestInterface $request)\n    {\n        // 从请求中获得 id 参数\n        $id = $request->input('id', 1);\n        return (string)$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CachePut Annotation in Hyperf\nDESCRIPTION: This code shows how to use the `CachePut` annotation in Hyperf.  Unlike `Cacheable`, `CachePut` always executes the method body and then updates the cache with the new result. This is useful when you need to refresh the cache with the latest data after a modification.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/cache.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\CachePut;\n\nclass UserService\n{\n    #[CachePut(prefix: \"user\", ttl: 3601)]\n    public function updateUser(int $id)\n    {\n        $user = User::query()->find($id);\n        $user->name = 'HyperfDoc';\n        $user->save();\n\n        return [\n            'user' => $user->toArray(),\n            'uuid' => $this->unique(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PgSQL Connection in Hyperf (PHP)\nDESCRIPTION: This snippet shows the configuration settings for a PgSQL database connection within the Hyperf framework. It defines the driver, host, database, port, username, password and charset. Environment variables are used to configure the database settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/quick-start.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/databases.php\nreturn [\n    // Other configurations\n    'pgsql'=> [\n        'driver' => env('DB_DRIVER', 'pgsql'),\n        'host' => env('DB_HOST', 'localhost'),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'port' => env('DB_PORT', 5432),\n        'username' => env('DB_USERNAME', 'postgres'),\n        'password' => env('DB_PASSWORD'),\n        'charset' => env('DB_CHARSET', 'utf8'),\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Routing in Hyperf\nDESCRIPTION: This code snippet shows how to define standard routing in Hyperf, mapping a URI to a controller and action.  All three Router::get() calls achieve the same routing behavior.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/router.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\HttpServer\\Router\\Router;\n\n// Any of the following three definitions can achieve the same effect\nRouter::get('/hello-hyperf', 'App\\Controller\\IndexController::hello');\nRouter::get('/hello-hyperf', 'App\\Controller\\IndexController@hello');\nRouter::get('/hello-hyperf', [App\\Controller\\IndexController::class, 'hello']);\n```\n\n----------------------------------------\n\nTITLE: Use Custom Resource Collection in Controller\nDESCRIPTION: Demonstrates returning a custom resource collection from a controller. A new instance of the `UserCollection` is created, passing in a collection of `User` models, and then converting it to a response with `toResponse()`. Requires importing the model and resource collection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\UserCollection;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserCollection(User::all()))->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Wrap Nested Resources\nDESCRIPTION: Illustrates wrapping nested resources within a data key by defining a ResourceCollection and including the collection in the data key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'data' => $this->collection,\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting all input data\nDESCRIPTION: Demonstrates how to use `all()` method to retrieve all input data as array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/request.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$all = $request->all();\n```\n\n----------------------------------------\n\nTITLE: Handling Rate Limit Exceptions\nDESCRIPTION: Demonstrates how to configure a `limitCallback` to handle rate limit exceptions.  The callback receives the wait time and proceeding join point, allowing for custom logic or execution of the original request after waiting.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/rate-limit.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\nuse Hyperf\\RateLimit\\Annotation\\RateLimit;\n\n#[Controller(prefix: \"rate-limit\")]\n#[RateLimit(limitCallback: [RateLimitController::class, \"limitCallback\"])]\nclass RateLimitController\n{\n    #[RequestMapping(path: \"test\")]\n    #[RateLimit(create: 1, capacity: 3)]\n    public function test()\n    {\n        return [\"QPS 1, 峰值3\"];\n    }\n    \n    public static function limitCallback(float $seconds, ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        // $seconds 下次生成Token 的间隔, 单位为秒\n        // $proceedingJoinPoint 此次请求执行的切入点\n        // 可以通过调用 `$proceedingJoinPoint->process()` 继续完成执行，或者自行处理\n        return $proceedingJoinPoint->process();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Command with VALUE_REQUIRED Option (Bash)\nDESCRIPTION: Executes a command with and without specifying a value for the `VALUE_REQUIRED` option, demonstrating how the default value is used when no value is provided.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/hyperf.php demo:command\n# 輸出\nstring(6) \"Hyperf\"\n\n$ php bin/hyperf.php demo:command --name Swoole\n# 輸出\nstring(6) \"Swoole\"\n\n```\n\n----------------------------------------\n\nTITLE: Queue Length Listener Configuration\nDESCRIPTION: Configures the QueueLengthListener to monitor and log the queue length.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    Hyperf\\AsyncQueue\\Listener\\QueueLengthListener::class\n];\n\n```\n\n----------------------------------------\n\nTITLE: Replacing EasyWeChat Cache with Hyperf Cache\nDESCRIPTION: This code snippet demonstrates how to replace the default file-based cache used by EasyWeChat with Hyperf's cache component (which typically uses Redis). It retrieves the `CacheInterface` instance from the Hyperf application container and sets it as the cache implementation for the EasyWeChat application.  This requires the `hyperf/cache` component to be installed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/sdks/wechat.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Psr\\SimpleCache\\CacheInterface;\nuse Hyperf\\Context\\ApplicationContext;\nuse EasyWeChat\\Factory;\n\n$app = Factory::miniProgram([]);\n$app['cache'] = ApplicationContext::getContainer()->get(CacheInterface::class);\n```\n\n----------------------------------------\n\nTITLE: Using Connected Context in WebSocket Controller\nDESCRIPTION: This code snippet demonstrates how to use the Connected Context in a WebSocket controller to share information between the `onOpen` and `onMessage` callbacks. It sets the 'username' in the `onOpen` method based on a cookie and retrieves it in the `onMessage` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/websocket-server.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnMessageInterface;\nuse Hyperf\\Contract\\OnOpenInterface;\nuse Hyperf\\WebSocketServer\\Context;\nuse Swoole\\Http\\Request;\nuse Swoole\\Websocket\\Frame;\nuse Swoole\\WebSocket\\Server as WebSocketServer;\n\nclass WebSocketController implements OnMessageInterface, OnOpenInterface\n{\n    public function onMessage($server, Frame $frame): void\n    {\n        $server->push($frame->fd, 'Username: ' . Context::get('username'));\n    }\n\n    public function onOpen($server, Request $request): void\n    {\n        Context::set('username', $request->cookie['username']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Model Cache\nDESCRIPTION: Installs the `hyperf/model-cache` package using composer. This package provides model caching functionality for Hyperf applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model-cache.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/model-cache\n```\n\n----------------------------------------\n\nTITLE: One-to-One Association\nDESCRIPTION: Defines a one-to-one relationship between the User and Role models using the hasOne method. The first parameter is the class name of the associated model, and the other two parameters specify the foreign and local keys for the relationship.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/relationship.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    public function role()\n    {\n        return $this->hasOne(Role::class, 'user_id', 'id');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Error Messages for a Field in Hyperf\nDESCRIPTION: This PHP code retrieves all error messages associated with the 'foo' field from the validator's error bag. It accesses the errors through the `errors()` method of the Validator instance, and uses the `get()` method of the `MessageBag` to retrieve an array of error messages.  It then iterates through this array to process each message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nforeach ($errors->get('foo') as $message) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Annotation Collector Configuration\nDESCRIPTION: This code snippet shows how to configure a custom annotation collector in Hyperf. The `collectors` array within the `annotations.scan` configuration should include the fully qualified class name of the custom collector.  This ensures that the custom collector is properly registered and used during the annotation scanning process, which will trigger the custom logic implemented in the collector when the annotated metadata is scanned. Without this configuration, the custom annotation collector might not function as expected, and the annotations data may not be cached and reused when the server is restarted, which will cause annotations only working at the first time `server` starts.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/annotation.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    // 注意在 config/autoload 檔案下的配置檔案則無 annotations 這一層\n    'annotations' => [\n        'scan' => [\n            'collectors' => [\n                CustomCollector::class,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: DAG Construction and Execution in Hyperf\nDESCRIPTION: This PHP code demonstrates how to construct a DAG using the `Hyperf\\Dag\\Dag` class and define vertices (tasks) using `Hyperf\\Dag\\Vertex`.  It adds vertices and edges to define dependencies and then executes the DAG using `run()`.  The tasks are defined using closures with sleeps to simulate work.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/dag.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$dag = new \\Hyperf\\Dag\\Dag();\n$a = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"A\\n\";});\n$b = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"B\\n\";});\n$c = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"C\\n\";});\n$d = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"D\\n\";});\n$e = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"E\\n\";});\n$f = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"F\\n\";});\n$g = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"G\\n\";});\n$h = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"H\\n\";});\n$i = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"I\\n\";});\n$dag->addVertex($a)\n    ->addVertex($b)\n    ->addVertex($c)\n    ->addVertex($d)\n    ->addVertex($e)\n    ->addVertex($f)\n    ->addVertex($g)\n    ->addVertex($h)\n    ->addVertex($i)\n    ->addEdge($a, $b)\n    ->addEdge($a, $c)\n    ->addEdge($a, $d)\n    ->addEdge($b, $h)\n    ->addEdge($b, $e)\n    ->addEdge($b, $f)\n    ->addEdge($c, $f)\n    ->addEdge($c, $g)\n    ->addEdge($d, $g)\n    ->addEdge($h, $i)\n    ->addEdge($e, $i)\n    ->addEdge($f, $i)\n    ->addEdge($g, $i);\n    \n// 需要在協程環境下執行\n$dag->run()\n```\n\n----------------------------------------\n\nTITLE: Unique Rule with Additional Where Clause - PHP\nDESCRIPTION: Demonstrates how to add a custom `where` clause to the unique rule's query.  This allows for more specific constraints during the uniqueness check, such as only considering records with a specific `account_id`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n'email' => Rule::unique('users')->where(function ($query) {\n    $query->where('account_id', 1);\n})\n```\n\n----------------------------------------\n\nTITLE: Paginating Resource Collections in Hyperf\nDESCRIPTION: This PHP code demonstrates how to paginate a collection of users using Hyperf's resource system. It retrieves a paginated list of users and returns it as a `UserCollection` resource.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\UserCollection;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserCollection(User::paginate()))->toResponse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query Listener in Hyperf\nDESCRIPTION: This code defines a listener for SQL query execution events in Hyperf. It implements the `ListenerInterface` and is annotated with `Listener` to be automatically registered. The listener logs the executed SQL query along with its execution time.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/event.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Database\\Events\\QueryExecuted;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Logger\\LoggerFactory;\nuse Hyperf\\Collection\\Arr;\nuse Hyperf\\Stringable\\Str;\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\Log\\LoggerInterface;\n\n#[Listener]\nclass DbQueryExecutedListener implements ListenerInterface\n{\n    private LoggerInterface $logger;\n\n    public function __construct(ContainerInterface $container)\n    {\n        // 输出到对应名为 sql 的日志 name，如不存在则需自行添加配置\n        // 这里的 sql 日志 name 不是必须的，只是表达可以将 SQL 执行日志与普通日志区分开\n        $this->logger = $container->get(LoggerFactory::class)->get('sql');\n    }\n\n    public function listen(): array\n    {\n        return [\n            QueryExecuted::class,\n        ];\n    }\n\n    /**\n     * @param QueryExecuted $event\n     */\n    public function process(object $event)\n    {\n        if ($event instanceof QueryExecuted) {\n            $sql = $event->sql;\n            if (! Arr::isAssoc($event->bindings)) {\n                foreach ($event->bindings as $key => $value) {\n                    $sql = Str::replaceFirst('?', \"'{$value}'\", $sql);\n                }\n            }\n\n            $this->logger->info(sprintf('[%s] %s', $event->time, $sql));\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Multi-Resource Redis Configuration\nDESCRIPTION: This configuration demonstrates how to configure multiple Redis connections with different settings, by defining named connection pools like 'foo'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/redis.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', ''),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'cluster' => [\n            'enable' => (bool) env('REDIS_CLUSTER_ENABLE', false),\n            'name' => null,\n            'seeds' => [],\n        ],\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n    ],\n    // Add a Redis connection pool named foo\n    'foo' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', ''),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => 1,\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Renaming a Table in Hyperf Migration\nDESCRIPTION: This code demonstrates how to rename a table using the `Schema::rename` method within a Hyperf migration.  `$from` is the old table name and `$to` is the new table name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nSchema::rename($from, $to);\n```\n\n----------------------------------------\n\nTITLE: Configuring ETCD Client\nDESCRIPTION: This PHP code defines the configuration array for the ETCD client. It specifies the ETCD server URI, the API version, and various client options such as timeout. The URI specifies the location of the ETCD server. The timeout option is set to 10 seconds.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/etcd.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'uri' => 'http://192.168.1.200:2379',\n    'version' => 'v3beta',\n    'options' => [\n        'timeout' => 10,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Service Configuration\nDESCRIPTION: This configuration file (config/autoload/services.php) defines the settings for service discovery, registration, and drivers like Consul and Nacos. It allows enabling/disabling discovery and registration, configuring consumers and providers, and specifying driver-specific settings (e.g., Consul URI, Nacos host/port).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/service-register.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'enable' => [\n        // 開啓服務發現\n        'discovery' => true,\n        // 開啓服務註冊\n        'register' => true,\n    ],\n    // 服務消費者相關配置\n    'consumers' => [],\n    // 服務提供者相關配置\n    'providers' => [],\n    // 服務驅動相關配置\n    'drivers' => [\n        'consul' => [\n            'uri' => 'http://127.0.0.1:8500',\n            'token' => '',\n            'check' => [\n                'deregister_critical_service_after' => '90m',\n                'interval' => '1s',\n            ],\n        ],\n        'nacos' => [\n            // nacos server url like https://nacos.hyperf.io, Priority is higher than host:port\n            // 'url' => '',\n            // The nacos host info\n            'host' => '127.0.0.1',\n            'port' => 8848,\n            // The nacos account info\n            'username' => null,\n            'password' => null,\n            'guzzle' => [\n                'config' => null,\n            ],\n            'group_name' => 'api',\n            'namespace_id' => 'namespace_id',\n            'heartbeat' => 5,\n            'ephemeral' => false, // 是否註冊臨時實例\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to NSQ\nDESCRIPTION: This code demonstrates how to publish a message to an NSQ topic using the `Hyperf\\Nsq\\Nsq::publish()` method. It retrieves an instance of the `Nsq` class from the container, defines the topic and message, and then calls the `publish` method to send the message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nsq.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Nsq\\Nsq;\n\n#[Command]\nclass NsqCommand extends HyperfCommand\n{\n    protected $name = 'nsq:pub';\n\n    public function handle()\n    {\n        /** @var Nsq $nsq */\n        $nsq = make(Nsq::class);\n        $topic = 'hyperf';\n        $message = 'This is message at ' . time();\n        $nsq->publish($topic, $message);\n\n        $this->line('success', 'info');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Collection Usage in Controller (Hyperf, PHP)\nDESCRIPTION: Demonstrates using a resource collection in a Hyperf controller to transform a collection of User models into a JSON response.  It utilizes `UserResource::collection` to generate a resource collection and then converts it to a response using `toResponse()`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Resource\\User as UserResource;\nuse App\\Model\\User;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return UserResource::collection(User::all())->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Parameter Grouping in Where Clauses in Hyperf\nDESCRIPTION: Explains how to create more advanced `where` clauses with nested parameter grouping using closures. This allows you to build complex boolean logic in your queries.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('name', '=', 'John')\n    ->where(function ($query) {\n        $query->where('votes', '>', 100)\n                ->orWhere('title', '=', 'Admin');\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Customize Error Messages\nDESCRIPTION: Overrides the messages() method in a FormRequest class to customize error messages for specific rules and attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/**\n * 獲取已定義驗證規則的錯誤消息\n */\npublic function messages(): array\n{\n    return [\n        'foo.required' => 'foo is required',\n        'bar.required'  => 'bar is required',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Paginator Usage in Hyperf Controller\nDESCRIPTION: Demonstrates how to use the Hyperf Paginator within a Hyperf controller to paginate a collection of users. It retrieves the current page and per-page values from the request, simulates a data query using a Collection, and returns a Paginator instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/paginator.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\Paginator\\Paginator;\nuse Hyperf\\Collection\\Collection;\n\n#[AutoController]\nclass UserController\n{\n    public function index(RequestInterface $request)\n    {\n        $currentPage = (int) $request->input('page', 1);\n        $perPage = (int) $request->input('per_page', 2);\n\n        // 這裡根據 $currentPage 和 $perPage 進行資料查詢，以下使用 Collection 代替\n        $collection = new Collection([\n            ['id' => 1, 'name' => 'Tom'],\n            ['id' => 2, 'name' => 'Sam'],\n            ['id' => 3, 'name' => 'Tim'],\n            ['id' => 4, 'name' => 'Joe'],\n        ]);\n\n        $users = array_values($collection->forPage($currentPage, $perPage)->toArray());\n\n        return new Paginator($users, $perPage, $currentPage);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: gRPC Client Streaming Example\nDESCRIPTION: This PHP snippet shows an example of using gRPC streaming with a bidirectional stream. It creates a `RouteGuideClient`, establishes a `routeChat` call, pushes `RouteNote` messages to the server, and receives responses. It highlights the use of push and receive operations for streaming communication.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/grpc.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\npublic function hello()\n{\n    $client = new RouteGuideClient('127.0.0.1:50051');\n\n    $note = new RouteNote();\n\n    $call = $client->routeChat();\n    $call->push($note);\n    $call->push($note);\n\n    /** @var RouteNote $note */\n    [$note,] = $call->recv();\n    [$note,] = $call->recv();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Paginator Usage in Hyperf\nDESCRIPTION: This code demonstrates the basic usage of the `Hyperf\\Paginator\\Paginator` class within a Hyperf controller to paginate a collection of user data. It retrieves the current page and per-page limit from the request input, simulates a data query using a `Hyperf\\Collection\\Collection`, and returns a new `Paginator` instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/paginator.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\Paginator\\Paginator;\nuse Hyperf\\Collection\\Collection;\n\n#[AutoController]\nclass UserController\n{\n    public function index(RequestInterface $request)\n    {\n        $currentPage = (int) $request->input('page', 1);\n        $perPage = (int) $request->input('per_page', 2);\n\n        // 这里根据 $currentPage 和 $perPage 进行数据查询，以下使用 Collection 代替\n        $collection = new Collection([\n            ['id' => 1, 'name' => 'Tom'],\n            ['id' => 2, 'name' => 'Sam'],\n            ['id' => 3, 'name' => 'Tim'],\n            ['id' => 4, 'name' => 'Joe'],\n        ]);\n\n        $users = array_values($collection->forPage($currentPage, $perPage)->toArray());\n\n        return new Paginator($users, $perPage, $currentPage);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Union Queries - PHP\nDESCRIPTION: Demonstrates how to combine the results of two queries using the `union()` method.  This method appends the results of the second query to the results of the first query, removing duplicate rows.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$first = Db::table('users')->whereNull('first_name');\n\n$users = Db::table('users')\n    ->whereNull('last_name')\n    ->union($first)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Username/Password Configuration\nDESCRIPTION: Shows how to configure the Elasticsearch client with a username and password by including the credentials in the host string.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/elasticsearch.md#_snippet_3\n\nLANGUAGE: null\nCODE:\n```\nhttp://username:password@xxxx.aliyuncs.com:9200\n```\n\n----------------------------------------\n\nTITLE: Controller Using Swagger Annotations and Request Validation (PHP)\nDESCRIPTION: This controller uses Swagger annotations to define an API endpoint, including query parameters, request body, and response. It also leverages the `SwaggerRequest` class to validate the request parameters based on the defined rules.  Requires `Hyperf\\Swagger\\Annotation as SA`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/swagger.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Schema\\SavedSchema;\nuse Hyperf\\Swagger\\Request\\SwaggerRequest;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Swagger\\Annotation as SA;\n\n#[SA\\HyperfServer(name: 'http')]\nclass CardController extends Controller\n{\n    #[SA\\Post('/user/save', summary: 'Save user info', tags: ['user-management'])]\n    #[SA\\QueryParameter(name: 'token', description: 'auth token', type: 'string', rules: 'required|string')]\n    #[SA\\RequestBody(content: new SA\\JsonContent(properties: [\n        new SA\\Property(property: 'nickname', type: 'integer', rules: 'required|string'),\n        new SA\\Property(property: 'gender', type: 'integer', rules: 'required|integer|in:0,1,2'),\n    ]))]\n    #[SA\\Response(response: '200', content: new SA\\JsonContent(ref: '#/components/schemas/SavedSchema'))]\n    public function info(SwaggerRequest $request)\n    {\n        $result = $this->service->save($request->all());\n\n        return $this->response->success($result);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying nested JSON field in Hyperf\nDESCRIPTION: This example demonstrates how to query a nested JSON field within a database table using Hyperf's query builder. It fetches users where 'preferences->dining->meal' is 'salad'. This operation depends on the database's support for JSON data types.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->where('preferences->dining->meal', 'salad')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Using Model Event Hooks in PHP\nDESCRIPTION: This snippet demonstrates how to use model event hooks in Hyperf to perform actions before a model is saved. In this example, the `saving` event is used to overwrite the `created_at` field with a specific value. This requires the `Hyperf\\Database\\Model\\Events\\Saving` namespace to be imported and the corresponding method defined in the model.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/event.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\Database\\Model\\Events\\Saving;\n\n/**\n * @property $id\n * @property $name\n * @property $gender\n * @property $created_at\n * @property $updated_at\n */\nclass User extends Model\n{\n    /**\n     * The table associated with the model.\n     *\n     * @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = ['id', 'name', 'gender', 'created_at', 'updated_at'];\n\n    protected $casts = ['id' => 'integer', 'gender' => 'integer'];\n\n    public function saving(Saving $event)\n    {\n        $this->setCreatedAt('2019-01-01');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting crontab for Hyperf closure commands\nDESCRIPTION: This example demonstrates how to set cron schedules for Hyperf closure commands using the `cron()` method. It also shows how to set the `singleton` property of the cron using callback.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Command\\Console;\n\nConsole::command('foo', function () {\n    $this->comment('Hello, Foo!');\n})->describe('This is a demo closure command.')->cron('* * * * *');\n\nConsole::command('bar', function () {\n    $this->comment('Hello, Bar!');\n})->describe('This is another demo closure command.')->cron('* * * * *', callback: fn($cron) => $cron->setSingleton(true));\n```\n\n----------------------------------------\n\nTITLE: Use WebSocket Sender\nDESCRIPTION: This code demonstrates how to use the `Hyperf\\WebSocketServer\\Sender` class to send messages and disconnect clients from an HTTP controller. It injects the `Sender` dependency. The `close` method disconnects a client after a delay using `disconnect`. The `send` method sends a message to a specific client using `push`. This is useful when you want to manage WebSocket connections from outside of the WebSocket server context.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/websocket-server.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\WebSocketServer\\Sender;\nuse function Hyperf\\Coroutine\\go;\n\n#[AutoController]\nclass ServerController\n{\n    #[Inject]\n    protected Sender $sender;\n\n    public function close(int $fd)\n    {\n        go(function () use ($fd) {\n            sleep(1);\n            $this->sender->disconnect($fd);\n        });\n\n        return '';\n    }\n\n    public function send(int $fd)\n    {\n        $this->sender->push($fd, 'Hello World.');\n\n        return '';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SimplePool Usage in Hyperf\nDESCRIPTION: Illustrates how to use the `SimplePool` implementation provided by Hyperf, showing how to obtain a connection from the pool, use it, and release it back to the pool.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/pool.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Pool\\SimplePool\\PoolFactory;\nuse Swoole\\Coroutine\\Http\\Client;\n\n$factory = $container->get(PoolFactory::class);\n\n$pool = $factory->get('your pool name', function () use ($host, $port, $ssl) {\n    return new Client($host, $port, $ssl);\n}, [\n    'max_connections' => 50\n]);\n\n$connection = $pool->get();\n\n$client = $connection->getConnection(); // 即上述 Client.\n\n// Do something.\n\n$connection->release();\n\n```\n\n----------------------------------------\n\nTITLE: Configure Request ID Processor - PHP\nDESCRIPTION: This snippet shows how to configure the custom request ID processor in the `logger.php` configuration file. It adds the `AppendRequestIdProcessor` to the list of processors for the `default` log group. This ensures that the processor is executed for every log message in that group, adding the request ID and coroutine ID to the log's extra data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/logger.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse App\\Kernel\\Log;\n\nreturn [\n    'default' => [\n        // 删除其他配置\n        'processors' => [\n            [\n                'class' => Log\\AppendRequestIdProcessor::class,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Refreshing Migrations (bash)\nDESCRIPTION: This command rolls back all migrations and then re-executes them. The `--seed` option additionally runs the database seeders. It provides an efficient way to rebuild the database schema and optionally populate it with data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:refresh\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:refresh --seed\n```\n\n----------------------------------------\n\nTITLE: Using EagerLoader for Eager Loading - PHP\nDESCRIPTION: This code snippet shows how to use the `EagerLoader` class to load model relationships from the cache. It retrieves the `EagerLoader` instance from the application context and then uses it to load the 'user' relationship for a collection of books.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model-cache.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\ModelCache\\EagerLoad\\EagerLoader;\nuse Hyperf\\Context\\ApplicationContext;\n\n$books = Book::findManyFromCache([1,2,3]);\n$loader = ApplicationContext::getContainer()->get(EagerLoader::class);\n$loader->load($books, ['user']);\n\nforeach ($books as $book){\n    var_dump($book->user);\n}\n```\n\n----------------------------------------\n\nTITLE: DemoLogicTest Class with Constructor Injection\nDESCRIPTION: This PHP code defines a test class `DemoLogicTest` extending `HttpTestCase`. It tests `DemoLogic` using a test double for `DemoApi` injected through the constructor. It uses Mockery to mock the container and the `DemoApi` instance, and then create a Stub.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/testing.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace HyperfTest\\Cases;\n\nuse App\\Api\\DemoApi;\nuse App\\Logic\\DemoLogic;\nuse Hyperf\\Di\\Container;\nuse HyperfTest\\HttpTestCase;\nuse Mockery;\n\nclass DemoLogicTest extends HttpTestCase\n{\n    public function tearDown()\n    {\n        Mockery::close();\n    }\n\n    public function testIndex()\n    {\n        $res = $this->getContainer()->get(DemoLogic::class)->test();\n\n        $this->assertEquals(1, $res['status']);\n    }\n\n    /**\n     * @return Container\n     */\n    protected function getContainer()\n    {\n        $container = Mockery::mock(Container::class);\n\n        $apiStub = $this->createMock(DemoApi::class);\n\n        $apiStub->method('test')->willReturn([\n            'status' => 1,\n        ]);\n\n        $container->shouldReceive('get')->with(DemoLogic::class)->andReturn(new DemoLogic($apiStub));\n\n        return $container;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Commands with AsCommand Annotation PHP\nDESCRIPTION: This code snippet demonstrates how to define console commands in Hyperf using the `AsCommand` annotation. It showcases defining multiple commands within a single class, specifying command signatures, descriptions, and handling arguments. The class also utilizes the `InteractsWithIO` trait for outputting information to the console.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Service;\n\nuse Hyperf\\Command\\Annotation\\AsCommand;\nuse Hyperf\\Command\\Concerns\\InteractsWithIO;\n\n#[AsCommand(signature: 'foo:bar1', handle: 'bar1', description: 'The description of foo:bar1 command.')]\n#[AsCommand(signature: 'foo', description: 'The description of foo command.')]\nclass FooService\n{\n    use InteractsWithIO;\n\n    #[AsCommand(signature: 'foo:bar {--bar=1 : Bar Value}', description: 'The description of foo:bar command.')]\n    public function bar($bar)\n    {\n        $this->output?->info('Bar Value: ' . $bar);\n\n        return $bar;\n    }\n\n    public function bar1()\n    {\n        $this->output?->info(__METHOD__);\n    }\n\n    public function handle()\n    {\n        $this->output?->info(__METHOD__);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cacheable Annotation Example with Custom Listener in Hyperf\nDESCRIPTION: This snippet shows the usage of the `Cacheable` annotation in Hyperf, with a specified prefix, time-to-live (TTL), and a cache invalidation listener.  When the `user` method is called, the result is cached using a key formed from the prefix and the `id` argument. The `USER_CACHE` listener is triggered upon certain events to clear the cache.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/cache.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass UserService\n{\n    #[Cacheable(prefix: \"user\", ttl: 7200, listener: \"USER_CACHE\")]\n    public function user(int $id): array\n    {\n        $user = User::query()->find($id);\n\n        return [\n            'user' => $user->toArray(),\n            'uuid' => $this->unique(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Attributes with Guarded\nDESCRIPTION: Illustrates the use of the `$guarded` property to protect attributes from mass assignment.  In this example, all attributes except `gender_show` can be mass-assigned.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected $guarded = ['gender_show'];\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Kafka Consumer Class\nDESCRIPTION: This command generates a Kafka consumer class using the `gen:kafka-consumer` command. The generated class extends `Hyperf/Kafka/AbstractConsumer` and handles the consumption of messages from a specified Kafka topic.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/kafka.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:kafka-consumer KafkaConsumer\n```\n\n----------------------------------------\n\nTITLE: Executing PHPUnit with phpdbg for Coverage in Hyperf\nDESCRIPTION: This shell command executes PHPUnit using phpdbg to generate code coverage reports.  It sets the memory limit to 1024M, runs PHPUnit in quiet mode, specifies the configuration file (phpunit.xml), and enables colors in the output.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/testing.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\nphpdbg -dmemory_limit=1024M -qrr ./vendor/bin/co-phpunit -c phpunit.xml --colors=always\n```\n\n----------------------------------------\n\nTITLE: Generating a Snowflake ID\nDESCRIPTION: This PHP snippet demonstrates how to retrieve the IdGeneratorInterface from the DI container and use it to generate a unique ID. It requires the Hyperf Context component to access the container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/snowflake.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Snowflake\\IdGeneratorInterface;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n$generator = $container->get(IdGeneratorInterface::class);\n\n$id = $generator->generate();\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Hyperf Nano\nDESCRIPTION: This example shows how to define routes using the Hyperf Nano framework, including route groups and parameter matching. It demonstrates the use of regular expressions to constrain route parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nano.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addGroup('/nano', function () use ($app) {\n    $app->addRoute(['GET', 'POST'], '/{id:\\\\d+}', function($id) {\n        return '/nano/'.$id;\n    });\n    $app->put('/{name:.+}', function($name) {\n        return '/nano/'.$name;\n    });\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Updating or inserting with updateOrInsert in Hyperf\nDESCRIPTION: This example shows how to update a record if it exists, or insert a new one if it doesn't, using `updateOrInsert` in Hyperf. It updates the 'votes' to '2' for the user with 'email' john@example.com and 'name' John, or inserts a new record if not found.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->updateOrInsert(\n    ['email' => 'john@example.com', 'name' => 'John'],\n    ['votes' => '2']\n);\n```\n\n----------------------------------------\n\nTITLE: Fluent Retry with Custom Conditions and Fallback\nDESCRIPTION: This code demonstrates a more complex example of the fluent API, retrying when the function returns false, with a maximum of 3 attempts, a maximum duration of 5 seconds, a 1ms sleep interval, and a fallback function that always returns true.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/retry.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$result = \\Hyperf\\Retry\\Retry::whenReturns(false) // 当返回false时重试\n    ->max(3) // 最多3次\n    ->inSeconds(5) // 最长5秒\n    ->sleep(1) // 间隔1毫秒\n    ->fallback(function(){return true;}) // fallback函数\n    ->call(function(){\n        if (rand(1, 100) >= 20){\n            return true;\n        }\n        return false;\n    });\n```\n\n----------------------------------------\n\nTITLE: Checking Table/Column Existence (php)\nDESCRIPTION: This code snippet demonstrates how to check if a table or column exists using `Schema::hasTable` and `Schema::hasColumn` respectively. This is useful for conditional schema changes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nif (Schema::hasTable('users')) {\n    //\n}\n\nif (Schema::hasColumn('name', 'email')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Task Using Annotation\nDESCRIPTION: This code demonstrates how to dispatch a task using the `#[Task]` annotation in Hyperf. It defines an `AnnotationTask` class with a `handle` method annotated with `#[Task]`.  When the `handle` method is called within a Worker process, it is automatically dispatched to a Task process and the result is awaited. Dependencies include `Hyperf\\Coroutine\\Coroutine`, `Hyperf\\Context\\ApplicationContext`, and `Hyperf\\Task\\Annotation\\Task`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/task.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Coroutine\\Coroutine;\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\Task\\Annotation\\Task;\n\nclass AnnotationTask\n{\n    #[Task]\n    public function handle($cid)\n    {\n        return [\n            'worker.cid' => $cid,\n            // task_enable_coroutine=false 時返回 -1，反之 返回對應的協程 ID\n            'task.cid' => Coroutine::id(),\n        ];\n    }\n}\n\n$container = ApplicationContext::getContainer();\n$task = $container->get(AnnotationTask::class);\n$result = $task->handle(Coroutine::id());\n```\n\n----------------------------------------\n\nTITLE: Defining Array Argument (PHP)\nDESCRIPTION: Defines an array argument using `InputArgument::IS_ARRAY` in the `addArgument()` method within `configure()`.  The argument is accessed as an array using `$this->input->getArgument()` in `handle()`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addArgument('name', InputArgument::IS_ARRAY, '姓名');\n}\n\npublic function handle()\n{\n    var_dump($this->input->getArgument('name'));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Database Configuration with PDO Options in PHP\nDESCRIPTION: Configures the database connection with specific PDO options, such as `ATTR_CASE`, `ATTR_ERRMODE`, `ATTR_ORACLE_NULLS`, `ATTR_STRINGIFY_FETCHES`, and `ATTR_EMULATE_PREPARES`. These options allow customization of PDO's behavior, such as stringifying fetched values or emulating prepares for non-native MySQL databases.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/quick-start.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER', 'mysql'),\n        'host' => env('DB_HOST', 'localhost'),\n        'port' => env('DB_PORT', 3306),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => env('DB_CHARSET', 'utf8'),\n        'collation' => env('DB_COLLATION', 'utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX', ''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('DB_MAX_IDLE_TIME', 60),\n        ],\n        'options' => [\n            // 框架默认配置\n            PDO::ATTR_CASE => PDO::CASE_NATURAL,\n            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n            PDO::ATTR_ORACLE_NULLS => PDO::NULL_NATURAL,\n            PDO::ATTR_STRINGIFY_FETCHES => false,\n            // 如果使用的为非原生 MySQL 或云厂商提供的 DB 如从库/分析型实例等不支持 MySQL prepare 协议的, 将此项设置为 true\n            PDO::ATTR_EMULATE_PREPARES => false,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Hyperf Server for Swagger\nDESCRIPTION: This annotation specifies the Hyperf server for which the Swagger documentation is generated. It allows for generating different Swagger files for different servers within the same application, using the configuration name as the filename.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/swagger.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n#[SA\\HyperfServer('http')]\n```\n\n----------------------------------------\n\nTITLE: Define Polymorphic One-to-One Relation (PHP)\nDESCRIPTION: This code defines the polymorphic one-to-one relationships.  The `Book` and `User` models can both have an `Image` through the `imageable` relation.  The `Image` model uses `morphTo` to define the inverse relation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Model;\n\nclass Image extends Model\n{\n    public function imageable()\n    {\n        return $this->morphTo();\n    }\n}\n\nclass Book extends Model\n{\n    public function image()\n    {\n        return $this->morphOne(Image::class, 'imageable');\n    }\n}\n\nclass User extends Model\n{\n    public function image()\n    {\n        return $this->morphOne(Image::class, 'imageable');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Client Configuration - PHP\nDESCRIPTION: Defines a client configuration within an autoloaded file. This example shows how configurations are structured within the `config/autoload` directory, where the filename becomes the first-level key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/config.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'request' => [\n        'timeout' => 10,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Publish Hyperf Nacos Configuration\nDESCRIPTION: This command publishes the default configuration file for the `hyperf/nacos` package to your project's config directory. This allows you to customize the Nacos client settings such as host, port, username, and password.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nacos.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/nacos\n```\n\n----------------------------------------\n\nTITLE: Using Snowflake in a Database Model\nDESCRIPTION: This PHP code snippet shows how to integrate the Snowflake ID generator into a Hyperf database model by using the `Snowflake` trait. When a new User model is created, the primary key will be automatically generated using the Snowflake algorithm.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/snowflake.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass User extends \\Hyperf\\Database\\Model\\Model {\n    use \\Hyperf\\Snowflake\\Concern\\Snowflake;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure Optional Argument (PHP)\nDESCRIPTION: This snippet configures an optional argument 'name' with a default value 'Hyperf'. The `handle` method retrieves and outputs the argument value. This demonstrates how to define and use optional command arguments.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addArgument('name', InputArgument::OPTIONAL, 'name', 'Hyperf');\n}\n\npublic function handle()\n{\n    $this->line($this->input->getArgument('name'));\n}\n```\n\n----------------------------------------\n\nTITLE: Switch to JsonRpcPoolTransporter - Hyperf\nDESCRIPTION: This snippet illustrates how to switch from JsonRpcTransporter to JsonRpcPoolTransporter in Hyperf to utilize connection pooling, which avoids creating excessive connections during high concurrency. It maps JsonRpcTransporter to JsonRpcPoolTransporter in the dependencies.php file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/json-rpc.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\JsonRpc\\JsonRpcPoolTransporter;\nuse Hyperf\\JsonRpc\\JsonRpcTransporter;\n\nreturn [\n    JsonRpcTransporter::class => JsonRpcPoolTransporter::class,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Override SocketIO Configuration in Hyperf\nDESCRIPTION: This PHP code demonstrates how to override the default SocketIO configuration parameters, such as `pingTimeout`, in a Hyperf application. It creates a `SocketIOFactory` that retrieves the necessary dependencies and creates a new `SocketIO` instance, setting the desired values.  This allows fine-grained control over SocketIO's behavior.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/socketio-server.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Kernel;\n\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\SocketIOServer\\Parser\\Decoder;\nuse Hyperf\\SocketIOServer\\Parser\\Encoder;\nuse Hyperf\\SocketIOServer\\SidProvider\\SidProviderInterface;\nuse Hyperf\\SocketIOServer\\SocketIO;\nuse Hyperf\\WebSocketServer\\Sender;\nuse Psr\\Container\\ContainerInterface;\n\nclass SocketIOFactory\n{\n    public function __invoke(ContainerInterface $container)\n    {\n        $io = new SocketIO(\n            $container->get(StdoutLoggerInterface::class),\n            $container->get(Sender::class),\n            $container->get(Decoder::class),\n            $container->get(Encoder::class),\n            $container->get(SidProviderInterface::class)\n        );\n\n        // 重写 pingTimeout 参数\n        $io->setPingTimeout(10000);\n\n        return $io;\n    }\n}\n\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    Hyperf\\SocketIOServer\\SocketIO::class => App\\Kernel\\SocketIOFactory::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Restoring or Creating a Model\nDESCRIPTION: Demonstrates the `restoreOrCreate` method, which attempts to restore a soft-deleted model matching the provided criteria. If no matching soft-deleted model is found, it creates a new model using the provided attributes, similar to `firstOrCreate`. This combines the restoration of soft-deleted records with the creation of new ones.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n// 通过 name 查找用户，不存在则使用 name 和 gender, age 属性创建...\n$user = User::restoreOrCreate(\n    ['name' => 'Hyperf'],\n    ['gender' => 1, 'age' => 20]\n);\n\n```\n\n----------------------------------------\n\nTITLE: Render Blade View in Hyperf Controller\nDESCRIPTION: Demonstrates how to render a Blade template from a Hyperf controller using the RenderInterface.  The `render` method is called with the template name and data to be passed to the view. It retrieves the RenderInterface instance and calls its render method to generate the view output.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\View\\RenderInterface;\n\n#[AutoController]\nclass ViewController\n{\n    public function index(RenderInterface $render)\n    {\n        return $render->render('index', ['name' =>'Hyperf']);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Different Database Connections in Hyperf\nDESCRIPTION: Demonstrates how to select and use different database connections (default and test) in Hyperf using the `Db::connection()` method for executing SQL queries.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/quick-start.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\DbConnection\\Db;\n// default\nDb::select('SELECT * FROM user;');\nDb::connection('default')->select('SELECT * FROM user;');\n\n// test\nDb::connection('test')->select('SELECT * FROM user;');\n```\n\n----------------------------------------\n\nTITLE: Determine if Config Exists - PHP\nDESCRIPTION: Demonstrates how to check if a configuration value exists using the `has()` method of the `Hyperf\\Contract\\ConfigInterface` object. This method returns a boolean indicating whether the key exists.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/config.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @var \\Hyperf\\Contract\\ConfigInterface\n */\n// The has(): bool method is used to determine whether the corresponding $key value exists in the configuration, and the $key value can be mapped to the subordinate array by the . connector.\n$config->has($key);\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Middleware in Hyperf\nDESCRIPTION: This code snippet shows how to configure middleware for the 'ws' WebSocket server in the `config/autoload/middlewares.php` file.  It defines an array of middleware classes that will be executed for each WebSocket connection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/websocket-server.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'ws' => [\n        yourMiddleware::class\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Abstracting RpcMessage (Hyperf AMQP)\nDESCRIPTION: This code demonstrates how to abstract the `RpcMessage` class in Hyperf's AMQP component. It creates a custom `FooRpcMessage` class that extends `RpcMessage` and defines the exchange and routing key. This allows for cleaner RPC calls by eliminating the need to specify the exchange and routing key each time. The payload will be passed in the constructor.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/amqp.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Amqp\\Message\\RpcMessage;\n\nclass FooRpcMessage extends RpcMessage\n{\n\n    protected $exchange = 'hyperf';\n\n    protected $routingKey = 'hyperf';\n    \n    public function __construct($data)\n    {\n        //To pass data\n        $this->payload = $data;\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Model with Type Casting - PHP\nDESCRIPTION: This code snippet demonstrates how to cast the `last_posted_at` attribute to a date type during a model query using the `withCasts` method. This allows convenient date handling directly from the query result. Requires the `App\\Post` and `App\\User` models to be defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/mutators.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$users = User::select([\n    'users.*',\n    'last_posted_at' => Post::selectRaw('MAX(created_at)')\n            ->whereColumn('user_id', 'users.id')\n])->withCasts([\n    'last_posted_at' => 'date'\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Configure SQLite Database Connection\nDESCRIPTION: This configuration example demonstrates how to set up an SQLite database connection within the `config/autoload/databases.php` file. It defines connection parameters such as driver, host, and database, and also allows for an in-memory database using `:memory:`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/quick-start.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/databases.php\nreturn [\n     // 其他配置\n    'sqlite'=>[\n        'driver' => env('DB_DRIVER', 'sqlite'),\n        'host' => env('DB_HOST', 'localhost'),\n        // :memory: 為內存數據庫 也可以指定文件絕對路徑\n        'database' => env('DB_DATABASE', ':memory:'),\n        // other sqlite config\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Replacing Guzzle Client with ClassMap\nDESCRIPTION: Shows how to use ClassMap to replace the Guzzle Client class, enabling coroutine support for third-party components that don't allow Handler replacement. This approach allows for the modification of the Guzzle Client's behavior directly.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/guzzle.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace GuzzleHttp;\n\nuse GuzzleHttp\\Psr7;\nuse Hyperf\\Guzzle\\CoroutineHandler;\nuse Hyperf\\Coroutine\\Coroutine;\n\nclass Client implements ClientInterface\n{\n    // Omitted other unchanged codes\n\n    public function __construct(array $config = [])\n    {\n        $inCoroutine = Coroutine::inCoroutine();\n        if (!isset($config['handler'])) {\n            // The corresponding Handler can choose CoroutineHandler or PoolHandler as needed\n            $config['handler'] = HandlerStack::create($inCoroutine ? new CoroutineHandler() : null);\n        } elseif ($inCoroutine && $config['handler'] instanceof HandlerStack) {\n            $config['handler']->setHandler(new CoroutineHandler());\n        } elseif (!is_callable($config['handler'])) {\n            throw new \\InvalidArgumentException('handler must be a callable');\n        }\n\n        // Convert the base_uri to a UriInterface\n        if (isset($config['base_uri'])) {\n            $config['base_uri'] = Psr7\\uri_for($config['base_uri']);\n        }\n\n        $this->configureDefaults($config);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Hyperf commands using closures\nDESCRIPTION: This example demonstrates defining simple commands using closures within the `config/console.php` configuration file. It uses the `Console::command()` method to define a command with a name, a closure that executes the command logic, and a description. The example also shows how to set a cron schedule for closure commands.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Command\\Console;\n\nConsole::command('hello', function () {\n    $this->comment('Hello, Hyperf!');\n})->describe('This is a demo closure command.');\n```\n\n----------------------------------------\n\nTITLE: Hyperf XA Global Transaction Success Case\nDESCRIPTION: This method demonstrates a successful XA transaction scenario. It generates a global transaction ID, calls two branch transactions (`transIn` and `transOut`) using `$xa->callBranch`, and returns the global transaction ID. It simulates a distributed transaction across multiple services.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/distributed-transaction.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Grpc\\GrpcClient;\nuse DtmClient\\DbTransaction\\DBTransactionInterface;\nuse DtmClient\\TransContext;\nuse DtmClient\\XA;\nuse Hyperf\\Contract\\ConfigInterface;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\GetMapping;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\n\n#[Controller(prefix: '/xa')]\nclass XAController\n{\n\n    private GrpcClient $grpcClient;\n\n    protected string $serviceUri = 'http://127.0.0.1:9502';\n\n    public function __construct(\n        private XA $xa,\n        protected ConfigInterface $config,\n    ) {\n        $server = $this->config->get('dtm.server', '127.0.0.1');\n        $port = $this->config->get('dtm.port.grpc', 36790);\n        $hostname = $server . ':' . $port;\n        $this->grpcClient = new GrpcClient($hostname);\n    }\n\n\n    #[GetMapping(path: 'successCase')]\n    public function successCase(): string\n    {\n        $payload = ['amount' => 50];\n        // 開啓Xa 全局事物\n        $gid = $this->xa->generateGid();\n        $this->xa->globalTransaction($gid, function () use ($payload) {\n            // 調用子事物接口\n            $respone = $this->xa->callBranch($this->serviceUri . '/xa/api/transIn', $payload);\n            // XA http模式下獲取子事物返回結構\n            /* @var ResponseInterface $respone */\n            $respone->getBody()->getContents();\n            // 調用子事物接口\n            $payload = ['amount' => 10];\n            $this->xa->callBranch($this->serviceUri . '/xa/api/transOut', $payload);\n        });\n        // 通過 TransContext::getGid() 獲得 全局事務ID 並返回\n        return TransContext::getGid();\n    }\n\n    #[RequestMapping(methods: [\"GET\", \"POST\", \"PUT\"], path: 'api/transIn')]\n    public function transIn(RequestInterface $request): array\n    {\n        $content = $request->post('amount');\n        $amount = $content['amount'] ?? 50;\n        // 模擬分佈式系統下transIn方法\n        $this->xa->localTransaction(function (DBTransactionInterface $dbTransaction) use ($amount) {\n            // 請使用 DBTransactionInterface 處理本地 Mysql 事物\n            $dbTransaction->xaExecute('UPDATE `order` set `amount` = `amount` + ? where id = 1', [$amount]);\n        });\n\n        return ['status' => 0, 'message' => 'ok'];\n    }\n\n    /**\n     * @param RequestInterface $request\n     * @return array\n     */\n    #[RequestMapping(methods: [\"GET\", \"POST\", \"PUT\"], path: 'api/transOut')]\n    public function transOut(RequestInterface $request): array\n    {\n        $content = $request->post('amount');\n        $amount = $content['amount'] ?? 10;\n        // 模擬分佈式系統下transOut方法\n        $this->xa->localTransaction(function (DBTransactionInterface $dbTransaction) use ($amount) {\n            // 請使用 DBTransactionInterface 處理本地 Mysql 事物\n            $dbTransaction->xaExecute('UPDATE `order` set `amount` = `amount` - ? where id = 2', [$amount]);\n        });\n\n        return ['status' => 0, 'message' => 'ok'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Data Access Object (DAO)\nDESCRIPTION: This snippet defines a simple DAO for accessing user data. It includes a `first` method that retrieves a user model by ID and throws an exception if the user is not found.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/testing.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service\\Dao;\n\nuse App\\Constants\\ErrorCode;\nuse App\\Exception\\BusinessException;\nuse App\\Model\\User;\n\nclass UserDao extends Dao\n{\n    /**\n     * @param $id\n     * @param bool $throw\n     * @return\n     */\n    public function first($id, $throw = true)\n    {\n        $model = User::query()->find($id);\n        if ($throw && empty($model)) {\n            throw new BusinessException(ErrorCode::USRE_NOT_EXIST);\n        }\n        return $model;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a One-to-One Polymorphic Relationship - Image Model\nDESCRIPTION: This code snippet defines the inverse side of a polymorphic relationship, allowing the Image model to belong to either a Book or a User model. The imageable() method returns the result of the morphTo() method, which automatically determines the type and ID of the related model based on the imageable_type and imageable_id columns in the image table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/relationship.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Model;\n\nclass Image extends Model\n{\n    public function imageable()\n    {\n        return $this->morphTo();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Paginator\nDESCRIPTION: Installs the hyperf/paginator component using Composer. This command adds the necessary files to your project and updates the composer.json file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/paginator.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/paginator\n```\n\n----------------------------------------\n\nTITLE: QOS Configuration (PHP)\nDESCRIPTION: Shows how to configure the Quality of Service (QOS) settings for a consumer, including `prefetch_size`, `prefetch_count`, and `global`. These settings control the number of messages that the consumer can receive from the server at a time. Requires the PhpAmqpLib library.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Amqp\\Consumers;\n\nuse Hyperf\\Amqp\\Annotation\\Consumer;\nuse Hyperf\\Amqp\\Message\\ConsumerMessage;\nuse Hyperf\\Amqp\\Result;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n#[Consumer(exchange: \"hyperf\", routingKey: \"hyperf\", queue: \"hyperf\", nums: 1)]\nclass DemoConsumer extends ConsumerMessage\n{\n    protected ?array $qos = [\n        // AMQP 默认并没有实现此配置。\n        'prefetch_size' => 0,\n        // 同一个消费者，最高同时可以处理的消息数。\n        'prefetch_count' => 30,\n        // 因为 Hyperf 默认一个 Channel 只消费一个 队列，所以 global 设置为 true/false 效果是一样的。\n        'global' => false,\n    ];\n    \n    public function consumeMessage($data, AMQPMessage $message): Result\n    {\n        print_r($data);\n        return Result::ACK;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Controller in Hyperf PHP\nDESCRIPTION: This code defines a simple Hyperf controller with an `index` method that retrieves a `target` parameter from the request and returns a greeting. It uses dependency injection to get the `RequestInterface` and `ResponseInterface` instances.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/controller.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\n\nclass IndexController\n{\n    // 在参数上通过定义 RequestInterface 和 ResponseInterface 来获取相关对象，对象会被依赖注入容器自动注入\n    public function index(RequestInterface $request, ResponseInterface $response)\n    {\n        $target = $request->input('target', 'World');\n        return 'Hello ' . $target;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning a Resource from Controller (Find)\nDESCRIPTION: This PHP code shows how to fetch a specific user using `User::find(1)` and return it as a `UserResource`. It is assumed that a user with id 1 exists in the database. This demonstrates how resources can be used to transform specific model instances into JSON.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\User as UserResource;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserResource(User::find(1)))->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Listener via Configuration (PHP)\nDESCRIPTION: This code snippet shows how to register a listener using the config/autoload/listeners.php configuration file. Listeners are triggered in the order they appear in the configuration array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/event.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    \\App\\Listener\\UserRegisteredListener::class,\n];\n```\n\n----------------------------------------\n\nTITLE: whereIn Statement - Hyperf PHP\nDESCRIPTION: Shows how to use the `whereIn` method in Hyperf to validate if a field value exists within a specified array.  The method accepts the field name and an array of values to check against.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->whereIn('id', [1, 2, 3])->get();\n```\n\n----------------------------------------\n\nTITLE: Example Middleware Implementation\nDESCRIPTION: This code snippet shows an example implementation of a middleware in Hyperf. The middleware checks for a valid token and either allows the request to proceed to the handler or returns an error response. It implements the `MiddlewareInterface` and uses dependency injection for request, response and container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/middleware/middleware.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Middleware\\Auth;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface as HttpResponse;\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass FooMiddleware implements MiddlewareInterface\n{\n    protected ContainerInterface $container;\n\n    protected RequestInterface $request;\n\n    protected HttpResponse $response;\n\n    public function __construct(ContainerInterface $container, HttpResponse $response, RequestInterface $request)\n    {\n        $this->container = $container;\n        $this->response = $response;\n        $this->request = $request;\n    }\n\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // 根據具體業務判斷邏輯走向，這裏假設用户攜帶的token有效\n        $isValidToken = true;\n        if ($isValidToken) {\n            return $handler->handle($request);\n        }\n\n        return $this->response->json(\n            [\n                'code' => -1,\n                'data' => [\n                    'error' => '中間件驗證token無效，阻止繼續向下執行',\n                ],\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Hyperf Commands\nDESCRIPTION: Executes the Hyperf command-line interface (CLI) to list all available commands. This is used to explore the available commands, including those provided by the devtool component such as `gen` and `vendor:publish`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/devtool.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php\n```\n\n----------------------------------------\n\nTITLE: Getting Container Statically\nDESCRIPTION: Retrieves the DI container instance using the ApplicationContext::getContainer() method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$container = \\Hyperf\\Context\\ApplicationContext::getContainer();\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Placeholders\nDESCRIPTION: Illustrates available placeholders to use within validation messages. Placeholders like `:attribute`, `:other`, `:size`, `:min`, `:max`, and `:values` will be replaced with corresponding values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$messages = [\n    'same'    => 'The :attribute and :other must match.',\n    'size'    => 'The :attribute must be exactly :size.',\n    'between' => 'The :attribute value :input is not between :min - :max.',\n    'in'      => 'The :attribute must be one of the following types: :values',\n];\n```\n\n----------------------------------------\n\nTITLE: Example gRPC Client Usage\nDESCRIPTION: This PHP snippet demonstrates how to use the gRPC client to call the `sayHello` method on the gRPC server. It creates a `HiClient` instance, sets up a `HiUser` request, calls the `sayHello` method, and processes the response. The client is designed to be coroutine-safe, allowing for reuse.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/grpc.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\npublic function hello()\n{\n    // 這個client是協程安全的，可以複用\n    $client = new \\App\\Grpc\\HiClient('127.0.0.1:9503', [\n        'credentials' => null,\n    ]);\n\n    $request = new \\Grpc\\HiUser();\n    $request->setName('hyperf');\n    $request->setSex(1);\n\n    /**\n     * @var \\Grpc\\HiReply $reply\n     */\n    list($reply, $status) = $client->sayHello($request);\n\n    $message = $reply->getMessage();\n    $user = $reply->getUser();\n    \n    var_dump(memory_get_usage(true));\n    return $message;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Retry Annotation Example PHP\nDESCRIPTION: This code snippet demonstrates the basic usage of the `Retry` annotation in Hyperf.  It applies the default retry strategy to the `foo` method, which retries the method execution upon encountering an exception. This requires the `hyperf/retry` package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/retry.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Retry the method on exception\n */\n#[Retry]\npublic function foo()\n{\n    // make a remote call\n}\n```\n\n----------------------------------------\n\nTITLE: Using Components in Blade Templates (HTML)\nDESCRIPTION: This code shows how to use registered components in Blade templates using the `<x-component-name/>` syntax. The `x-` prefix indicates that it's a component. These components have been configured to point to specific PHP classes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<x-alert/>\n<x-package-alert/>\n```\n\n----------------------------------------\n\nTITLE: Register a Listener via Configuration\nDESCRIPTION: Registers a listener in the config/autoload/listeners.php file.  The order of listeners in this file determines the order in which they are triggered when the event is dispatched.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/event.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    \\App\\Listener\\UserRegisteredListener::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Checking Request Path with pattern using is() - PHP\nDESCRIPTION: This snippet demonstrates how to verify if the request path matches a given pattern using the `is()` method. A wildcard (*) can be used to match multiple path segments.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nif ($request->is('user/*')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logger in a Hyperf Service\nDESCRIPTION: This code demonstrates how to use the logger in a Hyperf service. It retrieves a logger instance from the LoggerFactory and uses it to log an information message. The logger name and channel are specified during retrieval.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/logger.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse Psr\\Log\\LoggerInterface;\nuse Hyperf\\Logger\\LoggerFactory;\n\nclass DemoService\n{\n    protected LoggerInterface $logger;\n\n    public function __construct(LoggerFactory $loggerFactory)\n    {\n        // The first parameter corresponds to the name of the log, and the second parameter corresponds to the key in config/autoload/logger.php\n        $this->logger = $loggerFactory->get('log', 'default');\n    }\n\n    public function method()\n    {\n        // Do something.\n        $this->logger->info(\"Your log message.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Register a Listener via Annotation\nDESCRIPTION: Registers a listener using the #[Listener] annotation. The listener class must be within the Hyperf annotation scanning scope. The priority of the listener can be set using the priority attribute of the annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/event.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Listener;\n\nuse App\\Event\\UserRegistered;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\n\n#[Listener]\nclass UserRegisteredListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        // 返回一個該監聽器要監聽的事件數組，可以同時監聽多個事件\n        return [\n            UserRegistered::class,\n        ];\n    }\n\n    /**\n     * @param UserRegistered $event\n     */\n    public function process(object $event): void\n    {\n        // 事件觸發後該監聽器要執行的代碼寫在這裏，比如該示例下的發送用户註冊成功短信等\n        // 直接訪問 $event 的 user 屬性獲得事件觸發時傳遞的參數值\n        // $event->user;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf DB Component\nDESCRIPTION: Installs the hyperf/db component using Composer. This component provides a simplified database interaction layer for Hyperf applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/db.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/db\n```\n\n----------------------------------------\n\nTITLE: Create WebSocket Controller\nDESCRIPTION: This code creates a WebSocket controller `App\\Controller\\WebSocketController` that implements the `OnMessageInterface`, `OnOpenInterface`, and `OnCloseInterface` interfaces. It defines the `onMessage`, `onOpen`, and `onClose` methods to handle WebSocket messages, connections, and disconnections, respectively. The `onMessage` method sends back the received message prefixed with 'Recv: '. The `onOpen` method sends a message 'Opened' when a connection is established. The `onClose` method logs when a connection is closed. When using a Coroutine Server, `onMessage` manually handles PING frames by returning a PONG frame.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/websocket-server.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnCloseInterface;\nuse Hyperf\\Contract\\OnMessageInterface;\nuse Hyperf\\Contract\\OnOpenInterface;\nuse Hyperf\\Engine\\WebSocket\\Frame;\nuse Hyperf\\Engine\\WebSocket\\Response;\nuse Hyperf\\WebSocketServer\\Constant\\Opcode;\nuse Swoole\\Server;\nuse Swoole\\WebSocket\\Server as WebSocketServer;\n\nclass WebSocketController implements OnMessageInterface, OnOpenInterface, OnCloseInterface\n{\n    public function onMessage($server, $frame): void\n    {\n        $response = (new Response($server))->init($frame);\n        if($frame->opcode == Opcode::PING) {\n            // 如果使用協程 Server，在判斷是 PING 幀後，需要手動處理，返回 PONG 幀。\n            // 非同步風格 Server，可以直接透過 Swoole 配置處理，詳情請見 https://wiki.swoole.com/#/websocket_server?id=open_websocket_ping_frame\n            $response->push(new Frame(opcode: Opcode::PONG));\n            return;\n        }\n        $response->push(new Frame(payloadData: 'Recv: ' . $frame->data));\n    }\n\n    public function onClose($server, int $fd, int $reactorId): void\n    {\n        var_dump('closed');\n    }\n\n    public function onOpen($server, $request): void\n    {\n        $response = (new Response($server))->init($request);\n        $response->push(new Frame(payloadData: 'Opened'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inbound Type Casting in Hyperf Model\nDESCRIPTION: Defines a custom type casting class `Hash` that implements the `CastsInboundAttributes` interface. This caster hashes the attribute value before saving it to the database, only modifying the value on write operations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/mutators.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Casts;\n\nuse Hyperf\\Contract\\CastsInboundAttributes;\n\nclass Hash implements CastsInboundAttributes\n{\n    /**\n     * 哈希算法\n     *\n     * @var string\n     */\n    protected $algorithm;\n\n    /**\n     * 創建一個新的類型轉換類實例\n     */\n    public function __construct($algorithm = 'md5')\n    {\n        $this->algorithm = $algorithm;\n    }\n\n    /**\n     * 轉換成將要進行存儲的值\n     */\n    public function set($model, $key, $value, $attributes)\n    {\n        return hash($this->algorithm, $value);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Redis Databases (redis.php)\nDESCRIPTION: Shows how to configure multiple Redis database connections in Hyperf by modifying the redis.php configuration file. This allows an application to connect to different Redis databases with distinct settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/redis.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', ''),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'cluster' => [\n            'enable' => (bool) env('REDIS_CLUSTER_ENABLE', false),\n            'name' => null,\n            'seeds' => [],\n        ],\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n    ],\n    // 增加一個名為 foo 的 Redis 連線池\n    'foo' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', ''),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => 1,\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Hyperf Listener for MorphMap Initialization\nDESCRIPTION: This code defines a Hyperf listener that runs during application boot to initialize the polymorphic type mapping. It uses the `Relation::morphMap` method to associate a short name with a fully qualified model class. This allows for more flexible and maintainable polymorphic relationships by decoupling database values from internal class names.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/relationship.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n *\n * @link     https://www.hyperf.io\n * @document https://doc.hyperf.io\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\nnamespace App\\Listener;\n\nuse App\\Model;\nuse Hyperf\\Database\\Model\\Relations\\Relation;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\n\n#[Listener]\nclass MorphMapRelationListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            BootApplication::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        Relation::morphMap([\n            'user' => Model\\User::class,\n            'book' => Model\\Book::class,\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf WebSocket Server\nDESCRIPTION: This command installs the `hyperf/websocket-server` component using Composer, which is required to build a WebSocket application in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/websocket-server.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/websocket-server\n```\n\n----------------------------------------\n\nTITLE: Custom Async Queue Consumer Process for Specific Queue\nDESCRIPTION: Creates a custom consumer process that is associated with a specific queue (e.g., 'fast'). This allows directing the consumer process to handle only jobs from that specific queue.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\AsyncQueue\\Process\\ConsumerProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process(name: \"async-queue\")]\nclass AsyncQueueConsumer extends ConsumerProcess\n{\n    protected string $queue = 'fast';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding a field to an existing query in Hyperf\nDESCRIPTION: This code shows how to use the `addSelect()` method to add a field to an existing query. It first selects the 'name' field, and then adds the 'age' field to the selection.  It assumes that `Db` facade is available.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$query = Db::table('users')->select('name');\n\n$users = $query->addSelect('age')->get();\n```\n\n----------------------------------------\n\nTITLE: Getting a specific cookie value - PHP\nDESCRIPTION: Demonstrates how to retrieve a specific cookie value from the request using the `cookie()` method.  A default value can be provided if the cookie does not exist.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n// 存在則返回，不存在則返回 null\n$name = $request->cookie('name');\n// 存在則返回，不存在則返回默認值 Hyperf\n$name = $request->cookie('name', 'Hyperf');\n```\n\n----------------------------------------\n\nTITLE: Configure Zipkin Tracer in Hyperf\nDESCRIPTION: This PHP code configures the Zipkin tracer in Hyperf, specifying application details like name, IPv4, IPv6, and port, along with the Zipkin endpoint URL, timeout, and sampler. It uses Zipkin's BinarySampler to sample all requests by default.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tracer.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Zipkin\\Samplers\\BinarySampler;\n\nreturn [\n    // 選擇預設的 Tracer\n    'default' => env('TRACER_DRIVER', 'zipkin'),\n\n    // 這裡的程式碼演示不對 enable 內的配置進行展開\n    'enable' => [],\n\n    'tracer' => [\n        // Zipkin 驅動配置\n        'zipkin' => [\n            // 當前應用的配置\n            'app' => [\n                'name' => env('APP_NAME', 'skeleton'),\n                // 如果 ipv6 和 ipv6 為空元件會自動從 Server 中檢測\n                'ipv4' => '127.0.0.1',\n                'ipv6' => null,\n                'port' => 9501,\n            ],\n            'driver' => \\Hyperf\\Tracer\\Adapter\\ZipkinTracerFactory::class,\n            'options' => [\n                // Zipkin 服務的 endpoint 地址\n                'endpoint_url' => env('ZIPKIN_ENDPOINT_URL', 'http://localhost:9411/api/v2/spans'),\n                // 請求超時秒數\n                'timeout' => env('ZIPKIN_TIMEOUT', 1),\n            ],\n            // 取樣器，預設為所有請求的都追蹤\n            'sampler' => BinarySampler::createAsAlwaysSample(),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Grouping Results with groupBy/having - PHP\nDESCRIPTION: This snippet shows how to group results using the `groupBy` and `having` methods. The `having` method is similar to the `where` method but applies to the grouped results.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->groupBy('account_id')\n    ->having('account_id', '>', 100)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Distinct Results - PHP\nDESCRIPTION: Shows how to retrieve only distinct (unique) rows from a database table using the `distinct()` method.  This method ensures that duplicate rows are removed from the result set. Requires the `Hyperf\\DbConnection\\Db` facade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->distinct()->get();\n```\n\n----------------------------------------\n\nTITLE: Batch Importing Existing Records\nDESCRIPTION: Imports all existing records of a model into the search index. This command is useful for initial setup or when re-indexing an entire dataset. It chunks the data for efficient processing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php scout:import \"App\\Post\"\n```\n\n----------------------------------------\n\nTITLE: Generate Custom Hyperf Command\nDESCRIPTION: This command uses the `hyperf/devtool` component to generate a custom command class named `FooCommand` within the `app/Command` directory.  This simplifies the process of creating new commands with pre-configured structure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:command FooCommand\n```\n\n----------------------------------------\n\nTITLE: Define Crontab Tasks with Annotation\nDESCRIPTION: This code defines a scheduled task `FooTask` using the `#[Crontab]` annotation. It sets the name, rule, callback method, and memo for the task. The `execute` method is executed according to the defined rule.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/crontab.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Task;\n\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Crontab\\Annotation\\Crontab;\nuse Hyperf\\Di\\Annotation\\Inject;\n\n#[Crontab(name: \"Foo\", rule: \"* * * * *\", callback: \"execute\", memo: \"這是一個示例的定時任務\")]\nclass FooTask\n{\n    #[Inject]\n    private StdoutLoggerInterface $logger;\n\n    public function execute()\n    {\n        $this->logger->info(date('Y-m-d H:i:s', time()));\n    }\n\n    #[Crontab(rule: \"* * * * *\", memo: \"foo\")]\n    public function foo()\n    {\n        var_dump('foo');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Rate Limit Package\nDESCRIPTION: This command installs the `hyperf/rate-limit` package using Composer, a dependency manager for PHP.  This adds the rate limiting functionality to your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/rate-limit.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/rate-limit\n```\n\n----------------------------------------\n\nTITLE: Replacing JsonRpcTransporter with JsonRpcPoolTransporter\nDESCRIPTION: This snippet configures the `JsonRpcTransporter` to use `JsonRpcPoolTransporter` instead. This enables connection pooling for RPC calls, which can significantly improve performance under high concurrency by reducing the overhead of establishing new connections for each request. Requires hyperf/json-rpc package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/json-rpc.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\JsonRpc\\JsonRpcPoolTransporter;\nuse Hyperf\\JsonRpc\\JsonRpcTransporter;\n\nreturn [\n    JsonRpcTransporter::class => JsonRpcPoolTransporter::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Using selectRaw method for raw expressions in Hyperf\nDESCRIPTION: This code snippet demonstrates the use of `selectRaw` for adding raw expressions to the `select` clause. It calculates `price_with_tax` by multiplying the 'price' with a bound parameter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('order')\n    ->selectRaw('price * ? as price_with_tax', [1.0825])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Generate AMQP Consumer (Bash)\nDESCRIPTION: Generates an AMQP consumer class using the Hyperf CLI tool. This command creates a skeleton class that can be customized to consume messages from a specific exchange, routing key, and queue. Requires hyperf cli to be installed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:amqp-consumer DemoConsumer\n```\n\n----------------------------------------\n\nTITLE: Abstracting RpcMessage in Hyperf\nDESCRIPTION: This snippet demonstrates how to abstract the `RpcMessage` in Hyperf for better code organization and reusability.  By creating a custom `RpcMessage` class, you can define the exchange and routing key in one place, making RPC calls cleaner and more maintainable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/amqp.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Amqp\\Message\\RpcMessage;\n\nclass FooRpcMessage extends RpcMessage\n{\n\n    protected string $exchange = 'hyperf';\n\n    protected array|string $routingKey = 'hyperf';\n    \n    public function __construct($data)\n    {\n        // 要傳遞資料\n        $this->payload = $data;\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Validating Image Dimensions with Rules\nDESCRIPTION: This example demonstrates how to use the Rule::dimensions method to define complex image dimension constraints, including max width, max height, and ratio.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\npublic function rules(): array\n{\nreturn [\n           'avatar' => [\n              'required',\n              Rule::dimensions()->maxWidth(1000)->maxHeight(500)->ratio(3 / 2),\n           ],\n       ];\n}\n```\n\n----------------------------------------\n\nTITLE: Translate Strings via TranslatorInterface - PHP\nDESCRIPTION: Illustrates how to translate strings using the `TranslatorInterface` and the `trans` method.  The `TranslatorInterface` is injected into the controller. The `trans` method takes the key of the translation string, an array of replacements (if any), and the locale as parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/translation.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Contract\\TranslatorInterface;\n\nclass FooController\n{\n    #[Inject]\n    private TranslatorInterface $translator;\n    \n    public function index()\n    {\n        return $this->translator->trans('messages.welcome', [], 'zh_CN');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CircuitBreaker Annotation in Hyperf\nDESCRIPTION: This code demonstrates how to use the `CircuitBreaker` annotation to apply circuit breaker logic to a method. The `search` method in the `UserService` class is decorated with the `#[CircuitBreaker]` annotation, specifying options such as timeout (0.05 seconds), failure counter (1), success counter (1), and a fallback method (`searchFallback`). If the `search` method call fails according to the configured criteria, the `searchFallback` method will be executed instead.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/circuit-breaker.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Service\\UserServiceClient;\nuse Hyperf\\CircuitBreaker\\Annotation\\CircuitBreaker;\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass UserService\n{\n    #[Inject]\n    private UserServiceClient $client;\n\n    #[CircuitBreaker(options: ['timeout' => 0.05], failCounter: 1, successCounter: 1, fallback: [UserService::class, 'searchFallback'])]\n    public function search($offset, $limit)\n    {\n        return $this->client->users($offset, $limit);\n    }\n\n    public function searchFallback($offset, $limit)\n    {\n        return [];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Product Type\nDESCRIPTION: This GraphQL query requests both the 'hello' query and the 'product' query. The 'product' query retrieves a product with the specified name and price, and then selects the name and price fields of the product to be returned.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/graphql.md#_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    hello(name: \"graphql\")\n    product(name: \"goods\", price: 156.5) {\n        name\n        price\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Service Governance Component (Hyperf)\nDESCRIPTION: Installs the hyperf/service-governance component, which provides the foundation for service registration and discovery in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/service-register.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/service-governance\n```\n\n----------------------------------------\n\nTITLE: Creating a TcpServer Class in Hyperf\nDESCRIPTION: This code snippet demonstrates the creation of a `TcpServer` class that implements the `OnReceiveInterface`. The `onReceive` method is responsible for handling incoming data and sending a response back to the client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tcp-server.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnReceiveInterface;\n\nclass TcpServer implements OnReceiveInterface\n{\n    public function onReceive($server, int $fd, int $reactorId, string $data): void\n    {\n        $server->send($fd, 'recv:' . $data);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Stop Handler in Hyperf\nDESCRIPTION: This configuration snippet modifies the `config/autoload/signal.php` file to use `WorkerStopHandler` which allows the worker process to exit after receiving the SIGTERM signal, addressing the default behavior of the worker process where it cannot exit normally. It sets the timeout for the worker to stop.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/signal.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'handlers' => [\n        Hyperf\\Signal\\Handler\\WorkerStopHandler::class => PHP_INT_MIN\n    ],\n    'timeout' => 5.0,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Client Configuration for Hyperf RPC Multiplex\nDESCRIPTION: Configures a consumer for the CalculatorService RPC service. It specifies the service interface, protocol, load balancer, registry (Consul), and node information. Also includes connection timeouts, retry settings, client count for multiplexing, and heartbeat configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/rpc-multiplex.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'consumers' => [\n        [\n            'name' => 'CalculatorService',\n            'service' => App\\JsonRpc\\CalculatorServiceInterface::class,\n            'id' => App\\JsonRpc\\CalculatorServiceInterface::class,\n            'protocol' => Hyperf\\RpcMultiplex\\Constant::PROTOCOL_DEFAULT,\n            'load_balancer' => 'random',\n            // 這個消費者要從哪個服務中心獲取節點資訊，如不配置則不會從服務中心獲取節點資訊\n            'registry' => [\n                'protocol' => 'consul',\n                'address' => 'http://127.0.0.1:8500',\n            ],\n            'nodes' => [\n                ['host' => '127.0.0.1', 'port' => 9502],\n            ],\n            'options' => [\n                'connect_timeout' => 5.0,\n                'recv_timeout' => 5.0,\n                'settings' => [\n                    // 包體最大值，若小於 Server 返回的資料大小，則會丟擲異常，故儘量控制包體大小\n                    'package_max_length' => 1024 * 1024 * 2,\n                ],\n                // 重試次數，預設值為 2\n                'retry_count' => 2,\n                // 重試間隔，毫秒\n                'retry_interval' => 100,\n                // 多路複用客戶端數量\n                'client_count' => 4,\n                // 心跳間隔 非 numeric 表示不開啟心跳\n                'heartbeat' => 30,\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Table Options (PHP)\nDESCRIPTION: These lines demonstrate how to set table options like engine, charset, and collation during table creation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// 指定表存储引擎\n$table->engine = 'InnoDB';\n// 指定数据表的默认字符集\n$table->charset = 'utf8';\n// 指定数据表默认的排序规则\n$table->collation = 'utf8_unicode_ci';\n// 创建临时表\n$table->temporary();\n```\n\n----------------------------------------\n\nTITLE: Getting Specified Input Value(s) PHP\nDESCRIPTION: Demonstrates how to retrieve specific input values from the request using the `input()` and `inputs()` methods.  A default value can be specified if the input does not exist. Dot syntax can be used for nested array/JSON structures.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/request.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Returns the input value if it exists or null if it doesn't exist\n$name = $request->input('name');\n\n// Return the input value if it exists or the default value of 'Hyperf' if it doesn't exist\n$name = $request->input('name','Hyperf');\n```\n\n----------------------------------------\n\nTITLE: Validating Array Input Fields - PHP\nDESCRIPTION: Demonstrates how to validate array input fields, like `photos[profile]`. This example checks if `photos.profile` is a required image.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$validator = $this->validationFactory->make($request->all(), [\n    'photos.profile' => 'required|image',\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuration for Consul or Nacos Service Registration (PHP)\nDESCRIPTION: Configures service registration drivers for Consul and Nacos in the services.php file.  Specifies the URI, token (for Consul), host, port, username, password, and other settings for connecting to the service center.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/json-rpc.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'enable' => [\n        'discovery' => true,\n        'register' => true,\n    ],\n    'consumers' => [],\n    'providers' => [],\n    'drivers' => [\n        'consul' => [\n            'uri' => 'http://127.0.0.1:8500',\n            'token' => '',\n        ],\n        'nacos' => [\n            // nacos server url like https://nacos.hyperf.io, Priority is higher than host:port\n            // 'url' => '',\n            // The nacos host info\n            'host' => '127.0.0.1',\n            'port' => 8848,\n            // The nacos account info\n            'username' => null,\n            'password' => null,\n            'guzzle' => [\n                'config' => null,\n            ],\n            'group_name' => 'api',\n            'namespace_id' => 'namespace_id',\n            'heartbeat' => 5,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Create Elasticsearch Client with ClientBuilderFactory (Hyperf)\nDESCRIPTION: Creates an Elasticsearch client using the ClientBuilderFactory provided by hyperf/elasticsearch. This factory automatically handles the creation of a coroutine-compatible handler when running in a coroutine environment.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/elasticsearch.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Elasticsearch\\ClientBuilderFactory;\n\n// 如果在协程环境下创建，则会自动使用协程版的 Handler，非协程环境下无改变\n$builder = $this->container->get(ClientBuilderFactory::class)->create();\n\n$client = $builder->setHosts(['http://127.0.0.1:9200'])->build();\n\n$info = $client->info();\n```\n\n----------------------------------------\n\nTITLE: Implement Custom Template Engine (PHP)\nDESCRIPTION: This PHP code demonstrates how to integrate a custom template engine with the Hyperf View component by implementing the EngineInterface. The render method should instantiate the custom engine and render the template with the given data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Engine;\n\nuse Hyperf\\View\\Engine\\EngineInterface;\n\nclass TemplateEngine implements EngineInterface\n{\n    public function render($template, $data, $config): string\n    {\n        // 实例化对应的模板引擎的实例\n        $engine = new TemplateInstance();\n        // 并调用对应的渲染方法\n        return $engine->render($template, $data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Shared lock with sharedLock in Hyperf\nDESCRIPTION: This code demonstrates how to use a shared lock (`sharedLock`) on a `select` query using Hyperf's query builder, which prevents data from being modified until the transaction is committed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->sharedLock()->get();\n```\n\n----------------------------------------\n\nTITLE: Custom Async Queue Consumer Process\nDESCRIPTION: Defines a custom asynchronous queue consumer process using an annotation. This allows for customizing the consumer process name and extending the default consumer process.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\AsyncQueue\\Process\\ConsumerProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process(name: \"async-queue\")]\nclass AsyncQueueConsumer extends ConsumerProcess\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Define a Model Modifier - Hyperf - PHP\nDESCRIPTION: This code defines a modifier for the `first_name` property of a Hyperf model. The modifier converts the input value to lowercase before setting it to the `first_name` attribute.  It requires the `Hyperf\\DbConnection\\Model\\Model` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * Set the user's name.\n     *\n     * @param  string  $value\n     * @return void\n     */\n    public function setFirstNameAttribute($value)\n    {\n        $this->attributes['first_name'] = strtolower($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Format\nDESCRIPTION: This snippet shows how to customize the timestamp format using the `$dateFormat` property. This property determines how the date attribute is stored in the database and serialized.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected ?string $dateFormat = 'U';\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Usage\nDESCRIPTION: Example of using the lazy-loaded UserService proxy.  The UserService is not instantiated until its methods or properties are accessed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Service\\LazyUserService;\n\nclass Foo{\n    public $service;\n    public function __construct(LazyUserService $service){\n        $this->service = $service;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint with Swagger Annotations\nDESCRIPTION: This code snippet shows how to define a GET endpoint with comprehensive Swagger documentation using annotations. It specifies query parameters using `SA\\QueryParameter` and response content using `SA\\JsonContent`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/swagger.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n#[SA\\Get(path: '/test', summary: 'GET 示例', tags: ['Api/Test'])]\n#[SA\\QueryParameter(name: 'username', description: '用户名字段描述', required: true, schema: new SA\\Schema(type: 'string'))]\n#[SA\\QueryParameter(name: 'age', description: '年龄字段描述', required: true, schema: new SA\\Schema(type: 'string'))]\n#[SA\\QueryParameter(name: 'city', description: '城市字段描述', required: false, schema: new SA\\Schema(type: 'string'))]\n#[SA\\Response(\n    response: 200,\n    description: '返回值的描述',\n    content: new SA\\JsonContent(\n        example: '{\"code\":200,\"data\":[]}'\n    ),\n)]\npublic function list(ConversationRequest $request): array\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Define GET Endpoint with Swagger Annotations (PHP)\nDESCRIPTION: Defines a GET endpoint `/test` with parameters and response using Swagger annotations. Includes parameter definitions (username, age, city) with types and descriptions, and a JSON content example for the response. Requires the `Hyperf\\Swagger\\Annotation as SA` namespace.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/swagger.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n#[SA\\Get(path: '/test', summary: 'GET example', tags: ['Api/Test'])]\n#[SA\\Parameter(name: 'username', description: 'User name field description', in : 'query', required: true, schema: new SA\\Schema(type: 'string'))]\n#[SA\\Parameter(name: 'age', description: 'Age field description', in : 'query', required: true, schema: new SA\\Schema(type: 'string'))]\n#[SA\\Parameter(name: 'city', description: 'City field description', in : 'query', required: false, schema: new SA\\Schema(type: 'string'))]\n#[SA\\Response(\n    response: 200.\n    description: 'Description of the returned value'.\n    content: new SA\\JsonContent(\n        example: '{\"code\":200, \"data\":[]}'\n    ).\n)]\npublic function list(ConversationRequest $request): array\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Index Name in Hyperf (PHP)\nDESCRIPTION: Shows how to define a custom name for an index when creating it using Hyperf's schema builder. The second argument to the `unique()` or `index()` method specifies the name of the index.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// Define a unique index name as unique_name\n$table->unique('name', 'unique_name');\n// Define a composite index named index_account_id_and_created_at\n$table->index(['account_id', 'created_at'], '');\n```\n\n----------------------------------------\n\nTITLE: Defining Local Middleware via Configuration in Hyperf\nDESCRIPTION: Demonstrates how to define local middleware for specific routes in Hyperf using configuration.  The `$options` array passed to the route definition methods allows specifying the `middleware` key with an array of middleware classes. This ensures that only requests matching these routes will execute the defined middleware. The middleware is defined within the route configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/middleware/middleware.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Middleware\\FooMiddleware;\nuse Hyperf\\HttpServer\\Router\\Router;\n\n// 每个路由定义方法都可接收一个 $options 参数\nRouter::get('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\nRouter::post('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\nRouter::put('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\nRouter::patch('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\nRouter::delete('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\nRouter::head('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\nRouter::addRoute(['GET', 'POST', 'HEAD'], '/index', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\n\n// 该 Group 下的所有路由都将应用配置的中间件\nRouter::addGroup(\n    '/v2', function () {\n        Router::get('/index', [\\App\\Controller\\IndexController::class, 'index']);\n    },\n    ['middleware' => [FooMiddleware::class]]\n);\n```\n\n----------------------------------------\n\nTITLE: Truncating a table using truncate in Hyperf\nDESCRIPTION: This snippet shows how to truncate a table using the `truncate` method. Truncating a table removes all rows and resets the auto-incrementing ID to zero.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->truncate();\n```\n\n----------------------------------------\n\nTITLE: Publishing Delayed Message to NSQ\nDESCRIPTION: This code shows how to publish a delayed message to an NSQ topic using the `Hyperf\\Nsq\\Nsq::publish()` method with a specified delay time.  It retrieves the Nsq instance from the container, defines the topic, message, and delay time (in seconds), and then publishes the delayed message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nsq.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Nsq\\Nsq;\n\n#[Command]\nclass NsqCommand extends HyperfCommand\n{\n    protected $name = 'nsq:pub';\n\n    public function handle()\n    {\n        /** @var Nsq $nsq */\n        $nsq = make(Nsq::class);\n        $topic = 'hyperf';\n        $message = 'This is message at ' . time();\n        $deferTime = 5.0;\n        $nsq->publish($topic, $message, $deferTime);\n\n        $this->line('success', 'info');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Routes via Configuration - Hyperf PHP\nDESCRIPTION: This code snippet demonstrates how to define routes in Hyperf using the `config/routes.php` file. It showcases different ways to bind routes to controller methods for GET, POST, and other HTTP methods.  The Router class is used to define the routes and associate them with specific controller methods.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/overview.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\HttpServer\\Router\\Router;\n\n// 此处代码示例为每个示例都提供了三种不同的绑定定义方式，实际配置时仅可采用一种且仅定义一次相同的路由\n\n// 设置一个 GET 请求的路由，绑定访问地址 '/get' 到 App\\Controller\\IndexController 的 get 方法\nRouter::get('/get', 'App\\Controller\\IndexController::get');\nRouter::get('/get', 'App\\Controller\\IndexController@get');\nRouter::get('/get', [\\App\\Controller\\IndexController::class, 'get']);\n\n// 设置一个 POST 请求的路由，绑定访问地址 '/post' 到 App\\Controller\\IndexController 的 post 方法\nRouter::post('/post', 'App\\Controller\\IndexController::post');\nRouter::post('/post', 'App\\Controller\\IndexController@post');\nRouter::post('/post', [\\App\\Controller\\IndexController::class, 'post']);\n\n// 设置一个允许 GET、POST 和 HEAD 请求的路由，绑定访问地址 '/multi' 到 App\\Controller\\IndexController 的 multi 方法\nRouter::addRoute(['GET', 'POST', 'HEAD'], '/multi', 'App\\Controller\\IndexController::multi');\nRouter::addRoute(['GET', 'POST', 'HEAD'], '/multi', 'App\\Controller\\IndexController@multi');\nRouter::addRoute(['GET', 'POST', 'HEAD'], '/multi', [\\App\\Controller\\IndexController::class, 'multi']);\n```\n\n----------------------------------------\n\nTITLE: MIME Validation in Hyperf\nDESCRIPTION: This snippet demonstrates how to validate the MIME type of a file using the `mimes` validation rule in Hyperf. It specifies a list of acceptable file extensions for the file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n'photo' => 'mimes:jpeg,bmp,png'\n```\n\n----------------------------------------\n\nTITLE: Forget Session Data\nDESCRIPTION: Removes one or more session variables by their keys using the `forget()` method. It accepts a string or an array of strings, where each string represents a session key to be removed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/session.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$this->session->forget('foo');\n$this->session->forget(['foo', 'bar']);\n```\n\n----------------------------------------\n\nTITLE: Model Definition with MorphMany Relation PHP\nDESCRIPTION: Defines the `Book` and `User` models with a `morphMany` relationship to the `Image` model. This allows each book and user to have multiple associated images. The second parameter of `morphMany` specifies the name of the polymorphic relation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/relationship.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Model;\n\nclass Book extends Model\n{\n    public function images()\n    {\n        return $this->morphMany(Image::class, 'imageable');\n    }\n}\n\nclass User extends Model\n{\n    public function images()\n    {\n        return $this->morphMany(Image::class, 'imageable');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Use Snowflake in Database Model\nDESCRIPTION: Integrates Snowflake ID generation directly into a Hyperf database model.  By using the `Snowflake` trait, the model will automatically generate a Snowflake ID as its primary key when creating a new record.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/snowflake.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Database\\Model\\Model;\nuse Hyperf\\Snowflake\\Concern\\Snowflake;\n\nclass User extends Model {\n    use Snowflake;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Nullable Constructor Injection\nDESCRIPTION: Demonstrates optional dependency injection via nullable type hinting in the constructor.  If UserService cannot be resolved, $userService will be null.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserService;\n\nclass IndexController\n{\n    private ?UserService $userService;\n    \n    // 通过设置参数为 nullable，表明该参数为一个可选参数\n    public function __construct(?UserService $userService)\n    {\n        $this->userService = $userService;\n    }\n    \n    public function index()\n    {\n        $id = 1;\n        if ($this->userService instanceof UserService) {\n            // 仅值存在时 $userService 可用\n            return $this->userService->getInfoById($id);    \n        }\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Type - PHP\nDESCRIPTION: This code adds a new query to the GraphQLController that returns a Product object.  The Product object is created with provided name and price. Uses annotations for query mapping.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/graphql.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\Product;\nuse Hyperf\\GraphQL\\Annotation\\Query;\n\n#[Query]\npublic function product(string $name, float $price): Product\n{\n    return new Product($name, $price);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Translate Strings via Global Function - PHP\nDESCRIPTION: Shows how to translate strings using the global `__()` or `trans()` functions.  These functions provide a convenient way to translate strings without dependency injection.  The function takes the translation key (either a simple key or `file.key`) as its argument.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/translation.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\necho __('messages.welcome');\necho trans('messages.welcome');\n```\n\n----------------------------------------\n\nTITLE: InfluxDB Configuration\nDESCRIPTION: Configures the InfluxDB driver in the `metric.php` file. This includes settings for host, port, username, password, database name, and push interval.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'default' => env('METRIC_DRIVER', 'influxdb'),\n    'use_standalone_process' => env('TELEMETRY_USE_STANDALONE_PROCESS', true),\n    'enable_default_metric' => env('TELEMETRY_ENABLE_DEFAULT_TELEMETRY', true),\n    'metric' => [\n        'influxdb' => [\n            'driver' => Hyperf\\Metric\\Adapter\\InfluxDB\\MetricFactory::class,\n            'namespace' => env('APP_NAME', 'skeleton'),\n            'host' => env('INFLUXDB_HOST', '127.0.0.1'),\n            'port' => env('INFLUXDB_PORT', '8086'),\n            'username' => env('INFLUXDB_USERNAME', ''),\n            'password' => env('INFLUXDB_PASSWORD', ''),\n            'dbname' => env('INFLUXDB_DBNAME', true),\n            'push_interval' => env('INFLUXDB_PUSH_INTERVAL', 5),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Session Component\nDESCRIPTION: Installs the hyperf/session component using Composer, which is required for session management functionality in a Hyperf application.  This command downloads and includes the session component into the project's dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/session.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/session\n```\n\n----------------------------------------\n\nTITLE: Client Invocation of RPC Service in Hyperf\nDESCRIPTION: Demonstrates how to invoke the sendSmsCode method of the PushInterface from the client side.  It retrieves the service instance from the application context and calls the desired method with the necessary parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/rpc-multiplex.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Context\\ApplicationContext;\nuse RPC\\Push\\PushInterface;\n\nApplicationContext::getContainer()->get(PushInterface::class)->sendSmsCode('18600000001', '6666');\n\n```\n\n----------------------------------------\n\nTITLE: Distinct Array Values Validation\nDESCRIPTION: This snippet demonstrates how to validate that an array field does not contain duplicate values using the `distinct` rule in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n'foo.*.id' => 'distinct'\n```\n\n----------------------------------------\n\nTITLE: Customizing Scheduling Distribution Strategy\nDESCRIPTION: Shows how to customize the scheduling distribution strategy by changing the instance corresponding to the `Hyperf\\Crontab\\Strategy\\StrategyInterface` interface in `dependencies.php`.  The default strategy is `WorkerStrategy`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/crontab.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    \\Hyperf\\Crontab\\Strategy\\StrategyInterface::class => \\App\\Crontab\\Strategy\\FooStrategy::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Conditional queries using when in Hyperf\nDESCRIPTION: This snippet shows how to apply conditional `where` clauses using the `when` method. The first argument determines whether the closure is executed.  An optional third closure can be provided for the 'false' condition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$role = $request->input('role');\n\n$users = Db::table('users')\n    ->when($role, function ($query, $role) {\n        return $query->where('role_id', $role);\n    })\n    ->get();\n\n$sortBy = null;\n\n$users = Db::table('users')\n    ->when($sortBy, function ($query, $sortBy) {\n        return $query->orderBy($sortBy);\n    }, function ($query) {\n        return $query->orderBy('name');\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Where Exists Clause with whereExists() in Hyperf\nDESCRIPTION: Illustrates how to use the `whereExists()` method to filter records based on the existence of records in another table.  This is done by supplying a closure that defines the nested query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->whereExists(function ($query) {\n    $query->select(Db::raw(1))\n            ->from('orders')\n            ->whereRaw('orders.user_id = users.id');\n})\n->get();\n```\n\n----------------------------------------\n\nTITLE: Using Circuit Breaker Annotation in Hyperf\nDESCRIPTION: This PHP code demonstrates how to use the `CircuitBreaker` annotation from the `Hyperf\\CircuitBreaker` namespace to protect a method from cascading failures. It configures a timeout of 0.05 seconds, a failure counter of 1, a success counter of 1, and specifies a fallback method in case of failure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/circuit-breaker.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Service\\UserServiceClient;\nuse Hyperf\\CircuitBreaker\\Annotation\\CircuitBreaker;\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass UserService\n{\n    #[Inject]\n    private UserServiceClient $client;\n\n    #[CircuitBreaker(options: ['timeout' => 0.05], failCounter: 1, successCounter: 1, fallback: [UserService::class, 'searchFallback'])]\n    public function search($offset, $limit)\n    {\n        return $this->client->users($offset, $limit);\n    }\n\n    public function searchFallback($offset, $limit)\n    {\n        return [];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating a Model with Hyperf CLI (Bash)\nDESCRIPTION: This command generates a model based on the specified table name.  It uses the `AST` to create the model and can be rerun after adding methods to reset the model. The table name is passed as an argument to the command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/gen.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:model table_name\n```\n\n----------------------------------------\n\nTITLE: In Random Order Statement - Hyperf PHP\nDESCRIPTION: Shows the usage of the `inRandomOrder` method in Hyperf to randomly order the results. This can be useful for selecting a random record.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$randomUser = Db::table('users')->inRandomOrder()->first();\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Controller with Limit Callback\nDESCRIPTION: Demonstrates using a custom callback function to handle rate limiting.  The `limitCallback` parameter in the `RateLimit` annotation specifies a method to be executed when the rate limit is exceeded.  The callback receives the delay in seconds and the ProceedingJoinPoint object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/rate-limit.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\nuse Hyperf\\RateLimit\\Annotation\\RateLimit;\n\n#[Controller(prefix: \"rate-limit\")]\n#[RateLimit(limitCallback: [RateLimitController::class, \"limitCallback\"])]\nclass RateLimitController\n{\n    #[RequestMapping(path: \"test\")]\n    #[RateLimit(create: 1, capacity: 3)]\n    public function test()\n    {\n        return [\"QPS 1, 峰值3\"];\n    }\n    \n    public static function limitCallback(float $seconds, ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        // $seconds 下次生成Token 的間隔, 單位為秒\n        // $proceedingJoinPoint 此次請求執行的切入點\n        // 可以透過呼叫 `$proceedingJoinPoint->process()` 繼續完成執行，或者自行處理\n        return $proceedingJoinPoint->process();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Client in Hyperf\nDESCRIPTION: This snippet demonstrates how to configure an RPC client (consumer) in Hyperf using the 'config/autoload/services.php' file. It defines the service name, interface, protocol, load balancer, registry, nodes, and options such as connection timeout, receive timeout, package max length, retry settings, client count, and heartbeat interval. The package max length must match the server configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/rpc-multiplex.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'consumers' => [\n        [\n            'name' => 'CalculatorService',\n            'service' => App\\JsonRpc\\CalculatorServiceInterface::class,\n            'id' => App\\JsonRpc\\CalculatorServiceInterface::class,\n            'protocol' => Hyperf\\RpcMultiplex\\Constant::PROTOCOL_DEFAULT,\n            'load_balancer' => 'random',\n            // 这个消费者要从哪个服务中心获取节点信息，如不配置则不会从服务中心获取节点信息\n            'registry' => [\n                'protocol' => 'consul',\n                'address' => 'http://127.0.0.1:8500',\n            ],\n            'nodes' => [\n                ['host' => '127.0.0.1', 'port' => 9502],\n            ],\n            'options' => [\n                'connect_timeout' => 5.0,\n                'recv_timeout' => 5.0,\n                'settings' => [\n                    // 包体最大值，若小于 Server 返回的数据大小，则会抛出异常，故尽量控制包体大小\n                    'package_max_length' => 1024 * 1024 * 2,\n                ],\n                // 重试次数，默认值为 2\n                'retry_count' => 2,\n                // 重试间隔，毫秒\n                'retry_interval' => 100,\n                // 多路复用客户端数量\n                'client_count' => 4,\n                // 心跳间隔 非 numeric 表示不开启心跳\n                'heartbeat' => 30,\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Defining Route with AutoController Annotation in Hyperf\nDESCRIPTION: This code snippet shows how to use the `AutoController` annotation to automatically create routes for all public methods in a controller class. Each method will be accessible via GET and POST requests. It retrieves the 'id' parameter from the request and returns it as a string.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/router.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass UserController\n{\n    // Hyperf 会自动为此方法生成一个 /user/index 的路由，允许通过 GET 或 POST 方式请求\n    public function index(RequestInterface $request)\n    {\n        // 从请求中获得 id 参数\n        $id = $request->input('id', 1);\n        return (string)$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Top-Level Resource Wrapping (Hyperf, PHP)\nDESCRIPTION: Demonstrates how to disable the default top-level wrapping of a resource collection in Hyperf using the `withoutWrapping` method. This removes the outer `data` key from the JSON response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\UserCollection;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserCollection(User::all()))->withoutWrapping()->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Check for More Pages\nDESCRIPTION: This code demonstrates how to check if there are more pages available after the current page. The `hasMorePages()` method returns a boolean value indicating whether more pages exist.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/paginator.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ($paginator->hasMorePages()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Route Middleware Configuration with Priority\nDESCRIPTION: This code snippet shows how to configure route middleware with priority.  Priority can be set by defining the middleware as a key-value pair, where the key is the middleware class and the value is the priority. Higher priority middleware is executed earlier.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/middleware/middleware.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n// 路由中間件配置\nRouter::addGroup(\n    '/v2', function () {\n        Router::get('/index', [\\App\\Controller\\IndexController::class, 'index']);\n    },\n    [\n        'middleware' => [\n            FooMiddleware::class,\n            FooMiddlewareB::class => 3,\n        ]\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a GraphQL Controller in Hyperf\nDESCRIPTION: This snippet defines a GraphQL controller in Hyperf using annotations for dependency injection, route mapping, and GraphQL query definitions.  It processes GraphQL queries from POST requests and returns the result as an array. The controller defines a simple 'hello' query that returns the provided name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/graphql.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse GraphQL\\GraphQL;\nuse GraphQL\\Type\\Schema;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\GraphQL\\Annotation\\Query;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\PostMapping;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\n\n#[Controller]\nclass GraphQLController\n{\n    #[Inject]\n    protected Schema $schema;\n\n    #[PostMapping(path: \"/graphql\")]\n    public function test(RequestInterface $request)\n    {\n        $rawInput = $request->getBody()->getContents();\n        $input = json_decode($rawInput, true);\n        $query = $input['query'];\n        $variableValues = isset($input['variables']) ? $input['variables'] : null;\n        return GraphQL::executeQuery($this->schema, $query, null, null, $variableValues)->toArray();\n    }\n\n    #[Query]\n    public function hello(string $name): string\n    {\n        return $name;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Selecting a Database Connection in PHP\nDESCRIPTION: Demonstrates how to select a database connection using the `Db::connection()` method. It shows how to execute queries against the `default` and `test` connections.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/quick-start.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\DbConnection\\Db;\n// default\nDb::select('SELECT * FROM user;');\nDb::connection('default')->select('SELECT * FROM user;');\n\n// test\nDb::connection('test')->select('SELECT * FROM user;');\n```\n\n----------------------------------------\n\nTITLE: Hyperf Config Changed Event Listener\nDESCRIPTION: This code snippet demonstrates how to create an event listener to handle the `Hyperf\\ConfigCenter\\Event\\ConfigChanged` event, which is triggered whenever the configuration is updated.  It shows how to access the event data within the `process` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config-center.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\ConfigCenter\\Event\\ConfigChanged;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\n\n#[Listener]\nclass DbQueryExecutedListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            ConfigChanged::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        var_dump($event);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Phar Packager\nDESCRIPTION: Installs the Hyperf Phar component using Composer. This command adds the necessary dependencies to enable Phar packaging functionality within a Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/phar.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/phar\n```\n\n----------------------------------------\n\nTITLE: Using the HandlerStackFactory\nDESCRIPTION: Demonstrates how to use the HandlerStackFactory to create a HandlerStack, which simplifies the process of setting up the Guzzle client with the necessary middleware and handlers. This facilitates the creation of a coroutine-enabled Guzzle client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/guzzle.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Guzzle\\HandlerStackFactory;\nuse GuzzleHttp\\Client;\n\n$factory = new HandlerStackFactory();\n$stack = $factory->create();\n\n$client = make(Client::class, [\n    'config' => [\n        'handler' => $stack,\n    ],\n]);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Server in Hyperf\nDESCRIPTION: This snippet demonstrates how to configure an RPC server in a Hyperf application using the 'config/autoload/server.php' file. It defines the server type, host, port, socket type, callbacks, settings (including length check and package size), and options. The `package_max_length` in settings should match the client configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/rpc-multiplex.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\nuse Hyperf\\Server\\Server;\n\nreturn [\n    'servers' => [\n        [\n            'name' => 'rpc',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9502,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_RECEIVE => [Hyperf\\RpcMultiplex\\TcpServer::class, 'onReceive'],\n            ],\n            'settings' => [\n                'open_length_check' => true,\n                'package_length_type' => 'N',\n                'package_length_offset' => 0,\n                'package_body_offset' => 4,\n                'package_max_length' => 1024 * 1024 * 2,\n            ],\n            'options' => [\n                // 多路复用下，避免跨协程 Socket 跨协程多写报错\n                'send_channel_capacity' => 65535,\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Create Kafka Consumer with Annotation\nDESCRIPTION: This PHP code defines a Kafka consumer in Hyperf using annotations. The `Consumer` annotation specifies the topic, number of consumers, group ID, and auto-commit setting. The `consume` method processes messages received from the Kafka topic.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/kafka.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\kafka;\n\nuse Hyperf\\Kafka\\AbstractConsumer;\nuse Hyperf\\Kafka\\Annotation\\Consumer;\nuse longlang\\phpkafka\\Consumer\\ConsumeMessage;\n\n#[Consumer(topic: \"hyperf\", nums: 5, groupId: \"hyperf\", autoCommit: true)]\nclass KafkaConsumer extends AbstractConsumer\n{\n    public function consume(ConsumeMessage $message): string\n    {\n        var_dump($message->getTopic() . ':' . $message->getKey() . ':' . $message->getValue());\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting All Session Data\nDESCRIPTION: This snippet retrieves all the stored data from the session as an associative array using the `all()` method of the `SessionInterface`. The returned array contains all key-value pairs currently stored in the session.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/session.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$data = $this->session->all();\n```\n\n----------------------------------------\n\nTITLE: Load Relationships using loadCache()\nDESCRIPTION: Demonstrates how to load model relationships from cache using the `loadCache` method, after enabling `EagerLoadListener`. This method retrieves related models from the cache if they exist, minimizing database hits.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model-cache.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$books = Book::findManyFromCache([1,2,3]);\n$books->loadCache(['user']);\n\nforeach ($books as $book){\n    var_dump($book->user);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Property using 'when' (Hyperf, PHP)\nDESCRIPTION: Demonstrates using the `when` method in a Hyperf resource to conditionally add a property to the JSON response. The `secret` key is included only if `Auth::user()->isAdmin()` returns `true`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'secret' => $this->when(Auth::user()->isAdmin(), 'secret-value'),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure ConfigProvider in composer.json JSON\nDESCRIPTION: Illustrates how to register the ConfigProvider class within the `composer.json` file of the component using the `extra.hyperf.config` key. This tells Hyperf which class should be loaded as a ConfigProvider. Composer needs to be updated after changes to this file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/component-guide/configprovider.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n     \"name\": \"hyperf/foo\",\n     \"require\": {\n         \"php\": \">=7.3\"\n     },\n     \"autoload\": {\n         \"psr-4\": {\n             \"Hyperf\\\\Foo\\\\\": \"src/\"\n         }\n     },\n     \"extra\": {\n         \"hyperf\": {\n             \"config\": \"Hyperf\\\\Foo\\\\ConfigProvider\"\n         }\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Simulate HTTP Request\nDESCRIPTION: Creates an instance of the Hyperf\\Testing\\Client class to simulate an HTTP GET request to the root path ('/'). The `make` helper function is used to instantiate the client, and the `get` method simulates the request. The result is stored in the `$result` variable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Testing\\Client;\n\n$client = make(Client::class);\n\n$result = $client->get('/');\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters via route() method\nDESCRIPTION: Demonstrates how to access route parameters using the `route()` method of the Request object. Provides an example of retrieving the 'id' parameter with and without a default value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/request.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass IndexController\n{\n    public function info(RequestInterface $request)\n    {\n        // 存在则返回，不存在则返回默认值 null\n        $id = $request->route('id');\n        // 存在则返回，不存在则返回默认值 0\n        $id = $request->route('id', 0);\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Drop Column\nDESCRIPTION: This code snippet demonstrates how to drop a column using the `dropColumn()` method. It shows how to drop a single column ('name') and multiple columns ('name', 'age') from the 'users' table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nSchema::table('users', function (Blueprint $table) {\n    // 删除 name 字段\n    $table->dropColumn('name');\n    // 删除多个字段\n    $table->dropColumn(['name', 'age']);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Guarded Attributes (Hyperf)\nDESCRIPTION: Shows how to define the `$guarded` property on a model to specify attributes that should not be mass assignable in Hyperf. This acts as a \"blacklist\" for mass assignment.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected $guarded = ['gender_show'];\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Async Queue Consumer Process\nDESCRIPTION: This code defines a custom process class `AsyncQueueConsumer` that extends `ConsumerProcess` and is annotated with `@Process`. This allows for customizing the consumer process, such as specifying a different queue to listen to.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\AsyncQueue\\Process\\ConsumerProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process(name: \"async-queue\")]\nclass AsyncQueueConsumer extends ConsumerProcess\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Context Value with Hyperf\\Context\\Context::set() in PHP\nDESCRIPTION: This snippet demonstrates how to store a value in the current coroutine's context using the `Hyperf\\Context\\Context::set()` method.  The first parameter is the key, and the second is the value to be stored. The value is also returned by the `set` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/coroutine.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Context\\Context;\n\n// 将 bar 字符串以 foo 为 key 储存到当前协程上下文中\n$foo = Context::set('foo', 'bar');\n// set 方法会再将 value 作为方法的返回值返回回来，所以 $foo 的值为 bar\n```\n\n----------------------------------------\n\nTITLE: Setting Date Attributes in Hyperf Model (PHP)\nDESCRIPTION: This example demonstrates how to define date attributes using the `$dates` property in a Hyperf model.  Attributes listed in `$dates` are automatically converted to Carbon instances when retrieved from the database. The default attributes `created_at` and `updated_at` are already converted.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/mutators.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 应该转换为日期格式的属性.\n     *\n     * @var array\n     */\n    protected $dates = [\n        'seen_at',\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Cacheable Annotation with Value\nDESCRIPTION: Demonstrates using the `value` attribute of the `Cacheable` annotation to define a dynamic cache key. When `$user->id = 1` is met, the cache key will be `c:userBook:_1`\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/cache.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass UserBookService\n{\n    #[Cacheable(prefix: \"userBook\", ttl: 6666, value: \"_#{user.id}\")]\n    public function userBook(User $user): array\n    {\n        return [\n            'book' => $user->book->toArray(),\n            'uuid' => $this->unique(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install StatsD Client Library\nDESCRIPTION: Installs the domnikl/statsd library using Composer. This is required when using StatsD as the metric backend.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require domnikl/statsd\n```\n\n----------------------------------------\n\nTITLE: Multiple Database Configuration in Hyperf\nDESCRIPTION: Demonstrates how to configure multiple database connections in a Hyperf application, allowing you to connect to different databases with different configurations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/quick-start.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER', 'mysql'),\n        'host' => env('DB_HOST', 'localhost'),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => env('DB_CHARSET', 'utf8'),\n        'collation' => env('DB_COLLATION', 'utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX', ''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('DB_MAX_IDLE_TIME', 60),\n        ],\n    ],\n    'test'=>[\n        'driver' => env('DB_DRIVER', 'mysql'),\n        'host' => env('DB_HOST2', 'localhost'),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => env('DB_CHARSET', 'utf8'),\n        'collation' => env('DB_COLLATION', 'utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX', ''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('DB_MAX_IDLE_TIME', 60),\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Reverse Engineering a Snowflake ID\nDESCRIPTION: This PHP snippet shows how to reverse engineer a generated Snowflake ID to retrieve its Meta data using the `degenerate` method of the `IdGeneratorInterface`. It also requires the Hyperf Context component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/snowflake.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Snowflake\\IdGeneratorInterface;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n$generator = $container->get(IdGeneratorInterface::class);\n\n$meta = $generator->degenerate($id);\n```\n\n----------------------------------------\n\nTITLE: Custom Metric Usage\nDESCRIPTION: Demonstrates how to inject the `MetricFactoryInterface` to create and use custom metrics within a controller.  This example creates a counter for order creation events.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse App\\Model\\Order;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Metric\\Contract\\MetricFactoryInterface;\n\nclass IndexController extends AbstractController\n{\n    #[Inject]\n    private MetricFactoryInterface $metricFactory;\n\n    public function create(Order $order)\n    {\n        $counter = $this->metricFactory->makeCounter('order_created', ['order_type']);\n        $counter->with($order->type)->add(1);\n        // 订单逻辑...\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an AMQP Consumer\nDESCRIPTION: This PHP code defines an AMQP consumer class named DemoConsumer. It extends `ConsumerMessage`, uses the `Consumer` annotation to specify the exchange, routing key, and queue, and implements the `consumeMessage` method to process the incoming message data. It returns a `Result::ACK` to acknowledge the message.  It depends on `Hyperf\\Amqp\\Annotation\\Consumer`, `Hyperf\\Amqp\\Message\\ConsumerMessage`, `Hyperf\\Amqp\\Result`, and `PhpAmqpLib\\Message\\AMQPMessage`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/amqp.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Amqp\\Consumers;\n\nuse Hyperf\\Amqp\\Annotation\\Consumer;\nuse Hyperf\\Amqp\\Message\\ConsumerMessage;\nuse Hyperf\\Amqp\\Result;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n#[Consumer(exchange: 'hyperf', routingKey: 'hyperf', queue: 'hyperf', nums: 1)]\nclass DemoConsumer extends ConsumerMessage\n{\n    public function consumeMessage($data, AMQPMessage $message): Result\n    {\n        print_r($data);\n        return Result::ACK;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Use Resource Collection in Controller\nDESCRIPTION: Demonstrates how to use a resource collection within a controller. The `collection` method is used to create a resource instance with a collection of `User` models, and `toResponse()` converts it to a response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Resource\\User as UserResource;\nuse App\\Model\\User;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return UserResource::collection(User::all())->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining .proto File for gRPC\nDESCRIPTION: This protobuf definition specifies a simple gRPC service named 'Hi' with a 'SayHello' RPC method. The service accepts a 'HiUser' message as input and returns a 'HiReply' message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/grpc.md#_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage grpc;\n\nservice Hi {\n    rpc SayHello (HiUser) returns (HiReply) {\n    }\n}\n\nmessage HiUser {\n    string name = 1;\n    int32 sex = 2;\n}\n\nmessage HiReply {\n    string message = 1;\n    HiUser user = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Swagger Documentation\nDESCRIPTION: Generates the Swagger documentation based on the annotations in the code. This command scans the project's source code for Swagger annotations and generates a JSON file representing the API documentation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/swagger.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp bin/hyperf.php gen:swagger\n```\n\n----------------------------------------\n\nTITLE: Generating a Migration with Table Options in Hyperf\nDESCRIPTION: These commands generate migration files with options to specify the table name. `--table` is used for modifying an existing table, while `--create` is used for creating a new table. These options require the Hyperf framework and a functional `bin/hyperf.php` script.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:migration create_users_table --table=users\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:migration create_users_table --create=users\n```\n\n----------------------------------------\n\nTITLE: Unique Rule with Custom Column Name - PHP\nDESCRIPTION: Demonstrates how to specify a custom column name when using the unique validation rule in Hyperf. This example sets 'email' to be unique in the 'users' table, checking against the 'email_address' column.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'unique:users,email_address'\n```\n\n----------------------------------------\n\nTITLE: Register Service Listener Configuration in Hyperf\nDESCRIPTION: This code snippet shows how to add the register service listener to automatically register services with the service registry.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/rpc-multiplex.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\RpcMultiplex\\Listener\\RegisterServiceListener::class,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Define RPC Interface - Hyperf\nDESCRIPTION: Defines an interface for a hypothetical SMS sending RPC service.  This provides a contract for the client and server to adhere to.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/rpc-multiplex.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace RPC\\Push;\n\ninterface PushInterface\n{\n    public function sendSmsCode(string $mobile, string $code): bool;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using SceneRequest in a Controller in Hyperf\nDESCRIPTION: This code shows how to use `SceneRequest` within a Hyperf controller action. It retrieves the `SceneRequest` instance from the container, sets the desired scene using the `scene()` method, and then triggers validation using `validateResolved()`. This allows for conditional validation based on the selected scene. The request's validated data is returned in the response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\nuse App\\Request\\DebugRequest;\nuse App\\Request\\SceneRequest;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n#[AutoController(prefix: 'foo')]\nclass FooController extends Controller\n{\n    public function scene()\n    {\n        $request = $this->container->get(SceneRequest::class);\n        $request->scene('foo')->validateResolved();\n        return $this->response->success($request->all());\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generate Form Request\nDESCRIPTION: This command generates a form request class using the `gen:request` command. The generated class will be located in the `app\\Request` directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:request FooRequest\n```\n\n----------------------------------------\n\nTITLE: Dispatching Job to Other Queue in Hyperf\nDESCRIPTION: This PHP code snippet demonstrates how to dispatch a job to a specific queue, 'other', using the Hyperf asynchronous queue system. It retrieves the driver instance for the specified queue from the `DriverFactory` and then pushes a new `ExampleJob` onto that queue.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\AsyncQueue\\Driver\\DriverFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$driver = ApplicationContext::getContainer()->get(DriverFactory::class)->get('other');\nreturn $driver->push(new ExampleJob());\n```\n\n----------------------------------------\n\nTITLE: Request-Reply Pattern with NATS in Hyperf (Async)\nDESCRIPTION: This PHP code showcases the request-reply pattern using the `request` method of the `DriverInterface`. It sends a request to the 'hyperf.reply' subject and defines a callback function to handle the response. The callback function receives a `Message` object and dumps the message body. Uses Hyperf annotations for routing and dependency injection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nats.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Nats\\Driver\\DriverInterface;\nuse Hyperf\\Nats\\Message;\n\n#[AutoController(prefix: \"nats\")]\nclass NatsController extends AbstractController\n{\n    #[Inject]\n    protected DriverInterface $nats;\n\n    public function request()\n    {\n        $res = $this->nats->request('hyperf.reply', [\n            'id' => 'limx',\n        ], function (Message $payload) {\n            var_dump($payload->getBody());\n        });\n\n        return $this->response->success($res);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calling RPC Method via Custom Client in Hyperf Jet\nDESCRIPTION: This code snippet shows how to call a remote method using the custom client class `CalculatorService`. It creates an instance of the client and then calls the `add` method with parameters 1 and 2.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/jet.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// 調用遠程方法 `add` 並帶上參數 `1` 和 `2`\n// $result 即為遠程方法的返回值\n$client = new CalculatorService();\n$result = $client->add(1, 2);\n```\n\n----------------------------------------\n\nTITLE: Conditional WHERE Clauses with when - PHP\nDESCRIPTION: This snippet demonstrates how to conditionally apply `where` clauses using the `when` method. The closure is executed only if the first parameter is true.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$role = $request->input('role');\n\n$users = Db::table('users')\n    ->when($role, function ($query, $role) {\n        return $query->where('role_id', $role);\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Priority Definition with weight PHP\nDESCRIPTION: Defines priority definitions for dependency injection bindings, allowing to specify weights for different implementations of an interface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse FooInterface;\nuse Foo;\n\nreturn [\n    'dependencies' => [\n        FooInterface::class => new PriorityDefinition(Foo::class, 1),\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Using FilesystemFactory for Multiple Storage Media\nDESCRIPTION: Demonstrates how to use the `Hyperf\\Filesystem\\FilesystemFactory` to dynamically choose which storage driver to use (e.g., 'local', 's3'). This allows using multiple storage media within the same application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/filesystem.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nclass IndexController\n{\n    public function example(\\Hyperf\\Filesystem\\FilesystemFactory $factory)\n    {\n    \t$local = $factory->get('local');\n        // Write Files\n        $local->write('path/to/file.txt', 'contents');\n\n        $s3 = $factory->get('s3');\n\n        $s3->write('path/to/file.txt', 'contents');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Class Level Annotation Example in PHP\nDESCRIPTION: This example demonstrates how to define a class-level annotation using the #[AnnotationName] syntax in PHP. The ClassAnnotation annotation is applied to the Foo class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/annotation.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n#[ClassAnnotation]\nclass Foo {}\n```\n\n----------------------------------------\n\nTITLE: Checking Table/Column Existence in Hyperf\nDESCRIPTION: This code shows how to check if a table or column exists using `Schema::hasTable` and `Schema::hasColumn` methods in Hyperf. These are helpful for conditional migrations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nif (Schema::hasTable('users')) {\n    //\n}\n\nif (Schema::hasColumn('name', 'email')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Publish NSQ Configuration\nDESCRIPTION: This command publishes the default NSQ configuration file to your application's config directory. This allows you to customize the connection settings for your NSQ server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nsq.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/nsq\n```\n\n----------------------------------------\n\nTITLE: Handle HTTP Requests in WebSocket Service\nDESCRIPTION: This code demonstrates how to handle HTTP requests within a WebSocket service in Hyperf. First, configure the dependency injection container to use `Hyperf\\HttpServer\\Server::class` for the `HttpServer` key. Then, modify the WebSocket server configuration to include `Event::ON_REQUEST => ['HttpServer', 'onRequest']` in the `callbacks`. This allows the WebSocket server to handle HTTP requests using the `onRequest` method of the `Hyperf\\HttpServer\\Server` class, effectively merging HTTP and WebSocket handling within the same server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/websocket-server.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'HttpServer' => Hyperf\\HttpServer\\Server::class,\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\nuse Hyperf\\Server\\Server;\n\nreturn [\n    'mode' => SWOOLE_BASE,\n    'servers' => [\n        [\n            'name' => 'ws',\n            'type' => Server::SERVER_WEBSOCKET,\n            'host' => '0.0.0.0',\n            'port' => 9502,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => ['HttpServer', 'onRequest'],\n                Event::ON_HAND_SHAKE => [Hyperf\\WebSocketServer\\Server::class, 'onHandShake'],\n                Event::ON_MESSAGE => [Hyperf\\WebSocketServer\\Server::class, 'onMessage'],\n                Event::ON_CLOSE => [Hyperf\\WebSocketServer\\Server::class, 'onClose'],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Complex GraphQL Query\nDESCRIPTION: A more complex GraphQL query that calls both the `hello` and `product` queries.  The `product` query takes name and price as arguments and returns a Product object with specified name and price fields.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/graphql.md#_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    hello(name: \"graphql\")\n    product(name: \"goods\", price: 156.5) {\n        name\n        price\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Testing and Pest\nDESCRIPTION: This snippet installs the Hyperf testing library and Pest testing framework as development dependencies using Composer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/testing.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/testing --dev\ncomposer require pestphp/pest --dev\n```\n\n----------------------------------------\n\nTITLE: Setting Command Usage (PHP)\nDESCRIPTION: Adds a usage example to the command's help message using the `addUsage()` method within the `configure()` method. This example demonstrates how to use the command with specific options.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addUsage('--name 演示代碼');\n}\n\n```\n\n----------------------------------------\n\nTITLE: Simulating HTTP Requests on Specific Server - PHP\nDESCRIPTION: Creates a `Hyperf\\Testing\\Client` instance configured to send requests to a specific server (adminHttp). The 'server' option is passed to the `make()` helper, and the `json()` method is used to simulate a JSON POST request to `/user/0` with specified data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/testing.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Testing\\Client;\n\n$client = make(Client::class, ['server' => 'adminHttp']);\n\n$result = $client->json('/user/0',[\n    'nickname' => 'Hyperf'\n]);\n```\n\n----------------------------------------\n\nTITLE: Ignore Annotations Configuration PHP\nDESCRIPTION: This configuration allows specifying annotations that should be ignored by the annotation scanner. This is useful when integrating with tools that use annotations in a way that conflicts with Hyperf's annotation system.  The configuration specifies an array of fully qualified class names representing the annotations to ignore.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/annotation.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse JetBrains\\PhpStorm\\ArrayShape;\n\nreturn [\n    'scan' => [\n        // ignore_annotations 数组内的注解都会被注解扫描器忽略\n        'ignore_annotations' => [\n            ArrayShape::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing TCC Pattern in Hyperf\nDESCRIPTION: This code snippet demonstrates the implementation of the TCC (Try-Confirm-Cancel) pattern within a Hyperf controller. It utilizes the DtmClient library to manage the distributed transaction. The `globalTransaction` method defines the Try, Confirm, and Cancel stages for subtransactions A and B, specifying their respective URLs and data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/distributed-transaction.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse DtmClient\\TCC;\nuse DtmClient\\TransContext;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\GetMapping;\nuse Throwable;\n\n#[Controller(prefix: '/tcc')]\nclass TccController\n{\n\n    protected string $serviceUri = 'http://127.0.0.1:9501';\n\n    #[Inject]\n    protected TCC $tcc;\n\n    #[GetMapping(path: 'successCase')]\n    public function successCase()\n    {\n        try {\n            \n            $this->tcc->globalTransaction(function (TCC $tcc) {\n                // Create call data for subtransaction A\n                $tcc->callBranch(\n                    // Arguments for calling the Try method\n                    ['amount' => 30],\n                    // URL of Try stage\n                    $this->serviceUri . '/tcc/transA/try',\n                    // URL of Confirm stage\n                    $this->serviceUri . '/tcc/transA/confirm',\n                    // URL of Cancel stage\n                    $this->serviceUri . '/tcc/transA/cancel'\n                );\n                // Create call data for subtransaction B, and so on\n                $tcc->callBranch(\n                    ['amount' => 30],\n                    $this->serviceUri . '/tcc/transB/try',\n                    $this->serviceUri . '/tcc/transB/confirm',\n                    $this->serviceUri . '/tcc/transB/cancel'\n                );\n            });\n        } catch (Throwable $e) {\n            var_dump($e->getMessage(), $e->getTraceAsString());\n        }\n        // Get the global transaction ID through TransContext::getGid() and return it to the client\n        return TransContext::getGid();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: gRPC Server Routing Configuration in Hyperf\nDESCRIPTION: This PHP code snippet configures the gRPC server routing in Hyperf, mapping the '/grpc.hi/sayHello' endpoint to the 'App\\Controller\\HiController@sayHello' method. This defines how incoming gRPC requests are routed to the appropriate controller method. The 'grpc' server name should match the server configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/grpc.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRouter::addServer('grpc', function () {\n    Router::addGroup('/grpc.hi', function () {\n        Router::post('/sayHello', 'App\\Controller\\HiController@sayHello');\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Apollo Config\nDESCRIPTION: This command installs the Hyperf component for integrating with the Apollo configuration center, developed by Ctrip.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config-center.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-apollo\n```\n\n----------------------------------------\n\nTITLE: Restricting Alpha Dash Validation to ASCII\nDESCRIPTION: This example demonstrates how to restrict the alpha_dash validation rule to only allow ASCII characters (a-z and A-Z) along with numbers, dashes, and underscores. It uses the ascii option.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n'username' => 'alpha_dash:ascii',\n```\n\n----------------------------------------\n\nTITLE: Validating a Value is not within the given list\nDESCRIPTION: This example demonstrates how to use Rule::notIn to validate that a value is not within a predefined list of unacceptable values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($data, [\n    'toppings' => [\n        'required',\n        Rule::notIn(['sprinkles', 'cherries']),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Default Attribute Values\nDESCRIPTION: This snippet shows how to define default values for model attributes using the `$attributes` property.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected array $attributes = [\n        'delayed' => false,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TraceMiddleware to HTTP middleware\nDESCRIPTION: This code snippet demonstrates how to add the TraceMiddleware to the HTTP middleware stack in the `config/autoload/middlewares.php` file.  This allows tracing of HTTP requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tracer.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'http' => [\n        \\Hyperf\\Tracer\\Middleware\\TraceMiddleware::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Database Configuration with Read/Write Separation in Hyperf\nDESCRIPTION: This code snippet configures read/write separation for the database connection. It defines separate hosts for read and write operations and uses the `sticky` option to ensure immediate data consistency within the same request cycle.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/quick-start.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER','mysql'),\n        'read' => [\n            'host' => ['192.168.1.1'],\n        ],\n        'write' => [\n            'host' => ['196.168.1.2'],\n        ],\n        'sticky' => true,\n        'database' => env('DB_DATABASE','hyperf'),\n        'username' => env('DB_USERNAME','root'),\n        'password' => env('DB_PASSWORD',''),\n        'charset' => env('DB_CHARSET','utf8'),\n        'collation' => env('DB_COLLATION','utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX',''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('DB_MAX_IDLE_TIME', 60),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster with Seeds\nDESCRIPTION: This PHP code shows how to configure Redis cluster mode in Hyperf using the `seeds` option, providing a list of host:port addresses for the cluster nodes. The `name` parameter is set to null when using the `seeds` configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/redis.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// 省略其他配置\nreturn [\n    'default' => [\n        'cluster' => [\n            'enable' => true,\n            'name' => null,\n            'seeds' => [\n                '192.168.1.110:6379',\n                '192.168.1.111:6379',\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Filling a Model Instance with Batch Assignment in Hyperf\nDESCRIPTION: This demonstrates the usage of the `fill` method to populate a model instance with data using mass assignment.  An existing `$user` model is populated with the 'name' attribute using an array.  The model's `$fillable` or `$guarded` property must be defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\n$user->fill(['name' => 'Hyperf']);\n```\n\n----------------------------------------\n\nTITLE: Configuring PgSQL Connection in Hyperf\nDESCRIPTION: This configuration snippet shows how to define a PgSQL database connection in the `config/autoload/databases.php` file. It uses environment variables to configure the driver, host, database, port, username, password, and charset.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/quick-start.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/databases.php\nreturn [\n     // 其他配置\n    'pgsql'=>[\n        'driver' => env('DB_DRIVER', 'pgsql'),\n        'host' => env('DB_HOST', 'localhost'),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'port' => env('DB_PORT', 5432),\n        'username' => env('DB_USERNAME', 'postgres'),\n        'password' => env('DB_PASSWORD'),\n        'charset' => env('DB_CHARSET', 'utf8'),\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Paginating Search Results\nDESCRIPTION: This code demonstrates how to paginate search results using the `paginate` method. It returns a `Paginator` instance, similar to traditional database pagination.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->paginate();\n```\n\n----------------------------------------\n\nTITLE: Configure Automatic Service Consumer\nDESCRIPTION: Configures an automatic service consumer in the services.php configuration file. This allows for dynamic proxy creation of consumer classes based on the configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/json-rpc.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // 此處省略了其它同層級的配置\n    'consumers' => [\n        [\n            // name 需與服務提供者的 name 屬性相同\n            'name' => 'CalculatorService',\n            // 服務接口名，可選，默認值等於 name 配置的值，如果 name 直接定義為接口類則可忽略此行配置，如 name 為字符串則需要配置 service 對應到接口類\n            'service' => \\App\\JsonRpc\\CalculatorServiceInterface::class,\n            // 對應容器對象 ID，可選，默認值等於 service 配置的值，用來定義依賴注入的 key\n            'id' => \\App\\JsonRpc\\CalculatorServiceInterface::class,\n            // 服務提供者的服務協議，可選，默認值為 jsonrpc-http\n            // 可選 jsonrpc-http jsonrpc jsonrpc-tcp-length-check\n            'protocol' => 'jsonrpc-http',\n            // 負載均衡算法，可選，默認值為 random\n            'load_balancer' => 'random',\n            // 這個消費者要從哪個服務中心獲取節點信息，如不配置則不會從服務中心獲取節點信息\n            'registry' => [\n                'protocol' => 'consul',\n                'address' => 'http://127.0.0.1:8500',\n            ],\n            // 如果沒有指定上面的 registry 配置，即為直接對指定的節點進行消費，通過下面的 nodes 參數來配置服務提供者的節點信息\n            'nodes' => [\n                ['host' => '127.0.0.1', 'port' => 9504],\n            ],\n            // 配置項，會影響到 Packer 和 Transporter\n            'options' => [\n                'connect_timeout' => 5.0,\n                'recv_timeout' => 5.0,\n                'settings' => [\n                    // 根據協議不同，區分配置\n                    'open_eof_split' => true,\n                    'package_eof' => \"\\r\\n\",\n                    // 'open_length_check' => true,\n                    // 'package_length_type' => 'N',\n                    // 'package_length_offset' => 0,\n                    // 'package_body_offset' => 4,\n                ],\n                // 重試次數，默認值為 2，收包超時不進行重試。暫只支持 JsonRpcPoolTransporter\n                'retry_count' => 2,\n                // 重試間隔，毫秒\n                'retry_interval' => 100,\n                // 使用多路複用 RPC 時的心跳間隔，null 為不觸發心跳\n                'heartbeat' => 30,\n                // 當使用 JsonRpcPoolTransporter 時會用到以下配置\n                'pool' => [\n                    'min_connections' => 1,\n                    'max_connections' => 32,\n                    'connect_timeout' => 10.0,\n                    'wait_timeout' => 3.0,\n                    'heartbeat' => -1,\n                    'max_idle_time' => 60.0,\n                ],\n            ],\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Getting the Request Path PHP\nDESCRIPTION: Illustrates how to get the request path using the `path()` method and how to verify if the request path matches a specified pattern using the `is()` method.  The `is()` method supports wildcards.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/request.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$uri = $request->path();\n\nif ($request->is('user/*')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting All Data from Hyperf Session\nDESCRIPTION: Retrieves all data stored in the session as an array using the `all` method.  Returns an array containing all key-value pairs currently stored in the session.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/session.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$data = $this->session->all();\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Messages (Make Method)\nDESCRIPTION: This example shows how to pass custom validation messages directly to the `make` method of the validator factory.  These messages will override the default messages for the specified rules.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$messages = [\n    'required' => 'The :attribute field is required.',\n];\n\n$validator = $this->validationFactory->make($request->all(), $rules, $messages);\n```\n\n----------------------------------------\n\nTITLE: Configuring Coroutine Server Type in Hyperf\nDESCRIPTION: This code snippet shows how to modify the `autoload/server.php` configuration file to set the server type to `Hyperf\\Server\\CoroutineServer::class`, effectively switching the Hyperf server to a coroutine style.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/coroutine-server.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\nuse Hyperf\\Server\\Server;\n\nreturn [\n    'type' => Hyperf\\Server\\CoroutineServer::class,\n    'servers' => [\n        [\n            'name' => 'http',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9501,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [Hyperf\\HttpServer\\Server::class, 'onRequest'],\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Configure Aliyun ACM in hyperf/config: aliyun_acm.php\nDESCRIPTION: This code snippet shows the configuration file (aliyun_acm.php) for integrating Aliyun ACM with Hyperf. It defines settings like enabling the configuration center process, update interval, ACM endpoint, namespace, data ID, group, access key, and secret key, leveraging environment variables for sensitive information.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/config-center.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // Whether to enable the process of the configuration center. When true, a ConfigFetcherProcess process is automatically started to update the configuration\n    'enable' => true,\n    // The interval of update configuration (seconds)\n    'interval' => 5,\n    // ACM endpoint address, depending on your Availability Zone\n    'endpoint' => env('ALIYUN_ACM_ENDPOINT', 'acm.aliyun.com'),\n    // Namespace that the current application needs to access\n    'namespace' => env('ALIYUN_ACM_NAMESPACE', ''),\n    // The Data ID of your configuration\n    'data_id' => env('ALIYUN_ACM_DATA_ID', ''),\n    // The Group of your configuration\n    'group' => env('ALIYUN_ACM_GROUP', 'DEFAULT_GROUP'),\n    // Your Access Key of aliyun account\n    'access_key' => env('ALIYUN_ACM_AK', ''),\n    // Your Secret Key of aliyun account\n    'secret_key' => env('ALIYUN_ACM_SK', ''),\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Process Example: Monitoring Failed Queue - Hyperf (PHP)\nDESCRIPTION: Illustrates a custom process that monitors the number of items in a failed queue and logs a warning if the count exceeds zero. It uses Redis to check the queue length and the `StdoutLoggerInterface` to output warnings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/process.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\nuse Hyperf\\Process\\Annotation\\Process;\nuse Hyperf\\Contract\\StdoutLoggerInterface;\n\n#[Process(name: \"demo_process\")]\nclass DemoProcess extends AbstractProcess\n{\n    public function handle(): void\n    {\n        $logger = $this->container->get(StdoutLoggerInterface::class);\n\n        while (true) {\n            $redis = $this->container->get(\\Redis::class);\n            $count = $redis->llen('queue:failed');\n\n            if ($count > 0) {\n                $logger->warning('The num of failed queue is ' . $count);\n            }\n\n            sleep(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Pool Component (bash)\nDESCRIPTION: This command installs the hyperf/pool component via Composer. It is a prerequisite for using connection pools in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/pool.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/pool\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Records\nDESCRIPTION: This snippet shows how to update multiple records that match a given query using the `update()` method. Note that this does not trigger model events.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\nUser::query()->where('gender', 1)->update(['gender_show' => '男性']);\n\n```\n\n----------------------------------------\n\nTITLE: Register Exception Handler via Config - PHP\nDESCRIPTION: Registers an exception handler for the 'http' server in the `config/autoload/exceptions.php` file. This config file specifies the class name of the exception handler to be used for handling exceptions in the HTTP server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/exception-handler.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// config/autoload/exceptions.php\nreturn [\n    'handler' => [\n        // 这里的 http 对应 config/autoload/server.php 内的 server 所对应的 name 值\n        'http' => [\n            // 这里配置完整的类命名空间地址已完成对该异常处理器的注册\n            \\App\\Exception\\Handler\\FooExceptionHandler::class,\n        ],    \n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieve All Session Data\nDESCRIPTION: Retrieves all data stored in the session as an associative array. The array contains all key-value pairs currently stored in the session.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/session.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$data = $this->session->all();\n```\n\n----------------------------------------\n\nTITLE: Model Pagination with Query Constraints in Hyperf\nDESCRIPTION: This code snippet extends the previous example by adding a query constraint. It retrieves users where the 'gender' is 1 using the User model and paginates the results, displaying 10 users per page. This allows filtering of data before pagination.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/paginator.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php \n// 展示應用中的所有使用者，每頁顯示 10 條資料\nreturn User::where('gender', 1)->paginate(10);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cast Attributes in Hyperf (PHP)\nDESCRIPTION: This code defines a custom cast class `Json` that implements the `CastsAttributes` interface to handle JSON encoding and decoding for a model attribute. The `get` method decodes the JSON string from the database, while the `set` method encodes the value to a JSON string before storing it.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/mutators.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Casts;\n\nuse Hyperf\\Contract\\CastsAttributes;\n\nclass Json implements CastsAttributes\n{\n    /**\n     * 将取出的数据进行转换\n     */\n    public function get($model, $key, $value, $attributes)\n    {\n        return json_decode($value, true);\n    }\n\n    /**\n     * 转换成将要进行存储的值\n     */\n    public function set($model, $key, $value, $attributes)\n    {\n        return json_encode($value);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: WebSocket Server Configuration\nDESCRIPTION: Configures a WebSocket server in Hyperf to support Socket.io.  Defines the server name, type, host, port, socket type, and callbacks for handshake, message, and close events. Requires the `Hyperf\\WebSocketServer\\Server` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/socketio-server.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/server.php\n[\n    'name' => 'socket-io',\n    'type' => Server::SERVER_WEBSOCKET,\n    'host' => '0.0.0.0',\n    'port' => 9502,\n    'sock_type' => SWOOLE_SOCK_TCP,\n    'callbacks' => [\n        Event::ON_HAND_SHAKE => [Hyperf\\WebSocketServer\\Server::class, 'onHandShake'],\n        Event::ON_MESSAGE => [Hyperf\\WebSocketServer\\Server::class, 'onMessage'],\n        Event::ON_CLOSE => [Hyperf\\WebSocketServer\\Server::class, 'onClose'],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Async Queue Configuration with Retry Intervals\nDESCRIPTION: Configures the asynchronous queue with an array of retry intervals in seconds, which determines how long to wait before retrying a failed message based on the number of retries.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => Hyperf\\AsyncQueue\\Driver\\RedisDriver::class,\n        'channel' => 'queue',\n        'retry_seconds' => [1, 5, 10, 20],\n        'processes' => 1,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Left and Right Join Clauses - PHP\nDESCRIPTION: Illustrates how to perform left and right joins between two tables using the `leftJoin()` and `rightJoin()` methods. Requires specifying the table to join and the columns to match.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n    ->get();\n$users = Db::table('users')\n    ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Monolog Basic Usage Example\nDESCRIPTION: This code illustrates basic Monolog usage, including creating a Logger, adding Handlers (StreamHandler and FirePHPHandler), setting up a Formatter, pushing processors, and logging messages with context and extra data. It demonstrates key concepts like channels, handlers, formatters, and processors within Monolog.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/logger.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Monolog\\Formatter\\LineFormatter;\nuse Monolog\\Handler\\FirePHPHandler;\nuse Monolog\\Handler\\StreamHandler;\nuse Monolog\\Logger;\n\n// 創建一個 Channel，參數 log 即為 Channel 的名字\n$log = new Logger('log');\n\n// 創建兩個 Handler，對應變量 $stream 和 $fire\n$stream = new StreamHandler('test.log', Logger::WARNING);\n$fire = new FirePHPHandler();\n\n// 定義時間格式為 \"Y-m-d H:i:s\"\n$dateFormat = \"Y n j, g:i a\";\n// 定義日誌格式為 \"[%datetime%] %channel%.%level_name%: %message% %context% %extra%\\n\"\n$output = \"%datetime%||%channel||%level_name%||%message%||%context%||%extra%\\n\";\n// 根據 時間格式 和 日誌格式，創建一個 Formatter\n$formatter = new LineFormatter($output, $dateFormat);\n\n// 將 Formatter 設置到 Handler 裏面\n$stream->setFormatter($formatter);\n\n// 將 Handler 推入到 Channel 的 Handler 隊列內\n$log->pushHandler($stream);\n$log->pushHandler($fire);\n\n// clone new log channel\n$log2 = $log->withName('log2');\n\n// add records to the log\n$log->warning('Foo');\n\n// add extra data to record\n// 1. log context\n$log->error('a new user', ['username' => 'daydaygo']);\n// 2. processor\n$log->pushProcessor(function ($record) {\n    $record['extra']['dummy'] = 'hello';\n    return $record;\n});\n$log->pushProcessor(new \\Monolog\\Processor\\MemoryPeakUsageProcessor());\n$log->alert('czl');\n```\n\n----------------------------------------\n\nTITLE: Replace EasyWechat Cache with Hyperf Cache\nDESCRIPTION: This snippet demonstrates how to replace EasyWechat's default file-based cache with Hyperf's cache component (usually Redis). It retrieves the CacheInterface from the Hyperf container and rebinds it to the 'cache' key in the EasyWechat application. This allows EasyWechat to use Redis for caching instead of files.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/sdks/wechat.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Psr\\SimpleCache\\CacheInterface;\nuse Hyperf\\Context\\ApplicationContext;\nuse EasyWeChat\\Factory;\n\n$app = Factory::miniProgram([]);\n$app['cache'] = ApplicationContext::getContainer()->get(CacheInterface::class);\n```\n\n----------------------------------------\n\nTITLE: XA Controller Setup in Hyperf\nDESCRIPTION: This code defines an XA controller within the Hyperf framework, demonstrating the setup and handling of XA transactions. It initializes the necessary dependencies, including the GrpcClient for communication with DTM and the ConfigInterface for retrieving configuration values. The controller includes methods for triggering a successful XA transaction case and handling transIn and transOut requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/distributed-transaction.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Grpc\\GrpcClient;\nuse DtmClient\\DbTransaction\\DBTransactionInterface;\nuse DtmClient\\TransContext;\nuse DtmClient\\XA;\nuse Hyperf\\Contract\\ConfigInterface;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\GetMapping;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\n\n#[Controller(prefix: '/xa')]\nclass XAController\n{\n\n    private GrpcClient $grpcClient;\n\n    protected string $serviceUri = 'http://127.0.0.1:9502';\n\n    public function __construct(\n        private XA $xa,\n        protected ConfigInterface $config,\n    ) {\n        $server = $this->config->get('dtm.server', '127.0.0.1');\n        $port = $this->config->get('dtm.port.grpc', 36790);\n        $hostname = $server . ':' . $port;\n        $this->grpcClient = new GrpcClient($hostname);\n    }\n\n\n    #[GetMapping(path: 'successCase')]\n    public function successCase(): string\n    {\n        $payload = ['amount' => 50];\n        // 开启Xa 全局事物\n        $gid = $this->xa->generateGid();\n        $this->xa->globalTransaction($gid, function () use ($payload) {\n            // 调用子事物接口\n            $respone = $this->xa->callBranch($this->serviceUri . '/xa/api/transIn', $payload);\n            // XA http模式下获取子事物返回结构\n            /* @var ResponseInterface $respone */\n            $respone->getBody()->getContents();\n            // 调用子事物接口\n            $payload = ['amount' => 10];\n            $this->xa->callBranch($this->serviceUri . '/xa/api/transOut', $payload);\n        });\n        // 通过 TransContext::getGid() 获得 全局事务ID 并返回\n        return TransContext::getGid();\n    }\n\n    #[RequestMapping(methods: [\"GET\", \"POST\", \"PUT\"], path: 'api/transIn')]\n    public function transIn(RequestInterface $request): array\n    {\n        $content = $request->post('amount');\n        $amount = $content['amount'] ?? 50;\n        // 模拟分布式系统下transIn方法\n        $this->xa->localTransaction(function (DBTransactionInterface $dbTransaction) use ($amount) {\n            // 请使用 DBTransactionInterface 处理本地 Mysql 事物\n            $dbTransaction->xaExecute('UPDATE `order` set `amount` = `amount` + ? where id = 1', [$amount]);\n        });\n\n        return ['status' => 0, 'message' => 'ok'];\n    }\n\n    /**\n     * @param RequestInterface $request\n     * @return array\n     */\n    #[RequestMapping(methods: [\"GET\", \"POST\", \"PUT\"], path: 'api/transOut')]\n    public function transOut(RequestInterface $request): array\n    {\n        $content = $request->post('amount');\n        $amount = $content['amount'] ?? 10;\n        // 模拟分布式系统下transOut方法\n        $this->xa->localTransaction(function (DBTransactionInterface $dbTransaction) use ($amount) {\n            // 请使用 DBTransactionInterface 处理本地 Mysql 事物\n            $dbTransaction->xaExecute('UPDATE `order` set `amount` = `amount` - ? where id = 2', [$amount]);\n        });\n\n        return ['status' => 0, 'message' => 'ok'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Attribute Casting in Hyperf Model\nDESCRIPTION: Defines attribute casting in a Hyperf model using the `$casts` property. This allows attributes to be automatically cast to common data types. The example shows casting the `is_admin` attribute, stored as an integer in the database, to a boolean value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/mutators.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * The attributes that should be cast.\n     *\n     * @var array\n     */\n    protected $casts = [\n        'is_admin' => 'boolean',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a TCP Client in PHP\nDESCRIPTION: This code snippet demonstrates a simple TCP client implementation using Swoole. It connects to the specified host and port, sends data, and receives a response. It requires the Swoole extension to be installed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tcp-server.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$client = new \\Swoole\\Client(SWOOLE_SOCK_TCP);\n$client->connect('127.0.0.1', 9504);\n$client->send('Hello World.');\n$ret = $client->recv(); // recv:Hello World.\n\n```\n\n----------------------------------------\n\nTITLE: Coroutine Channel Example PHP\nDESCRIPTION: This code demonstrates a simple communication between coroutines using a Channel. It creates two coroutines: one pushes data to the channel, and the other pops data from the channel.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/coroutine.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nco(function () {\n    $channel = new \\Swoole\\Coroutine\\Channel();\n    co(function () use ($channel) {\n        $channel->push('data');\n    });\n    $data = $channel->pop();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing hyperf/circuit-breaker\nDESCRIPTION: This command installs the hyperf/circuit-breaker package using Composer, adding circuit breaker functionality to your Hyperf project. This is a necessary first step for using the circuit breaker features.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/circuit-breaker.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/circuit-breaker\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf NATS\nDESCRIPTION: This command installs the `hyperf/nats` package using Composer, adding NATS integration capabilities to your Hyperf project. This package provides the necessary classes and functionalities to connect to and interact with a NATS server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nats.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/nats\n```\n\n----------------------------------------\n\nTITLE: Checking record existence with exists() and doesntExist()\nDESCRIPTION: This snippet demonstrates the use of `exists()` and `doesntExist()` methods to check the existence of records based on query conditions. It checks if there are any orders with the 'finalized' field set to 1.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nreturn Db::table('orders')->where('finalized', 1)->exists();\n\nreturn Db::table('orders')->where('finalized', 1)->doesntExist();\n```\n\n----------------------------------------\n\nTITLE: Returning a Resource in a Controller (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to return a resource directly from a controller action.  It showcases two methods:  One that calls `toResponse()` and one that does not.  The `toResponse()` method allows for further customization of the HTTP response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\User as UserResource;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserResource(User::find(1)))->toResponse();\n    }\n\n    public function info()\n    {\n        return new UserResource(User::find(1));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Consul ACL Token via Header\nDESCRIPTION: Demonstrates how to add a Consul ACL token to requests by setting the `X-Consul-Token` header.  This involves configuring the Guzzle client used by the Consul client to include the header with the token value. It allows secure access to Consul resources that require authentication.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/consul.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Consul\\KV;\nuse Hyperf\\Guzzle\\ClientFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n$clientFactory = $container->get(ClientFactory::class);\n\n$consulServer = 'http://127.0.0.1:8500';\n$kv = new KV(function () use ($clientFactory, $consulServer) {\n    return $clientFactory->create([\n        'base_uri' => $consulServer,\n        'headers' => [\n            'X-Consul-Token' => 'your-token'\n        ],\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Cache Key Value\nDESCRIPTION: This demonstrates defining a custom cache key `value` using the `Cacheable` annotation. The key is generated dynamically using the `id` parameter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/cache.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service\\Cache;\n\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass DemoService\n{\n\n    #[Cacheable(prefix: \"cache\", value: \"_#{id}\", listener: \"user-update\")]\n    public function getCache(int $id)\n    {\n        return $id . '_' . uniqid();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Task Execution via Method Dispatch (Hyperf)\nDESCRIPTION: This example demonstrates how to dispatch a task using the `TaskExecutor` class.  It creates a `MethodTask` class with a `handle` method that returns information about the worker and task coroutine IDs. It then uses the container to get an instance of `TaskExecutor` and executes the task.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/task.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Coroutine\\Coroutine;\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\Task\\TaskExecutor;\nuse Hyperf\\Task\\Task;\n\nclass MethodTask\n{\n    public function handle($cid)\n    {\n        return [\n            'worker.cid' => $cid,\n            // task_enable_coroutine 為 false 時返回 -1，反之 返回對應的協程 ID\n            'task.cid' => Coroutine::id(),\n        ];\n    }\n}\n\n$container = ApplicationContext::getContainer();\n$exec = $container->get(TaskExecutor::class);\n$result = $exec->execute(new Task([MethodTask::class, 'handle'], [Coroutine::id()]));\n\n```\n\n----------------------------------------\n\nTITLE: Async Queue Consumer with Custom Queue\nDESCRIPTION: This code defines a custom consumer process that overrides the `$queue` property to specify a different queue name ('fast'). This allows consuming from a specific queue when multiple configurations exist.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\AsyncQueue\\Process\\ConsumerProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process(name: \"async-queue\")]\nclass AsyncQueueConsumer extends ConsumerProcess\n{\n    protected string $queue = 'fast';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Proxy Class for Different Redis Resources\nDESCRIPTION: This example shows how to use a proxy class (FooRedis) to switch between different Redis connection pools. Requires extending the Hyperf\\Redis\\Redis class and defining the poolName property.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/redis.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Redis\\Redis;\n\nclass FooRedis extends Redis\n{\n    // The key value of the corresponding Pool\n    protected $poolName = 'foo';\n}\n\n// Obtain or directly inject the current class through the DI container\n$redis = $this->container->get(FooRedis::class);\n\n$result = $redis->keys('*');\n\n```\n\n----------------------------------------\n\nTITLE: Updating records with update in Hyperf\nDESCRIPTION: This code demonstrates how to update an existing record in a database table using the `update` method in Hyperf's query builder. The example updates the 'votes' field of the user with 'id' equal to 1.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('id', 1)->update(['votes' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Eager Loading with EagerLoadListener\nDESCRIPTION: Configures the EagerLoadListener and uses the `loadCache` method to eager load related model data from the cache, reducing database queries. This approach requires enabling the listener in the `listeners.php` configuration file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model-cache.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    Hyperf\\ModelCache\\Listener\\EagerLoadListener::class,\n];\n\n$books = Book::findManyFromCache([1,2,3]);\n$books->loadCache(['user']);\n\nforeach ($books as $book){\n    var_dump($book->user);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Model Not Found Exception in Hyperf\nDESCRIPTION: Shows how to use the `findOrFail()` and `firstOrFail()` methods to retrieve models and throw a `Hyperf\\Database\\Model\\ModelNotFoundException` if no model is found.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$model = User::findOrFail(1);\n$model = User::where('age', '>', 18)->firstOrFail();\n```\n\n----------------------------------------\n\nTITLE: Install Async Queue via Composer\nDESCRIPTION: Installs the hyperf/async-queue component using Composer, enabling asynchronous queue functionality in a Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/async-queue\n```\n\n----------------------------------------\n\nTITLE: Triggering a Custom Exception in Hyperf\nDESCRIPTION: This snippet illustrates how to trigger a custom exception, `FooException`, within a Hyperf controller.  The `index` method throws the exception with a specific message and code, which will then be handled by the configured exception handlers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/exception-handler.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Exception\\FooException;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        throw new FooException('Foo Exception...', 800);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Register Shutdown Callback\nDESCRIPTION: Registers a shutdown callback in the server configuration.  This callback allows for cleanup or other tasks to be executed when the server shuts down.  Requires the `Hyperf\\Framework\\Bootstrap\\ShutdownCallback::class` and `Event::ON_SHUTDOWN`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nacos.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Server\\Event;\nreturn [\n    // ...other\n    'callbacks' => [\n        // ...other\n        Event::ON_SHUTDOWN => [Hyperf\\Framework\\Bootstrap\\ShutdownCallback::class, 'onShutdown']\n    ]\n];\n\n```\n\n----------------------------------------\n\nTITLE: Defining an Aspect with Classes and Annotations in Hyperf\nDESCRIPTION: This code defines an aspect named `FooAspect` that intercepts calls to `SomeClass`, `someMethod` and `*Method`, and classes using `SomeAnnotation`. The `process` method demonstrates how to access and modify the original method's execution, including accessing the arguments and metadata.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/aop.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Aspect;\n\nuse App\\Service\\SomeClass;\nuse App\\Annotation\\SomeAnnotation;\nuse Hyperf\\Di\\Annotation\\Aspect;\nuse Hyperf\\Di\\Aop\\AbstractAspect;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\n#[Aspect]\nclass FooAspect extends AbstractAspect\n{\n    // 要切入的类或 Trait，可以多个，亦可通过 :: 标识到具体的某个方法，通过 * 可以模糊匹配\n    public array $classes = [\n        SomeClass::class,\n        'App\\Service\\SomeClass::someMethod',\n        'App\\Service\\SomeClass::*Method',\n    ];\n\n    // 要切入的注解，具体切入的还是使用了这些注解的类，仅可切入类注解和类方法注解\n    public array $annotations = [\n        SomeAnnotation::class,\n    ];\n\n    public function process(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        // 切面切入后，执行对应的方法会由此来负责\n        // $proceedingJoinPoint 为连接点，通过该类的 process() 方法调用原方法并获得结果\n        // 在调用前进行某些处理\n        $result = $proceedingJoinPoint->process();\n        // 在调用后进行某些处理\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing hyperf/event Component - Bash\nDESCRIPTION: This command installs the `hyperf/event` component using Composer. This component provides the event management capabilities for Hyperf and can also be used in other frameworks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/event.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/event\n```\n\n----------------------------------------\n\nTITLE: Checking Configuration Existence\nDESCRIPTION: Demonstrates how to check if a configuration key exists using the `has()` method of the `Hyperf\\Contract\\ConfigInterface` object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @var \\Hyperf\\Contract\\ConfigInterface\n */\n// 通过 has(): bool 方法判断对应的 $key 值是否存在于配置中，$key 值可以通过 . 连接符定位到下级数组\n$config->has($key);\n```\n\n----------------------------------------\n\nTITLE: Implementing Socket.io Server Events in Hyperf\nDESCRIPTION: This snippet showcases a Hyperf controller implementing Socket.io server-side event handling.  It uses annotations to define event handlers for 'event', 'join-room', and 'say' events. The `onEvent` method sends a response back to the client. The `onJoinRoom` method adds a user to a room and emits events to other users in the room. The `onSay` method decodes JSON data and emits a message to a specific room.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/socketio-server.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\SocketIOServer\\Annotation\\Event;\nuse Hyperf\\SocketIOServer\\Annotation\\SocketIONamespace;\nuse Hyperf\\SocketIOServer\\BaseNamespace;\nuse Hyperf\\SocketIOServer\\Socket;\nuse Hyperf\\Codec\\Json;\n\n#[SocketIONamespace(\"/\")]\nclass WebSocketController extends BaseNamespace\n{\n    /**\n     * @param string $data\n     */\n    #[Event(\"event\")]\n    public function onEvent(Socket $socket, $data)\n    {\n        // 應答\n        return 'Event Received: ' . $data;\n    }\n\n    /**\n     * @param string $data\n     */\n    #[Event(\"join-room\")]\n    public function onJoinRoom(Socket $socket, $data)\n    {\n        // 將當前用户加入房間\n        $socket->join($data);\n        // 向房間內其他用户推送（不含當前用户）\n        $socket->to($data)->emit('event', $socket->getSid() . \"has joined {$data}\");\n        // 向房間內所有人廣播（含當前用户）\n        $this->emit('event', 'There are ' . count($socket->getAdapter()->clients($data)) . \" players in {$data}\");\n    }\n\n    /**\n     * @param string $data\n     */\n    #[Event(\"say\")]\n    public function onSay(Socket $socket, $data)\n    {\n        $data = Json::decode($data);\n        $socket->to($data['room'])->emit('event', $socket->getSid() . \" say: {$data['message']}\");\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Flysystem with Dependency Injection (v1.0)\nDESCRIPTION: Demonstrates using `League\\Flysystem\\Filesystem` through dependency injection to perform common file operations such as uploading, writing, reading, deleting, and renaming files.  This assumes Flysystem v1.0.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/filesystem.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nclass IndexController extends AbstractController\n{\n    public function example(\\League\\Flysystem\\Filesystem $filesystem)\n    {\n        // Process Upload\n        $file = $this->request->file('upload');\n        $stream = fopen($file->getRealPath(), 'r+');\n        $filesystem->writeStream(\n            'uploads/'.$file->getClientFilename(),\n            $stream\n        );\n        fclose($stream);\n        \n        // Write Files\n        $filesystem->write('path/to/file.txt', 'contents');\n\n        // Add local file\n        $stream = fopen('local/path/to/file.txt', 'r+');\n        $result = $filesystem->writeStream('path/to/file.txt', $stream);\n        if (is_resource($stream)) {\n            fclose($stream);\n        }\n\n        // Update Files\n        $filesystem->update('path/to/file.txt', 'new contents');\n\n        // Check if a file exists\n        $exists = $filesystem->has('path/to/file.txt');\n\n        // Read Files\n        $contents = $filesystem->read('path/to/file.txt');\n\n        // Delete Files\n        $filesystem->delete('path/to/file.txt');\n\n        // Rename Files\n        $filesystem->rename('filename.txt', 'newname.txt');\n\n        // Copy Files\n        $filesystem->copy('filename.txt', 'duplicate.txt');\n\n        // list the contents\n        $filesystem->listContents('path', false);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pessimistic Locking (Update Lock) - PHP\nDESCRIPTION: This snippet demonstrates how to use an update lock with the `lockForUpdate` method. It prevents rows from being modified or selected by other shared locks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->lockForUpdate()->get();\n```\n\n----------------------------------------\n\nTITLE: UserService Class Definition\nDESCRIPTION: Defines a simple UserService class with a getInfoById method that returns an Info object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Service;\n\nclass UserService\n{\n    public function getInfoById(int $id)\n    {\n        // 我們假設存在一個 Info 實體\n        return (new Info())->fill($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Array Validation - PHP\nDESCRIPTION: This snippet demonstrates how to validate array input fields, specifically the `photos.profile` field. The example shows that the field is required and must be an image.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_48\n\nLANGUAGE: PHP\nCODE:\n```\n$validator = $this->validationFactory->make($request->all(), [\n    'photos.profile' => 'required|image',\n]);\n```\n\n----------------------------------------\n\nTITLE: Getting input from Query String - PHP\nDESCRIPTION: Demonstrates how to retrieve input data specifically from the query string using the `query()` method. A default value can be provided, and calling the method without arguments returns all query parameters as an associative array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n// 存在則返回，不存在則返回 null\n$name = $request->query('name');\n// 存在則返回，不存在則返回默認值 Hyperf\n$name = $request->query('name', 'Hyperf');\n// 不傳遞參數則以關聯數組的形式返回所有 Query 參數\n$name = $request->query();\n```\n\n----------------------------------------\n\nTITLE: Define Routes with AutoController Annotation - Hyperf PHP\nDESCRIPTION: This code snippet demonstrates how to define routes using the `#[AutoController]` annotation in Hyperf.  The `#[AutoController]` annotation automatically registers routes for all public methods of the controller class, using GET and POST methods.  It requires the `Hyperf\\HttpServer\\Annotation\\AutoController` namespace.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/overview.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass IndexController\n{\n    // Hyperf 会自动为此方法生成一个 /index/index 的路由，允许通过 GET 或 POST 方式请求\n    public function index(RequestInterface $request)\n    {\n        // 从请求中获得 id 参数\n        $id = $request->input('id', 1);\n        return (string)$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Model (Hyperf)\nDESCRIPTION: Shows how to retrieve a single model instance from the database using either the `find` or `first` method in Hyperf. These methods return a single model instance or `null` if no matching record is found.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$user = User::query()->where('id', 1)->first();\n\n$user = User::query()->find(1);\n```\n\n----------------------------------------\n\nTITLE: Defining Default Attribute Values in Hyperf Model\nDESCRIPTION: Illustrates how to define default values for model attributes using the `$attributes` property. These values are applied when a new model instance is created.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected array $attributes = [\n        'delayed' => false,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent Retry Call with Fallback in Hyperf\nDESCRIPTION: This code snippet showcases the fluent interface of the Hyperf Retry component. It configures the retry policy to retry when the function returns `false`, up to 3 times, for a maximum of 5 seconds. It also defines a fallback function to be executed after all retry attempts have failed. The `sleep` function is incorrectly documented (should be in milliseconds not seconds)\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/retry.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$result = \\Hyperf\\Retry\\Retry::whenReturns(false) // Retry when false is returned\n    ->max(3) // up to 3 times\n    ->inSeconds(5) // up to 5 seconds\n    ->sleep(1) // 1ms interval\n    ->fallback(function(){return true;}) // fallback function\n    ->call(function(){\n        if (rand(1, 100) >= 20){\n            return true;\n        }\n        return false;\n    });\n```\n\n----------------------------------------\n\nTITLE: Reusing Configuration with PHP Variables - Hyperf\nDESCRIPTION: This snippet demonstrates how to reuse registry configurations across multiple service consumers using PHP variables. It defines a `$registry` variable containing the Consul address and protocol, then uses this variable in the 'consumers' configuration array for 'FooService' and 'BarService'. This avoids redundant configuration entries.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/json-rpc.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$registry = [\n   'protocol' => 'consul',\n   'address' => 'http://127.0.0.1:8500',\n];\nreturn [\n    // 下面的 FooService 和 BarService 僅示例多服務，並不是在文件示例中真實存在的\n    'consumers' => [\n        [\n            'name' => 'FooService',\n            'registry' => $registry,\n        ],\n        [\n            'name' => 'BarService',\n            'registry' => $registry,\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using AutoController Annotation in Hyperf\nDESCRIPTION: This code snippet demonstrates the use of the `AutoController` annotation in Hyperf to automatically generate routes for public methods within a controller. Hyperf automatically generates a `/user/index` route for the `index` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/router.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass UserController\n{\n    // Hyperf will automatically generate a /user/index route for this method, allowing requests via GET or POST\n    public function index(RequestInterface $request)\n    {\n        // Obtain the id parameter from the request\n        $id = $request->input('id', 1);\n        return (string)$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable with Double Quotes - dotenv\nDESCRIPTION: Shows how to define environment variables in the `.env` file that contain spaces. The values must be enclosed in double quotes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/config.md#_snippet_6\n\nLANGUAGE: dotenv\nCODE:\n```\nAPP_NAME=\"Hyperf Skeleton\"\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Resource Collection in Controller (Hyperf, PHP)\nDESCRIPTION: Shows how to return a custom resource collection from a Hyperf controller.  It creates a new instance of `UserCollection`, passing a collection of `User` models to it. The result is then converted to a response using `toResponse()`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\UserCollection;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserCollection(User::all()))->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Check Input Value Existence\nDESCRIPTION: Demonstrates how to check if an input value exists using the `has($keys)` method. Can check for a single value or multiple values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/request.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// 仅判断单个值\nif ($request->has('name')) {\n    // ...\n}\n// 同时判断多个值\nif ($request->has(['name', 'email'])) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Blade Views\nDESCRIPTION: This PHP code defines a route that passes data to a Blade view. The `Router::get` method defines a route, and the `view()` helper function renders the 'welcome' template with the 'name' variable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\HttpServer\\Router\\Router;\nuse function Hyperf\\ViewEngine\\view;\n\nRouter::get('greeting', function () {\n    return view('welcome', ['name' =>'Samantha']);\n});\n```\n\n----------------------------------------\n\nTITLE: Define Many-to-Many Relation with Custom Pivot Attribute (PHP)\nDESCRIPTION: This code defines a many-to-many relationship between User and Podcast models and renames the pivot attribute to 'subscription'. It uses the as method to customize the name for accessing the intermediate table data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nreturn $this->belongsToMany(Podcast::class)->as('subscription')->withTimestamps();\n\n```\n\n----------------------------------------\n\nTITLE: Define Crontab Tasks via Schedule Class - PHP\nDESCRIPTION: This PHP code defines scheduled tasks within the `config/crontabs.php` configuration file. It uses the `Hyperf\\Crontab\\Schedule` class to define the tasks using command, call and closure examples.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/crontab.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/crontabs.php\nuse Hyperf\\Crontab\\Schedule;\n\nSchedule::command('foo:bar')->setName('foo-bar')->setRule('* * * * *');\nSchedule::call([Foo::class, 'bar'])->setName('foo-bar')->setRule('* * * * *');\nSchedule::call(fn() => (new Foo)->bar())->setName('foo-bar')->setRule('* * * * *');\n```\n\n----------------------------------------\n\nTITLE: Define Return Object PHP\nDESCRIPTION: This code snippet defines a simple PHP class `MathValue` that will be returned by the service. It contains a public property `$value` and a constructor to initialize the object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/json-rpc.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\JsonRpc;\n\nclass MathValue\n{\n    public $value;\n\n    public function __construct($value)\n    {\n        $this->value = $value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Or Where Clauses with orWhere() in Hyperf\nDESCRIPTION: Demonstrates how to use the `orWhere()` method to add `OR` conditions to a `where` clause. This allows you to specify alternative conditions for filtering results.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')\n    ->where('gender', 1)\n    ->orWhere('name', 'John')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Model Pagination in Hyperf\nDESCRIPTION: This snippet demonstrates how to paginate query results using the Model in Hyperf. It queries the User model and returns 10 records per page. The current page is determined by the 'page' parameter in the HTTP request.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/paginator.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Show all users in the app, 10 pieces of data per page\nreturn User::paginate(10);\n```\n\n----------------------------------------\n\nTITLE: Adding a Query for the Product Type\nDESCRIPTION: This snippet adds a new GraphQL query to the GraphQLController that returns a Product object. It utilizes the #[Query] annotation to expose the 'product' method as a GraphQL query, which takes a name and price as arguments.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/graphql.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\Product;\nuse Hyperf\\GraphQL\\Annotation\\Query;\n\n#[Query]\npublic function product(string $name, float $price): Product\n{\n    return new Product($name, $price);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Add Validation Exception Handler\nDESCRIPTION: Registers the ValidationExceptionHandler in the config/autoload/exceptions.php file to handle ValidationException exceptions for the 'http' server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'handler' => [\n        // 這裏對應您當前的 Server 名稱\n        'http' => [\n            \\Hyperf\\Validation\\ValidationExceptionHandler::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Modifying Column to Allow Null Values\nDESCRIPTION: This code snippet shows how to modify an existing column to allow null values, alongside changing its length. It demonstrates using the `nullable()` method in conjunction with `change()` in a Schema builder.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nSchema::table('users', function (Blueprint $table) {\n    // 將欄位的長度修改為 50 並允許為空\n    $table->string('name', 50)->nullable()->change();\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Attributes with Closure (PHP)\nDESCRIPTION: This PHP snippet showcases using a closure with the `when` method for conditionally adding attributes. The closure's return value will be used as the attribute's value if the condition is met, allowing for more complex attribute generation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'secret' => $this->when(Auth::user()->isAdmin(), function () {\n                return 'secret-value';\n            }),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Select Query in PHP\nDESCRIPTION: Executes a SELECT query using `Db::select()` and retrieves data from the `user` table based on gender. The result is an array of `StdClass` objects.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/quick-start.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\DbConnection\\Db;\n\n$users = Db::select('SELECT * FROM `user` WHERE gender = ?',[1]);  //  返回array \n\nforeach($users as $user){\n    echo $user->name;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Unique Rule Ignoring ID - PHP\nDESCRIPTION: This snippet uses the `Rule::unique()` method to create a unique validation rule that ignores a specific user ID. This is useful when updating a record to prevent validation errors if the user doesn't change their email address.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_40\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($data, [\n    'email' => [\n        'required',\n        Rule::unique('users')->ignore($user->id),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf AMQP Component (Bash)\nDESCRIPTION: Installs the hyperf/amqp component using Composer. This command adds the AMQP functionality to your Hyperf project, allowing it to interact with RabbitMQ.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/amqp\n```\n\n----------------------------------------\n\nTITLE: Adding RequestTraceListener to listeners\nDESCRIPTION: This code shows how to add the RequestTraceListener to the listeners configuration in `config/autoload/listeners.php`.  This listener enables request tracing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tracer.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    \\Hyperf\\Tracer\\Listener\\RequestTraceListener::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Cacheable with Custom Value\nDESCRIPTION: Shows how to use the `Cacheable` annotation with a custom value for the cache key. The `value` parameter allows dynamic key generation based on method parameters, such as `_#{id}`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/cache.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service\\Cache;\n\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass DemoService\n{\n\n    #[Cacheable(prefix: \"cache\", value: \"_#{id}\", listener: \"user-update\")]\n    public function getCache(int $id)\n    {\n        return $id . '_' . uniqid();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf AMQP\nDESCRIPTION: This command installs the hyperf/amqp package using composer, adding AMQP functionality to your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/amqp.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/amqp\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Devtool using Composer\nDESCRIPTION: This command installs the Hyperf Devtool component using Composer, a dependency management tool for PHP.  It adds the devtool package to your project's dependencies, allowing you to use its code generation and development utilities.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/devtool.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer require hyperf/devtool\n```\n\n----------------------------------------\n\nTITLE: Using the DI Container in Hyperf Nano\nDESCRIPTION: This example demonstrates how to use the dependency injection container within a Hyperf Nano application. It registers a class with the container and resolves it within a route handler, showcasing the ContainerProxy.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nano.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Nano\\ContainerProxy;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nclass Foo {\n    public function bar() {\n        return 'bar';\n    }   \n}\n\n$app = AppFactory::create();\n$app->getContainer()->set(Foo::class, new Foo());\n\n$app->get('/', function () {\n    /** @var ContainerProxy $this */\n    $foo = $this->get(Foo::class);\n    return $foo->bar();\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Custom Process Example: Monitoring Failed Queue\nDESCRIPTION: This snippet provides an example of a custom process that monitors a failed queue and logs a warning message when the queue contains data. It uses Redis to check the queue length and the `StdoutLoggerInterface` to log the warning.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/process.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\nuse Hyperf\\Process\\Annotation\\Process;\nuse Hyperf\\Contract\\StdoutLoggerInterface;\n\n#[Process(name: \"demo_process\")]\nclass DemoProcess extends AbstractProcess\n{\n    public function handle(): void\n    {\n        $logger = $this->container->get(StdoutLoggerInterface::class);\n\n        while (true) {\n            $redis = $this->container->get(\\Redis::class);\n            $count = $redis->llen('queue:failed');\n\n            if ($count > 0) {\n                $logger->warning('The num of failed queue is ' . $count);\n            }\n\n            sleep(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Command Arguments - PHP\nDESCRIPTION: Define command arguments using the `getArguments` method.  This example defines a `name` argument, allowing users to provide input to the command. Requires Hyperf Command component and Symfony Console.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    /**\n     * 执行的命令行\n     */\n    protected ?string $name = 'foo:hello';\n\n    public function handle()\n    {\n        // 从 $input 获取 name 参数\n        $argument = $this->input->getArgument('name') ?? 'World';\n        $this->line('Hello ' . $argument, 'info');\n    }\n\n    protected function getArguments()\n    {\n        return [\n            ['name', InputArgument::OPTIONAL, '这里是对这个参数的解释']\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sentinel Mode (redis.php)\nDESCRIPTION: Configures Redis Sentinel mode within the redis.php configuration file, defining settings such as the master name, Sentinel node addresses, persistent connections, read timeout, and authentication for the Sentinel nodes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/redis.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', null),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'timeout' => 30.0,\n        'reserved' => null,\n        'retry_interval' => 0,\n        'sentinel' => [\n            'enable' => (bool) env('REDIS_SENTINEL_ENABLE', false),\n            'master_name' => env('REDIS_MASTER_NAME', 'mymaster'),\n            'nodes' => explode(';', env('REDIS_SENTINEL_NODE', '')),\n            'persistent' => false,\n            'read_timeout' => 30.0,\n            'auth' =>  env('REDIS_SENTINEL_PASSWORD', ''),\n        ],\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Inner Join Clause - PHP\nDESCRIPTION: Shows how to perform an inner join between two or more tables using the `join()` method. Requires specifying the table to join and the columns to match. You can join multiple tables in a single query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->join('contacts', 'users.id', '=', 'contacts.user_id')\n    ->join('orders', 'users.id', '=', 'orders.user_id')\n    ->select('users.*', 'contacts.phone', 'orders.price')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Unique Rule with Custom Column Name - PHP\nDESCRIPTION: This code snippet demonstrates how to use the `unique` validation rule with a custom column name.  It validates that the 'email' field is unique in the 'users' table, using the 'email_address' column for the check. It relies on Hyperf's validation component. No specific inputs are expected, but it assumes you have a `$data` array prepared for validation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\n'email' => 'unique:users,email_address'\n```\n\n----------------------------------------\n\nTITLE: Configuring Swoole Settings for Guzzle\nDESCRIPTION: Example of setting Swoole-specific configurations within the Guzzle client.  This allows for fine-grained control over the underlying Swoole HTTP client. The configuration overrides default settings, e.g., setting `timeout` to 10. Be aware that this configuration does not work with the Curl Guzzle client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/guzzle.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse GuzzleHttp\\Client;\nuse Hyperf\\Guzzle\\CoroutineHandler;\nuse GuzzleHttp\\HandlerStack;\n\n$client = new Client([\n    'base_uri' => 'http://127.0.0.1:8080',\n    'handler' => HandlerStack::create(new CoroutineHandler()),\n    'timeout' => 5,\n    'swoole' => [\n        'timeout' => 10,\n        'socket_buffer_size' => 1024 * 1024 * 2,\n    ],\n]);\n\n$response = $client->get('/');\n\n```\n\n----------------------------------------\n\nTITLE: Defining Required/Optional Option for a Command - PHP\nDESCRIPTION: Demonstrates how to define a required or optional option for a command using `InputOption::VALUE_REQUIRED` in the `addOption` method.  Allows the user to provide a value for the option.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addOption('name', 'N', InputOption::VALUE_REQUIRED, '姓名', 'Hyperf');\n}\n\npublic function handle()\n{\n    var_dump($this->input->getOption('name'));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Default AMQP Configuration (PHP)\nDESCRIPTION: Provides the default configuration array for the AMQP component. This configuration includes settings for the host, port, user, password, vhost, concurrency limits, pool connections, and various AMQP parameters like timeout, heartbeat, and keepalive.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'enable' => true,\n    'default' => [\n        'host' => 'localhost',\n        'port' => 5672,\n        'user' => 'guest',\n        'password' => 'guest',\n        'vhost' => '/',\n        'concurrent' => [\n            'limit' => 1,\n        ],\n        'pool' => [\n            'connections' => 1,\n        ],\n        'params' => [\n            'insist' => false,\n            'login_method' => 'AMQPLAIN',\n            'login_response' => null,\n            'locale' => 'en_US',\n            'connection_timeout' => 3.0,\n            // 尽量保持是 heartbeat 数值的两倍\n            'read_write_timeout' => 6.0,\n            'context' => null,\n            'keepalive' => false,\n            // 尽量保证每个消息的消费时间小于心跳时间\n            'heartbeat' => 3,\n            'close_on_destruct' => false,\n        ],\n    ],\n    'pool2' => [\n        ...\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Date Validation After Field\nDESCRIPTION: The `after:date` rule validates that the field under validation is a value after a given date. The date will be passed into the PHP `strtotime` function. This snippet shows an example using another field for comparison.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n'finish_date' => 'required|date|after:start_date'\n```\n\n----------------------------------------\n\nTITLE: Configuring QOS for AMQP Consumer\nDESCRIPTION: Demonstrates how to configure Quality of Service (QOS) settings for an AMQP consumer in Hyperf. It defines properties like `prefetch_size`, `prefetch_count`, and `global` to control the number of messages prefetched and processed concurrently.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/amqp.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Amqp\\Consumers;\n\nuse Hyperf\\Amqp\\Annotation\\Consumer;\nuse Hyperf\\Amqp\\Message\\ConsumerMessage;\nuse Hyperf\\Amqp\\Result;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n#[Consumer(exchange: \"hyperf\", routingKey: \"hyperf\", queue: \"hyperf\", nums: 1)]\nclass DemoConsumer extends ConsumerMessage\n{\n    protected ?array $qos = [\n        // AMQP 預設並沒有實現此配置。\n        'prefetch_size' => 0,\n        // 同一個消費者，最高同時可以處理的訊息數。\n        'prefetch_count' => 30,\n        // 因為 Hyperf 預設一個 Channel 只消費一個 佇列，所以 global 設定為 true/false 效果是一樣的。\n        'global' => false,\n    ];\n    \n    public function consumeMessage($data, AMQPMessage $message): Result\n    {\n        print_r($data);\n        return Result::ACK;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Publishing DTM-Client Configuration in Hyperf\nDESCRIPTION: This command publishes the default configuration file for DTM-Client within a Hyperf project. It copies the configuration file from the vendor directory to the config/autoload directory, making it customizable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/distributed-transaction.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish dtm/dtm-client\n```\n\n----------------------------------------\n\nTITLE: Simplified Parallel Usage (PHP)\nDESCRIPTION: Illustrates a simplified way to run coroutines concurrently using the `parallel` function.  The `parallel` function executes an array of callables concurrently and returns the results.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/coroutine.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Coroutine\\Coroutine;\n\n// 傳遞的數組參數您也可以帶上 key 便於區分子協程，返回的結果也會根據 key 返回對應的結果\n$result = parallel([\n    function () {\n        sleep(1);\n        return Coroutine::id();\n    },\n    function () {\n        sleep(1);\n        return Coroutine::id();\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Generation Options (Hyperf)\nDESCRIPTION: This configuration array defines the default options for the `gen:model` command.  It allows customizing the model path, force casting, inheritance, fillable refresh, table mapping, ignoring tables, adding comments, and specifying property case. The configuration is located within the `databases.{pool}.commands.gen:model` section.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/gen.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Database\\Commands\\ModelOption;\n\nreturn [\n    'default' => [\n        // Ignore other configurations\n        'commands' => [\n            'gen:model' => [\n                'path' => 'app/Model',\n                'force_casts' => true,\n                'inheritance' => 'Model',\n                'uses' => '',\n                'refresh_fillable' => true,\n                'table_mapping' => [],\n                'with_comments' => true,\n                'property_case' => ModelOption::PROPERTY_SNAKE_CASE,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Validating Array Input\nDESCRIPTION: Demonstrates how to validate array input fields. The example validates that the 'photos.profile' field is required and is an image, useful for validating nested form inputs.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_44\n\nLANGUAGE: PHP\nCODE:\n```\n$validator = $this->validationFactory->make($request->all(), [\n    'photos.profile' => 'required|image',\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing Tencent Cloud COS Adapter (Flysystem v3.0)\nDESCRIPTION: Installs the Tencent Cloud COS adapter for Flysystem v3.0.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/filesystem.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-cos:^5.0\"\n```\n\n----------------------------------------\n\nTITLE: Initiating an RPC Call in Hyperf\nDESCRIPTION: This code snippet shows how to initiate an RPC call using the `Hyperf\\Amqp\\RpcClient` in Hyperf. It retrieves the `RpcClient` from the application context and calls the `call` method with a `DynamicRpcMessage` object, specifying the exchange, routing key, and message data.  It demonstrates how to make an AMQP RPC call and get the response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/amqp.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Amqp\\Message\\DynamicRpcMessage;\nuse Hyperf\\Amqp\\RpcClient;\nuse Hyperf\\Context\\ApplicationContext;\n\n$rpcClient = ApplicationContext::getContainer()->get(RpcClient::class);\n// 在 DynamicRpcMessage 上設定與 Consumer 一致的 Exchange 和 RoutingKey\n$result = $rpcClient->call(new DynamicRpcMessage('hyperf', 'hyperf', ['message' => 'Hello Hyperf'])); \n\n// $result:\n// array(1) {\n//     [\"message\"]=>\n//     string(18) \"Reply:Hello Hyperf\"\n// }\n\n```\n\n----------------------------------------\n\nTITLE: Putting XML data into EasyWeChat Request in Hyperf\nDESCRIPTION: This code snippet demonstrates how to create a Symfony Request object from a Hyperf request, incorporating XML data. It retrieves parameters from the Hyperf request (GET, POST, cookies, files, server variables), extracts XML data, and constructs a Symfony Request, then it rebinds the request to the EasyWechat application. This is required because EasyWeChat expects a Symfony Request object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/sdks/wechat.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Symfony\\Component\\HttpFoundation\\HeaderBag;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n$get = $this->request->getQueryParams();\n$post = $this->request->getParsedBody();\n$cookie = $this->request->getCookieParams();\n$uploadFiles = $this->request->getUploadedFiles() ?? [];\n$server = $this->request->getServerParams();\n$xml = $this->request->getBody()->getContents();\n$files = [];\n/** @var \\Hyperf\\HttpMessage\\Upload\\UploadedFile $v */\nforeach ($uploadFiles as $k => $v) {\n    $files[$k] = $v->toArray();\n}\n$request = new Request($get, $post, [], $cookie, $files, $server, $xml);\n$request->headers = new HeaderBag($this->request->getHeaders());\n$app->rebind('request', $request);\n// Do something...\n\n```\n\n----------------------------------------\n\nTITLE: Generating Delay Consumer\nDESCRIPTION: This command uses the Hyperf CLI to create a new AMQP consumer class named `DelayDirectConsumer` for consuming delayed messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/amqp.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:amqp-consumer DelayDirectConsumer\n```\n\n----------------------------------------\n\nTITLE: Custom Async Queue Consumer Process\nDESCRIPTION: Defines a custom asynchronous queue consumer process using annotations.  This allows for custom process management, such as for routing messages to different queues.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\AsyncQueue\\Process\\ConsumerProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process(name: \"async-queue\")]\nclass AsyncQueueConsumer extends ConsumerProcess\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Consul ACL Token via Header\nDESCRIPTION: Demonstrates how to add a Consul ACL token by including it in the header of the HTTP request. The token is added to the 'X-Consul-Token' header.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/consul.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Consul\\KV;\nuse Hyperf\\Guzzle\\ClientFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n$clientFactory = $container->get(ClientFactory::class);\n\n$consulServer = 'http://127.0.0.1:8500';\n$kv = new KV(function () use ($clientFactory, $consulServer) {\n    return $clientFactory->create([\n        'base_uri' => $consulServer,\n        'headers' => [\n            'X-Consul-Token' => 'your-token'\n        ],\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Zipkin Tracer\nDESCRIPTION: This configuration defines the specific settings for the Zipkin tracer. It includes the application name, IPv4/IPv6 addresses, port, endpoint URL, timeout, and sampler. The sampler determines whether a particular request should be traced.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tracer.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Zipkin\\Samplers\\BinarySampler;\n\nreturn [\n    // 選擇默認的 Tracer\n    'default' => env('TRACER_DRIVER', 'zipkin'),\n\n    // 這裏的代碼演示不對 enable 內的配置進行展開\n    'enable' => [],\n\n    'tracer' => [\n        // Zipkin 驅動配置\n        'zipkin' => [\n            // 當前應用的配置\n            'app' => [\n                'name' => env('APP_NAME', 'skeleton'),\n                // 如果 ipv6 和 ipv6 為空組件會自動從 Server 中檢測\n                'ipv4' => '127.0.0.1',\n                'ipv6' => null,\n                'port' => 9501,\n            ],\n            'driver' => \\Hyperf\\Tracer\\Adapter\\ZipkinTracerFactory::class,\n            'options' => [\n                // Zipkin 服務的 endpoint 地址\n                'endpoint_url' => env('ZIPKIN_ENDPOINT_URL', 'http://localhost:9411/api/v2/spans'),\n                // 請求超時秒數\n                'timeout' => env('ZIPKIN_TIMEOUT', 1),\n            ],\n            // 採樣器，默認為所有請求的都追蹤\n            'sampler' => BinarySampler::createAsAlwaysSample(),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Handle HTTP Requests in WebSocket Service - PHP\nDESCRIPTION: This configuration snippet shows how to handle HTTP requests within a WebSocket service by adding the `Hyperf\\HttpServer\\Server::class` onRequest method to the WebSocket server's callbacks. This requires defining `HttpServer` as a dependency and then referencing that dependency in the `server.php` configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/websocket-server.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'HttpServer' => Hyperf\\HttpServer\\Server::class,\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\nuse Hyperf\\Server\\Server;\n\nreturn [\n    'mode' => SWOOLE_BASE,\n    'servers' => [\n        [\n            'name' => 'ws',\n            'type' => Server::SERVER_WEBSOCKET,\n            'host' => '0.0.0.0',\n            'port' => 9502,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => ['HttpServer', 'onRequest'],\n                Event::ON_HAND_SHAKE => [Hyperf\\WebSocketServer\\Server::class, 'onHandShake'],\n                Event::ON_MESSAGE => [Hyperf\\WebSocketServer\\Server::class, 'onMessage'],\n                Event::ON_CLOSE => [Hyperf\\WebSocketServer\\Server::class, 'onClose'],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Hyperf Nano Routing Example\nDESCRIPTION: Demonstrates how to define routes in a Hyperf Nano application, including route groups, parameter constraints, and wildcard parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nano.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addGroup('/nano', function () use ($app) {\n    $app->addRoute(['GET', 'POST'], '/{id:\\d+}', function($id) {\n        return '/nano/'.$id;\n    });\n    $app->put('/{name:.+}', function($name) {\n        return '/nano/'.$name;\n    });\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Install Socket.io Server\nDESCRIPTION: Installs the hyperf/socketio-server package using Composer. This package provides Socket.io functionality within the Hyperf framework.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/socketio-server.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/socketio-server\n```\n\n----------------------------------------\n\nTITLE: Getting a Column of Values - PHP\nDESCRIPTION: Shows how to retrieve a collection of values from a single column using the `pluck()` method.  It can retrieve either a single column or a column as values with another column as keys. Requires the `Hyperf\\DbConnection\\Db` facade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$names = Db::table('user')->pluck('name');\n\nforeach ($names as $name) {\n    echo $name;\n}\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$roles = Db::table('roles')->pluck('title', 'name');\n\nforeach ($roles as $name => $title) {\n    echo $title;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Validate Route Parameter with Regular Expression in Hyperf\nDESCRIPTION: This snippet demonstrates how to validate route parameters using regular expressions in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/router.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\HttpServer\\Router\\Router;\n\n// 可以匹配 /user/42, 但不能匹配 /user/xyz\nRouter::addRoute('GET', '/user/{id:\\\\d+}', 'handler');\n\n// 可以匹配 /user/foobar, 但不能匹配 /user/foo/bar\nRouter::addRoute('GET', '/user/{name}', 'handler');\n\n// 也可以匹配 /user/foo/bar as well\nRouter::addRoute('GET', '/user/{name:.+}', 'handler');\n\n// 這個路由\nRouter::addRoute('GET', '/user/{id:\\\\d+}[/{name}]', 'handler');\n// 等同於以下的兩個路由\nRouter::addRoute('GET', '/user/{id:\\\\d+}', 'handler');\nRouter::addRoute('GET', '/user/{id:\\\\d+}/{name}', 'handler');\n\n// 多個可選的嵌套也是允許的\nRouter::addRoute('GET', '/user[/{id:\\\\d+}[/{name}]]', 'handler');\n\n// 這是一條無效的路由, 因為可選部分只能出現在最後\nRouter::addRoute('GET', '/user[/{id:\\\\d+}]/{name}', 'handler');\n```\n\n----------------------------------------\n\nTITLE: AMQP Delay Producer Implementation (PHP)\nDESCRIPTION: Defines an AMQP producer class named `DelayDirectProducer` for delayed messages, extending `ProducerMessage` and utilizing `ProducerDelayedMessageTrait`. It sets the exchange, type (DIRECT), and routing key for sending delayed messages. Requires `ProducerDelayedMessageTrait` to be defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Amqp\\Producer;\n\nuse Hyperf\\Amqp\\Annotation\\Producer;\nuse Hyperf\\Amqp\\Message\\ProducerDelayedMessageTrait;\nuse Hyperf\\Amqp\\Message\\ProducerMessage;\nuse Hyperf\\Amqp\\Message\\Type;\n\n#[Producer]\nclass DelayDirectProducer extends ProducerMessage\n{\n    use ProducerDelayedMessageTrait;\n\n    protected string $exchange = 'ext.hyperf.delay';\n\n    protected Type|string $type = Type::DIRECT;\n\n    protected array|string $routingKey = '';\n\n    public function __construct($data)\n    {\n        $this->payload = $data;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Advanced Database Configuration with PDO Options in Hyperf\nDESCRIPTION: This snippet shows advanced database configuration with PDO options. It extends the basic configuration to include PDO attributes like `ATTR_CASE`, `ATTR_ERRMODE`, `ATTR_ORACLE_NULLS`, `ATTR_STRINGIFY_FETCHES`, and `ATTR_EMULATE_PREPARES`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/quick-start.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER','mysql'),\n        'host' => env('DB_HOST','localhost'),\n        'port' => env('DB_PORT', 3306),\n        'database' => env('DB_DATABASE','hyperf'),\n        'username' => env('DB_USERNAME','root'),\n        'password' => env('DB_PASSWORD',''),\n        'charset' => env('DB_CHARSET','utf8'),\n        'collation' => env('DB_COLLATION','utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX',''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('DB_MAX_IDLE_TIME', 60),\n        ],\n        'options' => [\n            // Framework default configuration\n            PDO::ATTR_CASE => PDO::CASE_NATURAL,\n            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n            PDO::ATTR_ORACLE_NULLS => PDO::NULL_NATURAL,\n            PDO::ATTR_STRINGIFY_FETCHES => false,\n            // If you are using a non-native MySQL or a DB provided by a cloud vendor, such as a database/analytic instance that does not support the MySQL prepare protocol, set this to true\n            PDO::ATTR_EMULATE_PREPARES => false,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Connection Pool (PHP)\nDESCRIPTION: This code demonstrates how to define a custom connection pool by extending the `Hyperf\\Pool\\Pool` class and implementing the `createConnection` method. The `createConnection` method should return an object that implements the `Hyperf\\Contract\\ConnectionInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/pool.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Pool;\n\nuse Hyperf\\Contract\\ConnectionInterface;\nuse Hyperf\\Pool\\Pool;\n\nclass MyConnectionPool extends Pool\n{\n    public function createConnection(): ConnectionInterface\n    {\n        return new MyConnection();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Signal Handler (TermSignalHandler)\nDESCRIPTION: This PHP code defines a signal handler class, TermSignalHandler, that listens for the SIGTERM signal in the Worker process and prints the signal value when received. It uses the Hyperf\\Signal\\Annotation\\Signal annotation to register the handler and implements the SignalHandlerInterface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/signal.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Signal;\n\nuse Hyperf\\Signal\\Annotation\\Signal;\nuse Hyperf\\Signal\\SignalHandlerInterface;\n\n#[Signal]\nclass TermSignalHandler implements SignalHandlerInterface\n{\n    public function listen(): array\n    {\n        return [\n            [SignalHandlerInterface::WORKER, SIGTERM],\n        ];\n    }\n\n    public function handle(int $signal): void\n    {\n        var_dump($signal);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Not In Array Validation\nDESCRIPTION: This snippet demonstrates how to construct the `not_in` validation rule using the `Rule::notIn` method to check that a field value is not in the given list.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($data, [\n    'toppings' => [\n        'required',\n        Rule::notIn(['sprinkles','cherries']),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Simple Where Statement - Hyperf PHP\nDESCRIPTION: Illustrates the basic usage of the `where` method in Hyperf to construct a query with a where clause. The example shows how to compare a column value to a specific value using different operators.  It shows both the explicit operator and the shorthand notation for equality.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->where('gender', '=', 1)->get();\n\n$users = Db::table('user')->where('gender', 1)->get();\n\n$users = Db::table('users')->where('gender', '>=', 0)->get();\n\n$users = Db::table('users')->where('gender', '<>', 1)->get();\n\n$users = Db::table('users')->where('name', 'like', 'T%')->get();\n```\n\n----------------------------------------\n\nTITLE: Custom Metric Usage in Controller\nDESCRIPTION: Demonstrates injecting the `MetricFactoryInterface` to collect custom business metrics, such as the number of orders created. Uses the `makeCounter` method to create a counter and increment it with the order type as a label.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse App\\Model\\Order;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Metric\\Contract\\MetricFactoryInterface;\n\nclass IndexController extends AbstractController\n{\n    #[Inject]\n    private MetricFactoryInterface $metricFactory;\n\n    public function create(Order $order)\n    {\n        $counter = $this->metricFactory->makeCounter('order_created', ['order_type']);\n        $counter->with($order->type)->add(1);\n        // 訂單邏輯...\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Models\nDESCRIPTION: This snippet shows how to retrieve multiple models using the `find()` method with an array of primary keys. This returns a `Hyperf\\Database\\Model\\Collection` instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$users = User::query()->find([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer JSON for ConfigProvider JSON\nDESCRIPTION: This code snippet shows how to configure the `composer.json` file of a component to tell Hyperf to load the ConfigProvider class.  The `extra.hyperf.config` property specifies the fully qualified class name of the ConfigProvider. After adding this configuration, you need to run `composer install` or `composer update` or `composer dump-autoload`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/component-guide/configprovider.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"hyperf/foo\",\n    \"require\": {\n        \"php\": \">=7.3\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Hyperf\\\\Foo\\\\\": \"src/\"\n        }\n    },\n    \"extra\": {\n        \"hyperf\": {\n            \"config\": \"Hyperf\\\\Foo\\\\ConfigProvider\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Command Argument (PHP)\nDESCRIPTION: Defines a command argument named `name` as optional and retrieves its value within the `handle()` method. Demonstrates how to define and access command-line arguments. It utilizes Symfony's InputArgument class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    /**\n     * 執行的命令行\n     */\n    protected ?string $name = 'foo:hello';\n\n    public function handle()\n    {\n        // 從 $input 獲取 name 參數\n        $argument = $this->input->getArgument('name') ?? 'World';\n        $this->line('Hello ' . $argument, 'info');\n    }\n\n    protected function getArguments()\n    {\n        return [\n            ['name', InputArgument::OPTIONAL, '這裏是對這個參數的解釋']\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Local Sid Provider Configuration\nDESCRIPTION: Configures the Socket.io server to use the LocalSidProvider, which uses the Fd (file descriptor) as the SocketID (`sid`). Requires `Hyperf\\SocketIOServer\\SidProvider\\LocalSidProvider`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/socketio-server.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\SocketIOServer\\SidProvider\\SidProviderInterface::class => \\Hyperf\\SocketIOServer\\SidProvider\\LocalSidProvider::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie in Hyperf Response\nDESCRIPTION: This snippet illustrates how to set a cookie in a Hyperf response using the `withCookie()` method of the `ResponseInterface`. It creates a `Cookie` object and adds it to the response. The `withContent()` method is used to set the response body.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/response.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\nuse Hyperf\\HttpMessage\\Cookie\\Cookie;\n\nclass IndexController\n{\n    public function cookie(ResponseInterface $response): Psr7ResponseInterface\n    {\n        $cookie = new Cookie('key', 'value');\n        return $response->withCookie($cookie)->withContent('Hello Hyperf.');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Ordering query results in Hyperf using orderBy\nDESCRIPTION: This snippet demonstrates how to order query results using the `orderBy` method. It takes the field to sort by and the sort direction ('asc' or 'desc') as arguments.  The example sorts users by 'name' in descending order.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->orderBy('name', 'desc')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Define Placeholders in Translation Strings\nDESCRIPTION: Defines placeholders within language strings to allow for dynamic content insertion during translation. Placeholders are prefixed with a colon (:) and can be replaced with values passed as the second parameter to the translation function.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/translation.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// storage/languages/en/messages.php\n\nreturn [\n    'welcome' => 'Welcome :name',\n];\n```\n\n----------------------------------------\n\nTITLE: Deleting Cached Data with Model Query - PHP\nDESCRIPTION: This example demonstrates how to delete user data from the database using `Model::query(true)`, which automatically removes the corresponding cache data, ensuring data consistency.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model-cache.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// 从数据库删除用户数据，框架会自动删除对应的缓存数据\nUser::query(true)->where('gender', '>', 1)->delete();\n```\n\n----------------------------------------\n\nTITLE: Registering Socket.io Namespace in Router\nDESCRIPTION: Registers a Socket.io namespace using the `SocketIORouter::addNamespace` method. This provides an alternative to using the `#[SocketIONamespace]` annotation for mapping controllers to namespaces. Requires `Hyperf\\SocketIOServer\\Collector\\SocketIORouter`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/socketio-server.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\SocketIOServer\\Collector\\SocketIORouter;\nuse App\\Controller\\WebSocketController;\nSocketIORouter::addNamespace('/xxx' , WebSocketController::class);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Circuit Breaker Handler in Hyperf\nDESCRIPTION: This code snippet shows how to implement a custom circuit breaker handler in Hyperf by extending `AbstractHandler`. It defines a `DemoHandler` that can implement custom logic for determining when to break the circuit. This example shows a basic structure, the `is_break()` function is not defined in the context.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/circuit-breaker.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace Hyperf\\CircuitBreaker\\Handler;\n\nuse Hyperf\\CircuitBreaker\\Annotation\\CircuitBreaker as Annotation;\nuse Hyperf\\CircuitBreaker\\CircuitBreaker;\nuse Hyperf\\CircuitBreaker\\Exception\\TimeoutException;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\nclass DemoHandler extends AbstractHandler\n{\n    const DEFAULT_TIMEOUT = 5;\n\n    protected function process(ProceedingJoinPoint $proceedingJoinPoint, CircuitBreaker $breaker, Annotation $annotation)\n    {\n        $result = $proceedingJoinPoint->process();\n\n        if (is_break()) {\n            throw new TimeoutException('timeout, use ' . $use . 's', $result);\n        }\n\n        return $result;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running Migrations in Hyperf\nDESCRIPTION: This command executes all pending migration files in the Hyperf project.  It requires the Hyperf framework to be properly configured and the database connection settings to be correct. The `bin/hyperf.php` script must also be executable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate\n```\n\n----------------------------------------\n\nTITLE: Unique Rule Ignoring Model Instance - PHP\nDESCRIPTION: This snippet simplifies the previous example by passing the entire model instance to the `ignore()` method. The component automatically extracts the primary key value from the model.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_41\n\nLANGUAGE: PHP\nCODE:\n```\nRule::unique('users')->ignore($user)\n```\n\n----------------------------------------\n\nTITLE: Get Simple Cache Instance\nDESCRIPTION: Retrieves an instance of `Psr\\SimpleCache\\CacheInterface` from the dependency injection container. This allows for using the PSR-16 specification within Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/cache.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$cache = $container->get(\\Psr\\SimpleCache\\CacheInterface::class);\n```\n\n----------------------------------------\n\nTITLE: Define JSON RPC TCP Server\nDESCRIPTION: Defines a JSON RPC TCP server in the server.php configuration file.  This server is configured to handle requests using the \\Hyperf\\JsonRpc\\TcpServer::class onReceive handler and uses EOF splitting.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/json-rpc.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 這裏省略了該文件的其它配置\n    'servers' => [\n        [\n            'name' => 'jsonrpc',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9503,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_RECEIVE => [\\Hyperf\\JsonRpc\\TcpServer::class, 'onReceive'],\n            ],\n            'settings' => [\n                'open_eof_split' => true,\n                'package_eof' => \"\\r\\n\",\n                'package_max_length' => 1024 * 1024 * 2,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Paginator Usage in Hyperf Controller\nDESCRIPTION: Demonstrates basic pagination usage within a Hyperf controller. It retrieves the current page and per-page values from the request, performs a data query (using a Collection in this example), and returns a Paginator instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/paginator.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\Paginator\\Paginator;\nuse Hyperf\\Collection\\Collection;\n\n#[AutoController]\nclass UserController\n{\n    public function index(RequestInterface $request)\n    {\n        $currentPage = (int) $request->input('page', 1);\n        $perPage = (int) $request->input('per_page', 2);\n\n        // Perform query according to $currentPage and $perPage. The Collection type is used here.\n        $collection = new Collection([\n            ['id' => 1, 'name' => 'Tom'],\n            ['id' => 2, 'name' => 'Sam'],\n            ['id' => 3, 'name' => 'Tim'],\n            ['id' => 4, 'name' => 'Joe'],\n        ]);\n\n        $users = array_values($collection->forPage($currentPage, $perPage)->toArray());\n\n        return new Paginator($users, $perPage, $currentPage);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Product Type PHP\nDESCRIPTION: This PHP code adds a query to the GraphQL controller that returns a Product type. It uses the #[Query] annotation to expose the product method as a GraphQL query. The method takes a name and price as arguments and returns a new Product object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/graphql.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\Product;\nuse Hyperf\\GraphQL\\Annotation\\Query;\n\n#[Query]\npublic function product(string $name, float $price): Product\n{\n    return new Product($name, $price);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Conditions for Process Startup - Hyperf PHP\nDESCRIPTION: This code snippet illustrates how to add a conditional check to determine if a custom process should start in Hyperf. By overriding the isEnable method, the process can be started based on specific configurations or conditions. Returns false to prevent startup.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/process.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process(name: \"foo_process\")]\nclass FooProcess extends AbstractProcess\n{\n    public function handle(): void\n    {\n        // Your code...\n    }\n\n    public function isEnable($server): bool\n    {\n        // Do not start with service startup\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Translation Keys in Enum Messages for Internationalization in PHP\nDESCRIPTION: This code snippet illustrates the use of translation keys within enum definitions for internationalization. The `@Message` annotation now references a translation key (`params.invalid`) instead of a hardcoded string. This allows the error message to be translated based on the current locale. The `$message` variable then calls the `getMessage` method with an array containing the `param` value, which will replace the `:param` placeholder in the translated string.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/constants.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Constants\\Annotation\\Constants;\nuse Hyperf\\Constants\\Annotation\\Message;\nuse Hyperf\\Constants\\EnumConstantsTrait;\n\n#[Constants]\nenum ErrorCode: int\n{\n\n    #[Message(\"params.invalid\")]\n    case PARAMS_INVALID = 1000;\n}\n\n$message = ErrorCode::SERVER_ERROR->getMessage(['param' => 'user_id']);\n\n```\n\n----------------------------------------\n\nTITLE: Advanced Join Statements with Closures in Hyperf\nDESCRIPTION: Explains how to use a closure with the `join()` method to define more complex join conditions, including `orOn` clauses and `where` conditions within the join. It shows how to create flexible and customized joins.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->join('contacts', function ($join) {\n        $join->on('users.id', '=', 'contacts.user_id')->orOn(...);\n    })\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->join('contacts', function ($join) {\n        $join->on('users.id', '=', 'contacts.user_id')\n                ->where('contacts.user_id', '>', 5);\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Adding Top-Level Metadata (PHP)\nDESCRIPTION: This PHP snippet shows how to add top-level metadata to a resource collection using the `with` method.  The 'meta' array defined in the `with` method will be included in the root of the response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n\n    public function with() : array\n    {\n        return [\n            'meta' => [\n                'key' => 'value',\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cacheable Annotation Example\nDESCRIPTION: This demonstrates the usage of the Cacheable annotation to cache the result of the user method. The prefix, TTL, and listener are configured to manage the cache.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/cache.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass UserService\n{\n    #[Cacheable(prefix: \"user\", ttl: 7200, listener: \"USER_CACHE\")]\n    public function user(int $id): array\n    {\n        $user = User::query()->find($id);\n\n        return [\n            'user' => $user->toArray(),\n            'uuid' => $this->unique(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Command by Constructor (PHP)\nDESCRIPTION: This code snippet defines a command named `foo:hello` within the constructor of the command class. The command extends `HyperfCommand` and uses the `#[Command]` annotation. This approach is an alternative to using the `$name` property.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    public function __construct()\n    {\n        parent::__construct('foo:hello');    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Uploaded File\nDESCRIPTION: Explains how to retrieve an uploaded file using the `file(string $key, $default): ?Hyperf\\HttpMessage\\Upload\\UploadedFile` method. Returns an instance of `Hyperf\\HttpMessage\\Upload\\UploadedFile` if the file exists, otherwise returns null.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/request.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// 存在则返回一个 Hyperf\\HttpMessage\\Upload\\UploadedFile 对象，不存在则返回 null\n$file = $request->file('photo');\n```\n\n----------------------------------------\n\nTITLE: Composer Autoload Configuration for gRPC\nDESCRIPTION: This composer.json snippet configures autoloading for the generated gRPC code. It maps the namespaces 'GPBMetadata\\' and 'Grpc\\' to the respective directories 'grpc/GPBMetadata' and 'grpc/Grpc'. Adjust the paths according to your project structure and proto package settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/grpc.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n    \"psr-4\": {\n        \"App\\\\\": \"app/\",\n        \"GPBMetadata\\\\\": \"grpc/GPBMetadata\",\n        \"Grpc\\\\\": \"grpc/Grpc\"\n    },\n    \"files\": [\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Freshening Migrations (bash)\nDESCRIPTION: This command drops all tables from the database and then re-executes all migrations. The `--seed` option additionally runs the database seeders. It provides a clean and efficient way to rebuild the entire database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:fresh\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:fresh --seed\n```\n\n----------------------------------------\n\nTITLE: Setting Swoole Runtime Hook Flags in Hyperf\nDESCRIPTION: Shows how to modify the Swoole Runtime Hook level for the entire project. This is useful for enabling CURL coroutines, especially in older Swoole versions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/coroutine.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n! defined('SWOOLE_HOOK_FLAGS') && define('SWOOLE_HOOK_FLAGS', SWOOLE_HOOK_ALL | SWOOLE_HOOK_CURL);\n```\n\n----------------------------------------\n\nTITLE: Define Command Parameter (PHP)\nDESCRIPTION: This code defines a command `foo:hello` with an optional `name` parameter. It retrieves the `name` argument using `$this->input->getArgument('name')` and outputs a greeting to the console. The `getArguments` method defines the parameter with a description.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    /**\n     * The command\n     *\n     * @var string\n     */\n    protected ?string $name = 'foo:hello';\n\n    public function handle()\n    {\n        // Get the name argument from $input\n        $argument = $this->input->getArgument('name') ?? 'World';\n        $this->line('Hello ' . $argument, 'info');\n    }\n    \n    protected function getArguments()\n    {\n        return [\n            ['name', InputArgument::OPTIONAL, 'Here is an explanation of this parameter']\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route Groups in Hyperf\nDESCRIPTION: This snippet demonstrates how to define a group of routes that share a common prefix using `Router::addGroup`.  In this example, all routes defined within the group will have the `/user/` prefix.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/router.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nRouter::addGroup('/user/',function (){\n    Router::get('index','App\\Controller\\UserController@index');\n    Router::post('store','App\\Controller\\UserController@store');\n    Router::get('update','App\\Controller\\UserController@update');\n    Router::post('delete','App\\Controller\\UserController@delete');\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Record to the Search Index\nDESCRIPTION: Demonstrates how to add a new record to the search index by saving a model instance. When the `Searchable` trait is used, saving a model triggers automatic indexing in Elasticsearch.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$order = new App\\Order;\n\n    // ...\n\n    $order->save();\n```\n\n----------------------------------------\n\nTITLE: Generate AMQP Producer (Bash)\nDESCRIPTION: Generates an AMQP producer class using the Hyperf CLI tool.  This command creates a skeleton class that can be customized to send messages to a specific exchange and routing key.  Requires hyperf cli to be installed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:amqp-producer DemoProducer\n```\n\n----------------------------------------\n\nTITLE: Running a Command from Another Command - PHP\nDESCRIPTION: Executes another command from within a command's `handle` method using the `call` method. This allows chaining commands and reusing logic. Requires Hyperf Command component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\nuse Psr\\Container\\ContainerInterface;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    protected ContainerInterface $container;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n\n        parent::__construct('foo');\n    }\n\n    public function configure()\n    {\n        parent::configure();\n        $this->setDescription('foo command');\n    }\n\n    public function handle()\n    {\n        $this->call('bar', [\n            '--foo' => 'foo'\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Logger Configuration\nDESCRIPTION: This code demonstrates how to configure different log formats based on the environment. In development, logs are output to stdout with a detailed line format. In non-development environments, logs are formatted as JSON for easier parsing by log aggregation services.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/logger.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/logger.php\n$appEnv = env('APP_ENV', 'dev');\nif ($appEnv == 'dev') {\n    $formatter = [\n        'class' => \\Monolog\\Formatter\\LineFormatter::class,\n        'constructor' => [\n            'format' => \"||%datetime%||%channel%||%level_name%||%message%||%context%||%extra%\\n\",\n            'allowInlineLineBreaks' => true,\n            'includeStacktraces' => true,\n        ],\n    ];\n} else {\n    $formatter = [\n        'class' => \\Monolog\\Formatter\\JsonFormatter::class,\n        'constructor' => [],\n    ];\n}\n\nreturn [\n    'default' => [\n        'handler' => [\n            'class' => \\Monolog\\Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => 'php://stdout',\n                'level' => \\Monolog\\Level::Info,\n            ],\n        ],\n        'formatter' => $formatter,\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Migrations in Hyperf\nDESCRIPTION: This command rolls back the last executed migration. It effectively undoes the changes made by the most recent migration file. Requires Hyperf framework and executable `bin/hyperf.php` script.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:rollback\n```\n\n----------------------------------------\n\nTITLE: Custom Consumer Process Definition\nDESCRIPTION: Defines a custom consumer process by extending `ConsumerProcess` and using the `Process` annotation to register it. It inherits the functionality of `ConsumerProcess` and sets a process name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/async-queue.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\AsyncQueue\\Process\\ConsumerProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process(name: \"async-queue\")]\nclass AsyncQueueConsumer extends ConsumerProcess\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Database Connection Option in Hyperf Migration\nDESCRIPTION: This code demonstrates how to specify a different database connection for a migration by overriding the `$connection` property.  The value of `$connection` should correspond to a key defined in `config/autoload/databases.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Database\\Schema\\Schema;\nuse Hyperf\\Database\\Schema\\Blueprint;\nuse Hyperf\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    // 這裏對應 config/autoload/databases.php 內的連接 key\n    protected $connection = 'foo';\n    \n    public function up(): void\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->timestamps();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Process Class - Hyperf (PHP)\nDESCRIPTION: Defines a custom process class by extending `Hyperf\\Process\\AbstractProcess` and implementing the `handle()` method, which contains the logic to be executed by the process.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/process.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\n\nclass FooProcess extends AbstractProcess\n{\n    public function handle(): void\n    {\n        // 您的代码 ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Query for the Product Type\nDESCRIPTION: This code demonstrates how to add a query to the GraphQL controller that returns a Product object.  It leverages the Product type defined previously.  This query is annotated with `@Query` making it discoverable to the GraphQL endpoint.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/graphql.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\Product;\nuse Hyperf\\GraphQL\\Annotation\\Query;\n\n#[Query]\npublic function product(string $name, float $price): Product\n{\n    return new Product($name, $price);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Blade If Statements\nDESCRIPTION: This Blade template demonstrates how to use `@if`, `@elseif`, `@else`, and `@endif` directives to create conditional statements, similar to PHP's `if` statements.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_13\n\nLANGUAGE: blade\nCODE:\n```\n@if (count($records) === 1)\n    I have one record!\n@elseif (count($records)> 1)\n    I have multiple records!\n@else\n    I don't have any records!\n@endif\n```\n\n----------------------------------------\n\nTITLE: Modifying Original Method Execution in Hyperf\nDESCRIPTION: This code showcases different ways to interact with the original method execution within an aspect. It demonstrates how to get the reflection of the method, access arguments, obtain the original class instance, retrieve annotation metadata, call the original method directly or even completely override the original method's functionality.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/aop.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Aspect;\n\nuse App\\Service\\SomeClass;\nuse App\\Annotation\\SomeAnnotation;\nuse Hyperf\\Di\\Annotation\\Aspect;\nuse Hyperf\\Di\\Aop\\AbstractAspect;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\n#[Aspect]\nclass FooAspect extends AbstractAspect\n{\n    public array $classes = [\n        SomeClass::class,\n        'App\\Service\\SomeClass::someMethod',\n        'App\\Service\\SomeClass::*Method',\n    ];\n\n    public array $annotations = [\n        SomeAnnotation::class,\n    ];\n\n    public function process(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        // 获取当前方法反射原型\n        /** @var \\ReflectionMethod **/\n        $reflect = $proceedingJoinPoint->getReflectMethod();\n\n        // 获取调用方法时提交的参数\n        $arguments = $proceedingJoinPoint->getArguments(); // array\n\n        // 获取原类的实例并调用原类的其他方法\n        $originalInstance = $proceedingJoinPoint->getInstance();\n        $originalInstance->yourFunction();\n\n        // 获取注解元数据\n        /** @var \\Hyperf\\Di\\Aop\\AnnotationMetadata **/\n        $metadata = $proceedingJoinPoint->getAnnotationMetadata();\n\n        // 调用不受代理类影响的原方法\n        $proceedingJoinPoint->processOriginalMethod();\n\n        // 不执行原方法，做其他操作\n        $result = date('YmdHis', time() - 86400);\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Where Statement with Array - Hyperf PHP\nDESCRIPTION: Demonstrates how to use an array of conditions within the `where` method in Hyperf. This allows you to specify multiple conditions that must all be met. Each condition is represented as an array containing the column, operator, and value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->where([\n    ['status', '=', '1'],\n    ['gender', '=', '1'],\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Exists Validation with Custom Query\nDESCRIPTION: This snippet shows how to customize the query executed by the `exists` validation rule using the `Rule` class to define the rules, specifying the validation rules in the form of an array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($data, [\n    'email' => [\n        'required',\n        Rule::exists('staff')->where(function ($query) {\n            $query->where('account_id', 1);\n        }),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Column using Schema Builder in PHP\nDESCRIPTION: This PHP code demonstrates how to delete a column from a database table using Hyperf's Schema Builder. It shows both how to delete a single column ('name') and multiple columns ('name' and 'age') from the 'users' table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nSchema::table('users', function (Blueprint $table) {\n    // Remove the name field\n    $table->dropColumn('name');\n    // Delete multiple fields\n    $table->dropColumn(['name', 'age']);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Class-Based Component - PHP\nDESCRIPTION: Defines a class-based component named `Alert` in Hyperf. The component receives `type` and `message` as parameters in its constructor and renders the `components.alert` view. The class extends `Hyperf\\ViewEngine\\Component\\Component` and defines a `render` method that returns the view.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\View\\Component;\nuse Hyperf\\ViewEngine\\Component\\Component;\nuse function Hyperf\\ViewEngine\\view;\nclass Alert extends Component\n{\n    public $type;\n    public $message;\n    public function __construct($type, $message)\n    {\n        $this->type = $type;\n        $this->message = $message;\n    }\n    public function render()\n    {\n        return view('components.alert');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Records Using Model Query Builder (PHP)\nDESCRIPTION: Adds records to the search index using the `searchable` method on a model query builder. This performs an \"update insert\" operation, updating existing records and inserting new ones. It can be used with model relations or collections.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// 使用模型查詢構造器增加...\nApp\\Order::where('price', '>', 100)->searchable();\n\n// 使用模型關係增加記錄...\n$user->orders()->searchable();\n\n// 使用集合增加記錄...\n$orders->searchable();\n```\n\n----------------------------------------\n\nTITLE: Optimizing Composer Autoloader and Generating Cache in Hyperf (Bash)\nDESCRIPTION: These commands are used during the deployment of Hyperf applications to optimize the autoloader and generate proxy classes and annotation caches. It optimizes the composer index and generates proxy classes and annotation caches to improve performance. The `composer dump-autoload -o` command optimizes the composer autoloader, while `php bin/hyperf.php` generates the necessary caches.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/important.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# 優化 Composer 索引\ncomposer dump-autoload -o\n# 生成代理類和註解緩存\nphp bin/hyperf.php\n```\n\n----------------------------------------\n\nTITLE: Using the Logger in a Hyperf Service\nDESCRIPTION: This code demonstrates how to use the Hyperf logger within a service class. It retrieves a LoggerInterface instance using LoggerFactory and logs an info message.  It uses dependency injection to get the LoggerFactory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/logger.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse Psr\\Log\\LoggerInterface;\nuse Hyperf\\Logger\\LoggerFactory;\n\nclass DemoService\n{\n\n    protected LoggerInterface $logger;\n\n    public function __construct(LoggerFactory $loggerFactory)\n    {\n        // 第一個參數對應日誌的 name, 第二個參數對應 config/autoload/logger.php 內的 key\n        $this->logger = $loggerFactory->get('log', 'default');\n    }\n\n    public function method()\n    {\n        // Do something.\n        $this->logger->info(\"Your log message.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Container Injection PHP\nDESCRIPTION: Injects the container interface into a controller.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Psr\\Container\\ContainerInterface;\n\nclass IndexController\n{\n    private ContainerInterface $container;\n    \n    // 通過在構造函數的參數上聲明參數類型完成自動注入\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Circuit Breaker Handler in Hyperf\nDESCRIPTION: This code shows how to create a custom circuit breaker handler by extending the `AbstractHandler` class. It overrides the `process` method to implement custom logic for determining whether to break the circuit, and throws a `TimeoutException` when necessary.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/circuit-breaker.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace Hyperf\\CircuitBreaker\\Handler;\n\nuse Hyperf\\CircuitBreaker\\Annotation\\CircuitBreaker as Annotation;\nuse Hyperf\\CircuitBreaker\\CircuitBreaker;\nuse Hyperf\\CircuitBreaker\\Exception\\TimeoutException;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\nclass DemoHandler extends AbstractHandler\n{\n    const DEFAULT_TIMEOUT = 5;\n\n    protected function process(ProceedingJoinPoint $proceedingJoinPoint, CircuitBreaker $breaker, Annotation $annotation)\n    {\n        $result = $proceedingJoinPoint->process();\n\n        if (is_break()) {\n            throw new TimeoutException('timeout, use ' . $use . 's', $result);\n        }\n\n        return $result;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using the WebSocket Sender in Hyperf\nDESCRIPTION: This code snippet demonstrates how to use the `Hyperf\\WebSocketServer\\Sender` to send messages and disconnect clients from an HTTP service. The `Sender` handles message delivery and disconnection across different workers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/websocket-server.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\WebSocketServer\\Sender;\nuse function Hyperf\\Coroutine\\go;\n\n#[AutoController]\nclass ServerController\n{\n    #[Inject]\n    protected Sender $sender;\n\n    public function close(int $fd)\n    {\n        go(function () use ($fd) {\n            sleep(1);\n            $this->sender->disconnect($fd);\n        });\n\n        return '';\n    }\n\n    public function send(int $fd)\n    {\n        $this->sender->push($fd, 'Hello World.');\n\n        return '';\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Check for More Pages with Paginator\nDESCRIPTION: Checks if there are more pages available after the current page. This is useful for displaying \"Next\" or \"Load More\" buttons.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/paginator.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ($paginator->hasMorePages()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Authentication Middleware in Hyperf (PHP)\nDESCRIPTION: This middleware intercepts WebSocket handshake requests to implement authentication. It checks if the request is authorized using the `isAuth` method and returns a 'Forbidden' response if not authorized. The middleware uses the container to resolve the response interface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/socketio-server.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Middleware;\n\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass WebSocketAuthMiddleware implements MiddlewareInterface\n{\n    protected ContainerInterface $container;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n    }\n\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // 虛擬碼，透過 isAuth 方法攔截握手請求並實現許可權檢查\n        if (! $this->isAuth($request)) {\n            return $this->container->get(\\Hyperf\\HttpServer\\Contract\\ResponseInterface::class)->raw('Forbidden');\n        }\n\n        return $handler->handle($request);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting a Temporary Locale\nDESCRIPTION: This code snippet demonstrates how to temporarily set the locale using the `setLocale` method of the `TranslatorInterface`. This is useful for changing the language within a specific request or coroutine lifecycle. The `#[Inject]` attribute is used for dependency injection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/translation.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Contract\\TranslatorInterface;\n\nclass FooController\n{\n    #[Inject]\n    private TranslatorInterface $translator;\n    \n    public function index()\n    {\n        // 只在當前請求或協程生命週期有效\n        $this->translator->setLocale('zh_CN');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka Configuration Array\nDESCRIPTION: This is an example of the kafka.php configuration file for the Hyperf framework. It defines various settings for connecting to and interacting with a Kafka cluster, including timeouts, bootstrap servers, producer settings, and consumer group configurations. The KafkaStrategy class is used for partition assignment strategies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/kafka.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Kafka\\Constants\\KafkaStrategy;\n\nreturn [\n    'default' => [\n        'connect_timeout' => -1,\n        'send_timeout' => -1,\n        'recv_timeout' => -1,\n        'client_id' => '',\n        'max_write_attempts' => 3,\n        'bootstrap_servers' => '127.0.0.1:9092',\n        'acks' => 0,\n        'producer_id' => -1,\n        'producer_epoch' => -1,\n        'partition_leader_epoch' => -1,\n        'interval' => 0,\n        'session_timeout' => 60,\n        'rebalance_timeout' => 60,\n        'replica_id' => -1,\n        'rack_id' => '',\n        'group_retry' => 5,\n        'group_retry_sleep' => 1,\n        'group_heartbeat' => 3,\n        'offset_retry' => 5,\n        'auto_create_topic' => true,\n        'partition_assignment_strategy' => KafkaStrategy::RANGE_ASSIGNOR,\n        'sasl' => [],\n        'ssl' => [],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Incrementing value with increment in Hyperf\nDESCRIPTION: This code demonstrates how to increment a field's value using the `increment` method in Hyperf's query builder. The example increments the 'votes' field, optionally by a specified amount, and can update other fields at the same time.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes');\n\nDb::table('users')->increment('votes', 5);\n\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes', 1, ['name' => 'John']);\n```\n\n----------------------------------------\n\nTITLE: Defining a One-to-Many Relationship in Hyperf\nDESCRIPTION: This code snippet defines a one-to-many relationship between the `User` and `Book` models in Hyperf. The `books` method in the `User` model calls the `hasMany` method to establish the relationship, using 'user_id' as the foreign key in the `Book` table and 'id' as the local key in the `User` table. Requires the `Hyperf\\DbConnection\\Model\\Model` base class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/relationship.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    public function books()\n    {\n        return $this->hasMany(Book::class, 'user_id', 'id');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enable JsonRPC Tracking\nDESCRIPTION: Enables JsonRPC link tracking by adding the `Hyperf\\Tracer\\Aspect\\JsonRpcAspect::class` to the `aspects.php` configuration file.  Requires the corresponding TraceMiddleware on the other side.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tracer.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    Hyperf\\Tracer\\Aspect\\JsonRpcAspect::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Read-Write Splitting Database Configuration in Hyperf\nDESCRIPTION: Configures read-write splitting for database connections in Hyperf by specifying separate hosts for read and write operations. It also includes a sticky option to ensure data consistency within a request cycle.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/quick-start.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER', 'mysql'),\n        'read' => [\n            'host' => ['192.168.1.1'],\n        ],\n        'write' => [\n            'host' => ['196.168.1.2'],\n        ],\n        'sticky'    => true,\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => env('DB_CHARSET', 'utf8'),\n        'collation' => env('DB_COLLATION', 'utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX', ''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('DB_MAX_IDLE_TIME', 60),\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Get Item Count in Current Page\nDESCRIPTION: Retrieves the number of items present on the current page. This can be useful for displaying the item range or handling edge cases on the last page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/paginator.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$count = $paginator->count();\n```\n\n----------------------------------------\n\nTITLE: Configure Local Sid Provider for Socket.IO in Hyperf\nDESCRIPTION: This PHP configuration shows how to switch the SocketID (sid) provider to `LocalSidProvider` in Hyperf.  This provider uses only the FD, which may be faster for single-server setups, but it might not be suitable for distributed environments where unique IDs across servers are necessary. The default format is `ServerID#FD`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/socketio-server.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\SocketIOServer\\SidProvider\\SidProviderInterface::class => \\Hyperf\\SocketIOServer\\SidProvider\\LocalSidProvider::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for Multi-Port Listening in Hyperf (PHP)\nDESCRIPTION: This code snippet demonstrates how to configure dependencies for listening on multiple ports in Hyperf. It redefines the `Hyperf\\HttpServer\\Server` class in the dependency container to ensure object isolation for each server instance. This prevents conflicts when multiple servers are using the same class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/overview.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'InnerHttp' => Hyperf\\HttpServer\\Server::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Argument (PHP)\nDESCRIPTION: Defines an optional argument with a default value using `addArgument()`. If the argument is not provided when executing the command, the default value is used.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addArgument('name', InputArgument::OPTIONAL, '姓名', 'Hyperf');\n}\n\npublic function handle()\n{\n    $this->line($this->input->getArgument('name'));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Consumer Proxy\nDESCRIPTION: This configuration defines a consumer in Hyperf to automatically create a proxy for the `CalculatorService`. It specifies the service name, the interface class (`service`), and other options such as the protocol, load balancer, and registry information (Consul in this case). It also includes node information and connection settings like connect/recv timeouts, retry configurations, and pool configurations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/json-rpc.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // 此處省略了其它同層級的配置\n    'consumers' => [\n        [\n            // name 需與服務提供者的 name 屬性相同\n            'name' => 'CalculatorService',\n            // 服務介面名，可選，預設值等於 name 配置的值，如果 name 直接定義為介面類則可忽略此行配置，如 name 為字串則需要配置 service 對應到介面類\n            'service' => \\App\\JsonRpc\\CalculatorServiceInterface::class,\n            // 對應容器物件 ID，可選，預設值等於 service 配置的值，用來定義依賴注入的 key\n            'id' => \\App\\JsonRpc\\CalculatorServiceInterface::class,\n            // 服務提供者的服務協議，可選，預設值為 jsonrpc-http\n            // 可選 jsonrpc-http jsonrpc jsonrpc-tcp-length-check\n            'protocol' => 'jsonrpc-http',\n            // 負載均衡演算法，可選，預設值為 random\n            'load_balancer' => 'random',\n            // 這個消費者要從哪個服務中心獲取節點資訊，如不配置則不會從服務中心獲取節點資訊\n            'registry' => [\n                'protocol' => 'consul',\n                'address' => 'http://127.0.0.1:8500',\n            ],\n            // 如果沒有指定上面的 registry 配置，即為直接對指定的節點進行消費，透過下面的 nodes 引數來配置服務提供者的節點資訊\n            'nodes' => [\n                ['host' => '127.0.0.1', 'port' => 9504],\n            ],\n            // 配置項，會影響到 Packer 和 Transporter\n            'options' => [\n                'connect_timeout' => 5.0,\n                'recv_timeout' => 5.0,\n                'settings' => [\n                    // 根據協議不同，區分配置\n                    'open_eof_split' => true,\n                    'package_eof' => \"\\r\\n\",\n                    // 'open_length_check' => true,\n                    // 'package_length_type' => 'N',\n                    // 'package_length_offset' => 0,\n                    // 'package_body_offset' => 4,\n                ],\n                // 重試次數，預設值為 2，收包超時不進行重試。暫只支援 JsonRpcPoolTransporter\n                'retry_count' => 2,\n                // 重試間隔，毫秒\n                'retry_interval' => 100,\n                // 使用多路複用 RPC 時的心跳間隔，null 為不觸發心跳\n                'heartbeat' => 30,\n                // 當使用 JsonRpcPoolTransporter 時會用到以下配置\n                'pool' => [\n                    'min_connections' => 1,\n                    'max_connections' => 32,\n                    'connect_timeout' => 10.0,\n                    'wait_timeout' => 3.0,\n                    'heartbeat' => -1,\n                    'max_idle_time' => 60.0,\n                ],\n            ],\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Customizing Token Bucket Key in Hyperf Rate Limiter\nDESCRIPTION: This code snippet illustrates how to customize the key used for the token bucket rate limiter. Instead of using the default URL, it uses the `user_id` from the request input, allowing rate limiting based on individual users. Requires `Hyperf\\Context\\ApplicationContext` and `Hyperf\\HttpServer\\Contract\\RequestInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/rate-limit.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\nuse Hyperf\\RateLimit\\Annotation\\RateLimit;\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\n\nclass TestController\n{\n    #[RateLimit(create: 1, capacity: 3, key: {TestController::class, \"getUserId\"})]\n    public function test()\n    {\n        return [\"QPS 1, 峰值3\"];\n    }\n\n    public static function getUserId(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        $request = ApplicationContext::getContainer()->get(RequestInterface::class);\n        // In the same way, traffic can be limited based on different dimensions such as mobile phone number and IP address.\n        return $request->input('user_id');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Hyperf Swagger Configuration\nDESCRIPTION: This command publishes the default configuration file for the hyperf/swagger component to the config/autoload directory. This allows customization of the Swagger generation settings such as port, output directories, and auto-generation behavior.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/swagger.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/swagger\n```\n\n----------------------------------------\n\nTITLE: Configuring a TCP Server in Hyperf\nDESCRIPTION: This configuration snippet defines a TCP server with a specified host, port, and callback for handling incoming requests. It utilizes `Hyperf\\Server\\Server` and `Hyperf\\Server\\Event` to set up the server and its event listeners.  The callback points to the `onReceive` method of the `App\\Controller\\TcpServer` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tcp-server.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 以下刪除了其他不相關的配置項\n    'servers' => [\n        [\n            'name' => 'tcp',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9504,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_RECEIVE => [App\\Controller\\TcpServer::class, 'onReceive'],\n            ],\n            'settings' => [\n                // 按需配置\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Construct and run a DAG using hyperf/dag PHP\nDESCRIPTION: This code constructs a DAG (Directed Acyclic Graph) using the `hyperf/dag` library. It creates vertices representing tasks and defines dependencies between them using edges.  The `run()` method then executes the tasks in the DAG according to their dependencies. The tasks are executed in a coroutine environment.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/dag.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$dag = new \\Hyperf\\Dag\\Dag();\n$a = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"A\\n\";});\n$b = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"B\\n\";});\n$c = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"C\\n\";});\n$d = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"D\\n\";});\n$e = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"E\\n\";});\n$f = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"F\\n\";});\n$g = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"G\\n\";});\n$h = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"H\\n\";});\n$i = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"I\\n\";});\n$dag->addVertex($a)\n    ->addVertex($b)\n    ->addVertex($c)\n    ->addVertex($d)\n    ->addVertex($e)\n    ->addVertex($f)\n    ->addVertex($g)\n    ->addVertex($h)\n    ->addVertex($i)\n    ->addEdge($a, $b)\n    ->addEdge($a, $c)\n    ->addEdge($a, $d)\n    ->addEdge($b, $h)\n    ->addEdge($b, $e)\n    ->addEdge($b, $f)\n    ->addEdge($c, $f)\n    ->addEdge($c, $g)\n    ->addEdge($d, $g)\n    ->addEdge($h, $i)\n    ->addEdge($e, $i)\n    ->addEdge($f, $i)\n    ->addEdge($g, $i);\n    \n// need to be executed in a coroutine environment\n$dag->run(); \n\n```\n\n----------------------------------------\n\nTITLE: Defining a Command with Annotation (PHP)\nDESCRIPTION: Defines a command name using the `#[Command]` annotation.  This specifies the command name directly in the annotation, providing a declarative way to define the command name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\n\n#[Command(name: \"foo:hello\")]\nclass FooCommand extends HyperfCommand\n{\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Span tags in Hyperf\nDESCRIPTION: This code shows how to configure span tags for HTTP client, Redis, and database operations within the `config/autolaod/opentracing.php` file.  It allows customizing the names of the span tags used for tracing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tracer.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'tags' => [\n        // HTTP 客户端 (Guzzle)\n        'http_client' => [\n            'http.url' => 'http.url',\n            'http.method' => 'http.method',\n            'http.status_code' => 'http.status_code',\n        ],\n        // Redis 客户端\n        'redis' => [\n            'arguments' => 'arguments',\n            'result' => 'result',\n        ],\n        // 数据库客户端 (hyperf/database)\n        'db' => [\n            'db.query' => 'db.query',\n            'db.statement' => 'db.statement',\n            'db.query_time' => 'db.query_time',\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Monolog Basic Usage Example\nDESCRIPTION: This example demonstrates basic Monolog usage, including creating a Logger instance, adding handlers, defining a formatter, and logging messages with different levels and context.  Illustrates adding processors to include extra data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/logger.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Monolog\\Formatter\\LineFormatter;\nuse Monolog\\Handler\\FirePHPHandler;\nuse Monolog\\Handler\\StreamHandler;\nuse Monolog\\Logger;\n\n// 创建一个 Channel，参数 log 即为 Channel 的名字\n$log = new Logger('log');\n\n// 创建两个 Handler，对应变量 $stream 和 $fire\n$stream = new StreamHandler('test.log', Logger::WARNING);\n$fire = new FirePHPHandler();\n\n// 定义时间格式为 \"Y-m-d H:i:s\"\n$dateFormat = \"Y n j, g:i a\";\n// 定义日志格式为 \"[%datetime%] %channel%.%level_name%: %message% %context% %extra%\\n\"\n$output = \"%datetime%||%channel||%level_name%||%message%||%context%||%extra%\\n\";\n// 根据 时间格式 和 日志格式，创建一个 Formatter\n$formatter = new LineFormatter($output, $dateFormat);\n\n// 将 Formatter 设置到 Handler 里面\n$stream->setFormatter($formatter);\n\n// 将 Handler 推入到 Channel 的 Handler 队列内\n$log->pushHandler($stream);\n$log->pushHandler($fire);\n\n// clone new log channel\n$log2 = $log->withName('log2');\n\n// add records to the log\n$log->warning('Foo');\n\n// add extra data to record\n// 1. log context\n$log->error('a new user', ['username' => 'daydaygo']);\n// 2. processor\n$log->pushProcessor(function ($record) {\n    $record['extra']['dummy'] = 'hello';\n    return $record;\n});\n$log->pushProcessor(new \\Monolog\\Processor\\MemoryPeakUsageProcessor());\n$log->alert('czl');\n```\n\n----------------------------------------\n\nTITLE: Default Retry Annotation Properties PHP\nDESCRIPTION: This code block lists the default properties and values for the `Retry` annotation in Hyperf. These properties define the retry policies, sleep strategy, maximum attempts, retry budget, base time interval, retry conditions based on exceptions and results, ignored exceptions, and fallback callable.  It provides a comprehensive overview of the available configuration options.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/retry.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Array of retry policies. Think of these as stacked middlewares.\n * @var string[]\n */\npublic $policies = [\n    FallbackRetryPolicy::class,\n    ClassifierRetryPolicy::class,\n    BudgetRetryPolicy::class,\n    MaxAttemptsRetryPolicy::class,\n    SleepRetryPolicy::class,\n];\n\n/**\n * The algorithm for retry intervals.\n */\npublic string $sleepStrategyClass = SleepStrategyInterface::class;\n\n/**\n * Max Attampts.\n */\npublic int $maxAttempts = 10;\n\n/**\n * Retry Budget.\n * ttl: Seconds of token lifetime.\n * minRetriesPerSec: Base retry token generation speed.\n * percentCanRetry: Generate new token at this ratio of the request volume.\n *\n * @var array|RetryBudgetInterface\n */\npublic $retryBudget = [\n    'ttl' => 10,\n    'minRetriesPerSec' => 1,\n    'percentCanRetry' => 0.2,\n];\n\n/**\n * Base time inteval (ms) for each try. For backoff strategy this is the interval for the first try\n * while for flat strategy this is the interval for every try.\n */\npublic int $base = 0;\n\n/**\n * Configures a Predicate which evaluates if an exception should be retried.\n * The Predicate must return true if the exception should be retried, otherwise it must return false.\n *\n * @var callable|string\n */\npublic $retryOnThrowablePredicate = '';\n\n/**\n * Configures a Predicate which evaluates if an result should be retried.\n * The Predicate must return true if the result should be retried, otherwise it must return false.\n *\n * @var callable|string\n */\npublic $retryOnResultPredicate = '';\n\n/**\n * Configures a list of Throwable classes that are recorded as a failure and thus are retried.\n * Any Throwable matching or inheriting from one of the list will be retried, unless ignored via ignoreExceptions.\n *\n * Ignoring an Throwable has priority over retrying an exception.\n *\n * @var array<string|\\Throwable>\n */\npublic $retryThrowables = [\\Throwable::class];\n\n/**\n * Configures a list of error classes that are ignored and thus are not retried.\n * Any exception matching or inheriting from one of the list will not be retried, even if marked via retryExceptions.\n *\n * @var array<string|\\Throwable>\n */\npublic $ignoreThrowables = [];\n\n/**\n * The fallback callable when all attempts exhausted.\n *\n * @var callable|string\n */\npublic $fallback = '';\n```\n\n----------------------------------------\n\nTITLE: Raw Expressions with orderByRaw - PHP\nDESCRIPTION: Demonstrates using `orderByRaw` to include raw SQL expressions in the ORDER BY clause of a query. This allows for custom sorting based on complex expressions. Requires the `Hyperf\\DbConnection\\Db` facade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('order')\n    ->orderByRaw('updated_at - created_at DESC')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Customizing Model Index Name\nDESCRIPTION: This code demonstrates how to customize the index name for a model by overriding the `searchableAs` method. This allows you to specify a different index name than the default (which is usually based on the model's table name).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\Scout\\Searchable;\nuse Hyperf\\Database\\Model\\Model;\n\nclass Post extends Model\n{\n    use Searchable;\n\n    /**\n     * Get the index name for the model.\n     * * @return string\n     */\n    public function searchableAs()\n    {\n        return 'posts_index';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inbound Type Conversion with Hashing in PHP\nDESCRIPTION: This code defines a custom type conversion class `Hash` that implements the `CastsInboundAttributes` interface. It provides a `set` method to hash a value before it is stored in the database. The constructor allows specifying the hashing algorithm to use (defaulting to 'md5'). This conversion is only applied when setting the value, not when retrieving it.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Casts;\n\nuse Hyperf\\Contract\\CastsInboundAttributes;\n\nclass Hash implements CastsInboundAttributes\n{\n    /**\n     * hash algorithm\n     * @var string\n     */\n    protected $algorithm;\n\n    /**\n     * Create a new instance of the typecast class\n     */\n    public function __construct($algorithm = 'md5')\n    {\n        $this->algorithm = $algorithm;\n    }\n\n    /**\n     * Convert to the value to be stored\n     */\n    public function set($model, $key, $value, $attributes)\n    {\n        return hash($this->algorithm, $value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Service Governance Component (Hyperf)\nDESCRIPTION: This command installs the hyperf/service-governance component, which provides the base functionality for service governance in Hyperf applications.  It is a prerequisite for using service registration and discovery features.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/service-register.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/service-governance\n```\n\n----------------------------------------\n\nTITLE: Custom Rate Limit Key Generation\nDESCRIPTION: Shows how to define a custom key for rate limiting based on user ID instead of the URL. This enables rate limiting on a per-user basis by implementing a static method to retrieve the user ID from the request.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/rate-limit.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\nuse Hyperf\\RateLimit\\Annotation\\RateLimit;\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\n\nclass TestController\n{\n    /**\n     * @RateLimit(create=1, capacity=3, key={TestController::class, \"getUserId\"})\n     */\n    public function test()\n    {\n        return [\"QPS 1, 峰值3\"];\n    }\n\n    public static function getUserId(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        $request = ApplicationContext::getContainer()->get(RequestInterface::class);\n        // 同理可以根据手机号、IP地址等不同纬度进行限流\n        return $request->input('user_id');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Factory for Dynamic Redis Resources\nDESCRIPTION: This example shows how to use the RedisFactory to dynamically retrieve Redis clients for different connection pools without creating proxy classes. Requires the Hyperf Context component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/redis.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Redis\\RedisFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n\n// Obtain or directly inject the RedisFactory class through the DI container\n$redis = $container->get(RedisFactory::class)->get('foo');\n$result = $redis->keys('*');\n```\n\n----------------------------------------\n\nTITLE: Start Hyperf Project\nDESCRIPTION: This command navigates to the project directory and starts the Hyperf application using the `hyperf.php` script.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/install.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncd hyperf-skeleton\nphp bin/hyperf.php start\n```\n\n----------------------------------------\n\nTITLE: Default Async Queue Configuration\nDESCRIPTION: This is the default configuration file (`config/autoload/async_queue.php`) for the Hyperf asynchronous queue. It defines the driver (Redis), connection pool, channel, timeout, retry settings, and concurrency limits for the queue.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => Hyperf\\AsyncQueue\\Driver\\RedisDriver::class,\n        'redis' => [\n            'pool' => 'default'\n        ],\n        'channel' => 'queue',\n        'timeout' => 2,\n        'retry_seconds' => 5,\n        'handle_timeout' => 10,\n        'processes' => 1,\n        'concurrent' => [\n            'limit' => 10,\n        ],\n        'max_messages' => 0,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Connection in Hyperf (PHP)\nDESCRIPTION: This snippet shows the configuration settings for an SQLite database connection within the Hyperf framework. It defines the driver, host and database.  The database can be an in-memory database or a file path.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/quick-start.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/databases.php\nreturn [\n    // Other configurations\n    'sqlite'=>[\n        'driver' => env('DB_DRIVER', 'sqlite'),\n        'host' => env('DB_HOST', 'localhost'),\n        // :memory: For an in-memory database, you can also specify the absolute path to the file.\n        'database' => env('DB_DATABASE', ':memory:'),\n        // other sqlite config\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Call In Controller PHP\nDESCRIPTION: This code snippet shows how to use the service consumer within a controller. It retrieves the `CalculatorServiceInterface` from the container, calls the `sum` method with `MathValue` objects, and then dumps the result's value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/json-rpc.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Context\\ApplicationContext;\nuse App\\JsonRpc\\CalculatorServiceInterface;\nuse App\\JsonRpc\\MathValue;\n\n$client = ApplicationContext::getContainer()->get(CalculatorServiceInterface::class);\n\n/** @var MathValue $result */\n$result = $client->sum(new MathValue(1), new MathValue(2));\n\nvar_dump($result->value);\n```\n\n----------------------------------------\n\nTITLE: Hyperf Log Processor: Append Request ID\nDESCRIPTION: This code defines a custom log processor for Hyperf that appends a unique request ID and the current coroutine ID to each log record. It uses Hyperf's Context to store and retrieve the request ID, ensuring that all logs within the same request are associated with the same ID. This class implements the `ProcessorInterface` from Monolog.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/logger.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Kernel\\Log;\n\nuse Hyperf\\Context\\Context;\nuse Hyperf\\Coroutine\\Coroutine;\nuse Monolog\\LogRecord;\nuse Monolog\\Processor\\ProcessorInterface;\n\nclass AppendRequestIdProcessor implements ProcessorInterface\n{\n    public const REQUEST_ID = 'log.request.id';\n\n    public function __invoke(array|LogRecord $record)\n    {\n        $record['extra']['request_id'] = Context::getOrSet(self::REQUEST_ID, uniqid());\n        $record['extra']['coroutine_id'] = Coroutine::id();\n        return $record;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Argument for a Command - PHP\nDESCRIPTION: Demonstrates how to define an optional argument for a command using `InputArgument::OPTIONAL` in the `addArgument` method. The third parameter is description, the fourth one is default value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addArgument('name', InputArgument::OPTIONAL, '姓名', 'Hyperf');\n}\n\npublic function handle()\n{\n    $this->line($this->input->getArgument('name'));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using CacheEvict Annotation in Hyperf\nDESCRIPTION: This snippet demonstrates how to use the `CacheEvict` annotation to invalidate the cache when a method is executed.  After the method body is executed, the cache entry is removed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/cache.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse Hyperf\\Cache\\Annotation\\CacheEvict;\n\nclass UserBookService\n{\n    #[CacheEvict(prefix: \"userBook\", value: \"_#{id}\")]\n    public function updateUserBook(int $id)\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unique Validation with Custom Connection\nDESCRIPTION: Shows how to specify a custom database connection when using the `unique` validation rule in Hyperf. It validates the 'email' field against the 'email_address' column in the 'users' table, using the 'connection' database connection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\n'email' => 'unique:connection.users,email_address'\n```\n\n----------------------------------------\n\nTITLE: Where In - PHP\nDESCRIPTION: Illustrates how to use the `whereIn()` method to filter results based on a set of values. This method verifies that a field's value is one of the values in the specified array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->whereIn('id', [1, 2, 3])->get();\n```\n\n----------------------------------------\n\nTITLE: Dynamic Consumer Process Count (PHP)\nDESCRIPTION: Demonstrates how to dynamically determine the number of consumer processes based on the environment.  The `getNums` method is overridden to return a different number of processes in debug mode. Requires the function `is_debug()` to be defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n#[Consumer(\n    exchange: 'hyperf',\n    routingKey: 'hyperf',\n    queue: 'hyperf',\n    name: 'hyperf',\n    nums: 1\n)]\nfinal class DemoConsumer extends ConsumerMessage\n{\n    public function getNums(): int\n    {\n        if (is_debug()) {\n            return 10;\n        }\n        return parent::getNums();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure WebSocket Server\nDESCRIPTION: This code configures the WebSocket server in the `config/autoload/server.php` file. It defines the server's name, type, host, port, socket type, and callbacks for handshake, message, and close events. The `Event` class and `Server` class constants are used to specify the event types and server type respectively. The callbacks array maps events to specific methods of the `Hyperf\\WebSocketServer\\Server` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/websocket-server.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'servers' => [\n        [\n            'name' => 'ws',\n            'type' => Server::SERVER_WEBSOCKET,\n            'host' => '0.0.0.0',\n            'port' => 9502,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_HAND_SHAKE => [Hyperf\\WebSocketServer\\Server::class, 'onHandShake'],\n                Event::ON_MESSAGE => [Hyperf\\WebSocketServer\\Server::class, 'onMessage'],\n                Event::ON_CLOSE => [Hyperf\\WebSocketServer\\Server::class, 'onClose'],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Returning a Resource Collection\nDESCRIPTION: This PHP code demonstrates returning a collection of `UserResource` instances from a controller action. It fetches all users using `User::all()` and transforms them into a resource collection using `UserResource::collection()`, then converts the resource collection to a response using `toResponse()`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Resource\\User as UserResource;\nuse App\\Model\\User;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return UserResource::collection(User::all())->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Inject by #[Inject] Annotation\nDESCRIPTION: This demonstrates dependency injection using the `#[Inject]` annotation. The `UserService` is automatically injected into the `IndexController`'s `$userService` property.  Requires the `Hyperf\\Di\\Annotation\\Inject` namespace.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/di.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserService;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\nclass IndexController\n{\n    /**\n     * Use `#[Inject]` to inject the attribute type object declared by `@var` \n     * \n     * @var UserService\n     */\n    #[Inject]\n    private $userService;\n    \n    public function index()\n    {\n        $id = 1;\n        // Use directly\n        return $this->userService->getInfoById($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering an Inline Component in PHP\nDESCRIPTION: This snippet demonstrates how to define an inline component by returning the component's HTML directly from the `render` method. This is useful for simple components that don't require a separate view file. Blade syntax is used within the returned string.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\npublic function render()\n{\n    return <<<'blade'\n        <div class=\"alert alert-danger\">\n            {{ $slot }}\n        </div>blade;\n}\n```\n\n----------------------------------------\n\nTITLE: Client Configuration for Hyperf RPC Multiplex\nDESCRIPTION: This code snippet provides the client configuration for the Hyperf RPC Multiplex component. It configures the consumer, specifying the service interface, protocol, load balancer, and registry details. It also includes settings for connection timeout, retry count, and multiplexing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/rpc-multiplex.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'consumers' => [\n        [\n            'name' => 'CalculatorService',\n            'service' => App\\JsonRpc\\CalculatorServiceInterface::class,\n            'id' => App\\JsonRpc\\CalculatorServiceInterface::class,\n            'protocol' => Hyperf\\RpcMultiplex\\Constant::PROTOCOL_DEFAULT,\n            'load_balancer' => 'random',\n            // Which service center does the consumer want to obtain node information from, if not configured, the node information will not be obtained from the service center\n            'registry' => [\n                'protocol' => 'consul',\n                'address' => 'http://127.0.0.1:8500',\n            ],\n            'nodes' => [\n                ['host' => '127.0.0.1', 'port' => 9502],\n            ],\n            'options' => [\n                'connect_timeout' => 5.0,\n                'recv_timeout' => 5.0,\n                'settings' => [\n                    // The maximum value of the package body. If it is less than the data size returned by the Server, an exception will be thrown, so try to control the package body size as much as possible.\n                    'package_max_length' => 1024 * 1024 * 2,\n                ],\n                // number of retries, default is 2\n                'retry_count' => 2,\n                // retry interval, milliseconds\n                'retry_interval' => 100,\n                // Number of multiplexed clients\n                'client_count' => 4,\n                // Heartbeat interval non-numeric means no heartbeat\n                'heartbeat' => 30,\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Retry Annotation PHP\nDESCRIPTION: This code defines a custom retry annotation `MyRetry` that extends the abstract retry class. It sets a maximum retry attempt of 3 using the `MaxAttemptsRetryPolicy` and retries only when a `Throwable` is thrown using `ClassifierRetryPolicy`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/retry.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Annotation;\n\nuse Doctrine\\Common\\Annotations\\Annotation\\Target;\n\n#[Attribute(Attribute::TARGET_METHOD)]\nclass MyRetry extends \\Hyperf\\Retry\\Annotation\\AbstractRetry\n{\n    public $policies = [\n        MaxAttemptsRetryPolicy::class,\n        ClassifierRetryPolicy::class,\n    ];\n    public $maxAttempts = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Unique Rule Ignoring a Given ID - PHP\nDESCRIPTION: This code demonstrates how to use the `Rule::unique()` method to ignore a specific ID during the uniqueness check. It avoids validation errors when updating a user's profile if only non-email fields are changed. Requires `Hyperf\\Validation\\Rule` and a user object (`$user`) with an ID property. The rule is applied to the 'email' field.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_39\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($data, [\n    'email' => [\n        'required',\n        Rule::unique('users')->ignore($user->id),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Using DB Instance in Hyperf\nDESCRIPTION: Demonstrates how to retrieve a DB instance from the Hyperf container and execute a SQL query using the query method. It uses dependency injection via ApplicationContext to get the DB class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/db.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\DB\\DB;\n\n$db = ApplicationContext::getContainer()->get(DB::class);\n\n$res = $db->query('SELECT * FROM `user` WHERE gender = ?;', [1]);\n\n```\n\n----------------------------------------\n\nTITLE: Prohibited If Validation Rule in Hyperf\nDESCRIPTION: This snippet demonstrates how to use the `Rule::prohibitedIf` method to conditionally prohibit a field from being present based on a boolean value or a closure in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$this->validationFactory->make($request->all(), [\n    'role_id' => Rule::prohibitedIf($request->user()->is_admin),\n]);\n\n$this->validationFactory->make($request->all(), [\n    'role_id' => Rule::prohibitedIf(fn () => $request->user()->is_admin),\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding ClassifierRetryPolicy to Custom Annotation\nDESCRIPTION: This code adds `ClassifierRetryPolicy` to the `MyRetry` annotation to control which errors are retried. By default, it retries on `Throwable` exceptions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/retry.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Annotation;\n\nuse Doctrine\\Common\\Annotations\\Annotation\\Target;\n\n#[Attribute(Attribute::TARGET_METHOD)]\nclass MyRetry extends \\Hyperf\\Retry\\Annotation\\AbstractRetry\n{\n    public $policies = [\n        MaxAttemptsRetryPolicy::class,\n        ClassifierRetryPolicy::class,\n    ];\n    public $maxAttempts = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Database Connection Options (php)\nDESCRIPTION: This code snippet demonstrates how to specify a different database connection for a migration by overriding the `$connection` property.  This allows you to target different databases in multi-database environments. The connection key should correspond to a connection defined in `config/autoload/databases.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Database\\Schema\\Schema;\nuse Hyperf\\Database\\Schema\\Blueprint;\nuse Hyperf\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    // 這裡對應 config/autoload/databases.php 內的連線 key\n    protected $connection = 'foo';\n    \n    public function up(): void\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->timestamps();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Socket.io Server Implementation\nDESCRIPTION: Implements a Socket.io server using Hyperf annotations. Defines event handlers for 'event', 'join-room', and 'say' events. Utilizes `Hyperf\\SocketIOServer\\Socket` to interact with clients and manage rooms. Employs `Hyperf\\Codec\\Json` for JSON encoding/decoding.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/socketio-server.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\SocketIOServer\\Annotation\\Event;\nuse Hyperf\\SocketIOServer\\Annotation\\SocketIONamespace;\nuse Hyperf\\SocketIOServer\\BaseNamespace;\nuse Hyperf\\SocketIOServer\\Socket;\nuse Hyperf\\Codec\\Json;\n\n#[SocketIONamespace(\"/\")]\nclass WebSocketController extends BaseNamespace\n{\n    /**\n     * @param string $data\n     */\n    #[Event(\"event\")]\n    public function onEvent(Socket $socket, $data)\n    {\n        // 應答\n        return 'Event Received: ' . $data;\n    }\n\n    /**\n     * @param string $data\n     */\n    #[Event(\"join-room\")]\n    public function onJoinRoom(Socket $socket, $data)\n    {\n        // 將當前使用者加入房間\n        $socket->join($data);\n        // 向房間內其他使用者推送（不含當前使用者）\n        $socket->to($data)->emit('event', $socket->getSid() . \"has joined {$data}\");\n        // 向房間內所有人廣播（含當前使用者）\n        $this->emit('event', 'There are ' . count($socket->getAdapter()->clients($data)) . \" players in {$data}\");\n    }\n\n    /**\n     * @param string $data\n     */\n    #[Event(\"say\")]\n    public function onSay(Socket $socket, $data)\n    {\n        $data = Json::decode($data);\n        $socket->to($data['room'])->emit('event', $socket->getSid() . \" say: {$data['message']}\");\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Correct Job Definition\nDESCRIPTION: Demonstrates a correct Job definition that only includes the necessary data parameters and retrieves other dependencies within the `handle` method to avoid serialization issues.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Job;\n\nuse Hyperf\\AsyncQueue\\Job;\n\nclass ExampleJob extends Job\n{\n    public $params;\n    \n    /**\n     * 任務執行失敗後的重試次數，即最大執行次數為 $maxAttempts+1 次\n     */\n    protected int $maxAttempts = 2;\n\n    public function __construct($params)\n    {\n        // 這裡最好是普通資料，不要使用攜帶 IO 的物件，比如 PDO 物件\n        $this->params = $params;\n    }\n\n    public function handle()\n    {\n        // 根據引數處理具體邏輯\n        // 透過具體引數獲取模型等\n        // 這裡的邏輯會在 ConsumerProcess 程序中執行\n        var_dump($this->params);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Invoking RPC Service from Client in Hyperf\nDESCRIPTION: This snippet demonstrates how to invoke an RPC service from a client in Hyperf. It retrieves the container instance and uses it to get an instance of the `PushInterface`. Then, it calls the `sendSmsCode` method on the interface instance with the provided mobile number and code.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/rpc-multiplex.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Context\\ApplicationContext;\nuse RPC\\Push\\PushInterface;\n\nApplicationContext::getContainer()->get(PushInterface::class)->sendSmsCode('18600000001', '6666');\n\n```\n\n----------------------------------------\n\nTITLE: Adding Consul ACL Token via Query\nDESCRIPTION: Demonstrates how to add a Consul ACL token to requests by passing it as a query parameter named `token`. This involves including the token in the options array when calling methods on the Consul client, such as `$kv->get()`. It is an alternative approach to using headers for authentication.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/consul.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$response = $kv->get($namespace, ['token' => 'your-token'])->json();\n```\n\n----------------------------------------\n\nTITLE: Querying Model Cache\nDESCRIPTION: This code demonstrates how to query the model cache using the `findFromCache` and `findManyFromCache` methods.  `findFromCache` retrieves a single model by ID, while `findManyFromCache` retrieves multiple models by their IDs.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model-cache.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// 查詢單個快取\n/** @var int|string $id */\n$model = User::findFromCache($id);\n\n// 批次查詢快取，返回 Hyperf\\Database\\Model\\Collection\n/** @var array $ids */\n$models = User::findManyFromCache($ids);\n```\n\n----------------------------------------\n\nTITLE: Extending BaseClient for gRPC Calls\nDESCRIPTION: This PHP code extends the `BaseClient` class to create a custom gRPC client for the 'Hi' service. It defines the 'sayHello' method, which calls the '_simpleRequest' method of the `BaseClient` class with the appropriate parameters, including the RPC path, request object, and response decoding information.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/grpc.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nclass HiClient extends BaseClient\n{\n    public function sayHello(HiUser $argument)\n    {\n        return $this->_simpleRequest(\n            '/grpc.hi/sayHello',\n            $argument,\n            [HiReply::class, 'decode']\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Models\nDESCRIPTION: This code searches for models using the `search` method and retrieves the results using the `get` method.  The result is a collection of model instances.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->get();\n```\n\n----------------------------------------\n\nTITLE: TCC Transaction Example in Hyperf\nDESCRIPTION: This PHP code demonstrates a TCC (Try-Confirm-Cancel) distributed transaction using DTM-Client within a Hyperf controller. It defines the try, confirm, and cancel endpoints for two sub-transactions (transA and transB) and uses the `TCC::globalTransaction` method to orchestrate the global transaction. The `callBranch` method is used to register the branches with the DTM server. The example catches any exceptions that occur during the transaction and dumps the error message and stack trace.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/distributed-transaction.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse DtmClient\\TCC;\nuse DtmClient\\TransContext;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\GetMapping;\nuse Throwable;\n\n#[Controller(prefix: '/tcc')]\nclass TccController\n{\n\n    protected string $serviceUri = 'http://127.0.0.1:9501';\n\n    #[Inject]\n    protected TCC $tcc;\n\n    #[GetMapping(path: 'successCase')]\n    public function successCase()\n    {\n        try {\n            \n            $this->tcc->globalTransaction(function (TCC $tcc) {\n                // 创建子事务 A 的调用数据\n                $tcc->callBranch(\n                    // 调用 Try 方法的参数\n                    ['amount' => 30],\n                    // Try 方法的 URL\n                    $this->serviceUri . '/tcc/transA/try',\n                    // Confirm 方法的 URL\n                    $this->serviceUri . '/tcc/transA/confirm',\n                    // Cancel 方法的 URL\n                    $this->serviceUri . '/tcc/transA/cancel'\n                );\n                // 创建子事务 B 的调用数据，以此类推\n                $tcc->callBranch(\n                    ['amount' => 30],\n                    $this->serviceUri . '/tcc/transB/try',\n                    $this->serviceUri . '/tcc/transB/confirm',\n                    $this->serviceUri . '/tcc/transB/cancel'\n                );\n            });\n        } catch (Throwable $e) {\n            var_dump($e->getMessage(), $e->getTraceAsString());\n        }\n        // 通过 TransContext::getGid() 获得 全局事务ID 并返回\n        return TransContext::getGid();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scheduled Tasks Using Configuration File\nDESCRIPTION: Defines scheduled tasks in the `crontab.php` configuration file by creating instances of the `Hyperf\\Crontab\\Crontab` class.  The example shows how to define callback, command, and closure type tasks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/crontab.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/crontab.php\nuse Hyperf\\Crontab\\Crontab;\nreturn [\n    'enable' => true,\n    // Timed tasks defined by configuration\n    'crontab' => [\n        // Callback type timed task (default)\n        (new Crontab())->setName('Foo')->setRule('* * * * *')->setCallback([App\\Task\\FooTask::class, 'execute'])->setMemo('This is an example timed task'),\n        // Command type timed task\n        (new Crontab())->setType('command')->setName('Bar')->setRule('* * * * *')->setCallback([\n            'command' => 'swiftmailer:spool:send',\n            // (optional) arguments\n            'fooArgument' => 'barValue',\n            // (optional) options\n            '--message-limit' => 1,\n            // Remember to add it, otherwise it will cause the main process to exit\n            '--disable-event-dispatcher' => true,\n        ])->setEnvironments(['develop', 'production']),\n        // Closure type timed task (Only supported in Coroutine style server)\n        (new Crontab())->setType('closure')->setName('Closure')->setRule('* * * * *')->setCallback(function () {\n            var_dump(date('Y-m-d H:i:s'));\n        })->setEnvironments('production'),\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Define Date Attributes for Automatic Conversion in Hyperf Model\nDESCRIPTION: Defines date attributes in a Hyperf model. The `created_at` and `updated_at` attributes are automatically converted to Carbon instances. Additional date attributes can be specified in the `$dates` array to enable automatic Carbon conversion.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/mutators.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 應該轉換為日期格式的屬性.\n     *\n     * @var array\n     */\n    protected $dates = [\n        'seen_at',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Unique Validation with Custom ID Column\nDESCRIPTION: Shows how to specify a custom ID column name when using the `ignore()` method. This is useful when the primary key column in the database table is not named 'id'. Requires the 'users' table name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_38\n\nLANGUAGE: PHP\nCODE:\n```\n'email' => Rule::unique('users')->ignore($user->id, 'user_id')\n```\n\n----------------------------------------\n\nTITLE: Defining a One-to-Many Polymorphic Relationship - User Model\nDESCRIPTION: This code snippet defines a one-to-many polymorphic relationship for the User model with the Image model, utilizing the morphMany method.  This setup assumes that the images table has columns named imageable_id and imageable_type, allowing multiple images to be associated with one User model. The imageable string specifies the base name for the type and id columns in the images table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/relationship.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass User extends Model\n{\n    public function images()\n    {\n        return $this->morphMany(Image::class, 'imageable');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster with 'name' in PHP\nDESCRIPTION: This PHP configuration enables Redis Cluster mode by specifying a cluster 'name'. It relies on the Redis extension being configured with the specified cluster name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/redis.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// 省略其他配置\nreturn [\n    'default' => [\n        'cluster' => [\n            'enable' => true,\n            'name' => 'mycluster',\n            'seeds' => [],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS in Nginx\nDESCRIPTION: This Nginx configuration snippet demonstrates how to enable CORS by setting the appropriate headers. It adds the 'Access-Control-Allow-Origin', 'Access-Control-Allow-Methods', and 'Access-Control-Allow-Headers' headers to the response. It also handles OPTIONS requests by returning a 204 No Content response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/middleware/middleware.md#_snippet_12\n\nLANGUAGE: nginx\nCODE:\n```\nlocation / {\n    add_header Access-Control-Allow-Origin *;\n    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';\n    add_header Access-Control-Allow-Headers 'DNT,Keep-Alive,User-Agent,Cache-Control,Content-Type,Authorization';\n\n    if ($request_method = 'OPTIONS') {\n        return 204;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Publish DTM Client Configuration in Hyperf\nDESCRIPTION: This command publishes the DTM Client configuration file to the `./config/autoload/dtm.php` directory in a Hyperf project. It uses the `vendor:publish` command provided by Hyperf to copy the configuration file from the vendor directory to the application's configuration directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/distributed-transaction.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish dtm/dtm-client\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Hyperf Resource Collections\nDESCRIPTION: This PHP code demonstrates how to add metadata ('links') to a resource collection response.  This is done by including the metadata within the `toArray` method of the resource collection class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting all input data - PHP\nDESCRIPTION: Demonstrates how to retrieve all input data from the request as an array using the `all()` method.  This includes data from GET, POST, and JSON bodies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$all = $request->all();\n```\n\n----------------------------------------\n\nTITLE: Query Polymorphic Relations (PHP)\nDESCRIPTION: This code demonstrates how to query for the existence of a MorphTo relation using the whereHasMorph method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Model\\Book;\nuse App\\Model\\Image;\nuse App\\Model\\User;\nuse Hyperf\\Database\\Model\\Builder;\n\n$images = Image::query()->whereHasMorph(\n    'imageable',\n    [\n        User::class,\n        Book::class,\n    ],\n    function (Builder $query) {\n        $query->where('imageable_id', 1);\n    }\n)->get();\n\n```\n\n----------------------------------------\n\nTITLE: Generating a Custom Command with Hyperf Devtool\nDESCRIPTION: Use the hyperf/devtool component to generate a custom command class.  This command simplifies the creation of new command classes within the app/Command directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:command FooCommand\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Process via Annotation - Hyperf (PHP)\nDESCRIPTION: Registers a custom process class using the `#[Process]` annotation. Hyperf collects and registers classes annotated with `#[Process]` automatically.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/process.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process(name: \"foo_process\")]\nclass FooProcess extends AbstractProcess\n{\n    public function handle(): void\n    {\n        // 您的代码 ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Timestamp Column Names (Hyperf)\nDESCRIPTION: Demonstrates how to customize the column names for `created_at` and `updated_at` timestamps in a Hyperf model by defining the `CREATED_AT` and `UPDATED_AT` constants. Setting one of these constants to `null` indicates that the ORM should not manage that particular timestamp column.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    const CREATED_AT = 'creation_date';\n\n    const UPDATED_AT = 'last_update';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Searchable Data\nDESCRIPTION: Overrides the `toSearchableArray` method in a model to customize the data that is synced to the search index. By default, Scout uses the model's `toArray` method. This allows you to select specific attributes or perform data transformations before indexing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n    namespace App;\n\n    use Hyperf\\Scout\\Searchable;\n    use Hyperf\\Database\\Model\\Model;\n\n    class Post extends Model\n    {\n        use Searchable;\n\n        /**\n         * Get the indexable data array for the model.\n         * @return array\n         */\n        public function toSearchableArray()\n        {\n            $array = $this->toArray();\n\n            // Customize array...\n\n            return $array;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Broadcast and Subscribe to Messages via MessageBus\nDESCRIPTION: This code demonstrates how to use the MessageBusInterface to broadcast and subscribe to messages across all processes in a Hyperf application, including custom processes. It enables features like configuration center implementation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/reactive-x.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$bus = make(Hyperf\\ReactiveX\\MessageBusInterface::class);\n// 全程序廣播資訊\n$bus->onNext('Hello Hyperf');\n// 訂閱資訊\n$bus->subscribe(function($message){\n    echo $message;\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Request Path\nDESCRIPTION: Shows how to retrieve the request path using the `path()` method.  Also, demonstrates how to use `is()` method with wildcard to validate the request path.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/request.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$uri = $request->path();\n```\n\nLANGUAGE: php\nCODE:\n```\nif ($request->is('user/*')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Timestamp Format (Hyperf)\nDESCRIPTION: Shows how to customize the timestamp format for a model in Hyperf by defining the `$dateFormat` property. This property determines how date attributes are stored in the database and serialized to arrays or JSON.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected ?string $dateFormat = 'U';\n}\n```\n\n----------------------------------------\n\nTITLE: Get User Image Association PHP\nDESCRIPTION: Retrieves the image associated with a user using the defined `image` relationship. It first finds a user with ID 1 and then accesses the `image` property to get the related image model.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/relationship.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$user = User::find(1);\n\n$image = $user->image;\n```\n\n----------------------------------------\n\nTITLE: Checking if file exists - PHP\nDESCRIPTION: Shows how to check if a file has been uploaded in the request using the `hasFile()` method. Returns a boolean indicating whether the file exists.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nif ($request->hasFile('photo')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Convert Swoole Channel to Observable\nDESCRIPTION: This code converts a Swoole Channel into an Observable using `Observable::fromChannel`. It demonstrates how to publish and subscribe to a channel using ReactiveX, allowing multiple subscribers to receive data pushed into the channel.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/reactive-x.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\ReactiveX\\Observable;\nuse Swoole\\Coroutine\\Channel;\n\n$chan = new Channel(1);\n$pub = Observable::fromChannel($chan)->publish();\n\n$pub->subscribe(function ($x) {\n    echo 'First Subscription:' . $x . PHP_EOL;\n});\n$pub->subscribe(function ($x) {\n    echo 'Second Subscription:' . $x . PHP_EOL;\n});\n$pub->connect();\n\n$chan->push('hello');\n$chan->push('world');\n\n// First Subscription: hello\n// Second Subscription: hello\n// First Subscription: world\n// Second Subscription: world\n```\n\n----------------------------------------\n\nTITLE: Paginating Search Results\nDESCRIPTION: This code shows how to paginate search results using the `paginate` method. The `paginate` method returns a `Paginator` instance, which allows you to display search results in pages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->paginate();\n```\n\n----------------------------------------\n\nTITLE: Refreshing Migrations with Step in Hyperf\nDESCRIPTION: This command rolls back a specified number of migrations and then runs them again. The `--step` parameter determines how many migrations to revert and re-apply. Requires Hyperf framework and executable `bin/hyperf.php` script.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:refresh --step=5\n```\n\n----------------------------------------\n\nTITLE: Config.php Configuration Example\nDESCRIPTION: This code demonstrates configuring the same `timeout` value directly within the `config/config.php` file, showing how to structure the array to achieve the same configuration key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'client' => [\n        'request' => [\n            'timeout' => 10,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Hyperf Multiple Port Listening - Annotation\nDESCRIPTION: This defines a controller that is accessible through the `innerHttp` server, using the `server` parameter in the `AutoController` annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/overview.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController(server: \"innerHttp\")]\nclass IndexController\n{\n    public function index()\n    {\n        return 'Hello World.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Build Default Phar Archive\nDESCRIPTION: Builds a default Phar archive of the Hyperf project using the `phar:build` command. This command packages the project's files and dependencies into a single executable Phar file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/phar.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php phar:build\n```\n\n----------------------------------------\n\nTITLE: Controller Invocation - Hyperf\nDESCRIPTION: This snippet demonstrates how to call a JsonRpc service using the CalculatorServiceInterface in a Hyperf controller, passing MathValue objects as parameters and receiving a MathValue object as result.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/json-rpc.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Context\\ApplicationContext;\nuse App\\JsonRpc\\CalculatorServiceInterface;\nuse App\\JsonRpc\\MathValue;\n\n$client = ApplicationContext::getContainer()->get(CalculatorServiceInterface::class);\n\n/** @var MathValue $result */\n$result = $client->sum(new MathValue(1), new MathValue(2));\n\nvar_dump($result->value);\n```\n\n----------------------------------------\n\nTITLE: Update lock with lockForUpdate in Hyperf\nDESCRIPTION: This example shows how to use an update lock (`lockForUpdate`) on a `select` query using Hyperf's query builder, which prevents rows from being selected or modified by other shared locks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->lockForUpdate()->get();\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Watcher\nDESCRIPTION: This command installs the Hyperf Watcher component as a development dependency using Composer. It adds the `hyperf/watcher` package to the project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/watcher.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/watcher --dev\n```\n\n----------------------------------------\n\nTITLE: MIME Types Validation\nDESCRIPTION: This snippet demonstrates how to validate the MIME type of an uploaded file using the `mimetypes` rule, specifying the allowed MIME types.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n'video' => 'mimetypes:video/avi,video/mpeg,video/quicktime'\n```\n\n----------------------------------------\n\nTITLE: Add Request Trace Listener\nDESCRIPTION: Adds the `Hyperf\\Tracer\\Listener\\RequestTraceListener::class` to the `config/autoload/listeners.php` file to enable request tracing using a listener.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tracer.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n     \\Hyperf\\Tracer\\Listener\\RequestTraceListener::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Bulk Updating Records in the Search Index\nDESCRIPTION: Updates multiple model records in the search index via a model query, relationship, or collection using the `searchable` method. If a model doesn't exist in the index, it will be added.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// Update with model query statement...\n    App\\Order::where('price', '>', 100)->searchable();\n\n    // You can also use model relational updates...\n    $user->orders()->searchable();\n\n    // You can also use collection update...\n    $orders->searchable();\n```\n\n----------------------------------------\n\nTITLE: Using Collection Keys in Controller\nDESCRIPTION: This PHP code shows an example of a controller using the `keyBy` method on the Eloquent collection to set the keys based on the id attribute. When combined with the `$preserveKeys = true` property in the resource, the collection will maintain these id-based keys in the JSON response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\User as UserResource;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return UserResource::collection(User::all()->keyBy->id)->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Automatic Event Registration with #[Event]\nDESCRIPTION: Shows how to automatically register event handlers by adding the `#[Event]` annotation to the controller class. The method names are used as event names.  Requires `Hyperf\\SocketIOServer\\Annotation\\Event` and `Hyperf\\SocketIOServer\\Annotation\\SocketIONamespace`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/socketio-server.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\SocketIOServer\\Annotation\\SocketIONamespace;\nuse Hyperf\\SocketIOServer\\Annotation\\Event;\nuse Hyperf\\SocketIOServer\\BaseNamespace;\nuse Hyperf\\SocketIOServer\\Socket;\n\n#[SocketIONamespace(\"/\")]\n#[Event]\nclass WebSocketController extends BaseNamespace\n{\n    public function echo(Socket $socket, $data)\n    {\n        $socket->emit('event', $data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Register Service Listener Configuration\nDESCRIPTION: This snippet shows the configuration required to enable service registration using a listener. It adds `Hyperf\\RpcMultiplex\\Listener\\RegisterServiceListener::class` to the listeners array, which will handle registering the service with the configured registry.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/rpc-multiplex.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\RpcMultiplex\\Listener\\RegisterServiceListener::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Scripts for Testing\nDESCRIPTION: This snippet configures the composer.json file to include scripts for running Pest and PHPUnit tests.  It defines the 'pest' and 'test' scripts to execute the respective testing frameworks with color output enabled.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/testing.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"pest\": \"pest --colors=always\",\n    \"test\": \"co-phpunit -c phpunit.xml --colors=always\"\n}\n```\n\n----------------------------------------\n\nTITLE: Producing Message (PHP)\nDESCRIPTION: Demonstrates how to send an AMQP message using the `Hyperf\\Amqp\\Producer` class. It creates an instance of `DemoProducer` with an ID, retrieves the `Producer` from the DI container, and calls the `produce` method to send the message.  Requires Hyperf DI Container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Amqp\\Producer;\nuse App\\Amqp\\Producers\\DemoProducer;\nuse Hyperf\\Context\\ApplicationContext;\n\n$message = new DemoProducer(1);\n$producer = ApplicationContext::getContainer()->get(Producer::class);\n$result = $producer->produce($message);\n\n```\n\n----------------------------------------\n\nTITLE: Configure Static Resource Handling (PHP)\nDESCRIPTION: This PHP code snippet shows how to configure static resource handling in the `config/autoload/server.php` file, allowing uploaded files in a directory (e.g., 'public') to be accessed via HTTP.  It sets the `document_root` and `enable_static_handler` settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/filesystem.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'settings' => [\n        ...\n        // 将 public 替换为上传目录\n        'document_root' => BASE_PATH . '/public',\n        'enable_static_handler' => true,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Previous Step Results in Hyperf DAG\nDESCRIPTION: This snippet demonstrates how to access the results of previous tasks within a DAG.  Each task function receives an array of results from its dependencies. The DAG's run() method also returns an array containing all task execution results, keyed by vertex.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/dag.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$dag = new \\Hyperf\\Dag\\Dag();\n$a = \\Hyperf\\Dag\\Vertex::make(function() {return 1;});\n$b = \\Hyperf\\Dag\\Vertex::make(function($results) use ($a) {\n    return $results[$a->key] + 1;\n});\n$results = $dag->addVertex($a)->addVertex($b)->addEdge($a, $b)->run();\nassert($results[$a->key] === 1);\nassert($results[$b->key] === 2);\n```\n\n----------------------------------------\n\nTITLE: AMQP configuration update\nDESCRIPTION: This PHP code provides an updated configuration for the AMQP component, highlighting changes related to connection multiplexing and concurrency. Key parameters include host, port, user, password, vhost, concurrent limit, connection pool size, and various connection parameters like timeout and heartbeat.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.2.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'host' => env('AMQP_HOST', 'localhost'),\n        'port' => (int) env('AMQP_PORT', 5672),\n        'user' => env('AMQP_USER', 'guest'),\n        'password' => env('AMQP_PASSWORD', 'guest'),\n        'vhost' => env('AMQP_VHOST', '/'),\n        'concurrent' => [\n            'limit' => 1,\n        ],\n        'pool' => [\n            // Number of connections opened at the same time\n            // Because the new version of the connection supports multiplexing, it can achieve high concurrency with a very small number of connections\n            'connections' => 2,\n        ],\n        'params' => [\n            'insist' => false,\n            'login_method' => 'AMQPLAIN',\n            'login_response' => null,\n            'locale' => 'en_US',\n            'connection_timeout' => 3,\n            'read_write_timeout' => 6,\n            'context' => null,\n            'keepalive' => true,\n            'heartbeat' => 3,\n            'channel_rpc_timeout' => 0.0,\n            'close_on_destruct' => false,\n            // The maximum value of idle channels in multiplexing. After this number is exceeded, the redundant limit channels will be closed.\n            'max_idle_channels' => 10,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Generating Middleware using Hyperf Command\nDESCRIPTION: This snippet demonstrates how to generate a new middleware class using the Hyperf command-line tool. The command `php ./bin/hyperf.php gen:middleware Auth/FooMiddleware` creates a middleware class named `FooMiddleware` in the `App\\Middleware\\Auth` namespace.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/middleware/middleware.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nphp ./bin/hyperf.php gen:middleware Auth/FooMiddleware\n```\n\n----------------------------------------\n\nTITLE: Conditional Where Clause - Hyperf PHP\nDESCRIPTION: Illustrates using the `when` method in Hyperf to conditionally apply a `where` clause only if a certain condition is true. This is useful for applying filters based on request parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$role = $request->input('role');\n\n$users = Db::table('users')\n    ->when($role, function ($query, $role) {\n        return $query->where('role_id', $role);\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Configure Tracing Enablement\nDESCRIPTION: Configures which components (Guzzle HTTP, Redis, DB) have tracing enabled.  The `enable` array in `config/autoload/opentracing.php` controls this.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tracer.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'enable' => [\n        // enable the tracing of Guzzle HTTP calls\n        'guzzle' => false,\n        // enable the tracing of Redis calls\n        'redis' => false,\n        // enable the tracing of DB calls\n        'db' => false,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Hyperf AMQP Default Configuration\nDESCRIPTION: Provides the default configuration array for the AMQP component in a Hyperf application.  This includes connection details such as host, port, user, password, vhost, concurrent limits, pool configurations, and basic parameters.  It allows customization of connection parameters, timeouts, heartbeat intervals, and pool management.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/amqp.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'enable' => true,\n    'default' => [\n        'host' => 'localhost',\n        'port' => 5672,\n        'user' => 'guest',\n        'password' => 'guest',\n        'vhost' => '/',\n        'concurrent' => [\n            'limit' => 1,\n        ],\n        'pool' => [\n            'connections' => 1,\n        ],\n        'params' => [\n            'insist' => false,\n            'login_method' => 'AMQPLAIN',\n            'login_response' => null,\n            'locale' => 'en_US',\n            'connection_timeout' => 3.0,\n            // 儘量保持是 heartbeat 數值的兩倍\n            'read_write_timeout' => 6.0,\n            'context' => null,\n            'keepalive' => false,\n            // 儘量保證每個訊息的消費時間小於心跳時間\n            'heartbeat' => 3,\n            'close_on_destruct' => false,\n        ],\n    ],\n    'pool2' => [\n        ...\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Install hyperf/di\nDESCRIPTION: This command installs the hyperf/di component using composer, allowing it to be used in other frameworks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/di.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/di\n```\n\n----------------------------------------\n\nTITLE: Hyperf Multiple Port Listening - server.php\nDESCRIPTION: This configures two HTTP servers in the `server.php` file, listening on different ports (9501 and 9502). It specifies the server type, host, port, and callbacks for request handling, ensuring that the `InnerHttp` server uses a different callback.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/overview.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'servers' => [\n        [\n            'name' => 'http',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9501,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [Hyperf\\HttpServer\\Server::class, 'onRequest'],\n            ],\n        ],\n        [\n            'name' => 'innerHttp',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9502,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => ['InnerHttp', 'onRequest'],\n            ],\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Model\nDESCRIPTION: This snippet shows how to retrieve a single model using the `first()` and `find()` methods. These methods return a single model instance, not a collection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$user = User::query()->where('id', 1)->first();\n\n$user = User::query()->find(1);\n```\n\n----------------------------------------\n\nTITLE: Custom Low-Frequency Component in Hyperf\nDESCRIPTION: This code demonstrates how to create a custom low-frequency component in Hyperf by extending the `Hyperf\\Pool\\Frequency` class and defining the time interval, threshold, and minimum time interval for continuous low-frequency triggering.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/pool.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Pool;\n\nclass Frequency extends \\Hyperf\\Pool\\Frequency\n{\n    /**\n     * The time interval of the calculated frequency\n     * @var int\n     */\n    protected $time = 10;\n\n    /**\n     * Threshold\n     * @var int\n     */\n    protected $lowFrequency = 5;\n\n    /**\n     * Minimum time interval for continuous low frequency triggering\n     * @var int\n     */\n    protected $lowFrequencyInterval = 60;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Concurrent Coroutine Execution Control\nDESCRIPTION: Demonstrates how to control the number of simultaneously running coroutines using `Hyperf\\Coroutine\\Concurrent`.  This code creates a Concurrent instance that allows a maximum of 10 coroutines to run at the same time.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/coroutine.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Coroutine\\Concurrent;\n\n$concurrent = new Concurrent(10);\n\nfor ($i = 0; $i < 15; ++$i) {\n    $concurrent->create(function () {\n        // Do something...\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditional Validation - PHP\nDESCRIPTION: This example shows how to apply conditional validation to multiple fields at once using the `sometimes` method. Both 'reason' and 'cost' fields are required if the 'games' field is greater than or equal to 100. Requires an instance of `Hyperf\\Validation\\Validator` named `$v` and a `$data` array for validation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_46\n\nLANGUAGE: PHP\nCODE:\n```\n$v->sometimes(['reason', 'cost'], 'required', function($input) {\n    return $input->games >= 100;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Foreign Key Constraint\nDESCRIPTION: This code snippet illustrates how to create a foreign key constraint using the `foreign()`, `references()`, and `on()` methods. It defines a foreign key relationship between the `posts` table's `user_id` column and the `users` table's `id` column.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nSchema::table('posts', function (Blueprint $table) {\n    $table->unsignedInteger('user_id');\n\n    $table->foreign('user_id')->references('id')->on('users');\n});\n```\n\n----------------------------------------\n\nTITLE: Handle HTTP Route with ReactiveX\nDESCRIPTION: This example demonstrates how to handle HTTP routes using ReactiveX with `Observable::fromHttpRoute`. It intercepts POST or PUT requests to the '/save' endpoint, buffers the request bodies until 10 requests are received, and then processes them as a batch. The `map` operator extracts the request body, and the `bufferWithCount` operator collects the bodies into an array of 10 elements.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/reactive-x.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\ReactiveX\\Example;\n\nuse Hyperf\\Database\\Events\\QueryExecuted;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\nuse Hyperf\\ReactiveX\\Observable;\nuse Psr\\Http\\Message\\RequestInterface;\n\nclass BatchSaveRoute implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            BootApplication::class,\n        ];\n    }\n\n    /**\n     * @param QueryExecuted $event\n     */\n    public function process(object $event)\n    {\n        Observable::fromHttpRoute(['POST', 'PUT'], '/save')\n            ->map(\n                function (RequestInterface $request) {\n                    return $request->getBody();\n                }\n            )\n            ->bufferWithCount(10)\n            ->subscribe(\n                function (array $bodies) {\n                    echo count($bodies); //10\n                }\n            );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Migration Class Example (php)\nDESCRIPTION: This code snippet illustrates the structure of a typical migration class in Hyperf. The `up` method defines the schema changes to be applied, such as creating a table. The `down` method reverses the changes made by the `up` method, allowing for rollback.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Database\\Schema\\Schema;\nuse Hyperf\\Database\\Schema\\Blueprint;\nuse Hyperf\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('true', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('true');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying or Enhancing Original Method in Hyperf Aspect in PHP\nDESCRIPTION: This code snippet shows how to modify or enhance the original method within an Aspect in Hyperf. It demonstrates how to access the reflection of the current method, retrieve arguments passed to the method, get the original class instance, access annotation metadata, and call the original method without proxy influence. It also demonstrates how to completely replace the original method by returning a different result. The ProceedingJoinPoint provides methods to interact with the original method and its context.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/aop.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Aspect;\n\nuse App\\Service\\SomeClass;\nuse App\\Annotation\\SomeAnnotation;\nuse Hyperf\\Di\\Annotation\\Aspect;\nuse Hyperf\\Di\\Aop\\AbstractAspect;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\n#[Aspect]\nclass FooAspect extends AbstractAspect\n{\n    public array $classes = [\n        SomeClass::class,\n        'App\\Service\\SomeClass::someMethod',\n        'App\\Service\\SomeClass::*Method',\n    ];\n\n    public array $annotations = [\n        SomeAnnotation::class,\n    ];\n\n    public function process(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        // 獲取當前方法反射原型\n        /** @var \\ReflectionMethod **/\n        $reflect = $proceedingJoinPoint->getReflectMethod();\n\n        // 獲取調用方法時提交的參數\n        $arguments = $proceedingJoinPoint->getArguments(); // array\n\n        // 獲取原類的實例並調用原類的其他方法\n        $originalInstance = $proceedingJoinPoint->getInstance();\n        $originalInstance->yourFunction();\n\n        // 獲取註解元數據\n        /** @var \\Hyperf\\Di\\Aop\\AnnotationMetadata **/\n        $metadata = $proceedingJoinPoint->getAnnotationMetadata();\n\n        // 調用不受代理類影響的原方法\n        $proceedingJoinPoint->processOriginalMethod();\n\n        // 不執行原方法，做其他操作\n        $result = date('YmdHis', time() - 86400);\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting XML data from Request in Hyperf\nDESCRIPTION: This code snippet shows how to retrieve the raw XML data from a Hyperf request.  It accesses the request body and extracts its contents. This is particularly useful when handling WeChat payment callbacks, where the data is typically sent as XML.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/sdks/wechat.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$xml = $this->request->getBody()->getContents();\n```\n\n----------------------------------------\n\nTITLE: IpcSubject Usage in WebSocket Controller (PHP)\nDESCRIPTION: This code snippet demonstrates the use of `IpcSubject` in a WebSocket controller to share chat messages between worker processes. It utilizes `ReplaySubject` to display the last 5 messages to new users.  The `BroadcasterInterface` is injected to facilitate inter-process communication. Requires `Hyperf\\Contract\\OnCloseInterface`, `Hyperf\\Contract\\OnMessageInterface`, `Hyperf\\Contract\\OnOpenInterface`, `Hyperf\\ReactiveX\\Contract\\BroadcasterInterface`, `Hyperf\\ReactiveX\\IpcSubject`, `Rx\\Subject\\ReplaySubject`, `Swoole\\Http\\Request`, `Swoole\\Server`, `Swoole\\WebSocket\\Frame`, and `Swoole\\WebSocket\\Server`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/reactive-x.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\ReactiveX\\Example;\n\nuse Hyperf\\Contract\\OnCloseInterface;\nuse Hyperf\\Contract\\OnMessageInterface;\nuse Hyperf\\Contract\\OnOpenInterface;\nuse Hyperf\\ReactiveX\\Contract\\BroadcasterInterface;\nuse Hyperf\\ReactiveX\\IpcSubject;\nuse Rx\\Subject\\ReplaySubject;\nuse Swoole\\Http\\Request;\nuse Swoole\\Server;\nuse Swoole\\WebSocket\\Frame;\nuse Swoole\\WebSocket\\Server as WebSocketServer;\n\nclass WebSocketController implements OnMessageInterface, OnOpenInterface, OnCloseInterface\n{\n    private IpcSubject $subject;\n\n    private $subscriber = [];\n\n    public function __construct(BroadcasterInterface $broadcaster)\n    {\n        $relaySubject = make(ReplaySubject::class, ['bufferSize' => 5]);\n        // The first parameter is the original RxPHP Subject object.\n        // The second parameter is the broadcast mode, the default is the whole process broadcast\n        // The third parameter is the channel ID, each channel can only receive messages from the same channel.\n        $this->subject = new IpcSubject($relaySubject, $broadcaster, 1);\n    }\n\n    public function onMessage(WebSocketServer $server, Frame $frame): void\n    {\n        $this->subject->onNext($frame->data);\n    }\n\n    public function onClose(Server $server, int $fd, int $reactorId): void\n    {\n        $this->subscriber[$fd]->dispose();\n    }\n\n    public function onOpen(WebSocketServer $server, Request $request): void\n    {\n        $this->subscriber[$request->fd] = $this->subject->subscribe(function ($data) use ($server, $request) {\n            $server->push($request->fd, $data);\n        });\n    }\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Flushing Cache with DeleteListenerEvent\nDESCRIPTION: This code demonstrates how to use the DeleteListenerEvent to flush the cache associated with a specific listener. It injects the EventDispatcherInterface and dispatches the event.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/cache.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Cache\\Listener\\DeleteListenerEvent;\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\n\nclass SystemService\n{\n    #[Inject]\n    protected EventDispatcherInterface $dispatcher;\n\n    public function flushCache($userId)\n    {\n        $this->dispatcher->dispatch(new DeleteListenerEvent('user-update', [$userId]));\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Controller Implementation PHP\nDESCRIPTION: This PHP code defines a GraphQL controller with a test endpoint that handles GraphQL queries. It injects the GraphQL schema, extracts the query and variables from the request, and executes the query using GraphQL::executeQuery.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/graphql.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse GraphQL\\GraphQL;\nuse GraphQL\\Type\\Schema;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\GraphQL\\Annotation\\Query;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\PostMapping;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\n\n#[Controller]\nclass GraphQLController\n{\n    #[Inject]\n    protected Schema $schema;\n\n    #[PostMapping(path: \"/graphql\")]\n    public function test(RequestInterface $request)\n    {\n        $rawInput = $request->getBody()->getContents();\n        $input = json_decode($rawInput, true);\n        $query = $input['query'];\n        $variableValues = isset($input['variables']) ? $input['variables'] : null;\n        return GraphQL::executeQuery($this->schema, $query, null, null, $variableValues)->toArray();\n    }\n\n    #[Query]\n    public function hello(string $name): string\n    {\n        return $name;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure Service Discovery with Consul/Nacos\nDESCRIPTION: Configures service discovery and registration using Consul or Nacos in the services.php configuration file.  Requires installing the hyperf/service-governance-consul or hyperf/service-governance-nacos component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/json-rpc.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'enable' => [\n        'discovery' => true,\n        'register' => true,\n    ],\n    'consumers' => [],\n    'providers' => [],\n    'drivers' => [\n        'consul' => [\n            'uri' => 'http://127.0.0.1:8500',\n            'token' => '',\n        ],\n        'nacos' => [\n            // nacos server url like https://nacos.hyperf.io, Priority is higher than host:port\n            // 'url' => '',\n            // The nacos host info\n            'host' => '127.0.0.1',\n            'port' => 8848,\n            // The nacos account info\n            'username' => null,\n            'password' => null,\n            'guzzle' => [\n                'config' => null,\n            ],\n            'group_name' => 'api',\n            'namespace_id' => 'namespace_id',\n            'heartbeat' => 5,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Hyperf XA transIn Branch Transaction\nDESCRIPTION: This snippet shows the `transIn` branch transaction in Hyperf. It receives an amount via a POST request and updates the `order` table, simulating a deposit operation.  It uses `$dbTransaction->xaExecute` for executing the SQL within the XA transaction.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/distributed-transaction.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n #[RequestMapping(methods: [\"GET\", \"POST\", \"PUT\"], path: 'api/transIn')]\n    public function transIn(RequestInterface $request): array\n    {\n        $content = $request->post('amount');\n        $amount = $content['amount'] ?? 50;\n        // 模擬分散式系統下transIn方法\n        $this->xa->localTransaction(function (DBTransactionInterface $dbTransaction) use ($amount) {\n            // 請使用 DBTransactionInterface 處理本地 Mysql 事物\n            $dbTransaction->xaExecute('UPDATE `order` set `amount` = `amount` + ? where id = 1', [$amount]);\n        });\n\n        return ['status' => 0, 'message' => 'ok'];\n    }\n```\n\n----------------------------------------\n\nTITLE: Renaming a Table (php)\nDESCRIPTION: This code snippet renames a database table using the `Schema::rename` method. It takes two arguments: the current table name and the new table name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nSchema::rename($from, $to);\n```\n\n----------------------------------------\n\nTITLE: Set Custom Date Format for Hyperf Model Attributes\nDESCRIPTION: Sets a custom date format for Hyperf model attributes. The `$dateFormat` property specifies the format used for storing date attributes in the database and when serializing the model to an array or JSON. This example sets the format to a UNIX timestamp.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/mutators.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * 這個屬性應該被轉化為原生型別.\n     *\n     * @var string\n     */\n    protected $dateFormat = 'U';\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregation Function Usage in Hyperf\nDESCRIPTION: This snippet demonstrates how to use aggregation functions like `count` with the Hyperf query builder to retrieve scalar values from the database.  It uses the `User` model and counts the number of users where the `gender` is 1. Requires the `App\\Model\\User` model to be defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$count = User::query()->where('gender', 1)->count();\n```\n\n----------------------------------------\n\nTITLE: Inserting and retrieving ID with insertGetId in Hyperf\nDESCRIPTION: This snippet illustrates how to insert a new record and retrieve the auto-incrementing ID using the `insertGetId` method in Hyperf's query builder.  It inserts a user and retrieves assigned ID.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$id = Db::table('users')->insertGetId(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Configure EagerLoadListener\nDESCRIPTION: Enables `EagerLoadListener` in the `listeners.php` configuration file to automatically load relationships from cache, improving performance by reducing database queries.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model-cache.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\ModelCache\\Listener\\EagerLoadListener::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Method-Level Middleware with Annotation - PHP\nDESCRIPTION: This code snippet demonstrates how to define middleware for a specific method within a controller using the `#[Middleware]` annotation.  The method-level middleware will be executed after the class-level middleware, if any.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/middleware/middleware.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Middleware\\BarMiddleware;\nuse App\\Middleware\\FooMiddleware;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\HttpServer\\Annotation\\Middleware;\nuse Hyperf\\HttpServer\\Annotation\\Middlewares;\n\n#[AutoController]\n#[Middlewares([FooMiddleware::class])]\nclass IndexController\n{\n    #[Middleware(BarMiddleware::class)]\n    public function index()\n    {\n        return 'Hello Hyperf.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Attributes - HTML\nDESCRIPTION: Demonstrates how to merge attributes with the attribute bag using the `merge()` method. This allows for specifying default values or combining existing attributes with new ones.  The second argument is a boolean to determine whether to merge or overwrite the attribute.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_37\n\nLANGUAGE: html\nCODE:\n```\n    <div {{ $attributes->merge(['class' => 'alert alert-'.$type]) }}>\n        {{ $message }}\n    </div>\n```\n\nLANGUAGE: html\nCODE:\n```\n    <x-alert type=\"error\" :message=\"$message\" class=\"mb-4\"/>\n```\n\nLANGUAGE: html\nCODE:\n```\n    <div class=\"alert alert-error mb-4\">\n        <!-- $message 變數的內容 -->\n    </div>\n```\n\nLANGUAGE: html\nCODE:\n```\n// 定義\n<div {{ $attributes->merge(['class' => 'alert alert-'.$type, 'other-attr' => 'foo']) }}>{{ $message }}</div>\n// 使用\n<x-alert type=\"error\" :message=\"$message\" class=\"mb-4\" other-attr=\"bar\"/>\n// 呈現\n<div class=\"alert alert-error mb-4\" other-attr=\"bar\"><!-- $message 變數的內容 --></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n// 定義\n<div {{ $attributes->merge(['class' => 'alert alert-'.$type, 'other-attr' => 'foo'], true) }}>{{ $message }}</div>\n// 使用\n<x-alert type=\"error\" :message=\"$message\" class=\"mb-4\" other-attr=\"bar\"/>\n// 呈現\n<div class=\"alert alert-error mb-4\" other-attr=\"foo bar\"><!-- $message 變數的內容 --></div>\n```\n\n----------------------------------------\n\nTITLE: Searching within a specific index\nDESCRIPTION: Specifies a custom index to search within using the `within` method. By default, the search is performed on the index defined by the model's `searchableAs` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$orders = App\\Order::search('Star Trek')\n        ->within('tv_shows_popularity_desc')\n        ->get();\n```\n\n----------------------------------------\n\nTITLE: Enabling Scheduler Processing\nDESCRIPTION: Enables scheduler processing by setting the 'enable' configuration option to `true` in the `crontab.php` configuration file. If the configuration file doesn't exist, you can create it yourself.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/crontab.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // Whether to enable timed tasks\n    'enable' => true,\n];\n```\n\n----------------------------------------\n\nTITLE: Simplified Coroutine Parallel Usage Example\nDESCRIPTION: Demonstrates a simplified version of Hyperf's Parallel feature using the `parallel()` function for running multiple coroutines concurrently. The function takes an array of callables, automatically creates coroutines, and returns an array of results.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/coroutine.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Coroutine\\Coroutine;\n\n// 传递的数组参数您也可以带上 key 便于区分子协程，返回的结果也会根据 key 返回对应的结果\n$result = parallel([\n    function () {\n        sleep(1);\n        return Coroutine::id();\n    },\n    function () {\n        sleep(1);\n        return Coroutine::id();\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Update Records Using Model Query Builder (PHP)\nDESCRIPTION: Updates records in the search index using the `searchable` method on a model query builder. Similar to adding records, it performs an \"update insert\" operation.  If the model doesn't exist in the index, it will be created.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// 使用模型查詢語句更新...\nApp\\Order::where('price', '>', 100)->searchable();\n\n// 你也可以使用模型關係更新...\n$user->orders()->searchable();\n\n// 你也可以使用集合更新...\n$orders->searchable();\n```\n\n----------------------------------------\n\nTITLE: Configuring a TCP Server in Hyperf\nDESCRIPTION: This code snippet demonstrates the configuration for a TCP server in Hyperf. It defines the server name, type, host, port, socket type, and callbacks. The `Event::ON_RECEIVE` callback is mapped to the `onReceive` method of the `TcpServer` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tcp-server.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 以下刪除了其他不相關的配置項\n    'servers' => [\n        [\n            'name' => 'tcp',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9504,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_RECEIVE => [App\\Controller\\TcpServer::class, 'onReceive'],\n            ],\n            'settings' => [\n                // 按需配置\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Blade If Statements\nDESCRIPTION: This Blade template demonstrates how to use `@if`, `@elseif`, `@else`, and `@endif` directives to create conditional statements. The `@unless` directive is also shown as a shorthand for the inverse of an `@if` statement.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_13\n\nLANGUAGE: blade\nCODE:\n```\n@if (count($records) === 1)\n    I have one record!\n@elseif (count($records) > 1)\n    I have multiple records!\n@else\n    I don't have any records!\n@endif\n```\n\nLANGUAGE: blade\nCODE:\n```\n@unless (is_signed_in())\n    You are not signed in.\n@endunless\n```\n\n----------------------------------------\n\nTITLE: Installing Tencent Cloud COS Adapter (Flysystem v3.0)\nDESCRIPTION: Install the Tencent Cloud COS adapter for Flysystem v3.0, using overtrue/flysystem-cos v5.0. This allows interacting with Tencent Cloud Object Storage. Requires PHP and Composer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/filesystem.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-cos:^5.0\"\n```\n\n----------------------------------------\n\nTITLE: Registering Exception Handler via Annotation in Hyperf\nDESCRIPTION: This PHP code snippet demonstrates how to register an exception handler using annotations in Hyperf. The `#[RegisterHandler(server: 'http')]` annotation associates the `AppExceptionHandler` with the 'http' server. The handler logs the error and returns a 500 error response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/exception-handler.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\ExceptionHandler\\ExceptionHandler;\nuse Hyperf\\HttpMessage\\Stream\\SwooleStream;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Throwable;\nuse Hyperf\\ExceptionHandler\\Annotation\\ExceptionHandler as RegisterHandler;\n\n// The http here corresponds to the name value corresponding to the server in config/autoload/server.php\n// priority is sorting\n#[RegisterHandler(server: 'http')]\nclass AppExceptionHandler extends ExceptionHandler\n{\n    public function __construct(protected StdoutLoggerInterface $logger)\n    {\n    }\n\n    public function handle(Throwable $throwable, ResponseInterface $response)\n    {\n        $this->logger->error(sprintf('%s[%s] in %s', $throwable->getMessage(), $throwable->getLine(), $throwable->getFile()));\n        $this->logger->error($throwable->getTraceAsString());\n        return $response->withHeader('Server', 'Hyperf')->withStatus(500)->withBody(new SwooleStream('Internal Server Error.'));\n    }\n\n    public function isValid(Throwable $throwable): bool\n    {\n        return true;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata with additional()\nDESCRIPTION: This PHP code demonstrates how to add top-level metadata to a resource response using the `additional()` method within a controller. This method allows you to add metadata when constructing the resource instance, providing flexibility in defining the response structure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\UserCollection;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserCollection(User::all()->load('roles')))\n            ->additional(['meta' => [\n                'key' => 'value',\n            ]])->toResponse();    \n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: UserService with Constructor Parameter\nDESCRIPTION: This version of `UserService` accepts a boolean parameter in its constructor, which is used to determine whether to enable caching.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/di.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Service;\n\nclass UserService implements UserServiceInterface\n{\n    \n    /**\n     * @var bool\n     */\n    private $enableCache;\n    \n    public function __construct(bool $enableCache)\n    {\n        // Receiving the value and store it at an attribute\n        $this->enableCache = $enableCache;\n    }\n    \n    public function getInfoById(int $id)\n    {\n        return (new Info())->fill($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Check if Session Contains Key\nDESCRIPTION: Checks if a key exists in the session and has a non-null value. Returns true if the key exists and is not null, false otherwise.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/session.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nif ($this->session->has('foo')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Extending BaseClient for gRPC Calls\nDESCRIPTION: This PHP snippet shows how to extend the `BaseClient` class to create a specific gRPC client for the `Hi` service. It defines the `sayHello` method, which calls the `_simpleRequest` method with the appropriate parameters to invoke the gRPC service.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/grpc.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nclass HiClient extends BaseClient\n{\n    public function sayHello(HiUser $argument)\n    {\n        return $this->_simpleRequest(\n            '/grpc.hi/sayHello',\n            $argument,\n            [HiReply::class, 'decode']\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Request Method - PHP\nDESCRIPTION: Demonstrates how to retrieve the HTTP request method using `getMethod()` and how to verify the method against a specific value using `isMethod()`.  This allows you to conditionally execute code based on the request type.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$method = $request->getMethod();\n\nif ($request->isMethod('post')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Custom Type Casting with CastsAttributes Interface\nDESCRIPTION: Implements a custom type casting class using the `CastsAttributes` interface. This allows for converting data to custom types. This example demonstrates re-implementing the built-in `json` type casting. The `get` method decodes the JSON value, and the `set` method encodes the value to JSON.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/mutators.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Casts;\n\nuse Hyperf\\Contract\\CastsAttributes;\n\nclass Json implements CastsAttributes\n{\n    /**\n     * 將取出的資料進行轉換\n     */\n    public function get($model, $key, $value, $attributes)\n    {\n        return json_decode($value, true);\n    }\n\n    /**\n     * 轉換成將要進行儲存的值\n     */\n    public function set($model, $key, $value, $attributes)\n    {\n        return json_encode($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying JSON arrays with whereJsonContains in Hyperf\nDESCRIPTION: This snippet shows how to query JSON arrays using `whereJsonContains`.  It checks if a JSON array field contains a specific value. The example filters users whose 'options->languages' array contains 'en'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereJsonContains('options->languages', 'en')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Access previous step results in DAG PHP\nDESCRIPTION: This code demonstrates how to access the results of previous tasks in a DAG.  Each task function receives an array of results from its dependencies. The example shows how to retrieve the result of a specific vertex using its key and perform calculations based on it. It uses assertions to verify the correct execution and result propagation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/dag.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$dag = new \\Hyperf\\Dag\\Dag();\n$a = \\Hyperf\\Dag\\Vertex::make(function() {return 1;});\n$b = \\Hyperf\\Dag\\Vertex::make(function($results) use ($a) {\n    return $results[$a->key] + 1;\n});\n$results = $dag->addVertex($a)->addVertex($b)->addEdge($a, $b)->run();\nassert($results[$a->key] === 1);\nassert($results[$b->key] === 2);\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Index in Hyperf (PHP)\nDESCRIPTION: Illustrates how to create a compound index using Hyperf's schema builder. The `index()` method is called with an array of column names to define the index. The second argument is the name of the index.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// Create a compound index\n$table->index(['account_id', 'created_at'], 'index_account_id_and_created_at');\n```\n\n----------------------------------------\n\nTITLE: Returning a Resource from a Controller\nDESCRIPTION: Demonstrates how to return a resource instance from a Hyperf controller. It creates a new instance of the 'UserResource' class, passing in a 'User' model instance, and then calls the 'toResponse' method to convert it into a response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Resource\\User as UserResource;\nuse App\\Model\\User;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserResource(User::first()))->toResponse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve and Delete Session Data\nDESCRIPTION: Retrieves and deletes a value from the session using its key. Returns the value associated with the key before removing it from the session.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/session.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$data = $this->session->remove('foo');\n```\n\n----------------------------------------\n\nTITLE: Configuring Different Log Formats Based on Environment\nDESCRIPTION: This code configures different log formats based on the application environment (`dev` or non-`dev`). In the `dev` environment, it uses the `LineFormatter` with a specific format.  In non-dev environments, it uses the `JsonFormatter`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/logger.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/logger.php\n$appEnv = env('APP_ENV', 'dev');\nif ($appEnv == 'dev') {\n    $formatter = [\n        'class' => \\Monolog\\Formatter\\LineFormatter::class,\n        'constructor' => [\n            'format' => \"||%datetime%||%channel%||%level_name%||%message%||%context%||%extra%\\n\",\n            'allowInlineLineBreaks' => true,\n            'includeStacktraces' => true,\n        ],\n    ];\n} else {\n    $formatter = [\n        'class' => \\Monolog\\Formatter\\JsonFormatter::class,\n        'constructor' => [],\n    ];\n}\n\nreturn [\n    'default' => [\n        'handler' => [\n            'class' => \\Monolog\\Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => 'php://stdout',\n                'level' => \\Monolog\\Level::Info,\n            ],\n        ],\n        'formatter' => $formatter,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Testing DemoLogic with Constructor Injection Mock\nDESCRIPTION: This snippet shows how to test the `DemoLogic` class by mocking the `DemoApi` dependency using Mockery and PHPUnit's createMock.  The test creates a stub for the DemoApi class, defines a return value for the test method, and then replaces the binding in the container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/testing.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace HyperfTest\\Cases;\n\nuse App\\Api\\DemoApi;\nuse App\\Logic\\DemoLogic;\nuse Hyperf\\Di\\Container;\nuse HyperfTest\\HttpTestCase;\nuse Mockery;\n\nclass DemoLogicTest extends HttpTestCase\n{\n    public function tearDown(): void\n    {\n        Mockery::close();\n    }\n\n    public function testIndex()\n    {\n        $res = $this->getContainer()->get(DemoLogic::class)->test();\n\n        $this->assertEquals(1, $res['status']);\n    }\n\n    /**\n     * @return Container\n     */\n    protected function getContainer()\n    {\n        $container = Mockery::mock(Container::class);\n\n        $apiStub = $this->createMock(DemoApi::class);\n\n        $apiStub->method('test')->willReturn([\n            'status' => 1,\n        ]);\n\n        $container->shouldReceive('get')->with(DemoLogic::class)->andReturn(new DemoLogic($apiStub));\n\n        return $container;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a TCP Client in PHP\nDESCRIPTION: This code snippet demonstrates a simple TCP client implementation using `Swoole\\Client`. It connects to a specified host and port, sends data, and then receives the response from the server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tcp-server.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$client = new \\Swoole\\Client(SWOOLE_SOCK_TCP);\n$client->connect('127.0.0.1', 9504);\n$client->send('Hello World.');\n$ret = $client->recv(); // recv:Hello World.\n\n```\n\n----------------------------------------\n\nTITLE: Basic Paginator Usage in Hyperf Controller\nDESCRIPTION: This code demonstrates how to use the Hyperf Paginator within a Hyperf controller to paginate a collection of user data. It retrieves the current page and per-page limit from the request, creates a Collection, paginates it using `forPage`, and returns a `Paginator` instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/paginator.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\Paginator\\Paginator;\nuse Hyperf\\Collection\\Collection;\n\n#[AutoController]\nclass UserController\n{\n    public function index(RequestInterface $request)\n    {\n        $currentPage = (int) $request->input('page', 1);\n        $perPage = (int) $request->input('per_page', 2);\n\n        // 這裏根據 $currentPage 和 $perPage 進行數據查詢，以下使用 Collection 代替\n        $collection = new Collection([\n            ['id' => 1, 'name' => 'Tom'],\n            ['id' => 2, 'name' => 'Sam'],\n            ['id' => 3, 'name' => 'Tim'],\n            ['id' => 4, 'name' => 'Joe'],\n        ]);\n\n        $users = array_values($collection->forPage($currentPage, $perPage)->toArray());\n\n        return new Paginator($users, $perPage, $currentPage);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scout Configuration File\nDESCRIPTION: This code block presents the contents of the scout.php configuration file. It defines the default search engine, chunk sizes for indexing, index prefix, soft delete handling, concurrency settings, and engine-specific configurations, such as Elasticsearch hosts and index name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => env('SCOUT_ENGINE', 'elasticsearch'),\n    'chunk' => [\n        'searchable' => 500,\n        'unsearchable' => 500,\n    ],\n    'prefix' => env('SCOUT_PREFIX', ''),\n    'soft_delete' => false,\n    'concurrency' => 100,\n    'engine' => [\n        'elasticsearch' => [\n            'driver' => Hyperf\\Scout\\Provider\\ElasticsearchProvider::class,\n            // 如果 index 设置为 null，则每个模型会对应一个索引，反之每个模型对应一个类型\n            'index' => null,\n            'hosts' => [\n                env('ELASTICSEARCH_HOST', 'http://127.0.0.1:9200'),\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Creating NATS Consumer\nDESCRIPTION: This code defines a NATS consumer class named `DemoConsumer` that extends `AbstractConsumer` and uses the `Consumer` annotation. The annotation specifies the subject, queue, name, and number of instances for the consumer. The `consume` method is where the message processing logic is implemented.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nats.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Nats\\Consumer;\n\nuse Hyperf\\Nats\\AbstractConsumer;\nuse Hyperf\\Nats\\Annotation\\Consumer;\nuse Hyperf\\Nats\\Message;\n\n#[Consumer(subject: 'hyperf.demo', queue: 'hyperf.demo', name: 'DemoConsumer', nums: 1)]\nclass DemoConsumer extends AbstractConsumer\n{\n    public function consume(Message $payload)\n    {\n        // Do something...\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure Session Middleware\nDESCRIPTION: Configures the `Hyperf\\Session\\Middleware\\SessionMiddleware` as a global middleware for the HTTP server. This middleware intercepts requests to manage session data. It must be added to the `config/autoload/middlewares.php` file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/session.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    // 这里的 http 对应默认的 server name，如您需要在其它 server 上使用 Session，需要对应的配置全局中间件\n    'http' => [\n        \\Hyperf\\Session\\Middleware\\SessionMiddleware::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using ConstantFrequency in Hyperf\nDESCRIPTION: Illustrates how to use the `ConstantFrequency` component, which utilizes a timer to periodically flush idle connections from the pool.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/pool.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\DbConnection\\Frequency::class => Hyperf\\Pool\\ConstantFrequency::class,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with a Specific Connection in PHP\nDESCRIPTION: Defines a `User` model that uses the `test` database connection. This is achieved by setting the `$connection` property of the model class. The model also defines the table name, fillable attributes, and castable attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/quick-start.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n *\n * @link     https://www.hyperf.io\n * @document https://doc.hyperf.io\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\n\nnamespace App\\Model;\n\n/**\n * @property int $id\n * @property string $mobile\n * @property string $realname\n */\nclass User extends Model\n{\n    /**\n     * The table associated with the model.\n     *\n     * @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * The connection name for the model.\n     *\n     * @var string\n     */\n    protected $connection = 'test';\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = ['id', 'mobile', 'realname'];\n\n    /**\n     * The attributes that should be cast to native types.\n     *\n     * @var array\n     */\n    protected $casts = ['id' => 'integer'];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Signal Components for Safe Shutdown\nDESCRIPTION: This shell command installs the necessary Hyperf components (`hyperf/signal` and `hyperf/process`) required to implement safe shutdown procedures for asynchronous queue processes. This ensures that ongoing consumer logic is completed before termination, preventing errors.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_21\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/signal\ncomposer require hyperf/process\n```\n\n----------------------------------------\n\nTITLE: Checking Record Existence - PHP\nDESCRIPTION: This example shows how to determine if records exist based on specific criteria using the `exists()` and `doesntExist()` methods.  It checks for the existence or non-existence of records in the 'orders' table where the 'finalized' column is equal to 1.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nreturn Db::table('orders')->where('finalized', 1)->exists();\n\nreturn Db::table('orders')->where('finalized', 1)->doesntExist();\n```\n\n----------------------------------------\n\nTITLE: Renaming Index in Hyperf (PHP)\nDESCRIPTION: Demonstrates how to rename an existing index using the `renameIndex()` method in Hyperf's schema builder. The method takes the old index name and the new index name as arguments.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n$table->renameIndex('from', 'to');\n```\n\n----------------------------------------\n\nTITLE: Install Doctrine DBAL Dependency\nDESCRIPTION: This command installs the Doctrine DBAL library, which is required for modifying columns. The Doctrine DBAL library is used to determine the current state of columns and construct the SQL queries necessary to make the specified adjustments to the column.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require \"doctrine/dbal:^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Drop Foreign Key Constraint by Field\nDESCRIPTION: This example shows how to drop a foreign key constraint using the `dropForeign()` method by providing the field associated with the foreign key, utilizing the naming convention. It removes a foreign key constraint associated with the 'user_id' field.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\n$table->dropForeign(['user_id'']);\n```\n\n----------------------------------------\n\nTITLE: Adding Searchable Trait to Model\nDESCRIPTION: This code snippet demonstrates how to add the `Hyperf\\Scout\\Searchable` trait to a model. This trait registers a model observer that automatically synchronizes the model with the search index whenever the model is created, updated, or deleted.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\Database\\Model\\Model;\nuse Hyperf\\Scout\\Searchable;\n\nclass Post extends Model\n{\n    use Searchable;\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregate query with count() in Hyperf\nDESCRIPTION: This snippet demonstrates how to use the `count()` aggregate method to retrieve the number of records in a database table in Hyperf. It queries the 'user' table and returns the total count of users.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\DbConnection\\Db;\n\n$count = Db::table('user')->count();\n```\n\n----------------------------------------\n\nTITLE: Generating Model via Command Line (Hyperf)\nDESCRIPTION: Demonstrates generating a model using the `gen:model` command in Hyperf. The command creates a model based on a database table schema, providing various options such as specifying the connection pool, model path, and whether to force casting or refresh fillable attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp bin/hyperf.php gen:model table_name\n```\n\n----------------------------------------\n\nTITLE: Batch Delete with Query Builder\nDESCRIPTION: Demonstrates how to delete user data from the database using the query builder, which automatically deletes the corresponding cached data. The `query(true)` enables the cache deletion during the delete operation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model-cache.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// 從數據庫刪除用户數據，框架會自動刪除對應的緩存數據\nUser::query(true)->where('gender', '>', 1)->delete();\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Redis Databases\nDESCRIPTION: This PHP code snippet showcases how to configure multiple Redis databases within the Hyperf framework. It defines two connection pools, 'default' and 'foo', each with its own host, authentication, port, and database settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/redis.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', ''),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'cluster' => [\n            'enable' => (bool) env('REDIS_CLUSTER_ENABLE', false),\n            'name' => null,\n            'seeds' => [],\n        ],\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n    ],\n    // 增加一個名為 foo 的 Redis 連接池\n    'foo' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', ''),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => 1,\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Define Command by $name Property (PHP)\nDESCRIPTION: This code snippet demonstrates defining a command named `foo:hello` by setting the `$name` property of the command class.  The command extends `HyperfCommand` and uses the `#[Command]` annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    /**\n     * The command\n     *\n     * @var string\n     */\n    protected ?string $name = 'foo:hello';\n}\n```\n\n----------------------------------------\n\nTITLE: Unique Rule Ignoring a Model Instance - PHP\nDESCRIPTION: This example shows how to pass an entire model instance to the `ignore()` method of the `Rule::unique()` validator. This simplifies ignoring the user's own email during updates. It relies on `Hyperf\\Validation\\Rule` and a `$user` object, automatically extracting the primary key. The rule targets the 'email' field.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_40\n\nLANGUAGE: PHP\nCODE:\n```\nRule::unique('users')->ignore($user)\n```\n\n----------------------------------------\n\nTITLE: Hyperf View Configuration File Example\nDESCRIPTION: Illustrates the structure and available configuration options for the hyperf/view component, including engine class, rendering mode (Task or Sync), view path, and cache path. Defines the rendering engine to use and the paths for view files and cached views.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nuse Hyperf\\View\\Mode;\nuse Hyperf\\View\\Engine\\BladeEngine;\n\nreturn [\n    // The rendering engine used\n    'engine' => BladeEngine::class,\n    // If you don't fill it in, the default is Task mode, it is recommended to use Task mode\n    'mode' => Mode::TASK,\n    'config' => [\n        // If the following folder does not exist, please create it yourself\n        'view_path' => BASE_PATH.'/storage/view/',\n        'cache_path' => BASE_PATH.'/runtime/view/',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Retry Annotation Class Definition PHP\nDESCRIPTION: This code defines a custom retry annotation `MyRetry` in Hyperf. It inherits from `AbstractRetry` and allows for defining custom retry policies and parameters. This allows for greater control over retry behavior than the default `Retry` annotation. Requires the `Doctrine\\Common\\Annotations\\Annotation\\Target` and `Attribute` for PHP 8+.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/retry.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Annotation;\n\nuse Doctrine\\Common\\Annotations\\Annotation\\Target;\n\n#[Attribute(Attribute::TARGET_METHOD)]\nclass MyRetry extends \\Hyperf\\Retry\\Annotation\\AbstractRetry\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Returning XML Response in Hyperf\nDESCRIPTION: This snippet demonstrates how to return an XML response using the `xml()` method of the `Hyperf\\HttpServer\\Contract\\ResponseInterface`. It sets the `Content-Type` header to `application/xml` and accepts an array or an object that implements the `Hyperf\\Contract\\Xmlable` interface as data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/response.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function xml(ResponseInterface $response): Psr7ResponseInterface\n    {\n        $data = [\n            'key' => 'value'\n        ];\n        return $response->xml($data);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Manually Creating a Consumer Class\nDESCRIPTION: This code snippet demonstrates how to manually create a consumer class in Hyperf. It extends the `AbstractServiceClient` class and implements the `CalculatorServiceInterface` interface. The `$serviceName` and `$protocol` properties define the service and protocol. The `add` method calls the remote service using the `__request` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/json-rpc.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\JsonRpc;\n\nuse Hyperf\\RpcClient\\AbstractServiceClient;\n\nclass CalculatorServiceConsumer extends AbstractServiceClient implements CalculatorServiceInterface\n{\n    /**\n     * 定義對應服務提供者的服務名稱\n     */\n    protected string $serviceName = 'CalculatorService';\n    \n    /**\n     * 定義對應服務提供者的服務協議\n     */\n    protected string $protocol = 'jsonrpc-http';\n\n    public function add(int $a, int $b): int\n    {\n        return $this->__request(__FUNCTION__, compact('a', 'b'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TCP Server Class in Hyperf\nDESCRIPTION: This code snippet demonstrates how to create a TCP server class in Hyperf. It implements the `OnReceiveInterface` and defines the `onReceive` method, which handles incoming data and sends a response back to the client.  The `$server` parameter is the Swoole server instance, `$fd` is the client connection file descriptor, `$reactorId` is the ID of the reactor thread, and `$data` is the data received from the client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tcp-server.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnReceiveInterface;\n\nclass TcpServer implements OnReceiveInterface\n{\n    public function onReceive($server, int $fd, int $reactorId, string $data): void\n    {\n        $server->send($fd, 'recv:' . $data);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: FailToExecute Event Listener\nDESCRIPTION: This code defines a listener for the `FailToExecute` event, which is triggered when a scheduled task fails to execute. It extracts the Crontab name and the exception message and logs them.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/crontab.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Crontab\\Event\\FailToExecute;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Psr\\Container\\ContainerInterface;\n\n#[Listener]\nclass FailToExecuteCrontabListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            FailToExecute::class,\n        ];\n    }\n\n    /**\n     * @param FailToExecute $event\n     */\n    public function process(object $event)\n    {\n        var_dump($event->crontab->getName());\n        var_dump($event->throwable->getMessage());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Hyperf Nano Application\nDESCRIPTION: Creates a basic Hyperf Nano application that listens on a specified host and port. It defines a route that returns a JSON response containing a greeting and the request method. Requires the `hyperf/nano` package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nano.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// index.php\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create('0.0.0.0', 9051);\n\n$app->get('/', function () {\n\n    $user = $this->request->input('user', 'nano');\n    $method = $this->request->getMethod();\n\n    return [\n        'message' => \"hello {$user}\",\n        'method' => $method,\n    ];\n\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Using RateLimit Annotation\nDESCRIPTION: Demonstrates how to use the `RateLimit` annotation to apply rate limiting to controller methods. The example shows configuring `create` and `capacity` parameters for a specific route.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/rate-limit.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\nuse Hyperf\\RateLimit\\Annotation\\RateLimit;\n\n#[Controller(prefix: \"rate-limit\")]\nclass RateLimitController\n{\n    #[RequestMapping(path: \"test\")]\n    #[RateLimit(create: 1, capacity: 3)]\n    public function test()\n    {\n        return [\"QPS 1, 峰值3\"];\n    }\n\n    #[RequestMapping(path: \"test2\")]\n    #[RateLimit(create: 2, consume: 2, capacity: 4)]\n    public function test2()\n    {\n        return [\"QPS 2, 峰值2\"];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Parameter Validation in Hyperf\nDESCRIPTION: This code snippet shows how to define routes with regular expression constraints on the parameters.  It showcases how to define required, optional, and validated parameters using regular expressions within the URI pattern.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/router.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\HttpServer\\Router\\Router;\n\n// 可以匹配 /user/42, 但不能匹配 /user/xyz\nRouter::addRoute('GET', '/user/{id:\\d+}', 'handler');\n\n// 可以匹配 /user/foobar, 但不能匹配 /user/foo/bar\nRouter::addRoute('GET', '/user/{name}', 'handler');\n\n// 也可以匹配 /user/foo/bar as well\nRouter::addRoute('GET', '/user/{name:.+}', 'handler');\n\n// 这个路由\nRouter::addRoute('GET', '/user/{id:\\d+}[/{name}]', 'handler');\n// 等同于以下的两个路由\nRouter::addRoute('GET', '/user/{id:\\d+}', 'handler');\nRouter::addRoute('GET', '/user/{id:\\d+}/{name}', 'handler');\n\n// 多个可选的嵌套也是允许的\nRouter::addRoute('GET', '/user[/{id:\\d+}[/{name}]]', 'handler');\n\n// 这是一条无效的路由, 因为可选部分只能出现在最后\nRouter::addRoute('GET', '/user[/{id:\\d+}]/{name}', 'handler');\n```\n\n----------------------------------------\n\nTITLE: Coroutine Memory Driver Configuration\nDESCRIPTION: Configures the cache driver to use coroutine-local memory (Context) for caching.  This is suitable for caching data within a single request cycle.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/cache.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass Demo\n{\n    public function get($userId, $id)\n    {\n        return $this->getArray($userId)[$id] ?? 0;\n    }\n\n    #[Cacheable(prefix: \"test\", group: \"co\")]\n    public function getArray(int $userId): array\n    {\n        return $this->redis->hGetAll($userId);\n    }\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'co' => [\n        'driver' => Hyperf\\Cache\\Driver\\CoroutineMemoryDriver::class,\n        'packer' => Hyperf\\Codec\\Packer\\PhpSerializerPacker::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Server\nDESCRIPTION: This PHP configuration adds a new WebSocket server named 'ws' to the Hyperf application, specifying the host, port, socket type, and callbacks for handshake, message, and close events. It configures the server to listen on port 9502 for WebSocket connections.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/websocket-server.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'servers' => [\n        [\n            'name' => 'ws',\n            'type' => Server::SERVER_WEBSOCKET,\n            'host' => '0.0.0.0',\n            'port' => 9502,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_HAND_SHAKE => [Hyperf\\WebSocketServer\\Server::class, 'onHandShake'],\n                Event::ON_MESSAGE => [Hyperf\\WebSocketServer\\Server::class, 'onMessage'],\n                Event::ON_CLOSE => [Hyperf\\WebSocketServer\\Server::class, 'onClose'],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Async Queue\nDESCRIPTION: Installs the `hyperf/async-queue` package using Composer, which provides asynchronous queue capabilities.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/async-queue.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/async-queue\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Models (Hyperf)\nDESCRIPTION: Demonstrates how to retrieve multiple model instances from the database using the `find` method with an array of IDs in Hyperf. This method returns a collection of models matching the specified IDs.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$users = User::query()->find([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Cacheable Annotation with Value\nDESCRIPTION: Demonstrates how to use the `value` parameter in the `Cacheable` annotation to dynamically generate cache keys based on the properties of an object. The cache key will be `c:userBook:_1` if `$user->id = 1`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/cache.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass UserBookService\n{\n    #[Cacheable(prefix: \"userBook\", ttl: 6666, value: \"_#{user.id}\")]\n    public function userBook(User $user): array\n    {\n        return [\n            'book' => $user->book->toArray(),\n            'uuid' => $this->unique(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Storage Adapter Configuration\nDESCRIPTION: Configures the Prometheus driver to use Redis for storing metrics, by replacing the default memory adapter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    Prometheus\\Storage\\Adapter::class => Hyperf\\Metric\\Adapter\\Prometheus\\RedisStorageFactory::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Using SimplePool in Hyperf (PHP)\nDESCRIPTION: This example showcases how to use the `SimplePool` implementation in Hyperf. It retrieves the `PoolFactory` from the container, creates a pool with a specified connection factory, and then retrieves and releases connections.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/pool.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Pool\\SimplePool\\PoolFactory;\nuse Swoole\\Coroutine\\Http\\Client;\n\n$factory = $container->get(PoolFactory::class);\n\n$pool = $factory->get('your pool name', function () use ($host, $port, $ssl) {\n    return new Client($host, $port, $ssl);\n}, [\n    'max_connections' => 50\n]);\n\n$connection = $pool->get();\n\n$client = $connection->getConnection(); // 即上述 Client.\n\n// Do something.\n\n$connection->release();\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Ordering - Hyperf PHP\nDESCRIPTION: Shows how to use the `when` method with a third closure to define a default ordering in Hyperf. If the first argument to `when` is false, the third closure will be executed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$sortBy = null;\n\n$users = Db::table('users')\n    ->when($sortBy, function ($query, $sortBy) {\n        return $query->orderBy($sortBy);\n    }, function ($query) {\n        return $query->orderBy('name');\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Dropping Foreign Key Constraint by Field\nDESCRIPTION: This snippet demonstrates how to drop a foreign key constraint by passing the column(s) involved in the constraint. The migration builder infers the name based on the table and field(s).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\n$table->dropForeign(['user_id'']);\n```\n\n----------------------------------------\n\nTITLE: SQL Query Listener using Observable::fromEvent (PHP)\nDESCRIPTION: Optimizes SQL query logging by filtering queries exceeding 100ms and limiting logging to once per second per connection. This example demonstrates using `Observable::fromEvent` to react to `QueryExecuted` events, applying filters, grouping by connection, throttling, and logging slow queries.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/reactive-x.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\ReactiveX\\Example;\n\nuse Hyperf\\Database\\Events\\QueryExecuted;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BeforeWorkerStart;\nuse Hyperf\\Logger\\LoggerFactory;\nuse Hyperf\\ReactiveX\\Observable;\nuse Hyperf\\Collection\\Arr;\nuse Hyperf\\Stringable\\Str;\nuse Psr\\Container\\ContainerInterface;\n\nclass SqlListener implements ListenerInterface\n{\n    private $logger;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->logger = $container->get(LoggerFactory::class)->get('sql');\n    }\n\n    public function listen(): array\n    {\n        return [\n            BeforeWorkerStart::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        Observable::fromEvent(QueryExecuted::class)\n            ->filter(\n                function ($event) {\n                    return $event->time > 100;\n                }\n            )\n            ->groupBy(\n                function ($event) {\n                    return $event->connectionName;\n                }\n            )\n            ->flatMap(\n                function ($group) {\n                    return $group->throttle(1000);\n                }\n            )\n            ->map(\n                function ($event) {\n                    $sql = $event->sql;\n                    if (! Arr::isAssoc($event->bindings)) {\n                        foreach ($event->bindings as $key => $value) {\n                            $sql = Str::replaceFirst('?', \"'{$value}'\", $sql);\n                        }\n                    }\n                    return [$event->connectionName, $event->time, $sql];\n                }\n            )->subscribe(\n                function ($message) {\n                    $this->logger->info(sprintf('slow log: [%s] [%s] %s', ...$message));\n                }\n            );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Server Connection in Hyperf\nDESCRIPTION: This configuration snippet shows how to define a SQL Server database connection in the `config/autoload/databases.php` file. It uses environment variables to configure the driver, host, database, port, username, password, odbc_datasource_name and odbc.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/quick-start.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/databases.php\nreturn [\n     // 其他配置\n    'sqlserver' => [\n        'driver' => env('DB_DRIVER', 'sqlsrv'),\n        'host' => env('DB_HOST', 'mssql'),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'port' => env('DB_PORT', 1443),\n        'username' => env('DB_USERNAME', 'SA'),\n        'password' => env('DB_PASSWORD'),\n        'odbc_datasource_name' => 'DRIVER={ODBC Driver 18 for SQL Server};SERVER=127.0.0.1,1433;TrustServerCertificate=yes;database=hyperf',\n        'odbc'  =>  true,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Unique Rule with Custom Primary Key - PHP\nDESCRIPTION: This snippet shows how to specify a custom primary key field when using the `ignore()` method with the `Rule::unique()` rule. This is useful if the table's primary key column is not named `id`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_42\n\nLANGUAGE: PHP\nCODE:\n```\n'email' => Rule::unique('users')->ignore($user->id, 'user_id')\n```\n\n----------------------------------------\n\nTITLE: Defining a Task with a Closure in Hyperf DAG\nDESCRIPTION: This code shows how to define a task using a closure function with Vertex::make. The first argument is a closure that represents the task's logic, and the optional second argument is a key to identify the vertex, used for retrieving the result.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/dag.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Vertex::make 的第二个参数为可选参数，作为 vertex 的 key，也就是结果数组的键值。\n\\Hyperf\\Dag\\Vertex::make(function() { return 'hello'; }, \"greeting\");\n```\n\n----------------------------------------\n\nTITLE: Customized Swagger UI HTML in Configuration\nDESCRIPTION: This code snippet shows an example of customizing the Swagger UI HTML directly in the `config/autoload/swagger.php` configuration file by replacing `unpkg.hyperf.wiki` with `unpkg.com`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/swagger.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'enable' => true,\n    'port' => 9500,\n    'json_dir' => BASE_PATH . '/storage/swagger',\n    'html' => <<<'HTML'\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta\n      name=\"description\"\n      content=\"SwaggerUI\"\n    />\n    <title>SwaggerUI</title>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui.css\" />\n  </head>\n  <body>\n  <div id=\"swagger-ui\"></div>\n  <script src=\"https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui-bundle.js\" crossorigin></script>\n  <script src=\"https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui-standalone-preset.js\" crossorigin></script>\n  <script>\n    window.onload = () => {\n      window.ui = SwaggerUIBundle({\n        url: GetQueryString(\"search\"),\n        dom_id: '#swagger-ui',\n        presets: [\n          SwaggerUIBundle.presets.apis,\n          SwaggerUIStandalonePreset\n        ],\n        layout: \"StandaloneLayout\",\n      });\n    };\n    function GetQueryString(name) {\n      var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\", \"i\");\n      var r = window.location.search.substr(1).match(reg); //获取url中\"?\"符后的字符串并正则匹配\n      var context = \"\";\n      if (r != null)\n        context = decodeURIComponent(r[2]);\n      reg = null;\n      r = null;\n      return context == null || context == \"\" || context == \"undefined\" ? \"/http.json\" : context;\n    }\n  </script>\n  </body>\n</html>\nHTML,\n    'url' => '/swagger',\n    'auto_generate' => true,\n    'scan' => [\n        'paths' => null,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Custom Meta Generator\nDESCRIPTION: Defines a custom Meta generator based on UserId. This example demonstrates how to override the default Meta generation logic and generate IDs based on a UserId modulo 31.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/snowflake.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Snowflake\\IdGenerator\\SnowflakeIdGenerator;\n\nclass UserDefinedIdGenerator\n{\n    protected SnowflakeIdGenerator $idGenerator;\n\n    public function __construct(SnowflakeIdGenerator $idGenerator)\n    {\n        $this->idGenerator = $idGenerator;\n    }\n\n    public function generate(int $userId)\n    {\n        $meta = $this->idGenerator->getMetaGenerator()->generate();\n\n        return $this->idGenerator->generate($meta->setWorkerId($userId % 31));\n    }\n\n    public function degenerate(int $id)\n    {\n        return $this->idGenerator->degenerate($id);\n    }\n}\n\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n$generator = $container->get(UserDefinedIdGenerator::class);\n$userId = 20190620;\n\n$id = $generator->generate($userId);\n\n```\n\n----------------------------------------\n\nTITLE: Defining a RPC Service in Hyperf\nDESCRIPTION: Creates an RPC service class that implements the CalculatorServiceInterface. The #[RpcService] attribute registers the class as an RPC service with the specified name, server, and protocol. This service will be accessible via RPC calls using the defined interface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/rpc-multiplex.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\RPC;\n\nuse App\\JsonRpc\\CalculatorServiceInterface;\nuse Hyperf\\RpcMultiplex\\Constant;\nuse Hyperf\\RpcServer\\Annotation\\RpcService;\n\n#[RpcService(name: \"CalculatorService\", server: \"rpc\", protocol: Constant::PROTOCOL_DEFAULT)]\nclass CalculatorService implements CalculatorServiceInterface\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Modify Interface File to Use Object - Hyperf\nDESCRIPTION: This snippet modifies the `CalculatorServiceInterface` interface to use the `MathValue` object as both input and output. The `sum` method now accepts two `MathValue` objects and returns a `MathValue` object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/json-rpc.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\JsonRpc;\n\ninterface CalculatorServiceInterface\n{\n    public function sum(MathValue $v1, MathValue $v2): MathValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel Example for Concurrent Execution\nDESCRIPTION: This example demonstrates the `Parallel` feature for concurrent execution of coroutines. Two tasks, each simulating a 1-second sleep, are added to the `Parallel` object, and then executed concurrently. The `wait` method retrieves the results from both coroutines after they have completed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/coroutine.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Coroutine\\Exception\\ParallelExecutionException;\nuse Hyperf\\Coroutine\\Coroutine;\nuse Hyperf\\Coroutine\\Parallel;\n\n$parallel = new Parallel();\n$parallel->add(function () {\n    sleep(1);\n    return Coroutine::id();\n});\n$parallel->add(function () {\n    sleep(1);\n    return Coroutine::id();\n});\n\ntry{\n    // $results 結果為 [1, 2]\n   $results = $parallel->wait(); \n} catch(ParallelExecutionException $e){\n    // $e->getResults() 獲取協程中的返回值。\n    // $e->getThrowables() 獲取協程中出現的異常。\n}\n```\n\n----------------------------------------\n\nTITLE: MIME Types Validation\nDESCRIPTION: The `mimetypes:text/plain…` rule validates that a file has one of the specified MIME types.  This example shows how to validate the MIME types of a video file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\n'video' => 'mimetypes:video/avi,video/mpeg,video/quicktime'\n```\n\n----------------------------------------\n\nTITLE: Control Cache TTL at Model Level\nDESCRIPTION: Shows how to define a custom cache TTL for a specific model, overriding the default TTL configured in `database.php`. If the method returns null, the default TTL from the configuration is used.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model-cache.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model implements CacheableInterface\n{\n    use Cacheable;\n    \n    /**\n     * 緩存 10 分鐘，返回 null 則使用配置文件中設置的超時時間\n     * @return int|null\n     */\n    public function getCacheTTL(): ?int\n    {\n        return 600;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Where Between Clauses - PHP\nDESCRIPTION: Demonstrates using `whereBetween` and `whereNotBetween`. These can filter based on whether a column's value is within a specified range.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->whereBetween('votes', [1, 100])->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->whereNotBetween('votes', [1, 100])->get();\n```\n\n----------------------------------------\n\nTITLE: Defining Aspect with Annotations Directly in Hyperf\nDESCRIPTION: This code demonstrates using the `Aspect` annotation with its `classes` and `annotations` properties to define the pointcuts for the aspect. This achieves the same result as defining the `$classes` and `$annotations` properties within the class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/aop.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Aspect;\n\nuse App\\Service\\SomeClass;\nuse App\\Annotation\\SomeAnnotation;\nuse Hyperf\\Di\\Annotation\\Aspect;\nuse Hyperf\\Di\\Aop\\AbstractAspect;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\n#[\n    Aspect(\n        classes: [\n            SomeClass::class,\n            \"App\\\\Service\\\\SomeClass::someMethod\",\n            \"App\\\\Service\\\\SomeClass::*Method\"\n        ],\n        annotations: [\n            SomeAnnotation::class\n        ]\n    )\n]\nclass FooAspect extends AbstractAspect\n{\n    public function process(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        // 切面切入后，执行对应的方法会由此来负责\n        // $proceedingJoinPoint 为连接点，通过该类的 process() 方法调用原方法并获得结果\n        // 在调用前进行某些处理\n        $result = $proceedingJoinPoint->process();\n        // 在调用后进行某些处理\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Predecessor Results in Hyperf DAG\nDESCRIPTION: This PHP code shows how to access the results of predecessor tasks within a DAG. The `Vertex::make` function defines a task that receives an array of results from its dependencies. It then accesses a specific result using the vertex key ($a->key) and performs an operation. The result is returned by Dag::run().\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/dag.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$dag = new \\Hyperf\\Dag\\Dag();\n$a = \\Hyperf\\Dag\\Vertex::make(function() {return 1;});\n$b = \\Hyperf\\Dag\\Vertex::make(function($results) use ($a) {\n    return $results[$a->key] + 1;\n});\n$results = $dag->addVertex($a)->addVertex($b)->addEdge($a, $b)->run();\nassert($results[$a->key] === 1);\nassert($results[$b->key] === 2);\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Array Length with whereJsonLength - PHP\nDESCRIPTION: This snippet shows how to query the length of a JSON array using `whereJsonLength`. It retrieves users where the length of the `options->languages` array is 0 or greater than 1.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereJsonLength('options->languages', 0)\n    ->get();\n\n$users = Db::table('users')\n    ->whereJsonLength('options->languages', '>', 1)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Apply Scene with Annotation\nDESCRIPTION: Demonstrates how to apply a scene using the Scene annotation. Sets the scene using the #[Scene] annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Request\\DebugRequest;\nuse App\\Request\\SceneRequest;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Validation\\Annotation\\Scene;\n\n#[AutoController(prefix: 'foo')]\nclass FooController extends Controller\n{\n    #[Scene(scene:'bar1')]\n    public function bar1(SceneRequest $request)\n    {\n        return $this->response->success($request->all());\n    }\n\n    #[Scene(scene:'bar2', argument: 'request')] // 綁定到 $request\n    public function bar2(SceneRequest $request)\n    {\n        return $this->response->success($request->all());\n    }\n\n    #[Scene(scene:'bar3', argument: 'request')]\n    #[Scene(scene:'bar3', argument: 'req')] // 支持多個參數\n    public function bar3(SceneRequest $request, DebugRequest $req)\n    {\n        return $this->response->success($request->all());\n    }\n\n    #[Scene()] // 默認 scene 為方法名，效果等於 #[Scene(scene: 'bar1')]\n    public function bar1(SceneRequest $request)\n    {\n        return $this->response->success($request->all());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Migrations in Hyperf\nDESCRIPTION: This command executes all pending migration files, bypassing any confirmation prompts for destructive operations. This is useful in production environments when automated deployments are needed. Requires Hyperf framework and executable `bin/hyperf.php` script.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate --force\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Authentication Middleware in Hyperf (PHP)\nDESCRIPTION: This code snippet demonstrates how to implement authentication middleware for WebSocket connections in Hyperf. It defines a WebSocketAuthMiddleware that intercepts handshake requests and performs permission checking using an `isAuth` method (implementation not provided). If authentication fails, the middleware returns a 'Forbidden' response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/socketio-server.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Middleware;\n\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass WebSocketAuthMiddleware implements MiddlewareInterface\n{\n    /**\n     * @var ContainerInterface\n     */\n    protected $container;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n    }\n\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // Pseudo code, intercept the handshake request through the isAuth method and implement permission checking\n        if (! $this->isAuth($request)) {\n            return $this->container->get(\\Hyperf\\HttpServer\\Contract\\ResponseInterface::class)->raw('Forbidden');\n        }\n\n        return $handler->handle($request);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Cacheable Annotation with Prefix, TTL and Listener\nDESCRIPTION: An example of the `Cacheable` annotation with the `prefix`, `ttl`, and `listener` parameters configured. When id is 1 the cache key will be `c:user:1`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/cache.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass UserService\n{\n    #[Cacheable(prefix: \"user\", ttl: 7200, listener: \"USER_CACHE\")]\n    public function user(int $id): array\n    {\n        $user = User::query()->find($id);\n\n        return [\n            'user' => $user->toArray(),\n            'uuid' => $this->unique(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Conditions to Process Startup - Hyperf (PHP)\nDESCRIPTION: Controls whether a custom process starts with the server by overriding the `isEnable()` method. If `isEnable()` returns `false`, the process will not be started during server initialization.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/process.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process(name: \"foo_process\")]\nclass FooProcess extends AbstractProcess\n{\n    public function handle(): void\n    {\n        // 您的代码 ...\n    }\n    \n    public function isEnable($server): bool\n    {\n        // 不跟随服务启动一同启动\n        return false;   \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a UDP Server in Hyperf\nDESCRIPTION: This code snippet shows the configuration required to set up a UDP server in Hyperf. It defines the server name, type, host, port, socket type, and callbacks. The `Event::ON_PACKET` callback is configured to use the `onPacket` method of the `App\\Controller\\UdpServer` class.  The configuration returns an array of server settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tcp-server.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // The following has removed other irrelevant configuration items\n    'servers' => [\n        [\n            'name' => 'udp',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9505,\n            'sock_type' => SWOOLE_SOCK_UDP,\n            'callbacks' => [\n                Event::ON_PACKET => [App\\Controller\\UdpServer::class, 'onPacket'],\n            ],\n            'settings' => [\n                // Configure on demand\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Registering a Service in Hyperf Jet\nDESCRIPTION: Registers a service with a specific protocol using Hyperf\\Jet\\ServiceManager.  This associates a service name with a protocol and configures the nodes where the service is available.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/jet.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Jet\\ServiceManager;\n\n// Bind CalculatorService with jsonrpc protocol, and set the static nodes info.\nServiceManager::register($service = 'CalculatorService', $protocol = 'jsonrpc', [\n    ServiceManager::NODES => [\n        [$host = '127.0.0.1', $port = 9503],\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Type\nDESCRIPTION: This code defines a GraphQL type 'Product' using annotations. The #[Type] annotation marks the class as a GraphQL type. The #[Field] annotation marks methods as GraphQL fields, specifying which methods can be queried.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/graphql.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Model;\n\nuse Hyperf\\GraphQL\\Annotation\\Type;\nuse Hyperf\\GraphQL\\Annotation\\Field;\n\n#[Type]\nclass Product\n{\n    protected $name;\n    protected $price;\n\n    public function __construct(string $name, float $price)\n    {\n        $this->name = $name;\n        $this->price = $price;\n    }\n\n    #[Field]\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    #[Field]\n    public function getPrice(): ?float\n    {\n        return $this->price;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Circuit Breaker Annotation in Hyperf\nDESCRIPTION: This code snippet demonstrates how to use the `CircuitBreaker` annotation to implement circuit breaking for a method in a Hyperf service. It configures a timeout of 0.05 seconds, a failCounter of 1, and specifies a fallback method to use when the circuit is open.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/circuit-breaker.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Services;\n\nuse App\\UserServiceClient;\nuse Hyperf\\CircuitBreaker\\Annotation\\CircuitBreaker;\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass UserService\n{\n    #[Inject]\n    private UserServiceClient $client;\n\n    #[CircuitBreaker(options: ['timeout' => 0.05], failCounter: 1, successCounter: 1, fallback: [UserService::class, 'searchFallback'])]\n    public function search($offset, $limit)\n    {\n        return $this->client->users($offset, $limit);\n    }\n\n    public function searchFallback($offset, $limit)\n    {\n        return [];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adjusting config/config.php for Hyperf 2.0\nDESCRIPTION: This code snippet shows the required changes in `config/config.php` for Hyperf 2.0. It involves adding the `app_env` and `scan_cacheable` configuration options. `app_env` specifies the application environment (e.g., 'prod'), and `scan_cacheable` controls whether annotation scanning cache is used, optimizing startup time.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.0.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    // 生產環境使用 prod 值\n    'app_env' => env('APP_ENV', 'dev'),\n    // 是否使用註解掃描快取\n    'scan_cacheable' => env('SCAN_CACHEABLE', false),\n];\n\n```\n\n----------------------------------------\n\nTITLE: Registering Serializer Factory - Hyperf\nDESCRIPTION: This snippet demonstrates how to configure the SerializerFactory for object serialization and deserialization in Hyperf after installing symfony/serializer and symfony/property-access.  It maps NormalizerInterface to a new SerializerFactory instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/json-rpc.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Serializer\\SerializerFactory;\nuse Hyperf\\Serializer\\Serializer;\n\nreturn [\n    Hyperf\\Contract\\NormalizerInterface::class => new SerializerFactory(Serializer::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Ordering Results by Date with latest/oldest - PHP\nDESCRIPTION: This snippet shows how to easily sort results by date using the `latest` and `oldest` methods. By default, it uses the `created_at` column. You can also pass a custom column name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$user = Db::table('users')->latest()->first();\n```\n\n----------------------------------------\n\nTITLE: Configure StatsD Settings\nDESCRIPTION: This PHP code configures the StatsD driver for the Hyperf metric component, including the driver class, namespace, UDP host/port, whether to enable batch pushing, push interval, and sample rate.  It configures how metrics are sent to the StatsD server via UDP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => env('METRIC_DRIVER', 'statd'),\n    'use_standalone_process' => env('TELEMETRY_USE_STANDALONE_PROCESS', true),\n    'enable_default_metric' => env('TELEMETRY_ENABLE_DEFAULT_TELEMETRY', true),\n    'metric' => [\n        'statsd' => [\n            'driver' => Hyperf\\Metric\\Adapter\\StatsD\\MetricFactory::class,\n            'namespace' => env('APP_NAME', 'skeleton'),\n            'udp_host' => env('STATSD_UDP_HOST', '127.0.0.1'),\n            'udp_port' => env('STATSD_UDP_PORT', '8125'),\n            'enable_batch' => env('STATSD_ENABLE_BATCH', true),\n            'push_interval' => env('STATSD_PUSH_INTERVAL', 5),\n            'sample_rate' => env('STATSD_SAMPLE_RATE', 1.0),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Placeholders in Translation Strings\nDESCRIPTION: This example shows how to define placeholders within translation strings using the `:` prefix.  The placeholders can then be dynamically replaced with values passed to the translation functions. The case of the placeholder affects the case of the translated value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/translation.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// storage/languages/en/messages.php\n\nreturn [\n    'welcome' => 'Welcome :name',\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\necho __('messages.welcome', ['name' => 'Hyperf']);\n```\n\n----------------------------------------\n\nTITLE: Adding Select Columns - PHP\nDESCRIPTION: Demonstrates how to add additional columns to an existing select query using the `addSelect()` method. This allows you to dynamically add columns to the query based on certain conditions. Requires the `Hyperf\\DbConnection\\Db` facade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$query = Db::table('users')->select('name');\n\n$users = $query->addSelect('age')->get();\n```\n\n----------------------------------------\n\nTITLE: Disable NSQ Consumer Auto-Start (Local)\nDESCRIPTION: This code demonstrates how to disable the auto-start feature for a specific NSQ consumer by overriding the `isEnable()` method and returning `false`. This is useful for development or debugging purposes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nsq.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Nsq\\Consumer;\n\nuse Hyperf\\Nsq\\AbstractConsumer;\nuse Hyperf\\Nsq\\Annotation\\Consumer;\nuse Hyperf\\Nsq\\Message;\nuse Hyperf\\Nsq\\Result;\nuse Psr\\Container\\ContainerInterface;\n\n#[Consumer(topic: \"demo_topic\", channel: \"demo_channel\", name: \"DemoConsumer\", nums: 1)]\nclass DemoConsumer extends AbstractConsumer\n{\n    public function __construct(ContainerInterface $container)\n    {\n        parent::__construct($container);\n    }\n\n    public function isEnable(): bool \n    {\n        return false;\n    }\n\n    public function consume(Message $payload): string\n    {\n        $body = json_decode($payload->getBody(), true);\n        var_dump($body);\n        return Result::ACK;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Where Between Clauses with whereBetween() in Hyperf\nDESCRIPTION: Illustrates how to use the `whereBetween()` method to filter records where a column's value falls within a specified range.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->whereBetween('votes', [1, 100])->get();\n```\n\n----------------------------------------\n\nTITLE: AutoController Annotation in Hyperf\nDESCRIPTION: This snippet demonstrates how to use the `#[AutoController]` annotation in Hyperf to automatically generate routes for all public methods in a controller. It generates a `/user/index` route for the `index` method that accepts GET or POST requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/router.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass UserController\n{\n    // Hyperf 會自動為此方法生成一個 /user/index 的路由，允許通過 GET 或 POST 方式請求\n    public function index(RequestInterface $request)\n    {\n        // 從請求中獲得 id 參數\n        $id = $request->input('id', 1);\n        return (string)$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Kafka Consumer\nDESCRIPTION: This command generates a Kafka consumer class using the Hyperf CLI.  It creates a consumer class named `KafkaConsumer` that extends `Hyperf\\Kafka\\AbstractConsumer`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/kafka.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:kafka-consumer KafkaConsumer\n```\n\n----------------------------------------\n\nTITLE: Getting File Path and Extension in Hyperf (PHP)\nDESCRIPTION: This snippet demonstrates how to retrieve the temporary path and file extension of an uploaded file using the `UploadedFile` class in Hyperf.  The `getPath()` method returns the temporary file path, while `getExtension()` determines the file extension based on its content.  The extension might differ from what the client provides.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/request.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// The path is the temporary path of the uploaded file\n$path = $request->file('photo')->getPath();\n\n// Since the tmp_name of the uploaded file by Swoole does not retain the original file name, this method has been rewritten to obtain the suffix of the original file name\n$extension = $request->file('photo')->getExtension();\n```\n\n----------------------------------------\n\nTITLE: CachePut Annotation Example\nDESCRIPTION: Demonstrates the use of the `CachePut` annotation, which executes the function body every time and then rewrites the cache. This is useful for updating cached data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/cache.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\CachePut;\n\nclass UserService\n{\n    #[CachePut(prefix: \"user\", ttl: 3601)]\n    public function updateUser(int $id)\n    {\n        $user = User::query()->find($id);\n        $user->name = 'HyperfDoc';\n        $user->save();\n\n        return [\n            'user' => $user->toArray(),\n            'uuid' => $this->unique(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Consumer Process\nDESCRIPTION: Registers the default consumer process to consume messages from the queue. This configuration tells Hyperf to run the `ConsumerProcess` as a separate process.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/async-queue.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    Hyperf\\AsyncQueue\\Process\\ConsumerProcess::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Publishing Redis Configuration\nDESCRIPTION: This command publishes the default Redis configuration file to the config directory, allowing customization of the connection parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/redis.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/redis\n```\n\n----------------------------------------\n\nTITLE: Conditional WHERE Clauses with when (default case) - PHP\nDESCRIPTION: This snippet demonstrates how to use a third parameter in the `when` method. The third parameter (a closure) will be executed when the first parameter is `false`. This is used to configure a default sorting order.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$sortBy = null;\n\n$users = Db::table('users')\n    ->when($sortBy, function ($query, $sortBy) {\n        return $query->orderBy($sortBy);\n    }, function ($query) {\n        return $query->orderBy('name');\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Using Snowflake in Database Model\nDESCRIPTION: This example shows how to use the Snowflake trait in a Hyperf database model to automatically generate Snowflake IDs for the primary key. It requires the Hyperf database and snowflake components.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/snowflake.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Database\\Model\\Model;\nuse Hyperf\\Snowflake\\Concern\\Snowflake;\n\nclass User extends Model {\n    use Snowflake;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Raw Expressions in Select - PHP\nDESCRIPTION: Illustrates how to use raw SQL expressions in select queries using the `Db::raw()` method. This allows you to perform complex calculations or use database-specific functions that are not directly supported by the query builder. Requires the `Hyperf\\DbConnection\\Db` facade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$res = Db::table('user')->select('gender', Db::raw('COUNT(0) AS `count`'))->groupBy('gender')->get();\n```\n\n----------------------------------------\n\nTITLE: Database Configuration with Model Cache Settings - PHP\nDESCRIPTION: This code snippet shows the database configuration array in `config/autoload/databases.php`, including settings for the database connection and the model cache. It defines the driver, host, database, username, password, charset, collation, prefix, pool, and cache handler.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model-cache.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER', 'mysql'),\n        'host' => env('DB_HOST', 'localhost'),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => env('DB_CHARSET', 'utf8'),\n        'collation' => env('DB_COLLATION', 'utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX', ''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float)env('DB_MAX_IDLE_TIME', 60),\n        ],\n        'cache' => [\n            'handler' => \\Hyperf\\ModelCache\\Handler\\RedisHandler::class,\n            'cache_key' => 'mc:%s:m:%s:%s:%s',\n            'prefix' => 'default',\n            'ttl' => 3600 * 24,\n            'empty_model_ttl' => 3600,\n            'load_script' => true,\n            'use_default_value' => false,\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Calculation Precision in PHP\nDESCRIPTION: This snippet shows how to set the calculation precision when evaluating RPN expressions. The third argument to the `calculate` method specifies the number of decimal places to use in the result.  The expected output will be a string with two decimal places (14.00).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/rpn.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->calculate('5 1 2 + 4 * + 3 -', [], 2); // '14.00'\n```\n\n----------------------------------------\n\nTITLE: Exists Validation with Custom Column in Hyperf\nDESCRIPTION: This snippet shows how to specify a custom column name for the `exists` validation rule in Hyperf, allowing validation against a specific column in the database table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n'state' => 'exists:states,abbreviation'\n```\n\n----------------------------------------\n\nTITLE: Defining Command with $name Property (PHP)\nDESCRIPTION: Defines a command by setting the `$name` property within a command class that extends `HyperfCommand`. The `#[Command]` attribute marks the class as a command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    /**\n     * 執行的命令行\n     */\n    protected ?string $name = 'foo:hello';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Add Trace Middleware\nDESCRIPTION: Adds the `Hyperf\\Tracer\\Middleware\\TraceMiddleware::class` to the `http` middleware group in `config/autoload/middlewares.php` to enable tracing for HTTP requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tracer.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n     'http' => [\n         \\Hyperf\\Tracer\\Middleware\\TraceMiddleware::class,\n     ],\n];\n```\n\n----------------------------------------\n\nTITLE: Casting Attributes to Data Types in Hyperf Model\nDESCRIPTION: Defines the `$casts` array in a Hyperf model to cast the `is_admin` attribute to a boolean. This will automatically convert the value retrieved from the database to a boolean value, regardless of the underlying data type in the database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/mutators.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * The attributes that should be cast.\n     *\n     * @var array\n     */\n    protected $casts = [\n        'is_admin' => 'boolean',\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Return Custom Resource Collection\nDESCRIPTION: Demonstrates how to return a custom resource collection from a controller action. It creates a new instance of the resource collection class, passing the model collection to the constructor, and calls the `toResponse` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\UserCollection;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserCollection(User::all()))->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Queue Controller for Pushing Messages\nDESCRIPTION: Defines a controller for pushing messages to the queue using the traditional Job approach via the QueueService.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse App\\Service\\QueueService;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass QueueController extends AbstractController\n{\n    #[Inject]\n    protected QueueService $service;\n\n    /**\n     * 傳統模式投遞訊息\n     */\n    public function index()\n    {\n        $this->service->push([\n            'group@hyperf.io',\n            'https://doc.hyperf.io',\n            'https://www.hyperf.io',\n        ]);\n\n        return 'success';\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Inject Lazy Loading Proxy Class in Hyperf\nDESCRIPTION: This code demonstrates how to inject a lazy loading proxy class into another class's constructor in Hyperf.  When the `Foo` class is instantiated, Hyperf's DI container will inject a proxy object for `LazyUserService` instead of the actual service implementation, which will only be instantiated when its methods or properties are accessed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/di.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Service\\LazyUserService;\n\nclass Foo{\n    public $service;\n    public function __construct(LazyUserService $service){\n        $this->service = $service;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie in Hyperf\nDESCRIPTION: Demonstrates how to set a cookie in a Hyperf response using the `withCookie()` method.  A `Hyperf\\HttpMessage\\Cookie\\Cookie` object is created and added to the response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/response.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\nuse Hyperf\\HttpMessage\\Cookie\\Cookie;\n\nclass IndexController\n{\n    public function cookie(ResponseInterface $response): Psr7ResponseInterface\n    {\n        $cookie = new Cookie('key', 'value');\n        return $response->withCookie($cookie)->withContent('Hello Hyperf.');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Task Component\nDESCRIPTION: This command installs the Hyperf Task component using Composer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/task.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/task\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Process via Configuration File - Hyperf PHP\nDESCRIPTION: This code snippet shows how to register a custom process class within the Hyperf framework using the config/autoload/processes.php configuration file. This method allows Hyperf to recognize and manage the custom process.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/process.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/processes.php\nreturn [\n    \\App\\Process\\FooProcess::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Add On Delete Cascade to Foreign Key in Hyperf Schema\nDESCRIPTION: This snippet shows how to add an 'on delete cascade' option to a foreign key constraint. This means that if a user is deleted from the 'users' table, any related posts in the 'posts' table will also be deleted.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$table->foreign('user_id')\n      ->references('id')->on('users')\n      ->onDelete('cascade');\n```\n\n----------------------------------------\n\nTITLE: Define Unique Index Name\nDESCRIPTION: This snippet demonstrates how to define a custom name for a unique index using the second parameter of the `unique()` method. It creates a unique index on the 'name' column with the name 'unique_name'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// 定义唯一索引名称为 unique_name\n$table->unique('name', 'unique_name');\n```\n\n----------------------------------------\n\nTITLE: Add Error Listener - PHP\nDESCRIPTION: Adds the `ErrorExceptionHandler` listener to `config/autoload/listeners.php`. This listener converts PHP errors into `ErrorException` exceptions, allowing them to be handled by the exception handling system.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/exception-handler.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    \\Hyperf\\ExceptionHandler\\Listener\\ErrorExceptionHandler::class\n];\n```\n\n----------------------------------------\n\nTITLE: Install Nacos Client\nDESCRIPTION: Installs the hyperf/nacos package using Composer. This package provides a PHP coroutine client for Nacos, enabling integration with Hyperf's configuration center and microservice governance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nacos.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/nacos\n```\n\n----------------------------------------\n\nTITLE: PHP Memory Limit Configuration\nDESCRIPTION: This snippet shows how to check the php.ini location and modify the memory_limit configuration to resolve issues where memory limits are too small.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/questions.md#_snippet_3\n\nLANGUAGE: INI\nCODE:\n```\n# 查看 php.ini 配置文件位置\nphp --ini\n\n# 修改 memory_limit 配置\nmemory_limit=-1\n```\n\n----------------------------------------\n\nTITLE: Protecting Attributes with $guarded\nDESCRIPTION: This snippet shows how to use the `$guarded` property to define attributes that should not be mass-assignable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected $guarded = ['gender_show'];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure WebSocket Route - PHP\nDESCRIPTION: This snippet configures a route for the WebSocket server in the `config/routes.php` file.  It maps the root path ('/') to the `App\\Controller\\WebSocketController` for the 'ws' server. This establishes the endpoint for WebSocket connections.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/websocket-server.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nRouter::addServer('ws', function () {\n    Router::get('/', 'App\\Controller\\WebSocketController');\n});\n```\n\n----------------------------------------\n\nTITLE: Paginating Search Results with Custom Page Size\nDESCRIPTION: This code demonstrates how to specify the number of results per page when paginating search results using the `paginate` method. The first argument to the `paginate` method specifies the number of results to display per page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->paginate(15);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Simple Cache Instance\nDESCRIPTION: This code shows how to retrieve an instance of `Psr\\SimpleCache\\CacheInterface` from the dependency injection container. This allows using the cache component with PSR-16 compatible libraries like EasyWeChat.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/cache.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$cache = $container->get(\\Psr\\SimpleCache\\CacheInterface::class);\n```\n\n----------------------------------------\n\nTITLE: Building Phar Package (Default)\nDESCRIPTION: This command builds a Phar package of your Hyperf project using the default settings. It uses `hyperf.php` as the entry point and includes the necessary files for execution.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/phar.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php phar:build\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Strategy - PHP\nDESCRIPTION: This configuration in `config/autoload/dependencies.php` defines a custom strategy for task dispatching by binding the `Hyperf\\Crontab\\Strategy\\StrategyInterface` to a custom implementation. This allows customizing how cron tasks are executed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/crontab.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    \\Hyperf\\Crontab\\Strategy\\StrategyInterface::class => \\App\\Crontab\\Strategy\\FooStrategy::class,\n];\n```\n\n----------------------------------------\n\nTITLE: CachePut Annotation Example\nDESCRIPTION: Demonstrates how to use the `CachePut` annotation. The annotated method will always execute, and the return value will be stored in the cache.  This is used for updating the cache.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/cache.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\CachePut;\n\nclass UserService\n{\n    #[CachePut(prefix: \"user\", ttl: 3601)]\n    public function updateUser(int $id)\n    {\n        $user = User::query()->find($id);\n        $user->name = 'HyperfDoc';\n        $user->save();\n\n        return [\n            'user' => $user->toArray(),\n            'uuid' => $this->unique(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating a Numeric Value with Specific Decimal Places\nDESCRIPTION: This example demonstrates how to validate a numeric field and ensure it has a specific number of decimal places. The first example enforces exactly two decimal places, while the second allows between 2 and 4 decimal places.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n// 必须正好有两位小数（例如 9.99）...\n'price' => 'decimal:2'\n\n// 必须有 2 到 4 位小数...\n'price' => 'decimal:2,4'\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Exception Class in Hyperf\nDESCRIPTION: This snippet shows how to define a custom exception class in Hyperf by extending the `Hyperf\\Server\\Exception\\ServerException` class. This custom exception, `FooException`, can then be used to represent specific error conditions within the application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/exception-handler.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Exception;\n\nuse App\\Constants\\ErrorCode;\nuse Hyperf\\Server\\Exception\\ServerException;\nuse Throwable;\n\nclass FooException extends ServerException\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Queue Service with Annotation\nDESCRIPTION: Defines a service class that uses the `AsyncQueueMessage` annotation to define an asynchronous task. When the `example` method is called, the task is automatically pushed to the queue.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse Hyperf\\AsyncQueue\\Annotation\\AsyncQueueMessage;\n\nclass QueueService\n{\n    #[AsyncQueueMessage]\n    public function example($params)\n    {\n        // 需要非同步執行的程式碼邏輯\n        // 這裡的邏輯會在 ConsumerProcess 程序中執行\n        var_dump($params);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Publishing Kafka Configuration\nDESCRIPTION: This command publishes the default kafka.php configuration file to the config/autoload directory of the Hyperf project. This allows you to customize the Kafka connection settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/kafka.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/kafka\n```\n\n----------------------------------------\n\nTITLE: Preserve Collection Keys\nDESCRIPTION: Demonstrates how to preserve the keys of a collection when returning a resource collection. By setting the `preserveKeys` property to `true`, the original keys are retained in the JSON response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * 指示是否應保留資源的集合鍵。\n     *\n     * @var bool\n     */\n    public $preserveKeys = true;\n\n    /**\n     * Transform the resource into an array.\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining an Enum Constant Class with Annotations\nDESCRIPTION: This snippet demonstrates how to define an enum class using annotations from the Hyperf Constants component.  It includes annotations for marking the class as a constant class (`#[Constants]`) and defining messages for each enum case (`#[Message]`). It uses the `EnumConstantsTrait` to provide helper methods.  Dependencies: `Hyperf\\Constants\\Annotation\\Constants`, `Hyperf\\Constants\\Annotation\\Message`, `Hyperf\\Constants\\EnumConstantsTrait`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/constants.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Constants;\n\nuse Hyperf\\Constants\\Annotation\\Constants;\nuse Hyperf\\Constants\\Annotation\\Message;\nuse Hyperf\\Constants\\EnumConstantsTrait;\n\n#[Constants]\nenum ErrorCode: int\n{\n    use EnumConstantsTrait\n    #[Message(\"Server Error！\")]\n    case SERVER_ERROR = 500;\n\n    #[Message(\"系統引數錯誤\")]\n    case SYSTEM_INVALID = 700;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Single Value - PHP\nDESCRIPTION: This snippet shows how to retrieve a single value from a database table using the `value()` method. It specifies the column name to retrieve, in this case, 'id' from the 'user' table. The result is then displayed using `var_dump()`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$id = Db::table('user')->value('id');\nvar_dump($id);\n```\n\n----------------------------------------\n\nTITLE: Aliyun Nacos Authentication Configuration\nDESCRIPTION: This PHP code represents the configuration file for authenticating with Aliyun's Nacos service using Access Key (AK) and Secret Key (SK). It allows you to specify the Nacos server's host, port, username, password, access_key, access_secret, and Guzzle HTTP client configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nacos.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    // nacos server url like https://nacos.hyperf.io, Priority is higher than host:port\n    // 'uri' => 'http://127.0.0.1:8848/',\n    // The nacos host info\n    'host' => '127.0.0.1',\n    'port' => 8848,\n    // The nacos account info\n    'username' => null,\n    'password' => null,\n    'access_key' => 'xxxx',\n    'access_secret' => 'yyyy',\n    'guzzle' => [\n        'config' => null,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Coroutine Memory Driver Configuration\nDESCRIPTION: This example configures the cache to use the `CoroutineMemoryDriver`, which stores data in the coroutine context.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/cache.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass Demo\n{\n    public function get($userId, $id)\n    {\n        return $this->getArray($userId)[$id] ?? 0;\n    }\n\n    #[Cacheable(prefix: \"test\", group: \"co\")]\n    public function getArray(int $userId): array\n    {\n        return $this->redis->hGetAll($userId);\n    }\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'co' => [\n        'driver' => Hyperf\\Cache\\Driver\\CoroutineMemoryDriver::class,\n        'packer' => Hyperf\\Codec\\Packer\\PhpSerializerPacker::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a One-to-One Polymorphic Relationship - Book Model\nDESCRIPTION: This code snippet defines a one-to-one polymorphic relationship for the Book model with the Image model, utilizing the morphOne method. This setup assumes that the images table has columns named imageable_id and imageable_type, allowing an image to be associated with one Book model. The imageable string specifies the base name for the type and id columns in the images table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/relationship.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Book extends Model\n{\n    public function image()\n    {\n        return $this->morphOne(Image::class, 'imageable');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating and Restarting Service\nDESCRIPTION: Pulls the latest image from the registry and redeploys the Docker stack using the specified YAML file. This updates the service to the latest version.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_60\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull registry.cn-shanghai.aliyuncs.com/your_namespace/your_project:latest\ndocker stack deploy -c /opt/www/your_project/deploy.yml --with-registry-auth your_project\n```\n\n----------------------------------------\n\nTITLE: Custom ModelUpdateVisitor Class PHP\nDESCRIPTION: This PHP code defines a custom `ModelUpdateVisitor` class that extends the default Hyperf visitor. It overrides the `formatDatabaseType` and `formatPropertyType` methods to customize the type mapping based on the database column types. This allows adjusting the generated model to reflect specific data types, such as setting `decimal` to `decimal:2` and mapping it to a `string` property.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/gen.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n *\n * @link     https://www.hyperf.io\n * @document https://hyperf.wiki\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\nnamespace App\\Kernel\\Visitor;\n\nuse Hyperf\\Database\\Commands\\Ast\\ModelUpdateVisitor as Visitor;\nuse Hyperf\\Stringable\\Str;\n\nclass ModelUpdateVisitor extends Visitor\n{\n    /**\n     * Used by `casts` attribute.\n     */\n    protected function formatDatabaseType(string $type): ?string\n    {\n        switch ($type) {\n            case 'tinyint':\n            case 'smallint':\n            case 'mediumint':\n            case 'int':\n            case 'bigint':\n                return 'integer';\n            case 'decimal':\n                // 設定為 decimal，並設定對應精度\n                return 'decimal:2';\n            case 'float':\n            case 'double':\n            case 'real':\n                return 'float';\n            case 'bool':\n            case 'boolean':\n                return 'boolean';\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * Used by `@property` docs.\n     */\n    protected function formatPropertyType(string $type, ?string $cast): ?string\n    {\n        if (! isset($cast)) {\n            $cast = $this->formatDatabaseType($type) ?? 'string';\n        }\n\n        switch ($cast) {\n            case 'integer':\n                return 'int';\n            case 'date':\n            case 'datetime':\n                return '\\\\Carbon\\\\Carbon';\n            case 'json':\n                return 'array';\n        }\n\n        if (Str::startsWith($cast, 'decimal')) {\n            // 如果 cast 為 decimal，則 @property 改為 string\n            return 'string';\n        }\n\n        return $cast;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filesystem Configuration Array\nDESCRIPTION: Detailed configuration array for the Hyperf filesystem, including various storage drivers such as local, ftp, memory, s3, minio, oss, qiniu, and cos. The configuration sets the default driver and defines specific parameters for each storage adapter like credentials, endpoints, bucket names, and other optional settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/filesystem.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 選擇storage下對應驅動的鍵即可。\n    'default' => 'local',\n    'storage' => [\n        'local' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\LocalAdapterFactory::class,\n            'root' => __DIR__ . '/../../runtime',\n        ],\n        'ftp' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\FtpAdapterFactory::class,\n            'host' => 'ftp.example.com',\n            'username' => 'username',\n            'password' => 'password',\n\n            /* optional config settings */\n            'port' => 21,\n            'root' => '/path/to/root',\n            'passive' => true,\n            'ssl' => true,\n            'timeout' => 30,\n            'ignorePassiveAddress' => false,\n        ],\n        'memory' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\MemoryAdapterFactory::class,\n        ],\n        's3' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\S3AdapterFactory::class,\n            'credentials' => [\n                'key' => env('S3_KEY'),\n                'secret' => env('S3_SECRET'),\n            ],\n            'region' => env('S3_REGION'),\n            'version' => 'latest',\n            'bucket_endpoint' => false,\n            'use_path_style_endpoint' => false,\n            'endpoint' => env('S3_ENDPOINT'),\n            'bucket_name' => env('S3_BUCKET'),\n        ],\n        'minio' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\S3AdapterFactory::class,\n            'credentials' => [\n                'key' => env('S3_KEY'),\n                'secret' => env('S3_SECRET'),\n            ],\n            'region' => env('S3_REGION'),\n            'version' => 'latest',\n            'bucket_endpoint' => false,\n            'use_path_style_endpoint' => true,\n            'endpoint' => env('S3_ENDPOINT'),\n            'bucket_name' => env('S3_BUCKET'),\n        ],\n        'oss' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\AliyunOssAdapterFactory::class,\n            'accessId' => env('OSS_ACCESS_ID'),\n            'accessSecret' => env('OSS_ACCESS_SECRET'),\n            'bucket' => env('OSS_BUCKET'),\n            'endpoint' => env('OSS_ENDPOINT'),\n            // 'timeout'        => 3600,\n            // 'connectTimeout' => 10,\n            // 'isCName'        => false,\n            // 'token'          => '',\n        ],\n        'qiniu' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\QiniuAdapterFactory::class,\n            'accessKey' => env('QINIU_ACCESS_KEY'),\n            'secretKey' => env('QINIU_SECRET_KEY'),\n            'bucket' => env('QINIU_BUCKET'),\n            'domain' => env('QINIU_DOMAIN'),\n        ],\n        'cos' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\CosAdapterFactory::class,\n            'region' => env('COS_REGION'),\n            // overtrue/flysystem-cos ^2.0 配置如下\n            'credentials' => [\n                'appId' => env('COS_APPID'),\n                'secretId' => env('COS_SECRET_ID'),\n                'secretKey' => env('COS_SECRET_KEY'),\n            ],\n            // overtrue/flysystem-cos ^3.0 配置如下\n            'app_id' => env('COS_APPID'),\n            'secret_id' => env('COS_SECRET_ID'),\n            'secret_key' => env('COS_SECRET_KEY'),\n            // 可選，如果 bucket 為私有訪問請打開此項\n            // 'signed_url' => false,\n            'bucket' => env('COS_BUCKET'),\n            'read_from_cdn' => false,\n            // 'timeout'         => 60,\n            // 'connect_timeout' => 60,\n            // 'cdn'             => '',\n            // 'scheme'          => 'https',\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a TCP Client (PHP)\nDESCRIPTION: This snippet demonstrates a simple TCP client implementation using Swoole. It connects to the specified host and port, sends a message, and receives the response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tcp-server.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n$client = new \\Swoole\\Client(SWOOLE_SOCK_TCP);\n$client->connect('127.0.0.1', 9504);\n$client->send('Hello World.');\n$ret = $client->recv(); // recv:Hello World.\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Sentinel Mode Configuration\nDESCRIPTION: These configurations show how to enable and configure Redis Sentinel mode within a Hyperf application. The `.env` example sets the necessary environment variables, while the `redis.php` example defines the Sentinel-specific options like master name, node addresses, and authentication.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/redis.md#_snippet_7\n\nLANGUAGE: env\nCODE:\n```\nREDIS_HOST=\nREDIS_AUTH=Redis实例密码\nREDIS_PORT=\nREDIS_DB=\nREDIS_SENTINEL_ENABLE=true\nREDIS_SENTINEL_PASSWORD=Redis哨兵密码\nREDIS_SENTINEL_NODE=192.168.89.129:26381;192.168.89.129:26380;\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', null),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'timeout' => 30.0,\n        'reserved' => null,\n        'retry_interval' => 0,\n        'sentinel' => [\n            'enable' => (bool) env('REDIS_SENTINEL_ENABLE', false),\n            'master_name' => env('REDIS_MASTER_NAME', 'mymaster'),\n            'nodes' => explode(';', env('REDIS_SENTINEL_NODE', '')),\n            'persistent' => false,\n            'read_timeout' => 30.0,\n            'auth' =>  env('REDIS_SENTINEL_PASSWORD', ''),\n        ],\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Replace Guzzle Handler for EasyWechat in Hyperf\nDESCRIPTION: This snippet demonstrates how to replace the default Guzzle HTTP client in EasyWechat with a coroutine-based client using Hyperf's CoroutineHandler. This is necessary when using EasyWechat in a coroutine environment to prevent blocking operations. It retrieves the Hyperf container, creates a coroutine handler, sets up the Guzzle client with the handler, and rebinds the client and handler in the EasyWechat application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/sdks/wechat.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Context\\ApplicationContext;\nuse EasyWeChat\\Factory;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\HandlerStack;\nuse Hyperf\\Guzzle\\CoroutineHandler;\n\n$container = ApplicationContext::getContainer();\n\n$app = Factory::officialAccount($config);\n$handler = new CoroutineHandler();\n\n// 設置 HttpClient，部分接口直接使用了 http_client。\n$config = $app['config']->get('http', []);\n$config['handler'] = $stack = HandlerStack::create($handler);\n$app->rebind('http_client', new Client($config));\n\n// 部分接口在請求數據時，會根據 guzzle_handler 重置 Handler\n$app['guzzle_handler'] = $handler;\n\n// 如果使用的是 OfficialAccount，則還需要設置以下參數\n$app->oauth->setGuzzleOptions([\n    'http_errors' => false,\n    'handler' => $stack,\n]);\n```\n\n----------------------------------------\n\nTITLE: Decrementing value with decrement in Hyperf\nDESCRIPTION: This example shows how to decrement a field's value using the `decrement` method in Hyperf's query builder. The example decrements the 'votes' field, optionally by a specified amount.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->decrement('votes');\n\nDb::table('users')->decrement('votes', 5);\n```\n\n----------------------------------------\n\nTITLE: Define Standard Route with Controller in Hyperf\nDESCRIPTION: This snippet shows different ways to define a standard route in Hyperf using a Controller and Action. It binds the '/hello-hyperf' URI to the `hello` method of the `App\\Controller\\IndexController`. Requires `Hyperf\\HttpServer\\Router\\Router`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/router.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\HttpServer\\Router\\Router;\n\n// 下面三種方式的任意一種都可以達到同樣的效果\nRouter::get('/hello-hyperf', 'App\\Controller\\IndexController::hello');\nRouter::get('/hello-hyperf', 'App\\Controller\\IndexController@hello');\nRouter::get('/hello-hyperf', [App\\Controller\\IndexController::class, 'hello']);\n```\n\n----------------------------------------\n\nTITLE: Install AWS S3 Adapter\nDESCRIPTION: These shell commands install the necessary components for using AWS S3 as a file system. It includes `league/flysystem-aws-s3-v3` for the adapter and `hyperf/guzzle` for HTTP client support.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.2.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"league/flysystem-aws-s3-v3:^2.0\"\ncomposer require hyperf/guzzle\n```\n\n----------------------------------------\n\nTITLE: Example Generated Model (Hyperf)\nDESCRIPTION: Illustrates an example of a generated `User` model in Hyperf. It shows the basic structure, including namespace, use statements, class definition, table association, fillable attributes, and cast definitions. This example uses annotations to define properties.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\n/**\n * @property $id\n * @property $name\n * @property $gender\n * @property $created_at\n * @property $updated_at\n */\nclass User extends Model\n{\n    /**\n     * The table associated with the model.\n     *     *\n     * @var string\n     */\n    protected ?string $table = 'user';\n\n    /**\n     * The attributes that are mass assignable.\n     *     *\n     * @var array\n     */\n    protected array $fillable = ['id', 'name', 'gender', 'created_at', 'updated_at'];\n\n    /**\n     * The attributes that should be cast to native types.\n     *     *\n     * @var array\n     */\n    protected array $casts = ['id' => 'integer', 'gender' => 'integer'];\n}\n```\n\n----------------------------------------\n\nTITLE: Update Lock (Pessimistic) in Hyperf PHP\nDESCRIPTION: Applies an update lock to the query, preventing other transactions from modifying or selecting the locked rows using shared locks.  Filters the table by 'votes' greater than 100 before applying the lock.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_57\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->lockForUpdate()->get();\n```\n\n----------------------------------------\n\nTITLE: Async Queue Configuration with Retry Array\nDESCRIPTION: This configuration shows how to define an array of retry intervals for the asynchronous queue. The `retry_seconds` array specifies the delay in seconds for each retry attempt.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => Hyperf\\AsyncQueue\\Driver\\RedisDriver::class,\n        'channel' => 'queue',\n        'retry_seconds' => [1, 5, 10, 20],\n        'processes' => 1,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Generating a Middleware\nDESCRIPTION: This command generates a new middleware class using the Hyperf CLI tool. The middleware will be created in the specified namespace and directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/middleware/middleware.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nphp ./bin/hyperf.php gen:middleware Auth/FooMiddleware\n```\n\n----------------------------------------\n\nTITLE: Component Autoloading - PHP\nDESCRIPTION: Example configuration for autoloading components from specific namespaces and directories. This simplifies component registration by automatically detecting and registering components.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    'autoload' => [\n        'classes' => ['App\\\\Other\\\\Component\\\\', 'App\\\\Another\\\\Component\\\\'],\n        'components' => ['package::components.', 'components.'],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Client with ClientFactory\nDESCRIPTION: This snippet demonstrates how to create a client instance for a service using the ClientFactory. It retrieves the client for the `CalculatorService` using the `jsonrpc` protocol.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/jet.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Jet\\ClientFactory;\n\n$clientFactory = new ClientFactory();\n$client = $clientFactory->create($service = 'CalculatorService', $protocol = 'jsonrpc');\n```\n\n----------------------------------------\n\nTITLE: Using SimplePool - PHP\nDESCRIPTION: This snippet shows how to use the `SimplePool` implementation provided by Hyperf. It uses the `PoolFactory` to create a pool with a custom connection creation function (e.g., a Swoole HTTP client). The code demonstrates acquiring and releasing connections from the pool.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/pool.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Pool\\SimplePool\\PoolFactory;\nuse Swoole\\Coroutine\\Http\\Client;\n\n$factory = $container->get(PoolFactory::class);\n\n$pool = $factory->get('your pool name', function () use ($host, $port, $ssl) {\n    return new Client($host, $port, $ssl);\n}, [\n    'max_connections' => 50\n]);\n\n$connection = $pool->get();\n\n$client = $connection->getConnection(); // 即上述 Client.\n\n// Do something.\n\n$connection->release();\n\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Multiple Migrations in Hyperf\nDESCRIPTION: This command rolls back a specified number of migrations. The `step` parameter determines how many migrations to revert. Requires Hyperf framework and executable `bin/hyperf.php` script.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:rollback --step=5\n```\n\n----------------------------------------\n\nTITLE: Publish DTM-Client Configuration (Hyperf)\nDESCRIPTION: Publishes the default DTM-Client configuration file to the `config/autoload` directory in a Hyperf project. This allows you to customize the DTM-Client settings for your application, such as server address and port.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/distributed-transaction.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish dtm/dtm-client\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Components (HTML)\nDESCRIPTION: This example demonstrates how to pass data to components using HTML attributes.  Static values can be passed directly, while PHP expressions and variables must be passed using the `:` prefix. The component's constructor receives these parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<x-alert type=\"error\" :message=\"$message\"/>\n```\n\n----------------------------------------\n\nTITLE: Configure Consumer in services.php for Manual Class (PHP)\nDESCRIPTION: Configures the consumer in services.php to specify the service name and the registry or nodes information.  This configuration is used to identify the service provider for the consumer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/json-rpc.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // 此处省略了其它同层级的配置\n    'consumers' => [\n        [\n            // 对应消费者类的 $serviceName\n            'name' => 'CalculatorService',\n            // 这个消费者要从哪个服务中心获取节点信息，如不配置则不会从服务中心获取节点信息\n            'registry' => [\n                'protocol' => 'consul',\n                'address' => 'http://127.0.0.1:8500',\n            ],\n            // 如果没有指定上面的 registry 配置，即为直接对指定的节点进行消费，通过下面的 nodes 参数来配置服务提供者的节点信息\n            'nodes' => [\n                ['host' => '127.0.0.1', 'port' => 9504],\n            ],\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Storing Uploaded Files in Hyperf (PHP)\nDESCRIPTION: This code snippet illustrates how to move a temporary uploaded file to a persistent storage location in Hyperf using the `moveTo()` method. It also shows how to check if the file has been moved using the `isMoved()` method. The `moveTo()` function takes the target path as input.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/request.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$file = $request->file('photo');\n$file->moveTo('/foo/bar.jpg');\n\n// Determine whether the method has moved through the isMoved(): bool method\nif ($file->isMoved()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Query with PDO fetch mode\nDESCRIPTION: Shows how to define a custom method to interact with the underlying PDO instance to perform queries with custom fetch modes. This involves preparing the SQL statement, binding values, executing the statement, and fetching the results using the specified fetch mode.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/db.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\DB\\DB;\n\n$sql = 'SELECT * FROM `user` WHERE id = ?;';\n$bindings = [2];\n$mode = \\PDO::FETCH_OBJ;\n$res = DB::run(function (\\PDO $pdo) use ($sql, $bindings, $mode) {\n    $statement = $pdo->prepare($sql);\n\n    $this->bindValues($statement, $bindings);\n\n    $statement->execute();\n\n    return $statement->fetchAll($mode);\n});\n```\n\n----------------------------------------\n\nTITLE: Passing HTML Attributes to Component - HTML\nDESCRIPTION: Illustrates how to pass additional HTML attributes to a component that are not defined in the component's constructor. These attributes are automatically added to the component's \"attribute bag\" and can be rendered in the component's view using the `$attributes` variable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_34\n\nLANGUAGE: html\nCODE:\n```\n    <x-alert type=\"error\" :message=\"$message\" class=\"mt-4\"/>\n```\n\nLANGUAGE: html\nCODE:\n```\n    <div {{ $attributes }}>\n        <!-- 元件內容 -->\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Global API Usage Example\nDESCRIPTION: Demonstrates how to use the global SocketIO API to broadcast messages to rooms, namespaces, and individual sockets. Shows how to obtain the SocketIO singleton from the container and use it to emit events. Requires `Hyperf\\SocketIOServer\\SocketIO` and `Hyperf\\Context\\ApplicationContext`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/socketio-server.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$io = \\Hyperf\\Context\\ApplicationContext::getContainer()->get(\\Hyperf\\SocketIOServer\\SocketIO::class);\n\n// sending to all clients in 'game' room, including sender\n// 向 game 房間內的所有連線推送 bigger-announcement 事件。\n$io->in('game')->emit('big-announcement', 'the game will start soon');\n\n// sending to all clients in namespace 'myNamespace', including sender\n// 向 /myNamespace 名稱空間下的所有連線推送 bigger-announcement 事件\n$io->of('/myNamespace')->emit('bigger-announcement', 'the tournament will start soon');\n\n// sending to a specific room in a specific namespace, including sender\n// 向 /myNamespace 名稱空間下的 room 房間所有連線推送 event 事件\n$io->of('/myNamespace')->to('room')->emit('event', 'message');\n\n// sending to individual socketid (private message)\n// 向 socketId 單點推送\n$io->to('socketId')->emit('hey', 'I just met you');\n\n// sending to all clients on this node (when using multiple nodes)\n// 向本機所有連線推送\n$io->local->emit('hi', 'my lovely babies');\n\n// sending to all connected clients\n// 向所有連線推送\n$io->emit('an event sent to all connected clients');\n```\n\n----------------------------------------\n\nTITLE: Snowflake in Database Model\nDESCRIPTION: This code shows how to use Snowflake IDs as primary keys in a Hyperf database model by using the Snowflake trait.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/snowflake.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Database\\Model\\Model;\nuse Hyperf\\Snowflake\\Concern\\Snowflake;\n\nclass User extends Model {\n    use Snowflake;\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Migrations (bash)\nDESCRIPTION: This command executes migrations, skipping confirmation prompts. Use with caution, especially in production environments, as destructive operations may occur.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate --force\n```\n\n----------------------------------------\n\nTITLE: Hyperf Config Center Configuration File\nDESCRIPTION: This code snippet showcases the configuration file for the Hyperf configuration center, where you can define settings for different drivers like Apollo, Nacos, Aliyun ACM, Etcd, and Zookeeper. This file allows to configure connection details, namespaces, update intervals, and other driver-specific parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config-center.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\ConfigCenter\\Mode;\n\nreturn [\n    // 是否開啓配置中心\n    'enable' => (bool) env('CONFIG_CENTER_ENABLE', true),\n    // 使用的驅動類型，對應同級別配置 drivers 下的 key\n    'driver' => env('CONFIG_CENTER_DRIVER', 'apollo'),\n    // 配置中心的運行模式，多進程模型推薦使用 PROCESS 模式，單進程模型推薦使用 COROUTINE 模式\n    'mode' => env('CONFIG_CENTER_MODE', Mode::PROCESS),\n    'drivers' => [\n        'apollo' => [\n            'driver' => Hyperf\\ConfigApollo\\ApolloDriver::class,\n            // Apollo Server\n            'server' => 'http://127.0.0.1:9080',\n            // 您的 AppId\n            'appid' => 'test',\n            // 當前應用所在的集羣\n            'cluster' => 'default',\n            // 當前應用需要接入的 Namespace，可配置多個\n            'namespaces' => [\n                'application',\n            ],\n            // 配置更新間隔（秒）\n            'interval' => 5,\n            // 嚴格模式，當為 false 時，拉取的配置值均為 string 類型，當為 true 時，拉取的配置值會轉化為原配置值的數據類型\n            'strict_mode' => false,\n            // 客户端IP\n            'client_ip' => \\Hyperf\\Support\\Network::ip(),\n            // 拉取配置超時時間\n            'pullTimeout' => 10,\n            // 拉取配置間隔\n            'interval_timeout' => 1,\n        ],\n        'nacos' => [\n            'driver' => Hyperf\\ConfigNacos\\NacosDriver::class,\n            // 配置合併方式，支持覆蓋和合並\n            'merge_mode' => Hyperf\\ConfigNacos\\Constants::CONFIG_MERGE_OVERWRITE,\n            'interval' => 3,\n            // 如果對應的映射 key 沒有設置，則使用默認的 key\n            'default_key' => 'nacos_config',\n            'listener_config' => [\n                // dataId, group, tenant, type, content\n                // 映射後的配置 KEY => Nacos 中實際的配置\n                'nacos_config' => [\n                    'tenant' => 'tenant', // corresponding with service.namespaceId\n                    'data_id' => 'hyperf-service-config',\n                    'group' => 'DEFAULT_GROUP',\n                ],\n                'nacos_config.data' => [\n                    'data_id' => 'hyperf-service-config-yml',\n                    'group' => 'DEFAULT_GROUP',\n                    'type' => 'yml',\n                ],\n            ],\n            'client' => [\n                // nacos server url like https://nacos.hyperf.io, Priority is higher than host:port\n                // 'uri' => '',\n                'host' => '127.0.0.1',\n                'port' => 8848,\n                'username' => null,\n                'password' => null,\n                'guzzle' => [\n                    'config' => null,\n                ],\n            ],\n        ],\n        'aliyun_acm' => [\n            'driver' => Hyperf\\ConfigAliyunAcm\\AliyunAcmDriver::class,\n            // 配置更新間隔（秒）\n            'interval' => 5,\n            // 阿里雲 ACM 斷點地址，取決於您的可用區\n            'endpoint' => env('ALIYUN_ACM_ENDPOINT', 'acm.aliyun.com'),\n            // 當前應用需要接入的 Namespace\n            'namespace' => env('ALIYUN_ACM_NAMESPACE', ''),\n            // 您的配置對應的 Data ID\n            'data_id' => env('ALIYUN_ACM_DATA_ID', ''),\n            // 您的配置對應的 Group\n            'group' => env('ALIYUN_ACM_GROUP', 'DEFAULT_GROUP'),\n            // 您的阿里雲賬號的 Access Key\n            'access_key' => env('ALIYUN_ACM_AK', ''),\n            // 您的阿里雲賬號的 Secret Key\n            'secret_key' => env('ALIYUN_ACM_SK', ''),\n            'ecs_ram_role' => env('ALIYUN_ACM_RAM_ROLE', ''),\n        ],\n        'etcd' => [\n            'driver' => Hyperf\\ConfigEtcd\\EtcdDriver::class,\n            'packer' => Hyperf\\Codec\\Packer\\JsonPacker::class,\n            // 需要同步的數據前綴\n            'namespaces' => [\n                '/application',\n            ],\n            // `Etcd` 與 `Config` 的映射關係。映射中不存在的 `key`，則不會被同步到 `Config` 中\n            'mapping' => [\n                // etcd key => config key\n                '/application/test' => 'test',\n            ],\n            // 配置更新間隔（秒）\n            'interval' => 5,\n            'client' => [\n                # Etcd Client\n                'uri' => 'http://127.0.0.1:2379',\n                'version' => 'v3beta',\n                'options' => [\n                    'timeout' => 10,\n                ],\n            ],\n        ],\n        'zookeeper' => [\n            'driver' => Hyperf\\ConfigZookeeper\\ZookeeperDriver::class,\n            'server' => env('ZOOKEEPER_SERVER', '127.0.0.1:2181'),\n            'path' => env('ZOOKEEPER_CONFIG_PATH', '/conf'),\n            'interval' => 5,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Messages for Specific Attributes\nDESCRIPTION: This example illustrates how to customize error messages for specific attributes and validation rules. By using the dot notation (e.g., `email.required`), you can target a specific rule for a specific attribute.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$messages = [\n    'email.required' => 'We need to know your e-mail address!',\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Usage Example for a Command - PHP\nDESCRIPTION: Configure usage examples for a command using the `addUsage` method within the `configure` method.  These examples demonstrate how to use the command with different arguments and options.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addUsage('--name 演示代码');\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using JsonRpcPoolTransporter - Hyperf\nDESCRIPTION: This snippet shows how to replace the default `JsonRpcTransporter` with `JsonRpcPoolTransporter` in the `dependencies.php` file. This utilizes a connection pool for JSON-RPC calls, which helps to avoid creating too many connections under high concurrency.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/json-rpc.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\JsonRpc\\JsonRpcPoolTransporter;\nuse Hyperf\\JsonRpc\\JsonRpcTransporter;\n\nreturn [\n    JsonRpcTransporter::class => JsonRpcPoolTransporter::class,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Where Style Clauses in Joins - PHP\nDESCRIPTION: Illustrates how to use `where` and `orWhere` methods within a join closure to compare columns to values instead of columns to columns.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->join('contacts', function ($join) {\n        $join->on('users.id', '=', 'contacts.user_id')\n                ->where('contacts.user_id', '>', 5);\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Handling in Hyperf Nano\nDESCRIPTION: This example demonstrates how to implement exception handling in a Hyperf Nano application. It catches exceptions thrown within route handlers and returns a custom response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nano.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\HttpMessage\\Stream\\SwooleStream;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->get('/', function () {\n    throw new \\Exception();\n});\n\n$app->addExceptionHandler(function ($throwable, $response) {\n    return $response->withStatus('418')\n        ->withBody(new SwooleStream('I\\'m a teapot'));\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Customizing CoreMiddleware Behavior\nDESCRIPTION: This code shows how to customize the behavior of `CoreMiddleware` in Hyperf. By creating a class that extends `Hyperf\\HttpServer\\CoreMiddleware` and overriding the `handleNotFound` and `handleMethodNotAllowed` methods, you can modify how the framework handles 404 and 405 HTTP status codes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/middleware/middleware.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Middleware;\n\nuse Hyperf\\Contract\\Arrayable;\nuse Hyperf\\HttpMessage\\Stream\\SwooleStream;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass CoreMiddleware extends \\Hyperf\\HttpServer\\CoreMiddleware\n{\n    /**\n     * Handle the response when cannot found any routes.\n     *\n     * @return array|Arrayable|mixed|ResponseInterface|string\n     */\n    protected function handleNotFound(ServerRequestInterface $request)\n    {\n        // 重寫路由找不到的處理邏輯\n        return $this->response()->withStatus(404);\n    }\n\n    /**\n     * Handle the response when the routes found but doesn't match any available methods.\n     *\n     * @return array|Arrayable|mixed|ResponseInterface|string\n     */\n    protected function handleMethodNotAllowed(array $methods, ServerRequestInterface $request)\n    {\n        // 重寫 HTTP 方法不允許的處理邏輯\n        return $this->response()->withStatus(405);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Request-Reply Pattern with NATS in Hyperf (Sync)\nDESCRIPTION: This PHP code demonstrates the synchronous request-reply pattern using the `requestSync` method. It sends a request to 'hyperf.reply' and waits for the response. The response is returned as a `Message` object, and the code extracts and returns the body of the message. Hyperf annotations are used for routing and dependency injection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nats.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Nats\\Driver\\DriverInterface;\nuse Hyperf\\Nats\\Message;\n\n#[AutoController(prefix: \"nats\")]\nclass NatsController extends AbstractController\n{\n    #[Inject]\n    protected DriverInterface $nats;\n\n    public function sync()\n    {\n        /** @var Message $message */\n        $message = $this->nats->requestSync('hyperf.reply', [\n            'id' => 'limx',\n        ]);\n\n        return $this->response->success($message->getBody());\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating Hyperf's Value Object Synchronization\nDESCRIPTION: This example shows how changes made to fields within a value object are not immediately reflected in the model's attributes. The modifications are only synchronized when the model is saved. The example emphasizes that direct access via `$user->address` retrieves the updated values, even though `$user->getAttributes()` initially shows the original values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$user = App\\User::find(1);\n\nvar_dump($user->getAttributes());\n//[\n//    'address_line_one' => 'Address Value',\n//    'address_line_two' => '#10000'\n//];\n\n$user->address->lineOne = 'Updated Address Value';\n$user->address->lineTwo = '#20000';\n\n// After directly modifying the field of address, it cannot take effect in attributes immediately, but you can get the modified data directly through $user->address.\nvar_dump($user->getAttributes());\n//[\n//    'address_line_one' => 'Address Value',\n//    'address_line_two' => '#10000'\n//];\n\n// When we save the data or delete the data, the attributes will be changed to the modified data.\n$user->save();\nvar_dump($user->getAttributes());\n//[\n//    'address_line_one' => 'Updated Address Value',\n//    'address_line_two' => '#20000'\n//];\n```\n\n----------------------------------------\n\nTITLE: Using Global API for Socket.io Communication\nDESCRIPTION: This PHP snippet demonstrates how to use the global SocketIO API to broadcast events to rooms, namespaces, and individual socket IDs. It retrieves the SocketIO instance from the Hyperf container and utilizes its methods to emit events to specific targets. It includes examples of sending to all clients in a room, all clients in a namespace, a specific room in a namespace, an individual socket ID, all clients on the same node, and all connected clients.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/socketio-server.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$io = \\Hyperf\\Context\\ApplicationContext::getContainer()->get(\\Hyperf\\SocketIOServer\\SocketIO::class);\n\n// sending to all clients in 'game' room, including sender\n// 向 game 房間內的所有連接推送 bigger-announcement 事件。\n$io->in('game')->emit('big-announcement', 'the game will start soon');\n\n// sending to all clients in namespace 'myNamespace', including sender\n// 向 /myNamespace 命名空間下的所有連接推送 bigger-announcement 事件\n$io->of('/myNamespace')->emit('bigger-announcement', 'the tournament will start soon');\n\n// sending to a specific room in a specific namespace, including sender\n// 向 /myNamespace 命名空間下的 room 房間所有連接推送 event 事件\n$io->of('/myNamespace')->to('room')->emit('event', 'message');\n\n// sending to individual socketid (private message)\n// 向 socketId 單點推送\n$io->to('socketId')->emit('hey', 'I just met you');\n\n// sending to all clients on this node (when using multiple nodes)\n// 向本機所有連接推送\n$io->local->emit('hi', 'my lovely babies');\n\n// sending to all connected clients\n// 向所有連接推送\n$io->emit('an event sent to all connected clients');\n```\n\n----------------------------------------\n\nTITLE: Defining Command with Constructor (PHP)\nDESCRIPTION: Defines a command name by passing it to the parent constructor. This approach is an alternative to using the `$name` property.  `#[Command]` attribute marks the class as a command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    public function __construct()\n    {\n        parent::__construct('foo:hello');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Migration Class Structure (PHP)\nDESCRIPTION: This code shows the basic structure of a migration class in Hyperf. It includes the `up` method for applying changes and the `down` method for reverting changes. The migration creates a table named 'true' with an auto-incrementing ID and timestamps.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Database\\Schema\\Schema;\nuse Hyperf\\Database\\Schema\\Blueprint;\nuse Hyperf\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('true', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('true');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Nacos gRPC\nDESCRIPTION: This code snippet demonstrates how to configure the Nacos driver to enable gRPC bidirectional streaming for real-time configuration updates.  It requires setting `config_center.drivers.nacos.client.grpc.enable` to `true`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config-center.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\ConfigApollo\\PullMode;\nuse Hyperf\\ConfigCenter\\Mode;\n\nreturn [\n    'enable' => (bool) env('CONFIG_CENTER_ENABLE', true),\n    'driver' => env('CONFIG_CENTER_DRIVER', 'nacos'),\n    'mode' => env('CONFIG_CENTER_MODE', Mode::PROCESS),\n    'drivers' => [\n        'nacos' => [\n            'driver' => Hyperf\\ConfigNacos\\NacosDriver::class,\n            'merge_mode' => Hyperf\\ConfigNacos\\Constants::CONFIG_MERGE_OVERWRITE,\n            'interval' => 3,\n            'default_key' => 'nacos_config',\n            'listener_config' => [\n                'nacos_config' => [\n                    'tenant' => 'tenant', // corresponding with service.namespaceId\n                    'data_id' => 'hyperf-service-config',\n                    'group' => 'DEFAULT_GROUP',\n                ],\n            ],\n            'client' => [\n                // nacos server url like https://nacos.hyperf.io, Priority is higher than host:port\n                // 'uri' => '',\n                'host' => '127.0.0.1',\n                'port' => 8848,\n                'username' => null,\n                'password' => null,\n                'guzzle' => [\n                    'config' => null,\n                ],\n                // Only support for nacos v2.\n                'grpc' => [\n                    'enable' => true,\n                    'heartbeat' => 10,\n                ],\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Regenerate Models using Hyperf Code Generator\nDESCRIPTION: This shell command uses the Hyperf code generator to regenerate model classes. It helps in updating the models to adhere to new type constraints introduced in the framework.  It requires the hyperf/code-generator package to be installed via composer. `$PWD/app/Model` specifies the directory containing the models.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/changelog/3.0.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp vendor/bin/regenerate-models.php $PWD/app/Model\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Record (Hyperf)\nDESCRIPTION: Shows how to update an existing record in the database by retrieving the model, modifying its attributes, and calling the `save` method in Hyperf. The `updated_at` timestamp is automatically updated.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = User::query()->find(1);\n\n$user->name = 'Hi Hyperf';\n\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Setting Default Connection for a Model in Hyperf (PHP)\nDESCRIPTION: This snippet demonstrates how to set the default database connection for a specific model in Hyperf. By defining the `$connection` property within the model class, all queries performed on that model will use the specified connection. The property visibility must be set as `protected`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/quick-start.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n *\n * @link https://www.hyperf.io\n * @document https://doc.hyperf.io\n * @contact group@hyperf.io\n * @license https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\n\nnamespace App\\Model;\n\n/**\n * @property int $id\n * @property string $mobile\n * @property string $realname\n */\nclass User extends Model\n{\n    /**\n     * The table associated with the model.\n     * @var string\n     */\n    protected $table ='user';\n\n    /**\n     * The connection name for the model.\n     *\n     * @var string\n     */\n    protected $connection ='test';\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = ['id','mobile','realname'];\n\n    /**\n     * The attributes that should be cast to native types.\n     *\n     * @var array\n     */\n    protected $casts = ['id' =>'integer'];\n}\n```\n\n----------------------------------------\n\nTITLE: Date Validation After Another Field in Hyperf\nDESCRIPTION: This snippet demonstrates how to validate if a date field is after another date field using the `after` rule in Hyperf. It shows using another field instead of a static date string.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n'finish_date' => 'required|date|after:start_date'\n```\n\n----------------------------------------\n\nTITLE: WebSocket OnReceive Interface Definition\nDESCRIPTION: This code snippet defines the `OnReceiveInterface` for handling WebSocket messages in Hyperf. The interface specifies the `onReceive` method, which accepts either a `Swoole\\Coroutine\\Server\\Connection` (for coroutine style) or a `Swoole\\Server` (for asynchronous style) as the server parameter. This reflects the differences in callback signatures between the two server styles.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/coroutine-server.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\Contract;\n\nuse Swoole\\Coroutine\\Server\\Connection;\nuse Swoole\\Server as SwooleServer;\n\ninterface OnReceiveInterface\n{\n     /**\n      * @param Connection|SwooleServer $server\n      */\n     public function onReceive($server, int $fd, int $reactorId, string $data): void;\n}\n\n```\n\n----------------------------------------\n\nTITLE: GRPC Resource Example\nDESCRIPTION: This PHP code defines a gRPC resource class `HiReplyResource` that extends `GrpcResource`. It overrides the `toArray` method to define the structure of the gRPC response and the `expect` method to specify the message class (`HiReply::class`). The `toArray` method includes nested resources like `HiUserResource`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace HyperfTest\\ResourceGrpc\\Stubs\\Resources;\n\nuse Hyperf\\ResourceGrpc\\GrpcResource;\nuse HyperfTest\\ResourceGrpc\\Stubs\\Grpc\\HiReply;\n\nclass HiReplyResource extends GrpcResource\n{\n    public function toArray(): array\n    {\n        return [\n            'message' => $this->message,\n            'user' => HiUserResource::make($this->user),\n        ];\n    }\n\n    public function expect(): string\n    {\n        return HiReply::class;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Producing an AMQP Message\nDESCRIPTION: This PHP code demonstrates how to produce an AMQP message. It creates an instance of the `DemoProducer`, retrieves the `Producer` instance from the container, and then calls the `produce` method to send the message to the broker.  It depends on the `Hyperf\\Amqp\\Producer`, `App\\Amqp\\Producers\\DemoProducer`, and `Hyperf\\Context\\ApplicationContext` classes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/amqp.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Amqp\\Producer;\nuse App\\Amqp\\Producers\\DemoProducer;\nuse Hyperf\\Context\\ApplicationContext;\n\n$message = new DemoProducer(1);\n$producer = ApplicationContext::getContainer()->get(Producer::class);\n$result = $producer->produce($message);\n```\n\n----------------------------------------\n\nTITLE: Raw Expressions with whereRaw - PHP\nDESCRIPTION: Demonstrates using `whereRaw` to include raw SQL expressions in the WHERE clause of a query. This is useful for complex conditions not easily expressed with the query builder and allows parameter binding. Requires the `Hyperf\\DbConnection\\Db` facade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('order')\n    ->whereRaw('price > IF(state = \"TX\", ?, 100)', [200])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Using DI Container in Hyperf Nano\nDESCRIPTION: Shows how to use the dependency injection container in Hyperf Nano. This example binds a class to the container and retrieves it within a route handler. Requires the `hyperf/nano` package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nano.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Nano\\ContainerProxy;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nclass Foo {\n    public function bar() {\n        return 'bar';\n    }   \n}\n\n$app = AppFactory::create();\n$app->getContainer()->set(Foo::class, new Foo());\n\n$app->get('/', function () {\n    /** @var ContainerProxy $this */\n    $foo = $this->get(Foo::class);\n    return $foo->bar();\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Abstract Object Injection: Implementation\nDESCRIPTION: Implementation of the UserServiceInterface interface, which is injected in the Controller.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Service;\n\nclass UserService implements UserServiceInterface\n{\n    public function getInfoById(int $id)\n    {\n        // 我们假设存在一个 Info 实体\n        return (new Info())->fill($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Command with $name Property (PHP)\nDESCRIPTION: Defines a command name using the `$name` property within the command class. This is one of the methods to associate a command class with a specific command name that can be executed from the console.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    /**\n     * 執行的命令列\n     */\n    protected ?string $name = 'foo:hello';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Access Polymorphic One-to-One Relation (PHP)\nDESCRIPTION: This code demonstrates how to access a polymorphic one-to-one relation.  It finds a `User` by ID and retrieves the associated `Image` model.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Model\\User;\n\n$user = User::find(1);\n\n$image = $user->image;\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Validation using 'sometimes'\nDESCRIPTION: Illustrates how to use the `sometimes` rule to conditionally apply validation rules. In this example, the 'email' field is only validated if it exists in the input data. It demonstrates the basic usage of 'sometimes' with 'required' and 'email' rules.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_41\n\nLANGUAGE: PHP\nCODE:\n```\n$validator = $this->validationFactory->make($data, [\n    'email' => 'sometimes|required|email',\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Attribute Casts in Hyperf Model (PHP)\nDESCRIPTION: This example shows how to define attribute casts using the `$casts` property in a Hyperf model. Attributes listed in `$casts` are automatically converted to the specified data type when retrieved from the database. Common types include `integer`, `boolean`, `string`, `array`, `object`, etc.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/mutators.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * The attributes that should be cast.\n     *\n     * @var array\n     */\n    protected $casts = [\n        'is_admin' => 'boolean',\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Log File Rotation by Date\nDESCRIPTION: This configuration changes the handler to `RotatingFileHandler` to rotate log files by date. It sets the filename and log level.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/logger.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'handler' => [\n            'class' => Monolog\\Handler\\RotatingFileHandler::class,\n            'constructor' => [\n                'filename' => BASE_PATH . '/runtime/logs/hyperf.log',\n                'level' => Monolog\\Level::Debug,\n            ],\n        ],\n        'formatter' => [\n            'class' => Monolog\\Formatter\\LineFormatter::class,\n            'constructor' => [\n                'format' => null,\n                'dateFormat' => null,\n                'allowInlineLineBreaks' => true,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Install S3 Adapter (Flysystem v1.0)\nDESCRIPTION: This command installs the AWS S3 adapter for Flysystem v1.0 along with the Hyperf Guzzle HTTP client, enabling interaction with AWS S3 storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/filesystem.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"league/flysystem-aws-s3-v3:^1.0\"\ncomposer require hyperf/guzzle\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Constants Package using Composer\nDESCRIPTION: This command installs the `hyperf/constants` package using Composer. This package provides the functionality for defining enum classes with annotations in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/constants.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/constants\n```\n\n----------------------------------------\n\nTITLE: Installing S3 Adapter (Flysystem v1.0)\nDESCRIPTION: Installs the S3 adapter for Flysystem v1.0, and also installs `hyperf/guzzle` for coroutine support when using S3.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/filesystem.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"league/flysystem-aws-s3-v3:^1.0\"\ncomposer require hyperf/guzzle\n```\n\n----------------------------------------\n\nTITLE: Setting Redis Read Timeout Option in PHP\nDESCRIPTION: This PHP code shows how to set the Redis read timeout option to prevent timeouts during long-running operations. It configures the Redis client to wait indefinitely for data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/redis.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', null),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n        'options' => [\n            \\Redis::OPT_READ_TIMEOUT => -1,\n            // 或者 'read_timeout' => -1, v3.1.3 或更高版本\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Accessing PSR-16 Cache Interface in Hyperf\nDESCRIPTION: This snippet demonstrates how to access the PSR-16 cache interface from the dependency injection container in Hyperf. This allows you to use a standard cache interface for interacting with the cache implementation, such as when rewriting the cache module of a library like EasyWeChat.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/cache.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$cache = $container->get(\\Psr\\SimpleCache\\CacheInterface::class);\n```\n\n----------------------------------------\n\nTITLE: Defining Local Middleware via Configuration - PHP\nDESCRIPTION: This code snippet shows how to define local middleware for specific routes using the `$options` array in the `Router::get`, `Router::post`, etc. methods. The 'middleware' key is used to specify the middleware classes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/middleware/middleware.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Middleware\\FooMiddleware;\nuse Hyperf\\HttpServer\\Router\\Router;\n\n// 每個路由定義方法都可接收一個 $options 引數\nRouter::get('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\nRouter::post('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\nRouter::put('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\nRouter::patch('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\nRouter::delete('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\nRouter::head('/', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\nRouter::addRoute(['GET', 'POST', 'HEAD'], '/index', [\\App\\Controller\\IndexController::class, 'index'], ['middleware' => [FooMiddleware::class]]);\n\n// 該 Group 下的所有路由都將應用配置的中介軟體\nRouter::addGroup(\n    '/v2', function () {\n        Router::get('/index', [\\App\\Controller\\IndexController::class, 'index']);\n    },\n    ['middleware' => [FooMiddleware::class]]\n);\n```\n\n----------------------------------------\n\nTITLE: Adding a Crontab Task in Hyperf Nano\nDESCRIPTION: Shows how to add a crontab task to a Hyperf Nano application. This example adds a task that logs a message to the console every second. Requires the `hyperf/nano` package and `Hyperf\\Contract\\StdoutLoggerInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nano.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addCrontab('* * * * * *', function(){\n    $this->get(StdoutLoggerInterface::class)->info('execute every second!');\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Configure Stdout Logger Dependency\nDESCRIPTION: This code configures the dependency injection container to use the custom StdoutLoggerFactory for the StdoutLoggerInterface. This ensures that when the StdoutLoggerInterface is injected, it will be resolved to a Monolog Logger instance instead of the default implementation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/logger.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\Contract\\StdoutLoggerInterface::class => \\App\\StdoutLoggerFactory::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Abstracting RpcMessage (Hyperf)\nDESCRIPTION: This code shows how to abstract the `RpcMessage` class in Hyperf for easier RPC calls.  By extending the `RpcMessage` class and defining the exchange and routing key within the class, you can simplify the RPC call process and avoid repeatedly specifying these parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Amqp\\Message\\RpcMessage;\n\nclass FooRpcMessage extends RpcMessage\n{\n\n    protected string $exchange = 'hyperf';\n\n    protected array|string $routingKey = 'hyperf';\n    \n    public function __construct($data)\n    {\n        // 要传递数据\n        $this->payload = $data;\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Create Hyperf Project with Composer (Swow)\nDESCRIPTION: This command creates a new Hyperf project based on the swow-skeleton using Composer. It uses the Swow engine.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/install.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer create-project hyperf/swow-skeleton \n```\n\n----------------------------------------\n\nTITLE: Defining a UserRegistered Listener (PHP)\nDESCRIPTION: This code defines a UserRegisteredListener class that implements the ListenerInterface. The listen() method specifies the events that this listener should listen to. The process() method contains the logic to be executed when the event is triggered, allowing access to the event's data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/event.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Listener;\n\nuse App\\Event\\UserRegistered;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\n\nclass UserRegisteredListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        // 返回一個該監聽器要監聽的事件陣列，可以同時監聽多個事件\n        return [\n            UserRegistered::class,\n        ];\n    }\n\n    /**\n     * @param UserRegistered $event\n     */\n    public function process(object $event): void\n    {\n        // 事件觸發後該監聽器要執行的程式碼寫在這裡，比如該示例下的傳送使用者註冊成功簡訊等\n        // 直接訪問 $event 的 user 屬性獲得事件觸發時傳遞的引數值\n        // $event->user;\n        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Injection for ModelUpdateVisitor (Hyperf)\nDESCRIPTION: This code snippet configures the dependency injection container to use the overridden `ModelUpdateVisitor` instead of the default one.  This ensures that the custom data type handling logic is used when generating models.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/gen.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    Hyperf\\Database\\Commands\\Ast\\ModelUpdateVisitor::class => App\\Kernel\\Visitor\\ModelUpdateVisitor::class,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Coroutine Parallel with Max Concurrent Limit\nDESCRIPTION: Illustrates the use of Hyperf's Parallel feature with a limit on the maximum number of concurrently running coroutines.  This is useful for preventing overwhelming downstream services.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/coroutine.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Coroutine\\Exception\\ParallelExecutionException;\nuse Hyperf\\Coroutine\\Coroutine;\nuse Hyperf\\Coroutine\\Parallel;\n\n$parallel = new Parallel(5);\nfor ($i = 0; $i < 20; $i++) {\n    $parallel->add(function () {\n        sleep(1);\n        return Coroutine::id();\n    });\n} \n\ntry{\n   $results = $parallel->wait(); \n} catch(ParallelExecutionException $e){\n    // $e->getResults() 获取协程中的返回值。\n    // $e->getThrowables() 获取协程中出现的异常。\n}\n```\n\n----------------------------------------\n\nTITLE: Crontab Enable using Array\nDESCRIPTION: This demonstrates using an array for the `enable` property, pointing to a class and method to determine task enablement. `EnableChecker::isEnable()` is called to decide if the task should run.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/crontab.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Crontab;\n\nclass EnableChecker\n{\n    public function isEnable(): bool\n    {\n        return false;\n    }\n}\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Crontab;\n\nuse Carbon\\Carbon;\nuse Hyperf\\Crontab\\Annotation\\Crontab;\n\n#[Crontab(name: \"Echo\", rule: \"* * * * *\", callback: \"execute\", enable: [EnableChecker::class, \"isEnable\"], memo: \"這是一個示例的定時任務\")]\nclass EchoCrontab\n{\n    public function execute()\n    {\n        var_dump(Carbon::now()->toDateTimeString());\n    }\n\n    public function isEnable(): bool\n    {\n        return true;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Listener via Annotation (PHP)\nDESCRIPTION: This code shows how to register a listener using the #[Listener] annotation.  Listeners registered via annotation must be in the 'Hyperf Annotation Scanning Domain'.  The `priority` attribute can define the execution order.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/event.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Listener;\n\nuse App\\Event\\UserRegistered;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\n\n#[Listener]\nclass UserRegisteredListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        // 返回一個該監聽器要監聽的事件陣列，可以同時監聽多個事件\n        return [\n            UserRegistered::class,\n        ];\n    }\n\n    /**\n     * @param UserRegistered $event\n     */\n    public function process(object $event): void\n    {\n        // 事件觸發後該監聽器要執行的程式碼寫在這裡，比如該示例下的傳送使用者註冊成功簡訊等\n        // 直接訪問 $event 的 user 屬性獲得事件觸發時傳遞的引數值\n        // $event->user;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Coroutine Aspect for tracing\nDESCRIPTION: This code snippet shows how to enable tracing for coroutines by configuring the `CoroutineAspect` in the `aspects.php` file.  The `Hyperf\\Tracer\\Aspect\\CoroutineAspect::class` aspect is added to the return array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tracer.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    Hyperf\\Tracer\\Aspect\\CoroutineAspect::class,\n];\n```\n\n----------------------------------------\n\nTITLE: MetricFactoryReady Event Listener\nDESCRIPTION: Demonstrates how to listen for the `MetricFactoryReady` event to create and use metrics that span the entire application lifecycle, such as monitoring the length of an asynchronous queue.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Metric\\Event\\MetricFactoryReady;\nuse Psr\\Container\\ContainerInterface;\nuse Redis;\n\nclass OnMetricFactoryReady implements ListenerInterface\n{\n    protected ContainerInterface $container;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n    }\n\n    public function listen(): array\n    {\n        return [\n            MetricFactoryReady::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        $redis = $this->container->get(Redis::class);\n        $gauge = $event\n                    ->factory\n                    ->makeGauge('queue_length', ['driver'])\n                    ->with('redis');\n        while (true) {\n            $length = $redis->llen('queue');\n            $gauge->set($length);\n            sleep(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Select Columns - PHP\nDESCRIPTION: Illustrates how to specify which columns to retrieve from a database table using the `select()` method. This allows you to retrieve only the necessary columns, improving performance and reducing data transfer. Requires the `Hyperf\\DbConnection\\Db` facade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->select('name', 'email as user_email')->get();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Signal Handler in Hyperf\nDESCRIPTION: This code defines a custom signal handler class `TermSignalHandler` that implements the `SignalHandlerInterface`. It listens for the `SIGTERM` signal on the Worker process and, when received, dumps the signal value.  The #[Signal] attribute registers the class as a signal handler.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/signal.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Signal;\n\nuse Hyperf\\Signal\\Annotation\\Signal;\nuse Hyperf\\Signal\\SignalHandlerInterface;\n\n#[Signal]\nclass TermSignalHandler implements SignalHandlerInterface\n{\n    public function listen(): array\n    {\n        return [\n            [SignalHandlerInterface::WORKER, SIGTERM],\n        ];\n    }\n\n    public function handle(int $signal): void\n    {\n        var_dump($signal);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring a UDP Server in Hyperf\nDESCRIPTION: This code snippet demonstrates the configuration for a UDP server in Hyperf. It defines the server name, type, host, port, socket type, and callbacks. The `Event::ON_PACKET` callback is mapped to the `onPacket` method of the `UdpServer` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tcp-server.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 以下刪除了其他不相關的配置項\n    'servers' => [\n        [\n            'name' => 'udp',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9505,\n            'sock_type' => SWOOLE_SOCK_UDP,\n            'callbacks' => [\n                Event::ON_PACKET => [App\\Controller\\UdpServer::class, 'onPacket'],\n            ],\n            'settings' => [\n                // 按需配置\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Set Usage Configuration (PHP)\nDESCRIPTION: This example sets a specific usage example for a command using the `addUsage` method in the `configure` method. This provides users with examples of how to use the command with different options.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addUsage('--name Demo Code');\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Session Data\nDESCRIPTION: This code demonstrates how to clear all data stored in the current session using the `clear()` method of the `SessionInterface`.  After calling this method, the session will be empty.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/session.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$this->session->clear();\n```\n\n----------------------------------------\n\nTITLE: Router Configuration for Multi Port Server - Hyperf PHP\nDESCRIPTION: This code snippet defines the router for a specific http listener, here define a route for the innerHttp server\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/overview.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nRouter::addServer('innerHttp', function () {\n    Router::get('/', 'App\\Controller\\IndexController@index');\n});\n```\n\n----------------------------------------\n\nTITLE: Get Container Object Statically in Hyperf\nDESCRIPTION: This snippet shows how to get the `Container` object statically using `\\Hyperf\\Context\\ApplicationContext::getContainer()`.  This is useful when the class is not managed by the container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/di.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$container = \\Hyperf\\Context\\ApplicationContext::getContainer();\n```\n\n----------------------------------------\n\nTITLE: Optional Inject with #[Inject(required: false)]\nDESCRIPTION: This demonstrates optional dependency injection using the `#[Inject]` annotation with `required: false`. If `UserService` cannot be resolved, `$userService` will be `null`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/di.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserService;\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass IndexController\n{\n    /**\n     * Inject the attribute type object declared by the `@var` annotation through the `#[Inject]` annotation\n     * Null will be injected when UserService does not exist in the DI container or cannot be created\n     *\n     * @var UserService\n     */\n    #[Inject(required: false)]\n    private $userService;\n    \n    public function index()\n    {\n        $id = 1;\n        if ($this->userService instanceof UserService) {\n            // $userService is available only in the condition that it is not null\n            return $this->userService->getInfoById($id);    \n        }\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Relationship Loading\nDESCRIPTION: This PHP code shows how to conditionally load the 'posts' relationship in a User resource.  The `whenLoaded` method ensures that the 'posts' relationship is only included if it has been loaded on the model, preventing N+1 query problems.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'posts' => PostResource::collection($this->whenLoaded('posts')),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Returning Resource Collection with Preserved Keys\nDESCRIPTION: Demonstrates how to return a resource collection from a controller with preserved keys, achieved by setting the `$preserveKeys` property of the resource to true and using `keyBy` on the model collection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\User as UserResource;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return UserResource::collection(User::all()->keyBy->id)->toResponse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Where Exists SQL Example\nDESCRIPTION: Shows the equivalent SQL statement generated by the `whereExists` example.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\nselect * from users\nwhere exists (\n    select 1 from orders where orders.user_id = users.id\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Command Description (PHP)\nDESCRIPTION: Sets the description for a command using the `setDescription()` method within the `configure()` method. This description is displayed in the command list and help message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->setDescription('Hyperf Demo Command');\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS in Nginx\nDESCRIPTION: This Nginx configuration snippet demonstrates how to enable CORS directly on the web server.  It adds the necessary headers to allow cross-origin requests and handles OPTIONS requests by returning a 204 No Content response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/middleware/middleware.md#_snippet_13\n\nLANGUAGE: Nginx\nCODE:\n```\nlocation / {\n    add_header Access-Control-Allow-Origin *;\n    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';\n    add_header Access-Control-Allow-Headers 'DNT,Keep-Alive,User-Agent,Cache-Control,Content-Type,Authorization';\n\n    if ($request_method = 'OPTIONS') {\n        return 204;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Error Messages for Array Fields in Hyperf\nDESCRIPTION: This PHP code retrieves all error messages associated with array fields named 'foo'.  The `*` wildcard is used to target all elements within the 'foo' array.  The code iterates through the error messages for each element in the array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nforeach ($errors->get('foo.*') as $message) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loader Configuration PHP\nDESCRIPTION: Configuration for lazy loading, mapping a proxy class to the original class. The proxy is automatically generated by Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    /**\n     * 格式為：代理類名 => 原類名\n     * 代理類此時是不存在的，Hyperf會在runtime文件夾下自動生成該類。\n     * 代理類類名和命名空間可以自由定義。\n     */\n    'App\\Service\\LazyUserService' => \\App\\Service\\UserServiceInterface::class\n];\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Handling using Observable::fromHttpRoute (PHP)\nDESCRIPTION: Handles HTTP requests using ReactiveX. This example intercepts POST and PUT requests to the `/save` route, buffers the request bodies in batches of ten, and then processes the batched data. This example also shows how to pass a controller to `Observable::fromHttpRoute` to act as middleware.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/reactive-x.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\ReactiveX\\Example;\n\nuse Hyperf\\Database\\Events\\QueryExecuted;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\nuse Hyperf\\ReactiveX\\Observable;\nuse Psr\\Http\\Message\\RequestInterface;\n\nclass BatchSaveRoute implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            BootApplication::class,\n        ];\n    }\n\n    /**\n     * @param QueryExecuted $event\n     */\n    public function process(object $event)\n    {\n        Observable::fromHttpRoute(['POST', 'PUT'], '/save')\n            ->map(\n                function (RequestInterface $request) {\n                    return $request->getBody();\n                }\n            )\n            ->bufferWithCount(10)\n            ->subscribe(\n                function (array $bodies) {\n                    echo count($bodies); //10\n                }\n            );\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$observable = Observable::fromHttpRoute('GET', '/hello-hyperf', 'App\\Controller\\IndexController::hello');\n```\n\n----------------------------------------\n\nTITLE: Blade Unless Statement\nDESCRIPTION: This Blade template demonstrates how to use the `@unless` directive, which is the opposite of the `@if` directive. The code inside the `@unless` block is executed if the condition is false.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_14\n\nLANGUAGE: blade\nCODE:\n```\n@unless (is_signed_in())\n    You are not signed in.\n@endunless\n```\n\n----------------------------------------\n\nTITLE: StatsD Configuration Example\nDESCRIPTION: This PHP code snippet shows a complete StatsD configuration within the `metric.php` file. It includes settings for the driver, namespace, UDP host/port, enable batch, push interval, and sample rate. It retrieves values from environment variables where possible, providing defaults.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'default' => env('METRIC_DRIVER', 'statd'),\n    'use_standalone_process' => env('TELEMETRY_USE_STANDALONE_PROCESS', true),\n    'enable_default_metric' => env('TELEMETRY_ENABLE_DEFAULT_TELEMETRY', true),\n    'metric' => [\n        'statsd' => [\n            'driver' => Hyperf\\Metric\\Adapter\\StatsD\\MetricFactory::class,\n            'namespace' => env('APP_NAME', 'skeleton'),\n            'udp_host' => env('STATSD_UDP_HOST', '127.0.0.1'),\n            'udp_port' => env('STATSD_UDP_PORT', '8125'),\n            'enable_batch' => env('STATSD_ENABLE_BATCH', true),\n            'push_interval' => env('STATSD_PUSH_INTERVAL', 5),\n            'sample_rate' => env('STATSD_SAMPLE_RATE', 1.0),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Publishing NATS Message\nDESCRIPTION: This PHP code demonstrates publishing a message to a NATS subject using the `publish` method of the `DriverInterface`. The message is an associative array that will be sent as the payload.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nats.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Nats\\Driver\\DriverInterface;\n\n#[AutoController(prefix: \"nats\")]\nclass NatsController extends AbstractController\n{\n    #[Inject]\n    protected DriverInterface $nats;\n\n    public function publish()\n    {\n        $res = $this->nats->publish('hyperf.demo', [\n            'id' => 'Hyperf',\n        ]);\n\n        return $this->response->success($res);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Route Parameters using route() method - PHP\nDESCRIPTION: Demonstrates retrieving route parameters using the `route()` method of the Request object. The first argument is the parameter name, and the second optional argument is the default value if the parameter is not found.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass IndexController\n{\n    public function info(RequestInterface $request)\n    {\n        // 存在則返回，不存在則返回默認值 null\n        $id = $request->route('id');\n        // 存在則返回，不存在則返回默認值 0\n        $id = $request->route('id', 0);\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Controller with Annotations (Basic)\nDESCRIPTION: Defines a Hyperf controller with rate limiting applied to specific methods using the `Hyperf\\RateLimit\\Annotation\\RateLimit` annotation. It demonstrates setting the `create` and `capacity` parameters to control the QPS and burst limit.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/rate-limit.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\nuse Hyperf\\RateLimit\\Annotation\\RateLimit;\n\n#[Controller(prefix: \"rate-limit\")]\nclass RateLimitController\n{\n    #[RequestMapping(path: \"test\")]\n    #[RateLimit(create: 1, capacity: 3)]\n    public function test()\n    {\n        return [\"QPS 1, 峰值3\"];\n    }\n\n    #[RequestMapping(path: \"test2\")]\n    #[RateLimit(create: 2, consume: 2, capacity: 4)]\n    public function test2()\n    {\n        return [\"QPS 2, 峰值2\"];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using custom methods with anonymous functions in Hyperf DB\nDESCRIPTION: Demonstrates how to use custom methods with anonymous functions to directly operate the underlying PDO connection. It allows for more control over the query execution and fetch mode, but requires manual handling of compatibility issues. The example shows how to fetch results as objects using PDO::FETCH_OBJ.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/db.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DB\\DB;\n\n$sql = 'SELECT * FROM `user` WHERE id = ?;';\n$bindings = [2];\n$mode = \\PDO::FETCH_OBJ;\n$res = DB::run(function (\\PDO $pdo) use ($sql, $bindings, $mode) {\n    $statement = $pdo->prepare($sql);\n\n    $this->bindValues($statement, $bindings);\n\n    $statement->execute();\n\n    return $statement->fetchAll($mode);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an RPC Consumer (Hyperf)\nDESCRIPTION: This code snippet demonstrates how to create an AMQP consumer for handling RPC requests in Hyperf. The `ReplyConsumer` consumes messages from a specific exchange and routing key, processes the message, and replies to the producer with the processed data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Amqp\\Consumer;\n\nuse Hyperf\\Amqp\\Annotation\\Consumer;\nuse Hyperf\\Amqp\\Message\\ConsumerMessage;\nuse Hyperf\\Amqp\\Result;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n#[Consumer(exchange: \"hyperf\", routingKey: \"hyperf\", queue: \"rpc.reply\", name: \"ReplyConsumer\", nums: 1, enable: true)]\nclass ReplyConsumer extends ConsumerMessage\n{\n    public function consumeMessage($data, AMQPMessage $message): Result\n    {\n        $data['message'] .= 'Reply:' . $data['message'];\n\n        $this->reply($data, $message);\n\n        return Result::ACK;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calling the Controller with cURL Bash\nDESCRIPTION: This command uses cURL to send an HTTP request to the defined controller route with a `target` parameter. It demonstrates how to test the controller endpoint and verify the response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/controller.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl 'http://127.0.0.1:9501/?target=Hyperf'\nHello Hyperf.\n```\n\n----------------------------------------\n\nTITLE: Randomizing query results using inRandomOrder in Hyperf\nDESCRIPTION: This snippet demonstrates how to retrieve results in random order using the `inRandomOrder` method.  It's useful for selecting random records from a table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$randomUser = Db::table('users')->inRandomOrder()->first();\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Native SQL in Hyperf (PHP)\nDESCRIPTION: This snippet demonstrates how to query data using native SQL statements within the Hyperf framework. The `Db::select()` method is used to execute a SELECT query and return the results as an array of `StdClass` objects.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/quick-start.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\DbConnection\\Db;\n\n$users = Db::select('SELECT * FROM `user` WHERE gender = ?',[1]); // return array\n\nforeach($users as $user){\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Configure WebSocket Proxy with Nginx\nDESCRIPTION: This snippet configures Nginx as a WebSocket reverse proxy for Hyperf applications.  It sets up an upstream block specifically for WebSocket connections, using IP hash for sticky sessions. The server block listens for HTTP requests, upgrades them to WebSocket connections, and forwards them to the Hyperf WebSocket server. Configuration includes necessary headers for WebSocket connections and a timeout setting.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/nginx.md#_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\n# At least one Hyperf node is required, multiple configuration lines\nupstream hyperf_websocket {\n    # Set the load balancing mode to IP Hash algorithm mode, so that each request from different clients will interact with the same node\n    ip_hash;\n    # IP and port of Hyperf WebSocket Server\n    server 127.0.0.1:9503;\n    server 127.0.0.1:9504;\n}\n\nserver {\n    listen 80;\n    server_name websocket.hyperf.io;\n    \n    location / {\n        # WebSocket Header\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade websocket;\n        proxy_set_header Connection \"Upgrade\";\n        \n        # Forward the client's Host and IP information to the corresponding node  \n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n    \n        # The connection between the client and the server is automatically disconnected after 60s of no interaction, please set according to the actual business scenario\n        proxy_read_timeout 60s ;\n        \n        # Execute proxy access to real server\n        proxy_pass http://hyperf_websocket;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling 'creating' method in Model\nDESCRIPTION: This code illustrates how to handle conflicts when both the Snowflake trait and a custom 'creating' method are used in a database model.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/snowflake.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Database\\Model\\Model;\nuse Hyperf\\Snowflake\\Concern\\Snowflake;\n\nclass User extends Model {\n    use Snowflake {\n        creating as create;\n    }\n\n    public function creating()\n    {\n        $this->create();\n        // Do something ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Hyperf Deployment\nDESCRIPTION: This snippet shows how to test the deployed Hyperf application by sending a curl request to the specified port on the host machine. It demonstrates retrieving data from the default Hyperf welcome interface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/daocloud.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl http://127.0.0.1:9501\n{\"code\":0,\"data\":{\"user\":\"Hyperf\",\"method\":\"GET\",\"message\":\"Hello Hyperf.\"}}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Pool via Composer\nDESCRIPTION: Installs the Hyperf Pool component using Composer, a dependency management tool for PHP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/pool.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/pool\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Index During Column Definition\nDESCRIPTION: This code shows how to create a unique index when defining a column within a schema using the `unique()` method.  This is done inline with the column definition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// 在定義時建立索引\n$table->string('name')->unique();\n```\n\n----------------------------------------\n\nTITLE: Configuring phpunit.xml for Code Coverage in Hyperf\nDESCRIPTION: This XML snippet configures PHPUnit to generate code coverage reports.  It defines the test suites, specifies the directories to include for coverage analysis (./app), and sets the output target for the coverage-html report to 'cover/'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/testing.md#_snippet_15\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         bootstrap=\"./test/bootstrap.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n    <testsuites>\n        <testsuite name=\"Tests\">\n            <directory suffix=\"Test.php\">./test</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        // Need to generate a file for unit test coverage\n        <whitelist processUncoveredFilesFromWhitelist=\"false\">\n            <directory suffix=\".php\">./app</directory>\n        </whitelist>\n    </filter>\n\n    <logging>\n        <log type=\"coverage-html\" target=\"cover/\"/>\n    </logging>\n</phpunit>\n\n```\n\n----------------------------------------\n\nTITLE: Install hyperf/rpc-server Component\nDESCRIPTION: Installs the hyperf/rpc-server component using Composer.  This component is required to implement a JSON RPC server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/json-rpc.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/rpc-server\n```\n\n----------------------------------------\n\nTITLE: Install Blade Engine (Bash)\nDESCRIPTION: This command installs the Blade template engine using Composer, enabling the use of Blade templates for view rendering in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/view-engine\n```\n\n----------------------------------------\n\nTITLE: Install hyperf/rpc-client Component\nDESCRIPTION: Installs the hyperf/rpc-client component using Composer.  This component is required to implement a JSON RPC client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/json-rpc.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/rpc-client\n```\n\n----------------------------------------\n\nTITLE: Add TraceMiddleware to Hyperf HTTP Middleware\nDESCRIPTION: This PHP code snippet configures the Hyperf HTTP middleware stack by adding the `Hyperf\\Tracer\\Middleware\\TraceMiddleware::class`. This middleware is responsible for capturing and propagating tracing information for incoming HTTP requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tracer.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'http' => [\n        \\Hyperf\\Tracer\\Middleware\\TraceMiddleware::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configure Default Metric Driver in .env\nDESCRIPTION: This PHP snippet shows the default metric driver configuration in .env file.  The driver can be set to 'prometheus', 'statd', or 'influxdb'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'default' => env('METRIC_DRIVER', 'prometheus'),\n```\n\n----------------------------------------\n\nTITLE: Disable Swoole Short Names\nDESCRIPTION: This snippet demonstrates how to disable Swoole short function names by setting `swoole.use_shortname = 'Off'` in the php.ini configuration file.  This setting is crucial for preventing errors during server startup. It cannot be set using `ini_set()`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/questions.md#_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\nswoole.use_shortname = 'Off'\n```\n\n----------------------------------------\n\nTITLE: Rendering Blade View (Hyperf)\nDESCRIPTION: This code snippet shows a Hyperf controller action that renders a Blade view named 'child' using the `Hyperf\\ViewEngine\\view` helper function.  The view is cast to a string before being returned.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse function Hyperf\\ViewEngine\\view;\n\n#[AutoController(prefix: \"view\")]\nclass ViewController extends AbstractController\n{\n    public function child()\n    {\n        return (string) view('child');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing Insert, Update, Delete Queries in Hyperf\nDESCRIPTION: Demonstrates how to execute INSERT, UPDATE, and DELETE queries using the `Hyperf\\DbConnection\\Db` class in Hyperf. The methods return a boolean for INSERT and an integer for UPDATE and DELETE, representing the number of affected rows.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/quick-start.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\DbConnection\\Db;\n\n$inserted = Db::insert('INSERT INTO user (id, name) VALUES (?, ?)', [1, 'Hyperf']); // 返回是否成功 bool\n\n$affected = Db::update('UPDATE user set name = ? WHERE id = ?', ['John', 1]); // 返回受影響的行數 int\n\n$affected = Db::delete('DELETE FROM user WHERE id = ?', [1]); // 返回受影響的行數 int\n\n$result = Db::statement(\"CALL pro_test(?, '?')\", [1, 'your words']);  // 返回 bool  CALL pro_test(?，?) 為儲存過程，屬性為 MODIFIES SQL DATA\n```\n\n----------------------------------------\n\nTITLE: Store Data in Session\nDESCRIPTION: Stores a key-value pair in the session. The 'foo' key is assigned the value 'bar'.  The set method saves the data to the current session.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/session.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$this->session->set('foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Require Doctrine DBAL for Schema Changes in Hyperf\nDESCRIPTION: This command adds the Doctrine DBAL library as a dependency to your project.  It is required to determine the current state of fields and create the SQL queries necessary to adjust fields during schema changes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require \"doctrine/dbal:^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Update Interface File - Hyperf\nDESCRIPTION: This snippet shows how to update an interface to use the defined object(MathValue) as request and response in Hyperf JsonRpc services.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/json-rpc.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\JsonRpc;\n\ninterface CalculatorServiceInterface\n{\n    public function sum(MathValue $v1, MathValue $v2): MathValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Full Redis Configuration (Hyperf CLI)\nDESCRIPTION: Publishes the complete configuration file for the Redis component in Hyperf, allowing developers to customize settings beyond what's defined in the default configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/redis.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/redis\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Configuration for Setting App Label\nDESCRIPTION: This Dockerfile snippet demonstrates how to set the `app.name` label for a Docker container, which is used by Alibaba Cloud Log Service to identify the application logs.  The `app.name` value should match the configuration specified in the Logtail configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/aliyun-logger.md#_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Default Dockerfile\n\nFROM hyperf/hyperf:7.4-alpine-v3.11-swoole\nLABEL maintainer=\"Hyperf Developers <group@hyperf.io>\" version=\"1.0\" license=\"MIT\" app.name=\"hyperf-demo-api\"\n\n# 其它內容省略\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster with 'name' in Dockerfile\nDESCRIPTION: This snippet shows how to configure Redis Cluster within a Dockerfile using a 'name'.  It sets PHP INI settings for Redis cluster seeds, timeouts, and authentication.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/redis.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n    # - config PHP\n    && { \\\n        echo \"upload_max_filesize=100M\"; \\\n        echo \"post_max_size=108M\"; \\\n        echo \"memory_limit=1024M\"; \\\n        echo \"date.timezone=${TIMEZONE}\"; \\\n        echo \"redis.clusters.seeds = \\\"mycluster[]=localhost:7000&mycluster[]=localhost:7001\\\"\"; \\\n        echo \"redis.clusters.timeout = \\\"mycluster=5\\\"\"; \\\n        echo \"redis.clusters.read_timeout = \\\"mycluster=10\\\"\"; \\\n        echo \"redis.clusters.auth = \\\"mycluster=password\\\"\";\n    } | tee conf.d/99-overrides.ini \\\n\n```\n\n----------------------------------------\n\nTITLE: Generating a Snowflake ID\nDESCRIPTION: This snippet demonstrates how to obtain an IdGeneratorInterface instance from the DI container and use it to generate a Snowflake ID. It requires the Hyperf context and IdGeneratorInterface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/snowflake.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Snowflake\\IdGeneratorInterface;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n$generator = $container->get(IdGeneratorInterface::class);\n\n$id = $generator->generate();\n```\n\n----------------------------------------\n\nTITLE: Registering CrontabDispatcherProcess\nDESCRIPTION: Registers the `CrontabDispatcherProcess` in the `processes.php` configuration file. This process is responsible for analyzing and scheduling tasks when the Hyperf service starts.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/crontab.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/processes.php\nreturn [\n    Hyperf\\Crontab\\Process\\CrontabDispatcherProcess::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Install Aliyun OSS Adapter (Flysystem v1.0)\nDESCRIPTION: This command installs the Aliyun OSS adapter for Flysystem v1.0 using Composer. This adapter allows you to interact with Aliyun OSS storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/filesystem.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require xxtime/flysystem-aliyun-oss\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Connection Pool - PHP\nDESCRIPTION: This snippet demonstrates how to define a custom connection pool in Hyperf by extending the `Hyperf\\Pool\\Pool` class and implementing the `createConnection` method. The `createConnection` method should return an instance of a class that implements `Hyperf\\Contract\\ConnectionInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/pool.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Pool;\n\nuse Hyperf\\Contract\\ConnectionInterface;\nuse Hyperf\\Pool\\Pool;\n\nclass MyConnectionPool extends Pool\n{\n    public function createConnection(): ConnectionInterface\n    {\n        return new MyConnection();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Logger Configuration (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to modify the Logger configuration to be compatible with monolog/monolog 3.x, which uses PHP 8.1 features. It involves changing the type hint for the `$record` parameter to `array|LogRecord $record`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/3.0.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Kernel\\Log;\n\nuse Hyperf\\Context\\Context;\nuse Hyperf\\Coroutine\\Coroutine;\nuse Monolog\\LogRecord;\nuse Monolog\\Processor\\ProcessorInterface;\n\nclass AppendRequestIdProcessor implements ProcessorInterface\n{\n    public const REQUEST_ID = 'log.request.id';\n\n    public function __invoke(array|LogRecord $record)\n    {\n        $record['extra']['request_id'] = Context::getOrSet(self::REQUEST_ID, uniqid());\n        $record['extra']['coroutine_id'] = Coroutine::id();\n        return $record;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Raw Search Results\nDESCRIPTION: This code snippet demonstrates how to retrieve the raw search results from the search engine, instead of the hydrated model instances, by using the `raw` method. The raw results are typically an array of data returned directly from the search engine.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->raw();\n```\n\n----------------------------------------\n\nTITLE: Not In Validation with Rule Object\nDESCRIPTION: The `not_in:foo,bar,…` rule validates that the field under validation is not included in the given list of values.  This snippet shows how to construct the rule using `Rule::notIn`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($data, [\n    'toppings' => [\n        'required',\n        Rule::notIn(['sprinkles', 'cherries']),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Updating Hyperf Dependencies using Composer\nDESCRIPTION: This command updates Hyperf dependencies to the latest compatible versions, particularly for z-version upgrades which include bug fixes and compatible feature additions.  It should be executed from the root directory of the project. This command updates all hyperf components for better consistency and avoids issues caused by upgrading single components.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/versions.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update hyperf\n```\n\n----------------------------------------\n\nTITLE: Disable Consumer Autostart Locally\nDESCRIPTION: This PHP code demonstrates how to disable the autostart of a specific NSQ consumer by overriding the `isEnable()` method of the `Hyperf\\Nsq\\AbstractConsumer` class and returning `false`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nsq.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Nsq\\Consumer;\n\nuse Hyperf\\Nsq\\AbstractConsumer;\nuse Hyperf\\Nsq\\Annotation\\Consumer;\nuse Hyperf\\Nsq\\Message;\nuse Hyperf\\Nsq\\Result;\nuse Psr\\Container\\ContainerInterface;\n\n#[Consumer(topic: \"demo_topic\", channel: \"demo_channel\", name: \"DemoConsumer\", nums: 1)]\nclass DemoConsumer extends AbstractConsumer\n{\n    public function __construct(ContainerInterface $container)\n    {\n        parent::__construct($container);\n    }\n\n    public function isEnable(): bool \n    {\n        return false;\n    }\n\n    public function consume(Message $payload): string\n    {\n        $body = json_decode($payload->getBody(), true);\n        var_dump($body);\n        return Result::ACK;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Table Name in Hyperf Model\nDESCRIPTION: Demonstrates how to define a custom table name for a Hyperf model using the `$table` property. This overrides the default convention of using the plural form of the class name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected ?string $table = 'user';\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Data from Session\nDESCRIPTION: Retrieves a value from the session using its key. If the key exists, it returns the associated value; otherwise, it returns the default value (null in this case).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/session.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$this->session->get('foo', $default = null);\n```\n\n----------------------------------------\n\nTITLE: Executing Command in Command (PHP)\nDESCRIPTION: Demonstrates how to execute another command from within a command's `handle()` method using `$this->call()`.  This allows for chaining commands and reusing logic.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\nuse Psr\\Container\\ContainerInterface;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    protected ContainerInterface $container;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n\n        parent::__construct('foo');\n    }\n\n    public function configure()\n    {\n        parent::configure();\n        $this->setDescription('foo command');\n    }\n\n    public function handle()\n    {\n        $this->call('bar', [\n            '--foo' => 'foo'\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deprecated Resource Usage in Hyperf Utils\nDESCRIPTION: This entry indicates that `Hyperf\\Utils\\Resource` will be deprecated in v2.3 and suggests using `Hyperf\\Utils\\ResourceGenerator` instead. This change may require updating existing code to use the new class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/CHANGELOG-2.2.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nHyperf\\Utils\\Resource\n```\n\nLANGUAGE: PHP\nCODE:\n```\nHyperf\\Utils\\ResourceGenerator\n```\n\n----------------------------------------\n\nTITLE: Query With Date Type Casting PHP\nDESCRIPTION: This snippet demonstrates how to cast the `last_posted_at` attribute to a date type during the query in Hyperf using the `withCasts` method. This allows for easy manipulation of the date value directly from the query result, simplifying subsequent operations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/mutators.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$users = User::select([\n    'users.*',\n    'last_posted_at' => Post::selectRaw('MAX(created_at)')\n            ->whereColumn('user_id', 'users.id')\n])->withCasts([\n    'last_posted_at' => 'date'\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Binding the Custom Visitor in dependencies.php\nDESCRIPTION: This configuration binds the custom `ModelUpdateVisitor` to the Hyperf container, allowing it to be used instead of the default implementation.  This is done in the `dependencies.php` file to override the default dependency.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/gen.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    Hyperf\\Database\\Commands\\Ast\\ModelUpdateVisitor::class => App\\Kernel\\Visitor\\ModelUpdateVisitor::class,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Use Form Request in Controller\nDESCRIPTION: This code snippet shows how to use a form request in a controller method. The `FooRequest` class is type-hinted as a parameter, which triggers the validation logic before the controller method is executed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Request\\FooRequest;\n\nclass IndexController\n{\n    public function index(FooRequest $request)\n    {\n        // 傳入的請求透過驗證...\n        \n        // 獲取透過驗證的資料...\n        $validated = $request->validated();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DemoApi Class for Inject Annotation\nDESCRIPTION: This PHP code defines a simple `DemoApi` class. The `test` method returns a fixed array with a 'status' key set to 1.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/testing.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Api;\n\nclass DemoApi\n{\n    public function test()\n    {\n        return [\n            'status' => 1\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping results with groupBy/having in Hyperf\nDESCRIPTION: This snippet illustrates how to group results using the `groupBy` and `having` methods in Hyperf's query builder. It groups users by 'account_id' and filters groups where 'account_id' is greater than 100.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->groupBy('account_id')\n    ->having('account_id', '>', 100)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Gauge Interface\nDESCRIPTION: Defines the GaugeInterface, used to describe a metric that can increase or decrease over time, such as the number of available connections in a connection pool. Includes methods for setting, adding to the gauge, and setting label values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ninterface GaugeInterface\n{\n    public function with(string ...$labelValues): self;\n\n    public function set(float $value);\n\n    public function add(float $delta);\n}\n```\n\n----------------------------------------\n\nTITLE: Install Whoops - PHP\nDESCRIPTION: Installs the Whoops library as a development dependency using Composer. Whoops provides a more detailed and user-friendly error reporting interface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/exception-handler.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer require --dev filp/whoops\n```\n\n----------------------------------------\n\nTITLE: GraphQL Type Definition PHP\nDESCRIPTION: This PHP code defines a GraphQL type using annotations. The Product class is annotated with #[Type] to mark it as a GraphQL type. The getName and getPrice methods are annotated with #[Field] to expose them as fields in the GraphQL schema.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/graphql.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Model;\n\nuse Hyperf\\GraphQL\\Annotation\\Type;\nuse Hyperf\\GraphQL\\Annotation\\Field;\n\n#[Type]\nclass Product\n{\n    protected $name;\n    protected $price;\n\n    public function __construct(string $name, float $price)\n    {\n        $this->name = $name;\n        $this->price = $price;\n    }\n\n    #[Field]\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    #[Field]\n    public function getPrice(): ?float\n    {\n        return $this->price;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Default Cache Configuration in Hyperf\nDESCRIPTION: This code defines the default cache configuration for a Hyperf application. It specifies the driver (Redis), packer (PhpSerializerPacker), prefix ('c:'), and skip_cache_results (empty array). This configuration is used if no other specific configuration is provided.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/cache.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => Hyperf\\Cache\\Driver\\RedisDriver::class,\n        'packer' => Hyperf\\Codec\\Packer\\PhpSerializerPacker::class,\n        'prefix' => 'c:',\n        'skip_cache_results' => [],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Distinct results in Hyperf\nDESCRIPTION: This code shows how to use the `distinct()` method to ensure that only unique results are returned from a query. It retrieves all unique records from the 'user' table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->distinct()->get();\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Argument (PHP)\nDESCRIPTION: Defines an optional argument with a default value using `addArgument()` within the `configure()` method. The argument is accessed using `$this->input->getArgument()` in the `handle()` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addArgument('name', InputArgument::OPTIONAL, '姓名', 'Hyperf');\n}\n\npublic function handle()\n{\n    $this->line($this->input->getArgument('name'));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install Consul Adapter (Hyperf)\nDESCRIPTION: Installs the hyperf/service-governance-consul adapter, allowing Hyperf to use Consul as the service registry.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/service-register.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/service-governance-consul\n```\n\n----------------------------------------\n\nTITLE: Anonymous Component Data & Attributes - Blade\nDESCRIPTION: Demonstrates how to specify which attributes should be treated as data variables in an anonymous component using the `@props` directive. Other attributes are automatically placed in the attribute bag.  Default values can be set for data variables.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_41\n\nLANGUAGE: html\nCODE:\n```\n    <!-- /storage/view/components/alert.blade.php -->\n\n    @props(['type' => 'info', 'message'])\n\n    <div {{ $attributes->merge(['class' => 'alert alert-'.$type]) }}>\n        {{ $message }}\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Cast Attributes in Hyperf Model (PHP)\nDESCRIPTION: This example demonstrates how to use the custom `Json` cast class defined earlier in a Hyperf model. The `options` attribute is cast to the `Json` class, which automatically handles JSON encoding and decoding when accessing or setting the attribute's value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/mutators.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse App\\Casts\\Json;\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 应进行类型转换的属性\n     *\n     * @var array\n     */\n    protected $casts = [\n        'options' => Json::class,\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying JSON array length using whereJsonLength in Hyperf\nDESCRIPTION: This snippet demonstrates how to query JSON arrays based on their length using `whereJsonLength`. It provides examples for checking if the length equals a specific value or comparing it using operators like '>'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereJsonLength('options->languages', 0)\n    ->get();\n\n$users = Db::table('users')\n    ->whereJsonLength('options->languages', '>', 1)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Add Top-Level Metadata to Resource Collection - Hyperf - PHP\nDESCRIPTION: Demonstrates how to add top-level metadata to a resource response when the resource is returned as a top-level resource in Hyperf. The `with` method is used to define an array of metadata that will be included in the response. This metadata typically contains meta information for the entire response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n\n    public function with() : array\n    {\n        return [\n            'meta' => [\n                'key' => 'value',\n            ],\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing XA Transaction in Hyperf\nDESCRIPTION: This PHP code snippet demonstrates the implementation of a distributed transaction using the XA protocol within the Hyperf framework. It uses the dtm-client library to manage the global and local transactions. The `XAController` defines endpoints for initiating the global transaction (`successCase`) and handling sub-transactions (`transIn`, `transOut`).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/distributed-transaction.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Grpc\\GrpcClient;\nuse DtmClient\\DbTransaction\\DBTransactionInterface;\nuse DtmClient\\TransContext;\nuse DtmClient\\XA;\nuse Hyperf\\Contract\\ConfigInterface;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\GetMapping;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\n\n#[Controller(prefix: '/xa')]\nclass XAController\n{\n\n    private GrpcClient $grpcClient;\n\n    protected string $serviceUri = 'http://127.0.0.1:9502';\n\n    public function __construct(\n        private XA $xa,\n        protected ConfigInterface $config,\n    ) {\n        $server = $this->config->get('dtm.server', '127.0.0.1');\n        $port = $this->config->get('dtm.port.grpc', 36790);\n        $hostname = $server . ':' . $port;\n        $this->grpcClient = new GrpcClient($hostname);\n    }\n\n\n    #[GetMapping(path: 'successCase')]\n    public function successCase(): string\n    {\n        $payload = ['amount' => 50];\n        // Open the Xa, the global thing\n        $gid = $this->xa->generateGid();\n        $this->xa->globalTransaction($gid, function () use ($payload) {\n            // Call the subthings interface\n            $respone = $this->xa->callBranch($this->serviceUri . '/xa/api/transIn', $payload);\n            // Get subthings return structure in XA http mode\n            /* @var ResponseInterface $respone */\n            $respone->getBody()->getContents();\n            // Call the subthings interface\n            $payload = ['amount' => 10];\n            $this->xa->callBranch($this->serviceUri . '/xa/api/transOut', $payload);\n        });\n        // Return the global transaction ID via TransContext:: getGid()\n        return TransContext::getGid();\n    }\n\n    #[RequestMapping(methods: [\"GET\", \"POST\", \"PUT\"], path: 'api/transIn')]\n    public function transIn(RequestInterface $request): array\n    {\n        $content = $request->post('amount');\n        $amount = $content['amount'] ?? 50;\n        // The transIn method under the simulated distributed system\n        $this->xa->localTransaction(function (DBTransactionInterface $dbTransaction) use ($amount) {\n            // Please use the DBTransactionInterface to handle the local Mysql things\n            $dbTransaction->xaExecute('UPDATE `order` set `amount` = `amount` + ? where id = 1', [$amount]);\n        });\n\n        return ['status' => 0, 'message' => 'ok'];\n    }\n\n    /**\n     * @param RequestInterface $request\n     * @return array\n     */\n    #[RequestMapping(methods: [\"GET\", \"POST\", \"PUT\"], path: 'api/transOut')]\n    public function transOut(RequestInterface $request): array\n    {\n        $content = $request->post('amount');\n        $amount = $content['amount'] ?? 10;\n        // The transOut method under the simulated distributed system\n        $this->xa->localTransaction(function (DBTransactionInterface $dbTransaction) use ($amount) {\n            // Please use the DBTransactionInterface to handle the local Mysql things\n            $dbTransaction->xaExecute('UPDATE `order` set `amount` = `amount` - ? where id = 2', [$amount]);\n        });\n\n        return ['status' => 0, 'message' => 'ok'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: FailToExecute Event Listener - PHP\nDESCRIPTION: This PHP code demonstrates how to create a listener for the `FailToExecute` event, which is triggered when a scheduled task fails to execute. The listener retrieves the `Crontab` object and the `Throwable` (exception) associated with the failure, allowing for error handling and logging.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/crontab.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Crontab\\Event\\FailToExecute;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Psr\\Container\\ContainerInterface;\n\n#[Listener]\nclass FailToExecuteCrontabListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            FailToExecute::class,\n        ];\n    }\n\n    /**\n     * @param FailToExecute $event\n     */\n    public function process(object $event)\n    {\n        var_dump($event->crontab->getName());\n        var_dump($event->throwable->getMessage());\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Flush Failed/Timeout Messages\nDESCRIPTION: Destroys all failed/timeout messages in the queue using the queue:flush command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php queue:flush {queue_name} -Q {channel_name}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Tracer using Composer\nDESCRIPTION: This command installs the hyperf/tracer component, which provides distributed tracing capabilities to Hyperf applications, using Composer. This component provides integrations for Zipkin and Jaeger.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tracer.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/tracer\n```\n\n----------------------------------------\n\nTITLE: Chunked Transfer Encoding in Hyperf\nDESCRIPTION: This snippet demonstrates how to use chunked transfer encoding using the `write()` method of the `Hyperf\\HttpServer\\Contract\\ResponseInterface`. It sends data in segments to the browser and sets the `Transfer-Encoding` header to `chunked`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/response.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\n\nclass IndexController\n{\n    public function index(ResponseInterface $response)\n    {\n        for ($i=0; $i<10; $i++) {\n            $response->write((string) $i);\n        }\n\n        return 'Hello Hyperf';\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Successful Upload\nDESCRIPTION: Shows how to verify if an uploaded file is valid using the `isValid(): bool` method of the `UploadedFile` object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/request.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nif ($request->file('photo')->isValid()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Set Temporary Locale - PHP\nDESCRIPTION: Demonstrates how to set a temporary locale within a controller using dependency injection.  The `TranslatorInterface` is injected, and the `setLocale` method is used to change the language for the current request or coroutine. This change is not persistent and only affects the current execution context.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/translation.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Contract\\TranslatorInterface;\n\nclass FooController\n{\n    #[Inject]\n    private TranslatorInterface $translator;\n    \n    public function index()\n    {\n        // 只在当前请求或协程生命周期有效\n        $this->translator->setLocale('zh_CN');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the DI Container with Hyperf Nano\nDESCRIPTION: Shows how to bind and resolve dependencies using the DI container within a Hyperf Nano application. It binds a `Foo` class to the container and then resolves it within a route handler.  Requires the `hyperf/nano` package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nano.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Nano\\ContainerProxy;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nclass Foo {\n    public function bar() {\n        return 'bar';\n    }   \n}\n\n$app = AppFactory::create();\n$app->getContainer()->set(Foo::class, new Foo());\n\n$app->get('/', function () {\n    /** @var ContainerProxy $this */\n    $foo = $this->get(Foo::class);\n    return $foo->bar();\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Producing Kafka Message\nDESCRIPTION: This code demonstrates how to send a message to a Kafka topic using the Hyperf Kafka producer.  It injects the `Producer` class and uses the `send` method to publish a message to the 'hyperf' topic with a specified value and key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/kafka.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Kafka\\Producer;\n\n#[AutoController]\nclass IndexController extends AbstractController\n{\n    public function index(Producer $producer)\n    {\n        $producer->send('hyperf', 'value', 'key');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Codes with Class Constants in PHP\nDESCRIPTION: This code snippet demonstrates a basic approach to defining error codes and messages using class constants and a static array in PHP.  It highlights the limitation of this approach, motivating the use of Hyperf's enum classes. It uses static properties to associate error codes with their corresponding messages. The `$message` variable then retrieves the error message associated with `SERVER_ERROR`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/constants.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass ErrorCode\n{\n    const SERVER_ERROR = 500;\n    const PARAMS_INVALID = 1000;\n\n    public static $messages = [\n        self::SERVER_ERROR => 'Server Error',\n        self::PARAMS_INVALID => '参数非法'\n    ];\n}\n\n$message = ErrorCode::messages[ErrorCode::SERVER_ERROR] ?? '未知错误';\n\n```\n\n----------------------------------------\n\nTITLE: Installing Box on Linux x86_64\nDESCRIPTION: These commands download the Box binary for Linux x86_64, move it to the /usr/local/bin directory, and set execute permissions.  It ensures Box is accessible from the command line by placing it in a $PATH directory. Requires wget and sudo.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/eco/box.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/hyperf/box/releases/download/v0.5.5/box_x86_64_linux -O box\nsudo mv ./box /usr/local/bin/box\nsudo chmod 755 /usr/local/bin/box\n// 确保 /usr/local/bin/box 在你的 $PATH 环境中，或者将 `box` 放到你想要的任意 $PATH 路径中\n```\n\n----------------------------------------\n\nTITLE: Check if Session Key Exists\nDESCRIPTION: Checks if a session key exists and is not null using the `has()` method.  Returns a boolean indicating whether the key exists.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/session.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nif ($this->session->has('foo')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration in Nginx\nDESCRIPTION: This snippet demonstrates how to configure CORS settings directly in Nginx. It sets the `Access-Control-Allow-Origin`, `Access-Control-Allow-Methods`, and `Access-Control-Allow-Headers` headers. Additionally, it configures Nginx to handle OPTIONS requests, which are commonly used in preflight requests for CORS.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/middleware/middleware.md#_snippet_15\n\nLANGUAGE: nginx\nCODE:\n```\nlocation / {\n    add_header Access-Control-Allow-Origin *;\n    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';\n    add_header Access-Control-Allow-Headers 'DNT,Keep-Alive,User-Agent,Cache-Control,Content-Type,Authorization';\n\n    if ($request_method = 'OPTIONS') {\n        return 204;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Async Queue\nDESCRIPTION: Installs the hyperf/async-queue package using composer. This command adds the asynchronous queue component to your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/async-queue\n```\n\n----------------------------------------\n\nTITLE: Conditional Association using whenLoaded - Hyperf - PHP\nDESCRIPTION: Demonstrates how to conditionally include associations in Hyperf resource responses based on whether the model association is loaded. The `whenLoaded` method is used to avoid \"N+1\" query problems by only including the association if it has been loaded in the controller.  If the association is not loaded, the `posts` key will be deleted before sending the response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'posts' => PostResource::collection($this->whenLoaded('posts')),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Supervisor for Hyperf Application\nDESCRIPTION: This snippet configures Supervisor to manage a Hyperf application. It defines the command to start the application, the user to run it as, and settings for autostart, autorestart, log file locations, and retry behavior.  The configuration is defined under the `[program:hyperf]` section.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/supervisor.md#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# Create a new application and set a name, here is set to hyperf\n[program:hyperf]\n# Here is the startup command of the project you want to manage, corresponding to the real path of your project\ncommand=php /var/www/hyperf/bin/hyperf.php start\n# Which user to run the process as\nuser=root\n# automatically the app when supervisor starts\nautostart=true\n# Automatically restart the process after the process exits\nautorestart=true\n# retry interval in seconds\nstartsecs=5\n# number of retries\nstartretries=3\n# stderr log output location\nstderr_logfile=/var/www/hyperf/runtime/stderr.log\n# stdout log output location\nstdout_logfile=/var/www/hyperf/runtime/stdout.log\n```\n\n----------------------------------------\n\nTITLE: Defining Command with $signature (PHP)\nDESCRIPTION: Defines a command using the `$signature` property, providing a shorthand for defining command name, arguments, and options in a single string.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Psr\\Container\\ContainerInterface;\n\n#[Command]\nclass DebugCommand extends HyperfCommand\n{\n    protected ContainerInterface $container;\n\n    protected ?string $signature = 'test:test {id : user_id} {--name= : user_name}';\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n        parent::__construct();\n    }\n\n    public function configure()\n    {\n        parent::configure();\n        $this->setDescription('Hyperf Demo Command');\n    }\n\n    public function handle()\n    {\n        var_dump($this->input->getArguments());\n        var_dump($this->input->getOptions());\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Original Request in WebSocket Event Callback (Hyperf)\nDESCRIPTION: This snippet shows how to retrieve the original HTTP request object within a WebSocket event callback in Hyperf. It accesses the request from the connection context using the `Hyperf\\WebSocketServer\\Context::get()` method. This allows access to client IP, cookies, and other request information.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/socketio-server.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\npublic function onEvent($socket, $data)\n{\n    $request = Hyperf\\WebSocketServer\\Context::get(\n        Psr\\Http\\Message\\ServerRequestInterface::class\n    );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Escaping Blade Directives\nDESCRIPTION: This Blade template shows how to escape Blade directives using the `@` symbol. The first example is a Blade comment, and the second example demonstrates escaping the `@json()` directive.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_11\n\nLANGUAGE: blade\nCODE:\n```\n{{-- Blade --}}\n@@json()\n\n<!-- HTML 輸出 -->\n@json()\n```\n\n----------------------------------------\n\nTITLE: Returning Raw Response in Hyperf\nDESCRIPTION: Shows how to return a raw text response using the `raw()` method of the `ResponseInterface`. It sets the `Content-Type` to `plain/text` and accepts a string or an object implementing the `__toString()` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/response.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function raw(ResponseInterface $response): Psr7ResponseInterface\n    {\n        return $response->raw('Hello Hyperf.');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating NATS Consumer\nDESCRIPTION: This command uses the Hyperf CLI to generate a NATS consumer class. The `gen:nats-consumer` command scaffolds a new consumer class that can be configured to listen to specific NATS subjects and queues. This greatly simplifies the setup and configuration of message consumers within a Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nats.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:nats-consumer DemoConsumer\n```\n\n----------------------------------------\n\nTITLE: Hyperf Devtool Gen Commands\nDESCRIPTION: Lists specific `gen` commands provided by Hyperf Devtool. These commands facilitate the creation of various components such as consumers, producers, aspects, commands, controllers, jobs, listeners, middlewares, and processes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/devtool.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n gen\n  gen:amqp-consumer  Create a new amqp consumer class\n  gen:amqp-producer  Create a new amqp producer class\n  gen:aspect         Create a new aspect class\n  gen:command        Create a new command class\n  gen:controller     Create a new controller class\n  gen:job            Create a new job class\n  gen:listener       Create a new listener class\n  gen:middleware     Create a new middleware class\n  gen:process        Create a new process class\n vendor\n  vendor:publish     Publish any publishable configs from vendor packages.\n```\n\n----------------------------------------\n\nTITLE: Replace Placeholders\nDESCRIPTION: This code shows how to replace placeholders in a translated string using the `__()` function. The second argument to the function is an array of key-value pairs, where the keys match the placeholder names.  This uses the translated `welcome` message and replaces the `:name` placeholder.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/translation.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\necho __('messages.welcome', ['name' => 'Hyperf']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Aspect for Socket.io\nDESCRIPTION: This PHP snippet demonstrates how to configure the SessionAspect to enable session support in Socket.io.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/socketio-server.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/aspect.php\nreturn [\n    \\Hyperf\\SocketIOServer\\Aspect\\SessionAspect::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Installing S3 Adapter (Flysystem v3.0)\nDESCRIPTION: Installs the S3 adapter for Flysystem v3.0, and `hyperf/guzzle` to provide coroutine support.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/filesystem.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"league/flysystem-aws-s3-v3:^3.0\"\ncomposer require hyperf/guzzle\n```\n\n----------------------------------------\n\nTITLE: Installing Supervisor on CentOS\nDESCRIPTION: This snippet shows how to install Supervisor on CentOS systems using the yum package manager. It first installs the EPEL repository if it's not already installed, and then installs the supervisor package. The yum command requires root privileges.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/supervisor.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 安裝 epel 源，如果此前安裝過，此步驟跳過\nyum install -y epel-release\nyum install -y supervisor\n```\n\n----------------------------------------\n\nTITLE: Disable HTML Double Encoding (Hyperf)\nDESCRIPTION: This listener disables double HTML encoding in Blade templates by calling `Blade::withoutDoubleEncoding()` during the `BootApplication` event.  This affects all rendered Blade templates.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\nuse Hyperf\\ViewEngine\\Blade;\nuse Psr\\Container\\ContainerInterface;\n\n#[Listener]\nclass BladeWithoutDoubleEncodingListener implements ListenerInterface\n{\n    private ContainerInterface $container;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n    }\n\n    public function listen(): array\n    {\n        return [\n            BootApplication::class\n        ];\n    }\n\n    public function process(object $event)\n    {\n        Blade::withoutDoubleEncoding();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: ClassMap Configuration\nDESCRIPTION: Defines the `class_map` configuration in `annotations.php` to replace `GuzzleHttp\\Client` with the custom implementation located at `BASE_PATH . '/class_map/GuzzleHttp/Client.php'`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/guzzle.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse GuzzleHttp\\Client;\n\nreturn [\n    'scan' => [\n        // ...\n        'class_map' => [\n            Client::class => BASE_PATH . '/class_map/GuzzleHttp/Client.php',\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Property Annotation Usage PHP\nDESCRIPTION: This snippet demonstrates how to use a property annotation in Hyperf. The `PropertyAnnotation` is placed above the property declaration of `$bar` in the `Foo` class. This can be useful for dependency injection or other property-specific configurations. The annotation is placed immediately before the property declaration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/annotation.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass Foo\n{\n    #[PropertyAnnotation]\n    private $bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Command Help (PHP)\nDESCRIPTION: Configures the help message for a command using the `setHelp()` method within the `configure()` method. This message is displayed when the `--help` option is used.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->setHelp('Hyperf 自定義命令演示');\n}\n\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies with PHP 8 Type Declarations\nDESCRIPTION: This snippet demonstrates how to use the `@Inject` annotation in PHP 8 to inject dependencies using member property type declarations, replacing the need for `@var` declarations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog-v2.0.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Example {\n    /**\n     * @Inject\n     */\n    private ExampleService $exampleService;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Closure Command (PHP)\nDESCRIPTION: Defines a command directly within `config\\console.php` using a closure. This allows for quick and simple command definitions without creating separate classes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Command\\Console;\n\nConsole::command('hello', function () {\n    $this->comment('Hello, Hyperf!');\n})->describe('This is a demo closure command.');\n\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware in Hyperf Nano\nDESCRIPTION: Demonstrates how to add middleware to a Hyperf Nano application. This example adds middleware that sets an attribute on the request. Requires the `hyperf/nano` package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nano.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->get('/', function () {\n    return $this->request->getAttribute('key');\n});\n\n$app->addMiddleware(function ($request, $handler) {\n    $request = $request->withAttribute('key', 'value');\n    return $handler->handle($request);\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks with Runner Interface in Hyperf DAG\nDESCRIPTION: This demonstrates how to define a task using a class that implements the `\\Hyperf\\Dag\\Runner` interface. The `run` method of the class defines the task's logic. The `Vertex::of` method then converts an instance of this class into a vertex that can be added to the DAG.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/dag.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass MyJob implements \\Hyperf\\Dag\\Runner {\n    public function run($results = []) {\n        return 'hello';\n    }\n}\n\n\\Hyperf\\Dag\\Vertex::of(new MyJob(), \"greeting\");\n```\n\n----------------------------------------\n\nTITLE: Getting Input from Query String PHP\nDESCRIPTION: Shows how to retrieve input data specifically from the query string using the `query()` method. It allows retrieving a single parameter, all parameters as an array, and setting a default value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/request.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// Return the query parameter if it exists, return null if it doesn't exist\n$name = $request->query('name');\n\n// Return the query parameter if it exists, return default value of 'Hyperf' if it doesn't exist\n$name = $request->query('name','Hyperf');\n\n// If no parameters are passed, all query parameters are returned as an associative array\n$name = $request->query();\n```\n\n----------------------------------------\n\nTITLE: Crontab Enable String Example - PHP\nDESCRIPTION: This code demonstrates using a string for the 'enable' property of a Crontab annotation, calling a method within the class to determine whether the task is enabled.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/crontab.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Crontab;\n\nuse Carbon\\Carbon;\nuse Hyperf\\Crontab\\Annotation\\Crontab;\n\n#[Crontab(name: \"Echo\", rule: \"* * * * *\", callback: \"execute\", enable: \"isEnable\", memo: \"这是一个示例的定时任务\")]\nclass EchoCrontab\n{\n    public function execute()\n    {\n        var_dump(Carbon::now()->toDateTimeString());\n    }\n\n    public function isEnable(): bool\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Product Type\nDESCRIPTION: A GraphQL query that fetches both 'hello' and 'product' data. It queries the product with a name and price, and requests the 'name' and 'price' fields of the Product type.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/graphql.md#_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n    hello(name: \"graphql\")\n    product(name: \"goods\", price: 156.5) {\n        name\n        price\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Items per Page\nDESCRIPTION: Retrieves the number of items that are displayed on each page. This value is set during the instantiation of the Paginator.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/paginator.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$perPage = $paginator->perPage();\n```\n\n----------------------------------------\n\nTITLE: Generate a Hyperf GRPC Resource\nDESCRIPTION: This command generates a gRPC resource class for 'User' using the Hyperf CLI.  GRPC resources need to define the `message` class by overriding the `expect()` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php gen:resource User --grpc\n```\n\n----------------------------------------\n\nTITLE: Mapping Custom Frequency Component in Hyperf\nDESCRIPTION: This configuration shows how to map the custom `Frequency` component in Hyperf using the `dependencies` configuration. This replaces the default `Hyperf\\DbConnection\\Frequency` with the custom `App\\Pool\\Frequency`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/pool.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\DbConnection\\Frequency::class => App\\Pool\\Frequency::class,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Coroutine WaitGroup Example PHP\nDESCRIPTION: This code demonstrates the use of WaitGroup to block the main coroutine until all child coroutines have completed their tasks. The `add` method increments the counter, `done` decrements it, and `wait` blocks until the counter reaches zero.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/coroutine.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$wg = new \\Hyperf\\Coroutine\\WaitGroup();\n// Counter increase 2\n$wg->add(2);\n// Create coroutine A\nco(function () use ($wg) {\n    // some code\n    // Counter decrease 1\n    $wg->done();\n});\n// Create coroutine B\nco(function () use ($wg) {\n    // some code\n    // Counter decrease 1\n    $wg->done();\n});\n// Wait for coroutine A and coroutine B finished\n$wg->wait();\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC dependencies for Nacos (Hyperf)\nDESCRIPTION: These commands install the necessary gRPC dependencies for Hyperf to enable bidirectional streaming with Nacos V2. This allows for immediate configuration updates from Nacos to the services.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config-center.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"hyperf/http2-client:3.1.*\"\ncomposer require \"hyperf/grpc:3.1.*\"\n```\n\n----------------------------------------\n\nTITLE: Monolog Basic Example\nDESCRIPTION: This code snippet illustrates the basic concepts of Monolog, including creating a logger, adding handlers, setting formatters, and adding records. It also shows how to add extra data to records using context and processors.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/logger.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Monolog\\Formatter\\LineFormatter;\nuse Monolog\\Handler\\FirePHPHandler;\nuse Monolog\\Handler\\StreamHandler;\nuse Monolog\\Logger;\n\n// 建立一個 Channel，引數 log 即為 Channel 的名字\n$log = new Logger('log');\n\n// 建立兩個 Handler，對應變數 $stream 和 $fire\n$stream = new StreamHandler('test.log', Logger::WARNING);\n$fire = new FirePHPHandler();\n\n// 定義時間格式為 \"Y-m-d H:i:s\"\n$dateFormat = \"Y n j, g:i a\";\n// 定義日誌格式為 \"[%datetime%] %channel%.%level_name%: %message% %context% %extra%\\n\"\n$output = \"%datetime%||%channel||%level_name%||%message%||%context%||%extra%\\n\";\n// 根據 時間格式 和 日誌格式，建立一個 Formatter\n$formatter = new LineFormatter($output, $dateFormat);\n\n// 將 Formatter 設定到 Handler 裡面\n$stream->setFormatter($formatter);\n\n// 將 Handler 推入到 Channel 的 Handler 佇列內\n$log->pushHandler($stream);\n$log->pushHandler($fire);\n\n// clone new log channel\n$log2 = $log->withName('log2');\n\n// add records to the log\n$log->warning('Foo');\n\n// add extra data to record\n// 1. log context\n$log->error('a new user', ['username' => 'daydaygo']);\n// 2. processor\n$log->pushProcessor(function ($record) {\n    $record['extra']['dummy'] = 'hello';\n    return $record;\n});\n$log->pushProcessor(new \\Monolog\\Processor\\MemoryPeakUsageProcessor());\n$log->alert('czl');\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Flysystem OSS Adapter\nDESCRIPTION: This shell command installs the `hyperf/flysystem-oss` adapter using composer, which is needed to work with Alibaba Cloud OSS for file storage in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.2.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/flysystem-oss\n```\n\n----------------------------------------\n\nTITLE: Fetching a Column of Values with pluck() in Hyperf\nDESCRIPTION: Illustrates how to retrieve a collection of values from a single column using the `pluck()` method.  Also shows how to specify a custom key for each value in the returned collection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$names = Db::table('user')->pluck('name');\n\nforeach ($names as $name) {\n    echo $name;\n}\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$roles = Db::table('roles')->pluck('title', 'name');\n\nforeach ($roles as $name => $title) {\n    echo $title;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Composer Autoload Optimization\nDESCRIPTION: This snippet demonstrates how to optimize the Composer autoloader and generate proxy classes and annotation caches for improved memory usage and startup speed in Hyperf projects. This should be done before deploying new code.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/important.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 最佳化 Composer 索引\ncomposer dump-autoload -o\n# 生成代理類和註解快取\nphp bin/hyperf.php\n```\n\n----------------------------------------\n\nTITLE: Getting Request Path - PHP\nDESCRIPTION: Example of getting the request path using the `path()` method.  The returned path excludes the domain and query parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$uri = $request->path();\n```\n\n----------------------------------------\n\nTITLE: Render View in Controller (PHP)\nDESCRIPTION: This PHP code demonstrates how to render a view from a controller in Hyperf using the RenderInterface. It retrieves the RenderInterface instance, calls the render method with the template name and data array, and returns the rendered output.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\View\\RenderInterface;\n\n#[AutoController]\nclass ViewController\n{\n    public function index(RenderInterface $render)\n    {\n        return $render->render('index', ['name' => 'Hyperf']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing S3 Adapter (Flysystem v1.0)\nDESCRIPTION: Install the S3 adapter for Flysystem v1.0. This adapter allows Hyperf to store files on AWS S3 or compatible services like MinIO. Requires league/flysystem-aws-s3-v3 and hyperf/guzzle.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/filesystem.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"league/flysystem-aws-s3-v3:^1.0\"\ncomposer require hyperf/guzzle\n```\n\n----------------------------------------\n\nTITLE: Adding Records to Index Using Query Builder\nDESCRIPTION: This code shows how to add a collection of records to the search index using the model query builder and the `searchable` method. This allows you to efficiently index a large number of records that match specific criteria.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n// 使用模型查询构造器增加...\nApp\\Order::where('price', '>', 100)->searchable();\n\n// 使用模型关系增加记录...\n$user->orders()->searchable();\n\n// 使用集合增加记录...\n$orders->searchable();\n```\n\n----------------------------------------\n\nTITLE: Rendering Pagination Links\nDESCRIPTION: Demonstrates how to render pagination links in a template to display search results in pages. This uses a template engine (likely Blade) to iterate over the results and display the pagination links.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"container\">\n        @foreach ($orders as $order)\n            {{ $order->price }}\n        @endforeach\n    </div>\n\n    {{ $orders->links() }}\n```\n\n----------------------------------------\n\nTITLE: Add Searchable Trait to Model (PHP)\nDESCRIPTION: Adds the `Hyperf\\Scout\\Searchable` trait to a model.  This trait registers a model observer that keeps the model synchronized with the search index.  The model will automatically be indexed when it is created, updated, or deleted.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\Database\\Model\\Model;\nuse Hyperf\\Scout\\Searchable;\n\nclass Post extends Model\n{\n    use Searchable;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Original Request Object in Hyperf (PHP)\nDESCRIPTION: This code demonstrates how to retrieve the original HTTP request object from the WebSocket connection context within an event callback. The request object can be used to access client information like IP address and cookies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/socketio-server.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function onEvent($socket, $data)\n{\n    $request = Hyperf\\WebSocketServer\\Context::get(\n        Psr\\Http\\Message\\ServerRequestInterface::class\n    );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Get Data from Session\nDESCRIPTION: Retrieves data from the session using the `get()` method. The first argument is the key (name) of the session variable, and the second optional argument is the default value to return if the key does not exist in the session.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/session.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$this->session->get('foo', $default = null);\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Request Handling in WebSocket Server\nDESCRIPTION: This PHP configuration demonstrates how to handle HTTP requests within a WebSocket server by mapping the `ON_REQUEST` event to the `HttpServer::onRequest` method. This allows the WebSocket server to also process HTTP requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/websocket-server.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'HttpServer' => Hyperf\\HttpServer\\Server::class,\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\nuse Hyperf\\Server\\Server;\n\nreturn [\n    'mode' => SWOOLE_BASE,\n    'servers' => [\n        [\n            'name' => 'ws',\n            'type' => Server::SERVER_WEBSOCKET,\n            'host' => '0.0.0.0',\n            'port' => 9502,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => ['HttpServer', 'onRequest'],\n                Event::ON_HAND_SHAKE => [Hyperf\\WebSocketServer\\Server::class, 'onHandShake'],\n                Event::ON_MESSAGE => [Hyperf\\WebSocketServer\\Server::class, 'onMessage'],\n                Event::ON_CLOSE => [Hyperf\\WebSocketServer\\Server::class, 'onClose'],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Multiple Local Middleware via Multiple Middleware Annotations\nDESCRIPTION: This snippet showcases an alternative way to define multiple local middleware by using multiple `#[Middleware]` annotations. Each `#[Middleware]` annotation specifies a single middleware class to be applied.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/middleware/middleware.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Middleware\\BarMiddleware;\nuse App\\Middleware\\FooMiddleware;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\HttpServer\\Annotation\\Middleware;\nuse Hyperf\\HttpServer\\Annotation\\Middlewares;\n\n#[AutoController]\n#[Middleware(FooMiddleware::class)]\n#[Middleware(BarMiddleware::class)]\nclass IndexController\n{\n    public function index()\n    {\n        return 'Hello Hyperf.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Where Clauses to Search Queries\nDESCRIPTION: Adds simple 'where' clauses to the search query to filter results. This example filters results based on the `user_id`. Currently, only numerical equality checks are supported.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->where('user_id', 1)->get();\n```\n\n----------------------------------------\n\nTITLE: whereNotBetween Statement - Hyperf PHP\nDESCRIPTION: Illustrates the `whereNotBetween` method in Hyperf, which verifies that a field value is outside a given range. The method takes the field name and an array containing the start and end values of the range.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->whereNotBetween('votes', [1, 100])->get();\n```\n\n----------------------------------------\n\nTITLE: Namespace API Usage in Hyperf Socket.IO\nDESCRIPTION: This PHP snippet demonstrates the usage of the Namespace API in Hyperf Socket.IO, highlighting its equivalence to using the global API with a specific namespace.  It showcases how emitting events within a class decorated with `#[SocketIONamespace]` is the same as using `$io->of('/foo')->emit()`. This API simplifies event emission within a specific namespace context.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/socketio-server.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// 以下伪码等价\n$foo->emit();\n$io->of('/foo')->emit();\n\n/**\n * class内使用也等价\n */\n#[SocketIONamespace(\"/foo\")]\nclass FooNamespace extends BaseNamespace {\n    public function onEvent(){\n        $this->emit(); \n        $this->io->of('/foo')->emit();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Histogram with Custom Buckets\nDESCRIPTION: Demonstrates how to register a Histogram with custom buckets using the Prometheus Registry before the main server starts. Allows to use custom bucket configurations with Prometheus.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Listener;\n\nuse Hyperf\\Config\\Annotation\\Value;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BeforeMainServerStart;\nuse Prometheus\\CollectorRegistry;\n\nclass OnMainServerStart implements ListenerInterface\n{\n    protected $registry;\n\n    public function __construct(CollectorRegistry $registry)\n    {\n        $this->registry = $registry;\n    }\n\n    public function listen(): array\n    {\n        return [\n            BeforeMainServerStart::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        $this->registry->registerHistogram(\n            config(\"metric.metric.prometheus.namespace\"), \n            'test',\n            'help_message', \n            ['labelName'], \n            [0.1, 1, 2, 3.5]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Hyperf Tracer configuration file\nDESCRIPTION: This command publishes the default configuration file (opentracing.php) for the hyperf/tracer component using the Hyperf console.  This makes the configuration available for customization in the config/autoload directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tracer.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/tracer\n```\n\n----------------------------------------\n\nTITLE: Using Cacheable Annotation in Hyperf\nDESCRIPTION: This code demonstrates how to use the Cacheable annotation in Hyperf to automatically cache the result of a method. The annotation configures the cache prefix, TTL, and listener.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/cache.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass UserService\n{\n    #[Cacheable(prefix: \"user\", ttl: 9000, listener: \"user-update\")]\n    public function user($id)\n    {\n        $user = User::query()->where('id',$id)->first();\n\n        if($user){\n            return $user->toArray();\n        }\n\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Auto-Close of WebSocket Client\nDESCRIPTION: Shows how to disable the automatic closing of the WebSocket client by setting the `$autoClose` parameter to `false` during client creation. This allows for manual control over the client's lifecycle.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/websocket-client.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$autoClose = false;\n$client = $clientFactory->create($host, $autoClose);\n```\n\n----------------------------------------\n\nTITLE: Generating AMQP Consumer\nDESCRIPTION: This command uses the Hyperf CLI to generate a new AMQP consumer class named DemoConsumer. This facilitates creating a consumer that listens for and processes messages from the AMQP broker.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/amqp.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:amqp-consumer DemoConsumer\n```\n\n----------------------------------------\n\nTITLE: Delete NSQD Topic via HTTP API\nDESCRIPTION: This PHP code snippet demonstrates how to delete an NSQD topic using the HTTP API. It retrieves the `Hyperf\\Nsq\\Nsqd\\Topic` client from the container and calls the `delete()` method with the topic name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nsq.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\Nsq\\Nsqd\\Topic;\n\n$container = ApplicationContext::getContainer();\n\n$client = $container->get(Topic::class);\n\n$client->delete('hyperf.test');\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Index Name\nDESCRIPTION: Overrides the `searchableAs` method in a model to customize the index name used for storing the model's data in Elasticsearch. By default, Scout uses the model's table name. This example configures the model to use 'posts_index'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n    namespace App;\n\n    use Hyperf\\Scout\\Searchable;\n    use Hyperf\\Database\\Model\\Model;\n\n    class Post extends Model\n    {\n        use Searchable;\n\n        /**\n         * Get the index name for the model.\n         * @return string\n         */\n        public function searchableAs()\n        {\n            return 'posts_index';\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuration of Translation Component\nDESCRIPTION: This code block shows the configuration settings for the internationalization component. It defines the default locale, fallback locale, and the path to the language files. The `BASE_PATH` constant references the root directory of the Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/translation.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/translation.php\n\nreturn [\n    // 預設語言\n    'locale' => 'zh_CN',\n    // 回退語言，當預設語言的語言文字沒有提供時，就會使用回退語言的對應語言文字\n    'fallback_locale' => 'en',\n    // 語言檔案存放的資料夾\n    'path' => BASE_PATH . '/storage/languages',\n];\n```\n\n----------------------------------------\n\nTITLE: Resource with Relationship\nDESCRIPTION: Shows how to include related resources in a resource response. The `toArray` method includes a `posts` key, which uses the `PostResource::collection` method to transform the user's posts into a resource collection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'posts' => PostResource::collection($this->posts),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Run Gitlab Docker Container - Shell\nDESCRIPTION: This command runs a Gitlab Docker container with specified configurations. It maps ports 443, 80, and 22 to the host, sets the hostname, restarts the container automatically, and mounts volumes for configuration, logs, and data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/docker-swarm.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nsudo docker run -d --hostname gitlab.xxx.cn \\\n--publish 443:443 --publish 80:80 --publish 22:22 \\\n--name gitlab --restart always --volume /srv/gitlab/config:/etc/gitlab \\\n--volume /srv/gitlab/logs:/var/log/gitlab \\\n--volume /srv/gitlab/data:/var/opt/gitlab \\\ngitlab/gitlab-ce:latest\n```\n\n----------------------------------------\n\nTITLE: Managing Database Transactions in Hyperf (PHP)\nDESCRIPTION: This code demonstrates how to manage database transactions in Hyperf using both automatic and manual transaction management. The `transaction` method provides automatic rollback on exceptions, while `beginTransaction`, `commit`, and `rollBack` offer manual control.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/quick-start.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\nDb::transaction(function () {\n    Db::table('user')->update(['votes' => 1]);\n\n    Db::table('posts')->delete();\n});\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\nDb::beginTransaction();\ntry{\n\n    // Do something...\n\n    Db::commit();\n} catch(\\Throwable $ex){\n    Db::rollBack();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Performing a Search\nDESCRIPTION: This code snippet shows how to perform a search using the `search` method and retrieve the results as a collection of models. The `get` method executes the search and returns the matching models.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->get();\n```\n\n----------------------------------------\n\nTITLE: Running a Command Programmatically - PHP\nDESCRIPTION: Executes a command programmatically using the Symfony Console Application. Allows triggering commands outside of a command class. Requires Hyperf Contract and Symfony Console components.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$command = 'foo';\n\n$params = [\"command\" => $command, \"--foo\" => \"foo\", \"--bar\" => \"bar\"];\n\n// 可以根据自己的需求, 选择使用的 input/output\n$input = new \\Symfony\\Component\\Console\\Input\\ArrayInput($params);\n$output = new \\Symfony\\Component\\Console\\Output\\NullOutput();\n\n/** @var \\Psr\\Container\\ContainerInterface $container */\n$container = \\Hyperf\\Context\\ApplicationContext::getContainer();\n\n/** @var \\Symfony\\Component\\Console\\Application $application */\n$application = $container->get(\\Hyperf\\Contract\\ApplicationInterface::class);\n$application->setAutoExit(false);\n\n// 这种方式: 不会暴露出命令执行中的异常, 不会阻止程序返回\n$exitCode = $application->run($input, $output);\n\n// 第二种方式: 会暴露异常, 需要自己捕捉和处理运行中的异常, 否则会阻止程序的返回\n$exitCode = $application->find($command)->run($input, $output);\n\n```\n\n----------------------------------------\n\nTITLE: Queue Controller with Annotation\nDESCRIPTION: Defines a controller that calls the `example` method of the `QueueService`, which, due to the `AsyncQueueMessage` annotation, automatically pushes the task to the asynchronous queue.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse App\\Service\\QueueService;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass QueueController extends AbstractController\n{\n    #[Inject]\n    protected QueueService $service;\n\n    /**\n     * 註解模式投遞訊息\n     */\n    public function example()\n    {\n        $this->service->example([\n            'group@hyperf.io',\n            'https://doc.hyperf.io',\n            'https://www.hyperf.io',\n        ]);\n\n        return 'success';\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: MongoDB Task Implementation (Hyperf)\nDESCRIPTION: This code defines a `MongoTask` class with `insert` and `query` methods annotated with `#[Task]`. These methods interact with MongoDB using the MongoDB driver.  The `manager` method initializes a MongoDB Manager instance.  Note that the manager instance itself is not handled by a task but the methods that use the manager are.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/task.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Task;\n\nuse Hyperf\\Task\\Annotation\\Task;\nuse MongoDB\\Driver\\BulkWrite;\nuse MongoDB\\Driver\\Manager;\nuse MongoDB\\Driver\\Query;\nuse MongoDB\\Driver\\WriteConcern;\n\nclass MongoTask\n{\n    public Manager $manager;\n\n    #[Task]\n    public function insert(string $namespace, array $document)\n    {\n        $writeConcern = new WriteConcern(WriteConcern::MAJORITY, 1000);\n        $bulk = new BulkWrite();\n        $bulk->insert($document);\n\n        $result = $this->manager()->executeBulkWrite($namespace, $bulk, $writeConcern);\n        return $result->getUpsertedCount();\n    }\n\n    #[Task]\n    public function query(string $namespace, array $filter = [], array $options = [])\n    {\n        $query = new Query($filter, $options);\n        $cursor = $this->manager()->executeQuery($namespace, $query);\n        return $cursor->toArray();\n    }\n\n    protected function manager()\n    {\n        if ($this->manager instanceof Manager) {\n            return $this->manager;\n        }\n        $uri = 'mongodb://127.0.0.1:27017';\n        return $this->manager = new Manager($uri, []);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Extend gRPC Client Base Class\nDESCRIPTION: This PHP snippet shows how to extend the `BaseClient` class to create a specific gRPC client for the `Hi` service. It defines the `sayHello` method, which calls the `_simpleRequest` method with the appropriate parameters, including the service endpoint, request object, and response decoding function.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/grpc.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nclass HiClient extends BaseClient\n{\n    public function sayHello(HiUser $argument)\n    {\n        return $this->_simpleRequest(\n            '/grpc.hi/sayHello',\n            $argument,\n            [HiReply::class, 'decode']\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCP Server for JSON RPC\nDESCRIPTION: This configuration defines a TCP server in Hyperf to handle JSON RPC requests using the `jsonrpc` protocol. It specifies the server name, type, host, port, and the callback function `onReceive` which is handled by `Hyperf\\JsonRpc\\TcpServer`. It also configures settings like `open_eof_split` and `package_eof` for TCP packet handling.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/json-rpc.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 這裡省略了該檔案的其它配置\n    'servers' => [\n        [\n            'name' => 'jsonrpc',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9503,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_RECEIVE => [\\Hyperf\\JsonRpc\\TcpServer::class, 'onReceive'],\n            ],\n            'settings' => [\n                'open_eof_split' => true,\n                'package_eof' => \"\\r\\n\",\n                'package_max_length' => 1024 * 1024 * 2,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configure gRPC Server Route\nDESCRIPTION: This PHP snippet configures a route for the gRPC server in the `routes.php` file. It adds a server named 'grpc' and then defines a route for the `/grpc.hi/sayHello` endpoint, mapping it to the `sayHello` method of the `App\\Controller\\HiController`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/grpc.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nRouter::addServer('grpc'，function () {\n    Router::addGroup('/grpc.hi'，function () {\n        Router::post('/sayHello'，'App\\Controller\\HiController@sayHello');\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Rate Limit with Custom Key\nDESCRIPTION: Illustrates how to customize the rate limiting key based on a request parameter (user_id in this case) instead of the default URL.  This allows for user-specific rate limiting by defining a callback method to determine the key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/rate-limit.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\nuse Hyperf\\RateLimit\\Annotation\\RateLimit;\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\n\nclass TestController\n{\n    /**\n     * @RateLimit(create=1, capacity=3, key={TestController::class, \"getUserId\"})\n     */\n    public function test()\n    {\n        return [\"QPS 1, 峰值3\"];\n    }\n\n    public static function getUserId(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        $request = ApplicationContext::getContainer()->get(RequestInterface::class);\n        // 同理可以根據手機號、IP地址等不同緯度進行限流\n        return $request->input('user_id');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DemoLogic Class with Dependency\nDESCRIPTION: This PHP code defines a `DemoLogic` class that depends on `DemoApi`. The `DemoApi` is injected through the constructor. The `test` method calls the `DemoApi::test()` method and returns the result.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/testing.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Logic;\n\nuse App\\Api\\DemoApi;\n\nclass DemoLogic\n{\n    /**\n     * @var DemoApi $demoApi\n     */\n    private $demoApi;\n\n    public function __construct(DemoApi $demoApi)\n    {\n       $this->demoApi = $demoApi;\n    }\n\n    public function test()\n    {\n        $result = $this->demoApi->test();\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Docker Shell Script\nDESCRIPTION: This shell script installs Docker on the system using the official Docker installation script. It downloads and executes the script, automating the Docker installation process.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -sSL https://get.docker.com/ | sh\n```\n\n----------------------------------------\n\nTITLE: Flysystem Usage Example (v1.0)\nDESCRIPTION: This example demonstrates using the `League\\Flysystem\\Filesystem` class to perform common file operations such as writing, reading, updating, deleting, renaming, copying, and listing files.  It assumes Flysystem v1.0. The `League\\Flysystem\\Filesystem` instance is injected via dependency injection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/filesystem.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nclass IndexController extends AbstractController\n{\n    public function example(\\League\\Flysystem\\Filesystem $filesystem)\n    {\n        // Process Upload\n        $file = $this->request->file('upload');\n        $stream = fopen($file->getRealPath(), 'r+');\n        $filesystem->writeStream(\n            'uploads/'.$file->getClientFilename(),\n            $stream\n        );\n        fclose($stream);\n        \n        // Write Files\n        $filesystem->write('path/to/file.txt', 'contents');\n\n        // Add local file\n        $stream = fopen('local/path/to/file.txt', 'r+');\n        $result = $filesystem->writeStream('path/to/file.txt', $stream);\n        if (is_resource($stream)) {\n            fclose($stream);\n        }\n\n        // Update Files\n        $filesystem->update('path/to/file.txt', 'new contents');\n\n        // Check if a file exists\n        $exists = $filesystem->has('path/to/file.txt');\n\n        // Read Files\n        $contents = $filesystem->read('path/to/file.txt');\n\n        // Delete Files\n        $filesystem->delete('path/to/file.txt');\n\n        // Rename Files\n        $filesystem->rename('filename.txt', 'newname.txt');\n\n        // Copy Files\n        $filesystem->copy('filename.txt', 'duplicate.txt');\n\n        // list the contents\n        $filesystem->listContents('path', false);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Aspect with Annotation Attributes in Hyperf (PHP)\nDESCRIPTION: This code demonstrates an alternative method for defining an Aspect in Hyperf using the `#[Aspect]` annotation's attributes. Instead of declaring the `$classes` and `$annotations` arrays as public properties, they are passed directly as arguments to the `Aspect` annotation. This approach provides a more concise way to configure the aspect's target classes and annotations, achieving the same result as the previous example.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/aop.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Aspect;\n\nuse App\\Service\\SomeClass;\nuse App\\Annotation\\SomeAnnotation;\nuse Hyperf\\Di\\Annotation\\Aspect;\nuse Hyperf\\Di\\Aop\\AbstractAspect;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\n#[\n    Aspect(\n        classes: [\n            SomeClass::class,\n            \"App\\\\Service\\\\SomeClass::someMethod\",\n            \"App\\\\Service\\\\SomeClass::*Method\"\n        ],\n        annotations: [\n            SomeAnnotation::class\n        ]\n    )\n]\nclass FooAspect extends AbstractAspect\n{\n    public function process(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        // 切面切入後，執行對應的方法會由此來負責\n        // $proceedingJoinPoint 為連線點，透過該類的 process() 方法呼叫原方法並獲得結果\n        // 在呼叫前進行某些處理\n        $result = $proceedingJoinPoint->process();\n        // 在呼叫後進行某些處理\n        return $result;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generate NSQ Consumer\nDESCRIPTION: This command generates a new NSQ consumer class using the Hyperf CLI tool. The consumer class will handle processing messages from a specific topic and channel.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nsq.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php gen:nsq-consumer DemoConsumer\n```\n\n----------------------------------------\n\nTITLE: Updating Records via Query Builder\nDESCRIPTION: This example shows updating a collection of models in the search index using the `searchable` method on a model query.  This will update all matching records.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// 使用模型查詢語句更新...\nApp\\Order::where('price', '>', 100)->searchable();\n\n// 你也可以使用模型關係更新...\n$user->orders()->searchable();\n\n// 你也可以使用集合更新...\n$orders->searchable();\n```\n\n----------------------------------------\n\nTITLE: Defining an RPC Interface in Hyperf\nDESCRIPTION: This snippet shows how to define an RPC interface. It declares a namespace and defines an interface named `PushInterface` with a method `sendSmsCode` that takes a mobile number and code as input and returns a boolean value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/rpc-multiplex.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace RPC\\Push;\n\ninterface PushInterface\n{\n    public function sendSmsCode(string $mobile, string $code): bool;\n}\n\n```\n\n----------------------------------------\n\nTITLE: gRPC Streaming Mode Example\nDESCRIPTION: This PHP code demonstrates gRPC streaming mode (bidirectional stream) using the RouteGuide service. It creates a client instance, initiates a routeChat call, pushes notes to the stream, and receives notes from the stream.  Error handling for connection breaks is crucial.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/grpc.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\npublic function hello()\n{\n    $client = new RouteGuideClient('127.0.0.1:50051');\n\n    $note = new RouteNote();\n\n    $call = $client->routeChat();\n    $call->push($note);\n    $call->push($note);\n\n    /** @var RouteNote $note */\n    [$note,] = $call->recv();\n    [$note,] = $call->recv();\n}\n```\n\n----------------------------------------\n\nTITLE: Install ThinkTemplate Engine (Bash)\nDESCRIPTION: This command installs the ThinkTemplate engine using Composer. It allows the use of ThinkTemplate templates in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require sy-records/think-template\n```\n\n----------------------------------------\n\nTITLE: Dispatching an Event (PHP)\nDESCRIPTION: This code shows how to dispatch an event using the EventDispatcherInterface. The EventDispatcherInterface is injected into the UserService using the #[Inject] annotation. The dispatch() method is called to trigger the UserRegistered event, which will then be handled by registered listeners.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/event.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Service;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\nuse App\\Event\\UserRegistered; \n\nclass UserService\n{\n    #[Inject]\n    private EventDispatcherInterface $eventDispatcher;\n    \n    public function register()\n    {\n        // 我們假設存在 User 這個實體\n        $user = new User();\n        $result = $user->save();\n        // 完成賬號註冊的邏輯\n        // 這裡 dispatch(object $event) 會逐個執行監聽該事件的監聽器\n        $this->eventDispatcher->dispatch(new UserRegistered($user));\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing hyperf/crontab Component\nDESCRIPTION: This command installs the hyperf/crontab component using composer, which provides second-level task scheduling for Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/crontab.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/crontab\n```\n\n----------------------------------------\n\nTITLE: Queue Length Listener Configuration\nDESCRIPTION: Enables the QueueLengthListener, which logs the queue length every 500 messages processed. Add this listener to the 'listeners' configuration to monitor queue activity.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    Hyperf\\AsyncQueue\\Listener\\QueueLengthListener::class\n];\n\n```\n\n----------------------------------------\n\nTITLE: Define Validation Rules in Form Request\nDESCRIPTION: Defines validation rules for the request in the rules() method of a FormRequest class. Defines 'foo' as required and max length of 255, and 'bar' as required.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/**\n * 獲取應用到請求的驗證規則\n */\npublic function rules(): array\n{\n    return [\n        'foo' => 'required|max:255',\n        'bar' => 'required',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Check Crontab Enable with a separate Class - PHP\nDESCRIPTION: This PHP code demonstrates how to enable or disable a crontab task by calling a method from another class. The `enable` parameter in the `#[Crontab]` annotation is set to an array containing the class name and method name. The method must return a boolean value indicating whether the task should be enabled.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/crontab.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Crontab;\n\nclass EnableChecker\n{\n    public function isEnable(): bool\n    {\n        return false;\n    }\n}\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Crontab;\n\nuse Carbon\\Carbon;\nuse Hyperf\\Crontab\\Annotation\\Crontab;\n\n#[Crontab(name: \"Echo\", rule: \"* * * * *\", callback: \"execute\", enable: [EnableChecker::class, \"isEnable\"], memo: \"這是一個示例的定時任務\")]\nclass EchoCrontab\n{\n    public function execute()\n    {\n        var_dump(Carbon::now()->toDateTimeString());\n    }\n\n    public function isEnable(): bool\n    {\n        return true;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Cloning Hyperf Skeleton and Core Projects (Bash)\nDESCRIPTION: Clones the hyperf-skeleton project and the hyperf component library project from GitHub. This sets up the basic project structure for component development and allows for easy modification of Hyperf core components.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/component-guide/intro.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n// Install the skeleton and configure it\ncomposer create-project hyperf/hyperf-skeleton\n\n// Clone the hyperf component library project, remember to replace hyperf with your Github ID, that is, clone the project you forked\ngit clone git@github.com:hyperf/hyperf.git\n```\n\n----------------------------------------\n\nTITLE: Defining a Task with Runner Interface in Hyperf DAG\nDESCRIPTION: This snippet demonstrates defining a task using a class that implements the `\\Hyperf\\Dag\\Runner` interface. The `Vertex::of` method converts the class instance into a vertex that can be added to the DAG. The `run` method within the class defines the task's execution logic. Results from dependencies can be passed into the run method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/dag.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass MyJob implements \\Hyperf\\Dag\\Runner {\n    public function run($results = []) {\n        return 'hello';\n    }\n}\n\n\\Hyperf\\Dag\\Vertex::of(new MyJob(), \"greeting\");\n```\n\n----------------------------------------\n\nTITLE: Configure Static Resources (PHP)\nDESCRIPTION: This PHP code snippet configures Swoole to serve static files from the public directory.  The document_root setting defines the directory where static files are located, and enable_static_handler enables the static file server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'settings' => [\n        ...\n        // 静态资源\n        'document_root' => BASE_PATH . '/public',\n        'enable_static_handler' => true,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Get URLs for Paginator Pages\nDESCRIPTION: This code demonstrates how to generate URLs for different pages within the paginator.  It shows how to get the URL for the next page, the previous page, and a specific page using `nextPageUrl()`, `previousPageUrl()`, and `url($page)` respectively.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/paginator.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// 下一頁的 URL\n$nextPageUrl = $paginator->nextPageUrl();\n// 上一頁的 URL\n$previousPageUrl = $paginator->previousPageUrl();\n// 獲取指定 $page 頁數的 URL\n$url = $paginator->url($page);\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Config\nDESCRIPTION: Installs the hyperf/config component using composer. This component provides the default configuration functionalities for Hyperf applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config\n```\n\n----------------------------------------\n\nTITLE: Get Per Page Item Count with Paginator\nDESCRIPTION: Retrieves the number of items to be displayed on each page. This value is set during the Paginator's initialization.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/paginator.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$perPage = $paginator->perPage();\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Retry Component\nDESCRIPTION: This command installs the Hyperf retry component using Composer, a dependency management tool for PHP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/retry.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/retry\n```\n\n----------------------------------------\n\nTITLE: Publish Hyperf Metric Configuration\nDESCRIPTION: This command publishes the default configuration file for the hyperf/metric component to the config/autoload directory.  This allows users to customize the component's settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/metric\n```\n\n----------------------------------------\n\nTITLE: Configure Zipkin Driver\nDESCRIPTION: Configures the Zipkin driver in `config/autoload/opentracing.php`, including app name, IP address, port, endpoint URL, timeout, and sampler.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tracer.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Zipkin\\Samplers\\BinarySampler;\n\nreturn [\n    // default Tracer\n    'default' => env('TRACER_DRIVER', 'zipkin'),\n\n    // Other configurations are omitted here in this example\n    'enable' => [],\n\n    'tracer' => [\n        // Zipkin drive config\n        'zipkin' => [\n            // current app config\n            'app' => [\n                'name' => env('APP_NAME', 'skeleton'),\n                // If ipv6 and ipv6 are null, the component will automatically detect from the Server\n                'ipv4' => '127.0.0.1',\n                'ipv6' => null,\n                'port' => 9501,\n            ],\n            'driver' => \\Hyperf\\Tracer\\Adapter\\ZipkinTracerFactory::class,\n            'options' => [\n                // the endpoint address of Zipkin service\n                'endpoint_url' => env('ZIPKIN_ENDPOINT_URL', 'http://localhost:9411/api/v2/spans'),\n                // Request timeout (in seconds)\n                'timeout' => env('ZIPKIN_TIMEOUT', 1),\n            ],\n            // Sampler, track all requests by default\n            'sampler' => BinarySampler::createAsAlwaysSample(),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using Retry Annotation in Hyperf\nDESCRIPTION: This code snippet demonstrates the basic usage of the `#[Retry]` annotation to automatically retry a method upon exceptions. It is placed above the method that needs to be retried.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/retry.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * 异常时重试该方法\n */\n#[Retry]\npublic function foo()\n{\n    // 发起一次远程调用\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Resources in Hyperf\nDESCRIPTION: Configures static resource handling within the `config/autoload/server.php` file for Hyperf.  It enables Swoole to manage static files by defining the document root and enabling the static handler.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'settings' => [\n        ...\n        // 靜態資源\n        'document_root' => BASE_PATH . '/public',\n        'enable_static_handler' => true,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Annotation Class in PHP\nDESCRIPTION: This code snippet demonstrates how to create a custom annotation class in PHP by extending Hyperf\\Di\\Annotation\\AbstractAnnotation and applying the #[Attribute] attribute. It also defines the targets where the annotation can be used.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/annotation.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Annotation;\n\nuse Attribute;\nuse Hyperf\\Di\\Annotation\\AbstractAnnotation;\n\n#[Attribute(Attribute::TARGET_CLASS | Attribute::TARGET_METHOD)]\nclass Bar extends AbstractAnnotation\n{\n    // some code\n}\n\n#[Attribute(Attribute::TARGET_CLASS)]\nclass Foo extends AbstractAnnotation\n{\n    // some code\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Server in Hyperf\nDESCRIPTION: This PHP snippet demonstrates how to configure a gRPC server in Hyperf's `server.php` configuration file. It defines a server named 'grpc' with specific host, port, and callback settings to handle gRPC requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/grpc.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n'servers' => [\n    ....\n    [\n        'name' => 'grpc',\n        'type' => Server::SERVER_HTTP,\n        'host' => '0.0.0.0',\n        'port' => 9503,\n        'sock_type' => SWOOLE_SOCK_TCP,\n        'callbacks' => [\n            Event::ON_REQUEST => [\\Hyperf\\GrpcServer\\Server::class，'onRequest'],\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: File Download in Hyperf\nDESCRIPTION: This snippet demonstrates how to initiate a file download using the `download()` method of the `Hyperf\\HttpServer\\Contract\\ResponseInterface`. It sets the appropriate headers for a file download and handles `if-match` or `if-none-match` headers according to protocol standards.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/response.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function index(ResponseInterface $response): Psr7ResponseInterface\n    {\n        return $response->download(BASE_PATH . '/public/file.csv', 'filename.csv');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Middleware\nDESCRIPTION: This PHP configuration defines a global middleware for the 'ws' server, specifying `yourMiddleware::class` to be executed for all WebSocket connections. The 'ws' value corresponds to the WebSocket server's name defined in the server configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/websocket-server.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'ws' => [\n        yourMiddleware::class\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Starting Hyperf Server with CLI\nDESCRIPTION: Starts the Hyperf server from the project's root directory using the `php bin/hyperf.php start` command. This command initiates the built-in coroutine server, allowing the application to handle requests. After executing the command the server will start running as a CLI process and listen to incoming connections.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/overview.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nphp bin/hyperf.php start\n```\n\n----------------------------------------\n\nTITLE: Build Phar Archive (Custom Name)\nDESCRIPTION: Builds a Phar archive with a custom name using the `--name` option.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/phar.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp bin/hyperf.php phar:build --name=your_project.phar\n```\n\n----------------------------------------\n\nTITLE: Optimize SQL Query Logging with ReactiveX\nDESCRIPTION: This code snippet demonstrates how to optimize SQL query logging in Hyperf using ReactiveX. It filters queries exceeding 100ms, limits logging to once per second per connection, and logs slow queries with connection name, time, and SQL statement.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/reactive-x.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\ReactiveX\\Example;\n\nuse Hyperf\\Database\\Events\\QueryExecuted;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BeforeWorkerStart;\nuse Hyperf\\Logger\\LoggerFactory;\nuse Hyperf\\ReactiveX\\Observable;\nuse Hyperf\\Collection\\Arr;\nuse Hyperf\\Stringable\\Str;\nuse Psr\\Container\\ContainerInterface;\n\nclass SqlListener implements ListenerInterface\n{\n    private $logger;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->logger = $container->get(LoggerFactory::class)->get('sql');\n    }\n\n    public function listen(): array\n    {\n        return [\n            BeforeWorkerStart::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        Observable::fromEvent(QueryExecuted::class)\n            ->filter(\n                fn ($event) => $event->time > 100\n            )\n            ->groupBy(\n                fn ($event) => $event->connectionName\n            )\n            ->flatMap(\n                fn ($group) => $group->throttle(1000)\n            )\n            ->map(\n                function ($event) {\n                    $sql = $event->sql;\n                    if (! Arr::isAssoc($event->bindings)) {\n                        foreach ($event->bindings as $key => $value) {\n                            $sql = Str::replaceFirst('?', \"'{$value}'\", $sql);\n                        }\n                    }\n                    return [$event->connectionName, $event->time, $sql];\n                }\n            )->subscribe(\n                fn ($message) => $this->logger->info(sprintf('slow log: [%s] [%s] %s', ...$message))\n            );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Alpha Dash Validation with ASCII Restriction in Hyperf\nDESCRIPTION: This snippet shows how to restrict the `alpha_dash` validation rule to ASCII characters in Hyperf. It uses the `ascii` option to limit the allowed characters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n'username' => 'alpha_dash:ascii',\n```\n\n----------------------------------------\n\nTITLE: Mapping Custom Frequency Class\nDESCRIPTION: Demonstrates how to map the custom frequency class in the `dependencies` configuration to replace the default low-frequency component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/pool.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\DbConnection\\Frequency::class => App\\Pool\\Frequency::class,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Generating Swagger Documentation\nDESCRIPTION: This command manually triggers the generation of Swagger documentation files. This is necessary if the `auto_generate` option is disabled in the configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/swagger.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php gen:swagger\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Middleware with Multiple Middleware Annotations - PHP\nDESCRIPTION: This code snippet illustrates how to define multiple middleware for a controller using multiple `#[Middleware]` annotations. Requires `use Hyperf\\HttpServer\\Annotation\\Middleware;` and should be used with `#[AutoController]` or `#[Controller]`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/middleware/middleware.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Middleware\\BarMiddleware;\nuse App\\Middleware\\FooMiddleware;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\HttpServer\\Annotation\\Middleware;\nuse Hyperf\\HttpServer\\Annotation\\Middlewares;\n\n#[AutoController]\n#[Middleware(FooMiddleware::class)]\n#[Middleware(BarMiddleware::class)]\nclass IndexController\n{\n    public function index()\n    {\n        return 'Hello Hyperf.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Overtrue Flysystem Tencent Cloud COS Adapter\nDESCRIPTION: This shell command installs the `overtrue/flysystem-cos` adapter using composer, required to work with Tencent Cloud COS for file storage in Hyperf. The correct version constraints for flysystem v2.0 are also given.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.2.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-cos:^4.0\"\n```\n\n----------------------------------------\n\nTITLE: Define Dependency Injection Relationship (PHP)\nDESCRIPTION: Defines the dependency injection relationship in the dependencies.php file. This maps the CalculatorServiceInterface to the CalculatorServiceConsumer, allowing the interface to be injected and resolved to the consumer class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/json-rpc.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    App\\JsonRpc\\CalculatorServiceInterface::class => App\\JsonRpc\\CalculatorServiceConsumer::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Disable HTML Entity Double Encoding\nDESCRIPTION: This PHP code demonstrates how to disable double encoding of HTML entities in Blade by listening to the `BootApplication` event and calling `Blade::withoutDoubleEncoding()`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\nuse Hyperf\\ViewEngine\\Blade;\nuse Psr\\Container\\ContainerInterface;\n\n#[Listener]\nclass BladeWithoutDoubleEncodingListener implements ListenerInterface\n{\n    /**\n     * @var ContainerInterface\n     */\n    private $container;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n    }\n\n    public function listen(): array\n    {\n        return [\n            BootApplication::class\n        ];\n    }\n\n    public function process(object $event)\n    {\n        Blade::withoutDoubleEncoding();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: MIME Validation\nDESCRIPTION: The `mimes:foo,bar,…` rule validates that a file has one of the specified extensions.  This example shows how to validate the extensions of a photo file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\n'photo' => 'mimes:jpeg,bmp,png'\n```\n\n----------------------------------------\n\nTITLE: Publishing Rate Limit Configuration\nDESCRIPTION: Publishes the default configuration file for the hyperf/rate-limit package to the application's config directory, allowing for customization of rate limiting parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/rate-limit.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/rate-limit\n```\n\n----------------------------------------\n\nTITLE: Nesting DAGs in Hyperf\nDESCRIPTION: This example demonstrates how to nest DAGs within each other. The inner DAG is represented as a Vertex, allowing it to be added as a task within a super DAG.  This provides a way to compose complex workflows from smaller, manageable DAGs.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/dag.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// 命名空间已省略\n$a = Vertex::make(function () { return 1;});\n$b = Vertex::make(function () { return 2;});\n$c = Vertex::make(function () { return 3;});\n\n$nestedDag = new Dag();\n$nestedDag->addVertex($a)->addVertex($b)->addEdge($a, $b);\n$d = Vertex::of($nestedDag);\n\n$superDag = new Dag();\n$superDag->addVertex($c)->addVertex($d)->addEdge($c, $d);\n$superDag->run();\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Product Type\nDESCRIPTION: This GraphQL query retrieves both the 'hello' and 'product' queries. The 'product' query requests the 'name' and 'price' fields of the Product type.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/graphql.md#_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n    hello(name: \"graphql\")\n    product(name: \"goods\", price: 156.5) {\n        name\n        price\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Metric Middleware\nDESCRIPTION: This PHP code configures the MetricMiddleware for the http server. This middleware collects request statistics (request_status, request_path, request_method) and sends them to the configured metrics backend.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'http' => [\n        \\Hyperf\\Metric\\Middleware\\MetricMiddleware::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Limiting and offsetting results with skip/take in Hyperf\nDESCRIPTION: This code demonstrates how to limit the number of returned results and skip a specified number of results using the `skip` and `take` methods in Hyperf's query builder. This example skips the first 10 records and then returns the next 5.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->skip(10)->take(5)->get();\n```\n\n----------------------------------------\n\nTITLE: Server Configuration for Multi Port Server - Hyperf PHP\nDESCRIPTION: This code snippet defines the server configuration with two http listeners on different ports. InnerHttp is defined using the 'InnerHttp' dependency to allow another port running, to prevent default port being covered\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/overview.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'servers' => [\n        [\n            'name' => 'http',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9501,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [Hyperf\\HttpServer\\Server::class, 'onRequest'],\n            ],\n        ],\n        [\n            'name' => 'innerHttp',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9502,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => ['InnerHttp', 'onRequest'],\n            ],\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Testing Component\nDESCRIPTION: This command installs the hyperf/testing component, which provides utilities for testing Hyperf applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/testing.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require hyperf/testing\n```\n\n----------------------------------------\n\nTITLE: Rendering View in Controller\nDESCRIPTION: Shows how to render a view from a Hyperf controller using `Hyperf\\View\\RenderInterface`.  It retrieves the `RenderInterface` instance and calls the `render` method, passing the view file name (`index`) and data to be rendered.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\View\\RenderInterface;\n\n#[AutoController]\nclass ViewController\n{\n    public function index(RenderInterface $render)\n    {\n        return $render->render('index', ['name' => 'Hyperf']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Reverse Proxy Configuration for Socket.io/WebSocket\nDESCRIPTION: This Nginx configuration block shows how to set up a reverse proxy for Socket.io and WebSocket connections. It includes necessary headers for WebSocket upgrades and forwarding client information.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/socketio-server.md#_snippet_18\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    location ^~/socket.io/ {\n        # 執行代理訪問真實伺服器\n        proxy_pass http://hyperf;\n        proxy_http_version 1.1;\n        proxy_set_header Host $host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Searching for Models\nDESCRIPTION: Searches for models using the `search` method. This method accepts a search string and returns a collection of matching model instances when combined with the `get` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->get();\n```\n\n----------------------------------------\n\nTITLE: Call RPC Service - Hyperf\nDESCRIPTION: Demonstrates how to call an RPC service using the `ApplicationContext` to resolve the service implementation and execute a method on it.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/rpc-multiplex.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Context\\ApplicationContext;\nuse RPC\\Push\\PushInterface;\n\nApplicationContext::getContainer()->get(PushInterface::class)->sendSmsCode('18600000001', '6666');\n\n```\n\n----------------------------------------\n\nTITLE: User Data Access Object Test - PHP\nDESCRIPTION: Defines a test case for the `UserDao` class, specifically testing the `first` method. It retrieves a `UserDao` instance from the application context, calls the `first` method with an ID, and asserts that the returned model's ID matches the provided ID.  The var_dump statement is intended for debugging.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/testing.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace HyperfTest\\Cases;\n\nuse HyperfTest\\HttpTestCase;\nuse App\\Service\\Dao\\UserDao;\n/**\n * @internal\n * @coversNothing\n */\nclass UserTest extends HttpTestCase\n{\n    public function testUserDaoFirst()\n    {\n        $model = \\Hyperf\\Context\\ApplicationContext::getContainer()->get(UserDao::class)->first(1);\n\n        var_dump($model);\n\n        $this->assertSame(1, $model->id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Searchable Data\nDESCRIPTION: This code snippet demonstrates how to override the `toSearchableArray` method on a model to customize the data that is indexed in the search engine.  The example shows customizing the array, which defaults to the model's `toArray` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\Scout\\Searchable;\nuse Hyperf\\Database\\Model\\Model;\n\nclass Post extends Model\n{\n    use Searchable;\n\n    /**\n     * Get the indexable data array for the model.\n     * @return array\n     */\n    public function toSearchableArray()\n    {\n        $array = $this->toArray();\n\n        // Customize array...\n\n        return $array;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Rate Limit Configuration\nDESCRIPTION: This command publishes the default configuration file for the `hyperf/rate-limit` package to your project. This allows you to customize the rate limiting behavior.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/rate-limit.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/rate-limit\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Results - PHP\nDESCRIPTION: This snippet shows how to iterate through the result set obtained from the query builder, accessing the properties of each stdClass object returned. It assumes that the `$users` variable contains a collection or array of `stdClass` objects, each representing a user.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Cacheable Annotation with Value Example\nDESCRIPTION: This demonstrates configuring a dynamic cache key using the `value` attribute of the `Cacheable` annotation, utilizing object properties from method arguments.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/cache.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass UserBookService\n{\n    #[Cacheable(prefix: \"userBook\", ttl: 6666, value: \"_#{user.id}\")]\n    public function userBook(User $user): array\n    {\n        return [\n            'book' => $user->book->toArray(),\n            'uuid' => $this->unique(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Command Logic in handle() (PHP)\nDESCRIPTION: Defines the core logic of the command within the `handle()` method. This method contains the code that will be executed when the command is run from the console. It includes using `line()` to output text to the console.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    /**\n     * 執行的命令列\n     */\n    protected ?string $name = 'foo:hello';\n\n    public function handle()\n    {\n        // 透過內建方法 line 在 Console 輸出 Hello Hyperf.\n        $this->line('Hello Hyperf.', 'info');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Closure Command with Cron Schedule (PHP)\nDESCRIPTION: Defines a command using a closure within the `config/console.php` file with a cron schedule. This is useful for creating scheduled tasks in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Command\\Console;\n\nConsole::command('foo', function () {\n    $this->comment('Hello, Foo!');\n})->describe('This is a demo closure command.')->cron('* * * * *');\n\nConsole::command('bar', function () {\n    $this->comment('Hello, Bar!');\n})->describe('This is another demo closure command.')->cron('* * * * *', callback: fn($cron) => $cron->setSingleton(true));\n\n```\n\n----------------------------------------\n\nTITLE: Publish Nacos Configuration\nDESCRIPTION: Publishes the default Nacos configuration file to the project. This allows users to customize the Nacos client settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nacos.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/nacos\n```\n\n----------------------------------------\n\nTITLE: Where Exists Statement - PHP\nDESCRIPTION: This demonstrates the usage of `whereExists` for performing subquery filtering. This query selects all users who have at least one order.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->whereExists(function ($query) {\n    $query->select(Db::raw(1))\n            ->from('orders')\n            ->whereRaw('orders.user_id = users.id');\n})\n->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Listener in Hyperf\nDESCRIPTION: This PHP code snippet shows how to configure the `ErrorExceptionHandler` listener in `config/autoload/listeners.php`. This listener converts PHP errors into `ErrorException` exceptions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/exception-handler.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    \\Hyperf\\ExceptionHandler\\Listener\\ErrorExceptionHandler::class\n];\n```\n\n----------------------------------------\n\nTITLE: Disabling Consumer Auto-Start\nDESCRIPTION: Demonstrates how to disable the automatic start of a consumer in Hyperf. This can be achieved by setting `enable=false` in the `#[Consumer]` attribute or by overriding the `isEnable()` method to return `false` in the consumer class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/amqp.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Amqp\\Consumers;\n\nuse Hyperf\\Amqp\\Annotation\\Consumer;\nuse Hyperf\\Amqp\\Message\\ConsumerMessage;\nuse Hyperf\\Amqp\\Result;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n#[Consumer(exchange: \"hyperf\", routingKey: \"hyperf\", queue: \"hyperf\", nums: 1, enable: false)]\nclass DemoConsumer extends ConsumerMessage\n{\n    public function consumeMessage($data, AMQPMessage $message): Result\n    {\n        print_r($data);\n        return Result::ACK;\n    }\n\n    public function isEnable(): bool\n    {\n        return parent::isEnable();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining RPC Interface in Hyperf\nDESCRIPTION: Defines an interface for a push service with a method to send SMS codes. This interface is used by both the server implementation and client invocation for type safety and contract definition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/rpc-multiplex.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace RPC\\Push;\n\ninterface PushInterface\n{\n    public function sendSmsCode(string $mobile, string $code): bool;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Model Observer Implementation in PHP\nDESCRIPTION: This PHP code defines a `UserObserver` class, demonstrating how to use model observers in Hyperf to listen for model events.  The `@ModelListener` annotation associates this observer with the `User` model. The observer includes methods like `creating` and `created` which are triggered before and after a user is created, respectively, allowing for custom logic during these events.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/event.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\ModelListener\\Annotation\\ModelListener;\nuse App\\Model\\User;\nuse Hyperf\\Database\\Model\\Events\\Creating;\nuse Hyperf\\Database\\Model\\Events\\Created;\n\n/**\n * 定義一個 UserObserver 觀察者，監聽 User 模型的事件.\n * 也可以監聽多個模型，只需要在 models 屬性中傳入多個模型即可\n * 需要注意，此類將會被自動註冊到容器中成為單例\n */\n#[ModelListener(models: [ User::class ])]\nclass UserObserver\n{\n    public function creating(Creating $event)\n    {\n        $user = $event->getModel();\n        // 創建用户時觸發\n    }\n    \n    public function created(Created $event)\n    {\n        $user = $event->getModel();\n        // 用户創建完成後觸發\n    }\n    \n    //... 省略其他事件\n}\n\n```\n\n----------------------------------------\n\nTITLE: Publish Specific Package Config Bash\nDESCRIPTION: A specific example using the Hyperf CLI tool to publish the configuration files for the `hyperf/amqp` package. The `vendor:publish` command uses the package name to locate the ConfigProvider and copy the associated configuration files.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/component-guide/configprovider.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/amqp\n```\n\n----------------------------------------\n\nTITLE: MongoTask Class with Annotations - PHP\nDESCRIPTION: Defines a `MongoTask` class with `insert` and `query` methods annotated with `#[Task]`. These methods interact with MongoDB in a separate task worker process. The class includes a manager method to initialize and return a MongoDB manager instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/task.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Task;\n\nuse Hyperf\\Task\\Annotation\\Task;\nuse MongoDB\\Driver\\BulkWrite;\nuse MongoDB\\Driver\\Manager;\nuse MongoDB\\Driver\\Query;\nuse MongoDB\\Driver\\WriteConcern;\n\nclass MongoTask\n{\n    public Manager $manager;\n\n    #[Task]\n    public function insert(string $namespace, array $document)\n    {\n        $writeConcern = new WriteConcern(WriteConcern::MAJORITY, 1000);\n        $bulk = new BulkWrite();\n        $bulk->insert($document);\n\n        $result = $this->manager()->executeBulkWrite($namespace, $bulk, $writeConcern);\n        return $result->getUpsertedCount();\n    }\n\n    #[Task]\n    public function query(string $namespace, array $filter = [], array $options = [])\n    {\n        $query = new Query($filter, $options);\n        $cursor = $this->manager()->executeQuery($namespace, $query);\n        return $cursor->toArray();\n    }\n\n    protected function manager()\n    {\n        if ($this->manager instanceof Manager) {\n            return $this->manager;\n        }\n        $uri = 'mongodb://127.0.0.1:27017';\n        return $this->manager = new Manager($uri, []);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Metric Factory Methods\nDESCRIPTION: Defines the factory methods available in the `MetricFactoryInterface` for creating counters, gauges, and histograms.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\npublic function makeCounter($name, $labelNames): CounterInterface;\n\npublic function makeGauge($name, $labelNames): GaugeInterface;\n\npublic function makeHistogram($name, $labelNames): HistogramInterface;\n```\n\n----------------------------------------\n\nTITLE: Default #[Retry] Annotation Attributes PHP\nDESCRIPTION: This snippet shows the default attributes of the `#[Retry]` annotation in Hyperf. It includes configurations for retry policies, sleep strategy, maximum attempts, retry budget, base interval, predicates for retrying based on exceptions or results, and fallback mechanisms.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/retry.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Array of retry policies. Think of these as stacked middlewares.\n * @var string[]\n */\npublic $policies = [\n    FallbackRetryPolicy::class,\n    ClassifierRetryPolicy::class,\n    BudgetRetryPolicy::class,\n    MaxAttemptsRetryPolicy::class,\n    SleepRetryPolicy::class,\n];\n\n/**\n * The algorithm for retry intervals.\n */\npublic string $sleepStrategyClass = SleepStrategyInterface::class;\n\n/**\n * Max Attampts.\n */\npublic int $maxAttempts = 10;\n\n/**\n * Retry Budget.\n * ttl: Seconds of token lifetime.\n * minRetriesPerSec: Base retry token generation speed.\n * percentCanRetry: Generate new token at this ratio of the request volume.\n *\n * @var array|RetryBudgetInterface\n */\npublic $retryBudget = [\n    'ttl' => 10,\n    'minRetriesPerSec' => 1,\n    'percentCanRetry' => 0.2,\n];\n\n/**\n * Base time inteval (ms) for each try. For backoff strategy this is the interval for the first try\n * while for flat strategy this is the interval for every try.\n */\npublic int $base = 0;\n\n/**\n * Configures a Predicate which evaluates if an exception should be retried.\n * The Predicate must return true if the exception should be retried, otherwise it must return false.\n *\n * @var callable|string\n */\npublic $retryOnThrowablePredicate = '';\n\n/**\n * Configures a Predicate which evaluates if an result should be retried.\n * The Predicate must return true if the result should be retried, otherwise it must return false.\n *\n * @var callable|string\n */\npublic $retryOnResultPredicate = '';\n\n/**\n * Configures a list of Throwable classes that are recorded as a failure and thus are retried.\n * Any Throwable matching or inheriting from one of the list will be retried, unless ignored via ignoreExceptions.\n *\n * Ignoring an Throwable has priority over retrying an exception.\n *\n * @var array<string|\\Throwable>\n */\npublic $retryThrowables = [\\Throwable::class];\n\n/**\n * Configures a list of error classes that are ignored and thus are not retried.\n * Any exception matching or inheriting from one of the list will not be retried, even if marked via retryExceptions.\n *\n * @var array<string|\\Throwable>\n */\npublic $ignoreThrowables = [];\n\n/**\n * The fallback callable when all attempts exhausted.\n *\n * @var callable|string\n */\npublic $fallback = '';\n```\n\n----------------------------------------\n\nTITLE: Hyperf XA Global Transaction Example\nDESCRIPTION: This snippet demonstrates a successful XA transaction case in Hyperf. It initiates a global transaction, calls two branch transactions (`transIn` and `transOut`), and then completes the global transaction. The branch transactions are called via HTTP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/distributed-transaction.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Grpc\\GrpcClient;\nuse DtmClient\\DbTransaction\\DBTransactionInterface;\nuse DtmClient\\TransContext;\nuse DtmClient\\XA;\nuse Hyperf\\Contract\\ConfigInterface;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\GetMapping;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\n\n#[Controller(prefix: '/xa')]\nclass XAController\n{\n\n    private GrpcClient $grpcClient;\n\n    protected string $serviceUri = 'http://127.0.0.1:9502';\n\n    public function __construct(\n        private XA $xa,\n        protected ConfigInterface $config,\n    ) {\n        $server = $this->config->get('dtm.server', '127.0.0.1');\n        $port = $this->config->get('dtm.port.grpc', 36790);\n        $hostname = $server . ':' . $port;\n        $this->grpcClient = new GrpcClient($hostname);\n    }\n\n\n    #[GetMapping(path: 'successCase')]\n    public function successCase(): string\n    {\n        $payload = ['amount' => 50];\n        // 開啟Xa 全域性事物\n        $gid = $this->xa->generateGid();\n        $this->xa->globalTransaction($gid, function () use ($payload) {\n            // 呼叫子事物介面\n            $respone = $this->xa->callBranch($this->serviceUri . '/xa/api/transIn', $payload);\n            // XA http模式下獲取子事物返回結構\n            /* @var ResponseInterface $respone */\n            $respone->getBody()->getContents();\n            // 呼叫子事物介面\n            $payload = ['amount' => 10];\n            $this->xa->callBranch($this->serviceUri . '/xa/api/transOut', $payload);\n        });\n        // 透過 TransContext::getGid() 獲得 全域性事務ID 並返回\n        return TransContext::getGid();\n    }\n\n    #[RequestMapping(methods: [\"GET\", \"POST\", \"PUT\"], path: 'api/transIn')]\n    public function transIn(RequestInterface $request): array\n    {\n        $content = $request->post('amount');\n        $amount = $content['amount'] ?? 50;\n        // 模擬分散式系統下transIn方法\n        $this->xa->localTransaction(function (DBTransactionInterface $dbTransaction) use ($amount) {\n            // 請使用 DBTransactionInterface 處理本地 Mysql 事物\n            $dbTransaction->xaExecute('UPDATE `order` set `amount` = `amount` + ? where id = 1', [$amount]);\n        });\n\n        return ['status' => 0, 'message' => 'ok'];\n    }\n\n    /**\n     * @param RequestInterface $request\n     * @return array\n     */\n    #[RequestMapping(methods: [\"GET\", \"POST\", \"PUT\"], path: 'api/transOut')]\n    public function transOut(RequestInterface $request): array\n    {\n        $content = $request->post('amount');\n        $amount = $content['amount'] ?? 10;\n        // 模擬分散式系統下transOut方法\n        $this->xa->localTransaction(function (DBTransactionInterface $dbTransaction) use ($amount) {\n            // 請使用 DBTransactionInterface 處理本地 Mysql 事物\n            $dbTransaction->xaExecute('UPDATE `order` set `amount` = `amount` - ? where id = 2', [$amount]);\n        });\n\n        return ['status' => 0, 'message' => 'ok'];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuration Reuse with PHP Variables in Hyperf\nDESCRIPTION: This snippet demonstrates how to reuse registry configurations across multiple service consumers using PHP variables. It defines a common registry configuration and assigns it to the 'registry' key for multiple consumers, avoiding repetition in the `services.php` configuration file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/json-rpc.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$registry = [\n   'protocol' => 'consul',\n   'address' => 'http://127.0.0.1:8500',\n];\nreturn [\n    // 下面的 FooService 和 BarService 僅示例多服務，並不是在文檔示例中真實存在的\n    'consumers' => [\n        [\n            'name' => 'FooService',\n            'registry' => $registry,\n        ],\n        [\n            'name' => 'BarService',\n            'registry' => $registry,\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Building Phar Archive with External File Mapping\nDESCRIPTION: This command builds a Phar archive and maps an external file to be accessible within the archive. The `-M` option allows you to make files outside of the phar accessible to the application running within the phar. This feature requires `hyperf/phar` version >= v2.1.7.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/phar.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php phar:build -M .env\n```\n\n----------------------------------------\n\nTITLE: Define NSQ Consumer using Annotation\nDESCRIPTION: This PHP code defines an NSQ consumer using the `Hyperf\\Nsq\\Annotation\\Consumer` annotation. It extends `Hyperf\\Nsq\\AbstractConsumer` and implements the `consume` method to process messages from the specified topic and channel.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nsq.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Nsq\\Consumer;\n\nuse Hyperf\\Nsq\\AbstractConsumer;\nuse Hyperf\\Nsq\\Annotation\\Consumer;\nuse Hyperf\\Nsq\\Message;\nuse Hyperf\\Nsq\\Result;\n\n#[Consumer(topic: \"hyperf\", channel: \"hyperf\", name: \"DemoNsqConsumer\", nums: 1)]\nclass DemoNsqConsumer extends AbstractConsumer\n{\n    public function consume(Message $payload): string \n    {\n        var_dump($payload->getBody());\n\n        return Result::ACK;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DTM Client Configuration File\nDESCRIPTION: This PHP code defines the configuration array for the DTM Client in a Hyperf or other PHP framework. It includes settings for the communication protocol with the DTM Server, the server address and port, sub-transaction barrier configuration, and Guzzle HTTP client options.  The configuration allows customization of the DTM client's behavior.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/distributed-transaction.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse DtmClient\\Constants\\Protocol;\nuse DtmClient\\Constants\\DbType;\n\nreturn [\n    // 客戶端與 DTM Server 通訊的協議，支援 Protocol::HTTP 和 Protocol::GRPC 兩種\n    'protocol' => Protocol::HTTP,\n    // DTM Server 的地址\n    'server' => '127.0.0.1',\n    // DTM Server 的埠\n    'port' => [\n        'http' => 36789,\n        'grpc' => 36790,\n    ],\n    // 子事務屏障配置\n    'barrier' => [\n        // DB 模式下的子事務屏障配置\n        'db' => [\n            'type' => DbType::MySQL\n        ],\n        // Redis 模式下的子事務屏障配置\n        'redis' => [\n            // 子事務屏障記錄的超時時間\n            'expire_seconds' => 7 * 86400,\n        ],\n        // 非 Hyperf 框架下應用子事務屏障的類\n        'apply' => [],\n    ],\n    // HTTP 協議下 Guzzle 客戶端的通用配置\n    'guzzle' => [\n        'options' => [],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Getting Session Object\nDESCRIPTION: This snippet demonstrates how to obtain the `SessionInterface` object via dependency injection in a Hyperf controller.  The `@Inject` annotation is used to inject the session object, which can then be used within the controller's methods. This requires the `Hyperf\\Di\\Annotation\\Inject` and `Hyperf\\Contract\\SessionInterface` namespaces to be imported.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/session.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Contract\\SessionInterface;\n\nclass IndexController\n{\n    #[Inject]\n    private SessionInterface $session;\n\n    public function index()\n    {\n        // 直接通過 $this->session 來使用\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying logger Configuration (PHP)\nDESCRIPTION: This code snippet shows how to modify the logger configuration in `logger.php`. Because the `runtime` directory in a `phar` is not writable, the log file path needs to be updated to a writable location (e.g., `/tmp/runtime/logs/hyperf.log`).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/phar.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'handler' => [\n            'class' => Monolog\\Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => '/tmp/runtime/logs/hyperf.log',\n                'level' => Monolog\\Logger::INFO,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Error Message - PHP\nDESCRIPTION: This code demonstrates how to define a custom error message for a custom validation rule. It shows the addition to the `storage/languages/en/validation.php` file to define the error message for the `foo` rule. Specifically, it shows the english version of the error message. Requires a `validation.php` in your languages folder.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_50\n\nLANGUAGE: PHP\nCODE:\n```\n    'foo' => 'The :attribute must be foo',\n```\n\n----------------------------------------\n\nTITLE: Enable Crontab in Configuration - PHP\nDESCRIPTION: This PHP code enables the crontab functionality by setting the 'enable' configuration option to `true` in the `config/autoload/crontab.php` file. This file needs to be created if it doesn't exist.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/crontab.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // 是否開啟定時任務\n    'enable' => true,\n];\n```\n\n----------------------------------------\n\nTITLE: Hyperf View Engine Configuration\nDESCRIPTION: This configuration array defines the settings for the Hyperf View Engine, including the engine class, rendering mode (SYNC), paths for views and cache, custom component registration, and namespaces for views in extension packages. The SYNC mode is recommended to reduce inter-process communication overhead.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'engine' => Hyperf\\ViewEngine\\HyperfViewEngine::class,\n    'mode' => Hyperf\\View\\Mode::SYNC,\n    'config' => [\n        'view_path' => BASE_PATH . '/storage/view/',\n        'cache_path' => BASE_PATH . '/runtime/view/',\n    ],\n\n    # 自定義元件註冊\n    'components' => [\n        // 'alert' => \\App\\View\\Components\\Alert::class\n    ],\n\n    # 檢視名稱空間 (主要用於擴充套件包中)\n    'namespaces' => [\n        // 'admin' => BASE_PATH . '/storage/view/vendor/admin',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Including a Related Resource\nDESCRIPTION: Shows how to include related resources in a resource's 'toArray' method, using the 'collection' method of another resource to transform the related models into a collection of resources.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'posts' => PostResource::collection($this->posts),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Box Kernel\nDESCRIPTION: These commands configure the Box kernel to use either Swow (default) or Swoole.  Switching to Swoole Kernel is only supported for PHP 8.1, doesn't support Windows and building binary programs. Requires the box command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/eco/box.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n// 设置为 Swow Kernel [默认]\nbox config set kernel swow\n\n// 设置为 Swoole Kernel (不支持 Windows)\nbox config set kernel swoole\n```\n\n----------------------------------------\n\nTITLE: Drop Single Column in Hyperf Schema\nDESCRIPTION: This snippet demonstrates how to drop (delete) a single column from a table in a Hyperf database schema. It removes the 'name' column from the 'users' table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nSchema::table('users', function (Blueprint $table) {\n    // 刪除 name 字段\n    $table->dropColumn('name');\n    // 刪除多個字段\n    $table->dropColumn(['name', 'age']);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Resource Example\nDESCRIPTION: Defines a basic resource class extending `JsonResource`. The `toArray` method defines the structure of the JSON response, mapping model attributes to array keys.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering a JSONRPC Protocol in Hyperf Jet\nDESCRIPTION: Registers a JSONRPC protocol using Hyperf\\Jet\\ProtocolManager. This involves defining the transporter, packer, data formatter, and path generator for the protocol.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/jet.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Jet\\DataFormatter\\DataFormatter;\nuse Hyperf\\Jet\\Packer\\JsonEofPacker;\nuse Hyperf\\Jet\\PathGenerator\\PathGenerator;\nuse Hyperf\\Jet\\ProtocolManager;\nuse Hyperf\\Jet\\Transporter\\StreamSocketTransporter;\n\nProtocolManager::register($protocol = 'jsonrpc', [\n    ProtocolManager::TRANSPORTER => new StreamSocketTransporter(),\n    ProtocolManager::PACKER => new JsonEofPacker(),\n    ProtocolManager::PATH_GENERATOR => new PathGenerator(),\n    ProtocolManager::DATA_FORMATTER => new DataFormatter(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Metric Driver Configuration\nDESCRIPTION: Defines the default metric driver to be used, which is retrieved from the environment variable `METRIC_DRIVER`. The specific driver configurations are defined under the `metric` key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'default' => env('METRIC_DRIVER', 'prometheus'),\n```\n\n----------------------------------------\n\nTITLE: Retrying a Method with #[Retry] Annotation PHP\nDESCRIPTION: This snippet demonstrates how to use the `#[Retry]` annotation to automatically retry a method upon encountering an exception. It initiates a remote call which will be retried based on the default retry strategy.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/retry.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * 異常時重試該方法\n */\n#[Retry]\npublic function foo()\n{\n    // 發起一次遠端呼叫\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Remote Method with Custom Client\nDESCRIPTION: This snippet demonstrates how to call a remote method using a custom client class. It creates an instance of the `CalculatorService` client and calls the `add` method with arguments `1` and `2`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/jet.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// 呼叫遠端方法 `add` 並帶上引數 `1` 和 `2`\n// $result 即為遠端方法的返回值\n$client = new CalculatorService();\n$result = $client->add(1, 2);\n```\n\n----------------------------------------\n\nTITLE: Publish Hyperf Signal Configuration\nDESCRIPTION: This command publishes the default configuration file for the hyperf/signal component to your project's config directory, allowing customization of signal handling behavior.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/signal.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/signal\n```\n\n----------------------------------------\n\nTITLE: Merging Conditional Data in Hyperf Resources\nDESCRIPTION: This PHP code demonstrates how to conditionally merge multiple attributes into a resource response using the `mergeWhen` method.  The additional attributes are included only if the specified condition (Auth::user()->isAdmin()) is true.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            $this->mergeWhen(Auth::user()->isAdmin(), [\n                'first-secret' => 'value',\n                'second-secret' => 'value',\n            ]),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Publishing Swagger Configuration\nDESCRIPTION: This command publishes the default configuration file for the hyperf/swagger component to the config directory. This allows customization of the swagger documentation generation process, such as enabling/disabling generation, specifying ports, and defining scan paths.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/swagger.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/swagger\n```\n\n----------------------------------------\n\nTITLE: Apply Validation Scene\nDESCRIPTION: This code shows how to apply a validation scene programmatically within a controller method.  It retrieves the request object from the container, applies the specified scene and then validates the request.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Request\\DebugRequest;\nuse App\\Request\\SceneRequest;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController(prefix: 'foo')]\nclass FooController extends Controller\n{\n    public function scene()\n    {\n        $request = $this->container->get(SceneRequest::class);\n        $request->scene('foo')->validateResolved();\n\n        return $this->response->success($request->all());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Object Type Casting in Hyperf (PHP)\nDESCRIPTION: This code implements a custom type caster for converting model attributes to a value object `Address`. The `get` method creates a new `Address` object from the `address_line_one` and `address_line_two` attributes.  The `set` method returns an array containing the values of the `lineOne` and `lineTwo` properties of the `Address` object to be stored in the respective database columns.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/mutators.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Casts;\n\nuse App\\Address;\nuse Hyperf\\Contract\\CastsAttributes;\n\nclass AddressCaster implements CastsAttributes\n{\n    /**\n     * 将取出的数据进行转换\n     */\n    public function get($model, $key, $value, $attributes): Address\n    {\n        return new Address(\n            $attributes['address_line_one'],\n            $attributes['address_line_two']\n        );\n    }\n\n    /**\n     * 转换成将要进行存储的值\n     */\n    public function set($model, $key, $value, $attributes)\n    {\n        return [\n            'address_line_one' => $value->lineOne,\n            'address_line_two' => $value->lineTwo,\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Dropping Foreign Key Constraint in Hyperf (PHP)\nDESCRIPTION: Demonstrates how to drop a foreign key constraint using the `dropForeign()` method in Hyperf's schema builder.  The method takes either the foreign key name or an array of fields as arguments. If fields are passed, the name will be generated according to agreed-upon rules.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\n$table->dropForeign('posts_user_id_foreign');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$table->dropForeign(['user_id'']);\n```\n\n----------------------------------------\n\nTITLE: Basic MIME Validation\nDESCRIPTION: This snippet demonstrates basic usage of the `mimes` rule to validate the MIME type of an uploaded file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n'photo' => 'mimes:jpeg,bmp,png'\n```\n\n----------------------------------------\n\nTITLE: Validating Array Input - PHP\nDESCRIPTION: This snippet demonstrates how to validate array input fields using dot notation. The example validates that the 'photos.profile' field is required and is an image. This approach uses a `$request` object to access all input, specifically `photos.profile`.  It assumes a valid request object is in scope.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_47\n\nLANGUAGE: PHP\nCODE:\n```\n$validator = $this->validationFactory->make($request->all(), [\n    'photos.profile' => 'required|image',\n]);\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Nacos Service Governance Component\nDESCRIPTION: This shell command installs the `hyperf/service-governance-nacos` component using composer. It's required for using Nacos as the service center driver.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.2.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"hyperf/service-governance-nacos:~2.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Starting Hyperf Watcher\nDESCRIPTION: This command starts the Hyperf server with the watcher enabled. It monitors the specified files and directories for changes and restarts the server automatically when changes are detected.  It must be run from the project root directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/watcher.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php server:watch\n```\n\n----------------------------------------\n\nTITLE: Returning Raw Response in Hyperf\nDESCRIPTION: This snippet shows how to return a raw text response using the `raw()` method of the `ResponseInterface`. It sets the `Content-Type` header to `plain/text` and accepts a string or an object with a `__toString()` method as input. The method returns a new `Psr7ResponseInterface` object containing the raw text data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/response.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function raw(ResponseInterface $response): Psr7ResponseInterface\n    {\n        return $response->raw('Hello Hyperf.');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Managing Database Transactions Manually in Hyperf\nDESCRIPTION: Demonstrates how to manually manage database transactions in Hyperf using `Db::beginTransaction`, `Db::commit`, and `Db::rollBack`. This gives you full control over transaction boundaries and error handling.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/quick-start.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\nDb::beginTransaction();\ntry{\n\n    // Do something...\n\n    Db::commit();\n} catch(\\Throwable $ex){\n    Db::rollBack();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS Middleware in Hyperf\nDESCRIPTION: This PHP snippet demonstrates how to create a CORS middleware in Hyperf. It sets the necessary headers to allow cross-origin requests, including Access-Control-Allow-Origin, Access-Control-Allow-Credentials, and Access-Control-Allow-Headers.  It also handles OPTIONS requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/middleware/middleware.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Middleware;\n\nuse Hyperf\\Context\\Context;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass CorsMiddleware implements MiddlewareInterface\n{\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        $response = Context::get(ResponseInterface::class);\n        $response = $response->withHeader('Access-Control-Allow-Origin', '*')\n            ->withHeader('Access-Control-Allow-Credentials', 'true')\n            // Headers 可以根据实际情况进行改写。\n            ->withHeader('Access-Control-Allow-Headers', 'DNT,Keep-Alive,User-Agent,Cache-Control,Content-Type,Authorization');\n\n        Context::set(ResponseInterface::class, $response);\n\n        if ($request->getMethod() == 'OPTIONS') {\n            return $response;\n        }\n\n        return $handler->handle($request);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Requests with MVC in Hyperf (PHP)\nDESCRIPTION: This code snippet illustrates handling HTTP requests using the MVC pattern.  It defines an `IndexController` with an `index` method that retrieves an `id` parameter from the request and returns it as a string. Requires `use Hyperf\\HttpServer\\Contract\\RequestInterface;` and `use Hyperf\\HttpServer\\Annotation\\AutoController;`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/overview.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass IndexController\n{\n    // Hyperf 會自動為此方法生成一個 /index/index 的路由，允許通過 GET 或 POST 方式請求\n    public function index(RequestInterface $request)\n    {\n        // 從請求中獲得 id 參數\n        $id = $request->input('id', 1);\n        // 轉換 $id 為字符串格式並以 plain/text 的 Content-Type 返回 $id 的值給客户端\n        return (string)$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Consul KV Client\nDESCRIPTION: Creates an instance of the Consul KV client, configuring it with the Consul server address and using the Hyperf Guzzle client factory to create a Guzzle client for making HTTP requests to the Consul API. It showcases the usage of Hyperf's ApplicationContext to retrieve dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/consul.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Consul\\KV;\nuse Hyperf\\Guzzle\\ClientFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n$clientFactory = $container->get(ClientFactory::class);\n\n$consulServer = 'http://127.0.0.1:8500';\n$kv = new KV(function () use ($clientFactory, $consulServer) {\n    return $clientFactory->create([\n        'base_uri' => $consulServer,\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: UserService Implementation\nDESCRIPTION: The UserService class implements the UserServiceInterface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Service;\n\nclass UserService implements UserServiceInterface\n{\n    public function getInfoById(int $id)\n    {\n        // 我們假設存在一個 Info 實體\n        return (new Info())->fill($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Socket API for Event Emission\nDESCRIPTION: This PHP snippet demonstrates the usage of the Socket API for emitting events to clients. It showcases various methods for sending events to specific clients, broadcasting to all clients except the sender, sending to clients in specific rooms, sending with acknowledgement, and sending without compression. It highlights how to target specific sockets and rooms for event delivery.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/socketio-server.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n#[Event(\"SomeEvent\")]\nfunction onSomeEvent(\\Hyperf\\SocketIOServer\\Socket $socket){\n\n  // sending to the client\n  // 向連接推送 hello 事件\n  $socket->emit('hello', 'can you hear me?', 1, 2, 'abc');\n\n  // sending to all clients except sender\n  // 向所有連接推送 broadcast 事件，但是不包括當前連接。\n  $socket->broadcast->emit('broadcast', 'hello friends!');\n\n  // sending to all clients in 'game' room except sender\n  // 向 game 房間內所有連接推送 nice game 事件，但是不包括當前連接。\n  $socket->to('game')->emit('nice game', \"let's play a game\");\n\n  // sending to all clients in 'game1' and/or in 'game2' room, except sender\n  // 向 game1 房間 和 game2 房間內所有連接取並集推送 nice game 事件，但是不包括當前連接。\n  $socket->to('game1')->to('game2')->emit('nice game', \"let's play a game (too)\");\n\n  // WARNING: `$socket->to($socket->getSid())->emit()` will NOT work, as it will send to everyone in the room\n  // named `$socket->getSid()` but the sender. Please use the classic `$socket->emit()` instead.\n  // 注意：自己給自己推送的時候不要加to，因為$socket->to()總是排除自己。直接$socket->emit()就好了。\n\n  // sending with acknowledgement\n  // 發送信息，並且等待並接收客户端響應。\n  $reply = $socket->emit('question', 'do you think so?')->reply();\n\n  // sending without compression\n  // 無壓縮推送\n  $socket->compress(false)->emit('uncompressed', \"that's rough\");\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure SQLite Driver - Hyperf\nDESCRIPTION: Configures the SQLite database connection in Hyperf's `databases.php` file. The configuration uses environment variables.  `database` can be `:memory:` for an in-memory database or an absolute file path.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/quick-start.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/databases.php\nreturn [\n     // 其他配置\n    'sqlite'=>[\n        'driver' => env('DB_DRIVER', 'sqlite'),\n        'host' => env('DB_HOST', 'localhost'),\n        // :memory: 為記憶體資料庫 也可以指定檔案絕對路徑\n        'database' => env('DB_DATABASE', ':memory:'),\n        // other sqlite config\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Degenerating a Snowflake ID\nDESCRIPTION: This code demonstrates how to reverse a Snowflake ID to get its Meta information using the degenerate method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/snowflake.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Snowflake\\IdGeneratorInterface;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n$generator = $container->get(IdGeneratorInterface::class);\n\n$meta = $generator->degenerate($id);\n```\n\n----------------------------------------\n\nTITLE: Using Proxy Class for Multiple Databases\nDESCRIPTION: This PHP code demonstrates how to use a proxy class (FooRedis) to switch between Redis connection pools in Hyperf. It extends the base Redis class and overrides the poolName property to specify a different connection pool.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/redis.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Redis\\Redis;\n\nclass FooRedis extends Redis\n{\n    // 對應的 Pool 的 key 值\n    protected $poolName = 'foo';\n}\n\n// 通過 DI 容器獲取或直接注入當前類\n$redis = $this->container->get(FooRedis::class);\n\n$result = $redis->keys('*');\n\n```\n\n----------------------------------------\n\nTITLE: Converting Query Results to Array Format using Event Listener\nDESCRIPTION: Explains how to configure Hyperf to return query results as arrays instead of `stdClass` objects by implementing an event listener for `Hyperf\\Database\\Events\\StatementPrepared`. It demonstrates how to modify the PDO fetch mode to `PDO::FETCH_ASSOC` within the listener.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Database\\Events\\StatementPrepared;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse PDO;\n\n#[Listener]\nclass FetchModeListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            StatementPrepared::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        if ($event instanceof StatementPrepared) {\n            $event->statement->setFetchMode(PDO::FETCH_ASSOC);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Each Element in an Array - PHP\nDESCRIPTION: This code shows how to validate each element in an array input. It checks if each 'email' within the 'person' array is a valid email and unique in the 'users' table and if 'first_name' is required when 'last_name' is present.  Assumes a valid `$request` object is in scope containing array input.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_48\n\nLANGUAGE: PHP\nCODE:\n```\n$validator = $this->validationFactory->make($request->all(), [\n    'person.*.email' => 'email|unique:users',\n    'person.*.first_name' => 'required_with:person.*.last_name',\n]);\n```\n\n----------------------------------------\n\nTITLE: Building Phar Package (Custom Bin)\nDESCRIPTION: This command builds a Phar package with a custom entry point specified using the `--bin` option. This allows you to define a different file to be executed when the Phar archive is run.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/phar.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php phar:build --bin=bin/hyperf.php\n```\n\n----------------------------------------\n\nTITLE: Installing Nacos Config Center Client (Hyperf)\nDESCRIPTION: This command installs the Nacos client for Hyperf, enabling the application to fetch configurations from a Nacos configuration server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config-center.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-nacos\n```\n\n----------------------------------------\n\nTITLE: Install Prometheus Client PHP\nDESCRIPTION: This command installs the `promphp/prometheus_client_php` package, which is required for using the `prometheus` engine in the `hyperf/metric` component from v3.1 onwards.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/3.1.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require promphp/prometheus_client_php\n```\n\n----------------------------------------\n\nTITLE: Using Hyperf WebSocket Client\nDESCRIPTION: Demonstrates how to create a WebSocket client, send a message to a WebSocket server, and receive a response. Uses the ClientFactory to instantiate a Client object and utilizes the push and recv methods for communication. Includes dependency injection for the ClientFactory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/websocket-client.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\WebSocketClient\\ClientFactory;\nuse Hyperf\\WebSocketClient\\Frame;\n\nclass IndexController\n{\n    #[Inject]\n    protected ClientFactory $clientFactory;\n\n    public function index()\n    {\n        // 对端服务的地址，如没有提供 ws:// 或 wss:// 前缀，则默认补充 ws://\n        $host = '127.0.0.1:9502';\n        // 通过 ClientFactory 创建 Client 对象，创建出来的对象为短生命周期对象\n        $client = $this->clientFactory->create($host);\n        // 向 WebSocket 服务端发送消息\n        $client->push('HttpServer 中使用 WebSocket Client 发送数据。');\n        // 获取服务端响应的消息，服务端需要通过 push 向本客户端的 fd 投递消息，才能获取；以下设置超时时间 2s，接收到的数据类型为 Frame 对象。\n        /** @var Frame $msg */\n        $msg = $client->recv(2);\n        // 获取文本数据：$res_msg->data\n        return $msg->data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying pid_file Configuration (PHP)\nDESCRIPTION: This code snippet shows how to modify the `pid_file` configuration in `server.php`.  Because the `runtime` directory in a `phar` is not writable, this configuration needs to be updated to a writable location (e.g., `/tmp/runtime/hyperf.pid`).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/phar.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'settings' => [\n        'pid_file' => '/tmp/runtime/hyperf.pid',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: transOut API Endpoint Implementation\nDESCRIPTION: This snippet demonstrates the implementation of the `transOut` API endpoint using the Hyperf framework, which simulates a transactional operation in a distributed system. It extracts the 'amount' parameter from the incoming request and then uses the `xa->localTransaction` method to wrap the database update within an XA local transaction, utilizing the `DBTransactionInterface` to perform the SQL query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/distributed-transaction.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n    /**\n     * @param RequestInterface $request\n     * @return array\n     */\n    #[RequestMapping(methods: [\"GET\", \"POST\", \"PUT\"], path: 'api/transOut')]\n    public function transOut(RequestInterface $request): array\n    {\n        $content = $request->post('amount');\n        $amount = $content['amount'] ?? 10;\n        // 模拟分布式系统下transOut方法\n        $this->xa->localTransaction(function (DBTransactionInterface $dbTransaction) use ($amount) {\n            // 请使用 DBTransactionInterface 处理本地 Mysql 事物\n            $dbTransaction->xaExecute('UPDATE `order` set `amount` = `amount` - ? where id = 2', [$amount]);\n        });\n\n        return ['status' => 0, 'message' => 'ok'];\n    }\n```\n\n----------------------------------------\n\nTITLE: Using a Proxy Class for Specific Redis Pool (Hyperf)\nDESCRIPTION: Demonstrates how to create a proxy class that extends Hyperf\\Redis\\Redis to target a specific Redis connection pool. It modifies the poolName property to use the configured pool, enabling easy switching between different Redis configurations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/redis.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Redis\\Redis;\n\nclass FooRedis extends Redis\n{\n    // 對應的 Pool 的 key 值\n    protected $poolName = 'foo';\n}\n\n// 透過 DI 容器獲取或直接注入當前類\n$redis = $this->container->get(FooRedis::class);\n\n$result = $redis->keys('*');\n\n```\n\n----------------------------------------\n\nTITLE: Requesting a message using NATS\nDESCRIPTION: This PHP code shows how to send a request to a NATS subject and handle the response using the `request` method. It uses an anonymous function to process the received `Message` payload and then returns a successful response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nats.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Nats\\Driver\\DriverInterface;\nuse Hyperf\\Nats\\Message;\n\n#[AutoController(prefix: \"nats\")]\nclass NatsController extends AbstractController\n{\n    #[Inject]\n    protected DriverInterface $nats;\n\n    public function request()\n    {\n        $res = $this->nats->request('hyperf.reply', [\n            'id' => 'limx',\n        ], function (Message $payload) {\n            var_dump($payload->getBody());\n        });\n\n        return $this->response->success($res);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Composer Autoload Dump\nDESCRIPTION: This command is used to regenerate the composer autoload files. This can resolve issues where code changes are not being reflected in the application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/questions.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer dump-autoload -o\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Example in config.php\nDESCRIPTION: This code snippet demonstrates how to read an environment variable and use it as the default value for a configuration option in `config/config.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/config.php\nreturn [\n    'app_name' => env('APP_NAME', 'Hyperf Skeleton'),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a Command Using Constructor Injection - PHP\nDESCRIPTION: Define a command's name using constructor injection.  This example demonstrates setting the command name by calling the parent constructor with the desired name. Requires Hyperf Command component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    public function __construct()\n    {\n        parent::__construct('foo:hello');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Logging Raw SQL Queries in Hyperf (PHP)\nDESCRIPTION: This snippet demonstrates how to enable and use the SQL query log in Hyperf. This functionality should only be used in development environments as it can cause memory leaks and data consistency problems. The code shows how to enable the query log, execute a query, and then print the last executed SQL query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/quick-start.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\DbConnection\\Db;\nuse Hyperf\\Collection\\Arr;\nuse App\\Model\\Book;\n\n// Enable SQL data logging function\n// WARNING: causes a memory leak and data consistency problems in the Swoole CLI environment, local development and debugging only!\nDb::enableQueryLog();\n\n$book = Book::query()->find(1);\n\n// Print the last SQL query\nvar_dump(Arr::last(Db::getQueryLog()));\n```\n\n----------------------------------------\n\nTITLE: WebSocket Controller - PHP\nDESCRIPTION: Defines a WebSocket controller in Hyperf, implementing the `OnMessageInterface` and `OnOpenInterface`.  The `onMessage` and `onOpen` methods accept `Swoole\\WebSocket\\Server` as the first parameter, and respectively a `Frame` and `Request` object as the second one. These functions should contain the logic for handling WebSocket messages and opening connections.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/1.1.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnMessageInterface;\nuse Hyperf\\Contract\\OnOpenInterface;\nuse Swoole\\Http\\Request;\nuse Swoole\\Websocket\\Frame;\nuse Swoole\\WebSocket\\Server as WebSocketServer;\n\nclass WebSocketController implements OnMessageInterface, OnOpenInterface\n{\n    public function onMessage(WebSocketServer $server, Frame $frame): void\n    {\n    }\n\n    public function onOpen(WebSocketServer $server, Request $request): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Redirect Response in Hyperf\nDESCRIPTION: Shows how to create a redirect response using the `redirect()` method of the `Hyperf\\HttpServer\\Contract\\ResponseInterface`. The method returns a `Psr\\Http\\Message\\ResponseInterface` object with the appropriate redirect status and Location header.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/response.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function redirect(ResponseInterface $response): Psr7ResponseInterface\n    {\n        // redirect() method will return an Psr\\Http\\Message\\ResponseInterface object, needs to return the object.\n        return $response->redirect('/anotherUrl');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Snowflake Component\nDESCRIPTION: This command installs the hyperf/snowflake component using composer, which provides the Snowflake ID generation functionality.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/snowflake.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/snowflake\n```\n\n----------------------------------------\n\nTITLE: Modifying Field Length with Schema Builder in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to modify an existing string field's length in a database table using Hyperf's Schema Builder.  It modifies the 'name' field in the 'users' table, setting its length to 50.  This requires the `doctrine/dbal` dependency.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nSchema::create('users', function (Blueprint $table) {\n    // Modify the length of the field to 50\n    $table->string('name', 50)->change();\n});\n```\n\n----------------------------------------\n\nTITLE: Bind NormalizerInterface in container.php\nDESCRIPTION: This snippet shows how to manually bind the `Hyperf\\Contract\\NormalizerInterface` implementation when using JSONRPC with the `symfony/serializer` library.  Because version 2.0 no longer automatically maps the implementation class, this configuration is necessary for proper serialization.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.0.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Utils\\Serializer\\SerializerFactory;\nuse Hyperf\\Utils\\Serializer\\Serializer;\n\nreturn [\n    Hyperf\\Contract\\NormalizerInterface::class => new SerializerFactory(Serializer::class),\n];\n\n```\n\n----------------------------------------\n\nTITLE: Register Service Listener Configuration\nDESCRIPTION: Configuration to register the Hyperf\\RpcMultiplex\\Listener\\RegisterServiceListener, which is needed when using a registration center.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/rpc-multiplex.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\RpcMultiplex\\Listener\\RegisterServiceListener::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Index\nDESCRIPTION: This code snippet shows how to override the `searchableAs` method on a model to customize the index name used for storing the model's data in the search engine.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\Scout\\Searchable;\nuse Hyperf\\Database\\Model\\Model;\n\nclass Post extends Model\n{\n    use Searchable;\n\n    /**\n     * Get the index name for the model.\n     * @return string\n     */\n    public function searchableAs()\n    {\n        return 'posts_index';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting and offsetting results with offset/limit in Hyperf\nDESCRIPTION: This example shows how to limit the number of returned results and skip a specified number of results using the `offset` and `limit` methods in Hyperf's query builder. This example skips the first 10 records and then returns the next 5.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->offset(10)->limit(5)->get();\n```\n\n----------------------------------------\n\nTITLE: Defining Closure Command with Cron (PHP)\nDESCRIPTION: Defines a closure command along with a cron schedule. This allows the command to be executed automatically based on the cron schedule. Also shows setting the singleton property on the cron instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Command\\Console;\n\nConsole::command('foo', function () {\n    $this->comment('Hello, Foo!');\n})->describe('This is a demo closure command.')->cron('* * * * *');\n\nConsole::command('bar', function () {\n    $this->comment('Hello, Bar!');\n})->describe('This is another demo closure command.')->cron('* * * * *', callback: fn($cron) => $cron->setSingleton(true));\n\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Etcd Config\nDESCRIPTION: This command installs the Hyperf component for integrating with Etcd, a distributed key-value store often used for configuration management.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config-center.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-etcd\n```\n\n----------------------------------------\n\nTITLE: Simulating HTTP Requests - Hyperf Testing Client - PHP\nDESCRIPTION: Creates an instance of the `Hyperf\\Testing\\Client` class to simulate an HTTP GET request. The `make()` helper function is used to instantiate the client, and the `get()` method simulates a GET request to the root path ('/').\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/testing.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Testing\\Client;\n\n$client = make(Client::class);\n\n$result = $client->get('/');\n```\n\n----------------------------------------\n\nTITLE: CacheEvict Annotation Example\nDESCRIPTION: This code shows how to use the `CacheEvict` annotation to remove a cache entry after the method executes, ensuring the cache is cleared after an update or deletion.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/cache.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse Hyperf\\Cache\\Annotation\\CacheEvict;\n\nclass UserBookService\n{\n    #[CacheEvict(prefix: \"userBook\", value: \"_#{id}\")]\n    public function updateUserBook(int $id)\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Existing Record (PHP)\nDESCRIPTION: Updates an existing model instance and automatically syncs the changes to the search index. The Searchable trait ensures that updates to the model are reflected in the Elasticsearch index when the model is saved.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$order = App\\Order::find(1);\n\n// 更新 order...\n\n$order->save();\n```\n\n----------------------------------------\n\nTITLE: Configuring Hyperf Task Settings\nDESCRIPTION: This configuration snippet shows how to configure the Task component in the `server.php` file, including setting the number of task workers and disabling coroutines for task execution to avoid data mixing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/task.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 这里省略了其它不相关的配置项\n    'settings' => [\n        // Task Worker 数量，根据您的服务器配置而配置适当的数量\n        'task_worker_num' => 8,\n        // 因为 `Task` 主要处理无法协程化的方法，所以这里推荐设为 `false`，避免协程下出现数据混淆的情况\n        'task_enable_coroutine' => false,\n    ],\n    'callbacks' => [\n        // Task callbacks\n        Event::ON_TASK => [Hyperf\\Framework\\Bootstrap\\TaskCallback::class, 'onTask'],\n        Event::ON_FINISH => [Hyperf\\Framework\\Bootstrap\\FinishCallback::class, 'onFinish'],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Querying Existence of Polymorphic Relations in Hyperf\nDESCRIPTION: This code snippet shows how to query the existence of a `MorphTo` relationship using `whereHasMorph`. The code filters `Image` records to include only those that are related to a `User` or `Book` model with an `imageable_id` of 1. Requires `Hyperf\\Database\\Model\\Builder`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/relationship.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\Book;\nuse App\\Model\\Image;\nuse App\\Model\\User;\nuse Hyperf\\Database\\Model\\Builder;\n\n$images = Image::query()->whereHasMorph(\n    'imageable',\n    [\n        User::class,\n        Book::class,\n    ],\n    function (Builder $query) {\n        $query->where('imageable_id', 1);\n    }\n)->get();\n\n```\n\n----------------------------------------\n\nTITLE: Model Event Listener PHP\nDESCRIPTION: This code showcases a listener for model events, specifically `Deleted` and `Saved` events, in Hyperf. It implements the `ListenerInterface` and uses the `Listener` annotation. When triggered by either of these events, it checks if the model implements the `CacheableInterface`, and if so, it calls the `deleteCache()` method to remove the model's cache.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/event.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\ModelCache\\Listener;\n\nuse Hyperf\\Database\\Model\\Events\\Deleted;\nuse Hyperf\\Database\\Model\\Events\\Event;\nuse Hyperf\\Database\\Model\\Events\\Saved;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\ModelCache\\CacheableInterface;\n\n#[Listener]\nclass DeleteCacheListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            Deleted::class,\n            Saved::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        if ($event instanceof Event) {\n            $model = $event->getModel();\n            if ($model instanceof CacheableInterface) {\n                $model->deleteCache();\n            }\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Redirect Response in Hyperf\nDESCRIPTION: Demonstrates how to create a redirect response using the `redirect()` method of the `ResponseInterface`.  The method takes a URL, status code (default 302), and schema (default http).  If the URL doesn't include http:// or https://, the schema is used to construct the full URL.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/response.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function redirect(ResponseInterface $response): Psr7ResponseInterface\n    {\n        // redirect() 方法返回的是一個 Psr\\Http\\Message\\ResponseInterface 物件，需再 return 回去\n        return $response->redirect('/anotherUrl');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating Search Results with Custom Page Size\nDESCRIPTION: Paginates the search results using the `paginate` method and specifies the number of models to retrieve per page. This example sets the page size to 15.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->paginate(15);\n```\n\n----------------------------------------\n\nTITLE: Injecting MetricFactoryInterface for Custom Metrics (PHP)\nDESCRIPTION: Demonstrates how to inject the `MetricFactoryInterface` to record custom metrics, such as the number of orders created, within a Hyperf controller. It creates a counter metric with labels for different order types and increments the counter when a new order is created.  Requires the `Hyperf\\Di\\Annotation\\Inject` and `Hyperf\\Metric\\Contract\\MetricFactoryInterface` dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse App\\Model\\Order;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Metric\\Contract\\MetricFactoryInterface;\n\nclass IndexController extends AbstractController\n{\n    #[Inject]\n    private MetricFactoryInterface $metricFactory;\n\n    public function create(Order $order)\n    {\n        $counter = $this->metricFactory->makeCounter('order_created', ['order_type']);\n        $counter->with($order->type)->add(1);\n        // order logic...\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Hyperf Project with Composer (Swow)\nDESCRIPTION: This command creates a new Hyperf project using the `hyperf/swow-skeleton` package, pre-configured for Swow. It downloads the necessary dependencies and sets up a basic project structure in the current directory. During installation, the user should accept default options.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/install.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer create-project hyperf/swow-skeleton\n```\n\n----------------------------------------\n\nTITLE: Throwing a Custom Exception in Hyperf\nDESCRIPTION: This snippet demonstrates how to throw the custom `BusinessException` in a Hyperf controller. It throws an exception with the `ErrorCode::SERVER_ERROR`, which encapsulates error handling logic. This will trigger the exception handler and potentially return an error response to the client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/constants.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse App\\Constants\\ErrorCode;\nuse App\\Exception\\BusinessException;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        throw new BusinessException(ErrorCode::SERVER_ERROR);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting custom keys for fields with pluck()\nDESCRIPTION: This snippet shows how to use the `pluck()` method with custom keys for fields in the returned collection.  It retrieves 'title' values from the 'roles' table, using 'name' as the key for each title.  It then iterates through the collection to display each title.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$roles = Db::table('roles')->pluck('title', 'name');\n\nforeach ($roles as $name => $title) {\n    echo $title;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Column in Hyperf Migration\nDESCRIPTION: This code demonstrates how to add a column to a table during a Hyperf migration using the `string` method on the `Blueprint` object.  This example creates a `name` column of type string.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Database\\Schema\\Schema;\nuse Hyperf\\Database\\Schema\\Blueprint;\nuse Hyperf\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    public function up(): void\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->string('name');\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Handler Configuration\nDESCRIPTION: Configures the exception handler to use the `ValidationExceptionHandler` class provided by Hyperf Validation. This ensures that validation exceptions are properly handled within the application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/validation/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'handler' => [\n        'http' => [\n            \\Hyperf\\Validation\\ValidationExceptionHandler::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Saga Transaction Example in Hyperf\nDESCRIPTION: This PHP code demonstrates the usage of the DTM Client to implement a Saga distributed transaction within a Hyperf controller. It defines a `successCase` method that initiates a Saga transaction, adding two sub-transactions (transOut and transIn) with corresponding compensation operations.  It uses `Saga::add` to chain services and `Saga::submit` to execute the transaction.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/distributed-transaction.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse DtmClient\\Saga;\nuse DtmClient\\TransContext;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\GetMapping;\n\n#[Controller(prefix: '/saga')]\nclass SagaController\n{\n\n    protected string $serviceUri = 'http://127.0.0.1:9501';\n    \n    #[Inject]\n    protected Saga $saga;\n\n    #[GetMapping(path: 'successCase')]\n    public function successCase(): string\n    {\n        $payload = ['amount' => 50];\n        // 初始化 Saga 事務\n        $this->saga->init();\n        // 增加轉出子事務\n        $this->saga->add(\n            $this->serviceUri . '/saga/transOut', \n            $this->serviceUri . '/saga/transOutCompensate', \n            $payload\n        );\n        // 增加轉入子事務\n        $this->saga->add(\n            $this->serviceUri . '/saga/transIn', \n            $this->serviceUri . '/saga/transInCompensate', \n            $payload\n        );\n        // 提交 Saga 事務\n        $this->saga->submit();\n        // 透過 TransContext::getGid() 獲得 全域性事務ID 並返回\n        return TransContext::getGid();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Array Option (PHP)\nDESCRIPTION: Defines an array option using `InputOption::VALUE_IS_ARRAY | InputOption::VALUE_OPTIONAL`. The option can accept multiple values and is accessed as an array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addOption('name', 'N', InputOption::VALUE_IS_ARRAY | InputOption::VALUE_OPTIONAL, '姓名');\n}\n\npublic function handle()\n{\n    var_dump($this->input->getOption('name'));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Optional Annotation Injection\nDESCRIPTION: Uses #[Inject(required: false)] to inject UserService, setting $userService to null if UserService is not resolvable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserService;\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass IndexController\n{\n    /**\n     * 透過 `#[Inject]` 註解注入由註解宣告的屬性型別物件\n     * 當 UserService 不存在於 DI 容器內或不可建立時，則注入 null\n     */\n    #[Inject(required: false)]\n    private ?UserService $userService;\n    \n    public function index()\n    {\n        $id = 1;\n        if ($this->userService instanceof UserService) {\n            // 僅值存在時 $userService 可用\n            return $this->userService->getInfoById($id);    \n        }\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Service with #[RpcService]\nDESCRIPTION: This PHP code snippet demonstrates how to register a service using the `#[RpcService]` annotation in Hyperf. The annotation specifies the service name, protocol (JSON-RPC HTTP in this case), and the server to bind to. It requires the `Hyperf\\RpcServer\\Annotation\\RpcService` namespace.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/service-register.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\JsonRpc;\n\nuse Hyperf\\RpcServer\\Annotation\\RpcService;\n\n#[RpcService(name: \"CalculatorService\", protocol: \"jsonrpc-http\", server: \"jsonrpc-http\")]\nclass CalculatorService implements CalculatorServiceInterface\n{\n    // 實現一個加法方法，這裏簡單的認為參數都是 int 類型\n    public function calculate(int $a, int $b): int\n    {\n        // 這裏是服務方法的具體實現\n        return $a + $b;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exists Validation with Custom Query in Hyperf\nDESCRIPTION: This snippet shows how to define a custom query for the `exists` validation rule in Hyperf using the `Rule` class. This allows you to add conditions to the existence check.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($data, [\n    'email' => [\n        'required',\n        Rule::exists('staff')->where(function ($query) {\n            $query->where('account_id', 1);\n        }),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Migrations in Hyperf\nDESCRIPTION: This command rolls back all migrations and then runs them again. This is useful for rebuilding the database schema from scratch. Requires Hyperf framework and executable `bin/hyperf.php` script.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:refresh\n```\n\nLANGUAGE: bash\nCODE:\n```\n// Rebuild database structure and perform data population\nphp bin/hyperf.php migrate:refresh --seed\n```\n\n----------------------------------------\n\nTITLE: Defining Command with Annotation (PHP)\nDESCRIPTION: Defines a command using the `#[Command]` annotation with the `name` parameter to specify the command's name.  This simplifies command declaration within the class definition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\n\n#[Command(name: \"foo:hello\")]\nclass FooCommand extends HyperfCommand\n{\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Routing for Specific Server in Hyperf (PHP)\nDESCRIPTION: This code snippet demonstrates how to define routes for a specific server using the `addServer` method. It adds a GET route to the 'innerHttp' server, which maps to the `App\\Controller\\IndexController@index` method. Used in `config/routes.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/overview.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nRouter::addServer('innerHttp', function () {\n    Router::get('/', 'App\\Controller\\IndexController@index');\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Components in ConfigProvider (PHP)\nDESCRIPTION: This code shows how to register a component within a package's `ConfigProvider`. It demonstrates how to define a `view` section within the returned configuration array, which contains a `components` array mapping aliases to component class names. This approach is useful for reusable components in packages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass ConfigProvider\n{\n    public function __invoke()\n    {\n        return [\n            // ...others config\n            'view' => [\n                // ...others config\n                'components' => [\n                    'package-alert' => \\App\\View\\Component\\Alert::class,\n                ],\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Preloading morphTo Association PHP\nDESCRIPTION: Preloads the `imageable` relationship of images, and then preloads the `user` relationship of books that are related to the images. This optimizes the number of database queries by loading related models in a single query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/relationship.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse App\\Model\\Book;\nuse App\\Model\\Image;\nuse Hyperf\\Database\\Model\\Relations\\MorphTo;\n\n$images = Image::query()->with([\n    'imageable' => function (MorphTo $morphTo) {\n        $morphTo->morphWith([\n            Book::class => ['user'],\n        ]);\n    },\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Request ID Processor in Hyperf Logger\nDESCRIPTION: This configuration snippet demonstrates how to add the `AppendRequestIdProcessor` to the default logger in Hyperf. By adding this processor, each log message will automatically include a unique request ID, allowing for easier tracking and correlation of logs within a single request flow.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/logger.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse App\\Kernel\\Log;\n\nreturn [\n    'default' => [\n        // 刪除其他配置\n        'processors' => [\n            [\n                'class' => Log\\AppendRequestIdProcessor::class,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Conditional Intermediate Table Info using whenPivotLoadedAs - Hyperf - PHP\nDESCRIPTION: Illustrates how to conditionally include data from intermediate tables using an accessor other than `pivot` via `whenPivotLoadedAs` in Hyperf. The example uses a custom accessor named 'subscription' to access the `expires_at` attribute. First param is the name of accessor, the second is the name of the pivot table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'expires_at' => $this->whenPivotLoadedAs('subscription', 'role_user', function () {\n                return $this->subscription->expires_at;\n            }),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Combining Queries with Union - Hyperf PHP\nDESCRIPTION: Demonstrates how to combine two queries using the `union` method in Hyperf.  It first creates a query and then uses the `union` method to merge it with a second query. The combined result is retrieved using `get()`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$first = Db::table('users')->whereNull('first_name');\n\n$users = Db::table('users')\n    ->whereNull('last_name')\n    ->union($first)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Creating a UdpServer Class in Hyperf\nDESCRIPTION: This code snippet shows the creation of a `UdpServer` class that implements the `OnPacketInterface`. The `onPacket` method handles incoming UDP packets and sends a response back to the client, including client information.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tcp-server.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnPacketInterface;\n\nclass UdpServer implements OnPacketInterface\n{\n    public function onPacket($server, $data, $clientInfo): void\n    {\n        var_dump($clientInfo);\n        $server->sendto($clientInfo['address'], $clientInfo['port'], 'Server：' . $data);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Commands with Hyperf CLI\nDESCRIPTION: This snippet shows the output of the Hyperf CLI when listing available commands.  The commands defined in the previous PHP code snippet using `AsCommand` annotation are displayed along with their descriptions. It assumes Hyperf's CLI tool `bin/hyperf.php` is used.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n$ php bin/hyperf.php\n\n...\nfoo\n  foo:bar                   The description of foo:bar command.\n  foo:bar1                  The description of foo:bar1 command.\n```\n\n----------------------------------------\n\nTITLE: StatsD Configuration\nDESCRIPTION: Configures the StatsD driver with settings such as namespace, UDP host, UDP port, enable batch, push interval, and sample rate.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => env('METRIC_DRIVER', 'statd'),\n    'use_standalone_process' => env('TELEMETRY_USE_STANDALONE_PROCESS', true),\n    'enable_default_metric' => env('TELEMETRY_ENABLE_DEFAULT_TELEMETRY', true),\n    'metric' => [\n        'statsd' => [\n            'driver' => Hyperf\\Metric\\Adapter\\StatsD\\MetricFactory::class,\n            'namespace' => env('APP_NAME', 'skeleton'),\n            'udp_host' => env('STATSD_UDP_HOST', '127.0.0.1'),\n            'udp_port' => env('STATSD_UDP_PORT', '8125'),\n            'enable_batch' => env('STATSD_ENABLE_BATCH', true),\n            'push_interval' => env('STATSD_PUSH_INTERVAL', 5),\n            'sample_rate' => env('STATSD_SAMPLE_RATE', 1.0),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Calling a Remote Method\nDESCRIPTION: This snippet demonstrates how to call a remote method on a client instance.  It calls the `add` method with arguments `1` and `2` and assigns the result to the `$result` variable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/jet.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// 呼叫遠端方法 `add` 並帶上引數 `1` 和 `2`\n// $result 即為遠端方法的返回值\n$result = $client->add(1, 2);\n```\n\n----------------------------------------\n\nTITLE: gRPC Streaming Example\nDESCRIPTION: This code illustrates the gRPC streaming mode. It creates a `RouteGuideClient`, pushes data to a `routeChat` call, and receives data back, demonstrating bidirectional streaming.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/grpc.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\npublic function hello()\n{\n    $client = new RouteGuideClient('127.0.0.1:50051');\n\n    $note = new RouteNote();\n\n    $call = $client->routeChat();\n    $call->push($note);\n    $call->push($note);\n\n    /** @var RouteNote $note */\n    [$note,] = $call->recv();\n    [$note,] = $call->recv();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Raw Expressions with raw() in Hyperf\nDESCRIPTION: Shows how to use raw expressions in database queries using the `Db::raw()` method. This is useful for executing SQL functions or custom SQL statements directly within the query builder.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$res = Db::table('user')->select('gender', Db::raw('COUNT(0) AS `count`'))->groupBy('gender')->get();\n```\n\n----------------------------------------\n\nTITLE: Conditional Validation with Closure - PHP\nDESCRIPTION: This snippet demonstrates how to use the `sometimes` method on the `Validator` instance to add conditional validation rules.  The `reason` field is required and has a maximum length of 500 characters only when the `games` field is greater than or equal to 100.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_46\n\nLANGUAGE: PHP\nCODE:\n```\n$validator = $this->validationFactory->make($data, [\n    'email' => 'required|email',\n    'games' => 'required|numeric',\n]);\n\n$v->sometimes('reason', 'required|max:500', function($input) {\n    return $input->games >= 100;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Option for a Command - PHP\nDESCRIPTION: Demonstrates how to define a boolean option for a command using `InputOption::VALUE_NONE` in the `addOption` method.  Indicates whether the option is present or not.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addOption('opt', 'o', InputOption::VALUE_NONE, '是否优化');\n}\n\npublic function handle()\n{\n    var_dump($this->input->getOption('opt'));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Error Codes and Messages with Class Constants in PHP\nDESCRIPTION: This snippet demonstrates a basic way to define error codes and associated messages using class constants and a static array. It shows how to access the error message using the error code as a key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/constants.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass ErrorCode\n{\n    const SERVER_ERROR = 500;\n    const PARAMS_INVALID = 1000;\n\n    public static $messages = [\n        self::SERVER_ERROR => 'Server Error',\n        self::PARAMS_INVALID => 'Illegal parameter'\n    ];\n}\n\n$message = ErrorCode::messages[ErrorCode::SERVER_ERROR] ?? 'unknown mistake';\n\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Example with Log Label\nDESCRIPTION: This Dockerfile sets the `app.name` label to `hyperf-demo-api`. This label is used by Alibaba Cloud Log Service to identify and collect logs from containers with this specific application name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/aliyun-logger.md#_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Default Dockerfile\n\nFROM hyperf/hyperf:7.4-alpine-v3.11-swoole\nLABEL maintainer=\"Hyperf Developers <group@hyperf.io>\" version=\"1.0\" license=\"MIT\" app.name=\"hyperf-demo-api\"\n\n#Other content omitted\n```\n\n----------------------------------------\n\nTITLE: Merging Attributes with Overwrite Control\nDESCRIPTION: This snippet demonstrates merging component attributes, including handling overwrite behavior for attributes beyond the 'class' attribute. The `true` parameter in `merge()` enables merging other attributes, concatenating them. This allows maintaining both default and passed-in attribute values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_21\n\nLANGUAGE: blade\nCODE:\n```\n<div {{ $attributes->merge(['class' =>'alert alert-'.$type,'other-attr' =>'foo'], true) }}>{{ $message }}</ div>\n```\n\n----------------------------------------\n\nTITLE: Decrementing Field Values - PHP\nDESCRIPTION: This snippet demonstrates how to decrement a field value using the `decrement` method. It also demonstrates decrementing by a specific amount.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->decrement('votes');\n\nDb::table('users')->decrement('votes', 5);\n```\n\n----------------------------------------\n\nTITLE: Using ETCD Client in Hyperf\nDESCRIPTION: This code demonstrates how to retrieve an ETCD client instance from the Hyperf container. It uses `ApplicationContext` to obtain the `KVInterface` implementation, allowing interaction with the ETCD key-value store.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/etcd.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\Etcd\\KVInterface;\n\n$client = ApplicationContext::getContainer()->get(KVInterface::class);\n```\n\n----------------------------------------\n\nTITLE: Overriding ModelUpdateVisitor (Hyperf)\nDESCRIPTION: This code demonstrates how to override the default `ModelUpdateVisitor` to customize data type handling during model generation.  It shows how to modify the `formatDatabaseType` and `formatPropertyType` methods to handle different database types and set appropriate property types. This example sets decimal types to 'decimal:2' and configures corresponding properties.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/gen.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n *\n * @link     https://www.hyperf.io\n * @document https://hyperf.wiki\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\nnamespace App\\Kernel\\Visitor;\n\nuse Hyperf\\Database\\Commands\\Ast\\ModelUpdateVisitor as Visitor;\nuse Hyperf\\Stringable\\Str;\n\nclass ModelUpdateVisitor extends Visitor\n{\n    protected function formatDatabaseType(string $type): ?string\n    {\n        switch ($type) {\n            case 'tinyint':\n            case 'smallint':\n            case 'mediumint':\n            case 'int':\n            case 'bigint':\n                return 'integer';\n            case 'decimal':\n                // Set to decimal, and set the corresponding precision\n                return 'decimal:2';\n            case 'float':\n            case 'double':\n            case 'real':\n                return 'float';\n            case 'bool':\n            case 'boolean':\n                return 'boolean';\n            default:\n                return null;\n        }\n    }\n\n    protected function formatPropertyType(string $type, ?string $cast): ?string\n    {\n        if (! isset($cast)) {\n            $cast = $this->formatDatabaseType($type) ?? 'string';\n        }\n\n        switch ($cast) {\n            case 'integer':\n                return 'int';\n            case 'date':\n            case 'datetime':\n                return '\\Carbon\\Carbon';\n            case 'json':\n                return 'array';\n        }\n\n        if (Str::startsWith($cast, 'decimal')) {\n            // If cast is decimal, @property is changed to string\n            return 'string';\n        }\n\n        return $cast;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting a message synchronously using NATS\nDESCRIPTION: This PHP code demonstrates how to send a request to a NATS subject and synchronously receive the response using the `requestSync` method. It retrieves the message body from the response and returns it in a successful response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nats.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Nats\\Driver\\DriverInterface;\nuse Hyperf\\Nats\\Message;\n\n#[AutoController(prefix: \"nats\")]\nclass NatsController extends AbstractController\n{\n    #[Inject]\n    protected DriverInterface $nats;\n\n    public function sync()\n    {\n        /** @var Message $message */\n        $message = $this->nats->requestSync('hyperf.reply', [\n            'id' => 'limx',\n        ]);\n\n        return $this->response->success($message->getBody());\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Starting Supervisor with Configuration File\nDESCRIPTION: This snippet starts the Supervisor daemon using a specified configuration file. The `-c` flag specifies the path to the configuration file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/supervisor.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupervisord -c /etc/supervisord.d/supervisord.conf\n```\n\n----------------------------------------\n\nTITLE: DemoLogic Class with Dependency Injection\nDESCRIPTION: This snippet defines a `DemoLogic` class that depends on a `DemoApi` class, injected via constructor.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/testing.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Logic;\n\nuse App\\Api\\DemoApi;\n\nclass DemoLogic\n{\n    private DemoApi $demoApi;\n\n    public function __construct(DemoApi $demoApi)\n    {\n       $this->demoApi = $demoApi;\n    }\n\n    public function test()\n    {\n        $result = $this->demoApi->test();\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Multiple Handlers with References - PHP\nDESCRIPTION: This snippet shows another way to configure multiple handlers, referencing them by name. It defines two handlers, `single` and `daily`, each with its own configuration, and then uses these names in the `default` log group. This allows for more modular and reusable handler configurations. Handler `single` uses `LineFormatter` to write INFO logs to `hyperf.log`, while `daily` uses `JsonFormatter` to write INFO logs to `hyperf-debug.log`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/logger.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Monolog\\Handler;\nuse Monolog\\Formatter;\nuse Monolog\\Level;\n\nreturn [\n    'default' => [\n        'handlers' => ['single', 'daily'],\n    ],\n\n    'single' => [\n        'handler' => [\n            'class' => Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => BASE_PATH . '/runtime/logs/hyperf.log',\n                'level' => Level::Info,\n            ],\n        ],\n        'formatter' => [\n            'class' => Formatter\\LineFormatter::class,\n            'constructor' => [\n                'format' => null,\n                'dateFormat' => null,\n                'allowInlineLineBreaks' => true,\n            ],\n        ],\n    ],\n\n    'daily' => [\n        'handler' => [\n            'class' => Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => BASE_PATH . '/runtime/logs/hyperf-debug.log',\n                'level' => Level::Info,\n            ],\n        ],\n        'formatter' => [\n            'class' => Formatter\\JsonFormatter::class,\n            'constructor' => [\n                'batchMode' => Formatter\\JsonFormatter::BATCH_MODE_JSON,\n                'appendNewline' => true,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: DemoLogic with Inject Annotation\nDESCRIPTION: This snippet defines the `DemoLogic` class that uses the `#[Inject]` attribute for dependency injection of `DemoApi`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/testing.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Logic;\n\nuse App\\Api\\DemoApi;\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass DemoLogic\n{\n    #[Inject]\n    private DemoApi $demoApi;\n\n    public function test()\n    {\n        $result = $this->demoApi->test();\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Autoloaded Configuration Example\nDESCRIPTION: Demonstrates how to define a configuration in an autoloaded file (`config/autoload/client.php`). The configuration is accessed using the file name as the first key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'request' => [\n        'timeout' => 10,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: transIn API Endpoint Implementation\nDESCRIPTION: This snippet illustrates the implementation of the `transIn` API endpoint using the Hyperf framework, specifically designed to simulate a distributed system's transactional operation. It extracts the 'amount' parameter from the request and uses the `xa->localTransaction` method to encapsulate the database update within an XA local transaction, using the provided `DBTransactionInterface` to execute the SQL query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/distributed-transaction.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n    #[RequestMapping(methods: [\"GET\", \"POST\", \"PUT\"], path: 'api/transIn')]\n    public function transIn(RequestInterface $request): array\n    {\n        $content = $request->post('amount');\n        $amount = $content['amount'] ?? 50;\n        // 模拟分布式系统下transIn方法\n        $this->xa->localTransaction(function (DBTransactionInterface $dbTransaction) use ($amount) {\n            // 请使用 DBTransactionInterface 处理本地 Mysql 事物\n            $dbTransaction->xaExecute('UPDATE `order` set `amount` = `amount` + ? where id = 1', [$amount]);\n        });\n\n        return ['status' => 0, 'message' => 'ok'];\n    }\n```\n\n----------------------------------------\n\nTITLE: Reloading Failed/Timeout Messages\nDESCRIPTION: This command reloads all failed or timeout messages from a specific channel (e.g., failed, timeout) back into the waiting queue for reprocessing. {queue_name} specifies the configuration to use and {channel_name} the specific queue.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php queue:reload {queue_name} -Q {channel_name}\n```\n\n----------------------------------------\n\nTITLE: Adding Searchable Trait to Model\nDESCRIPTION: This code snippet demonstrates how to add the `Hyperf\\Scout\\Searchable` trait to a model. This trait registers a model observer to keep the model synchronized with the search index.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\Database\\Model\\Model;\nuse Hyperf\\Scout\\Searchable;\n\nclass Post extends Model\n{\n    use Searchable;\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Conditional Validation using 'sometimes'\nDESCRIPTION: Demonstrates complex conditional validation using the `sometimes` method on the Validator instance.  It conditionally requires the 'reason' field based on the value of the 'games' field. The closure determines if the rule is applied.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_42\n\nLANGUAGE: PHP\nCODE:\n```\n$validator = $this->validationFactory->make($data, [\n    'email' => 'required|email',\n    'games' => 'required|numeric',\n]);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$v->sometimes('reason', 'required|max:500', function($input) {\n    return $input->games >= 100;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Property Annotation in PHP\nDESCRIPTION: This code snippet shows how to use a property annotation in PHP. The `#[PropertyAnnotation]` is placed above the property definition. This indicates that the `PropertyAnnotation` annotation is applied to the `$bar` property of the `Foo` class. The annotation can then be processed by a collector to modify or extend the property's behavior. This is a basic example of applying an annotation to a property.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/annotation.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Foo\n{\n    #[PropertyAnnotation]\n    private $bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Paginator via Composer\nDESCRIPTION: Installs the hyperf/paginator component using Composer, a dependency manager for PHP. This command adds the paginator component to your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/paginator.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/paginator\n```\n\n----------------------------------------\n\nTITLE: Creating WebSocket Controller\nDESCRIPTION: This PHP code defines a WebSocket controller that implements the OnMessageInterface, OnOpenInterface, and OnCloseInterface, handling WebSocket events such as message reception, connection opening, and connection closing. It uses Hyperf's WebSocket components for managing frames and responses.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/websocket-server.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnCloseInterface;\nuse Hyperf\\Contract\\OnMessageInterface;\nuse Hyperf\\Contract\\OnOpenInterface;\nuse Hyperf\\Engine\\WebSocket\\Frame;\nuse Hyperf\\Engine\\WebSocket\\Response;\nuse Hyperf\\WebSocketServer\\Constant\\Opcode;\nuse Swoole\\Server;\nuse Swoole\\WebSocket\\Server as WebSocketServer;\n\nclass WebSocketController implements OnMessageInterface, OnOpenInterface, OnCloseInterface\n{\n    public function onMessage($server, $frame): void\n    {\n        $response = (new Response($server))->init($frame);\n        if($frame->opcode == Opcode::PING) {\n            // 如果使用協程 Server，在判斷是 PING 幀後，需要手動處理，返回 PONG 幀。\n            // 異步風格 Server，可以直接通過 Swoole 配置處理，詳情請見 https://wiki.swoole.com/#/websocket_server?id=open_websocket_ping_frame\n            $response->push(new Frame(opcode: Opcode::PONG));\n            return;\n        }\n        $response->push(new Frame(payloadData: 'Recv: ' . $frame->data));\n    }\n\n    public function onClose($server, int $fd, int $reactorId): void\n    {\n        var_dump('closed');\n    }\n\n    public function onOpen($server, $request): void\n    {\n        $response = (new Response($server))->init($request);\n        $response->push(new Frame(payloadData: 'Opened'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ClassMap in annotations.php\nDESCRIPTION: Configures the ClassMap in the annotations.php file to replace the original Guzzle Client class with the modified version, achieving coroutine support. This requires defining the path to the modified Client class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/guzzle.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse GuzzleHttp\\Client;\n\nreturn [\n    'scan' => [\n        // ...\n        'class_map' => [\n            Client::class => BASE_PATH . '/class_map/GuzzleHttp/Client.php',\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Records from Index Using Query Builder\nDESCRIPTION: This code shows how to remove a collection of records from the search index using the model query builder and the `unsearchable` method. This allows you to efficiently delete a large number of records based on specific criteria.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n// 通过模型查询删除...\nApp\\Order::where('price', '>', 100)->unsearchable();\n\n// 通过模型关系删除...\n$user->orders()->unsearchable();\n\n// 通过集合删除...\n$orders->unsearchable();\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom RPC Client in Hyperf Jet\nDESCRIPTION: Defines a custom client class that extends Hyperf\\Jet\\AbstractClient.  This allows for a more structured and reusable way to interact with the RPC service, encapsulating the service details within the class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/jet.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Jet\\AbstractClient;\nuse Hyperf\\Jet\\Packer\\JsonEofPacker;\nuse Hyperf\\Jet\\Transporter\\StreamSocketTransporter;\nuse Hyperf\\Rpc\\Contract\\DataFormatterInterface;\nuse Hyperf\\Rpc\\Contract\\PackerInterface;\nuse Hyperf\\Rpc\\Contract\\PathGeneratorInterface;\nuse Hyperf\\Rpc\\Contract\\TransporterInterface;\n\n/**\n * @method int add(int $a, int $b);\n */\nclass CalculatorService extends AbstractClient\n{\n    // Define `CalculatorService` as the default value of $service.\n    public function __construct(\n        string $service = 'CalculatorService',\n        TransporterInterface $transporter = null,\n        PackerInterface $packer = null,\n        ?DataFormatterInterface $dataFormatter = null,\n        ?PathGeneratorInterface $pathGenerator = null\n    ) {\n        // Specific the transporter here, you could also retrieve the transporter from ProtocolManager or passing by constructor.\n        $transporter = new StreamSocketTransporter('127.0.0.1', 9503);\n        // Specific the packer here, you could also retrieve the packer from ProtocolManager or passing by constructor.\n        $packer = new JsonEofPacker();\n        parent::__construct($service, $transporter, $packer, $dataFormatter, $pathGenerator);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Foreign Key Constraints\nDESCRIPTION: This snippet shows how to disable foreign key constraints for a database connection, typically for performing operations like seeding or migrations where constraints might interfere.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\n// 停用外來鍵約束\nSchema::disableForeignKeyConstraints();\n```\n\n----------------------------------------\n\nTITLE: gRPC Server Method Implementation\nDESCRIPTION: This PHP code snippet implements the 'sayHello' method in the 'HiController'. It receives a 'HiUser' object, creates a 'HiReply' object, sets the message, sets the user, and returns the 'HiReply' object. This is the actual logic that handles the gRPC request.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/grpc.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function sayHello(HiUser $user) \n{\n    $message = new HiReply();\n    $message->setMessage(\"Hello World\");\n    $message->setUser($user);\n    return $message;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating Kafka Consumer via CLI - Bash\nDESCRIPTION: This command generates a Kafka consumer using the Hyperf CLI tool. It creates a consumer class named 'KafkaConsumer'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/kafka.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:kafka-consumer KafkaConsumer\n```\n\n----------------------------------------\n\nTITLE: Blade Layout Inheritance\nDESCRIPTION: This Blade template extends the 'layouts.app' layout and defines content for the 'title', 'sidebar', and 'content' sections. The `@extends` directive specifies the parent layout. `@parent` appends the content of the parent section.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<!-- Stored in storage/view/child.blade.php -->\n\n@extends('layouts.app')\n\n@section('title','Page Title')\n\n@section('sidebar')\n    @parent\n\n    <p>This is appended to the master sidebar.</p>\n@endsection\n\n@section('content')\n    <p>This is my body content.</p>\n@endsection\n```\n\n----------------------------------------\n\nTITLE: Install Fswatch on Mac\nDESCRIPTION: This command installs the fswatch utility on macOS using the Homebrew package manager.  Fswatch is a file system monitor that can be used as a driver for the Hyperf Watcher component for more efficient file change detection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/watcher.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install fswatch\n```\n\n----------------------------------------\n\nTITLE: Config Object Usage\nDESCRIPTION: This snippet shows how to access configuration values using the `Config` object, using the `get()` method with a key and a default value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @var \\Hyperf\\Contract\\ConfigInterface\n */\n// 通過 get(string $key, $default): mixed 方法獲取 $key 所對應的配置，$key 值可以通過 . 連接符定位到下級數組，$default 則是當對應的值不存在時返回的默認值\n$config->get($key，$default);\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Process in Hyperf Nano\nDESCRIPTION: Demonstrates how to add a custom process to a Hyperf Nano application. This example adds a process that logs a message to the console every second. Requires the `hyperf/nano` package and `Hyperf\\Contract\\StdoutLoggerInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nano.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addProcess(function(){\n    while (true) {\n        sleep(1);\n        $this->get(StdoutLoggerInterface::class)->info('Processing...');\n    }\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Config Center\nDESCRIPTION: This command installs the unified access layer for the Hyperf configuration center, providing a common interface for various configuration providers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config-center.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-center\n```\n\n----------------------------------------\n\nTITLE: Replace Placeholders - PHP\nDESCRIPTION: Shows how to replace placeholders in translated strings by passing an array as the second argument to the `__()` function. The keys of the array correspond to the placeholder names (without the `:`), and the values are the replacements.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/translation.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\necho __('messages.welcome', ['name' => 'Hyperf']);\n```\n\n----------------------------------------\n\nTITLE: Create Unique Index During Field Definition in Hyperf Schema\nDESCRIPTION: This code shows how to create a unique index on a column during its definition in a Hyperf schema. It adds a unique index to the 'name' column in the table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// 在定義時創建索引\n$table->string('name')->unique();\n// 在定義完字段之後創建索引\n$table->unique('name');\n```\n\n----------------------------------------\n\nTITLE: Create Unique Index After Field Definition in Hyperf Schema\nDESCRIPTION: This code shows how to create a unique index on a column after it has already been defined in a Hyperf schema. It adds a unique index to the 'name' column in the table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// 在定義時創建索引\n$table->string('name')->unique();\n// 在定義完字段之後創建索引\n$table->unique('name');\n```\n\n----------------------------------------\n\nTITLE: Using Task with Method Injection (Hyperf PHP)\nDESCRIPTION: This code demonstrates how to use the Task component by injecting a method.  It creates a `MethodTask` class with a `handle` method and uses `TaskExecutor` to execute it in a separate task worker.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/task.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Coroutine\\Coroutine;\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\Task\\TaskExecutor;\nuse Hyperf\\Task\\Task;\n\nclass MethodTask\n{\n    public function handle($cid)\n    {\n        return [\n            'worker.cid' => $cid,\n            // task_enable_coroutine 为 false 时返回 -1，反之 返回对应的协程 ID\n            'task.cid' => Coroutine::id(),\n        ];\n    }\n}\n\n$container = ApplicationContext::getContainer();\n$exec = $container->get(TaskExecutor::class);\n$result = $exec->execute(new Task([MethodTask::class, 'handle'], [Coroutine::id()]));\n\n```\n\n----------------------------------------\n\nTITLE: Model Observer Implementation PHP\nDESCRIPTION: This code defines a model observer for the `User` model using the `ModelListener` annotation in Hyperf. It implements the `creating` and `created` methods, which are triggered before and after a user model is created, respectively. This allows you to perform custom actions, such as data validation or logging, during these key model lifecycle events.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/event.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\ModelListener\\Annotation\\ModelListener;\nuse App\\Model\\User;\nuse Hyperf\\Database\\Model\\Events\\Creating;\nuse Hyperf\\Database\\Model\\Events\\Created;\n\n/**\n * 定義一個 UserObserver 觀察者，監聽 User 模型的事件.\n * 也可以監聽多個模型，只需要在 models 屬性中傳入多個模型即可\n * 需要注意，此類將會被自動註冊到容器中成為單例\n */\n#[ModelListener(models: [ User::class ])]\nclass UserObserver\n{\n    public function creating(Creating $event)\n    {\n        $user = $event->getModel();\n        // 建立使用者時觸發\n    }\n    \n    public function created(Created $event)\n    {\n        $user = $event->getModel();\n        // 使用者建立完成後觸發\n    }\n    \n    //... 省略其他事件\n}\n\n```\n\n----------------------------------------\n\nTITLE: Context Coroutine Class (Copy Context) PHP\nDESCRIPTION: This snippet defines a custom `Coroutine` class that copies the context from the parent coroutine to the newly created coroutine. Specifically, it copies the `REQUEST_ID` and `ServerRequestInterface` contexts. This is used to maintain request-specific information across coroutines. The class handles potential exceptions and logs warnings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/annotation.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n *\n * @link     https://www.hyperf.io\n * @document https://hyperf.wiki\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\n\nnamespace App\\Kernel\\Context;\n\nuse App\\Kernel\\Log\\AppendRequestIdProcessor;\nuse Hyperf\\Context\\Context;\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Engine\\Coroutine as Co;\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Log\\LoggerInterface;\nuse Throwable;\n\nclass Coroutine\n{\n    protected LoggerInterface $logger;\n\n    public function __construct(protected ContainerInterface $container)\n    {\n        $this->logger = $container->get(StdoutLoggerInterface::class);\n    }\n\n    /**\n     * @return int Returns the coroutine ID of the coroutine just created.\n     *             Returns -1 when coroutine create failed.\n     */\n    public function create(callable $callable): int\n    {\n        $id = Co::id();\n        $coroutine = Co::create(function () use ($callable, $id) {\n            try {\n                // Shouldn't copy all contexts to avoid socket already been bound to another coroutine.\n                Context::copy($id, [\n                    AppendRequestIdProcessor::REQUEST_ID,\n                    ServerRequestInterface::class,\n                ]);\n                $callable();\n            } catch (Throwable $throwable) {\n                $this->logger->warning((string) $throwable);\n            }\n        });\n\n        try {\n            return $coroutine->getId();\n        } catch (Throwable $throwable) {\n            $this->logger->warning((string) $throwable);\n            return -1;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chunking Results - PHP\nDESCRIPTION: Demonstrates how to process large datasets in smaller chunks using the `chunk()` method.  This method retrieves a specified number of records at a time and passes them to a closure for processing.  The first argument is the chunk size, and the second is a closure that receives the chunk of results. Requires the `Hyperf\\DbConnection\\Db` facade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\nDb::table('user')->orderBy('id')->chunk(100, function ($users) {\n    foreach ($users as $user) {\n        //\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing Hyperf Signal Configuration\nDESCRIPTION: This command publishes the default configuration file for the `hyperf/signal` component to your project. This allows you to customize the signal handling behavior of your application by modifying the published configuration file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/signal.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/signal\n```\n\n----------------------------------------\n\nTITLE: Using Cacheable Annotation with custom value\nDESCRIPTION: This example shows how to configure custom cache key using the `value` attribute within the `Cacheable` annotation. This allows for a more dynamic cache key generation based on method parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/cache.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service\\Cache;\n\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass DemoService\n{\n\n    #[Cacheable(prefix: \"cache\", value: \"_#{id}\", listener: \"user-update\")]\n    public function getCache(int $id)\n    {\n        return $id . '_' . uniqid();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Property using 'when' with Closure (Hyperf, PHP)\nDESCRIPTION: Shows the `when` method with a closure. The closure is only executed if the condition `Auth::user()->isAdmin()` is true, and its return value is used as the value for the `secret` key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'secret' => $this->when(Auth::user()->isAdmin(), function () {\n                return 'secret-value';\n            }),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Set Temporary Locale\nDESCRIPTION: This code demonstrates how to set the locale temporarily using the `TranslatorInterface`. The `setLocale` method allows changing the language for the current request or coroutine scope.  This injection allows you to retrieve and use the translator service.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/translation.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Contract\\TranslatorInterface;\n\nclass FooController\n{\n    #[Inject]\n    private TranslatorInterface $translator;\n    \n    public function index()\n    {\n        // 只在當前請求或協程生命週期有效\n        $this->translator->setLocale('zh_CN');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Access ETCD Client via DI\nDESCRIPTION: This PHP code demonstrates how to retrieve the ETCD client instance from the Hyperf container using dependency injection. It uses the `ApplicationContext` to get the container and then retrieves the `KVInterface` implementation, allowing interaction with the ETCD key-value store.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/etcd.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\Etcd\\KVInterface;\n\n$client = ApplicationContext::getContainer()->get(KVInterface::class);\n```\n\n----------------------------------------\n\nTITLE: Generate a gRPC Resource Class\nDESCRIPTION: Generates a gRPC resource class using the `gen:resource` command with the `--grpc` flag. Requires setting the message class by overriding the `expect()` method in the resource.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:resource User --grpc\n```\n\n----------------------------------------\n\nTITLE: Redis Storage Configuration\nDESCRIPTION: Configures Redis as the storage adapter for Prometheus metrics.  This replaces the default memory storage. Defined in `config/autoload/dependencies.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    Prometheus\\Storage\\Adapter::class => Hyperf\\Metric\\Adapter\\Prometheus\\RedisStorageFactory::class,\n];\n```\n\n----------------------------------------\n\nTITLE: DemoLogic Class with Inject Annotation\nDESCRIPTION: This PHP code defines a `DemoLogic` class that depends on `DemoApi`. The `DemoApi` dependency is injected using the `#[Inject]` annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/testing.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Logic;\n\nuse App\\Api\\DemoApi;\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass DemoLogic\n{\n    #[Inject]\n    private DemoApi $demoApi;\n\n    public function test()\n    {\n        $result = $this->demoApi->test();\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inject Annotation PHP\nDESCRIPTION: Shows how to use the #[Inject] annotation to inject the UserService into the IndexController. Requires importing Hyperf\\Di\\Annotation\\Inject.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserService;\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass IndexController\n{\n\n    #[Inject]\n    private UserService $userService;\n    \n    public function index()\n    {\n        $id = 1;\n        // 直接使用\n        return $this->userService->getInfoById($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Code Analysis in Hyperf\nDESCRIPTION: This command performs static code analysis on the Hyperf project. It is used to identify potential issues and ensure code quality, especially after upgrading to a new version like Hyperf 3.0, which introduces stricter type hinting.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog-v3.0.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer analysis\n```\n\n----------------------------------------\n\nTITLE: Kafka Configuration\nDESCRIPTION: This PHP code block represents the default Kafka configuration file for the Hyperf framework. It specifies settings such as connect timeout, bootstrap servers, client ID, producer settings, and SASL/SSL configurations.  This configuration is located at `config/autoload/kafka.php`\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/kafka.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Kafka\\Constants\\KafkaStrategy;\n\nreturn [\n    'default' => [\n        'connect_timeout' => -1,\n        'send_timeout' => -1,\n        'recv_timeout' => -1,\n        'client_id' => '',\n        'max_write_attempts' => 3,\n        'bootstrap_servers' => '127.0.0.1:9092',\n        'acks' => 0,\n        'producer_id' => -1,\n        'producer_epoch' => -1,\n        'partition_leader_epoch' => -1,\n        'interval' => 0,\n        'session_timeout' => 60,\n        'rebalance_timeout' => 60,\n        'replica_id' => -1,\n        'rack_id' => '',\n        'group_retry' => 5,\n        'group_retry_sleep' => 1,\n        'group_heartbeat' => 3,\n        'offset_retry' => 5,\n        'auto_create_topic' => true,\n        'partition_assignment_strategy' => KafkaStrategy::RANGE_ASSIGNOR,\n        'sasl' => [],\n        'ssl' => [],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuration Reuse with PHP Variables\nDESCRIPTION: This code snippet demonstrates how to reuse the registry configuration for multiple service consumers using PHP variables. It defines a `$registry` variable containing the common configuration and uses it in the consumer configurations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/json-rpc.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$registry = [\n   'protocol' => 'consul',\n   'address' => 'http://127.0.0.1:8500',\n];\nreturn [\n    // The following FooService and BarService are only examples of multi-services, and they do not actually exist in the document examples\n    'consumers' => [\n        [\n            'name' => 'FooService',\n            'registry' => $registry,\n        ],\n        [\n            'name' => 'BarService',\n            'registry' => $registry,\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Config Center Unified Access Layer (Hyperf)\nDESCRIPTION: This command installs the unified access layer for configuration centers in Hyperf. This package provides a common interface for interacting with different configuration centers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config-center.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-center\n```\n\n----------------------------------------\n\nTITLE: Checking Coroutine Context Value Existence in Hyperf\nDESCRIPTION: Demonstrates checking if a value exists in the current coroutine context using the `Context::has()` method. The method returns `true` if the key exists and `false` otherwise.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/coroutine.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Context\\Context;\n\n// 從當前協程上下文中判斷 key 為 foo 的值是否存在\n$foo = Context::has('foo');\n```\n\n----------------------------------------\n\nTITLE: Installing S3 Adapter (Flysystem v2.0)\nDESCRIPTION: Installs the S3 adapter for Flysystem v2.0, along with the `hyperf/guzzle` package for coroutine support.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/filesystem.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"league/flysystem-aws-s3-v3:^2.0\"\ncomposer require hyperf/guzzle\n```\n\n----------------------------------------\n\nTITLE: Iterating Results from Collection - PHP\nDESCRIPTION: Illustrates how to iterate over the `Hyperf\\Collection\\Collection` returned by the `get()` method to access data from each element. Each element is a `stdClass` object, so you can access the data using object properties (e.g., `$user->name`).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Interface with Annotation\nDESCRIPTION: Injects the UserServiceInterface into the IndexController using annotation injection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserServiceInterface;\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass IndexController\n{\n    #[Inject]\n    private UserServiceInterface $userService;\n    \n    public function index()\n    {\n        $id = 1;\n        // 直接使用\n        return $this->userService->getInfoById($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DAG Task Orchestration Example in PHP\nDESCRIPTION: This example demonstrates how to construct and execute a DAG using the hyperf/dag library. It creates a DAG with multiple vertices (tasks) and edges (dependencies), then runs the DAG in a coroutine environment. Each task sleeps for 1 second and prints a letter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/dag/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$dag = new \\Hyperf\\Dag\\Dag();\n$a = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"A\\n\";});\n$b = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"B\\n\";});\n$c = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"C\\n\";});\n$d = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"D\\n\";});\n$e = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"E\\n\";});\n$f = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"F\\n\";});\n$g = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"G\\n\";});\n$h = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"H\\n\";});\n$i = \\Hyperf\\Dag\\Vertex::make(function() {sleep(1); echo \"I\\n\";});\n$dag->addVertex($a)\n    ->addVertex($b)\n    ->addVertex($c)\n    ->addVertex($d)\n    ->addVertex($e)\n    ->addVertex($f)\n    ->addVertex($g)\n    ->addVertex($h)\n    ->addVertex($i)\n    ->addEdge($a, $b)\n    ->addEdge($a, $c)\n    ->addEdge($a, $d)\n    ->addEdge($b, $h)\n    ->addEdge($b, $e)\n    ->addEdge($b, $f)\n    ->addEdge($c, $f)\n    ->addEdge($c, $g)\n    ->addEdge($d, $g)\n    ->addEdge($h, $i)\n    ->addEdge($e, $i)\n    ->addEdge($f, $i)\n    ->addEdge($g, $i);\n    \n// 需要在协程环境下执行\n$dag->run()\n```\n\n----------------------------------------\n\nTITLE: Publishing Kafka Configuration\nDESCRIPTION: This command publishes the default Kafka configuration file (kafka.php) to the config/autoload directory of your Hyperf project if the file does not already exist. This allows you to customize the Kafka client settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/kafka.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/kafka\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Cache\nDESCRIPTION: This command installs the hyperf/cache component using Composer, which is the dependency manager for PHP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/cache.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/cache\n```\n\n----------------------------------------\n\nTITLE: Language File Example\nDESCRIPTION: This example shows the structure of a language file in Hyperf.  It is a PHP file that returns an associative array where keys are strings and values are the translated text.  This example shows an English language file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/translation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// storage/languages/en/messages.php\n\nreturn [\n    'welcome' => 'Welcome to our application',\n];\n```\n\n----------------------------------------\n\nTITLE: Delete Session Data by Key(s)\nDESCRIPTION: Deletes one or more values from the session using their keys. Accepts either a single key (string) or an array of keys to delete multiple values at once.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/session.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$this->session->forget('foo');\n$this->session->forget(['foo', 'bar']);\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Error Message (en) - PHP\nDESCRIPTION: This snippet shows how to define a custom error message for the `foo` validation rule in the English language file. This message will be displayed when the `foo` validation rule fails.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_51\n\nLANGUAGE: PHP\nCODE:\n```\n    'foo' => 'The :attribute must be foo',\n```\n\n----------------------------------------\n\nTITLE: Where Exists Clause - PHP\nDESCRIPTION: Illustrates how to use a `whereExists` clause to filter records based on the existence of related records in another table.  The method accepts a closure that defines the subquery for the `exists` condition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->whereExists(function ($query) {\n    $query->select(Db::raw(1))\n            ->from('orders')\n            ->whereRaw('orders.user_id = users.id');\n})\n->get();\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Consul Service Governance Component\nDESCRIPTION: This shell command installs the `hyperf/service-governance-consul` component using composer. It's required to add this component as the consul adapter has been removed from the core service-governance component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.2.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"hyperf/service-governance-consul:~2.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-Processing Middleware in Hyperf\nDESCRIPTION: This snippet shows how to implement a middleware in Hyperf with both pre- and post-processing logic. The `process` method executes pre-processing code before calling the handler and post-processing code within a `finally` block after the handler's execution, ensuring the post-processing code always runs, even if exceptions occur during handler execution.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/middleware/middleware.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Middleware;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass OpenApiMiddleware implements MiddlewareInterface\n{\n    public function __construct(protected ContainerInterface $container)\n    {\n    }\n\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // TODO: 前置操作\n        try{\n            $result = $handler->handle($request);\n        } finally {\n            // TODO: 後置操作\n        }\n        return $result;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example Dockerfile Configuration with App Label\nDESCRIPTION: This Dockerfile configures the image with a label 'app.name' to specify the application name for log filtering by Aliyun Log Service. This label is essential for identifying the source of logs within the Aliyun Log Service console and configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/aliyun-logger.md#_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Default Dockerfile\n\nFROM hyperf/hyperf:7.4-alpine-v3.11-swoole\nLABEL maintainer=\"Hyperf Developers <group@hyperf.io>\" version=\"1.0\" license=\"MIT\" app.name=\"hyperf-demo-api\"\n\n# 其它内容省略\n```\n\n----------------------------------------\n\nTITLE: Updating Hyperf dependencies with Composer\nDESCRIPTION: This command updates all Hyperf dependencies to the latest compatible versions as defined in your composer.json file. It is the recommended way to upgrade to a new z version.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/versions.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update hyperf\n```\n\n----------------------------------------\n\nTITLE: Generating a gRPC Resource in Hyperf\nDESCRIPTION: Generates a gRPC resource class using the 'gen:resource' command with the '--grpc' flag. This creates a resource that can be used to transform data for gRPC responses.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:resource User --grpc\n```\n\n----------------------------------------\n\nTITLE: Getting ETCD Client Instance\nDESCRIPTION: This PHP code demonstrates how to retrieve an instance of the ETCD KVInterface from the Hyperf application context. It uses the `ApplicationContext` to access the container and retrieve the KVInterface binding, allowing for interaction with the ETCD server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/etcd.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\Etcd\\KVInterface;\n\n$client = ApplicationContext::getContainer()->get(KVInterface::class);\n```\n\n----------------------------------------\n\nTITLE: Replace Placeholders in Translation\nDESCRIPTION: Replaces placeholders in a translated string using the second parameter of the `__()` function. This allows you to dynamically insert values into the translated string at runtime.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/translation.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\necho __('messages.welcome', ['name' => 'Hyperf']);\n```\n\n----------------------------------------\n\nTITLE: Rename Column in Hyperf Schema\nDESCRIPTION: This snippet demonstrates how to rename a column in a Hyperf database schema. It renames the 'from' column to 'to' in the 'users' table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nSchema::table('users', function (Blueprint $table) {\n    // 將字段從 from 重命名為 to\n    $table->renameColumn('from', 'to')->change();\n});\n```\n\n----------------------------------------\n\nTITLE: Get Total Item Count (LengthAwarePaginator)\nDESCRIPTION: This code highlights that `Hyperf\\Paginator\\Paginator` does not have a `total()` method.  To get the total number of items, you need to use `Hyperf\\Paginator\\LengthAwarePaginator`. The example shows the basic syntax if you were using `LengthAwarePaginator`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/paginator.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$total = $paginator->total();\n```\n\n----------------------------------------\n\nTITLE: Using WebSocket Sender from HTTP Service - PHP\nDESCRIPTION: This code demonstrates using `Hyperf\\WebSocketServer\\Sender` from an HTTP controller to send messages and disconnect WebSocket connections. The `close` method disconnects the client after a delay, and the `send` method pushes a message to the specified client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/websocket-server.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\WebSocketServer\\Sender;\nuse function Hyperf\\Coroutine\\go;\n\n#[AutoController]\nclass ServerController\n{\n    #[Inject]\n    protected Sender $sender;\n\n    public function close(int $fd)\n    {\n        go(function () use ($fd) {\n            sleep(1);\n            $this->sender->disconnect($fd);\n        });\n\n        return '';\n    }\n\n    public function send(int $fd)\n    {\n        $this->sender->push($fd, 'Hello World.');\n\n        return '';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Form Request Class\nDESCRIPTION: Creates a new FormRequest class using the gen:request command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:request FooRequest\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Command to Hyperf Nano\nDESCRIPTION: This example shows how to add a custom command to a Hyperf Nano application. It demonstrates using the StdoutLoggerInterface to output information to the console.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nano.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addCommand('echo', function(){\n    $this->get(StdoutLoggerInterface::class)->info('A new command called echo!');\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Custom Process with Asynchronous IO and Timer\nDESCRIPTION: This snippet demonstrates how to use asynchronous IO within a custom process using Swoole's Timer. This example shows how to execute a function periodically using `Timer::tick` and then keeps the process alive using an infinite `while` loop.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/process.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\nuse Hyperf\\Process\\Annotation\\Process;\nuse Swoole\\Timer;\n\n#[Process(name: \"demo_process\")]\nclass DemoProcess extends AbstractProcess\n{\n    public function handle(): void\n    {\n        Timer::tick(1000, function(){\n            var_dump(1);\n            // Do something...\n        });\n\n        while (true) {\n            sleep(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf RPC Server Component\nDESCRIPTION: Installs the hyperf/rpc-server component using composer. This component is needed to implement JSON RPC server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/json-rpc.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/rpc-server\n```\n\n----------------------------------------\n\nTITLE: Add RequestTraceListener to Hyperf Listeners\nDESCRIPTION: This PHP code snippet adds the `Hyperf\\Tracer\\Listener\\RequestTraceListener::class` to the list of listeners in Hyperf. This listener is responsible for capturing and processing tracing information for each request lifecycle event.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tracer.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    \\Hyperf\\Tracer\\Listener\\RequestTraceListener::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Standalone Process Configuration\nDESCRIPTION: Determines whether to use a standalone process for metric collection and reporting. Enabling this is recommended. The value is obtained from the `TELEMETRY_USE_STANDALONE_PROCESS` environment variable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'use_standalone_process' => env('TELEMETRY_USE_STANDALONE_PROCESS', true),\n```\n\n----------------------------------------\n\nTITLE: Running Phar Package\nDESCRIPTION: This command executes a previously built Phar package.  It invokes the PHP interpreter to execute the Phar archive, starting the application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/phar.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nphp your_project.phar start\n```\n\n----------------------------------------\n\nTITLE: Getting a Single Row - PHP\nDESCRIPTION: Demonstrates how to retrieve a single row from a database table using the `first()` method. This method automatically adds `LIMIT 1` to the SQL query. Requires the `Hyperf\\DbConnection\\Db` facade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$row = Db::table('user')->first(); // sql 會自動加上 limit 1\nvar_dump($row);\n```\n\n----------------------------------------\n\nTITLE: Configuring the Logger in config/autoload/logger.php\nDESCRIPTION: This configuration file defines the default logger settings, including the handler class (StreamHandler), stream location, log level, formatter class (LineFormatter), format, date format, and allowance for inline line breaks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/logger.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'handler' => [\n            'class' => \\Monolog\\Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => BASE_PATH . '/runtime/logs/hyperf.log',\n                'level' => \\Monolog\\Level::Debug,\n            ],\n        ],\n        'formatter' => [\n            'class' => \\Monolog\\Formatter\\LineFormatter::class,\n            'constructor' => [\n                'format' => null,\n                'dateFormat' => null,\n                'allowInlineLineBreaks' => true,\n            ]\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuration Generation with Loops in Hyperf\nDESCRIPTION: This snippet shows how to dynamically generate consumer configurations using PHP loops. It iterates through a list of services and creates a consumer configuration for each service, including the 'name', 'service', and 'registry' keys, using a consistent registry configuration. This method can be used for dynamic service discovery.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/json-rpc.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    // 此處省略了其它同層級的配置\n    'consumers' => value(function () {\n        $consumers = [];\n        // 這裏示例自動創建代理消費者類的配置形式，顧存在 name 和 service 兩個配置項，這裏的做法不是唯一的，僅説明可以通過 PHP 代碼來生成配置\n        // 下面的 FooServiceInterface 和 BarServiceInterface 僅示例多服務，並不是在文檔示例中真實存在的\n        $services = [\n            'FooService' => App\\JsonRpc\\FooServiceInterface::class,\n            'BarService' => App\\JsonRpc\\BarServiceInterface::class,\n        ];\n        foreach ($services as $name => $interface) {\n            $consumers[] = [\n                'name' => $name,\n                'service' => $interface,\n                'registry' => [\n                   'protocol' => 'consul',\n                   'address' => 'http://127.0.0.1:8500',\n                ]\n            ];\n        }\n        return $consumers;\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Generate AMQP Delay Producer (Bash)\nDESCRIPTION: Generates an AMQP producer class using the Hyperf CLI tool. This command creates a skeleton class that can be customized to send delayed messages to a specific exchange and routing key.  Requires hyperf cli to be installed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:amqp-producer DelayDirectProducer\n```\n\n----------------------------------------\n\nTITLE: Create Scene Request\nDESCRIPTION: Creates a SceneRequest class to define different validation rules based on the scene. Defines the scenes array and the rules method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Request;\n\nuse Hyperf\\Validation\\Request\\FormRequest;\n\nclass SceneRequest extends FormRequest\n{\n    protected array $scenes = [\n        'foo' => ['username'],\n        'bar' => ['username', 'password'],\n    ];\n\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     */\n    public function rules(): array\n    {\n        return [\n            'username' => 'required',\n            'gender' => 'required',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Coroutine Server Stop Handler\nDESCRIPTION: This code defines a signal handler specifically for coroutine-style servers. It listens for SIGTERM and SIGINT signals on the WORKER process and gracefully shuts down the server by iterating through registered servers and calling their `shutdown()` methods.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/signal.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Kernel\\Signal;\n\nuse Hyperf\\Contract\\ConfigInterface;\nuse Hyperf\\Process\\ProcessManager;\nuse Hyperf\\Server\\ServerManager;\nuse Hyperf\\Signal\\SignalHandlerInterface;\nuse Psr\\Container\\ContainerInterface;\n\nclass CoroutineServerStopHandler implements SignalHandlerInterface\n{\n\n    protected ContainerInterface $container;\n\n    protected ConfigInterface $config;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n        $this->config = $container->get(ConfigInterface::class);\n    }\n\n    public function listen(): array\n    {\n        // 協程風格只會存在一個 Worker 進程，故這裏只需要監聽 WORKER 即可 \n        return [\n            [self::WORKER, SIGTERM],\n            [self::WORKER, SIGINT],\n        ];\n    }\n\n    public function handle(int $signal): void\n    {\n        ProcessManager::setRunning(false);\n\n        foreach (ServerManager::list() as [$type, $server]) {\n            // 循環關閉開啓的服務\n            $server->shutdown();\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Regex Validation in Hyperf\nDESCRIPTION: This snippet demonstrates how to use the `regex` validation rule in Hyperf. It validates a field against a regular expression pattern. Note that the rule must be placed inside an array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n 'email' => 'regex:/^.+@.+$/i'\n```\n\n----------------------------------------\n\nTITLE: Hyperf XA Local Transaction for transOut\nDESCRIPTION: This method mirrors the `transIn` operation but simulates a transOut scenario. It decrements the 'amount' field in the 'order' table (id=2) within a local XA transaction managed by `$xa->localTransaction`. Like `transIn`, it retrieves the amount from the request and uses `DBTransactionInterface` for database interaction.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/distributed-transaction.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Grpc\\GrpcClient;\nuse DtmClient\\DbTransaction\\DBTransactionInterface;\nuse DtmClient\\TransContext;\nuse DtmClient\\XA;\nuse Hyperf\\Contract\\ConfigInterface;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\GetMapping;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\n\n#[Controller(prefix: '/xa')]\nclass XAController\n{\n\n    private GrpcClient $grpcClient;\n\n    protected string $serviceUri = 'http://127.0.0.1:9502';\n\n    public function __construct(\n        private XA $xa,\n        protected ConfigInterface $config,\n    ) {\n        $server = $this->config->get('dtm.server', '127.0.0.1');\n        $port = $this->config->get('dtm.port.grpc', 36790);\n        $hostname = $server . ':' . $port;\n        $this->grpcClient = new GrpcClient($hostname);\n    }\n\n\n    #[GetMapping(path: 'successCase')]\n    public function successCase(): string\n    {\n        $payload = ['amount' => 50];\n        // 開啓Xa 全局事物\n        $gid = $this->xa->generateGid();\n        $this->xa->globalTransaction($gid, function () use ($payload) {\n            // 調用子事物接口\n            $respone = $this->xa->callBranch($this->serviceUri . '/xa/api/transIn', $payload);\n            // XA http模式下獲取子事物返回結構\n            /* @var ResponseInterface $respone */\n            $respone->getBody()->getContents();\n            // 調用子事物接口\n            $payload = ['amount' => 10];\n            $this->xa->callBranch($this->serviceUri . '/xa/api/transOut', $payload);\n        });\n        // 通過 TransContext::getGid() 獲得 全局事務ID 並返回\n        return TransContext::getGid();\n    }\n\n    #[RequestMapping(methods: [\"GET\", \"POST\", \"PUT\"], path: 'api/transIn')]\n    public function transIn(RequestInterface $request): array\n    {\n        $content = $request->post('amount');\n        $amount = $content['amount'] ?? 50;\n        // 模擬分佈式系統下transIn方法\n        $this->xa->localTransaction(function (DBTransactionInterface $dbTransaction) use ($amount) {\n            // 請使用 DBTransactionInterface 處理本地 Mysql 事物\n            $dbTransaction->xaExecute('UPDATE `order` set `amount` = `amount` + ? where id = 1', [$amount]);\n        });\n\n        return ['status' => 0, 'message' => 'ok'];\n    }\n\n    /**\n     * @param RequestInterface $request\n     * @return array\n     */\n    #[RequestMapping(methods: [\"GET\", \"POST\", \"PUT\"], path: 'api/transOut')]\n    public function transOut(RequestInterface $request): array\n    {\n        $content = $request->post('amount');\n        $amount = $content['amount'] ?? 10;\n        // 模擬分佈式系統下transOut方法\n        $this->xa->localTransaction(function (DBTransactionInterface $dbTransaction) use ($amount) {\n            // 請使用 DBTransactionInterface 處理本地 Mysql 事物\n            $dbTransaction->xaExecute('UPDATE `order` set `amount` = `amount` - ? where id = 2', [$amount]);\n        });\n\n        return ['status' => 0, 'message' => 'ok'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration Example\nDESCRIPTION: This PHP code snippet shows a complete Prometheus configuration within the `metric.php` file. It includes settings for the driver, mode (scrape or push), namespace, scrape host/port/path, and push host/port/interval.  It retrieves values from environment variables where possible, providing defaults.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Metric\\Adapter\\Prometheus\\Constants;\n\nreturn [\n    'default' => env('METRIC_DRIVER', 'prometheus'),\n    'use_standalone_process' => env('TELEMETRY_USE_STANDALONE_PROCESS', true),\n    'enable_default_metric' => env('TELEMETRY_ENABLE_DEFAULT_TELEMETRY', true),\n    'default_metric_interval' => env('DEFAULT_METRIC_INTERVAL', 5),\n    'metric' => [\n        'prometheus' => [\n            'driver' => Hyperf\\Metric\\Adapter\\Prometheus\\MetricFactory::class,\n            'mode' => Constants::SCRAPE_MODE,\n            'namespace' => env('APP_NAME', 'skeleton'),\n            'scrape_host' => env('PROMETHEUS_SCRAPE_HOST', '0.0.0.0'),\n            'scrape_port' => env('PROMETHEUS_SCRAPE_PORT', '9502'),\n            'scrape_path' => env('PROMETHEUS_SCRAPE_PATH', '/metrics'),\n            'push_host' => env('PROMETHEUS_PUSH_HOST', '0.0.0.0'),\n            'push_port' => env('PROMETHEUS_PUSH_PORT', '9091'),\n            'push_interval' => env('PROMETHEUS_PUSH_INTERVAL', 5),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Signal and Process Components\nDESCRIPTION: These shell commands install the `hyperf/signal` and `hyperf/process` components using Composer. These components are required for implementing safe shutdown mechanisms for asynchronous queue processes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_21\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/signal\ncomposer require hyperf/process\n```\n\n----------------------------------------\n\nTITLE: DemoLogic with Dependency Injection\nDESCRIPTION: Shows a `DemoLogic` class that depends on `DemoApi` and uses constructor injection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Logic;\n\nuse App\\Api\\DemoApi;\n\nclass DemoLogic\n{\n    private DemoApi $demoApi;\n\n    public function __construct(DemoApi $demoApi)\n    {\n       $this->demoApi = $demoApi;\n    }\n\n    public function test()\n    {\n        $result = $this->demoApi->test();\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf gRPC Client Component\nDESCRIPTION: This command installs the 'hyperf/grpc-client' component using Composer. This component provides the necessary functionality to make gRPC requests to a gRPC server from a Hyperf application. This command requires Composer to be installed and configured correctly.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/grpc.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/grpc-client\n```\n\n----------------------------------------\n\nTITLE: Shared Lock (Pessimistic) in Hyperf PHP\nDESCRIPTION: Applies a shared lock to the query, preventing other transactions from modifying the selected rows until the current transaction is committed. Filters the table by 'votes' greater than 100 before applying the lock.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->sharedLock()->get();\n```\n\n----------------------------------------\n\nTITLE: Preserving Collection Keys in a Resource\nDESCRIPTION: Demonstrates how to preserve the keys of a collection when returning a resource collection.  The `$preserveKeys` property is set to `true` to indicate that the collection keys should be retained.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * 指示是否应保留资源的集合键。\n     *\n     * @var bool\n     */\n    public $preserveKeys = true;\n\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Searchable Data (PHP)\nDESCRIPTION: Overrides the `toSearchableArray` method on a model to customize the data that is indexed. By default, Scout uses the `toArray` method to get the data. This allows you to modify the data before it's sent to Elasticsearch, excluding or modifying certain attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\Scout\\Searchable;\nuse Hyperf\\Database\\Model\\Model;\n\nclass Post extends Model\n{\n    use Searchable;\n\n    /**\n     * Get the indexable data array for the model.\n     *\n     * @return array\n     */\n    public function toSearchableArray()\n    {\n        $array = $this->toArray();\n\n        // Customize array...\n\n        return $array;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Columns from a Table\nDESCRIPTION: This snippet illustrates how to delete columns from a table using the `dropColumn` method in a Schema builder. It demonstrates dropping a single column ('name') and multiple columns ('name', 'age').\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nSchema::table('users', function (Blueprint $table) {\n    // 刪除 name 欄位\n    $table->dropColumn('name');\n    // 刪除多個欄位\n    $table->dropColumn(['name', 'age']);\n});\n```\n\n----------------------------------------\n\nTITLE: Drop Foreign Key Constraint in Hyperf Schema\nDESCRIPTION: This code shows how to drop a foreign key constraint by name in a Hyperf database schema.  The foreign key is named following the convention 'table_column_foreign'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$table->dropForeign('posts_user_id_foreign');\n```\n\n----------------------------------------\n\nTITLE: Execute Command with Parameter (Bash)\nDESCRIPTION: This command executes the `foo:hello` command with the `Hyperf` argument.  The PHP code above will then output 'Hello Hyperf' to the console.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php foo:hello Hyperf\n```\n\n----------------------------------------\n\nTITLE: Add Metadata when Constructing Resources - Hyperf - PHP\nDESCRIPTION: Illustrates how to add top-level metadata when constructing a resource instance in a controller using the `additional` method in Hyperf.  This allows adding metadata to the resource response directly from the controller.  The example adds a 'meta' section with key-value pair.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\UserCollection;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserCollection(User::all()->load('roles')))\n            ->additional(['meta' => [\n                'key' => 'value',\n            ]])->toResponse();    \n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sentinel Mode in PHP\nDESCRIPTION: This PHP code snippet demonstrates the configuration array for connecting to a Redis server in Sentinel mode within the Hyperf framework. It includes settings for enabling Sentinel, specifying the master name, listing Sentinel nodes, and providing authentication details.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/redis.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', null),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'timeout' => 30.0,\n        'reserved' => null,\n        'retry_interval' => 0,\n        'sentinel' => [\n            'enable' => (bool) env('REDIS_SENTINEL_ENABLE', false),\n            'master_name' => env('REDIS_MASTER_NAME', 'mymaster'),\n            'nodes' => explode(';', env('REDIS_SENTINEL_NODE', '')),\n            'persistent' => false,\n            'read_timeout' => 30.0,\n            'auth' =>  env('REDIS_SENTINEL_PASSWORD', ''),\n        ],\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: FailToExecute Listener - PHP\nDESCRIPTION: This code defines a listener for the `FailToExecute` event, which is triggered when a cron task fails to execute. The listener logs the name of the cron task and the error message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/crontab.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Crontab\\Event\\FailToExecute;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Psr\\Container\\ContainerInterface;\n\n#[Listener]\nclass FailToExecuteCrontabListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            FailToExecute::class,\n        ];\n    }\n\n    /**\n     * @param FailToExecute $event\n     */\n    public function process(object $event)\n    {\n        var_dump($event->crontab->getName());\n        var_dump($event->throwable->getMessage());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: whereBetween Statement - Hyperf PHP\nDESCRIPTION: Demonstrates the use of `whereBetween` method in Hyperf. It verifies that a field value falls within a specified range (inclusive). The method takes the field name and an array containing the start and end values of the range.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->whereBetween('votes', [1, 100])->get();\n```\n\n----------------------------------------\n\nTITLE: Annotate Controller for Event Distribution\nDESCRIPTION: This PHP code shows how to automatically distribute events based on method names within a controller.  By using the `@Event()` annotation on the controller class, all public methods in the WebSocketController are automatically registered as event handlers, with their method names becoming the event names.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/socketio-server/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\SocketIOServer\\Annotation\\SocketIONamespace;\nuse Hyperf\\SocketIOServer\\Annotation\\Event;\nuse Hyperf\\SocketIOServer\\BaseNamespace;\nuse Hyperf\\SocketIOServer\\Socket;\n\n/**\n * @SocketIONamespace(\"/\")\n * @Event()\n */\nclass WebSocketController extends BaseNamespace\n{\n    public function echo(Socket $socket, $data)\n    {\n        $socket->emit('event', $data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Enum Constant Class in Hyperf\nDESCRIPTION: This snippet shows how to generate an enum constant class using the `gen:constant` command provided by the Hyperf framework.  It provides a quick way to create an enumeration class, improving code organization.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/constants.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:constant ErrorCode --type enum\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting Records from the Search Index\nDESCRIPTION: Deletes multiple model records from the search index using the `unsearchable` method on a model query, relationship or a collection, without retrieving the model instances first. This is more efficient when you only need to remove the records from the index and not work with the model data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// Delete via model query...\n    App\\Order::where('price', '>', 100)->unsearchable();\n\n    // Delete via model relationship...\n    $user->orders()->unsearchable();\n\n    // Delete by Collection...\n    $orders->unsearchable();\n```\n\n----------------------------------------\n\nTITLE: Clear All Session Data\nDESCRIPTION: Clears all data stored in the current session using the `clear()` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/session.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$this->session->clear();\n```\n\n----------------------------------------\n\nTITLE: Reloading Model with fresh()\nDESCRIPTION: This snippet shows how to reload a model from the database using the `fresh()` method.  The fresh method retrieves a new instance of the model.  Existing model instances are not affected.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = User::query()->find(1);\n\n$freshUser = $user->fresh();\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Server - PHP\nDESCRIPTION: Configures a basic RPC server in Hyperf. It defines the server type, host, port, socket type, callbacks, and settings such as package length check, package length type, offset, and maximum package length. The key callback is `Hyperf\\RpcMultiplex\\TcpServer::class` for handling incoming requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/rpc-multiplex/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\nuse Hyperf\\Server\\Server;\n\nreturn [\n    'servers' => [\n        [\n            'name' => 'rpc',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9502,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_RECEIVE => [Hyperf\\RpcMultiplex\\TcpServer::class, 'onReceive'],\n            ],\n            'settings' => [\n                'open_length_check' => true,\n                'package_length_type' => 'N',\n                'package_length_offset' => 0,\n                'package_body_offset' => 4,\n                'package_max_length' => 1024 * 1024 * 2,\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Model Instance in Hyperf\nDESCRIPTION: The `delete` method can be called on a model instance to delete the corresponding record from the database. First, the model is retrieved using a query, and then the `delete` method is called on the retrieved instance. Ensure the model exists before calling delete.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$user = User::query()->find(1);\n\n$user->delete();\n\n```\n\n----------------------------------------\n\nTITLE: Group By and Having Statement - Hyperf PHP\nDESCRIPTION: Explains how to group results using `groupBy` and filter the grouped results using `having` in Hyperf. The `having` method is similar to the `where` method but operates on grouped results.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->groupBy('account_id')\n    ->having('account_id', '>', 100)\n    ->get();\n\n$users = Db::table('users')\n    ->groupBy('first_name', 'status')\n    ->having('account_id', '>', 100)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Supporting MySQL BIT Type\nDESCRIPTION: Provides the code for an event listener that allows Hyperf ORM to support the MySQL `BIT` data type. It registers a resolver for the 'mysql' connection that returns a custom `MySqlBitConnection` instance, enabling correct handling of BIT values. This requires creating a custom `MySqlBitConnection` class which extends the default `Connection`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Database\\Connection;\nuse Hyperf\\Database\\MySqlBitConnection;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\n\n#[Listener]\nclass SupportMySQLBitListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            BootApplication::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        Connection::resolverFor('mysql', static function ($connection, $database, $prefix, $config) {\n            return new MySqlBitConnection($connection, $database, $prefix, $config);\n        });\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Slot Usage in Component View (HTML)\nDESCRIPTION: This code shows how to use the `$slot` variable within a component's view to render content passed to the component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n    <!-- /storage/view/components/alert.blade.php -->\n\n    <div class=\"alert alert-danger\">\n        {{ $slot }}\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Request and Response Headers Handling (Hyperf < 3.1)\nDESCRIPTION: Illustrates how `withHeader` and `withHeaders` methods behaved in Hyperf versions prior to 3.1. The `withHeader` method replaces existing headers, while `withAddedHeader` appends to existing header values. `withHeaders` merges new headers with existing ones.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/3.1.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// v3.1 之前\n$request->withHeader('foo', 1)->withHeader('bar', 2); // ['foo' => [1], 'bar' => [2]]\n$request->withHeader('foo', 1)->withHeader('foo', 2); // ['foo' => [2]]\n$request->withAddedHeader('foo', 1)->withAddedHeader('foo', 2); // ['foo' => [1, 2]]\n\n$request->withHeaders(['foo' => 1])->withHeaders(['bar' => 2]); // ['foo' => [1], 'bar' => [2]]\n```\n\n----------------------------------------\n\nTITLE: Union Queries - PHP\nDESCRIPTION: This snippet demonstrates how to combine the results of two queries using the `union()` method. It first creates a query to select users with a null 'first_name', then combines it with another query that selects users with a null 'last_name'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$first = Db::table('users')->whereNull('first_name');\n\n$users = Db::table('users')\n    ->whereNull('last_name')\n    ->union($first)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Using Method Annotation in PHP\nDESCRIPTION: This code snippet shows how to use a method annotation in PHP. The `#[MethodAnnotation]` is placed above the method definition. This indicates that the `MethodAnnotation` annotation is applied to the `Foo::bar()` method. The annotation can then be processed by a collector to modify or extend the method's behavior. This is a basic example of applying an annotation to a method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/annotation.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Foo\n{\n    #[MethodAnnotation]\n    public function bar()\n    {\n        // some code\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating an RPC Call (Hyperf)\nDESCRIPTION: This code demonstrates how to initiate an RPC call using Hyperf's AMQP component.  It retrieves the `RpcClient` from the container, creates a `DynamicRpcMessage`, and calls the `call` method to send the message and retrieve the response from the consumer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Amqp\\Message\\DynamicRpcMessage;\nuse Hyperf\\Amqp\\RpcClient;\nuse Hyperf\\Context\\ApplicationContext;\n\n$rpcClient = ApplicationContext::getContainer()->get(RpcClient::class);\n// 在 DynamicRpcMessage 上设置与 Consumer 一致的 Exchange 和 RoutingKey\n$result = $rpcClient->call(new DynamicRpcMessage('hyperf', 'hyperf', ['message' => 'Hello Hyperf'])); \n\n// $result:\n// array(1) {\n//     [\"message\"]=>\n//     string(18) \"Reply:Hello Hyperf\"\n// }\n\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Record\nDESCRIPTION: This snippet shows how to update an existing record in the database by retrieving the model, modifying its attributes, and calling the `save()` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = User::query()->find(1);\n\n$user->name = 'Hi Hyperf';\n\n$user->save();\n\n```\n\n----------------------------------------\n\nTITLE: Calculate RPN Expression in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to calculate an RPN expression using the `Hyperf\\Rpn\\Calculator` class. It creates a new `Calculator` instance and uses the `calculate()` method to evaluate the RPN expression '5 1 2 + 4 * + 3 -'. The expected output is '14'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/rpn.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->calculate('5 1 2 + 4 * + 3 -', []); // '14'\n```\n\n----------------------------------------\n\nTITLE: AMQP Configuration\nDESCRIPTION: This PHP code provides an example configuration array for the AMQP component. It defines parameters such as host, port, user, password, vhost, concurrent limits, connection pool settings, and other connection parameters. Users who utilize AMQP should update their configuration based on this example.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.2.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'host' => env('AMQP_HOST', 'localhost'),\n        'port' => (int) env('AMQP_PORT', 5672),\n        'user' => env('AMQP_USER', 'guest'),\n        'password' => env('AMQP_PASSWORD', 'guest'),\n        'vhost' => env('AMQP_VHOST', '/'),\n        'concurrent' => [\n            'limit' => 1,\n        ],\n        'pool' => [\n            // 同時開啟的連線數\n            // 因為新版本連線是支援多路複用的，所以可以用極少的連線數達到很高的併發\n            'connections' => 2,\n        ],\n        'params' => [\n            'insist' => false,\n            'login_method' => 'AMQPLAIN',\n            'login_response' => null,\n            'locale' => 'en_US',\n            'connection_timeout' => 3,\n            'read_write_timeout' => 6,\n            'context' => null,\n            'keepalive' => true,\n            'heartbeat' => 3,\n            'channel_rpc_timeout' => 0.0,\n            'close_on_destruct' => false,\n            // 多路複用中閒置 Channel 的最大值，超過這個數量後，會關閉多餘的限制 Channel\n            'max_idle_channels' => 10,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a One-to-Many Polymorphic Relationship - Book Model\nDESCRIPTION: This code snippet defines a one-to-many polymorphic relationship for the Book model with the Image model, utilizing the morphMany method. This setup assumes that the images table has columns named imageable_id and imageable_type, allowing multiple images to be associated with one Book model.  The imageable string specifies the base name for the type and id columns in the images table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/relationship.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Book extends Model\n{\n    public function images()\n    {\n        return $this->morphMany(Image::class, 'imageable');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Get XML Payload from Request in Hyperf\nDESCRIPTION: This snippet shows how to retrieve the raw XML payload from the Hyperf request object. This is needed when handling WeChat payment callbacks, as EasyWechat expects the raw XML data.  It uses the `getBody()->getContents()` method of the request object to obtain the XML string.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/sdks/wechat.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$xml = $this->request->getBody()->getContents();\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC Dependencies for Nacos\nDESCRIPTION: These commands install the necessary dependencies for enabling gRPC bidirectional streaming with Nacos, improving real-time configuration updates.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config-center.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"hyperf/http2-client:3.1.*\"\ncomposer require \"hyperf/grpc:3.1.*\"\n```\n\n----------------------------------------\n\nTITLE: Resetting Migrations in Hyperf\nDESCRIPTION: This command rolls back all migrations that have been applied to the database. It effectively reverts the database schema to its initial state. Requires Hyperf framework and executable `bin/hyperf.php` script.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:reset\n```\n\n----------------------------------------\n\nTITLE: Deleting a Record from the Search Index\nDESCRIPTION: Deletes a model's record from the search index by deleting the model from the database. Scout automatically removes the record from Elasticsearch upon model deletion, even for soft-deleted models.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$order = App\\Order::find(1);\n\n    $order->delete();\n```\n\n----------------------------------------\n\nTITLE: Enable Crontab in Configuration\nDESCRIPTION: This configuration enables the Crontab functionality by setting the 'enable' option to `true` in the `config/autoload/crontab.php` file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/crontab.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // 是否開啓定時任務\n    'enable' => true,\n];\n```\n\n----------------------------------------\n\nTITLE: Environment-Based Logger Config\nDESCRIPTION: This code demonstrates how to configure different log formats based on the application environment (e.g., 'dev' vs. production).  It uses different Monolog formatters for each environment.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/logger.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/logger.php\n$appEnv = env('APP_ENV', 'dev');\nif ($appEnv == 'dev') {\n    $formatter = [\n        'class' => \\Monolog\\Formatter\\LineFormatter::class,\n        'constructor' => [\n            'format' => \"||%datetime%||%channel%||%level_name%||%message%||%context%||%extra%\\n\",\n            'allowInlineLineBreaks' => true,\n            'includeStacktraces' => true,\n        ],\n    ];\n} else {\n    $formatter = [\n        'class' => \\Monolog\\Formatter\\JsonFormatter::class,\n        'constructor' => [],\n    ];\n}\n\nreturn [\n    'default' => [\n        'handler' => [\n            'class' => \\Monolog\\Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => 'php://stdout',\n                'level' => \\Monolog\\Level::Info,\n            ],\n        ],\n        'formatter' => $formatter,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer to Use Local Hyperf Component\nDESCRIPTION: This JSON snippet demonstrates how to configure the composer.json file to use a local, unpublished Hyperf component.  It defines a 'path' repository pointing to the component's directory and adds the component as a required dependency. The component is referred to using its vendor/package name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/component-guide/create.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n     \"require\": {\n         \"your_component/your_component\": \"dev-master\"\n     },\n     \"repositories\": {\n         \"your_component\": {\n             \"type\": \"path\",\n             \"url\": \"/opt/your_component\"\n         }\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Qiniu Adapter (Flysystem v3.0)\nDESCRIPTION: Install the Qiniu adapter for Flysystem v3.0. This adapter provides support for storing files on Qiniu Cloud Storage. Requires overtrue/flysystem-qiniu.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/filesystem.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-qiniu:^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Resource Access\nDESCRIPTION: Configures static resource access in `config/autoload/server.php` to allow HTTP access to uploaded files.  Modify the `document_root` to point to the upload directory, typically the `public` directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/filesystem.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'settings' => [\n        ...\n        // 將 public 替換為上傳目錄\n        'document_root' => BASE_PATH . '/public',\n        'enable_static_handler' => true,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Configure pid_file in server.php\nDESCRIPTION: Modifies the `server.php` configuration to specify a writable directory for the pid file when running in Phar mode. This is necessary because the `runtime` directory within the Phar is not writable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/phar.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n     'settings' => [\n         'pid_file' => '/tmp/runtime/hyperf.pid',\n     ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a Task with Runner Interface in PHP\nDESCRIPTION: This snippet demonstrates how to define a task by implementing the \\Hyperf\\Dag\\Runner interface. The run() method performs the task's logic, and Vertex::of converts the class into a vertex for the DAG.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/dag/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nclass MyJob implements \\Hyperf\\Dag\\Runner {\n    public function run($results = []) {\n        return 'hello';\n    }\n}\n\n\\Hyperf\\Dag\\Vertex::of(new MyJob(), \"greeting\");\n```\n\n----------------------------------------\n\nTITLE: Installing Aliyun ACM Config Center Client (Hyperf)\nDESCRIPTION: This command installs the Aliyun ACM client for Hyperf, enabling the application to fetch configurations from Aliyun's Application Configuration Management service.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config-center.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-aliyun-acm\n```\n\n----------------------------------------\n\nTITLE: Rotate Log Files By Date Configuration\nDESCRIPTION: This configuration shows how to use Monolog's RotatingFileHandler to rotate log files by date. The handler is configured to write logs to a file and automatically rotate it based on the date, ensuring that log files don't grow indefinitely.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/logger.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'handler' => [\n            'class' => Monolog\\Handler\\RotatingFileHandler::class,\n            'constructor' => [\n                'filename' => BASE_PATH . '/runtime/logs/hyperf.log',\n                'level' => Monolog\\Level::Debug,\n            ],\n        ],\n        'formatter' => [\n            'class' => Monolog\\Formatter\\LineFormatter::class,\n            'constructor' => [\n                'format' => null,\n                'dateFormat' => null,\n                'allowInlineLineBreaks' => true,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Adjusting config/autoload/exceptions.php for Hyperf 2.0\nDESCRIPTION: This code snippet demonstrates adjusting the `config/autoload/exceptions.php` file for Hyperf 2.0.  It involves configuring `Hyperf\\HttpServer\\Exception\\Handler\\HttpExceptionHandler` to handle HTTP-related exceptions (404, 405), ensuring consistent exception handling and response formatting.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.0.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'handler' => [\n        'http' => [\n            Hyperf\\HttpServer\\Exception\\Handler\\HttpExceptionHandler::class,\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Install Jaeger Client via Composer\nDESCRIPTION: Installs the jonahgeorge/jaeger-client-php dependency, which is required if you want to use Jaeger for call link tracing.  This is necessary since Zipkin dependencies are installed by default with hyperf/tracer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tracer.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require jonahgeorge/jaeger-client-php\n```\n\n----------------------------------------\n\nTITLE: Publish Hyperf View Configuration (Bash)\nDESCRIPTION: This command publishes the default configuration file for the Hyperf View component to the config directory, allowing customization of view engine, mode, view path, and cache path.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/view\n```\n\n----------------------------------------\n\nTITLE: Generate Code using Hyperf Code Generator\nDESCRIPTION: This shell command uses the Hyperf code generator to convert Doctrine Annotations to PHP8 Attributes.  It requires the hyperf/code-generator package to be installed via composer. The `-D app` argument specifies that the code generation should be applied to the `app` directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/changelog/3.0.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp bin/hyperf.php code:generate -D app\n```\n\n----------------------------------------\n\nTITLE: Getting Session ID in Hyperf\nDESCRIPTION: Gets the current session ID using the `getId` method. The `getId` method returns a string representing the current session ID, which can be used for custom logic.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/session.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$sessionId = $this->session->getId();\n```\n\n----------------------------------------\n\nTITLE: Ordering Results Randomly with inRandomOrder - PHP\nDESCRIPTION: This snippet demonstrates how to randomly sort the results using the `inRandomOrder` method. It can be used to fetch a random user.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$randomUser = Db::table('users')->inRandomOrder()->first();\n```\n\n----------------------------------------\n\nTITLE: Installing Testing Dependencies - Composer\nDESCRIPTION: Installs the hyperf/testing and pestphp/pest packages as development dependencies using Composer. These packages provide utilities and frameworks for writing and running tests in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/testing.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/testing --dev\ncomposer require pestphp/pest --dev\n```\n\n----------------------------------------\n\nTITLE: Configure Default Metric Push Interval\nDESCRIPTION: This PHP snippet sets the default metric push interval in seconds. It defines how often metrics are collected and pushed to the configured backend.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n'default_metric_interval' => env('DEFAULT_METRIC_INTERVAL', 5),\n```\n\n----------------------------------------\n\nTITLE: Checking for Attribute Existence (HTML)\nDESCRIPTION: This example shows how to check if a specific attribute exists in the attribute bag using the `has()` method. This allows for conditional rendering based on the presence of an attribute.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n    @if($attributes->has(\"class\"))\n        <div class=\"{{ $attributes->get(\"class\") }}\">\n            <!-- 组件内容 -->\n        </div>\n    @endif\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf gRPC Client Component\nDESCRIPTION: This command installs the `hyperf/grpc-client` component using Composer. This component provides the necessary classes for making gRPC calls in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/grpc.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/grpc-client\n```\n\n----------------------------------------\n\nTITLE: Static Analysis for Hyperf\nDESCRIPTION: This command runs a static analysis tool to check for code issues and ensure compatibility after upgrading to Hyperf 3.0.  It helps identify potential problems caused by the increased type restrictions and other changes in the new version.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog/3.0.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer analysis\n```\n\n----------------------------------------\n\nTITLE: Define Validation Rules in Form Request\nDESCRIPTION: Defines the validation rules within the `rules` method of a FormRequest class.  This example specifies that the 'foo' field is required and has a maximum length of 255 characters, and the 'bar' field is also required.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n/**\n * 获取应用到请求的验证规则\n */\npublic function rules(): array\n{\n    return [\n        'foo' => 'required|max:255',\n        'bar' => 'required',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-Execution Middleware in Hyperf\nDESCRIPTION: This PHP snippet demonstrates how to create a post-execution middleware in Hyperf.  It utilizes a try-finally block to ensure the post-execution logic is always executed, regardless of whether the handler throws an exception. Dependency injection is used to access the ContainerInterface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/middleware/middleware.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Middleware;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass OpenApiMiddleware implements MiddlewareInterface\n{\n    public function __construct(protected ContainerInterface $container)\n    {\n    }\n\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // TODO: 前置操作\n        try{\n            $result = $handler->handle($request);\n        } finally {\n            // TODO: 后置操作\n        }\n        return $result;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Latest/Oldest Order By Statement - Hyperf PHP\nDESCRIPTION: Demonstrates how to sort by date using `latest` and `oldest` methods in Hyperf. These methods sort by the `created_at` column by default, but you can also specify a custom column.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$user = Db::table('users')->latest()->first();\n```\n\n----------------------------------------\n\nTITLE: Define JSON RPC HTTP Server\nDESCRIPTION: Defines a JSON RPC HTTP server in the server.php configuration file.  This server is configured to handle requests using the \\Hyperf\\JsonRpc\\HttpServer::class onRequest handler.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/json-rpc.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 這裏省略了該文件的其它配置\n    'servers' => [\n        [\n            'name' => 'jsonrpc-http',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9504,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [\\Hyperf\\JsonRpc\\HttpServer::class, 'onRequest'],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Help Text for a Command - PHP\nDESCRIPTION: Configure the help text for a command using the `setHelp` method within the `configure` method.  This help text is displayed when the `--help` option is used.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->setHelp('Hyperf 自定义命令演示');\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Memory Adapter (Flysystem v2.0)\nDESCRIPTION: Installs the memory adapter for Flysystem v2.0, enabling in-memory storage for testing purposes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/filesystem.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"league/flysystem-memory:^2.0\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Aliyun OSS iconv error in Alpine (v3.13)\nDESCRIPTION: This Dockerfile command installs `gnu-libiconv` and sets the `LD_PRELOAD` environment variable to resolve iconv errors when using the Aliyun OSS SDK in the `hyperf/hyperf:8.0-alpine-v3.13-swoole` image.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/questions.md#_snippet_9\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apk add --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/v3.13/community/gnu-libiconv=1.15-r3\nENV LD_PRELOAD /usr/lib/preloadable_libiconv.so php\n```\n\n----------------------------------------\n\nTITLE: Simulate HTTP Request with Custom Packer\nDESCRIPTION: Creates an instance of Hyperf\\Testing\\Client with a custom packer. The custom packer is an anonymous class implementing PackerInterface that simply returns the data it receives in both the pack and unpack methods. This is useful when the API returns a string directly, bypassing the default JsonPacker.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Testing\\Client;\nuse Hyperf\\Contract\\PackerInterface;\n\n$client = make(Client::class, [\n    'packer' => new class() implements PackerInterface {\n        public function pack($data): string\n        {\n            return $data;\n        }\n\n        public function unpack(string $data)\n        {\n            return $data;\n        }\n    },\n]);\n\n$result = $client->json('/user/0',[\n    'nickname' => 'Hyperf'\n]);\n```\n\n----------------------------------------\n\nTITLE: Querying JSON array with whereJsonContains in Hyperf\nDESCRIPTION: This snippet illustrates how to query a JSON array field for a specific value using `whereJsonContains` in Hyperf. It retrieves users where the 'options->languages' array contains 'en'.  This requires a JSON-supported database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereJsonContains('options->languages', 'en')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Drop Foreign Key Constraint\nDESCRIPTION: This snippet demonstrates how to drop a foreign key constraint using the `dropForeign()` method, specifying the constraint name. It removes a foreign key named 'posts_user_id_foreign'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\n$table->dropForeign('posts_user_id_foreign');\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML Entity Double Encoding\nDESCRIPTION: This PHP code demonstrates how to disable HTML entity double encoding in Blade views by listening to the BootApplication event and calling `Blade::withoutDoubleEncoding()`. This is useful when you want to prevent Blade from double-encoding HTML entities.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\nuse Hyperf\\ViewEngine\\Blade;\nuse Psr\\Container\\ContainerInterface;\n\n#[Listener]\nclass BladeWithoutDoubleEncodingListener implements ListenerInterface\n{\n    private ContainerInterface $container;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n    }\n\n    public function listen(): array\n    {\n        return [\n            BootApplication::class\n        ];\n    }\n\n    public function process(object $event)\n    {\n        Blade::withoutDoubleEncoding();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handle Plural Forms in Translation\nDESCRIPTION: Demonstrates how to handle plural forms in translation strings using the \"pipe\" character to separate singular and plural forms.  The `trans_choice` function is used to select the appropriate form based on a given amount.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/translation.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n'apples' => 'There is one apple|There are many apples',\n```\n\nLANGUAGE: php\nCODE:\n```\n'apples' => '{0} There are none|[1,19] There are some|[20,*] There are many',\n```\n\nLANGUAGE: php\nCODE:\n```\necho trans_choice('messages.apples', 10);\n```\n\n----------------------------------------\n\nTITLE: Pause Indexing (PHP)\nDESCRIPTION: Pauses the synchronization of model data to the search index for a batch of model operations.  The `withoutSyncingToSearch` method accepts a closure. All model operations within the closure will not be synced to the index.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nApp\\Order::withoutSyncingToSearch(function () {\n    // 執行模型動作...\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Logger via Composer\nDESCRIPTION: Installs the hyperf/logger component using Composer, a dependency manager for PHP. This command adds the logger component to your project, allowing you to use its logging functionalities.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/logger.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/logger\n```\n\n----------------------------------------\n\nTITLE: Scout Custom Engine Configuration\nDESCRIPTION: Shows an example of how to configure a custom search engine in the scout configuration file. It defines the driver class for the custom engine, alongside the default Elasticsearch engine.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'default' => 'mysql',\n    'engine' => [\n        'mysql' => [\n            'driver' => MySqlSearchEngine::class,\n        ],\n        'elasticsearch' => [\n            'driver' => \\Hyperf\\Scout\\Provider\\ElasticsearchProvider::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Annotation\nDESCRIPTION: This code snippet shows how to use the custom `Foo` annotation defined in the previous example. The annotation is applied to the `IndexController` class with specific values for the `bar` and `baz` parameters. The annotation data can then be accessed within the controller. This is an example of applying a custom annotation to a class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/annotation.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Annotation\\Foo;\n\n#[Foo(bar: [1, 2], baz: 3)]\nclass IndexController extends AbstractController\n{\n    // 利用註解資料\n}\n```\n\n----------------------------------------\n\nTITLE: Check if On First Page\nDESCRIPTION: Determines whether the current page is the first page. This enables the conditional disabling or hiding of 'Previous' buttons.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/paginator.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$onFirstPage = $paginator->onFirstPage();\n```\n\n----------------------------------------\n\nTITLE: Refreshing Migrations (Bash)\nDESCRIPTION: This command rolls back all migrations and then runs them again.  It's a combination of `migrate:reset` and `migrate`, useful for quickly rebuilding the database schema.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:refresh\n\n// 重建数据库结构并执行数据填充\nphp bin/hyperf.php migrate:refresh --seed\n```\n\n----------------------------------------\n\nTITLE: Getting Route Parameters via Dependency Injection PHP\nDESCRIPTION: Shows how to obtain routing parameters by declaring them as method parameters in the controller. The framework automatically injects the corresponding parameter based on the route definition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/request.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass IndexController\n{\n    public function info(RequestInterface $request, int $id)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf gRPC Dependencies\nDESCRIPTION: These commands install the necessary dependencies for enabling gRPC bidirectional streaming with Nacos, which allows for near real-time configuration updates.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config-center.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"hyperf/http2-client:3.1.*\"\ncomposer require \"hyperf/grpc:3.1.*\"\n```\n\n----------------------------------------\n\nTITLE: Default Swagger UI HTML\nDESCRIPTION: This is the default HTML code for the Swagger UI. It includes links to CSS and JavaScript files from unpkg.hyperf.wiki and initializes the Swagger UI with a default configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/swagger.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta\n      name=\"description\"\n      content=\"SwaggerUI\"\n    />\n    <title>SwaggerUI</title>\n    <link rel=\"stylesheet\" href=\"https://unpkg.hyperf.wiki/swagger-ui-dist@4.5.0/swagger-ui.css\" />\n  </head>\n  <body>\n  <div id=\"swagger-ui\"></div>\n  <script src=\"https://unpkg.hyperf.wiki/swagger-ui-dist@4.5.0/swagger-ui-bundle.js\" crossorigin></script>\n  <script src=\"https://unpkg.hyperf.wiki/swagger-ui-dist@4.5.0/swagger-ui-standalone-preset.js\" crossorigin></script>\n  <script>\n    window.onload = () => {\n      window.ui = SwaggerUIBundle({\n        url: GetQueryString(\"search\"),\n        dom_id: '#swagger-ui',\n        presets: [\n          SwaggerUIBundle.presets.apis,\n          SwaggerUIStandalonePreset\n        ],\n        layout: \"StandaloneLayout\",\n      });\n    };\n    function GetQueryString(name) {\n      var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\", \"i\");\n      var r = window.location.search.substr(1).match(reg); //获取url中\"?\"符后的字符串并正则匹配\n      var context = \"\";\n      if (r != null)\n        context = decodeURIComponent(r[2]);\n      reg = null;\n      r = null;\n      return context == null || context == \"\" || context == \"undefined\" ? \"/http.json\" : context;\n    }\n  </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Publishing Internationalization Config\nDESCRIPTION: Publishes the internationalization configuration files for Hyperf. This step is required if the internationalization configuration has not been previously published. It utilizes the `vendor:publish` command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/validation/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# 发布国际化配置，已经发布过国际化配置可以省略\nphp bin/hyperf.php vendor:publish hyperf/translation\n```\n\n----------------------------------------\n\nTITLE: Log Output Example - Shell\nDESCRIPTION: This is an example of the log output generated by the above configurations.  It shows the log entries in `hyperf.log` using LineFormatter, and `hyperf-debug.log` using JsonFormatter, demonstrating different log formats. The DEBUG level is only present in the debug log file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/logger.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\n==> runtime/logs/hyperf.log <==\n[2019-11-08 11:11:35] hyperf.INFO: 5dc4dce791690 [] []\n\n==> runtime/logs/hyperf-debug.log <==\n{\"message\":\"5dc4dce791690\",\"context\":[],\"level\":200,\"level_name\":\"INFO\",\"channel\":\"hyperf\",\"datetime\":{\"date\":\"2019-11-08 11:11:35.597153\",\"timezone_type\":3,\"timezone\":\"Asia/Shanghai\"},\"extra\":[]}\n{\"message\":\"xxxx\",\"context\":[],\"level\":100,\"level_name\":\"DEBUG\",\"channel\":\"hyperf\",\"datetime\":{\"date\":\"2019-11-08 11:11:35.597635\",\"timezone_type\":3,\"timezone\":\"Asia/Shanghai\"},\"extra\":[]}\n\n```\n\n----------------------------------------\n\nTITLE: Executing Command in Non-Command Context (PHP)\nDESCRIPTION: Demonstrates how to execute a command from a non-command context using `ArrayInput`, `NullOutput`, and the application container.  This allows executing commands programmatically.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$command = 'foo';\n\n$params = [\"command\" => $command, \"--foo\" => \"foo\", \"--bar\" => \"bar\"];\n\n// 可以根據自己的需求, 選擇使用的 input/output\n$input = new ArrayInput($params);\n$output = new NullOutput();\n\n/** @var \\Psr\\Container\\ContainerInterface $container */\n$container = \\Hyperf\\Context\\ApplicationContext::getContainer();\n\n/** @var \\Symfony\\Component\\Console\\Application $application */\n$application = $container->get(\\Hyperf\\Contract\\ApplicationInterface::class);\n$application->setAutoExit(false);\n\n// 這種方式: 不會暴露出命令執行中的異常, 不會阻止程序返回\n$exitCode = $application->run($input, $output);\n\n// 第二種方式: 會暴露異常, 需要自己捕捉和處理運行中的異常, 否則會阻止程序的返回\n$exitCode = $application->find($command)->run($input, $output);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Generation Options\nDESCRIPTION: This configuration array defines default options for the `gen:model` command within a specific database connection pool in Hyperf. Options like `path`, `force_casts`, and `table_mapping` can be customized here to adjust model generation behavior.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/gen.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Database\\Commands\\ModelOption;\n\nreturn [\n    'default' => [\n        // 忽略其他配置\n        'commands' => [\n            'gen:model' => [\n                'path' => 'app/Model',\n                'force_casts' => true,\n                'inheritance' => 'Model',\n                'uses' => '',\n                'refresh_fillable' => true,\n                'table_mapping' => [],\n                'with_comments' => true,\n                'property_case' => ModelOption::PROPERTY_SNAKE_CASE,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Where Not Between Clauses with whereNotBetween() in Hyperf\nDESCRIPTION: Shows how to use the `whereNotBetween()` method to filter records where a column's value falls outside a specified range.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->whereNotBetween('votes', [1, 100])->get();\n```\n\n----------------------------------------\n\nTITLE: Refreshing an Existing Model Instance\nDESCRIPTION: This code demonstrates refreshing an existing model instance with the latest data from the database using the `refresh()` method. The original model's attributes are updated, including loaded relationships.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = User::query()->where('name','Hyperf')->first();\n\n$user->name = 'Hyperf2';\n\n$user->refresh();\n\necho $user->name; // Hyperf\n\n```\n\n----------------------------------------\n\nTITLE: Calling RPC Service with Object Parameters and Receiving Object Result\nDESCRIPTION: This snippet demonstrates how to call an RPC service using the defined interface and PHP objects. It retrieves the `CalculatorServiceInterface` from the application context, creates two `MathValue` objects, calls the `sum` method, and then accesses the `value` property of the returned `MathValue` object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/json-rpc.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Context\\ApplicationContext;\nuse App\\JsonRpc\\CalculatorServiceInterface;\nuse App\\JsonRpc\\MathValue;\n\n$client = ApplicationContext::getContainer()->get(CalculatorServiceInterface::class);\n\n/** @var MathValue $result */\n$result = $client->sum(new MathValue(1), new MathValue(2));\n\nvar_dump($result->value);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Migrations with Step (bash)\nDESCRIPTION: This command rolls back and re-executes a specified number of migrations using the `--step` parameter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:refresh --step=5\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Interface in Hyperf\nDESCRIPTION: Implements the PushInterface and defines the sendSmsCode method. The #[RpcService] attribute registers this class as an RPC service, making it available for remote invocation. This provides the actual implementation logic for the RPC service.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/rpc-multiplex.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\RPC;\n\nuse RPC\\Push\\PushInterface;\nuse Hyperf\\RpcMultiplex\\Constant;\nuse Hyperf\\RpcServer\\Annotation\\RpcService;\n\n#[RpcService(name: PushInterface::class, server: 'rpc', protocol: Constant::PROTOCOL_DEFAULT)]\nclass PushService implements PushInterface\n{\n    public function sendSmsCode(string $mobile, string $code): bool\n    {\n        // 實際處理邏輯\n        return true;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Requesting NATS Message\nDESCRIPTION: This code demonstrates how to request a message from a NATS subject using the `request` method of the `DriverInterface`. The `request` method takes the subject, the message payload, and a callback function as arguments. The callback function is executed when a response is received. In this example, the callback function dumps the body of the received message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nats.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Nats\\Driver\\DriverInterface;\nuse Hyperf\\Nats\\Message;\n\n#[AutoController(prefix: \"nats\")]\nclass NatsController extends AbstractController\n{\n    #[Inject]\n    protected DriverInterface $nats;\n\n    public function request()\n    {\n        $res = $this->nats->request('hyperf.reply', [\n            'id' => 'limx',\n        ], function (Message $payload) {\n            var_dump($payload->getBody());\n        });\n\n        return $this->response->success($res);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Left and Right Join - PHP\nDESCRIPTION: This demonstrates left and right joins using `leftJoin` and `rightJoin` methods. These joins are used to include all rows from one table and matching rows from another table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Template Engine\nDESCRIPTION: Configures the Hyperf View component to use a custom template engine, in this case `TemplateEngine`. It modifies the `engine` parameter in the view configuration to point to the custom engine class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Engine\\TemplateEngine;\n\nreturn [\n    // 將 engine 引數改為您的自定義模板引擎類\n    'engine' => TemplateEngine::class,\n    'mode' => Mode::TASK,\n    'config' => [\n        'view_path' => BASE_PATH . '/storage/view/',\n        'cache_path' => BASE_PATH . '/runtime/view/',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Enabling pcntl extension\nDESCRIPTION: This command shows how to check if the `pcntl` extension is enabled. Hyperf version 2.2 requires this extension.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/questions.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp --ri pcntl\n```\n\n----------------------------------------\n\nTITLE: Make Function Example PHP\nDESCRIPTION: Creates a short-lived UserService instance using the make function, allowing constructor dependency injection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$userService = make(UserService::class, ['enableCache' => true]);\n```\n\n----------------------------------------\n\nTITLE: DTM-Client Configuration in PHP\nDESCRIPTION: This PHP code defines the configuration settings for the DTM-Client, including the communication protocol with the DTM Server, server address and ports, sub-transaction barrier configurations for both DB and Redis, and Guzzle client options for HTTP requests. These settings are used to customize the client's behavior when interacting with the DTM server and managing distributed transactions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/distributed-transaction.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse DtmClient\\Constants\\Protocol;\nuse DtmClient\\Constants\\DbType;\n\nreturn [\n    // 客户端与 DTM Server 通讯的协议，支持 Protocol::HTTP 和 Protocol::GRPC 两种\n    'protocol' => Protocol::HTTP,\n    // DTM Server 的地址\n    'server' => '127.0.0.1',\n    // DTM Server 的端口\n    'port' => [\n        'http' => 36789,\n        'grpc' => 36790,\n    ],\n    // 子事务屏障配置\n    'barrier' => [\n        // DB 模式下的子事务屏障配置\n        'db' => [\n            'type' => DbType::MySQL\n        ],\n        // Redis 模式下的子事务屏障配置\n        'redis' => [\n            // 子事务屏障记录的超时时间\n            'expire_seconds' => 7 * 86400,\n        ],\n        // 非 Hyperf 框架下应用子事务屏障的类\n        'apply' => [],\n    ],\n    // HTTP 协议下 Guzzle 客户端的通用配置\n    'guzzle' => [\n        'options' => [],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining VALUE_NONE Option (PHP)\nDESCRIPTION: Defines an option that does not require a value using `InputOption::VALUE_NONE`. This type of option is a boolean flag indicating whether the option is present or not.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addOption('opt', 'o', InputOption::VALUE_NONE, '是否最佳化');\n}\n\npublic function handle()\n{\n    var_dump($this->input->getOption('opt'));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Define Crontab Tasks via Configuration - PHP\nDESCRIPTION: This PHP code defines scheduled tasks within the `config/autoload/crontab.php` configuration file. It creates an array of `Hyperf\\Crontab\\Crontab` objects, each representing a scheduled task with properties like name, rule, callback, and memo. It also includes example of callback, command and closure tasks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/crontab.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/crontab.php\nuse Hyperf\\Crontab\\Crontab;\nreturn [\n    'enable' => true,\n    // 透過配置檔案定義的定時任務\n    'crontab' => [\n        // Callback型別定時任務（預設）\n        (new Crontab())->setName('Foo')->setRule('* * * * *')->setCallback([App\\Task\\FooTask::class, 'execute'])->setMemo('這是一個示例的定時任務'),\n        // Command型別定時任務\n        (new Crontab())->setType('command')->setName('Bar')->setRule('* * * * *')->setCallback([\n            'command' => 'swiftmailer:spool:send',\n            // (optional) arguments\n            'fooArgument' => 'barValue',\n            // (optional) options\n            '--message-limit' => 1,\n            // 記住要加上，否則會導致主程序退出\n            '--disable-event-dispatcher' => true,\n        ])->setEnvironments(['develop', 'production']),\n        // Closure 型別定時任務 (僅在 Coroutine style server 中支援)\n        (new Crontab())->setType('closure')->setName('Closure')->setRule('* * * * *')->setCallback(function () {\n            var_dump(date('Y-m-d H:i:s'));\n        })->setEnvironments('production'),\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Handling Rate Limit Exceptions using limitCallback\nDESCRIPTION: Illustrates how to define a `limitCallback` to handle rate limit exceptions. The callback receives the delay until the next token is available and the proceeding join point which allows for custom logic or continuing execution.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/rate-limit.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\nuse Hyperf\\RateLimit\\Annotation\\RateLimit;\n\n#[Controller(prefix: \"rate-limit\")]\n#[RateLimit(limitCallback: [RateLimitController::class, \"limitCallback\"])]\nclass RateLimitController\n{\n    #[RequestMapping(path: \"test\")]\n    #[RateLimit(create: 1, capacity: 3)]\n    public function test()\n    {\n        return [\"QPS 1, 峯值3\"];\n    }\n    \n    public static function limitCallback(float $seconds, ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        // $seconds 下次生成Token 的間隔, 單位為秒\n        // $proceedingJoinPoint 此次請求執行的切入點\n        // 可以通過調用 `$proceedingJoinPoint->process()` 繼續完成執行，或者自行處理\n        return $proceedingJoinPoint->process();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Inbound Type Casting with CastsInboundAttributes Interface\nDESCRIPTION: Implements an inbound type casting class using the `CastsInboundAttributes` interface. This is used to transform a model's attribute only when setting the value, but does not affect read operations. This example demonstrates implementing hashing to protect sensitive data such as passwords.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/mutators.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Casts;\n\nuse Hyperf\\Contract\\CastsInboundAttributes;\n\nclass Hash implements CastsInboundAttributes\n{\n    /**\n     * 雜湊演算法\n     *\n     * @var string\n     */\n    protected $algorithm;\n\n    /**\n     * 建立一個新的型別轉換類例項\n     */\n    public function __construct($algorithm = 'md5')\n    {\n        $this->algorithm = $algorithm;\n    }\n\n    /**\n     * 轉換成將要進行儲存的值\n     */\n    public function set($model, $key, $value, $attributes)\n    {\n        return hash($this->algorithm, $value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Session ID\nDESCRIPTION: This code demonstrates how to retrieve the current session ID using the `getId()` method of the `SessionInterface`. The session ID can be used for various purposes such as custom session handling or logging.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/session.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$sessionId = $this->session->getId();\n```\n\n----------------------------------------\n\nTITLE: Adding Top-Level Metadata with with()\nDESCRIPTION: This PHP code demonstrates adding top-level metadata to a resource collection response using the `with()` method. The `with()` method returns an array of metadata that will be included in the response when the resource is rendered as a top-level resource.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n\n    public function with() : array\n    {\n        return [\n            'meta' => [\n                'key' => 'value',\n            ],\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Translating Strings via TranslatorInterface\nDESCRIPTION: This code shows how to translate strings using the `TranslatorInterface` and its `trans` method. The `messages.welcome` key is used to retrieve the translated string from the language file. Optional parameters can be passed to the `trans` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/translation.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Contract\\TranslatorInterface;\n\nclass FooController\n{\n    #[Inject]\n    private TranslatorInterface $translator;\n    \n    public function index()\n    {\n        return $this->translator->trans('messages.welcome', [], 'zh_CN');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hyperf Nano Middleware Example\nDESCRIPTION: Demonstrates how to add middleware to a Hyperf Nano application. It modifies the request by adding an attribute and passes it to the next handler.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nano.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->get('/', function () {\n    return $this->request->getAttribute('key');\n});\n\n$app->addMiddleware(function ($request, $handler) {\n    $request = $request->withAttribute('key', 'value');\n    return $handler->handle($request);\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Disable Swoole Short Names via Command Line\nDESCRIPTION: This snippet demonstrates how to disable Swoole short function names when starting the server via the command line.  This is an alternative to modifying the php.ini file.  The `-d` flag is used to set the `swoole.use_shortname` setting to `Off` for the current PHP execution.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/questions.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nphp -d swoole.use_shortname=Off bin/hyperf.php start\n```\n\n----------------------------------------\n\nTITLE: Resume Exit Coordinator Listener (PHP)\nDESCRIPTION: This PHP code implements a listener that resumes the exit coordinator after a command is executed. This prevents the process from hanging when listeners for Command events perform AMQP or other multiplexed logic.  The listener listens for the `AfterExecute` event.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/3.0.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Command\\Event\\AfterExecute;\nuse Hyperf\\Coordinator\\Constants;\nuse Hyperf\\Coordinator\\CoordinatorManager;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\n\n#[Listener]\nclass ResumeExitCoordinatorListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            AfterExecute::class,\n        ];\n    }\n\n    public function process(object $event): void\n    {\n        CoordinatorManager::until(Constants::WORKER_EXIT)->resume();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Pivot Data with Custom Accessor in Hyperf\nDESCRIPTION: This PHP code shows how to access pivot table data when a custom accessor ('subscription') is used instead of the default 'pivot'.  The `whenPivotLoadedAs` method is used to specify the accessor name along with the pivot table name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'expires_at' => $this->whenPivotLoadedAs('subscription', 'role_user', function () {\n                return $this->subscription->expires_at;\n            }),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Testing Hyperf Application with Curl\nDESCRIPTION: This snippet demonstrates how to test a deployed Hyperf application using the `curl` command. It sends an HTTP GET request to the specified port on the localhost (127.0.0.1) and expects a JSON response containing a welcome message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/daocloud.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl http://127.0.0.1:9501\n{\"code\":0,\"data\":{\"user\":\"Hyperf\",\"method\":\"GET\",\"message\":\"Hello Hyperf.\"}}\n```\n\n----------------------------------------\n\nTITLE: Manual Consumer Class Definition PHP\nDESCRIPTION: This code snippet defines a consumer class `CalculatorServiceConsumer` that extends `AbstractServiceClient` and implements `CalculatorServiceInterface`. It specifies the service name, protocol, and defines a method `add` that makes a remote request to the service provider.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/json-rpc.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\JsonRpc;\n\nuse Hyperf\\RpcClient\\AbstractServiceClient;\n\nclass CalculatorServiceConsumer extends AbstractServiceClient implements CalculatorServiceInterface\n{\n    /**\n     * Define the service name of the corresponding service provider\n     * @var string \n     */\n    protected $serviceName = 'CalculatorService';\n    \n    /**\n     * Define the protocol of the corresponding service provider\n     * @var string \n     */\n    protected $protocol = 'jsonrpc-http';\n\n    public function add(int $a, int $b): int\n    {\n        return $this->__request(__FUNCTION__, compact('a', 'b'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Convert Infix to RPN Expression in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to convert an infix expression to an RPN expression using the `toRPNExpression()` method of the `Calculator` class.  The input is the infix expression '4 - 2 * ( 5 + 5 ) - 10'. The returned RPN expression is '4 2 5 5 + * - 10 -'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/rpn.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->toRPNExpression('4 - 2 * ( 5 + 5 ) - 10'); // 4 2 5 5 + * - 10 -\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger\nDESCRIPTION: This PHP code configures the logger to write to a file within a writable directory when running in a Phar archive.  It modifies the `logger.php` configuration file, setting the `stream` parameter of the `StreamHandler` to `/tmp/runtime/logs/hyperf.log`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/phar.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'handler' => [\n            'class' => Monolog\\Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => '/tmp/runtime/logs/hyperf.log',\n                'level' => Monolog\\Logger::INFO,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using SessionSidProvider for SocketID\nDESCRIPTION: This PHP snippet demonstrates configuring the SessionSidProvider to use SessionID as SocketID.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/socketio-server.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\SocketIOServer\\SidProvider\\SidProviderInterface::class => \\Hyperf\\SocketIOServer\\SidProvider\\SessionSidProvider::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Limiting Results with offset/limit - PHP\nDESCRIPTION: This snippet demonstrates how to limit the number of results returned and skip a specified number of results using the `offset` and `limit` methods. These are alternatives to `skip` and `take`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->offset(10)->limit(5)->get();\n```\n\n----------------------------------------\n\nTITLE: Regenerate Hyperf Models\nDESCRIPTION: This command upgrades the Hyperf models to a new format due to added type restrictions in the model base class. It requires the `hyperf/code-generator` package. It uses a PHP script to regenerate the models in the specified directory. This is a required step when upgrading to Hyperf 3.0.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog/3.0.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp vendor/bin/regenerate-models.php $PWD/app/Model\n```\n\n----------------------------------------\n\nTITLE: Flush Cache with DeleteListenerEvent\nDESCRIPTION: Illustrates how to flush the cache associated with the 'user-update' listener using the `DeleteListenerEvent`.  It dispatches an event to clear the cache when a user is updated. Recommends using Annotations instead of listeners.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/cache.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Cache\\Listener\\DeleteListenerEvent;\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\n\nclass SystemService\n{\n    #[Inject]\n    protected EventDispatcherInterface $dispatcher;\n\n    public function flushCache($userId)\n    {\n        $this->dispatcher->dispatch(new DeleteListenerEvent('user-update', [$userId]));\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing hyperf/logger via Composer\nDESCRIPTION: This command installs the `hyperf/logger` component using Composer, a dependency management tool for PHP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/logger.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/logger\n```\n\n----------------------------------------\n\nTITLE: Configure gRPC Server\nDESCRIPTION: This PHP snippet configures a gRPC server within the `server.php` file. It defines the server name, type, host, port, and callbacks.  The `Event::ON_REQUEST` event is mapped to the `onRequest` method of the `Hyperf\\GrpcServer\\Server` class, which handles incoming gRPC requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/grpc.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n'servers' => [\n    ....\n    [\n        'name' => 'grpc',\n        'type' => Server::SERVER_HTTP,\n        'host' => '0.0.0.0',\n        'port' => 9503,\n        'sock_type' => SWOOLE_SOCK_TCP,\n        'callbacks' => [\n            Event::ON_REQUEST => [\\Hyperf\\GrpcServer\\Server::class，'onRequest'],\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Container Parameter Optimization\nDESCRIPTION: Configures `sysctls` for Docker containers to optimize network connection reuse and LVS (Linux Virtual Server) connection handling.  These settings improve network performance within the containerized environment.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nsysctls:\n  # 網絡連接複用模式的選擇\n  - net.ipv4.vs.conn_reuse_mode=0\n  # 當LVS轉發數據包，發現目的RS無效（刪除）時，會丟棄該數據包，但不刪除相應連接。值為1時，則馬上釋放相應連接\n  - net.ipv4.vs.expire_nodest_conn=1\n```\n\n----------------------------------------\n\nTITLE: Installing Aliyun OSS Adapter (Flysystem v1.0)\nDESCRIPTION: Install the Aliyun OSS adapter for Flysystem v1.0.  This allows Hyperf to interact with Aliyun OSS for file storage. Requires PHP and Composer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/filesystem.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require xxtime/flysystem-aliyun-oss\n```\n\n----------------------------------------\n\nTITLE: Returning Raw Content in Hyperf\nDESCRIPTION: Demonstrates how to return raw text content using the `raw()` method of the `Hyperf\\HttpServer\\Contract\\ResponseInterface`. The content type is automatically set to `plain/text`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/response.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function raw(ResponseInterface $response): Psr7ResponseInterface\n    {\n        return $response->raw('Hello Hyperf.');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using HandlerStackFactory\nDESCRIPTION: Example of using HandlerStackFactory to simplify the creation of HandlerStack instances for Guzzle.  This factory streamlines the configuration of the handler stack for Guzzle clients.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/guzzle.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Guzzle\\HandlerStackFactory;\nuse GuzzleHttp\\Client;\n\n$factory = new HandlerStackFactory();\n$stack = $factory->create();\n\n$client = make(Client::class, [\n    'config' => [\n        'handler' => $stack,\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Logger Configuration for Monolog 3.x (PHP)\nDESCRIPTION: This PHP code demonstrates how to configure the logger to be compatible with Monolog 3.x.  It involves updating the type hint for the `$record` parameter in the `__invoke` method to `array|LogRecord` to accommodate the new LogRecord class introduced in Monolog 3.x.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/3.0.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Kernel\\Log;\n\nuse Hyperf\\Context\\Context;\nuse Hyperf\\Coroutine\\Coroutine;\nuse Monolog\\LogRecord;\nuse Monolog\\Processor\\ProcessorInterface;\n\nclass AppendRequestIdProcessor implements ProcessorInterface\n{\n    public const REQUEST_ID = 'log.request.id';\n\n    public function __invoke(array|LogRecord $record)\n    {\n        $record['extra']['request_id'] = Context::getOrSet(self::REQUEST_ID, uniqid());\n        $record['extra']['coroutine_id'] = Coroutine::id();\n        return $record;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Extending a Blade Layout\nDESCRIPTION: This Blade template extends the 'layouts.app' layout and defines content for the 'title', 'sidebar', and 'content' sections.  The @parent directive is used to append content to the parent sidebar, while @section and @endsection define the sections to be injected into the layout.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<!-- Stored in storage/view/child.blade.php -->\n\n@extends('layouts.app')\n\n@section('title', 'Page Title')\n\n@section('sidebar')\n    @parent\n\n    <p>This is appended to the master sidebar.</p>\n@endsection\n\n@section('content')\n    <p>This is my body content.</p>\n@endsection\n```\n\n----------------------------------------\n\nTITLE: Disable Foreign Key Constraints\nDESCRIPTION: This snippet shows how to disable foreign key constraints using the `Schema::disableForeignKeyConstraints()` method. It turns off foreign key checks in the database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\n// 禁用外键约束\nSchema::disableForeignKeyConstraints();\n```\n\n----------------------------------------\n\nTITLE: Install S3 Adapter (Flysystem v2.0)\nDESCRIPTION: These commands install the S3 adapter for Flysystem v2.0 and the hyperf/guzzle dependency using Composer. This adapter allows you to interact with AWS S3 or S3-compatible storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/filesystem.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"league/flysystem-aws-s3-v3:^2.0\"\n```\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/guzzle\n```\n\n----------------------------------------\n\nTITLE: Configuring Whoops Exception Handler in Hyperf\nDESCRIPTION: This PHP code snippet shows how to configure Whoops as the exception handler for a Hyperf application by modifying the `config/autoload/exceptions.php` file. This will enable Whoops to handle and display exceptions during development.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/exception-handler.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/exceptions.php\nreturn [\n    'handler' => [\n        'http' => [\n            \\Hyperf\\ExceptionHandler\\Handler\\WhoopsExceptionHandler::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Hyperf Swagger Configuration Array\nDESCRIPTION: This PHP code shows the configuration array for the hyperf/swagger component. It defines settings such as enabling/disabling the component, port number, JSON directory, HTML path, URL, automatic generation, and scan paths. This config allows to customize the swagger dashboard.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/swagger.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'enable' => true,\n    'port' => 9500,\n    'json_dir' => BASE_PATH . '/storage/swagger',\n    'html' => <<<'HTML'\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta\n      name=\"description\"\n      content=\"SwaggerUI\"\n    />\n    <title>SwaggerUI</title>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui.css\" />\n  </head>\n  <body>\n  <div id=\"swagger-ui\"></div>\n  <script src=\"https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui-bundle.js\" crossorigin></script>\n  <script src=\"https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui-standalone-preset.js\" crossorigin></script>\n  <script>\n    window.onload = () => {\n      window.ui = SwaggerUIBundle({\n        url: GetQueryString(\"search\"),\n        dom_id: '#swagger-ui',\n        presets: [\n          SwaggerUIBundle.presets.apis,\n          SwaggerUIStandalonePreset\n        ],\n        layout: \"StandaloneLayout\",\n      });\n    };\n    function GetQueryString(name) {\n      var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\", \"i\");\n      var r = window.location.search.substr(1).match(reg); //获取url中\"?\"符后的字符串并正则匹配\n      var context = \"\";\n      if (r != null)\n        context = decodeURIComponent(r[2]);\n      reg = null;\n      r = null;\n      return context == null || context == \"\" || context == \"undefined\" ? \"/http.json\" : context;\n    }\n  </script>\n  </body>\n</html>\nHTML,\n    'url' => '/swagger',\n    'auto_generate' => true,\n    'scan' => [\n        'paths' => null,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Publishing Hyperf Rate Limit Configuration\nDESCRIPTION: Publishes the default configuration file for the Hyperf Rate Limit component. This allows for customization of the rate limiting behavior.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/rate-limit.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/rate-limit\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Aliyun ACM Config\nDESCRIPTION: This command installs the Hyperf component for integrating with Aliyun ACM (Application Configuration Management), a free configuration center service provided by Alibaba Cloud.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config-center.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-aliyun-acm\n```\n\n----------------------------------------\n\nTITLE: Checking for Existence - PHP\nDESCRIPTION: Shows how to check if records exist based on a given query using the `exists()` and `doesntExist()` methods.  `exists()` returns `true` if at least one record matches the query, while `doesntExist()` returns `true` if no records match the query. Requires the `Hyperf\\DbConnection\\Db` facade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nreturn Db::table('orders')->where('finalized', 1)->exists();\n\nreturn Db::table('orders')->where('finalized', 1)->doesntExist();\n```\n\n----------------------------------------\n\nTITLE: Custom Histogram Bucket Registration (PHP)\nDESCRIPTION: Demonstrates how to register a custom histogram with predefined buckets in the Prometheus registry.  This is done by listening to the `BeforeMainServerStart` event and registering the histogram before the server starts. It requires the `Hyperf\\Config\\Annotation\\Value`, `Hyperf\\Event\\Contract\\ListenerInterface`, `Hyperf\\Framework\\Event\\BeforeMainServerStart`, and `Prometheus\\CollectorRegistry` dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Listener;\n\nuse Hyperf\\Config\\Annotation\\Value;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BeforeMainServerStart;\nuse Prometheus\\CollectorRegistry;\n\nclass OnMainServerStart implements ListenerInterface\n{\n    protected $registry;\n\n    public function __construct(CollectorRegistry $registry)\n    {\n        $this->registry = $registry;\n    }\n\n    public function listen(): array\n    {\n        return [\n            BeforeMainServerStart::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        $this->registry->registerHistogram(\n            config(\"metric.metric.prometheus.namespace\"), \n            'test',\n            'help_message', \n            ['labelName'], \n            [0.1, 1, 2, 3.5]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Hyperf Model\nDESCRIPTION: Shows how to retrieve a single model instance from the database using the `first()` and `find()` methods. These methods return a single model instance, not a collection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$user = User::query()->where('id', 1)->first();\n\n$user = User::query()->find(1);\n```\n\n----------------------------------------\n\nTITLE: Install hyperf/service-governance\nDESCRIPTION: This command installs the hyperf/service-governance component, which is required for service registration and discovery using Consul.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/service-register.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/service-governance\n```\n\n----------------------------------------\n\nTITLE: Multiple WebSocket Server Configuration with Nginx\nDESCRIPTION: This nginx configuration distributes WebSocket connections across multiple backend servers (ws1:9502 and ws2:9502). It sets up an upstream `io_nodes` and proxies WebSocket connections, upgrading the connection and forwarding it to the backend servers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/websocket-server.md#_snippet_8\n\nLANGUAGE: nginx\nCODE:\n```\n# /etc/nginx/conf.d/ng_socketio.conf\n# 多个 ws server\nupstream io_nodes {\n    server ws1:9502;\n    server ws2:9502;\n}\nserver {\n  listen 9502;\n  # server_name your.socket.io;\n  location / {\n    proxy_set_header Upgrade \"websocket\";\n    proxy_set_header Connection \"upgrade\";\n    # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    # proxy_set_header Host $host;\n    # proxy_http_version 1.1;\n    # 转发到多个 ws server\n    proxy_pass http://io_nodes;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster with Seeds (redis.php)\nDESCRIPTION: Configures Redis cluster using a seeds in the redis.php file. It enables cluster mode and sets the seeds, specifying the addresses of the Redis cluster nodes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/redis.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// 省略其他配置\nreturn [\n    'default' => [\n        'cluster' => [\n            'enable' => true,\n            'name' => null,\n            'seeds' => [\n                '192.168.1.110:6379',\n                '192.168.1.111:6379',\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Freshening Migrations in Hyperf\nDESCRIPTION: This command drops all tables in the database and then runs all migrations. This effectively rebuilds the entire database from scratch. Requires Hyperf framework and executable `bin/hyperf.php` script.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:fresh\n```\n\nLANGUAGE: bash\nCODE:\n```\n// Rebuild database structure and perform data population\nphp bin/hyperf.php migrate:fresh --seed\n```\n\n----------------------------------------\n\nTITLE: Defining a Many-to-Many Relationship in Hyperf\nDESCRIPTION: This code snippet defines a many-to-many relationship between a User model and a Role model using the belongsToMany method. It assumes the existence of a pivot table named role_user with user_id and role_id columns. The roles() method returns the result of the belongsToMany method, specifying the Role model class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/relationship.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    public function roles()\n    {\n        return $this->belongsToMany(Role::class);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Service Consumer Configuration with PHP Variable - Hyperf\nDESCRIPTION: This snippet shows how to reuse registry configurations for multiple service consumers using a PHP variable in a Hyperf application. It defines a registry array and uses it for FooService and BarService.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/json-rpc.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$registry = [\n   'protocol' => 'consul',\n   'address' => 'http://127.0.0.1:8500',\n];\nreturn [\n    // 下面的 FooService 和 BarService 仅示例多服务，并不是在文档示例中真实存在的\n    'consumers' => [\n        [\n            'name' => 'FooService',\n            'registry' => $registry,\n        ],\n        [\n            'name' => 'BarService',\n            'registry' => $registry,\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Metric Factory Methods\nDESCRIPTION: Lists the factory methods available in `MetricFactoryInterface` for creating the three basic metric types: Counter, Gauge, and Histogram. Each method takes a name and an array of label names.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\npublic function makeCounter($name, $labelNames): CounterInterface;\n\npublic function makeGauge($name, $labelNames): GaugeInterface;\n\npublic function makeHistogram($name, $labelNames): GaugeInterface;\n```\n\n----------------------------------------\n\nTITLE: Returning XML Response in Hyperf\nDESCRIPTION: This snippet illustrates how to return an XML response using the `xml()` method of the `ResponseInterface`. It sets the `Content-Type` header to `application/xml` and accepts an array or an object implementing the `Xmlable` interface as input. The method returns a new `Psr7ResponseInterface` object containing the XML data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/response.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function xml(ResponseInterface $response): Psr7ResponseInterface\n    {\n        $data = [\n            'key' => 'value'\n        ];\n        return $response->xml($data);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Checking Swoole http2 support\nDESCRIPTION: This command shows how to check if Swoole has been compiled with HTTP/2 support.  This is required for using Websockets.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/questions.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp --ri swoole | grep http2\n```\n\n----------------------------------------\n\nTITLE: Using havingRaw and orHavingRaw methods in Hyperf\nDESCRIPTION: This code demonstrates the use of `havingRaw` to add a raw string as the value of a `having` statement.  It groups orders by 'department' and filters based on the sum of 'price'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('order')\n    ->select('department', Db::raw('SUM(price) as total_sales'))\n    ->groupBy('department')\n    ->havingRaw('SUM(price) > ?', [2500])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Generated Hyperf Model Example PHP\nDESCRIPTION: This PHP code represents a generated model for a `User` table using Hyperf. It defines properties with PHPDoc annotations, specifies the table name, fillable attributes, and casts for various fields.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/gen.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\n/**\n * @property $id\n * @property $name\n * @property $gender\n * @property $created_at\n * @property $updated_at\n */\nclass User extends Model\n{\n    /**\n     * The table associated with the model.\n     */\n    protected ?string $table = 'user';\n\n    /**\n     * The attributes that are mass assignable.\n     */\n    protected array $fillable = ['id', 'name', 'gender', 'created_at', 'updated_at'];\n\n    /**\n     * The attributes that should be cast to native types.\n     */\n    protected array $casts = ['id' => 'integer', 'gender' => 'integer'];\n}\n```\n\n----------------------------------------\n\nTITLE: Socket.io Client Implementation\nDESCRIPTION: Implements a Socket.io client in HTML using JavaScript. Connects to the specified WebSocket server URL, emits events such as 'event', 'join-room', and 'say', and logs responses to the console.  Requires the socket.io client library.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/socketio-server.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.bootcdn.net/ajax/libs/socket.io/2.3.0/socket.io.js\"></script>\n<script>\n    var socket = io('ws://127.0.0.1:9502', { transports: [\"websocket\"] });\n    socket.on('connect', data => {\n        socket.emit('event', 'hello, hyperf', console.log);\n        socket.emit('join-room', 'room1', console.log);\n        setInterval(function () {\n            socket.emit('say', '{\"room\":\"room1\", \"message\":\"Hello Hyperf.\"}');\n        }, 1000);\n    });\n    socket.on('event', console.log);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configure Composer Scripts for Testing\nDESCRIPTION: Configures the composer.json file with scripts to run Pest and PHPUnit tests.  The `pest` script executes Pest tests with colored output, while the `test` script runs PHPUnit tests using the `co-phpunit` command for coroutine-friendly testing, also with colored output.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"pest\": \"pest --colors=always\",\n    \"test\": \"co-phpunit -c phpunit.xml --colors=always\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Blade Views\nDESCRIPTION: This PHP code shows how to pass data to a Blade view. It defines a route that renders the 'welcome' view and passes an array containing the 'name' variable with the value 'Samantha'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\HttpServer\\Router\\Router;\nuse function Hyperf\\ViewEngine\\view;\n\nRouter::get('greeting', function () {\n    return view('welcome', ['name' => 'Samantha']);\n});\n```\n\n----------------------------------------\n\nTITLE: Unique Rule with Additional Where Clause - PHP\nDESCRIPTION: This snippet demonstrates how to add an additional `where` clause to the `unique` validation rule using a closure. This allows you to specify additional constraints for the uniqueness check, such as ensuring that the `account_id` is 1.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_44\n\nLANGUAGE: PHP\nCODE:\n```\n'email' => Rule::unique('users')->where(function ($query) {\n    $query->where('account_id', 1);\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring pid_file\nDESCRIPTION: This PHP code snippet configures the `pid_file` setting within the `server.php` configuration file.  It specifies a writable location (`/tmp/runtime/hyperf.pid`) for the process ID file when running within a Phar archive, as the default location may not be writable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/phar.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'settings' => [\n        'pid_file' => '/tmp/runtime/hyperf.pid',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Class with Constants and Messages\nDESCRIPTION: This snippet demonstrates defining an enum class for error codes using the `Hyperf\\Constants\\Annotation\\Constants` and `Hyperf\\Constants\\Annotation\\Message` annotations.  It also uses the `Hyperf\\Constants\\EnumConstantsTrait` trait to provide helper methods.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/constants.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Constants;\n\nuse Hyperf\\Constants\\Annotation\\Constants;\nuse Hyperf\\Constants\\Annotation\\Message;\nuse Hyperf\\Constants\\EnumConstantsTrait;\n\n#[Constants]\nenum ErrorCode: int\n{\n    use EnumConstantsTrait\n    #[Message(\"Server Error！\")]\n    case SERVER_ERROR = 500;\n\n    #[Message(\"系統參數錯誤\")]\n    case SYSTEM_INVALID = 700;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Foreign Key Constraints\nDESCRIPTION: This snippet shows how to enable foreign key constraints for a database connection, which is disabled by default.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\n// 開啟外來鍵約束\nSchema::enableForeignKeyConstraints();\n```\n\n----------------------------------------\n\nTITLE: Using restoreOrCreate in Hyperf\nDESCRIPTION: Demonstrates using the `restoreOrCreate` method to either restore a soft-deleted model if it exists, or create a new model if it doesn't. It searches for a User by name, and either restores the model or creates a new one with the provided attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n// Look up users by name, create them with name and gender, age attributes if they don't exist...\n$user = User::restoreOrCreate(\n    ['name' => 'Hyperf'],\n    ['gender' => 1, 'age' => 20]\n);\n```\n\n----------------------------------------\n\nTITLE: Run Coroutines and Return First Result\nDESCRIPTION: This code snippet shows how to run multiple coroutines concurrently using `Observable::fromCoroutine` and return the result of the first one that completes, similar to JavaScript's `Promise.race`. It takes an array of anonymous functions (coroutines) as input, executes them concurrently, and uses the `take(1)` operator to only emit the first result.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/reactive-x.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\ReactiveX\\Observable;\nuse Swoole\\Coroutine\\Channel;\n\n$result = new Channel(1);\n$o = Observable::fromCoroutine([function () {\n    sleep(2);\n    return 1;\n}, function () {\n    sleep(1);\n    return 2;\n}]);\n$o->take(1)->subscribe(\n    function ($x) use ($result) {\n        $result->push($x);\n    }\n);\necho $result->pop(); // 2;\n\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple HTTP Method Route in Hyperf\nDESCRIPTION: This code snippet demonstrates how to register a route that can handle multiple HTTP methods using the `addRoute` method. The route will respond to GET, POST, PUT, and DELETE requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/router.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\HttpServer\\Router\\Router;\n\nRouter::addRoute(['GET', 'POST','PUT','DELETE'], $uri, $callback);\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Close of WebSocket Client\nDESCRIPTION: This snippet shows how to prevent the WebSocket client from automatically closing the connection after use. By passing `false` as the second argument to the `create` method, the client will remain open until explicitly closed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/websocket-client.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$autoClose = false;\n$client = $clientFactory->create($host, $autoClose);\n```\n\n----------------------------------------\n\nTITLE: Defining VALUE_REQUIRED Option (PHP)\nDESCRIPTION: Defines a required option with a default value using `InputOption::VALUE_REQUIRED` in the `addOption()` method.  The option's value is accessed using `$this->input->getOption()` in the `handle()` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addOption('name', 'N', InputOption::VALUE_REQUIRED, '姓名', 'Hyperf');\n}\n\npublic function handle()\n{\n    var_dump($this->input->getOption('name'));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Fields in Hyperf Migration\nDESCRIPTION: This code shows how to create a string field in a Hyperf migration using the `$table->string()` method.  The field is created within the `Schema::create` closure.  This example will create a string column named `name`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Database\\Schema\\Schema;\nuse Hyperf\\Database\\Schema\\Blueprint;\nuse Hyperf\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    public function up(): void\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->string('name');\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Where In/Not In Clauses - PHP\nDESCRIPTION: This snippet demonstrates the usage of `whereIn` and `whereNotIn` methods for filtering results based on whether a column's value is in a specified array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->whereIn('id', [1, 2, 3])->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->whereNotIn('id', [1, 2, 3])->get();\n```\n\n----------------------------------------\n\nTITLE: Defining a Inverse One-to-Many Relationship in Hyperf\nDESCRIPTION: This code snippet defines an inverse one-to-many (belongsTo) relationship between a Book model and a User model. The author() method returns the result of the belongsTo method, specifying the User model class, the foreign key (user_id), and the owner key (id). This assumes the Book model has a user_id column that refers to the User model's id.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/relationship.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass Book extends Model\n{\n    public function author()\n    {\n        return $this->belongsTo(User::class, 'user_id', 'id');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: SQL Query Execution Listener Implementation in PHP\nDESCRIPTION: This code snippet demonstrates how to implement a listener for SQL query execution events in Hyperf. It defines a `DbQueryExecutedListener` class that listens for `QueryExecuted` events and logs the SQL query and execution time to a specified logger. This listener is automatically registered via the `Listener` annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/event.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Database\\Events\\QueryExecuted;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Logger\\LoggerFactory;\nuse Hyperf\\Collection\\Arr;\nuse Hyperf\\Stringable\\Str;\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\Log\\LoggerInterface;\n\n#[Listener]\nclass DbQueryExecutedListener implements ListenerInterface\n{\n    private LoggerInterface $logger;\n\n    public function __construct(ContainerInterface $container)\n    {\n        // 輸出到對應名為 sql 的日誌 name，如不存在則需自行添加配置\n        // 這裏的 sql 日誌 name 不是必須的，只是表達可以將 SQL 執行日誌與普通日誌區分開\n        $this->logger = $container->get(LoggerFactory::class)->get('sql');\n    }\n\n    public function listen(): array\n    {\n        return [\n            QueryExecuted::class,\n        ];\n    }\n\n    /**\n     * @param QueryExecuted $event\n     */\n    public function process(object $event)\n    {\n        if ($event instanceof QueryExecuted) {\n            $sql = $event->sql;\n            if (! Arr::isAssoc($event->bindings)) {\n                foreach ($event->bindings as $key => $value) {\n                    $sql = Str::replaceFirst('?', \"'{$value}'\", $sql);\n                }\n            }\n\n            $this->logger->info(sprintf('[%s] %s', $event->time, $sql));\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using env() function to retrieve Configuration - PHP\nDESCRIPTION: Retrieves configuration value from env file. If the env variable is not set, 'Hyperf Skeleton' is set as the default value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/config.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// config/config.php\nreturn [\n    'app_name' => env('APP_NAME', 'Hyperf Skeleton'),\n];\n```\n\n----------------------------------------\n\nTITLE: Conditional Validation for Multiple Fields - PHP\nDESCRIPTION: This snippet extends the previous example to apply the `required` validation rule to both the `reason` and `cost` fields conditionally, based on the value of the `games` field. If `games` is greater than or equal to 100, both `reason` and `cost` become required.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_47\n\nLANGUAGE: PHP\nCODE:\n```\n$v->sometimes(['reason', 'cost'], 'required', function($input) {\n    return $input->games >= 100;\n});\n```\n\n----------------------------------------\n\nTITLE: CachePut Annotation Example\nDESCRIPTION: Illustrates using the `CachePut` annotation to update the cache after executing the method. This always executes the method and then updates the cache with the new result.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/cache.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\CachePut;\n\nclass UserService\n{\n    #[CachePut(prefix: \"user\", ttl: 3601)]\n    public function updateUser(int $id)\n    {\n        $user = User::query()->find($id);\n        $user->name = 'HyperfDoc';\n        $user->save();\n\n        return [\n            'user' => $user->toArray(),\n            'uuid' => $this->unique(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Model Relationships (orWhereHasMorph)\nDESCRIPTION: This adds new relationship queries to the Hyperf Model. It includes functionalities like orWhereHasMorph, whereDoesntHaveMorph, and orWhereDoesntHaveMorph to the Model class. These methods facilitate more complex relationship-based queries in the Hyperf database component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.0.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nModel::orWhereHasMorph\n```\n\nLANGUAGE: PHP\nCODE:\n```\nModel::whereDoesntHaveMorph\n```\n\nLANGUAGE: PHP\nCODE:\n```\nModel::orWhereDoesntHaveMorph\n```\n\n----------------------------------------\n\nTITLE: Create Hyperf Project with Swoole via Composer\nDESCRIPTION: This command creates a new Hyperf project using the `hyperf/hyperf-skeleton` package, which includes commonly used components and configurations for building web applications. It utilizes the Swoole driver.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/install.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer create-project hyperf/hyperf-skeleton \n```\n\n----------------------------------------\n\nTITLE: Generate Form Request\nDESCRIPTION: This command generates a form request class named `FooRequest` in the `app\\Request` directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:request FooRequest\n```\n\n----------------------------------------\n\nTITLE: Configuring phpunit.xml for Coverage Reporting (Hyperf)\nDESCRIPTION: This XML snippet configures phpunit to generate code coverage reports. It specifies directories to include and exclude from the coverage analysis, sets up the HTML report output, and configures other settings like memory limits and test suites.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         bootstrap=\"./test/bootstrap.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n    <php>\n        <!-- other PHP.ini or environment variables -->\n        <ini name=\"memory_limit\" value=\"-1\" />\n    </php>\n    <testsuites>\n        <testsuite name=\"Tests\">\n            // 需要執行單測的測試案例目錄\n            <directory suffix=\"Test.php\">./test</directory>\n        </testsuite>\n    </testsuites>\n    <coverage includeUncoveredFiles=\"true\"\n              processUncoveredFiles=\"true\"\n              pathCoverage=\"false\"\n              ignoreDeprecatedCodeUnits=\"true\"\n              disableCodeCoverageIgnore=\"false\">\n        <include>\n            // 需要統計單元測試覆蓋率的檔案\n            <directory suffix=\".php\">./app</directory>\n        </include>\n        <exclude>\n            // 生產單元測試覆蓋率時，需要忽略的檔案\n            <directory suffix=\".php\">./app/excludeFile</directory>\n        </exclude>\n        <report>\n            <html outputDirectory=\"test/cover/\" lowUpperBound=\"50\" highLowerBound=\"90\"/>\n        </report>\n    </coverage>\n    <logging>\n        <junit outputFile=\"test/junit.xml\"/>\n    </logging>\n\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Serving a File Download in Hyperf\nDESCRIPTION: Illustrates how to serve a file download using the `download()` method of the `Hyperf\\HttpServer\\Contract\\ResponseInterface`. It automatically sets the appropriate headers for file download, including handling of `if-match` and `if-none-match` headers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/response.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function index(ResponseInterface $response): Psr7ResponseInterface\n    {\n        return $response->download(BASE_PATH . '/public/file.csv', 'filename.csv');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Degenerate Snowflake ID\nDESCRIPTION: Degenerates a Snowflake ID back into its Meta data using the IdGeneratorInterface in Hyperf. It retrieves the IdGeneratorInterface from the container and calls the degenerate() method to reverse the ID and extract meta information.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/snowflake.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Snowflake\\IdGeneratorInterface;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n$generator = $container->get(IdGeneratorInterface::class);\n\n$meta = $generator->degenerate($id);\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Index After Column Definition\nDESCRIPTION: This snippet shows how to create a unique index after a column has been defined using the `unique()` method. The `unique()` method is called on the `$table` object, specifying the column to index.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// 在定義完欄位之後建立索引\n$table->unique('name');\n```\n\n----------------------------------------\n\nTITLE: Blade Continue and Break Statements\nDESCRIPTION: This Blade template demonstrates the use of `@continue` and `@break` directives within loops to control the flow of execution, similar to PHP's `continue` and `break` statements. It also shows how to use these directives with a condition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_21\n\nLANGUAGE: blade\nCODE:\n```\n@foreach ($users as $user)\n    @if ($user->type == 1)\n        @continue\n    @endif\n\n    <li>{{ $user->name }}</li>\n\n    @if ($user->number == 5)\n        @break\n    @endif\n@endforeach\n```\n\nLANGUAGE: blade\nCODE:\n```\n@foreach ($users as $user)\n    @continue($user->type == 1)\n\n    <li>{{ $user->name }}</li>\n\n    @break($user->number == 5)\n@endforeach\n```\n\n----------------------------------------\n\nTITLE: Publishing Hyperf Scout Configuration File (Repeated)\nDESCRIPTION: Publishes the default Scout configuration file to your application's config directory. This allows you to customize the Scout configuration settings, such as the default search engine and connection details. This snippet is the same as another one.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/scout\n```\n\n----------------------------------------\n\nTITLE: Overriding Context Value - Hyperf\nDESCRIPTION: This code snippet demonstrates how to override a value in the current coroutine's context using the `Context::override()` method in Hyperf. The `override()` method takes a key and a closure as input. The closure receives the current value (if it exists) and returns the new value to be stored in the context.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/coroutine.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Hyperf\\Context\\Context;\n\n// 從協程上下文取出 $request 物件並設定 key 為 foo 的 Header，然後再儲存到協程上下文中\n$request = Context::override(ServerRequestInterface::class, function (ServerRequestInterface $request) {\n    return $request->withAddedHeader('foo', 'bar');\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Command in Hyperf Nano\nDESCRIPTION: Demonstrates how to add a command to a Hyperf Nano application. This example adds a command named 'echo' that logs a message to the console. Requires the `hyperf/nano` package and `Hyperf\\Contract\\StdoutLoggerInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nano.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addCommand('echo', function(){\n    $this->get(StdoutLoggerInterface::class)->info('A new command called echo!');\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Daily Log Rotation\nDESCRIPTION: This code snippet demonstrates how to configure daily log rotation using `Monolog\\Handler\\RotatingFileHandler`. This handler automatically rotates log files based on the date, creating a new file each day.  The 'stream' parameter is replaced with 'filename'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/logger.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'handler' => [\n            'class' => Monolog\\Handler\\RotatingFileHandler::class,\n            'constructor' => [\n                'filename' => BASE_PATH . '/runtime/logs/hyperf.log',\n                'level' => Monolog\\Level::Debug,\n            ],\n        ],\n        'formatter' => [\n            'class' => Monolog\\Formatter\\LineFormatter::class,\n            'constructor' => [\n                'format' => null,\n                'dateFormat' => null,\n                'allowInlineLineBreaks' => true,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Generating NSQ Consumer\nDESCRIPTION: This command generates a consumer class named `DemoConsumer` using the Hyperf console tool.  This provides a starting point for handling NSQ messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nsq.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php gen:nsq-consumer DemoConsumer\n```\n\n----------------------------------------\n\nTITLE: Installing Tencent Cloud COS Adapter (Flysystem v1.0)\nDESCRIPTION: Install the Tencent Cloud COS adapter for Flysystem v1.0, using overtrue/flysystem-cos v3.0. This allows interacting with Tencent Cloud Object Storage. Requires PHP and Composer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/filesystem.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-cos:^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Customize Validation Attributes\nDESCRIPTION: Overrides the attributes() method in a FormRequest class to define custom attribute names for use in validation messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n/**\n * 獲取驗證錯誤的自定義屬性\n */\npublic function attributes(): array\n{\n    return [\n        'foo' => 'foo of request',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Pivot Table Data (PHP)\nDESCRIPTION: This PHP snippet illustrates how to conditionally include data from a pivot table in a many-to-many relationship using `whenPivotLoaded`. The 'expires_at' key is added only if the 'role_user' pivot table is loaded, and the value is extracted from the pivot data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'expires_at' => $this->whenPivotLoaded('role_user', function () {\n                return $this->pivot->expires_at;\n            }),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Snowflake Configuration File\nDESCRIPTION: This code shows the default configuration file for the Snowflake component in Hyperf. It configures the Redis-based meta generator, specifying the Redis pool and key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/snowflake.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Snowflake\\MetaGenerator\\RedisMilliSecondMetaGenerator;\nuse Hyperf\\Snowflake\\MetaGenerator\\RedisSecondMetaGenerator;\nuse Hyperf\\Snowflake\\MetaGeneratorInterface;\n\nreturn [\n    'begin_second' => MetaGeneratorInterface::DEFAULT_BEGIN_SECOND,\n    RedisMilliSecondMetaGenerator::class => [\n        // Redis Pool\n        'pool' => 'default',\n        // 用於計算 WorkerId 的 Key 鍵\n        'key' => RedisMilliSecondMetaGenerator::DEFAULT_REDIS_KEY\n    ],\n    RedisSecondMetaGenerator::class => [\n        // Redis Pool\n        'pool' => 'default',\n        // 用於計算 WorkerId 的 Key 鍵\n        'key' => RedisMilliSecondMetaGenerator::DEFAULT_REDIS_KEY\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in HTTP Requests\nDESCRIPTION: This snippet shows how to send cookies with a request using the `Hyperf\\Testing\\Client`. It initializes a request, sets cookie parameters, sends the request, and then decodes the JSON response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/testing.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Testing\\Client;\nuse Hyperf\\Codec\\Json;\n\n$client = make(Client::class);\n\n$response = $client->sendRequest($client->initRequest('POST', '/request')->withCookieParams([\n    'X-CODE' => $id = uniqid(),\n]));\n\n$data = Json::decode((string) $response->getBody());\n```\n\n----------------------------------------\n\nTITLE: Retrieving the First Error Message for a Field in Hyperf\nDESCRIPTION: This PHP code retrieves the first error message associated with the 'foo' field from the validator's error bag.  It accesses the errors through the `errors()` method of the Validator instance, and uses the `first()` method of the `MessageBag` to retrieve the error.  This is useful for displaying a single, relevant error message to the user.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$errors = $validator->errors();\n\necho $errors->first('foo');\n```\n\n----------------------------------------\n\nTITLE: Initializing ClassLoader in PHPUnit Bootstrap (tests/bootstrap.php)\nDESCRIPTION: This code snippet shows how to initialize the ClassLoader in the PHPUnit bootstrap file (tests/bootstrap.php). Similar to the entry point, this is necessary for AOP to function correctly during testing. The `Hyperf\\Di\\ClassLoader::init();` line is added after including the autoloader.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.0.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nerror_reporting(E_ALL);\ndate_default_timezone_set('Asia/Shanghai');\n\n! defined('BASE_PATH') && define('BASE_PATH', dirname(__DIR__, 1));\n! defined('SWOOLE_HOOK_FLAGS') && define('SWOOLE_HOOK_FLAGS', SWOOLE_HOOK_ALL);\n\nSwoole\\Runtime::enableCoroutine(true);\n\nrequire BASE_PATH . '/vendor/autoload.php';\n\nHyperf\\Di\\ClassLoader::init();\n\n$container = require BASE_PATH . '/config/container.php';\n\n$container->get(Hyperf\\Contract\\ApplicationInterface::class);\n\n```\n\n----------------------------------------\n\nTITLE: Annotation Middleware Configuration with Priority\nDESCRIPTION: This code snippet shows how to configure annotation middleware with priority.  Priority can be set by defining the middleware as a key-value pair, where the key is the middleware class and the value is the priority. Higher priority middleware is executed earlier.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/middleware/middleware.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n// 註解中間件配置\n#[AutoController]\n#[Middleware(FooMiddleware::class)]\n#[Middleware(FooMiddlewareB::class, 3)]\n#[Middlewares([FooMiddlewareC::class => 1, BarMiddlewareD::class => 4])]\nclass IndexController\n{\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Set Help Configuration (PHP)\nDESCRIPTION: This code snippet demonstrates setting the help text for a command using the `setHelp` method within the `configure` method. This provides a description of the command's purpose when the `--help` option is used.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->setHelp('Hyperf\\'s custom command demonstration');\n}\n```\n\n----------------------------------------\n\nTITLE: Define Return Object - Hyperf\nDESCRIPTION: This snippet shows how to define a simple PHP object MathValue with a public property value for use in Hyperf JsonRpc services. It includes a constructor to set the initial value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/json-rpc.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\JsonRpc;\n\nclass MathValue\n{\n    public $value;\n\n    public function __construct($value)\n    {\n        $this->value = $value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Middleware\nDESCRIPTION: This snippet shows how to configure the `SessionMiddleware` as a global middleware for the HTTP server in Hyperf. This is necessary for the session component to intercept requests and manage session data. The `http` key corresponds to the default server name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/session.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    // 這裏的 http 對應默認的 server name，如您需要在其它 server 上使用 Session，需要對應的配置全局中間件\n    'http' => [\n        \\Hyperf\\Session\\Middleware\\SessionMiddleware::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Initialize ClassLoader in Entry File - PHP\nDESCRIPTION: This snippet demonstrates the required initialization of the ClassLoader in the `bin/hyperf.php` entry file. This is necessary due to changes in the AOP logic in Hyperf 2.0. The `Hyperf\\Di\\ClassLoader::init();` line must be added as the first line within the anonymous function.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/2.0.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nini_set('display_errors', 'on');\nini_set('display_startup_errors', 'on');\n\nerror_reporting(E_ALL);\ndate_default_timezone_set('Asia/Shanghai');\n\n! defined('BASE_PATH') && define('BASE_PATH', dirname(__DIR__, 1));\n! defined('SWOOLE_HOOK_FLAGS') && define('SWOOLE_HOOK_FLAGS', SWOOLE_HOOK_ALL);\n\nrequire BASE_PATH . '/vendor/autoload.php';\n\n// Self-called anonymous function that creates its own scope and keep the global namespace clean.\n(function () {\n    Hyperf\\Di\\ClassLoader::init();\n\n    /** @var \\Psr\\Container\\ContainerInterface $container */\n    $container = require BASE_PATH . '/config/container.php';\n\n    $application = $container->get(\\Hyperf\\Contract\\ApplicationInterface::class);\n    $application->run();\n})();\n\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Phar\nDESCRIPTION: This command installs the Hyperf Phar packager using Composer, the PHP package manager. It adds the `hyperf/phar` package as a dependency to your project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/phar.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/phar\n```\n\n----------------------------------------\n\nTITLE: Environment Directives (Blade)\nDESCRIPTION: This Blade template uses the `@production` and `@env` directives to conditionally render content based on the application's environment. `@env` can take a single environment or an array of environments.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n@production\n    // 生產環境特定內容……\n@endproduction\n\n@env('staging')\n    // 應用運行於「staging」環境……\n@endenv\n\n@env(['staging', 'production'])\n    // 應用運行於 「staging」環境或生產環境……\n@endenv\n```\n\n----------------------------------------\n\nTITLE: Install Config Center\nDESCRIPTION: This shell command installs the `hyperf/config-center` component using composer.  The Config Center component has been completely refactored, and users need to reinstall it and reconfigure it according to the new documentation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.2.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"hyperf/config-center:~2.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Demo Logic Class - PHP\nDESCRIPTION: A demo logic class `DemoLogic` that depends on `DemoApi`.  It uses constructor injection to receive an instance of the API. The `test` method simply calls the `test` method of the injected `DemoApi` and returns the result.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/testing.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Logic;\n\nuse App\\Api\\DemoApi;\n\nclass DemoLogic\n{\n    private DemoApi $demoApi;\n\n    public function __construct(DemoApi $demoApi)\n    {\n       $this->demoApi = $demoApi;\n    }\n\n    public function test()\n    {\n        $result = $this->demoApi->test();\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Assignment: Defining fillable Attributes in Hyperf\nDESCRIPTION: This code defines the `$fillable` attribute on the `User` model, specifying which attributes can be mass-assigned. This is a security measure to prevent unexpected parameters from being used to modify sensitive fields. Only the `name` attribute is allowed to be mass-assigned.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected array $fillable = ['name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Table Options in Hyperf Migration\nDESCRIPTION: This code demonstrates how to specify table options such as engine, charset, collation, and temporary status within a Hyperf migration. These options control the storage and behavior of the created table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// 指定表存儲引擎\n$table->engine = 'InnoDB';\n// 指定數據表的默認字符集\n$table->charset = 'utf8';\n// 指定數據表默認的排序規則\n$table->collation = 'utf8_unicode_ci';\n// 創建臨時表\n$table->temporary();\n```\n\n----------------------------------------\n\nTITLE: DemoLogic with #[Inject] Dependency Injection\nDESCRIPTION: Demonstrates the `DemoLogic` class again, this time using the `#[Inject]` attribute for dependency injection of the `DemoApi` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Logic;\n\nuse App\\Api\\DemoApi;\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass DemoLogic\n{\n    #[Inject]\n    private DemoApi $demoApi;\n\n    public function test()\n    {\n        $result = $this->demoApi->test();\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Swagger Configuration\nDESCRIPTION: This command publishes the default configuration file for the hyperf/swagger component to your project, allowing you to customize its settings. It uses the `vendor:publish` command provided by Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/swagger.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/swagger\n```\n\n----------------------------------------\n\nTITLE: Dimensions Validation with Min and Max\nDESCRIPTION: The `dimensions` rule validates that an image has the specified dimensions. This example shows how to set minimum width and height constraints.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\n'avatar' => 'dimensions:min_width=100,min_height=200'\n```\n\n----------------------------------------\n\nTITLE: Hyperf Nano DI Container Example\nDESCRIPTION: Shows how to use the dependency injection container in a Hyperf Nano application.  It binds a class to the container and retrieves it within a route closure using the ContainerProxy.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nano.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Nano\\ContainerProxy;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nclass Foo {\n    public function bar() {\n        return 'bar';\n    }   \n}\n\n$app = AppFactory::create();\n$app->getContainer()->set(Foo::class, new Foo());\n\n$app->get('/', function () {\n    /** @var ContainerProxy $this */\n    $foo = $this->get(Foo::class);\n    return $foo->bar();\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Using Constant Frequency - PHP\nDESCRIPTION: This snippet shows how to configure the connection pool to use the `ConstantFrequency` component, which releases idle connections at a fixed interval.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/pool.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\DbConnection\\Frequency::class => Hyperf\\Pool\\ConstantFrequency::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Where Clauses in Search\nDESCRIPTION: This example adds a `where` clause to the search query to filter results based on a specific condition. This supports basic numerical equality checks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->where('user_id', 1)->get();\n```\n\n----------------------------------------\n\nTITLE: Accessing the Loop Variable in Blade\nDESCRIPTION: This Blade template shows how to access the `$loop` variable within a `@foreach` loop to get information about the current iteration, such as whether it is the first or last iteration, or the depth of the loop if it's nested.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_22\n\nLANGUAGE: blade\nCODE:\n```\n@foreach ($users as $user)\n    @if ($loop->first)\n        This is the first iteration.\n    @endif\n\n    @if ($loop->last)\n        This is the last iteration.\n    @endif\n\n    <p>This is user {{ $user->id }}</p>\n@endforeach\n```\n\nLANGUAGE: blade\nCODE:\n```\n@foreach ($users as $user)\n    @foreach ($user->posts as $post)\n        @if ($loop->parent->first)\n            This is first iteration of the parent loop.\n        @endif\n    @endforeach\n@endforeach\n```\n\n----------------------------------------\n\nTITLE: Custom Annotation Collector Configuration PHP\nDESCRIPTION: This snippet demonstrates how to configure a custom annotation collector in Hyperf. The `collectors` array within the `annotations.scan` configuration is used to specify the classes that will be used to collect annotation metadata. This ensures that the custom collector is properly initialized and used by the framework.  The configuration ensures that the annotation collector is cached.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/annotation.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    // 注意在 config/autoload 文件下的配置文件則無 annotations 這一層\n    'annotations' => [\n        'scan' => [\n            'collectors' => [\n                CustomCollector::class,\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Install League Flysystem AWS S3 Adapter\nDESCRIPTION: This shell command installs the `league/flysystem-aws-s3-v3` and `hyperf/guzzle` adapter using composer, required to work with AWS S3 for file storage in Hyperf. The correct version constraints for flysystem v2.0 are also given.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.2.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"league/flysystem-aws-s3-v3:^2.0\"\ncomposer require hyperf/guzzle\n```\n\n----------------------------------------\n\nTITLE: Generating a Constant Class\nDESCRIPTION: This snippet shows the Hyperf command to generate a constant class using the `gen:constant` command.  The `--type enum` option specifies that an enum class should be generated.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/constants.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:constant ErrorCode --type enum\n```\n\n----------------------------------------\n\nTITLE: Hyperf View Engine Configuration\nDESCRIPTION: This configuration array defines the view engine class, rendering mode (SYNC is recommended), view and cache paths, custom components, and namespaces. The 'SYNC' mode minimizes inter-process communication overhead.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'engine' => Hyperf\\ViewEngine\\HyperfViewEngine::class,\n    'mode' => Hyperf\\View\\Mode::SYNC,\n    'config' => [\n        'view_path' => BASE_PATH.'/storage/view/',\n        'cache_path' => BASE_PATH.'/runtime/view/',\n    ],\n\n    # Custom component registration\n    'components' => [\n        //'alert' => \\App\\View\\Components\\Alert::class\n    ],\n\n    # View namespace (mainly used in extension packages)\n    'namespaces' => [\n        //'admin' => BASE_PATH.'/storage/view/vendor/admin',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Log Handlers - Hyperf/Monolog (PHP)\nDESCRIPTION: This configuration demonstrates how to set up multiple handlers for the 'default' log group in Hyperf. It configures two stream handlers, one writing to 'hyperf.log' with an Info level and another to 'hyperf-debug.log' with an Info level, but using JsonFormatter. This allows directing logs of different formats or levels to different files.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/logger.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Monolog\\Handler;\nuse Monolog\\Formatter;\nuse Monolog\\Level;\n\nreturn [\n    'default' => [\n        'handlers' => [\n            [\n                'class' => Handler\\StreamHandler::class,\n                'constructor' => [\n                    'stream' => BASE_PATH . '/runtime/logs/hyperf.log',\n                    'level' => Level::Info,\n                ],\n                'formatter' => [\n                    'class' => Formatter\\LineFormatter::class,\n                    'constructor' => [\n                        'format' => null,\n                        'dateFormat' => null,\n                        'allowInlineLineBreaks' => true,\n                    ],\n                ],\n            ],\n            [\n                'class' => Handler\\StreamHandler::class,\n                'constructor' => [\n                    'stream' => BASE_PATH . '/runtime/logs/hyperf-debug.log',\n                    'level' => Level::Info,\n                ],\n                'formatter' => [\n                    'class' => Formatter\\JsonFormatter::class,\n                    'constructor' => [\n                        'batchMode' => Formatter\\JsonFormatter::BATCH_MODE_JSON,\n                        'appendNewline' => true,\n                    ],\n                ],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Kafka\nDESCRIPTION: This command installs the hyperf/kafka component using Composer.  It adds the Kafka integration library as a dependency to your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/kafka.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/kafka\n```\n\n----------------------------------------\n\nTITLE: Publish Hyperf Swagger Configuration\nDESCRIPTION: Publishes the default configuration file for the hyperf/swagger component. This command copies the configuration file from the package's vendor directory to the project's config directory, allowing customization of the Swagger document generator.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/swagger.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/swagger\n```\n\n----------------------------------------\n\nTITLE: Creating a Table (php)\nDESCRIPTION: This code demonstrates creating a new database table using the `Schema::create` method. The first argument is the table name, and the second is a closure that receives a `Blueprint` instance for defining the table schema. It shows the basics of defining columns within a migration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Database\\Schema\\Schema;\nuse Hyperf\\Database\\Schema\\Blueprint;\nuse Hyperf\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    public function up(): void\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->timestamps();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Service Discovery for Manual Consumer\nDESCRIPTION: Configures service discovery for the manual service consumer in services.php to retrieve node information from Consul. It defines the registry protocol and address.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/json-rpc.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // 此處省略了其它同層級的配置\n    'consumers' => [\n        [\n            // 對應消費者類的 $serviceName\n            'name' => 'CalculatorService',\n            // 這個消費者要從哪個服務中心獲取節點信息，如不配置則不會從服務中心獲取節點信息\n            'registry' => [\n                'protocol' => 'consul',\n                'address' => 'http://127.0.0.1:8500',\n            ],\n            // 如果沒有指定上面的 registry 配置，即為直接對指定的節點進行消費，通過下面的 nodes 參數來配置服務提供者的節點信息\n            'nodes' => [\n                ['host' => '127.0.0.1', 'port' => 9504],\n            ],\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Regex Validation\nDESCRIPTION: The `regex:pattern` rule validates that the field under validation matches the given regular expression.  The regular expression must be enclosed in delimiters and must follow the format required by PHP's `preg_match` function.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\n 'email' => 'regex:/^.+@.+$/i'\n```\n\n----------------------------------------\n\nTITLE: Installing hyperf/database in other frameworks\nDESCRIPTION: Installs the `hyperf/database` package using Composer. This component can be used in other PHP frameworks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/quick-start.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/database\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Middleware with Middlewares Annotation - PHP\nDESCRIPTION: This code snippet shows how to define multiple middleware for a controller using the `#[Middlewares]` annotation.  Requires `use Hyperf\\HttpServer\\Annotation\\Middlewares;` and should be used with `#[AutoController]` or `#[Controller]`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/middleware/middleware.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Middleware\\BarMiddleware;\nuse App\\Middleware\\FooMiddleware;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\HttpServer\\Annotation\\Middleware;\nuse Hyperf\\HttpServer\\Annotation\\Middlewares;\n\n#[AutoController]\n#[Middlewares([FooMiddleware::class, BarMiddleware::class])]\nclass IndexController\n{\n    public function index()\n    {\n        return 'Hello Hyperf.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Uploaded File - PHP\nDESCRIPTION: Demonstrates how to validate if an uploaded file is valid using the `isValid()` method of the `UploadedFile` object. Returns a boolean.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nif ($request->file('photo')->isValid()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Interface to Factory\nDESCRIPTION: Binds the UserServiceInterface to the UserServiceFactory in the dependencies.php configuration file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    \\App\\Service\\UserServiceInterface::class => \\App\\Service\\UserServiceFactory::class\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring ClassMap for Guzzle Client Replacement - PHP\nDESCRIPTION: Configures the class map in annotations.php to replace the Guzzle Client class with a custom implementation. This custom implementation (defined in the previous snippet) enables coroutine-based HTTP requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/guzzle.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse GuzzleHttp\\Client;\n\nreturn [\n    'scan' => [\n        // ...\n        'class_map' => [\n            Client::class => BASE_PATH . '/class_map/GuzzleHttp/Client.php',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Listening for MetricFactoryReady Event\nDESCRIPTION: Demonstrates listening for the `MetricFactoryReady` event to collect metrics for the entire lifecycle, such as asynchronous queue length or inventory quantity. Uses a gauge to track the queue length from Redis.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Metric\\Event\\MetricFactoryReady;\nuse Psr\\Container\\ContainerInterface;\nuse Redis;\n\nclass OnMetricFactoryReady implements ListenerInterface\n{\n    protected ContainerInterface $container;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n    }\n\n    public function listen(): array\n    {\n        return [\n            MetricFactoryReady::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        $redis = $this->container->get(Redis::class);\n        $gauge = $event\n                    ->factory\n                    ->makeGauge('queue_length', ['driver'])\n                    ->with('redis');\n        while (true) {\n            $length = $redis->llen('queue');\n            $gauge->set($length);\n            sleep(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @verbatim Directive in Blade\nDESCRIPTION: This Blade template shows how to use the `@verbatim` directive to include large sections of JavaScript or other code without requiring the `@` symbol before each Blade echo statement.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n@verbatim\n    <div class=\"container\">\n        Hello, {{ name }}.\n    </div>\n@endverbatim\n```\n\n----------------------------------------\n\nTITLE: Displaying Data in Blade\nDESCRIPTION: This Blade template demonstrates how to display data passed from the controller using double curly braces `{{ }}`.  It displays the value of the `$name` variable, which will be automatically escaped to prevent XSS attacks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\nHello, {{ $name }}.\n```\n\n----------------------------------------\n\nTITLE: Publish Filesystem Configuration (Shell)\nDESCRIPTION: This command publishes the default filesystem configuration file (`config/autoload/file.php`) to the application's configuration directory, allowing for customization of the filesystem settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/filesystem.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/filesystem\n```\n\n----------------------------------------\n\nTITLE: Getting a Column of Values - PHP\nDESCRIPTION: This snippet demonstrates retrieving a single column of values from a database table using the `pluck()` method. The first example retrieves the 'name' column from the 'user' table and iterates through the results. The second example retrieves 'title' column as values and 'name' column as keys from the 'roles' table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$names = Db::table('user')->pluck('name');\n\nforeach ($names as $name) {\n    echo $name;\n}\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$roles = Db::table('roles')->pluck('title', 'name');\n\nforeach ($roles as $name => $title) {\n    echo $title;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Annotation Class\nDESCRIPTION: This code snippet shows how to define a custom annotation class in Hyperf. The class extends `AbstractAnnotation` and uses the `Attribute` attribute to define the targets where the annotation can be applied (class and method). The constructor defines the parameters that the annotation can accept (`bar` as an array and `baz` as an integer with a default value of 0). The annotation class can then be used throughout the application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/annotation.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Annotation;\n\nuse Attribute;\nuse Hyperf\\Di\\Annotation\\AbstractAnnotation;\n\n#[Attribute(Attribute::TARGET_CLASS | Attribute::TARGET_METHOD)]\nclass Foo extends AbstractAnnotation\n{\n    public function __construct(public array $bar, public int $baz = 0)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define .proto File\nDESCRIPTION: This snippet defines a .proto file named `grpc.proto` for gRPC communication. It specifies the `Hi` service with a `SayHello` RPC method, along with the `HiUser` and `HiReply` message types. This file is used to generate the corresponding PHP classes for gRPC.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/grpc.md#_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage grpc;\n\nservice Hi {\n    rpc SayHello (HiUser) returns (HiReply) {\n    }\n}\n\nmessage HiUser {\n    string name = 1;\n    int32 sex = 2;\n}\n\nmessage HiReply {\n    string message = 1;\n    HiUser user = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Tables (PHP)\nDESCRIPTION: These lines show how to drop a table using the Schema builder's `drop` and `dropIfExists` methods. `drop` will throw an error if the table doesn't exist, while `dropIfExists` will not.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nSchema::drop('users');\n\nSchema::dropIfExists('users');\n```\n\n----------------------------------------\n\nTITLE: Registering QueueLengthListener\nDESCRIPTION: This code demonstrates how to register the `QueueLengthListener` in the `listeners` configuration.  This listener will log the length of the queue periodically.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    Hyperf\\AsyncQueue\\Listener\\QueueLengthListener::class\n];\n\n```\n\n----------------------------------------\n\nTITLE: Nesting DAGs in PHP\nDESCRIPTION: This example shows how to nest DAGs by using a Dag instance as a task within another Dag. This is possible because \\Hyperf\\Dag\\Dag implements the \\Hyperf\\Dag\\Runner interface. Namespaces are omitted for brevity.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/dag/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// 命名空间已省略\n$a = Vertex::make(function () { return 1;});\n$b = Vertex::make(function () { return 2;});\n$c = Vertex::make(function () { return 3;});\n\n$nestedDag = new Dag();\n$nestedDag->addVertex($a)->addVertex($b)->addEdge($a, $b);\n$d = Vertex::of($nestedDag);\n\n$superDag = new Dag();\n$superDag->addVertex($c)->addVertex($d)->addEdge($c, $d);\n$superDag->run();\n```\n\n----------------------------------------\n\nTITLE: Simple GraphQL Query\nDESCRIPTION: A simple GraphQL query that calls the `hello` query defined in the GraphQLController, passing a name as an argument.  It returns the name provided.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/graphql.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    hello(name: \"graphql\")\n}\n```\n\n----------------------------------------\n\nTITLE: Install Qiniu Adapter (Flysystem v3.0)\nDESCRIPTION: This command installs the Qiniu adapter for Flysystem v3.0, enabling integration with Qiniu cloud storage services.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/filesystem.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-qiniu:^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Exception Handler in Hyperf\nDESCRIPTION: This snippet demonstrates how to define a custom exception handler in Hyperf by extending the `Hyperf\\ExceptionHandler\\ExceptionHandler` class. The `handle` method checks if the caught exception is a `FooException`. If so, it formats the output, stops propagation, and returns a customized error response.  The `isValid` method determines if this handler should process the exception.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/exception-handler.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Exception\\Handler;\n\nuse Hyperf\\ExceptionHandler\\ExceptionHandler;\nuse Hyperf\\HttpMessage\\Stream\\SwooleStream;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse App\\Exception\\FooException;\nuse Throwable;\n\nclass FooExceptionHandler extends  ExceptionHandler\n{\n    public function handle(Throwable $throwable, ResponseInterface $response)\n    {\n        // 判斷被捕獲到的異常是希望被捕獲的異常\n        if ($throwable instanceof FooException) {\n            // 格式化輸出\n            $data = json_encode([\n                'code' => $throwable->getCode(),\n                'message' => $throwable->getMessage(),\n            ], JSON_UNESCAPED_UNICODE);\n\n            // 阻止異常冒泡\n            $this->stopPropagation();\n            return $response->withStatus(500)->withBody(new SwooleStream($data));\n        }\n\n        // 交給下一個異常處理器\n        return $response;\n\n        // 或者不做處理直接遮蔽異常\n    }\n\n    /**\n     * 判斷該異常處理器是否要對該異常進行處理\n     */\n    public function isValid(Throwable $throwable): bool\n    {\n        return true;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Disable Foreign Key Constraints in Hyperf Schema\nDESCRIPTION: This code snippet demonstrates how to disable foreign key constraints during database migrations in a Hyperf application. This is useful when performing operations that might violate foreign key constraints.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n// 禁用外鍵約束\nSchema::disableForeignKeyConstraints();\n```\n\n----------------------------------------\n\nTITLE: Add Error Exception Listener - Hyperf PHP\nDESCRIPTION: Adds the `ErrorExceptionHandler` listener to the `config/autoload/listeners.php` file.  This listener converts PHP `error_reporting()` level errors into `ErrorException` exceptions, allowing them to be caught and handled by the exception handling system.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/exception-handler.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    \\Hyperf\\ExceptionHandler\\Listener\\ErrorExceptionHandler::class\n];\n```\n\n----------------------------------------\n\nTITLE: Where Not In - PHP\nDESCRIPTION: Shows how to use the `whereNotIn()` method to filter results based on a set of values. This method verifies that a field's value is not one of the values in the specified array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->whereNotIn('id', [1, 2, 3])->get();\n```\n\n----------------------------------------\n\nTITLE: Generating a Resource Class in Hyperf\nDESCRIPTION: Generates a resource class named 'User' using the 'gen:resource' command. The resource class will be placed in the 'app/Resource' directory. The generated resource extends 'Hyperf\\Resource\\Json\\JsonResource'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:resource User\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Scout and Elasticsearch\nDESCRIPTION: This code snippet shows how to install the hyperf/scout package and the hyperf/elasticsearch driver using composer. These are required dependencies for implementing full-text search in Hyperf models.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/scout\ncomposer require hyperf/elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Define a Resource Collection Class\nDESCRIPTION: Defines a resource collection class, extending `ResourceCollection`. The `toArray` method defines how the collection is transformed, allowing you to add metadata or links to the response along with the data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     * @return array\n     */\n    public function toArray() :array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Apply Scene to Request\nDESCRIPTION: Demonstrates how to apply a specific scene to a request. Gets the SceneRequest from the container, sets the scene using the scene() method, and validates the request using validateResolved().\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Request\\DebugRequest;\nuse App\\Request\\SceneRequest;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController(prefix: 'foo')]\nclass FooController extends Controller\n{\n    public function scene()\n    {\n        $request = $this->container->get(SceneRequest::class);\n        $request->scene('foo')->validateResolved();\n\n        return $this->response->success($request->all());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Consumer Auto-Start - Override isEnable Method\nDESCRIPTION: This code shows how to disable the automatic start of a consumer process by overriding the `isEnable()` method in the consumer class.  Returning `false` from this method prevents the consumer from starting automatically when the application starts.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nsq.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Nsq\\Consumer;\n\nuse Hyperf\\Nsq\\AbstractConsumer;\nuse Hyperf\\Nsq\\Annotation\\Consumer;\nuse Hyperf\\Nsq\\Message;\nuse Hyperf\\Nsq\\Result;\nuse Psr\\Container\\ContainerInterface;\n\n#[Consumer(topic: \"demo_topic\", channel: \"demo_channel\", name: \"DemoConsumer\", nums: 1)]\nclass DemoConsumer extends AbstractConsumer\n{\n    public function __construct(ContainerInterface $container)\n    {\n        parent::__construct($container);\n    }\n\n    public function isEnable(): bool \n    {\n        return false;\n    }\n\n    public function consume(Message $payload): string\n    {\n        $body = json_decode($payload->getBody(), true);\n        var_dump($body);\n        return Result::ACK;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Component Method in View - HTML\nDESCRIPTION: Shows how to call a component's public method from its view. The method is accessed as a variable with the same name as the method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_32\n\nLANGUAGE: html\nCODE:\n```\n    <option {{ $isSelected($value) ? 'selected=\"selected\"' : '' }} value=\"{{ $value }}\">\n        {{ $label }}\n    </option>\n```\n\n----------------------------------------\n\nTITLE: Priority Definition Config\nDESCRIPTION: Example of using PriorityDefinition for DI configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse FooInterface;\nuse Foo;\n\nreturn [\n    'dependencies' => [\n        FooInterface::class => new PriorityDefinition(Foo::class, 1),\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Modify PID File Path in server.php\nDESCRIPTION: Updates the `pid_file` setting in `server.php` to a writable location within the `/tmp/runtime` directory.  This configuration change is necessary because the `runtime` directory inside a Phar archive is not writable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/phar.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'settings' => [\n        'pid_file' => '/tmp/runtime/hyperf.pid',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: If Statements (Blade)\nDESCRIPTION: This Blade template demonstrates the use of `@if`, `@elseif`, `@else`, and `@endif` directives for conditional statements.  It also shows the use of `@unless`, `@isset`, and `@empty` for checking conditions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_13\n\nLANGUAGE: blade\nCODE:\n```\n@if (count($records) === 1)\n    I have one record!\n@elseif (count($records) > 1)\n    I have multiple records!\n@else\n    I don't have any records!\n@endif\n\n@unless (is_signed_in())\n    You are not signed in.\n@endunless\n\n@isset($records)\n    // $records 已經定義但不為空\n@endisset\n\n@empty($records)\n    // $records 為空……\n@endempty\n```\n\n----------------------------------------\n\nTITLE: Install WebSocket Server Component - PHP\nDESCRIPTION: This command installs the hyperf/websocket-server component using Composer, enabling WebSocket functionality in a Hyperf project. It fetches and integrates the necessary dependencies for building WebSocket applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/websocket-server.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/websocket-server\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf ETCD\nDESCRIPTION: This command installs the Hyperf ETCD component using Composer, a dependency manager for PHP. This allows you to interact with an ETCD cluster from your Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/etcd.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/etcd\n```\n\n----------------------------------------\n\nTITLE: Component Dependency Injection (PHP)\nDESCRIPTION: This code demonstrates dependency injection into a component's constructor. By listing the dependencies (e.g., `AlertCreator`) before the data properties, the container automatically injects the dependencies before the component receives its data. This allows access to services and other classes within components.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n    use App\\AlertCreator;\n    /**\n     * 创建组件实例\n     *\n     * @param  \\App\\AlertCreator  $creator\n     * @param  string  $type\n     * @param  string  $message\n     * @return void\n     */\n    public function __construct(AlertCreator $creator, $type, $message)\n    {\n        $this->creator = $creator;\n        $this->type = $type;\n        $this->message = $message;\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Whoops for Hyperf\nDESCRIPTION: This PHP code snippet shows the composer command to install Whoops as a development dependency in a Hyperf project. Whoops is used for providing better error reporting during development.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/exception-handler.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ncomposer require --dev filp/whoops\n```\n\n----------------------------------------\n\nTITLE: Prometheus Scrape Mode Configuration\nDESCRIPTION: Configures Prometheus to use the scrape mode, requiring the scrape host, port, and path to be set. The `use_standalone_process` must be true in asynchronous style.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n'mode' => Constants::SCRAPE_MODE\n```\n\n----------------------------------------\n\nTITLE: Server Configuration for Hyperf RPC Multiplex\nDESCRIPTION: Configures the Hyperf RPC server with multiplexing enabled. The 'settings' configuration defines the packet structure and maximum packet size, which must match the client configuration. 'send_channel_capacity' is added to prevent multi-coroutine write errors.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/rpc-multiplex.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\nuse Hyperf\\Server\\Server;\n\nreturn [\n    'servers' => [\n        [\n            'name' => 'rpc',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9502,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_RECEIVE => [Hyperf\\RpcMultiplex\\TcpServer::class, 'onReceive'],\n            ],\n            'settings' => [\n                'open_length_check' => true,\n                'package_length_type' => 'N',\n                'package_length_offset' => 0,\n                'package_body_offset' => 4,\n                'package_max_length' => 1024 * 1024 * 2,\n            ],\n            'options' => [\n                // 多路複用下，避免跨協程 Socket 跨協程多寫報錯\n                'send_channel_capacity' => 65535,\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Coroutine Class (Context Copy) PHP\nDESCRIPTION: This code defines a custom `Coroutine` class for handling coroutine creation and context management in Hyperf. It extends the base Hyperf coroutine functionality to ensure that certain contexts, such as request IDs and server request interfaces, are copied from the parent coroutine to the newly created coroutine. This enables proper propagation of request-specific information across coroutines. This is a first version of the Coroutine file that uses the App\\Kernel namespace.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/annotation.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n *\n * @link     https://www.hyperf.io\n * @document https://hyperf.wiki\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\n\nnamespace App\\Kernel\\Context;\n\nuse App\\Kernel\\Log\\AppendRequestIdProcessor;\nuse Hyperf\\Context\\Context;\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Engine\\Coroutine as Co;\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Log\\LoggerInterface;\nuse Throwable;\n\nclass Coroutine\n{\n    protected LoggerInterface $logger;\n\n    public function __construct(protected ContainerInterface $container)\n    {\n        $this->logger = $container->get(StdoutLoggerInterface::class);\n    }\n\n    /**\n     * @return int Returns the coroutine ID of the coroutine just created.\n     *             Returns -1 when coroutine create failed.\n     */\n    public function create(callable $callable): int\n    {\n        $id = Co::id();\n        $coroutine = Co::create(function () use ($callable, $id) {\n            try {\n                // Shouldn't copy all contexts to avoid socket already been bound to another coroutine.\n                Context::copy($id, [\n                    AppendRequestIdProcessor::REQUEST_ID,\n                    ServerRequestInterface::class,\n                ]);\n                $callable();\n            } catch (Throwable $throwable) {\n                $this->logger->warning((string) $throwable);\n            }\n        });\n\n        try {\n            return $coroutine->getId();\n        } catch (Throwable $throwable) {\n            $this->logger->warning((string) $throwable);\n            return -1;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Interface to Implementation PHP\nDESCRIPTION: Configures the dependency injection container to bind the UserServiceInterface to the UserService implementation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    \\App\\Service\\UserServiceInterface::class => \\App\\Service\\UserService::class\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Table Name\nDESCRIPTION: This snippet shows how to define a custom table name for a model using the `$table` property. By default, Hyperf uses the plural form of the class name in snake_case.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected ?string $table = 'user';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Task with a Runner Class in Hyperf DAG\nDESCRIPTION: This snippet demonstrates defining a task using a class that implements the `\\Hyperf\\Dag\\Runner` interface. The `run` method of the class defines the task's execution logic. `Vertex::of` then converts an instance of this class into a vertex.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/dag.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass MyJob implements \\Hyperf\\Dag\\Runner {\n    public function run($results = []) {\n        return 'hello';\n    }\n}\n\n\\Hyperf\\Dag\\Vertex::of(new MyJob(), \"greeting\");\n```\n\n----------------------------------------\n\nTITLE: Build Phar Archive (Custom Path)\nDESCRIPTION: Builds a Phar archive with a custom packaging directory using the `--path` option.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/phar.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nphp bin/hyperf.php phar:build --path=BASE_PATH\n```\n\n----------------------------------------\n\nTITLE: Get Total Item Count\nDESCRIPTION: This example shows how to get the total number of items across all pages. Note that the `total()` method is only available on `Hyperf\\Paginator\\LengthAwarePaginator`, not `Hyperf\\Paginator\\Paginator`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/paginator.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$total = $paginator->total();\n```\n\n----------------------------------------\n\nTITLE: DemoApi Implementation\nDESCRIPTION: Defines a simple `DemoApi` class with a `test` method that returns an array containing a status code.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Api;\n\nclass DemoApi\n{\n    public function test()\n    {\n        return [\n            'status' => 1\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Swagger Documentation\nDESCRIPTION: This command triggers the generation of Swagger documentation files based on the annotations in your code.  It uses the `gen:swagger` command provided by the hyperf/swagger component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/swagger.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php gen:swagger\n```\n\n----------------------------------------\n\nTITLE: Simulate HTTP Request to a Specific Server\nDESCRIPTION: Creates an instance of the Hyperf\\Testing\\Client class, specifying the 'adminHttp' server configuration. It then simulates a JSON POST request to the '/user/0' endpoint with a 'nickname' parameter. This allows testing interfaces exposed on different ports or server configurations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Testing\\Client;\n\n$client = make(Client::class, ['server' => 'adminHttp']);\n\n$result = $client->json('/user/0',[\n    'nickname' => 'Hyperf'\n]);\n```\n\n----------------------------------------\n\nTITLE: Define HTTP Server for jsonrpc-http Protocol (PHP)\nDESCRIPTION: Configures an HTTP server in the server.php file to handle JSON RPC requests using the jsonrpc-http protocol.  It specifies the server name, type, host, port, and callback for handling requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/json-rpc.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 这里省略了该文件的其它配置\n    'servers' => [\n        [\n            'name' => 'jsonrpc-http',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9504,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [\\Hyperf\\JsonRpc\\HttpServer::class, 'onRequest'],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite Driver for Hyperf (Bash)\nDESCRIPTION: This snippet shows the command to install the SQLite driver for Hyperf using Composer. It requires `Swoole >= 5.1.0` and `--enable-swoole-sqlite` to be enabled during compilation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/quick-start.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/database-pgsql\n```\n\n----------------------------------------\n\nTITLE: Hyperf Command Listing (Shell)\nDESCRIPTION: This snippet shows the output of running the `php bin/hyperf.php` command, which lists the available commands defined in the Hyperf application. It demonstrates how the `AsCommand` annotation translates into command-line options with descriptions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_29\n\nLANGUAGE: Shell\nCODE:\n```\n$ php bin/hyperf.php\n\n...\nfoo\n  foo:bar                   The description of foo:bar command.\n  foo:bar1                  The description of foo:bar1 command.\n```\n\n----------------------------------------\n\nTITLE: Registering ConfigProvider in composer.json (JSON)\nDESCRIPTION: Shows how to register a ConfigProvider class in the `composer.json` file of a component. This allows the Hyperf framework to automatically load the ConfigProvider class and use its configuration options. The `extra.hyperf.config` configuration specifies the fully qualified class name of the ConfigProvider.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/component-guide/configprovider.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"hyperf/foo\",\n    \"require\": {\n        \"php\": \">=7.3\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Hyperf\\\\Foo\\\\\": \"src/\"\n        }\n    },\n    \"extra\": {\n        \"hyperf\": {\n            \"config\": \"Hyperf\\\\Foo\\\\ConfigProvider\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying JSON array length with whereJsonLength in Hyperf\nDESCRIPTION: This example shows how to query a JSON array field based on its length using `whereJsonLength` in Hyperf. It retrieves users based on the length of the 'options->languages' array, in the first case length equals to 0 and in the second length is greater than 1.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereJsonLength('options->languages', 0)\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereJsonLength('options->languages', '>', 1)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Crontab Component\nDESCRIPTION: This bash command installs the `hyperf/crontab` component using composer, a dependency manager for PHP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/crontab.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/crontab\n```\n\n----------------------------------------\n\nTITLE: Generating PHP Code from Protobuf\nDESCRIPTION: This shell script shows how to generate PHP code from a protobuf file using the `protoc` compiler.  It uses the `--php_out` flag to specify the output directory for the generated PHP files. Requires the protobuf compiler `protoc` to be installed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/grpc.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# 使用 linux 包管理工具安装 protoc，下面以 alpine 为例，也可以参考 hyperf-skeleton 下的 Dockerfile\napk add protobuf\n\n# 使用 protoc 自动生成代码\nprotoc --php_out=grpc/ grpc.proto\n\n# tree grpc\ngrpc\n├── GPBMetadata\n│\t\t└── Grpc.php\n└── Grpc\n    ├── HiReply.php\n    └── HiUser.php\n```\n\n----------------------------------------\n\nTITLE: NSQ Configuration File\nDESCRIPTION: This PHP array defines the default configuration for the NSQ component. It includes settings such as host, port, connection pool size, timeouts, and heartbeat intervals. The `max_idle_time` should be less than the NSQ server's idle time.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nsq.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'host' => '127.0.0.1',\n        'port' => 4150,\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            // 因为 Nsq 服务默认的闲置时间是 60s，故框架维护的最大闲置时间应小于 60s\n            'max_idle_time' => 30.0,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Register Exception Handler via Annotation - PHP\nDESCRIPTION: Registers an exception handler using the `ExceptionHandler` annotation.  The `server` parameter specifies which server the handler applies to. `priority` controls the order in which handlers are executed. Requires `Hyperf\\ExceptionHandler\\Annotation\\ExceptionHandler`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/exception-handler.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\ExceptionHandler\\ExceptionHandler;\nuse Hyperf\\HttpMessage\\Stream\\SwooleStream;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Throwable;\nuse Hyperf\\ExceptionHandler\\Annotation\\ExceptionHandler as RegisterHandler;\n\n// 这里的 http 对应 config/autoload/server.php 内的 server 所对应的 name 值\n// priority 为排序\n#[RegisterHandler(server: 'http')]\nclass AppExceptionHandler extends ExceptionHandler\n{\n    public function __construct(protected StdoutLoggerInterface $logger)\n    {\n    }\n\n    public function handle(Throwable $throwable, ResponseInterface $response)\n    {\n        $this->logger->error(sprintf('%s[%s] in %s', $throwable->getMessage(), $throwable->getLine(), $throwable->getFile()));\n        $this->logger->error($throwable->getTraceAsString());\n        return $response->withHeader('Server', 'Hyperf')->withStatus(500)->withBody(new SwooleStream('Internal Server Error.'));\n    }\n\n    public function isValid(Throwable $throwable): bool\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Supervisor Configuration for Hyperf Application\nDESCRIPTION: This snippet defines the configuration for a Hyperf application managed by Supervisor. It specifies the application's working directory, startup command, user to run the application as, autostart settings, restart behavior, and logging options. The configuration also includes parameters for start retries and duration to consider a successful start.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/supervisor.md#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# 新建一個應用並設定一個名稱，這裡設定為 hyperf\n[program:hyperf]\n# 設定命令在指定的目錄內執行\ndirectory=/var/www/hyperf/\n# 這裡為您要管理的專案的啟動命令\ncommand=php ./bin/hyperf.php start\n# 以哪個使用者來執行該程序\nuser=root\n# supervisor 啟動時自動該應用\nautostart=true\n# 程序退出後自動重啟程序\nautorestart=true\n# 程序持續執行多久才認為是啟動成功\nstartsecs=1\n# 重試次數\nstartretries=3\n# stderr 日誌輸出位置\nstderr_logfile=/var/www/hyperf/runtime/stderr.log\n# stdout 日誌輸出位置\nstdout_logfile=/var/www/hyperf/runtime/stdout.log\n```\n\n----------------------------------------\n\nTITLE: Enable Crontab by Calling a Method - PHP\nDESCRIPTION: This PHP code demonstrates how to enable or disable a crontab task by calling a method.  The `enable` parameter in the `#[Crontab]` annotation is set to the name of a method (`isEnable`) within the class.  The method must return a boolean value indicating whether the task should be enabled.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/crontab.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Crontab;\n\nuse Carbon\\Carbon;\nuse Hyperf\\Crontab\\Annotation\\Crontab;\n\n#[Crontab(name: \"Echo\", rule: \"* * * * *\", callback: \"execute\", enable: \"isEnable\", memo: \"這是一個示例的定時任務\")]\nclass EchoCrontab\n{\n    public function execute()\n    {\n        var_dump(Carbon::now()->toDateTimeString());\n    }\n\n    public function isEnable(): bool\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Validation on Multiple Fields\nDESCRIPTION: Illustrates how to apply conditional validation to multiple fields simultaneously using the `sometimes` method.  In this case, both 'reason' and 'cost' fields are required if the 'games' field is greater than or equal to 100.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_43\n\nLANGUAGE: PHP\nCODE:\n```\n$v->sometimes(['reason', 'cost'], 'required', function($input) {\n    return $input->games >= 100;\n});\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf ETCD Package\nDESCRIPTION: This command installs the hyperf/etcd package using Composer, which provides the necessary classes and dependencies for interacting with an ETCD server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/etcd.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/etcd\n```\n\n----------------------------------------\n\nTITLE: Default Cache Configuration in Hyperf\nDESCRIPTION: This array defines the default cache configuration for the Hyperf application, specifying the driver, packer, prefix, and skip cache results.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/cache.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => Hyperf\\Cache\\Driver\\RedisDriver::class,\n        'packer' => Hyperf\\Codec\\Packer\\PhpSerializerPacker::class,\n        'prefix' => 'c:',\n        'skip_cache_results' => [],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Displaying Queue Status\nDESCRIPTION: This command displays the current status of the queue, including the number of messages waiting, failed, and delayed. {queue_name} is a placeholder for the actual queue name as configured in `async_queue.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\n$ php bin/hyperf.php queue:info {queue_name}\n```\n\n----------------------------------------\n\nTITLE: Update Database Model Classes (Shell)\nDESCRIPTION: This command regenerates the database model classes to be compatible with Hyperf 3.0, which includes support for typed member variables in the base model class. It uses the hyperf/code-generator package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/3.0.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp vendor/bin/regenerate-models.php $PWD/app/Model\n```\n\n----------------------------------------\n\nTITLE: Advanced Join Clauses with Closures - PHP\nDESCRIPTION: Demonstrates how to use a closure to define more complex join conditions. The closure receives a `JoinClause` object, which allows you to specify constraints using methods like `on()` and `orOn()`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->join('contacts', function ($join) {\n        $join->on('users.id', '=', 'contacts.user_id')->orOn(...);\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Date Validation After Given Date\nDESCRIPTION: The `after:date` rule validates that the field under validation is a value after a given date. The date will be passed into the PHP `strtotime` function. An example of comparing the field to another field is also shown.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n'start_date' => 'required|date|after:tomorrow'\n```\n\n----------------------------------------\n\nTITLE: Local Middleware Configuration via Annotation\nDESCRIPTION: This code snippet illustrates how to define local middleware using annotations. The `#[Middleware]` annotation is used for defining a single middleware, while `#[Middlewares]` is used for defining multiple middleware. These annotations must be used in conjunction with `#[AutoController]` or `#[Controller]`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/middleware/middleware.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Middleware\\FooMiddleware;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\HttpServer\\Annotation\\Middleware;\n\n#[AutoController]\n#[Middleware(FooMiddleware::class)]\nclass IndexController\n{\n    public function index()\n    {\n        return 'Hello Hyperf.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Database Connections in Hyperf (PHP)\nDESCRIPTION: This code demonstrates how to use different database connections configured in Hyperf.  It shows how to specify the connection name when executing database queries using the `Db` facade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/quick-start.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\DbConnection\\Db;\n// default\nDb::select('SELECT * FROM user;');\nDb::connection('default')->select('SELECT * FROM user;');\n\n// test\nDb::connection('test')->select('SELECT * FROM user;');\n```\n\n----------------------------------------\n\nTITLE: Translate with Global Functions\nDESCRIPTION: This code demonstrates using the global functions `__()` and `trans()` to translate strings. These functions take the translation key as the first argument, which can be a simple key or a file.key format. The example shows how to translate a message using the global helper functions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/translation.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\necho __('messages.welcome');\necho trans('messages.welcome');\n```\n\n----------------------------------------\n\nTITLE: Grouping Results with Multiple Columns - PHP\nDESCRIPTION: This snippet demonstrates how to group results using multiple columns with the `groupBy` method.  It also shows the use of the `having` clause.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->groupBy('first_name', 'status')\n    ->having('account_id', '>', 100)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Building Phar Archive with Custom Entrypoint\nDESCRIPTION: This command builds a Phar archive with a specified entrypoint file. The `--bin` option allows you to define which file should be executed when the `phar` archive is run.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/phar.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php phar:build --bin=bin/hyperf.php\n```\n\n----------------------------------------\n\nTITLE: Accessing Previous Step Results in Hyperf DAG\nDESCRIPTION: This snippet demonstrates how to access the results of preceding tasks within a DAG. Each task can receive an array containing the results of its dependent tasks. This enables tasks to utilize data produced by previous steps in the workflow. The Dag::run() method returns an array containing the results for each vertex.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/dag.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$dag = new \\Hyperf\\Dag\\Dag();\n$a = \\Hyperf\\Dag\\Vertex::make(function() {return 1;});\n$b = \\Hyperf\\Dag\\Vertex::make(function($results) use ($a) {\n    return $results[$a->key] + 1;\n});\n$results = $dag->addVertex($a)->addVertex($b)->addEdge($a, $b)->run();\nassert($results[$a->key] === 1);\nassert($results[$b->key] === 2);\n```\n\n----------------------------------------\n\nTITLE: Installing Aliyun OSS Adapter (Flysystem v2.0 & v3.0)\nDESCRIPTION: Installs the `hyperf/flysystem-oss` package for Flysystem v2.0 and v3.0, which provides the Aliyun OSS adapter for Hyperf. This is a newer version of the adapter compared to `xxtime/flysystem-aliyun-oss`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/filesystem.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/flysystem-oss\n```\n\n----------------------------------------\n\nTITLE: Dynamically Adjusting Consumer Numbers\nDESCRIPTION: Shows how to dynamically adjust the number of consumer processes based on the environment (e.g., debug mode) in Hyperf. This is achieved by overriding the `getNums` method in the consumer class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/amqp.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n#[Consumer(\n    exchange: 'hyperf',\n    routingKey: 'hyperf',\n    queue: 'hyperf',\n    name: 'hyperf',\n    nums: 1\n)]\nfinal class DemoConsumer extends ConsumerMessage\n{\n    public function getNums(): int\n    {\n        if (is_debug()) {\n            return 10;\n        }\n        return parent::getNums();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Merging Component Attributes in Blade Template\nDESCRIPTION: This snippet demonstrates how to merge default attributes with the attributes passed to the component using the `merge()` method.  It merges the provided array of attributes with the existing component attributes.  By default, only the `class` attribute is merged.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<div {{ $attributes->merge(['class' =>'alert alert-'.$type]) }}>\n    {{ $message }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Managing Hyperf Application with supervisorctl\nDESCRIPTION: This snippet shows how to use the `supervisorctl` command-line tool to manage the Hyperf application. It includes commands to start, restart, and stop the application, as well as a command to view the status of all managed processes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/supervisor.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# start the hyperf application\nsupervisorctl start hyperf\n# restart hyperf application\nsupervisorctl restart hyperf\n# stop hyperf application\nsupervisorctl stop hyperf\n# View the running status of all managed projects\nsupervisorctl status\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests - Composer\nDESCRIPTION: Executes the defined test script within composer.json to run the test suite. It utilizes phpunit by default, but can run Pest if the `pest` script is invoked.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/testing.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer test\n```\n\n----------------------------------------\n\nTITLE: Register Socket.IO Namespace via Router in Hyperf\nDESCRIPTION: This PHP code illustrates how to register a Socket.IO namespace and map it to a controller using the `SocketIORouter` class.  This method provides an alternative to using annotations for defining namespaces. It allows for programmatically associating a namespace with a specific controller, offering flexibility in defining Socket.IO routes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/socketio-server.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\SocketIOServer\\Collector\\SocketIORouter;\nuse App\\Controller\\WebSocketController;\nSocketIORouter::addNamespace('/xxx' , WebSocketController::class);\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf DB Connection\nDESCRIPTION: This command installs the hyperf/db-connection component, which provides database connection pooling and model abstraction for Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/quick-start.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/db-connection\n```\n\n----------------------------------------\n\nTITLE: Calling RPC Method via ClientFactory in Hyperf Jet\nDESCRIPTION: Creates a client instance using Hyperf\\Jet\\ClientFactory and then calls a remote method. This approach requires that the protocol and service have been registered previously.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/jet.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Jet\\ClientFactory;\n\n$clientFactory = new ClientFactory();\n$client = $clientFactory->create($service = 'CalculatorService', $protocol = 'jsonrpc');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// Call the remote method `add` with arguments `1` and `2`.\n// The $result is the result of the remote method.\n$result = $client->add(1, 2);\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with a Closure in Hyperf\nDESCRIPTION: This code snippet demonstrates how to define a simple route using a closure. When the `/hello-hyperf` URI is accessed via a GET request, the closure returns the string 'Hello Hyperf.'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/router.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\HttpServer\\Router\\Router;\n\nRouter::get('/hello-hyperf', function () {\n    return 'Hello Hyperf.';\n});\n```\n\n----------------------------------------\n\nTITLE: Modify Existing String Field Length in Hyperf Schema\nDESCRIPTION: This code snippet demonstrates how to modify the length of an existing string field in a Hyperf database schema.  It changes the 'name' field in the 'users' table to have a length of 50 characters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nSchema::create('users', function (Blueprint $table) {\n    // 將字段的長度修改為 50\n    $table->string('name', 50)->change();\n});\n```\n\n----------------------------------------\n\nTITLE: Lazy Service Injection PHP\nDESCRIPTION: Injects the lazy service into the Foo class.  The actual UserService is only instantiated when the proxy is accessed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Service\\LazyUserService;\n\nclass Foo{\n    public $service;\n    public function __construct(LazyUserService $service){\n        $this->service = $service;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Email with Regex\nDESCRIPTION: This example validates email format using regex. Note that regex rules should be placed within arrays.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n 'email' => 'regex:/^.+@.+$/i'\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Template Engine\nDESCRIPTION: Configures the Hyperf view component to use a custom template engine by updating the 'engine' parameter in the view configuration file. Sets the view engine class to a custom implementation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Engine\\TemplateEngine;\n\nreturn [\n    // Change the engine parameter to your custom template engine class\n    'engine' => TemplateEngine::class,\n    'mode' => Mode::TASK,\n    'config' => [\n        'view_path' => BASE_PATH.'/storage/view/',\n        'cache_path' => BASE_PATH.'/runtime/view/',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Tencent Cloud COS Adapter (Flysystem v1.0)\nDESCRIPTION: Installs the Tencent Cloud COS adapter for Flysystem v1.0. Note that flysystem-cos v2.0 is deprecated, use v3.0 or higher.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/filesystem.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-cos:^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Validation using 'sometimes' - PHP\nDESCRIPTION: Shows how to use the `sometimes` rule to conditionally apply validation rules based on the existence of a field in the data.  In this example, the `email` field is only validated if it exists in the input data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$validator = $this->validationFactory->make($data, [\n    'email' => 'sometimes|required|email',\n]);\n```\n\n----------------------------------------\n\nTITLE: Logging SQL Queries in PHP\nDESCRIPTION: Shows how to enable SQL query logging using `Db::enableQueryLog()` and retrieve the last executed SQL query with its associated data. This is primarily intended for development environments.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/quick-start.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\DbConnection\\Db;\nuse Hyperf\\Collection\\Arr;\nuse App\\Model\\Book;\n\n// 启用 SQL 数据记录功能\nDb::enableQueryLog();\n\n$book = Book::query()->find(1);\n\n// 打印最后一条 SQL 相关数据\nvar_dump(Arr::last(Db::getQueryLog()));\n```\n\n----------------------------------------\n\nTITLE: Union Queries with union() in Hyperf\nDESCRIPTION: Shows how to combine the results of two queries using the `union()` method. This method appends the results of the second query to the results of the first query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$first = Db::table('users')->whereNull('first_name');\n\n$users = Db::table('users')\n    ->whereNull('last_name')\n    ->union($first)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Publishing Redis Configuration File\nDESCRIPTION: This shell command publishes the complete Redis configuration file from the hyperf/redis vendor package to the application's config directory, allowing for customization.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/redis.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/redis\n```\n\n----------------------------------------\n\nTITLE: Post-Validation Hook Implementation in Hyperf\nDESCRIPTION: This code snippet demonstrates how to use the `after` method to add a callback function to the validator instance. This callback is executed after the initial validation succeeds and can be used to perform additional validation or add custom error messages based on more complex logic. The validator instance is passed as an argument to the callback function.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\Validation\\Contract\\ValidatorFactoryInterface;\n\nclass IndexController\n{\n    #[Inject]\n    protected ValidatorFactoryInterface $validationFactory;\n\n    public function foo(RequestInterface $request)\n    {\n        $validator = $this->validationFactory->make(\n            $request->all(),\n            [\n                'foo' => 'required',\n                'bar' => 'required',\n            ],\n            [\n                'foo.required' => 'foo is required',\n                'bar.required' => 'bar is required',\n            ]\n        );\n\n        $validator->after(function ($validator) {\n            if ($this->somethingElseIsInvalid()) {\n                $validator->errors()->add('field','Something is wrong with this field!');\n            }\n        });\n\n        if ($validator->fails()) {\n            //\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Compound Index Name\nDESCRIPTION: This code demonstrates how to define a custom name for a compound index when creating it. The second argument of the `index()` method specifies the index name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// 定義一個複合索引名稱為 index_account_id_and_created_at\n$table->index(['account_id', 'created_at'], '');\n```\n\n----------------------------------------\n\nTITLE: Blade Template Example\nDESCRIPTION: Defines a simple Blade template (index.blade.php) that displays a greeting message with a dynamic name. Demonstrates how to use Blade's variable interpolation syntax.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view.md#_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hyperf</title>\n</head>\n<body>\nHello, {{ $name }}. You are using blade template now.\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Class Map Replacement Coroutine PHP\nDESCRIPTION: This snippet defines a class that replaces the original `Hyperf\\Coroutine\\Coroutine` class using Hyperf's `class_map` feature.  It overrides the `create()` method to use the custom `App\\Kernel\\Context\\Coroutine` class to create new coroutines, which handles copying of the request context from the parent.  Other methods are kept the same, delegating to `Hyperf\\Engine\\Coroutine`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/annotation.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n *\n * @link     https://www.hyperf.io\n * @document https://hyperf.wiki\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\n\nnamespace Hyperf\\Coroutine;\n\nuse App\\Kernel\\Context\\Coroutine as Go;\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Engine\\Coroutine as Co;\nuse Hyperf\\Engine\\Exception\\CoroutineDestroyedException;\nuse Hyperf\\Engine\\Exception\\RunningInNonCoroutineException;\nuse Throwable;\n\nclass Coroutine\n{\n    /**\n     * Returns the current coroutine ID.\n     * Returns -1 when running in non-coroutine context.\n     */\n    public static function id(): int\n    {\n        return Co::id();\n    }\n\n    public static function defer(callable $callable): void\n    {\n        Co::defer(static function () use ($callable) {\n            try {\n                $callable();\n            } catch (Throwable $exception) {\n                di()->get(StdoutLoggerInterface::class)->error((string) $exception);\n            }\n        });\n    }\n\n    public static function sleep(float $seconds): void\n    {\n        usleep(intval($seconds * 1000 * 1000));\n    }\n\n    /**\n     * Returns the parent coroutine ID.\n     * Returns 0 when running in the top level coroutine.\n     * @throws RunningInNonCoroutineException when running in non-coroutine context\n     * @throws CoroutineDestroyedException when the coroutine has been destroyed\n     */\n    public static function parentId(?int $coroutineId = null): int\n    {\n        return Co::pid($coroutineId);\n    }\n\n    /**\n     * @return int Returns the coroutine ID of the coroutine just created.\n     *             Returns -1 when coroutine create failed.\n     */\n    public static function create(callable $callable): int\n    {\n        return di()->get(Go::class)->create($callable);\n    }\n\n    public static function inCoroutine(): bool\n    {\n        return Co::id() > 0;\n    }\n\n    public static function stats(): array\n    {\n        return Co::stats();\n    }\n\n    public static function exists(int $id): bool\n    {\n        return Co::exists($id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Coroutine Memory Driver Configuration in Hyperf Cache\nDESCRIPTION: This example shows the configuration for the Coroutine Memory Driver in Hyperf. This driver stores data within the coroutine context. The example also displays a method with the Cacheable annotation, which uses a group configuration `co` that specifies the `CoroutineMemoryDriver`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/cache.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass Demo\n{\n    public function get($userId, $id)\n    {\n        return $this->getArray($userId)[$id] ?? 0;\n    }\n\n    #[Cacheable(prefix: \"test\", group: \"co\")]\n    public function getArray(int $userId): array\n    {\n        return $this->redis->hGetAll($userId);\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'co' => [\n        'driver' => Hyperf\\Cache\\Driver\\CoroutineMemoryDriver::class,\n        'packer' => Hyperf\\Codec\\Packer\\PhpSerializerPacker::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Starting the Hyperf Nano Application\nDESCRIPTION: Starts the Hyperf Nano application using the PHP command-line interface.  This command executes the entry point file, typically `index.php`, and initiates the server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nano.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nphp index.php start\n```\n\n----------------------------------------\n\nTITLE: Conditional Intermediate Table Info using whenPivotLoaded - Hyperf - PHP\nDESCRIPTION: Shows how to conditionally include data from intermediate tables in many-to-many associations using the `whenPivotLoaded` method in Hyperf resource. The first parameter is the name of the intermediate table and the second is a closure that returns the value to return if intermediate table information is available. This example retrieves `expires_at` from the `role_user` pivot table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'expires_at' => $this->whenPivotLoaded('role_user', function () {\n                return $this->pivot->expires_at;\n            }),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Distinct Validation for Array\nDESCRIPTION: The `distinct` rule validates that an array does not contain any duplicate values. This example shows how to apply this rule to an array of IDs.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\n'foo.*.id' => 'distinct'\n```\n\n----------------------------------------\n\nTITLE: Filesystem Usage Example (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to use the `League\\Flysystem\\Filesystem` class within a Hyperf controller to perform common file operations such as uploading, writing, reading, deleting, renaming, and copying files.  It assumes Flysystem v1.0. It uses DI to inject Filesystem.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/filesystem.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nclass IndexController extends AbstractController\n{\n    public function example(\\League\\Flysystem\\Filesystem $filesystem)\n    {\n        // Process Upload\n        $file = $this->request->file('upload');\n        $stream = fopen($file->getRealPath(), 'r+');\n        $filesystem->writeStream(\n            'uploads/'.$file->getClientFilename(),\n            $stream\n        );\n        fclose($stream);\n        \n        // Write Files\n        $filesystem->write('path/to/file.txt', 'contents');\n\n        // Add local file\n        $stream = fopen('local/path/to/file.txt', 'r+');\n        $result = $filesystem->writeStream('path/to/file.txt', $stream);\n        if (is_resource($stream)) {\n            fclose($stream);\n        }\n\n        // Update Files\n        $filesystem->update('path/to/file.txt', 'new contents');\n\n        // Check if a file exists\n        $exists = $filesystem->has('path/to/file.txt');\n\n        // Read Files\n        $contents = $filesystem->read('path/to/file.txt');\n\n        // Delete Files\n        $filesystem->delete('path/to/file.txt');\n\n        // Rename Files\n        $filesystem->rename('filename.txt', 'newname.txt');\n\n        // Copy Files\n        $filesystem->copy('filename.txt', 'duplicate.txt');\n\n        // list the contents\n        $filesystem->listContents('path', false);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Resource gRPC\nDESCRIPTION: Installs the `hyperf/resource-grpc` package using Composer. This package provides gRPC support for API resources.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/resource-grpc\n```\n\n----------------------------------------\n\nTITLE: Histogram Interface\nDESCRIPTION: Defines the HistogramInterface, used to describe the statistical distribution of events over time, represented as percentiles or buckets, such as HTTP request latency. Includes methods for putting samples and setting label values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\ninterface HistogramInterface\n{\n    public function with(string ...$labelValues): self;\n\n    public function put(float $sample);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stdout Logger Factory\nDESCRIPTION: This code demonstrates how to create a factory for the standard output (stdout) logger in Hyperf. The `StdoutLoggerFactory` class retrieves a logger instance from the container and returns it, allowing the application to use Monolog for stdout logging instead of the default `StdoutLogger` implementation. This is done by binding to the `Hyperf\\Contract\\StdoutLoggerInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/logger.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App;\n\nuse Psr\\Container\\ContainerInterface;\n\nclass StdoutLoggerFactory\n{\n    public function __invoke(ContainerInterface $container)\n    {\n        return Log::get('sys');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Stop Handler\nDESCRIPTION: Modifies the `config/autoload/signal.php` configuration to include the `WorkerStopHandler`, allowing for a graceful shutdown of the Worker process upon receiving a signal. Sets the handler priority to `PHP_INT_MIN`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/signal.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'handlers' => [\n        Hyperf\\Signal\\Handler\\WorkerStopHandler::class => PHP_INT_MIN\n    ],\n    'timeout' => 5.0,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Mapping SocketIO Class to Factory\nDESCRIPTION: This PHP snippet shows how to map the SocketIO class to the custom SocketIOFactory in the `dependencies.php` file. This allows overriding the default SocketIO parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/socketio-server.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\SocketIOServer\\SocketIO::class => App\\Kernel\\SocketIOFactory::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Publishing Delayed Messages to NSQ\nDESCRIPTION: This code demonstrates how to publish a delayed message to an NSQ topic using the `Hyperf\\Nsq\\Nsq::publish()` method. The third argument `$deferTime` specifies the delay in seconds before the message becomes available for consumption.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nsq.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Nsq\\Nsq;\n\n#[Command]\nclass NsqCommand extends HyperfCommand\n{\n    protected $name = 'nsq:pub';\n\n    public function handle()\n    {\n        /** @var Nsq $nsq */\n        $nsq = make(Nsq::class);\n        $topic = 'hyperf';\n        $message = 'This is message at ' . time();\n        $deferTime = 5.0;\n        $nsq->publish($topic, $message, $deferTime);\n\n        $this->line('success', 'info');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Swagger\nDESCRIPTION: This command installs the hyperf/swagger component using Composer. It is a necessary first step to use the swagger documentation generation features.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/swagger.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/swagger\n```\n\n----------------------------------------\n\nTITLE: Default Logger Configuration in Hyperf\nDESCRIPTION: This code snippet showcases the default logger configuration in a Hyperf project, typically located in `config/autoload/logger.php`.  It configures the Monolog stream handler to write logs to a file and sets up a line formatter for log messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/logger.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'handler' => [\n            'class' => \\Monolog\\Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => BASE_PATH . '/runtime/logs/hyperf.log',\n                'level' => \\Monolog\\Level::Debug,\n            ],\n        ],\n        'formatter' => [\n            'class' => \\Monolog\\Formatter\\LineFormatter::class,\n            'constructor' => [\n                'format' => null,\n                'dateFormat' => null,\n                'allowInlineLineBreaks' => true,\n            ]\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Registering a Process via Annotation\nDESCRIPTION: This code illustrates how to register a custom process using the `#[Process]` annotation.  This approach requires the `Hyperf\\Process\\Annotation\\Process` namespace to be used.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/process.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process(name: \"foo_process\")]\nclass FooProcess extends AbstractProcess\n{\n    public function handle(): void\n    {\n        // 您的程式碼 ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Gitlab-runner - Shell\nDESCRIPTION: These commands install gitlab-runner on a CentOS system using package manager. It first downloads the installation script, adds the gitlab-runner repository, and then installs the gitlab-runner package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/docker-swarm.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash\nyum install gitlab-runner\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf WebSocket Server\nDESCRIPTION: This command installs the hyperf/websocket-server package, providing WebSocket server capabilities to a Hyperf project. It uses Composer to manage the dependency.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/websocket-server.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/websocket-server\n```\n\n----------------------------------------\n\nTITLE: Run Kong Database\nDESCRIPTION: This command runs a PostgreSQL database container for Kong.  It defines the container name, network, port mapping, and environment variables for the database user, database name, and password.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_27\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run -d --name kong-database \\\n  --network=default-network \\\n  -p 5432:5432 \\\n  -e \"POSTGRES_USER=kong\" \\\n  -e \"POSTGRES_DB=kong\" \\\n  -e \"POSTGRES_PASSWORD=kong\" \\\n  postgres:9.6\n```\n\n----------------------------------------\n\nTITLE: Returning Raw Response in Hyperf\nDESCRIPTION: This snippet demonstrates how to return a raw response using the `raw()` method of the `Hyperf\\HttpServer\\Contract\\ResponseInterface`. It sets the `Content-Type` header to `plain/text` and accepts a string or an object that implements the `__toString()` method as data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/response.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function raw(ResponseInterface $response): Psr7ResponseInterface\n    {\n        return $response->raw('Hello Hyperf.');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Default Metric Configuration\nDESCRIPTION: Enables or disables the collection of default metrics such as memory usage, system CPU load, and Swoole server/coroutine metrics. The value is retrieved from the `TELEMETRY_ENABLE_DEFAULT_TELEMETRY` environment variable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n'enable_default_metric' => env('TELEMETRY_ENABLE_DEFAULT_TELEMETRY', true),\n```\n\n----------------------------------------\n\nTITLE: Creating a Hyperf Component\nDESCRIPTION: This command uses Composer to create a new Hyperf component package. It supports specifying the Hyperf version to adapt to, either the latest (dev-master) or a specific version (e.g., 2.0.*).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/component-guide/create.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# Create a component package that adapts to the latest version of Hyperf\ncomposer create-project hyperf/component-creator your_component dev-master\n\n# Create a component package that adapts to Hyperf 2.0 version\ncomposer create-project hyperf/component-creator your_component \"2.0.*\"\n```\n\n----------------------------------------\n\nTITLE: Calling gRPC Service from Hyperf Controller\nDESCRIPTION: This PHP snippet demonstrates how to call a gRPC service from a Hyperf controller.  It creates a `HiClient` instance, sets up a `HiUser` request, calls the `sayHello` method, and retrieves the response message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/grpc.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\npublic function hello()\n{\n    // 这个client是协程安全的，可以复用\n    $client = new \\App\\Grpc\\HiClient('127.0.0.1:9503', [\n        'credentials' => null,\n    ]);\n\n    $request = new \\Grpc\\HiUser();\n    $request->setName('hyperf');\n    $request->setSex(1);\n\n    /**\n     * @var \\Grpc\\HiReply $reply\n     */\n    list($reply, $status) = $client->sayHello($request);\n\n    $message = $reply->getMessage();\n    $user = $reply->getUser();\n    \n    var_dump(memory_get_usage(true));\n    return $message;\n}\n```\n\n----------------------------------------\n\nTITLE: Request and Response headers after v3.1 example\nDESCRIPTION: This PHP code illustrates how Request and Response headers are handled after Hyperf v3.1 using `withHeader`, `withHeaders`, `setHeader`, and `setHeaders`. The example highlights that `withHeaders` and `setHeaders` now directly replace the headers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/3.1.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// after v3.1\n$request->withHeader('foo', 1)->withHeader('bar', 2); // ['foo' => [1], 'bar' => [2]]\n$request->withHeader('foo', 1)->withHeader('foo', 2); // ['foo' => [2]]\n$request->withAddedHeader('foo', 1)->withAddedHeader('foo', 2); // ['foo' => [1, 2]]\n\n$request->withHeaders(['foo' => 1])->withHeaders(['bar' => 2]); // ['bar' => [2]]\n\n$request->setHeader('foo', 1)->setHeader('bar', 2); // ['foo' => [1], 'bar' => [2]]\n$request->setHeader('foo', 1)->setHeader('foo', 2); // ['foo' => [2]]\n$request->addHeader('foo', 1)->addHeader('foo', 2); // ['foo' => [1, 2]]\n\n$request->setHeaders(['foo' => 1])->setHeaders(['bar' => 2]); // ['bar' => [2]]\n```\n\n----------------------------------------\n\nTITLE: Increasing PHP memory_limit in php.ini\nDESCRIPTION: This configuration snippet shows how to increase the PHP memory limit in the `php.ini` file. This is often necessary for Hyperf applications due to the memory consumption of code analysis tools like BetterReflection. Setting the value to `-1` disables the limit.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/questions.md#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nmemory_limit=-1\n```\n\n----------------------------------------\n\nTITLE: Installing Kafka Package with Composer\nDESCRIPTION: This command installs the `hyperf/kafka` package as a dependency using Composer. This package provides the necessary components for integrating Kafka with the Hyperf framework.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/kafka.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/kafka\n```\n\n----------------------------------------\n\nTITLE: Making a Short-Lived Object\nDESCRIPTION: Creates a short-lived object using the make() function with constructor parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$userService = make(UserService::class, ['enableCache' => true]);\n```\n\n----------------------------------------\n\nTITLE: HTTP Route Handling with Controller\nDESCRIPTION: This code shows how to handle HTTP routes using ReactiveX and pass the request to a controller. The Observable acts as middleware, capturing the request and passing it to the specified controller (`App\\Controller\\IndexController::hello`) after performing any desired actions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/reactive-x.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$observable = Observable::fromHttpRoute('GET', '/hello-hyperf', 'App\\Controller\\IndexController::hello');\n```\n\n----------------------------------------\n\nTITLE: Clone Hyperf and Hyperf Skeleton Projects\nDESCRIPTION: This snippet demonstrates how to clone the Hyperf skeleton project and the Hyperf component library project to facilitate component development. It involves creating a project with composer and cloning a git repository.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/component-guide/intro.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n// 安裝 skeleton，並配置完成\ncomposer create-project hyperf/hyperf-skeleton \n\n// 克隆 hyperf 組件庫項目，這裏記得要替換 hyperf 為您的 Github ID，也就是克隆您所 Fork 的項目\ngit clone git@github.com:hyperf/hyperf.git\n```\n\n----------------------------------------\n\nTITLE: Install hyperf/dag package using Composer\nDESCRIPTION: This command installs the `hyperf/dag` package using Composer, a dependency management tool for PHP.  It downloads the package and its dependencies into the project's vendor directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/dag.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/dag\n```\n\n----------------------------------------\n\nTITLE: Form Request Attributes Method\nDESCRIPTION: This code snippet shows how to customize attribute names for validation error messages in a FormRequest class by overriding the `attributes` method.  This method returns an array of attribute names and their corresponding custom display names.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get custom attributes for validation errors\n */\npublic function attributes(): array\n{\n    return [\n        'foo' => 'foo of request',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf View Component\nDESCRIPTION: Installs the `hyperf/view` component using Composer. This component provides view rendering capabilities for Hyperf applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/view\n```\n\n----------------------------------------\n\nTITLE: Get Item Count on Current Page\nDESCRIPTION: This code snippet shows how to get the number of items on the current page using the `count()` method of the Paginator instance. It returns an integer representing the number of items on the current page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/paginator.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$count = $paginator->count();\n```\n\n----------------------------------------\n\nTITLE: Installing Box on Windows\nDESCRIPTION: This command downloads the Box executable for Windows and places it in a directory included in the system's Path environment variable.  Box must be executed using `box.exe` on Windows. Requires curl.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/eco/box.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\ncurl -o box.exe https://github.com/hyperf/box/releases/download/v0.5.5/box_x64_windows.exe\n// 将 `box.exe` 放到你想要的任意 Path 环境变量路径中，同时 Windows 版本在执行时需要在命令行中使用 `box.exe` 而不是 `box`\n```\n\n----------------------------------------\n\nTITLE: Get Item Count on Current Page with Paginator\nDESCRIPTION: Retrieves the number of items on the current page. This is useful for displaying information about the current page's content.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/paginator.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$count = $paginator->count();\n```\n\n----------------------------------------\n\nTITLE: Access Belongs To Relation as Dynamic Property (PHP)\nDESCRIPTION: This code demonstrates how to access the associated User (author) model from the Book model using the dynamically defined author property. It finds a specific book and then accesses the author's name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$book = Book::find(1);\n\necho $book->author->name;\n\n```\n\n----------------------------------------\n\nTITLE: Define Composite Index Name\nDESCRIPTION: This code shows how to define a custom name for a composite index. It creates an index on the 'account_id' and 'created_at' columns with the name 'index_account_id_and_created_at'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// 定义一个复合索引名称为 index_account_id_and_created_at\n$table->index(['account_id', 'created_at'], '');\n```\n\n----------------------------------------\n\nTITLE: Check If On First Page\nDESCRIPTION: This code snippet demonstrates how to determine if the paginator is currently on the first page. The `onFirstPage()` method returns a boolean value indicating whether the current page is the first page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/paginator.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$onFirstPage = $paginator->onFirstPage();\n```\n\n----------------------------------------\n\nTITLE: WebSocket Authentication Middleware in Hyperf\nDESCRIPTION: This middleware intercepts WebSocket handshake requests to perform authentication. It checks if the request is authorized using the `isAuth` method (placeholder). If not authorized, it returns a 'Forbidden' response. The middleware relies on the PSR container to retrieve the HTTP response interface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/socketio-server.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Middleware;\n\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass WebSocketAuthMiddleware implements MiddlewareInterface\n{\n    protected ContainerInterface $container;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n    }\n\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // 偽代碼，通過 isAuth 方法攔截握手請求並實現權限檢查\n        if (! $this->isAuth($request)) {\n            return $this->container->get(\\Hyperf\\HttpServer\\Contract\\ResponseInterface::class)->raw('Forbidden');\n        }\n\n        return $handler->handle($request);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Detecting Component Attributes in HTML\nDESCRIPTION: This snippet illustrates how to check if a component has a specific attribute using the `has()` method. The method returns a boolean value indicating whether the attribute exists. This is used in an @if block to conditionally render HTML.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n@if($attributes->has(\"class\"))\n    <div class=\"{{ $attributes->get(\"class\") }}\">\n        <!-- Component content -->\n    </div>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Add Consul ACL Token via Header\nDESCRIPTION: Shows how to add a Consul ACL token to the request headers when initializing the Consul client. The token is added to the 'X-Consul-Token' header.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/consul.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Consul\\KV;\nuse Hyperf\\Guzzle\\ClientFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n$clientFactory = $container->get(ClientFactory::class);\n\n$consulServer = 'http://127.0.0.1:8500';\n$kv = new KV(function () use ($clientFactory, $consulServer) {\n    return $clientFactory->create([\n        'base_uri' => $consulServer,\n        'headers' => [\n            'X-Consul-Token' => 'your-token'\n        ],\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Install Qiniu Adapter (Flysystem v2.0)\nDESCRIPTION: This command installs the Qiniu adapter for Flysystem v2.0 using Composer. This adapter allows you to interact with Qiniu cloud storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/filesystem.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-qiniu:^2.0\"\n```\n\n----------------------------------------\n\nTITLE: Install Tencent COS Adapter (Flysystem v2.0)\nDESCRIPTION: This command installs the Tencent COS adapter for Flysystem v2.0, enabling integration with Tencent Cloud Object Storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/filesystem.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-cos:^4.0\"\n```\n\n----------------------------------------\n\nTITLE: Example Language File (English)\nDESCRIPTION: Defines a simple language file in English, containing a translation for the 'welcome' key. Language files are PHP files that return an associative array of key-value pairs, where the keys are used for translation and the values are the translated strings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/translation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// storage/languages/en/messages.php\n\nreturn [\n    'welcome' => 'Welcome to our application',\n];\n```\n\n----------------------------------------\n\nTITLE: Executing Command with Array Option (Bash)\nDESCRIPTION: Executes a command with multiple values for the array option.  The output demonstrates how the values are collected into an array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/hyperf.php demo:command\n# 輸出\narray(0) {\n}\n\n$ php bin/hyperf.php demo:command --name Hyperf --name Swoole\n# 輸出\narray(2) {\n  [0]=>\n  string(6) \"Hyperf\"\n  [1]=>\n  string(6) \"Swoole\"\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Unique Rule with Custom Column Name for Check - PHP\nDESCRIPTION: This example demonstrates how to use a different column name for the uniqueness check than the attribute being validated. It validates that the 'email' field is unique based on the 'email_address' column in the 'users' table. Requires `Hyperf\\Validation\\Rule`, `$user->id`, and a `$data` array for validation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_42\n\nLANGUAGE: PHP\nCODE:\n```\nRule::unique('users', 'email_address')->ignore($user->id),\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message to NATS using Hyperf\nDESCRIPTION: This PHP code demonstrates how to publish a message to a NATS subject using the `publish` method of the `DriverInterface`. It injects the NATS driver using dependency injection and publishes a message with a simple payload to the 'hyperf.demo' subject. The controller uses Hyperf annotations for routing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nats.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Nats\\Driver\\DriverInterface;\n\n#[AutoController(prefix: \"nats\")]\nclass NatsController extends AbstractController\n{\n    #[Inject]\n    protected DriverInterface $nats;\n\n    public function publish()\n    {\n        $res = $this->nats->publish('hyperf.demo', [\n            'id' => 'Hyperf',\n        ]);\n\n        return $this->response->success($res);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Nacos Configuration with Alibaba Cloud Authentication - PHP\nDESCRIPTION: This extended configuration file includes settings for Alibaba Cloud authentication using Access Key (AK) and Secret Key (SK). These credentials are used to authenticate with the Nacos service when using Alibaba Cloud.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nacos.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    // nacos server url like https://nacos.hyperf.io, Priority is higher than host:port\n    // 'uri' => 'http://127.0.0.1:8848/',\n    // The nacos host info\n    'host' => '127.0.0.1',\n    'port' => 8848,\n    // The nacos account info\n    'username' => null,\n    'password' => null,\n    'access_key' => 'xxxx',\n    'access_secret' => 'yyyy',\n    'guzzle' => [\n        'config' => null,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Pausing Indexing\nDESCRIPTION: Temporarily pauses synchronization of model data to the search index using the `withoutSyncingToSearch` method. This is useful when performing batch operations on models where indexing is not desired.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nApp\\Order::withoutSyncingToSearch(function () {\n        // Execute model actions...\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware Priority in Hyperf\nDESCRIPTION: Demonstrates how to configure the priority of middleware in Hyperf versions >=3.0.34. Higher priority values result in earlier execution.  This can be applied to global, route, and annotation middleware configurations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/middleware/middleware.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// 全局中间件配置文件 middleware.php\nreturn [\n    'http' => [\n        YourMiddleware::class,\n        YourMiddlewareB::class => 3,\n    ],\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n// 路由中间件配置\nRouter::addGroup(\n    '/v2', function () {\n        Router::get('/index', [\\App\\Controller\\IndexController::class, 'index']);\n    },\n    [\n        'middleware' => [\n            FooMiddleware::class,\n            FooMiddlewareB::class => 3,\n        ]\n    ]\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n// 注解中间件配置\n#[AutoController]\n#[Middleware(FooMiddleware::class)]\n#[Middleware(FooMiddlewareB::class, 3)]\n#[Middlewares([FooMiddlewareC::class => 1, BarMiddlewareD::class => 4])]\nclass IndexController\n{\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Annotation-Based Server Specification in Hyperf (PHP)\nDESCRIPTION: This code shows how to specify the server for a controller using the `server` parameter in the `#[AutoController]` annotation.  In this case, the `IndexController` is assigned to the 'innerHttp' server. This annotation approach is used to determine which server handles requests for this specific controller.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/overview.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController(server: \"innerHttp\")]\nclass IndexController\n{\n    public function index()\n    {\n        return 'Hello World.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf GraphQL\nDESCRIPTION: This command installs the hyperf/graphql package using composer, which provides GraphQL integration for the Hyperf framework.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/graphql.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/graphql\n```\n\n----------------------------------------\n\nTITLE: Registering a Service\nDESCRIPTION: This snippet registers a service named `CalculatorService` and binds it to the `jsonrpc` protocol using the ServiceManager class. It also sets the static node information for the service, including the host and port.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/jet.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Jet\\ServiceManager;\n\n// 繫結 CalculatorService 與 jsonrpc 協議，同時設定靜態的節點資訊\nServiceManager::register($service = 'CalculatorService', $protocol = 'jsonrpc', [\n    ServiceManager::NODES => [\n        [$host = '127.0.0.1', $port = 9503],\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Snowflake Configuration File\nDESCRIPTION: This is the default configuration file for the Snowflake component, located at config/autoload/snowflake.php. It defines the begin timestamp and Redis settings for MetaGenerators.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/snowflake.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Snowflake\\MetaGenerator\\RedisMilliSecondMetaGenerator;\nuse Hyperf\\Snowflake\\MetaGenerator\\RedisSecondMetaGenerator;\nuse Hyperf\\Snowflake\\MetaGeneratorInterface;\n\nreturn [\n    'begin_second' => MetaGeneratorInterface::DEFAULT_BEGIN_SECOND,\n    RedisMilliSecondMetaGenerator::class => [\n        // Redis Pool\n        'pool' => 'default',\n        // 用于计算 WorkerId 的 Key 键\n        'key' => RedisMilliSecondMetaGenerator::DEFAULT_REDIS_KEY\n    ],\n    RedisSecondMetaGenerator::class => [\n        // Redis Pool\n        'pool' => 'default',\n        // 用于计算 WorkerId 的 Key 键\n        'key' => RedisMilliSecondMetaGenerator::DEFAULT_REDIS_KEY\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Add Consul ACL Token via Query\nDESCRIPTION: Demonstrates how to add a Consul ACL token as a query parameter when making a request to the Consul server. The token is passed in the `$options` array with the key `token`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/consul.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$response = $kv->get($namespace, ['token' => 'your-token'])->json();\n```\n\n----------------------------------------\n\nTITLE: Handling Creating Method Conflict\nDESCRIPTION: This code addresses a conflict when both the Snowflake trait and a custom `creating` method are used in a Hyperf database model. It aliases the trait's `creating` method to avoid the conflict and ensures that the Snowflake ID is generated during model creation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/snowflake.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Database\\Model\\Model;\nuse Hyperf\\Snowflake\\Concern\\Snowflake;\n\nclass User extends Model {\n    use Snowflake {\n        creating as create;\n    }\n\n    public function creating()\n    {\n        $this->create();\n        // Do something ...\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Get Last Item in Current Page\nDESCRIPTION: Returns the index of the last item on the current page. Useful in conjunction with `firstItem()` to display the range of items shown on the current page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/paginator.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$lastItem = $paginator->lastItem();\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response - JSON\nDESCRIPTION: This is the expected JSON response from the GraphQL server when executing the `hello` query.  It contains a data field with the result of the `hello` query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/graphql.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"data\": {\n        \"hello\": \"graphql\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Event Component\nDESCRIPTION: This command installs the hyperf/event component using Composer, enabling event dispatching capabilities in a Hyperf project or other PHP applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/event.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/event\n```\n\n----------------------------------------\n\nTITLE: Configure Span Tags in Hyperf Tracer\nDESCRIPTION: This PHP code snippet demonstrates how to configure custom tag names for HTTP client (Guzzle), Redis client, and database client (hyperf/database) spans in Hyperf's tracer. These tags provide additional context and metadata to the tracing information.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tracer.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'tags' => [\n        // HTTP 客戶端 (Guzzle)\n        'http_client' => [\n            'http.url' => 'http.url',\n            'http.method' => 'http.method',\n            'http.status_code' => 'http.status_code',\n        ],\n        // Redis 客戶端\n        'redis' => [\n            'arguments' => 'arguments',\n            'result' => 'result',\n        ],\n        // 資料庫客戶端 (hyperf/database)\n        'db' => [\n            'db.query' => 'db.query',\n            'db.statement' => 'db.statement',\n            'db.query_time' => 'db.query_time',\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Request Trace Listener\nDESCRIPTION: This configuration adds the RequestTraceListener to the listeners.php file.  This listener is an alternative to the middleware and performs the same function of collecting and propagating trace information.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tracer.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    \\Hyperf\\Tracer\\Listener\\RequestTraceListener::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Implement Socket.IO Controller in Hyperf\nDESCRIPTION: This code defines a WebSocket controller using Hyperf's Socket.IO annotations for handling events.  It includes methods for responding to events, joining rooms, and sending messages to specific rooms. It utilizes annotations to map methods to Socket.IO events and namespaces.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/socketio-server/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\SocketIOServer\\Annotation\\Event;\nuse Hyperf\\SocketIOServer\\Annotation\\SocketIONamespace;\nuse Hyperf\\SocketIOServer\\BaseNamespace;\nuse Hyperf\\SocketIOServer\\Socket;\nuse Hyperf\\Codec\\Json;\n\n/**\n * @SocketIONamespace(\"/\")\n */\nclass WebSocketController extends BaseNamespace\n{\n    /**\n     * @Event(\"event\")\n     * @param string $data\n     */\n    public function onEvent(Socket $socket, $data)\n    {\n        // 应答\n        return 'Event Received: ' . $data;\n    }\n\n    /**\n     * @Event(\"join-room\")\n     * @param string $data\n     */\n    public function onJoinRoom(Socket $socket, $data)\n    {\n        // 将当前用户加入房间\n        $socket->join($data);\n        // 向房间内其他用户推送（不含当前用户）\n        $socket->to($data)->emit('event', $socket->getSid() . \"has joined {$data}\");\n        // 向房间内所有人广播（含当前用户）\n        $this->emit('event', 'There are ' . count($socket->getAdapter()->clients($data)) . \" players in {$data}\");\n    }\n\n    /**\n     * @Event(\"say\")\n     * @param string $data\n     */\n    public function onSay(Socket $socket, $data)\n    {\n        $data = Json::decode($data);\n        $socket->to($data['room'])->emit('event', $socket->getSid() . \" say: {$data['message']}\");\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Nested Polymorphic Relationships in Hyperf\nDESCRIPTION: This code snippet demonstrates how to eager load nested polymorphic relationships using `with` and `morphWith`. In this example, it loads the `book.user` relationship of the `imageable` polymorphic relation on the `Image` model.  Requires the `Hyperf\\Database\\Model\\Relations\\MorphTo` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/relationship.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse App\\Model\\Book;\nuse App\\Model\\Image;\nuse Hyperf\\Database\\Model\\Relations\\MorphTo;\n\n$images = Image::query()->with([\n    'imageable' => function (MorphTo $morphTo) {\n        $morphTo->morphWith([\n            Book::class => ['user'],\n        ]);\n    },\n])->get();\n\n```\n\n----------------------------------------\n\nTITLE: Installing Jaeger Client using Composer\nDESCRIPTION: This command installs the jonahgeorge/jaeger-client-php dependency using Composer, which is required for using Jaeger as the tracing backend. This allows tracing data to be sent to a Jaeger instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tracer.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require jonahgeorge/jaeger-client-php\n```\n\n----------------------------------------\n\nTITLE: Loops (Blade)\nDESCRIPTION: This Blade template demonstrates the use of `@for`, `@foreach`, `@forelse`, and `@while` directives for creating loops. The `@forelse` directive handles the case where the collection is empty.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_17\n\nLANGUAGE: blade\nCODE:\n```\n@for ($i = 0; $i < 10; $i++)\n    The current value is {{ $i }}\n@endfor\n\n@foreach ($users as $user)\n    <p>This is user {{ $user->id }}</p>\n@endforeach\n\n@forelse ($users as $user)\n    <li>{{ $user->name }}</li>\n@empty\n    <p>No users</p>\n@endforelse\n\n@while (true)\n    <p>I'm looping forever.</p>\n@endwhile\n```\n\n----------------------------------------\n\nTITLE: Using Fluent API for Retry Logic PHP\nDESCRIPTION: This code demonstrates using the fluent API provided by the Hyperf Retry component to define retry logic programmatically. It configures a `ClassifierRetryPolicy` to retry all `Throwable` exceptions and sets a maximum of 5 retry attempts.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/retry.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$result = \\Hyperf\\Retry\\Retry::with(\n    new \\Hyperf\\Retry\\Policy\\ClassifierRetryPolicy(), //預設重試所有Throwable\n    new \\Hyperf\\Retry\\Policy\\MaxAttemptsRetryPolicy(5) //最多重試5次\n)->call(function(){\n    if (rand(1, 100) >= 20){\n        return true;\n    }\n    throw new Exception;\n});\n```\n\n----------------------------------------\n\nTITLE: Parallel Usage Example (PHP)\nDESCRIPTION: Shows how to use the Parallel feature to run multiple coroutines concurrently and wait for their completion.  Uses `Hyperf\\Coroutine\\Parallel` to add and execute coroutines, and catches potential exceptions. Requires `Hyperf\\Coroutine\\Coroutine`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/coroutine.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Coroutine\\Exception\\ParallelExecutionException;\nuse Hyperf\\Coroutine\\Coroutine;\nuse Hyperf\\Coroutine\\Parallel;\n\n$parallel = new Parallel();\n$parallel->add(function () {\n    sleep(1);\n    return Coroutine::id();\n});\n$parallel->add(function () {\n    sleep(1);\n    return Coroutine::id();\n});\n\ntry{\n    // $results 結果為 [1, 2]\n   $results = $parallel->wait(); \n} catch(ParallelExecutionException $e){\n    // $e->getResults() 獲取協程中的返回值。\n    // $e->getThrowables() 獲取協程中出現的異常。\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Hyperf Nano\nDESCRIPTION: This example shows how to add middleware to a Hyperf Nano application. It demonstrates modifying the request object by adding an attribute and accessing it within a route handler.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nano.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->get('/', function () {\n    return $this->request->getAttribute('key');\n});\n\n$app->addMiddleware(function ($request, $handler) {\n    $request = $request->withAttribute('key', 'value');\n    return $handler->handle($request);\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: PDO Options Database Configuration in Hyperf (PHP)\nDESCRIPTION: This code demonstrates how to modify the default PDO configuration for the database connection in Hyperf, such as setting ATTR_STRINGIFY_FETCHES to true to return all fields as strings.  It allows customization of PDO attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/quick-start.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER', 'mysql'),\n        'host' => env('DB_HOST', 'localhost'),\n        'port' => env('DB_PORT', 3306),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => env('DB_CHARSET', 'utf8'),\n        'collation' => env('DB_COLLATION', 'utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX', ''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('DB_MAX_IDLE_TIME', 60),\n        ],\n        'options' => [\n            // 框架默認配置\n            PDO::ATTR_CASE => PDO::CASE_NATURAL,\n            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n            PDO::ATTR_ORACLE_NULLS => PDO::NULL_NATURAL,\n            PDO::ATTR_STRINGIFY_FETCHES => false,\n            // 如果使用的為非原生 MySQL 或雲廠商提供的 DB 如從庫/分析型實例等不支持 MySQL prepare 協議的, 將此項設置為 true\n            PDO::ATTR_EMULATE_PREPARES => false,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Swoole 1.x Asynchronous Callback Example (PHP)\nDESCRIPTION: Demonstrates asynchronous programming using callbacks in Swoole 1.x. It connects to a MySQL database, queries data, updates data, and closes the connection, all within nested callbacks.  This example highlights the 'callback hell' problem that coroutines aim to solve. Note that the mysql module has been removed from swoole.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/coroutine.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$db = new swoole_mysql();\n$config = array(\n    'host' => '127.0.0.1',\n    'port' => 3306,\n    'user' => 'test',\n    'password' => 'test',\n    'database' => 'test',\n);\n\n$db->connect($config, function ($db, $r) {\n    // 從 users 表中查詢一條數據\n    $sql = 'select * from users where id = 1';\n    $db->query($sql, function(swoole_mysql $db, $r) {\n        if ($r !== false) {\n            // 查詢成功後修改一條數據\n            $updateSql = 'update users set name=\"new name\" where id = 1';\n            $db->query($updateSql, function (swoole_mysql $db, $r) {\n                $rows = $db->affected_rows;\n                if ($r === true) {\n                    return $this->response->end('更新成功');\n                }\n            });\n        }\n        $db->close();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing hyperf/constants Package\nDESCRIPTION: This command installs the hyperf/constants package, which provides the functionality for defining enum classes with annotations in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/constants.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ncomposer require hyperf/constants\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling a Custom Process\nDESCRIPTION: This snippet shows how to control whether a custom process is started by overriding the `isEnable()` method. The method should return `true` to enable the process and `false` to disable it. This allows conditional process startup based on configuration or other factors.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/process.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process(name: \"foo_process\")]\nclass FooProcess extends AbstractProcess\n{\n    public function handle(): void\n    {\n        // 您的代碼 ...\n    }\n    \n    public function isEnable($server): bool\n    {\n        // 不跟隨服務啓動一同啓動\n        return false;   \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Model Pagination with Query Conditions in Hyperf\nDESCRIPTION: This snippet demonstrates how to paginate query results using the Model in Hyperf, with added query conditions. It filters users based on gender (gender = 1) and returns 10 records per page. The current page is determined by the 'page' parameter in the HTTP request.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/paginator.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php \n// Show all users in the app, 10 pieces of data per page\nreturn User::where('gender', 1)->paginate(10);\n```\n\n----------------------------------------\n\nTITLE: Defining Hyperf Server for Swagger\nDESCRIPTION: This code snippet demonstrates how to define the Hyperf server associated with a specific set of API endpoints using the `SA\\HyperfServer` annotation.  This enables the generation of separate Swagger files for different servers within the same Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/swagger.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n#[SA\\HyperfServer('http')]\n```\n\n----------------------------------------\n\nTITLE: Handle Creating Method Override\nDESCRIPTION: Shows how to handle scenarios where the `creating` method in a database model needs to be overridden while still using the Snowflake trait for ID generation. It aliased original `creating` method from trait.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/snowflake.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Database\\Model\\Model;\nuse Hyperf\\Snowflake\\Concern\\Snowflake;\n\nclass User extends Model {\n    use Snowflake {\n        creating as create;\n    }\n\n    public function creating()\n    {\n        $this->create();\n        // Do something ...\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implement WebSocket Chat Room with IpcSubject\nDESCRIPTION: This code implements a WebSocket-based chat room using ReactiveX's IpcSubject for inter-process communication. It demonstrates how to share messages across worker processes and display the latest 5 messages upon user login using a ReplaySubject. Includes handling of message receiving, connection opening and closing events.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/reactive-x.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\ReactiveX\\Example;\n\nuse Hyperf\\Contract\\OnCloseInterface;\nuse Hyperf\\Contract\\OnMessageInterface;\nuse Hyperf\\Contract\\OnOpenInterface;\nuse Hyperf\\ReactiveX\\Contract\\BroadcasterInterface;\nuse Hyperf\\ReactiveX\\IpcSubject;\nuse Rx\\Subject\\ReplaySubject;\nuse Swoole\\Http\\Request;\nuse Swoole\\Server;\nuse Swoole\\WebSocket\\Frame;\nuse Swoole\\WebSocket\\Server as WebSocketServer;\n\nclass WebSocketController implements OnMessageInterface, OnOpenInterface, OnCloseInterface\n{\n    private IpcSubject $subject;\n\n    private $subscriber = [];\n\n    public function __construct(BroadcasterInterface $broadcaster)\n    {\n        $relaySubject = make(ReplaySubject::class, ['bufferSize' => 5]);\n        // 第一個引數為原 RxPHP Subject 物件。\n        // 第二個引數為廣播方式，預設為全程序廣播\n        // 第三個引數為頻道 ID, 每個頻道只能收到相同頻道的訊息。\n        $this->subject = new IpcSubject($relaySubject, $broadcaster, 1);\n    }\n\n    public function onMessage(WebSocketServer $server, Frame $frame): void\n    {\n        $this->subject->onNext($frame->data);\n    }\n\n    public function onClose(Server $server, int $fd, int $reactorId): void\n    {\n        $this->subscriber[$fd]->dispose();\n    }\n\n    public function onOpen(WebSocketServer $server, Request $request): void\n    {\n        $this->subscriber[$request->fd] = $this->subject->subscribe(function ($data) use ($server, $request) {\n            $server->push($request->fd, $data);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Event Component (Bash)\nDESCRIPTION: This command installs the hyperf/event component using Composer. This component provides the event dispatcher functionality for Hyperf applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/event.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/event\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Tracer via Composer\nDESCRIPTION: This command installs the hyperf/tracer component, which provides distributed tracing capabilities for Hyperf applications. It includes default dependencies for Zipkin integration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tracer.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/tracer\n```\n\n----------------------------------------\n\nTITLE: Custom Connection Pool Implementation in Hyperf\nDESCRIPTION: Demonstrates how to define a custom connection pool by extending the `Hyperf\\Pool\\Pool` class and implementing the `createConnection` method to return an object that implements the `Hyperf\\Contract\\ConnectionInterface` interface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/pool.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Pool;\n\nuse Hyperf\\Contract\\ConnectionInterface;\nuse Hyperf\\Pool\\Pool;\n\nclass MyConnectionPool extends Pool\n{\n    public function createConnection(): ConnectionInterface\n    {\n        return new MyConnection();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Hyperf Bootstrap File\nDESCRIPTION: The default `bootstrap.php` file provided by Hyperf. This file is responsible for setting up the testing environment. It defines constants, enables coroutines (which may need to be disabled when using Pest's parallel testing feature), loads the autoloader, initializes the class loader, and resolves the application container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nerror_reporting(E_ALL);\ndate_default_timezone_set('Asia/Shanghai');\n\n! defined('BASE_PATH') && define('BASE_PATH', dirname(__DIR__, 1));\n! defined('SWOOLE_HOOK_FLAGS') && define('SWOOLE_HOOK_FLAGS', SWOOLE_HOOK_ALL);\n\n// 預設開啟 當使用 pest --parallel 特性或其他涉及到原生並行操作時需要註釋掉\nSwoole\\Runtime::enableCoroutine(true);\n\nrequire BASE_PATH . '/vendor/autoload.php';\n\nHyperf\\Di\\ClassLoader::init();\n\n$container = require BASE_PATH . '/config/container.php';\n\n$container->get(Hyperf\\Contract\\ApplicationInterface::class);\n```\n\n----------------------------------------\n\nTITLE: Publishing View Configuration in PHP\nDESCRIPTION: This snippet shows the command used to automatically install view-engine, translation, and validation component-related configurations. It uses the Hyperf CLI to publish the configuration files to the application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nphp bin/hyperf.php view:publish\n```\n\n----------------------------------------\n\nTITLE: Use IpcSubject for Inter-Process Communication\nDESCRIPTION: This code demonstrates how to use `IpcSubject` for inter-process communication in a WebSocket chat application. It creates an `IpcSubject` backed by a `ReplaySubject` to share messages between worker processes. The `onOpen` method subscribes to the subject, pushing incoming messages to the WebSocket client.  The code shows how to create a chatroom where the last 5 messages are replayed to new users on connection and how messages are shared between workers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/reactive-x.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\ReactiveX\\Example;\n\nuse Hyperf\\Contract\\OnCloseInterface;\nuse Hyperf\\Contract\\OnMessageInterface;\nuse Hyperf\\Contract\\OnOpenInterface;\nuse Hyperf\\ReactiveX\\Contract\\BroadcasterInterface;\nuse Hyperf\\ReactiveX\\IpcSubject;\nuse Rx\\Subject\\ReplaySubject;\nuse Swoole\\Http\\Request;\nuse Swoole\\Server;\nuse Swoole\\WebSocket\\Frame;\nuse Swoole\\WebSocket\\Server as WebSocketServer;\n\nclass WebSocketController implements OnMessageInterface, OnOpenInterface, OnCloseInterface\n{\n    private IpcSubject $subject;\n\n    private $subscriber = [];\n\n    public function __construct(BroadcasterInterface $broadcaster)\n    {\n        $relaySubject = make(ReplaySubject::class, ['bufferSize' => 5]);\n        // 第一个参数为原 RxPHP Subject 对象。\n        // 第二个参数为广播方式，默认为全进程广播\n        // 第三个参数为频道 ID, 每个频道只能收到相同频道的消息。\n        $this->subject = new IpcSubject($relaySubject, $broadcaster, 1);\n    }\n\n    public function onMessage(WebSocketServer $server, Frame $frame): void\n    {\n        $this->subject->onNext($frame->data);\n    }\n\n    public function onClose(Server $server, int $fd, int $reactorId): void\n    {\n        $this->subscriber[$fd]->dispose();\n    }\n\n    public function onOpen(WebSocketServer $server, Request $request): void\n    {\n        $this->subscriber[$request->fd] = $this->subject->subscribe(function ($data) use ($server, $request) {\n            $server->push($request->fd, $data);\n        });\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install Nacos Adapter (Hyperf)\nDESCRIPTION: Installs the hyperf/service-governance-nacos adapter, enabling Hyperf to utilize Nacos for service registration and discovery.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/service-register.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/service-governance-nacos\n```\n\n----------------------------------------\n\nTITLE: Dimensions Validation with Rule Object\nDESCRIPTION: The `dimensions` rule validates that an image has the specified dimensions. This example demonstrates using the `Rule::dimensions` method to build the validation rule with fluent methods.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\npublic function rules(): array\n{\nreturn [\n           'avatar' => [\n              'required',\n              Rule::dimensions()->maxWidth(1000)->maxHeight(500)->ratio(3 / 2),\n           ],\n       ];\n}\n```\n\n----------------------------------------\n\nTITLE: Get Current Session ID\nDESCRIPTION: Retrieves the unique identifier of the current session. This ID can be used for various purposes, such as tracking user activity or associating session data with external systems.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/session.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$sessionId = $this->session->getId();\n```\n\n----------------------------------------\n\nTITLE: Between Validation for Strings\nDESCRIPTION: The `between:min,max` rule validates that the field under validation has a size between the given min and max values. This rule works on strings, numeric values, arrays, and files.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n'name' => 'required|between:1,20'\n```\n\n----------------------------------------\n\nTITLE: AMQP Command Shutdown Fix\nDESCRIPTION: This snippet demonstrates the code needed to properly shut down a Command that uses AMQP or other multiplexing technologies in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/questions.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Coordinator\\CoordinatorManager;\nuse Hyperf\\Coordinator\\Constants;\n\nCoordinatorManager::until(Constants::WORKER_EXIT)->resume();\n```\n\n----------------------------------------\n\nTITLE: Queue Service with AsyncQueueMessage Annotation\nDESCRIPTION: This code demonstrates using the `@AsyncQueueMessage` annotation to define a method that should be executed asynchronously. The method `example` will be executed in the consumer process.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse Hyperf\\AsyncQueue\\Annotation\\AsyncQueueMessage;\n\nclass QueueService\n{\n    #[AsyncQueueMessage]\n    public function example($params)\n    {\n        // 需要異步執行的代碼邏輯\n        // 這裏的邏輯會在 ConsumerProcess 進程中執行\n        var_dump($params);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Docker Stack Deploy\nDESCRIPTION: This command deploys a Docker stack from a `deploy.yml` file. The `--with-registry-auth` option is used to authenticate with the registry when pulling images. Replace `/opt/www/your_project/deploy.yml` with the actual path to the `deploy.yml` file and `your_project` with the stack name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_55\n\nLANGUAGE: shell\nCODE:\n```\ndocker stack deploy -c /opt/www/your_project/deploy.yml --with-registry-auth your_project\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Hyperf Event\nDESCRIPTION: This PHP code demonstrates how to dispatch an event using the EventDispatcherInterface in a Hyperf service. The EventDispatcher is injected, and the dispatch method is called with an instance of the UserRegistered event, triggering associated listeners.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/event.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Service;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\nuse App\\Event\\UserRegistered; \n\nclass UserService\n{\n    #[Inject]\n    private EventDispatcherInterface $eventDispatcher;\n    \n    public function register()\n    {\n        // We assume that there is a User entity\n        $user = new User();\n        $result = $user->save();\n        // Complete the logic of account registration\n        // This dispatch(object $event) will run the listener one by one\n        $this->eventDispatcher->dispatch(new UserRegistered($user));\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence\nDESCRIPTION: Demonstrates how to verify if a file exists in the request using the `hasFile(string $key): bool` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/request.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nif ($request->hasFile('photo')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Jaeger Client via Composer\nDESCRIPTION: This command installs the jonahgeorge/jaeger-client-php package, which is required when using Jaeger as the tracing backend with the hyperf/tracer component.  It provides the necessary classes for interacting with the Jaeger agent.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tracer.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require jonahgeorge/jaeger-client-php\n```\n\n----------------------------------------\n\nTITLE: Hyperf Server Annotation Usage\nDESCRIPTION: This code snippet demonstrates the usage of the `SA\\HyperfServer` annotation to associate a controller or method with a specific Hyperf server. This allows generating separate Swagger files for each server, distinguished by their configurations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/swagger.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n#[SA\\HyperfServer('http')]\n```\n\n----------------------------------------\n\nTITLE: Simulating HTTP Request with Hyperf Testing Client\nDESCRIPTION: This snippet demonstrates how to use the `Hyperf\\Testing\\Client` class to simulate HTTP requests without starting the server. It creates a client instance and performs a GET request to the root path.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/testing.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Testing\\Client;\n\n$client = make(Client::class);\n\n$result = $client->get('/');\n```\n\n----------------------------------------\n\nTITLE: Running wrk benchmark command in bash\nDESCRIPTION: This code snippet shows a bash command used to benchmark the Hyperf application with `wrk`. It simulates 1024 connections across 8 threads against the specified URL and measures performance metrics.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwrk -c 1024 -t 8 http://127.0.0.1:9501/\n```\n\n----------------------------------------\n\nTITLE: Setting Variables in PHP\nDESCRIPTION: This snippet demonstrates how to set variables for use in RPN expressions.  The second argument of the `calculate` method is an array containing the variable values. The variables are referenced in the RPN expression using square brackets with an index, e.g., `[0]` refers to the first element of the array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/rpn.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->calculate('[0] 1 2 + 4 * + [1] -', [5, 10]); // '7'\n```\n\n----------------------------------------\n\nTITLE: Configure HTTP Proxy for Hyperf in Nginx\nDESCRIPTION: This Nginx configuration sets up an HTTP reverse proxy for Hyperf. It defines an upstream block with Hyperf server addresses, configures header forwarding, and sets the proxy_pass directive to route requests to the Hyperf upstream.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/nginx.md#_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\n# 至少需要一個 Hyperf 節點，多個配置多行\nupstream hyperf {\n    # Hyperf HTTP Server 的 IP 及 端口\n    server 127.0.0.1:9501;\n    server 127.0.0.1:9502;\n}\n\nserver {\n    # 監聽端口\n    listen 80; \n    # 綁定的域名，填寫您的域名\n    server_name proxy.hyperf.io;\n\n    location / {\n        # 將客户端的 Host 和 IP 信息一併轉發到對應節點  \n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        \n        # 轉發Cookie，設置 SameSite\n        proxy_cookie_path / \"/; secure; HttpOnly; SameSite=strict\";\n        \n        # 執行代理訪問真實服務器\n        proxy_pass http://hyperf;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Default Locale in Hyperf\nDESCRIPTION: Configures the default locale and fallback locale for the Hyperf application within the `translation.php` configuration file. This configuration determines the default language used by the application and the language to fall back to if a translation is missing in the default language.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/translation.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/translation.php\n\nreturn [\n    // default language\n    'locale' => 'zh_CN',\n    // Fallback language, when the language text of the default language is not provided, the corresponding language text of the fallback language will be used\n    'fallback_locale' => 'en',\n    // Folder where language files are stored\n    'path' => BASE_PATH . '/storage/languages',\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Autoloading for gRPC Classes\nDESCRIPTION: This JSON snippet configures Composer's autoloading feature to include the generated gRPC classes. It maps the 'GPBMetadata\\' and 'Grpc\\' namespaces to the 'grpc/GPBMetadata' and 'grpc/Grpc' directories, respectively.  After modifying composer.json, run `composer dump-autoload`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/grpc.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\\": \"app/\",\n            \"GPBMetadata\\\\\": \"grpc/GPBMetadata\",\n            \"Grpc\\\\\": \"grpc/Grpc\"\n        },\n        \"files\": [\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hyperf Nano Using Hyperf Components Example\nDESCRIPTION: Demonstrates how to use Hyperf components, such as the database component, in a Hyperf Nano application. It configures the database connection and performs a query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nano.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\DB\\DB;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->config([\n    'db.default' => [\n        'host' => env('DB_HOST', 'localhost'),\n        'port' => env('DB_PORT', 3306),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n    ]\n]);\n\n$app->get('/', function(){\n    return DB::query('SELECT * FROM `user` WHERE gender = ?;', [1]);\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Publishing Filesystem Configuration\nDESCRIPTION: Publish the filesystem configuration file to allow customization of default driver and storage configurations. This command generates the `config/autoload/file.php` file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/filesystem.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/filesystem\n```\n\n----------------------------------------\n\nTITLE: Initialize Consul KV Client\nDESCRIPTION: Initializes a Consul KV client using the Hyperf framework, injecting dependencies such as the ClientFactory and ApplicationContext. It creates a new KV instance with a configured Guzzle HTTP client pointed at the Consul server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/consul.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Consul\\KV;\nuse Hyperf\\Guzzle\\ClientFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n$clientFactory = $container->get(ClientFactory::class);\n\n$consulServer = 'http://127.0.0.1:8500';\n$kv = new KV(function () use ($clientFactory, $consulServer) {\n    return $clientFactory->create([\n        'base_uri' => $consulServer,\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Using #[Middlewares] Attribute in PHP8\nDESCRIPTION: Demonstrates the change in middleware declaration syntax in PHP 8 for the Hyperf framework. It shows the transition from using `@Middlewares` annotations to using the `#[Middlewares]` attribute.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.2.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n#[Middlewares(FooMiddleware::class)]\n```\n\n----------------------------------------\n\nTITLE: Calling the Controller via cURL\nDESCRIPTION: This command demonstrates how to call the controller using cURL. It sends a GET request to the specified URL with a 'target' parameter.  The URL includes the server address, port, and a query parameter 'target' set to 'Hyperf'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/controller.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl 'http://127.0.0.1:9501/?target=Hyperf'\nHello Hyperf.\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Validation\nDESCRIPTION: Installs the hyperf/validation component using composer.  This command is used to add the validation component to your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/validation\n```\n\n----------------------------------------\n\nTITLE: Defining Command Arguments (PHP)\nDESCRIPTION: Defines a command argument using the `getArguments()` method. This defines expected input parameters that can be passed when executing the command. Retrieves the argument value in the `handle()` function using `$this->input->getArgument()`. Includes handling for optional arguments with a default value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    /**\n     * 執行的命令列\n     */\n    protected ?string $name = 'foo:hello';\n\n    public function handle()\n    {\n        // 從 $input 獲取 name 引數\n        $argument = $this->input->getArgument('name') ?? 'World';\n        $this->line('Hello ' . $argument, 'info');\n    }\n\n    protected function getArguments()\n    {\n        return [\n            ['name', InputArgument::OPTIONAL, '這裡是對這個引數的解釋']\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure Model Index (PHP)\nDESCRIPTION: Overrides the `searchableAs` method on a model to customize the index name.  By default, Scout uses the model's table name as the index. This allows specifying a different index name for the model in Elasticsearch.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\Scout\\Searchable;\nuse Hyperf\\Database\\Model\\Model;\n\nclass Post extends Model\n{\n    use Searchable;\n\n    /**\n     * Get the index name for the model.\n     *   *\n     * @return string\n     */\n    public function searchableAs()\n    {\n        return 'posts_index';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Static Resources in Hyperf\nDESCRIPTION: Configures Swoole to serve static files from the public directory by setting the document_root and enabling the static handler in the server configuration file. Allows Swoole to directly serve static assets.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'settings' => [\n        ...\n        // static resources\n        'document_root' => BASE_PATH.'/public',\n        'enable_static_handler' => true,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Annotation Collectors in a component - PHP\nDESCRIPTION: This snippet shows how to configure custom collectors to annotations.scan.collectors in a component using the ConfigProvider.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/2.0.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'annotations' => [\n        'scan' => [\n            'collectors' => [\n                CustomCollector::class,\n            ],\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Initialize ClassLoader in Hyperf entrypoint\nDESCRIPTION: This snippet demonstrates how to initialize the ClassLoader in the `bin/hyperf.php` file. It adds the line `Hyperf\\Di\\ClassLoader::init();` at the beginning of the anonymous function to properly handle AOP changes in version 2.0. This ensures that dependency injection and AOP features function correctly after the upgrade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.0.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nini_set('display_errors', 'on');\nini_set('display_startup_errors', 'on');\n\nerror_reporting(E_ALL);\ndate_default_timezone_set('Asia/Shanghai');\n\n! defined('BASE_PATH') && define('BASE_PATH', dirname(__DIR__, 1));\n! defined('SWOOLE_HOOK_FLAGS') && define('SWOOLE_HOOK_FLAGS', SWOOLE_HOOK_ALL);\n\nrequire BASE_PATH . '/vendor/autoload.php';\n\n// Self-called anonymous function that creates its own scope and keep the global namespace clean.\n(function () {\n    Hyperf\\Di\\ClassLoader::init();\n\n    /** @var \\Psr\\Container\\ContainerInterface $container */\n    $container = require BASE_PATH . '/config/container.php';\n\n    $application = $container->get(\\Hyperf\\Contract\\ApplicationInterface::class);\n    $application->run();\n})();\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Process Class - Hyperf PHP\nDESCRIPTION: This code snippet demonstrates the creation of a custom process class in Hyperf by extending the AbstractProcess class and implementing the handle method.  The handle method is where the custom process's logic is defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/process.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\n\nclass FooProcess extends AbstractProcess\n{\n    public function handle(): void\n    {\n        // Your code...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Server Connection in Hyperf (PHP)\nDESCRIPTION: This snippet shows the configuration settings for a SQL Server database connection within the Hyperf framework. It defines the driver, host, database, port, username, password, odbc_datasource_name and odbc flag. Environment variables are used to configure the database settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/quick-start.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/databases.php\nreturn [\n    // Other configurations\n    'sqlserver' => [\n        'driver' => env('DB_DRIVER', 'sqlsrv'),\n        'host' => env('DB_HOST', 'mssql'),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'port' => env('DB_PORT', 1443),\n        'username' => env('DB_USERNAME', 'SA'),\n        'password' => env('DB_PASSWORD'),\n        'odbc_datasource_name' => 'DRIVER={ODBC Driver 18 for SQL Server};SERVER=127.0.0.1,1433;TrustServerCertificate=yes;database=hyperf',\n        'odbc'  =>  true,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Add Listener to Resume Exit Coordinator after Command Execution (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to add a listener that resumes the exit coordinator after a command is executed. This is needed to prevent the process from being unable to exit when a listener listens to the `Command` event and performs `AMQP` or other multiplexing logic.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/3.0.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Command\\Event\\AfterExecute;\nuse Hyperf\\Coordinator\\Constants;\nuse Hyperf\\Coordinator\\CoordinatorManager;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\n\n#[Listener]\nclass ResumeExitCoordinatorListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            AfterExecute::class,\n        ];\n    }\n\n    public function process(object $event): void\n    {\n        CoordinatorManager::until(Constants::WORKER_EXIT)->resume();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Method Level Annotation Example in PHP\nDESCRIPTION: This example demonstrates how to define a method-level annotation using the #[AnnotationName] syntax in PHP. The MethodAnnotation annotation is applied to the bar method of the Foo class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/annotation.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass Foo\n{\n    #[MethodAnnotation]\n    public function bar()\n    {\n        // some code\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ConfigProvider file structure for 1.1 PHP\nDESCRIPTION: This snippet shows the structure of the ConfigProvider file in Hyperf 1.1. The scan paths were moved to 'annotations' -> 'scan' -> 'paths'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/1.1.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nclass ConfigProvider\n{\n\n    public function __invoke(): array\n    {\n        return [\n            'annotations' => [\n                'scan' => [\n                    'paths' => [\n                        __DIR__,\n                    ],\n                ],\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AMQP Consumer Return Type (After v3.1)\nDESCRIPTION: Illustrates the updated `consumeMessage` method's return type in AMQP consumers in v3.1, which is now the `Result` enum itself, instead of a string.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/3.1.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// v3.1之後\npublic function consumeMessage($data, AMQPMessage $message): Result\n{\n    return Result::ACK;\n}\n```\n\n----------------------------------------\n\nTITLE: Install Apollo Configuration Center via Composer\nDESCRIPTION: This command installs the hyperf/config-apollo package, which provides integration with the Apollo Configuration Center for Hyperf applications. It uses Composer, the PHP dependency manager, to download and install the necessary files.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/config-center.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-apollo\n```\n\n----------------------------------------\n\nTITLE: Publish Filesystem Configuration\nDESCRIPTION: This command publishes the default filesystem configuration file to `config/autoload/file.php`.  This file allows you to configure the default driver and credentials for your storage providers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/filesystem.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/filesystem\n```\n\n----------------------------------------\n\nTITLE: Inner Join Clause in Hyperf\nDESCRIPTION: This snippet demonstrates how to perform a basic inner join using the `join` method in Hyperf. It joins 'users' with 'contacts' and 'orders' tables, selecting fields from all three tables.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->join('contacts', 'users.id', '=', 'contacts.user_id')\n    ->join('orders', 'users.id', '=', 'orders.user_id')\n    ->select('users.*', 'contacts.phone', 'orders.price')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Configure Default Metrics Collection\nDESCRIPTION: This PHP snippet configures whether to enable the collection of default metrics, including memory usage, system CPU load, and Swoole Server and Swoole Coroutine metrics.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'enable_default_metric' => env('TELEMETRY_ENABLE_DEFAULT_TELEMETRY', true),\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf ETCD Component\nDESCRIPTION: This command installs the Hyperf ETCD component using Composer. This package provides the necessary classes and functionalities to interact with an ETCD server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/etcd.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer require hyperf/etcd\n```\n\n----------------------------------------\n\nTITLE: Implementing the gRPC Service Method\nDESCRIPTION: This PHP code implements the 'sayHello' method in the 'HiController'. It receives a 'HiUser' object as input, creates a 'HiReply' object, sets the message and user properties, and returns the 'HiReply' object as the response. The input argument `$user` is type-hinted as `HiUser` generated class from protobuf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/grpc.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\npublic function sayHello(HiUser $user) \n{\n    $message = new HiReply();\n    $message->setMessage(\"Hello World\");\n    $message->setUser($user);\n    return $message;\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to MetricFactoryReady Event for Lifecycle Metrics (PHP)\nDESCRIPTION: Illustrates how to listen to the `MetricFactoryReady` event to create metrics with a complete lifecycle, such as monitoring the length of an asynchronous queue.  It retrieves the Redis client from the container, creates a gauge metric for the queue length, and continuously updates the gauge value in a loop, requiring `Hyperf\\Event\\Contract\\ListenerInterface`, `Hyperf\\Metric\\Event\\MetricFactoryReady`, `Psr\\Container\\ContainerInterface` and `Redis` dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Metric\\Event\\MetricFactoryReady;\nuse Psr\\Container\\ContainerInterface;\nuse Redis;\n\nclass OnMetricFactoryReady implements ListenerInterface\n{\n    protected ContainerInterface $container;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n    }\n\n    public function listen(): array\n    {\n        return [\n            MetricFactoryReady::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        $redis = $this->container->get(Redis::class);\n        $gauge = $event\n                    ->factory\n                    ->makeGauge('queue_length', ['driver'])\n                    ->with('redis');\n        while (true) {\n            $length = $redis->llen('queue');\n            $gauge->set($length);\n            sleep(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom Database Connection\nDESCRIPTION: This snippet shows how to specify a custom database connection for the model by setting the `$connection` property. The connection name must exist in the `databases.php` configuration file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected ?string $connection = 'connection-name';\n}\n```\n\n----------------------------------------\n\nTITLE: Blade @env Directive\nDESCRIPTION: This Blade template demonstrates how to use the `@env` directive to execute specific content only when the application is running in the specified environment(s).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_18\n\nLANGUAGE: blade\nCODE:\n```\n@env('staging')\n    // 應用運行於「staging」環境……\n@endenv\n\n@env(['staging', 'production'])\n    // 應用運行於 「staging」環境或生產環境……\n@endenv\n```\n\n----------------------------------------\n\nTITLE: Storing Session Data\nDESCRIPTION: This code demonstrates how to store data in the session using the `set()` method of the `SessionInterface`. It takes a string as the key (`foo`) and any value (`bar`) that needs to be stored in the session.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/session.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$this->session->set('foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Using Anonymous Function for Custom Methods\nDESCRIPTION: This code demonstrates how to define and use a custom method using an anonymous function to interact with the underlying PDO object. This allows for more flexible database operations, such as specifying a different fetch mode.  It returns the results from the database query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/db.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DB\\DB;\n\n$sql = 'SELECT * FROM `user` WHERE id = ?;';\n$bindings = [2];\n$mode = \\PDO::FETCH_OBJ;\n$res = DB::run(function (\\PDO $pdo) use ($sql, $bindings, $mode) {\n    $statement = $pdo->prepare($sql);\n\n    $this->bindValues($statement, $bindings);\n\n    $statement->execute();\n\n    return $statement->fetchAll($mode);\n});\n```\n\n----------------------------------------\n\nTITLE: UserDao Class for Data Access\nDESCRIPTION: This PHP code defines a `UserDao` class that extends a base `Dao` class.  It includes a `first` method that retrieves a User model by ID, optionally throwing a `BusinessException` if the user does not exist.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/testing.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service\\Dao;\n\nuse App\\Constants\\ErrorCode;\nuse App\\Exception\\BusinessException;\nuse App\\Model\\User;\n\nclass UserDao extends Dao\n{\n    /**\n     * @param $id\n     * @param bool $throw\n     * @return\n     */\n    public function first($id, $throw = true)\n    {\n        $model = User::query()->find($id);\n        if ($throw && empty($model)) {\n            throw new BusinessException(ErrorCode::USRE_NOT_EXIST);\n        }\n        return $model;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get First Item in Current Page\nDESCRIPTION: Returns the index of the first item on the current page. This is typically used for display purposes, such as showing 'Displaying items X to Y'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/paginator.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$firstItem = $paginator->firstItem();\n```\n\n----------------------------------------\n\nTITLE: Sometimes Rule Example - PHP\nDESCRIPTION: This snippet shows how to use the `sometimes` validation rule to apply validation rules only when a field exists in the input data. In this case, the `email` field will only be validated if it exists in the `$data` array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_45\n\nLANGUAGE: PHP\nCODE:\n```\n$validator = $this->validationFactory->make($data, [\n    'email' => 'sometimes|required|email',\n]);\n```\n\n----------------------------------------\n\nTITLE: Convert Doctrine Annotations to PHP8 Attributes\nDESCRIPTION: This command requires the hyperf/code-generator package and is used to convert Doctrine Annotations to PHP8 Attributes. It is designed to be used when upgrading to Hyperf 3.0, which requires the use of PHP8's native attributes instead of Doctrine Annotations. The -D app option specifies the target directory for the conversion.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog-v3.0.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp bin/hyperf.php code:generate -D app\n```\n\n----------------------------------------\n\nTITLE: Handle HTTP Route with ReactiveX\nDESCRIPTION: This code demonstrates how to handle HTTP routes using ReactiveX with `Observable::fromHttpRoute`.  It captures POST and PUT requests to the '/save' route, extracts the request body, buffers 10 bodies together, and then processes them, printing the count of bodies (10). The execution needs to happen before the Server starts, e.g. in `BootApplication` event listener.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/reactive-x.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\ReactiveX\\Example;\n\nuse Hyperf\\Database\\Events\\QueryExecuted;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\nuse Hyperf\\ReactiveX\\Observable;\nuse Psr\\Http\\Message\\RequestInterface;\n\nclass BatchSaveRoute implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            BootApplication::class,\n        ];\n    }\n\n    /**\n     * @param QueryExecuted $event\n     */\n    public function process(object $event)\n    {\n        Observable::fromHttpRoute(['POST', 'PUT'], '/save')\n            ->map(\n                function (RequestInterface $request) {\n                    return $request->getBody();\n                }\n            )\n            ->bufferWithCount(10)\n            ->subscribe(\n                function (array $bodies) {\n                    echo count($bodies); //10\n                }\n            );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Tracer Driver (Zipkin/Jaeger) in Hyperf\nDESCRIPTION: This PHP code snippet demonstrates how to configure the default Tracer driver in Hyperf, choosing between Zipkin and Jaeger, and defines specific configurations for each driver. The 'default' key specifies the active driver, while the 'tracer' array contains driver-specific settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tracer.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    // 選擇預設的 Tracer 驅動，所選 Tracer 名稱對應 tracers 下定義的鍵\n    'default' => env('TRACER_DRIVER', 'staging_zipkin'),\n\n    // 這裡暫時省略其他配置\n    'enable' => [],\n\n    'tracer' => [\n        // Zipkin 配置\n        'staging_zipkin' => [\n            'driver' => \\Hyperf\\Tracer\\Adapter\\ZipkinTracerFactory::class,\n        ],\n        // 另一套 Zipkin 配置\n        'producton_zipkin' => [\n            'driver' => \\Hyperf\\Tracer\\Adapter\\ZipkinTracerFactory::class,\n        ],\n        // Jaeger 配置\n        'jaeger' => [\n            'driver' => \\Hyperf\\Tracer\\Adapter\\JaegerTracerFactory::class,\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Fluent Retry with Callbacks and Conditions PHP\nDESCRIPTION: This example illustrates the fluent interface for configuring retry behavior. It defines a retry condition based on a return value, sets limits on the number of retries and duration, specifies a sleep interval, and provides a fallback function to execute after exhausting all retry attempts.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/retry.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$result = \\Hyperf\\Retry\\Retry::whenReturns(false) // 當返回false時重試\n    ->max(3) // 最多3次\n    ->inSeconds(5) // 最長5秒\n    ->sleep(1) // 間隔1毫秒\n    ->fallback(function(){return true;}) // fallback函式\n    ->call(function(){\n        if (rand(1, 100) >= 20){\n            return true;\n        }\n        return false;\n    });\n```\n\n----------------------------------------\n\nTITLE: Using Swoole Configuration with Guzzle\nDESCRIPTION: Shows how to configure Swoole settings for the Guzzle client when using the CoroutineHandler.  Note that these settings only apply when using the CoroutineHandler and will override existing configurations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/guzzle.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse GuzzleHttp\\Client;\nuse Hyperf\\Guzzle\\CoroutineHandler;\nuse GuzzleHttp\\HandlerStack;\n\n$client = new Client([\n    'base_uri' => 'http://127.0.0.1:8080',\n    'handler' => HandlerStack::create(new CoroutineHandler()),\n    'timeout' => 5,\n    'swoole' => [\n        'timeout' => 10,\n        'socket_buffer_size' => 1024 * 1024 * 2,\n    ],\n]);\n\n$response = $client->get('/');\n\n```\n\n----------------------------------------\n\nTITLE: Coroutine Synchronization with CoordinatorManager in Hyperf\nDESCRIPTION: This code snippet demonstrates how to use the `Hyperf\\Coordinator\\CoordinatorManager` class to synchronize coroutine execution with worker events like `WORKER_START` and `WORKER_EXIT`. It uses `CoordinatorManager::until()` to make the coroutine wait until the specified event has occurred before proceeding. Requires `Hyperf\\Coordinator\\CoordinatorManager`, `Hyperf\\Coordinator\\Constants`, and `Hyperf\\Coroutine\\Coroutine`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/support.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Coordinator\\CoordinatorManager;\nuse Hyperf\\Coordinator\\Constants;\nuse Hyperf\\Coroutine\\Coroutine;\n\nCoroutine::create(function() {\n    // 所有OnWorkerStart事件回调完成后唤醒\n    CoordinatorManager::until(Constants::WORKER_START)->yield();\n    echo 'worker started';\n    // 分配资源\n    // 所有OnWorkerExit事件回调完成后唤醒\n    CoordinatorManager::until(Constants::WORKER_EXIT)->yield();\n    echo 'worker exited';\n    // 回收资源\n});\n```\n\n----------------------------------------\n\nTITLE: Setting memory_limit in php.ini\nDESCRIPTION: This snippet demonstrates how to modify the `memory_limit` setting in the php.ini configuration file. Increasing the memory limit can resolve issues where the application fails to run due to insufficient memory. Setting `memory_limit` to `-1` removes the limit.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/questions.md#_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nmemory_limit=-1\n```\n\n----------------------------------------\n\nTITLE: Checking for Session Value\nDESCRIPTION: This snippet demonstrates how to check if a specific key exists in the session using the `has()` method of the `SessionInterface`. It returns `true` if the key exists and the value is not `null`, otherwise it returns `false`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/session.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nif ($this->session->has('foo')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Property Level Annotation Example in PHP\nDESCRIPTION: This example demonstrates how to define a property-level annotation using the #[AnnotationName] syntax in PHP. The PropertyAnnotation annotation is applied to the $bar property of the Foo class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/annotation.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass Foo\n{\n    #[PropertyAnnotation]\n    private $bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Resource Collection Definition (Hyperf, PHP)\nDESCRIPTION: Defines a custom resource collection in Hyperf, extending `ResourceCollection` to customize the structure of the JSON response. The `toArray` method is overridden to add a `data` key containing the collection and a `links` key with metadata.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Table Options in Hyperf Migration\nDESCRIPTION: This code demonstrates setting table options such as engine, charset, collation, and creating a temporary table inside a migration file, using the `$table` object. These attributes are set within the `Blueprint` closure when creating the table. These parameters need to be defined inside of a table create closure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// Specify the table storage engine\n$table->engine = 'InnoDB';\n// Specifies the default character set for data tables\n$table->charset = 'utf8';\n// Specifies the default collation of the data table\n$table->collation = 'utf8_unicode_ci';\n// Create a temporary table\n$table->temporary();\n```\n\n----------------------------------------\n\nTITLE: Supporting BIT Type in Hyperf\nDESCRIPTION: This code demonstrates how to support the BIT type in Hyperf's ORM by creating an event listener that resolves the `mysql` connection to use a custom `MySqlBitConnection`. This allows the ORM to properly handle BIT type columns in the database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Database\\Connection;\nuse Hyperf\\Database\\MySqlBitConnection;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\n\n#[Listener]\nclass SupportMySQLBitListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            BootApplication::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        Connection::resolverFor('mysql', static function ($connection, $database, $prefix, $config) {\n            return new MySqlBitConnection($connection, $database, $prefix, $config);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Handlers Inline - PHP\nDESCRIPTION: This configuration shows how to define multiple Monolog handlers directly within the 'default' log group configuration. It sets up two handlers: one for 'hyperf.log' which logs INFO and above, and another for 'hyperf-debug.log' that logs INFO and above as JSON. It uses the Monolog StreamHandler and LineFormatter/JsonFormatter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/logger.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Monolog\\Handler;\nuse Monolog\\Formatter;\nuse Monolog\\Level;\n\nreturn [\n    'default' => [\n        'handlers' => [\n            [\n                'class' => Handler\\StreamHandler::class,\n                'constructor' => [\n                    'stream' => BASE_PATH . '/runtime/logs/hyperf.log',\n                    'level' => Level::Info,\n                ],\n                'formatter' => [\n                    'class' => Formatter\\LineFormatter::class,\n                    'constructor' => [\n                        'format' => null,\n                        'dateFormat' => null,\n                        'allowInlineLineBreaks' => true,\n                    ],\n                ],\n            ],\n            [\n                'class' => Handler\\StreamHandler::class,\n                'constructor' => [\n                    'stream' => BASE_PATH . '/runtime/logs/hyperf-debug.log',\n                    'level' => Level::Info,\n                ],\n                'formatter' => [\n                    'class' => Formatter\\JsonFormatter::class,\n                    'constructor' => [\n                        'batchMode' => Formatter\\JsonFormatter::BATCH_MODE_JSON,\n                        'appendNewline' => true,\n                    ],\n                ],\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Producing Delayed Messages with Hyperf Command\nDESCRIPTION: This snippet shows how to create a Hyperf command to produce delayed messages using the AMQP component. It demonstrates using different exchange types (direct, fanout, topic) and setting a delay for the message.  The producer is retrieved from the application context.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/amqp.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse App\\Amqp\\Producer\\DelayDirectProducer;\n//use App\\Amqp\\Producer\\DelayFanoutProducer;\n//use App\\Amqp\\Producer\\DelayTopicProducer;\nuse Hyperf\\Amqp\\Producer;\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Context\\ApplicationContext;\nuse Psr\\Container\\ContainerInterface;\n\n#[Command]\nclass DelayCommand extends HyperfCommand\n{\n    protected ContainerInterface $container;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n\n        parent::__construct('demo:command');\n    }\n\n    public function configure()\n    {\n        parent::configure();\n        $this->setDescription('Hyperf Demo Command');\n    }\n\n    public function handle()\n    {\n        //1.delayed + direct\n        $message = new DelayDirectProducer('delay+direct produceTime:'.(microtime(true)));\n        //2.delayed + fanout\n        //$message = new DelayFanoutProducer('delay+fanout produceTime:'.(microtime(true)));\n        //3.delayed + topic\n        //$message = new DelayTopicProducer('delay+topic produceTime:' . (microtime(true)));\n        $message->setDelayMs(5000);\n        $producer = ApplicationContext::getContainer()->get(Producer::class);\n        $producer->produce($message);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Building Phar Package (Custom Version)\nDESCRIPTION: This command builds a Phar package with a custom version specified using the `--phar-version` option. The specified version number will be embedded within the Phar archive.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/phar.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php phar:build --phar-version=1.0.1\n```\n\n----------------------------------------\n\nTITLE: Register a JSONRPC Protocol\nDESCRIPTION: This code snippet demonstrates how to register a JSONRPC protocol using the `Hyperf\\Jet\\ProtocolManager`. It configures the transporter, packer, data formatter, and path generator for the protocol.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/jet.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Jet\\DataFormatter\\DataFormatter;\nuse Hyperf\\Jet\\Packer\\JsonEofPacker;\nuse Hyperf\\Jet\\PathGenerator\\PathGenerator;\nuse Hyperf\\Jet\\ProtocolManager;\nuse Hyperf\\Jet\\Transporter\\StreamSocketTransporter;\n\nProtocolManager::register($protocol = 'jsonrpc', [\n    ProtocolManager::TRANSPORTER => new StreamSocketTransporter(),\n    ProtocolManager::PACKER => new JsonEofPacker(),\n    ProtocolManager::PATH_GENERATOR => new PathGenerator(),\n    ProtocolManager::DATA_FORMATTER => new DataFormatter(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Configure Session Sid Provider for Socket.IO in Hyperf\nDESCRIPTION: This PHP configuration snippet demonstrates how to configure the Session Sid Provider for Socket.IO in Hyperf.  Using the Session Sid Provider sets the SocketID to be the SessionID. This is useful when you need to associate Socket.IO connections directly with user sessions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/socketio-server.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\SocketIOServer\\SidProvider\\SidProviderInterface::class => \\Hyperf\\SocketIOServer\\SidProvider\\SessionSidProvider::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Request and Response Header Handling (PHP)\nDESCRIPTION: Illustrates the changes in `withHeaders`, `withHeader`, `withAddedHeader`, `setHeaders`, `setHeader`, and `addHeader` methods for Request and Response objects in Hyperf v3.1 compared to previous versions. The `withHeaders` and `setHeaders` methods now replace the existing headers instead of merging them.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/3.1.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// v3.1 之前\n$request->withHeader('foo', 1)->withHeader('bar', 2); // ['foo' => [1], 'bar' => [2]]\n$request->withHeader('foo', 1)->withHeader('foo', 2); // ['foo' => [2]]\n$request->withAddedHeader('foo', 1)->withAddedHeader('foo', 2); // ['foo' => [1, 2]]\n\n$request->withHeaders(['foo' => 1])->withHeaders(['bar' => 2]); // ['foo' => [1], 'bar' => [2]]\n\n// v3.1 之後\n$request->withHeader('foo', 1)->withHeader('bar', 2); // ['foo' => [1], 'bar' => [2]]\n$request->withHeader('foo', 1)->withHeader('foo', 2); // ['foo' => [2]]\n$request->withAddedHeader('foo', 1)->withAddedHeader('foo', 2); // ['foo' => [1, 2]]\n\n$request->withHeaders(['foo' => 1])->withHeaders(['bar' => 2]); // ['bar' => [2]]\n\n$request->setHeader('foo', 1)->setHeader('bar', 2); // ['foo' => [1], 'bar' => [2]]\n$request->setHeader('foo', 1)->setHeader('foo', 2); // ['foo' => [2]]\n$request->addHeader('foo', 1)->addHeader('foo', 2); // ['foo' => [1, 2]]\n\n$request->setHeaders(['foo' => 1])->setHeaders(['bar' => 2]); // ['bar' => [2]]\n\n```\n\n----------------------------------------\n\nTITLE: Installing hyperf/translation for Internationalization\nDESCRIPTION: This command installs the hyperf/translation package, which is required for enabling internationalization support in the hyperf/constants component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/constants.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ncomposer require hyperf/translation\n```\n\n----------------------------------------\n\nTITLE: Rendering JSON in Blade\nDESCRIPTION: This Blade template demonstrates how to render a PHP array as JSON using the `@json` directive. The second example shows how to use the `JSON_PRETTY_PRINT` option to format the JSON for better readability.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<script>\n    var app = @json($array);\n\n    var app = @json($array, JSON_PRETTY_PRINT);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Removing Data Wrapping from a Resource Collection\nDESCRIPTION: Demonstrates how to remove the default data wrapping from a resource collection using the `withoutWrapping` method. This will return the resource data without the 'data' key at the top level.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\UserCollection;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserCollection(User::all()))->withoutWrapping()->toResponse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Circuit Breaker\nDESCRIPTION: This command installs the hyperf/circuit-breaker package via composer. Composer is a dependency manager for PHP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/circuit-breaker.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/circuit-breaker\n```\n\n----------------------------------------\n\nTITLE: Define Route Parameter in Hyperf\nDESCRIPTION: This snippet demonstrates how to define a route parameter in Hyperf.  The `{id}` in the URI defines a required parameter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/router.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nRouter::get('/user/{id}', 'App\\Controller\\UserController::info');\n```\n\n----------------------------------------\n\nTITLE: Displaying Data in Blade\nDESCRIPTION: This Blade template displays the value of the `$name` variable using double curly braces `{{ }}`. Blade automatically escapes the output to prevent XSS attacks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\nHello, {{ $name }}.\n```\n\n----------------------------------------\n\nTITLE: Starting the Hyperf Watcher\nDESCRIPTION: This command starts the Hyperf server with the watcher enabled.  It monitors files for changes and automatically restarts the server when changes are detected. This command should be run from the project root directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/watcher.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php server:watch\n```\n\n----------------------------------------\n\nTITLE: Search Within Specific Index (PHP)\nDESCRIPTION: Specifies a custom index to search within. The `within` method allows overriding the default index defined by the model's `searchableAs` method. This enables searching across different indices.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$orders = App\\Order::search('Star Trek')\n    ->within('tv_shows_popularity_desc')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Simple GraphQL Response\nDESCRIPTION: The JSON response from the 'hello' GraphQL query. It contains the 'data' field with the result of the query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/graphql.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"data\": {\n        \"hello\": \"graphql\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize ClassLoader in PHPUnit - PHP\nDESCRIPTION: This snippet shows the required initialization of the ClassLoader in the `tests/bootstrap.php` file for PHPUnit.  Like the entry file, this is necessary to support changes to the AOP logic in Hyperf 2.0.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/2.0.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nerror_reporting(E_ALL);\ndate_default_timezone_set('Asia/Shanghai');\n\n! defined('BASE_PATH') && define('BASE_PATH', dirname(__DIR__, 1));\n! defined('SWOOLE_HOOK_FLAGS') && define('SWOOLE_HOOK_FLAGS', SWOOLE_HOOK_ALL);\n\nSwoole\\Runtime::enableCoroutine(true);\n\nrequire BASE_PATH . '/vendor/autoload.php';\n\nHyperf\\Di\\ClassLoader::init();\n\n$container = require BASE_PATH . '/config/container.php';\n\n$container->get(Hyperf\\Contract\\ApplicationInterface::class);\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Records - PHP\nDESCRIPTION: This snippet demonstrates how to delete records from the database using the `delete` method. A `where` clause can be used to specify which records to delete.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->delete();\n\nDb::table('users')->where('votes', '>', 100)->delete();\n```\n\n----------------------------------------\n\nTITLE: Setting Coroutine Context Value in Hyperf\nDESCRIPTION: Demonstrates setting a value in the current coroutine context using the `Context::set()` method. The `set` method stores a value with a given key and returns the value itself.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/coroutine.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Context\\Context;\n\n// 將 bar 字符串以 foo 為 key 儲存到當前協程上下文中\n$foo = Context::set('foo', 'bar');\n// set 方法會再將 value 作為方法的返回值返回回來，所以 $foo 的值為 bar\n```\n\n----------------------------------------\n\nTITLE: Adding app_env and scan_cacheable to config/config.php\nDESCRIPTION: This snippet demonstrates how to add the `app_env` and `scan_cacheable` configuration items to the `config/config.php` configuration file. The `scan_cacheable` option controls whether to use annotations to scan the cache when the application starts, optimizing startup time and reducing memory overhead.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.0.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    // The production environment uses the prod value\n    'app_env' => env('APP_ENV', 'dev'),\n    // Whether to scan the cache with annotations\n    'scan_cacheable' => env('SCAN_CACHEABLE', false),\n];\n\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Nacos\nDESCRIPTION: This command installs the Hyperf Nacos package using Composer. It is a dependency for integrating Nacos with Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nacos.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/nacos\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependency for StdoutLoggerInterface\nDESCRIPTION: This configuration file binds the `StdoutLoggerInterface` to the `StdoutLoggerFactory`, ensuring that stdout logging is handled by Monolog.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/logger.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\Contract\\StdoutLoggerInterface::class => \\App\\StdoutLoggerFactory::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Deleting NSQ Topic via API\nDESCRIPTION: This code demonstrates how to delete an NSQ topic using the `Hyperf\\Nsq\\Nsqd\\Topic` API client. It retrieves the Topic client from the container and then calls the `delete()` method with the topic name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nsq.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\Nsq\\Nsqd\\Topic;\n\n$container = ApplicationContext::getContainer();\n\n$client = $container->get(Topic::class);\n\n$client->delete('hyperf.test');\n```\n\n----------------------------------------\n\nTITLE: Defining a Class-Based Component (PHP)\nDESCRIPTION: This code snippet demonstrates how to define a class-based component in Hyperf.  It involves creating a class that extends `\\Hyperf\\ViewEngine\\Component\\Component::class`, defining public properties for data, and implementing the `render` method to return the view. It requires the `Hyperf\\ViewEngine` component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\View\\Component;\nuse Hyperf\\ViewEngine\\Component\\Component;\nuse function Hyperf\\ViewEngine\\view;\nclass Alert extends Component\n{\n    public $type;\n    public $message;\n    public function __construct($type, $message)\n    {\n        $this->type = $type;\n        $this->message = $message;\n    }\n    public function render()\n    {\n        return view('components.alert');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Attributes (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to conditionally add an attribute to a resource response using the `when` method. The `secret` key is only included if `Auth::user()->isAdmin()` returns `true`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'secret' => $this->when(Auth::user()->isAdmin(), 'secret-value'),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning a Blade View\nDESCRIPTION: This PHP code defines a Hyperf controller action that returns a Blade view named 'child'. The `view()` helper function is used to render the template.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse function Hyperf\\ViewEngine\\view;\n\n#[AutoController(prefix: \"view\")]\nclass ViewController extends AbstractController\n{\n    public function child()\n    {\n        return (string) view('child');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Hyperf Resource Collection Class\nDESCRIPTION: This PHP code defines a basic resource collection `UserCollection` extending `ResourceCollection`. The `toArray` method defines the structure of the resource collection response, including a `data` field containing the collection and a `links` field for metadata.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @return array\n     */\n    public function toArray() :array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: New ConfigProvider file structure in PHP\nDESCRIPTION: Illustrates the updated file structure of ConfigProvider in Hyperf 1.1. The scan paths are now defined under the 'annotations.scan.path' key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/1.1.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nclass ConfigProvider\n{\n\n    public function __invoke(): array\n    {\n        return [\n            'annotations' => [\n                'scan' => [\n                    'paths' => [\n                        __DIR__,\n                    ],\n                ],\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Register Multiple HTTP Method Route in Hyperf\nDESCRIPTION: This snippet demonstrates how to register a route that responds to multiple HTTP methods in Hyperf using the `addRoute` method. Requires `Hyperf\\HttpServer\\Router\\Router`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/router.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\HttpServer\\Router\\Router;\n\nRouter::addRoute(['GET', 'POST','PUT','DELETE'], $uri, $callback);\n```\n\n----------------------------------------\n\nTITLE: Defining a Resource Collection Class\nDESCRIPTION: Defines a resource collection class that extends 'Hyperf\\Resource\\Json\\ResourceCollection'. The 'toArray' method transforms the resource collection into an array, allowing you to add metadata like 'links' to the response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @return array\n     */\n    public function toArray() :array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Data to View (Hyperf)\nDESCRIPTION: This snippet demonstrates how to pass data to a view in Hyperf using a route definition. The 'name' variable is passed to the 'welcome' view.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\HttpServer\\Router\\Router;\nuse function Hyperf\\ViewEngine\\view;\n\nRouter::get('greeting', function () {\n    return view('welcome', ['name' => 'Samantha']);\n});\n```\n\n----------------------------------------\n\nTITLE: CacheAhead Annotation Example\nDESCRIPTION: Demonstrates the `CacheAhead` annotation which prefetches cache data before the TTL expires to prevent cache misses. `aheadSeconds` and `lockSeconds` control the prefetch timing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/cache.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\CacheAhead;\n\nclass UserService\n{\n    #[CacheAhead(prefix: \"user\", ttl: 7200, aheadSeconds: 600, lockSeconds: 10)]\n    public function user(int $id): array\n    {\n        $user = User::query()->find($id);\n\n        return [\n            'user' => $user->toArray(),\n            'uuid' => $this->unique(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Custom Collector to annotations.php\nDESCRIPTION: This snippet shows how to add CustomCollector class to `config/autoload/annotations.php`. If you're using custom annotations and a custom collector, you need to configure the Collector within the annotation scan collectors, in the development mode the code can determine whether to re-collect corresponding annotation metadata according to the modification time of the file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.0.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'scan' => [\n        'collectors' => [\n            CustomCollector::class,\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Records into Index\nDESCRIPTION: This command imports all existing records from a specified model into the search index. This is useful when integrating Scout into an existing project with pre-existing data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php scout:import \"App\\Post\"\n```\n\n----------------------------------------\n\nTITLE: Convert Swoole Channel to Observable Sequence\nDESCRIPTION: This code demonstrates how to convert a Swoole coroutine Channel into an Observable sequence using ReactiveX.  It shows how to publish messages to multiple subscribers via a Channel.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/reactive-x.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\ReactiveX\\Observable;\nuse Swoole\\Coroutine\\Channel;\n\n$chan = new Channel(1);\n$pub = Observable::fromChannel($chan)->publish();\n\n$pub->subscribe(function ($x) {\n    echo 'First Subscription:' . $x . PHP_EOL;\n});\n$pub->subscribe(function ($x) {\n    echo 'Second Subscription:' . $x . PHP_EOL;\n});\n$pub->connect();\n\n$chan->push('hello');\n$chan->push('world');\n\n// First Subscription: hello\n// Second Subscription: hello\n// First Subscription: world\n// Second Subscription: world\n```\n\n----------------------------------------\n\nTITLE: Modifying Docker Service File\nDESCRIPTION: Modifies the Docker service file to allow TCP connections. This allows remote access to the Docker daemon.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\nExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375\n```\n\n----------------------------------------\n\nTITLE: Build Phar Archive with Custom Bin File\nDESCRIPTION: Builds a Phar archive with a specified binary file using the `--bin` option. This allows customization of the entry point for the Phar package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/phar.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php phar:build --bin=bin/hyperf.php\n```\n\n----------------------------------------\n\nTITLE: Executing PHPUnit with phpdbg for Coverage (Shell)\nDESCRIPTION: This shell command executes PHPUnit using phpdbg to collect code coverage information. The `-dmemory_limit=1024M` option sets the memory limit, `-qrr` runs the tests quietly and recursively, and `-c phpunit.xml` specifies the configuration file. `--colors=always` forces colored output.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/testing.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nphpdbg -dmemory_limit=1024M -qrr ./vendor/bin/co-phpunit -c phpunit.xml --colors=always\n```\n\n----------------------------------------\n\nTITLE: Install Aliyun OSS Adapter (Flysystem v1.0)\nDESCRIPTION: This command installs the Aliyun OSS adapter for Flysystem v1.0, allowing the application to interact with Aliyun Object Storage Service.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/filesystem.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require xxtime/flysystem-aliyun-oss\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Resources in Swoole\nDESCRIPTION: Configures Swoole to serve static resources by specifying the document root and enabling the static handler in the server settings. This allows Swoole to directly serve static files like CSS, JavaScript, and images.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'settings' => [\n        ...\n        // 靜態資源\n        'document_root' => BASE_PATH . '/public',\n        'enable_static_handler' => true,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Request and Response in Context\nDESCRIPTION: This code snippet demonstrates how to update the request and response objects in the coroutine context using `Hyperf\\Context\\Context::set()`. This is useful when a middleware modifies the request or response and you want subsequent code to access the updated objects.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/middleware/middleware.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\n// $request 和 $response 為修改後的對象\n$request = \\Hyperf\\Context\\Context::set(ServerRequestInterface::class, $request);\n$response = \\Hyperf\\Context\\Context::set(ResponseInterface::class, $response);\n```\n\n----------------------------------------\n\nTITLE: Deleting an NSQ Topic using HTTP API\nDESCRIPTION: This code snippet shows how to delete an NSQ topic using the NSQD HTTP API. It retrieves an instance of the `Hyperf\\Nsq\\Nsqd\\Topic` class from the container and then calls the `delete()` method to delete the specified topic.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nsq.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\Nsq\\Nsqd\\Topic;\n\n$container = ApplicationContext::getContainer();\n\n$client = $container->get(Topic::class);\n\n$client->delete('hyperf.test');\n```\n\n----------------------------------------\n\nTITLE: Install NSQ Package - Composer\nDESCRIPTION: This command installs the Hyperf NSQ package using Composer, a dependency manager for PHP. This package provides the necessary components for integrating NSQ with your Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nsq.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/nsq\n```\n\n----------------------------------------\n\nTITLE: Renaming a Table in Hyperf Migration\nDESCRIPTION: This code shows how to rename a table in a Hyperf migration using the `Schema::rename` method.  Requires knowledge of the old and new table names.  This is typically done inside the `up` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nSchema::rename($from, $to);\n```\n\n----------------------------------------\n\nTITLE: View Namespace Configuration - PHP\nDESCRIPTION: Configures a view namespace, allowing you to reference views within a package using a specific namespace.  This is useful for organizing views within a package and preventing naming conflicts.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass ConfigProvider\n{\n    public function __invoke()\n    {\n        return [\n            // ...others config\n            'view' => [\n                // ...others config\n                'namespaces' => [\n                    'package-name' => __DIR__ . '/../views',\n                ],\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Build Phar Archive (Map External File)\nDESCRIPTION: Builds a Phar archive and maps an external file (e.g., .env) to be accessible within the archive. Requires hyperf/phar version >= v2.1.7\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/phar.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nphp bin/hyperf.php phar:build -M .env\n```\n\n----------------------------------------\n\nTITLE: Rendering Blade View in Controller\nDESCRIPTION: Renders a Blade view from within a Hyperf controller action. It retrieves the `RenderInterface` instance, calls the `render` method with the template name ('index') and data (an array containing the 'name' variable).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\View\\RenderInterface;\n\n#[AutoController]\nclass ViewController\n{\n    public function index(RenderInterface $render)\n    {\n        return $render->render('index', ['name' => 'Hyperf']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration\nDESCRIPTION: Configures the Prometheus driver in the `metric.php` file. This includes settings for scrape mode, push mode, namespace, host, port, and paths.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Metric\\Adapter\\Prometheus\\Constants;\n\nreturn [\n    'default' => env('METRIC_DRIVER', 'prometheus'),\n    'use_standalone_process' => env('TELEMETRY_USE_STANDALONE_PROCESS', true),\n    'enable_default_metric' => env('TELEMETRY_ENABLE_DEFAULT_TELEMETRY', true),\n    'default_metric_interval' => env('DEFAULT_METRIC_INTERVAL', 5),\n    'metric' => [\n        'prometheus' => [\n            'driver' => Hyperf\\Metric\\Adapter\\Prometheus\\MetricFactory::class,\n            'mode' => Constants::SCRAPE_MODE,\n            'namespace' => env('APP_NAME', 'skeleton'),\n            'scrape_host' => env('PROMETHEUS_SCRAPE_HOST', '0.0.0.0'),\n            'scrape_port' => env('PROMETHEUS_SCRAPE_PORT', '9502'),\n            'scrape_path' => env('PROMETHEUS_SCRAPE_PATH', '/metrics'),\n            'push_host' => env('PROMETHEUS_PUSH_HOST', '0.0.0.0'),\n            'push_port' => env('PROMETHEUS_PUSH_PORT', '9091'),\n            'push_interval' => env('PROMETHEUS_PUSH_INTERVAL', 5),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Trigger Custom Exception - PHP\nDESCRIPTION: Demonstrates how to throw a custom exception (`FooException`) within a controller action.  This requires the `FooException` class to be defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/exception-handler.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Exception\\FooException;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        throw new FooException('Foo Exception...', 800);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Supervisor Configuration File\nDESCRIPTION: This command copies the default Supervisor configuration file to a directory specific for application-specific configurations. This allows for managing individual application configurations separately.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/supervisor.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp /etc/supervisord.conf /etc/supervisord.d/supervisord.conf\n```\n\n----------------------------------------\n\nTITLE: Build Phar Archive (Custom Startup File)\nDESCRIPTION: Builds a Phar archive with a custom startup file using the `--bin` option.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/phar.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nphp bin/hyperf.php phar:build --bin=bin/hyperf.php\n```\n\n----------------------------------------\n\nTITLE: Namespace API Usage Example\nDESCRIPTION: Illustrates the usage of the Namespace API, which is similar to the Global API but pre-configured with a specific namespace. Shows how to use `$this->emit()` within a namespace class, which is equivalent to using `$io->of('/foo')->emit()`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/socketio-server.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// 以下偽碼等價\n$foo->emit();\n$io->of('/foo')->emit();\n\n/**\n * class內使用也等價\n */\n#[SocketIONamespace(\"/foo\")]\nclass FooNamespace extends BaseNamespace {\n    public function onEvent(){\n        $this->emit(); \n        $this->io->of('/foo')->emit();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Record from Index\nDESCRIPTION: This code demonstrates how to remove a record from the search index by deleting the corresponding model instance. Scout automatically removes the record from the index when the model is deleted.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n$order = App\\Order::find(1);\n\n$order->delete();\n```\n\n----------------------------------------\n\nTITLE: Configure SerializerFactory for Object Return - Hyperf\nDESCRIPTION: This snippet shows how to configure the `SerializerFactory` to enable the serialization and deserialization of PHP objects in Hyperf. It maps the `Hyperf\\Contract\\NormalizerInterface` to a new instance of `SerializerFactory` with `Serializer::class`. This requires installing `symfony/serializer` and `symfony/property-access`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/json-rpc.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Serializer\\SerializerFactory;\nuse Hyperf\\Serializer\\Serializer;\n\nreturn [\n    Hyperf\\Contract\\NormalizerInterface::class => new SerializerFactory(Serializer::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Array Option for a Command - PHP\nDESCRIPTION: Demonstrates how to define an array option for a command using `InputOption::VALUE_IS_ARRAY` combined with `InputOption::VALUE_OPTIONAL` in the `addOption` method.  Allows multiple values for the option.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addOption('name', 'N', InputOption::VALUE_IS_ARRAY | InputOption::VALUE_OPTIONAL, '姓名');\n}\n\npublic function handle()\n{\n    var_dump($this->input->getOption('name'));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Request URL\nDESCRIPTION: Illustrates how to retrieve the full request URL using the `url()` and `fullUrl()` methods. The `url()` method returns the URL without query parameters, while `fullUrl()` includes them.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/request.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// 没有查询参数\n$url = $request->url();\n\n// 带上查询参数\n$url = $request->fullUrl();\n```\n\n----------------------------------------\n\nTITLE: Deleting Models via Query in Hyperf\nDESCRIPTION: The `delete` method can also be called on a query builder instance to delete multiple models that match the query conditions. This is a way to perform bulk deletion. It's crucial to specify `where` conditions to avoid accidentally deleting the entire table. Note that model events are not triggered during bulk deletes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n// 注意使用 delete 方法時必須建立在某些查詢條件基礎之上才能安全刪除數據，不存在 where 條件，會導致刪除整個數據表\nUser::query()->where('gender', 1)->delete();\n\n```\n\n----------------------------------------\n\nTITLE: Alpha Dash Validation with ASCII Option\nDESCRIPTION: The `alpha_dash` rule validates that the field under validation contains only alphabetic characters, numbers, dashes, and underscores (including Chinese). This example shows how to restrict the validation to ASCII characters (a-z and A-Z) by using the `ascii` option.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n'username' => 'alpha_dash:ascii'\n```\n\n----------------------------------------\n\nTITLE: Creating a Hyperf Component Package\nDESCRIPTION: This code snippet demonstrates how to create a new Hyperf component package using the `composer create-project` command. It shows how to create components compatible with different Hyperf versions by specifying the appropriate version constraint.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/component-guide/create.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# 创建适配 Hyperf 最新版本的组件包\ncomposer create-project hyperf/component-creator your_component dev-master\n\n# 创建适配 Hyperf 2.0 版本的组件包\ncomposer create-project hyperf/component-creator your_component \"2.0.*\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Guzzle Client using ClassMap - PHP\nDESCRIPTION: Shows how to replace the Guzzle Client class using PHP's class_map functionality to inject a coroutine handler. This allows for coroutine-based HTTP requests when third-party components do not offer handler interfaces.  The implementation injects a `CoroutineHandler` based on whether the code is running within a coroutine.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/guzzle.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace GuzzleHttp;\n\nuse GuzzleHttp\\Psr7;\nuse Hyperf\\Guzzle\\CoroutineHandler;\nuse Hyperf\\Coroutine\\Coroutine;\n\nclass Client implements ClientInterface\n{\n    // 程式碼省略其他不變的程式碼\n\n    public function __construct(array $config = [])\n    {\n        $inCoroutine = Coroutine::inCoroutine();\n        if (!isset($config['handler'])) {\n            // 對應的 Handler 可以按需選擇 CoroutineHandler 或 PoolHandler\n            $config['handler'] = HandlerStack::create($inCoroutine ? new CoroutineHandler() : null);\n        } elseif ($inCoroutine && $config['handler'] instanceof HandlerStack) {\n            $config['handler']->setHandler(new CoroutineHandler());\n        } elseif (!is_callable($config['handler'])) {\n            throw new \\InvalidArgumentException('handler must be a callable');\n        }\n\n        // Convert the base_uri to a UriInterface\n        if (isset($config['base_uri'])) {\n            $config['base_uri'] = Psr7\\uri_for($config['base_uri']);\n        }\n\n        $this->configureDefaults($config);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Checking php.ini location\nDESCRIPTION: This command is used to display the location of the php.ini configuration file.  It is necessary to know the location of the php.ini file to modify the memory_limit setting. The command is executed via the command line.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/questions.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp --ini\n```\n\n----------------------------------------\n\nTITLE: Abstracting RpcMessage in Hyperf\nDESCRIPTION: This code demonstrates how to abstract the RpcMessage to define the Exchange and RoutingKey in a single class.  Instead of directly using DynamicRpcMessage, create a class extending Hyperf\\Amqp\\Message\\RpcMessage to set these parameters, promoting reusability.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/amqp.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Amqp\\Message\\RpcMessage;\n\nclass FooRpcMessage extends RpcMessage\n{\n\n    protected string $exchange = 'hyperf';\n\n    protected array|string $routingKey = 'hyperf';\n    \n    public function __construct($data)\n    {\n        // 要傳遞數據\n        $this->payload = $data;\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Attach Custom Type Cast to Hyperf Model Attribute\nDESCRIPTION: Attaches a custom type cast to a Hyperf model attribute. This shows how to use the custom `Json` type cast by specifying its class name in the `$casts` array for the `options` attribute.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/mutators.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse App\\Casts\\Json;\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 應進行型別轉換的屬性\n     *\n     * @var array\n     */\n    protected $casts = [\n        'options' => Json::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Models by Primary Key in Hyperf\nDESCRIPTION: The `destroy` static method allows deleting models directly by their primary key(s) without first retrieving the model instances. It accepts a single primary key, an array of primary keys, or a collection of primary keys as arguments. This method is more efficient when you already know the primary keys of the models to be deleted.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\nUser::destroy(1);\n\nUser::destroy([1,2,3]);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Internationalization for Error Messages in PHP\nDESCRIPTION: This snippet demonstrates integrating internationalization for error messages using `hyperf/translation` and `hyperf/constants`.  It shows the translation configuration and defines an enum with a message key that corresponds to a translation string. It then shows how to call the message, passing in named parameters for translation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/constants.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// International configuration\n\nreturn [\n    'params.invalid' => 'Params :param is invalid.',\n];\n\nuse Hyperf\\Constants\\Annotation\\Constants;\nuse Hyperf\\Constants\\Annotation\\Message;\nuse Hyperf\\Constants\\EnumConstantsTrait;\n\n#[Constants]\nenum ErrorCode: int\n{\n    use EnumConstantsTrait;\n\n    #[Message(\"params.invalid\")]\n    case PARAMS_INVALID = 1000;\n}\n\n$message = ErrorCode::SERVER_ERROR->getMessage(['param' => 'user_id']);\n```\n\n----------------------------------------\n\nTITLE: Generate a Hyperf Resource Class\nDESCRIPTION: This command generates a new resource class named 'User' using the Hyperf CLI. The generated resource is placed in the 'app/Resource' directory. The default resource class extends `Hyperf\\Resource\\Json\\JsonResource`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php gen:resource User\n```\n\n----------------------------------------\n\nTITLE: Installing Plates Template Engine\nDESCRIPTION: Installs the Plates template engine using Composer. This allows using Plates templates with the Hyperf view component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require league/plates\n```\n\n----------------------------------------\n\nTITLE: Update Hyperf Component Versions - composer.json\nDESCRIPTION: Updates the Hyperf component versions in the `composer.json` file to `2.1.*`. This ensures that the project uses the latest version 2.1.x releases of all Hyperf components.  It requires modifying the `require` section of `composer.json`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.1.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require\": {\n        \"php\": \">=7.3\",\n        \"ext-json\": \"*\",\n        \"ext-openssl\": \"*\",\n        \"ext-pdo\": \"*\",\n        \"ext-pdo_mysql\": \"*\",\n        \"ext-redis\": \"*\",\n        \"ext-swoole\": \">=4.5\",\n        \"hyperf/async-queue\": \"2.1.*\",\n        \"hyperf/cache\": \"2.1.*\",\n        \"hyperf/command\": \"2.1.*\",\n        \"hyperf/config\": \"2.1.*\",\n        \"hyperf/constants\": \"2.1.*\",\n        \"hyperf/contract\": \"2.1.*\",\n        \"hyperf/database\": \"2.1.*\",\n        \"hyperf/db-connection\": \"2.1.*\",\n        \"hyperf/di\": \"2.1.*\",\n        \"hyperf/dispatcher\": \"2.1.*\",\n        \"hyperf/event\": \"2.1.*\",\n        \"hyperf/exception-handler\": \"2.1.*\",\n        \"hyperf/framework\": \"2.1.*\",\n        \"hyperf/guzzle\": \"2.1.*\",\n        \"hyperf/http-server\": \"2.1.*\",\n        \"hyperf/logger\": \"2.1.*\",\n        \"hyperf/model-cache\": \"2.1.*\",\n        \"hyperf/pool\": \"2.1.*\",\n        \"hyperf/process\": \"2.1.*\",\n        \"hyperf/redis\": \"2.1.*\",\n        \"hyperf/server\": \"2.1.*\",\n        \"hyperf/utils\": \"2.1.*\"\n    },\n    \"require-dev\": {\n        \"friendsofphp/php-cs-fixer\": \"^2.14\",\n        \"hyperf/devtool\": \"2.1.*\",\n        \"hyperf/testing\": \"2.1.*\",\n        \"mockery/mockery\": \"^1.0\",\n        \"phpstan/phpstan\": \"^0.12.18\",\n        \"swoole/ide-helper\": \"dev-master\",\n        \"symfony/var-dumper\": \"^5.1\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing a Hyperf Model Instance\nDESCRIPTION: Shows how to refresh a Hyperf model instance using the `fresh()` method. The `fresh()` method retrieves the model again from the database but does not modify the existing model instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = User::query()->find(1);\n\n$freshUser = $user->fresh();\n```\n\n----------------------------------------\n\nTITLE: Run PHPUnit Tests with Composer\nDESCRIPTION: Executes PHPUnit tests using the configured Composer script.  This assumes a `test` script is defined in composer.json that calls the appropriate PHPUnit command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncomposer test\n```\n\n----------------------------------------\n\nTITLE: Install Metric Component with Composer\nDESCRIPTION: Installs the hyperf/metric component using Composer. This command adds the necessary files and dependencies to your Hyperf project for metric collection and reporting.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/metric\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf DAG with Composer\nDESCRIPTION: This command installs the Hyperf DAG package using Composer, the PHP dependency manager. It adds the `hyperf/dag` package to your project's dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/dag.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/dag\n```\n\n----------------------------------------\n\nTITLE: Displaying Unescaped Data in Blade\nDESCRIPTION: This Blade template shows how to display unescaped data using `{!! !!}`. Use this carefully as it bypasses XSS protection, so only use it with trusted data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\nHello, {!! $name !!}.\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Phar Packager with Composer\nDESCRIPTION: This command installs the `hyperf/phar` package as a dependency using Composer. It allows you to use phar packaging functionalities for Hyperf applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/phar.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/phar\n```\n\n----------------------------------------\n\nTITLE: Register Custom Driver Listener (Hyperf)\nDESCRIPTION: This code demonstrates registering a custom service governance driver, `FooDriver`, with the `DriverManager`. This involves creating a listener that implements `ListenerInterface` and registers the driver during the application's boot process.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/service-register.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n *\n * @link     https://www.hyperf.io\n * @document https://hyperf.wiki\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\nnamespace App\\ServiceGovernance\\Listener;\n\nuse App\\ServiceGovernance\\FooDriver;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\nuse Hyperf\\ServiceGovernance\\DriverManager;\n\n#[Listener]\nclass RegisterDriverListener implements ListenerInterface\n{\n    protected DriverManager $driverManager;\n\n    public function __construct(DriverManager $manager)\n    {\n        $this->driverManager = $manager;\n    }\n\n    public function listen(): array\n    {\n        return [\n            BootApplication::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        $this->driverManager->register('foo', make(FooDriver::class));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting composer.json scripts for Hyperf 2.0\nDESCRIPTION: This JSON snippet demonstrates the changes required in the `composer.json` file's `scripts` section for Hyperf 2.0. The `init-proxy.sh` script is removed from `post-autoload-dump`, and the command is changed to `rm -rf runtime/container`.  This is due to changes in how AOP is handled in version 2.0.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.0.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"scripts\": {\n        \"post-root-package-install\": [\n            \"@php -r \\\"file_exists('.env') || copy('.env.example', '.env');\\\"\"\n        ],\n        \"post-autoload-dump\": [\n            \"rm -rf runtime/container\"\n        ],\n        \"analyse\": \"phpstan analyse --memory-limit 300M -l 0 -c phpstan.neon ./app ./config\",\n        \"cs-fix\": \"php-cs-fixer fix $1\",\n        \"start\": \"php ./bin/hyperf.php start\",\n        \"test\": \"co-phpunit -c phpunit.xml --colors=always\"\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Update composer.json scripts - JSON\nDESCRIPTION: This snippet demonstrates the necessary changes to the `composer.json` file's `scripts` section. It removes the `init-proxy.sh` execution and modifies the `post-autoload-dump` command to `rm -rf runtime/container`. This is because Hyperf 2.0 has removed the `init-proxy.sh` script due to changes in AOP logic.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/2.0.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"scripts\": {\n        \"post-root-package-install\": [\n            \"@php -r \\\"file_exists('.env') || copy('.env.example', '.env');\\\"\"\n        ],\n        \"post-autoload-dump\": [\n            \"rm -rf runtime/container\"\n        ],\n        \"analyse\": \"phpstan analyse --memory-limit 300M -l 0 -c phpstan.neon ./app ./config\",\n        \"cs-fix\": \"php-cs-fixer fix $1\",\n        \"start\": \"php ./bin/hyperf.php start\",\n        \"test\": \"co-phpunit -c phpunit.xml --colors=always\"\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Add After Validation Hook\nDESCRIPTION: Demonstrates how to use the after() method to add a callback function that runs after validation succeeds. Adds a custom error message to the validator if something else is invalid.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\Validation\\Contract\\ValidatorFactoryInterface;\n\nclass IndexController\n{\n    #[Inject]\n    protected ValidatorFactoryInterface $validationFactory;\n\n    public function foo(RequestInterface $request)\n    {\n        $validator = $this->validationFactory->make(\n            $request->all(),\n            [\n                'foo' => 'required',\n                'bar' => 'required',\n            ],\n            [\n                'foo.required' => 'foo is required',\n                'bar.required' => 'bar is required',\n            ]\n        );\n\n        $validator->after(function ($validator) {\n            if ($this->somethingElseIsInvalid()) {\n                $validator->errors()->add('field', 'Something is wrong with this field!');\n            }\n        });\n        \n        if ($validator->fails()) {\n            //\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publish Hyperf View Engine Configuration\nDESCRIPTION: This command publishes the default configuration file for the hyperf/view-engine package to the config directory. This allows customization of the view engine settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/view-engine\n```\n\n----------------------------------------\n\nTITLE: Dimensions Validation with Ratio\nDESCRIPTION: The `dimensions` rule validates that an image has the specified dimensions. This example demonstrates validating the width to height ratio.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\n'avatar' => 'dimensions:ratio=3/2'\n```\n\n----------------------------------------\n\nTITLE: Inject Annotation Override Order\nDESCRIPTION: This code demonstrates the injection override order in Hyperf, showing how the #[Inject] annotation is resolved when using inheritance and traits. The `Origin` class inherits from `ParentClass` and uses `Foo1` and `Foo2` traits, with the `$foo` property injected based on the defined order.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass ParentClass\n{\n    /**\n     * @var Foo4 \n     */\n    #[Inject]\n    protected $foo;\n}\n\ntrait Foo1\n{\n    /**\n     * @var Foo2 \n     */\n    #[Inject]\n    protected $foo;\n}\n\ntrait Foo2\n{\n    /**\n     * @var Foo3\n     */\n    #[Inject]\n    protected $foo;\n}\n\nclass Origin extends ParentClass\n{\n    use Foo1;\n    use Foo2;\n\n    /**\n     * @var Foo1\n     */\n    #[Inject]\n    protected $foo;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Language File (en/messages.php)\nDESCRIPTION: This is an example of a language file structure. It demonstrates how to define translations as key-value pairs within a PHP array. The array's keys are used to identify and retrieve the corresponding translated strings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/translation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// storage/languages/en/messages.php\n\nreturn [\n    'welcome' => 'Welcome to our application',\n];\n```\n\n----------------------------------------\n\nTITLE: Using Connection Pool with Guzzle - PHP\nDESCRIPTION: Demonstrates how to use a connection pool with Guzzle in a Hyperf coroutine environment.  This helps manage TCP connections and reduce TIME-WAIT issues. It leverages `Hyperf\\Guzzle\\PoolHandler` and `Hyperf\\Guzzle\\RetryMiddleware`. Requires `Hyperf\\Coroutine\\Coroutine` to check if running in a coroutine.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/guzzle.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse GuzzleHttp\\Client;\nuse Hyperf\\Coroutine\\Coroutine;\nuse GuzzleHttp\\HandlerStack;\nuse Hyperf\\Guzzle\\PoolHandler;\nuse Hyperf\\Guzzle\\RetryMiddleware;\n\n$handler = null;\nif (Coroutine::inCoroutine()) {\n    $handler = make(PoolHandler::class, [\n        'option' => [\n            'max_connections' => 50,\n        ],\n    ]);\n}\n\n// 預設的重試Middleware\n$retry = make(RetryMiddleware::class, [\n    'retries' => 1,\n    'delay' => 10,\n]);\n\n$stack = HandlerStack::create($handler);\n$stack->push($retry->getMiddleware(), 'retry');\n\n$client = make(Client::class, [\n    'config' => [\n        'handler' => $stack,\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: NSQ Configuration File\nDESCRIPTION: This configuration defines the connection settings for the NSQ component within Hyperf. It includes host, port, connection pool parameters such as minimum and maximum connections, timeouts, heartbeat, and maximum idle time.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nsq.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'host' => '127.0.0.1',\n        'port' => 4150,\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            // 因為 Nsq 服務默認的閒置時間是 60s，故框架維護的最大閒置時間應小於 60s\n            'max_idle_time' => 30.0,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Counter Interface Definition\nDESCRIPTION: This PHP interface defines the contract for a Counter metric. It includes methods for setting labels and adding values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ninterface CounterInterface\n{\n    public function with(string ...$labelValues): self;\n\n    public function add(int $delta);\n}\n```\n\n----------------------------------------\n\nTITLE: Get Session ID\nDESCRIPTION: Retrieves the current session ID using the `getId()` method. This is a string representing the unique identifier for the current session.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/session.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$sessionId = $this->session->getId();\n```\n\n----------------------------------------\n\nTITLE: Simulating HTTP Requests with Testing Client\nDESCRIPTION: This PHP code demonstrates how to simulate HTTP requests using the `Hyperf\\Testing\\Client` class.  It creates a client instance and makes a GET request to the root path ('/').\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/testing.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Testing\\Client;\n\n$client = make(Client::class);\n\n$result = $client->get('/');\n```\n\n----------------------------------------\n\nTITLE: Get Per Page Count\nDESCRIPTION: This code shows how to obtain the number of items displayed per page using the `perPage()` method. It returns an integer representing the number of items per page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/paginator.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$perPage = $paginator->perPage();\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Dependencies (Bash)\nDESCRIPTION: This snippet shows how to update the composer dependencies within the Hyperf skeleton project. It deletes the composer.lock file and the vendor directory and then executes `composer update` to reinstall dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/component-guide/intro.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd hyperf-skeleton\nrm -rf composer.lock && rm -rf vendor && composer update\n```\n\n----------------------------------------\n\nTITLE: Run Kong Gateway\nDESCRIPTION: This command runs the Kong API Gateway container.  It defines the container name, network, environment variables, port mappings, and logging configuration. It connects to the PostgreSQL database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_29\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run -d --name kong \\\n  --network=default-network \\\n  -e \"KONG_DATABASE=postgres\" \\\n  -e \"KONG_PG_HOST=kong-database\" \\\n  -e \"KONG_PG_PASSWORD=kong\" \\\n  -e \"KONG_CASSANDRA_CONTACT_POINTS=kong-database\" \\\n  -e \"KONG_PROXY_ACCESS_LOG=/dev/stdout\" \\\n  -e \"KONG_ADMIN_ACCESS_LOG=/dev/stdout\" \\\n  -e \"KONG_PROXY_ERROR_LOG=/dev/stderr\" \\\n  -e \"KONG_ADMIN_ERROR_LOG=/dev/stderr\" \\\n  -e \"KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl\" \\\n  -p 8000:8000 \\\n  -p 8443:8443 \\\n  -p 8001:8001 \\\n  -p 8444:8444 \\\n  kong:latest\n```\n\n----------------------------------------\n\nTITLE: Generating a Custom Command (Bash)\nDESCRIPTION: Generates a custom command class using the `gen:command` command, provided by the hyperf/devtool component. This simplifies the process of creating new console commands in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:command FooCommand\n```\n\n----------------------------------------\n\nTITLE: JSON RPC Server Configuration with EOF\nDESCRIPTION: Configures a JSON RPC server with EOF (End-of-File) splitting enabled. This enables automatic packet splitting based on a defined EOF string, useful for TCP-based protocols.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 这里省略了该文件的其它配置\n    'servers' => [\n        [\n            'name' => 'jsonrpc',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9503,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_RECEIVE => [\\Hyperf\\JsonRpc\\TcpServer::class, 'onReceive'],\n            ],\n            'settings' => [\n                'open_eof_split' => true, // 启用 EOF 自动分包\n                'package_eof' => \"\\r\\n\", // 设置 EOF 字符串\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Coroutine Server Stop Handler\nDESCRIPTION: Defines a custom signal handler `CoroutineServerStopHandler` to gracefully shut down a Hyperf coroutine server.  It listens for SIGTERM and SIGINT signals on the worker process and shuts down the server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/signal.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Kernel\\Signal;\n\nuse Hyperf\\Contract\\ConfigInterface;\nuse Hyperf\\Process\\ProcessManager;\nuse Hyperf\\Server\\ServerManager;\nuse Hyperf\\Signal\\SignalHandlerInterface;\nuse Psr\\Container\\ContainerInterface;\n\nclass CoroutineServerStopHandler implements SignalHandlerInterface\n{\n\n    protected ContainerInterface $container;\n\n    protected ConfigInterface $config;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n        $this->config = $container->get(ConfigInterface::class);\n    }\n\n    public function listen(): array\n    {\n        // 協程風格只會存在一個 Worker 程序，故這裡只需要監聽 WORKER 即可 \n        return [\n            [self::WORKER, SIGTERM],\n            [self::WORKER, SIGINT],\n        ];\n    }\n\n    public function handle(int $signal): void\n    {\n        ProcessManager::setRunning(false);\n\n        foreach (ServerManager::list() as [$type, $server]) {\n            // 迴圈關閉開啟的服務\n            $server->shutdown();\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Run Hyperf Command (Bash)\nDESCRIPTION: This command executes a Hyperf command named `foo` from the command line, triggering the associated logic. The `--disable-event-dispatcher` parameter can be added to prevent event dispatching during execution.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php foo\n```\n\n----------------------------------------\n\nTITLE: LazyUserService Definition\nDESCRIPTION: Defines a lazy loading proxy class. Hyperf will generate the actual proxy class at runtime.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    /**\n     * 格式為：代理類名 => 原類名\n     * 代理類此時是不存在的，Hyperf會在runtime資料夾下自動生成該類。\n     * 代理類類名和名稱空間可以自由定義。\n     */\n    'App\\Service\\LazyUserService' => \\App\\Service\\UserServiceInterface::class\n];\n```\n\n----------------------------------------\n\nTITLE: MIME Types Validation in Hyperf\nDESCRIPTION: This snippet demonstrates how to validate the MIME type of a file using the `mimetypes` validation rule in Hyperf. It specifies a list of acceptable MIME types for the file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n'video' => 'mimetypes:video/avi,video/mpeg,video/quicktime'\n```\n\n----------------------------------------\n\nTITLE: Create Composite Index in Hyperf Schema\nDESCRIPTION: This snippet demonstrates how to create a composite index on multiple columns in a Hyperf database schema.  It creates an index on the 'account_id' and 'created_at' columns.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// 創建一個複合索引\n$table->index(['account_id', 'created_at'], 'index_account_id_and_created_at');\n```\n\n----------------------------------------\n\nTITLE: Checking for Error Messages for a Specific Field in Hyperf\nDESCRIPTION: This PHP code checks if there are any error messages associated with the 'foo' field in the validator's error bag. It uses the `has()` method of the `MessageBag` instance, which returns a boolean value indicating whether an error message exists for the specified field.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nif ($errors->has('foo')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Installing hyperf/graphql\nDESCRIPTION: Installs the hyperf/graphql package via composer. This command adds the GraphQL component to your Hyperf project, allowing you to define and execute GraphQL queries.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/graphql.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/graphql\n```\n\n----------------------------------------\n\nTITLE: In Array Validation\nDESCRIPTION: This snippet shows how to construct the `in` validation rule using the `Rule::in` to check if a value is within a given list.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($data, [\n    'zones' => [\n        'required',\n        Rule::in(['first-zone','second-zone']),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf View Engine with Composer\nDESCRIPTION: This command installs the hyperf/view-engine package using Composer, which provides the Blade template engine for Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/view-engine\n```\n\n----------------------------------------\n\nTITLE: Get Last Item Number on Page\nDESCRIPTION: This code shows how to get the number of the last item on the current page using the `lastItem()` method of the Paginator. It returns an integer or null if the page is empty.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/paginator.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$lastItem = $paginator->lastItem();\n```\n\n----------------------------------------\n\nTITLE: Add Custom Collector to ConfigProvider\nDESCRIPTION: This snippet shows how to add CustomCollector class to `ConfigProvider` in the component. If you're using custom annotations and a custom collector, you need to configure the Collector within the annotation scan collectors, in the development mode the code can determine whether to re-collect corresponding annotation metadata according to the modification time of the file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.0.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'annotations' => [\n        'scan' => [\n            'collectors' => [\n                CustomCollector::class,\n            ],\n        ],\n    ]\n];\n\n```\n\n----------------------------------------\n\nTITLE: Configure Default Locale\nDESCRIPTION: This code snippet shows the configuration file for the translation component. It defines the default locale, fallback locale, and the path to the language files.  The `locale` key sets the default language, `fallback_locale` provides a fallback language, and `path` specifies the directory containing language files.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/translation.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/translation.php\n\nreturn [\n    // 默認語言\n    'locale' => 'zh_CN',\n    // 回退語言，當默認語言的語言文本沒有提供時，就會使用回退語言的對應語言文本\n    'fallback_locale' => 'en',\n    // 語言文件存放的文件夾\n    'path' => BASE_PATH . '/storage/languages',\n];\n```\n\n----------------------------------------\n\nTITLE: Installing hyperf/http-message with Composer\nDESCRIPTION: This command installs the hyperf/http-message component, which provides the Request object implementation for Hyperf. This component is required to work with HTTP requests and responses.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/request.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/http-message\n```\n\n----------------------------------------\n\nTITLE: Configuring IDE for Quick Open\nDESCRIPTION: Configures the IDE to be used with the 'Quick Open' feature of Hyperf Devtool. It allows specifying the preferred IDE such as VSCode or PHPStorm in the devtool configuration file.  The `env('DEVTOOL_IDE', '')` function retrieves the IDE from the environment variable `DEVTOOL_IDE`, defaulting to an empty string if the variable is not set.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/devtool.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    /**\n     * Supported IDEs: \"sublime\", \"textmate\", \"cursor\", \"emacs\", \"macvim\", \"phpstorm\", \"idea\",\n     *        \"vscode\", \"vscode-insiders\", \"vscode-remote\", \"vscode-insiders-remote\",\n     *        \"atom\", \"nova\", \"netbeans\", \"xdebug\"\n     */\n    'ide' => env('DEVTOOL_IDE', ''),\n    //...\n];\n```\n\n----------------------------------------\n\nTITLE: Publishing Watcher Configuration\nDESCRIPTION: This command publishes the default configuration file for the Hyperf Watcher component. This allows customization of the watcher's behavior.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/watcher.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/watcher\n```\n\n----------------------------------------\n\nTITLE: Paginate Search Results (PHP)\nDESCRIPTION: Paginates search results using the `paginate` method.  This returns a `Paginator` instance, similar to traditional database pagination. This enables displaying search results in manageable chunks with pagination links.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->paginate();\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Model Cache\nDESCRIPTION: This command installs the Hyperf Model Cache component via Composer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model-cache.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/model-cache\n```\n\n----------------------------------------\n\nTITLE: Forcing Index Usage in Hyperf Queries\nDESCRIPTION: Demonstrates how to force the database to use a specific index using `FORCE INDEX`. This is useful to resolve slow queries caused by the database's query optimizer choosing a non-optimal index.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nDb::table(Db::raw(\"{$table} FORCE INDEX({$index})\"));\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Delayed Message Exchange Plugin\nDESCRIPTION: Commands to download and enable the RabbitMQ delayed message exchange plugin. This plugin is required for AMQP delayed queues to function correctly.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/amqp.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nwget https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/3.9.0/rabbitmq_delayed_message_exchange-3.9.0.ez\ncp rabbitmq_delayed_message_exchange-3.9.0.ez /opt/rabbitmq/plugins/\nrabbitmq-plugins enable rabbitmq_delayed_message_exchange\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Connection in Hyperf\nDESCRIPTION: This configuration snippet shows how to define a SQLite database connection in the `config/autoload/databases.php` file. It uses environment variables to configure the driver, host and database. ':memory:' is used for an in-memory database, alternatively an absolute file path can be used for the database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/quick-start.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/databases.php\nreturn [\n     // 其他配置\n    'sqlite'=>[\n        'driver' => env('DB_DRIVER', 'sqlite'),\n        'host' => env('DB_HOST', 'localhost'),\n        // :memory: 为内存数据库 也可以指定文件绝对路径\n        'database' => env('DB_DATABASE', ':memory:'),\n        // other sqlite config\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Metric Driver Configuration\nDESCRIPTION: Configures the default metric driver in the `metric.php` configuration file. The `default` option specifies which driver to use (e.g., prometheus, statsd, influxdb).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n'default' => env('METRIC_DRIVER', 'prometheus'),\n```\n\n----------------------------------------\n\nTITLE: NSQ Protocol Sequence Diagram\nDESCRIPTION: This PlantUML diagram illustrates the sequence of operations in the NSQ protocol, covering connection, authentication, message publishing (PUB, MPUB, DPUB), subscription (SUB, RDY, FIN, REQ, TOUCH), heartbeat, and connection closing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nsq.md#_snippet_11\n\nLANGUAGE: PlantUML\nCODE:\n```\n@startuml\n\nautonumber\nhide footbox\ntitle **NSQ 协议**\n\nparticipant \"客户端\" as client\nparticipant \"服务器\" as server #orange\n\nactivate client\nactivate server\n\n== connect ==\nnote left of client: connect 后都为 socket->send/recv\nclient -> server: socket->connect(ip, host)\nnote left of client: protocol version\nclient->server: magic: V2\n\n== auth ==\nnote left of client: client metadata\nclient->server: IDENTIFY\nnote right of server: 如果需要 auth\nserver->client: auth_required=true\nclient->server: AUTH\n...\n\n== pub ==\nnote left of client: 发送一条消息\nclient -> server: PUB~~~~ <topic_name>\nnote left of client: 发送多条消息\nclient -> server: MPUB\nnote left of client: 发送一条延时消息\nclient -> server: DPUB\n...\n\n== sub ==\nnote left of client: client 使用 channel 订阅 topic\nnote right of server: SUB 成功后, client 处于 RDY 0 阶段\nclient -> server: SUB <topic_name> <channel_name>\nnote left of client: 使用 RDY 告诉 server 准备好消费 <count> 条消息\nclient -> server: RDY <count>\nnote right of server: server 返回 client <count> 条消息\nserver -> client: <count> msg\nnote left of client: 标记消息完成消费(消费成功)\nclient -> server: FIN <message_id>\nnote left of client: 消息重新入队(消费失败, 重新入队)\nclient -> server: REQ <message_id> <timeout>\nnote left of client: 重置消息超时时间\nclient -> server: TOUCH <message_id>\n...\n\n== heartbeat ==\nserver -> client: _heartbeat_\nnote right of server: client 2 次没有应答 NOP, server 将断开连接\nclient -> server: NOP\n...\n\n== close ==\nnote left of client: clean close connection, 表示没有消息了, 关闭连接\nclient -> server: CLS\nnote right of server: server 端成功应答\nserver -> client: CLOSE_WAIT\n\ndeactivate client\ndeactivate server\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Executing the Command (Hyperf)\nDESCRIPTION: This command shows how to execute the created `DelayCommand` from the command line. It uses the `php bin/hyperf.php` entry point and passes the command name `demo:command` as an argument.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nphp bin/hyperf.php demo:command\n```\n\n----------------------------------------\n\nTITLE: Conditional Data Merging\nDESCRIPTION: This PHP code demonstrates the usage of `mergeWhen` to conditionally merge multiple attributes into a resource response based on a given condition.  If `Auth::user()->isAdmin()` returns true, the 'first-secret' and 'second-secret' attributes will be added to the response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            $this->mergeWhen(Auth::user()->isAdmin(), [\n                'first-secret' => 'value',\n                'second-secret' => 'value',\n            ]),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Database Configuration with Model Cache\nDESCRIPTION: Configures the database connection including the model cache settings in `config/autoload/databases.php`. It defines the driver, host, database name, credentials, connection pool, and cache-related configurations like handler, cache key, prefix, TTL, and default values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model-cache.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER', 'mysql'),\n        'host' => env('DB_HOST', 'localhost'),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => env('DB_CHARSET', 'utf8'),\n        'collation' => env('DB_COLLATION', 'utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX', ''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float)env('DB_MAX_IDLE_TIME', 60),\n        ],\n        'cache' => [\n            'handler' => \\Hyperf\\ModelCache\\Handler\\RedisHandler::class,\n            'cache_key' => 'mc:%s:m:%s:%s:%s',\n            'prefix' => 'default',\n            'ttl' => 3600 * 24,\n            'empty_model_ttl' => 3600,\n            'load_script' => true,\n            'use_default_value' => false,\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configure InfluxDB Settings\nDESCRIPTION: This PHP code configures the InfluxDB driver for the Hyperf metric component, including the driver class, namespace, host, port, username, password, database name, and push interval. It specifies how metrics are written to the InfluxDB database via HTTP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => env('METRIC_DRIVER', 'influxdb'),\n    'use_standalone_process' => env('TELEMETRY_USE_STANDALONE_PROCESS', true),\n    'enable_default_metric' => env('TELEMETRY_ENABLE_DEFAULT_TELEMETRY', true),\n    'metric' => [\n        'influxdb' => [\n            'driver' => Hyperf\\Metric\\Adapter\\InfluxDB\\MetricFactory::class,\n            'namespace' => env('APP_NAME', 'skeleton'),\n            'host' => env('INFLUXDB_HOST', '127.0.0.1'),\n            'port' => env('INFLUXDB_PORT', '8086'),\n            'username' => env('INFLUXDB_USERNAME', ''),\n            'password' => env('INFLUXDB_PASSWORD', ''),\n            'dbname' => env('INFLUXDB_DBNAME', true),\n            'push_interval' => env('INFLUXDB_PUSH_INTERVAL', 5),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Cloning Hyperf and Skeleton Projects with Git\nDESCRIPTION: These commands clone the Hyperf skeleton and component library projects from GitHub, setting up the foundation for component development. Replace `hyperf` with your GitHub ID after forking the `hyperf` repository to clone your forked copy.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/component-guide/intro.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n// 安装 skeleton，并配置完成\ncomposer create-project hyperf/hyperf-skeleton \n\n// 克隆 hyperf 组件库项目，这里记得要替换 hyperf 为您的 Github ID，也就是克隆您所 Fork 的项目\ngit clone git@github.com:hyperf/hyperf.git\n```\n\n----------------------------------------\n\nTITLE: Checking Context Value Existence with Hyperf\\Context\\Context::has() in PHP\nDESCRIPTION: This snippet demonstrates how to check if a value exists in the current coroutine's context using the `Hyperf\\Context\\Context::has()` method.  It returns `true` if the key exists and `false` otherwise.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/coroutine.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Context\\Context;\n\n// 从当前协程上下文中判断 key 为 foo 的值是否存在\n$foo = Context::has('foo');\n```\n\n----------------------------------------\n\nTITLE: Get Current Page Number\nDESCRIPTION: Retrieves the current page number from the paginator instance. This method allows you to determine which page is currently being displayed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/paginator.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$currentPage = $paginator->currentPage();\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware Priority - PHP\nDESCRIPTION: These snippets shows how to configure middleware priority in global, route and annotation configurations. The higher the priority number, the earlier the middleware is executed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/middleware/middleware.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n// 全域性中介軟體配置檔案 middleware.php\nreturn [\n    'http' => [\n        YourMiddleware::class,\n        YourMiddlewareB::class => 3,\n    ],\n];\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// 路由中介軟體配置\nRouter::addGroup(\n    '/v2', function () {\n        Router::get('/index', [\\App\\Controller\\IndexController::class, 'index']);\n    },\n    [\n        'middleware' => [\n            FooMiddleware::class,\n            FooMiddlewareB::class => 3,\n        ]\n    ]\n);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// 註解中介軟體配置\n#[AutoController]\n#[Middleware(FooMiddleware::class)]\n#[Middleware(FooMiddlewareB::class, 3)]\n#[Middlewares([FooMiddlewareC::class => 1, BarMiddlewareD::class => 4])]\nclass IndexController\n{\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Getting Description Output (Bash)\nDESCRIPTION: Demonstrates how to view the description for a command when running the help command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/hyperf.php demo:command --help\n# 輸出\n...\nDescription:\n  Hyperf Demo Command\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster with Name (Dockerfile)\nDESCRIPTION: Configures Redis cluster using name in a Dockerfile by setting the necessary PHP configurations for the redis.clusters settings.  This example also sets timezone, memory limit and file upload settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/redis.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n    # - config PHP\n    && { \\\n        echo \"upload_max_filesize=100M\"; \\\n        echo \"post_max_size=108M\"; \\\n        echo \"memory_limit=1024M\"; \\\n        echo \"date.timezone=${TIMEZONE}\"; \\\n        echo \"redis.clusters.seeds = \\\"mycluster[]=localhost:7000&mycluster[]=localhost:7001\\\"\"; \\\n        echo \"redis.clusters.timeout = \\\"mycluster=5\\\"\"; \\\n        echo \"redis.clusters.read_timeout = \\\"mycluster=10\\\"\"; \\\n        echo \"redis.clusters.auth = \\\"mycluster=password\\\"\";\n    } | tee conf.d/99-overrides.ini \\\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Queue Information\nDESCRIPTION: Shows the command-line usage for displaying the status of the current queue. Replace {queue_name} with the queue configuration name (default is 'default').\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\n$ php bin/hyperf.php queue:info {queue_name}\n```\n\n----------------------------------------\n\nTITLE: Updating Prometheus Client for Guzzle 7 Compatibility\nDESCRIPTION: Updates the promphp/prometheus_client_php dependency to version 2.2.1 to resolve conflicts with Guzzle version ^7.0 when using the hyperf/metric component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/guzzle.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require \"promphp/prometheus_client_php:2.2.1\"\n```\n\n----------------------------------------\n\nTITLE: Updating Request/Response Objects in Context - PHP\nDESCRIPTION: This code snippet shows how to update the request and response objects in the coroutine context, so subsequent code can access the modified objects. This is necessary due to the immutable nature of PSR-7 objects.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/middleware/middleware.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\n// $request 和 $response 為修改後的物件\n$request = \\Hyperf\\Context\\Context::set(ServerRequestInterface::class, $request);\n$response = \\Hyperf\\Context\\Context::set(ResponseInterface::class, $response);\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Visitors (PHP)\nDESCRIPTION: This code demonstrates how to configure visitors for the `gen:model` command to extend its functionality. It shows how to add a specific visitor class to the `visitors` array within the command's configuration.  The visitor will be executed during the model generation process to modify the generated code.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/gen.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => [\n        // 忽略其他配置\n        'commands' => [\n            'gen:model' => [\n                'visitors' => [\n                    Hyperf\\Database\\Commands\\Ast\\ModelRewriteKeyInfoVisitor::class\n                ],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining an Aspect in Hyperf using #[Aspect] annotation in PHP\nDESCRIPTION: This code snippet demonstrates how to define an Aspect in Hyperf using the #[Aspect] annotation. It includes the necessary namespaces, defines the classes and annotations to be intercepted, and implements the process method to handle the logic before and after the original method execution. The $classes array specifies the target classes or methods to be intercepted, while the $annotations array specifies the annotations that trigger the interception. The process method receives a ProceedingJoinPoint object, which allows calling the original method and getting its result.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/aop.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Aspect;\n\nuse App\\Service\\SomeClass;\nuse App\\Annotation\\SomeAnnotation;\nuse Hyperf\\Di\\Annotation\\Aspect;\nuse Hyperf\\Di\\Aop\\AbstractAspect;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\n#[Aspect]\nclass FooAspect extends AbstractAspect\n{\n    // 要切入的類或 Trait，可以多個，亦可通過 :: 標識到具體的某個方法，通過 * 可以模糊匹配\n    public array $classes = [\n        SomeClass::class,\n        'App\\Service\\SomeClass::someMethod',\n        'App\\Service\\SomeClass::*Method',\n    ];\n\n    // 要切入的註解，具體切入的還是使用了這些註解的類，僅可切入類註解和類方法註解\n    public array $annotations = [\n        SomeAnnotation::class,\n    ];\n\n    public function process(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        // 切面切入後，執行對應的方法會由此來負責\n        // $proceedingJoinPoint 為連接點，通過該類的 process() 方法調用原方法並獲得結果\n        // 在調用前進行某些處理\n        $result = $proceedingJoinPoint->process();\n        // 在調用後進行某些處理\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handle Plurals - PHP\nDESCRIPTION: Illustrates how to define pluralization rules in language strings using the `|` character to separate singular and plural forms. More complex rules can be defined using numeric ranges.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/translation.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n'apples' => 'There is one apple|There are many apples',\n'apples' => '{0} There are none|[1,19] There are some|[20,*] There are many',\n```\n\n----------------------------------------\n\nTITLE: Configuring tracing enable flags in Hyperf\nDESCRIPTION: This code snippet shows how to enable or disable tracing for Guzzle HTTP, Redis, and DB calls by modifying the 'enable' configuration within the 'config/autoload/opentracing.php' file.  Setting a flag to 'true' enables tracing for that component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tracer.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'enable' => [\n        // 打开或关闭对 Guzzle HTTP 调用的追踪\n        'guzzle' => false,\n        // 打开或关闭对 Redis 调用的追踪\n        'redis' => false,\n        // 打开或关闭对 DB  调用的追踪\n        'db' => false,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using #[Event] annotation on Controller\nDESCRIPTION: This PHP snippet shows how to use the `#[Event]` annotation on a controller to automatically register all public methods as event handlers, using the method name as the event name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/socketio-server.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\SocketIOServer\\Annotation\\SocketIONamespace;\nuse Hyperf\\SocketIOServer\\Annotation\\Event;\nuse Hyperf\\SocketIOServer\\BaseNamespace;\nuse Hyperf\\SocketIOServer\\Socket;\n\n#[SocketIONamespace(\"/\")]\n#[Event]\nclass WebSocketController extends BaseNamespace\n{\n    public function echo(Socket $socket, $data)\n    {\n        $socket->emit('event', $data);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Binding the Overridden Visitor in dependencies.php (PHP)\nDESCRIPTION: This configuration snippet binds the custom `ModelUpdateVisitor` to the original Hyperf `ModelUpdateVisitor` class in the `dependencies.php` file. This ensures that when the `gen:model` command is executed, it uses the custom visitor instead of the default one, allowing the data type handling to be customized.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/gen.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    Hyperf\\Database\\Commands\\Ast\\ModelUpdateVisitor::class => App\\Kernel\\Visitor\\ModelUpdateVisitor::class,\n];\n\n```\n\n----------------------------------------\n\nTITLE: UserInfoCaster Implementation for Attributes Synchronization\nDESCRIPTION: Provides the corresponding `UserInfoCaster` to manage type conversions and data synchronization for the `UserInfo` class, ensuring real-time updates between the object and the model attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/mutators.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Caster;\n\nuse Hyperf\\Contract\\CastsAttributes;\nuse Hyperf\\Collection\\Arr;\n\nclass UserInfoCaster implements CastsAttributes\n{\n    public function get($model, string $key, $value, array $attributes): UserInfo\n    {\n        return new UserInfo($model, Arr::only($attributes, ['name', 'gender']));\n    }\n\n    public function set($model, string $key, $value, array $attributes)\n    {\n        return [\n            'name' => $value->name,\n            'gender' => $value->gender,\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Define SWOOLE_HOOK_FLAGS constant in PHP\nDESCRIPTION: Adds a constant definition for SWOOLE_HOOK_FLAGS in the application's entry point (bin/hyperf.php) and test bootstrap file (test/bootstrap.php). This ensures that Swoole hooks are properly configured. Requires Swoole extension to be installed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/1.1.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n! defined('SWOOLE_HOOK_FLAGS') && define('SWOOLE_HOOK_FLAGS', SWOOLE_HOOK_ALL);\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Policies and Attempts\nDESCRIPTION: This code extends the `MyRetry` annotation to include `MaxAttemptsRetryPolicy` and sets the maximum number of retry attempts to 3.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/retry.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Annotation;\n\nuse Doctrine\\Common\\Annotations\\Annotation\\Target;\n\n#[Attribute(Attribute::TARGET_METHOD)]\nclass MyRetry extends \\Hyperf\\Retry\\Annotation\\AbstractRetry\n{\n    public $policies = [\n        MaxAttemptsRetryPolicy::class,\n    ];\n    public $maxAttempts = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Static Methods\nDESCRIPTION: This code shows how to use the static methods of the DB class to execute a database query.  The query retrieves data from the `user` table based on the `gender` column.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/db.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\DB\\DB;\n\n$res = DB::query('SELECT * FROM `user` WHERE gender = ?;', [1]);\n\n```\n\n----------------------------------------\n\nTITLE: Configure Jaeger Tracer in Hyperf\nDESCRIPTION: This PHP code snippet configures the Jaeger tracer in Hyperf, setting the driver, application name, sampler type, and reporting agent details such as host and port. It uses Jaeger's constant sampler to trace all requests by default.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tracer.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Tracer\\Adapter\\JaegerTracerFactory;\nuse const Jaeger\\SAMPLER_TYPE_CONST;\n\nreturn [\n    // 選擇預設的 Tracer\n    'default' => env('TRACER_DRIVER', 'jaeger'),\n\n    // 這裡的程式碼演示不對 enable 內的配置進行展開\n    'enable' => [],\n\n    'tracer' => [\n        // Jaeger 驅動配置\n        'jaeger' => [\n            'driver' => JaegerTracerFactory::class,\n            // 專案名稱\n            'name' => env('APP_NAME', 'skeleton'),\n            'options' => [\n                // 取樣器，預設為所有請求的都追蹤\n                'sampler' => [\n                    'type' => SAMPLER_TYPE_CONST,\n                    'param' => true,\n                ],\n                // 上報地址\n                'local_agent' => [\n                    'reporting_host' => env('JAEGER_REPORTING_HOST', 'localhost'),\n                    'reporting_port' => env('JAEGER_REPORTING_PORT', 5775),\n                ],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Log Handlers - Alternative Method (PHP)\nDESCRIPTION: This PHP configuration demonstrates an alternative way to define multiple log handlers in Hyperf, by defining handlers separately as 'single' and 'daily', and then referencing them in the 'default' configuration. This approach can improve readability and reusability of handler configurations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/logger.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Monolog\\Handler;\nuse Monolog\\Formatter;\nuse Monolog\\Level;\n\nreturn [\n    'default' => [\n        'handlers' => ['single', 'daily'],\n    ],\n\n    'single' => [\n        'handler' => [\n            'class' => Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => BASE_PATH . '/runtime/logs/hyperf.log',\n                'level' => Level::Info,\n            ],\n        ],\n        'formatter' => [\n            'class' => Formatter\\LineFormatter::class,\n            'constructor' => [\n                'format' => null,\n                'dateFormat' => null,\n                'allowInlineLineBreaks' => true,\n            ],\n        ],\n    ],\n\n    'daily' => [\n        'handler' => [\n            'class' => Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => BASE_PATH . '/runtime/logs/hyperf-debug.log',\n                'level' => Level::Info,\n            ],\n        ],\n        'formatter' => [\n            'class' => Formatter\\JsonFormatter::class,\n            'constructor' => [\n                'batchMode' => Formatter\\JsonFormatter::BATCH_MODE_JSON,\n                'appendNewline' => true,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Install Service Governance\nDESCRIPTION: This command installs the hyperf/service-governance package, which provides the foundation for service registration and discovery in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/service-register.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/service-governance\n```\n\n----------------------------------------\n\nTITLE: Building Phar Package (Mapping External Files)\nDESCRIPTION: This command builds a Phar package and maps external files using the `-M` option.  This example maps the `.env` file to allow the Phar package to read it at runtime. Requires `hyperf/phar >= v2.1.7`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/phar.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php phar:build -M .env\n```\n\n----------------------------------------\n\nTITLE: Simulating HTTP Request with Custom Packer\nDESCRIPTION: This snippet demonstrates how to use a custom packer with `Hyperf\\Testing\\Client` when the server returns a raw string. It creates a custom class that implements `PackerInterface` to pack and unpack data as a string and configures the client to use this packer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/testing.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Testing\\Client;\nuse Hyperf\\Contract\\PackerInterface;\n\n$client = make(Client::class, [\n    'packer' => new class() implements PackerInterface {\n        public function pack($data): string\n        {\n            return $data;\n        }\n\n        public function unpack(string $data)\n        {\n            return $data;\n        }\n    },\n]);\n\n$result = $client->json('/user/0',[\n    'nickname' => 'Hyperf'\n]);\n```\n\n----------------------------------------\n\nTITLE: Simplified Container Configuration in Hyperf\nDESCRIPTION: This snippet shows the simplified `container.php` file content after changes. It initializes the dependency injection container and sets it as the application context, ensuring it's a valid container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog/changelog-v1.1.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Di\\Definition\\DefinitionSourceFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = new Container((new DefinitionSourceFactory(true))());\n\nif (! $container instanceof \\Psr\\Container\\ContainerInterface) {\n    throw new RuntimeException('The dependency injection container is invalid.');\n}\nreturn ApplicationContext::setContainer($container);\n```\n\n----------------------------------------\n\nTITLE: Optimize Composer and Generate Hyperf Proxy Classes (Bash)\nDESCRIPTION: This script optimizes the Composer class index and generates all proxy classes and the annotation cache for Hyperf. This is essential during deployment to improve memory usage and startup time.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/important.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Optimize the composer class index\ncomposer dump-autoload -o\n# Generate all proxy classes and the annotation cache\nphp bin/hyperf.php\n```\n\n----------------------------------------\n\nTITLE: Mapping Serializer Implementation - Hyperf\nDESCRIPTION: This snippet shows how to manually map the `Hyperf\\Contract\\NormalizerInterface` to a specific implementation when the `symfony/serializer` library is required. This configuration ensures that the Hyperf serializer is correctly used. It requires `symfony/serializer` and `hyperf/utils`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/changelog/2.0.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Utils\\Serializer\\SerializerFactory;\nuse Hyperf\\Utils\\Serializer\\Serializer;\n\nreturn [\n    Hyperf\\Contract\\NormalizerInterface::class => new SerializerFactory(Serializer::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Simulating HTTP Request on Specific Port\nDESCRIPTION: This snippet shows how to use the `Hyperf\\Testing\\Client` to send a JSON request to a specific port configured in Hyperf.  It creates a client instance using the 'adminHttp' server configuration and sends a JSON request to the '/user/0' endpoint.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/testing.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Testing\\Client;\n\n$client = make(Client::class, ['server' => 'adminHttp']);\n\n$result = $client->json('/user/0',[\n    'nickname' => 'Hyperf'\n]);\n```\n\n----------------------------------------\n\nTITLE: Validating Start Date After Tomorrow\nDESCRIPTION: This example demonstrates how to validate if the start_date field is a date and occurs after tomorrow. It uses the after:date rule with a string value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n'start_date' => 'required|date|after:tomorrow'\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf gRPC Server Component\nDESCRIPTION: This command installs the `hyperf/grpc-server` component using Composer. This component provides the necessary classes and configurations for building gRPC servers in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/grpc.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/grpc-server\n```\n\n----------------------------------------\n\nTITLE: Testing Hyperf Application with curl\nDESCRIPTION: This snippet demonstrates how to test the deployed Hyperf application by sending a request to the specified port on the host machine using the `curl` command.  It verifies if the Hyperf server is running and returns the expected response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/daocloud.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl http://127.0.0.1:9501\n{\"code\":0,\"data\":{\"user\":\"Hyperf\",\"method\":\"GET\",\"message\":\"Hello Hyperf.\"}}\n```\n\n----------------------------------------\n\nTITLE: Convert Infix to Postfix Expressions in PHP\nDESCRIPTION: This snippet shows how to convert an infix expression to a postfix expression (RPN). The `toRPNExpression` method of the `Calculator` class performs the conversion. This particular snippet demonstrates the conversion of the expression '4 - 2 * ( 5 + 5 ) - 10'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/rpn.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->toRPNExpression('4 - 2 * ( 5 + 5 ) - 10'); // 4 2 5 5 + * - 10 -\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Swarm\nDESCRIPTION: Initializes a Docker Swarm cluster on the current machine. This command sets up the first manager node of the Swarm.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ docker swarm init\n```\n\n----------------------------------------\n\nTITLE: Asynchronous MySQL Query with Callbacks (Swoole 1.x)\nDESCRIPTION: Demonstrates the asynchronous callback pattern in Swoole 1.x for querying a MySQL database. This example showcases the complexity of nested callbacks when performing multiple asynchronous operations, highlighting the need for more structured solutions like coroutines.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/coroutine.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$db = new swoole_mysql();\n$config = array(\n    'host' => '127.0.0.1',\n    'port' => 3306,\n    'user' => 'test',\n    'password' => 'test',\n    'database' => 'test',\n);\n\n$db->connect($config, function ($db, $r) {\n    // 从 users 表中查询一条数据\n    $sql = 'select * from users where id = 1';\n    $db->query($sql, function(swoole_mysql $db, $r) {\n        if ($r !== false) {\n            // 查询成功后修改一条数据\n            $updateSql = 'update users set name=\"new name\" where id = 1';\n            $db->query($updateSql, function (swoole_mysql $db, $r) {\n                $rows = $db->affected_rows;\n                if ($r === true) {\n                    return $this->response->end('更新成功');\n                }\n            });\n        }\n        $db->close();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: 1.0 ConfigProvider Structure - PHP\nDESCRIPTION: Shows the structure of a `ConfigProvider` class in Hyperf 1.0.  The `scan.paths` configuration specifies the paths to scan for annotations. The return value is an array of configuration options for the component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/1.1.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nclass ConfigProvider\n{\n\n    public function __invoke(): array\n    {\n        return [\n            'scan' => [\n                'paths' => [\n                    __DIR__,\n                ],\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Constants Component\nDESCRIPTION: This snippet shows the command to install the hyperf/constants component using Composer. This component provides features for defining constants and enums with annotations for Hyperf applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/constants.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/constants\n```\n\n----------------------------------------\n\nTITLE: Using EagerLoader to load cache\nDESCRIPTION: Shows another way to load corresponding model relations with `EagerLoader`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model-cache.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\ModelCache\\EagerLoad\\EagerLoader;\nuse Hyperf\\Context\\ApplicationContext;\n\n$books = Book::findManyFromCache([1,2,3]);\n$loader = ApplicationContext::getContainer()->get(EagerLoader::class);\n$loader->load($books, ['user']);\n\nforeach ($books as $book){\n    var_dump($book->user);\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependency via Type Hinting PHP 8\nDESCRIPTION: This code demonstrates how to inject a dependency using type hinting in PHP 8, utilizing the @Inject annotation.  This approach allows for cleaner and more readable dependency injection, replacing the need for @var annotations in some cases. The `ExampleService` is injected into the `Example` class using the `private` keyword, which specifies the property's accessibility.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/CHANGELOG-2.0.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Example {\n    /**\n    * @Inject\n    */\n    private ExampleService $exampleService;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Record in Index\nDESCRIPTION: This code demonstrates how to update a record in the search index by modifying a model instance and saving it. Scout automatically synchronizes the changes to the index when the model is saved.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$order = App\\Order::find(1);\n\n// 更新 order...\n\n$order->save();\n```\n\n----------------------------------------\n\nTITLE: Create Portainer Service - Shell\nDESCRIPTION: This command creates a Docker service for Portainer, a web UI for managing Docker environments. It publishes port 9000, sets the replica count, constrains the service to run on manager nodes, and mounts volumes for data and the Docker socket.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/docker-swarm.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ndocker service create \\\n    --name portainer \\\n    --publish 9000:9000 \\\n    --replicas=1 \\\n    --constraint 'node.role == manager' \\\n    --mount type=volume,src=portainer_data,dst=/data \\\n    --mount type=bind,src=//var/run/docker.sock,dst=/var/run/docker.sock \\\n    portainer/portainer\n```\n\n----------------------------------------\n\nTITLE: Install Memory Adapter\nDESCRIPTION: This shell command installs the `league/flysystem-memory` component using composer. This provides a memory-based adapter for Flysystem, useful for testing or temporary storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.2.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"league/flysystem-memory:^2.0\"\n```\n\n----------------------------------------\n\nTITLE: Run Gitlab Docker Container\nDESCRIPTION: This command runs a Gitlab instance using Docker.  It publishes ports 443, 80, and 22, maps volumes for configuration, logs, and data, and restarts the container automatically. Replace `gitlab.xxx.cn` with the actual hostname.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nsudo docker run -d --hostname gitlab.xxx.cn \\\n--publish 443:443 --publish 80:80 --publish 22:22 \\\n--name gitlab --restart always --volume /srv/gitlab/config:/etc/gitlab \\\n--volume /srv/gitlab/logs:/var/log/gitlab \\\n--volume /srv/gitlab/data:/var/opt/gitlab \\\ngitlab/gitlab-ce:latest\n```\n\n----------------------------------------\n\nTITLE: Define SWOOLE_HOOK_FLAGS Constant PHP\nDESCRIPTION: This snippet defines the SWOOLE_HOOK_FLAGS constant if it's not already defined. It's necessary for proper Swoole hooking behavior within the Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/1.1.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n! defined('SWOOLE_HOOK_FLAGS') && define('SWOOLE_HOOK_FLAGS', SWOOLE_HOOK_ALL);\n```\n\n----------------------------------------\n\nTITLE: Displaying Unescaped Data (Blade)\nDESCRIPTION: This Blade template displays the value of the `$name` variable without escaping it.  Use this carefully, only when you are sure the content is safe to display, and not user-supplied.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\nHello, {!! $name !!}.\n```\n\n----------------------------------------\n\nTITLE: Resolving Conflicts with hyperf/metric\nDESCRIPTION: Addresses potential conflicts between hyperf/guzzle and hyperf/metric when using Guzzle ^7.0 by requiring a specific version of promphp/prometheus_client_php.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/guzzle.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require \"promphp/prometheus_client_php:2.2.1\"\n```\n\n----------------------------------------\n\nTITLE: DemoLogic Test with Mocked Dependency (Inject)\nDESCRIPTION: Tests the DemoLogic class when using `#[Inject]` for dependency injection, utilizing a test double (mock) for the DemoApi dependency.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace HyperfTest\\Cases;\n\nuse App\\Api\\DemoApi;\nuse App\\Logic\\DemoLogic;\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Context\\ApplicationContext;\nuse HyperfTest\\HttpTestCase;\nuse Mockery;\n\nclass DemoLogicTest extends HttpTestCase\n{\n    /**\n     * @after\n     */\n    public function tearDownAfterMethod()\n    {\n        Mockery::close();\n    }\n\n    public function testIndex()\n    {\n        $this->getContainer();\n\n        $res = $this->getContainer()->get(DemoLogic::class)->test();\n\n        $this->assertEquals(11, $res['status']);\n    }\n\n    /**\n     * @return Container\n     */\n    protected function getContainer()\n    {\n        $container = ApplicationContext::getContainer();\n\n        $apiStub = $this->createMock(DemoApi::class);\n\n        $apiStub->method('test')->willReturn([\n            'status' => 11\n        ]);\n\n        $container->define(DemoApi::class, function () use ($apiStub) {\n            return $apiStub;\n        });\n        \n        return $container;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Annotation Collectors - PHP\nDESCRIPTION: This snippet shows how to configure custom collectors to annotations.scan.collectors in the application layer inside `config/autoload/annotations.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/2.0.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'scan' => [\n        'collectors' => [\n            CustomCollector::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Example Paginated Resource Collection JSON Response (Hyperf, JSON)\nDESCRIPTION: Provides an example of the JSON response structure for a paginated resource collection. It includes a `data` key with the user data, a `links` key with pagination links, and a `meta` key with pagination metadata.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Eladio Schroeder Sr.\",\n            \"email\": \"therese28@example.com\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Liliana Mayert\",\n            \"email\": \"evandervort@example.com\"\n        }\n    ],\n    \"links\":{\n        \"first\": \"/pagination?page=1\",\n        \"last\": \"/pagination?page=1\",\n        \"prev\": null,\n        \"next\": null\n    },\n    \"meta\":{\n        \"current_page\": 1,\n        \"from\": 1,\n        \"last_page\": 1,\n        \"path\": \"/pagination\",\n        \"per_page\": 15,\n        \"to\": 10,\n        \"total\": 10\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Scout Engine in PHP\nDESCRIPTION: This code snippet demonstrates the abstract class `Hyperf\\Scout\\Engine\\Engine` that a custom Scout engine must extend. It includes the abstract methods that need to be implemented, such as `update`, `delete`, `search`, `paginate`, and `map`. These methods define the core functionality for interacting with the search index.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Scout\\Builder;\n\nabstract public function update($models);\nabstract public function delete($models);\nabstract public function search(Builder $builder);\nabstract public function paginate(Builder $builder, $perPage, $page);\nabstract public function map($results, $model);\n```\n\n----------------------------------------\n\nTITLE: Gauge Interface Definition\nDESCRIPTION: This PHP interface defines the contract for a Gauge metric. It includes methods for setting labels, setting values, and adding values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\ninterface GaugeInterface\n{\n    public function with(string ...$labelValues): self;\n\n    public function set(float $value);\n\n    public function add(float $delta);\n}\n```\n\n----------------------------------------\n\nTITLE: Trait with Inject example\nDESCRIPTION: This code demonstrates a Trait that injects a dependency.  It shows how using a class name that clashes with a class name used in a child class can cause issues with dependency injection. To resolve this, alias the class using `as` or use property type hints in PHP 7.4 and above.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/questions.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Hyperf\\Di\\Annotation\\Inject;\n\ntrait TestTrait\n{\n    #[Inject]\n    protected ResponseInterface $response;\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n// use 同類名會覆蓋Trait\nuse Psr\\Http\\Message\\ResponseInterface;\n\nclass IndexController\n{\n    use TestTrait;\n}\n// Error while injecting dependencies into App\\Controller\\IndexController: No entry or class found for 'Psr\\Http\\Message\\ResponseInterface'\n```\n\n----------------------------------------\n\nTITLE: Reloading a Model with Refresh (Hyperf)\nDESCRIPTION: Illustrates the `refresh` method to reload a model instance with fresh data from the database and overwrite the current instance's attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = User::query()->where('name','Hyperf')->first();\n\n$user->name = 'Hyperf2';\n\n$user->refresh();\n\necho $user->name; // Hyperf\n```\n\n----------------------------------------\n\nTITLE: Enum with Message Placeholders\nDESCRIPTION: This code defines an enum with a message containing a placeholder. The `getMessage` method can be called with an array of arguments to replace the placeholders in the message. Dependencies: `Hyperf\\Constants\\Annotation\\Constants`, `Hyperf\\Constants\\Annotation\\Message`, `Hyperf\\Constants\\EnumConstantsTrait`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/constants.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n\nuse Hyperf\\Constants\\Annotation\\Constants;\nuse Hyperf\\Constants\\Annotation\\Message;\nuse Hyperf\\Constants\\EnumConstantsTrait;\n\n#[Constants]\nenum ErrorCode: int\n{\n    use EnumConstantsTrait;\n    \n    #[Message(\"Params %s is invalid.\")]\n    case PARAMS_INVALID = 1000;\n}\n\n$message = ErrorCode::PARAMS_INVALID->getMessage(['user_id']);\n```\n\n----------------------------------------\n\nTITLE: Snowflake Configuration File\nDESCRIPTION: This PHP code represents the configuration file for the Snowflake component. It defines the begin second, Redis pool, and key used for generating Meta data for IDs using Redis.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/snowflake.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Snowflake\\MetaGenerator\\RedisMilliSecondMetaGenerator;\nuse Hyperf\\Snowflake\\MetaGenerator\\RedisSecondMetaGenerator;\nuse Hyperf\\Snowflake\\MetaGeneratorInterface;\n\nreturn [\n    'begin_second' => MetaGeneratorInterface::DEFAULT_BEGIN_SECOND,\n    RedisMilliSecondMetaGenerator::class => [\n        // Redis Pool\n        'pool' => 'default',\n        // To calculate the Key of WorkerId\n        'key' => RedisMilliSecondMetaGenerator::DEFAULT_REDIS_KEY\n    ],\n    RedisSecondMetaGenerator::class => [\n        // Redis Pool\n        'pool' => 'default',\n        // To calculate the Key of WorkerId\n        'key' => RedisMilliSecondMetaGenerator::DEFAULT_REDIS_KEY\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Crontab Feature - PHP\nDESCRIPTION: This configuration in `config/autoload/crontab.php` enables the crontab feature by setting the `enable` option to `true`. Ensure this file exists in your project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/crontab.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    // 是否开启定时任务\n    'enable' => true,\n];\n```\n\n----------------------------------------\n\nTITLE: Blade Isset and Empty Directives\nDESCRIPTION: This Blade template shows how to use the `@isset` and `@empty` directives as shortcuts for their corresponding PHP functions to check if a variable is set and not empty, or if a variable is empty.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n@isset($records)\n    // $records has been defined but not empty\n@endisset\n\n@empty($records)\n    // $records is empty...\n@endempty\n```\n\n----------------------------------------\n\nTITLE: Create Composite Index\nDESCRIPTION: This code snippet shows how to create a composite index on multiple columns using the `index()` method. It creates an index on 'account_id' and 'created_at' columns with the name 'index_account_id_and_created_at'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// 创建一个复合索引\n$table->index(['account_id', 'created_at'], 'index_account_id_and_created_at');\n```\n\n----------------------------------------\n\nTITLE: Query Builder Pagination PHP\nDESCRIPTION: This code snippet demonstrates how to paginate query results using the Query Builder in Hyperf. It retrieves all users from the 'users' table, displaying 10 users per page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/paginator.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// 展示应用中的所有用户，每页显示 10 条数据\nreturn Db::table('users')->paginate(10);\n```\n\n----------------------------------------\n\nTITLE: Example of a Generated Model\nDESCRIPTION: This is an example of a generated model in Hyperf. It extends the base `Model` class and defines properties such as `$table`, `$fillable`, and `$casts`.  The `@property` annotations provide information about the model's attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/gen.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\n/**\n * @property $id\n * @property $name\n * @property $gender\n * @property $created_at\n * @property $updated_at\n */\nclass User extends Model\n{\n    /**\n     * The table associated with the model.\n     */\n    protected ?string $table = 'user';\n\n    /**\n     * The attributes that are mass assignable.\n     */\n    protected array $fillable = ['id', 'name', 'gender', 'created_at', 'updated_at'];\n\n    /**\n     * The attributes that should be cast to native types.\n     */\n    protected array $casts = ['id' => 'integer', 'gender' => 'integer'];\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in Hyperf Nano\nDESCRIPTION: Shows how to handle exceptions in a Hyperf Nano application.  This example adds an exception handler that returns a custom response for unhandled exceptions. Requires the `hyperf/nano` package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nano.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\HttpMessage\\Stream\\SwooleStream;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->get('/', function () {\n    throw new \\Exception();\n});\n\n$app->addExceptionHandler(function ($throwable, $response) {\n    return $response->withStatus('418')\n        ->withBody(new SwooleStream('I\\'m a teapot'));\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Getting file path and extension - PHP\nDESCRIPTION: Illustrates how to obtain the temporary path and extension of an uploaded file using the `getPath()` and `getExtension()` methods of the `UploadedFile` object. The extension is determined by the file content, not the client-provided extension.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n// 該路徑為上傳文件的臨時路徑\n$path = $request->file('photo')->getPath();\n\n// 由於 Swoole 上傳文件的 tmp_name 並沒有保持文件原名，所以這個方法已重寫為獲取原文件名的後綴名\n$extension = $request->file('photo')->getExtension();\n```\n\n----------------------------------------\n\nTITLE: Total Item Count (LengthAwarePaginator)\nDESCRIPTION: This code snippet demonstrates how to retrieve the total number of items available across all pages. Note that this method is available in `Hyperf\\Paginator\\LengthAwarePaginator`, not `Hyperf\\Paginator\\Paginator`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/paginator.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$total = $paginator->total();\n```\n\n----------------------------------------\n\nTITLE: Unique Rule with Custom Column and Ignore ID - PHP\nDESCRIPTION: Shows how to specify both a custom column name and an ID to ignore in the unique rule.  This combines the functionality of custom column and ignoring an ID during the uniqueness check.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nRule::unique('users','email_address')->ignore($user->id),\n```\n\n----------------------------------------\n\nTITLE: Configure Session Middleware\nDESCRIPTION: Registers the SessionMiddleware as a global middleware for the HTTP server. This allows the component to intercept requests and manage session data. The middleware is applied to the 'http' server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/session.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    // 這裡的 http 對應預設的 server name，如您需要在其它 server 上使用 Session，需要對應的配置全域性中介軟體\n    'http' => [\n        \\Hyperf\\Session\\Middleware\\SessionMiddleware::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Returning a Defined Resource Collection from a Controller\nDESCRIPTION: Demonstrates how to return a defined resource collection instance from a Hyperf controller. It creates a new instance of the 'UserCollection' class, passing in a collection of 'User' models, and then calls the 'toResponse' method to convert it into a response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\UserCollection;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserCollection(User::all()))->toResponse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Rate Limit\nDESCRIPTION: Installs the hyperf/rate-limit package using Composer, which is required for implementing token bucket rate limiting in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/rate-limit.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/rate-limit\n```\n\n----------------------------------------\n\nTITLE: Prohibiting a Field Based on Admin Status (Boolean)\nDESCRIPTION: This example demonstrates how to use Rule::prohibitedIf to conditionally prohibit a field from validation based on the user's admin status. It shows both passing a boolean and a closure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$this->validationFactory->make($request->all(), [\n    'role_id' => Rule::prohibitedIf($request->user()->is_admin),\n]);\n\n$this->validationFactory->make($request->all(), [\n    'role_id' => Rule::prohibitedIf(fn () => $request->user()->is_admin),\n]);\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Socket.IO Server via Composer\nDESCRIPTION: This command installs the hyperf/socketio-server package using Composer, a dependency manager for PHP.  This package provides Socket.IO server functionality within the Hyperf framework. It's a required step before using any Socket.IO features.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/socketio-server.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/socketio-server\n```\n\n----------------------------------------\n\nTITLE: Demo API Class - PHP\nDESCRIPTION: A simple demo API class `DemoApi` with a single `test` method. The `test` method returns an array containing a 'status' key with a value of 1.  This class is designed to be a dependency of other classes and can be easily mocked for testing purposes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/testing.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Api;\n\nclass DemoApi\n{\n    public function test()\n    {\n        return [\n            'status' => 1\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flushing Failed/Timeout Messages\nDESCRIPTION: Shows the command to permanently remove all failed or timed-out messages from the queue. Replace {queue_name} with the queue config name and {channel_name} with the channel name (failed or timeout).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php queue:flush {queue_name} -Q {channel_name}\n```\n\n----------------------------------------\n\nTITLE: Conditional Attribute Inclusion\nDESCRIPTION: This PHP code demonstrates how to conditionally include the `secret` attribute in the `User` resource based on whether the authenticated user is an admin.  The `when` method is used to check a condition, and the secret is included only if the condition is true.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'secret' => $this->when(Auth::user()->isAdmin(), 'secret-value'),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Visitors (Hyperf)\nDESCRIPTION: This configuration array defines which visitors to use when generating the model. Visitors extend the default scripting capabilities of the model generator. Add the corresponding `Visitor` in the `visitors` configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/gen.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => [\n        // Ignore other configurations\n        'commands' => [\n            'gen:model' => [\n                'visitors' => [\n                    Hyperf\\Database\\Commands\\Ast\\ModelRewriteKeyInfoVisitor::class\n                ],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Customize Resource Collection Mapping\nDESCRIPTION: Overrides the `$collects` property of a resource collection to customize the resource class used for mapping items in the collection. In this example, it specifies that the `Member` resource should be used instead of `User` to map collection elements.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * collects 属性定义了资源类。\n     * @var string\n     */\n    public $collects = 'App\\Resource\\Member';\n\n    /**\n     * Transform the resource collection into an array.\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Eager Load Nested Polymorphic Relations (PHP)\nDESCRIPTION: This code demonstrates how to eager load nested relations in a polymorphic relationship. It uses `morphWith` to eager load the `user` relation of `Book` models associated with an `Image` model. This avoids N+1 queries for deeply nested relationships.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\n\nuse App\\Model\\Book;\nuse App\\Model\\Image;\nuse Hyperf\\Database\\Model\\Relations\\MorphTo;\n\n$images = Image::query()->with([\n    'imageable' => function (MorphTo $morphTo) {\n        $morphTo->morphWith([\n            Book::class => ['user'],\n        ]);\n    },\n])->get();\n\n```\n\n----------------------------------------\n\nTITLE: Generate PHP8 Attributes from Doctrine Annotations\nDESCRIPTION: This code snippet shows how to generate PHP8 attributes from Doctrine annotations in Hyperf. It requires the hyperf/code-generator package. This tool helps migrate from older annotation styles to PHP8's native attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog/changelog-v3.0.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp bin/hyperf.php code:generate -D app\n```\n\n----------------------------------------\n\nTITLE: Managing Hyperf Application with supervisorctl\nDESCRIPTION: These commands use `supervisorctl` to manage the Hyperf application. They allow starting, restarting, stopping, checking status, updating configurations, and reloading Supervisor. These commands provide essential control over the managed processes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/supervisor.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# 启动 hyperf 应用\nsupervisorctl start hyperf\n# 重启 hyperf 应用\nsupervisorctl restart hyperf\n# 停止 hyperf 应用\nsupervisorctl stop hyperf\n# 查看所有被管理项目运行状态\nsupervisorctl status\n# 重新加载配置文件\nsupervisorctl update\n# 重新启动所有程序\nsupervisorctl reload\n```\n\n----------------------------------------\n\nTITLE: Incrementing and decrementing values using increment/decrement in Hyperf\nDESCRIPTION: This snippet shows how to increment or decrement the value of a column using the `increment` and `decrement` methods.  An optional second argument specifies the amount to increment or decrement. Additional update values can be specified in the third argument.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes');\n\nDb::table('users')->increment('votes', 5);\n\nDb::table('users')->decrement('votes');\n\nDb::table('users')->decrement('votes', 5);\n\nDb::table('users')->increment('votes', 1, ['name' => 'John']);\n```\n\n----------------------------------------\n\nTITLE: Getting Raw Search Results\nDESCRIPTION: Retrieves the raw search results (before they are converted to model instances) using the `raw` method. This is useful when you need to access the Elasticsearch response directly.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->raw();\n```\n\n----------------------------------------\n\nTITLE: Replacing Guzzle Handler for EasyWeChat in Hyperf\nDESCRIPTION: This code snippet demonstrates how to replace the default Guzzle HTTP client used by EasyWeChat with a coroutine-friendly client in a Hyperf environment. It uses `Hyperf\\Guzzle\\CoroutineHandler` to ensure compatibility with Hyperf's coroutine-based concurrency model. The code retrieves the application container, creates a coroutine handler, and rebinds the `http_client` and `guzzle_handler` services with the new handler.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/sdks/wechat.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Context\\ApplicationContext;\nuse EasyWeChat\\Factory;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\HandlerStack;\nuse Hyperf\\Guzzle\\CoroutineHandler;\n\n$container = ApplicationContext::getContainer();\n\n$app = Factory::officialAccount($config);\n$handler = new CoroutineHandler();\n\n// Set HttpClient, some interfaces use http_client directly.\n$config = $app['config']->get('http', []);\n$config['handler'] = $stack = HandlerStack::create($handler);\n$app->rebind('http_client', new Client($config));\n\n// Some interfaces will reset the Handler according to guzzle_handler when requesting data\n$app['guzzle_handler'] = $handler;\n\n// If you are using OfficialAccount, you also need to set the following parameters\n$app->oauth->setGuzzleOptions([\n    'http_errors' => false,\n    'handler' => $stack,\n]);\n```\n\n----------------------------------------\n\nTITLE: Request and Response Headers Handling (Hyperf >= 3.1)\nDESCRIPTION: Demonstrates the updated behavior of `withHeader`, `withHeaders`, `setHeader`, `setHeaders`, `addHeader` methods in Hyperf 3.1 and later.  `withHeader` and `setHeader` replace single headers. `withHeaders` and `setHeaders` replace entire header sets.  `addHeader` appends values to existing headers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/3.1.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// v3.1 之后\n$request->withHeader('foo', 1)->withHeader('bar', 2); // ['foo' => [1], 'bar' => [2]]\n$request->withHeader('foo', 1)->withHeader('foo', 2); // ['foo' => [2]]\n$request->withAddedHeader('foo', 1)->withAddedHeader('foo', 2); // ['foo' => [1, 2]]\n\n$request->withHeaders(['foo' => 1])->withHeaders(['bar' => 2]); // ['bar' => [2]]\n\n$request->setHeader('foo', 1)->setHeader('bar', 2); // ['foo' => [1], 'bar' => [2]]\n$request->setHeader('foo', 1)->setHeader('foo', 2); // ['foo' => [2]]\n$request->addHeader('foo', 1)->addHeader('foo', 2); // ['foo' => [1, 2]]\n\n$request->setHeaders(['foo' => 1])->setHeaders(['bar' => 2]); // ['bar' => [2]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Worker in server.php\nDESCRIPTION: This configuration snippet demonstrates how to configure the Task worker in the `server.php` file within a Hyperf project. It sets the number of task workers and disables coroutines within the task workers to prevent data confusion when handling non-coroutine-friendly methods.  The event callbacks are also configured for task execution and completion.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/task.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 這裏省略了其它不相關的配置項\n    'settings' => [\n        // Task Worker 數量，根據您的服務器配置而配置適當的數量\n        'task_worker_num' => 8,\n        // 因為 `Task` 主要處理無法協程化的方法，所以這裏推薦設為 `false`，避免協程下出現數據混淆的情況\n        'task_enable_coroutine' => false,\n    ],\n    'callbacks' => [\n        // Task callbacks\n        Event::ON_TASK => [Hyperf\\Framework\\Bootstrap\\TaskCallback::class, 'onTask'],\n        Event::ON_FINISH => [Hyperf\\Framework\\Bootstrap\\FinishCallback::class, 'onFinish'],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Record\nDESCRIPTION: This code snippet shows how to delete a model instance, which also removes the corresponding record from the search index automatically.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$order = App\\Order::find(1);\n\n$order->delete();\n```\n\n----------------------------------------\n\nTITLE: Install Nacos Service Governance - Shell\nDESCRIPTION: Installs the `hyperf/service-governance-nacos` component via Composer. This is required when using Nacos as the service center driver.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.2.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"hyperf/service-governance-nacos:~2.2.0\"\n```\n\n----------------------------------------\n\nTITLE: In Validation Rule Using Rule Class in Hyperf\nDESCRIPTION: This snippet demonstrates the use of the `Rule::in` method to construct an `in` validation rule in Hyperf.  It allows for validating that a field's value is within a specified array of allowed values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($data, [\n    'zones' => [\n        'required',\n        Rule::in(['first-zone', 'second-zone']),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Bind Interface to Consumer Implementation\nDESCRIPTION: Binds the service interface to the manual consumer implementation in the dependencies.php file. This allows for dependency injection of the consumer through the interface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/json-rpc.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    App\\JsonRpc\\CalculatorServiceInterface::class => App\\JsonRpc\\CalculatorServiceConsumer::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Getting the Container Object via ApplicationContext\nDESCRIPTION: Demonstrates how to obtain the DI container instance using the ApplicationContext::getContainer() method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$container = \\Hyperf\\Context\\ApplicationContext::getContainer();\n```\n\n----------------------------------------\n\nTITLE: Defining a PHP Object for RPC Communication\nDESCRIPTION: This snippet defines a simple PHP object, `MathValue`, with a public property `value`. This object is used for both request and response in the JSON-RPC communication, allowing complex data types to be passed between services. Requires PHP 7.4+ due to type hints.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/json-rpc.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\JsonRpc;\n\nclass MathValue\n{\n    public $value;\n\n    public function __construct($value)\n    {\n        $this->value = $value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Scout Configuration (Again)\nDESCRIPTION: This command publishes the Scout configuration file to the config directory. It's repeated here, perhaps for emphasis or clarity.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/scout\n```\n\n----------------------------------------\n\nTITLE: Prometheus Dependency Installation\nDESCRIPTION: This command installs the `promphp/prometheus_client_php` dependency, which is required for using the Prometheus engine with the `hyperf/metric` component in Hyperf v3.1.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/3.1.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require promphp/prometheus_client_php\n```\n\n----------------------------------------\n\nTITLE: Generating a Middleware - CLI Command\nDESCRIPTION: This command shows how to use the Hyperf CLI to generate a new middleware class. The `gen:middleware` command creates a skeleton middleware file in the specified namespace.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/middleware/middleware.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nphp ./bin/hyperf.php gen:middleware Auth/FooMiddleware\n```\n\n----------------------------------------\n\nTITLE: Customize Error Messages (make)\nDESCRIPTION: This code shows how to pass custom error messages when creating a validator using the `make` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$messages = [\n    'required' => 'The :attribute field is required.',\n];\n\n$validator = $this->validationFactory->make($request->all(), $rules, $messages);\n```\n\n----------------------------------------\n\nTITLE: Executing Model Generation Command (Hyperf)\nDESCRIPTION: This command generates a model based on the specified database table name.  The table name is passed as an argument to the `gen:model` command. It leverages AST for model generation, allowing for easy resetting after method additions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/gen.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:model table_name\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf RPC Client Component\nDESCRIPTION: Installs the hyperf/rpc-client component using composer. This component is needed to implement JSON RPC client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/json-rpc.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/rpc-client\n```\n\n----------------------------------------\n\nTITLE: Using MongoDB Task\nDESCRIPTION: This code demonstrates how to use the `MongoTask` class to perform MongoDB operations. It retrieves the `MongoTask` instance from the container and calls the `insert` and `query` methods to insert and query data in MongoDB.  It relies on `App\\Task\\MongoTask` and `Hyperf\\Context\\ApplicationContext`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/task.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Task\\MongoTask;\nuse Hyperf\\Context\\ApplicationContext;\n\n$client = ApplicationContext::getContainer()->get(MongoTask::class);\n$client->insert('hyperf.test', ['id' => rand(0, 99999999)]);\n\n$result = $client->query('hyperf.test', [], [\n    'sort' => ['id' => -1],\n    'limit' => 5,\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Conditional Attributes Using Closure in Hyperf\nDESCRIPTION: This PHP code shows how to use a closure with the `when` method to conditionally add an attribute to a resource response.  The closure is executed only when the condition is true, providing a way to calculate the attribute's value dynamically.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'secret' => $this->when(Auth::user()->isAdmin(), function () {\n                return 'secret-value';\n            }),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install S3 Flysystem Adapter - Shell\nDESCRIPTION: Installs the `league/flysystem-aws-s3-v3` and `hyperf/guzzle` components via Composer. They are required when using S3 as the filesystem.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.2.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"league/flysystem-aws-s3-v3:^2.0\"\ncomposer require hyperf/guzzle\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Overlay Network\nDESCRIPTION: These snippets create a custom Docker overlay network with different subnet options.  The first one creates a network with a /8 subnet, the second one creates a network with a /16 subnet, and the third one removes the ingress network and recreates it with a new subnet, and then creates a new network with a /8 subnet.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\ndocker network create \\\n--driver overlay \\\n--subnet 10.0.0.1/8 \\\n--opt encrypted \\\n--attachable \\\ndefault-network\n```\n\nLANGUAGE: Shell\nCODE:\n```\ndocker network create \\\n--driver overlay \\\n--subnet 10.1.0.1/16 \\\n--opt encrypted \\\n--attachable \\\ndefault-network\n```\n\nLANGUAGE: Shell\nCODE:\n```\ndocker network rm ingress\ndocker network create --ingress --subnet 192.168.0.1/16 --driver overlay ingress\n\ndocker network create \\\n--driver overlay \\\n--subnet 10.0.0.1/8 \\\n--opt encrypted \\\n--attachable \\\ndefault-network\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Circuit Breaker\nDESCRIPTION: This command installs the hyperf/circuit-breaker component using composer, adding it as a dependency to your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/circuit-breaker.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/circuit-breaker\n```\n\n----------------------------------------\n\nTITLE: Example Anonymous Component Blade Template\nDESCRIPTION: This snippet exemplifies the content of an anonymous component. This is a Blade template file that will render when the component is called.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<x-alert/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Repository for Local Hyperf (JSON)\nDESCRIPTION: Adds a repository configuration to the composer.json file of the hyperf-skeleton project. This allows Composer to resolve dependencies by linking to the local hyperf project, enabling developers to modify Hyperf's core components directly.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/component-guide/intro.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"repositories\": {\n         \"hyperf\": {\n             \"type\": \"path\",\n             \"url\": \"../hyperf/src/*\"\n         }\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Running MySQL with Docker\nDESCRIPTION: Runs a MySQL 5.7 instance using Docker with specified environment variables, volume, and network. The command exposes port 3306 and uses the `default-network` for network communication.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name mysql -v /srv/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=xxxx -p 3306:3306 --rm --network default-network -d mysql:5.7\n```\n\n----------------------------------------\n\nTITLE: Updating Records in Index Using Query Builder\nDESCRIPTION: This code shows how to update a collection of records in the search index using the model query builder and the `searchable` method. This allows you to efficiently update a large number of records based on specific criteria.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n// 使用模型查询语句更新...\nApp\\Order::where('price', '>', 100)->searchable();\n\n// 你也可以使用模型关系更新...\n$user->orders()->searchable();\n\n// 你也可以使用集合更新...\n$orders->searchable();\n```\n\n----------------------------------------\n\nTITLE: Modify SSHD Default Port Shell Script\nDESCRIPTION: This script modifies the default SSH port from 22 to 2222. It edits the sshd_config file and restarts the SSH service. Be sure to update your SSH client configuration accordingly.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ vim /etc/ssh/sshd_config\n\n# 默認 Port 改為 2222\nPort 2222\n\n# 重啓服務\n$ systemctl restart sshd.service\n```\n\nLANGUAGE: Shell\nCODE:\n```\nssh -p 2222 root@host\n```\n\n----------------------------------------\n\nTITLE: Using Hyperf Components in Hyperf Nano\nDESCRIPTION: This example shows how to use Hyperf components within a Hyperf Nano application. It configures a database connection and performs a database query using the DB component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nano.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DB\\DB;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->config([\n    'db.default' => [\n        'host' => env('DB_HOST', 'localhost'),\n        'port' => env('DB_PORT', 3306),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n    ]\n]);\n\n$app->get('/', function(){\n    return DB::query('SELECT * FROM `user` WHERE gender = ?;', [1]);\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Default AMQP Configuration\nDESCRIPTION: This PHP array defines the default AMQP configuration settings, including host, port, user, password, vhost, concurrency limits, pool settings, and basic connection parameters. These settings are used to establish connections to the RabbitMQ server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/amqp.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'enable' => true,\n    'default' => [\n        'host' => 'localhost',\n        'port' => 5672,\n        'user' => 'guest',\n        'password' => 'guest',\n        'vhost' => '/',\n        'concurrent' => [\n            'limit' => 1,\n        ],\n        'pool' => [\n            'connections' => 1,\n        ],\n        'params' => [\n            'insist' => false,\n            'login_method' => 'AMQPLAIN',\n            'login_response' => null,\n            'locale' => 'en_US',\n            'connection_timeout' => 3.0,\n            // Try to maintain twice value heartbeat as much as possible\n            'read_write_timeout' => 3.0,\n            'context' => null,\n            'keepalive' => false,\n            // Try to ensure that the consumption time of each message is less than the heartbeat time as much as possible\n            'heartbeat' => 0,\n            'close_on_destruct' => false,\n        ],\n    ],\n    'pool2' => [\n        ...\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Generate AMQP Delay Consumer (Bash)\nDESCRIPTION: Generates an AMQP consumer class using the Hyperf CLI tool. This command creates a skeleton class that can be customized to consume delayed messages from a specific exchange, routing key, and queue.  Requires hyperf cli to be installed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:amqp-consumer DelayDirectConsumer\n```\n\n----------------------------------------\n\nTITLE: Get First Item Number on Page\nDESCRIPTION: This example demonstrates how to retrieve the number of the first item on the current page using the `firstItem()` method of the Paginator. It returns an integer or null if the page is empty.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/paginator.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$firstItem = $paginator->firstItem();\n```\n\n----------------------------------------\n\nTITLE: Modify SSH Port - Shell\nDESCRIPTION: These commands modify the SSH daemon configuration file to change the default port from 22 to 2222 and restarts the SSH service. This is a prerequisite to allow Gitlab to use the default port 22.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/docker-swarm.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ vim /etc/ssh/sshd_config\n\n# Default Port changed to 2222\nPort 2222\n\n# restart the service\n$ systemctl restart sshd.service\n```\n\n----------------------------------------\n\nTITLE: Modifying ExceptionHandler in config/autoload/exceptions.php\nDESCRIPTION: This snippet demonstrates how to configure the `Hyperf\\HttpServer\\Exception\\Handler\\HttpExceptionHandler` in the `config/autoload/exceptions.php` configuration file to handle HTTP routing exceptions (404, 405) consistently after upgrading to Hyperf 2.0.  This handler must be configured before the `AppExceptionHandler`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.0.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'handler' => [\n        'http' => [\n            Hyperf\\HttpServer\\Exception\\Handler\\HttpExceptionHandler::class,\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Install S3 Adapter (Flysystem v1.0)\nDESCRIPTION: These commands install the S3 adapter for Flysystem v1.0 and the hyperf/guzzle dependency using Composer. This adapter allows you to interact with AWS S3 or S3-compatible storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/filesystem.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"league/flysystem-aws-s3-v3:^1.0\"\n```\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/guzzle\n```\n\n----------------------------------------\n\nTITLE: Registering a Protocol\nDESCRIPTION: This snippet registers a JSONRPC protocol using the ProtocolManager class.  It defines the transporter, packer, data formatter, and path generator components required for the protocol.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/jet.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Jet\\DataFormatter\\DataFormatter;\nuse Hyperf\\Jet\\Packer\\JsonEofPacker;\nuse Hyperf\\Jet\\PathGenerator\\PathGenerator;\nuse Hyperf\\Jet\\ProtocolManager;\nuse Hyperf\\Jet\\Transporter\\StreamSocketTransporter;\n\nProtocolManager::register($protocol = 'jsonrpc', [\n    ProtocolManager::TRANSPORTER => new StreamSocketTransporter(),\n    ProtocolManager::PACKER => new JsonEofPacker(),\n    ProtocolManager::PATH_GENERATOR => new PathGenerator(),\n    ProtocolManager::DATA_FORMATTER => new DataFormatter(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Update SwooleEvent Class in server.php (Hyperf)\nDESCRIPTION: This snippet shows how to update the `SwooleEvent` class to `Hyperf\\Server\\Event` in the `server.php` configuration file.  The `SwooleEvent` class has been renamed in version 2.1. It involves changes in PHP configuration files and requires understanding of Hyperf server configurations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.1.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\nuse Hyperf\\Server\\Server;\n\nreturn [\n    'mode' => SWOOLE_BASE,\n    'servers' => [\n        [\n            'name' => 'http',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9501,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [Hyperf\\HttpServer\\Server::class, 'onRequest'],\n            ],\n        ],\n    ],\n    'callbacks' => [\n        Event::ON_BEFORE_START => [Hyperf\\Framework\\Bootstrap\\ServerStartCallback::class, 'beforeStart'],\n        Event::ON_WORKER_START => [Hyperf\\Framework\\Bootstrap\\WorkerStartCallback::class, 'onWorkerStart'],\n        Event::ON_PIPE_MESSAGE => [Hyperf\\Framework\\Bootstrap\\PipeMessageCallback::class, 'onPipeMessage'],\n        Event::ON_WORKER_EXIT => [Hyperf\\Framework\\Bootstrap\\WorkerExitCallback::class, 'onWorkerExit'],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Install Aliyun OSS Adapter (Flysystem v2.0 & v3.0)\nDESCRIPTION: This command installs the Aliyun OSS adapter compatible with Flysystem versions 2.0 and 3.0. It provides integration with Aliyun Object Storage Service.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/filesystem.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/flysystem-oss\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Swagger Package\nDESCRIPTION: Installs the hyperf/swagger package using Composer, adding it as a dependency to the project. This command retrieves the package and its dependencies from the configured Composer repositories.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/swagger.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/swagger\n```\n\n----------------------------------------\n\nTITLE: Config Provider Structure After Change PHP\nDESCRIPTION: This code snippet illustrates the updated structure of the 'annotations' configuration within the config provider. The scan configuration is now nested under 'annotations'. It defines the paths to be scanned and the collectors to be used for annotation processing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.0.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n'annotations' => [\n    'scan' => [\n        'paths' => [\n            __DIR__,\n        ],\n        'collectors' => [],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Exists Validation Custom Column\nDESCRIPTION: The `exists:table,column` rule validates that the field under validation exists in the specified database table. This snippet shows how to specify a custom column name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\n'state' => 'exists:states,abbreviation'\n```\n\n----------------------------------------\n\nTITLE: Implementing Inbound Attribute Casting in Hyperf (PHP)\nDESCRIPTION: This code defines a custom inbound attribute cast class `Hash` that implements the `CastsInboundAttributes` interface to hash a model attribute before it is stored in the database. The `set` method hashes the value using the specified algorithm (defaulting to MD5) before saving.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/mutators.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Casts;\n\nuse Hyperf\\Contract\\CastsInboundAttributes;\n\nclass Hash implements CastsInboundAttributes\n{\n    /**\n     * 哈希算法\n     *\n     * @var string\n     */\n    protected $algorithm;\n\n    /**\n     * 创建一个新的类型转换类实例\n     */\n    public function __construct($algorithm = 'md5')\n    {\n        $this->algorithm = $algorithm;\n    }\n\n    /**\n     * 转换成将要进行存储的值\n     */\n    public function set($model, $key, $value, $attributes)\n    {\n        return hash($this->algorithm, $value);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Unique Rule with Custom Database Connection - PHP\nDESCRIPTION: Illustrates how to define a custom database connection to be used during the unique validation.  It uses a dot notation after the table name to specify the connection (e.g., 'connection.users').\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'unique:connection.users,email_address'\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Storage Adapter\nDESCRIPTION: This PHP configuration snippet demonstrates how to replace the default in-memory storage adapter for Prometheus metrics with a Redis-based storage adapter.  This ensures persistence of metrics across application restarts.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    Prometheus\\Storage\\Adapter::class => Hyperf\\Metric\\Adapter\\Prometheus\\RedisStorageFactory::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Validation Component\nDESCRIPTION: This command installs the hyperf/validation component using composer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/validation\n```\n\n----------------------------------------\n\nTITLE: Install Plates Engine (Bash)\nDESCRIPTION: This command installs the Plates template engine using Composer, allowing the use of Plates templates for view rendering in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require league/plates\n```\n\n----------------------------------------\n\nTITLE: Inline Component Example (PHP)\nDESCRIPTION: This demonstrates creating an inline component by directly returning the component's HTML from the `render` method.  This is suitable for small, simple components.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n    public function render()\n    {\n        return <<<'blade'\n            <div class=\"alert alert-danger\">\n                {{ $slot }}\n            </div>\n        blade;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Index in Hyperf (PHP)\nDESCRIPTION: Demonstrates creating a unique index at definition time and after fields are defined using Hyperf's schema builder. The `unique()` method is used to create the index. No specific dependencies are required beyond the Hyperf framework itself.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// Create index at definition time\n$table->string('name')->unique();\n// Create indexes after fields are defined\n$table->unique('name');\n```\n\n----------------------------------------\n\nTITLE: Model Hook Function Implementation PHP\nDESCRIPTION: This code demonstrates how to use hook functions to handle model events in Hyperf. It overrides the `saving` method in the `User` model to set the `created_at` attribute to a specific value before the model is saved. This approach allows for custom logic to be executed during specific model events, in this case, before saving a new user.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/event.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\Database\\Model\\Events\\Saving;\n\n/**\n * @property $id\n * @property $name\n * @property $gender\n * @property $created_at\n * @property $updated_at\n */\nclass User extends Model\n{\n    /**\n     * The table associated with the model.\n     * \n     * @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * The attributes that are mass assignable.\n     * \n     * @var array\n     */\n    protected $fillable = ['id', 'name', 'gender', 'created_at', 'updated_at'];\n\n    protected $casts = ['id' => 'integer', 'gender' => 'integer'];\n\n    public function saving(Saving $event)\n    {\n        $this->setCreatedAt('2019-01-01');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Pausing Indexing\nDESCRIPTION: This code snippet demonstrates how to temporarily disable the syncing of model data to the search index using the `withoutSyncingToSearch` method. This is useful for performing batch operations without triggering index updates.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nApp\\Order::withoutSyncingToSearch(function () {\n    // 執行模型動作...\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Component with a Named Slot in Blade\nDESCRIPTION: This snippet showcases how to use the `x-slot` tag to define content for a named slot within a component. Content within the `<x-slot name=\"title\">` tag is assigned to the `$title` variable within the component template. The content outside `x-slot` tags goes to `$slot`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<x-alert>\n    <x-slot name=\"title\">\n        Server Error\n    </x-slot>\n\n    <strong>Whoops!</strong> Something went wrong!\n</x-alert>\n```\n\n----------------------------------------\n\nTITLE: Using Memory Adapter for Rooms\nDESCRIPTION: This PHP snippet shows how to configure the dependency injection container to use the MemoryAdapter for Socket.io rooms. This is suitable for single-worker scenarios.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/socketio-server.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\SocketIOServer\\Room\\AdapterInterface::class => \\Hyperf\\SocketIOServer\\Room\\MemoryAdapter::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Rendering JSON in Blade\nDESCRIPTION: This HTML snippet shows how to use the `@json` Blade directive to render a PHP array as JSON within a JavaScript script tag. It includes an example with `JSON_PRETTY_PRINT`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<script>\n    var app = @json($array);\n\n    var app = @json($array, JSON_PRETTY_PRINT);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Generating Migration File with Options (Bash)\nDESCRIPTION: These commands generate migration files with options for specifying the table name.  `--table` is used for modifying existing tables, while `--create` is used for creating new tables.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:migration create_users_table --table=users\nphp bin/hyperf.php gen:migration create_users_table --create=users\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Hyperf Nano\nDESCRIPTION: Demonstrates how to add middleware to a Hyperf Nano application. It adds a middleware that sets an attribute on the request and then retrieves that attribute within a route handler.  Requires the `hyperf/nano` package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nano.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->get('/', function () {\n    return $this->request->getAttribute('key');\n});\n\n$app->addMiddleware(function ($request, $handler) {\n    $request = $request->withAttribute('key', 'value');\n    return $handler->handle($request);\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Checking Context Value Existence - Hyperf\nDESCRIPTION: This code snippet demonstrates how to check if a value exists in the current coroutine's context using the `Context::has()` method in Hyperf. The `has()` method takes a key as input and returns `true` if the key exists in the context, and `false` otherwise.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/coroutine.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Context\\Context;\n\n// 從當前協程上下文中判斷 key 為 foo 的值是否存在\n$foo = Context::has('foo');\n```\n\n----------------------------------------\n\nTITLE: Hyperf Nano Crontab Example\nDESCRIPTION: Shows how to add a scheduled task (crontab) to a Hyperf Nano application. The task executes every second and logs a message using the StdoutLoggerInterface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nano.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addCrontab('* * * * * *', function(){\n    $this->get(StdoutLoggerInterface::class)->info('execute every second!');\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Array/JSON Conversion in Hyperf Model\nDESCRIPTION: This snippet shows how to use the `array` cast type. The `options` attribute is cast to an array, which will automatically serialize/deserialize JSON data to/from a PHP array when reading/writing to the database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/mutators.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 應進行類型轉換的屬性\n     *\n     * @var array\n     */\n    protected $casts = [\n        'options' => 'array',\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a One-to-One Polymorphic Relationship - User Model\nDESCRIPTION: This code snippet defines a one-to-one polymorphic relationship for the User model with the Image model, utilizing the morphOne method.  This setup assumes that the images table has columns named imageable_id and imageable_type, allowing an image to be associated with one User model. The imageable string specifies the base name for the type and id columns in the images table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/relationship.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass User extends Model\n{\n    public function image()\n    {\n        return $this->morphOne(Image::class, 'imageable');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install Qiniu Adapter (Flysystem v1.0)\nDESCRIPTION: This command installs the Qiniu adapter for Flysystem v1.0, enabling integration with Qiniu cloud storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/filesystem.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-qiniu:^1.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Log Handlers in Hyperf (Named)\nDESCRIPTION: This configuration shows an alternative method for setting up multiple log handlers in Hyperf using named handlers.  The 'default' logger references 'single' and 'daily' handlers, each configured separately. The 'single' handler writes to hyperf.log with LineFormatter, while 'daily' writes to hyperf-debug.log with JsonFormatter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/logger.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Monolog\\Handler;\nuse Monolog\\Formatter;\nuse Monolog\\Level;\n\nreturn [\n    'default' => [\n        'handlers' => ['single', 'daily'],\n    ],\n\n    'single' => [\n        'handler' => [\n            'class' => Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => BASE_PATH . '/runtime/logs/hyperf.log',\n                'level' => Level::Info,\n            ],\n        ],\n        'formatter' => [\n            'class' => Formatter\\LineFormatter::class,\n            'constructor' => [\n                'format' => null,\n                'dateFormat' => null,\n                'allowInlineLineBreaks' => true,\n            ],\n        ],\n    ],\n\n    'daily' => [\n        'handler' => [\n            'class' => Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => BASE_PATH . '/runtime/logs/hyperf-debug.log',\n                'level' => Level::Info,\n            ],\n        ],\n        'formatter' => [\n            'class' => Formatter\\JsonFormatter::class,\n            'constructor' => [\n                'batchMode' => Formatter\\JsonFormatter::BATCH_MODE_JSON,\n                'appendNewline' => true,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Loop Control (Blade)\nDESCRIPTION: This Blade template shows how to use `@continue` and `@break` directives to control the flow of a loop. These directives are similar to PHP's `continue` and `break` statements.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_18\n\nLANGUAGE: blade\nCODE:\n```\n@foreach ($users as $user)\n    @if ($user->type == 1)\n        @continue\n    @endif\n\n    <li>{{ $user->name }}</li>\n\n    @if ($user->number == 5)\n        @break\n    @endif\n@endforeach\n\n@foreach ($users as $user)\n    @continue($user->type == 1)\n\n    <li>{{ $user->name }}</li>\n\n    @break($user->number == 5)\n@endforeach\n```\n\n----------------------------------------\n\nTITLE: Memory Driver Configuration\nDESCRIPTION: This configuration demonstrates how to set up the MemoryDriver for the Hyperf cache. This driver stores cache data in memory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/cache.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'memory' => [\n        'driver' => Hyperf\\Cache\\Driver\\MemoryDriver::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Calling Component Methods in Blade (HTML)\nDESCRIPTION: This HTML snippet shows how to call a public method of a component within a Blade template. The method's name becomes a variable accessible in the view, allowing direct invocation with parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n    <option {{ $isSelected($value) ? 'selected=\"selected\"' : '' }} value=\"{{ $value }}\">\n        {{ $label }}\n    </option>\n```\n\n----------------------------------------\n\nTITLE: Registering Polymorphic Mapping During Hyperf Boot\nDESCRIPTION: This code snippet shows how to register the polymorphic type mapping using a listener that executes during the Hyperf application boot process. This ensures that the mapping is available when the application starts. Requires `Hyperf\\Event\\Annotation\\Listener` and implementing `Hyperf\\Event\\Contract\\ListenerInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/relationship.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n *  *\n * @link     https://www.hyperf.io\n * @document https://doc.hyperf.io\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\nnamespace App\\Listener;\n\nuse App\\Model;\nuse Hyperf\\Database\\Model\\Relations\\Relation;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\n\n#[Listener]\nclass MorphMapRelationListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            BootApplication::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        Relation::morphMap([\n            'user' => Model\\User::class,\n            'book' => Model\\Book::class,\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Parallel Example with Maximum Concurrent Coroutines\nDESCRIPTION: This example illustrates how to limit the maximum number of concurrent coroutines executed by the `Parallel` class.  By passing `5` to the `Parallel` constructor, the code ensures that no more than 5 coroutines will execute at any given time, preventing overload of resources.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/coroutine.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Coroutine\\Exception\\ParallelExecutionException;\nuse Hyperf\\Coroutine\\Coroutine;\nuse Hyperf\\Coroutine\\Parallel;\n\n$parallel = new Parallel(5);\nfor ($i = 0; $i < 20; $i++) {\n    $parallel->add(function () {\n        sleep(1);\n        return Coroutine::id();\n    });\n} \n\ntry{\n   $results = $parallel->wait(); \n} catch(ParallelExecutionException $e){\n    // $e->getResults() 獲取協程中的返回值。\n    // $e->getThrowables() 獲取協程中出現的異常。\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Array Argument (PHP)\nDESCRIPTION: This code configures the 'name' argument to accept an array of values. The `handle` method retrieves and dumps the array of arguments. This shows how to define and handle array-type arguments in Hyperf commands.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addArgument('name', InputArgument::IS_ARRAY, 'name');\n}\n\npublic function handle()\n{\n    var_dump($this->input->getArgument('name'));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Client\nDESCRIPTION: This snippet demonstrates how to create a custom client class that extends `Hyperf\\Jet\\AbstractClient`. It defines the `CalculatorService` client and sets the transporter and packer. The @method annotation allows for type hinting and IDE support.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/jet.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Jet\\AbstractClient;\nuse Hyperf\\Jet\\Packer\\JsonEofPacker;\nuse Hyperf\\Jet\\Transporter\\StreamSocketTransporter;\nuse Hyperf\\Rpc\\Contract\\DataFormatterInterface;\nuse Hyperf\\Rpc\\Contract\\PackerInterface;\nuse Hyperf\\Rpc\\Contract\\PathGeneratorInterface;\nuse Hyperf\\Rpc\\Contract\\TransporterInterface;\n\n/**\n * @method int add(int $a, int $b);\n */\nclass CalculatorService extends AbstractClient\n{\n    // 定義 `CalculatorService` 作為 $service 引數的預設值\n    public function __construct(\n        string $service = 'CalculatorService',\n        TransporterInterface $transporter = null,\n        PackerInterface $packer = null,\n        ?DataFormatterInterface $dataFormatter = null,\n        ?PathGeneratorInterface $pathGenerator = null\n    ) {\n        // 這裡指定 transporter，您仍然可以透過 ProtocolManager 來獲得 transporter 或從建構函式傳遞\n        $transporter = new StreamSocketTransporter('127.0.0.1', 9503);\n        // 這裡指定 packer，您仍然可以透過 ProtocolManager 來獲得 packer 或從建構函式傳遞\n        $packer = new JsonEofPacker();\n        parent::__construct($service, $transporter, $packer, $dataFormatter, $pathGenerator);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Subscription using Observable::fromChannel (PHP)\nDESCRIPTION: Demonstrates many-to-many subscription and publishing using `Observable::fromChannel` with Swoole coroutine Channels.  It creates a channel, publishes data to it, and then subscribes multiple listeners to the observable sequence derived from the channel.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/reactive-x.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\ReactiveX\\Observable;\nuse Swoole\\Coroutine\\Channel;\n\n$chan = new Channel(1);\n$pub = Observable::fromChannel($chan)->publish();\n\n$pub->subscribe(function ($x) {\n    echo 'First Subscription:' . $x . PHP_EOL;\n});\n$pub->subscribe(function ($x) {\n    echo 'Second Subscription:' . $x . PHP_EOL;\n});\n$pub->connect();\n\n$chan->push('hello');\n$chan->push('world');\n\n// First Subscription: hello\n// Second Subscription: hello\n// First Subscription: world\n// Second Subscription: world\n```\n\n----------------------------------------\n\nTITLE: Defining a GET Endpoint with Swagger Annotations\nDESCRIPTION: This code demonstrates how to define a GET endpoint using Swagger annotations. It includes query parameters, their descriptions, and required status. The `SA\\Response` annotation specifies the structure of the response, including an example JSON payload.  The `ConversationRequest` is not explicitly defined in this context, but it is used as dependency injection and type hinting.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/swagger.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n#[SA\\Get(path: '/test', summary: 'GET 示例', tags: ['Api/Test'])]\n#[SA\\QueryParameter(name: 'username', description: '使用者名稱欄位描述', required: true, schema: new SA\\Schema(type: 'string'))]\n#[SA\\QueryParameter(name: 'age', description: '年齡欄位描述', required: true, schema: new SA\\Schema(type: 'string'))]\n#[SA\\QueryParameter(name: 'city', description: '城市欄位描述', required: false, schema: new SA\\Schema(type: 'string'))]\n#[SA\\Response(\n    response: 200,\n    description: '返回值的描述',\n    content: new SA\\JsonContent(\n        example: '{\"code\":200,\"data\":[]}'\n    ),\n)]\npublic function list(ConversationRequest $request): array\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TCP Server with Length Check for JSON RPC\nDESCRIPTION: This configuration defines a TCP server in Hyperf to handle JSON RPC requests using the `jsonrpc-tcp-length-check` protocol. This extends the basic `jsonrpc` protocol with length checking for packet handling. Settings such as `open_length_check`, `package_length_type`, `package_length_offset`, and `package_body_offset` are configured to define the length check parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/json-rpc.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 這裡省略了該檔案的其它配置\n    'servers' => [\n        [\n            'name' => 'jsonrpc',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9503,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_RECEIVE => [\\Hyperf\\JsonRpc\\TcpServer::class, 'onReceive'],\n            ],\n            'settings' => [\n                'open_length_check' => true,\n                'package_length_type' => 'N',\n                'package_length_offset' => 0,\n                'package_body_offset' => 4,\n                'package_max_length' => 1024 * 1024 * 2,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: WaitGroup Example for Coroutine Synchronization\nDESCRIPTION: This example illustrates the use of WaitGroup to synchronize the execution of multiple coroutines. The main coroutine waits until two child coroutines have completed their tasks before continuing. The `add`, `done`, and `wait` methods are used to manage the WaitGroup counter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/coroutine.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$wg = new \\Hyperf\\Coroutine\\WaitGroup();\n// 計數器加二\n$wg->add(2);\n// 建立協程 A\nco(function () use ($wg) {\n    // some code\n    // 計數器減一\n    $wg->done();\n});\n// 建立協程 B\nco(function () use ($wg) {\n    // some code\n    // 計數器減一\n    $wg->done();\n});\n// 等待協程 A 和協程 B 執行完成\n$wg->wait();\n```\n\n----------------------------------------\n\nTITLE: Executing Command from Non-Command (PHP)\nDESCRIPTION: Executes a command from outside a command class. Uses `ArrayInput` to simulate command-line input, `NullOutput` to suppress output, and retrieves the `ApplicationInterface` from the container to run the command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$command = 'foo';\n\n$params = [\"command\" => $command, \"--foo\" => \"foo\", \"--bar\" => \"bar\"];\n\n// 可以根據自己的需求, 選擇使用的 input/output\n$input = new ArrayInput($params);\n$output = new NullOutput();\n\n/** @var \\Psr\\Container\\ContainerInterface $container */\n$container = \\Hyperf\\Context\\ApplicationContext::getContainer();\n\n/** @var \\Symfony\\Component\\Console\\Application $application */\n$application = $container->get(\\Hyperf\\Contract\\ApplicationInterface::class);\n$application->setAutoExit(false);\n\n// 這種方式: 不會暴露出命令執行中的異常, 不會阻止程式返回\n$exitCode = $application->run($input, $output);\n\n// 第二種方式: 會暴露異常, 需要自己捕捉和處理執行中的異常, 否則會阻止程式的返回\n$exitCode = $application->find($command)->run($input, $output);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Listener in Hyperf Nano\nDESCRIPTION: This example demonstrates how to implement an event listener in a Hyperf Nano application. It listens for the BootApplication event and logs a message to the console.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nano.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addListener(BootApplication::class, function($event){\n    $this->get(StdoutLoggerInterface::class)->info('App started');\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Install Smarty Engine\nDESCRIPTION: Installs the Smarty templating engine via Composer for use with Hyperf's view component. This allows you to use Smarty templates in your Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require smarty/smarty\n```\n\n----------------------------------------\n\nTITLE: AMQP Consumer `consumeMessage` Return Type (PHP)\nDESCRIPTION: Demonstrates the change in the return type of the `consumeMessage` method in AMQP consumers from `string` to `Result` enum in Hyperf v3.1. It shows the updated method signature and the expected return value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/3.1.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// v3.1之前\npublic function consumeMessage($data, AMQPMessage $message): string\n{\n    return Result::ACK;\n}\n// v3.1之後\npublic function consumeMessage($data, AMQPMessage $message): Result\n{\n    return Result::ACK;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure Prometheus Custom Mode\nDESCRIPTION: This PHP snippet configures Prometheus to use the custom mode.  In this mode, the component is only responsible for the collection of indicators, and the specific reporting needs to be handled by the user.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n'mode' => Constants::CUSTOM_MODE\n```\n\n----------------------------------------\n\nTITLE: Stdout Logger Dependency\nDESCRIPTION: This code shows how to declare a dependency to replace the default `StdoutLoggerInterface` implementation with a custom one that uses the `StdoutLoggerFactory`. This will redirect all standard output to a monolog channel.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/logger.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\Contract\\StdoutLoggerInterface::class => \\App\\StdoutLoggerFactory::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Registering SocketIOFactory in dependencies.php (PHP)\nDESCRIPTION: This snippet shows how to register the SocketIOFactory in the `dependencies.php` file, making the custom SocketIO configuration available throughout the Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/socketio-server.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\SocketIOServer\\SocketIO::class => App\\Kernel\\SocketIOFactory::class,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection Parameters in PHP\nDESCRIPTION: This PHP code snippet shows the configuration array for connecting to a Redis server within the Hyperf framework. It defines parameters such as host, authentication, port, database, cluster settings, connection pool options, and Redis client options, utilizing environment variables for dynamic configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/redis.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', ''),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'cluster' => [\n            'enable' => (bool) env('REDIS_CLUSTER_ENABLE', false),\n            'name' => null,\n            'seeds' => [],\n        ],\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n        'options' => [ // Redis 客户端 Options, 參照 https://github.com/phpredis/phpredis#setoption\n            \\Redis::OPT_PREFIX => env('REDIS_PREFIX', ''),\n            // or 'prefix' => env('REDIS_PREFIX', ''), v3.0.38 或更高版本\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Setting Calculation Precision in PHP\nDESCRIPTION: This snippet shows how to set the calculation precision for RPN expressions. The third parameter of the `calculate` method specifies the number of decimal places in the result. In this case, the precision is set to 2.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/rpn.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->calculate('5 1 2 + 4 * + 3 -', [], 2); // '14.00'\n```\n\n----------------------------------------\n\nTITLE: Install hyperf/signal - Shell\nDESCRIPTION: Installs the `hyperf/signal` component via Composer to resolve \"Interface 'Hyperf\\Signal\\SignalHandlerInterface' not found\" error in PHP 7.3\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.2.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/signal\n```\n\n----------------------------------------\n\nTITLE: Implementing a TCP Client with Swoole\nDESCRIPTION: This code snippet shows a simple TCP client implementation using Swoole. It creates a new Swoole client, connects to the specified host and port, sends data, and receives the response.  The client connects to '127.0.0.1' on port 9504 and sends 'Hello World.' then receives and stores the server response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tcp-server.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$client = new \\Swoole\\Client(SWOOLE_SOCK_TCP);\n$client->connect('127.0.0.1', 9504);\n$client->send('Hello World.');\n$ret = $client->recv(); // recv:Hello World.\n\n```\n\n----------------------------------------\n\nTITLE: Publish Validation Component Files\nDESCRIPTION: This command publishes the language files for the `hyperf/validation` component. These language files contain the default validation messages in different languages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/validation\n```\n\n----------------------------------------\n\nTITLE: Configure Worker Stop Handler\nDESCRIPTION: This PHP code configures the WorkerStopHandler to be triggered when a signal is received, allowing the process to exit gracefully after a set max_wait_time. This configuration is suitable for asynchronous style services.  The handler is given the lowest priority.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/signal.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'handlers' => [\n        Hyperf\\Signal\\Handler\\WorkerStopHandler::class => PHP_INT_MIN\n    ],\n    'timeout' => 5.0,\n];\n```\n\n----------------------------------------\n\nTITLE: Executing Migrations (bash)\nDESCRIPTION: This command runs all pending migration files. The `--force` option bypasses confirmation prompts, which is useful for automated deployments. This is generally not recommended on production environments.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring phpunit.xml for Code Coverage\nDESCRIPTION: This XML snippet configures PHPUnit for code coverage analysis. It specifies the test suites, directories to include for coverage, directories to exclude, and the output directory for the HTML report.  It also defines the thresholds for low and high coverage and sets up junit logging.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/testing.md#_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         bootstrap=\"./test/bootstrap.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n    <php>\n        <!-- other PHP.ini or environment variables -->\n        <ini name=\"memory_limit\" value=\"-1\" />\n    </php>\n    <testsuites>\n        <testsuite name=\"Tests\">\n            // 需要執行單測的測試案例目錄\n            <directory suffix=\"Test.php\">./test</directory>\n        </testsuite>\n    </testsuites>\n    <coverage includeUncoveredFiles=\"true\"\n              processUncoveredFiles=\"true\"\n              pathCoverage=\"false\"\n              ignoreDeprecatedCodeUnits=\"true\"\n              disableCodeCoverageIgnore=\"false\">\n        <include>\n            // 需要統計單元測試覆蓋率的文件\n            <directory suffix=\".php\">./app</directory>\n        </include>\n        <exclude>\n            // 生產單元測試覆蓋率時，需要忽略的文件\n            <directory suffix=\".php\">./app/excludeFile</directory>\n        </exclude>\n        <report>\n            <html outputDirectory=\"test/cover/\" lowUpperBound=\"50\" highLowerBound=\"90\"/>\n        </report>\n    </coverage>\n    <logging>\n        <junit outputFile=\"test/junit.xml\"/>\n    </logging>\n\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: 1.1 Dependencies Configuration - PHP\nDESCRIPTION: Shows the file structure of `config/autoload/dependencies.php` in Hyperf 1.1.  It returns an array mapping interfaces to concrete classes directly.  The file is moved to the `config/autoload` directory, and the outer `dependencies` array is removed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/1.1.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// config/autoload/dependencies.php 文件\n\nreturn [\n    FooInterface::class => Foo::class\n];\n```\n\n----------------------------------------\n\nTITLE: Adding User to Docker Group\nDESCRIPTION: This command adds the current user to the Docker group, allowing the user to run Docker commands without `sudo`. This requires logging out and back in for the group membership to take effect.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\nusermod -aG docker $USER\n```\n\n----------------------------------------\n\nTITLE: View Publish Command - PHP\nDESCRIPTION: Command to automatically install view-engine, translation, and validation component related configurations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nphp bin/hyperf.php view:publish\n```\n\n----------------------------------------\n\nTITLE: SSH Login - Shell\nDESCRIPTION: This command establishes an SSH connection to the specified host on port 2222. This confirms the successful port modification.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/docker-swarm.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nssh -p 2222 root@host\n```\n\n----------------------------------------\n\nTITLE: Null Room Adapter Configuration\nDESCRIPTION: Configures the Socket.io server to use the null room adapter. This disables the room functionality, which can reduce resource consumption. Requires `Hyperf\\SocketIOServer\\Room\\NullAdapter`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/socketio-server.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\SocketIOServer\\Room\\AdapterInterface::class => \\Hyperf\\SocketIOServer\\Room\\NullAdapter::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Complete Command Execution\nDESCRIPTION: This snippet shows how to properly complete command execution when using AMQP or other multiplexing technologies. Adding this code ensures that the command closes correctly by resuming the worker exit coordinator. It is crucial when a command involves coroutines.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/questions.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Coordinator\\CoordinatorManager;\nuse Hyperf\\Coordinator\\Constants;\n\nCoordinatorManager::until(Constants::WORKER_EXIT)->resume();\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Validation Language Files\nDESCRIPTION: Illustrates where the validator language files `validation.php` are placed after publishing. Includes `en` (English) and `zh_CN` (Simplified Chinese) examples.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n/storage\n    /languages\n        /en\n            validation.php\n        /zh_CN\n            validation.php\n```\n\n----------------------------------------\n\nTITLE: Installing Box on macOS\nDESCRIPTION: These commands download the Box binary for macOS, move it to the /usr/local/bin directory, and set execute permissions.  It ensures Box is accessible from the command line by placing it in a $PATH directory. Requires wget and sudo.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/eco/box.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/hyperf/box/releases/download/v0.5.5/box_x86_64_macos -O box\nsudo mv ./box /usr/local/bin/box\nsudo chmod 755 /usr/local/bin/box\n// 确保 /usr/local/bin/box 在你的 $PATH 环境中，或者将 `box` 放到你想要的任意 $PATH 路径中\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-Specific Logger Formats\nDESCRIPTION: This code configures different logger formats based on the `APP_ENV` environment variable. In the development environment, it uses a `LineFormatter` with detailed output. In non-development environments, it uses a `JsonFormatter` for structured logging, suitable for centralized logging services. The `handler` is configured to output to `php://stdout`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/logger.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/logger.php\n$appEnv = env('APP_ENV', 'dev');\nif ($appEnv == 'dev') {\n    $formatter = [\n        'class' => \\Monolog\\Formatter\\LineFormatter::class,\n        'constructor' => [\n            'format' => \"||%datetime%||%channel%||%level_name%||%message%||%context%||%extra%\\n\",\n            'allowInlineLineBreaks' => true,\n            'includeStacktraces' => true,\n        ],\n    ];\n} else {\n    $formatter = [\n        'class' => \\Monolog\\Formatter\\JsonFormatter::class,\n        'constructor' => [],\n    ];\n}\n\nreturn [\n    'default' => [\n        'handler' => [\n            'class' => \\Monolog\\Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => 'php://stdout',\n                'level' => \\Monolog\\Level::Info,\n            ],\n        ],\n        'formatter' => $formatter,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Box on Linux x86_64\nDESCRIPTION: This snippet provides the commands to download, move, and set execute permissions for the Hyperf Box binary on Linux x86_64. It also highlights the need to ensure the binary is accessible in the system's PATH.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/eco/box.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/hyperf/box/releases/download/v0.5.5/box_x86_64_linux -O box\nsudo mv ./box /usr/local/bin/box\nsudo chmod 755 /usr/local/bin/box\n// 確保 /usr/local/bin/box 在你的 $PATH 環境中，或者將 `box` 放到你想要的任意 $PATH 路徑中\n```\n\n----------------------------------------\n\nTITLE: Install Symfony Serializer\nDESCRIPTION: This command installs the symfony/serializer package, which is needed to resolve `Interface 'Symfony\\Component\\Serializer\\SerializerInterface' not found` errors when using PHP 7.3.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.2.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/serializer\n```\n\n----------------------------------------\n\nTITLE: Configure Docker Registry Mirror JSON\nDESCRIPTION: This JSON configures Docker to use a registry mirror, improving download speeds for Docker images. Replace the URL with your actual mirror address. Restart Docker after modifying this file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\"registry-mirrors\": [\"https://xxxxx.mirror.aliyuncs.com\"]}\n```\n\n----------------------------------------\n\nTITLE: Using ConstantFrequency Component in Hyperf\nDESCRIPTION: This configuration shows how to use the `ConstantFrequency` component in Hyperf by mapping the `Hyperf\\DbConnection\\Frequency` to `Hyperf\\Pool\\ConstantFrequency` in the `dependencies` configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/pool.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\DbConnection\\Frequency::class => Hyperf\\Pool\\ConstantFrequency::class,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Paginator\nDESCRIPTION: This command installs the hyperf/paginator package using Composer, a dependency manager for PHP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/paginator.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/paginator\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Socket.IO Proxying\nDESCRIPTION: This code provides an Nginx configuration snippet for setting up a reverse proxy for Socket.IO. It configures the `location` directive to handle Socket.IO requests by forwarding them to the Hyperf backend server. It sets necessary headers like `Upgrade` and `Connection` to ensure proper WebSocket communication.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/socketio-server.md#_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    location ^~/socket.io/ {\n        # Execute proxy to access real server\n        proxy_pass http://hyperf;\n        proxy_http_version 1.1;\n        proxy_set_header Host $host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Flushing Cache with Custom Value in DeleteListenerEvent in Hyperf\nDESCRIPTION: This code demonstrates how to flush a specific cache entry identified by a custom value used in the `@Cacheable` annotation by dispatching a `DeleteListenerEvent` in Hyperf. The arguments array passed to the `DeleteListenerEvent` constructor now includes the 'id' key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/cache.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Cache\\Listener\\DeleteListenerEvent;\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\n\nclass SystemService\n{\n    #[Inject]\n    protected EventDispatcherInterface $dispatcher;\n\n    public function flushCache($userId)\n    {\n        $this->dispatcher->dispatch(new DeleteListenerEvent('user-update', ['id' => $userId]));\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Swarm\nDESCRIPTION: This command initializes a Docker Swarm cluster on the current machine. The machine becomes the leader of the swarm. It is crucial to ensure that other machines can connect to this machine on port 2377.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\n$ docker swarm init\n```\n\n----------------------------------------\n\nTITLE: Flushing Failed/Timeout Messages\nDESCRIPTION: This command permanently deletes all failed or timeout messages from a specific channel.  {queue_name} represents the queue config and {channel_name} the channel to flush.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_14\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php queue:flush {queue_name} -Q {channel_name}\n```\n\n----------------------------------------\n\nTITLE: Publish Translation Configuration\nDESCRIPTION: Publishes the configuration files for the hyperf/translation component using the vendor:publish command. Required if Translation component configuration hasn't been previously added.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/translation\n```\n\n----------------------------------------\n\nTITLE: Installing Memory Adapter (Flysystem v2.0)\nDESCRIPTION: Install the Memory adapter for Flysystem v2.0. This adapter is useful for testing and development as it stores files in memory. Requires league/flysystem-memory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/filesystem.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"league/flysystem-memory:^2.0\"\n```\n\n----------------------------------------\n\nTITLE: Register Crontab Dispatcher Process\nDESCRIPTION: This configuration registers the `Hyperf\\Crontab\\Process\\CrontabDispatcherProcess` as a custom process in the `config/autoload/processes.php` file. This process is responsible for parsing and dispatching scheduled tasks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/crontab.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/processes.php\nreturn [\n    Hyperf\\Crontab\\Process\\CrontabDispatcherProcess::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Install Memory Adapter (Flysystem v2.0)\nDESCRIPTION: This command installs the in-memory adapter for Flysystem v2.0, allowing the application to use in-memory storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/filesystem.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"league/flysystem-memory:^2.0\"\n```\n\n----------------------------------------\n\nTITLE: MongoDB Task Usage (Hyperf)\nDESCRIPTION: This snippet demonstrates how to use the `MongoTask` class to insert and query data in MongoDB.  It retrieves an instance of `MongoTask` from the container and calls the `insert` and `query` methods. The `insert` method inserts a document into the `hyperf.test` collection and the `query` method retrieves documents from the same collection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/task.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Task\\MongoTask;\nuse Hyperf\\Context\\ApplicationContext;\n\n$client = ApplicationContext::getContainer()->get(MongoTask::class);\n$client->insert('hyperf.test', ['id' => rand(0, 99999999)]);\n\n$result = $client->query('hyperf.test', [], [\n    'sort' => ['id' => -1],\n    'limit' => 5,\n]);\n```\n\n----------------------------------------\n\nTITLE: Install Tencent COS Adapter (Flysystem v3.0)\nDESCRIPTION: This command installs the Tencent COS adapter for Flysystem v5.0 using Composer. This adapter allows you to interact with Tencent Cloud Object Storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/filesystem.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-cos:^5.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Websocket Proxy with Nginx for Hyperf\nDESCRIPTION: This Nginx configuration sets up a reverse proxy for Hyperf WebSocket servers. It defines an upstream block with multiple Hyperf WebSocket server addresses using IP hash load balancing, configures the server block to handle WebSocket upgrades, forward headers, and set timeouts.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/nginx.md#_snippet_1\n\nLANGUAGE: Nginx\nCODE:\n```\n# 至少需要一個 Hyperf 節點，多個配置多行\nupstream hyperf_websocket {\n    # 設定負載均衡模式為 IP Hash 演算法模式，這樣不同的客戶端每次請求都會與同一節點進行互動\n    ip_hash;\n    # Hyperf WebSocket Server 的 IP 及 埠\n    server 127.0.0.1:9503;\n    server 127.0.0.1:9504;\n}\n\nserver {\n    listen 80;\n    server_name websocket.hyperf.io;\n    \n    location / {\n        # WebSocket Header\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade websocket;\n        proxy_set_header Connection \"Upgrade\";\n        \n        # 將客戶端的 Host 和 IP 資訊一併轉發到對應節點  \n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n    \n        # 客戶端與服務端無互動 60s 後自動斷開連線，請根據實際業務場景設定\n        proxy_read_timeout 60s ;\n        \n        # 執行代理訪問真實伺服器\n        proxy_pass http://hyperf_websocket;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting records with insert in Hyperf\nDESCRIPTION: This code demonstrates how to insert a new record into a database table using the `insert` method in Hyperf's query builder. The example inserts a new user with the specified email and votes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Scout and Elasticsearch Driver\nDESCRIPTION: Installs the hyperf/scout package for full-text search and the hyperf/elasticsearch driver for using Elasticsearch with Hyperf Scout.  These packages are required to integrate Elasticsearch-based search functionality into your Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/scout\ncomposer require hyperf/elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Generated Model After Overriding Visitor (Hyperf)\nDESCRIPTION: This is an example of a generated model after overriding the `ModelUpdateVisitor`.  Note that the `float_num` property now has a 'decimal:2' cast. This ensures correct handling of decimal values in the model.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/gen.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare (strict_types=1);\n\nnamespace App\\Model;\n\n/**\n * @property int $id \n * @property int $count \n * @property string $float_num \n * @property string $str \n * @property string $json \n * @property \\Carbon\\Carbon $created_at \n * @property \\Carbon\\Carbon $updated_at \n */\nclass UserExt extends Model\n{\n    /**\n     * The table associated with the model.\n     */\n    protected ?string $table = 'user_ext';\n    /**\n     * The attributes that are mass assignable.\n     */\n    protected array $fillable = ['id', 'count', 'float_num', 'str', 'json', 'created_at', 'updated_at'];\n    /**\n     * The attributes that should be cast to native types.\n     */\n    protected array $casts = ['id' => 'integer', 'count' => 'integer', 'float_num' => 'decimal:2', 'created_at' => 'datetime', 'updated_at' => 'datetime'];\n}\n```\n\n----------------------------------------\n\nTITLE: Use the Custom Client to Call a Method\nDESCRIPTION: This code demonstrates how to use the custom `CalculatorService` client to call the `add` method. It creates an instance of the client and then calls the method with the desired arguments.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/jet.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// 调用远程方法 `add` 并带上参数 `1` 和 `2`\n// $result 即为远程方法的返回值\n$client = new CalculatorService();\n$result = $client->add(1, 2);\n```\n\n----------------------------------------\n\nTITLE: DemoApi Class\nDESCRIPTION: This snippet defines a simple `DemoApi` class with a `test` method that returns an array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/testing.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Api;\n\nclass DemoApi\n{\n    public function test()\n    {\n        return [\n            'status' => 1\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Low-Frequency Component - PHP\nDESCRIPTION: This snippet shows how to register the custom low-frequency component in the `dependencies` configuration, replacing the default `Hyperf\\DbConnection\\Frequency` with the custom `App\\Pool\\Frequency`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/pool.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\DbConnection\\Frequency::class => App\\Pool\\Frequency::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Registry Mirror\nDESCRIPTION: Configures Docker to use a registry mirror for faster image downloads.  This involves modifying `/etc/docker/daemon.json` to include the URL of the mirror. Replace `https://xxxxx.mirror.aliyuncs.com` with the actual mirror address.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"registry-mirrors\": [\"https://xxxxx.mirror.aliyuncs.com\"]}\n```\n\n----------------------------------------\n\nTITLE: Download RabbitMQ Delayed Message Exchange Plugin (Bash)\nDESCRIPTION: Downloads the RabbitMQ delayed message exchange plugin. The plugin provides delayed message functionality to RabbitMQ. Requires wget and assumes a specific version of the plugin (3.9.0).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/3.9.0/rabbitmq_delayed_message_exchange-3.9.0.ez\ncp rabbitmq_delayed_message_exchange-3.9.0.ez /opt/rabbitmq/plugins/\nrabbitmq-plugins enable rabbitmq_delayed_message_exchange\n```\n\n----------------------------------------\n\nTITLE: Define SWOOLE_HOOK_FLAGS constant PHP\nDESCRIPTION: This snippet defines the SWOOLE_HOOK_FLAGS constant in the application's entry point (bin/hyperf.php) and the unit test bootstrap file (test/bootstrap.php). This constant is used to specify which Swoole hooks should be enabled.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/1.1.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n! defined('SWOOLE_HOOK_FLAGS') && define('SWOOLE_HOOK_FLAGS', SWOOLE_HOOK_ALL);\n```\n\n----------------------------------------\n\nTITLE: Import Existing Data (Bash)\nDESCRIPTION: Imports existing data from a model into the search index.  This command is useful when adding Scout to an existing project.  It will iterate through all records of the specified model and index them in Elasticsearch.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php scout:import \"App\\Post\"\n```\n\n----------------------------------------\n\nTITLE: Install hyperf/reactive-x with Composer\nDESCRIPTION: Installs the hyperf/reactive-x component using Composer, a dependency manager for PHP. This command adds the ReactiveX integration library to your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/reactive-x.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/reactive-x\n```\n\n----------------------------------------\n\nTITLE: Specify Results Per Page (PHP)\nDESCRIPTION: Specifies the number of models to retrieve per page when using pagination. The first argument passed to the `paginate` method sets the results per page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->paginate(15);\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Jet\nDESCRIPTION: Installs the Hyperf Jet package using composer. This command adds the hyperf/jet package to your project's dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/jet.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/jet\n```\n\n----------------------------------------\n\nTITLE: Install Tencent COS Adapter (Flysystem v1.0)\nDESCRIPTION: This command installs the Tencent COS adapter for Flysystem v3.0 using Composer. This adapter allows you to interact with Tencent Cloud Object Storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/filesystem.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-cos:^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Parallel Example with parallel() function\nDESCRIPTION: This example demonstrates using the `parallel()` function, a shorthand method for executing tasks concurrently. It showcases how to easily run multiple closures in separate coroutines and retrieve their results as an array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/coroutine.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Coroutine\\Coroutine;\n\n// 傳遞的陣列引數您也可以帶上 key 便於區分子協程，返回的結果也會根據 key 返回對應的結果\n$result = parallel([\n    function () {\n        sleep(1);\n        return Coroutine::id();\n    },\n    function () {\n        sleep(1);\n        return Coroutine::id();\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Enable JsonRPC Tracing via Aspect in Hyperf\nDESCRIPTION: This PHP code shows how to enable tracing for JsonRPC calls in Hyperf by adding the `Hyperf\\Tracer\\Aspect\\JsonRpcAspect` class to the aspects.php configuration file.  Don't forget to add the corresponding TraceMiddleware on the other end.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tracer.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    Hyperf\\Tracer\\Aspect\\JsonRpcAspect::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Run Hyperf Docker Container\nDESCRIPTION: This command starts a Docker container for Hyperf development, mapping the local `/workspace/skeleton` directory to `/data/project` inside the container, exposing port 9501, and setting up necessary privileges for development. The container uses a specific Hyperf image version based on Alpine Linux and Swoole.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/install.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run --name hyperf \\\n-v /workspace/skeleton:/data/project \\\n-p 9501:9501 -it \\\n--privileged -u root \\\n--entrypoint /bin/sh \\\nhyperf/hyperf:8.1-alpine-v3.18-swoole\n```\n\n----------------------------------------\n\nTITLE: Define JSON RPC TCP Server with Length Check\nDESCRIPTION: Defines a JSON RPC TCP server with length check in the server.php configuration file. This server uses \\Hyperf\\JsonRpc\\TcpServer::class and configures settings for length-based packet handling.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/json-rpc.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 這裏省略了該文件的其它配置\n    'servers' => [\n        [\n            'name' => 'jsonrpc',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9503,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_RECEIVE => [\\Hyperf\\JsonRpc\\TcpServer::class, 'onReceive'],\n            ],\n            'settings' => [\n                'open_length_check' => true,\n                'package_length_type' => 'N',\n                'package_length_offset' => 0,\n                'package_body_offset' => 4,\n                'package_max_length' => 1024 * 1024 * 2,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using Slots in a Component - HTML\nDESCRIPTION: Demonstrates how to use slots to pass additional content to a component. The `$slot` variable represents the default slot, while named slots are defined using the `<x-slot>` tag.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_38\n\nLANGUAGE: html\nCODE:\n```\n    <!-- /storage/view/components/alert.blade.php -->\n\n    <div class=\"alert alert-danger\">\n        {{ $slot }}\n    </div>\n```\n\nLANGUAGE: html\nCODE:\n```\n    <x-alert>\n        <strong>Whoops!</strong> Something went wrong!\n    </x-alert>\n```\n\nLANGUAGE: html\nCODE:\n```\n    <!-- /storage/view/components/alert.blade.php -->\n\n    <span class=\"alert-title\">{{ $title }}</span>\n\n    <div class=\"alert alert-danger\">\n        {{ $slot }}\n    </div>\n```\n\nLANGUAGE: html\nCODE:\n```\n    <x-alert>\n        <x-slot name=\"title\">\n            Server Error\n        </x-slot>\n\n        <strong>Whoops!</strong> Something went wrong!\n    </x-alert>\n```\n\n----------------------------------------\n\nTITLE: Using LocalSidProvider for SocketID\nDESCRIPTION: This PHP snippet demonstrates configuring the LocalSidProvider to use Fd directly as SocketID.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/socketio-server.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\SocketIOServer\\SidProvider\\SidProviderInterface::class => \\Hyperf\\SocketIOServer\\SidProvider\\LocalSidProvider::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Meta Generator\nDESCRIPTION: This code demonstrates how to create a custom meta generator that uses the UserId to generate a Snowflake ID. It implements a custom class UserDefinedIdGenerator and uses the modulo operator to fit the UserId into the WorkerId.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/snowflake.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Snowflake\\IdGenerator\\SnowflakeIdGenerator;\n\nclass UserDefinedIdGenerator\n{\n    protected SnowflakeIdGenerator $idGenerator;\n\n    public function __construct(SnowflakeIdGenerator $idGenerator)\n    {\n        $this->idGenerator = $idGenerator;\n    }\n\n    public function generate(int $userId)\n    {\n        $meta = $this->idGenerator->getMetaGenerator()->generate();\n\n        return $this->idGenerator->generate($meta->setWorkerId($userId % 31));\n    }\n\n    public function degenerate(int $id)\n    {\n        return $this->idGenerator->degenerate($id);\n    }\n}\n\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n$generator = $container->get(UserDefinedIdGenerator::class);\n$userId = 20190620;\n\n$id = $generator->generate($userId);\n\n```\n\n----------------------------------------\n\nTITLE: Install Blade Engine for Hyperf View\nDESCRIPTION: Installs the hyperf/view-engine package using composer, which provides Blade templating support for the hyperf/view component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/view-engine\n```\n\n----------------------------------------\n\nTITLE: Default Server Settings Configuration in Hyperf\nDESCRIPTION: Defines the default server settings for a Hyperf application, including enabling coroutines, setting the number of worker processes, and enabling TCP nodelay. This configuration is typically found in `config/autoload/server.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 这里省略了该文件的其它配置\n    'settings' => [\n        'enable_coroutine' => true, // 开启内置协程\n        'worker_num' => swoole_cpu_num(), // 设置启动的 Worker 进程数\n        'pid_file' => BASE_PATH . '/runtime/hyperf.pid', // master 进程的 PID\n        'open_tcp_nodelay' => true, // TCP 连接发送数据时会关闭 Nagle 合并算法，立即发往客户端连接\n        'max_coroutine' => 100000, // 设置当前工作进程最大协程数量\n        'open_http2_protocol' => true, // 启用 HTTP2 协议解析\n        'max_request' => 100000, // 设置 worker 进程的最大任务数\n        'socket_buffer_size' => 2 * 1024 * 1024, // 配置客户端连接的缓存区长度\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a Task with Closure in Hyperf DAG\nDESCRIPTION: This PHP code shows how to define a task using a closure function with `Vertex::make`. The first argument is the closure defining the task's logic, and the second optional argument is a key that will be used to index the result of the task in the final result array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/dag.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Vertex::make 的第二個參數為可選參數，作為 vertex 的 key，也就是結果數組的鍵值。\n\\Hyperf\\Dag\\Vertex::make(function() { return 'hello'; }, \"greeting\");\n```\n\n----------------------------------------\n\nTITLE: Once Directive (Blade)\nDESCRIPTION: This Blade template demonstrates the `@once` directive, which ensures that a section of code is only executed once per rendering cycle. This is useful for pushing JavaScript code to the header when rendering a component within a loop.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_22\n\nLANGUAGE: blade\nCODE:\n```\n@once\n    @push('scripts')\n        <script>\n            // 您自定義的 JavaScript 代碼\n        </script>\n    @endpush\n@endonce\n```\n\n----------------------------------------\n\nTITLE: Decimal Validation with Precision\nDESCRIPTION: The `decimal:min,max` rule validates that the field under validation is a numeric value and contains the specified number of decimal places. This snippet shows how to enforce a specific number of decimal places, or a range.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\n// 必须正好有两位小数（例如 9.99）...\n'price' => 'decimal:2'\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// 必须有 2 到 4 位小数...\n'price' => 'decimal:2,4'\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf View Component\nDESCRIPTION: Installs the hyperf/view component using composer. This component provides view rendering capabilities within the Hyperf framework.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/view\n```\n\n----------------------------------------\n\nTITLE: Eager Loading with EagerLoader Class\nDESCRIPTION: Demonstrates the use of the `EagerLoader` class to load related model data from the cache. This provides an alternative to the EagerLoadListener for eager loading models from the cache.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model-cache.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\ModelCache\\EagerLoad\\EagerLoader;\nuse Hyperf\\Context\\ApplicationContext;\n\n$books = Book::findManyFromCache([1,2,3]);\n$loader = ApplicationContext::getContainer()->get(EagerLoader::class);\n$loader->load($books, ['user']);\n\nforeach ($books as $book){\n    var_dump($book->user);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Redis Timeout Option\nDESCRIPTION: This PHP configuration sets the `read_timeout` Redis option to -1, effectively disabling the read timeout for Redis operations. This can be useful for long-running operations that might otherwise be interrupted by a timeout.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/redis.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', null),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n        'options' => [\n            \\Redis::OPT_READ_TIMEOUT => -1,\n            // 或者 'read_timeout' => -1, v3.1.3 或更高版本\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configure HTTP Proxy with Nginx for Hyperf\nDESCRIPTION: This Nginx configuration sets up an HTTP reverse proxy for a Hyperf application. It defines an upstream block with multiple Hyperf server nodes for load balancing and forwards client headers such as Host, X-Real-IP, and X-Forwarded-For to the backend servers.  It also sets the SameSite attribute for cookies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/nginx.md#_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\n# 至少需要一个 Hyperf 节点，多个配置多行\nupstream hyperf {\n    # Hyperf HTTP Server 的 IP 及 端口\n    server 127.0.0.1:9501;\n    server 127.0.0.1:9502;\n}\n\nserver {\n    # 监听端口\n    listen 80; \n    # 绑定的域名，填写您的域名\n    server_name proxy.hyperf.io;\n\n    location / {\n        # 将客户端的 Host 和 IP 信息一并转发到对应节点  \n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        \n        # 转发Cookie，设置 SameSite\n        proxy_cookie_path / \"/; secure; HttpOnly; SameSite=strict\";\n        \n        # 执行代理访问真实服务器\n        proxy_pass http://hyperf;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modify SwooleEvent to Event - server.php\nDESCRIPTION: Modifies the `server.php` configuration file to use `Hyperf\\Server\\Event` instead of the deprecated `Hyperf\\Server\\SwooleEvent`. This ensures compatibility with Hyperf 2.1 and later versions.  The configuration should be updated where the `Event::ON_*` constants are being used.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.1.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\nuse Hyperf\\Server\\Server;\n\nreturn [\n    'mode' => SWOOLE_BASE,\n    'servers' => [\n        [\n            'name' => 'http',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9501,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [Hyperf\\HttpServer\\Server::class, 'onRequest'],\n            ],\n        ],\n    ],\n    'callbacks' => [\n        Event::ON_BEFORE_START => [Hyperf\\Framework\\Bootstrap\\ServerStartCallback::class, 'beforeStart'],\n        Event::ON_WORKER_START => [Hyperf\\Framework\\Bootstrap\\WorkerStartCallback::class, 'onWorkerStart'],\n        Event::ON_PIPE_MESSAGE => [Hyperf\\Framework\\Bootstrap\\PipeMessageCallback::class, 'onPipeMessage'],\n        Event::ON_WORKER_EXIT => [Hyperf\\Framework\\Bootstrap\\WorkerExitCallback::class, 'onWorkerExit'],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos gRPC Enable\nDESCRIPTION: This PHP code snippet configures the Nacos driver to enable gRPC bidirectional streaming, allowing for real-time configuration updates.  It modifies the 'config_center.drivers.nacos.client.grpc.enable' setting to `true`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config-center.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\ConfigApollo\\PullMode;\nuse Hyperf\\ConfigCenter\\Mode;\n\nreturn [\n    'enable' => (bool) env('CONFIG_CENTER_ENABLE', true),\n    'driver' => env('CONFIG_CENTER_DRIVER', 'nacos'),\n    'mode' => env('CONFIG_CENTER_MODE', Mode::PROCESS),\n    'drivers' => [\n        'nacos' => [\n            'driver' => Hyperf\\ConfigNacos\\NacosDriver::class,\n            'merge_mode' => Hyperf\\ConfigNacos\\Constants::CONFIG_MERGE_OVERWRITE,\n            'interval' => 3,\n            'default_key' => 'nacos_config',\n            'listener_config' => [\n                'nacos_config' => [\n                    'tenant' => 'tenant', // corresponding with service.namespaceId\n                    'data_id' => 'hyperf-service-config',\n                    'group' => 'DEFAULT_GROUP',\n                ],\n            ],\n            'client' => [\n                // nacos server url like https://nacos.hyperf.io, Priority is higher than host:port\n                // 'uri' => '',\n                'host' => '127.0.0.1',\n                'port' => 8848,\n                'username' => null,\n                'password' => null,\n                'guzzle' => [\n                    'config' => null,\n                ],\n                // Only support for nacos v2.\n                'grpc' => [\n                    'enable' => true,\n                    'heartbeat' => 10,\n                ],\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Handle HTTP Route with ReactiveX\nDESCRIPTION: This code demonstrates how to handle HTTP requests using ReactiveX.  It intercepts a POST/PUT request to /save, buffers the request bodies in memory until 10 requests are accumulated, and then processes the batch of bodies. This requires execution before the Server starts, e.g., in the BootApplication event listener.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/reactive-x.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\ReactiveX\\Example;\n\nuse Hyperf\\Database\\Events\\QueryExecuted;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\nuse Hyperf\\ReactiveX\\Observable;\nuse Psr\\Http\\Message\\RequestInterface;\n\nclass BatchSaveRoute implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            BootApplication::class,\n        ];\n    }\n\n    /**\n     * @param QueryExecuted $event\n     */\n    public function process(object $event)\n    {\n        Observable::fromHttpRoute(['POST', 'PUT'], '/save')\n            ->map(\n                function (RequestInterface $request) {\n                    return $request->getBody();\n                }\n            )\n            ->bufferWithCount(10)\n            ->subscribe(\n                function (array $bodies) {\n                    echo count($bodies); //10\n                }\n            );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command for Hyperf Development\nDESCRIPTION: This command starts a Docker container for Hyperf development. It mounts a local directory to the container, sets the working directory, maps the port, and configures the container with necessary privileges. This allows running Hyperf in a consistent environment, especially when the host system does not meet Hyperf's requirements.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/install.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name hyperf \\\n-v /workspace/skeleton:/data/project \\\n-w /data/project \\\n-p 9501:9501 -it \\\n--privileged -u root \\\n--entrypoint /bin/sh \\\nhyperf/hyperf:8.1-alpine-v3.18-swoole\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Model Cache via Composer\nDESCRIPTION: This command installs the hyperf/model-cache package using Composer, which is required for using model caching in Hyperf applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model-cache.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/model-cache\n```\n\n----------------------------------------\n\nTITLE: Flushing Cache with DeleteListenerEvent and custom value\nDESCRIPTION: This code demonstrates how to use the DeleteListenerEvent with a custom cache value to flush the cache associated with a specific listener. It injects the EventDispatcherInterface and dispatches the event.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/cache.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Cache\\Listener\\DeleteListenerEvent;\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\n\nclass SystemService\n{\n    #[Inject]\n    protected EventDispatcherInterface $dispatcher;\n\n    public function flushCache($userId)\n    {\n        $this->dispatcher->dispatch(new DeleteListenerEvent('user-update', ['id' => $userId]));\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fswatch from Source\nDESCRIPTION: These commands download, extract, configure, compile, and install fswatch from source. This is useful for systems where pre-built packages are not available. Fswatch is required for the FswatchDriver.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/watcher.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/emcrisostomo/fswatch/releases/download/1.14.0/fswatch-1.14.0.tar.gz \\\n&& tar -xf fswatch-1.14.0.tar.gz \\\n&& cd fswatch-1.14.0/ \\\n&& ./configure \\\n&& make \\\n&& make install\n```\n\n----------------------------------------\n\nTITLE: Accessing Original Request Object in Hyperf Socket.IO Event Callback (PHP)\nDESCRIPTION: This snippet demonstrates how to access the original HTTP request object within a Socket.IO event callback in Hyperf. By using `Hyperf\\WebSocketServer\\Context::get`, you can retrieve the ServerRequestInterface, which contains information like client IP and cookies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/socketio-server.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function onEvent($socket, $data)\n{\n    $request = Hyperf\\WebSocketServer\\Context::get(\n        Psr\\Http\\Message\\ServerRequestInterface::class\n    );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Define Default Attribute Values (Hyperf)\nDESCRIPTION: Shows how to define default values for model attributes in Hyperf using the `$attributes` property. This allows setting default values for model properties before the model is persisted to the database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected array $attributes = [\n        'delayed' => false,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Inject Annotation PHP\nDESCRIPTION: Lazy inject using #[Inject(lazy: true)] annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Di\\Annotation\\Inject;\nuse App\\Service\\UserServiceInterface;\n\nclass Foo\n{\n    /**\n     * @var UserServiceInterface\n     */\n    #[Inject(lazy: true)]\n    public $service;\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Auto-Start for Consumer (PHP)\nDESCRIPTION: Demonstrates how to disable the automatic creation of consumer sub-processes during development. This can be achieved either by setting `enable=false` in the `#[Consumer]` annotation or by overriding the `isEnable()` method to return `false`. Requires the PhpAmqpLib library.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/amqp.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Amqp\\Consumers;\n\nuse Hyperf\\Amqp\\Annotation\\Consumer;\nuse Hyperf\\Amqp\\Message\\ConsumerMessage;\nuse Hyperf\\Amqp\\Result;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n#[Consumer(exchange: \"hyperf\", routingKey: \"hyperf\", queue: \"hyperf\", nums: 1, enable: false)]\nclass DemoConsumer extends ConsumerMessage\n{\n    public function consumeMessage($data, AMQPMessage $message): Result\n    {\n        print_r($data);\n        return Result::ACK;\n    }\n\n    public function isEnable(): bool\n    {\n        return parent::isEnable();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Require specific version of promphp/prometheus_client_php\nDESCRIPTION: Command to execute to resolve the conflict between `hyperf/metric` and `Guzzle ^7.0`\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/guzzle.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require \"promphp/prometheus_client_php:2.2.1\"\n```\n\n----------------------------------------\n\nTITLE: Install SQLite Driver - Hyperf\nDESCRIPTION: Installs the SQLite driver for Hyperf using Composer. Requires Swoole >= 5.1.0 and `--enable-swoole-sqlite` compilation flag.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/quick-start.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/database-sqlite\n```\n\n----------------------------------------\n\nTITLE: Dispatching Task Actively\nDESCRIPTION: This code demonstrates how to actively dispatch a task using the `TaskExecutor` class in Hyperf. It creates a `MethodTask` class with a `handle` method to be executed in a separate task worker. The `TaskExecutor` is used to execute the task, and the result is returned. Dependencies include `Hyperf\\Coroutine\\Coroutine`, `Hyperf\\Context\\ApplicationContext`, `Hyperf\\Task\\TaskExecutor`, and `Hyperf\\Task\\Task`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/task.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Coroutine\\Coroutine;\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\Task\\TaskExecutor;\nuse Hyperf\\Task\\Task;\n\nclass MethodTask\n{\n    public function handle($cid)\n    {\n        return [\n            'worker.cid' => $cid,\n            // task_enable_coroutine 為 false 時返回 -1，反之 返回對應的協程 ID\n            'task.cid' => Coroutine::id(),\n        ];\n    }\n}\n\n$container = ApplicationContext::getContainer();\n$exec = $container->get(TaskExecutor::class);\n$result = $exec->execute(new Task([MethodTask::class, 'handle'], [Coroutine::id()]));\n\n```\n\n----------------------------------------\n\nTITLE: Get URL for Specific Page\nDESCRIPTION: Retrieves the URL for a given page number, the next page, or the previous page. This method is crucial for creating clickable pagination links.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/paginator.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// URL of the next page\n$nextPageUrl = $paginator->nextPageUrl();\n// URL of the previous page\n$previousPageUrl = $paginator->previousPageUrl();\n// URL of the $page\n$url = $paginator->url($page);\n```\n\n----------------------------------------\n\nTITLE: Default Swagger UI HTML\nDESCRIPTION: This is the default HTML for the Swagger UI, which can be customized.  The Javascript retrieves the Swagger JSON definition from the URL and renders the interactive API documentation.  The `GetQueryString` function extracts the url parameter from the query string.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/swagger.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta\n      name=\"description\"\n      content=\"SwaggerUI\"\n    />\n    <title>SwaggerUI</title>\n    <link rel=\"stylesheet\" href=\"https://unpkg.hyperf.wiki/swagger-ui-dist@4.5.0/swagger-ui.css\" />\n  </head>\n  <body>\n  <div id=\"swagger-ui\"></div>\n  <script src=\"https://unpkg.hyperf.wiki/swagger-ui-dist@4.5.0/swagger-ui-bundle.js\" crossorigin></script>\n  <script src=\"https://unpkg.hyperf.wiki/swagger-ui-dist@4.5.0/swagger-ui-standalone-preset.js\" crossorigin></script>\n  <script>\n    window.onload = () => {\n      window.ui = SwaggerUIBundle({\n        url: GetQueryString(\"search\"),\n        dom_id: '#swagger-ui',\n        presets: [\n          SwaggerUIBundle.presets.apis,\n          SwaggerUIStandalonePreset\n        ],\n        layout: \"StandaloneLayout\",\n      });\n    };\n    function GetQueryString(name) {\n      var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\", \"i\");\n      var r = window.location.search.substr(1).match(reg); //獲取url中\"?\"符後的字符串並正則匹配\n      var context = \"\";\n      if (r != null)\n        context = decodeURIComponent(r[2]);\n      reg = null;\n      r = null;\n      return context == null || context == \"\" || context == \"undefined\" ? \"/http.json\" : context;\n    }\n  </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Docker Pull Image\nDESCRIPTION: This command pulls a Docker image from a registry before deploying the stack. This ensures that the latest image is available on the node. Replace `registry.cn-shanghai.aliyuncs.com/your_namespace/your_project:latest` with the actual image name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_56\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull registry.cn-shanghai.aliyuncs.com/your_namespace/your_project:latest\n```\n\n----------------------------------------\n\nTITLE: Pausing Indexing During Operations\nDESCRIPTION: This code demonstrates how to temporarily disable automatic indexing by using the `withoutSyncingToSearch` method.  This is useful when performing batch operations that might trigger excessive indexing, improving performance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nApp\\Order::withoutSyncingToSearch(function () {\n    // 执行模型动作...\n});\n```\n\n----------------------------------------\n\nTITLE: Install SQLite Driver via Composer\nDESCRIPTION: This command installs the SQLite driver for Hyperf using Composer. It requires Swoole >= 5.1.0 and `--enable-swoole-sqlite` to be enabled during compilation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/quick-start.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/database-sqlite\n```\n\n----------------------------------------\n\nTITLE: Changing Scan Handler\nDESCRIPTION: Changes the scan handler in the bin/hyperf.php file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nHyperf\\Di\\ClassLoader::init(handler: new Hyperf\\Di\\ScanHandler\\ProcScanHandler());\n```\n\n----------------------------------------\n\nTITLE: Delete Model Instance\nDESCRIPTION: Shows how to delete a model instance using the `delete` method. First, the model is retrieved from the database. Then, the `delete` method is called on the model instance to remove the corresponding record from the database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Model\\User;\n\n$user = User::query()->find(1);\n\n$user->delete();\n\n```\n\n----------------------------------------\n\nTITLE: Drop Index By Field\nDESCRIPTION: This snippet demonstrates how to drop an index by specifying the array of fields included in the index, leveraging the naming convention.  It drops an index created with the 'account_id' and 'created_at' fields from the 'users' table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nSchema:table('users', function (Blueprint $table) {\n    $table->dropIndex(['account_id', 'created_at']);\n});\n```\n\n----------------------------------------\n\nTITLE: Removing and Recreating Ingress Network\nDESCRIPTION: This command removes the default ingress network and recreates it with a specified subnet. This is done to avoid conflicts with other networks. Ensure that no services are using the ingress network before removing it.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_47\n\nLANGUAGE: shell\nCODE:\n```\ndocker network rm ingress\ndocker network create --ingress --subnet 192.168.0.1/16 --driver overlay ingress\n```\n\n----------------------------------------\n\nTITLE: Coroutine Scheduling with CoordinatorManager in Hyperf\nDESCRIPTION: This snippet demonstrates how to use `Hyperf\\Coordinator\\CoordinatorManager` to schedule coroutines based on worker start and exit events. It uses `CoordinatorManager::until()` to suspend the coroutine until specific events occur, allowing resource allocation after worker start and resource recycling before worker exit. The `Hyperf\\Coroutine\\Coroutine` class is used to create the coroutine.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/support.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Coordinator\\CoordinatorManager;\nuse Hyperf\\Coordinator\\Constants;\nuse Hyperf\\Coroutine\\Coroutine;\n\nCoroutine::create(function() {\n    // Invoked after all OnWorkerStart event callbacks are completed\n    CoordinatorManager::until(Constants::WORKER_START)->yield();\n    echo 'worker started';\n    // Assigning resources\n    // Invoked after all OnWorkerStart event callbacks are completed\n    CoordinatorManager::until(Constants::WORKER_EXIT)->yield();\n    echo 'worker exited';\n    // Recycling resources\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing composer autoload cache\nDESCRIPTION: This command clears the Composer autoload cache.  It's useful when code changes are not reflected in the Hyperf application. The `-o` flag optimizes the autoloader.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/questions.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer dump-autoload -o\n```\n\n----------------------------------------\n\nTITLE: Installing Fswatch on Mac\nDESCRIPTION: This command installs the fswatch utility on macOS using the Homebrew package manager. Fswatch is required for the FswatchDriver.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/watcher.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install fswatch\n```\n\n----------------------------------------\n\nTITLE: Using Date Type Conversion in Hyperf (PHP)\nDESCRIPTION: This code demonstrates how to format the date when using `date` or `datetime` casting.  The `created_at` attribute will be formatted to 'Y-m-d' when the model is serialized to an array or JSON.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/mutators.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 应进行类型转换的属性\n     *\n     * @var array\n     */\n    protected $casts = [\n         'created_at' => 'datetime:Y-m-d',\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Downloading RabbitMQ Delay Plugin\nDESCRIPTION: This command downloads the RabbitMQ delayed message exchange plugin. This is necessary for using delay queues in AMQP with RabbitMQ.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/amqp.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nwget https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/3.9.0/rabbitmq_delayed_message_exchange-3.9.0.ez\ncp rabbitmq_delayed_message_exchange-3.9.0.ez /opt/rabbitmq/plugins/\nrabbitmq-plugins enable rabbitmq_delayed_message_exchange\n```\n\n----------------------------------------\n\nTITLE: Start Hyperf Project\nDESCRIPTION: These commands navigate to the project directory and start the Hyperf server using the `hyperf.php` script. This is the standard method for running a Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/install.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd hyperf-skeleton\nphp bin/hyperf.php start\n```\n\n----------------------------------------\n\nTITLE: Defining a Closure Command with a Scheduled Task - PHP\nDESCRIPTION: Define a command with scheduled task (cron) directly within the `config/console.php` file using a closure.  This provides a quick and easy way to create simple commands. Requires Hyperf Command Console.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Command\\Console;\n\nConsole::command('foo', function () {\n    $this->comment('Hello, Foo!');\n})->describe('This is a demo closure command.')->cron('* * * * *');\n\nConsole::command('bar', function () {\n    $this->comment('Hello, Bar!');\n})->describe('This is another demo closure command.')->cron('* * * * *', callback: fn($cron) => $cron->setSingleton(true));\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Hyperf Component Package\nDESCRIPTION: This snippet demonstrates how to create a new Hyperf component package using the `hyperf/component-creator` tool.  It includes commands to create a component package compatible with the latest Hyperf version and version 2.0.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/component-guide/create.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# 創建適配 Hyperf 最新版本的組件包\ncomposer create-project hyperf/component-creator your_component dev-master\n\n# 創建適配 Hyperf 2.0 版本的組件包\ncomposer create-project hyperf/component-creator your_component \"2.0.*\"\n```\n\n----------------------------------------\n\nTITLE: Installing PgSQL Driver for Hyperf (Bash)\nDESCRIPTION: This snippet shows the command to install the PgSQL driver for Hyperf using Composer. It requires `Swoole >= 5.1.0` and `--enable-swoole-pgsql` to be enabled during compilation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/quick-start.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/database-pgsql\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Annotation Collectors in Hyperf\nDESCRIPTION: This code shows how to configure custom annotation collectors in `config/autoload/annotations.php`. This is necessary when using custom annotations and collectors to ensure that annotation metadata is properly collected and updated during development, especially when files are modified.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.0.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'scan' => [\n        'collectors' => [\n            CustomCollector::class,\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Logger\nDESCRIPTION: This command installs the `hyperf/logger` component using Composer, a dependency manager for PHP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/logger.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/logger\n```\n\n----------------------------------------\n\nTITLE: Generating a Migration File with Table Options (bash)\nDESCRIPTION: This demonstrates generating migration files using the `--table` and `--create` options to either modify an existing table or create a new table, respectively. These options help pre-populate the migration file with relevant table schema.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:migration create_users_table --table=users\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:migration create_users_table --create=users\n```\n\n----------------------------------------\n\nTITLE: WebSocket Callback Interface in Coroutine Style\nDESCRIPTION: This code demonstrates the interface `OnReceiveInterface` for handling WebSocket `onReceive` callbacks in the coroutine style. It highlights the type differences in the `$server` parameter, being `Swoole\\Coroutine\\Server\\Connection` in the coroutine style versus `Swoole\\Server` in the asynchronous style. Developers need to adapt their code accordingly.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/coroutine-server.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\Contract;\n\nuse Swoole\\Coroutine\\Server\\Connection;\nuse Swoole\\Server as SwooleServer;\n\ninterface OnReceiveInterface\n{\n    /**\n     * @param Connection|SwooleServer $server\n     */\n    public function onReceive($server, int $fd, int $reactorId, string $data): void;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration\nDESCRIPTION: Configures the Prometheus driver with settings like namespace, scrape host, scrape port, scrape path, push host, push port, and push interval.  It also defines whether to use scrape mode, push mode or custom mode.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Metric\\Adapter\\Prometheus\\Constants;\n\nreturn [\n    'default' => env('METRIC_DRIVER', 'prometheus'),\n    'use_standalone_process' => env('TELEMETRY_USE_STANDALONE_PROCESS', true),\n    'enable_default_metric' => env('TELEMETRY_ENABLE_DEFAULT_TELEMETRY', true),\n    'default_metric_interval' => env('DEFAULT_METRIC_INTERVAL', 5),\n    'metric' => [\n        'prometheus' => [\n            'driver' => Hyperf\\Metric\\Adapter\\Prometheus\\MetricFactory::class,\n            'mode' => Constants::SCRAPE_MODE,\n            'namespace' => env('APP_NAME', 'skeleton'),\n            'scrape_host' => env('PROMETHEUS_SCRAPE_HOST', '0.0.0.0'),\n            'scrape_port' => env('PROMETHEUS_SCRAPE_PORT', '9502'),\n            'scrape_path' => env('PROMETHEUS_SCRAPE_PATH', '/metrics'),\n            'push_host' => env('PROMETHEUS_PUSH_HOST', '0.0.0.0'),\n            'push_port' => env('PROMETHEUS_PUSH_PORT', '9091'),\n            'push_interval' => env('PROMETHEUS_PUSH_INTERVAL', 5),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Phar Packager\nDESCRIPTION: Installs the Hyperf Phar component using Composer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/phar.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/phar\n```\n\n----------------------------------------\n\nTITLE: Modifying Original Method Behavior within an Aspect in Hyperf (PHP)\nDESCRIPTION: This code illustrates how to modify or enhance the behavior of the original method within an Aspect in Hyperf.  It demonstrates accessing the reflection of the method, getting the arguments passed to the method, obtaining the original class instance, getting annotation metadata, and calling the original method directly. It also shows how to completely override the original method's behavior and return a different result.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/aop.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Aspect;\n\nuse App\\Service\\SomeClass;\nuse App\\Annotation\\SomeAnnotation;\nuse Hyperf\\Di\\Annotation\\Aspect;\nuse Hyperf\\Di\\Aop\\AbstractAspect;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\n#[Aspect]\nclass FooAspect extends AbstractAspect\n{\n    public array $classes = [\n        SomeClass::class,\n        'App\\Service\\SomeClass::someMethod',\n        'App\\Service\\SomeClass::*Method',\n    ];\n\n    public array $annotations = [\n        SomeAnnotation::class,\n    ];\n\n    public function process(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        // 獲取當前方法反射原型\n        /** @var \\ReflectionMethod **/\n        $reflect = $proceedingJoinPoint->getReflectMethod();\n\n        // 獲取呼叫方法時提交的引數\n        $arguments = $proceedingJoinPoint->getArguments(); // array\n\n        // 獲取原類的例項並呼叫原類的其他方法\n        $originalInstance = $proceedingJoinPoint->getInstance();\n        $originalInstance->yourFunction();\n\n        // 獲取註解元資料\n        /** @var \\Hyperf\\Di\\Aop\\AnnotationMetadata **/\n        $metadata = $proceedingJoinPoint->getAnnotationMetadata();\n\n        // 呼叫不受代理類影響的原方法\n        $proceedingJoinPoint->processOriginalMethod();\n\n        // 不執行原方法，做其他操作\n        $result = date('YmdHis', time() - 86400);\n        return $result;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Dependencies in Hyperf Skeleton\nDESCRIPTION: These commands remove the `composer.lock` file and `vendor` directory, then update the Composer dependencies, forcing the system to recognize the new repository configuration from the `composer.json` file. This ensures that the `hyperf` component is linked to the local directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/component-guide/intro.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ncd hyperf-skeleton\nrm -rf composer.lock && rm -rf vendor && composer update\n```\n\n----------------------------------------\n\nTITLE: Building Phar Archive with Custom Path\nDESCRIPTION: This command builds a Phar archive and sets a base path for file inclusion. The `--path` option determines the directory to be packaged into the `phar` archive.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/phar.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php phar:build --path=BASE_PATH\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Overlay Network\nDESCRIPTION: Creates a custom overlay network for Docker Swarm with encryption and attachable configuration. This provides network isolation and secure communication for services within the Swarm. The subnet is 10.0.0.1/8.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ndocker network create \\\n--driver overlay \\\n--subnet 10.0.0.1/8 \\\n--opt encrypted \\\n--attachable \\\ndefault-network\n```\n\n----------------------------------------\n\nTITLE: Binding StdoutLoggerInterface to Factory\nDESCRIPTION: This code snippet shows how to bind the `StdoutLoggerInterface` to the custom `StdoutLoggerFactory` in the `dependencies.php` configuration file. This allows you to replace the default stdout logger with a custom implementation that uses Monolog.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/logger.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\Contract\\StdoutLoggerInterface::class => \\App\\StdoutLoggerFactory::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Truncating Tables - PHP\nDESCRIPTION: This snippet demonstrates how to truncate a table using the `truncate` method. This deletes all rows and resets the auto-increment ID.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_57\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->truncate();\n```\n\n----------------------------------------\n\nTITLE: Getting File Path & Extension\nDESCRIPTION: Demonstrates how to retrieve the file path and extension of an uploaded file using the `getPath()` and `getExtension()` methods of the `UploadedFile` object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/request.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// 该路径为上传文件的临时路径\n$path = $request->file('photo')->getPath();\n\n// 由于 Swoole 上传文件的 tmp_name 并没有保持文件原名，所以这个方法已重写为获取原文件名的后缀名\n$extension = $request->file('photo')->getExtension();\n```\n\n----------------------------------------\n\nTITLE: Rebind Request for EasyWechat Payment Callback in Hyperf\nDESCRIPTION: This snippet demonstrates how to rebind the Symfony Request object within the EasyWechat application for handling payment callbacks in Hyperf. It retrieves data from the Hyperf request, constructs a Symfony Request, and rebinds the 'request' key in the EasyWechat application container. This allows EasyWechat to properly process the callback request.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/sdks/wechat.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Symfony\\Component\\HttpFoundation\\HeaderBag;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n$get = $this->request->getQueryParams();\n$post = $this->request->getParsedBody();\n$cookie = $this->request->getCookieParams();\n$uploadFiles = $this->request->getUploadedFiles() ?? [];\n$server = $this->request->getServerParams();\n$xml = $this->request->getBody()->getContents();\n$files = [];\n/** @var \\Hyperf\\HttpMessage\\Upload\\UploadedFile $v */\nforeach ($uploadFiles as $k => $v) {\n    $files[$k] = $v->toArray();\n}\n$request = new Request($get, $post, [], $cookie, $files, $server, $xml);\n$request->headers = new HeaderBag($this->request->getHeaders());\n$app->rebind('request', $request);\n// Do something...\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Dependency Injection Container PHP\nDESCRIPTION: This code snippet initializes the dependency injection container in Hyperf. It creates a new container instance using the `DefinitionSourceFactory` and sets it as the application context's container.  This is typically done in the `config/container.php` file. It throws an exception if the container is not a valid `Psr\\Container\\ContainerInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.1.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Di\\Definition\\DefinitionSourceFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = new Container((new DefinitionSourceFactory(true))());\n\nif (! $container instanceof \\Psr\\Container\\ContainerInterface) {\n    throw new RuntimeException('The dependency injection container is invalid.');\n}\nreturn ApplicationContext::setContainer($container);\n```\n\n----------------------------------------\n\nTITLE: Adding Crontabs to Hyperf Nano\nDESCRIPTION: Shows how to add a crontab to a Hyperf Nano application. It adds a crontab that executes a function every second, logging a message to the console.  Requires the `hyperf/nano` package and `Hyperf\\Contract\\StdoutLoggerInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nano.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addCrontab('* * * * * *', function(){\n    $this->get(StdoutLoggerInterface::class)->info('execute every second!');\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Metric Factory Methods\nDESCRIPTION: This PHP code snippet shows the factory methods available in the `MetricFactoryInterface` for creating different types of metrics: Counter, Gauge, and Histogram.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\npublic function makeCounter($name, $labelNames): CounterInterface;\n\npublic function makeGauge($name, $labelNames): GaugeInterface;\n\npublic function makeHistogram($name, $labelNames): HistogramInterface;\n```\n\n----------------------------------------\n\nTITLE: Default Metric Configuration\nDESCRIPTION: This PHP code snippet defines whether to enable default metric collection.  Default metrics include memory usage, system CPU load, and Swoole server/coroutine metrics. The configuration is retrieved from the environment variable `TELEMETRY_ENABLE_DEFAULT_TELEMETRY` with a fallback to `true`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n'enable_default_metric' => env('TELEMETRY_ENABLE_DEFAULT_TELEMETRY', true),\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Migrations with Step (bash)\nDESCRIPTION: This command reverts a specified number of migrations using the `--step` parameter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:rollback --step=5\n```\n\n----------------------------------------\n\nTITLE: Installing hyperf/json-rpc component\nDESCRIPTION: This command installs the hyperf/json-rpc component, which is essential for handling the JSON RPC protocol in Hyperf. It also requires the installation of either hyperf/rpc-server or hyperf/rpc-client depending on whether you are creating a service provider or consumer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/json-rpc.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/json-rpc\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf WebSocket Client\nDESCRIPTION: This command installs the hyperf/websocket-client package using Composer, which provides the necessary components for interacting with WebSocket servers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/websocket-client.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/websocket-client\n```\n\n----------------------------------------\n\nTITLE: Component Usage with Merged Attributes (HTML)\nDESCRIPTION: This demonstrates using the `alert` component with a class attribute that will be merged with the default class specified in the component's view.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n    <x-alert type=\"error\" :message=\"$message\" class=\"mb-4\"/>\n```\n\n----------------------------------------\n\nTITLE: Translating Strings using Global Functions\nDESCRIPTION: This code snippet shows how to translate strings using the global functions `__()` or `trans()`. These functions provide a convenient way to access translated strings throughout the application using a 'key' or 'file.key' format.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/translation.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\necho __('messages.welcome');\necho trans('messages.welcome');\n```\n\n----------------------------------------\n\nTITLE: Defining View Namespaces (PHP)\nDESCRIPTION: This shows how to define a view namespace in the `ConfigProvider` for a package.  This allows referencing views within the package using the namespace (e.g., `package-name::view.name`).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass ConfigProvider\n{\n    public function __invoke()\n    {\n        return [\n            // ...others config\n            'view' => [\n                // ...others config\n                'namespaces' => [\n                    'package-name' => __DIR__ . '/../views',\n                ],\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating an AMQP Consumer\nDESCRIPTION: Generates an AMQP consumer class using the Hyperf CLI. The generated consumer can be customized to define the exchange, routing key, and queue from which to consume messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/amqp.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:amqp-consumer DemoConsumer\n```\n\n----------------------------------------\n\nTITLE: Running Kong Database\nDESCRIPTION: Runs a PostgreSQL 9.6 container for the Kong database, setting environment variables for user, database name, and password.  The container is connected to the `default-network`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name kong-database \\\n  --network=default-network \\\n  -p 5432:5432 \\\n  -e \"POSTGRES_USER=kong\" \\\n  -e \"POSTGRES_DB=kong\" \\\n  -e \"POSTGRES_PASSWORD=kong\" \\\n  postgres:9.6\n```\n\n----------------------------------------\n\nTITLE: Configuration Reuse with Loop\nDESCRIPTION: This code snippet demonstrates how to generate service consumer configurations dynamically using a PHP loop. It defines an array of services and iterates through it to create the configuration for each consumer, including the service name, interface, and registry.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/json-rpc.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'consumers' => value(function () {\n        $consumers = [];\n        // This example automatically creates the configuration form of the proxy consumer class. There are two configuration items - name and service. This is not the only method. Just to explain that the configuration can be generated through PHP code\n        // The following FooServiceInterface and BarServiceInterface are only examples of multi-services, and they do not actually exist in the document examples\n        $services = [\n            'FooService' => App\\JsonRpc\\FooServiceInterface::class,\n            'BarService' => App\\JsonRpc\\BarServiceInterface::class,\n        ];\n        foreach ($services as $name => $interface) {\n            $consumers[] = [\n                'name' => $name,\n                'service' => $interface,\n                'registry' => [\n                   'protocol' => 'consul',\n                   'address' => 'http://127.0.0.1:8500',\n                ]\n            ];\n        }\n        return $consumers;\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Install Smarty Engine (Bash)\nDESCRIPTION: This command installs the Smarty template engine using Composer, allowing the use of Smarty templates for view rendering in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require smarty/smarty\n```\n\n----------------------------------------\n\nTITLE: Default Database Configuration in Hyperf\nDESCRIPTION: Defines the default database connection configuration for a Hyperf application, including the driver, host, port, database name, username, password, charset, collation, prefix, and connection pool settings. The configuration uses environment variables for values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/quick-start.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER', 'mysql'),\n        'host' => env('DB_HOST', 'localhost'),\n        'port' => env('DB_PORT', 3306),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => env('DB_CHARSET', 'utf8'),\n        'collation' => env('DB_COLLATION', 'utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX', ''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float)env('DB_MAX_IDLE_TIME', 60),\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Use Variables in RPN Calculation in PHP\nDESCRIPTION: This snippet demonstrates how to use variables within an RPN expression. Variables are represented by bracketed indices (e.g., `[0]`, `[1]`) and passed as an array to the `calculate` method. The example shows the RPN expression '[0] 1 2 + 4 * + [1] -' with variable values [5, 10].\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/rpn.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->calculate('[0] 1 2 + 4 * + [1] -', [5, 10]); // '7'\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Router in Hyperf\nDESCRIPTION: This code snippet demonstrates how to configure a WebSocket router in the `config/routes.php` file. It adds a server named 'ws' and defines a route for the root path ('/') to be handled by the `App\\Controller\\WebSocketController`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/websocket-server.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nRouter::addServer('ws', function () {\n    Router::get('/', 'App\\Controller\\WebSocketController');\n});\n```\n\n----------------------------------------\n\nTITLE: Generated Extended Model After Visitor Customization PHP\nDESCRIPTION: This PHP code shows the generated model after customizing the `ModelUpdateVisitor`. It demonstrates how the `decimal` type is now correctly mapped to `decimal:2` in the `$casts` array and the corresponding `@property` is a `string`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/gen.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare (strict_types=1);\n\nnamespace App\\Model;\n\n/**\n * @property int $id \n * @property int $count \n * @property string $float_num \n * @property string $str \n * @property string $json \n * @property \\Carbon\\Carbon $created_at \n * @property \\Carbon\\Carbon $updated_at \n */\nclass UserExt extends Model\n{\n    /**\n     * The table associated with the model.\n     */\n    protected ?string $table = 'user_ext';\n    /**\n     * The attributes that are mass assignable.\n     */\n    protected array $fillable = ['id', 'count', 'float_num', 'str', 'json', 'created_at', 'updated_at'];\n    /**\n     * The attributes that should be cast to native types.\n     */\n    protected array $casts = ['id' => 'integer', 'count' => 'integer', 'float_num' => 'decimal:2', 'created_at' => 'datetime', 'updated_at' => 'datetime'];\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Existence of Records (exists, doesntExist) in Hyperf\nDESCRIPTION: Demonstrates how to use the `exists()` and `doesntExist()` methods to check for the existence of records matching a given query. This is more efficient than using `count()` when only checking existence.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nreturn Db::table('orders')->where('finalized', 1)->exists();\n\nreturn Db::table('orders')->where('finalized', 1)->doesntExist();\n```\n\n----------------------------------------\n\nTITLE: Using Global SocketIO API in Hyperf\nDESCRIPTION: This PHP code shows how to use the global SocketIO API to broadcast messages to rooms, namespaces, and individual sockets.  It retrieves the SocketIO instance from the container and then uses its methods to emit events to different targets.  This API is useful for sending messages from anywhere in the application, not just within event handlers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/socketio-server.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$io = \\Hyperf\\Context\\ApplicationContext::getContainer()->get(\\Hyperf\\SocketIOServer\\SocketIO::class);\n\n// sending to all clients in 'game' room, including sender\n// 向 game 房间内的所有连接推送 bigger-announcement 事件。\n$io->in('game')->emit('big-announcement', 'the game will start soon');\n\n// sending to all clients in namespace 'myNamespace', including sender\n// 向 /myNamespace 命名空间下的所有连接推送 bigger-announcement 事件\n$io->of('/myNamespace')->emit('bigger-announcement', 'the tournament will start soon');\n\n// sending to a specific room in a specific namespace, including sender\n// 向 /myNamespace 命名空间下的 room 房间所有连接推送 event 事件\n$io->of('/myNamespace')->to('room')->emit('event', 'message');\n\n// sending to individual socketid (private message)\n// 向 socketId 单点推送\n$io->to('socketId')->emit('hey', 'I just met you');\n\n// sending to all clients on this node (when using multiple nodes)\n// 向本机所有连接推送\n$io->local->emit('hi', 'my lovely babies');\n\n// sending to all connected clients\n// 向所有连接推送\n$io->emit('an event sent to all connected clients');\n```\n\n----------------------------------------\n\nTITLE: Producing Delayed Messages via Command (Hyperf AMQP)\nDESCRIPTION: This code demonstrates how to produce a delayed message using Hyperf's AMQP component within a command-line application. It defines a command `DelayCommand` that creates a `DelayDirectProducer` message, sets a delay of 5000ms, and then publishes the message using the `Producer` service.  The `DelayDirectProducer` needs to be defined elsewhere.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/amqp.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse App\\Amqp\\Producer\\DelayDirectProducer;\n//use App\\Amqp\\Producer\\DelayFanoutProducer;\n//use App\\Amqp\\Producer\\DelayTopicProducer;\nuse Hyperf\\Amqp\\Producer;\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Context\\ApplicationContext;\nuse Psr\\Container\\ContainerInterface;\n\n#[Command]\nclass DelayCommand extends HyperfCommand\n{\n    protected ContainerInterface $container;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n\n        parent::__construct('demo:command');\n    }\n\n    public function configure()\n    {\n        parent::configure();\n        $this->setDescription('Hyperf Demo Command');\n    }\n\n    public function handle()\n    {\n        //1.delayed + direct\n        $message = new DelayDirectProducer('delay+direct produceTime:'.(microtime(true)));\n        //2.delayed + fanout\n        //$message = new DelayFanoutProducer('delay+fanout produceTime:'.(microtime(true)));\n        //3.delayed + topic\n        //$message = new DelayTopicProducer('delay+topic produceTime:' . (microtime(true)));\n        $message->setDelayMs(5000);\n        $producer = ApplicationContext::getContainer()->get(Producer::class);\n        $producer->produce($message);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Pool\nDESCRIPTION: This command installs the `hyperf/pool` package, which provides connection pool functionality for Hyperf applications. This is the first step in using connection pools.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/pool.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/pool\n```\n\n----------------------------------------\n\nTITLE: Conditional Pivot Data Inclusion\nDESCRIPTION: This PHP code demonstrates the usage of `whenPivotLoaded` to conditionally include data from the pivot table of a many-to-many relationship. If the 'role_user' pivot table information is available, the `expires_at` attribute from the pivot table is included in the resource.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'expires_at' => $this->whenPivotLoaded('role_user', function () {\n                return $this->pivot->expires_at;\n            }),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Snowflake Component\nDESCRIPTION: Installs the hyperf/snowflake component using Composer. This command downloads and installs the necessary files to use Snowflake ID generation within a Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/snowflake.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/snowflake\n```\n\n----------------------------------------\n\nTITLE: Displaying Swarm Join Tokens\nDESCRIPTION: Displays the join tokens for manager and worker nodes in the Docker Swarm.  These tokens are required to join new nodes to the Swarm.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n# 显示manager节点的TOKEN\n$ docker swarm join-token manager\n# 加入manager节点到集群\n$ docker swarm join --token <token> ip:2377\n\n# 显示worker节点的TOKEN\n$ docker swarm join-token worker\n# 加入worker节点到集群\n$ docker swarm join --token <token> ip:2377\n```\n\n----------------------------------------\n\nTITLE: Message Bus Usage\nDESCRIPTION: This code snippet demonstrates the usage of the `MessageBusInterface` for inter-process communication. It retrieves an instance of the message bus, broadcasts a message to all processes, and then subscribes to the message bus to receive and echo any messages that are broadcast.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/reactive-x.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$bus = make(Hyperf\\ReactiveX\\MessageBusInterface::class);\n// 全進程廣播信息\n$bus->onNext('Hello Hyperf');\n// 訂閲信息\n$bus->subscribe(function($message){\n    echo $message;\n});\n```\n\n----------------------------------------\n\nTITLE: Server Settings Configuration\nDESCRIPTION: Configures server settings within the `config/autoload/server.php` file. These settings control the behavior of the Swoole server, including worker count, coroutine settings, and more.  The 'settings' option directly uses options provided by `Swoole Server`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 這裡省略了該檔案的其它配置\n    'settings' => [\n        'enable_coroutine' => true, // 開啟內建協程\n        'worker_num' => swoole_cpu_num(), // 設定啟動的 Worker 程序數\n        'pid_file' => BASE_PATH . '/runtime/hyperf.pid', // master 程序的 PID\n        'open_tcp_nodelay' => true, // TCP 連線傳送資料時會關閉 Nagle 合併演算法，立即發往客戶端連線\n        'max_coroutine' => 100000, // 設定當前工作程序最大協程數量\n        'open_http2_protocol' => true, // 啟用 HTTP2 協議解析\n        'max_request' => 100000, // 設定 worker 程序的最大任務數\n        'socket_buffer_size' => 2 * 1024 * 1024, // 配置客戶端連線的快取區長度\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Register Exception Handler via Annotation - Hyperf PHP\nDESCRIPTION: Registers an exception handler using the `Hyperf\\ExceptionHandler\\Annotation\\ExceptionHandler` annotation in Hyperf. The `server` parameter specifies the server name (e.g., 'http'), and `priority` determines the order in which handlers are executed. This example also demonstrates dependency injection using the constructor.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/exception-handler.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\ExceptionHandler\\ExceptionHandler;\nuse Hyperf\\HttpMessage\\Stream\\SwooleStream;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Throwable;\nuse Hyperf\\ExceptionHandler\\Annotation\\ExceptionHandler as RegisterHandler;\n\n// 這裏的 http 對應 config/autoload/server.php 內的 server 所對應的 name 值\n// priority 為排序\n#[RegisterHandler(server: 'http')]\nclass AppExceptionHandler extends ExceptionHandler\n{\n    public function __construct(protected StdoutLoggerInterface $logger)\n    {\n    }\n\n    public function handle(Throwable $throwable, ResponseInterface $response)\n    {\n        $this->logger->error(sprintf('%s[%s] in %s', $throwable->getMessage(), $throwable->getLine(), $throwable->getFile()));\n        $this->logger->error($throwable->getTraceAsString());\n        return $response->withHeader('Server', 'Hyperf')->withStatus(500)->withBody(new SwooleStream('Internal Server Error.'));\n    }\n\n    public function isValid(Throwable $throwable): bool\n    {\n        return true;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite Driver using Composer\nDESCRIPTION: This command installs the SQLite driver for Hyperf using Composer. It requires Swoole version 5.1.0 or higher and that Swoole is compiled with `--enable-swoole-sqlite`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/quick-start.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/database-sqlite\n```\n\n----------------------------------------\n\nTITLE: Implement Socket.IO Client (HTML/JavaScript)\nDESCRIPTION: This HTML and JavaScript code shows how to create a Socket.IO client that connects to the Hyperf server.  It uses the `socket.io.js` library and configures the transport to use WebSockets. The code also demonstrates sending events, joining rooms, and receiving messages.  The `transports: [\"websocket\"]` option is crucial to enforce WebSocket communication since the server only implements WebSocket.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/socketio-server.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.bootcdn.net/ajax/libs/socket.io/2.3.0/socket.io.js\"></script>\n<script>\n    var socket = io('ws://127.0.0.1:9502', { transports: [\"websocket\"] });\n    socket.on('connect', data => {\n        socket.emit('event', 'hello, hyperf', console.log);\n        socket.emit('join-room', 'room1', console.log);\n        setInterval(function () {\n            socket.emit('say', '{\"room\":\"room1\", \"message\":\"Hello Hyperf.\"}');\n        }, 1000);\n    });\n    socket.on('event', console.log);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Supervisor for Hyperf Application\nDESCRIPTION: This snippet configures Supervisor to manage a Hyperf application. It defines the program name, working directory, startup command, user, autostart and autorestart settings, start-up behavior, retry attempts, and log file locations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/supervisor.md#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# 新建一個應用並設置一個名稱，這裏設置為 hyperf\n[program:hyperf]\n# 設置命令在指定的目錄內執行\ndirectory=/var/www/hyperf/\n# 這裏為您要管理的項目的啓動命令\ncommand=php ./bin/hyperf.php start\n# 以哪個用户來運行該進程\nuser=root\n# supervisor 啓動時自動該應用\nautostart=true\n# 進程退出後自動重啓進程\nautorestart=true\n# 進程持續運行多久才認為是啓動成功\nstartsecs=1\n# 重試次數\nstartretries=3\n# stderr 日誌輸出位置\nstderr_logfile=/var/www/hyperf/runtime/stderr.log\n# stdout 日誌輸出位置\nstdout_logfile=/var/www/hyperf/runtime/stdout.log\n```\n\n----------------------------------------\n\nTITLE: Publishing Scout Configuration\nDESCRIPTION: This command publishes the Scout configuration file to the config directory. This allows you to customize the Scout settings for your application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/scout\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Aspect\nDESCRIPTION: Configures the SessionAspect to enable session support in Socket.io. This allows you to access and use session data within Socket.io event handlers. Requires the `hyperf/session` component and the `Hyperf\\SocketIOServer\\Aspect\\SessionAspect` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/socketio-server.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/aspect.php\nreturn [\n    \\Hyperf\\SocketIOServer\\Aspect\\SessionAspect::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Using Hyperf Components in Hyperf Nano\nDESCRIPTION: Demonstrates how to use Hyperf components in a Hyperf Nano application. This example uses the Hyperf DB component to query a database. Requires the `hyperf/nano` and `hyperf/db` packages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nano.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\DB\\DB;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->config([\n    'db.default' => [\n        'host' => env('DB_HOST', 'localhost'),\n        'port' => env('DB_PORT', 3306),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n    ]\n]);\n\n$app->get('/', function(){\n    return DB::query('SELECT * FROM `user` WHERE gender = ?;', [1]);\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: NSQ Protocol Flow Diagram\nDESCRIPTION: This PlantUML diagram outlines the NSQ protocol flow, covering connection establishment (magic V2), authentication, message publishing (PUB, MPUB, DPUB), topic subscription (SUB), readiness indication (RDY), message acknowledgment (FIN), requeuing (REQ), timeout resetting (TOUCH), heartbeat, and connection closing (CLS).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nsq.md#_snippet_10\n\nLANGUAGE: PlantUML\nCODE:\n```\n@startuml\n\nautonumber\nhide footbox\ntitle **NSQ 協議**\n\nparticipant \"客戶端\" as client\nparticipant \"伺服器\" as server #orange\n\nactivate client\nactivate server\n\n== connect ==\nnote left of client: connect 後都為 socket->send/recv\nclient -> server: socket->connect(ip, host)\nnote left of client: protocol version\nclient->server: magic: V2\n\n== auth ==\nnote left of client: client metadata\nclient->server: IDENTIFY\nnote right of server: 如果需要 auth\nserver->client: auth_required=true\nclient->server: AUTH\n...\n\n== pub ==\nnote left of client: 傳送一條訊息\nclient -> server: PUB~~~~ <topic_name>\nnote left of client: 傳送多條訊息\nclient -> server: MPUB\nnote left of client: 傳送一條延時訊息\nclient -> server: DPUB\n...\n\n== sub ==\nnote left of client: client 使用 channel 訂閱 topic\nnote right of server: SUB 成功後, client 處於 RDY 0 階段\nclient -> server: SUB <topic_name> <channel_name>\nnote left of client: 使用 RDY 告訴 server 準備好消費 <count> 條訊息\nclient -> server: RDY <count>\nnote right of server: server 返回 client <count> 條訊息\nserver -> client: <count> msg\nnote left of client: 標記訊息完成消費(消費成功)\nclient -> server: FIN <message_id>\nnote left of client: 訊息重新入隊(消費失敗, 重新入隊)\nclient -> server: REQ <message_id> <timeout>\nnote left of client: 重置訊息超時時間\nclient -> server: TOUCH <message_id>\n...\n\n== heartbeat ==\nserver -> client: _heartbeat_\nnote right of server: client 2 次沒有應答 NOP, server 將斷開連線\nclient -> server: NOP\n...\n\n== close ==\nnote left of client: clean close connection, 表示沒有訊息了, 關閉連線\nclient -> server: CLS\nnote right of server: server 端成功應答\nserver -> client: CLOSE_WAIT\n\ndeactivate client\ndeactivate server\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Configuring Box Kernel\nDESCRIPTION: These commands set the kernel used by Box to either Swow (default) or Swoole. Note that Swoole Kernel only supports PHP 8.1 and does not support binary program building or Windows environments. The `box config set kernel` command modifies the Box configuration file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/eco/box.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n// 設定為 Swow Kernel [預設]\nbox config set kernel swow\n\n// 設定為 Swoole Kernel (不支援 Windows)\nbox config set kernel swoole\n```\n\n----------------------------------------\n\nTITLE: 1.1 ConfigProvider annotations scan path structure PHP\nDESCRIPTION: This snippet illustrates the updated structure of ConfigProvider in Hyperf 1.1.  The 'scan.path' configuration has been moved to 'annotations.scan.path', requiring adjustments to custom components that rely on annotation scanning.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/1.1.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nclass ConfigProvider\n{\n\n    public function __invoke(): array\n    {\n        return [\n            'annotations' => [\n                'scan' => [\n                    'paths' => [\n                        __DIR__,\n                    ],\n                ],\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install gRPC Server Component\nDESCRIPTION: This shell command installs the `hyperf/grpc-server` component using Composer. This component provides the necessary classes and functionalities to create and manage gRPC servers within the Hyperf framework.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/grpc.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/grpc-server\n```\n\n----------------------------------------\n\nTITLE: Modify PHPUnit Test Script\nDESCRIPTION: This snippet demonstrates how to modify the `scripts` section in `composer.json` to include the `--prepend test/bootstrap.php` option for PHPUnit tests. This ensures that the bootstrap file is loaded before the tests are executed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.2.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"scripts\": {\n        \"test\": \"co-phpunit --prepend test/bootstrap.php -c phpunit.xml --colors=always\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Left Join and Right Join with leftJoin() and rightJoin() in Hyperf\nDESCRIPTION: Illustrates how to use `leftJoin()` and `rightJoin()` methods to perform left and right outer joins between tables. These joins include all records from one table and matching records from another table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Build Phar Archive with Version\nDESCRIPTION: Builds a Phar archive with a specific version using the `--phar-version` option. This allows you to specify the version number of the Phar package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/phar.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php phar:build --phar-version=1.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing Docker\nDESCRIPTION: This command installs Docker on a machine. It uses the `get.docker.com` script to install the latest version of Docker. The script should be executed with caution as it downloads and executes code from the internet.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSL https://get.docker.com/ | sh\n```\n\n----------------------------------------\n\nTITLE: Implementing OnReceiveInterface for WebSocket in Hyperf\nDESCRIPTION: This interface definition illustrates the difference in the `onReceive` callback between asynchronous and coroutine styles in Hyperf WebSocket handling. It defines the `OnReceiveInterface` with a method that accepts either `Swoole\\Coroutine\\Server\\Connection` or `Swoole\\Server` as the server parameter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/coroutine-server.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\Contract;\n\nuse Swoole\\Coroutine\\Server\\Connection;\nuse Swoole\\Server as SwooleServer;\n\ninterface OnReceiveInterface\n{\n    /**\n     * @param Connection|SwooleServer $server\n     */\n    public function onReceive($server, int $fd, int $reactorId, string $data): void;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Where Clauses to Search Query\nDESCRIPTION: This code demonstrates how to add a `where` clause to a search query.  Currently, Scout only supports basic numerical equality checks in `where` clauses for filtering the search results.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->where('user_id', 1)->get();\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf NSQ\nDESCRIPTION: This command installs the `hyperf/nsq` package using Composer, which is required for integrating NSQ with a Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nsq.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/nsq\n```\n\n----------------------------------------\n\nTITLE: Registering a Process via Configuration File\nDESCRIPTION: This snippet shows how to register a custom process by adding its class name to the `config/autoload/processes.php` configuration file. This makes the process known to the Process Manager.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/process.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// config/autoload/processes.php\nreturn [\n    \\App\\Process\\FooProcess::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a Task with Closure in Hyperf DAG\nDESCRIPTION: This snippet demonstrates how to define a task using a closure function within the Hyperf DAG framework. The `Vertex::make` method creates a vertex representing the task. The second parameter is an optional key for the vertex.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/dag.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// The second parameter of Vertex::make is an optional parameter, which is the key of vertex, that is, the key value of the result array.\n\\Hyperf\\Dag\\Vertex::make(function() { return 'hello'; }, \"greeting\");\n```\n\n----------------------------------------\n\nTITLE: Installing Box on Linux aarch64\nDESCRIPTION: These commands download the Box binary for Linux aarch64, move it to the /usr/local/bin directory, and set execute permissions. It uses an older version due to runner limitations.  It ensures Box is accessible from the command line by placing it in a $PATH directory. Requires wget and sudo.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/eco/box.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/hyperf/box/releases/download/v0.0.3/box_php8.1_aarch64_linux -O box\nsudo mv ./box /usr/local/bin/box\nsudo chmod 755 /usr/local/bin/box\n// 确保 /usr/local/bin/box 在你的 $PATH 环境中，或者将 `box` 放到你想要的任意 $PATH 路径中\n```\n\n----------------------------------------\n\nTITLE: Configuring Supervisor for Hyperf Application\nDESCRIPTION: This configuration defines how Supervisor should manage the Hyperf application. It specifies the working directory, command to start the application, user to run the process, autostart and autorestart settings, start-up time, retry attempts, and log file locations.  The configuration should be placed in `/etc/supervisord.d/supervisord.conf`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/supervisor.md#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[program:hyperf]\n# 设置命令在指定的目录内执行\ndirectory=/var/www/hyperf/\n# 这里为您要管理的项目的启动命令\ncommand=php ./bin/hyperf.php start\n# 以哪个用户来运行该进程\nuser=root\n# supervisor 启动时自动该应用\nautostart=true\n# 进程退出后自动重启进程\narestart=true\n# 进程持续运行多久才认为是启动成功\nstartsecs=1\n# 重试次数\nstartretries=3\n# stderr 日志输出位置\nstderr_logfile=/var/www/hyperf/runtime/stderr.log\n# stdout 日志输出位置\nstdout_logfile=/var/www/hyperf/runtime/stdout.log\n```\n\n----------------------------------------\n\nTITLE: Define Placeholders in Translation Strings\nDESCRIPTION: This code defines a placeholder in a language string. Placeholders are prefixed with a colon (`:`) and can be used to insert dynamic values into the translated string.  The language file includes a message with a `:name` placeholder.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/translation.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// storage/languages/en/messages.php\n\nreturn [\n    'welcome' => 'Welcome :name',\n];\n```\n\n----------------------------------------\n\nTITLE: Config Provider Structure Change in Hyperf (Before)\nDESCRIPTION: This snippet illustrates the old structure of the 'scan' section within the Hyperf config provider. It defines the paths to scan and the collectors to use.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/CHANGELOG.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n'scan' => [\n    'paths' => [\n        __DIR__,\n    ],\n    'collectors' => [],\n],\n```\n\n----------------------------------------\n\nTITLE: Kafka Configuration\nDESCRIPTION: This PHP code defines the default configuration settings for the Kafka component in Hyperf, including connection timeouts, client ID, bootstrap servers, acknowledgements, and other parameters for producer and consumer behavior. It utilizes the KafkaStrategy class for partition assignment.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/kafka.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Kafka\\Constants\\KafkaStrategy;\n\nreturn [\n    'default' => [\n        'connect_timeout' => -1,\n        'send_timeout' => -1,\n        'recv_timeout' => -1,\n        'client_id' => '',\n        'max_write_attempts' => 3,\n        'bootstrap_servers' => '127.0.0.1:9092',\n        'acks' => 0,\n        'producer_id' => -1,\n        'producer_epoch' => -1,\n        'partition_leader_epoch' => -1,\n        'interval' => 0,\n        'session_timeout' => 60,\n        'rebalance_timeout' => 60,\n        'replica_id' => -1,\n        'rack_id' => '',\n        'group_retry' => 5,\n        'group_retry_sleep' => 1,\n        'group_heartbeat' => 3,\n        'offset_retry' => 5,\n        'auto_create_topic' => true,\n        'partition_assignment_strategy' => KafkaStrategy::RANGE_ASSIGNOR,\n        'sasl' => [],\n        'ssl' => [],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Perform Static Analysis\nDESCRIPTION: This command performs static analysis on the codebase to ensure it works correctly after upgrading to Hyperf 3.0. It is a general command that needs to be configured separately, and is not directly part of Hyperf. It is included as a recommended upgrade step.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog/changelog-v3.0.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer analysis\n```\n\n----------------------------------------\n\nTITLE: Get Item Count on Current Page\nDESCRIPTION: This code snippet shows how to obtain the number of items present on the current page of a paginator. The `count()` method returns an integer representing the total number of items on the current page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/paginator.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$count = $paginator->count();\n```\n\n----------------------------------------\n\nTITLE: Custom Validator Usage - PHP\nDESCRIPTION: This example demonstrates how to use a custom validation rule (in this case, 'foo') within a FormRequest. The 'name' field is validated using the 'foo' rule.  It expects you have already defined the custom `foo` validator. This assumes you have a class extending `Hyperf\\Validation\\Request\\FormRequest`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_52\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Request;\n\nuse Hyperf\\Validation\\Request\\FormRequest;\n\nclass DemoRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     */\n    public function rules(): array\n    {\n        return [\n            // 使用 foo 驗證器\n            'name' => 'foo'\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Custom Mode Configuration\nDESCRIPTION: This PHP code snippet shows how to configure Prometheus to use the custom mode. In this mode, the component only collects metrics, and the user is responsible for reporting them.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n'mode' => Constants::CUSTOM_MODE\n```\n\n----------------------------------------\n\nTITLE: Register Socket.IO Events Manually in Hyperf\nDESCRIPTION: This PHP code demonstrates how to manually register Socket.IO events within a Hyperf controller, instead of relying on annotations.  It registers the `echo` method to handle the 'event' event using `$this->on('event', [$this, 'echo'])`. This approach provides more control over event registration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/socketio-server.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\SocketIOServer\\BaseNamespace;\nuse Hyperf\\SocketIOServer\\SidProvider\\SidProviderInterface;\nuse Hyperf\\SocketIOServer\\Socket;\nuse Hyperf\\WebSocketServer\\Sender;\n\nclass WebSocketController extends BaseNamespace\n{\n    public function __construct(Sender $sender, SidProviderInterface $sidProvider) {\n        parent::__construct($sender,$sidProvider);\n        $this->on('event', [$this, 'echo']);\n    }\n\n    public function echo(Socket $socket, $data)\n    {\n        $socket->emit('event', $data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Annotations in Hyperf\nDESCRIPTION: This code snippet demonstrates how to ignore specific annotations in Hyperf using the `ignore_annotations` configuration. This prevents the annotation scanner from processing certain annotations, which can be useful when integrating with tools that use non-standard Hyperf annotations. The ArrayShape annotation from JetBrains PhpStorm is used as an example of an annotation to ignore. The configuration is located in `config/autoload/annotations.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/annotation.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse JetBrains\\PhpStorm\\ArrayShape;\n\nreturn [\n    'scan' => [\n        // ignore_annotations 陣列內的註解都會被註解掃描器忽略\n        'ignore_annotations' => [\n            ArrayShape::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Run Static Analysis\nDESCRIPTION: This command executes a static analysis check on the code to ensure it works correctly after upgrading to Hyperf 3.0. This is crucial due to the increased type restrictions introduced in the new version.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog/3.0.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer analysis\n```\n\n----------------------------------------\n\nTITLE: Defining a Task with Closure in PHP\nDESCRIPTION: This snippet demonstrates how to define a task using a closure function with Vertex::make. The second parameter is an optional key for the vertex, which is used as the key in the results array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/dag/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// Vertex::make 的第二个参数为可选参数，作为 vertex 的 key，也就是结果数组的键值。\n\\Hyperf\\Dag\\Vertex::make(function() { return 'hello'; }, \"greeting\");\n```\n\n----------------------------------------\n\nTITLE: UserDao Test\nDESCRIPTION: Demonstrates how to test the UserDao class using PHPUnit. It retrieves an instance of UserDao from the Hyperf container, calls the `first` method with a user ID, and then asserts that the returned model's ID matches the expected value. The `var_dump` is used for debugging purposes, illustrating how to inspect the result during testing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace HyperfTest\\Cases;\n\nuse HyperfTest\\HttpTestCase;\nuse App\\Service\\Dao\\UserDao;\n/**\n * @internal\n * @coversNothing\n */\nclass UserTest extends HttpTestCase\n{\n    public function testUserDaoFirst()\n    {\n        $model = \\Hyperf\\Context\\ApplicationContext::getContainer()->get(UserDao::class)->first(1);\n\n        var_dump($model);\n\n        $this->assertSame(1, $model->id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Select Queries in Hyperf (PHP)\nDESCRIPTION: This code demonstrates how to execute a `SELECT` query using the `Db` facade in Hyperf.  The `select` method returns an array of `StdClass` objects, each representing a row from the result set.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/quick-start.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\DbConnection\\Db;\n\n$users = Db::select('SELECT * FROM `user` WHERE gender = ?',[1]);  //  返回array \n\nforeach($users as $user){\n    echo $user->name;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Hyperf Nano Custom Process Example\nDESCRIPTION: Demonstrates how to add a custom process to a Hyperf Nano application. The process runs in the background and logs a message using the StdoutLoggerInterface every second.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nano.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addProcess(function(){\n    while (true) {\n        sleep(1);\n        $this->get(StdoutLoggerInterface::class)->info('Processing...');\n    }\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Alpha Numeric Validation with ASCII Option\nDESCRIPTION: The `alpha_num` rule validates that the field under validation contains only alphabetic characters and numbers (including Chinese). This example shows how to restrict the validation to ASCII characters (a-z and A-Z) by using the `ascii` option.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n'username' => 'alpha_num:ascii'\n```\n\n----------------------------------------\n\nTITLE: Adding Top-Level Metadata to Hyperf Resources via `with` Method\nDESCRIPTION: This PHP code demonstrates how to add top-level metadata to a resource response using the `with` method. The metadata defined in the `with` method will be included when the resource is rendered as a top-level resource.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n\n    public function with() : array\n    {\n        return [\n            'meta' => [\n                'key' => 'value',\n            ],\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Update php-cs-fixer Configuration\nDESCRIPTION: This diff shows the necessary changes to update the php-cs-fixer configuration when upgrading to version 3.0. It involves renaming the configuration file and updating the syntax of certain configuration options.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.2.md#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- return PhpCsFixer\\Config::create()\n+ return (new PhpCsFixer\\Config())\n\n- 'commentType' => 'PHPDoc',\n+ 'comment_type' => 'PHPDoc',\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image\nDESCRIPTION: This command builds a Docker image from the current directory and pushes it to a registry. Replace `your_namespace` and `your_project` with the actual namespace and project name. The `-t` option tags the image with the registry address, namespace, project name, and tag.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_54\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . -t registry.cn-shanghai.aliyuncs.com/your_namespace/your_project:latest\ndocker push registry.cn-shanghai.aliyuncs.com/your_namespace/your_project:latest\n```\n\n----------------------------------------\n\nTITLE: Creating an RPC Service - PHP\nDESCRIPTION: Creates an RPC service class in Hyperf. It uses the `@RpcService` annotation to define the service name, the server it should be deployed on, and the protocol to use.  The class implements a service interface `CalculatorServiceInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/rpc-multiplex/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\RPC;\n\nuse App\\JsonRpc\\CalculatorServiceInterface;\nuse Hyperf\\RpcMultiplex\\Constant;\nuse Hyperf\\RpcServer\\Annotation\\RpcService;\n\n/**\n * @RpcService(name=\"CalculatorService\", server=\"rpc\", protocol=Constant::PROTOCOL_DEFAULT)\n */\nclass CalculatorService implements CalculatorServiceInterface\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Component with a Slot in Blade\nDESCRIPTION: This snippet shows a basic component definition that utilizes a slot to inject dynamic content. The `$slot` variable is a placeholder for content passed into the component. This is used within a div tag.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<!-- /storage/view/components/alert.blade.php -->\n\n<div class=\"alert alert-danger\">\n    {{ $slot }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Drop Composite Index in Hyperf Schema\nDESCRIPTION: This example demonstrates how to drop an index based on the field names in a Hyperf schema. It drops the index associated with the combination of 'account_id' and 'created_at' columns.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nSchema:table('users', function (Blueprint $table) {\n    $table->dropIndex(['account_id', 'created_at']);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Jet via Composer\nDESCRIPTION: This command installs the `hyperf/jet` package using Composer, which is required for using the Jet RPC client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/jet.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/jet\n```\n\n----------------------------------------\n\nTITLE: Creating Elasticsearch Client Manually with Coroutine Support\nDESCRIPTION: This example demonstrates how to manually create an Elasticsearch client with coroutine support in Hyperf. It checks if the code is running inside a coroutine, and if so, creates a `PoolHandler` to manage connections. Then configures hosts and uses builder to create the client and retrieve info.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/elasticsearch.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Elasticsearch\\ClientBuilder;\nuse Hyperf\\Guzzle\\RingPHP\\PoolHandler;\nuse Swoole\\Coroutine;\n\n$builder = ClientBuilder::create();\nif (Coroutine::getCid() > 0) {\n    $handler = make(PoolHandler::class, [\n        'option' => [\n            'max_connections' => 50,\n        ],\n    ]);\n    $builder->setHandler($handler);\n}\n\n$client = $builder->setHosts(['http://127.0.0.1:9200'])->build();\n\n$info = $client->info();\n```\n\n----------------------------------------\n\nTITLE: Check if On First Page with Paginator\nDESCRIPTION: Determines whether the paginator is currently on the first page. Useful for disabling or hiding the \"Previous\" button on the first page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/paginator.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$onFirstPage = $paginator->onFirstPage();\n```\n\n----------------------------------------\n\nTITLE: Hyperf View Configuration Example\nDESCRIPTION: Example configuration file for the Hyperf View component, demonstrating the engine, mode, view path, and cache path settings. The engine specifies the view rendering engine to use, the mode specifies if rendering should be done in task or sync mode, and the config array contains paths for view and cache files.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nuse Hyperf\\View\\Mode;\nuse Hyperf\\View\\Engine\\BladeEngine;\n\nreturn [\n    // 使用的渲染引擎\n    'engine' => BladeEngine::class,\n    // 不填寫則默認為 Task 模式，推薦使用 Task 模式\n    'mode' => Mode::TASK,\n    'config' => [\n        // 若下列文件夾不存在請自行創建\n        'view_path' => BASE_PATH . '/storage/view/',\n        'cache_path' => BASE_PATH . '/runtime/view/',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Publishing Hyperf Rate Limit Configuration\nDESCRIPTION: Publishes the default configuration file for the Hyperf Rate Limit component. This command makes the configuration file available for modification in your project's config directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/rate-limit.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/rate-limit\n```\n\n----------------------------------------\n\nTITLE: Dynamic Component - HTML\nDESCRIPTION: Shows how to use the `dynamic-component` to render a component based on a variable.  This is useful when the component to render is not known until runtime.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_42\n\nLANGUAGE: html\nCODE:\n```\n    <x-dynamic-component :component=\"$componentName\" class=\"mt-4\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Error Message (Chinese) - PHP\nDESCRIPTION: This code demonstrates how to define a custom error message for a custom validation rule in Chinese. It shows the addition to the `storage/languages/zh_CN/validation.php` file to define the error message for the `foo` rule. Requires a `validation.php` in your languages folder.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_51\n\nLANGUAGE: PHP\nCODE:\n```\n    'foo' => ' :attribute 必須是 foo',\n```\n\n----------------------------------------\n\nTITLE: Modify Swoole Event Class - PHP\nDESCRIPTION: Updates the `server.php` configuration file to use the new `Hyperf\\Server\\Event` class instead of the deprecated `Hyperf\\Server\\SwooleEvent` class.  This is necessary because the `SwooleEvent` class has been renamed in Hyperf 2.1. Requires editing the 'callbacks' section of the server.php configuration file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.1.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\nuse Hyperf\\Server\\Server;\n\nreturn [\n    'mode' => SWOOLE_BASE,\n    'servers' => [\n        [\n            'name' => 'http',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9501,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [Hyperf\\HttpServer\\Server::class, 'onRequest'],\n            ],\n        ],\n    ],\n    'callbacks' => [\n        Event::ON_BEFORE_START => [Hyperf\\Framework\\Bootstrap\\ServerStartCallback::class, 'beforeStart'],\n        Event::ON_WORKER_START => [Hyperf\\Framework\\Bootstrap\\WorkerStartCallback::class, 'onWorkerStart'],\n        Event::ON_PIPE_MESSAGE => [Hyperf\\Framework\\Bootstrap\\PipeMessageCallback::class, 'onPipeMessage'],\n        Event::ON_WORKER_EXIT => [Hyperf\\Framework\\Bootstrap\\WorkerExitCallback::class, 'onWorkerExit'],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Get Cache TTL in Model\nDESCRIPTION: This code shows how to define a custom cache TTL for a specific model.  The `getCacheTTL` method allows you to override the default TTL set in the configuration file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model-cache.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model implements CacheableInterface\n{\n    use Cacheable;\n    \n    /**\n     * 快取 10 分鐘，返回 null 則使用配置檔案中設定的超時時間\n     * @return int|null\n     */\n    public function getCacheTTL(): ?int\n    {\n        return 600;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonRPC Trace Aspect\nDESCRIPTION: This configuration adds the JsonRpcAspect to the aspects.php file, enabling tracing for JsonRPC calls.  It requires the corresponding TraceMiddleware to be added on the server-side.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tracer.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    Hyperf\\Tracer\\Aspect\\JsonRpcAspect::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Select Fields - PHP\nDESCRIPTION: This demonstrates how to dynamically add a select field to an existing query builder instance using `addSelect()`.  First, it selects the 'name' column, then adds the 'age' column to the selection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$query = Db::table('users')->select('name');\n\n$users = $query->addSelect('age')->get();\n```\n\n----------------------------------------\n\nTITLE: Example Test Case\nDESCRIPTION: A complete example test case using PHPUnit and Hyperf\\Testing\\Client to test a Hyperf application. It defines a test class `ExampleTest` with a `testExample` method that makes various HTTP requests (GET, POST, JSON, FILE) and asserts the responses.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace HyperfTest\\Cases;\n\nuse Hyperf\\Testing\\Client;\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @internal\n * @coversNothing\n */\nclass ExampleTest extends TestCase\n{\n    protected Client $client;\n\n    public function __construct($name = null, array $data = [], $dataName = '')\n    {\n        parent::__construct($name, $data, $dataName);\n        $this->client = make(Client::class);\n    }\n\n    public function testExample()\n    {\n        $this->assertTrue(true);\n\n        $res = $this->client->get('/');\n\n        $this->assertSame(0, $res['code']);\n        $this->assertSame('Hello Hyperf.', $res['data']['message']);\n        $this->assertSame('GET', $res['data']['method']);\n        $this->assertSame('Hyperf', $res['data']['user']);\n\n        $res = $this->client->get('/', ['user' => 'developer']);\n\n        $this->assertSame(0, $res['code']);\n        $this->assertSame('developer', $res['data']['user']);\n\n        $res = $this->client->post('/', [\n            'user' => 'developer',\n        ]);\n        $this->assertSame('Hello Hyperf.', $res['data']['message']);\n        $this->assertSame('POST', $res['data']['method']);\n        $this->assertSame('developer', $res['data']['user']);\n\n        $res = $this->client->json('/', [\n            'user' => 'developer',\n        ]);\n        $this->assertSame('Hello Hyperf.', $res['data']['message']);\n        $this->assertSame('POST', $res['data']['method']);\n        $this->assertSame('developer', $res['data']['user']);\n\n        $res = $this->client->file('/', ['name' => 'file', 'file' => BASE_PATH . '/README.md']);\n\n        $this->assertSame('Hello Hyperf.', $res['data']['message']);\n        $this->assertSame('POST', $res['data']['method']);\n        $this->assertSame('README.md', $res['data']['file']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Issues with Coroutines in Magic Methods in Hyperf (PHP)\nDESCRIPTION: This code demonstrates potential issues when switching coroutines inside PHP magic methods like `__get`, `__set`, and `__isset`. It showcases how unexpected behavior can occur due to the asynchronous nature of coroutines within these methods. It creates a `Foo` class with these magic methods that introduce a sleep delay, and then uses coroutines to call these methods to show race conditions. Requires `vendor/autoload.php` and `Swoole` extension.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/important.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nrequire_once 'vendor/autoload.php';\n\nuse function Hyperf\\Coroutine\\go;\n\nSwoole\\Coroutine::set(['hook_flags' => SWOOLE_HOOK_ALL]);\n\nclass Foo\n{\n    public function __get(string $name)\n    {\n        sleep(1);\n        return $name;\n    }\n\n    public function __set(string $name, mixed $value)\n    {\n        sleep(1);\n        var_dump($name, $value);\n    }\n\n    public function __isset(string $name): bool\n    {\n        sleep(1);\n        var_dump($name);\n        return true;\n    }\n}\n\n$foo = new Foo();\ngo(static function () use ($foo) {\n    var_dump(isset($foo->xxx));\n});\n\ngo(static function () use ($foo) {\n    var_dump(isset($foo->xxx));\n});\n\n\\Swoole\\Event::wait();\n```\n\n----------------------------------------\n\nTITLE: Convert Doctrine Annotations to PHP8 Attributes (Shell)\nDESCRIPTION: This shell command uses the hyperf/code-generator package to convert all Doctrine Annotations to PHP8 Attributes in the application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/3.0.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp bin/hyperf.php code:generate -D app\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Snowflake Component\nDESCRIPTION: This command installs the hyperf/snowflake component using composer. It adds the component to your project's dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/snowflake.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/snowflake\n```\n\n----------------------------------------\n\nTITLE: Creating Elasticsearch Client in Hyperf\nDESCRIPTION: This code snippet demonstrates how to create an Elasticsearch client instance within a Hyperf application using the ClientBuilderFactory. It retrieves the factory from the container, sets the Elasticsearch host, builds the client, and then retrieves the server info using the client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/elasticsearch.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Elasticsearch\\ClientBuilderFactory;\n\n// If created in coroutine environment will use coroutine handler, if created in non-coroutine environment will not change.\n$builder = $this->container->get(ClientBuilderFactory::class)->create();\n\n$client = $builder->setHosts(['http://127.0.0.1:9200'])->build();\n\n$info = $client->info();\n```\n\n----------------------------------------\n\nTITLE: Generating a Middleware using Hyperf CLI\nDESCRIPTION: Command to generate a new middleware using the Hyperf CLI tool. This command generates a middleware class file in the specified namespace. The namespace reflects the folder structure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/middleware/middleware.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nphp ./bin/hyperf.php gen:middleware Auth/FooMiddleware\n```\n\n----------------------------------------\n\nTITLE: Adjust composer.json scripts\nDESCRIPTION: This snippet details the changes required in the `composer.json` file due to AOP logic changes in version 2.0. It removes the `init-proxy.sh` execution statement and modifies the `post-autoload-dump` command to `rm -rf runtime/container`. This ensures that proxy classes are correctly handled and prevents potential issues during deployment.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.0.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"scripts\": {\n        \"post-root-package-install\": [\n            \"@php -r \\\"file_exists('.env') || copy('.env.example', '.env');\\\"\"\n        ],\n        \"post-autoload-dump\": [\n            \"rm -rf runtime/container\"\n        ],\n        \"analyse\": \"phpstan analyse --memory-limit 300M -l 0 -c phpstan.neon ./app ./config\",\n        \"cs-fix\": \"php-cs-fixer fix $1\",\n        \"start\": \"php ./bin/hyperf.php start\",\n        \"test\": \"co-phpunit -c phpunit.xml --colors=always\"\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Process Parameters\nDESCRIPTION: This example showcases how to configure various parameters of a custom process, such as the number of processes, process name, redirection of standard input/output, pipe type, and enabling coroutines. These can be defined either by overriding the corresponding properties in the subclass or within the `#[Process]` annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/process.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process(name: \"user-process\", redirectStdinStdout: false, pipeType: 2, enableCoroutine: true)]\nclass FooProcess extends AbstractProcess\n{\n    /**\n     * 程序數量\n     */\n    public int $nums = 1;\n\n    /**\n     * 程序名稱\n     */\n    public string $name = 'user-process';\n\n    /**\n     * 重定向自定義程序的標準輸入和輸出\n     */\n    public bool $redirectStdinStdout = false;\n\n    /**\n     * 管道型別\n     */\n    public int $pipeType = 2;\n\n    /**\n     * 是否啟用協程\n     */\n    public bool $enableCoroutine = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Model Hook Implementation: Overriding created_at in PHP\nDESCRIPTION: This code snippet demonstrates how to use model hooks in Hyperf to modify model attributes before saving.  The example shows a `User` model with a `saving` method that overrides the `created_at` field with a specific value when the model is being saved. This leverages the `Hyperf\\Database\\Model\\Events\\Saving` event.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/event.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\Database\\Model\\Events\\Saving;\n\n/**\n * @property $id\n * @property $name\n * @property $gender\n * @property $created_at\n * @property $updated_at\n */\nclass User extends Model\n{\n    /**\n     * The table associated with the model.\n     *\n     * @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = ['id', 'name', 'gender', 'created_at', 'updated_at'];\n\n    protected $casts = ['id' => 'integer', 'gender' => 'integer'];\n\n    public function saving(Saving $event)\n    {\n        $this->setCreatedAt('2019-01-01');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Class Map Configuration for Coroutine Replacement\nDESCRIPTION: This code snippet shows the configuration for the `class_map` feature in Hyperf. It maps the original `Hyperf\\Coroutine\\Coroutine` class to a custom implementation located at `BASE_PATH . '/class_map/Hyperf/Coroutine/Coroutine.php'`. This allows the application to use the custom coroutine implementation instead of the default one, enabling features such as automatic context copying.  BASE_PATH is a constant that represents the root directory of the application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/annotation.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Coroutine\\Coroutine;\n\nreturn [\n    'scan' => [\n        'paths' => [\n            BASE_PATH . '/app',\n        ],\n        'ignore_annotations' => [\n            'mixin',\n        ],\n        'class_map' => [\n            // 需要對映的類名 => 類所在的檔案地址\n            Coroutine::class => BASE_PATH . '/class_map/Hyperf/Coroutine/Coroutine.php',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple HTTP Servers in Hyperf (PHP)\nDESCRIPTION: This snippet shows how to configure multiple HTTP servers listening on different ports. It defines two servers, 'http' and 'innerHttp', on ports 9501 and 9502 respectively.  Each server has its own set of callbacks for handling requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/overview.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'servers' => [\n        [\n            'name' => 'http',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9501,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [Hyperf\\HttpServer\\Server::class, 'onRequest'],\n            ],\n        ],\n        [\n            'name' => 'innerHttp',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9502,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => ['InnerHttp', 'onRequest'],\n            ],\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Demo Logic Test with Constructor Injection Stub - PHP\nDESCRIPTION: Tests the `DemoLogic` class by using a stub for the `DemoApi` dependency. It mocks the `Container` to return a `DemoLogic` instance with the API stub injected via the constructor. Assertions verify that the `DemoLogic` returns the expected result from the API stub.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/testing.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace HyperfTest\\Cases;\n\nuse App\\Api\\DemoApi;\nuse App\\Logic\\DemoLogic;\nuse Hyperf\\Di\\Container;\nuse HyperfTest\\HttpTestCase;\nuse Mockery;\n\nclass DemoLogicTest extends HttpTestCase\n{\n    public function tearDown(): void\n    {\n        Mockery::close();\n    }\n\n    public function testIndex()\n    {\n        $res = $this->getContainer()->get(DemoLogic::class)->test();\n\n        $this->assertEquals(1, $res['status']);\n    }\n\n    /**\n     * @return Container\n     */\n    protected function getContainer()\n    {\n        $container = Mockery::mock(Container::class);\n\n        $apiStub = $this->createMock(DemoApi::class);\n\n        $apiStub->method('test')->willReturn([\n            'status' => 1,\n        ]);\n\n        $container->shouldReceive('get')->with(DemoLogic::class)->andReturn(new DemoLogic($apiStub));\n\n        return $container;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Model using specific database connection (PHP)\nDESCRIPTION: This code shows how to define a model in Hyperf that uses a specific database connection, overriding the default. The `$connection` property is set to 'test', ensuring that all queries against this model use the 'test' database configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/quick-start.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n * \n * @link     https://www.hyperf.io\n * @document https://doc.hyperf.io\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\n\nnamespace App\\Model;\n\n/**\n * @property int $id\n * @property string $mobile\n * @property string $realname\n */\nclass User extends Model\n{\n    /**\n     * The table associated with the model.\n     *\n     * @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * The connection name for the model.\n     *\n     * @var string\n     */\n    protected $connection = 'test';\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = ['id', 'mobile', 'realname'];\n\n    /**\n     * The attributes that should be cast to native types.\n     *\n     * @var array\n     */\n    protected $casts = ['id' => 'integer'];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Kafka\nDESCRIPTION: Installs the `hyperf/kafka` component using composer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/kafka.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/kafka\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf View Engine\nDESCRIPTION: This command installs the hyperf/view-engine package using Composer, adding it as a dependency to your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/view-engine\n```\n\n----------------------------------------\n\nTITLE: Display Queue Status\nDESCRIPTION: Shows the current queue status using the queue:info command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\n$ php bin/hyperf.php queue:info {queue_name}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Casts for Model\nDESCRIPTION: This adds custom casts functionality for models in Hyperf, enabling the definition and use of custom type conversions for model attributes. It introduces Castable interface, CastsAttributes interface, CastsInboundAttributes interface, Model\\Builder::withCasts, Model::loadMorph, Model::loadMorphCount, and Model::syncAttributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.0.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\ninterface Castable\n```\n\nLANGUAGE: PHP\nCODE:\n```\ninterface CastsAttributes\n```\n\nLANGUAGE: PHP\nCODE:\n```\ninterface CastsInboundAttributes\n```\n\nLANGUAGE: PHP\nCODE:\n```\nModel\\Builder::withCasts\n```\n\nLANGUAGE: PHP\nCODE:\n```\nModel::loadMorph\n```\n\nLANGUAGE: PHP\nCODE:\n```\nModel::loadMorphCount\n```\n\nLANGUAGE: PHP\nCODE:\n```\nModel::syncAttributes\n```\n\n----------------------------------------\n\nTITLE: Forcing Index - PHP\nDESCRIPTION: Shows how to force the database to use a specific index in a query using `FORCE INDEX`.  This can be useful when the database's query optimizer is not choosing the optimal index. Requires the `Hyperf\\DbConnection\\Db` facade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nDb::table(Db::raw(\"{$table} FORCE INDEX({$index})\"));\n```\n\n----------------------------------------\n\nTITLE: Using Custom Packer for HTTP Testing\nDESCRIPTION: This PHP code demonstrates how to use a custom Packer implementation with the `Hyperf\\Testing\\Client`.  It defines an anonymous class implementing PackerInterface to handle packing and unpacking data as strings, then it's used to make a JSON request.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/testing.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Testing\\Client;\nuse Hyperf\\Contract\\PackerInterface;\n\n$client = make(Client::class, [\n    'packer' => new class() implements PackerInterface {\n        public function pack($data): string\n        {\n            return $data;\n        }\n\n        public function unpack(string $data)\n        {\n            return $data;\n        }\n    },\n]);\n\n$result = $client->json('/user/0',[\n    'nickname' =>'Hyperf'\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer to Use Local Component\nDESCRIPTION: This snippet demonstrates how to modify the `composer.json` file of a Hyperf project to include an unreleased component located in a local directory. It requires defining the component in the `require` section and specifying its path in the `repositories` section.  After modifying the `composer.json`, run `composer update -o`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/component-guide/create.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require\": {\n        \"your_component/your_component\": \"dev-master\"\n    },\n    \"repositories\": {\n        \"your_component\": {\n            \"type\": \"path\",\n            \"url\": \"/opt/your_component\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Overtrue Flysystem Qiniu Adapter\nDESCRIPTION: This shell command installs the `overtrue/flysystem-qiniu` adapter using composer, required to work with Qiniu for file storage in Hyperf. The correct version constraints for flysystem v2.0 are also given.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.2.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-qiniu:^2.0\"\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Translation Component\nDESCRIPTION: Installs the Hyperf translation component using Composer. This component allows you to add internationalization support to your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/translation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/translation\n```\n\n----------------------------------------\n\nTITLE: Join Subquery - PHP\nDESCRIPTION: Shows how to join a subquery using `joinSub()`, `leftJoinSub()`, and `rightJoinSub()`.  The method accepts the subquery, an alias for the subquery, and a closure defining the join condition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$latestPosts = Db::table('posts')\n    ->select('user_id', Db::raw('MAX(created_at) as last_post_created_at'))\n    ->where('is_published', true)\n    ->groupBy('user_id');\n\n$users = Db::table('users')\n    ->joinSub($latestPosts, 'latest_posts', function($join) {\n        $join->on('users.id', '=', 'latest_posts.user_id');\n    })->get();\n```\n\n----------------------------------------\n\nTITLE: Executing Phar Archive\nDESCRIPTION: This command executes the generated Phar archive. It starts the application bundled within the `phar` file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/phar.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nphp your_project.phar start\n```\n\n----------------------------------------\n\nTITLE: Customizing Low-Frequency Component - PHP\nDESCRIPTION: This snippet demonstrates how to customize the low-frequency component used by the connection pool to manage idle connections. It extends the `Hyperf\\Pool\\Frequency` class and overrides the `time`, `lowFrequency`, and `lowFrequencyInterval` properties to adjust the frequency of connection release.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/pool.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Pool;\n\nclass Frequency extends \\Hyperf\\Pool\\Frequency\n{\n    /**\n     * 被計算頻率的時間間隔\n     */\n    protected int $time = 10;\n\n    /**\n     * 觸發低頻的頻率\n     */\n    protected int $lowFrequency = 5;\n\n    /**\n     * 連續觸發低頻的最小時間間隔\n     */\n    protected int $lowFrequencyInterval = 60;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adjust WebSocket Controller parameters in PHP\nDESCRIPTION: Demonstrates how to adjust the WebSocket controller's onMessage and onOpen method parameter type hints in Hyperf 1.1. The parameter type hints have been changed to `Swoole\\WebSocket\\Server`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/1.1.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnMessageInterface;\nuse Hyperf\\Contract\\OnOpenInterface;\nuse Swoole\\Http\\Request;\nuse Swoole\\Websocket\\Frame;\nuse Swoole\\WebSocket\\Server as WebSocketServer;\n\nclass WebSocketController implements OnMessageInterface, OnOpenInterface\n{\n    public function onMessage(WebSocketServer $server, Frame $frame): void\n    {\n    }\n\n    public function onOpen(WebSocketServer $server, Request $request): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Git Source and Install Gitlab Runner\nDESCRIPTION: This script updates the git source to the latest version using IUS and installs Gitlab Runner. It installs a newer version of git and then installs the gitlab-runner package. Requires IUS repository setup.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl https://setup.ius.io | sh\n$ yum -y install git2u\n$ git version\n$ yum install gitlab-runner\n```\n\n----------------------------------------\n\nTITLE: Passing Additional HTML Attributes to Components (HTML)\nDESCRIPTION: This snippet demonstrates how to pass additional HTML attributes, not defined in the component's constructor, to a component.  These attributes are automatically added to the component's 'attribute bag', accessible in the view.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n    <x-alert type=\"error\" :message=\"$message\" class=\"mt-4\"/>\n```\n\n----------------------------------------\n\nTITLE: Getting Usage Output (Bash)\nDESCRIPTION: Shows an example of the usage information that's printed when running the help command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/hyperf.php demo:command --help\n# 輸出\n...\nUsage:\n  demo:command\n  demo:command --name 演示程式碼\n```\n\n----------------------------------------\n\nTITLE: Get Paginator URLs for Next, Previous, and Specific Pages\nDESCRIPTION: Retrieves URLs for the next page, previous page, or a specific page number. These URLs are used to navigate between pages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/paginator.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// 下一頁的 URL\n$nextPageUrl = $paginator->nextPageUrl();\n// 上一頁的 URL\n$previousPageUrl = $paginator->previousPageUrl();\n// 獲取指定 $page 頁數的 URL\n$url = $paginator->url($page);\n```\n\n----------------------------------------\n\nTITLE: Use Resource in Controller\nDESCRIPTION: Demonstrates how to use a resource class within a controller.  A new instance of the resource is created with a `User` model and then converted to a response using `toResponse()`.  Requires importing the resource and model.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Resource\\User as UserResource;\nuse App\\Model\\User;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserResource(User::first()))->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example of Soft Link Verification\nDESCRIPTION: This shows an example output of the `ls -l` command, confirming the creation of soft links from vendor folders to source folders within the hyperf project. It allows modification of the underlying Hyperf code by editing files in the vendor folder.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/component-guide/intro.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ncache -> ../../../hyperf/src/cache\ncommand -> ../../../hyperf/src/command\nconfig -> ../../../hyperf/src/config\ncontract -> ../../../hyperf/src/contract\ndatabase -> ../../../hyperf/src/database\ndb-connection -> ../../../hyperf/src/db-connection\ndevtool -> ../../../hyperf/src/devtool\ndi -> ../../../hyperf/src/di\ndispatcher -> ../../../hyperf/src/dispatcher\nevent -> ../../../hyperf/src/event\nexception-handler -> ../../../hyperf/src/exception-handler\nframework -> ../../../hyperf/src/framework\nguzzle -> ../../../hyperf/src/guzzle\nhttp-message -> ../../../hyperf/src/http-message\nhttp-server -> ../../../hyperf/src/http-server\nlogger -> ../../../hyperf/src/logger\nmemory -> ../../../hyperf/src/memory\npaginator -> ../../../hyperf/src/paginator\npool -> ../../../hyperf/src/pool\nprocess -> ../../../hyperf/src/process\nredis -> ../../../hyperf/src/redis\nserver -> ../../../hyperf/src/server\ntesting -> ../../../hyperf/src/testing\nsupport -> ../../../hyperf/src/support\n```\n\n----------------------------------------\n\nTITLE: Publishing Hyperf Scout Configuration File\nDESCRIPTION: Publishes the default Scout configuration file to your application's config directory. This allows you to customize the Scout configuration settings, such as the default search engine and connection details.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/scout\n```\n\n----------------------------------------\n\nTITLE: Create Hyperf Project with Swow via Composer\nDESCRIPTION: This command creates a new Hyperf project using the `hyperf/swow-skeleton` package, which is designed to be a starting point for web applications. This skeleton is specifically configured to use the Swow driver.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/install.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer create-project hyperf/swow-skeleton \n```\n\n----------------------------------------\n\nTITLE: Defining a Delayed Message Producer\nDESCRIPTION: Defines a producer for delayed messages in Hyperf. It utilizes the `ProducerDelayedMessageTrait` and configures the exchange type to DIRECT. The payload is set in the constructor.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/amqp.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Amqp\\Producer;\n\nuse Hyperf\\Amqp\\Annotation\\Producer;\nuse Hyperf\\Amqp\\Message\\ProducerDelayedMessageTrait;\nuse Hyperf\\Amqp\\Message\\ProducerMessage;\nuse Hyperf\\Amqp\\Message\\Type;\n\n#[Producer]\nclass DelayDirectProducer extends ProducerMessage\n{\n    use ProducerDelayedMessageTrait;\n\n    protected string $exchange = 'ext.hyperf.delay';\n\n    protected Type|string $type = Type::DIRECT;\n\n    protected array|string $routingKey = '';\n\n    public function __construct($data)\n    {\n        $this->payload = $data;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install symfony/serializer - Shell\nDESCRIPTION: Installs the `symfony/serializer` component via Composer to resolve \"Interface 'Symfony\\Component\\Serializer\\SerializerInterface' not found\" error in PHP 7.3\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.2.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/serializer\n```\n\n----------------------------------------\n\nTITLE: Adjusting Dockerfile for Hyperf 2.0\nDESCRIPTION: This Dockerfile snippet illustrates the necessary adjustments for Hyperf 2.0.  It includes setting environment variables for timezone, application environment, and scan cacheability. Critically, it adds `php bin/hyperf.php` to the `RUN` command to pre-generate proxy classes and annotation scan cache, optimizing startup time in production.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.0.md#_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV TIMEZONE=${timezone:-'Asia/Shanghai'} \\\n    APP_ENV=prod \\\n    SCAN_CACHEABLE=(true)\n\nCOPY . /opt/www\nRUN composer install --no-dev -o && php bin/hyperf.php\n\nEXPOSE 9501\n\nENTRYPOINT [\"php\", \"/opt/www/bin/hyperf.php\", \"start\"]\n\n```\n\n----------------------------------------\n\nTITLE: Running Hyperf commands outside of Command class\nDESCRIPTION: This snippet shows how to programmatically execute a Hyperf command outside of a Command class. It uses Symfony's `ArrayInput` and `NullOutput` to simulate command-line input and output. The code retrieves the application instance from the container and calls the `run` method to execute the command. Two different ways to execute the command are shown: one that catches and handles exceptions, and one that does not.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$command = 'foo';\n\n$params = [\"command\" => $command, \"--foo\" => \"foo\", \"--bar\" => \"bar\"];\n\n// You can choose the input/output according to your own needs.\n$input = new ArrayInput($params);\n$output = new NullOutput();\n\n/** @var \\Psr\\Container\\ContainerInterface $container */\n$container = \\Hyperf\\Context\\ApplicationContext::getContainer();\n\n/** @var \\Symfony\\Component\\Console\\Application $application */\n$application = $container->get(\\Hyperf\\Contract\\ApplicationInterface::class);\n$application->setAutoExit(false);\n\n// This method: will not expose exceptions during command execution and will not prevent the program from returning.\n$exitCode = $application->run($input, $output);\n\n// Another way: it will expose exceptions and require you to catch and handle runtime exceptions yourself, otherwise it will prevent the program from returning.\n$exitCode = $application->find($command)->run($input, $output);\n```\n\n----------------------------------------\n\nTITLE: Adding Conditional Attributes to Resource in Hyperf\nDESCRIPTION: This PHP code demonstrates how to add a conditional attribute ('secret') to a resource response based on the `isAdmin` method of the authenticated user. The attribute is only included if the condition is true.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'secret' => $this->when(Auth::user()->isAdmin(), 'secret-value'),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Serializer in Hyperf\nDESCRIPTION: This code snippet shows how to configure the Symfony Serializer as the normalizer in Hyperf. It involves defining a configuration array that maps the `Hyperf\\Contract\\NormalizerInterface` to an instance of `SerializerFactory` initialized with the `Serializer` class. This configuration allows Hyperf to utilize the Symfony Serializer for object serialization and deserialization.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/CHANGELOG-2.0.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Utils\\Serializer\\SerializerFactory;\nuse Hyperf\\Utils\\Serializer\\Serializer;\n\nreturn [\n    Hyperf\\Contract\\NormalizerInterface::class => new SerializerFactory(Serializer::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Installing ThinkTemplate Engine\nDESCRIPTION: Installs the ThinkTemplate engine using Composer. This makes ThinkTemplate available for rendering views with Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require sy-records/think-template\n```\n\n----------------------------------------\n\nTITLE: Update PHP-CS-Fixer Dependency\nDESCRIPTION: The code displays a change log where the first line shows how to update the php-cs-fixer dependency version to 3.0 and the following two lines shows a diff demonstrating the changes required when renaming the `.php_cs` file to `.php-cs-fixer.php` and update code accordingly.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.2.md#_snippet_6\n\nLANGUAGE: null\nCODE:\n```\n\"friendsofphp/php-cs-fixer\": \"^3.0\"\n```\n\nLANGUAGE: null\nCODE:\n```\n- return PhpCsFixer\\Config::create()\n+ return (new PhpCsFixer\\Config())\n\n- 'commentType' => 'PHPDoc',\n+ 'comment_type' => 'PHPDoc',\n```\n\n----------------------------------------\n\nTITLE: Modify config/autoload/logger.php - PHP\nDESCRIPTION: This snippet shows how to modify the `dateFormat` configuration item in the `config/autoload/logger.php` file.  This is done to maintain consistent log formatting with previous versions due to changes in default Monolog formats.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/2.0.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => [\n        'handler' => [\n            'class' => Monolog\\Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => BASE_PATH . '/runtime/logs/hyperf.log',\n                'level' => Monolog\\Logger::DEBUG,\n            ],\n        ],\n        'formatter' => [\n            'class' => Monolog\\Formatter\\LineFormatter::class,\n            'constructor' => [\n                'format' => null,\n                'dateFormat' => 'Y-m-d H:i:s',\n                'allowInlineLineBreaks' => true,\n            ],\n        ],\n        'processors' => [\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Value with value() in Hyperf\nDESCRIPTION: Shows how to fetch a single column value from a database table using the `value()` method. It extracts the value of the specified column from the first row that matches the query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$id = Db::table('user')->value('id');\nvar_dump($id);\n```\n\n----------------------------------------\n\nTITLE: Prometheus Custom Mode Configuration\nDESCRIPTION: Configures Prometheus to use the custom mode. The component only collects metrics and users need to handle the reporting.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n'mode' => Constants::CUSTOM_MODE\n```\n\n----------------------------------------\n\nTITLE: Create Hyperf project inside Docker\nDESCRIPTION: This command creates a new Hyperf project inside the Docker container. It utilizes Composer to install the hyperf/hyperf-skeleton package within the container's environment.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/install.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer create-project hyperf/hyperf-skeleton\n```\n\n----------------------------------------\n\nTITLE: Generating Form Request\nDESCRIPTION: Generates a form request class using the `gen:request` command. This simplifies the process of creating dedicated request classes for validation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/validation/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php gen:request FooRequest\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Elasticsearch\nDESCRIPTION: Installs the hyperf/elasticsearch package via composer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/elasticsearch.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Install Prometheus dependency using Composer\nDESCRIPTION: This command installs the `promphp/prometheus_client_php` package, which is required for using the Prometheus engine in the `hyperf/metric` component after the v3.1 upgrade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/3.1.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require promphp/prometheus_client_php\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Zookeeper Config\nDESCRIPTION: This command installs the Hyperf component for integrating with Zookeeper, a centralized service for maintaining configuration information.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config-center.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-zookeeper\n```\n\n----------------------------------------\n\nTITLE: Installing Zookeeper Config Center Client (Hyperf)\nDESCRIPTION: This command installs the Zookeeper client for Hyperf, enabling the application to retrieve configurations from a Zookeeper cluster.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config-center.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-zookeeper\n```\n\n----------------------------------------\n\nTITLE: Implementing CacheableInterface in a Model - PHP\nDESCRIPTION: This code shows how to integrate the `Cacheable` trait into a Hyperf model. It implements the `CacheableInterface` and uses the `Cacheable` trait, defining the table name, fillable attributes, and casts.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model-cache.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\DbConnection\\Model\\Model;\nuse Hyperf\\ModelCache\\Cacheable;\nuse Hyperf\\ModelCache\\CacheableInterface;\n\n/**\n * @property $id\n * @property $name\n * @property $gender\n * @property $created_at\n * @property $updated_at\n */\nclass User extends Model implements CacheableInterface\n{\n    use Cacheable;\n\n    /**\n     * The table associated with the model.\n     *  \n     * @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * The attributes that are mass assignable.\n     *  \n     * @var array\n     */\n    protected $fillable = ['id', 'name', 'gender', 'created_at', 'updated_at'];\n\n    protected $casts = ['id' => 'integer', 'gender' => 'integer'];\n}\n\n// 查询单个缓存\n/** @var int|string $id */\n$model = User::findFromCache($id);\n\n// 批量查询缓存，返回 Hyperf\\Database\\Model\\Collection\n/** @var array $ids */\n$models = User::findManyFromCache($ids);\n```\n\n----------------------------------------\n\nTITLE: Nested Preloading SQL Queries SQL\nDESCRIPTION: Shows the SQL queries generated by the nested preloading of morphTo association.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/relationship.md#_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\n// Search all pictures\nselect * from `images`;\n// Query the user list corresponding to the image\nselect * from `user` where `user`.`id` in (1, 2);\n// Query the list of books corresponding to the image\nselect * from `book` where `book`.`id` in (1, 2, 3);\n// Query the user list corresponding to the book list\nselect * from `user` where `user`.`id` in (1, 2);\n```\n\n----------------------------------------\n\nTITLE: Using the @verbatim Directive\nDESCRIPTION: This Blade template uses the `@verbatim` directive to embed a block of HTML that should not be processed by the Blade engine. This is useful for including JavaScript code that uses the same delimiters as Blade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n@verbatim\n    <div class=\"container\">\n        Hello, {{ name }}.\n    </div>\n@endverbatim\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf DAG via Composer\nDESCRIPTION: This command installs the hyperf/dag package using Composer, a dependency manager for PHP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/dag.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/dag\n```\n\n----------------------------------------\n\nTITLE: Define a Hyperf Event\nDESCRIPTION: Defines a simple event class named UserRegistered with a public property $user and a constructor to initialize the property. This event is used to pass user data to listeners when a user is registered.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/event.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Event;\n\nclass UserRegistered\n{\n    // 建議這裏定義成 public 屬性，以便監聽器對該屬性的直接使用，或者你提供該屬性的 Getter\n    public $user;\n    \n    public function __construct($user)\n    {\n        $this->user = $user;    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Job Class Definition (Correct)\nDESCRIPTION: This example shows the correct way to define a Job class. It only includes the necessary data (`$params`) as a property.  Dependencies like models or container instances are resolved inside the `handle()` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Job;\n\nuse Hyperf\\AsyncQueue\\Job;\n\nclass ExampleJob extends Job\n{\n    public $params;\n    \n    /**\n     * 任務執行失敗後的重試次數，即最大執行次數為 $maxAttempts+1 次\n     */\n    protected int $maxAttempts = 2;\n\n    public function __construct($params)\n    {\n        // 這裏最好是普通數據，不要使用攜帶 IO 的對象，比如 PDO 對象\n        $this->params = $params;\n    }\n\n    public function handle()\n    {\n        // 根據參數處理具體邏輯\n        // 通過具體參數獲取模型等\n        // 這裏的邏輯會在 ConsumerProcess 進程中執行\n        var_dump($this->params);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure logger in logger.php\nDESCRIPTION: Modifies the `logger.php` configuration to specify a writable directory for log files when running in Phar mode. This is necessary because the `runtime` directory within the Phar is not writable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/phar.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n     'default' => [\n         'handler' => [\n             'class' => Monolog\\Handler\\StreamHandler::class,\n             'constructor' => [\n                 'stream' => '/tmp/runtime/logs/hyperf.log',\n                 'level' => Monolog\\Logger::INFO,\n             ],\n         ],\n     ],\n];\n```\n\n----------------------------------------\n\nTITLE: Conditional Pivot Data with Custom Accessor\nDESCRIPTION: This PHP code demonstrates how to access pivot table data using a custom accessor name with `whenPivotLoadedAs`. If the 'role_user' pivot data is loaded and accessed via the 'subscription' accessor, the 'expires_at' attribute is included in the resource.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'expires_at' => $this->whenPivotLoadedAs('subscription', 'role_user', function () {\n                return $this->subscription->expires_at;\n            }),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Compose Deploy Configuration\nDESCRIPTION: This snippet defines the deploy configuration in deploy.test.yml, setting the image, environment variables, ports, replicas, restart policy, update config, networks and configs.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_23\n\nLANGUAGE: YML\nCODE:\n```\nversion: '3.7'\nservices:\n  demo:\n    image: $REGISTRY_URL/$PROJECT_NAME:test\n    environment:\n      - \"APP_PROJECT=demo\"\n      - \"APP_ENV=test\"\n    ports:\n      - 9501:9501\n    deploy:\n      replicas: 1\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 5\n      update_config:\n        parallelism: 2\n        delay: 5s\n        order: start-first\n    networks:\n      - default-network\n    configs:\n      - source: demo_v1.0\n        target: /opt/www/.env\nconfigs:\n  demo_v1.0:\n    external: true\nnetworks:\n  default-network:\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Property Annotation Usage PHP\nDESCRIPTION: This code demonstrates how to use a property annotation in Hyperf. The `PropertyAnnotation` annotation is applied to the `$bar` property within the `Foo` class.  The annotation is placed in a comment block directly above the property definition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/annotation.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Foo\n{\n    #[PropertyAnnotation]\n    private $bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Coroutine Swapping in PHP Magic Methods\nDESCRIPTION: This PHP code demonstrates the potential issues that can arise when swapping coroutines within PHP magic methods such as __get, __set, and __isset. The example highlights unexpected behavior due to the asynchronous nature of coroutines.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/important.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once 'vendor/autoload.php';\n\nuse function Hyperf\\Coroutine\\go;\n\nSwoole\\Coroutine::set(['hook_flags' => SWOOLE_HOOK_ALL]);\n\nclass Foo\n{\n    public function __get(string $name)\n    {\n        sleep(1);\n        return $name;\n    }\n\n    public function __set(string $name, mixed $value)\n    {\n        sleep(1);\n        var_dump($name, $value);\n    }\n\n    public function __isset(string $name): bool\n    {\n        sleep(1);\n        var_dump($name);\n        return true;\n    }\n}\n\n$foo = new Foo();\ngo(static function () use ($foo) {\n    var_dump(isset($foo->xxx));\n});\n\ngo(static function () use ($foo) {\n    var_dump(isset($foo->xxx));\n});\n\n\\Swoole\\Event::wait();\n```\n\n----------------------------------------\n\nTITLE: Linux Crontab Command Execution Script\nDESCRIPTION: A bash script designed for use within Linux Crontab, aimed at executing Docker commands within a container. It pulls the latest image, runs a command inside a specified Docker container, and mounts an environment file.  Requires Docker to be installed and configured.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\nbasepath=$(cd `dirname $0`; pwd)\ndocker pull registry-vpc.cn-shanghai.aliyuncs.com/namespace/project:latest\ndocker run --rm -i -v $basepath/.env:/opt/www/.env \\\n--entrypoint php registry-vpc.cn-shanghai.aliyuncs.com/namespace/project:latest \\\n/opt/www/bin/hyperf.php your_command\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Async Queues - PHP\nDESCRIPTION: This snippet shows how to configure multiple asynchronous queues in Hyperf. It defines two queue configurations, 'default' and 'other', both using the RedisDriver with different channel names. The configuration specifies driver, channel, timeout, retry settings, process count and concurrency limits.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => Hyperf\\AsyncQueue\\Driver\\RedisDriver::class,\n        'channel' => '{queue}',\n        'timeout' => 2,\n        'retry_seconds' => 5,\n        'handle_timeout' => 10,\n        'processes' => 1,\n        'concurrent' => [\n            'limit' => 2,\n        ],\n    ],\n    'other' => [\n        'driver' => Hyperf\\AsyncQueue\\Driver\\RedisDriver::class,\n        'channel' => '{other.queue}',\n        'timeout' => 2,\n        'retry_seconds' => 5,\n        'handle_timeout' => 10,\n        'processes' => 1,\n        'concurrent' => [\n            'limit' => 2,\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Rule\nDESCRIPTION: Shows how to define and use a custom validation rule using the ValidatorFactoryInterface. It extends the validator with a new rule 'foo' and defines a replacer for custom error messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/validation/README.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass IndexController\n{\n    public function bar(RequestInterface $request)\n    {\n        $factory = $this->container->get(\\Hyperf\\Validation\\Contract\\ValidatorFactoryInterface::class);\n\n        $factory->extend('foo', function ($attribute, $value, $parameters, $validator) {\n            return $value == 'foo';\n        });\n\n        $factory->replacer('foo', function ($message, $attribute, $rule, $parameters) {\n            return str_replace(':foo', $attribute, $message);\n        });\n\n        $validator = $factory->make(\n            $request->all(),\n            [\n                'name' => 'required|foo',\n            ],\n            [\n                'name.foo' => ':foo is not foo',\n            ]\n        );\n\n        if (!$validator->passes()) {\n             $validator->errors();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Language File Structure Example - PHP\nDESCRIPTION: Demonstrates the directory structure for language files in Hyperf. Language files are stored in the `storage/languages` directory, with subdirectories for each language (e.g., `en` for English, `zh_CN` for Simplified Chinese). Each language directory contains message files (e.g., `messages.php`).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/translation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// storage/languages/en/messages.php\n\nreturn [\n    'welcome' => 'Welcome to our application',\n];\n```\n\n----------------------------------------\n\nTITLE: Add Metadata to Resource Collection - Hyperf - PHP\nDESCRIPTION: Shows how to add metadata to a resource collection response in Hyperf by including the metadata directly in the `toArray` method.  The example adds a 'links' section to the response, along with the collection 'data'.  This demonstrates returning data formatted for API standards like JSON API.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: VALUE_REQUIRED Option Output (Bash)\nDESCRIPTION: Demonstrates the output when running the command with and without providing a value for the `VALUE_REQUIRED` option.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/hyperf.php demo:command\n# 輸出\nstring(6) \"Hyperf\"\n\n$ php bin/hyperf.php demo:command --name Swoole\n# 輸出\nstring(6) \"Swoole\"\n```\n\n----------------------------------------\n\nTITLE: Form Request Messages Method\nDESCRIPTION: This code snippet shows how to customize error messages in a FormRequest class by overriding the `messages` method. The method should return an array of attribute/rule pairs and their corresponding custom error messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the error message of the defined validation rule\n */\npublic function messages(): array\n{\n    return [\n        'foo.required' => 'foo is required',\n        'bar.required' => 'bar is required',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Set Calculation Precision in PHP\nDESCRIPTION: This code snippet shows how to set the calculation precision using the `calculate` method's third parameter. It initializes the calculator and specifies a precision of 2, resulting in a formatted output with two decimal places.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/rpn.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->calculate('5 1 2 + 4 * + 3 -', [], 2); // '14.00'\n```\n\n----------------------------------------\n\nTITLE: Customizing Retry Logic with Policies PHP\nDESCRIPTION: This example showcases how to create a highly customized retry annotation, `MyRetry`, which incorporates specific policies, including `MaxAttemptsRetryPolicy`, `ClassifierRetryPolicy`, and `SleepRetryPolicy`. It limits retries to a maximum of 3 attempts, retries only for `TimeoutException`, and uses a backoff strategy with a base sleep time of 100ms.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/retry.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Annotation;\n\nuse Doctrine\\Common\\Annotations\\Annotation\\Target;\n\n#[Attribute(Attribute::TARGET_METHOD)]\nclass MyRetry extends \\Hyperf\\Retry\\Annotation\\Retry\n{\n    public $policies = [\n        MaxAttemptsRetryPolicy::class,\n        ClassifierRetryPolicy::class,\n        SleepRetryPolicy::class,\n    ];\n    public $maxAttempts = 3;\n    public $base = 100;\n    public $strategy = \\Hyperf\\Retry\\BackoffStrategy::class;\n    public $retryThrowables = [\\App\\Exception\\TimeoutException::class];\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Annotation Collectors via ConfigProvider\nDESCRIPTION: This snippet shows how to provide the configuration for custom annotation collectors for components via ConfigProvider. This is important for development mode annotation re-collection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.0.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'annotations' => [\n        'scan' => [\n            'collectors' => [\n                CustomCollector::class,\n            ],\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Consul Client\nDESCRIPTION: Installs the hyperf/consul package using Composer, enabling the use of the Consul client within a Hyperf project.\nThis requires Composer to be installed and configured correctly in your environment.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/consul.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/consul\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Metric Component\nDESCRIPTION: This command installs the Hyperf Metric component using Composer, a dependency manager for PHP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/metric\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Template Engine (PHP)\nDESCRIPTION: This PHP code modifies the Hyperf View configuration to use a custom template engine, replacing the default engine with the specified class. It also sets the rendering mode and view/cache paths.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Engine\\TemplateEngine;\n\nreturn [\n    // 将 engine 参数改为您的自定义模板引擎类\n    'engine' => TemplateEngine::class,\n    'mode' => Mode::TASK,\n    'config' => [\n        'view_path' => BASE_PATH . '/storage/view/',\n        'cache_path' => BASE_PATH . '/runtime/view/',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Adjusting composer.json scripts section\nDESCRIPTION: This snippet describes how to adjust the `scripts` section of the `composer.json` file for Hyperf 2.0. Specifically, it involves removing the `init-proxy.sh` script and modifying the `post-autoload-dump` command to `rm -rf runtime/container`. This is due to the removal of the `init-proxy.sh` script in version 2.0.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.0.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"scripts\": {\n        \"post-root-package-install\": [\n            \"@php -r \\\"file_exists('.env') || copy('.env.example', '.env');\\\"\"\n        ],\n        \"post-autoload-dump\": [\n            \"rm -rf runtime/container\"\n        ],\n        \"analyse\": \"phpstan analyse --memory-limit 300M -l 0 -c phpstan.neon ./app ./config\",\n        \"cs-fix\": \"php-cs-fixer fix $1\",\n        \"start\": \"php ./bin/hyperf.php start\",\n        \"test\": \"co-phpunit -c phpunit.xml --colors=always\"\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Component Method Example (PHP)\nDESCRIPTION: This code snippet shows a component method example. This method is designed to determine if a provided option is selected, comparing it against a component property (`$this->selected`).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    /**\n     * 判断给定选项是否为当前选项\n     * @param  string  $option\n     * @return bool\n     */\n    public function isSelected($option)\n    {\n        return $option === $this->selected;\n    }\n```\n\n----------------------------------------\n\nTITLE: Install ReactiveX component\nDESCRIPTION: Installs the hyperf/reactive-x component using composer. This is a necessary step before using any of the ReactiveX features in a Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/reactive-x.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/reactive-x\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Cache via Composer\nDESCRIPTION: This command installs the hyperf/cache component using Composer, a dependency management tool for PHP. This adds the necessary files to your project, allowing you to utilize the caching functionalities.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/cache.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/cache\n```\n\n----------------------------------------\n\nTITLE: Method Annotation Usage PHP\nDESCRIPTION: This code demonstrates how to use a method annotation in Hyperf. The `MethodAnnotation` annotation is applied to the `bar()` method within the `Foo` class. The annotation is placed in a comment block directly above the method definition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/annotation.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Foo\n{\n    #[MethodAnnotation]\n    public function bar()\n    {\n        // some code\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define a gRPC Resource\nDESCRIPTION: Defines a gRPC resource class that extends `GrpcResource` and overrides the `toArray` and `expect` methods.  The `toArray` method defines how the resource is transformed into an array, and `expect` specifies the gRPC message class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace HyperfTest\\ResourceGrpc\\Stubs\\Resources;\n\nuse Hyperf\\ResourceGrpc\\GrpcResource;\nuse HyperfTest\\ResourceGrpc\\Stubs\\Grpc\\HiReply;\n\nclass HiReplyResource extends GrpcResource\n{\n    public function toArray(): array\n    {\n        return [\n            'message' => $this->message,\n            'user' => HiUserResource::make($this->user),\n        ];\n    }\n\n    public function expect(): string\n    {\n        return HiReply::class;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Searching Within a Specific Index\nDESCRIPTION: This code shows how to specify a custom index to search within, overriding the default index defined by the model's `searchableAs` method. The `within` method allows you to target a specific index for the search query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n$orders = App\\Order::search('Star Trek')\n    ->within('tv_shows_popularity_desc')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Exists Validation with Custom Query\nDESCRIPTION: The `exists:table,column` rule validates that the field under validation exists in the specified database table. This example shows how to customize the query used by the rule using the `Rule::exists` method and a `where` clause.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($data, [\n    'email' => [\n        'required',\n        Rule::exists('staff')->where(function ($query) {\n            $query->where('account_id', 1);\n        }),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Generating Delay Producer\nDESCRIPTION: This command generates the `DelayDirectProducer` using the Hyperf CLI. This producer will be used for sending delayed messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/amqp.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:amqp-producer DelayDirectProducer\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response with Product Data\nDESCRIPTION: The JSON response from the GraphQL query, including data for both the 'hello' and 'product' queries. The 'product' data contains the 'name' and 'price' fields as requested in the query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/graphql.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"data\": {\n        \"hello\": \"graphql\",\n        \"product\": {\n            \"name\": \"goods\",\n            \"price\": 156.5\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf gRPC Server Component\nDESCRIPTION: This command installs the 'hyperf/grpc-server' component using Composer. This component provides the necessary functionality to create and manage gRPC servers in a Hyperf application. This command requires Composer to be installed and configured correctly.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/grpc.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/grpc-server\n```\n\n----------------------------------------\n\nTITLE: Installing Box on Linux AArch64\nDESCRIPTION: These commands download, move, and set execute permissions for the Box binary on Linux (AArch64 architecture). Note that the binary version may be older (v0.0.3) because AARCH64 Github Actions Runner is missing. It ensures the box command is available in the system's PATH.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/eco/box.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/hyperf/box/releases/download/v0.0.3/box_php8.1_aarch64_linux -O box\nsudo mv ./box /usr/local/bin/box\nsudo chmod 755 /usr/local/bin/box\n// 確保 /usr/local/bin/box 在你的 $PATH 環境中，或者將 `box` 放到你想要的任意 $PATH 路徑中\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Autoloading (PHP)\nDESCRIPTION: This shows how to configure component autoloading in the `config/autoload/view.php` file. The `classes` and `components` keys specify the directories and namespaces to scan for components.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    'autoload' => [\n        'classes' => ['App\\\\Other\\\\Component\\\\', 'App\\\\Another\\\\Component\\\\'],\n        'components' => ['package::components.', 'components.'],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Example Test Case using Hyperf Testing Client - PHP\nDESCRIPTION: Defines an example test case using PHPUnit and `Hyperf\\Testing\\Client`. It creates a client instance, performs GET and POST requests to the root path, and asserts the expected results. It also demonstrates how to test file uploads.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/testing.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace HyperfTest\\Cases;\n\nuse Hyperf\\Testing\\Client;\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @internal\n * @coversNothing\n */\nclass ExampleTest extends TestCase\n{\n    protected Client $client;\n\n    public function __construct($name = null, array $data = [], $dataName = '')\n    {\n        parent::__construct($name, $data, $dataName);\n        $this->client = make(Client::class);\n    }\n\n    public function testExample()\n    {\n        $this->assertTrue(true);\n\n        $res = $this->client->get('/');\n\n        $this->assertSame(0, $res['code']);\n        $this->assertSame('Hello Hyperf.', $res['data']['message']);\n        $this->assertSame('GET', $res['data']['method']);\n        $this->assertSame('Hyperf', $res['data']['user']);\n\n        $res = $this->client->get('/', ['user' => 'developer']);\n\n        $this->assertSame(0, $res['code']);\n        $this->assertSame('developer', $res['data']['user']);\n\n        $res = $this->client->post('/', [\n            'user' => 'developer',\n        ]);\n        $this->assertSame('Hello Hyperf.', $res['data']['message']);\n        $this->assertSame('POST', $res['data']['method']);\n        $this->assertSame('developer', $res['data']['user']);\n\n        $res = $this->client->json('/', [\n            'user' => 'developer',\n        ]);\n        $this->assertSame('Hello Hyperf.', $res['data']['message']);\n        $this->assertSame('POST', $res['data']['method']);\n        $this->assertSame('developer', $res['data']['user']);\n\n        $res = $this->client->file('/', ['name' => 'file', 'file' => BASE_PATH . '/README.md']);\n\n        $this->assertSame('Hello Hyperf.', $res['data']['message']);\n        $this->assertSame('POST', $res['data']['method']);\n        $this->assertSame('README.md', $res['data']['file']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom CastsValue Class for Type Conversion\nDESCRIPTION: Implements a custom `UserInfo` class extending `CastsValue` for advanced attribute manipulation, enabling synchronized updates between the object and the underlying model attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/mutators.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Caster;\n\nuse Hyperf\\Database\\Model\\CastsValue;\n\n/**\n * @property string $name\n * @property int $gender\n */\nclass UserInfo extends CastsValue\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Task using Runner Interface in Hyperf DAG\nDESCRIPTION: This PHP code defines a task by implementing the `\\Hyperf\\Dag\\Runner` interface and creating a class that implements the `run` method.  The `Vertex::of` method is then used to create a vertex from an instance of the class. The optional second argument defines the vertex key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/dag.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass MyJob implements \\Hyperf\\Dag\\Runner {\n    public function run($results = []) {\n        return 'hello';\n    }\n}\n\n\\Hyperf\\Dag\\Vertex::of(new MyJob(), \"greeting\");\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Callback Example (Swoole 1.x)\nDESCRIPTION: This snippet demonstrates the asynchronous callback style used in Swoole 1.x. It showcases the nested callback functions required for handling asynchronous operations like database queries and updates. It illustrates the complexity and potential for callback hell.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/coroutine.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$db = new swoole_mysql();\n$config = array(\n    'host' => '127.0.0.1',\n    'port' => 3306,\n    'user' => 'test',\n    'password' => 'test',\n    'database' => 'test',\n);\n\n$db->connect($config, function ($db, $r) {\n    // 從 users 表中查詢一條資料\n    $sql = 'select * from users where id = 1';\n    $db->query($sql, function(swoole_mysql $db, $r) {\n        if ($r !== false) {\n            // 查詢成功後修改一條資料\n            $updateSql = 'update users set name=\"new name\" where id = 1';\n            $db->query($updateSql, function (swoole_mysql $db, $r) {\n                $rows = $db->affected_rows;\n                if ($r === true) {\n                    return $this->response->end('更新成功');\n                }\n            });\n        }\n        $db->close();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Hyperf Server Configuration\nDESCRIPTION: This snippet shows a sample `server.php` configuration file, showcasing the settings for configuring the Hyperf server, including enabling coroutines, setting worker numbers, and enabling TCP_NODELAY.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 這裏省略了該文件的其它配置\n    'settings' => [\n        'enable_coroutine' => true, // 開啓內置協程\n        'worker_num' => swoole_cpu_num(), // 設置啓動的 Worker 進程數\n        'pid_file' => BASE_PATH . '/runtime/hyperf.pid', // master 進程的 PID\n        'open_tcp_nodelay' => true, // TCP 連接發送數據時會關閉 Nagle 合併算法，立即發往客户端連接\n        'max_coroutine' => 100000, // 設置當前工作進程最大協程數量\n        'open_http2_protocol' => true, // 啓用 HTTP2 協議解析\n        'max_request' => 100000, // 設置 worker 進程的最大任務數\n        'socket_buffer_size' => 2 * 1024 * 1024, // 配置客户端連接的緩存區長度\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Aliyun 8 cores 16G ram performance output\nDESCRIPTION: This code snippet shows the output of a `wrk` benchmark test on an Aliyun server with 8 cores and 16GB of RAM. The test was run against `http://127.0.0.1:9501/` with 1024 connections and 8 threads for 10 seconds. It showcases the performance metrics such as latency, requests per second, and transfer rate.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/README.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nRunning 10s test @ http://127.0.0.1:9501/\n  8 threads and 1024 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdevs\n    Latency    10.08ms    6.82ms  56.66ms   70.19%\n    Req/Sec    13.17k     5.94k   33.06k    84.12%\n  1049478 requests in 10.10s, 190.16MB read\nRequests/sec: 103921.49\nTransfer/sec:     18.83MB\n```\n\n----------------------------------------\n\nTITLE: Configuring Hyperf Task Component\nDESCRIPTION: This configuration snippet adds `Task` related configurations to the `server.php` file. It sets the number of task workers and disables coroutines in the task worker to avoid data confusion. It also defines callbacks for `ON_TASK` and `ON_FINISH` events.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/task.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 這裡省略了其它不相關的配置項\n    'settings' => [\n        // Task Worker 數量，根據您的伺服器配置而配置適當的數量\n        'task_worker_num' => 8,\n        // 因為 `Task` 主要處理無法協程化的方法，所以這裡推薦設為 `false`，避免協程下出現資料混淆的情況\n        'task_enable_coroutine' => false,\n    ],\n    'callbacks' => [\n        // Task callbacks\n        Event::ON_TASK => [Hyperf\\Framework\\Bootstrap\\TaskCallback::class, 'onTask'],\n        Event::ON_FINISH => [Hyperf\\Framework\\Bootstrap\\FinishCallback::class, 'onFinish'],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Overriding SocketIO Parameters\nDESCRIPTION: This PHP snippet demonstrates how to override the default SocketIO parameters, such as `pingTimeout`, by creating a custom SocketIOFactory. It shows how to retrieve the required dependencies from the container, instantiate the SocketIO class, set the desired parameters, and then return the instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/socketio-server.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Kernel;\n\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\SocketIOServer\\Parser\\Decoder;\nuse Hyperf\\SocketIOServer\\Parser\\Encoder;\nuse Hyperf\\SocketIOServer\\SidProvider\\SidProviderInterface;\nuse Hyperf\\SocketIOServer\\SocketIO;\nuse Hyperf\\WebSocketServer\\Sender;\nuse Psr\\Container\\ContainerInterface;\n\nclass SocketIOFactory\n{\n    public function __invoke(ContainerInterface $container)\n    {\n        $io = new SocketIO(\n            $container->get(StdoutLoggerInterface::class),\n            $container->get(Sender::class),\n            $container->get(Decoder::class),\n            $container->get(Encoder::class),\n            $container->get(SidProviderInterface::class)\n        );\n\n        // 重寫 pingTimeout 參數\n        $io->setPingTimeout(10000);\n\n        return $io;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure RPC Client - Hyperf\nDESCRIPTION: Configures the RPC client consumer in `config/autoload/services.php`. Defines the service name, interface, protocol, load balancer, registry, nodes, and options such as connect timeout, receive timeout, package max length, retry settings, client count, and heartbeat interval.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/rpc-multiplex.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'consumers' => [\n        [\n            'name' => 'CalculatorService',\n            'service' => App\\JsonRpc\\CalculatorServiceInterface::class,\n            'id' => App\\JsonRpc\\CalculatorServiceInterface::class,\n            'protocol' => Hyperf\\RpcMultiplex\\Constant::PROTOCOL_DEFAULT,\n            'load_balancer' => 'random',\n            // 這個消費者要從哪個服務中心獲取節點信息，如不配置則不會從服務中心獲取節點信息\n            'registry' => [\n                'protocol' => 'consul',\n                'address' => 'http://127.0.0.1:8500',\n            ],\n            'nodes' => [\n                ['host' => '127.0.0.1', 'port' => 9502],\n            ],\n            'options' => [\n                'connect_timeout' => 5.0,\n                'recv_timeout' => 5.0,\n                'settings' => [\n                    // 包體最大值，若小於 Server 返回的數據大小，則會拋出異常，故儘量控制包體大小\n                    'package_max_length' => 1024 * 1024 * 2,\n                ],\n                // 重試次數，默認值為 2\n                'retry_count' => 2,\n                // 重試間隔，毫秒\n                'retry_interval' => 100,\n                // 多路複用客户端數量\n                'client_count' => 4,\n                // 心跳間隔 非 numeric 表示不開啓心跳\n                'heartbeat' => 30,\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Dump Autoload Files\nDESCRIPTION: This snippet demonstrates how to regenerate the Composer autoloader. This is useful when code changes are not being reflected, particularly when `scan_cacheable` is set to `true`. This command regenerates the autoloader based on the current project structure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/questions.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer dump-autoload -o\n```\n\n----------------------------------------\n\nTITLE: Installing Qiniu Adapter (Flysystem v1.0)\nDESCRIPTION: Install the Qiniu adapter for Flysystem v1.0. This adapter provides support for storing files on Qiniu Cloud Storage. Requires overtrue/flysystem-qiniu.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/filesystem.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-qiniu:^1.0\"\n```\n\n----------------------------------------\n\nTITLE: Rebooting Machine\nDESCRIPTION: This command reboots the machine to apply the changes made to the kernel and GRUB configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\nreboot\n```\n\n----------------------------------------\n\nTITLE: Register Custom Driver Listener (Hyperf)\nDESCRIPTION: This code creates a listener `RegisterDriverListener` to register a custom service governance driver (`FooDriver`) with the `DriverManager`. The listener is triggered by the `BootApplication` event.  It injects the `DriverManager`, registers the 'foo' driver and creates an instance of `FooDriver` using `make`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/service-register.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n * \n * @link     https://www.hyperf.io\n * @document https://hyperf.wiki\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\nnamespace App\\ServiceGovernance\\Listener;\n\nuse App\\ServiceGovernance\\FooDriver;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\nuse Hyperf\\ServiceGovernance\\DriverManager;\n\n#[Listener]\nclass RegisterDriverListener implements ListenerInterface\n{\n    protected DriverManager $driverManager;\n\n    public function __construct(DriverManager $manager)\n    {\n        $this->driverManager = $manager;\n    }\n\n    public function listen(): array\n    {\n        return [\n            BootApplication::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        $this->driverManager->register('foo', make(FooDriver::class));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query Listener using ReactiveX\nDESCRIPTION: This code demonstrates how to use ReactiveX to filter and throttle SQL query events. It listens for `QueryExecuted` events, filters those exceeding 100ms, groups them by connection name, throttles the groups to once per second, formats the SQL, and logs the slow queries.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/reactive-x.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\ReactiveX\\Example;\n\nuse Hyperf\\Database\\Events\\QueryExecuted;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BeforeWorkerStart;\nuse Hyperf\\Logger\\LoggerFactory;\nuse Hyperf\\ReactiveX\\Observable;\nuse Hyperf\\Collection\\Arr;\nuse Hyperf\\Stringable\\Str;\nuse Psr\\Container\\ContainerInterface;\n\nclass SqlListener implements ListenerInterface\n{\n    private $logger;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->logger = $container->get(LoggerFactory::class)->get('sql');\n    }\n\n    public function listen(): array\n    {\n        return [\n            BeforeWorkerStart::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        Observable::fromEvent(QueryExecuted::class)\n            ->filter(\n                fn ($event) => $event->time > 100\n            )\n            ->groupBy(\n                fn ($event) => $event->connectionName\n            )\n            ->flatMap(\n                fn ($group) => $group->throttle(1000)\n            )\n            ->map(\n                function ($event) {\n                    $sql = $event->sql;\n                    if (! Arr::isAssoc($event->bindings)) {\n                        foreach ($event->bindings as $key => $value) {\n                            $sql = Str::replaceFirst('?', \"'{$value}'\", $sql);\n                        }\n                    }\n                    return [$event->connectionName, $event->time, $sql];\n                }\n            )->subscribe(\n                fn ($message) => $this->logger->info(sprintf('slow log: [%s] [%s] %s', ...$message))\n            );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Drop Multiple Columns in Hyperf Schema\nDESCRIPTION: This code shows how to drop multiple columns from a table in a Hyperf database schema.  It removes both the 'name' and 'age' columns from the 'users' table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nSchema::table('users', function (Blueprint $table) {\n    // 刪除 name 字段\n    $table->dropColumn('name');\n    // 刪除多個字段\n    $table->dropColumn(['name', 'age']);\n});\n```\n\n----------------------------------------\n\nTITLE: Install Box on Windows\nDESCRIPTION: This command downloads the Box executable for Windows.  Place the `box.exe` file into a directory included in your system's PATH environment variable. Use `box.exe` instead of `box` when running commands.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/eco/box.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\ncurl -o box.exe https://github.com/hyperf/box/releases/download/v0.5.5/box_x64_windows.exe\n// Put `box.exe` into any path in $PATH env that you want, and use `box.exe` instead of `box` when executing on Windows\n```\n\n----------------------------------------\n\nTITLE: Login to Alibaba Cloud Docker Registry - Shell\nDESCRIPTION: These commands configure the gitlab-runner user to use docker and login to the Alibaba Cloud Docker Registry. It adds the user to the docker group, switches to the user, and then uses docker login to authenticate.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/docker-swarm.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nusermod -aG docker gitlab-runner\nsu gitlab-runner\ndocker login --username=your_name registry.cn-shanghai.aliyuncs.com\n```\n\n----------------------------------------\n\nTITLE: Hyperf Injection Override Order Example (PHP)\nDESCRIPTION: This code demonstrates the override order of the `#[Inject]` annotation in Hyperf.  The `Origin` class inherits from `ParentClass` and uses traits `Foo1` and `Foo2`.  Each class and trait attempts to inject a dependency into the `$foo` property. The final injected dependency into `$foo` in the `Origin` class will be `Foo1` because the injection in the class itself overrides the injections from the traits and the parent class. If the `$foo` property did not exist in Origin, it would be injected with `Foo2` (from the first used trait).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass ParentClass\n{\n    /**\n     * @var Foo4 \n     */\n    #[Inject]\n    protected $foo;\n}\n\ntrait Foo1\n{\n    /**\n     * @var Foo2 \n     */\n    #[Inject]\n    protected $foo;\n}\n\ntrait Foo2\n{\n    /**\n     * @var Foo3\n     */\n    #[Inject]\n    protected $foo;\n}\n\nclass Origin extends ParentClass\n{\n    use Foo1;\n    use Foo2;\n\n    /**\n     * @var Foo1\n     */\n    #[Inject]\n    protected $foo;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Hyperf Application with supervisorctl\nDESCRIPTION: This snippet provides a series of commands to manage the Hyperf application using the supervisorctl utility. It demonstrates how to start, restart, stop, check status, update configuration, and reload all programs managed by Supervisor. These commands allow administrators to control the lifecycle of their applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/supervisor.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# 啟動 hyperf 應用\nsupervisorctl start hyperf\n# 重啟 hyperf 應用\nsupervisorctl restart hyperf\n# 停止 hyperf 應用\nsupervisorctl stop hyperf\n# 檢視所有被管理專案執行狀態\nsupervisorctl status\n# 重新載入配置檔案\nsupervisorctl update\n# 重新啟動所有程式\nsupervisorctl reload\n```\n\n----------------------------------------\n\nTITLE: Implementing Signal Handler\nDESCRIPTION: Registers a signal handler for the SIGTERM signal on the Worker process. When the signal is received, the signal value is dumped using var_dump().\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/signal.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Signal;\n\nuse Hyperf\\Signal\\Annotation\\Signal;\nuse Hyperf\\Signal\\SignalHandlerInterface;\n\n#[Signal]\nclass TermSignalHandler implements SignalHandlerInterface\n{\n    public function listen(): array\n    {\n        return [\n            [SignalHandlerInterface::WORKER, SIGTERM],\n        ];\n    }\n\n    public function handle(int $signal): void\n    {\n        var_dump($signal);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Http Proxy with Nginx for Hyperf\nDESCRIPTION: This Nginx configuration sets up a reverse proxy for Hyperf HTTP servers. It defines an upstream block with multiple Hyperf server addresses and configures the server block to forward requests, set headers, and handle cookies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/nginx.md#_snippet_0\n\nLANGUAGE: Nginx\nCODE:\n```\n# 至少需要一個 Hyperf 節點，多個配置多行\nupstream hyperf {\n    # Hyperf HTTP Server 的 IP 及 埠\n    server 127.0.0.1:9501;\n    server 127.0.0.1:9502;\n}\n\nserver {\n    # 監聽埠\n    listen 80; \n    # 繫結的域名，填寫您的域名\n    server_name proxy.hyperf.io;\n\n    location / {\n        # 將客戶端的 Host 和 IP 資訊一併轉發到對應節點  \n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        \n        # 轉發Cookie，設定 SameSite\n        proxy_cookie_path / \"/; secure; HttpOnly; SameSite=strict\";\n        \n        # 執行代理訪問真實伺服器\n        proxy_pass http://hyperf;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging other-attr (Blade)\nDESCRIPTION: Demonstrates how to use `merge()` with the second parameter\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_17\n\nLANGUAGE: blade\nCODE:\n```\n// 定义\n<div {{ $attributes->merge(['class' => 'alert alert-'.$type, 'other-attr' => 'foo'], true) }}>{{ $message }}</div>\n// 使用\n<x-alert type=\"error\" :message=\"$message\" class=\"mb-4\" other-attr=\"bar\"/>\n// 呈现\n<div class=\"alert alert-error mb-4\" other-attr=\"foo bar\"><!-- $message 变量的内容 --></div>\n```\n\n----------------------------------------\n\nTITLE: Flushing Cache with Event Listener\nDESCRIPTION: This example shows how to flush the cache associated with the `Cacheable` annotation using an event listener and `DeleteListenerEvent`. It dispatches an event to trigger the cache deletion.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/cache.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Cache\\Listener\\DeleteListenerEvent;\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\n\nclass SystemService\n{\n    #[Inject]\n    protected EventDispatcherInterface $dispatcher;\n\n    public function flushCache($userId)\n    {\n        $this->dispatcher->dispatch(new DeleteListenerEvent('user-update', [$userId]));\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Custom Overlay Network\nDESCRIPTION: This script creates a custom Docker overlay network named `default-network`.  It specifies a subnet, enables encryption, and allows attaching containers. Adjust the subnet if conflicts arise.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\ndocker network create \\\n--driver overlay \\\n--subnet 10.0.0.1/8 \\\n--opt encrypted \\\n--attachable \\\ndefault-network\n```\n\n----------------------------------------\n\nTITLE: Initializing ClassLoader in Hyperf Entry Point (bin/hyperf.php)\nDESCRIPTION: This code snippet shows how to initialize the ClassLoader in the Hyperf entry point file (bin/hyperf.php). This is a required step due to changes in AOP logic in Hyperf 2.0. It involves adding `Hyperf\\Di\\ClassLoader::init();` as the first line within the entry point's anonymous function. This ensures the proper functioning of AOP features within the application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.0.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nini_set('display_errors', 'on');\nini_set('display_startup_errors', 'on');\n\nerror_reporting(E_ALL);\ndate_default_timezone_set('Asia/Shanghai');\n\n! defined('BASE_PATH') && define('BASE_PATH', dirname(__DIR__, 1));\n! defined('SWOOLE_HOOK_FLAGS') && define('SWOOLE_HOOK_FLAGS', SWOOLE_HOOK_ALL);\n\nrequire BASE_PATH . '/vendor/autoload.php';\n\n// Self-called anonymous function that creates its own scope and keep the global namespace clean.\n(function () {\n    Hyperf\\Di\\ClassLoader::init();\n\n    /** @var \\Psr\\Container\\ContainerInterface $container */\n    $container = require BASE_PATH . '/config/container.php';\n\n    $application = $container->get(\\Hyperf\\Contract\\ApplicationInterface::class);\n    $application->run();\n})();\n\n```\n\n----------------------------------------\n\nTITLE: VALUE_NONE Option Output (Bash)\nDESCRIPTION: Shows the output when running the command with and without the `VALUE_NONE` option. Demonstrates how the option acts as a boolean flag.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/hyperf.php demo:command\n# 輸出\nbool(false)\n\n$ php bin/hyperf.php demo:command -o\n# 輸出\nbool(true)\n\n$ php bin/hyperf.php demo:command --opt\n# 輸出\nbool(true)\n```\n\n----------------------------------------\n\nTITLE: Disabling Swoole short function names via CLI\nDESCRIPTION: This command shows how to start the Hyperf server while disabling Swoole short function names using the `-d` flag in the PHP command. This is an alternative to modifying the `php.ini` file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/questions.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp -d swoole.use_shortname=Off bin/hyperf.php start\n```\n\n----------------------------------------\n\nTITLE: Memory Driver Configuration in Hyperf Cache\nDESCRIPTION: This code demonstrates how to configure the memory driver for caching in Hyperf. The memory driver stores cached data in the process memory, offering fast access but limited persistence.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/cache.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'memory' => [\n        'driver' => Hyperf\\Cache\\Driver\\MemoryDriver::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: UserDao Implementation\nDESCRIPTION: Defines a `UserDao` class for querying user information from the database. It includes a `first` method that retrieves a user by ID, throwing a `BusinessException` if the user does not exist.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Service\\Dao;\n\nuse App\\Constants\\ErrorCode;\nuse App\\Exception\\BusinessException;\nuse App\\Model\\User;\n\nclass UserDao extends Dao\n{\n    /**\n     * @param $id\n     * @param bool $throw\n     * @return\n     */\n    public function first($id, $throw = true)\n    {\n        $model = User::query()->find($id);\n        if ($throw && empty($model)) {\n            throw new BusinessException(ErrorCode::USRE_NOT_EXIST);\n        }\n        return $model;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Symbolic Link Output\nDESCRIPTION: This snippet shows an example of the expected output from the `ls -l` command in the `vendor/hyperf` directory. It displays a list of symbolic links pointing to the corresponding directories in the `hyperf/src` directory.  This demonstrates that the local path repository setup has successfully created the necessary links.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/component-guide/intro.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncache -> ../../../hyperf/src/cache\ncommand -> ../../../hyperf/src/command\nconfig -> ../../../hyperf/src/config\ncontract -> ../../../hyperf/src/contract\ndatabase -> ../../../hyperf/src/database\ndb-connection -> ../../../hyperf/src/db-connection\ndevtool -> ../../../hyperf/src/devtool\ndi -> ../../../hyperf/src/di\ndispatcher -> ../../../hyperf/src/dispatcher\nevent -> ../../../hyperf/src/event\nexception-handler -> ../../../hyperf/src/exception-handler\nframework -> ../../../hyperf/src/framework\nguzzle -> ../../../hyperf/src/guzzle\nhttp-message -> ../../../hyperf/src/http-message\nhttp-server -> ../../../hyperf/src/http-server\nlogger -> ../../../hyperf/src/logger\nmemory -> ../../../hyperf/src/memory\npaginator -> ../../../hyperf/src/paginator\npool -> ../../../hyperf/src/pool\nprocess -> ../../../hyperf/src/process\nredis -> ../../../hyperf/src/redis\nserver -> ../../../hyperf/src/server\ntesting -> ../../../hyperf/src/testing\nsupport -> ../../../hyperf/src/support\n```\n\n----------------------------------------\n\nTITLE: Installing Box on Windows\nDESCRIPTION: This command downloads the Box executable for Windows using curl. It instructs users to add the executable to their system's PATH environment variable. Note that the executable must be invoked as `box.exe` on Windows command line.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/eco/box.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\ncurl -o box.exe https://github.com/hyperf/box/releases/download/v0.5.5/box_x64_windows.exe\n// 將 `box.exe` 放到你想要的任意 Path 環境變數路徑中，同時 Windows 版本在執行時需要在命令列中使用 `box.exe` 而不是 `box`\n```\n\n----------------------------------------\n\nTITLE: Joining Docker Swarm\nDESCRIPTION: These commands show how to retrieve the join token for manager and worker nodes, and then join the Swarm cluster using the token and manager IP address.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\n# 顯示manager節點的TOKEN\n$ docker swarm join-token manager\n# 加入manager節點到叢集\n$ docker swarm join --token <token> ip:2377\n\n# 顯示worker節點的TOKEN\n$ docker swarm join-token worker\n# 加入worker節點到叢集\n$ docker swarm join --token <token> ip:2377\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Session Component\nDESCRIPTION: Installs the hyperf/session component using Composer. This command adds the necessary files and dependencies to your project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/session.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/session\n```\n\n----------------------------------------\n\nTITLE: Defining a Delayed Message Consumer\nDESCRIPTION: Defines a consumer for delayed messages in Hyperf.  It uses both `ProducerDelayedMessageTrait` and `ConsumerDelayedMessageTrait`. It configures the exchange, queue, and type to DIRECT and consumes the messages. The `consumeMessage` method processes the received data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/amqp.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Amqp\\Consumer;\n\nuse Hyperf\\Amqp\\Annotation\\Consumer;\nuse Hyperf\\Amqp\\Message\\ConsumerDelayedMessageTrait;\nuse Hyperf\\Amqp\\Message\\ConsumerMessage;\nuse Hyperf\\Amqp\\Message\\ProducerDelayedMessageTrait;\nuse Hyperf\\Amqp\\Message\\Type;\nuse Hyperf\\Amqp\\Result;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n#[Consumer(nums: 1)]\nclass DelayDirectConsumer extends ConsumerMessage\n{\n    use ProducerDelayedMessageTrait;\n    use ConsumerDelayedMessageTrait;\n\n    protected string $exchange = 'ext.hyperf.delay';\n    \n    protected string $queue = 'queue.hyperf.delay';\n    \n    protected Type|string $type = Type::DIRECT; //Type::FANOUT;\n    \n    protected array|string $routingKey = '';\n\n    public function consumeMessage($data, AMQPMessage $message): Result\n    {\n        var_dump($data, 'delay+direct consumeTime:' . (microtime(true)));\n        return Result::ACK;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster in Dockerfile\nDESCRIPTION: This configuration shows how to configure Redis cluster settings within a Dockerfile, using echo to set environment variables and tee to write to a configuration file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/redis.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n    # - config PHP\n    && { \\\n        echo \"upload_max_filesize=100M\"; \\\n        echo \"post_max_size=108M\"; \\\n        echo \"memory_limit=1024M\"; \\\n        echo \"date.timezone=${TIMEZONE}\"; \\\n        echo \"redis.clusters.seeds = \\\"mycluster[]=localhost:7000&mycluster[]=localhost:7001\\\"\"; \\\n        echo \"redis.clusters.timeout = \\\"mycluster=5\\\"\"; \\\n        echo \"redis.clusters.read_timeout = \\\"mycluster=10\\\"\"; \\\n        echo \"redis.clusters.auth = \\\"mycluster=password\\\"\";\n    } | tee conf.d/99-overrides.ini\n```\n\n----------------------------------------\n\nTITLE: Disabling Timestamps\nDESCRIPTION: This snippet shows how to disable automatic timestamp management (`created_at` and `updated_at`) by setting the `$timestamps` property to `false`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    public bool $timestamps = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing phpunit with phpdbg for Coverage (Hyperf)\nDESCRIPTION: This shell command executes phpunit using phpdbg to generate code coverage data. The -dmemory_limit option increases the memory limit, and the -qrr flags run phpdbg in quiet mode and then run the specified script.  The -c option specifies the phpunit configuration file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nphpdbg -dmemory_limit=1024M -qrr ./vendor/bin/co-phpunit -c phpunit.xml --colors=always\n```\n\n----------------------------------------\n\nTITLE: Installing Smarty Engine\nDESCRIPTION: Installs the Smarty template engine using Composer. This allows you to use Smarty templates in your Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require smarty/smarty\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Zookeeper Config\nDESCRIPTION: This command installs the Hyperf component for integrating with Zookeeper, a centralized service for maintaining configuration information.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config-center.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-zookeeper\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Retry Component\nDESCRIPTION: This command installs the Hyperf Retry component using Composer, a dependency manager for PHP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/retry.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/retry\n```\n\n----------------------------------------\n\nTITLE: Modifying Docker Service File\nDESCRIPTION: This command modifies the Docker service file to allow TCP connections to Docker. The `-H tcp://0.0.0.0:2375` option adds a TCP listener on port 2375. Exposing Docker over TCP can pose security risks, so consider using TLS for encryption.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_44\n\nLANGUAGE: shell\nCODE:\n```\nExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375\n```\n\n----------------------------------------\n\nTITLE: Checking pcntl extension\nDESCRIPTION: This command checks if the `pcntl` extension is installed and enabled in PHP. This extension is required for v2.2 of Hyperf due to annotation scanning. The command is executed via the command line.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/questions.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp --ri pcntl\n```\n\n----------------------------------------\n\nTITLE: Magic Method Example (PHP)\nDESCRIPTION: This PHP code demonstrates the potential issues when using magic methods (__get, __set, __isset) in conjunction with coroutines in Hyperf.  It showcases how switching coroutines within these methods can lead to unexpected behavior and incorrect results. The example uses `sleep` to simulate time-consuming operations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/important.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once 'vendor/autoload.php';\n\nuse function Hyperf\\Coroutine\\go;\n\nSwoole\\Coroutine::set(['hook_flags' => SWOOLE_HOOK_ALL]);\n\nclass Foo\n{\n    public function __get(string $name)\n    {\n        sleep(1);\n        return $name;\n    }\n\n    public function __set(string $name, mixed $value)\n    {\n        sleep(1);\n        var_dump($name, $value);\n    }\n\n    public function __isset(string $name): bool\n    {\n        sleep(1);\n        var_dump($name);\n        return true;\n    }\n}\n\n$foo = new Foo();\ngo(static function () use ($foo) {\n    var_dump(isset($foo->xxx));\n});\n\ngo(static function () use ($foo) {\n    var_dump(isset($foo->xxx));\n});\n\n\\Swoole\\Event::wait();\n```\n\n----------------------------------------\n\nTITLE: Defining Error Codes and Messages (Pre-Hyperf Constants)\nDESCRIPTION: This snippet shows a basic way of defining error codes and messages in PHP before using the Hyperf Constants component. It defines constants for error codes and an array to map the codes to messages.  The lookup involves searching twice in the class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/constants.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass ErrorCode\n{\n    const SERVER_ERROR = 500;\n    const PARAMS_INVALID = 1000;\n\n    public static $messages = [\n        self::SERVER_ERROR => 'Server Error',\n        self::PARAMS_INVALID => '引數非法'\n    ];\n}\n\n$message = ErrorCode::messages[ErrorCode::SERVER_ERROR] ?? '未知錯誤';\n```\n\n----------------------------------------\n\nTITLE: Specifying TLinux Repository\nDESCRIPTION: This snippet configures the system to use the TLinux repository for package management. It adds a new repository definition file to the `/etc/yum.repos.d/` directory.  This allows the system to install specific kernel versions optimized for TLinux.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\ntee /etc/yum.repos.d/CentOS-TLinux.repo <<-'EOF'\n[Tlinux]\nname=Tlinux for redhat/centos $releasever - $basearch\nfailovermethod=priority\ngpgcheck=0\ngpgkey=http://mirrors.tencentyun.com/epel/RPM-GPG-KEY-EPEL-7\nenabled=1\nbaseurl=https://mirrors.tencent.com/tlinux/2.4/tlinux/x86_64/\nEOF\n```\n\n----------------------------------------\n\nTITLE: Using Filesystem via DI\nDESCRIPTION: Demonstrates how to use the League\\Flysystem\\Filesystem class via dependency injection to interact with the configured filesystem. This example shows basic file operations like writing, reading, deleting, and renaming files.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/filesystem.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nclass IndexController extends AbstractController\n{\n    public function example(\\League\\Flysystem\\Filesystem $filesystem)\n    {\n        // Process Upload\n        $file = $this->request->file('upload');\n        $stream = fopen($file->getRealPath(), 'r+');\n        $filesystem->writeStream(\n            'uploads/'.$file->getClientFilename(),\n            $stream\n        );\n        fclose($stream);\n        \n        // Write Files\n        $filesystem->write('path/to/file.txt', 'contents');\n\n        // Add local file\n        $stream = fopen('local/path/to/file.txt', 'r+');\n        $result = $filesystem->writeStream('path/to/file.txt', $stream);\n        if (is_resource($stream)) {\n            fclose($stream);\n        }\n\n        // Update Files\n        $filesystem->update('path/to/file.txt', 'new contents');\n\n        // Check if a file exists\n        $exists = $filesystem->has('path/to/file.txt');\n\n        // Read Files\n        $contents = $filesystem->read('path/to/file.txt');\n\n        // Delete Files\n        $filesystem->delete('path/to/file.txt');\n\n        // Rename Files\n        $filesystem->rename('filename.txt', 'newname.txt');\n\n        // Copy Files\n        $filesystem->copy('filename.txt', 'duplicate.txt');\n\n        // list the contents\n        $filesystem->listContents('path', false);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Model via Command Line Hyperf\nDESCRIPTION: This command is used to generate a model based on the specified table name. The command leverages AST (Abstract Syntax Tree) to generate the model, allowing for easy regeneration of models after method additions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/gen.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:model table_name\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Annotation Collectors in Hyperf\nDESCRIPTION: This snippet demonstrates how to configure custom annotation collectors in the `annotations.php` file for applications, ensuring that custom annotations are correctly collected and re-collected in development mode.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.0.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'scan' => [\n        'collectors' => [\n            CustomCollector::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Default Metric Interval Configuration\nDESCRIPTION: Specifies the interval in seconds for pushing default metrics. The value is obtained from the `DEFAULT_METRIC_INTERVAL` environment variable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n'default_metric_interval' => env('DEFAULT_METRIC_INTERVAL', 5),\n```\n\n----------------------------------------\n\nTITLE: Use Resource in Controller (Repeated)\nDESCRIPTION: Reiterates using the resource in the controller, returning the defined resource to the API consumer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\User as UserResource;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserResource(User::find(1)))->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure Box Kernel\nDESCRIPTION: These commands configure the Box Kernel to use either Swow or Swoole. The default is Swow. Swoole is not supported on Windows and only supports PHP 8.1. `box config set kernel <kernel>`\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/eco/box.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n// set to Swow Kernel [default]\nbox config set kernel swow\n\n// set to Swoole Kernel (NOT supported on Windows)\nbox config set kernel swoole\n```\n\n----------------------------------------\n\nTITLE: Build Phar Archive (Default)\nDESCRIPTION: Builds a default Phar archive for the Hyperf application using the `phar:build` command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/phar.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp bin/hyperf.php phar:build\n```\n\n----------------------------------------\n\nTITLE: Publish Metric Configuration File\nDESCRIPTION: Publishes the default `metric.php` configuration file to the `config/autoload` directory using the Hyperf console command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/metric\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Kernel Version\nDESCRIPTION: Installs a specific version of the kernel, kernel development tools, and kernel headers using the yum package manager. This ensures compatibility with the TLinux environment.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\nyum -y install kernel-devel-4.14.105-19.0012.tl2.x86_64 kernel-4.14.105-19.0013.tl2.x86_64 kernel-headers-4.14.105-19.0013.tl2.x86_64\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus Dependencies\nDESCRIPTION: This command installs the Prometheus client library for PHP using Composer. This is required to use the Prometheus driver with the Hyperf Metric component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Prometheus\ncomposer require promphp/prometheus_client_php\n```\n\n----------------------------------------\n\nTITLE: Adjust config/container.php PHP\nDESCRIPTION: This code configures the dependency injection container using `DefinitionSourceFactory`. It enables annotation scanning cache by default (the `true` parameter).  This snippet replaces the entire content of the `config/container.php` file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/1.1.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Initial a dependency injection container that implemented PSR-11 and return the container.\n */\ndeclare(strict_types=1);\n\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Di\\Definition\\DefinitionSourceFactory;\nuse Hyperf\\Utils\\ApplicationContext;\nuse Psr\\Container\\ContainerInterface;\n\n$container = new Container((new DefinitionSourceFactory(true))());\nif (! $container instanceof ContainerInterface) {\n    throw new RuntimeException('The dependency injection container is invalid.');\n}\nreturn ApplicationContext::setContainer($container);\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Aliyun ACM Config\nDESCRIPTION: This command installs the Hyperf component for integrating with Aliyun ACM (Application Configuration Management), a configuration management service provided by Alibaba Cloud.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config-center.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-aliyun-acm\n```\n\n----------------------------------------\n\nTITLE: Configuring Config Data\nDESCRIPTION: Example content for the Config in Portainer, `demo_v1.0` configuration settings, covering database, and redis connections. These are typically set up in the Portainer UI and used to configure the running container via environment variables or volume mounts.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nAPP_NAME=demo\n\nDB_DRIVER=mysql\nDB_HOST=localhost\nDB_PORT=3306\nDB_DATABASE=hyperf\nDB_USERNAME=root\nDB_PASSWORD=\nDB_CHARSET=utf8mb4\nDB_COLLATION=utf8mb4_unicode_ci\nDB_PREFIX=\n\nREDIS_HOST=localhost\nREDIS_AUTH=\nREDIS_PORT=6379\nREDIS_DB=0\n```\n\n----------------------------------------\n\nTITLE: Deleting Records via Query Builder\nDESCRIPTION: This example deletes records from the search index using the `unsearchable` method on a model query or collection.  This is more efficient than loading the models and deleting them individually.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// 通過模型查詢刪除...\nApp\\Order::where('price', '>', 100)->unsearchable();\n\n// 通過模型關係刪除...\n$user->orders()->unsearchable();\n\n// 通過集合刪除...\n$orders->unsearchable();\n```\n\n----------------------------------------\n\nTITLE: Creating Model Instances with firstOrNew in Hyperf\nDESCRIPTION: The `firstOrNew` method attempts to find a matching record in the database based on the given attributes. If no matching model is found, it returns a new model instance but does not save it to the database. The returned instance can then be further modified and saved manually using the `save` method. This snippet demonstrates usage of `firstOrNew`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n//  通過 name 查找用户，不存在則創建一個實例...\n$user = User::firstOrNew(['name' => 'Hyperf']);\n\n// 通過 name 查找用户，不存在則使用 name 和 gender, age 屬性創建一個實例...\n$user = User::firstOrNew(\n    ['name' => 'Hyperf'],\n    ['gender' => 1, 'age' => 20]\n);\n\n```\n\n----------------------------------------\n\nTITLE: Registering a Component - PHP\nDESCRIPTION: Registers the `Alert` component in the `view.php` configuration file under the `components` array. This allows the component to be used in Blade templates via the `<x-alert/>` tag.  This snippet shows registering a component manually either in `config/autoload/view.php` or in the `ConfigProvider` of a package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // ...\n    'components' => [\n        'alert' => \\App\\View\\Component\\Alert::class,\n    ],\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass ConfigProvider\n{\n    public function __invoke()\n    {\n        return [\n            // ...others config\n            'view' => [\n                // ...others config\n                'components' => [\n                    'package-alert' => \\App\\View\\Component\\Alert::class,\n                ],\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aliyun OSS Adapter (Flysystem v1.0)\nDESCRIPTION: Installs the Aliyun OSS adapter for Flysystem v1.0, enabling file storage on Alibaba Cloud OSS.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/filesystem.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require xxtime/flysystem-aliyun-oss\n```\n\n----------------------------------------\n\nTITLE: Install Memory Adapter (Flysystem v2.0)\nDESCRIPTION: This command installs the Memory adapter for Flysystem v2.0 using Composer. This adapter provides an in-memory filesystem for testing or temporary storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/filesystem.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"league/flysystem-memory:^2.0\"\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf DAG using Composer\nDESCRIPTION: This command installs the `hyperf/dag` package using Composer, a dependency manager for PHP.  This is the first step to using the DAG task orchestration library.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/dag.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/dag\n```\n\n----------------------------------------\n\nTITLE: Deleting Models by Query in Hyperf\nDESCRIPTION: This code demonstrates how to delete multiple models that match specific criteria using the `delete` method on a query builder.  It deletes all `User` models where `gender` is 1. Note that batch deletes do not trigger model events.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Model\\User;\n\n// Note that when using the delete method, certain query conditions must be established to safely delete data. If there is no where condition, the entire data table will be deleted.\nUser::query()->where('gender', 1)->delete();\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks with Closures in Hyperf DAG\nDESCRIPTION: This example shows how to define a task using a closure within the Hyperf DAG framework. The `Vertex::make` method creates a vertex representing the task, and the closure defines the task's logic. An optional key can be provided as the second argument for easier result retrieval.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/dag.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Vertex::make 的第二個引數為可選引數，作為 vertex 的 key，也就是結果陣列的鍵值。\n\\Hyperf\\Dag\\Vertex::make(function() { return 'hello'; }, \"greeting\");\n```\n\n----------------------------------------\n\nTITLE: Hyperf XA transOut Branch Transaction\nDESCRIPTION: This snippet demonstrates the `transOut` branch transaction in Hyperf. It receives an amount via a POST request and updates the `order` table, simulating a withdrawal operation. It uses `$dbTransaction->xaExecute` for executing the SQL within the XA transaction.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/distributed-transaction.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n   /**\n     * @param RequestInterface $request\n     * @return array\n     */\n    #[RequestMapping(methods: [\"GET\", \"POST\", \"PUT\"], path: 'api/transOut')]\n    public function transOut(RequestInterface $request): array\n    {\n        $content = $request->post('amount');\n        $amount = $content['amount'] ?? 10;\n        // 模擬分散式系統下transOut方法\n        $this->xa->localTransaction(function (DBTransactionInterface $dbTransaction) use ($amount) {\n            // 請使用 DBTransactionInterface 處理本地 Mysql 事物\n            $dbTransaction->xaExecute('UPDATE `order` set `amount` = `amount` - ? where id = 2', [$amount]);\n        });\n\n        return ['status' => 0, 'message' => 'ok'];\n    }\n```\n\n----------------------------------------\n\nTITLE: Default Database Configuration in Hyperf (PHP)\nDESCRIPTION: This code defines the default database configuration for Hyperf, including driver, host, port, database name, username, password, charset, collation, prefix, and connection pool settings. It retrieves values from environment variables.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/quick-start.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => env('DB_DRIVER', 'mysql'),\n        'host' => env('DB_HOST', 'localhost'),\n        'port' => env('DB_PORT', 3306),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => env('DB_CHARSET', 'utf8'),\n        'collation' => env('DB_COLLATION', 'utf8_unicode_ci'),\n        'prefix' => env('DB_PREFIX', ''),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float)env('DB_MAX_IDLE_TIME', 60),\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Hyperf Container PHP\nDESCRIPTION: This code snippet shows the updated content of the `config/container.php` file in Hyperf. It defines the dependency injection container using `Hyperf\\Di\\Container` and sets it as the application context. The container uses a `DefinitionSourceFactory` which constructs a definition source for the container, controlling how dependencies are resolved. The boolean argument to the factory seems to indicate whether to enable annotations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog-v1.1.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Di\\Definition\\DefinitionSourceFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = new Container((new DefinitionSourceFactory(true))());\n\nif (! $container instanceof \\Psr\\Container\\ContainerInterface) {\n    throw new RuntimeException('The dependency injection container is invalid.');\n}\nreturn ApplicationContext::setContainer($container);\n```\n\n----------------------------------------\n\nTITLE: Model Event Listener: Deleting Cache on Model Changes in PHP\nDESCRIPTION: This code snippet illustrates how to create a listener for model events such as `Deleted` and `Saved` in Hyperf.  The `DeleteCacheListener` class listens for these events and deletes the model's cache if the model implements the `CacheableInterface`. This ensures that the cache is invalidated whenever the model is modified or deleted.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/event.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\ModelCache\\Listener;\n\nuse Hyperf\\Database\\Model\\Events\\Deleted;\nuse Hyperf\\Database\\Model\\Events\\Event;\nuse Hyperf\\Database\\Model\\Events\\Saved;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\ModelCache\\CacheableInterface;\n\n#[Listener]\nclass DeleteCacheListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            Deleted::class,\n            Saved::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        if ($event instanceof Event) {\n            $model = $event->getModel();\n            if ($model instanceof CacheableInterface) {\n                $model->deleteCache();\n            }\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Validator\nDESCRIPTION: Demonstrates how to register a custom validator using the `ValidatorFactoryResolved` event. This listener extends the validator factory with a custom rule named 'foo' that checks if the value equals 'foo'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_46\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Listener;\n\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Validation\\Contract\\ValidatorFactoryInterface;\nuse Hyperf\\Validation\\Event\\ValidatorFactoryResolved;\nuse Hyperf\\Validation\\Validator;\n\n#[Listener]\nclass ValidatorFactoryResolvedListener implements ListenerInterface\n{\n\n    public function listen(): array\n    {\n        return [\n            ValidatorFactoryResolved::class,\n        ];\n    }\n\n    public function process(object $event): void\n    {\n        /**  @var ValidatorFactoryInterface $validatorFactory */\n        $validatorFactory = $event->validatorFactory;\n        // 注册了 foo 验证器\n        $validatorFactory->extend('foo', function (string $attribute, mixed $value, array $parameters, Validator $validator): bool {\n            return $value == 'foo';\n        });\n        // 当创建一个自定义验证规则时，你可能有时候需要为错误信息定义自定义占位符这里扩展了 :foo 占位符\n        $validatorFactory->replacer('foo', function (string $message, string $attribute, string $rule, array $parameters): array|string {\n            return str_replace(':foo', $attribute, $message);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Composer Autoload\nDESCRIPTION: This snippet configures the `composer.json` file to autoload the generated gRPC code.  It adds entries to the `psr-4` section for the `GPBMetadata` and `Grpc` namespaces, mapping them to the corresponding directories where the generated PHP files are located.  After adding, `composer dump-autoload` is executed for the changes to take effect.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/grpc.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"autoload\": {\n    \"psr-4\": {\n        \"App\\\\\": \"app/\",\n        \"GPBMetadata\\\\\": \"grpc/GPBMetadata\",\n        \"Grpc\\\\\": \"grpc/Grpc\"\n    },\n    \"files\": [\n    ]\n},\n```\n\n----------------------------------------\n\nTITLE: Starting the Service\nDESCRIPTION: Pulls the latest image and deploys the Docker stack using the specified YAML file. This starts the application services in the Docker Swarm cluster.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_55\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull registry.cn-shanghai.aliyuncs.com/your_namespace/your_project:latest\ndocker stack deploy -c /opt/www/your_project/deploy.yml --with-registry-auth your_project\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Resource gRPC Support\nDESCRIPTION: Installs the `hyperf/resource-grpc` package using composer. This package provides support for using resources with gRPC responses in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/resource-grpc\n```\n\n----------------------------------------\n\nTITLE: Selecting Tracer Driver\nDESCRIPTION: This configuration selects the default tracer driver and defines the configurations for each driver (Zipkin and Jaeger). The 'default' option specifies which driver is used. The 'tracer' section configures the settings for each driver, including the driver class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tracer.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    // 選擇默認的 Tracer 驅動，所選 Tracer 名稱對應 tracers 下定義的鍵\n    'default' => env('TRACER_DRIVER', 'staging_zipkin'),\n\n    // 這裏暫時省略其他配置\n    'enable' => [],\n\n    'tracer' => [\n        // Zipkin 配置\n        'staging_zipkin' => [\n            'driver' => \\Hyperf\\Tracer\\Adapter\\ZipkinTracerFactory::class,\n        ],\n        // 另一套 Zipkin 配置\n        'producton_zipkin' => [\n            'driver' => \\Hyperf\\Tracer\\Adapter\\ZipkinTracerFactory::class,\n        ],\n        // Jaeger 配置\n        'jaeger' => [\n            'driver' => \\Hyperf\\Tracer\\Adapter\\JaegerTracerFactory::class,\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Queues with Hyperf\nDESCRIPTION: This PHP code snippet configures multiple asynchronous queues within a Hyperf application. It defines two queues, 'default' and 'other', both using the Redis driver. Each queue has its own channel, timeout settings, retry configurations, and concurrency limits.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => Hyperf\\AsyncQueue\\Driver\\RedisDriver::class,\n        'channel' => '{queue}',\n        'timeout' => 2,\n        'retry_seconds' => 5,\n        'handle_timeout' => 10,\n        'processes' => 1,\n        'concurrent' => [\n            'limit' => 2,\n        ],\n    ],\n    'other' => [\n        'driver' => Hyperf\\AsyncQueue\\Driver\\RedisDriver::class,\n        'channel' => '{other.queue}',\n        'timeout' => 2,\n        'retry_seconds' => 5,\n        'handle_timeout' => 10,\n        'processes' => 1,\n        'concurrent' => [\n            'limit' => 2,\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: AMQP consumer consumeMessage after v3.1\nDESCRIPTION: This PHP code shows the change in the `consumeMessage` method's return type for an AMQP consumer after Hyperf v3.1. It now returns a `Result` enum.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/3.1.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// after v3.1\npublic function consumeMessage($data, AMQPMessage $message): Result\n{\n    return Result::ACK;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Process Parameters - Hyperf (PHP)\nDESCRIPTION: Demonstrates how to set parameters for a custom process, either by redefining properties on the subclass or by defining the properties within the `#[Process]` annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/process.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process(name: \"user-process\", redirectStdinStdout: false, pipeType: 2, enableCoroutine: true)]\nclass FooProcess extends AbstractProcess\n{\n    /**\n     * 进程数量\n     */\n    public int $nums = 1;\n\n    /**\n     * 进程名称\n     */\n    public string $name = 'user-process';\n\n    /**\n     * 重定向自定义进程的标准输入和输出\n     */\n    public bool $redirectStdinStdout = false;\n\n    /**\n     * 管道类型\n     */\n    public int $pipeType = 2;\n\n    /**\n     * 是否启用协程\n     */\n    public bool $enableCoroutine = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Simple GraphQL Query\nDESCRIPTION: A simple GraphQL query to the 'hello' endpoint, passing a name as an argument.  The expected output is the passed name as the result of the hello query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/graphql.md#_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n    hello(name: \"graphql\")\n}\n```\n\n----------------------------------------\n\nTITLE: Update Git and Reinstall Gitlab-runner - Shell\nDESCRIPTION: These commands update the git version and reinstall gitlab-runner to resolve a potential issue with the git version used by gitlab-runner being too low. It uses a custom repository to install a newer version of git.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/docker-swarm.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl https://setup.ius.io | sh\n$ yum remove -y git\n$ yum -y install git2u\n$ git version\n\n# Reinstall gitlab-runner and re-register gitlab-runner\n$ yum install gitlab-runner\n```\n\n----------------------------------------\n\nTITLE: Defining CI/CD Variables in Gitlab\nDESCRIPTION: Defines CI/CD variables in a Gitlab project to specify the project name and registry URL. These variables are used in the `.gitlab-ci.yml` file to build and push Docker images.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_24\n\nLANGUAGE: yml\nCODE:\n```\nvariables:\n  PROJECT_NAME: demo\n  REGISTRY_URL: registry.cn-shanghai.aliyuncs.com/test_namespace\n```\n\n----------------------------------------\n\nTITLE: Prometheus Push Mode Configuration\nDESCRIPTION: Configures Prometheus to use the push mode, requiring the push host, port, and interval to be set.  This is recommended for offline tasks only.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n'mode' => Constants::PUSH_MODE\n```\n\n----------------------------------------\n\nTITLE: Configure Automatic Consumer Proxy in services.php (PHP)\nDESCRIPTION: Configures an automatic consumer proxy in the services.php file. Specifies the service name, service interface, ID, protocol, load balancer, registry, nodes, and options for the consumer.  The 'options' array contains settings for connect timeout, receive timeout, retry, and connection pool.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/json-rpc.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // 此处省略了其它同层级的配置\n    'consumers' => [\n        [\n            // name 需与服务提供者的 name 属性相同\n            'name' => 'CalculatorService',\n            // 服务接口名，可选，默认值等于 name 配置的值，如果 name 直接定义为接口类则可忽略此行配置，如 name 为字符串则需要配置 service 对应到接口类\n            'service' => \\App\\JsonRpc\\CalculatorServiceInterface::class,\n            // 对应容器对象 ID，可选，默认值等于 service 配置的值，用来定义依赖注入的 key\n            'id' => \\App\\JsonRpc\\CalculatorServiceInterface::class,\n            // 服务提供者的服务协议，可选，默认值为 jsonrpc-http\n            // 可选 jsonrpc-http jsonrpc jsonrpc-tcp-length-check\n            'protocol' => 'jsonrpc-http',\n            // 负载均衡算法，可选，默认值为 random\n            'load_balancer' => 'random',\n            // 这个消费者要从哪个服务中心获取节点信息，如不配置则不会从服务中心获取节点信息\n            'registry' => [\n                'protocol' => 'consul',\n                'address' => 'http://127.0.0.1:8500',\n            ],\n            // 如果没有指定上面的 registry 配置，即为直接对指定的节点进行消费，通过下面的 nodes 参数来配置服务提供者的节点信息\n            'nodes' => [\n                ['host' => '127.0.0.1', 'port' => 9504],\n            ],\n            // 配置项，会影响到 Packer 和 Transporter\n            'options' => [\n                'connect_timeout' => 5.0,\n                'recv_timeout' => 5.0,\n                'settings' => [\n                    // 根据协议不同，区分配置\n                    'open_eof_split' => true,\n                    'package_eof' => \"\\r\\n\",\n                    // 'open_length_check' => true,\n                    // 'package_length_type' => 'N',\n                    // 'package_length_offset' => 0,\n                    // 'package_body_offset' => 4,\n                ],\n                // 重试次数，默认值为 2，收包超时不进行重试。暂只支持 JsonRpcPoolTransporter\n                'retry_count' => 2,\n                // 重试间隔，毫秒\n                'retry_interval' => 100,\n                // 使用多路复用 RPC 时的心跳间隔，null 为不触发心跳\n                'heartbeat' => 30,\n                // 当使用 JsonRpcPoolTransporter 时会用到以下配置\n                'pool' => [\n                    'min_connections' => 1,\n                    'max_connections' => 32,\n                    'connect_timeout' => 10.0,\n                    'wait_timeout' => 3.0,\n                    'heartbeat' => -1,\n                    'max_idle_time' => 60.0,\n                ],\n            ],\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using Null Adapter for Rooms\nDESCRIPTION: This PHP snippet shows how to configure the dependency injection container to use the NullAdapter for Socket.io rooms, disabling room functionality to reduce overhead.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/socketio-server.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\SocketIOServer\\Room\\AdapterInterface::class => \\Hyperf\\SocketIOServer\\Room\\NullAdapter::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Installing fswatch on macOS\nDESCRIPTION: This command installs fswatch on macOS using the Homebrew package manager. fswatch is a file system monitor that can be used as a driver for the Hyperf Watcher component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/watcher.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install fswatch\n```\n\n----------------------------------------\n\nTITLE: Get First Item Number on Current Page with Paginator\nDESCRIPTION: Retrieves the index of the first item on the current page. Useful for displaying the starting index of the items on the current page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/paginator.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$firstItem = $paginator->firstItem();\n```\n\n----------------------------------------\n\nTITLE: Raw Expressions with selectRaw - PHP\nDESCRIPTION: Demonstrates using `selectRaw` to include raw SQL expressions in the SELECT clause of a query.  This is a more convenient alternative to using `select(Db::raw(...))` and allows parameter binding to prevent SQL injection. Requires the `Hyperf\\DbConnection\\Db` facade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('order')\n    ->selectRaw('price * ? as price_with_tax', [1.0825])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Call a Remote Method\nDESCRIPTION: This code shows how to call a remote method on the client object. It calls the `add` method with arguments `1` and `2`, and the result is stored in the `$result` variable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/jet.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// 调用远程方法 `add` 并带上参数 `1` 和 `2`\n// $result 即为远程方法的返回值\n$result = $client->add(1, 2);\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Resource GRPC\nDESCRIPTION: This command installs the hyperf/resource-grpc package using Composer, enabling gRPC resource support.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/resource-grpc\n```\n\n----------------------------------------\n\nTITLE: Manual Event Registration\nDESCRIPTION: Demonstrates how to manually register event handlers without using annotations. The `on` method is used to associate an event name with a callback function. Requires `Hyperf\\SocketIOServer\\BaseNamespace` and `Hyperf\\SocketIOServer\\Socket`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/socketio-server.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\SocketIOServer\\BaseNamespace;\nuse Hyperf\\SocketIOServer\\SidProvider\\SidProviderInterface;\nuse Hyperf\\SocketIOServer\\Socket;\nuse Hyperf\\WebSocketServer\\Sender;\n\nclass WebSocketController extends BaseNamespace\n{\n    public function __construct(Sender $sender, SidProviderInterface $sidProvider) {\n        parent::__construct($sender,$sidProvider);\n        $this->on('event', [$this, 'echo']);\n    }\n\n    public function echo(Socket $socket, $data)\n    {\n        $socket->emit('event', $data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering JSON (Blade)\nDESCRIPTION: This Blade template renders a PHP array as JSON using the `@json` directive. The second example demonstrates the use of `JSON_PRETTY_PRINT` for formatted output.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<script>\n    var app = @json($array);\n\n    var app = @json($array, JSON_PRETTY_PRINT);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding TLinux Repository\nDESCRIPTION: Adds a TLinux repository configuration file for installing a specific kernel version. This configuration ensures the system uses the specified repository for kernel-related packages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\ntee /etc/yum.repos.d/CentOS-TLinux.repo <<-'EOF'\n[Tlinux]\nname=Tlinux for redhat/centos $releasever - $basearch\nfailovermethod=priority\ngpgcheck=0\ngpgkey=http://mirrors.tencentyun.com/epel/RPM-GPG-KEY-EPEL-7\nenabled=1\nbaseurl=https://mirrors.tencent.com/tlinux/2.4/tlinux/x86_64/\nEOF\n```\n\n----------------------------------------\n\nTITLE: Create Scene Request Class\nDESCRIPTION: Creates a `SceneRequest` class that uses a specific scene for validation rules. This involves defining `scenes` to control the set of rules applied based on the chosen scene.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Request;\n\nuse Hyperf\\Validation\\Request\\FormRequest;\n\nclass SceneRequest extends FormRequest\n{\n    protected array $scenes = [\n        'foo' => ['username'],\n        'bar' => ['username', 'password'],\n    ];\n\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     */\n    public function rules(): array\n    {\n        return [\n            'username' => 'required',\n            'gender' => 'required',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting via SSH with a Specific Port\nDESCRIPTION: Connects to a server via SSH using a specified port.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nssh -p 2222 root@host\n```\n\n----------------------------------------\n\nTITLE: DemoLogicTest Class with Inject Annotation\nDESCRIPTION: This PHP code defines a test class `DemoLogicTest` extending `HttpTestCase`. It tests `DemoLogic` using a test double for `DemoApi` injected via the #[Inject] annotation. It uses ApplicationContext::getContainer() to resolve the DemoLogic and a mock to return a Stub.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/testing.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace HyperfTest\\Cases;\n\nuse App\\Api\\DemoApi;\nuse App\\Logic\\DemoLogic;\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Context\\ApplicationContext;\nuse HyperfTest\\HttpTestCase;\nuse Mockery;\n\nclass DemoLogicTest extends HttpTestCase\n{\n    public function tearDown()\n    {\n        Mockery::close();\n    }\n\n    public function testIndex()\n    {\n        $this->getContainer();\n\n        $res = $this->getContainer()->get(DemoLogic::class)->test();\n\n        $this->assertEquals(11, $res['status']);\n    }\n\n    /**\n     * @return Container\n     */\n    protected function getContainer()\n    {\n        $container = ApplicationContext::getContainer();\n\n        $apiStub = $this->createMock(DemoApi::class);\n\n        $apiStub->method('test')->willReturn([\n            'status' => 11\n        ]);\n\n        $container->define(DemoApi::class, function () use ($apiStub) {\n            return $apiStub;\n        });\n\n        return $container;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Nested Resources\nDESCRIPTION: Demonstrates how to wrap nested resources in a 'data' key. The UserCollection returns a 'data' key with the collection, and ensures it will not double wrap the root level resource.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'data' => $this->collection,\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Produce Batch Kafka Messages\nDESCRIPTION: This PHP code demonstrates how to send multiple messages to Kafka topics in a batch from a Hyperf controller using the `Producer::sendBatch()` method.  It creates an array of `ProduceMessage` objects and sends them all together. Requires `longlang/phpkafka`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/kafka.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Kafka\\Producer;\nuse longlang\\phpkafka\\Producer\\ProduceMessage;\n\n#[AutoController]\nclass IndexController extends AbstractController\n{\n    public function index(Producer $producer)\n    {\n        $producer->sendBatch([\n            new ProduceMessage('hyperf1', 'hyperf1_value', 'hyperf1_key'),\n            new ProduceMessage('hyperf2', 'hyperf2_value', 'hyperf2_key'),\n            new ProduceMessage('hyperf3', 'hyperf3_value', 'hyperf3_key'),\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Publish Tracer Configuration\nDESCRIPTION: Publishes the default configuration file `config/autoload/opentracing.php` for the hyperf/tracer component.  This allows you to modify the default tracing settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tracer.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/tracer\n```\n\n----------------------------------------\n\nTITLE: Dumping Composer Autoload\nDESCRIPTION: This command is used to regenerate the Composer autoload files. This is often necessary after making changes to code that isn't being reflected in the application, especially when the `scan_cacheable` setting is enabled. It is executed via the command line.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/questions.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer dump-autoload -o\n```\n\n----------------------------------------\n\nTITLE: Creating Default Network\nDESCRIPTION: This command creates a Docker overlay network with a specified subnet, encryption, and attachability. Requires Docker Swarm.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\ndocker network create \\\n--driver overlay \\\n--subnet 10.0.0.1/8 \\\n--opt encrypted \\\n--attachable \\\ndefault-network\n```\n\n----------------------------------------\n\nTITLE: Configuring Coroutine Trace Aspect\nDESCRIPTION: This configuration adds the CoroutineAspect to the aspects.php file, enabling tracing for coroutines. This is an optional feature.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tracer.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    Hyperf\\Tracer\\Aspect\\CoroutineAspect::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Overriding SocketIO Parameters\nDESCRIPTION: Demonstrates how to override the default SocketIO parameters, such as `$pingTimeout`, by creating a factory class and binding it to the `Hyperf\\SocketIOServer\\SocketIO` interface in the `dependencies.php` file. This allows you to customize the behavior of the Socket.io server. Requires `Hyperf\\Contract\\StdoutLoggerInterface`, `Hyperf\\SocketIOServer\\Parser\\Decoder`, `Hyperf\\SocketIOServer\\Parser\\Encoder`, `Hyperf\\SocketIOServer\\SidProvider\\SidProviderInterface`, `Hyperf\\SocketIOServer\\SocketIO`, `Hyperf\\WebSocketServer\\Sender`, and `Psr\\Container\\ContainerInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/socketio-server.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Kernel;\n\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\SocketIOServer\\Parser\\Decoder;\nuse Hyperf\\SocketIOServer\\Parser\\Encoder;\nuse Hyperf\\SocketIOServer\\SidProvider\\SidProviderInterface;\nuse Hyperf\\SocketIOServer\\SocketIO;\nuse Hyperf\\WebSocketServer\\Sender;\nuse Psr\\Container\\ContainerInterface;\n\nclass SocketIOFactory\n{\n    public function __invoke(ContainerInterface $container)\n    {\n        $io = new SocketIO(\n            $container->get(StdoutLoggerInterface::class),\n            $container->get(Sender::class),\n            $container->get(Decoder::class),\n            $container->get(Encoder::class),\n            $container->get(SidProviderInterface::class)\n        );\n\n        // 重寫 pingTimeout 引數\n        $io->setPingTimeout(10000);\n\n        return $io;\n    }\n}\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\SocketIOServer\\SocketIO::class => App\\Kernel\\SocketIOFactory::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Route\nDESCRIPTION: This PHP code configures a route for the 'ws' server, mapping the root path ('/') to the App\\Controller\\WebSocketController. The 'ws' value corresponds to the WebSocket server's name defined in the server configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/websocket-server.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nRouter::addServer('ws', function () {\n    Router::get('/', 'App\\Controller\\WebSocketController');\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Component with a Slot in Blade\nDESCRIPTION: This snippet demonstrates how to pass content into a component's slot. Content between the `<x-alert>` tags is automatically injected into the `$slot` variable within the component's template.  This allows for flexible, dynamic content within the component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<x-alert>\n    <strong>Whoops!</strong> Something went wrong!\n</x-alert>\n```\n\n----------------------------------------\n\nTITLE: Histogram Bucket Registration\nDESCRIPTION: Registers a custom Histogram with predefined buckets. This example shows how to configure a Prometheus Histogram with custom buckets during server startup.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Listener;\n\nuse Hyperf\\Config\\Annotation\\Value;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BeforeMainServerStart;\nuse Prometheus\\CollectorRegistry;\n\nclass OnMainServerStart implements ListenerInterface\n{\n    protected $registry;\n\n    public function __construct(CollectorRegistry $registry)\n    {\n        $this->registry = $registry;\n    }\n\n    public function listen(): array\n    {\n        return [\n            BeforeMainServerStart::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        $this->registry->registerHistogram(\n            config(\"metric.metric.prometheus.namespace\"), \n            'test',\n            'help_message', \n            ['labelName'], \n            [0.1, 1, 2, 3.5]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Paginated Resource Response JSON\nDESCRIPTION: This JSON demonstrates the structure of a paginated resource response in Hyperf. It contains a 'data' array with the resource items, 'links' for pagination navigation, and 'meta' for pagination status information.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Eladio Schroeder Sr.\",\n            \"email\": \"therese28@example.com\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Liliana Mayert\",\n            \"email\": \"evandervort@example.com\"\n        }\n    ],\n    \"links\":{\n        \"first\": \"/pagination?page=1\",\n        \"last\": \"/pagination?page=1\",\n        \"prev\": null,\n        \"next\": null\n    },\n    \"meta\":{\n        \"current_page\": 1,\n        \"from\": 1,\n        \"last_page\": 1,\n        \"path\": \"/pagination\",\n        \"per_page\": 15,\n        \"to\": 10,\n        \"total\": 10\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AMQP Consumer Return Type (Before v3.1)\nDESCRIPTION: Shows the `consumeMessage` method's return type in AMQP consumers before v3.1, which was a string representing the result (e.g., `Result::ACK`).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/3.1.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// v3.1之前\npublic function consumeMessage($data, AMQPMessage $message): string\n{\n    return Result::ACK;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Generation Options (Hyperf)\nDESCRIPTION: Shows how to configure the `gen:model` command options within the `databases.php` configuration file for a specific connection pool. This allows for setting default values for model generation parameters such as the model path, force casts, inheritance, uses, and more.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Database\\Commands\\ModelOption;\n\nreturn [\n    'default' => [\n        // 忽略其他配置\n        'commands' => [\n            'gen:model' => [\n                'path' => 'app/Model',\n                'force_casts' => true,\n                'inheritance' => 'Model',\n                'uses' => '',\n                'refresh_fillable' => true,\n                'table_mapping' => [],\n                'with_comments' => true,\n                'property_case' => ModelOption::PROPERTY_SNAKE_CASE,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Signal\nDESCRIPTION: This command installs the hyperf/signal package using Composer, adding it as a dependency to your project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/signal.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/signal\n```\n\n----------------------------------------\n\nTITLE: Defining a Reverse One-to-Many Relationship (belongsTo) in Hyperf\nDESCRIPTION: This code snippet defines the inverse of a one-to-many relationship, using `belongsTo`, between the `Book` and `User` models. The `author` method in the `Book` model calls the `belongsTo` method to establish the relationship, indicating that a `Book` belongs to a `User` via the `user_id` foreign key. Requires the `Hyperf\\DbConnection\\Model\\Model` base class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/relationship.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass Book extends Model\n{\n    public function author()\n    {\n        return $this->belongsTo(User::class, 'user_id', 'id');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running Kong Database with Docker\nDESCRIPTION: Runs the Kong database (PostgreSQL) in a Docker container, defining the database name, user, and password.  The container uses the 'default-network' and maps port 5432.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_26\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run -d --name kong-database \\\n  --network=default-network \\\n  -p 5432:5432 \\\n  -e \"POSTGRES_USER=kong\" \\\n  -e \"POSTGRES_DB=kong\" \\\n  -e \"POSTGRES_PASSWORD=kong\" \\\n  postgres:9.6\n```\n\n----------------------------------------\n\nTITLE: Define Application Configuration - YAML\nDESCRIPTION: This YAML snippet defines application configuration parameters for the demo application, which are likely to be injected into the application container at runtime.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/docker-swarm.md#_snippet_14\n\nLANGUAGE: YAML\nCODE:\n```\nAPP_NAME=demo\n\nDB_DRIVER=mysql\nDB_HOST=localhost\nDB_PORT=3306\nDB_DATABASE=hyperf\nDB_USERNAME=root\nDB_PASSWORD=\nDB_CHARSET=utf8mb4\nDB_COLLATION=utf8mb4_unicode_ci\nDB_PREFIX=\n\nREDIS_HOST=localhost\nREDIS_AUTH=\nREDIS_PORT=6379\nREDIS_DB=0\n```\n\n----------------------------------------\n\nTITLE: DemoApi Implementation (Repeated)\nDESCRIPTION: The implementation of the DemoApi class, repeated from the previous example.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Api;\n\nclass DemoApi\n{\n    public function test()\n    {\n        return [\n            'status' => 1\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enum with Variable Parameters in PHP\nDESCRIPTION: This snippet defines an enum `ErrorCode` with a message that includes a placeholder. The `#[Message]` annotation contains a string with `%s`, which will be replaced by the provided parameters when calling `getMessage()`. This allows for dynamic error messages.  It shows how to get the message with parameter replacement.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/constants.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Constants\\Annotation\\Constants;\nuse Hyperf\\Constants\\Annotation\\Message;\nuse Hyperf\\Constants\\EnumConstantsTrait;\n\n#[Constants]\nenum ErrorCode: int\n{\n    use EnumConstantsTrait;\n\n    #[Message(\"Params %s is invalid.\")]\n    case PARAMS_INVALID = 1000;\n}\n\n$message = ErrorCode::PARAMS_INVALID->getMessage(['user_id']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster with Name\nDESCRIPTION: This configuration example demonstrates how to enable Redis cluster mode in Hyperf using a cluster name.  The `redis.clusters.seeds` parameters need to be set correctly in the `php.ini` file.  The PHP code specifies the `name` under the `cluster` configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/redis.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// 省略其他配置\nreturn [\n    'default' => [\n        'cluster' => [\n            'enable' => true,\n            'name' => 'mycluster',\n            'seeds' => [],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Manually Mapping NormalizerInterface Implementation\nDESCRIPTION: This snippet shows how to manually map the `Hyperf\\Contract\\NormalizerInterface` implementation when the `symfony/serializer` library is required, as automatic mapping is no longer performed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog/changelog-v2.0.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Utils\\Serializer\\SerializerFactory;\nuse Hyperf\\Utils\\Serializer\\Serializer;\n\nreturn [\n    Hyperf\\Contract\\NormalizerInterface::class => new SerializerFactory(Serializer::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Publish Hyperf Signal Configuration\nDESCRIPTION: This command publishes the default configuration file for the hyperf/signal component to your project, allowing you to customize its behavior.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/signal.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/signal\n```\n\n----------------------------------------\n\nTITLE: PHP Coroutine Example Output\nDESCRIPTION: This shell code displays the output of the PHP coroutine example. It showcases how the isset magic method is called and how the different coroutines affect the final output.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/important.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbool(false)\nstring(3) \"xxx\"\nbool(true)\n```\n\n----------------------------------------\n\nTITLE: Socket.IO API Usage Example\nDESCRIPTION: This PHP code demonstrates various Socket.IO API methods for sending messages to clients, including emitting events to specific clients, broadcasting to rooms, sending private messages, and using acknowledgements. It provides a comprehensive overview of the available methods for server-side Socket.IO communication in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/socketio-server/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction onConnect(\\Hyperf\\SocketIOServer\\Socket $socket){\n\n  // sending to the client\n  $socket->emit('hello', 'can you hear me?', 1, 2, 'abc');\n\n  // sending to all clients except sender\n  $socket->broadcast->emit('broadcast', 'hello friends!');\n\n  // sending to all clients in 'game' room except sender\n  $socket->to('game')->emit('nice game', \"let's play a game\");\n\n  // sending to all clients in 'game1' and/or in 'game2' room, except sender\n  $socket->to('game1')->to('game2')->emit('nice game', \"let's play a game (too)\");\n\n  // WARNING: `$socket->to($socket->getSid())->emit()` will NOT work, as it will send to everyone in the room\n  // named `$socket->getSid()` but the sender. Please use the classic `$socket->emit()` instead.\n\n  // sending with acknowledgement\n  $reply = $socket->emit('question', 'do you think so?')->reply();\n\n  // sending without compression\n  $socket->compress(false)->emit('uncompressed', \"that's rough\");\n\n  $io = \\Hyperf\\Context\\ApplicationContext::getContainer()->get(\\Hyperf\\SocketIOServer\\SocketIO::class);\n\n  // sending to all clients in 'game' room, including sender\n  $io->in('game')->emit('big-announcement', 'the game will start soon');\n\n  // sending to all clients in namespace 'myNamespace', including sender\n  $io->of('/myNamespace')->emit('bigger-announcement', 'the tournament will start soon');\n\n  // sending to a specific room in a specific namespace, including sender\n  $io->of('/myNamespace')->to('room')->emit('event', 'message');\n\n  // sending to individual socketid (private message)\n  $io->to('socketId')->emit('hey', 'I just met you');\n\n  // sending to all clients on this node (when using multiple nodes)\n  $io->local->emit('hi', 'my lovely babies');\n\n  // sending to all connected clients\n  $io->emit('an event sent to all connected clients');\n\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Predecessor Results in PHP DAG\nDESCRIPTION: This example shows how to access the results of preceding tasks within a DAG. Task 'b' receives an array of results from its dependencies, in this case, task 'a'. The DAG execution returns an array containing the results of each task, accessible by the task's key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/dag/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$dag = new \\Hyperf\\Dag\\Dag();\n$a = \\Hyperf\\Dag\\Vertex::make(function() {return 1;});\n$b = \\Hyperf\\Dag\\Vertex::make(function($results) use ($a) {\n    return $results[$a->key] + 1;\n});\n$results = $dag->addVertex($a)->addVertex($b)->addEdge($a, $b)->run();\nassert($results[$a->key] === 1);\nassert($results[$b->key] === 2);\n```\n\n----------------------------------------\n\nTITLE: Installing StatsD Dependencies\nDESCRIPTION: This command installs the StatsD client library for PHP using Composer. This is required to use the StatsD driver with the Hyperf Metric component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# StatsD 所需依賴\ncomposer require domnikl/statsd\n```\n\n----------------------------------------\n\nTITLE: Adding Prometheus route in Hyperf\nDESCRIPTION: This code snippet adds a route to the Hyperf application that exposes Prometheus metrics. It retrieves the CollectorRegistry from the application context, renders the metrics in text format, and returns them as the response to the /metrics endpoint.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\HttpServer\\Router\\Router;\n\nRouter::get('/metrics', function(){\n    $registry = Hyperf\\Context\\ApplicationContext::getContainer()->get(Prometheus\\CollectorRegistry::class);\n    $renderer = new Prometheus\\RenderTextFormat();\n    return $renderer->render($registry->getMetricFamilySamples());\n});\n```\n\n----------------------------------------\n\nTITLE: Logging into Docker Registry\nDESCRIPTION: Logs into a Docker registry using the provided username and registry URL.  This is necessary for pushing and pulling images from the registry.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_52\n\nLANGUAGE: shell\nCODE:\n```\ndocker login --username=xxxx registry.cn-shanghai.aliyuncs.com\n```\n\n----------------------------------------\n\nTITLE: Configure Websocket Proxy with Nginx for Hyperf\nDESCRIPTION: This Nginx configuration sets up a WebSocket reverse proxy for a Hyperf application. It includes configuration for the `Upgrade` header to establish WebSocket connections, forwards client IP information, and sets a read timeout to automatically close inactive connections. The upstream block uses IP hash for sticky sessions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/nginx.md#_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\n# 至少需要一个 Hyperf 节点，多个配置多行\nupstream hyperf_websocket {\n    # 设置负载均衡模式为 IP Hash 算法模式，这样不同的客户端每次请求都会与同一节点进行交互\n    ip_hash;\n    # Hyperf WebSocket Server 的 IP 及 端口\n    server 127.0.0.1:9503;\n    server 127.0.0.1:9504;\n}\n\nserver {\n    listen 80;\n    server_name websocket.hyperf.io;\n    \n    location / {\n        # WebSocket Header\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade websocket;\n        proxy_set_header Connection \"Upgrade\";\n        \n        # 将客户端的 Host 和 IP 信息一并转发到对应节点  \n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n    \n        # 客户端与服务端无交互 60s 后自动断开连接，请根据实际业务场景设置\n        proxy_read_timeout 60s ;\n        \n        # 执行代理访问真实服务器\n        proxy_pass http://hyperf_websocket;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating Database Models for Hyperf v3.0\nDESCRIPTION: This snippet shows how to regenerate database models using the Hyperf code generator.  This is needed because the model base class has added type support for member variables in Hyperf v3.0.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/3.0.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp vendor/bin/regenerate-models.php $PWD/app/Model\n```\n\n----------------------------------------\n\nTITLE: Annotation Configuration for Multi Port Server - Hyperf PHP\nDESCRIPTION: This code snippet defines the annotation based controller, specified to 'innerHttp' server\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/overview.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController(server: \"innerHttp\")]\nclass IndexController\n{\n    public function index()\n    {\n        return 'Hello World.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Blade @production Directive\nDESCRIPTION: This Blade template demonstrates how to use the `@production` directive to execute specific content only when the application is running in the production environment.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_17\n\nLANGUAGE: blade\nCODE:\n```\n@production\n    // 生產環境特定內容……\n@endproduction\n```\n\n----------------------------------------\n\nTITLE: Gauge Interface Definition\nDESCRIPTION: Defines the interface for a gauge metric, which is used to track values that can increase or decrease over time.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\ninterface GaugeInterface\n{\n    public function with(string ...$labelValues): self;\n\n    public function set(float $value);\n\n    public function add(float $delta);\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query Listener Implementation PHP\nDESCRIPTION: This code defines a listener for SQL query execution events in Hyperf. It implements the `ListenerInterface` and uses the `Listener` annotation to register the listener with the event dispatcher. When a `QueryExecuted` event is triggered, the listener extracts the SQL query and its bindings, formats the SQL, and logs it using a specified logger instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/event.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Database\\Events\\QueryExecuted;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Logger\\LoggerFactory;\nuse Hyperf\\Collection\\Arr;\nuse Hyperf\\Stringable\\Str;\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\Log\\LoggerInterface;\n\n#[Listener]\nclass DbQueryExecutedListener implements ListenerInterface\n{\n    private LoggerInterface $logger;\n\n    public function __construct(ContainerInterface $container)\n    {\n        // 輸出到對應名為 sql 的日誌 name，如不存在則需自行新增配置\n        // 這裡的 sql 日誌 name 不是必須的，只是表達可以將 SQL 執行日誌與普通日誌區分開\n        $this->logger = $container->get(LoggerFactory::class)->get('sql');\n    }\n\n    public function listen(): array\n    {\n        return [\n            QueryExecuted::class,\n        ];\n    }\n\n    /**\n     * @param QueryExecuted $event\n     */\n    public function process(object $event)\n    {\n        if ($event instanceof QueryExecuted) {\n            $sql = $event->sql;\n            if (! Arr::isAssoc($event->bindings)) {\n                foreach ($event->bindings as $key => $value) {\n                    $sql = Str::replaceFirst('?', \"'{$value}'\", $sql);\n                }\n            }\n\n            $this->logger->info(sprintf('[%s] %s', $event->time, $sql));\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure SQL Server Driver - Hyperf\nDESCRIPTION: Configures the SQL Server database connection in Hyperf's `databases.php` file. The configuration utilizes environment variables and includes an ODBC data source name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/quick-start.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/databases.php\nreturn [\n     // 其他配置\n    'sqlserver' => [\n        'driver' => env('DB_DRIVER', 'sqlsrv'),\n        'host' => env('DB_HOST', 'mssql'),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'port' => env('DB_PORT', 1443),\n        'username' => env('DB_USERNAME', 'SA'),\n        'password' => env('DB_PASSWORD'),\n        'odbc_datasource_name' => 'DRIVER={ODBC Driver 18 for SQL Server};SERVER=127.0.0.1,1433;TrustServerCertificate=yes;database=hyperf',\n        'odbc'  =>  true,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Demo Logic Test with Inject Annotation Stub - PHP\nDESCRIPTION: Tests the `DemoLogic` class with dependency injection using the `#[Inject]` annotation.  It stubs the `DemoApi` using `$container->define` and then asserts that the `DemoLogic` returns the expected result, which is determined by the stubbed API.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/testing.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace HyperfTest\\Cases;\n\nuse App\\Api\\DemoApi;\nuse App\\Logic\\DemoLogic;\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Context\\ApplicationContext;\nuse HyperfTest\\HttpTestCase;\nuse Mockery;\n\nclass DemoLogicTest extends HttpTestCase\n{\n    /**\n     * @after\n     */\n    public function tearDownAfterMethod()\n    {\n        Mockery::close();\n    }\n\n    public function testIndex()\n    {\n        $this->getContainer();\n\n        $res = $this->getContainer()->get(DemoLogic::class)->test();\n\n        $this->assertEquals(11, $res['status']);\n    }\n\n    /**\n     * @return Container\n     */\n    protected function getContainer()\n    {\n        $container = ApplicationContext::getContainer();\n\n        $apiStub = $this->createMock(DemoApi::class);\n\n        $apiStub->method('test')->willReturn([\n            'status' => 11\n        ]);\n\n        $container->define(DemoApi::class, function () use ($apiStub) {\n            return $apiStub;\n        });\n        \n        return $container;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Requests on Specific Ports\nDESCRIPTION: This PHP code shows how to configure the `Hyperf\\Testing\\Client` to target a specific server (port) using the 'server' option. It makes a JSON request to '/user/0' with a nickname.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/testing.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Testing\\Client;\n\n$client = make(Client::class, ['server' =>'adminHttp']);\n\n$result = $client->json('/user/0',[\n    'nickname' =>'Hyperf'\n]);\n```\n\n----------------------------------------\n\nTITLE: Configure HTTP to disable WebSocket Protocol - PHP\nDESCRIPTION: This configuration snippet disables the WebSocket protocol on the HTTP server in `config/autoload/server.php`. It sets the `open_websocket_protocol` setting to `false` within the HTTP server's configuration. This prevents WebSocket connections through the HTTP server's port.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/websocket-server.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // 这里省略了该文件的其它配置\n    'servers' => [\n        [\n            'name' => 'http',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9501,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [Hyperf\\HttpServer\\Server::class, 'onRequest'],\n            ],\n            'settings' => [\n                'open_websocket_protocol' => false,\n            ]\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Limiting Results with skip/take - PHP\nDESCRIPTION: This snippet demonstrates how to limit the number of results returned and skip a specified number of results using the `skip` and `take` methods.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->skip(10)->take(5)->get();\n```\n\n----------------------------------------\n\nTITLE: Defining Swoole Hook Flags - Hyperf\nDESCRIPTION: This code snippet shows how to define the `SWOOLE_HOOK_FLAGS` constant to modify the `Runtime Hook` level in a Hyperf project. This might be needed to support `CURL` coroutines when using older versions of Swoole (before v4.5.4).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/coroutine.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n! defined('SWOOLE_HOOK_FLAGS') && define('SWOOLE_HOOK_FLAGS', SWOOLE_HOOK_ALL | SWOOLE_HOOK_CURL);\n```\n\n----------------------------------------\n\nTITLE: Running Hyperf in Docker (Container Start)\nDESCRIPTION: This command starts a Docker container pre-configured for Hyperf development. It maps a local directory to the container's project directory, exposes port 9501, and sets the entrypoint to a shell, running as root with elevated privileges. The hyperf/hyperf image with PHP 8.1, alpine v3.18, and Swoole is used.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/install.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run --name hyperf \\\n-v /workspace/skeleton:/data/project \\\n-w /data/project \\\n-p 9501:9501 -it \\\n--privileged -u root \\\n--entrypoint /bin/sh \\\nhyperf/hyperf:8.1-alpine-v3.18-swoole\n```\n\n----------------------------------------\n\nTITLE: Ignore Annotations Configuration PHP\nDESCRIPTION: This snippet demonstrates how to configure Hyperf to ignore specific annotations using the `ignore_annotations` setting within the `annotations.php` configuration file.  This prevents certain annotations from being processed by Hyperf's annotation scanner.  The `ArrayShape` annotation from JetBrains is being ignored here.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/annotation.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse JetBrains\\PhpStorm\\ArrayShape;\n\nreturn [\n    'scan' => [\n        // ignore_annotations 數組內的註解都會被註解掃描器忽略\n        'ignore_annotations' => [\n            ArrayShape::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Publish hyperf/db configuration\nDESCRIPTION: Publishes the hyperf/db component configuration file to the skeleton, allowing customization of database settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/db.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/db\n```\n\n----------------------------------------\n\nTITLE: Setting Redis Read Timeout Option (redis.php)\nDESCRIPTION: Configures the Redis client to never timeout by setting the read_timeout option to -1 within the redis.php configuration file. This ensures that the client will wait indefinitely for a response from the Redis server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/redis.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', null),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n        'options' => [\n            \\Redis::OPT_READ_TIMEOUT => -1,\n            // 或者 'read_timeout' => -1, v3.1.3 或更高版本\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Installing Qiniu Adapter (Flysystem v1.0)\nDESCRIPTION: Installs the Qiniu adapter for Flysystem v1.0, enabling file storage on Qiniu Cloud.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/filesystem.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-qiniu:^1.0\"\n```\n\n----------------------------------------\n\nTITLE: Install Consul Service Governance - Shell\nDESCRIPTION: Installs the `hyperf/service-governance-consul` component via Composer. This is needed when using Consul as the service governance driver.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.2.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"hyperf/service-governance-consul:~2.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Build Phar Archive (Custom Version)\nDESCRIPTION: Builds a Phar archive with a custom version using the `--phar-version` option.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/phar.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp bin/hyperf.php phar:build --phar-version=1.0.1\n```\n\n----------------------------------------\n\nTITLE: Implement Listener to Resume Exit Coordinator (PHP)\nDESCRIPTION: This code snippet demonstrates how to implement a listener that resumes the exit coordinator after a command is executed. This prevents the process from hanging when the command uses AMQP or other multiplexing logic and has event listeners attached to the command execution event. It uses Hyperf's event system and coordinator manager.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/3.0.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Command\\Event\\AfterExecute;\nuse Hyperf\\Coordinator\\Constants;\nuse Hyperf\\Coordinator\\CoordinatorManager;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\n\n#[Listener]\nclass ResumeExitCoordinatorListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            AfterExecute::class,\n        ];\n    }\n\n    public function process(object $event): void\n    {\n        CoordinatorManager::until(Constants::WORKER_EXIT)->resume();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install gRPC Client Component\nDESCRIPTION: This shell command installs the `hyperf/grpc-client` component using Composer. This component provides the necessary classes and functionalities to create gRPC clients within the Hyperf framework, allowing you to interact with gRPC servers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/grpc.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/grpc-client\n```\n\n----------------------------------------\n\nTITLE: Modify dateFormat in logger.php\nDESCRIPTION: This snippet demonstrates how to modify the `dateFormat` option in the `config/autoload/logger.php` file. This is necessary because Monolog's default log format changed in higher versions. Adjusting `dateFormat` ensures consistency with previous versions, especially when the log format is critical for integration with logging systems.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.0.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => [\n        'handler' => [\n            'class' => Monolog\\Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => BASE_PATH . '/runtime/logs/hyperf.log',\n                'level' => Monolog\\Logger::DEBUG,\n            ],\n        ],\n        'formatter' => [\n            'class' => Monolog\\Formatter\\LineFormatter::class,\n            'constructor' => [\n                'format' => null,\n                'dateFormat' => 'Y-m-d H:i:s',\n                'allowInlineLineBreaks' => true,\n            ],\n        ],\n        'processors' => [\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Value Object Type Casting\nDESCRIPTION: Defines a custom type cast class for converting multiple model attribute values into a single `Address` value object. The `get` method constructs the `Address` object, while the `set` method returns a key-value array to update model attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/mutators.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Casts;\n\nuse App\\Address;\nuse Hyperf\\Contract\\CastsAttributes;\n\nclass AddressCaster implements CastsAttributes\n{\n    /**\n     * 將取出的資料進行轉換\n     */\n    public function get($model, $key, $value, $attributes): Address\n    {\n        return new Address(\n            $attributes['address_line_one'],\n            $attributes['address_line_two']\n        );\n    }\n\n    /**\n     * 轉換成將要進行儲存的值\n     */\n    public function set($model, $key, $value, $attributes)\n    {\n        return [\n            'address_line_one' => $value->lineOne,\n            'address_line_two' => $value->lineTwo,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Append Request ID Processor (PHP)\nDESCRIPTION: This PHP class defines a Monolog processor that appends a request ID and coroutine ID to each log record. It uses Hyperf's Context to either retrieve an existing request ID or generate a new one if it doesn't exist. This is useful for tracking logs within the same request across different parts of the application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/logger.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Kernel\\Log;\n\nuse Hyperf\\Context\\Context;\nuse Hyperf\\Coroutine\\Coroutine;\nuse Monolog\\LogRecord;\nuse Monolog\\Processor\\ProcessorInterface;\n\nclass AppendRequestIdProcessor implements ProcessorInterface\n{\n    public const REQUEST_ID = 'log.request.id';\n\n    public function __invoke(array|LogRecord $record)\n    {\n        $record['extra']['request_id'] = Context::getOrSet(self::REQUEST_ID, uniqid());\n        $record['extra']['coroutine_id'] = Coroutine::id();\n        return $record;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting NATS Message (Async)\nDESCRIPTION: This PHP code demonstrates sending a request to a NATS subject using the `request` method of the `DriverInterface`. It includes a callback function to handle the response message asynchronously. The payload includes an 'id' field. `var_dump($payload->getBody());` is used for demonstration purposes, and should be replaced with proper logic.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nats.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Nats\\Driver\\DriverInterface;\nuse Hyperf\\Nats\\Message;\n\n#[AutoController(prefix: \"nats\")]\nclass NatsController extends AbstractController\n{\n    #[Inject]\n    protected DriverInterface $nats;\n\n    public function request()\n    {\n        $res = $this->nats->request('hyperf.reply', [\n            'id' => 'limx',\n        ], function (Message $payload) {\n            var_dump($payload->getBody());\n        });\n\n        return $this->response->success($res);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Processes\nDESCRIPTION: Lists the running Docker processes (containers). This provides information about the individual containers that are running.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_58\n\nLANGUAGE: shell\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Section Directives (Blade)\nDESCRIPTION: This Blade template demonstrates the use of `@hasSection` and `@sectionMissing` to determine if a section has content. This allows for conditional rendering based on the presence of content in a named section.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_14\n\nLANGUAGE: blade\nCODE:\n```\n@hasSection('navigation')\n    <div class=\"pull-right\">\n        @yield('navigation')\n    </div>\n\n    <div class=\"clearfix\"></div>\n@endif\n\n@sectionMissing('navigation')\n    <div class=\"pull-right\">\n        @include('default-navigation')\n    </div>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Build Phar Archive with Custom Name\nDESCRIPTION: Builds a Phar archive with a specified name using the `--name` option. This allows customization of the output Phar filename.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/phar.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php phar:build --name=your_project.phar\n```\n\n----------------------------------------\n\nTITLE: Modifying Gitlab Runner Concurrent Execution Count\nDESCRIPTION: Configures the number of concurrent jobs that the Gitlab Runner can execute by modifying the `/etc/gitlab-runner/config.toml` file.  Setting `concurrent = 5` allows the runner to execute up to 5 jobs simultaneously.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ vim /etc/gitlab-runner/config.toml\nconcurrent = 5\n```\n\n----------------------------------------\n\nTITLE: Updating Git Version\nDESCRIPTION: This snippet updates the Git version used by `gitlab-runner`. It uses the IUS repository, removes the existing Git installation, installs `git2u`, and verifies the installed version. It also includes commands to reinstall and re-register `gitlab-runner`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\n$ curl https://setup.ius.io | sh\n$ yum remove -y git\n$ yum -y install git2u\n$ git version\n\n# 重新安装 gitlab-runner 并重新注册 gitlab-runner\n$ yum install gitlab-runner\n```\n\n----------------------------------------\n\nTITLE: Customizing CoreMiddleware Behavior - PHP\nDESCRIPTION: This code snippet demonstrates how to customize the behavior of the `CoreMiddleware` by extending it and overriding the `handleNotFound` and `handleMethodNotAllowed` methods. This allows for custom handling of 404 and 405 errors.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/middleware/middleware.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Middleware;\n\nuse Hyperf\\Contract\\Arrayable;\nuse Hyperf\\HttpMessage\\Stream\\SwooleStream;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass CoreMiddleware extends \\Hyperf\\HttpServer\\CoreMiddleware\n{\n    /**\n     * Handle the response when cannot found any routes.\n     *\n     * @return array|Arrayable|mixed|ResponseInterface|string\n     */\n    protected function handleNotFound(ServerRequestInterface $request)\n    {\n        // 重寫路由找不到的處理邏輯\n        return $this->response()->withStatus(404);\n    }\n\n    /**\n     * Handle the response when the routes found but doesn't match any available methods.\n     *\n     * @return array|Arrayable|mixed|ResponseInterface|string\n     */\n    protected function handleMethodNotAllowed(array $methods, ServerRequestInterface $request)\n    {\n        // 重寫 HTTP 方法不允許的處理邏輯\n        return $this->response()->withStatus(405);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Plates Engine\nDESCRIPTION: Installs the Plates template engine using Composer. This allows you to use Plates templates in your Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require league/plates\n```\n\n----------------------------------------\n\nTITLE: Blade Switch Statements\nDESCRIPTION: This Blade template demonstrates how to use `@switch`, `@case`, `@break`, `@default`, and `@endswitch` directives to construct switch statements, similar to PHP's switch statement.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_19\n\nLANGUAGE: blade\nCODE:\n```\n@switch($i)\n    @case(1)\n        First case...\n        @break\n\n    @case(2)\n        Second case...\n        @break\n\n    @default\n        Default case...\n@endswitch\n```\n\n----------------------------------------\n\nTITLE: Install ThinkTemplate Engine\nDESCRIPTION: Installs the ThinkTemplate templating engine via Composer for use with Hyperf's view component, enabling ThinkTemplate rendering in your Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require sy-records/think-template\n```\n\n----------------------------------------\n\nTITLE: Register Gitlab-runner - Shell\nDESCRIPTION: This command registers a gitlab-runner instance.  The user is prompted for the Gitlab coordinator URL, token, description, tags, and executor.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/docker-swarm.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ gitlab-runner register --clone-url http://intranet-ip/\n\nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):\nhttp://gitlab.xxx.cc/\nPlease enter the gitlab-ci token for this runner:\nxxxxx\nPlease enter the gitlab-ci description for this runner:\nxxx\nPlease enter the gitlab-ci tags for this runner (comma separated):\nbuilder\nPlease enter the executor: docker-ssh, shell, docker+machine, docker-ssh+machine, docker, parallels, ssh, virtualbox, kubernetes:\nshell\n```\n\n----------------------------------------\n\nTITLE: Translate Plurals - PHP\nDESCRIPTION: Shows how to use the `trans_choice` function to retrieve the correct pluralized string based on a given quantity.  The first argument is the translation key, and the second is the quantity.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/translation.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\necho trans_choice('messages.apples', 10);\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Autoload for gRPC Code\nDESCRIPTION: This JSON snippet configures the Composer autoloader to include the generated gRPC code. It maps the `GPBMetadata` and `Grpc` namespaces to their respective directories, allowing the generated PHP classes to be automatically loaded. After adding this, `composer dump-autoload` needs to be executed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/grpc.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\\": \"app/\",\n            \"GPBMetadata\\\\\": \"grpc/GPBMetadata\",\n            \"Grpc\\\\\": \"grpc/Grpc\"\n        },\n        \"files\": [\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Phar Package (Custom Path)\nDESCRIPTION: This command builds a Phar package including files from a custom path, specified by the `--path` option, allowing you to control which directories are included in the archive.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/phar.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php phar:build --path=BASE_PATH\n```\n\n----------------------------------------\n\nTITLE: Default Implementation PHP\nDESCRIPTION: A default implementation when no weight is supplied\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse FooInterface;\nuse Foo2;\n\nreturn [\n    'dependencies' => [\n        FooInterface::class => Foo2::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML after Merging Attributes (HTML)\nDESCRIPTION: This is the resulting HTML output after the class attributes have been merged. The default classes from the component's view and the class passed to the component are combined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n    <div class=\"alert alert-error mb-4\">\n        <!-- $message 变量的内容 -->\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Model Implementation with Cacheable Trait\nDESCRIPTION: Implements the `CacheableInterface` in a Hyperf Model by using the `Cacheable` Trait. This provides cache functionality to the model, allowing for caching of frequently accessed data to reduce database load.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model-cache.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\DbConnection\\Model\\Model;\nuse Hyperf\\ModelCache\\Cacheable;\nuse Hyperf\\ModelCache\\CacheableInterface;\n\n/**\n * @property $id\n * @property $name\n * @property $gender\n * @property $created_at\n * @property $updated_at\n */\nclass User extends Model implements CacheableInterface\n{\n    use Cacheable;\n\n    /**\n     * The table associated with the model.\n     * @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * The attributes that are mass assignable.\n     * @var array\n     */\n    protected $fillable = ['id', 'name', 'gender', 'created_at', 'updated_at'];\n\n    protected $casts = ['id' => 'integer', 'gender' => 'integer'];\n}\n\n// 查詢單個緩存\n/** @var int|string $id */\n$model = User::findFromCache($id);\n\n// 批量查詢緩存，返回 Hyperf\\Database\\Model\\Collection\n/** @var array $ids */\n$models = User::findManyFromCache($ids);\n```\n\n----------------------------------------\n\nTITLE: Composer Repository Configuration (JSON)\nDESCRIPTION: This snippet shows how to configure the composer.json file within the Hyperf skeleton project to use a local path for the Hyperf component library. This allows Composer to load the local Hyperf project as a dependency via a path repository.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/component-guide/intro.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"repositories\": {\n        \"hyperf\": {\n            \"type\": \"path\",\n            \"url\": \"../hyperf/src/*\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Validation Rule - PHP\nDESCRIPTION: This snippet shows how to use the `sometimes` rule to conditionally apply validation rules. The `email` field is only validated if it exists in the input data. This example requires a `$data` array for validation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_44\n\nLANGUAGE: PHP\nCODE:\n```\n$validator = $this->validationFactory->make($data, [\n    'email' => 'sometimes|required|email',\n]);\n```\n\n----------------------------------------\n\nTITLE: Install Alternative Blade Engine (Bash)\nDESCRIPTION: This command installs the duncan3dc/blade template engine using Composer. It's an alternative Blade implementation, but is not recommended due to compatibility issues.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require duncan3dc/blade\n```\n\n----------------------------------------\n\nTITLE: UserServiceInterface Definition\nDESCRIPTION: Defines a UserServiceInterface interface which is used for abstract object injection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Service;\n\ninterface UserServiceInterface\n{\n    public function getInfoById(int $id);\n}\n```\n\n----------------------------------------\n\nTITLE: Publish Watcher Configuration\nDESCRIPTION: This command publishes the default configuration file for the Hyperf Watcher component. This allows users to customize the watcher settings, such as watched directories, files, and polling intervals.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/watcher.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/watcher\n```\n\n----------------------------------------\n\nTITLE: Configure Gitlab Email Settings\nDESCRIPTION: This configures Gitlab to send emails, such as user creation emails.  It requires modifying the gitlab.rb file and specifying the SMTP server details. Replace the placeholder values with your actual email server settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ngitlab_rails['smtp_enable'] = true\ngitlab_rails['smtp_address'] = \"smtp.exmail.qq.com\"\ngitlab_rails['smtp_port'] = 465\ngitlab_rails['smtp_user_name'] = \"git@xxxx.com\"\ngitlab_rails['smtp_password'] = \"xxxx\"\ngitlab_rails['smtp_authentication'] = \"login\"\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = true\ngitlab_rails['gitlab_email_from'] = 'git@xxxx.com'\ngitlab_rails['smtp_domain'] = \"exmail.qq.com\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Database Connection in Hyperf Migration\nDESCRIPTION: This code snippet demonstrates how to specify a different database connection for a particular migration by overriding the `$connection` property.  This allows you to target different databases. The connection name must match a configured connection in `config/autoload/databases.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Database\\Schema\\Schema;\nuse Hyperf\\Database\\Schema\\Blueprint;\nuse Hyperf\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    // This corresponds to the connection key in config/autoload/databases.php\n    protected $connection = 'foo';\n    \n    public function up(): void\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->timestamps();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Resource gRPC\nDESCRIPTION: Installs the hyperf/resource-grpc package using composer, enabling gRPC resource support.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/resource-grpc\n```\n\n----------------------------------------\n\nTITLE: Blade Template Example\nDESCRIPTION: Example Blade template file (`index.blade.php`) demonstrating how to display a variable `$name` passed from the controller.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view.md#_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hyperf</title>\n</head>\n<body>\nHello, {{ $name }}. You are using blade template now.\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Parameter Grouping SQL Example\nDESCRIPTION: Shows the equivalent SQL generated by the Parameter Grouping example.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\nselect * from users where name = 'John' and (votes > 100 or title = 'Admin')\n```\n\n----------------------------------------\n\nTITLE: Removing and Re-creating Ingress Network\nDESCRIPTION: Removes and recreates the ingress network with a specified subnet of 192.168.0.1/16. This is done to resolve potential subnet conflicts and ensure proper routing for ingress traffic. Then recreates the default overlay network.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ndocker network rm ingress\ndocker network create --ingress --subnet 192.168.0.1/16 --driver overlay ingress\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker network create \\\n--driver overlay \\\n--subnet 10.0.0.1/8 \\\n--opt encrypted \\\n--attachable \\\ndefault-network\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Logger\nDESCRIPTION: This command installs the hyperf/logger component using Composer. This component provides logging functionality within Hyperf applications and relies on psr/logger and monolog/monolog.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/logger.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/logger\n```\n\n----------------------------------------\n\nTITLE: Install Memory Adapter (Flysystem v1.0)\nDESCRIPTION: This command installs the in-memory adapter for Flysystem v1.0, which allows for storage in memory rather than on disk.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/filesystem.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"league/flysystem-memory:^1.0\"\n```\n\n----------------------------------------\n\nTITLE: Add Optimize Autoloader Configuration - JSON\nDESCRIPTION: Adds the `optimize-autoloader` configuration to the `composer.json` file. This ensures that the composer autoloader is optimized during dependency updates, improving application performance. Requires modifying the 'config' section of the composer.json file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.1.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"config\": {\n        \"optimize-autoloader\": true,\n        \"sort-packages\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Code Analysis in PHP\nDESCRIPTION: This command performs static code analysis on the Hyperf project to identify potential issues after upgrading to version 3.0, which includes stricter type restrictions. It helps ensure that the code is compatible with the new version and identifies areas that may require modification.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog-v3.0.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer analysis\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Task Component\nDESCRIPTION: Installs the Hyperf Task component using Composer. This command adds the `hyperf/task` package to the project's dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/task.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/task\n```\n\n----------------------------------------\n\nTITLE: Configure Local SID Provider\nDESCRIPTION: This PHP configuration replaces the default SocketID provider with the LocalSidProvider. It changes the SocketID format to directly use the Fd (file descriptor) which is appropriate for non-distributed applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/socketio-server/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\SocketIOServer\\SidProvider\\SidProviderInterface::class => \\Hyperf\\SocketIOServer\\SidProvider\\LocalSidProvider::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Install Tencent Cloud COS Adapter\nDESCRIPTION: This shell command installs the `overtrue/flysystem-cos` component, enabling integration with Tencent Cloud COS for file storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.2.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-cos:^4.0\"\n```\n\n----------------------------------------\n\nTITLE: Install Box on Linux x86_64\nDESCRIPTION: These commands download, move, and set permissions for the Box executable on Linux (x86_64 architecture). Ensure the directory where Box is located is in your system's PATH environment variable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/eco/box.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/hyperf/box/releases/download/v0.5.5/box_x86_64_linux -O box\nsudo mv ./box /usr/local/bin/box\nsudo chmod 755 /usr/local/bin/box\n// Make sure /usr/local/bin/box in your $PATH env, or put `box` into any path in $PATH env that you want\n```\n\n----------------------------------------\n\nTITLE: Generate a Hyperf Resource Collection\nDESCRIPTION: These commands generate resource collections. The first uses the `--collection` flag, and the second includes `Collection` in the name.  Resource collections extend `Hyperf\\Resource\\Json\\ResourceCollection`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php gen:resource Users --collection\n```\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php gen:resource UserCollection\n```\n\n----------------------------------------\n\nTITLE: Configure Prometheus Push Mode\nDESCRIPTION: This PHP snippet configures Prometheus to use the push mode.  This is only recommended for offline tasks. In this mode, the application pushes metrics data to a Prometheus Pushgateway.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n'mode' => Constants::PUSH_MODE\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Rate Limit\nDESCRIPTION: Installs the hyperf/rate-limit package using Composer. This command adds the Rate Limit component to your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/rate-limit.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/rate-limit\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gitlab Root Password\nDESCRIPTION: Retrieves the initial root password for the Gitlab instance running in a Docker container.  This command executes inside the running Gitlab container to read the initial password file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec gitlab cat /etc/gitlab/initial_root_password\n```\n\n----------------------------------------\n\nTITLE: Config Provider Structure Before Change PHP\nDESCRIPTION: This code snippet shows the previous structure of the 'scan' configuration within the config provider.  It defines the paths to be scanned for annotations and the collectors to be used.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.0.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n'scan' => [\n    'paths' => [\n        __DIR__,\n    ],\n    'collectors' => [],\n],\n```\n\n----------------------------------------\n\nTITLE: Histogram Interface Definition\nDESCRIPTION: This PHP interface defines the methods for a histogram metric, including `with` for setting label values and `put` for adding a sample to the histogram.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\ninterface HistogramInterface\n{\n    public function with(string ...$labelValues): self;\n\n    public function put(float $sample);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Str::containsIgnoreCase() in Hyperf\nDESCRIPTION: This code adds a new function `Str::containsIgnoreCase()` to the Hyperf framework. This function determines if a given string contains a given substring regardless of case sensitivity. It aims to provide a case-insensitive string search functionality.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/3.0.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nStr::containsIgnoreCase()\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Database\nDESCRIPTION: This command installs the hyperf/database component for use in PHP-FPM or Swoole-based frameworks other than Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/quick-start.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/database\n```\n\n----------------------------------------\n\nTITLE: Config Changed Event Listener\nDESCRIPTION: This PHP code snippet demonstrates how to create an event listener for the `Hyperf\\ConfigCenter\\Event\\ConfigChanged` event. The listener's `process` method will be executed when the configuration is updated from the configuration center.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config-center.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\ConfigCenter\\Event\\ConfigChanged;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\n\n#[Listener]\nclass DbQueryExecutedListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            ConfigChanged::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        var_dump($event);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Start Hyperf project\nDESCRIPTION: These commands navigate to the project directory and start the Hyperf server using the `hyperf.php` script. This initiates the Hyperf application server, listening for incoming requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/install.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncd hyperf-skeleton\nphp bin/hyperf.php start\n```\n\n----------------------------------------\n\nTITLE: Returning a Resource Collection from a Controller\nDESCRIPTION: Demonstrates how to return a resource collection from a Hyperf controller. It uses the 'collection' method of the 'UserResource' class to create a resource collection from all 'User' models, and then calls the 'toResponse' method to convert it into a response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Resource\\User as UserResource;\nuse App\\Model\\User;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return UserResource::collection(User::all())->toResponse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Swoole Short Name Configuration\nDESCRIPTION: This snippet demonstrates the error message when Swoole short function names are not disabled. It shows the necessary php.ini configuration to disable them.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/questions.md#_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\nswoole.use_shortname = 'Off'\n```\n\n----------------------------------------\n\nTITLE: Prometheus Scrape Mode\nDESCRIPTION: Configures the Prometheus driver to use scrape mode, where Prometheus pulls metrics from the application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n'mode' => Constants::SCRAPE_MODE\n```\n\n----------------------------------------\n\nTITLE: Running a Custom Command\nDESCRIPTION: This bash command executes a custom command registered within the Hyperf Nano application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nano.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp index.php echo\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Validation\nDESCRIPTION: Installs the hyperf/validation component using Composer. This is a necessary first step to use the validation features in a Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/validation/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/validation\n```\n\n----------------------------------------\n\nTITLE: Date Type Conversion in Hyperf Model\nDESCRIPTION: This snippet shows how to use the `datetime` cast type with a format.  The `created_at` attribute is cast to a datetime, and it's formatted as `Y-m-d` when serialized to an array or JSON.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/mutators.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 應進行類型轉換的屬性\n     *\n     * @var array\n     */\n    protected $casts = [\n         'created_at' => 'datetime:Y-m-d',\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Default Cache Configuration\nDESCRIPTION: This PHP array represents the default configuration for the Hyperf cache component. It specifies the driver, packer, prefix, and results to skip.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/cache.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'driver' => Hyperf\\Cache\\Driver\\RedisDriver::class,\n        'packer' => Hyperf\\Codec\\Packer\\PhpSerializerPacker::class,\n        'prefix' => 'c:',\n        'skip_cache_results' => [],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configure WebSocket Server for Socket.IO in Hyperf\nDESCRIPTION: This configuration snippet demonstrates how to set up a WebSocket server in Hyperf's `server.php` configuration file.  It defines the server's name, type (WebSocket), host, port, socket type, and callbacks for handshake, message, and close events. The callbacks are crucial for handling WebSocket connections and messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/socketio-server.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/server.php\n[\n    'name' => 'socket-io',\n    'type' => Server::SERVER_WEBSOCKET,\n    'host' => '0.0.0.0',\n    'port' => 9502,\n    'sock_type' => SWOOLE_SOCK_TCP,\n    'callbacks' => [\n        Event::ON_HAND_SHAKE => [Hyperf\\WebSocketServer\\Server::class, 'onHandShake'],\n        Event::ON_MESSAGE => [Hyperf\\WebSocketServer\\Server::class, 'onMessage'],\n        Event::ON_CLOSE => [Hyperf\\WebSocketServer\\Server::class, 'onClose'],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Generation Options (PHP)\nDESCRIPTION: This code snippet shows how to configure the model generation options within the `databases.{pool}.commands.gen:model` configuration array.  It demonstrates settings such as the model path, whether to force casts, the parent class, and other table related configurations.  The middle dashes need to be converted to underscores in the configuration array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/gen.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Database\\Commands\\ModelOption;\n\nreturn [\n    'default' => [\n        // 忽略其他配置\n        'commands' => [\n            'gen:model' => [\n                'path' => 'app/Model',\n                'force_casts' => true,\n                'inheritance' => 'Model',\n                'uses' => '',\n                'refresh_fillable' => true,\n                'table_mapping' => [],\n                'with_comments' => true,\n                'property_case' => ModelOption::PROPERTY_SNAKE_CASE,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with AutoController Annotation in Hyperf\nDESCRIPTION: This snippet demonstrates how to define routes using the `#[AutoController]` annotation.  Hyperf automatically parses all public methods within the annotated class and provides GET and POST request handling for each method. Requires `use Hyperf\\HttpServer\\Annotation\\AutoController;`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/overview.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass IndexController\n{\n    // Hyperf 會自動為此方法生成一個 /index/index 的路由，允許透過 GET 或 POST 方式請求\n    public function index(RequestInterface $request)\n    {\n        // 從請求中獲得 id 引數\n        $id = $request->input('id', 1);\n        return (string)$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Metric Component via Composer\nDESCRIPTION: This command installs the `hyperf/metric` component using Composer, adding it as a dependency to your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/metric\n```\n\n----------------------------------------\n\nTITLE: Running Docker with UDP Protocol\nDESCRIPTION: This command shows how to expose a UDP port when running a Docker container. It maps the host port 9502 to the container port 9502 using the UDP protocol.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tcp-server.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p 9502:9502/udp <image-name>\n\n```\n\n----------------------------------------\n\nTITLE: Installing Docker\nDESCRIPTION: Installs Docker on the system using a shell script from get.docker.com. This script automates the installation process and sets up the Docker environment.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSL https://get.docker.com/ | sh\n```\n\n----------------------------------------\n\nTITLE: Publishing Scout Configuration (Again)\nDESCRIPTION: This command publishes the Scout configuration file to the config directory. This allows you to customize the Scout settings for your application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/scout\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Multiple WebSocket Servers\nDESCRIPTION: This code provides an Nginx configuration for load balancing across multiple WebSocket servers.  It defines an upstream block `io_nodes` that lists the WebSocket server addresses (ws1:9502, ws2:9502). The server block listens on port 9502 and proxies WebSocket connections to the upstream servers.  The configuration includes necessary headers for WebSocket connections like `Upgrade` and `Connection`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/websocket-server.md#_snippet_7\n\nLANGUAGE: nginx\nCODE:\n```\n# /etc/nginx/conf.d/ng_socketio.conf\n# 多個 ws server\nupstream io_nodes {\n    server ws1:9502;\n    server ws2:9502;\n}\nserver {\n  listen 9502;\n  # server_name your.socket.io;\n  location / {\n    proxy_set_header Upgrade \"websocket\";\n    proxy_set_header Connection \"upgrade\";\n    # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    # proxy_set_header Host $host;\n    # proxy_http_version 1.1;\n    # 轉發到多個 ws server\n    proxy_pass http://io_nodes;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Build Phar Archive Mapping External Files\nDESCRIPTION: Builds a Phar archive with external file mapping using the `-M` option.  This command maps files from outside the phar archive into the archive, enabling access to external resources like `.env` files.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/phar.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php phar:build -M .env\n```\n\n----------------------------------------\n\nTITLE: Custom Low Frequency Implementation in Hyperf\nDESCRIPTION: Shows how to customize the low-frequency component used by connection pools to determine when to release idle connections. This involves extending the `Hyperf\\Pool\\Frequency` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/pool.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Pool;\n\nclass Frequency extends \\Hyperf\\Pool\\Frequency\n{\n    /**\n     * 被计算频率的时间间隔\n     */\n    protected int $time = 10;\n\n    /**\n     * 触发低频的频率\n     */\n    protected int $lowFrequency = 5;\n\n    /**\n     * 连续触发低频的最小时间间隔\n     */\n    protected int $lowFrequencyInterval = 60;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Config Provider Scan Paths After Change PHP\nDESCRIPTION: This code shows the updated structure of the `scan` configuration in the config provider. The `scan` configuration is nested under `annotations`, and it defines the paths to be scanned for annotations and the collectors to be used.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.1.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n'annotations' => [\n    'scan' => [\n        'paths' => [\n            __DIR__,\n        ],\n        'collectors' => [],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Check if More Pages Exist\nDESCRIPTION: Determines whether there are more pages available after the current one. This allows for conditional rendering of 'Next' buttons or other pagination controls.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/paginator.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ($paginator->hasMorePages()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Qiniu Adapter (Flysystem v3.0)\nDESCRIPTION: Installs the Qiniu adapter compatible with Flysystem v3.0.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/filesystem.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-qiniu:^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuration Update: container.php in Hyperf\nDESCRIPTION: This code snippet shows the updated content of the `config/container.php` file in Hyperf. It initializes the dependency injection container using the DefinitionSourceFactory and sets the container in the ApplicationContext. This change simplifies the configuration and optimizes the annotation caching mechanism.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog-v1.1.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Di\\Definition\\DefinitionSourceFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = new Container((new DefinitionSourceFactory(true))());\n\nif (! $container instanceof \\Psr\\Container\\ContainerInterface) {\n    throw new RuntimeException('The dependency injection container is invalid.');\n}\nreturn ApplicationContext::setContainer($container);\n```\n\n----------------------------------------\n\nTITLE: Getting Manager Join Token\nDESCRIPTION: This command retrieves the join token for adding manager nodes to the Docker Swarm cluster. Requires Docker Swarm.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_47\n\nLANGUAGE: shell\nCODE:\n```\n$ docker swarm join-token manager\n```\n\n----------------------------------------\n\nTITLE: Default Swagger UI HTML\nDESCRIPTION: This HTML code represents the default Swagger UI page. It includes meta tags, CSS links, script links, and JavaScript code to initialize the Swagger UI with a specified URL. This HTML is customizable through configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/swagger.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta\n      name=\"description\"\n      content=\"SwaggerUI\"\n    />\n    <title>SwaggerUI</title>\n    <link rel=\"stylesheet\" href=\"https://unpkg.hyperf.wiki/swagger-ui-dist@4.5.0/swagger-ui.css\" />\n  </head>\n  <body>\n  <div id=\"swagger-ui\"></div>\n  <script src=\"https://unpkg.hyperf.wiki/swagger-ui-dist@4.5.0/swagger-ui-bundle.js\" crossorigin></script>\n  <script src=\"https://unpkg.hyperf.wiki/swagger-ui-dist@4.5.0/swagger-ui-standalone-preset.js\" crossorigin></script>\n  <script>\n    window.onload = () => {\n      window.ui = SwaggerUIBundle({\n        url: GetQueryString(\"search\"),\n        dom_id: '#swagger-ui',\n        presets: [\n          SwaggerUIBundle.presets.apis,\n          SwaggerUIStandalonePreset\n        ],\n        layout: \"StandaloneLayout\",\n      });\n    };\n    function GetQueryString(name) {\n      var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\", \"i\");\n      var r = window.location.search.substr(1).match(reg); //获取url中\"?\"符后的字符串并正则匹配\n      var context = \"\";\n      if (r != null)\n        context = decodeURIComponent(r[2]);\n      reg = null;\n      r = null;\n      return context == null || context == \"\" || context == \"undefined\" ? \"/http.json\" : context;\n    }\n  </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: List Devtool Commands\nDESCRIPTION: Shows the available `gen` commands for generating various components such as AMQP consumers/producers, aspects, commands, controllers, jobs, listeners, middleware, and processes. Also lists the `vendor:publish` command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/devtool.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n gen\n  gen:amqp-consumer  Create a new amqp consumer class\n  gen:amqp-producer  Create a new amqp producer class\n  gen:aspect         Create a new aspect class\n  gen:command        Create a new command class\n  gen:controller     Create a new controller class\n  gen:job            Create a new job class\n  gen:listener       Create a new listener class\n  gen:middleware     Create a new middleware class\n  gen:process        Create a new process class\n vendor\n  vendor:publish     Publish any publishable configs from vendor packages.\n```\n\n----------------------------------------\n\nTITLE: Executing a Hyperf Nano Command\nDESCRIPTION: Executes the custom command added in the previous example.  Assumes the command `echo` has been added.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nano.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nphp index.php echo\n```\n\n----------------------------------------\n\nTITLE: Configuring Tracing Enables\nDESCRIPTION: This configuration enables or disables tracing for different components like Guzzle HTTP, Redis, and DB calls.  Setting a value to `true` enables tracing for that component, while `false` disables it.  This allows you to control which parts of your application are traced.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tracer.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'enable' => [\n        // 打開或關閉對 Guzzle HTTP 調用的追蹤\n        'guzzle' => false,\n        // 打開或關閉對 Redis 調用的追蹤\n        'redis' => false,\n        // 打開或關閉對 DB  調用的追蹤\n        'db' => false,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Disabling Swoole short names via command line\nDESCRIPTION: This snippet shows how to disable Swoole short function names when running a PHP command by using the `-d` flag.  This is an alternative to setting the `swoole.use_shortname` option in php.ini. The command will start the Hyperf server while disabling the Swoole short name functionality.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/questions.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp -d swoole.use_shortname=Off bin/hyperf.php start\n```\n\n----------------------------------------\n\nTITLE: Start Hyperf Server - Bash\nDESCRIPTION: This command starts the Hyperf server, initiating both the HTTP and WebSocket servers. It uses the `bin/hyperf.php` script with the `start` command. After executing this command, the WebSocket server will be listening on the configured port (9502 in the example).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/websocket-server.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/hyperf.php start\n```\n\n----------------------------------------\n\nTITLE: Defining Closure Command (PHP)\nDESCRIPTION: Defines a command using a closure within the `config/console.php` file. This provides a quick way to define simple commands without creating a separate class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Command\\Console;\n\nConsole::command('hello', function () {\n    $this->comment('Hello, Hyperf!');\n})->describe('This is a demo closure command.');\n\n```\n\n----------------------------------------\n\nTITLE: Installing Tencent Cloud COS Adapter (Flysystem v2.0)\nDESCRIPTION: Install the Tencent Cloud COS adapter for Flysystem v2.0, using overtrue/flysystem-cos v4.0. This allows interacting with Tencent Cloud Object Storage. Requires PHP and Composer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/filesystem.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-cos:^4.0\"\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Config Center Client (Hyperf)\nDESCRIPTION: This command installs the Apollo client for Hyperf, allowing the application to retrieve configurations from an Apollo configuration server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config-center.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-apollo\n```\n\n----------------------------------------\n\nTITLE: Rendering a Blade View\nDESCRIPTION: This PHP code demonstrates how to render a Blade view named 'child' using the Hyperf View Engine.  It defines a controller method 'child' that returns the rendered view as a string, making it usable within a Hyperf HTTP server context.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse function Hyperf\\ViewEngine\\view;\n\n#[AutoController(prefix: \"view\")]\nclass ViewController extends AbstractController\n{\n    public function child()\n    {\n        return (string) view('child');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Close in Hyperf WebSocket Client\nDESCRIPTION: This code shows how to disable the automatic closing of the WebSocket client connection. By default, the Client object automatically closes the connection using defer.  Setting the `$autoClose` parameter to `false` in the `create` method prevents this behavior.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/websocket-client.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$autoClose = false;\n$client = $clientFactory->create($host, $autoClose);\n```\n\n----------------------------------------\n\nTITLE: Creating a TCP Server Class with Hyperf\nDESCRIPTION: This code snippet defines a TCP server class that implements the `OnReceiveInterface` to handle incoming data. The `onReceive` method is called when data is received on a TCP connection. It echoes the received data back to the client, prepended with 'recv:'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tcp-server.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnReceiveInterface;\n\nclass TcpServer implements OnReceiveInterface\n{\n    public function onReceive($server, int $fd, int $reactorId, string $data): void\n    {\n        $server->send($fd, 'recv:' . $data);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Custom Retry Annotation with Classifier Retry Policy PHP\nDESCRIPTION: This example extends the `MyRetry` annotation by including the `ClassifierRetryPolicy`, which controls what errors are retried. By default, it retries after throwing a `Throwable`. Requires the `ClassifierRetryPolicy` class in addition to previous dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/retry.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Annotation;\n\nuse Doctrine\\Common\\Annotations\\Annotation\\Target;\n\n#[Attribute(Attribute::TARGET_METHOD)]\nclass MyRetry extends \\Hyperf\\Retry\\Annotation\\AbstractRetry\n{\n    public $policies = [\n        MaxAttemptsRetryPolicy::class,\n        ClassifierRetryPolicy::class,\n    ];\n    public $maxAttempts = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: List Supported Commands\nDESCRIPTION: Lists the available commands provided by the Hyperf framework, including those supported by the Devtool component. The `gen` series and `vendor:publish` commands are specific to Devtool.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/devtool.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php\n```\n\n----------------------------------------\n\nTITLE: Publish Translation Component Configuration\nDESCRIPTION: This command publishes the configuration files for the hyperf/translation component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/translation\n```\n\n----------------------------------------\n\nTITLE: Registering Listener via Configuration - PHP\nDESCRIPTION: Registers the `UserRegisteredListener` in the `config/autoload/listeners.php` configuration file. This allows the event dispatcher to discover the listener. The order in this file determines the order in which listeners are executed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/event.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    \\App\\Listener\\UserRegisteredListener::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Deleting Cache on Query Delete\nDESCRIPTION: This code demonstrates how to delete cache when deleting data from the database using `Model::query`. The framework will automatically delete the corresponding cache data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model-cache.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// 從資料庫刪除使用者資料，框架會自動刪除對應的快取資料\nUser::query(true)->where('gender', '>', 1)->delete();\n```\n\n----------------------------------------\n\nTITLE: Install Aliyun OSS Adapter (Flysystem v2.0/v3.0)\nDESCRIPTION: This command installs the Aliyun OSS adapter for Flysystem v2.0 and v3.0 using Composer. This adapter allows you to interact with Aliyun OSS storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/filesystem.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/flysystem-oss\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf NATS Package\nDESCRIPTION: This command installs the `hyperf/nats` package using Composer, which provides NATS integration for Hyperf applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nats.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/nats\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Client in Hyperf Jet\nDESCRIPTION: This code snippet defines a custom client class `CalculatorService` that extends `AbstractClient`. It configures the transporter and packer in the constructor and overrides the parent constructor. The `@method` docblock enables static analysis for RPC method calls.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/jet.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Jet\\AbstractClient;\nuse Hyperf\\Jet\\Packer\\JsonEofPacker;\nuse Hyperf\\Jet\\Transporter\\StreamSocketTransporter;\nuse Hyperf\\Rpc\\Contract\\DataFormatterInterface;\nuse Hyperf\\Rpc\\Contract\\PackerInterface;\nuse Hyperf\\Rpc\\Contract\\PathGeneratorInterface;\nuse Hyperf\\Rpc\\Contract\\TransporterInterface;\n\n/**\n * @method int add(int $a, int $b);\n */\nclass CalculatorService extends AbstractClient\n{\n    // 定義 `CalculatorService` 作為 $service 參數的默認值\n    public function __construct(\n        string $service = 'CalculatorService',\n        TransporterInterface $transporter = null,\n        PackerInterface $packer = null,\n        ?DataFormatterInterface $dataFormatter = null,\n        ?PathGeneratorInterface $pathGenerator = null\n    ) {\n        // 這裏指定 transporter，您仍然可以通過 ProtocolManager 來獲得 transporter 或從構造函數傳遞\n        $transporter = new StreamSocketTransporter('127.0.0.1', 9503);\n        // 這裏指定 packer，您仍然可以通過 ProtocolManager 來獲得 packer 或從構造函數傳遞\n        $packer = new JsonEofPacker();\n        parent::__construct($service, $transporter, $packer, $dataFormatter, $pathGenerator);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging into Docker Registry as Gitlab Runner\nDESCRIPTION: Logs the `gitlab-runner` user into a Docker registry to allow it to push and pull images. Replace `username` and `your-docker-repository` with the actual credentials and registry URL.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nsu gitlab-runner\ndocker login -u username your-docker-repository\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Guzzle\nDESCRIPTION: Installs the hyperf/guzzle component using composer. This component provides coroutine-based HTTP client functionality.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/guzzle.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/guzzle\n```\n\n----------------------------------------\n\nTITLE: Create Unique Index After Definition\nDESCRIPTION: This snippet demonstrates how to create a unique index after the column definition using the `unique()` method. It creates a unique index on the 'name' column.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// 在定义完字段之后创建索引\n$table->unique('name');\n```\n\n----------------------------------------\n\nTITLE: Defining a gRPC Resource Class\nDESCRIPTION: Defines a gRPC resource class that extends 'Hyperf\\ResourceGrpc\\GrpcResource'. The 'toArray' method transforms the resource into an array, and the 'expect' method specifies the gRPC message class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace HyperfTest\\ResourceGrpc\\Stubs\\Resources;\n\nuse Hyperf\\ResourceGrpc\\GrpcResource;\nuse HyperfTest\\ResourceGrpc\\Stubs\\Grpc\\HiReply;\n\nclass HiReplyResource extends GrpcResource\n{\n    public function toArray(): array\n    {\n        return [\n            'message' => $this->message,\n            'user' => HiUserResource::make($this->user),\n        ];\n    }\n\n    public function expect(): string\n    {\n        return HiReply::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker PS\nDESCRIPTION: This command lists the Docker containers that are currently running. It shows the container ID, image, command, created time, status, ports, and names of each container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_59\n\nLANGUAGE: shell\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Example Soft Link Output\nDESCRIPTION: This snippet represents example output from the `ls -l` command, demonstrating the expected soft link structure. Each component within the vendor directory should link back to its corresponding directory in the Hyperf source code.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/component-guide/intro.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ncache -> ../../../hyperf/src/cache\ncommand -> ../../../hyperf/src/command\nconfig -> ../../../hyperf/src/config\ncontract -> ../../../hyperf/src/contract\ndatabase -> ../../../hyperf/src/database\ndb-connection -> ../../../hyperf/src/db-connection\ndevtool -> ../../../hyperf/src/devtool\ndi -> ../../../hyperf/src/di\ndispatcher -> ../../../hyperf/src/dispatcher\nevent -> ../../../hyperf/src/event\nexception-handler -> ../../../hyperf/src/exception-handler\nframework -> ../../../hyperf/src/framework\nguzzle -> ../../../hyperf/src/guzzle\nhttp-message -> ../../../hyperf/src/http-message\nhttp-server -> ../../../hyperf/src/http-server\nlogger -> ../../../hyperf/src/logger\nmemory -> ../../../hyperf/src/memory\npaginator -> ../../../hyperf/src/paginator\npool -> ../../../hyperf/src/pool\nprocess -> ../../../hyperf/src/process\nredis -> ../../../hyperf/src/redis\nserver -> ../../../hyperf/src/server\ntesting -> ../../../hyperf/src/testing\nsupport -> ../../../hyperf/src/support\n```\n\n----------------------------------------\n\nTITLE: Modifying SSHD Port\nDESCRIPTION: Modifies the SSH daemon configuration to change the default port from 22 to 2222 (or another unused port).  This enhances security by preventing automated attacks targeting the default SSH port.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vim /etc/ssh/sshd_config\n\n# 默认 Port 改为 2222\nPort 2222\n\n# 重启服务\n$ systemctl restart sshd.service\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Username and Password\nDESCRIPTION: This snippet shows how to configure the username and password for Elasticsearch access by including them in the host URL. This method is applicable when the Elasticsearch instance requires authentication, such as when using an enterprise version.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/elasticsearch.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nhttp://username:password@xxxx.aliyuncs.com:9200\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Command Component (Bash)\nDESCRIPTION: Install the hyperf/command component, which provides command-line functionality for Hyperf projects. This command utilizes composer to add the package as a dependency.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/command\n```\n\n----------------------------------------\n\nTITLE: Returning Search Results from a Route\nDESCRIPTION: Demonstrates how to return search results directly from a route, which will be automatically converted to JSON.  The `search([])` call returns all results.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/search', function () {\n        return App\\Order::search([])->get();\n    });\n```\n\n----------------------------------------\n\nTITLE: Remove doctrine/common Composer Bash\nDESCRIPTION: This bash snippet demonstrates how to remove the `doctrine/common` component from your project using `composer remove`. This is necessary because the component conflicts with `hyperf/utils`. It also includes updating Hyperf components using `composer update` with the `-o` flag for optimization.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/2.1.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# 移除组件\ncomposer remove doctrine/common\n# 更新\ncomposer update \"hyperf/*\" -o\n```\n\n----------------------------------------\n\nTITLE: Upgrade Database Model Classes (Shell)\nDESCRIPTION: This shell script uses the Hyperf code generator to upgrade the database model classes to the new version, which supports member variable types. The script regenerates models in the specified directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/3.0.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp vendor/bin/regenerate-models.php $PWD/app/Model\n```\n\n----------------------------------------\n\nTITLE: Bind NormalizerInterface in Hyperf\nDESCRIPTION: This snippet shows how to manually bind the NormalizerInterface implementation when using the symfony/serializer library with JSONRPC in Hyperf 2.0, as automatic mapping is no longer provided.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.0.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Utils\\Serializer\\SerializerFactory;\nuse Hyperf\\Utils\\Serializer\\Serializer;\n\nreturn [\n    Hyperf\\Contract\\NormalizerInterface::class => new SerializerFactory(Serializer::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Using EagerLoadListener to load cache\nDESCRIPTION: Demonstrates the usage of `EagerLoadListener` to load corresponding model relations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model-cache.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::findManyFromCache([1,2,3]);\n$books->loadCache(['user']);\n\nforeach ($books as $book){\n    var_dump($book->user);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Command with Optional Argument (Bash)\nDESCRIPTION: Executes a command with and without an optional argument, demonstrating how the default value is used when the argument is not provided.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/hyperf.php demo:command\n# 輸出\n...\nHyperf\n\n$ php bin/hyperf.php demo:command Swoole\n# 輸出\n...\nSwoole\n\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection via #[Inject] Annotation in Hyperf (PHP)\nDESCRIPTION: This snippet shows how to use the `#[Inject]` annotation for dependency injection.  By annotating a property with `#[Inject]` and declaring its type, Hyperf will automatically inject an instance of that type.  Requires `use Hyperf\\Di\\Annotation\\Inject;`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/overview.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse App\\Service\\UserService;\n\n#[AutoController]\nclass IndexController\n{\n\n    #[Inject]\n    private UserService $userService;\n    \n    // /index/info\n    public function info(RequestInterface $request)\n    {\n        $id = $request->input('id', 1);\n        return $this->userService->getInfoById((int)$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Kong Gateway\nDESCRIPTION: Runs the Kong gateway container, connecting it to the `default-network` and configuring it to use the PostgreSQL database.  It also sets environment variables for logging, admin listener, and port mappings for proxy and admin APIs.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name kong \\\n  --network=default-network \\\n  -e \"KONG_DATABASE=postgres\" \\\n  -e \"KONG_PG_HOST=kong-database\" \\\n  -e \"KONG_PG_PASSWORD=kong\" \\\n  -e \"KONG_CASSANDRA_CONTACT_POINTS=kong-database\" \\\n  -e \"KONG_PROXY_ACCESS_LOG=/dev/stdout\" \\\n  -e \"KONG_ADMIN_ACCESS_LOG=/dev/stdout\" \\\n  -e \"KONG_PROXY_ERROR_LOG=/dev/stderr\" \\\n  -e \"KONG_ADMIN_ERROR_LOG=/dev/stderr\" \\\n  -e \"KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl\" \\\n  -p 8000:8000 \\\n  -p 8443:8443 \\\n  -p 8001:8001 \\\n  -p 8444:8444 \\\n  kong:latest\n```\n\n----------------------------------------\n\nTITLE: Executing Command with Array Argument (Bash)\nDESCRIPTION: Executes a command with multiple values for an array argument.  The output shows how the values are collected into an array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/hyperf.php demo:command Hyperf Swoole\n# 輸出\n...\narray(2) {\n  [0]=>\n  string(6) \"Hyperf\"\n  [1]=>\n  string(6) \"Swoole\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Multiple WebSocket Servers\nDESCRIPTION: This Nginx configuration sets up a load balancer for multiple WebSocket servers running on the same port (9502). It uses the `upstream` directive to define the backend servers and the `proxy_pass` directive to forward WebSocket connections to them.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/websocket-server.md#_snippet_8\n\nLANGUAGE: Nginx\nCODE:\n```\n# /etc/nginx/conf.d/ng_socketio.conf\n# multiple ws server\nupstream io_nodes {\n    server ws1:9502;\n    server ws2:9502;\n}\nserver {\n  listen 9502;\n  # server_name your.socket.io;\n  location / {\n    proxy_set_header Upgrade \"websocket\";\n    proxy_set_header Connection \"upgrade\";\n    # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    # proxy_set_header Host $host;\n    # proxy_http_version 1.1;\n    # Forward to multiple ws server\n    proxy_pass http://io_nodes;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Mapping of NormalizerInterface\nDESCRIPTION: This code snippet shows how to manually map the `Hyperf\\Contract\\NormalizerInterface` implementation when the `symfony/serializer` library is required.  This mapping is no longer automatic and requires explicit configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog-v2.0.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Utils\\Serializer\\SerializerFactory;\nuse Hyperf\\Utils\\Serializer\\Serializer;\n\nreturn [\n    Hyperf\\Contract\\NormalizerInterface::class => new SerializerFactory(Serializer::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Database Connection Option (PHP)\nDESCRIPTION: This code demonstrates how to specify a different database connection for a migration by overriding the `$connection` property. The value should match a key defined in `config/autoload/databases.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Database\\Schema\\Schema;\nuse Hyperf\\Database\\Schema\\Blueprint;\nuse Hyperf\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    // 这里对应 config/autoload/databases.php 内的连接 key\n    protected $connection = 'foo';\n    \n    public function up(): void\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->timestamps();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Factory Object Injection: Configuration\nDESCRIPTION: Configuration to bind the UserServiceInterface to the UserServiceFactory. This makes the factory responsible for creating UserService instances.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    \\App\\Service\\UserServiceInterface::class => \\App\\Service\\UserServiceFactory::class\n];\n```\n\n----------------------------------------\n\nTITLE: Fixing aliyun oss wrong charset (Alpine 3.13)\nDESCRIPTION: This snippet demonstrates how to fix the iconv error when using the `aliyuncs/oss-sdk-php` component for uploading files to Aliyun OSS in the `hyperf/hyperf:8.0-alpine-v3.13-swoole` Docker image. It installs the gnu-libiconv package and sets the LD_PRELOAD environment variable to use it.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/questions.md#_snippet_10\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apk add --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/v3.13/community/ gnu-libiconv=1.15-r3\nENV LD_PRELOAD /usr/lib/preloadable_libiconv.so php\n```\n\n----------------------------------------\n\nTITLE: Convert Swoole Channel to Observable\nDESCRIPTION: This example demonstrates how to convert a Swoole coroutine Channel into an observable sequence using `Observable::fromChannel`. It illustrates using the `publish` operator to create a hot observable that can be subscribed to by multiple observers.  The code creates a channel, publishes the channel's data to two subscribers, and then pushes data into the channel. Both subscribers receive each piece of data pushed into the channel.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/reactive-x.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\ReactiveX\\Observable;\nuse Swoole\\Coroutine\\Channel;\n\n$chan = new Channel(1);\n$pub = Observable::fromChannel($chan)->publish();\n\n$pub->subscribe(function ($x) {\n    echo 'First Subscription:' . $x . PHP_EOL;\n});\n$pub->subscribe(function ($x) {\n    echo 'Second Subscription:' . $x . PHP_EOL;\n});\n$pub->connect();\n\n$chan->push('hello');\n$chan->push('world');\n\n// First Subscription: hello\n// Second Subscription: hello\n// First Subscription: world\n// Second Subscription: world\n\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Jet\nDESCRIPTION: This command installs the Hyperf Jet component using Composer, a dependency manager for PHP. This component facilitates the creation of RPC clients.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/jet.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/jet\n```\n\n----------------------------------------\n\nTITLE: Defining Hyperf Server for Swagger\nDESCRIPTION: This annotation associates a controller or method with a specific Hyperf server, enabling the generation of separate Swagger files for each server configuration. It uses the `SA\\HyperfServer` annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/swagger.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n#[SA\\HyperfServer('http')]\n```\n\n----------------------------------------\n\nTITLE: Standalone Process Configuration\nDESCRIPTION: Configures whether to use a standalone process for metric collection and reporting. Enabling this option is recommended for asynchronous applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n'use_standalone_process' => env('TELEMETRY_USE_STANDALONE_PROCESS', true),\n```\n\n----------------------------------------\n\nTITLE: Custom Table Name (Hyperf)\nDESCRIPTION: Demonstrates how to specify a custom table name for a model in Hyperf by defining the `$table` property on the model class. If not specified, Hyperf will assume the table name is the plural, snake_case version of the model class name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected ?string $table = 'user';\n}\n```\n\n----------------------------------------\n\nTITLE: gRPC Resource Example\nDESCRIPTION: Defines a gRPC resource class extending `GrpcResource`. It overrides the `toArray` method to define the response structure and the `expect` method to specify the message class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace HyperfTest\\ResourceGrpc\\Stubs\\Resources;\n\nuse Hyperf\\ResourceGrpc\\GrpcResource;\nuse HyperfTest\\ResourceGrpc\\Stubs\\Grpc\\HiReply;\n\nclass HiReplyResource extends GrpcResource\n{\n    public function toArray(): array\n    {\n        return [\n            'message' => $this->message,\n            'user' => HiUserResource::make($this->user),\n        ];\n    }\n\n    public function expect(): string\n    {\n        return HiReply::class;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Conditions for Process Startup\nDESCRIPTION: This snippet demonstrates how to control whether a custom process starts with the service by overriding the `isEnable()` method. If the method returns `false`, the process will not start.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/process.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process(name: \"foo_process\")]\nclass FooProcess extends AbstractProcess\n{\n    public function handle(): void\n    {\n        // 您的程式碼 ...\n    }\n    \n    public function isEnable($server): bool\n    {\n        // 不跟隨服務啟動一同啟動\n        return false;   \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Model After Overriding Visitor (PHP)\nDESCRIPTION: This code shows an example of a generated model after the `ModelUpdateVisitor` has been overridden. The `float_num` property is now cast to `decimal:2`, and the corresponding `@property` annotation reflects this change, ensuring that decimal numbers are handled correctly as strings with the specified precision.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/gen.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare (strict_types=1);\n\nnamespace App\\Model;\n\n/**\n * @property int $id \n * @property int $count \n * @property string $float_num \n * @property string $str \n * @property string $json \n * @property \\Carbon\\Carbon $created_at \n * @property \\Carbon\\Carbon $updated_at \n */\nclass UserExt extends Model\n{\n    /**\n     * The table associated with the model.\n     */\n    protected ?string $table = 'user_ext';\n    /**\n     * The attributes that are mass assignable.\n     */\n    protected array $fillable = ['id', 'count', 'float_num', 'str', 'json', 'created_at', 'updated_at'];\n    /**\n     * The attributes that should be cast to native types.\n     */\n    protected array $casts = ['id' => 'integer', 'count' => 'integer', 'float_num' => 'decimal:2', 'created_at' => 'datetime', 'updated_at' => 'datetime'];\n}\n```\n\n----------------------------------------\n\nTITLE: Alpha Numeric Validation with ASCII Restriction in Hyperf\nDESCRIPTION: This snippet shows how to restrict the `alpha_num` validation rule to ASCII characters in Hyperf. It uses the `ascii` option to limit the allowed characters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n'username' => 'alpha_num:ascii',\n```\n\n----------------------------------------\n\nTITLE: Docker Service List\nDESCRIPTION: This command lists the Docker services that are currently running. It shows the ID, name, mode, replicas, image, and ports of each service.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_58\n\nLANGUAGE: shell\nCODE:\n```\ndocker service ls\n```\n\n----------------------------------------\n\nTITLE: Update Composer Test Script - JSON\nDESCRIPTION: Modifies the test script in composer.json to include the `--prepend test/bootstrap.php` option. This ensures the bootstrap file is loaded before running tests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.2.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"scripts\": {\n        \"test\": \"co-phpunit --prepend test/bootstrap.php -c phpunit.xml --colors=always\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Items Per Page\nDESCRIPTION: This snippet shows how to retrieve the number of items that are displayed on each page of the paginator. The `perPage()` method returns an integer representing the number of items per page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/paginator.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$perPage = $paginator->perPage();\n```\n\n----------------------------------------\n\nTITLE: List available Hyperf console commands\nDESCRIPTION: This command displays a list of all available commands in the Hyperf console application. It is used to discover the available functionalities, including the 'gen' commands provided by the Devtool component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/devtool.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php\n```\n\n----------------------------------------\n\nTITLE: Forcing Index Usage - PHP\nDESCRIPTION: This snippet demonstrates how to force the database to use a specific index for a query. It creates a raw expression to specify the table and the index to be used using FORCE INDEX. This can be useful for optimizing slow queries caused by incorrect index usage by the query optimizer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nDb::table(Db::raw(\"{$table} FORCE INDEX({$index})\"));\n```\n\n----------------------------------------\n\nTITLE: Generating a Resource Collection in Hyperf\nDESCRIPTION: Generates a resource collection using the 'gen:resource' command with the '--collection' flag or by including 'Collection' in the resource name. This command creates a resource that extends 'Hyperf\\Resource\\Json\\ResourceCollection'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:resource Users --collection\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:resource UserCollection\n```\n\n----------------------------------------\n\nTITLE: Example Extended Model for Visitors Demonstration PHP\nDESCRIPTION: This PHP code shows an example of an extended model with various property types and casts. It's used to demonstrate how Visitors can be employed to modify the default type mapping during model generation in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/gen.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\n/**\n * @property int $id\n * @property int $count\n * @property string $float_num // decimal\n * @property string $str\n * @property string $json\n * @property \\Carbon\\Carbon $created_at\n * @property \\Carbon\\Carbon $updated_at\n */\nclass UserExt extends Model\n{\n    /**\n     * The table associated with the model.\n     */\n    protected ?string $table = 'user_ext';\n\n    /**\n     * The attributes that are mass assignable.\n     */\n    protected array $fillable = ['id', 'count', 'float_num', 'str', 'json', 'created_at', 'updated_at'];\n\n    /**\n     * The attributes that should be cast to native types.\n     */\n    protected array $casts = ['id' => 'integer', 'count' => 'integer', 'float_num' => 'string', 'created_at' => 'datetime', 'updated_at' => 'datetime'];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Business Exception Class\nDESCRIPTION: This snippet defines a custom `BusinessException` class that extends `Hyperf\\Server\\Exception\\ServerException`. It uses the `ErrorCode` enum to retrieve error messages based on the error code passed to the constructor.  Dependencies: `App\\Constants\\ErrorCode`, `Hyperf\\Server\\Exception\\ServerException`, `Throwable`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/constants.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Exception;\n\nuse App\\Constants\\ErrorCode;\nuse Hyperf\\Server\\Exception\\ServerException;\nuse Throwable;\n\nclass BusinessException extends ServerException\n{\n    public function __construct(ErrorCode|int $code = 0, ?string $message = null, ?Throwable $previous = null)\n    {\n        if (is_null($message)) {\n            if ($code instanceof ErrorCode) {\n                $message = $code->getMessage();\n            } else {\n                $message = ErrorCode::getMessage($code);\n            }\n        }\n\n        $code = $code instanceof ErrorCode ? $code->value : $code;\n\n        parent::__construct($message, $code, $previous);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Request and Response Objects in Hyperf Context\nDESCRIPTION: Shows how to update the request and response objects within the Hyperf context.  Due to the immutable nature of PSR-7 objects, modifications create new instances.  To ensure subsequent code uses the modified objects, they must be explicitly set in the context using `Hyperf\\Context\\Context::set()`. This ensures that changes to request and response objects are available to subsequent code.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/middleware/middleware.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\n// $request 和 $response 为修改后的对象\n$request = \\Hyperf\\Context\\Context::set(ServerRequestInterface::class, $request);\n$response = \\Hyperf\\Context\\Context::set(ResponseInterface::class, $response);\n```\n\n----------------------------------------\n\nTITLE: Publish Hyperf Signal Configuration\nDESCRIPTION: Publishes the default configuration file for the hyperf/signal package to your project, allowing you to customize the signal handling behavior.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/signal.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/signal\n```\n\n----------------------------------------\n\nTITLE: Getting Container Object\nDESCRIPTION: Retrieves the DI container instance using constructor injection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Psr\\Container\\ContainerInterface;\n\nclass IndexController\n{\n    private ContainerInterface $container;\n    \n    // 透過在建構函式的引數上宣告引數型別完成自動注入\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf View Component\nDESCRIPTION: Installs the hyperf/view component using composer. This component provides view rendering capabilities for Hyperf applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/view\n```\n\n----------------------------------------\n\nTITLE: Include Relationships in Resource\nDESCRIPTION: Shows how to include relationships in a resource's `toArray` method by utilizing a `PostResource` collection to transform the user's posts. This allows for including related data in the API response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'posts' => PostResource::collection($this->posts),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing Docker Command with Crontab\nDESCRIPTION: This bash script executes a Docker command within a container using Linux Crontab. It pulls the latest image, runs the container with a mounted .env file, and executes a PHP command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_30\n\nLANGUAGE: Shell\nCODE:\n```\n#!/usr/bin/env bash\nbasepath=$(cd `dirname $0`; pwd)\ndocker pull registry-vpc.cn-shanghai.aliyuncs.com/namespace/project:latest\ndocker run --rm -i -v $basepath/.env:/opt/www/.env \\\n--entrypoint php registry-vpc.cn-shanghai.aliyuncs.com/namespace/project:latest \\\n/opt/www/bin/hyperf.php your_command\n```\n\n----------------------------------------\n\nTITLE: Old way of declaring middleware\nDESCRIPTION: Demonstrates the old way of declaring middleware using annotations in the Hyperf framework.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.2.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n@Middlewares({@Middleware(FooMiddleware::class)})\n```\n\n----------------------------------------\n\nTITLE: Modifying SSHD Port\nDESCRIPTION: This snippet modifies the SSHD configuration file to change the default SSH port.  It changes the `Port` directive and restarts the SSHD service. Requires root privileges.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ vim /etc/ssh/sshd_config\n\n# 預設 Port 改為 2222\nPort 2222\n\n# 重啟服務\n$ systemctl restart sshd.service\n```\n\n----------------------------------------\n\nTITLE: Publishing Hyperf View Configuration\nDESCRIPTION: Publishes the configuration file for the hyperf/view component using the Hyperf console tool. This allows customization of view engine and paths.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/view\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Swarm\nDESCRIPTION: This command initializes a Docker Swarm cluster on the current machine, making it the manager node.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker swarm init\n```\n\n----------------------------------------\n\nTITLE: Updating container.php in Hyperf\nDESCRIPTION: The `container.php` file has been simplified and the annotation cache mechanism has been optimized. This snippet shows the updated content of the `config/container.php` file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/changelog/1.1.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Di\\Definition\\DefinitionSourceFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = new Container((new DefinitionSourceFactory(true))());\n\nif (! $container instanceof \\Psr\\Container\\ContainerInterface) {\n    throw new RuntimeException('The dependency injection container is invalid.');\n}\nreturn ApplicationContext::setContainer($container);\n```\n\n----------------------------------------\n\nTITLE: Adding Service to Network\nDESCRIPTION: This command adds a service to a new Docker network. It updates the service configuration to include the specified network. Requires Docker.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\ndocker service update --network-add default-network service_name\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Scout Engine in Hyperf Configuration\nDESCRIPTION: This code snippet shows how to register a custom search engine within the Hyperf application's configuration file. It specifies the driver class for the custom engine (e.g., `MySqlSearchEngine::class`) and associates it with a chosen engine name (e.g., 'mysql').  This registration allows Scout to utilize the custom engine for search operations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => 'mysql',\n    'engine' => [\n        'mysql' => [\n            'driver' => MySqlSearchEngine::class,\n        ],\n        'elasticsearch' => [\n            'driver' => \\Hyperf\\Scout\\Provider\\ElasticsearchProvider::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Apollo Config\nDESCRIPTION: This command installs the Hyperf component for integrating with Apollo, a distributed configuration management system.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config-center.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-apollo\n```\n\n----------------------------------------\n\nTITLE: Install Memory Adapter (Flysystem v1.0)\nDESCRIPTION: This command installs the Memory adapter for Flysystem v1.0 using Composer. This adapter provides an in-memory filesystem for testing or temporary storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/filesystem.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"league/flysystem-memory:^1.0\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Scout Configuration\nDESCRIPTION: This command publishes the Scout configuration file (scout.php) to the config directory of the Hyperf application. This file is used to configure Scout's behavior, such as the default search engine and index settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/scout\n```\n\n----------------------------------------\n\nTITLE: Config Provider Scan Paths Configuration PHP\nDESCRIPTION: This snippet shows the previous structure of the `scan` configuration within a Config Provider in Hyperf. It defines the paths to be scanned for annotations and the collectors to be used. The `paths` array specifies the directories to search for files containing annotations relevant to the framework's dependency injection and other functionalities.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog-v1.1.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'scan' => [\n    'paths' => [\n        __DIR__,\n    ],\n    'collectors' => [],\n],\n```\n\n----------------------------------------\n\nTITLE: Support Bit Type\nDESCRIPTION: Illustrates how to add support for the `bit` data type in Hyperf ORM by creating a custom connection resolver.  This involves creating a listener that registers a custom connection class (`MySqlBitConnection`) for the `mysql` driver.  This ensures that bit fields are handled correctly when interacting with the database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Database\\Connection;\nuse Hyperf\\Database\\MySqlBitConnection;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\n\n#[Listener]\nclass SupportMySQLBitListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            BootApplication::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        Connection::resolverFor('mysql', static function ($connection, $database, $prefix, $config) {\n            return new MySqlBitConnection($connection, $database, $prefix, $config);\n        });\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting all cookies - PHP\nDESCRIPTION: Demonstrates how to retrieve all cookies from the request using the `getCookieParams()` method. The method returns an associative array of cookies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n$cookies = $request->getCookieParams();\n```\n\n----------------------------------------\n\nTITLE: Create Hyperf Project inside Docker\nDESCRIPTION: This command creates a new Hyperf project inside the Docker container, ensuring all dependencies and configurations are set up within the isolated environment.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/install.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncomposer create-project hyperf/hyperf-skeleton\n```\n\n----------------------------------------\n\nTITLE: Config Provider Structure - PHP\nDESCRIPTION: This snippet illustrates the change in the structure of the ConfigProvider class. It highlights the addition of an `annotations` layer to the `scan` configuration. This change aligns the configuration structure with the file structure, removing previous special cases. This helps with consistency across configs.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog/1.1.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n'scan' => [\n    'paths' => [\n        __DIR__,\n    ],\n    'collectors' => [],\n],\n```\n\nLANGUAGE: PHP\nCODE:\n```\n'annotations' => [\n    'scan' => [\n        'paths' => [\n            __DIR__,\n        ],\n        'collectors' => [],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Escaping Blade with JavaScript Frameworks\nDESCRIPTION: This Blade template shows how to use the `@` symbol to prevent Blade from interpreting JavaScript expressions within curly braces. It also demonstrates escaping Blade instructions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_11\n\nLANGUAGE: blade\nCODE:\n```\n<h1>Laravel</h1>\n\nHello, @{{ name }}.\n\n```\n\nLANGUAGE: blade\nCODE:\n```\n{{-- Blade --}}\n@@json()\n\n<!-- HTML output -->\n@json()\n```\n\n----------------------------------------\n\nTITLE: Array Argument Output (Bash)\nDESCRIPTION: Shows the output when running the command with multiple arguments, demonstrating how they are combined into an array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/hyperf.php demo:command Hyperf Swoole\n# 輸出\n...\narray(2) {\n  [0]=>\n  string(6) \"Hyperf\"\n  [1]=>\n  string(6) \"Swoole\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker to Listen on TCP\nDESCRIPTION: This command modifies the Docker service configuration to allow TCP connections.  It adds `-H tcp://0.0.0.0:2375` to the `ExecStart` line in the `/lib/systemd/system/docker.service` file. Requires `systemd`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\nExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375\n```\n\n----------------------------------------\n\nTITLE: Install InfluxDB Client Library\nDESCRIPTION: Installs the influxdb/influxdb-php library using Composer. This is required when using InfluxDB as the metric backend.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require influxdb/influxdb-php\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Server for Socket.io\nDESCRIPTION: This configuration snippet demonstrates how to set up a WebSocket server in Hyperf to support Socket.io. It defines server properties like name, type, host, port, and callbacks for handshake, message, and close events. The server is configured to listen for WebSocket connections on the specified host and port.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/socketio-server.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/server.php\n[\n    'name' => 'socket-io',\n    'type' => Server::SERVER_WEBSOCKET,\n    'host' => '0.0.0.0',\n    'port' => 9502,\n    'sock_type' => SWOOLE_SOCK_TCP,\n    'callbacks' => [\n        Event::ON_HAND_SHAKE => [Hyperf\\WebSocketServer\\Server::class, 'onHandShake'],\n        Event::ON_MESSAGE => [Hyperf\\WebSocketServer\\Server::class, 'onMessage'],\n        Event::ON_CLOSE => [Hyperf\\WebSocketServer\\Server::class, 'onClose'],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Building Phar Package (Custom Name)\nDESCRIPTION: This command builds a Phar package with a custom name specified using the `--name` option. Replace `your_project.phar` with the desired filename for the output archive.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/phar.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php phar:build --name=your_project.phar\n```\n\n----------------------------------------\n\nTITLE: Configuring Zipkin Tracer in Hyperf\nDESCRIPTION: This code shows how to configure the Zipkin tracer within the 'config/autoload/opentracing.php' file.  It defines the application name, endpoint URL, timeout, and sampler for the Zipkin tracer.  The sampler determines which requests are traced.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tracer.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Zipkin\\Samplers\\BinarySampler;\n\nreturn [\n    // 选择默认的 Tracer\n    'default' => env('TRACER_DRIVER', 'zipkin'),\n\n    // 这里的代码演示不对 enable 内的配置进行展开\n    'enable' => [],\n\n    'tracer' => [\n        // Zipkin 驱动配置\n        'zipkin' => [\n            // 当前应用的配置\n            'app' => [\n                'name' => env('APP_NAME', 'skeleton'),\n                // 如果 ipv6 和 ipv6 为空组件会自动从 Server 中检测\n                'ipv4' => '127.0.0.1',\n                'ipv6' => null,\n                'port' => 9501,\n            ],\n            'driver' => \\Hyperf\\Tracer\\Adapter\\ZipkinTracerFactory::class,\n            'options' => [\n                // Zipkin 服务的 endpoint 地址\n                'endpoint_url' => env('ZIPKIN_ENDPOINT_URL', 'http://localhost:9411/api/v2/spans'),\n                // 请求超时秒数\n                'timeout' => env('ZIPKIN_TIMEOUT', 1),\n            ],\n            // 采样器，默认为所有请求的都追踪\n            'sampler' => BinarySampler::createAsAlwaysSample(),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Install Box on Linux aarch64\nDESCRIPTION: These commands download, move, and set permissions for the Box executable on Linux (aarch64 architecture). Ensure the directory where Box is located is in your system's PATH environment variable. Note that this is an older version due to limitations in building for AARCH64.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/eco/box.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/hyperf/box/releases/download/v0.0.3/box_php8.1_aarch64_linux -O box\nsudo mv ./box /usr/local/bin/box\nsudo chmod 755 /usr/local/bin/box\n// Make sure /usr/local/bin/box in your $PATH env, or put `box` into any path in $PATH env that you want\n```\n\n----------------------------------------\n\nTITLE: Query Without Type Casting PHP\nDESCRIPTION: This snippet demonstrates a basic query in Hyperf using Eloquent that retrieves users along with the last post creation timestamp. The `last_posted_at` attribute is returned as a string without any type conversion.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/mutators.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Post;\nuse App\\User;\n\n$users = User::select([\n    'users.*',\n    'last_posted_at' => Post::selectRaw('MAX(created_at)')\n            ->whereColumn('user_id', 'users.id')\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Scout and Elasticsearch\nDESCRIPTION: This command installs the Hyperf Scout package and the Elasticsearch driver for Scout using composer. It adds the necessary dependencies for using Scout with Elasticsearch.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/scout\ncomposer require hyperf/elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Docker Login to Aliyun Registry\nDESCRIPTION: This script logs in to the Aliyun Docker Registry. It first adds the gitlab-runner user to the docker group, then switches to the gitlab-runner user and logs in to the registry using the provided username.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_22\n\nLANGUAGE: Shell\nCODE:\n```\nusermod -aG docker gitlab-runner\nsu gitlab-runner\ndocker login --username=your_name registry.cn-shanghai.aliyuncs.com\n```\n\n----------------------------------------\n\nTITLE: Custom Annotation Usage PHP\nDESCRIPTION: This code demonstrates how to use the custom annotation `Foo` defined in the previous snippet.  It applies the annotation to the `IndexController` class, passing an array `[1, 2]` to the `$bar` parameter and the value `3` to the `$baz` parameter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/annotation.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Annotation\\Foo;\n\n#[Foo(bar: [1, 2], baz: 3)]\nclass IndexController extends AbstractController\n{\n    // 利用注解数据\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Crontab via Composer\nDESCRIPTION: This command installs the hyperf/crontab component using Composer, adding it as a dependency to your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/crontab.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/crontab\n```\n\n----------------------------------------\n\nTITLE: Returning XML Response in Hyperf\nDESCRIPTION: Illustrates how to return an XML response using the `xml()` method of the `ResponseInterface`. It sets the `Content-Type` to `application/xml` and accepts an array or an object implementing the `Hyperf\\Contract\\Xmlable` interface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/response.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function xml(ResponseInterface $response): Psr7ResponseInterface\n    {\n        $data = [\n            'key' => 'value'\n        ];\n        return $response->xml($data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable WebSocket Protocol on HTTP Server\nDESCRIPTION: This configuration disables the WebSocket protocol on the HTTP server by setting `open_websocket_protocol` to `false`. This prevents the HTTP server from handling WebSocket connections.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/websocket-server.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // Unrelated configs are ignored\n    'servers' => [\n        [\n            'name' => 'http',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9501,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [Hyperf\\HttpServer\\Server::class, 'onRequest'],\n            ],\n            'settings' => [\n                'open_websocket_protocol' => false,\n            ]\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Modify Gitlab Runner Concurrent Execution Count\nDESCRIPTION: This snippet shows how to modify the concurrent execution count for Gitlab Runner.  It edits the config.toml file and sets the concurrent value. Restart the gitlab-runner service to apply the changes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n$ vim /etc/gitlab-runner/config.toml\nconcurrent = 5\n```\n\n----------------------------------------\n\nTITLE: Configuring a UDP Server in Hyperf\nDESCRIPTION: This configuration snippet defines a UDP server with a specified host, port, and callback for handling incoming UDP packets.  It utilizes `Hyperf\\Server\\Server` and `Hyperf\\Server\\Event` to configure the server and event listeners, pointing the `ON_PACKET` event to the `onPacket` method of the `App\\Controller\\UdpServer` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tcp-server.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 以下刪除了其他不相關的配置項\n    'servers' => [\n        [\n            'name' => 'udp',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9505,\n            'sock_type' => SWOOLE_SOCK_UDP,\n            'callbacks' => [\n                Event::ON_PACKET => [App\\Controller\\UdpServer::class, 'onPacket'],\n            ],\n            'settings' => [\n                // 按需配置\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Adding Service to New Network\nDESCRIPTION: Adds a service to the newly created Docker network. This associates the service with the new IP address range.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\ndocker service update --network-add default-network service_name\n```\n\n----------------------------------------\n\nTITLE: Publish Translation Component Files\nDESCRIPTION: This command publishes the configuration files for the `hyperf/translation` component. This is a prerequisite if you haven't already configured the translation component. This allows the validation component to support multiple languages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/translation\n```\n\n----------------------------------------\n\nTITLE: Define a Resource Class (Repeated)\nDESCRIPTION: Reiterates the resource class definition, emphasizing that each resource should contain a `toArray` method to transform a given model into an array. This method is the core of the resource's transformation logic.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Migrations (bash)\nDESCRIPTION: This command reverts the last batch of migrations. The `--step` option allows specifying the number of migrations to rollback. This is useful for undoing changes made by recent migrations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:rollback\n```\n\n----------------------------------------\n\nTITLE: Install InfluxDB Client via Composer\nDESCRIPTION: Installs the `influxdb/influxdb-php` package via Composer, which is required for using InfluxDB with the Hyperf Metric component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require influxdb/influxdb-php\n```\n\n----------------------------------------\n\nTITLE: Register Event Manually\nDESCRIPTION: This PHP code demonstrates manually registering an event handler within a Socket.IO namespace. Instead of using annotations, the event 'event' is bound to the 'echo' method within the WebSocketController's constructor.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/socketio-server/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\SocketIOServer\\BaseNamespace;\nuse Hyperf\\SocketIOServer\\SidProvider\\SidProviderInterface;\nuse Hyperf\\SocketIOServer\\Socket;\nuse Hyperf\\WebSocketServer\\Sender;\n\nclass WebSocketController extends BaseNamespace\n{\n    public function __construct(Sender $sender, SidProviderInterface $sidProvider) {\n        parent::__construct($sender,$sidProvider);\n        $this->on('event', [$this, 'echo']);\n    }\n\n    public function echo(Socket $socket, $data)\n    {\n        $socket->emit('event', $data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Qiniu Adapter (Flysystem v2.0)\nDESCRIPTION: Install the Qiniu adapter for Flysystem v2.0. This adapter provides support for storing files on Qiniu Cloud Storage. Requires overtrue/flysystem-qiniu.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/filesystem.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-qiniu:^2.0\"\n```\n\n----------------------------------------\n\nTITLE: Disabling WebSocket Protocol on HTTP Server\nDESCRIPTION: This PHP configuration disables the WebSocket protocol on the HTTP server by setting the 'open_websocket_protocol' option to false. This prevents WebSocket connections from being accepted on the HTTP server's port.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/websocket-server.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // 這裏省略了該文件的其它配置\n    'servers' => [\n        [\n            'name' => 'http',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9501,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [Hyperf\\HttpServer\\Server::class, 'onRequest'],\n            ],\n            'settings' => [\n                'open_websocket_protocol' => false,\n            ]\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Installing hyperf/db-connection in Hyperf\nDESCRIPTION: Installs the `hyperf/db-connection` package using Composer. This component provides database connection pooling and model abstractions specific to Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/quick-start.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/db-connection\n```\n\n----------------------------------------\n\nTITLE: Alpha Validation with ASCII Option\nDESCRIPTION: The `alpha` rule validates that the field under validation contains only alphabetic characters (including Chinese).  This example shows how to restrict the validation to ASCII characters (a-z and A-Z) by using the `ascii` option.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n'username' => 'alpha:ascii'\n```\n\n----------------------------------------\n\nTITLE: Initialize ClassLoader in PHPUnit bootstrap\nDESCRIPTION: This snippet shows how to initialize the ClassLoader in the `tests/bootstrap.php` file for PHPUnit tests.  It adds `Hyperf\\Di\\ClassLoader::init();` to the bootstrap file.  This ensures that dependency injection and AOP features function correctly during tests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.0.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nerror_reporting(E_ALL);\ndate_default_timezone_set('Asia/Shanghai');\n\n! defined('BASE_PATH') && define('BASE_PATH', dirname(__DIR__, 1));\n! defined('SWOOLE_HOOK_FLAGS') && define('SWOOLE_HOOK_FLAGS', SWOOLE_HOOK_ALL);\n\nSwoole\\Runtime::enableCoroutine(true);\n\nrequire BASE_PATH . '/vendor/autoload.php';\n\nHyperf\\Di\\ClassLoader::init();\n\n$container = require BASE_PATH . '/config/container.php';\n\n$container->get(Hyperf\\Contract\\ApplicationInterface::class);\n\n```\n\n----------------------------------------\n\nTITLE: Running Curl command\nDESCRIPTION: Send a request to port 9501 on localhost. This can be used to check for successful deployment of the application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://127.0.0.1:9501/\n```\n\n----------------------------------------\n\nTITLE: Setting Variables in RPN Calculation\nDESCRIPTION: This code demonstrates how to use variables in RPN expressions. The variables are passed as an array to the `calculate` method. The variables are referenced in the RPN expression using bracket notation, e.g., `[0]` for the first variable, `[1]` for the second, and so on.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/rpn.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->calculate('[0] 1 2 + 4 * + [1] -', [5, 10]); // '7'\n```\n\n----------------------------------------\n\nTITLE: NSQ Socket Communication\nDESCRIPTION: This PlantUML diagram outlines the basic socket-based communication process between a client and server, involving connection establishment, multiple send/receive cycles, and connection closure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nsq.md#_snippet_9\n\nLANGUAGE: PlantUML\nCODE:\n```\n@startuml\n\nautonumber\nhide footbox\ntitle **Socket 基础**\n\nparticipant \"客户端\" as client\nparticipant \"服務器\" as server #orange\n\nactivate client\nactivate server\n\nnote right of server: 建立連接\nclient -> server: socket->connect(ip, port)\n\n...\nnote right of server: 多次通信 send/recv\nclient -> server: socket->send()\nserver-> client: socket->recv()\n...\n\nnote right of server: 關閉連接\nclient->server: socket->close()\n\ndeactivate client\ndeactivate server\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Configure HTTP open_websocket_protocol\nDESCRIPTION: This code disables the `open_websocket_protocol` setting for the HTTP server in the `config/autoload/server.php` file. When `open_websocket_protocol` is enabled (default), HTTP requests can trigger WebSocket pushes. Setting it to `false` prevents this behavior, ensuring that WebSocket connections only occur through the WebSocket server on its dedicated port. This config prevents websocket upgrade handshakes on the HTTP server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/websocket-server.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // 這裡省略了該檔案的其它配置\n    'servers' => [\n        [\n            'name' => 'http',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9501,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [Hyperf\\HttpServer\\Server::class, 'onRequest'],\n            ],\n            'settings' => [\n                'open_websocket_protocol' => false,\n            ]\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Models with firstOrCreate in Hyperf\nDESCRIPTION: The `firstOrCreate` method attempts to find a matching record in the database based on the given column/value pair. If no matching model is found, it creates a new record in the database using the attributes from the first and optionally the second parameter. This example demonstrates how to use `firstOrCreate` with different sets of attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n// 通過 name 來查找用户，不存在則創建...\n$user = User::firstOrCreate(['name' => 'Hyperf']);\n\n// 通過 name 查找用户，不存在則使用 name 和 gender, age 屬性創建...\n$user = User::firstOrCreate(\n    ['name' => 'Hyperf'],\n    ['gender' => 1, 'age' => 20]\n);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Container in Hyperf\nDESCRIPTION: This PHP snippet demonstrates how to configure the dependency injection container in a Hyperf application using the `Hyperf\\Di\\Container`, `Hyperf\\Di\\Definition\\DefinitionSourceFactory`, and `Hyperf\\Context\\ApplicationContext` classes.  It creates a new container, checks its validity, and sets it as the application's container. The `true` argument in `DefinitionSourceFactory` indicates that annotations should be used for dependency injection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog/changelog-v1.1.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Di\\Definition\\DefinitionSourceFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = new Container((new DefinitionSourceFactory(true))());\n\nif (! $container instanceof \\Psr\\Container\\ContainerInterface) {\n    throw new RuntimeException('The dependency injection container is invalid.');\n}\nreturn ApplicationContext::setContainer($container);\n```\n\n----------------------------------------\n\nTITLE: Defining an RPC Reply Consumer in Hyperf\nDESCRIPTION: This snippet demonstrates how to create an AMQP consumer in Hyperf that handles RPC replies. The consumer listens on a specific exchange, routing key, and queue. It receives data, modifies it, and replies to the producer using the `reply` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/amqp.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Amqp\\Consumer;\n\nuse Hyperf\\Amqp\\Annotation\\Consumer;\nuse Hyperf\\Amqp\\Message\\ConsumerMessage;\nuse Hyperf\\Amqp\\Result;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n#[Consumer(exchange: \"hyperf\", routingKey: \"hyperf\", queue: \"rpc.reply\", name: \"ReplyConsumer\", nums: 1, enable: true)]\nclass ReplyConsumer extends ConsumerMessage\n{\n    public function consumeMessage($data, AMQPMessage $message): Result\n    {\n        $data['message'] .= 'Reply:' . $data['message'];\n\n        $this->reply($data, $message);\n\n        return Result::ACK;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Register Exception Handler via Configuration - Hyperf PHP\nDESCRIPTION: Registers an exception handler for the 'http' server in Hyperf by specifying the fully qualified class name in the `config/autoload/exceptions.php` configuration file. The 'http' key corresponds to the server name defined in `config/autoload/server.php`. This configuration ensures that the specified handler will process uncaught exceptions within the HTTP server's worker processes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/exception-handler.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// config/autoload/exceptions.php\nreturn [\n    'handler' => [\n        // 這裏的 http 對應 config/autoload/server.php 內的 server 所對應的 name 值\n        'http' => [\n            // 這裏配置完整的類命名空間地址已完成對該異常處理器的註冊\n            \\App\\Exception\\Handler\\FooExceptionHandler::class,\n        ],    \n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Hyperf Inject Annotation Override Example\nDESCRIPTION: This example demonstrates the override order of the #[Inject] annotation in Hyperf. The `Origin` class inherits from `ParentClass` and uses `Foo1` and `Foo2` traits. The `$foo` property is defined in all of them, showcasing the override priority. The final value of `$foo` in `Origin` will be `Foo1`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass ParentClass\n{\n    /**\n     * @var Foo4 \n     */\n    #[Inject]\n    protected $foo;\n}\n\ntrait Foo1\n{\n    /**\n     * @var Foo2 \n     */\n    #[Inject]\n    protected $foo;\n}\n\ntrait Foo2\n{\n    /**\n     * @var Foo3\n     */\n    #[Inject]\n    protected $foo;\n}\n\nclass Origin extends ParentClass\n{\n    use Foo1;\n    use Foo2;\n\n    /**\n     * @var Foo1\n     */\n    #[Inject]\n    protected $foo;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Kong Gateway with Docker\nDESCRIPTION: Runs the Kong gateway in a Docker container, configuring it to use the PostgreSQL database and setting various logging and listening options.  Maps ports 8000, 8443, 8001, and 8444.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_28\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run -d --name kong \\\n  --network=default-network \\\n  -e \"KONG_DATABASE=postgres\" \\\n  -e \"KONG_PG_HOST=kong-database\" \\\n  -e \"KONG_PG_PASSWORD=kong\" \\\n  -e \"KONG_CASSANDRA_CONTACT_POINTS=kong-database\" \\\n  -e \"KONG_PROXY_ACCESS_LOG=/dev/stdout\" \\\n  -e \"KONG_ADMIN_ACCESS_LOG=/dev/stdout\" \\\n  -e \"KONG_PROXY_ERROR_LOG=/dev/stderr\" \\\n  -e \"KONG_ADMIN_ERROR_LOG=/dev/stderr\" \\\n  -e \"KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl\" \\\n  -p 8000:8000 \\\n  -p 8443:8443 \\\n  -p 8001:8001 \\\n  -p 8444:8444 \\\n  kong:latest\n```\n\n----------------------------------------\n\nTITLE: Using Controller and RequestMapping Annotations in Hyperf\nDESCRIPTION: This code snippet demonstrates the use of the `Controller` and `RequestMapping` annotations in Hyperf to define routes with more control over HTTP methods and URI paths.  It explicitly defines a route `/user/index` for GET and POST requests to the `index` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/router.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\n\n#[Controller]\nclass UserController\n{\n    // Hyperf will automatically generate a /user/index route for this method, allowing requests via GET or POST\n    #[RequestMapping(path: \"index\", methods: \"get,post\")]\n    public function index(RequestInterface $request)\n    {\n        // Obtain the id parameter from the request\n        $id = $request->input('id', 1);\n        return (string)$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Hyperf Component Versions (composer.json)\nDESCRIPTION: This snippet demonstrates how to update the Hyperf component versions in the `composer.json` file to `2.1.*`. This is the first step in upgrading the Hyperf project to version 2.1. This requires composer and internet access to download the packages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.1.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"require\": {\n        \"php\": \">=7.3\",\n        \"ext-json\": \"*\",\n        \"ext-openssl\": \"*\",\n        \"ext-pdo\": \"*\",\n        \"ext-pdo_mysql\": \"*\",\n        \"ext-redis\": \"*\",\n        \"ext-swoole\": \">=4.5\",\n        \"hyperf/async-queue\": \"2.1.*\",\n        \"hyperf/cache\": \"2.1.*\",\n        \"hyperf/command\": \"2.1.*\",\n        \"hyperf/config\": \"2.1.*\",\n        \"hyperf/constants\": \"2.1.*\",\n        \"hyperf/contract\": \"2.1.*\",\n        \"hyperf/database\": \"2.1.*\",\n        \"hyperf/db-connection\": \"2.1.*\",\n        \"hyperf/di\": \"2.1.*\",\n        \"hyperf/dispatcher\": \"2.1.*\",\n        \"hyperf/event\": \"2.1.*\",\n        \"hyperf/exception-handler\": \"2.1.*\",\n        \"hyperf/framework\": \"2.1.*\",\n        \"hyperf/guzzle\": \"2.1.*\",\n        \"hyperf/http-server\": \"2.1.*\",\n        \"hyperf/logger\": \"2.1.*\",\n        \"hyperf/model-cache\": \"2.1.*\",\n        \"hyperf/pool\": \"2.1.*\",\n        \"hyperf/process\": \"2.1.*\",\n        \"hyperf/redis\": \"2.1.*\",\n        \"hyperf/server\": \"2.1.*\",\n        \"hyperf/utils\": \"2.1.*\"\n    },\n    \"require-dev\": {\n        \"friendsofphp/php-cs-fixer\": \"^2.14\",\n        \"hyperf/devtool\": \"2.1.*\",\n        \"hyperf/testing\": \"2.1.*\",\n        \"mockery/mockery\": \"^1.0\",\n        \"phpstan/phpstan\": \"^0.12.18\",\n        \"swoole/ide-helper\": \"dev-master\",\n        \"symfony/var-dumper\": \"^5.1\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preserve Collection Keys\nDESCRIPTION: This PHP code shows how to preserve keys in a resource collection by setting the `$preserveKeys` property to `true` in the resource class. This allows the collection to maintain its original keys when returned from a route.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * A collection key indicating whether the resource should be preserved.\n     *\n     * @var bool\n     */\n    public $preserveKeys = true;\n\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Integrating Swagger with Request Validators\nDESCRIPTION: This code snippet demonstrates how to integrate Swagger annotations with request validators using the `rules` parameter in `SA\\Property` and `SA\\QueryParameter` annotations, along with the `SwaggerRequest` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/swagger.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Schema\\SavedSchema;\nuse Hyperf\\Swagger\\Request\\SwaggerRequest;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Swagger\\Annotation as SA;\n\n#[SA\\HyperfServer(name: 'http')]\nclass CardController extends Controller\n{\n    #[SA\\Post('/user/save', summary: '保存用户信息', tags: ['用户管理'])]\n    #[SA\\QueryParameter(name: 'token', description: '鉴权 token', type: 'string', rules: 'required|string')]\n    #[SA\\RequestBody(content: new SA\\JsonContent(properties: [\n        new SA\\Property(property: 'nickname', description: '昵称', type: 'integer', rules: 'required|string'),\n        new SA\\Property(property: 'gender', description: '性别', type: 'integer', rules: 'required|integer|in:0,1,2'),\n    ]))]\n    #[SA\\Response(response: '200', content: new SA\\JsonContent(ref: '#/components/schemas/SavedSchema'))]\n    public function info(SwaggerRequest $request)\n    {\n        $result = $this->service->save($request->all());\n\n        return $this->response->success($result);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create or Instantiate Model (firstOrNew)\nDESCRIPTION: Illustrates the `firstOrNew` method, which finds a model by attributes or returns a new model instance if not found.  Unlike `firstOrCreate`, `firstOrNew` doesn't automatically save the new instance to the database; you must call `save` manually. The first example creates an instance with only the 'name' attribute, while the second uses both 'name' and additional attributes like 'gender' and 'age'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\n//  透過 name 查詢使用者，不存在則建立一個例項...\n$user = User::firstOrNew(['name' => 'Hyperf']);\n\n// 透過 name 查詢使用者，不存在則使用 name 和 gender, age 屬性建立一個例項...\n$user = User::firstOrNew(\n    ['name' => 'Hyperf'],\n    ['gender' => 1, 'age' => 20]\n);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Registry Mirror\nDESCRIPTION: This snippet configures a Docker registry mirror by adding a `registry-mirrors` entry to the `/etc/docker/daemon.json` file. Replace `https://xxxxx.mirror.aliyuncs.com` with your actual mirror address.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\"registry-mirrors\": [\"https://xxxxx.mirror.aliyuncs.com\"]}\n```\n\n----------------------------------------\n\nTITLE: Installing ThinkTemplate Engine\nDESCRIPTION: Installs the ThinkTemplate template engine using Composer. This allows you to use ThinkTemplate templates in your Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require sy-records/think-template\n```\n\n----------------------------------------\n\nTITLE: Defining a Controller in Hyperf\nDESCRIPTION: This PHP code snippet demonstrates how to define a basic controller in Hyperf. It uses dependency injection to obtain the Request and Response interfaces, allowing it to process HTTP requests and return responses. The `index` method retrieves the 'target' parameter from the request and returns a greeting.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/controller.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\n\nclass IndexController\n{\n    // 在參數上通過定義 RequestInterface 和 ResponseInterface 來獲取相關對象，對象會被依賴注入容器自動注入\n    public function index(RequestInterface $request, ResponseInterface $response)\n    {\n        $target = $request->input('target', 'World');\n        return 'Hello ' . $target;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Docker\nDESCRIPTION: This command installs Docker on a Linux system using a convenience script.  Requires internet access. This assumes a typical Linux environment with `curl` and `sh` available.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSL https://get.docker.com/ | sh\n```\n\n----------------------------------------\n\nTITLE: Refreshing a Model with Fresh Data\nDESCRIPTION: This code shows how to refresh a model instance with the latest data from the database using the `fresh()` method.  A new model instance is returned, leaving the original untouched.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = User::query()->find(1);\n\n$freshUser = $user->fresh();\n\n```\n\n----------------------------------------\n\nTITLE: Define CI/CD Variables - YAML\nDESCRIPTION: This YAML snippet defines variables used in a Gitlab CI/CD pipeline. It sets the project name and registry URL.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/docker-swarm.md#_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\nvariables:\n  PROJECT_NAME: demo\n  REGISTRY_URL: registry.cn-shanghai.aliyuncs.com/test_namespace\n```\n\n----------------------------------------\n\nTITLE: Rebooting the Machine\nDESCRIPTION: This snippet reboots the machine to apply the kernel changes. It requires `sudo` privileges. After the reboot, the system will boot into the specified kernel.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\nreboot\n```\n\n----------------------------------------\n\nTITLE: Publish Validation Language Files\nDESCRIPTION: Publishes the language files for the hyperf/validation component.  These files contain the default validation error messages in different languages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/validation\n```\n\n----------------------------------------\n\nTITLE: Modify SwooleEvent in server.php PHP\nDESCRIPTION: This PHP snippet demonstrates how to modify the `server.php` configuration file to update the `SwooleEvent` class to `Hyperf\\Server\\Event`. This change is necessary because the class has been renamed in Hyperf 2.1.  The old class `Hyperf\\Server\\SwooleEvent` will be removed in Hyperf 3.0.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/2.1.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\nuse Hyperf\\Server\\Server;\n\nreturn [\n    'mode' => SWOOLE_BASE,\n    'servers' => [\n        [\n            'name' => 'http',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9501,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [Hyperf\\HttpServer\\Server::class, 'onRequest'],\n            ],\n        ],\n    ],\n    'callbacks' => [\n        Event::ON_BEFORE_START => [Hyperf\\Framework\\Bootstrap\\ServerStartCallback::class, 'beforeStart'],\n        Event::ON_WORKER_START => [Hyperf\\Framework\\Bootstrap\\WorkerStartCallback::class, 'onWorkerStart'],\n        Event::ON_PIPE_MESSAGE => [Hyperf\\Framework\\Bootstrap\\PipeMessageCallback::class, 'onPipeMessage'],\n        Event::ON_WORKER_EXIT => [Hyperf\\Framework\\Bootstrap\\WorkerExitCallback::class, 'onWorkerExit'],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Command Exit Resume\nDESCRIPTION: This snippet is used in Hyperf commands to ensure that the command exits correctly when using technologies like AMQP. It resumes the worker exit coordinator to allow the command to terminate.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/questions.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Coordinator\\CoordinatorManager;\nuse Hyperf\\Coordinator\\Constants;\n\nCoordinatorManager::until(Constants::WORKER_EXIT)->resume();\n```\n\n----------------------------------------\n\nTITLE: Modify Logger Processor for Monolog 3.x Compatibility (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to modify a Monolog processor to be compatible with Monolog version 3.x, which uses the new features of PHP 8.1. It changes the type hint for the `$record` parameter in the `__invoke` method to `array|LogRecord`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/3.0.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Kernel\\Log;\n\nuse Hyperf\\Context\\Context;\nuse Hyperf\\Coroutine\\Coroutine;\nuse Monolog\\LogRecord;\nuse Monolog\\Processor\\ProcessorInterface;\n\nclass AppendRequestIdProcessor implements ProcessorInterface\n{\n    public const REQUEST_ID = 'log.request.id';\n\n    public function __invoke(array|LogRecord $record)\n    {\n        $record['extra']['request_id'] = Context::getOrSet(self::REQUEST_ID, uniqid());\n        $record['extra']['coroutine_id'] = Coroutine::id();\n        return $record;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Granting Docker Permissions to User\nDESCRIPTION: This command adds the current user to the `docker` group, allowing them to run Docker commands without `sudo`. It requires the `usermod` utility.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\nusermod -aG docker $USER\n```\n\n----------------------------------------\n\nTITLE: Running Portainer with Docker Service\nDESCRIPTION: This snippet creates a Portainer service using Docker, publishing port 9000, setting the number of replicas, constraining the service to run on manager nodes, and mounting volumes for data and the Docker socket.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\ndocker service create \\\n    --name portainer \\\n    --publish 9000:9000 \\\n    --replicas=1 \\\n    --constraint 'node.role == manager' \\\n    --mount type=volume,src=portainer_data,dst=/data \\\n    --mount type=bind,src=//var/run/docker.sock,dst=/var/run/docker.sock \\\n    portainer/portainer\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Process to Hyperf Nano\nDESCRIPTION: This example shows how to add a custom process to a Hyperf Nano application. It demonstrates creating a background process that logs a message to the console every second.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nano.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addProcess(function(){\n    while (true) {\n        sleep(1);\n        $this->get(StdoutLoggerInterface::class)->info('Processing...');\n    }\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Evaluating RPN Expressions in PHP\nDESCRIPTION: This snippet demonstrates how to evaluate a RPN expression using the `Hyperf\\Rpn\\Calculator` class. It creates a new `Calculator` instance, then calls the `calculate` method passing the RPN expression string and an empty array as variables.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/rpn.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->calculate('5 1 2 + 4 * + 3 -', []); // '14'\n```\n\n----------------------------------------\n\nTITLE: Initializing Consul KV Client\nDESCRIPTION: Initializes a Consul KV client using the Hyperf container, ClientFactory, and ApplicationContext. This snippet demonstrates how to create a KV client instance, configure the base URI, and fetch the necessary dependencies from the container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/consul.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Consul\\KV;\nuse Hyperf\\Guzzle\\ClientFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n$clientFactory = $container->get(ClientFactory::class);\n\n$consulServer = 'http://127.0.0.1:8500';\n$kv = new KV(function () use ($clientFactory, $consulServer) {\n    return $clientFactory->create([\n        'base_uri' => $consulServer,\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Lazy Service Annotation Injection\nDESCRIPTION: Lazy loads the service using annotation injection.  The actual service is only instantiated when accessed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Di\\Annotation\\Inject;\nuse App\\Service\\UserServiceInterface;\n\nclass Foo\n{\n    /**\n     * @var UserServiceInterface\n     */\n    #[Inject(lazy: true)]\n    public $service;\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Devtool\nDESCRIPTION: Installs the Hyperf Devtool component using Composer. This command adds the necessary files and dependencies to the project, enabling the use of the `gen` commands.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/devtool.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require hyperf/devtool\n```\n\n----------------------------------------\n\nTITLE: Configure Exception Handlers in exceptions.php\nDESCRIPTION: This snippet illustrates how to configure the exception handlers in the `config/autoload/exceptions.php` file. It adds `Hyperf\\HttpServer\\Exception\\Handler\\HttpExceptionHandler` to handle HTTP exceptions (404, 405) uniformly. This ensures consistent response handling and allows users to throw corresponding exceptions for consistent return experiences.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.0.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'handler' => [\n        'http' => [\n            Hyperf\\HttpServer\\Exception\\Handler\\HttpExceptionHandler::class,\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Image Dimensions Ratio Validation in Hyperf\nDESCRIPTION: This snippet shows how to validate the aspect ratio of an image using the `dimensions` validation rule in Hyperf. It illustrates the use of an expression to define the ratio constraint.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n'avatar' => 'dimensions:ratio=3/2'\n```\n\n----------------------------------------\n\nTITLE: Creating a Hyperf Model Class\nDESCRIPTION: Shows an example of a generated Hyperf model class. It includes namespace declaration, class definition extending the Hyperf Model, and property declarations with annotations. The class also defines the table name, fillable attributes, and casts.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\n/**\n * @property $id\n * @property $name\n * @property $gender\n * @property $created_at\n * @property $updated_at\n */\nclass User extends Model\n{\n    /**\n     * The table associated with the model.\n     *      *\n     * @var string\n     */\n    protected ?string $table = 'user';\n\n    /**\n     * The attributes that are mass assignable.\n     *      *\n     * @var array\n     */\n    protected array $fillable = ['id', 'name', 'gender', 'created_at', 'updated_at'];\n\n    /**\n     * The attributes that should be cast to native types.\n     *      *\n     * @var array\n     */\n    protected array $casts = ['id' => 'integer', 'gender' => 'integer'];\n}\n```\n\n----------------------------------------\n\nTITLE: Generate a Resource Collection\nDESCRIPTION: Generates a resource collection class using the `gen:resource` command with the `--collection` flag or by naming the resource with `Collection`.  The resource collection extends `Hyperf\\Resource\\Json\\ResourceCollection`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:resource Users --collection\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:resource UserCollection\n```\n\n----------------------------------------\n\nTITLE: Request and Response headers before v3.1 example\nDESCRIPTION: This PHP code demonstrates how Request and Response headers were handled before Hyperf v3.1 using `withHeader` and `withHeaders`.  It showcases the array_merge-like behavior of the methods.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/3.1.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// before v3.1 \n$request->withHeader('foo', 1)->withHeader('bar', 2); // ['foo' => [1], 'bar' => [2]]\n$request->withHeader('foo', 1)->withHeader('foo', 2); // ['foo' => [2]]\n$request->withAddedHeader('foo', 1)->withAddedHeader('foo', 2); // ['foo' => [1, 2]]\n\n$request->withHeaders(['foo' => 1])->withHeaders(['bar' => 2]); // ['foo' => [1], 'bar' => [2]]\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Value Object Changes Immediately in PHP\nDESCRIPTION: This snippet demonstrates how to use the `syncAttributes()` method to immediately synchronize changes made to the value object's fields with the model's attributes. This ensures that `getAttributes()` returns the updated values after the value object has been modified.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$user = App\\User::find(1);\n$user->address->lineOne = 'Updated Address Value';\n$user->syncAttributes();\nvar_dump($user->getAttributes());\n```\n\n----------------------------------------\n\nTITLE: Search Route\nDESCRIPTION: This code defines a route that performs a search and returns the results as JSON. The results are automatically converted to JSON by Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/search', function () {\n    return App\\Order::search([])->get();\n});\n```\n\n----------------------------------------\n\nTITLE: Install PgSQL Driver - Hyperf\nDESCRIPTION: Installs the PgSQL driver for Hyperf using Composer. Requires Swoole >= 5.1.0 and `--enable-swoole-pgsql` compilation flag.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/quick-start.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/database-pgsql\n```\n\n----------------------------------------\n\nTITLE: Enable Default Metrics Configuration\nDESCRIPTION: Configures whether to enable the collection of default metrics, including memory usage, CPU load, and Swoole Server/Coroutine metrics.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n'enable_default_metric' => env('TELEMETRY_ENABLE_DEFAULT_TELEMETRY', true),\n```\n\n----------------------------------------\n\nTITLE: Regenerate Database Models (Hyperf)\nDESCRIPTION: This shell command uses the Hyperf code generator to regenerate the database models in the specified directory, adding type support for member variables. It requires the hyperf/code-generator package and uses the regenerate-models.php script.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/3.0.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp vendor/bin/regenerate-models.php $PWD/app/Model\n```\n\n----------------------------------------\n\nTITLE: Set Description Configuration (PHP)\nDESCRIPTION: This code snippet shows setting the command description using the `setDescription` method within the `configure` method. The description appears in the command's help output.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->setDescription('Hyperf Demo Command');\n}\n```\n\n----------------------------------------\n\nTITLE: Scout Configuration File (PHP)\nDESCRIPTION: Example Scout configuration file, showcasing settings such as the default engine, chunk size for indexing, index prefix, soft delete handling, concurrency, and Elasticsearch engine configuration including hosts and index settings. It uses environment variables for configurable values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => env('SCOUT_ENGINE', 'elasticsearch'),\n    'chunk' => [\n        'searchable' => 500,\n        'unsearchable' => 500,\n    ],\n    'prefix' => env('SCOUT_PREFIX', ''),\n    'soft_delete' => false,\n    'concurrency' => 100,\n    'engine' => [\n        'elasticsearch' => [\n            'driver' => Hyperf\\Scout\\Provider\\ElasticsearchProvider::class,\n            // 如果 index 設定為 null，則每個模型會對應一個索引，反之每個模型對應一個型別\n            'index' => null,\n            'hosts' => [\n                env('ELASTICSEARCH_HOST', 'http://127.0.0.1:9200'),\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Nodes\nDESCRIPTION: This command lists the nodes that are part of the Docker Swarm cluster. It shows the ID, hostname, status, availability, and manager status of each node.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_52\n\nLANGUAGE: shell\nCODE:\n```\ndocker node ls\n```\n\n----------------------------------------\n\nTITLE: Installing hyperf/rpn package\nDESCRIPTION: This command installs the `hyperf/rpn` package using Composer, a dependency manager for PHP.  It adds the RPN functionality to a Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/rpn.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/rpn\n```\n\n----------------------------------------\n\nTITLE: Updating Docker Service with Registry Authentication\nDESCRIPTION: This command updates a Docker service to use registry authentication. This is useful when the registry password has been changed. The `--with-registry-auth` option ensures that the service can pull images from the registry.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\ndocker service update --with-registry-auth service_name\n```\n\n----------------------------------------\n\nTITLE: Counter Interface\nDESCRIPTION: Defines the CounterInterface, which is used to describe a metric that only increases in one direction, like HTTP request count. Includes methods for adding to the counter and setting label values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\ninterface CounterInterface\n{\n    public function with(string ...$labelValues): self;\n\n    public function add(int $delta);\n}\n```\n\n----------------------------------------\n\nTITLE: Check pcntl extension installation\nDESCRIPTION: This shell command checks if the `pcntl` extension is installed and enabled in PHP. It uses `php --ri pcntl` to display information about the extension, confirming its availability for annotation scanning.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.2.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nphp --ri pcntl\n\npcntl\n\npcntl support => enabled\n```\n\n----------------------------------------\n\nTITLE: Example Model with Extended Properties (Hyperf)\nDESCRIPTION: This is an example of a model with extended properties, showing different data types and casts.  It demonstrates how to define properties with specific types and configure the `casts` array to handle data type conversions. The use of \\Carbon\\Carbon for date and datetime fields is also shown.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/gen.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\n/**\n * @property int $id\n * @property int $count\n * @property string $float_num // decimal\n * @property string $str\n * @property string $json\n * @property \\Carbon\\Carbon $created_at\n * @property \\Carbon\\Carbon $updated_at\n */\nclass UserExt extends Model\n{\n    /**\n     * The table associated with the model.\n     */\n    protected ?string $table = 'user_ext';\n\n    /**\n     * The attributes that are mass assignable.\n     */\n    protected array $fillable = ['id', 'count', 'float_num', 'str', 'json', 'created_at', 'updated_at'];\n\n    /**\n     * The attributes that should be cast to native types.\n     */\n    protected array $casts = ['id' => 'integer', 'count' => 'integer', 'float_num' => 'string', 'created_at' => 'datetime', 'updated_at' => 'datetime'];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Blade Template Example\nDESCRIPTION: A simple Blade template file demonstrating variable interpolation. The template displays a greeting message with a name passed from the controller.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view.md#_snippet_11\n\nLANGUAGE: blade\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hyperf</title>\n</head>\n<body>\nHello, {{ $name }}. You are using blade template now.\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Return Content for WeChat Server Configuration in Hyperf\nDESCRIPTION: This snippet shows how to return the content of the Symfony Response object when configuring the WeChat server in Hyperf. This is necessary for WeChat to verify the server configuration. The `getContent()` method of the Symfony Response object is used to retrieve the response body, which is then returned directly.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/sdks/wechat.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$response = $app->server->serve();\n\nreturn $response->getContent();\n```\n\n----------------------------------------\n\nTITLE: Publishing Redis Configuration\nDESCRIPTION: This shell command publishes the default Redis configuration file to your Hyperf project, allowing you to customize it. This command is used to make the default redis configuration available for modification.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/redis.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/redis\n```\n\n----------------------------------------\n\nTITLE: Handle HTTP Request in MVC Pattern - Hyperf PHP\nDESCRIPTION: This code snippet demonstrates how to handle HTTP requests in Hyperf using the MVC pattern. It defines a controller method that retrieves an 'id' parameter from the request and returns it as a string. The `RequestInterface` is used to access the request data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/overview.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass IndexController\n{\n    // Hyperf 会自动为此方法生成一个 /index/index 的路由，允许通过 GET 或 POST 方式请求\n    public function index(RequestInterface $request)\n    {\n        // 从请求中获得 id 参数\n        $id = $request->input('id', 1);\n        // 转换 $id 为字符串格式并以 plain/text 的 Content-Type 返回 $id 的值给客户端\n        return (string)$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Commands to Hyperf Nano\nDESCRIPTION: Demonstrates how to add a custom command to a Hyperf Nano application. It adds a command named `echo` that logs a message to the console.  Requires the `hyperf/nano` package and `Hyperf\\Contract\\StdoutLoggerInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nano.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addCommand('echo', function(){\n    $this->get(StdoutLoggerInterface::class)->info('A new command called echo!');\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Rule Listener - PHP\nDESCRIPTION: This code snippet demonstrates how to register a custom validation rule in Hyperf using a listener for the `ValidatorFactoryResolved` event. The `foo` rule is registered, which checks if the value is equal to 'foo'.  It also defines a custom placeholder `:foo` for error messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_50\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Listener;\n\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Validation\\Contract\\ValidatorFactoryInterface;\nuse Hyperf\\Validation\\Event\\ValidatorFactoryResolved;\nuse Hyperf\\Validation\\Validator;\n\n#[Listener]\nclass ValidatorFactoryResolvedListener implements ListenerInterface\n{\n\n    public function listen(): array\n    {\n        return [\n            ValidatorFactoryResolved::class,\n        ];\n    }\n\n    public function process(object $event): void\n    {\n        /**  @var ValidatorFactoryInterface $validatorFactory */\n        $validatorFactory = $event->validatorFactory;\n        // 註冊了 foo 驗證器\n        $validatorFactory->extend('foo', function (string $attribute, mixed $value, array $parameters, Validator $validator): bool {\n            return $value == 'foo';\n        });\n        // 當創建一個自定義驗證規則時，你可能有時候需要為錯誤信息定義自定義佔位符這裏擴展了 :foo 佔位符\n        $validatorFactory->replacer('foo', function (string $message, string $attribute, string $rule, array $parameters): array|string {\n            return str_replace(':foo', $attribute, $message);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Date Type Conversion in PHP\nDESCRIPTION: This code demonstrates how to use the `date` or `datetime` attribute for type casting in a model. You can specify the date format that will be used when models are serialized as arrays or JSON. In this example, the `created_at` attribute will be formatted as 'Y-m-d'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * Properties that should be typecast\n     *\n     * @var array\n     */\n    protected $casts = [\n         'created_at' => 'datetime:Y-m-d',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Swagger UI HTML Configuration\nDESCRIPTION: This demonstrates how to configure a custom Swagger UI HTML by directly embedding the HTML content within the `swagger.php` configuration file.  This snippet shows an example where the URL for the Swagger UI distribution is changed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/swagger.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'enable' => true,\n    'port' => 9500,\n    'json_dir' => BASE_PATH . '/storage/swagger',\n    'html' => <<<'HTML'\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta\n      name=\"description\"\n      content=\"SwaggerUI\"\n    />\n    <title>SwaggerUI</title>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui.css\" />\n  </head>\n  <body>\n  <div id=\"swagger-ui\"></div>\n  <script src=\"https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui-bundle.js\" crossorigin></script>\n  <script src=\"https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui-standalone-preset.js\" crossorigin></script>\n  <script>\n    window.onload = () => {\n      window.ui = SwaggerUIBundle({\n        url: GetQueryString(\"search\"),\n        dom_id: '#swagger-ui',\n        presets: [\n          SwaggerUIBundle.presets.apis,\n          SwaggerUIStandalonePreset\n        ],\n        layout: \"StandaloneLayout\",\n      });\n    };\n    function GetQueryString(name) {\n      var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\", \"i\");\n      var r = window.location.search.substr(1).match(reg); //獲取url中\"?\"符後的字符串並正則匹配\n      var context = \"\";\n      if (r != null)\n        context = decodeURIComponent(r[2]);\n      reg = null;\n      r = null;\n      return context == null || context == \"\" || context == \"undefined\" ? \"/http.json\" : context;\n    }\n  </script>\n  </body>\n</html>\nHTML,\n    'url' => '/swagger',\n    'auto_generate' => true,\n    'scan' => [\n        'paths' => null,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Replacement Coroutine Class\nDESCRIPTION: This code defines a class `Hyperf\\Coroutine\\Coroutine` that replaces the original Hyperf class of the same name using the `class_map` feature. The `create` method is overridden to use the `App\\Kernel\\Context\\Coroutine` class to create coroutines with context copying enabled.  All other methods delegate to the underlying Hyperf Engine's Coroutine class. This example demonstrates how to replace a core framework class with a custom implementation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/annotation.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n *\n * @link     https://www.hyperf.io\n * @document https://hyperf.wiki\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\n\nnamespace Hyperf\\Coroutine;\n\nuse App\\Kernel\\Context\\Coroutine as Go;\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Engine\\Coroutine as Co;\nuse Hyperf\\Engine\\Exception\\CoroutineDestroyedException;\nuse Hyperf\\Engine\\Exception\\RunningInNonCoroutineException;\nuse Throwable;\n\nclass Coroutine\n{\n    /**\n     * Returns the current coroutine ID.\n     * Returns -1 when running in non-coroutine context.\n     */\n    public static function id(): int\n    {\n        return Co::id();\n    }\n\n    public static function defer(callable $callable): void\n    {\n        Co::defer(static function () use ($callable) {\n            try {\n                $callable();\n            } catch (Throwable $exception) {\n                di()->get(StdoutLoggerInterface::class)->error((string) $exception);\n            }\n        });\n    }\n\n    public static function sleep(float $seconds): void\n    {\n        usleep(intval($seconds * 1000 * 1000));\n    }\n\n    /**\n     * Returns the parent coroutine ID.\n     * Returns 0 when running in the top level coroutine.\n     * @throws RunningInNonCoroutineException when running in non-coroutine context\n     * @throws CoroutineDestroyedException when the coroutine has been destroyed\n     */\n    public static function parentId(?int $coroutineId = null): int\n    {\n        return Co::pid($coroutineId);\n    }\n\n    /**\n     * @return int Returns the coroutine ID of the coroutine just created.\n     *             Returns -1 when coroutine create failed.\n     */\n    public static function create(callable $callable): int\n    {\n        return di()->get(Go::class)->create($callable);\n    }\n\n    public static function inCoroutine(): bool\n    {\n        return Co::id() > 0;\n    }\n\n    public static function stats(): array\n    {\n        return Co::stats();\n    }\n\n    public static function exists(int $id): bool\n    {\n        return Co::exists($id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Description (PHP)\nDESCRIPTION: Sets the description for a command using the `setDescription()` method. This description is displayed in the command list and the help message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->setDescription('Hyperf Demo Command');\n}\n\n```\n\n----------------------------------------\n\nTITLE: Publish Configuration Files Bash\nDESCRIPTION: This command uses the Hyperf CLI to publish configuration files for a specific package.  It finds the publishable files defined in the ConfigProvider of the specified package and copies them to the appropriate configuration directory in the Hyperf project. Requires the Hyperf CLI tool.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/component-guide/configprovider.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish package name\n```\n\n----------------------------------------\n\nTITLE: Image Dimensions Validation in Hyperf\nDESCRIPTION: This snippet showcases the `dimensions` validation rule in Hyperf, used to constrain image dimensions. It shows how to specify minimum and maximum width and height, as well as aspect ratio.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n'avatar' => 'dimensions:min_width=100,min_height=200'\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Format\nDESCRIPTION: This snippet demonstrates how to customize the timestamp format using the `$dateFormat` property. This property determines how date attributes are stored in the database and serialized to arrays or JSON.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected ?string $dateFormat = 'U';\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a NATS Consumer using Hyperf Command\nDESCRIPTION: This command generates a NATS consumer class using the Hyperf CLI tool. The generated consumer can be configured to listen to a specific subject and queue. The command creates a new class file in the appropriate namespace.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nats.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:nats-consumer DemoConsumer\n```\n\n----------------------------------------\n\nTITLE: Config Provider Data Structure Change\nDESCRIPTION: This snippet demonstrates the change in the structure of the Config Provider.  A new 'annotations' layer was added to align with the configuration file structure. This affects how annotation scanning paths are defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog/changelog-v1.1.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n'scan' => [\n    'paths' => [\n        __DIR__,\n    ],\n    'collectors' => [],\n],\n```\n\n----------------------------------------\n\nTITLE: Installing RPN with Composer\nDESCRIPTION: This command installs the `hyperf/rpn` package using Composer, making the RPN calculator functionality available in your Hyperf project. Composer is a dependency manager for PHP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/rpn.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/rpn\n```\n\n----------------------------------------\n\nTITLE: Getting a Single Value - PHP\nDESCRIPTION: Illustrates how to retrieve a single value from a database table using the `value()` method. This method returns the value of the specified column for the first row that matches the query. Requires the `Hyperf\\DbConnection\\Db` facade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$id = Db::table('user')->value('id');\nvar_dump($id);\n```\n\n----------------------------------------\n\nTITLE: Generate Kafka Consumer\nDESCRIPTION: Generates a Kafka consumer using the Hyperf command-line tool. This will create a consumer class that can be used to process messages from a Kafka topic.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/kafka.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php gen:kafka-consumer KafkaConsumer\n```\n\n----------------------------------------\n\nTITLE: 1.1 dependencies.php structure PHP\nDESCRIPTION: This snippet demonstrates the updated file structure of dependencies.php in Hyperf 1.1. The file is moved to config/autoload/dependencies.php, and the 'dependencies' key is removed from the returned array. The dependency mappings are now directly in the root of the array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/1.1.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// config/autoload/dependencies.php 文件\n\nreturn [\n    FooInterface::class => Foo::class\n];\n```\n\n----------------------------------------\n\nTITLE: Install Config Center - Shell\nDESCRIPTION: Installs the `hyperf/config-center` component via Composer. This is necessary for projects using the configuration center feature.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.2.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"hyperf/config-center:~2.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Defining a ConfigProvider Class in Hyperf (PHP)\nDESCRIPTION: Defines a ConfigProvider class with the `__invoke` method that returns an array of configuration options. These options are merged into various configuration files and structures within the Hyperf framework. The example shows how to define dependencies, annotations, commands, listeners, publish configurations and other settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/component-guide/configprovider.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Hyperf\\Foo;\n\nclass ConfigProvider\n{\n    public function __invoke(): array\n    {\n        return [\n            // 合併到  config/autoload/dependencies.php 文件\n            'dependencies' => [],\n            // 合併到  config/autoload/annotations.php 文件\n            'annotations' => [\n                'scan' => [\n                    'paths' => [\n                        __DIR__,\n                    ],\n                ],\n            ],\n            // 默認 Command 的定義，合併到 Hyperf\\Contract\\ConfigInterface 內，換個方式理解也就是與 config/autoload/commands.php 對應\n            'commands' => [],\n            // 與 commands 類似\n            'listeners' => [],\n            // 組件默認配置文件，即執行命令後會把 source 的對應的文件複製為 destination 對應的的文件\n            'publish' => [\n                [\n                    'id' => 'config',\n                    'description' => 'description of this config file.', // 描述\n                    // 建議默認配置放在 publish 文件夾中，文件命名和組件名稱相同\n                    'source' => __DIR__ . '/../publish/file.php',  // 對應的配置文件路徑\n                    'destination' => BASE_PATH . '/config/autoload/file.php', // 複製為這個路徑下的該文件\n                ],\n            ],\n            // 亦可繼續定義其它配置，最終都會合併到與 ConfigInterface 對應的配置儲存器中\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Create Observable from Coroutines\nDESCRIPTION: This code creates an Observable from multiple coroutines using `Observable::fromCoroutine`. It demonstrates how to run two functions concurrently in coroutines and return the result of the first one to complete, similar to `Promise.race` in JavaScript. It pushes the first result into a channel and echoes it.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/reactive-x.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\ReactiveX\\Observable;\nuse Swoole\\Coroutine\\Channel;\n\n$result = new Channel(1);\n$o = Observable::fromCoroutine([function () {\n    sleep(2);\n    return 1;\n}, function () {\n    sleep(1);\n    return 2;\n}]);\n$o->take(1)->subscribe(\n    function ($x) use ($result) {\n        $result->push($x);\n    }\n);\necho $result->pop(); // 2;\n```\n\n----------------------------------------\n\nTITLE: Install Aliyun Logtail Container (Docker)\nDESCRIPTION: This command deploys the Aliyun Logtail container, responsible for collecting and forwarding logs to Aliyun Log Service. It mounts necessary volumes for log access and Docker socket, and sets environment variables for region, user ID, and user-defined ID.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/aliyun-logger.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d -v /:/logtail_host:ro -v /var/run/docker.sock:/var/run/docker.sock \\\n--env ALIYUN_LOGTAIL_CONFIG=/etc/ilogtail/conf/${your_region_name}/ilogtail_config.json \\\n--env ALIYUN_LOGTAIL_USER_ID=${your_aliyun_user_id} \\\n--env ALIYUN_LOGTAIL_USER_DEFINED_ID=${your_machine_group_user_defined_id} \\\nregistry.cn-hangzhou.aliyuncs.com/log-service/logtail\n```\n\n----------------------------------------\n\nTITLE: Install SQL Server Driver - Hyperf\nDESCRIPTION: Installs the SQL Server driver for Hyperf using Composer. Requires Swoole >= 5.1.0 and pdo_odbc extension, needs to be compiled with `--with-swoole-odbc`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/quick-start.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/database-sqlserver-incubator\n```\n\n----------------------------------------\n\nTITLE: Configure Session SID Provider\nDESCRIPTION: This PHP configuration sets the SessionSidProvider as the SocketID provider. This configures Socket.IO to use the SessionID as the SocketID, linking Socket.IO connections to existing sessions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/socketio-server/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\SocketIOServer\\SidProvider\\SidProviderInterface::class => \\Hyperf\\SocketIOServer\\SidProvider\\SessionSidProvider::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Install Tencent COS Flysystem Adapter - Shell\nDESCRIPTION: Installs the `overtrue/flysystem-cos` component via Composer. This is required when using Tencent Cloud COS as the filesystem. Use version ^4.0 for Flysystem v2 compatibility.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.2.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-cos:^4.0\"\n```\n\n----------------------------------------\n\nTITLE: Using Constant Frequency (PHP)\nDESCRIPTION: This code shows how to configure the connection pool to use the `ConstantFrequency` component. This component uses a timer to periodically check and release idle connections in the pool.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/pool.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\DbConnection\\Frequency::class => Hyperf\\Pool\\ConstantFrequency::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf ETCD\nDESCRIPTION: This command installs the Hyperf ETCD client using Composer, a dependency manager for PHP. It adds the `hyperf/etcd` package to the project's dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/etcd.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/etcd\n```\n\n----------------------------------------\n\nTITLE: Publishing Specific Package Config Bash\nDESCRIPTION: This command publishes the configuration file for the `hyperf/amqp` package, copying the default configuration to the application's config directory.  This command assumes the `hyperf/amqp` package provides a ConfigProvider with a `publish` configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/component-guide/configprovider.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/amqp\n```\n\n----------------------------------------\n\nTITLE: Configure SQL Server Database Connection\nDESCRIPTION: This configuration example demonstrates how to set up a SQL Server database connection within the `config/autoload/databases.php` file. It defines connection parameters such as driver, host, database, port, username, password, odbc_datasource_name and odbc.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/quick-start.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/databases.php\nreturn [\n     // 其他配置\n    'sqlserver' => [\n        'driver' => env('DB_DRIVER', 'sqlsrv'),\n        'host' => env('DB_HOST', 'mssql'),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'port' => env('DB_PORT', 1443),\n        'username' => env('DB_USERNAME', 'SA'),\n        'password' => env('DB_PASSWORD'),\n        'odbc_datasource_name' => 'DRIVER={ODBC Driver 18 for SQL Server};SERVER=127.0.0.1,1433;TrustServerCertificate=yes;database=hyperf',\n        'odbc'  =>  true,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Requesting NATS Message Sync\nDESCRIPTION: This code demonstrates how to synchronously request a message from a NATS subject using the `requestSync` method of the `DriverInterface`. The `requestSync` method takes the subject and the message payload as arguments and returns a `Message` object containing the response. The `getBody` method retrieves the body of the message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nats.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Nats\\Driver\\DriverInterface;\nuse Hyperf\\Nats\\Message;\n\n#[AutoController(prefix: \"nats\")]\nclass NatsController extends AbstractController\n{\n    #[Inject]\n    protected DriverInterface $nats;\n\n    public function sync()\n    {\n        /** @var Message $message */\n        $message = $this->nats->requestSync('hyperf.reply', [\n            'id' => 'limx',\n        ]);\n\n        return $this->response->success($message->getBody());\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining an Accessor in Hyperf Model (PHP)\nDESCRIPTION: This code demonstrates how to define an accessor for the `first_name` attribute in a Hyperf model. When the `first_name` attribute is accessed, the `getFirstNameAttribute` method is automatically called, allowing you to format the value. In this example, the first letter of the first name is capitalized using `ucfirst()`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/mutators.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 获取用户的姓名.\n     *\n     * @param  string  $value\n     * @return string\n     */\n    public function getFirstNameAttribute($value)\n    {\n        return ucfirst($value);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Create or Find Model (firstOrCreate)\nDESCRIPTION: Demonstrates how to use the `firstOrCreate` method to find a model by given attributes. If the model doesn't exist, it's created. The first example creates a model with only the 'name' attribute if not found, while the second example uses both 'name' and additional attributes like 'gender' and 'age'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n// 透過 name 來查詢使用者，不存在則建立...\n$user = User::firstOrCreate(['name' => 'Hyperf']);\n\n// 透過 name 查詢使用者，不存在則使用 name 和 gender, age 屬性建立...\n$user = User::firstOrCreate(\n    ['name' => 'Hyperf'],\n    ['gender' => 1, 'age' => 20]\n);\n\n```\n\n----------------------------------------\n\nTITLE: Custom Service Governance Driver\nDESCRIPTION: This PHP code shows how to create a custom service governance driver by implementing the `Hyperf\\ServiceGovernance\\DriverInterface`. The `getNodes`, `register`, and `isRegistered` methods need to be implemented to handle service discovery and registration logic. The provided example returns an empty array for `getNodes` and does nothing for `register`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/service-register.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\ServiceGovernance;\n\nuse Hyperf\\ServiceGovernance\\DriverInterface;\n\nclass FooDriver implements DriverInterface\n{\n    public function getNodes(string $uri, string $name, array $metadata): array\n    {\n        return [];\n    }\n\n    public function register(string $name, string $host, int $port, array $metadata): void\n    {\n    }\n\n    public function isRegistered(string $name, string $address, int $port, array $metadata): bool\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting DAGs in Hyperf\nDESCRIPTION: This PHP code demonstrates how to nest DAGs by implementing the `\\Hyperf\\Dag\\Runner` interface in `\\Hyperf\\Dag\\Dag`. A nested DAG is created and then added as a vertex to a super DAG.  The `Vertex::of` method wraps the nested DAG into a vertex.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/dag.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// 命名空間已省略\n$a = Vertex::make(function () { return 1;});\n$b = Vertex::make(function () { return 2;});\n$c = Vertex::make(function () { return 3;});\n\n$nestedDag = new Dag();\n$nestedDag->addVertex($a)->addVertex($b)->addEdge($a, $b);\n$d = Vertex::of($nestedDag);\n\n$superDag = new Dag();\n$superDag->addVertex($c)->addVertex($d)->addEdge($c, $d);\n$superDag->run();\n```\n\n----------------------------------------\n\nTITLE: Using Circuit Breaker Annotation in Hyperf\nDESCRIPTION: This code demonstrates how to use the `CircuitBreaker` annotation to apply a circuit breaker to the `search` method of the `UserService` class. It defines options for timeout, failure count, success count, and a fallback method (`searchFallback`) to be executed when the circuit is open.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/circuit-breaker.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Service\\UserServiceClient;\nuse Hyperf\\CircuitBreaker\\Annotation\\CircuitBreaker;\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass UserService\n{\n    #[Inject]\n    private UserServiceClient $client;\n\n    #[CircuitBreaker(options: ['timeout' => 0.05], failCounter: 1, successCounter: 1, fallback: [UserService::class, 'searchFallback'])]\n    public function search($offset, $limit)\n    {\n        return $this->client->users($offset, $limit);\n    }\n\n    public function searchFallback($offset, $limit)\n    {\n        return [];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring a UDP Server in Hyperf (PHP)\nDESCRIPTION: This code snippet shows the configuration array for a UDP server in Hyperf. It defines the server name, type, host, port, socket type, and callbacks. The `ON_PACKET` event is mapped to the `onPacket` method of the `UdpServer` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tcp-server.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 以下删除了其他不相关的配置项\n    'servers' => [\n        [\n            'name' => 'udp',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9505,\n            'sock_type' => SWOOLE_SOCK_UDP,\n            'callbacks' => [\n                Event::ON_PACKET => [App\\Controller\\UdpServer::class, 'onPacket'],\n            ],\n            'settings' => [\n                // 按需配置\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Coroutine Usage in Magic Methods (Hyperf)\nDESCRIPTION: This example shows the potential issues of switching coroutines within magic methods (__get, __set, __isset) in Hyperf. It highlights how unexpected behavior can occur due to coroutine context switching.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/important.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once 'vendor/autoload.php';\n\nuse function Hyperf\\Coroutine\\go;\n\nSwoole\\Coroutine::set(['hook_flags' => SWOOLE_HOOK_ALL]);\n\nclass Foo\n{\n    public function __get(string $name)\n    {\n        sleep(1);\n        return $name;\n    }\n\n    public function __set(string $name, mixed $value)\n    {\n        sleep(1);\n        var_dump($name, $value);\n    }\n\n    public function __isset(string $name): bool\n    {\n        sleep(1);\n        var_dump($name);\n        return true;\n    }\n}\n\n$foo = new Foo();\ngo(static function () use ($foo) {\n    var_dump(isset($foo->xxx));\n});\n\ngo(static function () use ($foo) {\n    var_dump(isset($foo->xxx));\n});\n\n\\Swoole\\Event::wait();\n```\n\n----------------------------------------\n\nTITLE: Adjusting config/autoload/logger.php for Hyperf 2.0\nDESCRIPTION: This code snippet demonstrates adjusting the `config/autoload/logger.php` configuration file due to Monolog dependency updates in Hyperf 2.0. The `dateFormat` configuration is modified to maintain consistency with previous versions, ensuring compatibility with existing logging systems.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.0.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => [\n        'handler' => [\n            'class' => Monolog\\Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => BASE_PATH . '/runtime/logs/hyperf.log',\n                'level' => Monolog\\Logger::DEBUG,\n            ],\n        ],\n        'formatter' => [\n            'class' => Monolog\\Formatter\\LineFormatter::class,\n            'constructor' => [\n                'format' => null,\n                'dateFormat' => 'Y-m-d H:i:s',\n                'allowInlineLineBreaks' => true,\n            ],\n        ],\n        'processors' => [\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Install Gitlab Runner on CentOS\nDESCRIPTION: This script installs Gitlab Runner on a CentOS system using the official Gitlab package repository.  It adds the repository, updates the package list, and installs the gitlab-runner package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash\nyum install gitlab-runner\n```\n\n----------------------------------------\n\nTITLE: UserService Factory PHP\nDESCRIPTION: Defines a factory class for creating UserService instances with custom parameters (e.g., enabling cache).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php \nnamespace App\\Service;\n\nuse Hyperf\\Contract\\ConfigInterface;\nuse Psr\\Container\\ContainerInterface;\n\nclass UserServiceFactory\n{\n    // 實現一個 __invoke() 方法來完成對象的生產，方法參數會自動注入一個當前的容器實例和一個參數數組\n    public function __invoke(ContainerInterface $container, array $parameters = [])\n    {\n        $config = $container->get(ConfigInterface::class);\n        // 我們假設對應的配置的 key 為 cache.enable\n        $enableCache = $config->get('cache.enable', false);\n        return make(UserService::class, compact('enableCache'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Service Availability\nDESCRIPTION: This command tests the availability of a service by sending a curl request to a specific port. Requires `curl`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_56\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://127.0.0.1:9501/\n```\n\n----------------------------------------\n\nTITLE: Modifying Gitlab Runner Concurrent Execution\nDESCRIPTION: This snippet modifies the `config.toml` file for gitlab-runner to set the concurrent execution limit.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n$ vim /etc/gitlab-runner/config.toml\nconcurrent = 5\n```\n\n----------------------------------------\n\nTITLE: Metric Middleware Configuration\nDESCRIPTION: Configures the MetricMiddleware to collect HTTP request metrics. The middleware collects request status, path, and method.  It is important to note that too many request paths may lead to high cardinality and memory exhaustion.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'http' => [\n        \\Hyperf\\Metric\\Middleware\\MetricMiddleware::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image\nDESCRIPTION: Builds a Docker image from the current directory and pushes it to a specified registry.  This makes the image available for deployment in the Docker Swarm cluster.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_53\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . -t registry.cn-shanghai.aliyuncs.com/your_namespace/your_project:latest\ndocker push registry.cn-shanghai.aliyuncs.com/your_namespace/your_project:latest\n```\n\n----------------------------------------\n\nTITLE: Conditionally Merging Data (PHP)\nDESCRIPTION: This PHP snippet shows the use of `mergeWhen` to conditionally merge multiple attributes into the resource response. If `Auth::user()->isAdmin()` is `true`, both 'first-secret' and 'second-secret' will be added.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            $this->mergeWhen(Auth::user()->isAdmin(), [\n                'first-secret' => 'value',\n                'second-secret' => 'value',\n            ]),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Remove doctrine/common Package (Bash)\nDESCRIPTION: This snippet demonstrates how to remove the `doctrine/common` package using composer.  The `doctrine/common` package has dependency conflicts with `hyperf/utils`. It involves running bash commands in the project's root directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.1.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n# 移除元件\ncomposer remove doctrine/common\n# 更新\ncomposer update \"hyperf/*\" -o\n```\n\n----------------------------------------\n\nTITLE: Define Docker Compose Service - YAML\nDESCRIPTION: This YAML file defines a Docker Compose service for a demo application. It specifies the image, environment variables, ports, deployment configuration, networks, and configs.  It uses external networks and configurations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/docker-swarm.md#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3.7'\nservices:\n  demo:\n    image: $REGISTRY_URL/$PROJECT_NAME:test\n    environment:\n      - \"APP_PROJECT=demo\"\n      - \"APP_ENV=test\"\n    ports:\n      - 9501:9501\n    deploy:\n      replicas: 1\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 5\n      update_config:\n        parallelism: 2\n        delay: 5s\n        order: start-first\n    networks:\n      - default-network\n    configs:\n      - source: demo_v1.0\n        target: /opt/www/.env\nconfigs:\n  demo_v1.0:\n    external: true\nnetworks:\n  default-network:\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Anonymous Component in Subdirectory (HTML)\nDESCRIPTION: This shows how to render an anonymous component that resides in a subdirectory within `/storage/view/components`.  The dot notation is used to specify the subdirectory path.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n    <x-inputs.button/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Application\nDESCRIPTION: Curl command to access the deployed application running on port 9501.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_25\n\nLANGUAGE: Shell\nCODE:\n```\ncurl http://127.0.0.1:9501/\n```\n\n----------------------------------------\n\nTITLE: Getting Worker Join Token\nDESCRIPTION: This command retrieves the join token for adding worker nodes to the Docker Swarm cluster. Requires Docker Swarm.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_48\n\nLANGUAGE: shell\nCODE:\n```\n$ docker swarm join-token worker\n```\n\n----------------------------------------\n\nTITLE: Adjust WebSocket Controller PHP\nDESCRIPTION: This snippet shows how to adjust the WebSocket controller for Hyperf 1.1. It updates the type hints for the $server parameter in the onMessage and onOpen methods to Swoole\\WebSocket\\Server to match the new input parameter constraint.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/1.1.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnMessageInterface;\nuse Hyperf\\Contract\\OnOpenInterface;\nuse Swoole\\Http\\Request;\nuse Swoole\\Websocket\\Frame;\nuse Swoole\\WebSocket\\Server as WebSocketServer;\n\nclass WebSocketController implements OnMessageInterface, OnOpenInterface\n{\n    public function onMessage(WebSocketServer $server, Frame $frame): void\n    {\n    }\n\n    public function onOpen(WebSocketServer $server, Request $request): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 1.0 Dependencies Configuration - PHP\nDESCRIPTION: Demonstrates the file structure of `config/dependencies.php` in Hyperf 1.0.  It returns an array containing a `dependencies` key, which maps interfaces to concrete classes for dependency injection.  The file resides in the `config` directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/1.1.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// config/dependencies.php 文件\n\nreturn [\n    'dependencies' => [\n        FooInterface::class => Foo::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Install League Flysystem Memory Adapter\nDESCRIPTION: This shell command installs the `league/flysystem-memory` adapter using composer, required to use in-memory file storage in Hyperf. The correct version constraints for flysystem v2.0 are also given.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.2.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"league/flysystem-memory:^2.0\"\n```\n\n----------------------------------------\n\nTITLE: Define SWOOLE_HOOK_FLAGS Constant - PHP\nDESCRIPTION: Defines the SWOOLE_HOOK_FLAGS constant in the application and test entry points.  This is necessary for Swoole hooking to function correctly.  The constant is defined only if it's not already defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/1.1.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n! defined('SWOOLE_HOOK_FLAGS') && define('SWOOLE_HOOK_FLAGS', SWOOLE_HOOK_ALL);\n```\n\n----------------------------------------\n\nTITLE: WebSocket Controller with IpcSubject\nDESCRIPTION: This code implements a WebSocket controller using `IpcSubject` for inter-process communication.  It creates a ReplaySubject for storing the last 5 messages, wraps it in an IpcSubject for sharing across worker processes, and subscribes WebSocket clients to the subject.  New messages received on the WebSocket are pushed to the subject, which then broadcasts them to all subscribed clients.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/reactive-x.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\ReactiveX\\Example;\n\nuse Hyperf\\Contract\\OnCloseInterface;\nuse Hyperf\\Contract\\OnMessageInterface;\nuse Hyperf\\Contract\\OnOpenInterface;\nuse Hyperf\\ReactiveX\\Contract\\BroadcasterInterface;\nuse Hyperf\\ReactiveX\\IpcSubject;\nuse Rx\\Subject\\ReplaySubject;\nuse Swoole\\Http\\Request;\nuse Swoole\\Server;\nuse Swoole\\WebSocket\\Frame;\nuse Swoole\\WebSocket\\Server as WebSocketServer;\n\nclass WebSocketController implements OnMessageInterface, OnOpenInterface, OnCloseInterface\n{\n    private IpcSubject $subject;\n\n    private $subscriber = [];\n\n    public function __construct(BroadcasterInterface $broadcaster)\n    {\n        $relaySubject = make(ReplaySubject::class, ['bufferSize' => 5]);\n        // 第一個參數為原 RxPHP Subject 對象。\n        // 第二個參數為廣播方式，默認為全進程廣播\n        // 第三個參數為頻道 ID, 每個頻道只能收到相同頻道的消息。\n        $this->subject = new IpcSubject($relaySubject, $broadcaster, 1);\n    }\n\n    public function onMessage(WebSocketServer $server, Frame $frame): void\n    {\n        $this->subject->onNext($frame->data);\n    }\n\n    public function onClose(Server $server, int $fd, int $reactorId): void\n    {\n        $this->subscriber[$fd]->dispose();\n    }\n\n    public function onOpen(WebSocketServer $server, Request $request): void\n    {\n        $this->subscriber[$request->fd] = $this->subject->subscribe(function ($data) use ($server, $request) {\n            $server->push($request->fd, $data);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Mapping of NormalizerInterface\nDESCRIPTION: This code snippet shows how to manually map the `Hyperf\\Contract\\NormalizerInterface` when the `symfony/serializer` library is required. The `SerializerFactory` is used to create a `Serializer` instance and register it as the implementation for the interface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog/2.0.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Utils\\Serializer\\SerializerFactory;\nuse Hyperf\\Utils\\Serializer\\Serializer;\n\nreturn [\n    Hyperf\\Contract\\NormalizerInterface::class => new SerializerFactory(Serializer::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Retrieving Config with Hyperf Nacos\nDESCRIPTION: This PHP code snippet demonstrates how to authenticate with a Nacos server using the Hyperf Nacos SDK and retrieve configuration data. It initializes the Nacos application with configuration, logs in using a username and password, and then retrieves a specific configuration by its data ID and group. The response from Nacos is decoded from JSON format.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/nacos/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Nacos\\Application;\nuse Hyperf\\Nacos\\Config;\nuse Hyperf\\Codec\\Json;\n\n$application = new Application(new Config([\n    'username' => 'nacos',\n    'password' => 'nacos',\n    'guzzle_config' => [\n        'headers' => [\n            'charset' => 'UTF-8',\n        ],\n    ],\n]));\n\n$response = $application->auth->login('nacos', 'nacos');\n$result = Json::decode((string) $response->getBody());\n\n$response = $application->config->get('hyperf-service-config', 'DEFAULT_GROUP');\n$result = Json::decode((string) $response->getBody());\n```\n\n----------------------------------------\n\nTITLE: Priority Definition\nDESCRIPTION: Uses a PriorityDefinition to allow defining injection priorities.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse FooInterface;\nuse Foo;\n\nreturn [\n    'dependencies' => [\n        FooInterface::class => new PriorityDefinition(Foo::class, 1),\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Symbolic Link Structure Output\nDESCRIPTION: Shows an example output of `ls -l` command after creating symlinks. This represents the desired setup for component development.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/component-guide/intro.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ncache -> ../../../hyperf/src/cache\ncommand -> ../../../hyperf/src/command\nconfig -> ../../../hyperf/src/config\ncontract -> ../../../hyperf/src/contract\ndatabase -> ../../../hyperf/src/database\ndb-connection -> ../../../hyperf/src/db-connection\ndevtool -> ../../../hyperf/src/devtool\ndi -> ../../../hyperf/src/di\ndispatcher -> ../../../hyperf/src/dispatcher\nevent -> ../../../hyperf/src/event\nexception-handler -> ../../../hyperf/src/exception-handler\nframework -> ../../../hyperf/src/framework\nguzzle -> ../../../hyperf/src/guzzle\nhttp-message -> ../../../hyperf/src/http-message\nhttp-server -> ../../../hyperf/src/http-server\nlogger -> ../../../hyperf/src/logger\nmemory -> ../../../hyperf/src/memory\npaginator -> ../../../hyperf/src/paginator\npool -> ../../../hyperf/src/pool\nprocess -> ../../../hyperf/src/process\nredis -> ../../../hyperf/src/redis\nserver -> ../../../hyperf/src/server\ntesting -> ../../../hyperf/src/testing\nsupport -> ../../../hyperf/src/support\n```\n\n----------------------------------------\n\nTITLE: Property Injection with Annotations in PHP 8\nDESCRIPTION: This code snippet demonstrates how to use the `@Inject` annotation in PHP 8 to inject dependencies through member property type declarations, replacing the need for `@var` declarations. The ExampleService dependency will be automatically injected into the $exampleService property.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog/2.0.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Example {\n    /**\n     * @Inject\n     */\n    private ExampleService $exampleService;\n}\n```\n\n----------------------------------------\n\nTITLE: Define Route with Closure in Hyperf\nDESCRIPTION: This snippet demonstrates how to define a simple route using a closure in Hyperf. It binds the '/hello-hyperf' URI to a closure that returns 'Hello Hyperf.'. Requires `Hyperf\\HttpServer\\Router\\Router`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/router.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\HttpServer\\Router\\Router;\n\nRouter::get('/hello-hyperf', function () {\n    return 'Hello Hyperf.';\n});\n```\n\n----------------------------------------\n\nTITLE: Update php-cs-fixer Version - PHP\nDESCRIPTION: Updates the php-cs-fixer dependency in composer.json to version 3.0. The code also highlights the rename and configuration changes needed after the update.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.2.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\"friendsofphp/php-cs-fixer\": \"^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Remove and Recreate Ingress Network\nDESCRIPTION: This script removes and recreates the Docker ingress network.  This is useful for resolving conflicts with the default ingress network subnet. A new ingress network is created with the specified subnet and driver.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\ndocker network rm ingress\ndocker network create --ingress --subnet 192.168.0.1/16 --driver overlay ingress\n```\n\nLANGUAGE: Shell\nCODE:\n```\ndocker network create \\\n--driver overlay \\\n--subnet 10.0.0.1/8 \\\n--opt encrypted \\\n--attachable \\\ndefault-network\n```\n\n----------------------------------------\n\nTITLE: Install Aliyun OSS Adapter\nDESCRIPTION: This shell command installs the `hyperf/flysystem-oss` component using composer. This is required to integrate with Aliyun OSS for file system operations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.2.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/flysystem-oss\n```\n\n----------------------------------------\n\nTITLE: Docker Swarm Init - Shell\nDESCRIPTION: This command initializes a Docker Swarm cluster on the current machine. This turns the machine into a manager node.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/docker-swarm.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker swarm init\n```\n\n----------------------------------------\n\nTITLE: Installing SQL Server Driver using Composer\nDESCRIPTION: This command installs the SQL Server driver for Hyperf using Composer. It is currently in the incubator phase. It requires Swoole version 5.1.0 or higher and depends on pdo_odbc, requiring `--with-swoole-odbc` to be enabled during compilation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/quick-start.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/database-sqlserver-incubator\n```\n\n----------------------------------------\n\nTITLE: Delete Models via Query\nDESCRIPTION: Demonstrates deleting models based on a query condition. The `delete` method is called on a query builder instance, which deletes all records matching the query.  Important: without a `where` condition, this will delete the entire table. No model events are triggered during bulk deletes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Model\\User;\n\n// 注意使用 delete 方法時必須建立在某些查詢條件基礎之上才能安全刪除資料，不存在 where 條件，會導致刪除整個資料表\nUser::query()->where('gender', 1)->delete();\n\n```\n\n----------------------------------------\n\nTITLE: UserServiceFactory\nDESCRIPTION: Defines a factory to create UserService instances with custom parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php \nnamespace App\\Service;\n\nuse Hyperf\\Contract\\ConfigInterface;\nuse Psr\\Container\\ContainerInterface;\n\nclass UserServiceFactory\n{\n    // 實現一個 __invoke() 方法來完成物件的生產，方法引數會自動注入一個當前的容器例項和一個引數陣列\n    public function __invoke(ContainerInterface $container, array $parameters = [])\n    {\n        $config = $container->get(ConfigInterface::class);\n        // 我們假設對應的配置的 key 為 cache.enable\n        $enableCache = $config->get('cache.enable', false);\n        return make(UserService::class, compact('enableCache'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Docker via Script - Shell\nDESCRIPTION: This command downloads and executes a shell script to install Docker.  It uses curl to retrieve the script from a specified URL and then pipes it to the sh command for execution. This assumes the user has curl installed and execute permissions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/docker-swarm.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -sSL https://get.daocloud.io/docker | sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer Registry for Manual Consumer\nDESCRIPTION: This configuration defines a consumer in Hyperf, specifically designed for a manually created consumer class.  It specifies the service `name` (matching the `$serviceName` in the consumer class) and the registry information (Consul in this case). Node information can also be provided directly.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/json-rpc.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // 此處省略了其它同層級的配置\n    'consumers' => [\n        [\n            // 對應消費者類的 $serviceName\n            'name' => 'CalculatorService',\n            // 這個消費者要從哪個服務中心獲取節點資訊，如不配置則不會從服務中心獲取節點資訊\n            'registry' => [\n                'protocol' => 'consul',\n                'address' => 'http://127.0.0.1:8500',\n            ],\n            // 如果沒有指定上面的 registry 配置，即為直接對指定的節點進行消費，透過下面的 nodes 引數來配置服務提供者的節點資訊\n            'nodes' => [\n                ['host' => '127.0.0.1', 'port' => 9504],\n            ],\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Memory Adapter (Flysystem v1.0)\nDESCRIPTION: Install the Memory adapter for Flysystem v1.0. This adapter is useful for testing and development as it stores files in memory. Requires league/flysystem-memory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/filesystem.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"league/flysystem-memory:^1.0\"\n```\n\n----------------------------------------\n\nTITLE: Testing Hyperf Application with curl\nDESCRIPTION: This shell command uses curl to send an HTTP GET request to the Hyperf application running on localhost at port 9501. It expects a JSON response containing a welcome message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/daocloud.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl http://127.0.0.1:9501\n{\"code\":0,\"data\":{\"user\":\"Hyperf\",\"method\":\"GET\",\"message\":\"Hello Hyperf.\"}}\n```\n\n----------------------------------------\n\nTITLE: Update Hyperf Component Versions JSON\nDESCRIPTION: This JSON snippet demonstrates how to update the Hyperf components in your project's `composer.json` file to version `2.1.*`. This is a crucial first step in upgrading to Hyperf 2.1. The snippet shows the `require` and `require-dev` sections with the updated versions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/2.1.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require\": {\n        \"php\": \">=7.3\",\n        \"ext-json\": \"*\",\n        \"ext-openssl\": \"*\",\n        \"ext-pdo\": \"*\",\n        \"ext-pdo_mysql\": \"*\",\n        \"ext-redis\": \"*\",\n        \"ext-swoole\": \">=4.5\",\n        \"hyperf/async-queue\": \"2.1.*\",\n        \"hyperf/cache\": \"2.1.*\",\n        \"hyperf/command\": \"2.1.*\",\n        \"hyperf/config\": \"2.1.*\",\n        \"hyperf/constants\": \"2.1.*\",\n        \"hyperf/contract\": \"2.1.*\",\n        \"hyperf/database\": \"2.1.*\",\n        \"hyperf/db-connection\": \"2.1.*\",\n        \"hyperf/di\": \"2.1.*\",\n        \"hyperf/dispatcher\": \"2.1.*\",\n        \"hyperf/event\": \"2.1.*\",\n        \"hyperf/exception-handler\": \"2.1.*\",\n        \"hyperf/framework\": \"2.1.*\",\n        \"hyperf/guzzle\": \"2.1.*\",\n        \"hyperf/http-server\": \"2.1.*\",\n        \"hyperf/logger\": \"2.1.*\",\n        \"hyperf/model-cache\": \"2.1.*\",\n        \"hyperf/pool\": \"2.1.*\",\n        \"hyperf/process\": \"2.1.*\",\n        \"hyperf/redis\": \"2.1.*\",\n        \"hyperf/server\": \"2.1.*\",\n        \"hyperf/utils\": \"2.1.*\"\n    },\n    \"require-dev\": {\n        \"friendsofphp/php-cs-fixer\": \"^2.14\",\n        \"hyperf/devtool\": \"2.1.*\",\n        \"hyperf/testing\": \"2.1.*\",\n        \"mockery/mockery\": \"^1.0\",\n        \"phpstan/phpstan\": \"^0.12.18\",\n        \"swoole/ide-helper\": \"dev-master\",\n        \"symfony/var-dumper\": \"^5.1\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Supervisor on CentOS\nDESCRIPTION: This snippet demonstrates how to install Supervisor on a CentOS system using the yum package manager. It includes installing the EPEL repository and then installing the supervisor package itself.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/supervisor.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install the epel source, if it has been installed before, skip this step\nyum install -y epel-release\nyum install -y supervisor\n```\n\n----------------------------------------\n\nTITLE: List Supported Commands\nDESCRIPTION: Displays the list of available commands supported by the Hyperf framework. The `gen` series and `vendor:publish` command are provided by the `devtool` component for code generation and configuration publishing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/devtool.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php\n```\n\n----------------------------------------\n\nTITLE: Install hyperf/session Package\nDESCRIPTION: Installs the hyperf/session component using Composer. This command adds the necessary files to your project to manage user sessions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/session.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/session\n```\n\n----------------------------------------\n\nTITLE: Configuring Gitlab Email Settings\nDESCRIPTION: Configures Gitlab's email settings to enable sending emails for notifications and user creation by modifying `/srv/gitlab/config/gitlab.rb`. Replace placeholder values with actual SMTP server details.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ngitlab_rails['smtp_enable'] = true\ngitlab_rails['smtp_address'] = \"smtp.exmail.qq.com\"\ngitlab_rails['smtp_port'] = 465\ngitlab_rails['smtp_user_name'] = \"git@xxxx.com\"\ngitlab_rails['smtp_password'] = \"xxxx\"\ngitlab_rails['smtp_authentication'] = \"login\"\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = true\ngitlab_rails['gitlab_email_from'] = 'git@xxxx.com'\ngitlab_rails['smtp_domain'] = \"exmail.qq.com\"\n```\n\n----------------------------------------\n\nTITLE: Config Provider 'scan' structure - After\nDESCRIPTION: This PHP snippet presents the updated structure of the 'scan' configuration within the ConfigProvider class.  It includes a new 'annotations' layer to align with the overall configuration structure. This change provides consistency across configuration files in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog/changelog-v1.1.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'annotations' => [\n    'scan' => [\n        'paths' => [\n            __DIR__,\n        ],\n        'collectors' => [],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Install Prometheus Client via Composer\nDESCRIPTION: Installs the `promphp/prometheus_client_php` package via Composer, which is required for using Prometheus with the Hyperf Metric component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require promphp/prometheus_client_php\n```\n\n----------------------------------------\n\nTITLE: Defining Default Attribute Values\nDESCRIPTION: This snippet shows how to define default values for model attributes using the `$attributes` property. These values are assigned when a new model instance is created.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected array $attributes = [\n        'delayed' => false,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Hyperf Nano Application\nDESCRIPTION: Starts the Hyperf Nano application using the PHP CLI. The 'start' argument initiates the server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nano.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nphp index.php start\n```\n\n----------------------------------------\n\nTITLE: Defining Swoole Hook Flags in PHP\nDESCRIPTION: This snippet shows how to define the `SWOOLE_HOOK_FLAGS` constant to configure the Swoole Runtime Hook level. This is particularly useful for enabling CURL coroutines in older versions of Swoole (before v4.5.4). Requires the `SWOOLE_HOOK_ALL` and `SWOOLE_HOOK_CURL` constants to be defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/coroutine.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n! defined('SWOOLE_HOOK_FLAGS') && define('SWOOLE_HOOK_FLAGS', SWOOLE_HOOK_ALL | SWOOLE_HOOK_CURL);\n```\n\n----------------------------------------\n\nTITLE: Use Variables in RPN Calculation in Hyperf\nDESCRIPTION: This snippet shows how to use variables in an RPN expression. The variables are represented by bracketed indices (e.g., `[0]`, `[1]`). The `calculate` method takes an array of values that correspond to these indices. The method substitutes the values into the expression before performing the calculation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/rpn/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->calculate('[0] 1 2 + 4 * + [1] -', [5, 10]); // '7'\n```\n\n----------------------------------------\n\nTITLE: Hyperf Nano Exception Handling Example\nDESCRIPTION: Shows how to add a custom exception handler to a Hyperf Nano application. The handler intercepts exceptions and returns a custom response with a specific status code and body.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nano.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\HttpMessage\\Stream\\SwooleStream;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->get('/', function () {\n    throw new \\Exception();\n});\n\n$app->addExceptionHandler(function ($throwable, $response) {\n    return $response->withStatus('418')\n        ->withBody(new SwooleStream('I\\'m a teapot'));\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Install Memory Flysystem Adapter - Shell\nDESCRIPTION: Installs the `league/flysystem-memory` component via Composer. This is required when using the Memory adapter for the filesystem.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.2.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"league/flysystem-memory:^2.0\"\n```\n\n----------------------------------------\n\nTITLE: Swoole Short Name Disable Command\nDESCRIPTION: This snippet shows how to disable Swoole short names via the command line when starting the Hyperf server. This is an alternative to modifying the php.ini file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/questions.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nphp -d swoole.use_shortname=Off bin/hyperf.php start\n```\n\n----------------------------------------\n\nTITLE: Inject SessionInterface\nDESCRIPTION: Demonstrates how to inject the `Hyperf\\Contract\\SessionInterface` into a controller using the `Hyperf\\Di\\Annotation\\Inject` annotation. This allows you to access and manage session data within your controller methods.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/session.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Contract\\SessionInterface;\n\nclass IndexController\n{\n    #[Inject]\n    private SessionInterface $session;\n\n    public function index()\n    {\n        // 直接通过 $this->session 来使用\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Model Hook Function in Hyperf\nDESCRIPTION: This code demonstrates how to use hook functions within a Hyperf model to react to model lifecycle events. Specifically, it overrides the `saving` event to set the `created_at` field to a specific value before the model is saved.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/event.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\Database\\Model\\Events\\Saving;\n\n/**\n * @property $id\n * @property $name\n * @property $gender\n * @property $created_at\n * @property $updated_at\n */\nclass User extends Model\n{\n    /**\n     * The table associated with the model.\n     *\n     * @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = ['id', 'name', 'gender', 'created_at', 'updated_at'];\n\n    protected $casts = ['id' => 'integer', 'gender' => 'integer'];\n\n    public function saving(Saving $event)\n    {\n        $this->setCreatedAt('2019-01-01');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Array & JSON Conversion in Hyperf Model (PHP)\nDESCRIPTION: This example shows how to use the `array` cast type to automatically serialize and deserialize a model attribute to and from JSON. When the `options` attribute is accessed, it is automatically converted from a JSON string in the database to a PHP array. When the `options` attribute is set, the PHP array is automatically converted to a JSON string for storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/mutators.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 应进行类型转换的属性\n     *\n     * @var array\n     */\n    protected $casts = [\n        'options' => 'array',\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Command Listener (PHP)\nDESCRIPTION: This PHP code snippet provides a listener that resumes the exit coordinator after a command has executed. This is a workaround for an issue where commands using AMQP or other multiplexing logic prevent the process from exiting. Requires `Hyperf\\Coordinator`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/3.0.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Command\\Event\\AfterExecute;\nuse Hyperf\\Coordinator\\Constants;\nuse Hyperf\\Coordinator\\CoordinatorManager;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\n\n#[Listener]\nclass ResumeExitCoordinatorListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            AfterExecute::class,\n        ];\n    }\n\n    public function process(object $event): void\n    {\n        CoordinatorManager::until(Constants::WORKER_EXIT)->resume();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a CastsValue Class (UserInfo) in PHP\nDESCRIPTION: This code defines a `UserInfo` class that extends `Hyperf\\Database\\Model\\CastsValue`.  It's a simple class designed to hold user information, with properties for name and gender. This class will be used with a custom caster to synchronize changes made to the UserInfo object with the model's attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Caster;\n\nuse Hyperf\\Database\\Model\\CastsValue;\n\n/**\n * @property string $name\n * @property int $gender\n */\nclass UserInfo extends CastsValue\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Generation Options\nDESCRIPTION: This snippet shows how to configure model generation options within the `databases.php` configuration file.  These settings define the default behavior when using the `gen:model` command, such as model path, forced casts, inheritance, and other generation parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Database\\Commands\\ModelOption;\n\nreturn [\n    'default' => [\n        // 忽略其他配置\n        'commands' => [\n            'gen:model' => [\n                'path' => 'app/Model',\n                'force_casts' => true,\n                'inheritance' => 'Model',\n                'uses' => '',\n                'refresh_fillable' => true,\n                'table_mapping' => [],\n                'with_comments' => true,\n                'property_case' => ModelOption::PROPERTY_SNAKE_CASE,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Class Map Configuration PHP\nDESCRIPTION: This code shows how to configure class mapping in Hyperf. The `class_map` configuration allows replacing specific classes with alternative implementations. Here, the `Hyperf\\Coroutine\\Coroutine` class is mapped to a custom implementation located at `BASE_PATH . '/class_map/Hyperf/Coroutine/Coroutine.php'`, enabling the use of custom coroutine logic.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/annotation.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Coroutine\\Coroutine;\n\nreturn [\n    'scan' => [\n        'paths' => [\n            BASE_PATH . '/app',\n        ],\n        'ignore_annotations' => [\n            'mixin',\n        ],\n        'class_map' => [\n            // 需要映射的类名 => 类所在的文件地址\n            Coroutine::class => BASE_PATH . '/class_map/Hyperf/Coroutine/Coroutine.php',\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Publishing Multiple Messages to NSQ\nDESCRIPTION: This code shows how to publish multiple messages to an NSQ topic in a single call using the `Hyperf\\Nsq\\Nsq::publish()` method. The second argument is an array of strings, where each string represents a message to be published.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nsq.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Nsq\\Nsq;\n\n#[Command]\nclass NsqCommand extends HyperfCommand\n{\n    protected $name = 'nsq:pub';\n\n    public function handle()\n    {\n        /** @var Nsq $nsq */\n        $nsq = make(Nsq::class);\n        $topic = 'hyperf';\n        $messages = [\n            'This is message 1 at ' . time(),\n            'This is message 2 at ' . time(),\n            'This is message 3 at ' . time(),\n        ];\n        $nsq->publish($topic, $messages);\n\n        $this->line('success', 'info');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Elasticsearch Client using ClientBuilderFactory (Hyperf)\nDESCRIPTION: This snippet demonstrates how to create an Elasticsearch client using `ClientBuilderFactory` in Hyperf.  The factory automatically utilizes the coroutine version of the Handler in a coroutine environment. It retrieves the `ClientBuilderFactory` from the container, sets the Elasticsearch host, and builds the client. Finally, it calls the `info()` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/elasticsearch.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Elasticsearch\\ClientBuilderFactory;\n\n// 如果在協程環境下建立，則會自動使用協程版的 Handler，非協程環境下無改變\n$builder = $this->container->get(ClientBuilderFactory::class)->create();\n\n$client = $builder->setHosts(['http://127.0.0.1:9200'])->build();\n\n$info = $client->info();\n```\n\n----------------------------------------\n\nTITLE: Implement Socket.IO Client-Side Logic\nDESCRIPTION: This HTML snippet includes the Socket.IO client library and implements the client-side logic for connecting to the Hyperf Socket.IO server. It sets up event listeners for 'connect' and 'event' and emits events such as 'event', 'join-room', and 'say' to interact with the server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/socketio-server/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.bootcdn.net/ajax/libs/socket.io/2.3.0/socket.io.js\"></script>\n<script>\n    var socket = io('ws://127.0.0.1:9502', { transports: [\"websocket\"] });\n    socket.on('connect', data => {\n        socket.emit('event', 'hello, hyperf', console.log);\n        socket.emit('join-room', 'room1', console.log);\n        setInterval(function () {\n            socket.emit('say', '{\"room\":\"room1\", \"message\":\"Hello Hyperf.\"}');\n        }, 1000);\n    });\n    socket.on('event', console.log);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Box on Linux aarch64\nDESCRIPTION: This snippet provides the commands to download, move, and set execute permissions for the Hyperf Box binary on Linux aarch64. It also highlights the need to ensure the binary is accessible in the system's PATH. Note that this version may be older due to build limitations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/eco/box.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/hyperf/box/releases/download/v0.0.3/box_php8.1_aarch64_linux -O box\nsudo mv ./box /usr/local/bin/box\nsudo chmod 755 /usr/local/bin/box\n// 確保 /usr/local/bin/box 在你的 $PATH 環境中，或者將 `box` 放到你想要的任意 $PATH 路徑中\n```\n\n----------------------------------------\n\nTITLE: Using Hyperf Components in Hyperf Nano\nDESCRIPTION: Demonstrates how to use Hyperf components, such as the database component, within a Hyperf Nano application. It configures the database connection and then executes a query within a route handler. Requires the `hyperf/nano` and `hyperf/db` packages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nano.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\DB\\DB;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->config([\n    'db.default' => [\n        'host' => env('DB_HOST', 'localhost'),\n        'port' => env('DB_PORT', 3306),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'username' => env('DB_USERNAME', 'root'),\n        'password' => env('DB_PASSWORD', ''),\n    ]\n]);\n\n$app->get('/', function(){\n    return DB::query('SELECT * FROM `user` WHERE gender = ?;', [1]);\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Log Output Examples (Shell)\nDESCRIPTION: These are example log entries generated by the previous PHP configurations.  The first log entry shows the standard format written to 'hyperf.log', while the subsequent entries demonstrate the JSON format written to 'hyperf-debug.log'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/logger.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n==> runtime/logs/hyperf.log <==\n[2019-11-08 11:11:35] hyperf.INFO: 5dc4dce791690 [] []\n\n==> runtime/logs/hyperf-debug.log <==\n{\"message\":\"5dc4dce791690\",\"context\":[],\"level\":200,\"level_name\":\"INFO\",\"channel\":\"hyperf\",\"datetime\":{\"date\":\"2019-11-08 11:11:35.597153\",\"timezone_type\":3,\"timezone\":\"Asia/Shanghai\"},\"extra\":[]}\n{\"message\":\"xxxx\",\"context\":[],\"level\":100,\"level_name\":\"DEBUG\",\"channel\":\"hyperf\",\"datetime\":{\"date\":\"2019-11-08 11:11:35.597635\",\"timezone_type\":3,\"timezone\":\"Asia/Shanghai\"},\"extra\":[]}\n```\n\n----------------------------------------\n\nTITLE: Coroutine Event Coordination with CoordinatorManager - PHP\nDESCRIPTION: This snippet demonstrates how to use the `Hyperf\\Coordinator\\CoordinatorManager` to wait for specific events, such as `WORKER_START` and `WORKER_EXIT`, within a coroutine. It creates a coroutine that pauses execution until these events are triggered, allowing for resource allocation and cleanup based on worker lifecycle events. Requires `Hyperf\\Coordinator\\CoordinatorManager`, `Hyperf\\Coordinator\\Constants`, and `Hyperf\\Coroutine\\Coroutine`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/support.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Coordinator\\CoordinatorManager;\nuse Hyperf\\Coordinator\\Constants;\nuse Hyperf\\Coroutine\\Coroutine;\n\nCoroutine::create(function() {\n    // 所有OnWorkerStart事件回調完成後喚醒\n    CoordinatorManager::until(Constants::WORKER_START)->yield();\n    echo 'worker started';\n    // 分配資源\n    // 所有OnWorkerExit事件回調完成後喚醒\n    CoordinatorManager::until(Constants::WORKER_EXIT)->yield();\n    echo 'worker exited';\n    // 回收資源\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Socket.io Client in HTML\nDESCRIPTION: This HTML snippet demonstrates a basic Socket.io client implementation. It includes the Socket.io client library from a CDN and sets up event listeners for 'connect' and 'event' events. On connection, it emits an 'event' and 'join-room' event to the server and sets up an interval to emit a 'say' event every second. It also logs received 'event' data to the console.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/socketio-server.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.bootcdn.net/ajax/libs/socket.io/2.3.0/socket.io.js\"></script>\n<script>\n    var socket = io('ws://127.0.0.1:9502', { transports: [\"websocket\"] });\n    socket.on('connect', data => {\n        socket.emit('event', 'hello, hyperf', console.log);\n        socket.emit('join-room', 'room1', console.log);\n        setInterval(function () {\n            socket.emit('say', '{\"room\":\"room1\", \"message\":\"Hello Hyperf.\"}');\n        }, 1000);\n    });\n    socket.on('event', console.log);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rename Index in Hyperf Schema\nDESCRIPTION: This code demonstrates how to rename an index in a Hyperf schema. It renames the index 'from' to 'to'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$table->renameIndex('from', 'to');\n```\n\n----------------------------------------\n\nTITLE: Installing hyperf/database for other frameworks\nDESCRIPTION: This command installs the `hyperf/database` package, suitable for use in PHP frameworks other than Hyperf.  It provides the database abstraction layer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/quick-start.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/database\n```\n\n----------------------------------------\n\nTITLE: WebSocket Callback Interface in Hyperf\nDESCRIPTION: This code snippet defines the `OnReceiveInterface` for handling `onReceive` callbacks in Hyperf WebSocket servers. It highlights the difference between asynchronous and coroutine styles by specifying that the `$server` parameter can be either `Swoole\\Coroutine\\Server\\Connection` or `Swoole\\Server` depending on the server type.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/coroutine-server.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Hyperf\\Contract;\n\nuse Swoole\\Coroutine\\Server\\Connection;\nuse Swoole\\Server as SwooleServer;\n\ninterface OnReceiveInterface\n{\n    /**\n     * @param Connection|SwooleServer $server\n     */\n    public function onReceive($server, int $fd, int $reactorId, string $data): void;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Model without Type Casting - PHP\nDESCRIPTION: This code snippet demonstrates a basic query to retrieve users and their last post time.  The `last_posted_at` attribute is returned as a string.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/mutators.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Post;\nuse App\\User;\n\n$users = User::select([\n    'users.*',\n    'last_posted_at' => Post::selectRaw('MAX(created_at)')\n            ->whereColumn('user_id', 'users.id')\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Switch Statements (Blade)\nDESCRIPTION: This Blade template uses the `@switch`, `@case`, `@break`, `@default`, and `@endswitch` directives to create a switch statement, similar to PHP's switch statement.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_16\n\nLANGUAGE: blade\nCODE:\n```\n@switch($i)\n    @case(1)\n        First case...\n        @break\n\n    @case(2)\n        Second case...\n        @break\n\n    @default\n        Default case...\n@endswitch\n```\n\n----------------------------------------\n\nTITLE: Publishing Configuration Files Bash\nDESCRIPTION: This code snippet demonstrates how to use the `vendor:publish` command to generate default configuration files defined in a ConfigProvider.  The `包名稱` should be replaced with the actual package name (e.g., hyperf/amqp). This command copies the source configuration file to the specified destination.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/component-guide/configprovider.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish 包名稱\n```\n\n----------------------------------------\n\nTITLE: CacheAhead Annotation Usage\nDESCRIPTION: This code shows the usage of the `CacheAhead` annotation. It proactively refreshes the cache before it expires. Cache key `c:user:1` will be created, and will attempt to refresh it 600 seconds before expiring, retrying every 10 seconds.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/cache.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\CacheAhead;\n\nclass UserService\n{\n    #[CacheAhead(prefix: \"user\", ttl: 7200, aheadSeconds: 600, lockSeconds: 10)]\n    public function user(int $id): array\n    {\n        $user = User::query()->find($id);\n\n        return [\n            'user' => $user->toArray(),\n            'uuid' => $this->unique(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Return Resource in Controller\nDESCRIPTION: Demonstrates how to return a resource from a controller action. It creates a new instance of the resource class, passing a model instance to the constructor, and calls the `toResponse` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Resource\\User as UserResource;\nuse App\\Model\\User;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserResource(User::first()))->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Anonymous Component with @props Directive (Blade)\nDESCRIPTION: This code demonstrates the use of the `@props` directive in an anonymous component's Blade template.  It specifies which attributes should be passed as data variables to the component. Default values can be provided.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_25\n\nLANGUAGE: blade\nCODE:\n```\n    <!-- /storage/view/components/alert.blade.php -->\n\n    @props(['type' => 'info', 'message'])\n\n    <div {{ $attributes->merge(['class' => 'alert alert-'.$type]) }}>\n        {{ $message }}\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Getting Config via Config Object\nDESCRIPTION: Illustrates how to retrieve configuration values using the `Hyperf\\Contract\\ConfigInterface` object.  This uses the `get()` method with a key and default value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @var \\Hyperf\\Contract\\ConfigInterface\n */\n// 透過 get(string $key, $default): mixed 方法獲取 $key 所對應的配置，$key 值可以透過 . 連線符定位到下級陣列，$default 則是當對應的值不存在時返回的預設值\n$config->get($key，$default);\n```\n\n----------------------------------------\n\nTITLE: JSON Pagination Response Example\nDESCRIPTION: This JSON example shows the structure of a paginated response in Hyperf, including the 'data', 'links', and 'meta' keys. It demonstrates how pagination information is conveyed in the API response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Eladio Schroeder Sr.\",\n            \"email\": \"therese28@example.com\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Liliana Mayert\",\n            \"email\": \"evandervort@example.com\"\n        }\n    ],\n    \"links\":{\n        \"first\": \"/pagination?page=1\",\n        \"last\": \"/pagination?page=1\",\n        \"prev\": null,\n        \"next\": null\n    },\n    \"meta\":{\n        \"current_page\": 1,\n        \"from\": 1,\n        \"last_page\": 1,\n        \"path\": \"/pagination\",\n        \"per_page\": 15,\n        \"to\": 10,\n        \"total\": 10\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Conversion Parameters in Hyperf (PHP)\nDESCRIPTION: This code shows how to pass parameters to a custom type cast class when defining it in the model's `$casts` property. The parameters are specified after the class name, separated by a colon. These parameters are passed to the constructor of the custom cast class. The `secret` attribute will be hashed using sha256.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/mutators.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App;\n\nuse App\\Casts\\Json;\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 应进行类型转换的属性\n     *\n     * @var array\n     */\n    protected $casts = [\n        'secret' => Hash::class.':sha256',\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Request and Response Header Handling (Before v3.1)\nDESCRIPTION: Illustrates how `withHeader` and `withHeaders` methods worked in versions prior to v3.1, showing the merging behavior of headers.  Note that `withHeader` replaced, while `withAddedHeader` added to the array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/3.1.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// v3.1 之前\n$request->withHeader('foo', 1)->withHeader('bar', 2); // ['foo' => [1], 'bar' => [2]]\n$request->withHeader('foo', 1)->withHeader('foo', 2); // ['foo' => [2]]\n$request->withAddedHeader('foo', 1)->withAddedHeader('foo', 2); // ['foo' => [1, 2]]\n\n$request->withHeaders(['foo' => 1])->withHeaders(['bar' => 2]); // ['foo' => [1], 'bar' => [2]]\n```\n\n----------------------------------------\n\nTITLE: Installing Git with IUS Repository\nDESCRIPTION: Installs the latest version of Git using the IUS repository and then installs Gitlab Runner. The script adds the IUS repository, installs `git2u`, verifies the Git version, and then installs `gitlab-runner`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ curl https://setup.ius.io | sh\n$ yum -y install git2u\n$ git version\n$ yum install gitlab-runner\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Socket.IO Server\nDESCRIPTION: This command installs the hyperf/socketio-server package using Composer, which is required to integrate Socket.IO functionality into a Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/socketio-server/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/socketio-server\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata during Resource Construction (PHP)\nDESCRIPTION: This PHP snippet demonstrates adding top-level metadata to a resource collection directly in the controller using the `additional` method. This allows for dynamic metadata to be added when creating the resource.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\UserCollection;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserCollection(User::all()->load('roles')))\n            ->additional(['meta' => [\n                'key' => 'value',\n            ]])->toResponse();    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a StdoutLoggerFactory\nDESCRIPTION: This factory class returns a Logger instance for stdout logging.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/logger.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App;\n\nuse Psr\\Container\\ContainerInterface;\n\nclass StdoutLoggerFactory\n{\n    public function __invoke(ContainerInterface $container)\n    {\n        return Log::get('sys');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Push Mode Configuration\nDESCRIPTION: This PHP code snippet shows how to configure Prometheus to use the push mode. This mode is suitable for offline tasks where the application pushes metrics to the Prometheus Pushgateway.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n'mode' => Constants::PUSH_MODE\n```\n\n----------------------------------------\n\nTITLE: Adding Gitlab Runner to Docker Group\nDESCRIPTION: This snippet adds the `gitlab-runner` user to the `docker` group, allowing it to execute Docker commands without `sudo`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nsudo usermod -aG docker gitlab-runner\n```\n\n----------------------------------------\n\nTITLE: Making Kernel Effective\nDESCRIPTION: Updates the GRUB2 bootloader configuration to make the newly installed kernel the default.  This ensures the system boots with the specified kernel version after a reboot.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\nsudo awk -F\\' '$1==\"menuentry \" {print i++ \" : \" $2}' /etc/grub2.cfg\ngrub2-set-default 0\ngrub2-mkconfig -o /boot/grub2/grub.cfg\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Overlay Network (Alternative Subnet)\nDESCRIPTION: Creates a custom overlay network for Docker Swarm with an alternative subnet of 10.1.0.1/16. This can be used to avoid subnet conflicts with existing networks. Includes encryption and attachable configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ndocker network create \\\n--driver overlay \\\n--subnet 10.1.0.1/16 \\\n--opt encrypted \\\n--attachable \\\ndefault-network\n```\n\n----------------------------------------\n\nTITLE: Modify Logger Processor for Monolog 3.x Compatibility (PHP)\nDESCRIPTION: This code snippet demonstrates how to modify a logger processor to be compatible with Monolog 3.x, which uses PHP 8.1 features. The `array $record` type hint is changed to `array|LogRecord $record` to support the new Monolog LogRecord class. It also shows how to append a request ID and coroutine ID to the log record.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/3.0.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Kernel\\Log;\n\nuse Hyperf\\Context\\Context;\nuse Hyperf\\Coroutine\\Coroutine;\nuse Monolog\\LogRecord;\nuse Monolog\\Processor\\ProcessorInterface;\n\nclass AppendRequestIdProcessor implements ProcessorInterface\n{\n    public const REQUEST_ID = 'log.request.id';\n\n    public function __invoke(array|LogRecord $record)\n    {\n        $record['extra']['request_id'] = Context::getOrSet(self::REQUEST_ID, uniqid());\n        $record['extra']['coroutine_id'] = Coroutine::id();\n        return $record;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Reload Failed/Timeout Messages\nDESCRIPTION: Reloads all failed/timeout messages to the waiting queue using the queue:reload command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php queue:reload {queue_name} -Q {channel_name}\n```\n\n----------------------------------------\n\nTITLE: Join with where clause\nDESCRIPTION: This code demonstrates how to add a `where` clause in the `join` using closure. The example add `contacts.user_id > 5` where clause.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->join('contacts', function ($join) {\n        $join->on('users.id', '=', 'contacts.user_id')\n                ->where('contacts.user_id', '>', 5);\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Resource Class\nDESCRIPTION: Defines a resource class that extends 'Hyperf\\Resource\\Json\\JsonResource'. The 'toArray' method transforms the resource into an array, defining the structure of the JSON response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding NormalizerInterface in Hyperf 2.0\nDESCRIPTION: This code snippet demonstrates how to bind the `NormalizerInterface` when using JSONRPC and `symfony/serializer` in Hyperf 2.0. Since Hyperf 2.0 no longer automatically maps the implementation class, you need to manually add the mapping.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.0.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Utils\\Serializer\\SerializerFactory;\nuse Hyperf\\Utils\\Serializer\\Serializer;\n\nreturn [\n    Hyperf\\Contract\\NormalizerInterface::class => new SerializerFactory(Serializer::class),\n];\n\n```\n\n----------------------------------------\n\nTITLE: Defining Gitlab CI Variables\nDESCRIPTION: This snippet defines variables used in the .gitlab-ci.yml file, setting the project name and registry URL.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_22\n\nLANGUAGE: YML\nCODE:\n```\nvariables:\n  PROJECT_NAME: demo\n  REGISTRY_URL: registry.cn-shanghai.aliyuncs.com/test_namespace\n```\n\n----------------------------------------\n\nTITLE: New config/autoload/dependencies.php structure in PHP\nDESCRIPTION: Illustrates the updated file structure of config/autoload/dependencies.php in Hyperf 1.1. The 'dependencies' key has been removed, and the dependency mappings are returned directly in the array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/1.1.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// config/autoload/dependencies.php 檔案\n\nreturn [\n    FooInterface::class => Foo::class\n];\n```\n\n----------------------------------------\n\nTITLE: Integrating Swagger Annotations with Validation Rules\nDESCRIPTION: This snippet shows how to integrate Swagger annotations with validation rules. The `rules` parameter within `SA\\Property` and `SA\\QueryParameter` annotations defines validation rules that are enforced using `SwaggerRequest`. This allows for validation of input parameters based on Swagger definitions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/swagger.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Schema\\SavedSchema;\nuse Hyperf\\Swagger\\Request\\SwaggerRequest;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Swagger\\Annotation as SA;\n\n#[SA\\HyperfServer(name: 'http')]\nclass CardController extends Controller\n{\n    #[SA\\Post('/user/save', summary: '儲存使用者資訊', tags: ['使用者管理'])]\n    #[SA\\QueryParameter(name: 'token', description: '鑑權 token', type: 'string', rules: 'required|string')]\n    #[SA\\RequestBody(content: new SA\\JsonContent(properties: [\n        new SA\\Property(property: 'nickname', description: '暱稱', type: 'integer', rules: 'required|string'),\n        new SA\\Property(property: 'gender', description: '性別', type: 'integer', rules: 'required|integer|in:0,1,2'),\n    ]))]\n    #[SA\\Response(response: '200', content: new SA\\JsonContent(ref: '#/components/schemas/SavedSchema'))]\n    public function info(SwaggerRequest $request)\n    {\n        $result = $this->service->save($request->all());\n\n        return $this->response->success($result);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nacos Configuration\nDESCRIPTION: This configuration array defines the Nacos client settings, including host, port, username, password, and Guzzle HTTP client configuration. It is used to connect to the Nacos server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nacos.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    // 無法使用 IP 端口形式的開發者，直接配置 url 即可\n    // 'url' => '',\n    'host' => '127.0.0.1',\n    'port' => 8848,\n    'username' => null,\n    'password' => null,\n    'guzzle' => [\n        'config' => null,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Install DTM Client via Composer\nDESCRIPTION: This command installs the dtm-client package using Composer, the PHP dependency manager.  It fetches the package and its dependencies, making it available for use in a PHP project.  Ensure Composer is installed and configured properly before running this command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/distributed-transaction.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require dtm/dtm-client\n```\n\n----------------------------------------\n\nTITLE: Installing fswatch from Source\nDESCRIPTION: This set of commands downloads, extracts, configures, compiles, and installs fswatch from source. This is a more involved installation method that can be used when pre-built packages are not available.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/watcher.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/emcrisostomo/fswatch/releases/download/1.14.0/fswatch-1.14.0.tar.gz \\\n&& tar -xf fswatch-1.14.0.tar.gz \\\n&& cd fswatch-1.14.0/ \\\n&& ./configure \\\n&& make \\\n&& make install\n```\n\n----------------------------------------\n\nTITLE: Adding Arr::mapWithKeys() function\nDESCRIPTION: This commit adds the `Arr::mapWithKeys()` function to the Hyperf framework.  This function likely extends the array manipulation capabilities by allowing to map array values to keys, providing a convenient way to transform array structures.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/3.0.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nArr::mapWithKeys()\n```\n\n----------------------------------------\n\nTITLE: Custom Low-Frequency Component (PHP)\nDESCRIPTION: This code defines a custom low-frequency component by extending the `Hyperf\\Pool\\Frequency` class. It allows customizing the time interval, low-frequency threshold, and low-frequency interval to control how often connections are released from the pool.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/pool.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Pool;\n\nclass Frequency extends \\Hyperf\\Pool\\Frequency\n{\n    /**\n     * 被計算頻率的時間間隔\n     */\n    protected int $time = 10;\n\n    /**\n     * 觸發低頻的頻率\n     */\n    protected int $lowFrequency = 5;\n\n    /**\n     * 連續觸發低頻的最小時間間隔\n     */\n    protected int $lowFrequencyInterval = 60;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Create Custom Overlay Network with Smaller Subnet\nDESCRIPTION: This creates a custom Docker overlay network with a /16 subnet. This can be helpful if there are subnet conflicts. It specifies a subnet, enables encryption, and allows attaching containers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\ndocker network create \\\n--driver overlay \\\n--subnet 10.1.0.1/16 \\\n--opt encrypted \\\n--attachable \\\ndefault-network\n```\n\n----------------------------------------\n\nTITLE: Custom Annotation Class Definition PHP\nDESCRIPTION: This code defines a custom annotation class named `Foo` in the `App\\Annotation` namespace.  It extends `AbstractAnnotation` and uses the `Attribute` attribute to define the target types (class and method).  The constructor defines parameters that can be passed when using the annotation, with `$bar` being an array and `$baz` being an optional integer with a default value of 0.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/annotation.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Annotation;\n\nuse Attribute;\nuse Hyperf\\Di\\Annotation\\AbstractAnnotation;\n\n#[Attribute(Attribute::TARGET_CLASS | Attribute::TARGET_METHOD)]\nclass Foo extends AbstractAnnotation\n{\n    public function __construct(public array $bar, public int $baz = 0)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf NSQ via Composer\nDESCRIPTION: This command installs the hyperf/nsq package using Composer, adding NSQ support to your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nsq.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/nsq\n```\n\n----------------------------------------\n\nTITLE: Register Service Listener - Hyperf\nDESCRIPTION: Registers the `RegisterServiceListener` to automatically register the service with the service registry.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/rpc-multiplex.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\RpcMultiplex\\Listener\\RegisterServiceListener::class,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Regenerate Database Models (Shell)\nDESCRIPTION: This shell command uses the hyperf/code-generator package to regenerate database models, upgrading them to the new version that supports member variable type hinting. The command takes the directory containing the models as an argument.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/3.0.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp vendor/bin/regenerate-models.php $PWD/app/Model\n```\n\n----------------------------------------\n\nTITLE: Install ReactiveX Component via Composer\nDESCRIPTION: This command installs the hyperf/reactive-x component using Composer, which is a dependency manager for PHP. This component provides ReactiveX integration for the Hyperf framework.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/reactive-x.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/reactive-x\n```\n\n----------------------------------------\n\nTITLE: Get Gitlab Initial Root Password Shell\nDESCRIPTION: This command retrieves the initial root password for the Gitlab instance from within the Docker container. This password is required for the initial login to the Gitlab web interface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ndocker exec gitlab cat /etc/gitlab/initial_root_password\n```\n\n----------------------------------------\n\nTITLE: Running Hyperf Tests via Composer\nDESCRIPTION: This snippet demonstrates how to execute unit tests using the `composer test` command, which leverages the configured script in `composer.json`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/testing.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncomposer test\n```\n\n----------------------------------------\n\nTITLE: Installing fswatch on macOS\nDESCRIPTION: This command installs the `fswatch` utility on macOS using the Homebrew package manager. `fswatch` can be used as a more efficient file watcher driver.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/watcher.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install fswatch\n```\n\n----------------------------------------\n\nTITLE: Requesting NATS Message (Sync)\nDESCRIPTION: This PHP code demonstrates sending a request to a NATS subject using the `requestSync` method of the `DriverInterface`. It retrieves the response message synchronously. The payload is an associative array. It gets the message body from the returned `Message` object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nats.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Nats\\Driver\\DriverInterface;\nuse Hyperf\\Nats\\Message;\n\n#[AutoController(prefix: \"nats\")]\nclass NatsController extends AbstractController\n{\n    #[Inject]\n    protected DriverInterface $nats;\n\n    public function sync()\n    {\n        /** @var Message $message */\n        $message = $this->nats->requestSync('hyperf.reply', [\n            'id' => 'limx',\n        ]);\n\n        return $this->response->success($message->getBody());\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Type Conversion Parameters in Hyperf Model\nDESCRIPTION: This snippet shows how to use parameters in a custom type casting class. The `secret` attribute uses the `Hash` class with the `sha256` algorithm specified as a parameter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/mutators.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App;\n\nuse App\\Casts\\Json;\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 應進行類型轉換的屬性\n     *\n     * @var array\n     */\n    protected $casts = [\n        'secret' => Hash::class.':sha256',\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a New Default Network\nDESCRIPTION: Creates a new overlay network with a specified subnet for Docker Swarm. This provides a dedicated network for the services within the Swarm cluster.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_47\n\nLANGUAGE: shell\nCODE:\n```\ndocker network create \\\n--driver overlay \\\n--subnet 10.0.0.1/8 \\\n--opt encrypted \\\n--attachable \\\ndefault-network\n```\n\n----------------------------------------\n\nTITLE: Crontab Enable Parameter Update in Hyperf\nDESCRIPTION: The `@Crontab` annotation in Hyperf now supports an array for the `enable` parameter, allowing dynamic control over task execution. This enhancement enables developers to conditionally execute scheduled tasks based on runtime configurations or environment variables.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.2.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Config Provider Scan Paths Before Change\nDESCRIPTION: This snippet shows the structure of the config provider's scan paths configuration before a specific change in Hyperf.  It defines the paths to be scanned for configuration files and the collectors to be used during the scan process. The `__DIR__` constant represents the current directory where the configuration file is located.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/1.1.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n'scan' => [\n    'paths' => [\n        __DIR__,\n    ],\n    'collectors' => [],\n],\n```\n\n----------------------------------------\n\nTITLE: Setting Box Kernel Configuration\nDESCRIPTION: This snippet shows how to configure the Box Kernel to either Swow (default) or Swoole. It notes that Swoole Kernel only supports PHP 8.1 and doesn't support building binaries or Windows.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/eco/box.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n// 設置為 Swow Kernel [默認]\nbox config set kernel swow\n\n// 設置為 Swoole Kernel (不支持 Windows)\nbox config set kernel swoole\n```\n\n----------------------------------------\n\nTITLE: Define Placeholders in Translation Strings - PHP\nDESCRIPTION: Demonstrates how to define placeholders in language strings using the `:` prefix.  Placeholders allow for dynamic content in translations. For example, a welcome message can include a user's name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/translation.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// storage/languages/en/messages.php\n\nreturn [\n    'welcome' => 'Welcome :name',\n];\n```\n\n----------------------------------------\n\nTITLE: Cross Join Clause with crossJoin() in Hyperf\nDESCRIPTION: Shows how to perform a cross join (Cartesian product) between two tables using the `crossJoin()` method. This join returns all possible combinations of rows from both tables.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('sizes')\n    ->crossJoin('colours')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Blade HasSection Directive\nDESCRIPTION: This Blade template demonstrates how to use the `@hasSection` directive to check if a section contains content before rendering it.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_16\n\nLANGUAGE: blade\nCODE:\n```\n@hasSection('navigation')\n    <div class=\"pull-right\">\n        @yield('navigation')\n    </div>\n\n    <div class=\"clearfix\"></div>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Customizing Consumer Nums\nDESCRIPTION: This PHP code demonstrates how to customize the number of consumer processes based on the environment using the `getNums` method. It checks if the application is in debug mode and returns a different number of processes accordingly.  It extends `ConsumerMessage` and depends on `Hyperf\\Amqp\\Annotation\\Consumer` and `Hyperf\\Amqp\\Message\\ConsumerMessage`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/amqp.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n#[Consumer(\n    exchange: 'hyperf',\n    routingKey: 'hyperf',\n    queue: 'hyperf',\n    name: 'hyperf',\n    nums: 1\n)]\nfinal class DemoConsumer extends ConsumerMessage\n{\n    public function getNums(): int\n    {\n        if (is_debug()) {\n            return 10;\n        }\n        return parent::getNums();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Check If Has More Pages (Alternative)\nDESCRIPTION: This code snippet provides an alternative way to check if there are more pages available. The `hasMorePages()` method is used again, emphasizing that it's a standard way to check for the existence of subsequent pages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/paginator.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$hasMorePages = $paginator->hasMorePages();\n```\n\n----------------------------------------\n\nTITLE: Testing Service Availability\nDESCRIPTION: Tests the availability of the service by sending an HTTP request to each machine in the cluster.  This verifies that the service is running and accessible.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_59\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://127.0.0.1:9501/\n```\n\n----------------------------------------\n\nTITLE: Check pcntl Extension - Shell\nDESCRIPTION: Verifies if the `pcntl` extension is installed and enabled in PHP.  The new version's annotation scanning uses the `pcntl` extension.  Ensure the `pcntl` extension is installed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.2.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp --ri pcntl\n\npcntl\n\npcntl support => enabled\n```\n\n----------------------------------------\n\nTITLE: Starting Supervisor with Configuration\nDESCRIPTION: This snippet shows the command to start the Supervisor daemon using a specific configuration file. The -c flag specifies the path to the configuration file, which contains the definitions of the applications to be managed. The supervisord command requires root privileges.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/supervisor.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupervisord -c /etc/supervisord.d/supervisord.conf\n```\n\n----------------------------------------\n\nTITLE: Get Timestamp from Carbon Instance - Hyperf - PHP\nDESCRIPTION: This code retrieves the `deleted_at` attribute, which is automatically converted to a Carbon instance (because it's likely defined in the `$dates` array), and then gets the UNIX timestamp from it.  It demonstrates how to access Carbon-specific methods on date attributes. Requires an existing `User` model instance fetched from the database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$user = App\\User::find(1);\n\nreturn $user->deleted_at->getTimestamp();\n```\n\n----------------------------------------\n\nTITLE: Custom Annotation Class Definition PHP\nDESCRIPTION: This snippet demonstrates how to create a custom annotation class in Hyperf. The `Foo` annotation class extends `AbstractAnnotation` and is marked with the `Attribute` attribute, specifying that it can be used on classes and methods. The constructor defines the parameters that the annotation can accept. The snippet shows a custom annotation with an array and an integer parameter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/annotation.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Annotation;\n\nuse Attribute;\nuse Hyperf\\Di\\Annotation\\AbstractAnnotation;\n\n#[Attribute(Attribute::TARGET_CLASS | Attribute::TARGET_METHOD)]\nclass Foo extends AbstractAnnotation\n{\n    public function __construct(public array $bar, public int $baz = 0)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cacheable Interface in Model\nDESCRIPTION: This code snippet demonstrates how to implement the `CacheableInterface` in a Hyperf Model using the `Cacheable` trait, allowing the model to leverage the caching functionality. The code defines a `User` model with caching enabled.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model-cache.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\DbConnection\\Model\\Model;\nuse Hyperf\\ModelCache\\Cacheable;\nuse Hyperf\\ModelCache\\CacheableInterface;\n\n/**\n * @property $id\n * @property $name\n * @property $gender\n * @property $created_at\n * @property $updated_at\n */\nclass User extends Model implements CacheableInterface\n{\n    use Cacheable;\n\n    /**\n     * The table associated with the model.\n     *  \n     * @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = ['id', 'name', 'gender', 'created_at', 'updated_at'];\n\n    protected $casts = ['id' => 'integer', 'gender' => 'integer'];\n}\n```\n\n----------------------------------------\n\nTITLE: Using RedisFactory for Dynamic Pool Selection (Hyperf)\nDESCRIPTION: Illustrates the use of Hyperf\\Redis\\RedisFactory to dynamically select a Redis connection pool at runtime, providing flexibility without the need for creating multiple proxy classes. It retrieves the factory from the container and then calls the get method with the desired pool name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/redis.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Redis\\RedisFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n\n// 透過 DI 容器獲取或直接注入 RedisFactory 類\n$redis = $container->get(RedisFactory::class)->get('foo');\n$result = $redis->keys('*');\n\n```\n\n----------------------------------------\n\nTITLE: Install Logtail Container with Docker\nDESCRIPTION: This command pulls and runs the Logtail container from Alibaba Cloud Container Registry. It mounts volumes for log access, sets environment variables for configuration, Alibaba Cloud User ID and User Defined ID, allowing Logtail to collect logs from the host system and Docker environment.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/aliyun-logger.md#_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker run -d -v /:/logtail_host:ro -v /var/run/docker.sock:/var/run/docker.sock \\\n--env ALIYUN_LOGTAIL_CONFIG=/etc/ilogtail/conf/${your_region_name}/ilogtail_config.json \\\n--env ALIYUN_LOGTAIL_USER_ID=${your_aliyun_user_id} \\\n--env ALIYUN_LOGTAIL_USER_DEFINED_ID=${your_machine_group_user_defined_id} \\\nregistry.cn-hangzhou.aliyuncs.com/log-service/logtail\n```\n\n----------------------------------------\n\nTITLE: Making Kernel Effective\nDESCRIPTION: These commands configure the system to boot into the newly installed kernel. The `awk` command finds the available kernel entries in `/etc/grub2.cfg`, `grub2-set-default` sets the default boot entry, and `grub2-mkconfig` regenerates the GRUB configuration file. Incorrectly setting the default boot entry can make the system unbootable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\nsudo awk -F\\' '$1==\"menuentry \" {print i++ \" : \" $2}' /etc/grub2.cfg\ngrub2-set-default 0\ngrub2-mkconfig -o /boot/grub2/grub.cfg\n```\n\n----------------------------------------\n\nTITLE: Defining Method-Level Middleware with Annotations in Hyperf\nDESCRIPTION: This snippet demonstrates how to define middleware for a specific method within a controller using the `#[Middleware]` annotation. The method-level middleware takes precedence over class-level middleware.  The class also uses `#[AutoController]` and class-level middleware `#[Middleware(FooMiddleware::class)]` for demonstration of middleware precedence.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/middleware/middleware.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse App\\Middleware\\BarMiddleware;\nuse App\\Middleware\\FooMiddleware;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\HttpServer\\Annotation\\Middleware;\nuse Hyperf\\HttpServer\\Annotation\\Middlewares;\n\n#[AutoController]\n#[Middleware(FooMiddleware::class)]\nclass IndexController\n{\n    \n    #[Middleware(BarMiddleware::class)]\n    public function index()\n    {\n        return 'Hello Hyperf.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Config Provider Annotations Configuration PHP\nDESCRIPTION: This code snippet shows the new structure of the annotations configuration within a Config Provider in Hyperf. The `scan` configuration is now nested under the `annotations` key. This change aligns the configuration structure with the file structure and provides a more organized way to manage annotation scanning settings. It also allows writing dependencies configuration directly in `config/config.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog-v1.1.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'annotations' => [\n    'scan' => [\n        'paths' => [\n            __DIR__,\n        ],\n        'collectors' => [],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Fixing aliyun oss wrong charset (Alpine 3.12)\nDESCRIPTION: This snippet demonstrates how to fix the iconv error when using the `aliyuncs/oss-sdk-php` component for uploading files to Aliyun OSS in the `hyperf/hyperf:8.0-alpine-v3.12-swoole` Docker image. It installs the gnu-libiconv package and sets the LD_PRELOAD environment variable to use it.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/questions.md#_snippet_9\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apk --no-cache --allow-untrusted --repository http://dl-cdn.alpinelinux.org/alpine/edge/community/ add gnu-libiconv=1.15-r2\nENV LD_PRELOAD /usr/lib/preloadable_libiconv.so\n```\n\n----------------------------------------\n\nTITLE: Logger Configuration\nDESCRIPTION: This code snippet shows the default logger configuration file `config/autoload/logger.php`, which defines the handler, class, stream, level, and formatter settings for the default log channel. It configures Monolog's StreamHandler to write logs to a file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/logger.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'handler' => [\n            'class' => \\Monolog\\Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => BASE_PATH . '/runtime/logs/hyperf.log',\n                'level' => \\Monolog\\Level::Debug,\n            ],\n        ],\n        'formatter' => [\n            'class' => \\Monolog\\Formatter\\LineFormatter::class,\n            'constructor' => [\n                'format' => null,\n                'dateFormat' => null,\n                'allowInlineLineBreaks' => true,\n            ]\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Logger Usage in Service\nDESCRIPTION: This code demonstrates how to use the logger in a service class. It injects a `LoggerFactory` instance and uses it to retrieve a logger instance with a specified name and channel. Then it calls the info method to write a log message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/logger.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse Psr\\Log\\LoggerInterface;\nuse Hyperf\\Logger\\LoggerFactory;\n\nclass DemoService\n{\n\n    protected LoggerInterface $logger;\n\n    public function __construct(LoggerFactory $loggerFactory)\n    {\n        // 第一個引數對應日誌的 name, 第二個引數對應 config/autoload/logger.php 內的 key\n        $this->logger = $loggerFactory->get('log', 'default');\n    }\n\n    public function method()\n    {\n        // Do something.\n        $this->logger->info(\"Your log message.\");\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Convert Doctrine Annotations to PHP8 Attributes (Shell)\nDESCRIPTION: This command converts all Doctrine Annotations to PHP8 Attributes, which is a required step when upgrading to Hyperf 3.0. It uses the hyperf/code-generator package. This step must be executed in Hyperf 2.2.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/3.0.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp bin/hyperf.php code:generate -D app\n```\n\n----------------------------------------\n\nTITLE: Install Prometheus Dependency (Bash)\nDESCRIPTION: This command installs the `promphp/prometheus_client_php` dependency, which is required when using the `prometheus` engine in the `hyperf/metric` component. Starting from v3.1, this dependency is no longer installed by default.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/3.1.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require promphp/prometheus_client_php\n```\n\n----------------------------------------\n\nTITLE: Building Phar Archive with Custom Version\nDESCRIPTION: This command builds a Phar archive with a specified version. The `--phar-version` option allows you to set the version of the `phar` file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/phar.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php phar:build --phar-version=1.0.1\n```\n\n----------------------------------------\n\nTITLE: Query Builder Pagination in PHP\nDESCRIPTION: This snippet demonstrates how to use the paginate method with the Query Builder to retrieve a paginated list of users from the 'users' table, displaying 10 items per page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/paginator.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// 展示應用中的所有用户，每頁顯示 10 條數據\nreturn Db::table('users')->paginate(10);\n```\n\n----------------------------------------\n\nTITLE: Modifying dateFormat in config/autoload/logger.php\nDESCRIPTION: This snippet illustrates how to modify the `dateFormat` configuration item in the `config/autoload/logger.php` configuration file to maintain log format consistency after upgrading to Hyperf 2.0 due to changes in the default log format of the higher Monolog version.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.0.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => [\n        'handler' => [\n            'class' => Monolog\\Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => BASE_PATH . '/runtime/logs/hyperf.log',\n                'level' => Monolog\\Logger::DEBUG,\n            ],\n        ],\n        'formatter' => [\n            'class' => Monolog\\Formatter\\LineFormatter::class,\n            'constructor' => [\n                'format' => null,\n                'dateFormat' => 'Y-m-d H:i:s',\n                'allowInlineLineBreaks' => true,\n            ],\n        ],\n        'processors' => [\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Enable Request Lifecycle\nDESCRIPTION: Configuring Hyperf to enable request lifecycle events\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/request.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\ServerInterface;\n\nreturn [\n    'servers' => [\n        [\n            'name' => 'http',\n            'type' => ServerInterface::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9501,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [Hyperf\\HttpServer\\Server::class, 'onRequest'],\n            ],\n            'options' => [\n                // Whether to enable request lifecycle event\n                'enable_request_lifecycle' => false,\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Cacheable Annotation Example\nDESCRIPTION: Demonstrates the use of the `Cacheable` annotation to cache the result of a method. The example caches the result of the `user` method in the `UserService` class with a prefix of 'user', a TTL of 9000 seconds, and a listener named 'user-update'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/cache.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass UserService\n{\n    #[Cacheable(prefix: \"user\", ttl: 9000, listener: \"user-update\")]\n    public function user($id)\n    {\n        $user = User::query()->where('id',$id)->first();\n\n        if($user){\n            return $user->toArray();\n        }\n\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Config Provider Annotation Scan\nDESCRIPTION: This snippet shows the updated structure for the 'scan' configuration within the ConfigProvider class, specifically for annotations.  The 'paths' and 'collectors' are now nested under 'annotations' -> 'scan'. This change aligns the configuration structure with the overall configuration file structure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog/1.1.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'annotations' => [\n    'scan' => [\n        'paths' => [\n            __DIR__,\n        ],\n        'collectors' => [],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Get Last Item Number on Current Page with Paginator\nDESCRIPTION: Retrieves the index of the last item on the current page. Useful for displaying the ending index of the items on the current page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/paginator.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$lastItem = $paginator->lastItem();\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Translation Component\nDESCRIPTION: This snippet shows the command to install the hyperf/translation component using Composer. This component is used for internationalization (i18n) and localization (l10n) in Hyperf applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/constants.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/translation\n```\n\n----------------------------------------\n\nTITLE: Migration Structure in Hyperf\nDESCRIPTION: This code demonstrates the structure of a migration class in Hyperf. The `up` method defines the database changes to be applied, and the `down` method defines the reverse operations to roll back the changes.  This particular example creates a table named 'true' with an auto-incrementing ID and timestamps.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Database\\Schema\\Schema;\nuse Hyperf\\Database\\Schema\\Blueprint;\nuse Hyperf\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('true', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('true');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Swarm\nDESCRIPTION: Initializes a Docker Swarm cluster on the current machine.  This makes the machine the manager node of the Swarm.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\n$ docker swarm init\n```\n\n----------------------------------------\n\nTITLE: Configuring Hyperf Container\nDESCRIPTION: This snippet demonstrates the new configuration structure for the Hyperf container. It shows how to instantiate the container and set it as the application context's container.  The dependency injection container is created using a DefinitionSourceFactory, and an exception is thrown if the container is invalid.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog/1.1.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Di\\Definition\\DefinitionSourceFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = new Container((new DefinitionSourceFactory(true))());\n\nif (! $container instanceof \\Psr\\Container\\ContainerInterface) {\n    throw new RuntimeException('The dependency injection container is invalid.');\n}\nreturn ApplicationContext::setContainer($container);\n```\n\n----------------------------------------\n\nTITLE: Updating a Record\nDESCRIPTION: This snippet updates an existing model's attributes and saves it, triggering an automatic update in the search index.  Scout handles syncing the changes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$order = App\\Order::find(1);\n\n// 更新 order...\n\n$order->save();\n```\n\n----------------------------------------\n\nTITLE: Configure Docker to Allow TCP Connections\nDESCRIPTION: This configures the Docker daemon to listen for TCP connections on port 2375, allowing remote access to the Docker API. It requires modifying the docker.service file and restarting the Docker service.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375\n```\n\n----------------------------------------\n\nTITLE: Running Logtail Container with Docker\nDESCRIPTION: This Docker command runs the Logtail container, configuring it to collect logs and send them to Alibaba Cloud Log Service. It mounts necessary volumes and sets environment variables for region, user ID, and machine group identification.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/aliyun-logger.md#_snippet_0\n\nLANGUAGE: Docker\nCODE:\n```\ndocker run -d -v /:/logtail_host:ro -v /var/run/docker.sock:/var/run/docker.sock \\\n--env ALIYUN_LOGTAIL_CONFIG=/etc/ilogtail/conf/${your_region_name}/ilogtail_config.json \\\n--env ALIYUN_LOGTAIL_USER_ID=${your_aliyun_user_id} \\\n--env ALIYUN_LOGTAIL_USER_DEFINED_ID=${your_machine_group_user_defined_id} \\\nregistry.cn-hangzhou.aliyuncs.com/log-service/logtail\n```\n\n----------------------------------------\n\nTITLE: Using Variable Parameters in Error Messages\nDESCRIPTION: This snippet shows how to use variable parameters in the error message defined in the enum. The `getMessage()` method can accept an array of values to replace placeholders in the message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/constants.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n\nuse Hyperf\\Constants\\Annotation\\Constants;\nuse Hyperf\\Constants\\Annotation\\Message;\nuse Hyperf\\Constants\\EnumConstantsTrait;\n\n#[Constants]\nenum ErrorCode: int\n{\n    use EnumConstantsTrait;\n    \n    #[Message(\"Params %s is invalid.\")]\n    case PARAMS_INVALID = 1000;\n}\n\n$message = ErrorCode::PARAMS_INVALID->getMessage(['user_id']);\n```\n\n----------------------------------------\n\nTITLE: Adding IgbinarySerializerPacker in Hyperf\nDESCRIPTION: This commit introduces `Hyperf\\Codec\\Packer\\IgbinarySerializerPacker` to the Hyperf framework.  It aims to provide an alternative serialization/deserialization method using Igbinary, potentially improving performance when handling data serialization.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/3.0.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nHyperf\\Codec\\Packer\\IgbinarySerializerPacker\n```\n\n----------------------------------------\n\nTITLE: Installing Blade Template Engine (Alternative)\nDESCRIPTION: Installs the `duncan3dc/blade` Blade template engine using Composer. The documentation notes that this engine is not recommended due to incompatibilities with Laravel's Support library.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require duncan3dc/blade\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Swagger Component using Composer\nDESCRIPTION: This command installs the hyperf/swagger component as a dependency using Composer, the PHP package manager.  It retrieves the necessary files from the repository and adds them to the project's vendor directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/swagger.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/swagger\n```\n\n----------------------------------------\n\nTITLE: Fixing Aliyun OSS iconv error in Alpine (v3.12)\nDESCRIPTION: This Dockerfile command installs `gnu-libiconv` and sets the `LD_PRELOAD` environment variable to resolve iconv errors when using the Aliyun OSS SDK in the `hyperf/hyperf:8.0-alpine-v3.12-swoole` image.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/questions.md#_snippet_8\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apk --no-cache --allow-untrusted --repository http://dl-cdn.alpinelinux.org/alpine/edge/community/ add gnu-libiconv=1.15-r2\nENV LD_PRELOAD /usr/lib/preloadable_libiconv.so\n```\n\n----------------------------------------\n\nTITLE: Trait Property Injection Example\nDESCRIPTION: This snippet shows how to use #[Inject] in a Trait for dependency injection in Hyperf. It highlights a potential issue where class name collisions from `use` statements in the child class can cause the injection to fail.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/questions.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Hyperf\\Di\\Annotation\\Inject;\n\ntrait TestTrait\n{\n    #[Inject]\n    protected ResponseInterface $response;\n}\n\n// use 同类名会覆盖Trait\nuse Psr\\Http\\Message\\ResponseInterface;\n\nclass IndexController\n{\n    use TestTrait;\n}\n// Error while injecting dependencies into App\\Controller\\IndexController: No entry or class found for 'Psr\\Http\\Message\\ResponseInterface'\n```\n\n----------------------------------------\n\nTITLE: Prometheus Scrape Mode Configuration\nDESCRIPTION: This PHP code snippet shows how to configure Prometheus to use the scrape mode. This is the recommended mode where Prometheus pulls metrics from the application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n'mode' => Constants::SCRAPE_MODE\n```\n\n----------------------------------------\n\nTITLE: Registering Crontab Dispatcher Process - PHP\nDESCRIPTION: This configuration registers the `Hyperf\\Crontab\\Process\\CrontabDispatcherProcess` as a custom process in the `config/autoload/processes.php` file. This process is responsible for parsing, scheduling, and dispatching the defined cron tasks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/crontab.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// config/autoload/processes.php\nreturn [\n    Hyperf\\Crontab\\Process\\CrontabDispatcherProcess::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Docker Stack YAML File\nDESCRIPTION: This YAML file defines the Docker stack configuration, including services, ports, replicas, restart policies, update configurations, networks, and configs. It specifies the image to use, the ports to expose, the number of replicas to run, the restart policy, the update configuration, the networks to connect to, and the configurations to mount.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_61\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.7'\nservices:\n  your_project:\n    image: registry.cn-shanghai.aliyuncs.com/your_namespace/your_project:latest\n    ports:\n      - \"9501:9501\"\n    deploy:\n      replicas: 3\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 5\n      update_config:\n        parallelism: 2\n        delay: 5s\n        order: start-first\n    networks:\n      - default-network\n    configs:\n      - source: your_project_v1.1\n        target: /opt/www/.env\nconfigs:\n  your_project_v1.1:\n    file: /opt/www/your_project/.env\nnetworks:\n  default-network:\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Define Resource Collection (Repeated)\nDESCRIPTION: Reiterates the process for defining a custom resource collection that allows adding metadata.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Loop Variable (Blade)\nDESCRIPTION: This Blade template demonstrates the use of the `$loop` variable within a loop to access information about the current iteration. It shows how to check if it's the first or last iteration and how to access the parent loop in nested loops.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_19\n\nLANGUAGE: blade\nCODE:\n```\n@foreach ($users as $user)\n    @if ($loop->first)\n        This is the first iteration.\n    @endif\n\n    @if ($loop->last)\n        This is the last iteration.\n    @endif\n\n    <p>This is user {{ $user->id }}</p>\n@endforeach\n\n@foreach ($users as $user)\n    @foreach ($user->posts as $post)\n        @if ($loop->parent->first)\n            This is first iteration of the parent loop.\n        @endif\n    @endforeach\n@endforeach\n```\n\n----------------------------------------\n\nTITLE: Generated Model Example (Hyperf)\nDESCRIPTION: This is an example of a generated model class in Hyperf. It defines the table name, fillable attributes, and casts for data types.  The `@property` annotations are used for IDE hinting.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/gen.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\n/**\n * @property $id\n * @property $name\n * @property $gender\n * @property $created_at\n * @property $updated_at\n */\nclass User extends Model\n{\n    /**\n     * The table associated with the model.\n     */\n    protected ?string $table = 'user';\n\n    /**\n     * The attributes that are mass assignable.\n     */\n    protected array $fillable = ['id', 'name', 'gender', 'created_at', 'updated_at'];\n\n    /**\n     * The attributes that should be cast to native types.\n     */\n    protected array $casts = ['id' => 'integer', 'gender' => 'integer'];\n}\n```\n\n----------------------------------------\n\nTITLE: Controller for Pushing Messages (Annotation)\nDESCRIPTION: This code defines a controller that uses the `QueueService` to trigger the execution of a method annotated with `@AsyncQueueMessage`. Calling the `example` method in the service will automatically push a message onto the queue.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse App\\Service\\QueueService;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass QueueController extends AbstractController\n{\n    #[Inject]\n    protected QueueService $service;\n\n    /**\n     * 註解模式投遞消息\n     */\n    public function example()\n    {\n        $this->service->example([\n            'group@hyperf.io',\n            'https://doc.hyperf.io',\n            'https://www.hyperf.io',\n        ]);\n\n        return 'success';\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Restoring or Creating Models with restoreOrCreate in Hyperf\nDESCRIPTION: The `restoreOrCreate` method attempts to find a matching record in the database based on the given column/value pair. If a matching soft-deleted model is found, it restores the model (sets `deleted_at` to null). If no matching model is found, it creates a new record in the database using the attributes from the first and optionally the second parameter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// 通過 name 查找用户，不存在則使用 name 和 gender, age 屬性創建...\n$user = User::restoreOrCreate(\n    ['name' => 'Hyperf'],\n    ['gender' => 1, 'age' => 20]\n);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Swoole Options for Guzzle Client - PHP\nDESCRIPTION: Illustrates how to configure Swoole-specific options for a Guzzle client. These options are applied directly to the underlying Swoole HTTP client.  Note: these configurations are only applicable when using the Swoole HTTP client and are not effective with the Curl client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/guzzle.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse GuzzleHttp\\Client;\nuse Hyperf\\Guzzle\\CoroutineHandler;\nuse GuzzleHttp\\HandlerStack;\n\n$client = new Client([\n    'base_uri' => 'http://127.0.0.1:8080',\n    'handler' => HandlerStack::create(new CoroutineHandler()),\n    'timeout' => 5,\n    'swoole' => [\n        'timeout' => 10,\n        'socket_buffer_size' => 1024 * 1024 * 2,\n    ],\n]);\n\n$response = $client->get('/');\n\n```\n\n----------------------------------------\n\nTITLE: Alibaba Cloud Authentication Configuration\nDESCRIPTION: This configuration array defines the Nacos client settings for authenticating with Alibaba Cloud Nacos service, including access key (AK) and secret key (SK). It is used to securely connect to the Nacos server on Alibaba Cloud.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nacos.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    // nacos server url like https://nacos.hyperf.io, Priority is higher than host:port\n    // 'uri' => 'http://127.0.0.1:8848/',\n    // The nacos host info\n    'host' => '127.0.0.1',\n    'port' => 8848,\n    // The nacos account info\n    'username' => null,\n    'password' => null,\n    'access_key' => 'xxxx',\n    'access_secret' => 'yyyy',\n    'guzzle' => [\n        'config' => null,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Example Generated Model\nDESCRIPTION: This snippet shows an example of a generated model class.  It demonstrates basic model structure, including namespace, table association, mass assignment attributes (`fillable`), and type casting (`casts`).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\n/**\n * @property $id\n * @property $name\n * @property $gender\n * @property $created_at\n * @property $updated_at\n */\nclass User extends Model\n{\n    /**\n     * The table associated with the model.\n     * \n     * @var string\n     */\n    protected ?string $table = 'user';\n\n    /**\n     * The attributes that are mass assignable.\n     * \n     * @var array\n     */\n    protected array $fillable = ['id', 'name', 'gender', 'created_at', 'updated_at'];\n\n    /**\n     * The attributes that should be cast to native types.\n     * \n     * @var array\n     */\n    protected array $casts = ['id' => 'integer', 'gender' => 'integer'];\n}\n```\n\n----------------------------------------\n\nTITLE: Define Custom Date Format - Hyperf - PHP\nDESCRIPTION: This code defines a custom date format using the `$dateFormat` property in a Hyperf model.  The `dateFormat` is set to 'U', which represents a UNIX timestamp. This format will be used when storing date attributes in the database and when serializing the model. Requires the `Hyperf\\DbConnection\\Model\\Model` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * This property should be cast to the native type.\n     *\n     * @var string\n     */\n    protected $dateFormat = 'U';\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Redis Client Options (redis.php)\nDESCRIPTION: Configures Redis client options, such as setting the serializer to PHP serialization, within the redis.php configuration file.  This allows customizing Redis client behavior.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/redis.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', null),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n        'options' => [\n            \\Redis::OPT_SERIALIZER => \\Redis::SERIALIZER_PHP,\n            // 或者 'serializer' => \\Redis::SERIALIZER_PHP, v3.0.38 或更高版本\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Defining a One-to-Many Polymorphic Relationship - Image Model\nDESCRIPTION: This code snippet defines the inverse side of a polymorphic relationship, allowing the Image model to belong to either a Book or a User model. The imageable() method returns the result of the morphTo() method, which automatically determines the type and ID of the related model based on the imageable_type and imageable_id columns in the image table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/relationship.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Model;\n\nclass Image extends Model\n{\n    public function imageable()\n    {\n        return $this->morphTo();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Attribute with Closure\nDESCRIPTION: This PHP code shows how to conditionally include an attribute using a closure to determine the value. The `when` method accepts a closure as the second argument, allowing for more complex logic to determine the attribute's value based on the condition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'secret' => $this->when(Auth::user()->isAdmin(), function () {\n                return 'secret-value';\n            }),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enable Session Support for Socket.IO in Hyperf\nDESCRIPTION: This PHP configuration snippet shows how to enable session support for Socket.IO in Hyperf by adding the `SessionAspect` to the list of aspects. This allows accessing session data within Socket.IO event handlers, enabling features like user authentication and session-based data storage. The `hyperf/session` component needs to be properly installed and configured before using this.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/socketio-server.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/aspect.php\nreturn [\n    \\Hyperf\\SocketIOServer\\Aspect\\SessionAspect::class,\n];\n```\n\n----------------------------------------\n\nTITLE: JSON RPC Server Configuration\nDESCRIPTION: Configures a JSON-RPC server within the `config/autoload/server.php` file. It demonstrates how to set up a TCP server with EOF-based packet splitting and a custom EOF string.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 這裡省略了該檔案的其它配置\n    'servers' => [\n        [\n            'name' => 'jsonrpc',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9503,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_RECEIVE => [\\Hyperf\\JsonRpc\\TcpServer::class, 'onReceive'],\n            ],\n            'settings' => [\n                'open_eof_split' => true, // 啟用 EOF 自動分包\n                'package_eof' => \"\\r\\n\", // 設定 EOF 字串\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configure WebSocket Server for Socket.IO\nDESCRIPTION: This configuration sets up a WebSocket server in Hyperf for use with Socket.IO. It defines the server name, type, host, port, socket type, and callbacks for handshake, message, and close events, utilizing the Hyperf WebSocket server components.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/socketio-server/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[\n    'name' => 'socket-io',\n    'type' => Server::SERVER_WEBSOCKET,\n    'host' => '0.0.0.0',\n    'port' => 9502,\n    'sock_type' => SWOOLE_SOCK_TCP,\n    'callbacks' => [\n        SwooleEvent::ON_HAND_SHAKE => [Hyperf\\WebSocketServer\\Server::class, 'onHandShake'],\n        SwooleEvent::ON_MESSAGE => [Hyperf\\WebSocketServer\\Server::class, 'onMessage'],\n        SwooleEvent::ON_CLOSE => [Hyperf\\WebSocketServer\\Server::class, 'onClose'],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Custom Retry Annotation with Max Attempts PHP\nDESCRIPTION: This snippet builds upon the previous example by adding a `maxAttempts` property to the `MyRetry` annotation, limiting the number of retry attempts using `MaxAttemptsRetryPolicy`.  The `$policies` property specifies which retry policies to use.  Requires `Hyperf\\Retry\\RetryPolicy` and a `MaxAttemptsRetryPolicy` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/retry.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Annotation;\n\nuse Doctrine\\Common\\Annotations\\Annotation\\Target;\n\n#[Attribute(Attribute::TARGET_METHOD)]\nclass MyRetry extends \\Hyperf\\Retry\\Annotation\\AbstractRetry\n{\n    public $policies = [\n        MaxAttemptsRetryPolicy::class,\n    ];\n    public $maxAttempts = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Model Pagination with Conditions in PHP\nDESCRIPTION: This snippet extends the previous example by adding a 'where' clause to the query, filtering users based on gender (gender = 1) before applying pagination. It displays 10 items per page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/paginator.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php \n// 展示應用中的所有用户，每頁顯示 10 條數據\nreturn User::where('gender', 1)->paginate(10);\n```\n\n----------------------------------------\n\nTITLE: Publish Delayed Message to NSQ\nDESCRIPTION: This PHP code shows how to publish a delayed message to an NSQ topic using the `Hyperf\\Nsq\\Nsq::publish()` method. The third argument `$deferTime` specifies the delay in seconds.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nsq.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Nsq\\Nsq;\n\n#[Command]\nclass NsqCommand extends HyperfCommand\n{\n    protected $name = 'nsq:pub';\n\n    public function handle()\n    {\n        /** @var Nsq $nsq */\n        $nsq = make(Nsq::class);\n        $topic = 'hyperf';\n        $message = 'This is message at ' . time();\n        $deferTime = 5.0;\n        $nsq->publish($topic, $message, $deferTime);\n\n        $this->line('success', 'info');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Class Map Configuration PHP\nDESCRIPTION: This snippet shows how to configure the `class_map` option in Hyperf's `scan` configuration.  It maps the original `Hyperf\\Coroutine\\Coroutine` class to a custom implementation located at `BASE_PATH . '/class_map/Hyperf/Coroutine/Coroutine.php'`.  This allows replacing the default framework class with a customized version.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/annotation.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Coroutine\\Coroutine;\n\nreturn [\n    'scan' => [\n        'paths' => [\n            BASE_PATH . '/app',\n        ],\n        'ignore_annotations' => [\n            'mixin',\n        ],\n        'class_map' => [\n            // 需要映射的類名 => 類所在的文件地址\n            Coroutine::class => BASE_PATH . '/class_map/Hyperf/Coroutine/Coroutine.php',\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Nodes\nDESCRIPTION: This command lists the nodes in a Docker Swarm cluster. Requires Docker Swarm.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_50\n\nLANGUAGE: shell\nCODE:\n```\ndocker node ls\n```\n\n----------------------------------------\n\nTITLE: Initialize Docker Swarm Cluster\nDESCRIPTION: This command initializes a Docker Swarm cluster on the current node.  It generates a join token for worker nodes and manager nodes.  Execute this command on the manager node.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker swarm init\n```\n\n----------------------------------------\n\nTITLE: Implement a Signal Handler (TermSignalHandler)\nDESCRIPTION: This code defines a signal handler that listens for the SIGTERM signal in the Worker process and prints the signal value when received. It utilizes the `Hyperf\\Signal\\Annotation\\Signal` annotation and implements the `Hyperf\\Signal\\SignalHandlerInterface` interface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/signal.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Signal;\n\nuse Hyperf\\Signal\\Annotation\\Signal;\nuse Hyperf\\Signal\\SignalHandlerInterface;\n\n#[Signal]\nclass TermSignalHandler implements SignalHandlerInterface\n{\n    public function listen(): array\n    {\n        return [\n            [SignalHandlerInterface::WORKER, SIGTERM],\n        ];\n    }\n\n    public function handle(int $signal): void\n    {\n        var_dump($signal);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting with Annotations in Hyperf\nDESCRIPTION: Demonstrates how to use the `Hyperf\\RateLimit\\Annotation\\RateLimit` annotation to apply rate limiting to a controller and its methods. The example sets the `create` and `capacity` parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/rate-limit.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\nuse Hyperf\\RateLimit\\Annotation\\RateLimit;\n\n#[Controller(prefix: \"rate-limit\")]\nclass RateLimitController\n{\n    #[RequestMapping(path: \"test\")]\n    #[RateLimit(create: 1, capacity: 3)]\n    public function test()\n    {\n        return [\"QPS 1, 峯值3\"];\n    }\n\n    #[RequestMapping(path: \"test2\")]\n    #[RateLimit(create: 2, consume: 2, capacity: 4)]\n    public function test2()\n    {\n        return [\"QPS 2, 峯值2\"];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Qiniu Adapter (Flysystem v2.0)\nDESCRIPTION: Installs the Qiniu adapter for Flysystem v2.0 to interact with Qiniu cloud storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/filesystem.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-qiniu:^2.0\"\n```\n\n----------------------------------------\n\nTITLE: Creating a UDP Server Class in Hyperf\nDESCRIPTION: This code snippet demonstrates how to create a UDP server class in Hyperf. It implements the `OnPacketInterface` and defines the `onPacket` method, which handles incoming UDP packets and sends a response back to the client. The `$server` parameter is the Swoole server instance, `$data` is the data received from the client, and `$clientInfo` is an array containing information about the client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tcp-server.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnPacketInterface;\n\nclass UdpServer implements OnPacketInterface\n{\n    public function onPacket($server, $data, $clientInfo): void\n    {\n        var_dump($clientInfo);\n        $server->sendto($clientInfo['address'], $clientInfo['port'], 'Server:' . $data);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuration for Request Lifecycle Events\nDESCRIPTION: This code snippet shows the configuration required to enable request lifecycle events in Hyperf. Setting 'enable_request_lifecycle' to true allows the triggering of events at different stages of the request processing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\ServerInterface;\n\nreturn [\n    'servers' => [\n        [\n            'name' => 'http',\n            'type' => ServerInterface::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9501,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [Hyperf\\HttpServer\\Server::class, 'onRequest'],\n            ],\n            'options' => [\n                // Whether to enable request lifecycle event\n                'enable_request_lifecycle' => false,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Box on macOS\nDESCRIPTION: This snippet provides the commands to download, move, and set execute permissions for the Hyperf Box binary on macOS. It also highlights the need to ensure the binary is accessible in the system's PATH.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/eco/box.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/hyperf/box/releases/download/v0.5.5/box_x86_64_macos -O box\nsudo mv ./box /usr/local/bin/box\nsudo chmod 755 /usr/local/bin/box\n// 確保 /usr/local/bin/box 在你的 $PATH 環境中，或者將 `box` 放到你想要的任意 $PATH 路徑中\n```\n\n----------------------------------------\n\nTITLE: Creating an RPC Service in Hyperf\nDESCRIPTION: This snippet demonstrates how to create an RPC service in Hyperf using the `#[RpcService]` annotation. It implements an interface (CalculatorServiceInterface) and associates the service with a specific server ('rpc') and protocol (PROTOCOL_DEFAULT).  It should be placed in `App\\RPC` namespace.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/rpc-multiplex.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\RPC;\n\nuse App\\JsonRpc\\CalculatorServiceInterface;\nuse Hyperf\\RpcMultiplex\\Constant;\nuse Hyperf\\RpcServer\\Annotation\\RpcService;\n\n#[RpcService(name: \"CalculatorService\", server: \"rpc\", protocol: Constant::PROTOCOL_DEFAULT)]\nclass CalculatorService implements CalculatorServiceInterface\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Hyperf Nano\nDESCRIPTION: Demonstrates how to define routes, including route groups and parameter handling, using Hyperf Nano. It uses the `addGroup` and `addRoute` methods to create routes with different HTTP methods and parameter constraints.  Requires the `hyperf/nano` package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nano.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addGroup('/nano', function () use ($app) {\n    $app->addRoute(['GET', 'POST'], '/{id:\\d+}', function($id) {\n        return '/nano/'.$id;\n    });\n    $app->put('/{name:.+}', function($name) {\n        return '/nano/'.$name;\n    });\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Define a Custom Client Class\nDESCRIPTION: This code defines a custom client class `CalculatorService` that extends `Hyperf\\Jet\\AbstractClient`. It overrides the constructor to configure the transporter and packer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/jet.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Jet\\AbstractClient;\nuse Hyperf\\Jet\\Packer\\JsonEofPacker;\nuse Hyperf\\Jet\\Transporter\\StreamSocketTransporter;\nuse Hyperf\\Rpc\\Contract\\DataFormatterInterface;\nuse Hyperf\\Rpc\\Contract\\PackerInterface;\nuse Hyperf\\Rpc\\Contract\\PathGeneratorInterface;\nuse Hyperf\\Rpc\\Contract\\TransporterInterface;\n\n/**\n * @method int add(int $a, int $b);\n */\nclass CalculatorService extends AbstractClient\n{\n    // 定义 `CalculatorService` 作为 $service 参数的默认值\n    public function __construct(\n        string $service = 'CalculatorService',\n        TransporterInterface $transporter = null,\n        PackerInterface $packer = null,\n        ?DataFormatterInterface $dataFormatter = null,\n        ?PathGeneratorInterface $pathGenerator = null\n    ) {\n        // 这里指定 transporter，您仍然可以通过 ProtocolManager 来获得 transporter 或从构造函数传递\n        $transporter = new StreamSocketTransporter('127.0.0.1', 9503);\n        // 这里指定 packer，您仍然可以通过 ProtocolManager 来获得 packer 或从构造函数传递\n        $packer = new JsonEofPacker();\n        parent::__construct($service, $transporter, $packer, $dataFormatter, $pathGenerator);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install hyperf/rpn package\nDESCRIPTION: This command installs the hyperf/rpn package using Composer, a dependency manager for PHP. This package provides functionality for calculating Reverse Polish Notation (RPN) expressions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/rpn.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/rpn\n```\n\n----------------------------------------\n\nTITLE: Quick Start with Hyperf Nano\nDESCRIPTION: Creates a basic Hyperf Nano application that responds to a GET request. It defines a route that takes a user input and returns a JSON response with a greeting and the request method.  Requires the `hyperf/nano` package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nano.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// index.php\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create('0.0.0.0', 9051);\n\n$app->get('/', function () {\n\n    $user = $this->request->input('user', 'nano');\n    $method = $this->request->getMethod();\n\n    return [\n        'message' => \"hello {$user}\",\n        'method' => $method,\n    ];\n\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Install Prometheus Client Library\nDESCRIPTION: Installs the promphp/prometheus_client_php library using Composer. This is required when using Prometheus as the metric backend.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require promphp/prometheus_client_php\n```\n\n----------------------------------------\n\nTITLE: Config Dependencies PHP 1.1\nDESCRIPTION: This snippet shows the structure of the `config/autoload/dependencies.php` file in Hyperf 1.1.  The 'dependencies' key has been removed, and the dependency mappings are defined directly in the returned array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/1.1.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// config/autoload/dependencies.php document\n\nreturn [\n    FooInterface::class => Foo::class\n];\n```\n\n----------------------------------------\n\nTITLE: Starting Hyperf Watcher\nDESCRIPTION: This command starts the Hyperf application with the watcher enabled, allowing for automatic restarts upon file modifications. This command should be run from the project's root directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/watcher.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php server:watch\n```\n\n----------------------------------------\n\nTITLE: Hyperf XA Local Transaction for transIn\nDESCRIPTION: This method simulates a transIn operation within a distributed system using XA. It extracts the amount from the request, initiates a local transaction using `$xa->localTransaction`, and executes a database update query via `DBTransactionInterface` to increment the 'amount' field in the 'order' table. It returns a status indicating success.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/distributed-transaction.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Grpc\\GrpcClient;\nuse DtmClient\\DbTransaction\\DBTransactionInterface;\nuse DtmClient\\TransContext;\nuse DtmClient\\XA;\nuse Hyperf\\Contract\\ConfigInterface;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\GetMapping;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\n\n#[Controller(prefix: '/xa')]\nclass XAController\n{\n\n    private GrpcClient $grpcClient;\n\n    protected string $serviceUri = 'http://127.0.0.1:9502';\n\n    public function __construct(\n        private XA $xa,\n        protected ConfigInterface $config,\n    ) {\n        $server = $this->config->get('dtm.server', '127.0.0.1');\n        $port = $this->config->get('dtm.port.grpc', 36790);\n        $hostname = $server . ':' . $port;\n        $this->grpcClient = new GrpcClient($hostname);\n    }\n\n\n    #[GetMapping(path: 'successCase')]\n    public function successCase(): string\n    {\n        $payload = ['amount' => 50];\n        // 開啓Xa 全局事物\n        $gid = $this->xa->generateGid();\n        $this->xa->globalTransaction($gid, function () use ($payload) {\n            // 調用子事物接口\n            $respone = $this->xa->callBranch($this->serviceUri . '/xa/api/transIn', $payload);\n            // XA http模式下獲取子事物返回結構\n            /* @var ResponseInterface $respone */\n            $respone->getBody()->getContents();\n            // 調用子事物接口\n            $payload = ['amount' => 10];\n            $this->xa->callBranch($this->serviceUri . '/xa/api/transOut', $payload);\n        });\n        // 通過 TransContext::getGid() 獲得 全局事務ID 並返回\n        return TransContext::getGid();\n    }\n\n    #[RequestMapping(methods: [\"GET\", \"POST\", \"PUT\"], path: 'api/transIn')]\n    public function transIn(RequestInterface $request): array\n    {\n        $content = $request->post('amount');\n        $amount = $content['amount'] ?? 50;\n        // 模擬分佈式系統下transIn方法\n        $this->xa->localTransaction(function (DBTransactionInterface $dbTransaction) use ($amount) {\n            // 請使用 DBTransactionInterface 處理本地 Mysql 事物\n            $dbTransaction->xaExecute('UPDATE `order` set `amount` = `amount` + ? where id = 1', [$amount]);\n        });\n\n        return ['status' => 0, 'message' => 'ok'];\n    }\n\n    /**\n     * @param RequestInterface $request\n     * @return array\n     */\n    #[RequestMapping(methods: [\"GET\", \"POST\", \"PUT\"], path: 'api/transOut')]\n    public function transOut(RequestInterface $request): array\n    {\n        $content = $request->post('amount');\n        $amount = $content['amount'] ?? 10;\n        // 模擬分佈式系統下transOut方法\n        $this->xa->localTransaction(function (DBTransactionInterface $dbTransaction) use ($amount) {\n            // 請使用 DBTransactionInterface 處理本地 Mysql 事物\n            $dbTransaction->xaExecute('UPDATE `order` set `amount` = `amount` - ? where id = 2', [$amount]);\n        });\n\n        return ['status' => 0, 'message' => 'ok'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Query Log in Hyperf (PHP)\nDESCRIPTION: This code shows how to enable the query log in Hyperf for debugging purposes.  It enables the query log, executes a query, and then prints the last executed SQL query and its associated data.  It warns against using this feature in production due to potential memory leaks and data mixing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/quick-start.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\DbConnection\\Db;\nuse Hyperf\\Collection\\Arr;\nuse App\\Model\\Book;\n\n// 啓用 SQL 數據記錄功能\nDb::enableQueryLog();\n\n$book = Book::query()->find(1);\n\n// 打印最後一條 SQL 相關數據\nvar_dump(Arr::last(Db::getQueryLog()));\n```\n\n----------------------------------------\n\nTITLE: Displaying Join Token for Manager Nodes\nDESCRIPTION: Displays the command to join the Docker Swarm cluster as a manager node. This command is used to add manager nodes to the cluster.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_48\n\nLANGUAGE: shell\nCODE:\n```\n$ docker swarm join-token manager\n```\n\n----------------------------------------\n\nTITLE: Component View with Named Slot (HTML)\nDESCRIPTION: This demonstrates a component view with a named slot (`title`).  This allows for injecting content into specific locations within the component's view.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n    <!-- /storage/view/components/alert.blade.php -->\n\n    <span class=\"alert-title\">{{ $title }}</span>\n\n    <div class=\"alert alert-danger\">\n        {{ $slot }}\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Changing Config Provider Structure in Hyperf (After)\nDESCRIPTION: This code snippet shows the new structure of the config provider in Hyperf, specifically the 'annotations' configuration with nested 'scan' settings.  It moves the scanning configuration under the 'annotations' key, providing better organization and separation of concerns. This structure defines paths to scan for annotations and collectors.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.2.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n'annotations' => [\n    'scan' => [\n        'paths' => [\n            __DIR__,\n        ],\n        'collectors' => [],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Creating HandlerStack with HandlerStackFactory - PHP\nDESCRIPTION: Illustrates how to use the HandlerStackFactory to create a HandlerStack for Guzzle. This factory simplifies the creation of the necessary handler stack components for a coroutine-based Guzzle client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/guzzle.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Guzzle\\HandlerStackFactory;\nuse GuzzleHttp\\Client;\n\n$factory = new HandlerStackFactory();\n$stack = $factory->create();\n\n$client = make(Client::class, [\n    'config' => [\n        'handler' => $stack,\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Table (PHP)\nDESCRIPTION: This code demonstrates how to create a table using the Schema builder in a migration's `up` method. It creates a table named 'users' with an auto-incrementing ID and timestamps.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Database\\Schema\\Schema;\nuse Hyperf\\Database\\Schema\\Blueprint;\nuse Hyperf\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    public function up(): void\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->timestamps();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Nacos Configuration - Shell\nDESCRIPTION: This command publishes the default configuration file for the hyperf/nacos package to the config directory, allowing customization of Nacos connection settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nacos.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/nacos\n```\n\n----------------------------------------\n\nTITLE: Generate NSQ Consumer via Hyperf Command\nDESCRIPTION: This command generates a new NSQ consumer class using the Hyperf command-line tool. Replace DemoConsumer with the desired name of the consumer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nsq.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php gen:nsq-consumer DemoConsumer\n```\n\n----------------------------------------\n\nTITLE: Create Unique Index at Definition\nDESCRIPTION: This code snippet shows how to create a unique index while defining a column. It defines a 'name' column with a unique index.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\n// 在定义时创建索引\n$table->string('name')->unique();\n```\n\n----------------------------------------\n\nTITLE: Using Class Annotation in PHP\nDESCRIPTION: This code snippet shows how to use a class annotation in PHP. The `#[ClassAnnotation]` is placed above the `class` keyword. This indicates that the `ClassAnnotation` annotation is applied to the `Foo` class. The annotation can then be processed by a collector to modify or extend the class's behavior. This is a basic example of applying an annotation to a class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/annotation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n#[ClassAnnotation]\nclass Foo {}\n```\n\n----------------------------------------\n\nTITLE: Configure ETCD Connection\nDESCRIPTION: This PHP code defines the configuration array for the ETCD client. It specifies the URI of the ETCD server, the API version to use, and various connection options such as timeout. The URI should point to the ETCD server's address, and the timeout sets the maximum time to wait for a response from the server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/etcd.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'uri' => 'http://192.168.1.200:2379',\n    'version' => 'v3beta',\n    'options' => [\n        'timeout' => 10,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Running Gitlab with Docker\nDESCRIPTION: Runs a Gitlab instance using Docker with specified ports, volumes, and hostname. The `hostname` is crucial and should be a valid domain or external IP.  Volumes are mounted for persistent storage of configuration, logs, and data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker run -d --hostname gitlab.xxx.cn \\\n--publish 443:443 --publish 80:80 --publish 22:22 \\\n--name gitlab --restart always --volume /srv/gitlab/config:/etc/gitlab \\\n--volume /srv/gitlab/logs:/var/log/gitlab \\\n--volume /srv/gitlab/data:/var/opt/gitlab \\\ngitlab/gitlab-ce:latest\n```\n\n----------------------------------------\n\nTITLE: Config Provider 'scan' structure - Before\nDESCRIPTION: This PHP snippet shows the structure of the 'scan' configuration within the ConfigProvider class before a change. It defines paths for annotation scanning and collectors. This structure was used in earlier versions of Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog/changelog-v1.1.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'scan' => [\n    'paths' => [\n        __DIR__,\n    ],\n    'collectors' => [],\n],\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Circuit Breaker Handler in Hyperf\nDESCRIPTION: This code demonstrates how to create a custom circuit breaker handler by extending `Hyperf\\CircuitBreaker\\Handler\\AbstractHandler`.  The `DemoHandler` class overrides the `process` method to implement custom logic for determining when to break the circuit.  This allows developers to define their own rules for circuit breaking based on the results or behavior of the protected code.  The method must implement a way to determine if the call should trigger the fallback, here it is represented by the `is_break()` method which is not defined in the source, but meant to be user defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/circuit-breaker.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace Hyperf\\CircuitBreaker\\Handler;\n\nuse Hyperf\\CircuitBreaker\\Annotation\\CircuitBreaker as Annotation;\nuse Hyperf\\CircuitBreaker\\CircuitBreaker;\nuse Hyperf\\CircuitBreaker\\Exception\\TimeoutException;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\nclass DemoHandler extends AbstractHandler\n{\n    const DEFAULT_TIMEOUT = 5;\n\n    protected function process(ProceedingJoinPoint $proceedingJoinPoint, CircuitBreaker $breaker, Annotation $annotation)\n    {\n        $result = $proceedingJoinPoint->process();\n\n        if (is_break()) {\n            throw new TimeoutException('timeout, use ' . $use . 's', $result);\n        }\n\n        return $result;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Verbatim Directive (Blade)\nDESCRIPTION: This Blade template demonstrates how to use the `@verbatim` directive to include a block of HTML that should not be processed by the Blade engine. This is useful for including large sections of JavaScript code.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n@verbatim\n    <div class=\"container\">\n        Hello, {{ name }}.\n    </div>\n@endverbatim\n```\n\n----------------------------------------\n\nTITLE: Example: Monitoring Failed Queue Count\nDESCRIPTION: This snippet demonstrates a practical example of using a custom process to monitor the number of items in a failed queue. It retrieves the queue count from Redis and logs a warning if the count exceeds zero.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/process.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\nuse Hyperf\\Process\\Annotation\\Process;\nuse Hyperf\\Contract\\StdoutLoggerInterface;\n\n#[Process(name: \"demo_process\")]\nclass DemoProcess extends AbstractProcess\n{\n    public function handle(): void\n    {\n        $logger = $this->container->get(StdoutLoggerInterface::class);\n\n        while (true) {\n            $redis = $this->container->get(\\Redis::class);\n            $count = $redis->llen('queue:failed');\n\n            if ($count > 0) {\n                $logger->warning('The num of failed queue is ' . $count);\n            }\n\n            sleep(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Coroutine Guzzle Client\nDESCRIPTION: Example of using the ClientFactory to create a coroutine-enabled Guzzle client. The ClientFactory simplifies the creation of Guzzle clients that leverage coroutines for non-blocking HTTP requests. The `$options` array corresponds to the configuration options for the `GuzzleHttp\\Client` constructor.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/guzzle.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php \nuse Hyperf\\Guzzle\\ClientFactory;\n\nclass Foo\n{\n    private ClientFactory $clientFactory;\n\n    public function __construct(ClientFactory $clientFactory)\n    {\n        $this->clientFactory = $clientFactory;\n    }\n    \n    public function bar()\n    {\n        // $options 等同于 GuzzleHttp\\Client 构造函数的 $config 参数\n        $options = [];\n        // $client 为协程化的 GuzzleHttp\\Client 对象\n        $client = $this->clientFactory->create($options);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Custom Template Engine in Hyperf\nDESCRIPTION: Demonstrates how to create a custom template engine for Hyperf by implementing the EngineInterface. This allows integrating alternative templating systems into the Hyperf view component.  It requires defining a class that implements the EngineInterface, then pointing the Hyperf view configuration to that engine.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Engine;\n\nuse Hyperf\\View\\Engine\\EngineInterface;\n\nclass TemplateEngine implements EngineInterface\n{\n    public function render($template, $data, $config): string\n    {\n        // instantiate an instance of the corresponding template engine\n        $engine = new TemplateInstance();\n        // and call the corresponding rendering method\n        return $engine->render($template, $data);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Kernel Versions\nDESCRIPTION: This snippet installs specific versions of the kernel, kernel-devel, and kernel-headers packages using the `yum` package manager. It ensures the system has the necessary kernel components for optimal performance with TLinux.  Dependencies include the `yum` package manager and the TLinux repository configured.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\nyum -y install kernel-devel-4.14.105-19.0012.tl2.x86_64 kernel-4.14.105-19.0013.tl2.x86_64 kernel-headers-4.14.105-19.0013.tl2.x86_64\n```\n\n----------------------------------------\n\nTITLE: Parallel with Max Concurrent Coroutines (PHP)\nDESCRIPTION: Demonstrates limiting the maximum number of concurrent coroutines in a Parallel task. A `Parallel` instance is created with a maximum concurrency limit, ensuring that only a certain number of coroutines run simultaneously. Requires `Hyperf\\Coroutine\\Coroutine`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/coroutine.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Coroutine\\Exception\\ParallelExecutionException;\nuse Hyperf\\Coroutine\\Coroutine;\nuse Hyperf\\Coroutine\\Parallel;\n\n$parallel = new Parallel(5);\nfor ($i = 0; $i < 20; $i++) {\n    $parallel->add(function () {\n        sleep(1);\n        return Coroutine::id();\n    });\n} \n\ntry{\n   $results = $parallel->wait(); \n} catch(ParallelExecutionException $e){\n    // $e->getResults() 獲取協程中的返回值。\n    // $e->getThrowables() 獲取協程中出現的異常。\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Conversion Parameters in PHP\nDESCRIPTION: This code shows how to define type conversion parameters within the `$casts` property of a model.  The `Hash` class is used for type casting, and `sha256` is passed as a parameter to the constructor of the `Hash` class, separated by a colon.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App;\n\nuse App\\Casts\\Json;\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * Properties that should be typecast\n     *\n     * @var array\n     */\n    protected $casts = [\n        'secret' => Hash::class.':sha256',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Socket.io Events Manually\nDESCRIPTION: This PHP snippet demonstrates how to manually register Socket.io events within a controller's constructor instead of using annotations.  The `on` method is used to associate the 'event' event with the `echo` method within the class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/socketio-server.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\SocketIOServer\\BaseNamespace;\nuse Hyperf\\SocketIOServer\\SidProvider\\SidProviderInterface;\nuse Hyperf\\SocketIOServer\\Socket;\nuse Hyperf\\WebSocketServer\\Sender;\n\nclass WebSocketController extends BaseNamespace\n{\n    public function __construct(Sender $sender, SidProviderInterface $sidProvider) {\n        parent::__construct($sender,$sidProvider);\n        $this->on('event', [$this, 'echo']);\n    }\n\n    public function echo(Socket $socket, $data)\n    {\n        $socket->emit('event', $data);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Type Casting Parameters with Custom Cast\nDESCRIPTION: This example shows how to pass parameters to a custom type cast. The `Hash` class from the previous example now accepts an algorithm in the constructor. The algorithm parameter is passed by appending it after the class name in the `$casts` array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/mutators.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App;\n\nuse App\\Casts\\Json;\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 應進行型別轉換的屬性\n     *\n     * @var array\n     */\n    protected $casts = [\n        'secret' => Hash::class.':sha256',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Searchable Data\nDESCRIPTION: This code snippet shows how to customize the data that is indexed for a model by overriding the `toSearchableArray` method. This allows you to control which attributes of the model are included in the search index and how they are formatted.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\Scout\\Searchable;\nuse Hyperf\\Database\\Model\\Model;\n\nclass Post extends Model\n{\n    use Searchable;\n\n    /**\n     * Get the indexable data array for the model.\n     *\n     * @return array\n     */\n    public function toSearchableArray()\n    {\n        $array = $this->toArray();\n\n        // Customize array...\n\n        return $array;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: User Data Access Object - PHP\nDESCRIPTION: Defines a User Data Access Object (DAO) with a `first` method that retrieves a user by ID. It throws a `BusinessException` if the user does not exist and `$throw` is true.  This is useful for centralizing data access logic.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/testing.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Service\\Dao;\n\nuse App\\Constants\\ErrorCode;\nuse App\\Exception\\BusinessException;\nuse App\\Model\\User;\n\nclass UserDao extends Dao\n{\n    /**\n     * @param $id\n     * @param bool $throw\n     * @return\n     */\n    public function first($id, $throw = true)\n    {\n        $model = User::query()->find($id);\n        if ($throw && empty($model)) {\n            throw new BusinessException(ErrorCode::USRE_NOT_EXIST);\n        }\n        return $model;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Command Using the $signature Property - PHP\nDESCRIPTION: Define a command's name, arguments, and options using the `$signature` property within the command class. This allows defining the command structure in a single string. Requires Hyperf Command component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Psr\\Container\\ContainerInterface;\n\n#[Command]\nclass DebugCommand extends HyperfCommand\n{\n    protected ContainerInterface $container;\n\n    protected ?string $signature = 'test:test {id : user_id} {--name= : user_name}';\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n        parent::__construct();\n    }\n\n    public function configure()\n    {\n        parent::configure();\n        $this->setDescription('Hyperf Demo Command');\n    }\n\n    public function handle()\n    {\n        var_dump($this->input->getArguments());\n        var_dump($this->input->getOptions());\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Copying Supervisor Configuration File\nDESCRIPTION: This command copies the default Supervisor configuration file to a new directory for modification.  It creates a copy named `supervisord.conf` inside `/etc/supervisord.d/`, which allows for easier management and organization of application-specific configurations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/supervisor.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp /etc/supervisord.conf /etc/supervisord.d/supervisord.conf\n```\n\n----------------------------------------\n\nTITLE: Creating a New Docker Network\nDESCRIPTION: Creates a new Docker overlay network with a specified subnet to address IP exhaustion issues.  This allows for a larger range of IP addresses to be used by the containers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\ndocker network create \\\n--driver overlay \\\n--subnet 10.0.0.0/8 \\\n--opt encrypted \\\n--attachable \\\ndefault-network\n```\n\n----------------------------------------\n\nTITLE: Where Not Between - PHP\nDESCRIPTION: Shows how to use the `whereNotBetween()` method to filter results based on a range of values. This method verifies that a field's value is outside the specified range.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->whereNotBetween('votes', [1, 100])->get();\n```\n\n----------------------------------------\n\nTITLE: Nullable Constructor Injection\nDESCRIPTION: Shows how to define an optional dependency in the constructor using a nullable type hint. If the UserService cannot be resolved, $userService will be null.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserService;\n\nclass IndexController\n{\n    private ?UserService $userService;\n    \n    // 透過設定引數為 nullable，表明該引數為一個可選引數\n    public function __construct(?UserService $userService)\n    {\n        $this->userService = $userService;\n    }\n    \n    public function index()\n    {\n        $id = 1;\n        if ($this->userService instanceof UserService) {\n            // 僅值存在時 $userService 可用\n            return $this->userService->getInfoById($id);    \n        }\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Old ConfigProvider file structure in PHP\nDESCRIPTION: Shows the old file structure of ConfigProvider in Hyperf 1.0, where the scan paths were defined under the 'scan' key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/1.1.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nclass ConfigProvider\n{\n\n    public function __invoke(): array\n    {\n        return [\n            'scan' => [\n                'paths' => [\n                    __DIR__,\n                ],\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Nano with Composer\nDESCRIPTION: Installs the `hyperf/nano` package using Composer, allowing for rapid Hyperf application development without a skeleton.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nano.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer install hyperf/nano\n```\n\n----------------------------------------\n\nTITLE: Register Polymorphic Type Mapping Listener (PHP)\nDESCRIPTION: This code defines a listener that registers custom polymorphic type mappings when the application boots. This ensures that the mappings are available throughout the application lifecycle.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n *\n * @link     https://www.hyperf.io\n * @document https://doc.hyperf.io\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\nnamespace App\\Listener;\n\nuse App\\Model;\nuse Hyperf\\Database\\Model\\Relations\\Relation;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\n\n#[Listener]\nclass MorphMapRelationListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            BootApplication::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        Relation::morphMap([\n            'user' => Model\\User::class,\n            'book' => Model\\Book::class,\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf View Engine\nDESCRIPTION: This command installs the Hyperf View Engine component using Composer, a dependency manager for PHP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/view-engine\n```\n\n----------------------------------------\n\nTITLE: Modifying Gitlab Email Settings\nDESCRIPTION: This snippet shows how to modify the `gitlab.rb` file to configure Gitlab to send emails. It sets the SMTP server, port, username, password, and other related settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ngitlab_rails['smtp_enable'] = true\ngitlab_rails['smtp_address'] = \"smtp.exmail.qq.com\"\ngitlab_rails['smtp_port'] = 465\ngitlab_rails['smtp_user_name'] = \"git@xxxx.com\"\ngitlab_rails['smtp_password'] = \"xxxx\"\ngitlab_rails['smtp_authentication'] = \"login\"\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = true\ngitlab_rails['gitlab_email_from'] = 'git@xxxx.com'\ngitlab_rails['smtp_domain'] = \"exmail.qq.com\"\n```\n\n----------------------------------------\n\nTITLE: Configuring composer.json for Local Component\nDESCRIPTION: This snippet shows how to configure the `composer.json` file of a Hyperf project to include an unpublished component located in a local directory.  It involves adding a `path` repository to the `repositories` section and specifying the component in the `require` section.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/component-guide/create.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"require\": {\n        \"your_component/your_component\": \"dev-master\"\n    },\n    \"repositories\": {\n        \"your_component\": {\n            \"type\": \"path\",\n            \"url\": \"/opt/your_component\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Discovery Drivers (Consul & Nacos)\nDESCRIPTION: This configuration snippet shows how to configure service discovery drivers for Consul and Nacos in Hyperf. It enables discovery and registration, and then provides the necessary connection details for each driver, such as the URI/host/port, credentials, and other settings like `group_name`, `namespace_id`, and `heartbeat` interval. These drivers are used to automatically register and discover JSON RPC services.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/json-rpc.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'enable' => [\n        'discovery' => true,\n        'register' => true,\n    ],\n    'consumers' => [],\n    'providers' => [],\n    'drivers' => [\n        'consul' => [\n            'uri' => 'http://127.0.0.1:8500',\n            'token' => '',\n        ],\n        'nacos' => [\n            // nacos server url like https://nacos.hyperf.io, Priority is higher than host:port\n            // 'url' => '',\n            // The nacos host info\n            'host' => '127.0.0.1',\n            'port' => 8848,\n            // The nacos account info\n            'username' => null,\n            'password' => null,\n            'guzzle' => [\n                'config' => null,\n            ],\n            'group_name' => 'api',\n            'namespace_id' => 'namespace_id',\n            'heartbeat' => 5,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Install Alternative Blade Engine for Hyperf View\nDESCRIPTION: Installs the duncan3dc/blade package using composer, an alternative Blade templating engine. The documentation notes potential incompatibilities with Laravel's Support library.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require duncan3dc/blade\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Watcher\nDESCRIPTION: This command installs the hyperf/watcher package as a development dependency using Composer. It allows for hot reloading during development.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/watcher.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/watcher --dev\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Error Message (zh_CN) - PHP\nDESCRIPTION: This snippet shows how to define a custom error message for the `foo` validation rule in the Chinese language file. This message will be displayed when the `foo` validation rule fails.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_52\n\nLANGUAGE: PHP\nCODE:\n```\n    'foo' => ' :attribute 必須是 foo',\n```\n\n----------------------------------------\n\nTITLE: Hyperf Multiple Port Listening - dependencies.php\nDESCRIPTION: Defines a new server named `InnerHttp` in the `dependencies.php` configuration file. This ensures object isolation when listening on multiple ports by redefining the `Hyperf\\HttpServer\\Server::class` dependency.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/overview.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'InnerHttp' => Hyperf\\HttpServer\\Server::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Engine\nDESCRIPTION: Installs the Twig template engine using Composer. This allows you to use Twig templates in your Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require twig/twig\n```\n\n----------------------------------------\n\nTITLE: Returning JSON Response in Hyperf\nDESCRIPTION: This snippet demonstrates how to return a JSON response using the `json()` method of the `ResponseInterface`.  It sets the `Content-Type` header to `application/json` and accepts an array or an object implementing the `Arrayable` interface as input. The method returns a new `Psr7ResponseInterface` object containing the JSON data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/response.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function json(ResponseInterface $response): Psr7ResponseInterface\n    {\n        $data = [\n            'key' => 'value'\n        ];\n        return $response->json($data);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Snowflake Configuration File\nDESCRIPTION: Default configuration file for Snowflake in Hyperf, using Redis for Meta generation. It defines settings for Redis pool, Redis key, and the begin second for timestamp calculation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/snowflake.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Snowflake\\MetaGenerator\\RedisMilliSecondMetaGenerator;\nuse Hyperf\\Snowflake\\MetaGenerator\\RedisSecondMetaGenerator;\nuse Hyperf\\Snowflake\\MetaGeneratorInterface;\n\nreturn [\n    'begin_second' => MetaGeneratorInterface::DEFAULT_BEGIN_SECOND,\n    RedisMilliSecondMetaGenerator::class => [\n        // Redis Pool\n        'pool' => 'default',\n        // 用於計算 WorkerId 的 Key 鍵\n        'key' => RedisMilliSecondMetaGenerator::DEFAULT_REDIS_KEY\n    ],\n    RedisSecondMetaGenerator::class => [\n        // Redis Pool\n        'pool' => 'default',\n        // 用於計算 WorkerId 的 Key 鍵\n        'key' => RedisMilliSecondMetaGenerator::DEFAULT_REDIS_KEY\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Container in Hyperf with PHP\nDESCRIPTION: This snippet demonstrates how to initialize the dependency injection container in a Hyperf application. It uses the `Hyperf\\Di\\Container` class, the `Hyperf\\Di\\Definition\\DefinitionSourceFactory` to define the dependencies, and `Hyperf\\Context\\ApplicationContext` to set the container for the application. It also checks whether the created container implements the `Psr\\Container\\ContainerInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.2.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Di\\Definition\\DefinitionSourceFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = new Container((new DefinitionSourceFactory(true))());\n\nif (! $container instanceof \\Psr\\Container\\ContainerInterface) {\n    throw new RuntimeException('The dependency injection container is invalid.');\n}\nreturn ApplicationContext::setContainer($container);\n```\n\n----------------------------------------\n\nTITLE: Adding Prometheus Route in Hyperf\nDESCRIPTION: This snippet defines a route at /metrics that returns Prometheus metrics in text format. It retrieves the CollectorRegistry from the application context, renders the metrics, and returns them as a response. Worker state sharing needs to be handled manually if collecting metrics in a worker process.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\HttpServer\\Router\\Router;\n\nRouter::get('/metrics', function(){\n    $registry = Hyperf\\Context\\ApplicationContext::getContainer()->get(Prometheus\\CollectorRegistry::class);\n    $renderer = new Prometheus\\RenderTextFormat();\n    return $renderer->render($registry->getMetricFamilySamples());\n});\n```\n\n----------------------------------------\n\nTITLE: Using Cacheable Annotation\nDESCRIPTION: This code demonstrates the usage of the `Cacheable` annotation.  It caches the result of the `user` method, using 'user' as a prefix for cache keys, setting a TTL of 9000 seconds, and associating it with the 'user-update' listener for cache invalidation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/cache.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass UserService\n{\n    #[Cacheable(prefix: \"user\", ttl: 9000, listener: \"user-update\")]\n    public function user($id)\n    {\n        $user = User::query()->where('id',$id)->first();\n\n        if($user){\n            return $user->toArray();\n        }\n\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Portainer Data\nDESCRIPTION: These commands restore Portainer data from a backup by running a container that mounts the Portainer data volume and extracts the tar archive. First, a new Portainer service needs to be created using its creation command.  Then the archive is extracted into the data directory inside the temporary container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run -it --volumes-from portainer_container -v $(pwd):/backup --name importer --rm nginx bash\ncd /backup\ntar xf data.tar -C /\n```\n\n----------------------------------------\n\nTITLE: Calling Another Command from Command (PHP)\nDESCRIPTION: Demonstrates how to call another command from within a command's `handle()` method using the `call()` method. Provides a way to chain commands and execute them sequentially.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\nuse Psr\\Container\\ContainerInterface;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    protected ContainerInterface $container;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n\n        parent::__construct('foo');\n    }\n\n    public function configure()\n    {\n        parent::configure();\n        $this->setDescription('foo command');\n    }\n\n    public function handle()\n    {\n        $this->call('bar', [\n            '--foo' => 'foo'\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Custom Packer Implementation - PHP\nDESCRIPTION: Demonstrates how to create a custom `PackerInterface` implementation for the `Hyperf\\Testing\\Client`.  The provided packer simply returns the data as a string, bypassing the default JsonPacker. This is useful when the server returns plain strings instead of JSON.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/testing.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Testing\\Client;\nuse Hyperf\\Contract\\PackerInterface;\n\n$client = make(Client::class, [\n    'packer' => new class() implements PackerInterface {\n        public function pack($data): string\n        {\n            return $data;\n        }\n\n        public function unpack(string $data)\n        {\n            return $data;\n        }\n    },\n]);\n\n$result = $client->json('/user/0',[\n    'nickname' => 'Hyperf'\n]);\n```\n\n----------------------------------------\n\nTITLE: Enabling Soft Deletes in Hyperf Models\nDESCRIPTION: Soft deletes allow models to be 'deleted' without actually removing them from the database. Instead, the `deleted_at` column is set to the current timestamp. To enable soft deletes, the `Hyperf\\Database\\Model\\SoftDeletes` trait must be used in the model class. The trait automatically casts the `deleted_at` attribute to a `DateTime` or `Carbon` instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Model;\n\nuse Hyperf\\Database\\Model\\Model;\nuse Hyperf\\Database\\Model\\SoftDeletes;\n\nclass User extends Model\n{\n    use SoftDeletes;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Stack YML File\nDESCRIPTION: Defines the services, networks, and configurations for a Docker stack in a YAML file.  This file is used to deploy the application in the Docker Swarm cluster.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_54\n\nLANGUAGE: shell\nCODE:\n```\nversion: '3.7'\nservices:\n  your_project:\n    image: registry.cn-shanghai.aliyuncs.com/your_namespace/your_project:latest\n    ports:\n      - \"9501:9501\"\n    deploy:\n      replicas: 3\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 5\n      update_config:\n        parallelism: 2\n        delay: 5s\n        order: start-first\n    networks:\n      - default-network\n    configs:\n      - source: your_project_v1.1\n        target: /opt/www/.env\nconfigs:\n  your_project_v1.1:\n    file: /opt/www/your_project/.env\nnetworks:\n  default-network:\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Configure PgSQL Database Connection\nDESCRIPTION: This configuration example demonstrates how to set up a PgSQL database connection within the `config/autoload/databases.php` file. It defines connection parameters such as driver, host, database, port, username, password, and charset.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/quick-start.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/databases.php\nreturn [\n     // 其他配置\n    'pgsql'=>[\n        'driver' => env('DB_DRIVER', 'pgsql'),\n        'host' => env('DB_HOST', 'localhost'),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'port' => env('DB_PORT', 5432),\n        'username' => env('DB_USERNAME', 'postgres'),\n        'password' => env('DB_PASSWORD'),\n        'charset' => env('DB_CHARSET', 'utf8'),\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Model Pagination in Hyperf\nDESCRIPTION: This code snippet shows how to paginate data using an Eloquent model in Hyperf. It retrieves all users using the User model and paginates the results, displaying 10 users per page.  The paginate() method automatically handles the limit and offset based on the current page number.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/paginator.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// 展示應用中的所有使用者，每頁顯示 10 條資料\nreturn User::paginate(10);\n```\n\n----------------------------------------\n\nTITLE: Defining Crontab Tasks via Annotation - PHP\nDESCRIPTION: This code demonstrates defining a cron task using the `#[Crontab]` annotation in a Hyperf class. The annotation specifies the cron task's name, rule, callback method, and memo.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/crontab.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Task;\n\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Crontab\\Annotation\\Crontab;\nuse Hyperf\\Di\\Annotation\\Inject;\n\n#[Crontab(name: \"Foo\", rule: \"* * * * *\", callback: \"execute\", memo: \"这是一个示例的定时任务\")]\nclass FooTask\n{\n    #[Inject]\n    private StdoutLoggerInterface $logger;\n\n    public function execute()\n    {\n        $this->logger->info(date('Y-m-d H:i:s', time()));\n    }\n\n    #[Crontab(rule: \"* * * * *\", memo: \"foo\")]\n    public function foo()\n    {\n        var_dump('foo');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Message to NSQ\nDESCRIPTION: This code shows how to publish a message to an NSQ topic using the `Hyperf\\Nsq\\Nsq::publish()` method.  It retrieves the Nsq instance from the container, defines the topic and message, and then publishes the message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nsq.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Nsq\\Nsq;\n\n#[Command]\nclass NsqCommand extends HyperfCommand\n{\n    protected $name = 'nsq:pub';\n\n    public function handle()\n    {\n        /** @var Nsq $nsq */\n        $nsq = make(Nsq::class);\n        $topic = 'hyperf';\n        $message = 'This is message at ' . time();\n        $nsq->publish($topic, $message);\n\n        $this->line('success', 'info');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing phpunit with phpdbg for Code Coverage\nDESCRIPTION: This shell command executes PHPUnit with phpdbg to generate code coverage reports. The `phpdbg` command is used to run the PHPUnit tests, and the `-dmemory_limit` option sets the memory limit. The `-qrr` flags suppress output and handle errors. The `--colors=always` flag ensures colored output.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/testing.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nphpdbg -dmemory_limit=1024M -qrr ./vendor/bin/co-phpunit -c phpunit.xml --colors=always\n```\n\n----------------------------------------\n\nTITLE: Mapping Serializer Interface - Hyperf\nDESCRIPTION: This snippet shows how to manually map the `Hyperf\\Contract\\NormalizerInterface` implementation class when the `symfony/serializer` library is required in a Hyperf project. When `symfony/serializer` is required, the automatic mapping is no longer done. This requires the `Hyperf\\Utils\\Serializer\\SerializerFactory` and `Hyperf\\Utils\\Serializer\\Serializer` classes to be available.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog/changelog-v2.0.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Utils\\Serializer\\SerializerFactory;\nuse Hyperf\\Utils\\Serializer\\Serializer;\n\nreturn [\n    Hyperf\\Contract\\NormalizerInterface::class => new SerializerFactory(Serializer::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Enable Soft Deletes\nDESCRIPTION: Shows how to enable soft deletes for a model by using the `Hyperf\\Database\\Model\\SoftDeletes` trait.  This trait adds a `deleted_at` column to the model, which is used to mark records as deleted instead of permanently removing them from the database.  The trait automatically casts the `deleted_at` attribute to a `DateTime / Carbon` instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Model;\n\nuse Hyperf\\Database\\Model\\Model;\nuse Hyperf\\Database\\Model\\SoftDeletes;\n\nclass User extends Model\n{\n    use SoftDeletes;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fix Aliyun OSS Iconv Error (Alpine)\nDESCRIPTION: These snippets demonstrate how to fix the iconv error when uploading files to Aliyun OSS using the `aliyuncs/oss-sdk-php` component in Alpine-based Docker images.  The issue is related to character set encoding. The solution is to install `gnu-libiconv` and set the `LD_PRELOAD` environment variable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/questions.md#_snippet_8\n\nLANGUAGE: Docker\nCODE:\n```\nRUN apk --no-cache --allow-untrusted --repository http://dl-cdn.alpinelinux.org/alpine/edge/community/ add gnu-libiconv=1.15-r2\nENV LD_PRELOAD /usr/lib/preloadable_libiconv.so\n```\n\nLANGUAGE: Docker\nCODE:\n```\nRUN apk add --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/v3.13/community/ gnu-libiconv=1.15-r3\nENV LD_PRELOAD /usr/lib/preloadable_libiconv.so php\n```\n\n----------------------------------------\n\nTITLE: Using Custom Validator in Request - PHP\nDESCRIPTION: This snippet shows how to use the custom `foo` validator in a FormRequest class. The `name` field is validated using the `foo` rule, meaning its value must be equal to 'foo' for the validation to pass.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_53\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Request;\n\nuse Hyperf\\Validation\\Request\\FormRequest;\n\nclass DemoRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     */\n    public function rules(): array\n    {\n        return [\n            // 使用 foo 驗證器\n            'name' => 'foo'\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Model::resolveRelationUsing() Function\nDESCRIPTION: The commit adds `Model::resolveRelationUsing()` method to Hyperf. The method can set a dynamic relation for the model, which could be helpful when resolving model relationships dynamically.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/3.0.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nModel::resolveRelationUsing()\n```\n\n----------------------------------------\n\nTITLE: Installing SQL Server Driver for Hyperf (Bash)\nDESCRIPTION: This snippet shows the command to install the SQL Server driver for Hyperf using Composer. It is in the incubation stage and requires `Swoole >= 5.1.0` and the `pdo_odbc` extension enabled during compilation with `--with-swoole-odbc`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/quick-start.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/database-sqlserver-incubator\n```\n\n----------------------------------------\n\nTITLE: Overriding Context Value with Hyperf\\Context\\Context::override() in PHP\nDESCRIPTION: This snippet demonstrates how to override a value in the current coroutine's context using the `Hyperf\\Context\\Context::override()` method. It takes the key and a closure as parameters. The closure receives the current value (if it exists) and returns the new value to be stored in the context.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/coroutine.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Hyperf\\Context\\Context;\n\n// 从协程上下文取出 $request 对象并设置 key 为 foo 的 Header，然后再保存到协程上下文中\n$request = Context::override(ServerRequestInterface::class, function (ServerRequestInterface $request) {\n    return $request->withAddedHeader('foo', 'bar');\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Histogram Bucket Registration\nDESCRIPTION: This PHP code demonstrates how to register a custom Histogram with specific bucket configurations using the Prometheus driver. This registration occurs before the main server starts, ensuring that the custom Histogram is available when the `MetricFactory` is used.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Listener;\n\nuse Hyperf\\Config\\Annotation\\Value;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BeforeMainServerStart;\nuse Prometheus\\CollectorRegistry;\n\nclass OnMainServerStart implements ListenerInterface\n{\n    protected $registry;\n\n    public function __construct(CollectorRegistry $registry)\n    {\n        $this->registry = $registry;\n    }\n\n    public function listen(): array\n    {\n        return [\n            BeforeMainServerStart::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        $this->registry->registerHistogram(\n            config(\"metric.metric.prometheus.namespace\"), \n            'test',\n            'help_message', \n            ['labelName'], \n            [0.1, 1, 2, 3.5]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Service with a Protocol in Hyperf Jet\nDESCRIPTION: This code snippet shows how to register a service using the `ServiceManager` class and bind it to a specific protocol. It also sets static node information for the service, including the host and port.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/jet.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Jet\\ServiceManager;\n\n// 綁定 CalculatorService 與 jsonrpc 協議，同時設定靜態的節點信息\nServiceManager::register($service = 'CalculatorService', $protocol = 'jsonrpc', [\n    ServiceManager::NODES => [\n        [$host = '127.0.0.1', $port = 9503],\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Define Manual Service Consumer Class\nDESCRIPTION: Defines a manual service consumer class extending AbstractServiceClient and implementing the service interface. It specifies the service name and protocol.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/json-rpc.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\JsonRpc;\n\nuse Hyperf\\RpcClient\\AbstractServiceClient;\n\nclass CalculatorServiceConsumer extends AbstractServiceClient implements CalculatorServiceInterface\n{\n    /**\n     * 定義對應服務提供者的服務名稱\n     */\n    protected string $serviceName = 'CalculatorService';\n    \n    /**\n     * 定義對應服務提供者的服務協議\n     */\n    protected string $protocol = 'jsonrpc-http';\n\n    public function add(int $a, int $b): int\n    {\n        return $this->__request(__FUNCTION__, compact('a', 'b'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Component - HTML\nDESCRIPTION: Shows how to pass data to a Blade component using HTML attributes. Regular values are passed directly, while PHP expressions and variables are passed using attributes prefixed with a colon (:).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_30\n\nLANGUAGE: html\nCODE:\n```\n<x-alert type=\"error\" :message=\"$message\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining a UserRegistered Event (PHP)\nDESCRIPTION: This code defines a UserRegistered event class, which holds the user data. The event is triggered when a user is registered, and listeners can access the user data through the public $user property. This code utilizes the \\App\\Event namespace.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/event.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Event;\n\nclass UserRegistered\n{\n    // 建議這裡定義成 public 屬性，以便監聽器對該屬性的直接使用，或者你提供該屬性的 Getter\n    public $user;\n    \n    public function __construct($user)\n    {\n        $this->user = $user;    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Filesystem Component\nDESCRIPTION: This command installs the core Hyperf Filesystem component using Composer.  It's a prerequisite for using any of the filesystem adapters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/filesystem.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/filesystem\n```\n\n----------------------------------------\n\nTITLE: Updating Service with Registry Authentication\nDESCRIPTION: Updates a Docker service with registry authentication, typically after modifying the repository password in Portainer. This ensures the service can still pull images from the registry.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\ndocker service update --with-registry-auth service_name\n```\n\n----------------------------------------\n\nTITLE: Cross Join Statement in Hyperf\nDESCRIPTION: This code demonstrates how to perform a cross join using the `crossJoin` method. It creates a Cartesian product between the 'sizes' and 'colours' tables.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('sizes')\n    ->crossJoin('colours')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Access Inverse Polymorphic Relation (PHP)\nDESCRIPTION: This code demonstrates how to access the model related to a polymorphic relation using the `imageable` method on the `Image` model.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Model\\Image;\n\n$image = Image::find(1);\n\n$imageable = $image->imageable;\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Hyperf Project within Docker\nDESCRIPTION: This command, when executed within the Docker container, creates a new Hyperf project using the `hyperf/hyperf-skeleton` package. It downloads the dependencies and sets up the project in the container's working directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/install.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer create-project hyperf/hyperf-skeleton\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Template Engine in Hyperf\nDESCRIPTION: Provides an example implementation for integrating a custom template engine (`TemplateEngine`) into the Hyperf view component. This involves creating a class that implements the `EngineInterface` and defining the rendering logic.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Engine;\n\nuse Hyperf\\View\\Engine\\EngineInterface;\n\nclass TemplateEngine implements EngineInterface\n{\n    public function render($template, $data, $config): string\n    {\n        // 例項化對應的模板引擎的例項\n        $engine = new TemplateInstance();\n        // 並呼叫對應的渲染方法\n        return $engine->render($template, $data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create RPC Service - Hyperf\nDESCRIPTION: Creates an RPC service class `CalculatorService` that implements the `CalculatorServiceInterface`. It uses the `RpcService` annotation to define the service name, server, and protocol.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/rpc-multiplex.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\RPC;\n\nuse App\\JsonRpc\\CalculatorServiceInterface;\nuse Hyperf\\RpcMultiplex\\Constant;\nuse Hyperf\\RpcServer\\Annotation\\RpcService;\n\n#[RpcService(name: \"CalculatorService\", server: \"rpc\", protocol: Constant::PROTOCOL_DEFAULT)]\nclass CalculatorService implements CalculatorServiceInterface\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Modify String Field to Allow Null Values in Hyperf Schema\nDESCRIPTION: This example shows how to modify a string field to allow null values while also changing its length in a Hyperf schema. It updates the 'name' field in the 'users' table to have a length of 50 and be nullable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nSchema::table('users', function (Blueprint $table) {\n    // 將字段的長度修改為 50 並允許為空\n    $table->string('name', 50)->nullable()->change();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Swarm\nDESCRIPTION: This command initializes a Docker Swarm cluster. It generates a join token for adding worker nodes to the swarm. Requires Docker Swarm.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_44\n\nLANGUAGE: shell\nCODE:\n```\n$ docker swarm init\n```\n\n----------------------------------------\n\nTITLE: Update Dockerfile Instructions - Dockerfile\nDESCRIPTION: This Dockerfile snippet shows how to include `php bin/hyperf.php` in the image build process.  This pre-creates proxy classes and annotation caches to optimize startup time in production environments.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/2.0.md#_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nENV TIMEZONE=${timezone:-\"Asia/Shanghai\"} \\\n    APP_ENV=prod \\\n    SCAN_CACHEABLE=(true)\n\nCOPY . /opt/www\nRUN composer install --no-dev -o && php bin/hyperf.php\n\nEXPOSE 9501\n\nENTRYPOINT [\"php\", \"/opt/www/bin/hyperf.php\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Defining RPC Interface with Object Parameters and Return Type\nDESCRIPTION: This snippet defines an interface for a calculator service. The `sum` method takes two `MathValue` objects as parameters and returns a `MathValue` object as the result. This demonstrates how to use custom PHP objects in RPC interfaces when serialization/deserialization is properly configured.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/json-rpc.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\JsonRpc;\n\ninterface CalculatorServiceInterface\n{\n    public function sum(MathValue $v1, MathValue $v2): MathValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Install Tencent COS Adapter (Flysystem v2.0)\nDESCRIPTION: This command installs the Tencent COS adapter for Flysystem v4.0 using Composer. This adapter allows you to interact with Tencent Cloud Object Storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/filesystem.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-cos:^4.0\"\n```\n\n----------------------------------------\n\nTITLE: Creating a NATS consumer class in Hyperf\nDESCRIPTION: This PHP code defines a NATS consumer class named `DemoConsumer` within a Hyperf application. It uses the `Hyperf\\Nats\\Annotation\\Consumer` annotation to configure the consumer's subject, queue, name, and number of instances.  The `consume` method is where the message processing logic resides.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nats.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Nats\\Consumer;\n\nuse Hyperf\\Nats\\AbstractConsumer;\nuse Hyperf\\Nats\\Annotation\\Consumer;\nuse Hyperf\\Nats\\Message;\n\n#[Consumer(subject: 'hyperf.demo', queue: 'hyperf.demo', name: 'DemoConsumer', nums: 1)]\nclass DemoConsumer extends AbstractConsumer\n{\n    public function consume(Message $payload)\n    {\n        // Do something...\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Access Route Parameter in Hyperf\nDESCRIPTION: This snippet demonstrates how to access route parameters inside a controller. Uses the `route` method of the `RequestInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/router.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function index(RequestInterface $request)\n{\n        // 存在則返回，不存在則返回默認值 null\n        $id = $request->route('id');\n        // 存在則返回，不存在則返回默認值 0\n        $id = $request->route('id', 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Component - HTML\nDESCRIPTION: Demonstrates how to use the registered `Alert` component in a Blade template using the `<x-alert/>` tag. This renders the component's view, passing any provided attributes to the component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n<x-alert/>\n<x-package-alert/>\n```\n\n----------------------------------------\n\nTITLE: Coroutine WaitGroup Usage Example\nDESCRIPTION: Demonstrates the use of Hyperf's WaitGroup to synchronize multiple coroutines.  This example creates two coroutines and uses WaitGroup to ensure the main coroutine waits for both sub-coroutines to complete before continuing. Requires the Hyperf Coroutine component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/coroutine.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$wg = new \\Hyperf\\Coroutine\\WaitGroup();\n// 计数器加二\n$wg->add(2);\n// 创建协程 A\nco(function () use ($wg) {\n    // some code\n    // 计数器减一\n    $wg->done();\n});\n// 创建协程 B\nco(function () use ($wg) {\n    // some code\n    // 计数器减一\n    $wg->done();\n});\n// 等待协程 A 和协程 B 运行完成\n$wg->wait();\n```\n\n----------------------------------------\n\nTITLE: Create Hyperf Project Inside Docker\nDESCRIPTION: This command creates a new Hyperf project inside the Docker container, using the hyperf-skeleton as a base.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/install.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncd /data/project\ncomposer create-project hyperf/hyperf-skeleton\n```\n\n----------------------------------------\n\nTITLE: Adding Strict Mode Support for Integer and Boolean in Hyperf\nDESCRIPTION: This commit adds strict mode support for `Integer` and `Boolean` types within the Hyperf framework. The purpose is likely to provide more robust type handling and validation for these data types.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/3.0.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nInteger\nBoolean\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Column Names\nDESCRIPTION: This snippet shows how to customize the column names for `created_at` and `updated_at` using the `CREATED_AT` and `UPDATED_AT` constants.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    const CREATED_AT = 'creation_date';\n\n    const UPDATED_AT = 'last_update';\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Watcher\nDESCRIPTION: This command installs the hyperf/watcher package as a development dependency using Composer. This package provides file watching and automatic server restart capabilities for Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/watcher.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/watcher --dev\n```\n\n----------------------------------------\n\nTITLE: CacheAhead Annotation Example\nDESCRIPTION: Illustrates the use of the `CacheAhead` annotation, which pre-fetches the cache after a specified time. In the example, it initializes cache every 10 seconds from 7200 to 600 seconds until the first time success.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/cache.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\CacheAhead;\n\nclass UserService\n{\n    #[CacheAhead(prefix: \"user\", ttl: 7200, aheadSeconds: 600, lockSeconds: 10)]\n    public function user(int $id): array\n    {\n        $user = User::query()->find($id);\n\n        return [\n            'user' => $user->toArray(),\n            'uuid' => $this->unique(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cross Join Statement - PHP\nDESCRIPTION: Demonstrates a cross join using `crossJoin()`. Cross joins produce a cartesian product between the tables.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('sizes')\n    ->crossJoin('colours')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Job Definition\nDESCRIPTION: Illustrates an incorrect way to define a Hyperf asynchronous queue job by including the ContainerInterface as a dependency. This is discouraged because it leads to larger serialized job sizes and potential issues with serialization of complex objects.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/async-queue.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Job;\n\nuse Hyperf\\AsyncQueue\\Job;\nuse Psr\\Container\\ContainerInterface;\n\nclass ExampleJob extends Job\n{\n    public $container;\n\n    public $params;\n\n    public function __construct(ContainerInterface $container, $params)\n    {\n        $this->container = $container;\n        $this->params = $params;\n    }\n\n    public function handle()\n    {\n        // 根据参数处理具体逻辑\n        var_dump($this->params);\n    }\n}\n\n$job = make(ExampleJob::class);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring phpunit.xml for Coverage Reporting (XML)\nDESCRIPTION: This XML snippet configures PHPUnit to generate code coverage reports. It specifies the directories to include for coverage analysis, directories to exclude, and the output directory for the HTML report.  The configuration also sets up test suites and logging.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/testing.md#_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         bootstrap=\"./test/bootstrap.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n    <php>\n        <!-- other PHP.ini or environment variables -->\n        <ini name=\"memory_limit\" value=\"-1\" />\n    </php>\n    <testsuites>\n        <testsuite name=\"Tests\">\n            // 需要执行单测的测试案例目录\n            <directory suffix=\"Test.php\">./test</directory>\n        </testsuite>\n    </testsuites>\n    <coverage includeUncoveredFiles=\"true\"\n              processUncoveredFiles=\"true\"\n              pathCoverage=\"false\"\n              ignoreDeprecatedCodeUnits=\"true\"\n              disableCodeCoverageIgnore=\"false\">\n        <include>\n            // 需要统计单元测试覆盖率的文件\n            <directory suffix=\".php\">./app</directory>\n        </include>\n        <exclude>\n            // 生产单元测试覆盖率时，需要忽略的文件\n            <directory suffix=\".php\">./app/excludeFile</directory>\n        </exclude>\n        <report>\n            <html outputDirectory=\"test/cover/\" lowUpperBound=\"50\" highLowerBound=\"90\"/>\n        </report>\n    </coverage>\n    <logging>\n        <junit outputFile=\"test/junit.xml\"/>\n    </logging>\n\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Defining a Many-to-Many Relationship in Hyperf\nDESCRIPTION: This code snippet defines a many-to-many relationship between the `User` and `Role` models using the `belongsToMany` method.  The `roles` method within the `User` model establishes the relationship.  By default, Hyperf expects a pivot table named `role_user`. Requires the `Hyperf\\DbConnection\\Model\\Model` base class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/relationship.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    public function roles()\n    {\n        return $this->belongsToMany(Role::class);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Define Custom Exception Class - Hyperf PHP\nDESCRIPTION: Defines a custom exception class `FooException` in Hyperf by extending `Hyperf\\Server\\Exception\\ServerException`. This allows you to create specific exception types for your application's business logic, which can then be handled by custom exception handlers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/exception-handler.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Exception;\n\nuse App\\Constants\\ErrorCode;\nuse Hyperf\\Server\\Exception\\ServerException;\nuse Throwable;\n\nclass FooException extends ServerException\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Gitlab Initial Root Password\nDESCRIPTION: This command retrieves the initial root password for the Gitlab service from a file inside the Docker container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ndocker exec gitlab cat /etc/gitlab/initial_root_password\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Compose Deployment\nDESCRIPTION: Defines a Docker Compose deployment configuration for a service named `demo`. The configuration specifies the image, environment variables, ports, deployment settings, networks, and configs.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_25\n\nLANGUAGE: yml\nCODE:\n```\nversion: '3.7'\nservices:\n  demo:\n    image: $REGISTRY_URL/$PROJECT_NAME:test\n    environment:\n      - \"APP_PROJECT=demo\"\n      - \"APP_ENV=test\"\n    ports:\n      - 9501:9501\n    deploy:\n      replicas: 1\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 5\n      update_config:\n        parallelism: 2\n        delay: 5s\n        order: start-first\n    networks:\n      - default-network\n    configs:\n      - source: demo_v1.0\n        target: /opt/www/.env\nconfigs:\n  demo_v1.0:\n    external: true\nnetworks:\n  default-network:\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Register Gitlab Runner Shell\nDESCRIPTION: This command registers a Gitlab Runner with a Gitlab instance.  It requires the Gitlab CI coordinator URL, a registration token, a description, tags, and an executor. Replace `http://your-ip/` with the actual Gitlab URL.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ sudo gitlab-runner register --clone-url http://your-ip/\n\nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):\nhttp://gitlab.xxx.cc/\nPlease enter the gitlab-ci token for this runner:\nxxxxx\nPlease enter the gitlab-ci description for this runner:\nxxx\nPlease enter the gitlab-ci tags for this runner (comma separated):\nbuilder\nPlease enter the executor: docker-ssh, shell, docker+machine, docker-ssh+machine, docker, parallels, ssh, virtualbox, kubernetes:\nshell\n```\n\n----------------------------------------\n\nTITLE: Handling Plurals in Translation Strings\nDESCRIPTION: This shows how to define plural rules using the `|` character to separate singular and plural forms, or by defining numeric ranges. The `trans_choice` function is used to select the correct form based on a given count.  The TranslatorInterface's transChoice method is also available.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/translation.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n'apples' => 'There is one apple|There are many apples',\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n'apples' => '{0} There are none|[1,19] There are some|[20,*] There are many',\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\necho trans_choice('messages.apples', 10);\n```\n\n----------------------------------------\n\nTITLE: Publish Multiple Messages to NSQ\nDESCRIPTION: This PHP code demonstrates how to publish multiple messages to an NSQ topic at once using the `Hyperf\\Nsq\\Nsq::publish()` method. It passes an array of strings as the second argument.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nsq.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Nsq\\Nsq;\n\n#[Command]\nclass NsqCommand extends HyperfCommand\n{\n    protected $name = 'nsq:pub';\n\n    public function handle()\n    {\n        /** @var Nsq $nsq */\n        $nsq = make(Nsq::class);\n        $topic = 'hyperf';\n        $messages = [\n            'This is message 1 at ' . time(),\n            'This is message 2 at ' . time(),\n            'This is message 3 at ' . time(),\n        ];\n        $nsq->publish($topic, $messages);\n\n        $this->line('success', 'info');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in Hyperf Nano\nDESCRIPTION: Shows how to add an exception handler to a Hyperf Nano application.  It throws an exception within a route handler and then catches it with a custom exception handler that returns a custom response. Requires the `hyperf/nano` package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nano.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\HttpMessage\\Stream\\SwooleStream;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->get('/', function () {\n    throw new \\Exception();\n});\n\n$app->addExceptionHandler(function ($throwable, $response) {\n    return $response->withStatus('418')\n        ->withBody(new SwooleStream('I\\'m a teapot'));\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Enum with Translation Message\nDESCRIPTION: This code defines an enum with a message key that references a translation string. The `getMessage` method will use the translation component to retrieve the translated message. Dependencies: `Hyperf\\Constants\\Annotation\\Constants`, `Hyperf\\Constants\\Annotation\\Message`, `Hyperf\\Constants\\EnumConstantsTrait`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/constants.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Constants\\Annotation\\Constants;\nuse Hyperf\\Constants\\Annotation\\Message;\nuse Hyperf\\Constants\\EnumConstantsTrait;\n\n#[Constants]\nenum ErrorCode: int\n{\n\n    #[Message(\"params.invalid\")]\n    case PARAMS_INVALID = 1000;\n}\n\n$message = ErrorCode::SERVER_ERROR->getMessage(['param' => 'user_id']);\n```\n\n----------------------------------------\n\nTITLE: Flushing Cache with Custom Key Argument\nDESCRIPTION: This example showcases how to adapt the `DeleteListenerEvent` when using custom cache key `value` in the `Cacheable` annotation. It modifies the `$arguments` variable to match the expected input for the cache key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/cache.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Cache\\Listener\\DeleteListenerEvent;\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\n\nclass SystemService\n{\n    #[Inject]\n    protected EventDispatcherInterface $dispatcher;\n\n    public function flushCache($userId)\n    {\n        $this->dispatcher->dispatch(new DeleteListenerEvent('user-update', ['id' => $userId]));\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Memory Adapter for Socket.IO Rooms in Hyperf\nDESCRIPTION: This PHP configuration shows how to switch the Socket.IO room adapter from the default Redis adapter to the Memory adapter in Hyperf.  The Memory adapter is suitable for single-worker environments and provides faster performance compared to Redis.  However, it does not support multi-process or distributed setups.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/socketio-server.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\SocketIOServer\\Room\\AdapterInterface::class => \\Hyperf\\SocketIOServer\\Room\\MemoryAdapter::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Conditional Pivot Data in Hyperf Resources\nDESCRIPTION: This PHP code demonstrates how to access data from a many-to-many relationship's pivot table using the `whenPivotLoaded` method. The 'expires_at' attribute is included only if the 'role_user' pivot table information is available.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'expires_at' => $this->whenPivotLoaded('role_user', function () {\n                return $this->pivot->expires_at;\n            }),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Logic in handle() (PHP)\nDESCRIPTION: Implements the command logic within the `handle()` method.  This is the entry point for command execution.  This example outputs 'Hello Hyperf.' to the console using the `line` helper method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\n\n#[Command]\nclass FooCommand extends HyperfCommand\n{\n    /**\n     * 執行的命令行\n     */\n    protected ?string $name = 'foo:hello';\n\n    public function handle()\n    {\n        // 通過內置方法 line 在 Console 輸出 Hello Hyperf.\n        $this->line('Hello Hyperf.', 'info');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Gitlab Runner\nDESCRIPTION: Registers the Gitlab Runner with a Gitlab instance.  Replace `http://your-ip/` with the actual internal IP of the Gitlab server. The command prompts for the Gitlab coordinator URL, token, description, tags, and executor type.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo gitlab-runner register --clone-url http://your-ip/\n\nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):\nhttp://gitlab.xxx.cc/\nPlease enter the gitlab-ci token for this runner:\nxxxxx\nPlease enter the gitlab-ci description for this runner:\nxxx\nPlease enter the gitlab-ci tags for this runner (comma separated):\nbuilder\nPlease enter the executor: docker-ssh, shell, docker+machine, docker-ssh+machine, docker, parallels, ssh, virtualbox, kubernetes:\nshell\n```\n\n----------------------------------------\n\nTITLE: Creating a Consumer Process for Other Queue in Hyperf\nDESCRIPTION: This PHP code snippet defines a consumer process for a specific queue named 'other' within the Hyperf framework. It extends the `ConsumerProcess` class and uses the `Process` annotation to register the process. The `$queue` property specifies the queue to consume messages from.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\AsyncQueue\\Process\\ConsumerProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process]\nclass OtherConsumerProcess extends ConsumerProcess\n{\n    protected string $queue = 'other';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Controller for Pushing Messages (Traditional)\nDESCRIPTION: This code defines a controller that uses the `QueueService` to push a message onto the asynchronous queue using the traditional method. It injects the `QueueService` and calls the `push` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse App\\Service\\QueueService;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass QueueController extends AbstractController\n{\n    #[Inject]\n    protected QueueService $service;\n\n    /**\n     * 傳統模式投遞消息\n     */\n    public function index()\n    {\n        $this->service->push([\n            'group@hyperf.io',\n            'https://doc.hyperf.io',\n            'https://www.hyperf.io',\n        ]);\n\n        return 'success';\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: gRPC Streaming Client Example\nDESCRIPTION: This PHP snippet shows an example of a gRPC client using a two-way streaming mode. It initializes a RouteGuideClient, creates a RouteNote, pushes the note to the client, and receives a response. Remember to handle disconnection exceptions in streaming mode.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/grpc.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?\npublic function hello()\n{\n    $client = new RouteGuideClient('127.0.0.1:50051');\n\n    $note = new RouteNote();\n\n    $call = $client->routeChat();\n    $call->push($note);\n    $call->push($note);\n\n    /** @var RouteNote $note */\n    [$note,] = $call->recv();\n    [$note,] = $call->recv();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Injection Container in Hyperf\nDESCRIPTION: This snippet demonstrates how to configure the dependency injection container in a Hyperf application. It initializes a new Container instance, checks if it implements the `Psr\\Container\\ContainerInterface`, and then sets it as the application container using `ApplicationContext::setContainer($container)`. This configuration is typically found in `config/container.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/1.1.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Di\\Definition\\DefinitionSourceFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = new Container((new DefinitionSourceFactory(true))());\n\nif (! $container instanceof \\Psr\\Container\\ContainerInterface) {\n    throw new RuntimeException('The dependency injection container is invalid.');\n}\nreturn ApplicationContext::setContainer($container);\n```\n\n----------------------------------------\n\nTITLE: Returning Resource from Controller\nDESCRIPTION: This PHP code shows how to return a Hyperf resource directly from a controller action. The `toResponse()` method is called to generate the final response object, which can then be returned to the client. Alternatively, returning the resource instance will also work.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\User as UserResource;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserResource(User::find(1)))->toResponse();\n    }\n\n    public function info()\n    {\n        return new UserResource(User::find(1));\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Context Value - Hyperf\nDESCRIPTION: This code snippet demonstrates how to retrieve a value from the current coroutine's context using the `Context::get()` method in Hyperf. The `get()` method takes a key and an optional default value as input. If the key exists in the context, the corresponding value is returned; otherwise, the default value is returned.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/coroutine.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Context\\Context;\n\n// 從當前協程上下文中取出 key 為 foo 的值，如不存在則返回 bar 字串\n$foo = Context::get('foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Regenerate Models with Type Hints in PHP\nDESCRIPTION: This script regenerates Hyperf models to include type hints, which are required due to type restrictions added to the model base class in version 3.0. The script uses the regenerate-models.php tool provided by the hyperf/code-generator package and should be executed in the project directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog-v3.0.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp vendor/bin/regenerate-models.php $PWD/app/Model\n```\n\n----------------------------------------\n\nTITLE: Define Polymorphic One-to-Many Relation (PHP)\nDESCRIPTION: This code defines the polymorphic one-to-many relationships.  The `Book` and `User` models can both have many `Image` models through the `imageable` relation. The `Image` model uses `morphTo` to define the inverse relation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Model;\n\nclass Image extends Model\n{\n    public function imageable()\n    {\n        return $this->morphTo();\n    }\n}\n\nclass Book extends Model\n{\n    public function images()\n    {\n        return $this->morphMany(Image::class, 'imageable');\n    }\n}\n\nclass User extends Model\n{\n    public function images()\n    {\n        return $this->morphMany(Image::class, 'imageable');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Parameter Grouping - PHP\nDESCRIPTION: This snippet demonstrates how to group where clauses using a closure to create more complex boolean logic. The example creates a query that selects users where the name is John and (votes are greater than 100 or the title is Admin).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('name', '=', 'John')\n    ->where(function ($query) {\n        $query->where('votes', '>', 100)\n                ->orWhere('title', '=', 'Admin');\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Generating PHP Code from protobuf Definition\nDESCRIPTION: This command uses the 'protoc' compiler to generate PHP code from the 'grpc.proto' file. The '--php_out=grpc/' option specifies the output directory for the generated code. This process requires 'protoc' to be installed and configured correctly.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/grpc.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# 使用 linux 包管理工具安裝 protoc，下面以 alpine 為例，也可以參考 hyperf-skeleton 下的 Dockerfile\napk add protobuf\n\n# 使用 protoc 自動生成程式碼\nprotoc --php_out=grpc/ grpc.proto\n```\n\n----------------------------------------\n\nTITLE: Paginating Resources in Controller (PHP)\nDESCRIPTION: This PHP snippet shows how to paginate data using Hyperf's resource system. It creates a `UserCollection` from a paginated `User` model and returns the response.  It utilizes the `toResponse()` method to automatically handle the response formatting.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\UserCollection;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserCollection(User::paginate()))->toResponse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure WebSocket Route\nDESCRIPTION: This code adds a route for the WebSocket server in the `config/routes.php` file. It associates the root path ('/') with the `App\\Controller\\WebSocketController` class for the WebSocket server named 'ws'.  The `Router::addServer` function is used to specify which server the route applies to, using the 'name' configured in `config/autoload/server.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/websocket-server.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nRouter::addServer('ws', function () {\n    Router::get('/', 'App\\Controller\\WebSocketController');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Translation Keys in Error Messages\nDESCRIPTION: This snippet demonstrates how to use translation keys in the `Message` annotation of an enum. The `getMessage()` method will then use the `hyperf/translation` component to translate the key, allowing for internationalized error messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/constants.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Constants\\Annotation\\Constants;\nuse Hyperf\\Constants\\Annotation\\Message;\nuse Hyperf\\Constants\\EnumConstantsTrait;\n\n#[Constants]\nenum ErrorCode: int\n{\n\n    #[Message(\"params.invalid\")]\n    case PARAMS_INVALID = 1000;\n}\n\n$message = ErrorCode::SERVER_ERROR->getMessage(['param' => 'user_id']);\n```\n\n----------------------------------------\n\nTITLE: Regenerate Hyperf Models\nDESCRIPTION: This command requires the hyperf/code-generator package and regenerates the model classes based on the current database schema and configurations. This is necessary when upgrading to Hyperf 3.0 due to type hints added to the base Model class. The $PWD/app/Model argument specifies the directory containing the models to be regenerated.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog-v3.0.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp vendor/bin/regenerate-models.php $PWD/app/Model\n```\n\n----------------------------------------\n\nTITLE: Getting Results with Db::select() and get() in Hyperf\nDESCRIPTION: Demonstrates retrieving results from the database using both `Db::select()` which returns an array, and `Db::table('user')->get()` which returns a `Hyperf\\Collection\\Collection` of `stdClass` objects.  It shows basic usage for fetching all records and fetching specific columns.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\DbConnection\\Db;\n\n$users = Db::select('SELECT * FROM user;');\n$users = Db::table('user')->get();\n$users = Db::table('user')->select('name', 'gender as user_gender')->get();\n```\n\n----------------------------------------\n\nTITLE: Custom Annotation Collector Configuration PHP\nDESCRIPTION: This configuration snippet shows how to configure a custom annotation collector in Hyperf.  By adding the `CustomCollector::class` to the `collectors` array, the framework will automatically cache the collected annotations for reuse on subsequent server restarts, ensuring that the custom annotation logic is consistently applied.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/annotation.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    // 注意在 config/autoload 文件下的配置文件则无 annotations 这一层\n    'annotations' => [\n        'scan' => [\n            'collectors' => [\n                CustomCollector::class,\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Array Option Output (Bash)\nDESCRIPTION: Shows the output when running the command with multiple values for the array option. Demonstrates how the option values are combined into an array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/hyperf.php demo:command\n# 輸出\narray(0) {\n}\n\n$ php bin/hyperf.php demo:command --name Hyperf --name Swoole\n# 輸出\narray(2) {\n  [0]=>\n  string(6) \"Hyperf\"\n  [1]=>\n  string(6) \"Swoole\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Config Provider Scan (Old)\nDESCRIPTION: This snippet represents the old structure for the 'scan' configuration within the ConfigProvider class. The 'paths' and 'collectors' were directly under 'scan', without the 'annotations' layer. This is the structure before the change introduced in Hyperf v1.1.0.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog/1.1.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'scan' => [\n    'paths' => [\n        __DIR__,\n    ],\n    'collectors' => [],\n],\n```\n\n----------------------------------------\n\nTITLE: Overridden Coroutine Class (Class Map) PHP\nDESCRIPTION: This code provides an overridden `Coroutine` class intended to replace the default Hyperf `Coroutine` class via class mapping.  It redirects the `create()` method to the custom `App\\Kernel\\Context\\Coroutine` class to ensure that context copying logic is executed when new coroutines are created. Other methods are proxies to the original Hyperf coroutine class. This Coroutine file uses the Hyperf\\Coroutine namespace.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/annotation.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n *\n * @link     https://www.hyperf.io\n * @document https://hyperf.wiki\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\n\nnamespace Hyperf\\Coroutine;\n\nuse App\\Kernel\\Context\\Coroutine as Go;\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Engine\\Coroutine as Co;\nuse Hyperf\\Engine\\Exception\\CoroutineDestroyedException;\nuse Hyperf\\Engine\\Exception\\RunningInNonCoroutineException;\nuse Throwable;\n\nclass Coroutine\n{\n    /**\n     * Returns the current coroutine ID.\n     * Returns -1 when running in non-coroutine context.\n     */\n    public static function id(): int\n    {\n        return Co::id();\n    }\n\n    public static function defer(callable $callable): void\n    {\n        Co::defer(static function () use ($callable) {\n            try {\n                $callable();\n            } catch (Throwable $exception) {\n                di()->get(StdoutLoggerInterface::class)->error((string) $exception);\n            }\n        });\n    }\n\n    public static function sleep(float $seconds): void\n    {\n        usleep(intval($seconds * 1000 * 1000));\n    }\n\n    /**\n     * Returns the parent coroutine ID.\n     * Returns 0 when running in the top level coroutine.\n     * @throws RunningInNonCoroutineException when running in non-coroutine context\n     * @throws CoroutineDestroyedException when the coroutine has been destroyed\n     */\n    public static function parentId(?int $coroutineId = null): int\n    {\n        return Co::pid($coroutineId);\n    }\n\n    /**\n     * @return int Returns the coroutine ID of the coroutine just created.\n     *             Returns -1 when coroutine create failed.\n     */\n    public static function create(callable $callable): int\n    {\n        return di()->get(Go::class)->create($callable);\n    }\n\n    public static function inCoroutine(): bool\n    {\n        return Co::id() > 0;\n    }\n\n    public static function stats(): array\n    {\n        return Co::stats();\n    }\n\n    public static function exists(int $id): bool\n    {\n        return Co::exists($id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Prometheus Settings\nDESCRIPTION: This PHP code configures the Prometheus driver for the Hyperf metric component, including the driver class, mode (scrape or push), namespace, scrape host/port/path, and push host/port/interval.  It supports both scrape and push modes for Prometheus.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Metric\\Adapter\\Prometheus\\Constants;\n\nreturn [\n    'default' => env('METRIC_DRIVER', 'prometheus'),\n    'use_standalone_process' => env('TELEMETRY_USE_STANDALONE_PROCESS', true),\n    'enable_default_metric' => env('TELEMETRY_ENABLE_DEFAULT_TELEMETRY', true),\n    'default_metric_interval' => env('DEFAULT_METRIC_INTERVAL', 5),\n    'metric' => [\n        'prometheus' => [\n            'driver' => Hyperf\\Metric\\Adapter\\Prometheus\\MetricFactory::class,\n            'mode' => Constants::SCRAPE_MODE,\n            'namespace' => env('APP_NAME', 'skeleton'),\n            'scrape_host' => env('PROMETHEUS_SCRAPE_HOST', '0.0.0.0'),\n            'scrape_port' => env('PROMETHEUS_SCRAPE_PORT', '9502'),\n            'scrape_path' => env('PROMETHEUS_SCRAPE_PATH', '/metrics'),\n            'push_host' => env('PROMETHEUS_PUSH_HOST', '0.0.0.0'),\n            'push_port' => env('PROMETHEUS_PUSH_PORT', '9091'),\n            'push_interval' => env('PROMETHEUS_PUSH_INTERVAL', 5),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Validation After Hook\nDESCRIPTION: This code demonstrates adding an after hook to the validator, allowing additional validation logic after the initial rules are processed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\Validation\\Contract\\ValidatorFactoryInterface;\n\nclass IndexController\n{\n    #[Inject]\n    protected ValidatorFactoryInterface $validationFactory;\n\n    public function foo(RequestInterface $request)\n    {\n        $validator = $this->validationFactory->make(\n            $request->all(),\n            [\n                'foo' => 'required',\n                'bar' => 'required',\n            ],\n            [\n                'foo.required' => 'foo is required',\n                'bar.required' => 'bar is required',\n            ]\n        );\n\n        $validator->after(function ($validator) {\n            if ($this->somethingElseIsInvalid()) {\n                $validator->errors()->add('field', 'Something is wrong with this field!');\n            }\n        });\n        \n        if ($validator->fails()) {\n            //\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Accessor for Computed Values in Hyperf Model\nDESCRIPTION: Defines an accessor that computes a new value based on existing attributes. In this example, the `getFullNameAttribute` accessor concatenates the `first_name` and `last_name` attributes to return the full name of the user.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/mutators.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 獲取用户的姓名.\n     *\n     * @return string\n     */\n    public function getFullNameAttribute()\n    {\n        return \"{$this->first_name} {$this->last_name}\";\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Remove Doctrine Common Component - Bash\nDESCRIPTION: Removes the `doctrine/common` component from the project due to dependency conflicts with `hyperf/utils`. This command uses `composer remove` to uninstall the package. Followed by a composer update to ensure dependencies are consistent.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.1.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# remove component\ncomposer remove doctrine/common\n# update\ncomposer update \"hyperf/*\" -o\n```\n\n----------------------------------------\n\nTITLE: Default NSQ Configuration\nDESCRIPTION: This PHP code defines the default configuration array for the NSQ component in Hyperf. It includes settings such as host, port, connection pool parameters (min/max connections, timeouts, heartbeat, max idle time).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nsq.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'host' => '127.0.0.1',\n        'port' => 4150,\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            // 因為 Nsq 服務預設的閒置時間是 60s，故框架維護的最大閒置時間應小於 60s\n            'max_idle_time' => 30.0,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Define Dependency for Multi Port Server - Hyperf PHP\nDESCRIPTION: This code snippet defines a new dependency 'InnerHttp' to the Hyperf\\HttpServer\\Server::class to allow another port running, to prevent default port being covered\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/overview.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'InnerHttp' => Hyperf\\HttpServer\\Server::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Inject Annotation with Required False PHP\nDESCRIPTION: Demonstrates the #[Inject] annotation with the required parameter set to false, making the dependency optional.  If the UserService cannot be resolved, null is injected.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserService;\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass IndexController\n{\n    /**\n     * 通過 `#[Inject]` 註解注入由註解聲明的屬性類型對象\n     * 當 UserService 不存在於 DI 容器內或不可創建時，則注入 null\n     */\n    #[Inject(required: false)]\n    private ?UserService $userService;\n    \n    public function index()\n    {\n        $id = 1;\n        if ($this->userService instanceof UserService) {\n            // 僅值存在時 $userService 可用\n            return $this->userService->getInfoById($id);    \n        }\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Blade Template for Anonymous Component\nDESCRIPTION: This snippet demonstrates using the `@props` directive in an anonymous component to define which properties should be treated as data variables.  The 'type' property is given a default value of 'info'. All other component attributes are available in the `$attributes` variable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_28\n\nLANGUAGE: blade\nCODE:\n```\n<!-- /storage/view/components/alert.blade.php -->\n\n@props(['type' =>'info','message'])\n\n<div {{ $attributes->merge(['class' =>'alert alert-'.$type]) }}>\n    {{ $message }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Cacheable Annotation Example\nDESCRIPTION: This code illustrates a basic use case of the `Cacheable` annotation with a defined prefix, TTL and listener. When user id is equal to 1, the cached key will be `c:user:1`\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/cache.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse App\\Models\\User;\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass UserService\n{\n    #[Cacheable(prefix: \"user\", ttl: 7200, listener: \"USER_CACHE\")]\n    public function user(int $id): array\n    {\n        $user = User::query()->find($id);\n\n        return [\n            'user' => $user->toArray(),\n            'uuid' => $this->unique(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Infix to RPN Expression in PHP\nDESCRIPTION: This example illustrates how to convert an infix expression to a postfix (RPN) expression. The `toRPNExpression` method of the `Calculator` class is used for this conversion. Note that variables are not supported in the current implementation of the infix to RPN conversion.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/rpn.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->toRPNExpression('4 - 2 * ( 5 + 5 ) - 10'); // 4 2 5 5 + * - 10 -\n```\n\n----------------------------------------\n\nTITLE: Docker Swarm Join - Shell\nDESCRIPTION: These commands are used to manage nodes joining a Docker Swarm cluster. The first command displays the token for the manager/worker node. The second command joins a node to the cluster using the displayed token and the manager's IP address and port.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/docker-swarm.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n# Display the token of the manager node\n$ docker swarm join-token manager\n# Add the manager node to the cluster\n$ docker swarm join --token <token> ip:2377\n\n# Display the token of the worker node\n$ docker swarm join-token worker\n# Join the worker node to the cluster\n$ docker swarm join --token <token> ip:2377\n```\n\n----------------------------------------\n\nTITLE: Using the RedisFactory Class\nDESCRIPTION: This PHP code demonstrates how to use the `Hyperf\\Redis\\RedisFactory` class to dynamically get a Redis client for a specific connection pool ('foo'). This approach eliminates the need for creating separate proxy classes for each connection pool.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/redis.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Redis\\RedisFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n\n// 通过 DI 容器获取或直接注入 RedisFactory 类\n$redis = $container->get(RedisFactory::class)->get('foo');\n$result = $redis->keys('*');\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection via Inject Annotation in Hyperf\nDESCRIPTION: This code demonstrates dependency injection using the `#[Inject]` annotation. The `UserService` is automatically injected into the `IndexController`'s `$userService` property. Requires `use Hyperf\\Di\\Annotation\\Inject;`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/overview.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse App\\Service\\UserService;\n\n#[AutoController]\nclass IndexController\n{\n\n    #[Inject]\n    private UserService $userService;\n    \n    // /index/info\n    public function info(RequestInterface $request)\n    {\n        $id = $request->input('id', 1);\n        return $this->userService->getInfoById((int)$id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Index in Hyperf (PHP)\nDESCRIPTION: Illustrates how to drop an index using the `dropIndex()` method in Hyperf's schema builder.  The method takes the index name or an array of column names as an argument. The system will automatically concatenate the database name, the field name of the index, and the index type as the name if the name is not explicitly provided.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nSchema::table('users', function (Blueprint $table) {\n    $table->dropIndex(['account_id', 'created_at']);\n});\n```\n\n----------------------------------------\n\nTITLE: Inject SessionInterface Dependency\nDESCRIPTION: Injects the SessionInterface into a controller for session management.  It allows usage of methods like set, get, has, remove, forget, clear and getId through the $session property. Requires Hyperf DI (Dependency Injection) container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/session.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Contract\\SessionInterface;\n\nclass IndexController\n{\n    #[Inject]\n    private SessionInterface $session;\n\n    public function index()\n    {\n        // 直接透過 $this->session 來使用\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swoole Options in Guzzle Client\nDESCRIPTION: Illustrates how to configure Swoole-specific options within the Guzzle client configuration.  These options only take effect when using the Swoole HTTP client.  The 'swoole' array overrides the original configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/guzzle.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse GuzzleHttp\\Client;\nuse Hyperf\\Guzzle\\CoroutineHandler;\nuse GuzzleHttp\\HandlerStack;\n\n$client = new Client([\n    'base_uri' => 'http://127.0.0.1:8080',\n    'handler' => HandlerStack::create(new CoroutineHandler()),\n    'timeout' => 5,\n    'swoole' => [\n        'timeout' => 10,\n        'socket_buffer_size' => 1024 * 1024 * 2,\n    ],\n]);\n\n$response = $client->get('/');\n\n```\n\n----------------------------------------\n\nTITLE: Create a Manual Consumer Class (PHP)\nDESCRIPTION: Creates a manual consumer class extending AbstractServiceClient. The class defines the service name and protocol, and implements the service methods using the __request method to send requests to the service provider.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/json-rpc.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\JsonRpc;\n\nuse Hyperf\\RpcClient\\AbstractServiceClient;\n\nclass CalculatorServiceConsumer extends AbstractServiceClient implements CalculatorServiceInterface\n{\n    /**\n     * 定义对应服务提供者的服务名称\n     */\n    protected string $serviceName = 'CalculatorService';\n    \n    /**\n     * 定义对应服务提供者的服务协议\n     */\n    protected string $protocol = 'jsonrpc-http';\n\n    public function add(int $a, int $b): int\n    {\n        return $this->__request(__FUNCTION__, compact('a', 'b'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Events in Hyperf Nano\nDESCRIPTION: Shows how to listen for events within a Hyperf Nano application. It listens for the `BootApplication` event and logs a message to the console when the application starts. Requires the `hyperf/nano` package and `Hyperf\\Framework\\Event\\BootApplication`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nano.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addListener(BootApplication::class, function($event){\n    $this->get(StdoutLoggerInterface::class)->info('App started');\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Visitors\nDESCRIPTION: This configuration shows how to add custom visitors to the `gen:model` command.  Visitors allow users to extend the functionality of the model generation script by manipulating the Abstract Syntax Tree (AST) of the generated code. The example shows how to use the `ModelRewriteKeyInfoVisitor`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/gen.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => [\n        // 忽略其他配置\n        'commands' => [\n            'gen:model' => [\n                'visitors' => [\n                    Hyperf\\Database\\Commands\\Ast\\ModelRewriteKeyInfoVisitor::class\n                ],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Prohibited If Rule with Closure\nDESCRIPTION: The `prohibited_if` rule requires the validated field to be missing or empty if another field is equal to a value, or based on the result of a boolean value or closure. This example shows how to use a closure with the `Rule::prohibitedIf` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$this->validationFactory->make($request->all(), [\n    'role_id' => Rule::prohibitedIf($request->user()->is_admin),\n]);\n\n$this->validationFactory->make($request->all(), [\n    'role_id' => Rule::prohibitedIf(fn () => $request->user()->is_admin),\n]);\n```\n\n----------------------------------------\n\nTITLE: Translate String via TranslatorInterface\nDESCRIPTION: Translates a string using the `TranslatorInterface` in a Hyperf controller. The `trans` method is called to retrieve the translated string based on a key, parameters, and a specific locale. The `Hyperf\\Di\\Annotation\\Inject` and `Hyperf\\Contract\\TranslatorInterface` dependencies are required.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/translation.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Contract\\TranslatorInterface;\n\nclass FooController\n{\n    #[Inject]\n    private TranslatorInterface $translator;\n    \n    public function index()\n    {\n        return $this->translator->trans('messages.welcome', [], 'zh_CN');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Method Annotation Usage PHP\nDESCRIPTION: This snippet demonstrates how to use a method annotation in Hyperf. The `MethodAnnotation` is placed above the method definition of `Foo::bar()`. This annotation can then be processed by a custom collector, allowing for method-specific configurations or actions based on the annotation. The annotation is used directly before the function definition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/annotation.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass Foo\n{\n    #[MethodAnnotation]\n    public function bar()\n    {\n        // some code\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Convert Infix to Postfix Expression in PHP\nDESCRIPTION: This example demonstrates how to convert an infix expression to a postfix (RPN) expression using the `toRPNExpression` method. It initializes the calculator and calls the method with the infix expression '4 - 2 * ( 5 + 5 ) - 10', which returns the corresponding RPN expression.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/rpn.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->toRPNExpression('4 - 2 * ( 5 + 5 ) - 10'); // 4 2 5 5 + * - 10 -\n```\n\n----------------------------------------\n\nTITLE: Calculating RPN Expression in PHP\nDESCRIPTION: This code snippet demonstrates how to calculate an RPN expression using the `Hyperf\\Rpn\\Calculator` class. It initializes the calculator and calls the `calculate` method with the RPN expression and an empty array for variables. The return value is the result of the calculation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/rpn.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->calculate('5 1 2 + 4 * + 3 -', []); // '14'\n```\n\n----------------------------------------\n\nTITLE: Configure WorkerStopHandler\nDESCRIPTION: This configuration snippet shows how to configure the `WorkerStopHandler` to handle the SIGTERM signal and shut down the worker process after a specified timeout.  The handler is registered with a priority of `PHP_INT_MIN` to ensure it is executed last.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/signal.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'handlers' => [\n        Hyperf\\Signal\\Handler\\WorkerStopHandler::class => PHP_INT_MIN\n    ],\n    'timeout' => 5.0,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Custom Message for Specific Attribute\nDESCRIPTION: Demonstrates how to define a custom message for a specific field and validation rule using dot notation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$messages = [\n    'email.required' => 'We need to know your e-mail address!',\n];\n```\n\n----------------------------------------\n\nTITLE: Concurrent Coroutine Execution using Observable::fromCoroutine (PHP)\nDESCRIPTION: Executes two functions concurrently using coroutines and returns the result of the first one to finish. This example showcases the `Observable::fromCoroutine` method, simulating a `Promise.race` behavior in JavaScript.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/reactive-x.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\ReactiveX\\Observable;\nuse Swoole\\Coroutine\\Channel;\n\n$result = new Channel(1);\n$o = Observable::fromCoroutine([function () {\n    sleep(2);\n    return 1;\n}, function () {\n    sleep(1);\n    return 2;\n}]);\n$o->take(1)->subscribe(\n    function ($x) use ($result) {\n        $result->push($x);\n    }\n);\necho $result->pop(); // 2;\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Config Center Component\nDESCRIPTION: This shell command installs the `hyperf/config-center` component using composer.  This component is essential for using the configuration center functionality within Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.2.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"hyperf/config-center:~2.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Polymorphic Type Mapping in Hyperf\nDESCRIPTION: This code snippet illustrates how to customize the polymorphic type mapping in Hyperf using `Relation::morphMap`. This allows you to decouple database values from application internal structures by using aliases for model class names. This mapping should be set up when the application boots.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/relationship.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model;\nuse Hyperf\\Database\\Model\\Relations\\Relation;\nRelation::morphMap([\n    'user' => Model\\User::class,\n    'book' => Model\\Book::class,\n]);\n\n```\n\n----------------------------------------\n\nTITLE: Blade Template Example (HTML)\nDESCRIPTION: This HTML code represents a Blade template that displays a greeting message including a variable named `$name`. This shows how to pass data from the controller to the view in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hyperf</title>\n</head>\n<body>\nHello, {{ $name }}. You are using blade template now.\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Redis Serialization Options\nDESCRIPTION: This configuration shows how to modify Redis client options, specifically setting the serialization method to PHP serialization.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/redis.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', null),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n        'options' => [\n            \\Redis::OPT_SERIALIZER => \\Redis::SERIALIZER_PHP,\n            // or 'serializer' => \\Redis::SERIALIZER_PHP, v3.0.38 or later\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Set Calculation Precision in Hyperf\nDESCRIPTION: This snippet demonstrates how to set the calculation precision when calculating an RPN expression. It uses the `calculate` method with an additional parameter to specify the desired precision. The method returns the result as a string, formatted to the specified number of decimal places.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/rpn/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->calculate('5 1 2 + 4 * + 3 -', [], 2); // '14.00'\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Server Routing\nDESCRIPTION: This PHP code configures the routing for the gRPC server. It defines a group for '/grpc.hi' and maps the '/sayHello' route to the 'App\\Controller\\HiController@sayHello' method. This configuration allows the server to handle gRPC requests to the 'SayHello' RPC.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/grpc.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nRouter::addServer('grpc'，function () {\n    Router::addGroup('/grpc.hi'，function () {\n        Router::post('/sayHello'，'App\\Controller\\HiController@sayHello');\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Coroutine Class with Context Copying\nDESCRIPTION: This code defines a `Coroutine` class within the `App\\Kernel\\Context` namespace. This class provides a `create` method that spawns a new coroutine, copying specific contexts (REQUEST_ID and ServerRequestInterface) from the parent coroutine to the new one. This allows the new coroutine to access request-scoped data.  It also includes error handling and logging for any exceptions that occur within the coroutine. This is used to replace the default Hyperf Coroutine class to enable context copying.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/annotation.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n *\n * @link     https://www.hyperf.io\n * @document https://hyperf.wiki\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\n\nnamespace App\\Kernel\\Context;\n\nuse App\\Kernel\\Log\\AppendRequestIdProcessor;\nuse Hyperf\\Context\\Context;\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Engine\\Coroutine as Co;\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Log\\LoggerInterface;\nuse Throwable;\n\nclass Coroutine\n{\n    protected LoggerInterface $logger;\n\n    public function __construct(protected ContainerInterface $container)\n    {\n        $this->logger = $container->get(StdoutLoggerInterface::class);\n    }\n\n    /**\n     * @return int Returns the coroutine ID of the coroutine just created.\n     *             Returns -1 when coroutine create failed.\n     */\n    public function create(callable $callable): int\n    {\n        $id = Co::id();\n        $coroutine = Co::create(function () use ($callable, $id) {\n            try {\n                // Shouldn't copy all contexts to avoid socket already been bound to another coroutine.\n                Context::copy($id, [\n                    AppendRequestIdProcessor::REQUEST_ID,\n                    ServerRequestInterface::class,\n                ]);\n                $callable();\n            } catch (Throwable $throwable) {\n                $this->logger->warning((string) $throwable);\n            }\n        });\n\n        try {\n            return $coroutine->getId();\n        } catch (Throwable $throwable) {\n            $this->logger->warning((string) $throwable);\n            return -1;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Dependency Injection - PHP\nDESCRIPTION: Demonstrates how to inject dependencies into a component's constructor. By listing dependencies before the data properties, the container automatically injects them.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n    use App\\AlertCreator;\n    /**\n     * 建立元件例項\n     *\n     * @param  \\App\\AlertCreator  $creator\n     * @param  string  $type\n     * @param  string  $message\n     * @return void\n     */\n    public function __construct(AlertCreator $creator, $type, $message)\n    {\n        $this->creator = $creator;\n        $this->type = $type;\n        $this->message = $message;\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Hyperf WebSocket Client in Controller\nDESCRIPTION: This code demonstrates how to create a WebSocket client, send a message to the server, and receive a response within a Hyperf controller. It uses the ClientFactory to instantiate the client and the push and recv methods to interact with the server. It utilizes dependency injection for the ClientFactory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/websocket-client.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\WebSocketClient\\ClientFactory;\nuse Hyperf\\WebSocketClient\\Frame;\n\nclass IndexController\n{\n    #[Inject]\n    protected ClientFactory $clientFactory;\n\n    public function index()\n    {\n        // 對端服務的地址，如沒有提供 ws:// 或 wss:// 字首，則預設補充 ws://\n        $host = '127.0.0.1:9502';\n        // 透過 ClientFactory 建立 Client 物件，創建出來的物件為短生命週期物件\n        $client = $this->clientFactory->create($host);\n        // 向 WebSocket 服務端傳送訊息\n        $client->push('HttpServer 中使用 WebSocket Client 傳送資料。');\n        // 獲取服務端響應的訊息，服務端需要透過 push 向本客戶端的 fd 投遞訊息，才能獲取；以下設定超時時間 2s，接收到的資料型別為 Frame 物件。\n        /** @var Frame $msg */\n        $msg = $client->recv(2);\n        // 獲取文字資料：$res_msg->data\n        return $msg->data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Generation in Hyperf\nDESCRIPTION: Demonstrates how to configure model generation options, such as the path, force_casts, inheritance, uses, refresh_fillable, table_mapping, with_comments and property_case in the `databases.{pool}.commands.gen:model` configuration array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Database\\Commands\\ModelOption;\n\nreturn [\n    'default' => [\n        // 忽略其他配置\n        'commands' => [\n            'gen:model' => [\n                'path' => 'app/Model',\n                'force_casts' => true,\n                'inheritance' => 'Model',\n                'uses' => '',\n                'refresh_fillable' => true,\n                'table_mapping' => [],\n                'with_comments' => true,\n                'property_case' => ModelOption::PROPERTY_SNAKE_CASE,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Copying Supervisor Configuration File\nDESCRIPTION: This snippet demonstrates how to copy the default Supervisor configuration file to a directory for application-specific configurations. This is done to avoid modifying the original global configuration file. It allows for customized settings for each managed application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/supervisor.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp /etc/supervisord.conf /etc/supervisord.d/supervisord.conf\n```\n\n----------------------------------------\n\nTITLE: Triggering PHP Error with ErrorExceptionHandler Listener\nDESCRIPTION: This snippet demonstrates how a PHP error, specifically an undefined offset, is converted into an `ErrorException` when the `ErrorExceptionHandler` listener is enabled. The `try...catch` block catches the exception, allowing for customized error handling.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/exception-handler.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ntry {\n    $a = [];\n    var_dump($a[1]);\n} catch (\\Throwable $throwable) {\n    var_dump(get_class($throwable), $throwable->getMessage());\n}\n\n// string(14) \"ErrorException\"\n// string(19) \"Undefined offset: 1\"\n\n```\n\n----------------------------------------\n\nTITLE: Publish Validation Language Files\nDESCRIPTION: Publishes the validation language files using the vendor:publish command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/validation\n```\n\n----------------------------------------\n\nTITLE: Publishing Nacos Configuration\nDESCRIPTION: This command publishes the default Nacos configuration file to the config directory. This allows customization of the Nacos client settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nacos.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/nacos\n```\n\n----------------------------------------\n\nTITLE: Exists Validation Custom Connection\nDESCRIPTION: The `exists:table,column` rule validates that the field under validation exists in the specified database table. This snippet shows how to specify a database connection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\n'email' => 'exists:connection.staff,email'\n```\n\n----------------------------------------\n\nTITLE: Incorrect Job Definition (Anti-Pattern)\nDESCRIPTION: Shows an incorrect Job definition that includes the ContainerInterface as a dependency, which can lead to serialization issues. It emphasizes that Job classes should primarily contain data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Job;\n\nuse Hyperf\\AsyncQueue\\Job;\nuse Psr\\Container\\ContainerInterface;\n\nclass ExampleJob extends Job\n{\n    public $container;\n\n    public $params;\n\n    public function __construct(ContainerInterface $container, $params)\n    {\n        $this->container = $container;\n        $this->params = $params;\n    }\n\n    public function handle()\n    {\n        // 根據引數處理具體邏輯\n        var_dump($this->params);\n    }\n}\n\n$job = make(ExampleJob::class);\n\n```\n\n----------------------------------------\n\nTITLE: Install Twig Engine\nDESCRIPTION: Installs the Twig templating engine via Composer for use with Hyperf's view component, enabling Twig template rendering in your application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require twig/twig\n```\n\n----------------------------------------\n\nTITLE: Concurrent Coroutine Control Example (PHP)\nDESCRIPTION: Illustrates how to control the maximum number of concurrently running coroutines within a code block using `Hyperf\\Coroutine\\Concurrent`.  New coroutines are created within a loop, but execution blocks until a slot becomes available, ensuring concurrency stays within the defined limit.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/coroutine.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Coroutine\\Concurrent;\n\n$concurrent = new Concurrent(10);\n\nfor ($i = 0; $i < 15; ++$i) {\n    $concurrent->create(function () {\n        // Do something...\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a UDP Server Class with Hyperf\nDESCRIPTION: This code snippet defines a UDP server class that implements the `OnPacketInterface` to handle incoming UDP packets. The `onPacket` method is called when a UDP packet is received. It dumps the client information and sends a response back to the client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tcp-server.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnPacketInterface;\n\nclass UdpServer implements OnPacketInterface\n{\n    public function onPacket($server, $data, $clientInfo): void\n    {\n        var_dump($clientInfo);\n        $server->sendto($clientInfo['address'], $clientInfo['port'], 'Server：' . $data);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Removing Service from Old Network\nDESCRIPTION: Removes a service from its original Docker network. This ensures that the service uses the new IP address range exclusively.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\ndocker service update --network-rm old-network service_name\n```\n\n----------------------------------------\n\nTITLE: Publishing View Configuration (PHP)\nDESCRIPTION: This code snippet shows the command used to automatically install configuration files related to view engine, translation and validation components.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nphp bin/hyperf.php view:publish\n```\n\n----------------------------------------\n\nTITLE: Copying Supervisor Configuration File\nDESCRIPTION: This snippet copies the default Supervisor configuration file to a new location for customization. This allows you to modify the configuration without directly altering the original file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/supervisor.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp /etc/supervisord.conf /etc/supervisord.d/supervisord.conf\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters via Dependency Injection\nDESCRIPTION: Illustrates how to access route parameters within a controller method by declaring them as parameters after the injected RequestInterface. This requires the route to be defined with parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/request.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass IndexController\n{\n    public function info(RequestInterface $request, int $id)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pessimistic Locking (Shared Lock) - PHP\nDESCRIPTION: This snippet demonstrates how to use a shared lock with the `sharedLock` method. It prevents selected data from being modified until the transaction is committed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_58\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->sharedLock()->get();\n```\n\n----------------------------------------\n\nTITLE: Hyperf View Configuration Example\nDESCRIPTION: Example configuration file (`config/autoload/view.php`) for the Hyperf View component. It defines the view engine, rendering mode (Task or Sync), view path, and cache path.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nuse Hyperf\\View\\Mode;\nuse Hyperf\\View\\Engine\\BladeEngine;\n\nreturn [\n    // 使用的渲染引擎\n    'engine' => BladeEngine::class,\n    // 不填寫則預設為 Task 模式，推薦使用 Task 模式\n    'mode' => Mode::TASK,\n    'config' => [\n        // 若下列資料夾不存在請自行建立\n        'view_path' => BASE_PATH . '/storage/view/',\n        'cache_path' => BASE_PATH . '/runtime/view/',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Setting swoole.use_shortname in php.ini\nDESCRIPTION: This snippet demonstrates how to disable Swoole short function names by setting `swoole.use_shortname = 'Off'` in the php.ini configuration file. This is necessary to prevent errors when starting the Hyperf server. The setting must be placed directly within the php.ini file, as it cannot be overridden using the `ini_set()` function.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/questions.md#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nswoole.use_shortname = 'Off'\n```\n\n----------------------------------------\n\nTITLE: Defining a gRPC Service with protobuf\nDESCRIPTION: This code defines a gRPC service named 'Hi' with a 'SayHello' RPC method. It also defines the 'HiUser' and 'HiReply' message types, specifying the structure of data exchanged between the client and the server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/grpc.md#_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage grpc;\n\nservice Hi {\n    rpc SayHello (HiUser) returns (HiReply) {\n    }\n}\n\nmessage HiUser {\n    string name = 1;\n    int32 sex = 2;\n}\n\nmessage HiReply {\n    string message = 1;\n    HiUser user = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Supervisor on CentOS\nDESCRIPTION: This snippet installs Supervisor on a CentOS system using the yum package manager. It first installs the EPEL repository if it's not already installed, then installs the supervisor package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/supervisor.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 安裝 epel 源，如果此前安裝過，此步驟跳過\nyum install -y epel-release\nyum install -y supervisor\n```\n\n----------------------------------------\n\nTITLE: Creating New Docker Network\nDESCRIPTION: This command creates a new Docker overlay network with a specified subnet, enabling encryption and attaching it to services. The `--driver overlay` specifies the overlay network driver. The `--subnet` option defines the IP address range for the network. The `--opt encrypted` enables network encryption.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\ndocker network create \\\n--driver overlay \\\n--subnet 10.0.0.0/8 \\\n--opt encrypted \\\n--attachable \\\ndefault-network\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Middlewares via Multiple #[Middleware] Annotations\nDESCRIPTION: Illustrates defining multiple middleware using multiple `#[Middleware]` annotations in Hyperf. Each `#[Middleware]` annotation specifies a single middleware to be executed. Requires the `#[AutoController]` or `#[Controller]` annotation to be present on the same class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/middleware/middleware.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Middleware\\BarMiddleware;\nuse App\\Middleware\\FooMiddleware;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\HttpServer\\Annotation\\Middleware;\nuse Hyperf\\HttpServer\\Annotation\\Middlewares;\n\n#[AutoController]\n#[Middleware(FooMiddleware::class)]\n#[Middleware(BarMiddleware::class)]\nclass IndexController\n{\n    public function index()\n    {\n        return 'Hello Hyperf.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Date Format in Hyperf Model (PHP)\nDESCRIPTION: This code shows how to customize the date format using the `$dateFormat` property in a Hyperf model.  This format is used when storing date attributes in the database and when serializing the model to an array or JSON.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/mutators.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * 这个属性应该被转化为原生类型.\n     *\n     * @var string\n     */\n    protected $dateFormat = 'U';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Join Docker Swarm Cluster\nDESCRIPTION: These commands show how to join a Docker Swarm cluster as either a manager or a worker node. You first need to get the join token, then use the docker swarm join command to add the node to the cluster.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\n# 顯示manager節點的TOKEN\n$ docker swarm join-token manager\n# 加入manager節點到集羣\n$ docker swarm join --token <token> ip:2377\n\n# 顯示worker節點的TOKEN\n$ docker swarm join-token worker\n# 加入worker節點到集羣\n$ docker swarm join --token <token> ip:2377\n```\n\n----------------------------------------\n\nTITLE: Configure Null Adapter for Socket.IO Rooms in Hyperf\nDESCRIPTION: This PHP configuration shows how to disable Socket.IO room functionality in Hyperf by using the Null adapter.  Using the Null adapter reduces overhead when room features are not required.  This configuration is suitable for applications that do not need to group clients into rooms.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/socketio-server.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\SocketIOServer\\Room\\AdapterInterface::class => \\Hyperf\\SocketIOServer\\Room\\NullAdapter::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Generating a Hyperf Model\nDESCRIPTION: Generates a Hyperf model based on the specified table name. The command uses AST to generate the model and allows resetting the model after adding custom methods. It accepts options like pool, path, force-casts, prefix, inheritance, uses, refresh-fillable, table-mapping, ignore-tables, with-comments and property-case.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nphp bin/hyperf.php gen:model table_name\n```\n\n----------------------------------------\n\nTITLE: Configure WebSocket Middleware\nDESCRIPTION: This code configures global middleware for the WebSocket server in the `config/autoload/middlewares.php` file. It associates the `yourMiddleware::class` middleware with the WebSocket server named 'ws'. The `ws` key corresponds to the 'name' configured in the `config/autoload/server.php` file. This middleware will be executed for all WebSocket connections on the specified server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/websocket-server.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'ws' => [\n        yourMiddleware::class\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: JSON RPC Server Configuration\nDESCRIPTION: This code configures a JSON RPC server within the Hyperf application. It enables EOF auto-splitting and specifies the EOF string.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 這裏省略了該文件的其它配置\n    'servers' => [\n        [\n            'name' => 'jsonrpc',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9503,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_RECEIVE => [\\Hyperf\\JsonRpc\\TcpServer::class, 'onReceive'],\n            ],\n            'settings' => [\n                'open_eof_split' => true, // 啓用 EOF 自動分包\n                'package_eof' => \"\\r\\n\", // 設置 EOF 字符串\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Grouping query results using groupBy and having in Hyperf\nDESCRIPTION: This snippet shows how to group query results using `groupBy` and filter the grouped results with `having`. The `having` method functions similarly to the `where` method. It shows examples of single and multiple grouping columns.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->groupBy('account_id')\n    ->having('account_id', '>', 100)\n    ->get();\n\n$users = Db::table('users')\n    ->groupBy('first_name', 'status')\n    ->having('account_id', '>', 100)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Demo Logic with Inject Annotation - PHP\nDESCRIPTION: Defines a `DemoLogic` class that depends on `DemoApi`.  The `#[Inject]` annotation is used to inject an instance of the `DemoApi` dependency. The `test` method calls the injected API's test method and returns the result.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/testing.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Logic;\n\nuse App\\Api\\DemoApi;\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass DemoLogic\n{\n    #[Inject]\n    private DemoApi $demoApi;\n\n    public function test()\n    {\n        $result = $this->demoApi->test();\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Stdout Logger Factory\nDESCRIPTION: This code defines a custom StdoutLoggerFactory that returns a Logger instance for stdout logging. This factory is used to replace the default StdoutLoggerInterface implementation with a Monolog-based logger, allowing for consistent log formatting and handling across the application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/logger.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App;\n\nuse Psr\\Container\\ContainerInterface;\n\nclass StdoutLoggerFactory\n{\n    public function __invoke(ContainerInterface $container)\n    {\n        return Log::get('sys');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring View Namespaces in PHP\nDESCRIPTION: This snippet demonstrates how to configure view namespaces in the `ConfigProvider` class. By defining a namespace, you can easily refer to views within a package or module. This allows for better organization and reusability of views.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass ConfigProvider\n{\n    public function __invoke()\n    {\n        return [\n            // ...others config\n            'view' => [\n                // ...others config\n                'namespaces' => [\n                    'package-name' => __DIR__.'/../views',\n                ],\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the Request ID Processor (PHP)\nDESCRIPTION: This PHP configuration demonstrates how to register the 'AppendRequestIdProcessor' in Hyperf's logger configuration. By adding the processor to the 'processors' array, it will be executed for every log record, ensuring that the request ID is included in all logs.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/logger.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse App\\Kernel\\Log;\n\nreturn [\n    'default' => [\n        // 刪除其他配置\n        'processors' => [\n            [\n                'class' => Log\\AppendRequestIdProcessor::class,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Update config/config.php - PHP\nDESCRIPTION: This snippet shows how to add the `app_env` and `scan_cacheable` configuration items to the `config/config.php` file. These settings control the environment and whether to use annotation scanning caching to improve startup performance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/2.0.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    // 生产环境使用 prod 值\n    'app_env' => env('APP_ENV', 'dev'),\n    // 是否使用注解扫描缓存\n    'scan_cacheable' => env('SCAN_CACHEABLE', false),\n];\n```\n\n----------------------------------------\n\nTITLE: Simple Where Clauses - PHP\nDESCRIPTION: This demonstrates the usage of the `where()` method for building simple where clauses. It shows examples with the equals operator, simplified equals comparison, and other operators like >=, <>, and LIKE. It also shows how to pass an array of conditions to the where clause.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->where('gender', '=', 1)->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->where('gender', 1)->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->where('gender', '>=', 0)->get();\n\n$users = Db::table('users')->where('gender', '<>', 1)->get();\n\n$users = Db::table('users')->where('name', 'like', 'T%')->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->where([\n    ['status', '=', '1'],\n    ['gender', '=', '1'],\n])->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->where([\n    ['status', '=', '1'],\n    ['gender', '=', '1'],\n    [function ($query) {\n        $query->where('type', 3)->orWhere('type', 6);\n    }]\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Using Raw Methods (selectRaw, whereRaw, havingRaw, orderByRaw) in Hyperf\nDESCRIPTION: Illustrates how to use `selectRaw`, `whereRaw`, `havingRaw`, and `orderByRaw` to insert raw expressions into different parts of a query, including SELECT, WHERE, HAVING, and ORDER BY clauses. This is an alternative to `Db::raw()`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('order')\n    ->selectRaw('price * ? as price_with_tax', [1.0825])\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('order')\n    ->whereRaw('price > IF(state = \"TX\", ?, 100)', [200])\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('order')\n    ->select('department', Db::raw('SUM(price) as total_sales'))\n    ->groupBy('department')\n    ->havingRaw('SUM(price) > ?', [2500])\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('order')\n    ->orderByRaw('updated_at - created_at DESC')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Dockerfile with App Label\nDESCRIPTION: This Dockerfile sets the app.name label for the Docker container, which is used by Logtail to identify and collect logs.  The `app.name` label value should match the configuration defined in the Alibaba Cloud Log Service.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/aliyun-logger.md#_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Default Dockerfile\n\nFROM hyperf/hyperf:7.4-alpine-v3.11-swoole\nLABEL maintainer=\"Hyperf Developers <group@hyperf.io>\" version=\"1.0\" license=\"MIT\" app.name=\"hyperf-demo-api\"\n\n# 其它內容省略\n```\n\n----------------------------------------\n\nTITLE: Adjust WebSocket Controller PHP\nDESCRIPTION: This snippet shows the adjusted WebSocket controller in Hyperf 1.1.  The `onMessage` and `onOpen` methods now require explicit type hinting for `Swoole\\WebSocket\\Server`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/1.1.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Contract\\OnMessageInterface;\nuse Hyperf\\Contract\\OnOpenInterface;\nuse Swoole\\Http\\Request;\nuse Swoole\\Websocket\\Frame;\nuse Swoole\\WebSocket\\Server as WebSocketServer;\n\nclass WebSocketController implements OnMessageInterface, OnOpenInterface\n{\n    public function onMessage(WebSocketServer $server, Frame $frame): void\n    {\n    }\n\n    public function onOpen(WebSocketServer $server, Request $request): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Context Value - Hyperf\nDESCRIPTION: This code snippet demonstrates how to store a value in the current coroutine's context using the `Context::set()` method in Hyperf. The `set()` method takes a key and a value as input and returns the value that was set.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/coroutine.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Context\\Context;\n\n// 將 bar 字串以 foo 為 key 儲存到當前協程上下文中\n$foo = Context::set('foo', 'bar');\n// set 方法會再將 value 作為方法的返回值返回回來，所以 $foo 的值為 bar\n```\n\n----------------------------------------\n\nTITLE: Running MySQL with Docker\nDESCRIPTION: This snippet runs a MySQL service using Docker, mapping port 3306, setting the root password, and using a volume for data persistence. Also sets the container to be removed upon exit (--rm) and attached to the 'default-network'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run --name mysql -v /srv/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=xxxx -p 3306:3306 --rm --network default-network -d mysql:5.7\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Fields with WHERE Clause - PHP\nDESCRIPTION: This snippet shows how to query JSON fields using the `where` clause in Hyperf. It retrieves users where the `options->language` field is 'en' and `preferences->dining->meal` is 'salad'. This is supported on databases that support JSON types.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->where('options->language', 'en')\n    ->get();\n\n$users = Db::table('users')\n    ->where('preferences->dining->meal', 'salad')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Coroutine Memory Driver Configuration\nDESCRIPTION: This configuration shows how to set up the CoroutineMemoryDriver. This driver caches data in the coroutine context, making it accessible within the same request scope. Also shows usage with the @Cacheable annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/cache.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Cache\\Annotation\\Cacheable;\n\nclass Demo\n{\n    public function get($userId, $id)\n    {\n        return $this->getArray($userId)[$id] ?? 0;\n    }\n\n    #[Cacheable(prefix: \"test\", group: \"co\")]\n    public function getArray(int $userId): array\n    {\n        return $this->redis->hGetAll($userId);\n    }\n}\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'co' => [\n        'driver' => Hyperf\\Cache\\Driver\\CoroutineMemoryDriver::class,\n        'packer' => Hyperf\\Codec\\Packer\\PhpSerializerPacker::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Config Provider Structure: After Hyperf Update\nDESCRIPTION: Illustrates the updated structure of the Config Provider array after the Hyperf update, introducing the 'annotations' layer. This aligns the structure with configuration files and avoids special cases, changing how annotation scanning is configured.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog-v1.1.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'annotations' => [\n    'scan' => [\n        'paths' => [\n            __DIR__,\n        ],\n        'collectors' => [],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Image Dimensions Validation with Rule Class\nDESCRIPTION: This snippet shows how to use the `Rule::dimensions` method to construct the `dimensions` validation rule in Hyperf, allowing for more flexible configuration of constraints such as maximum width, maximum height, and ratio.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\npublic function rules(): array\n{\n    return [\n        'avatar' => [\n            'required',\n            Rule::dimensions()->maxWidth(1000)->maxHeight(500)->ratio(3 / 2),\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating SwaggerRequest with Validation Rules\nDESCRIPTION: This code demonstrates how to use `SwaggerRequest` and validation rules within Swagger annotations. It allows for request parameter validation using the defined rules, enhancing API robustness and documentation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/swagger.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Schema\\SavedSchema;\nuse Hyperf\\Swagger\\Request\\SwaggerRequest;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Swagger\\Annotation as SA;\n\n#[SA\\HyperfServer(name: 'http')]\nclass CardController extends Controller\n{\n    #[SA\\Post('/user/save', summary: '保存用户信息', tags: ['用户管理'])]\n    #[SA\\QueryParameter(name: 'token', description: '鑑權 token', type: 'string', rules: 'required|string')]\n    #[SA\\RequestBody(content: new SA\\JsonContent(properties: [\n        new SA\\Property(property: 'nickname', description: '暱稱', type: 'integer', rules: 'required|string'),\n        new SA\\Property(property: 'gender', description: '性別', type: 'integer', rules: 'required|integer|in:0,1,2'),\n    ]))]\n    #[SA\\Response(response: '200', content: new SA\\JsonContent(ref: '#/components/schemas/SavedSchema'))]\n    public function info(SwaggerRequest $request)\n    {\n        $result = $this->service->save($request->all());\n\n        return $this->response->success($result);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Portainer Service\nDESCRIPTION: This command creates a Portainer service in the Docker Swarm cluster.  It publishes port 9000, sets the replica count to 1, constrains the service to manager nodes, and mounts volumes for data and the Docker socket.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\ndocker service create \\\n    --name portainer \\\n    --publish 9000:9000 \\\n    --replicas=1 \\\n    --constraint 'node.role == manager' \\\n    --mount type=volume,src=portainer_data,dst=/data \\\n    --mount type=bind,src=//var/run/docker.sock,dst=/var/run/docker.sock \\\n    portainer/portainer\n```\n\n----------------------------------------\n\nTITLE: Querying Users With Type Casting PHP\nDESCRIPTION: This snippet demonstrates how to query users and cast the `last_posted_at` attribute to a `date` type using the `withCasts` method. This allows for easier handling of the attribute as a date object after the query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/mutators.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$users = User::select([\n    'users.*',\n    'last_posted_at' => Post::selectRaw('MAX(created_at)')\n            ->whereColumn('user_id', 'users.id')\n])->withCasts([\n    'last_posted_at' => 'date'\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Processes to Hyperf Nano\nDESCRIPTION: Demonstrates how to add a custom process to a Hyperf Nano application. It adds a process that logs a message to the console every second.  Requires the `hyperf/nano` package and `Hyperf\\Contract\\StdoutLoggerInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nano.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addProcess(function(){\n    while (true) {\n        sleep(1);\n        $this->get(StdoutLoggerInterface::class)->info('Processing...');\n    }\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: GraphQL Type Mapping - PHP\nDESCRIPTION: This code defines a GraphQL type for a Product model. It uses annotations to map the class and its properties to GraphQL types and fields. The class defines the structure of a Product object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/graphql.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Model;\n\nuse Hyperf\\GraphQL\\Annotation\\Type;\nuse Hyperf\\GraphQL\\Annotation\\Field;\n\n#[Type]\nclass Product\n{\n    protected $name;\n    protected $price;\n\n    public function __construct(string $name, float $price)\n    {\n        $this->name = $name;\n        $this->price = $price;\n    }\n\n    #[Field]\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    #[Field]\n    public function getPrice(): ?float\n    {\n        return $this->price;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Translation Configuration\nDESCRIPTION: This snippet shows a translation configuration.  Dependencies: None.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/constants.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// 國際化配置\n\nreturn [\n    'params.invalid' => 'Params :param is invalid.',\n];\n```\n\n----------------------------------------\n\nTITLE: Nacos Configuration File - PHP\nDESCRIPTION: This configuration file defines the settings for connecting to the Nacos server, including host, port, username, password, and Guzzle client options.  It can be modified to suit the specific Nacos environment.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nacos.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    // 無法使用 IP 埠形式的開發者，直接配置 url 即可\n    // 'url' => '',\n    'host' => '127.0.0.1',\n    'port' => 8848,\n    'username' => null,\n    'password' => null,\n    'guzzle' => [\n        'config' => null,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Wrapping Nested Resources with Data\nDESCRIPTION: Demonstrates how to wrap nested resources within a 'data' key. You need to define a resource collection class and wrap the `$this->collection` property with the 'data' key inside the `toArray` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'data' => $this->collection,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Crontab Tasks using Schedule Facade\nDESCRIPTION: This configuration defines Crontab tasks in the `config/crontabs.php` file using the `Schedule` facade.  It sets the name, rule for command, class method call, and closure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/crontab.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/crontabs.php\nuse Hyperf\\Crontab\\Schedule;\n\nSchedule::command('foo:bar')->setName('foo-bar')->setRule('* * * * *');\nSchedule::call([Foo::class, 'bar'])->setName('foo-bar')->setRule('* * * * *');\nSchedule::call(fn() => (new Foo)->bar())->setName('foo-bar')->setRule('* * * * *');\n```\n\n----------------------------------------\n\nTITLE: Initializing Hyperf Container PHP\nDESCRIPTION: This code snippet demonstrates how to initialize the Hyperf dependency injection container. It creates a new container instance using the DefinitionSourceFactory and sets it as the application context's container. It depends on the Hyperf Di and Context components.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.0.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Di\\Definition\\DefinitionSourceFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = new Container((new DefinitionSourceFactory(true))());\n\nif (! $container instanceof \\Psr\\Container\\ContainerInterface) {\n    throw new RuntimeException('The dependency injection container is invalid.');\n}\nreturn ApplicationContext::setContainer($container);\n```\n\n----------------------------------------\n\nTITLE: Defining a Hyperf Event\nDESCRIPTION: This PHP code defines a UserRegistered event class.  It includes a public $user property to hold user data and a constructor to initialize the event with user data. Listeners can then access this data upon event dispatch.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/event.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Event;\n\nclass UserRegistered\n{\n    // It is recommended to define this as a public property so that the listener can use it directly, or you can provide Getter for that property.\n    public $user;\n    \n    public function __construct($user)\n    {\n        $this->user = $user;    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using FilesystemFactory for Multiple Disks\nDESCRIPTION: Demonstrates how to use the Hyperf\\Filesystem\\FilesystemFactory class to dynamically select and use different storage drivers. This allows for working with multiple storage mediums simultaneously.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/filesystem.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nclass IndexController\n{\n    public function example(\\Hyperf\\Filesystem\\FilesystemFactory $factory)\n    {\n    \t$local = $factory->get('local');\n        // Write Files\n        $local->write('path/to/file.txt', 'contents');\n\n        $s3 = $factory->get('s3');\n\n        $s3->write('path/to/file.txt', 'contents');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Hyperf Component Package\nDESCRIPTION: This snippet shows how to create a new Hyperf component package using the `hyperf/component-creator` Composer package. It supports creating components compatible with the latest Hyperf version or a specific version like 2.0. Requires Composer to be installed globally.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/component-guide/create.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n# 建立適配 Hyperf 最新版本的元件包\ncomposer create-project hyperf/component-creator your_component dev-master\n\n# 建立適配 Hyperf 2.0 版本的元件包\ncomposer create-project hyperf/component-creator your_component \"2.0.*\"\n```\n\n----------------------------------------\n\nTITLE: Converting Doctrine Annotations to PHP8 Attributes in Hyperf\nDESCRIPTION: This command uses the Hyperf code generator to convert Doctrine Annotations to PHP8 Attributes. It is essential for projects upgrading to Hyperf 3.0 from earlier versions that relied on annotations. This script should be executed under version 2.2 before upgrade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/CHANGELOG-3.0.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp bin/hyperf.php code:generate -D app\n```\n\n----------------------------------------\n\nTITLE: Generating Enum Class using Hyperf CLI\nDESCRIPTION: This command uses the Hyperf CLI to generate a new enum class named `ErrorCode` with the type set to `enum`.  The `--type enum` flag is used to create an enum, not a standard constant class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/constants.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:constant ErrorCode --type enum\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Serializer in Hyperf\nDESCRIPTION: Shows how to configure the Symfony Serializer in Hyperf by adding dependencies and configuring the `NormalizerInterface` binding.  This enables the use of Symfony's serializer for object normalization within the Hyperf framework.  Dependencies on `Hyperf\\Utils\\Serializer\\SerializerFactory` and `Hyperf\\Utils\\Serializer\\Serializer` are required.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.0.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Utils\\Serializer\\SerializerFactory;\nuse Hyperf\\Utils\\Serializer\\Serializer;\n\nreturn [\n    Hyperf\\Contract\\NormalizerInterface::class => new SerializerFactory(Serializer::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Server Configuration for Shutdown Event - PHP\nDESCRIPTION: This configuration snippet shows how to add a callback function to the ON_SHUTDOWN event in the server configuration, allowing custom logic to be executed when the server shuts down. This is used with the service governance component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nacos.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Server\\Event;\nreturn [\n    // ...other\n    'callbacks' => [\n        // ...other\n        Event::ON_SHUTDOWN => [Hyperf\\Framework\\Bootstrap\\ShutdownCallback::class, 'onShutdown']\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Restore Portainer Data\nDESCRIPTION: This script restores Portainer data from a backup. It creates a temporary nginx container with the Portainer data volume mounted and extracts the backup into the data directory. Ensure the Portainer service is created before running this.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_21\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run -it --volumes-from portainer_container -v $(pwd):/backup --name importer --rm nginx bash\ncd /backup\ntar xf data.tar -C /\n```\n\n----------------------------------------\n\nTITLE: Create Foreign Key Constraint\nDESCRIPTION: This code snippet demonstrates how to create a foreign key constraint using the `foreign()`, `references()`, and `on()` methods. It adds a 'user_id' column to the 'posts' table and creates a foreign key constraint referencing the 'id' column in the 'users' table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nSchema::table('posts', function (Blueprint $table) {\n    $table->unsignedInteger('user_id');\n\n    $table->foreign('user_id')->references('id')->on('users');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Repository for Local Hyperf Path\nDESCRIPTION: This JSON snippet configures the Composer repository to include a local path to the Hyperf source code.  This allows the `hyperf-skeleton` project to use the local `hyperf` directory as a dependency, enabling direct code modification in the vendor directory via soft links.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/component-guide/intro.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"repositories\": {\n        \"hyperf\": {\n            \"type\": \"path\",\n            \"url\": \"../hyperf/src/*\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Hyperf Project with Composer (Swoole)\nDESCRIPTION: This command creates a new Hyperf project using the `hyperf/hyperf-skeleton` package, pre-configured for Swoole. It downloads the necessary dependencies and sets up a basic project structure in the current directory. During installation, the user should accept default options.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer create-project hyperf/hyperf-skeleton\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Field Names\nDESCRIPTION: This snippet demonstrates how to customize the field names for storing timestamps using the `CREATED_AT` and `UPDATED_AT` constants. Setting one of them to `null` disables ORM processing for that specific field.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    const CREATED_AT = 'creation_date';\n\n    const UPDATED_AT = 'last_update';\n}\n```\n\n----------------------------------------\n\nTITLE: Register a Service with a Protocol\nDESCRIPTION: This code shows how to register a service with a specific protocol using the `Hyperf\\Jet\\ServiceManager`. It associates the 'CalculatorService' with the 'jsonrpc' protocol and defines the node information (host and port).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/jet.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Jet\\ServiceManager;\n\n// 绑定 CalculatorService 与 jsonrpc 协议，同时设定静态的节点信息\nServiceManager::register($service = 'CalculatorService', $protocol = 'jsonrpc', [\n    ServiceManager::NODES => [\n        [$host = '127.0.0.1', $port = 9503],\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Producing a Kafka Message - PHP\nDESCRIPTION: This code demonstrates how to send a message to a Kafka topic using the `Hyperf\\Kafka\\Producer::send()` method. It sends a message with the topic 'hyperf', value 'value', and key 'key'. Requires the `Hyperf\\Kafka\\Producer` dependency.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/kafka.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Kafka\\Producer;\n\n#[AutoController]\nclass IndexController extends AbstractController\n{\n    public function index(Producer $producer)\n    {\n        $producer->send('hyperf', 'value', 'key');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Application Configuration\nDESCRIPTION: This shows an example configuration that is placed in a docker config, and then mounted into the container as a configuration file. It contains database credentials, Redis settings, and other application specific parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_25\n\nLANGUAGE: Shell\nCODE:\n```\nAPP_NAME=demo\n\nDB_DRIVER=mysql\nDB_HOST=localhost\nDB_PORT=3306\nDB_DATABASE=hyperf\nDB_USERNAME=root\nDB_PASSWORD=\nDB_CHARSET=utf8mb4\nDB_COLLATION=utf8mb4_unicode_ci\nDB_PREFIX=\n\nREDIS_HOST=localhost\nREDIS_AUTH=\nREDIS_PORT=6379\nREDIS_DB=0\n```\n\n----------------------------------------\n\nTITLE: Raw Expressions with havingRaw - PHP\nDESCRIPTION: Demonstrates using `havingRaw` to include raw SQL expressions in the HAVING clause of a query. This allows for complex filtering of aggregated results and supports parameter binding. Requires the `Hyperf\\DbConnection\\Db` facade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('order')\n    ->select('department', Db::raw('SUM(price) as total_sales'))\n    ->groupBy('department')\n    ->havingRaw('SUM(price) > ?', [2500])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Generating a Model using Hyperf CLI\nDESCRIPTION: This code snippet shows how to generate a model class using the Hyperf command-line tool. The command `php bin/hyperf.php gen:model table_name` generates a model based on the specified table. Options include specifying the connection pool, model path, and other configurations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp bin/hyperf.php gen:model table_name\n```\n\n----------------------------------------\n\nTITLE: Blade @once Directive\nDESCRIPTION: This Blade template uses the `@once` directive to ensure that a block of code, such as pushing JavaScript to the header, is only executed once per rendering cycle, even if the template is rendered multiple times within the same request.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_25\n\nLANGUAGE: blade\nCODE:\n```\n@once\n    @push('scripts')\n        <script>\n            // 您自定義的 JavaScript 程式碼\n        </script>\n    @endpush\n@endonce\n```\n\n----------------------------------------\n\nTITLE: Define TCP Server for jsonrpc-tcp-length-check Protocol (PHP)\nDESCRIPTION: Configures a TCP server for the jsonrpc-tcp-length-check protocol. The key difference is settings related to `open_length_check` which enables checking of package length for message integrity.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/json-rpc.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 这里省略了该文件的其它配置\n    'servers' => [\n        [\n            'name' => 'jsonrpc',\n            'type' => Server::SERVER_BASE,\n            'host' => '0.0.0.0',\n            'port' => 9503,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_RECEIVE => [\\Hyperf\\JsonRpc\\TcpServer::class, 'onReceive'],\n            ],\n            'settings' => [\n                'open_length_check' => true,\n                'package_length_type' => 'N',\n                'package_length_offset' => 0,\n                'package_body_offset' => 4,\n                'package_max_length' => 1024 * 1024 * 2,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: UserService Constructor with Parameter\nDESCRIPTION: Updates the UserService class to accept an enableCache parameter in its constructor.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Service;\n\nclass UserService implements UserServiceInterface\n{\n    private bool $enableCache;\n    \n    public function __construct(bool $enableCache)\n    {\n        // 接收值並儲存於類屬性中\n        $this->enableCache = $enableCache;\n    }\n    \n    public function getInfoById(int $id)\n    {\n        return (new Info())->fill($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add User to Docker Group\nDESCRIPTION: This command adds the current user to the docker group, allowing them to run Docker commands without sudo. It requires logging out and back in for the changes to take effect.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nusermod -aG docker $USER\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Session\nDESCRIPTION: This command installs the hyperf/session component via composer, adding it as a dependency to your Hyperf project. It allows you to manage user sessions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/session.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/session\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Script in Composer\nDESCRIPTION: This snippet configures the 'test' script in composer.json to use 'co-phpunit' for running tests with color output. It specifies the phpunit.xml configuration file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/testing.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"test\": \"co-phpunit -c phpunit.xml --colors=always\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Hyperf Models\nDESCRIPTION: Demonstrates how to retrieve multiple model instances using the `find()` method with an array of IDs. This returns a collection of models.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$users = User::query()->find([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Modify Logger Path in logger.php\nDESCRIPTION: Updates the logger configuration in `logger.php` to write log files to a writable location within the `/tmp/runtime` directory. This adjustment is needed because the `runtime` directory inside a Phar archive is not writable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/phar.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'handler' => [\n            'class' => Monolog\\Handler\\StreamHandler::class,\n            'constructor' => [\n                'stream' => '/tmp/runtime/logs/hyperf.log',\n                'level' => Monolog\\Logger::INFO,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Setting App Name in .env File\nDESCRIPTION: Example of setting the `APP_NAME` environment variable in the `.env` file, enclosed in double quotes to handle spaces.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config.md#_snippet_9\n\nLANGUAGE: dotenv\nCODE:\n```\nAPP_NAME=\"Hyperf Skeleton\"\n```\n\n----------------------------------------\n\nTITLE: Server Configuration for Shutdown Event\nDESCRIPTION: This configuration snippet shows how to add a callback for the ON_SHUTDOWN event.  This allows custom code to be executed when the server shuts down, which is necessary for deregistering the service instance from Nacos.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nacos.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Server\\Event;\nreturn [\n    // ...other\n    'callbacks' => [\n        // ...other\n        Event::ON_SHUTDOWN => [Hyperf\\Framework\\Bootstrap\\ShutdownCallback::class, 'onShutdown']\n    ]\n];\n\n```\n\n----------------------------------------\n\nTITLE: Merging Attributes with Default Values (HTML)\nDESCRIPTION: This shows how to merge default attribute values with those passed to the component using the `merge()` method. This is useful for setting default classes or other attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n    <div {{ $attributes->merge(['class' => 'alert alert-'.$type]) }}>\n        {{ $message }}\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Configure Jaeger Driver\nDESCRIPTION: Configures the Jaeger driver in `config/autoload/opentracing.php`, including project name, sampler type, and local agent reporting host and port.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tracer.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Tracer\\Adapter\\JaegerTracerFactory;\nuse const Jaeger\\SAMPLER_TYPE_CONST;\n\nreturn [\n    // default Tracer\n    'default' => env('TRACER_DRIVER', 'jaeger'),\n\n    // Other configurations are omitted here in this example\n    'enable' => [],\n\n    'tracer' => [\n        // Jaeger drive config\n        'jaeger' => [\n            'driver' => JaegerTracerFactory::class,\n            // project name\n            'name' => env('APP_NAME', 'skeleton'),\n            'options' => [\n                // Sampler, track all requests by default\n                'sampler' => [\n                    'type' => SAMPLER_TYPE_CONST,\n                    'param' => true,\n                ],\n                // the address which should report to\n                'local_agent' => [\n                    'reporting_host' => env('JAEGER_REPORTING_HOST', 'localhost'),\n                    'reporting_port' => env('JAEGER_REPORTING_PORT', 5775),\n                ],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Fluent Retry Call with Classifier and Max Attempts Policy in Hyperf\nDESCRIPTION: This code demonstrates how to use the Hyperf Retry component to retry a function call that might throw an exception. It uses a ClassifierRetryPolicy to retry all Throwables and a MaxAttemptsRetryPolicy to limit the number of retries to 5.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/retry.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$result = \\Hyperf\\Retry\\Retry::with(\n    new \\Hyperf\\Retry\\Policy\\ClassifierRetryPolicy(), // Retry all Throwables by default\n    new \\Hyperf\\Retry\\Policy\\MaxAttemptsRetryPolicy(5) //Retry up to 5 times\n)->call(function(){\n    if (rand(1, 100) >= 20){\n        return true;\n    }\n    throw new Exception;\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Aliyun OSS Adapter (Flysystem v2.0 & v3.0)\nDESCRIPTION: Install the Aliyun OSS adapter for Flysystem v2.0 and v3.0. This is a more recent version of the Aliyun OSS adapter. Requires PHP and Composer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/filesystem.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/flysystem-oss\n```\n\n----------------------------------------\n\nTITLE: Publishing Config Files using Hyperf CLI (Bash)\nDESCRIPTION: Demonstrates how to use the `vendor:publish` command in Hyperf to generate default configuration files. The command takes the package name as an argument, allowing the framework to copy the specified configuration files from the component's `publish` directory to the application's configuration directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/component-guide/configprovider.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish 包名稱\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/amqp\n```\n\n----------------------------------------\n\nTITLE: Coroutine Parallel Simplified Example PHP\nDESCRIPTION: This code demonstrates a simplified way to use Parallel by using the `parallel` function with an array of callables. The function executes each callable in a separate coroutine and returns an array of results.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/coroutine.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Coroutine\\Coroutine;\n\n// The passed array parameters can also use `key of array` to facilitate distinguish the result of coroutine, and the returned result will also return the corresponding result according to key.\n$result = parallel([\n    function () {\n        Coroutine::sleep(1);\n        return Coroutine::id();\n    },\n    function () {\n        Coroutine::sleep(1);\n        return Coroutine::id();\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Getting Context Value with Hyperf\\Context\\Context::get() in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a value from the current coroutine's context using the `Hyperf\\Context\\Context::get()` method. The first parameter is the key. If the key is not found, the second parameter, `$default`, is returned.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/coroutine.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Context\\Context;\n\n// 从当前协程上下文中取出 key 为 foo 的值，如不存在则返回 bar 字符串\n$foo = Context::get('foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Check If There Are More Pages\nDESCRIPTION: This snippet shows how to check if there are more pages to display. It uses the `hasMorePages()` method and returns a boolean.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/paginator.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$hasMorePages = $paginator->hasMorePages();\n```\n\n----------------------------------------\n\nTITLE: Install Plates Engine\nDESCRIPTION: Installs the Plates templating engine via Composer for use with Hyperf's view component, allowing you to use Plates templates in your Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require league/plates\n```\n\n----------------------------------------\n\nTITLE: dotenv value examples\nDESCRIPTION: Shows the automatic boolean and null conversion in the `.env` files.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config.md#_snippet_9\n\nLANGUAGE: N/A\nCODE:\n```\nAPP_DEBUG=true\nAPP_DEBUG_PARENTHESES=(true)\n\nAPP_NULL=null\nAPP_NULL_PARENTHESES=(null)\n```\n\n----------------------------------------\n\nTITLE: Generating a Snowflake ID\nDESCRIPTION: This code snippet demonstrates how to obtain an instance of IdGeneratorInterface from the DI container and use it to generate a unique ID.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/snowflake.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Snowflake\\IdGeneratorInterface;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n$generator = $container->get(IdGeneratorInterface::class);\n\n$id = $generator->generate();\n```\n\n----------------------------------------\n\nTITLE: Generate PHP8 Attributes from Doctrine Annotations\nDESCRIPTION: This command uses the Hyperf code generator to replace Doctrine Annotations with PHP8 Attributes in the specified application directory. It requires the hyperf/code-generator package to be installed. The command should be executed within the Hyperf project directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog-v3.0.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp bin/hyperf.php code:generate -D app\n```\n\n----------------------------------------\n\nTITLE: Custom Validator Usage in Request\nDESCRIPTION: Shows how to use the custom validator 'foo' in a form request. The 'name' field is validated using the 'foo' rule, which was previously registered using the `ValidatorFactoryResolved` event.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_47\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Request;\n\nuse Hyperf\\Validation\\Request\\FormRequest;\n\nclass DemoRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     */\n    public function rules(): array\n    {\n        return [\n            // 使用 foo 验证器\n            'name' => 'foo'\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a NATS consumer\nDESCRIPTION: This command utilizes the Hyperf console to generate a new NATS consumer class, simplifying the process of creating a consumer for NATS messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nats.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:nats-consumer DemoConsumer\n```\n\n----------------------------------------\n\nTITLE: Check PCNTL Extension\nDESCRIPTION: This shell command is used to check if the `pcntl` extension is enabled in PHP. The `pcntl` extension is required for the new version's annotation scanning feature.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.2.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp --ri pcntl\n\npcntl\n\npcntl support => enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos gRPC Client in config_center.php (Hyperf)\nDESCRIPTION: This PHP configuration snippet shows how to enable gRPC for the Nacos client within the Hyperf configuration center.  It configures the `grpc.enable` option to `true` to use gRPC for configuration synchronization with Nacos. This configuration is used by Hyperf to connect to Nacos.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config-center.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\ConfigApollo\\PullMode;\nuse Hyperf\\ConfigCenter\\Mode;\n\nreturn [\n    'enable' => (bool) env('CONFIG_CENTER_ENABLE', true),\n    'driver' => env('CONFIG_CENTER_DRIVER', 'nacos'),\n    'mode' => env('CONFIG_CENTER_MODE', Mode::PROCESS),\n    'drivers' => [\n        'nacos' => [\n            'driver' => Hyperf\\ConfigNacos\\NacosDriver::class,\n            'merge_mode' => Hyperf\\ConfigNacos\\Constants::CONFIG_MERGE_OVERWRITE,\n            'interval' => 3,\n            'default_key' => 'nacos_config',\n            'listener_config' => [\n                'nacos_config' => [\n                    'tenant' => 'tenant', // corresponding with service.namespaceId\n                    'data_id' => 'hyperf-service-config',\n                    'group' => 'DEFAULT_GROUP',\n                ],\n            ],\n            'client' => [\n                // nacos server url like https://nacos.hyperf.io, Priority is higher than host:port\n                // 'uri' => '',\n                'host' => '127.0.0.1',\n                'port' => 8848,\n                'username' => null,\n                'password' => null,\n                'guzzle' => [\n                    'config' => null,\n                ],\n                // Only support for nacos v2.\n                'grpc' => [\n                    'enable' => true,\n                    'heartbeat' => 10,\n                ],\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Old config/dependencies.php structure in PHP\nDESCRIPTION: Shows the old file structure of config/dependencies.php in Hyperf 1.0. It returns an array containing a 'dependencies' key, which holds the dependency mappings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/1.1.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// config/dependencies.php 檔案\n\nreturn [\n    'dependencies' => [\n        FooInterface::class => Foo::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: One-to-Many (Reverse) Association\nDESCRIPTION: Defines the inverse of a one-to-many relationship using the belongsTo method in the Book model. This allows retrieving the author (User) of a book. The parameters specify the related model, foreign key, and owner key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/relationship.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass Book extends Model\n{\n    public function author()\n    {\n        return $this->belongsTo(User::class, 'user_id', 'id');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Manually Create Validator\nDESCRIPTION: This code demonstrates how to manually create a validator instance using the `ValidatorFactoryInterface` and the `make` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\Validation\\Contract\\ValidatorFactoryInterface;\n\nclass IndexController\n{\n    #[Inject]\n    protected ValidatorFactoryInterface $validationFactory;\n\n    public function foo(RequestInterface $request)\n    {\n        $validator = $this->validationFactory->make(\n            $request->all(),\n            [\n                'foo' => 'required',\n                'bar' => 'required',\n            ],\n            [\n                'foo.required' => 'foo is required',\n                'bar.required' => 'bar is required',\n            ]\n        );\n\n        if ($validator->fails()){\n            // Handle exception\n            $errorMessage = $validator->errors()->first();  \n        }\n        // Do something\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performance Testing with wrk in Hyperf\nDESCRIPTION: This snippet demonstrates a performance test using `wrk` to benchmark the Hyperf framework. It sends concurrent requests to a specified endpoint and measures the response time and throughput.  The command specifies 1024 connections across 8 threads to the specified URL.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/README-CN.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nwrk -c 1024 -t 8 http://127.0.0.1:9501/\n```\n\n----------------------------------------\n\nTITLE: Custom Resource Collection with 'data' Key (Hyperf, PHP)\nDESCRIPTION: Shows a custom resource collection that explicitly includes a `data` key in its `toArray` method. This ensures that the collection is always wrapped in a `data` key, regardless of the top-level wrapping setting.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'data' => $this->collection,\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example Resource Collection JSON Response (Hyperf, JSON)\nDESCRIPTION: Provides an example of a typical JSON response generated by a resource collection in Hyperf. The response includes a `data` key containing an array of user objects, each with `id`, `name`, and `email` attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Eladio Schroeder Sr.\",\n            \"email\": \"therese28@example.com\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Liliana Mayert\",\n            \"email\": \"evandervort@example.com\"\n        }\n    ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Keys for Internationalization in PHP\nDESCRIPTION: This code snippet shows how to define translation keys in a language file for internationalization purposes. The example defines a translation key `params.invalid` with a message that includes a placeholder for a parameter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/constants.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// 国际化配置\n\nreturn [\n    'params.invalid' => 'Params :param is invalid.',\n];\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Template Engine\nDESCRIPTION: Defines a custom template engine class `TemplateEngine` that implements the `EngineInterface`.  This demonstrates how to integrate a custom template engine into the Hyperf view component by implementing the `render` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Engine;\n\nuse Hyperf\\View\\Engine\\EngineInterface;\n\nclass TemplateEngine implements EngineInterface\n{\n    public function render($template, $data, $config): string\n    {\n        // 實例化對應的模板引擎的實例\n        $engine = new TemplateInstance();\n        // 並調用對應的渲染方法\n        return $engine->render($template, $data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie in Hyperf Response\nDESCRIPTION: Explains how to set a cookie using the `withCookie()` method of the `ResponseInterface`. It requires creating a `Hyperf\\HttpMessage\\Cookie\\Cookie` object and passing it to the `withCookie()` method.  The response must then be returned.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/response.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\nuse Hyperf\\HttpMessage\\Cookie\\Cookie;\n\nclass IndexController\n{\n    public function cookie(ResponseInterface $response): Psr7ResponseInterface\n    {\n        $cookie = new Cookie('key', 'value');\n        return $response->withCookie($cookie)->withContent('Hello Hyperf.');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 1.1 ConfigProvider Structure - PHP\nDESCRIPTION: Demonstrates the updated structure of a `ConfigProvider` class in Hyperf 1.1.  The `annotations.scan.paths` configuration is used to specify the paths to scan for annotations. The return value is an array containing nested arrays specifying configuration for the component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/1.1.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nclass ConfigProvider\n{\n\n    public function __invoke(): array\n    {\n        return [\n            'annotations' => [\n                'scan' => [\n                    'paths' => [\n                        __DIR__,\n                    ],\n                ],\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Where Clause to Search Query (PHP)\nDESCRIPTION: Adds a `where` clause to a search query.  Currently only supports basic numeric equality checks. These where clauses are mainly used for filtering search queries based on owner IDs or other numeric attributes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->where('user_id', 1)->get();\n```\n\n----------------------------------------\n\nTITLE: Custom Polymorphic Mapping PHP\nDESCRIPTION: Customizes the polymorphic mapping, associating the 'user' key with the `App\\Model\\User` class and the 'book' key with the `App\\Model\\Book` class. This allows using 'user' and 'book' as `imageable_type` values in the database instead of the full class names.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/relationship.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model;\nuse Hyperf\\Database\\Model\\Relations\\Relation;\nRelation::morphMap([\n    'user' => Model\\User::class,\n    'book' => Model\\Book::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sentinel Mode (Environment Variables)\nDESCRIPTION: Configures Redis Sentinel mode using environment variables, including enabling Sentinel, setting the Sentinel password, and specifying the Sentinel node addresses.  Multiple sentinel nodes are separated by semicolons.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/redis.md#_snippet_7\n\nLANGUAGE: env\nCODE:\n```\nREDIS_HOST=\nREDIS_AUTH=Redis例項密碼\nREDIS_PORT=\nREDIS_DB=\nREDIS_SENTINEL_ENABLE=true\nREDIS_SENTINEL_PASSWORD=Redis哨兵密碼\nREDIS_SENTINEL_NODE=192.168.89.129:26381;192.168.89.129:26380;\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Message and Service\nDESCRIPTION: This snippet shows the definition of a gRPC service and associated message types using the protobuf language. It defines a `Hi` service with a `SayHello` RPC, and `HiUser` and `HiReply` message types for request and response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/grpc.md#_snippet_0\n\nLANGUAGE: Protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage grpc;\n\nservice Hi {\n    rpc SayHello (HiUser) returns (HiReply) {\n    }\n}\n\nmessage HiUser {\n    string name = 1;\n    int32 sex = 2;\n}\n\nmessage HiReply {\n    string message = 1;\n    HiUser user = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Define an Accessor to Return Computed Values in Hyperf Model\nDESCRIPTION: Defines an accessor for the `full_name` attribute in a Hyperf model. This accessor combines the `first_name` and `last_name` attributes to generate a full name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/mutators.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 獲取使用者的姓名.\n     *\n     * @return string\n     */\n    public function getFullNameAttribute()\n    {\n        return \"{$this->first_name} {$this->last_name}\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Blade Isset and Empty Directives\nDESCRIPTION: This Blade template demonstrates the usage of the `@isset` and `@empty` directives, which act as shortcuts for their respective PHP functions to check if a variable is set and not null or if a variable is empty.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_14\n\nLANGUAGE: blade\nCODE:\n```\n@isset($records)\n    // $records 已經定義但不為空\n@endisset\n\n@empty($records)\n    // $records 為空……\n@endempty\n```\n\n----------------------------------------\n\nTITLE: Date Casting with Format in Hyperf Model\nDESCRIPTION: Defines attribute casting for dates with a specific format in a Hyperf model. This allows you to format date attributes when serializing the model to an array or JSON.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/mutators.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 應進行型別轉換的屬性\n     *\n     * @var array\n     */\n    protected $casts = [\n         'created_at' => 'datetime:Y-m-d',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Config Provider Data Structure Change - Updated\nDESCRIPTION: This snippet demonstrates the change in the structure of the Config Provider.  A new 'annotations' layer was added to align with the configuration file structure. This affects how annotation scanning paths are defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog/changelog-v1.1.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n'annotations' => [\n    'scan' => [\n        'paths' => [\n            __DIR__,\n        ],\n        'collectors' => [],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Creating a Column (php)\nDESCRIPTION: This code snippet demonstrates how to define a column in a migration using the `Blueprint` object. The example creates a string column named 'name'.  Various column types are available on the `Blueprint` object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Database\\Schema\\Schema;\nuse Hyperf\\Database\\Schema\\Blueprint;\nuse Hyperf\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    public function up(): void\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->string('name');\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inject Property with PHP 8 Typehint\nDESCRIPTION: This code snippet demonstrates how to use PHP 8's typehint feature to inject a property using the `@Inject` annotation in Hyperf.  It replaces the `@var` annotation, simplifying the code.  It assumes that `ExampleService` is a valid service class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.1.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Example {\n    /**\n    * @Inject\n    */\n    private ExampleService $exampleService;\n}\n```\n\n----------------------------------------\n\nTITLE: Add optimize-autoloader Config - composer.json\nDESCRIPTION: Adds the `optimize-autoloader` and `sort-packages` configuration options to the `composer.json` file. This optimizes the autoloader for performance and ensures packages are sorted. This configuration is added inside `config` section of `composer.json`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.1.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"config\": {\n        \"optimize-autoloader\": true,\n        \"sort-packages\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Config Provider Structure Change in Hyperf (Now)\nDESCRIPTION: This snippet illustrates the new structure of the 'annotations' section within the Hyperf config provider. The scan configuration is now nested under 'annotations', which contains the paths to scan and the collectors to use.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/CHANGELOG.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n'annotations' => [\n    'scan' => [\n        'paths' => [\n            __DIR__,\n        ],\n        'collectors' => [],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Redis Package\nDESCRIPTION: This shell command installs the `hyperf/redis` package using Composer, adding Redis support to your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/redis.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/redis\n```\n\n----------------------------------------\n\nTITLE: Adding Records via Query Builder\nDESCRIPTION: This example shows how to add a collection of models to the search index using the `searchable` method on a model query builder.  This will add all matching records to the search index.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// 使用模型查詢構造器增加...\nApp\\Order::where('price', '>', 100)->searchable();\n\n// 使用模型關係增加記錄...\n$user->orders()->searchable();\n\n// 使用集合增加記錄...\n$orders->searchable();\n```\n\n----------------------------------------\n\nTITLE: 1.0 ConfigProvider scan path structure PHP\nDESCRIPTION: This snippet shows the structure of ConfigProvider in Hyperf 1.0. It highlights the 'scan.path' configuration, which is responsible for defining the paths to scan for annotations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/1.1.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nclass ConfigProvider\n{\n\n    public function __invoke(): array\n    {\n        return [\n            'scan' => [\n                'paths' => [\n                    __DIR__,\n                ],\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Coroutine Context Value in Hyperf\nDESCRIPTION: Demonstrates overriding a value in the current coroutine context using the `Context::override()` method. This method allows complex context handling, such as modifying an existing value before setting it back.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/coroutine.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Hyperf\\Context\\Context;\n\n// 從協程上下文取出 $request 對象並設置 key 為 foo 的 Header，然後再保存到協程上下文中\n$request = Context::override(ServerRequestInterface::class, function (ServerRequestInterface $request) {\n    return $request->withAddedHeader('foo', 'bar');\n});\n```\n\n----------------------------------------\n\nTITLE: Blade and JavaScript Frameworks (Blade)\nDESCRIPTION: This Blade template shows how to prevent Blade from interpreting JavaScript framework syntax (like `{{ name }}`) by using the `@` symbol as an escape character. The `@@json()` example also shows how to escape Blade directives.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_11\n\nLANGUAGE: blade\nCODE:\n```\n<h1>Laravel</h1>\n\nHello, @{{ name }}.\n\n{{-- Blade --}}\n@@json()\n\n<!-- HTML 輸出 -->\n@json()\n```\n\n----------------------------------------\n\nTITLE: Enable and Dump SQL Query Log in Hyperf\nDESCRIPTION: Demonstrates how to enable SQL query logging and retrieve the last executed SQL query in Hyperf for debugging purposes. This should only be used in development environments.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/quick-start.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\DbConnection\\Db;\nuse Hyperf\\Collection\\Arr;\nuse App\\Model\\Book;\n\n// 啟用 SQL 資料記錄功能\nDb::enableQueryLog();\n\n$book = Book::query()->find(1);\n\n// 列印最後一條 SQL 相關資料\nvar_dump(Arr::last(Db::getQueryLog()));\n```\n\n----------------------------------------\n\nTITLE: Sending Requests with Cookies - Hyperf Testing Client - PHP\nDESCRIPTION: Demonstrates how to send a request with cookies using `Hyperf\\Testing\\Client`. It initializes a request using `initRequest()`, adds cookie parameters using `withCookieParams()`, and sends the request using `sendRequest()`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/testing.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Testing\\Client;\nuse Hyperf\\Codec\\Json;\n\n$client = make(Client::class);\n\n$response = $client->sendRequest($client->initRequest('POST', '/request')->withCookieParams([\n    'X-CODE' => $id = uniqid(),\n]));\n\n$data = Json::decode((string) $response->getBody());\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Resource Collection (PHP)\nDESCRIPTION: This PHP snippet shows how to add metadata (like 'links') to a resource collection.  This metadata is added directly to the `toArray` method of the `UserCollection` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Process via Annotation\nDESCRIPTION: This snippet demonstrates how to register a custom process class using the `#[Process]` annotation. This allows Hyperf to automatically discover and register the process. The `Hyperf\\Process\\Annotation\\Process` namespace must be imported.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/process.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process(name: \"foo_process\")]\nclass FooProcess extends AbstractProcess\n{\n    public function handle(): void\n    {\n        // 您的代碼 ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Components in Blade\nDESCRIPTION: This snippet illustrates how to render a component dynamically using the `x-dynamic-component` tag. The `:component` attribute takes a variable that resolves to the name of the component to render. This enables rendering different components based on runtime conditions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n<x-dynamic-component :component=\"$componentName\" class=\"mt-4\" />\n```\n\n----------------------------------------\n\nTITLE: Log Facade Class\nDESCRIPTION: This code demonstrates how to create a static Log class to access the logger, providing a more familiar logging interface. The `__callStatic` magic method allows for static calls to the Logger methods.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/logger.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\Logger\\LoggerFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\nclass Log\n{\n    public static function get(string $name = 'app')\n    {\n        return ApplicationContext::getContainer()->get(LoggerFactory::class)->get($name);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Register Socket.IO Namespace via Router\nDESCRIPTION: This PHP code demonstrates how to register a Socket.IO namespace using the SocketIORouter class, providing an alternative to using annotations for mapping controllers to namespaces. It allows defining the namespace and the corresponding controller class programmatically.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/socketio-server/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\SocketIOServer\\Collector\\SocketIORouter;\nuse App\\Controller\\WebSocketController;\nSocketIORouter::addNamespace('/xxx' , WebSocketController::class);\n```\n\n----------------------------------------\n\nTITLE: Access One-to-One Relation as Dynamic Property (PHP)\nDESCRIPTION: This code demonstrates how to access the related Role model through the User model using the dynamically defined role property. It queries for a specific user and then accesses the associated role, simplifying data retrieval.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$role = User::query()->find(1)->role;\n\n```\n\n----------------------------------------\n\nTITLE: Stopping chunked results by returning false\nDESCRIPTION: This snippet demonstrates how to stop processing chunked results by returning `false` within the closure passed to the `chunk()` method. This allows for early termination of the chunking process based on certain conditions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\DbConnection\\Db;\n\nDb::table('user')->orderBy('id')->chunk(100, function ($users) {\n\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Add Composer Optimize Autoloader Config JSON\nDESCRIPTION: This JSON snippet shows how to add the `optimize-autoloader` and `sort-packages` configuration options to your `composer.json` file. This configuration optimizes the autoloader for better performance, which is required since Hyperf 2.0.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/2.1.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"config\": {\n        \"optimize-autoloader\": true,\n        \"sort-packages\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AMQP Consumer Message Return Type (Hyperf >= 3.1)\nDESCRIPTION: Illustrates the updated return type of the `consumeMessage` method in AMQP consumers from Hyperf 3.1 onwards. It now returns a `Result` enum, providing a more structured way to indicate the acknowledgment result.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/3.1.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// v3.1之后\npublic function consumeMessage($data, AMQPMessage $message): Result\n{\n    return Result::ACK;\n}\n```\n\n----------------------------------------\n\nTITLE: Paginated Resource Collection in Controller (Hyperf, PHP)\nDESCRIPTION: Demonstrates returning a paginated collection from a Hyperf controller using a resource collection. The `User::paginate()` method is used to retrieve a paginated set of users, which is then passed to the `UserCollection` and converted to a response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\UserCollection;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserCollection(User::paginate()))->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding ErrorExceptionHandler Listener in Hyperf\nDESCRIPTION: This snippet shows how to add the `ErrorExceptionHandler` listener in Hyperf. By including `\\Hyperf\\ExceptionHandler\\Listener\\ErrorExceptionHandler::class` in the listeners configuration file, PHP errors will be converted into `ErrorException` exceptions, allowing them to be handled by the exception handling system.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/exception-handler.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    \\Hyperf\\ExceptionHandler\\Listener\\ErrorExceptionHandler::class\n];\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Results in Hyperf\nDESCRIPTION: Illustrates how to access data within the `stdClass` objects returned by the `get()` method after querying the database using Hyperf's DB facade. It shows how to loop through the collection and access properties of each object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating NATS Consumer Class\nDESCRIPTION: This PHP code defines a NATS consumer class that extends `AbstractConsumer` and is annotated with `Consumer`. The `consume` method is implemented to process incoming messages. The `subject`, `queue`, `name`, and `nums` parameters configure the consumer's behavior.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nats.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Nats\\Consumer;\n\nuse Hyperf\\Nats\\AbstractConsumer;\nuse Hyperf\\Nats\\Annotation\\Consumer;\nuse Hyperf\\Nats\\Message;\n\n#[Consumer(subject: 'hyperf.demo', queue: 'hyperf.demo', name: 'DemoConsumer', nums: 1)]\nclass DemoConsumer extends AbstractConsumer\n{\n    public function consume(Message $payload)\n    {\n        // Do something...\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adjust config/container.php file content in PHP\nDESCRIPTION: Shows how to adjust the config/container.php file in Hyperf 1.1 to accommodate the changes in dependencies.php location and structure. The DefinitionSourceFactory simplifies the container configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/1.1.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Initial a dependency injection container that implemented PSR-11 and return the container.\n */\ndeclare(strict_types=1);\n\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Di\\Definition\\DefinitionSourceFactory;\nuse Hyperf\\Utils\\ApplicationContext;\nuse Psr\\Container\\ContainerInterface;\n\n$container = new Container((new DefinitionSourceFactory(true))());\nif (! $container instanceof ContainerInterface) {\n    throw new RuntimeException('The dependency injection container is invalid.');\n}\nreturn ApplicationContext::setContainer($container);\n```\n\n----------------------------------------\n\nTITLE: Hyperf Nano Event Listener Example\nDESCRIPTION: Shows how to add an event listener to a Hyperf Nano application. The listener is triggered when the BootApplication event is dispatched and logs a message using the StdoutLoggerInterface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nano.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addListener(BootApplication::class, function($event){\n    $this->get(StdoutLoggerInterface::class)->info('App started');\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Parameter Grouping in Where Clause - Hyperf PHP\nDESCRIPTION: Explains how to create advanced `where` clauses with parameter grouping using a `Closure` in Hyperf. This allows you to create nested conditions. The closure receives a query instance, allowing constraints to be grouped within parentheses.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('name', '=', 'John')\n    ->where(function ($query) {\n        $query->where('votes', '>', 100)\n                ->orWhere('title', '=', 'Admin');\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Configure Session Aspect\nDESCRIPTION: This PHP configuration enables the SessionAspect for Socket.IO, allowing the use of Hyperf's session component within Socket.IO connections. It configures the aspect to intercept Socket.IO requests and manage sessions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/socketio-server/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/aspect.php\nreturn [\n    \\Hyperf\\SocketIOServer\\Aspect\\SessionAspect::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Create a Client using ClientFactory\nDESCRIPTION: This snippet demonstrates how to create a client instance for a service using the `Hyperf\\Jet\\ClientFactory`. It takes the service name and protocol as arguments to create the client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/jet.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Jet\\ClientFactory;\n\n$clientFactory = new ClientFactory();\n$client = $clientFactory->create($service = 'CalculatorService', $protocol = 'jsonrpc');\n```\n\n----------------------------------------\n\nTITLE: Asynchronous MySQL Query with Callbacks (Swoole 1.x)\nDESCRIPTION: This code demonstrates an asynchronous MySQL query using callbacks in Swoole 1.x.  Each operation (connect, query, update) requires a nested callback function.  This illustrates the \"callback hell\" problem that coroutines aim to solve.  The code connects to a MySQL database, queries a row from the 'users' table, updates a row, and then closes the connection.  It's important to note that this style of asynchronous programming is less desirable compared to coroutines.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/coroutine.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$db = new swoole_mysql();\n$config = array(\n    'host' => '127.0.0.1',\n    'port' => 3306,\n    'user' => 'test',\n    'password' => 'test',\n    'database' => 'test',\n);\n\n$db->connect($config, function ($db, $r) {\n    // Query a row of data from users table\n    $sql = 'select * from users where id = 1';\n    $db->query($sql, function(swoole_mysql $db, $r) {\n        if ($r === true) {\n            $rows = $db->affected_rows;\n            // Modify a row of data after the query is successful\n            $updateSql = 'update users set name=\\'new name\\' where id = 1';\n            $db->query($updateSql, function (swoole_mysql $db, $r) {\n                if ($r === true) {\n                    return $this->response->end('Update Successfully');\n                }\n            });\n        }\n        $db->close();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Install StatsD Client via Composer\nDESCRIPTION: Installs the `domnikl/statsd` package via Composer, which is required for using StatsD with the Hyperf Metric component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require domnikl/statsd\n```\n\n----------------------------------------\n\nTITLE: Generating a Migration File (bash)\nDESCRIPTION: This command generates a new migration file. The filename argument typically indicates the purpose of the migration. The `--table` option specifies the table name for modification, while `--create` generates a migration file to create the specified table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:migration create_users_table\n```\n\n----------------------------------------\n\nTITLE: Define Validation Scene\nDESCRIPTION: This code snippet demonstrates how to define a validation scene in a form request.  Scenes allow you to apply different sets of validation rules based on the context.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Request;\n\nuse Hyperf\\Validation\\Request\\FormRequest;\n\nclass SceneRequest extends FormRequest\n{\n    protected array $scenes = [\n        'foo' => ['username'],\n        'bar' => ['username', 'password'],\n    ];\n\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     */\n    public function rules(): array\n    {\n        return [\n            'username' => 'required',\n            'gender' => 'required',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Producing Delayed Messages in Hyperf\nDESCRIPTION: This code demonstrates how to produce delayed messages using Hyperf's AMQP component. It creates a command that sends a message with a specified delay using a Direct exchange. It utilizes the `Hyperf\\Amqp\\Producer` and `Hyperf\\Context\\ApplicationContext` classes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/amqp.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse App\\Amqp\\Producer\\DelayDirectProducer;\n//use App\\Amqp\\Producer\\DelayFanoutProducer;\n//use App\\Amqp\\Producer\\DelayTopicProducer;\nuse Hyperf\\Amqp\\Producer;\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Context\\ApplicationContext;\nuse Psr\\Container\\ContainerInterface;\n\n#[Command]\nclass DelayCommand extends HyperfCommand\n{\n    protected ContainerInterface $container;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n\n        parent::__construct('demo:command');\n    }\n\n    public function configure()\n    {\n        parent::configure();\n        $this->setDescription('Hyperf Demo Command');\n    }\n\n    public function handle()\n    {\n        //1.delayed + direct\n        $message = new DelayDirectProducer('delay+direct produceTime:'.(microtime(true)));\n        //2.delayed + fanout\n        //$message = new DelayFanoutProducer('delay+fanout produceTime:'.(microtime(true)));\n        //3.delayed + topic\n        //$message = new DelayTopicProducer('delay+topic produceTime:' . (microtime(true)));\n        $message->setDelayMs(5000);\n        $producer = ApplicationContext::getContainer()->get(Producer::class);\n        $producer->produce($message);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoload for View Components in PHP\nDESCRIPTION: This snippet shows how to configure the autoloading of view components in the `view.php` configuration file. It specifies the directories where the application should look for component classes and components.  This allows Hyperf to automatically register components for use in Blade templates.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    'autoload' => [\n        'classes' => ['App\\\\Other\\\\Component\\\\','App\\\\Another\\\\Component\\\\'],\n        'components' => ['package::components.','components.'],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Prometheus Custom Mode\nDESCRIPTION: Configures the Prometheus driver to use custom mode, where the application is responsible for collecting and reporting metrics.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n'mode' => Constants::CUSTOM_MODE\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Controller in Hyperf\nDESCRIPTION: This code snippet demonstrates how to create a basic controller in Hyperf that handles an HTTP request. It uses dependency injection to get the RequestInterface and ResponseInterface objects, retrieves a 'target' input parameter, and returns a greeting message. The controller method `index` accepts `RequestInterface` and `ResponseInterface` as parameters which are automatically injected by the dependency injection container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/controller.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\n\nclass IndexController\n{\n    // 在引數上透過定義 RequestInterface 和 ResponseInterface 來獲取相關物件，物件會被依賴注入容器自動注入\n    public function index(RequestInterface $request, ResponseInterface $response)\n    {\n        $target = $request->input('target', 'World');\n        return 'Hello ' . $target;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install SQL Server Driver via Composer\nDESCRIPTION: This command installs the SQL Server driver (incubator version) for Hyperf using Composer. It requires Swoole >= 5.1.0 and pdo_odbc, which needs `--with-swoole-odbc` enabled during compilation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/quick-start.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/database-sqlserver-incubator\n```\n\n----------------------------------------\n\nTITLE: Displaying Data (Blade)\nDESCRIPTION: This Blade template displays the value of the `$name` variable passed from the controller.  The {{ }} syntax automatically escapes the output for security.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\nHello, {{ $name }}.\n```\n\n----------------------------------------\n\nTITLE: Getting specific input values - PHP\nDESCRIPTION: Shows how to retrieve specific input values using the `input()` method.  A default value can be provided as the second argument, which is returned if the input key is not found. Also illustrates getting nested values in arrays using dot notation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n// 存在則返回，不存在則返回 null\n$name = $request->input('name');\n// 存在則返回，不存在則返回默認值 Hyperf\n$name = $request->input('name', 'Hyperf');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$name = $request->input('products.0.name');\n\n$names = $request->input('products.*.name');\n```\n\n----------------------------------------\n\nTITLE: Install Box on Mac\nDESCRIPTION: These commands download, move, and set permissions for the Box executable on macOS. Ensure the directory where Box is located is in your system's PATH environment variable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/eco/box.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/hyperf/box/releases/download/v0.5.5/box_x86_64_macos -O box\nsudo mv ./box /usr/local/bin/box\nsudo chmod 755 /usr/local/bin/box\n// Make sure /usr/local/bin/box in your $PATH env, or put `box` into any path in $PATH env that you want\n```\n\n----------------------------------------\n\nTITLE: Property Injection with Annotations in PHP 8\nDESCRIPTION: This code snippet demonstrates how to use the `@Inject` annotation in PHP 8 to inject dependencies via typed member property declarations, eliminating the need for `@var` declarations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog/changelog-v2.0.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Example {\n    /**\n     * @Inject\n     */\n    private ExampleService $exampleService;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating JSON fields in Hyperf\nDESCRIPTION: This snippet illustrates how to update values within a JSON field using the `->` syntax (available in MySQL 5.7+). It updates the 'enabled' value within the 'options' JSON field.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('id', 1)->update(['options->enabled' => true]);\n```\n\n----------------------------------------\n\nTITLE: InfluxDB Configuration Example\nDESCRIPTION: This PHP code snippet shows a complete InfluxDB configuration within the `metric.php` file. It includes settings for the driver, namespace, host, port, username, password, database name, and push interval. It retrieves values from environment variables where possible, providing defaults.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'default' => env('METRIC_DRIVER', 'influxdb'),\n    'use_standalone_process' => env('TELEMETRY_USE_STANDALONE_PROCESS', true),\n    'enable_default_metric' => env('TELEMETRY_ENABLE_DEFAULT_TELEMETRY', true),\n    'metric' => [\n        'influxdb' => [\n            'driver' => Hyperf\\Metric\\Adapter\\InfluxDB\\MetricFactory::class,\n            'namespace' => env('APP_NAME', 'skeleton'),\n            'host' => env('INFLUXDB_HOST', '127.0.0.1'),\n            'port' => env('INFLUXDB_PORT', '8086'),\n            'username' => env('INFLUXDB_USERNAME', ''),\n            'password' => env('INFLUXDB_PASSWORD', ''),\n            'dbname' => env('INFLUXDB_DBNAME', true),\n            'push_interval' => env('INFLUXDB_PUSH_INTERVAL', 5),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Socket.io Namespace using Router\nDESCRIPTION: This PHP snippet shows how to add Socket.io namespaces using the SocketIORouter class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/socketio-server.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\SocketIOServer\\Collector\\SocketIORouter;\nuse App\\Controller\\WebSocketController;\nSocketIORouter::addNamespace('/xxx' , WebSocketController::class);\n```\n\n----------------------------------------\n\nTITLE: Reload Channel Listener Configuration\nDESCRIPTION: Configures the ReloadChannelListener to automatically move timeout messages to the waiting queue for reprocessing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    Hyperf\\AsyncQueue\\Listener\\ReloadChannelListener::class\n];\n\n```\n\n----------------------------------------\n\nTITLE: Ordering by date with latest/oldest in Hyperf\nDESCRIPTION: This snippet shows how to easily sort results by date using the `latest` method in Hyperf's query builder. It retrieves the latest user based on the 'created_at' column.  You can also specify a custom column.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$user = Db::table('users')->latest()->first();\n```\n\n----------------------------------------\n\nTITLE: Database Model Upgrade Script in Hyperf\nDESCRIPTION: This command regenerates database models using the Hyperf code generator. It is necessary because the model base class has added type support for member variables. This upgrade is required when moving to Hyperf version 3.0.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/CHANGELOG-3.0.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp vendor/bin/regenerate-models.php $PWD/app/Model\n```\n\n----------------------------------------\n\nTITLE: Throwing a Business Exception\nDESCRIPTION: This snippet demonstrates how to throw a `BusinessException` in a controller. It uses the `ErrorCode` enum to specify the error code. Dependencies: `App\\Constants\\ErrorCode`, `App\\Exception\\BusinessException`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/constants.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse App\\Constants\\ErrorCode;\nuse App\\Exception\\BusinessException;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        throw new BusinessException(ErrorCode::SERVER_ERROR);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending a Layout (Blade)\nDESCRIPTION: This Blade template extends the 'layouts.app' layout and defines content for the 'title', 'sidebar', and 'content' sections. The @parent directive appends content to the parent's sidebar section.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<!-- Stored in storage/view/child.blade.php -->\n\n@extends('layouts.app')\n\n@section('title', 'Page Title')\n\n@section('sidebar')\n    @parent\n\n    <p>This is appended to the master sidebar.</p>\n@endsection\n\n@section('content')\n    <p>This is my body content.</p>\n@endsection\n```\n\n----------------------------------------\n\nTITLE: Factory Object Injection: UserService\nDESCRIPTION: The UserService class, modified to accept a 'enableCache' parameter in its constructor. Used in conjunction with UserServiceFactory to create instances with custom configurations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Service;\n\nclass UserService implements UserServiceInterface\n{\n    private bool $enableCache;\n    \n    public function __construct(bool $enableCache)\n    {\n        // 接收值并储存于类属性中\n        $this->enableCache = $enableCache;\n    }\n    \n    public function getInfoById(int $id)\n    {\n        return (new Info())->fill($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping by multiple columns with groupBy/having in Hyperf\nDESCRIPTION: This example shows how to group results by multiple columns using the `groupBy` method in Hyperf's query builder. It groups users by 'first_name' and 'status', and filters based on 'account_id'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->groupBy('first_name', 'status')\n    ->having('account_id', '>', 100)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Channel Usage Example (PHP)\nDESCRIPTION: Illustrates inter-coroutine communication using a Swoole Channel.  One coroutine pushes data into the channel, and another coroutine pops data from the channel. Requires the `Swoole\\Coroutine\\Channel` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/coroutine.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nco(function () {\n    $channel = new \\Swoole\\Coroutine\\Channel();\n    co(function () use ($channel) {\n        $channel->push('data');\n    });\n    $data = $channel->pop();\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Command with VALUE_NONE Option (Bash)\nDESCRIPTION: Executes a command with and without the `VALUE_NONE` option, showing how the option's presence affects the boolean value returned by `$this->input->getOption()`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/hyperf.php demo:command\n# 輸出\nbool(false)\n\n$ php bin/hyperf.php demo:command -o\n# 輸出\nbool(true)\n\n$ php bin/hyperf.php demo:command --opt\n# 輸出\nbool(true)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Error Codes and Messages (Pre-Enum)\nDESCRIPTION: This snippet shows a common approach to defining error codes and messages using a class with constants and a static array before using enum classes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/constants.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass ErrorCode\n{\n    const SERVER_ERROR = 500;\n    const PARAMS_INVALID = 1000;\n\n    public static $messages = [\n        self::SERVER_ERROR => 'Server Error',\n        self::PARAMS_INVALID => '參數非法'\n    ];\n}\n\n$message = ErrorCode::messages[ErrorCode::SERVER_ERROR] ?? '未知錯誤';\n```\n\n----------------------------------------\n\nTITLE: Stopping Chunk Processing - PHP\nDESCRIPTION: Shows how to terminate chunk processing by returning `false` from within the closure passed to the `chunk()` method.  When `false` is returned, the processing of subsequent chunks will be stopped. Requires the `Hyperf\\DbConnection\\Db` facade.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\DbConnection\\Db;\n\nDb::table('user')->orderBy('id')->chunk(100, function ($users) {\n\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Middleware - PHP\nDESCRIPTION: This code snippet demonstrates how to configure global middleware in the `config/autoload/middlewares.php` file. The middleware is applied to all requests within the specified server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/middleware/middleware.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    // http 對應 config/autoload/server.php 內每個 server 的 name 屬性對應的值，該配置僅應用在該 Server 中\n    'http' => [\n        // 陣列內配置您的全域性中介軟體，順序根據該陣列的順序\n        YourMiddleware::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configure Null Room Adapter\nDESCRIPTION: This PHP configuration replaces the default room adapter with the NullAdapter, effectively disabling the room functionality.  This is useful when room features are not required, which reduces unnecessary overhead.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/socketio-server/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\SocketIOServer\\Room\\AdapterInterface::class => \\Hyperf\\SocketIOServer\\Room\\NullAdapter::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Rewrite Interface File PHP\nDESCRIPTION: This code snippet rewrites the `CalculatorServiceInterface` to use the `MathValue` class as both input and output. This shows how to define a service that accepts and returns custom PHP objects.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/json-rpc.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\JsonRpc;\n\ninterface CalculatorServiceInterface\n{\n    public function sum(MathValue $v1, MathValue $v2): MathValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Serializer in Hyperf\nDESCRIPTION: This code snippet demonstrates how to configure the Symfony serializer to be used as the normalizer in Hyperf. It shows how to define the dependency injection mapping for the NormalizerInterface to use the SerializerFactory with the Symfony Serializer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.2.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Utils\\Serializer\\SerializerFactory;\nuse Hyperf\\Utils\\Serializer\\Serializer;\n\nreturn [\n    Hyperf\\Contract\\NormalizerInterface::class => new SerializerFactory(Serializer::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Executing Model Generation Command in Hyperf\nDESCRIPTION: This command generates a model based on the specified database table.  It utilizes AST to generate the model, allowing for convenient model regeneration even after manual modifications. Replace `table_name` with the actual name of the database table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/gen.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:model table_name\n```\n\n----------------------------------------\n\nTITLE: Listing Vendor Hyperf Directory Contents\nDESCRIPTION: This command lists the contents of the `vendor/hyperf` directory.  The output verifies that soft links have been correctly established to the corresponding directories within the `hyperf` source directory.  This setup allows direct code modification.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/component-guide/intro.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ncd vendor/hyperf/\nls -l\n```\n\n----------------------------------------\n\nTITLE: Updating Hyperf Components via Composer\nDESCRIPTION: This command updates all Hyperf dependencies to the latest compatible versions as specified in the composer.json file. It should be run in the root directory of the project. This is recommended for z version upgrades.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/versions.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update hyperf\n```\n\n----------------------------------------\n\nTITLE: Publish Scout Configuration File (Bash)\nDESCRIPTION: Publishes the default Scout configuration file to the config directory.  This allows you to customize the Scout settings for your application, such as the default search engine and indexing options.  The scout.php file is created in the config directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/scout\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf NATS Package with Composer\nDESCRIPTION: This command installs the hyperf/nats package using Composer, which provides the necessary integration for using NATS within a Hyperf application. Composer is a dependency management tool for PHP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nats.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/nats\n```\n\n----------------------------------------\n\nTITLE: Custom Engine Configuration (PHP)\nDESCRIPTION: Example configuration for a custom search engine (MySqlSearchEngine).  This shows how to define a custom engine in the Scout configuration file and associate it with a driver class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => 'mysql',\n    'engine' => [\n        'mysql' => [\n            'driver' => MySqlSearchEngine::class,\n        ],\n        'elasticsearch' => [\n            'driver' => \\Hyperf\\Scout\\Provider\\ElasticsearchProvider::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using DB Instance\nDESCRIPTION: This code demonstrates how to retrieve a DB instance from the Hyperf container and use it to execute a database query. The query retrieves data from the `user` table based on the `gender` column.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/db.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\DB\\DB;\n\n$db = ApplicationContext::getContainer()->get(DB::class);\n\n$res = $db->query('SELECT * FROM `user` WHERE gender = ?;', [1]);\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Attributes from the Attribute Bag (HTML)\nDESCRIPTION: This shows how to render the attribute bag in a component's view. All attributes passed to the component that are not constructor parameters are available through the `$attributes` variable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n    <div {{ $attributes }}>\n        <!-- 组件内容 -->\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Class Annotation Usage PHP\nDESCRIPTION: This snippet demonstrates how to use a class annotation in Hyperf. The `ClassAnnotation` is placed above the class definition of `Foo`. This annotation can then be processed by a custom collector. The example shows the annotation being used directly before the class keyword.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/annotation.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n#[ClassAnnotation]\nclass Foo {}\n```\n\n----------------------------------------\n\nTITLE: Disabling Timestamps in Hyperf Model\nDESCRIPTION: Shows how to disable automatic timestamp management in a Hyperf model by setting the `$timestamps` property to `false`. This prevents Hyperf from expecting `created_at` and `updated_at` columns in the database table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    public bool $timestamps = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Resource Directly from Controller in Hyperf\nDESCRIPTION: This PHP code illustrates how to directly return a resource from a controller action in Hyperf. The `toResponse()` method is called to generate a proper HTTP response from the resource instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\User as UserResource;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserResource(User::find(1)))->toResponse();\n    }\n\n    public function info()\n    {\n        return new UserResource(User::find(1));\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Drop Index by Convention\nDESCRIPTION: This example shows how to drop an index by providing the generated index name using the `dropIndex()` method. It drops an index named based on database, table and field names from the 'geo' table on the 'state' field.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\n$table->dropIndex('geo_state_index');\n```\n\n----------------------------------------\n\nTITLE: Custom Engine Configuration\nDESCRIPTION: This shows how to configure a custom Scout engine in the configuration file. It sets the default engine and defines the driver class for each engine.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => 'mysql',\n    'engine' => [\n        'mysql' => [\n            'driver' => MySqlSearchEngine::class,\n        ],\n        'elasticsearch' => [\n            'driver' => \\Hyperf\\Scout\\Provider\\ElasticsearchProvider::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Inserting and retrieving ID using insertGetId in Hyperf\nDESCRIPTION: This snippet shows how to insert a new record and retrieve the auto-incrementing ID using the `insertGetId` method.  It's useful when the table has an auto-incrementing primary key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$id = Db::table('users')->insertGetId(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Serializer Interface Mapping\nDESCRIPTION: This snippet demonstrates how to manually configure the mapping for the `Hyperf\\Contract\\NormalizerInterface` when the `symfony/serializer` library is required. This is required because automatic mapping is no longer provided.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog-v2.0.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Utils\\Serializer\\SerializerFactory;\nuse Hyperf\\Utils\\Serializer\\Serializer;\n\nreturn [\n    Hyperf\\Contract\\NormalizerInterface::class => new SerializerFactory(Serializer::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Backing up Portainer Data\nDESCRIPTION: Backs up Portainer data by creating a tar archive of the `/data` volume. The command uses a temporary Nginx container, mounts the Portainer data volume and a backup directory, and creates the `data.tar` archive.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --volumes-from portainer_container -v $(pwd):/backup --name backup --rm nginx tar -cf /backup/data.tar /data/\n```\n\n----------------------------------------\n\nTITLE: Passing Content to a Component Slot (HTML)\nDESCRIPTION: This shows how to pass content to a component's default slot. Any content placed between the opening and closing tags of the component is rendered in the `$slot` variable in the component's view.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n    <x-alert>\n        <strong>Whoops!</strong> Something went wrong!\n    </x-alert>\n```\n\n----------------------------------------\n\nTITLE: Configuring ETCD Connection in Hyperf\nDESCRIPTION: This code snippet defines the configuration file (`etcd.php`) for connecting to an ETCD cluster in a Hyperf application. It specifies the ETCD server URI, version, and connection options such as timeout.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/etcd.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'uri' => 'http://192.168.1.200:2379',\n    'version' => 'v3beta',\n    'options' => [\n        'timeout' => 10,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Add New Record (PHP)\nDESCRIPTION: Saves a new model instance to automatically add it to the search index. This leverages the Searchable trait which registers an observer to keep the search index in sync. The index update is performed at the end of the coroutine.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$order = new App\\Order;\n\n// ...\n\n$order->save();\n```\n\n----------------------------------------\n\nTITLE: Install Jaeger Client via Composer\nDESCRIPTION: This command installs the Jaeger client library for PHP using Composer, required when using Jaeger as the tracing backend. It provides the necessary components to send traces to a Jaeger instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tracer.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require jonahgeorge/jaeger-client-php\n```\n\n----------------------------------------\n\nTITLE: Generating PHP8 Attributes with Hyperf Code Generator\nDESCRIPTION: This snippet demonstrates how to use the Hyperf code generator to convert Doctrine Annotations to PHP8 Attributes, which is a required step when upgrading to Hyperf v3.0 due to the removal of @Annotation support.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/3.0.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp bin/hyperf.php code:generate -D app\n```\n\n----------------------------------------\n\nTITLE: Static Analysis\nDESCRIPTION: This code snippet shows how to perform static analysis on your Hyperf project. This command helps to check your code for type errors and other issues that may arise when upgrading from version 2.2 to 3.0.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog/changelog-v3.0.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer analysis\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Index\nDESCRIPTION: This example shows how to create a compound index, which involves indexing multiple columns together.  This uses the `index()` method to specify multiple columns (`account_id` and `created_at`).\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// 建立一個複合索引\n$table->index(['account_id', 'created_at'], 'index_account_id_and_created_at');\n```\n\n----------------------------------------\n\nTITLE: Binding NormalizerInterface - PHP\nDESCRIPTION: This snippet shows how to manually bind the `Hyperf\\Contract\\NormalizerInterface` when using JSONRPC and the `symfony/serializer` library, as this is no longer automatically mapped in Hyperf 2.0.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/2.0.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Utils\\Serializer\\SerializerFactory;\nuse Hyperf\\Utils\\Serializer\\Serializer;\n\nreturn [\n    Hyperf\\Contract\\NormalizerInterface::class => new SerializerFactory(Serializer::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Dynamic Component Rendering (HTML)\nDESCRIPTION: This shows how to use the `<x-dynamic-component>` to render a component whose name is determined at runtime.  The `:component` attribute specifies the name of the component to render, which can be a variable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n    <x-dynamic-component :component=\"$componentName\" class=\"mt-4\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Process for Specific Queue\nDESCRIPTION: Creates a custom consumer process to handle messages from a specific queue (e.g., 'fast'). This demonstrates how to route messages to different consumer processes based on the queue.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\AsyncQueue\\Process\\ConsumerProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process(name: \"async-queue\")]\nclass AsyncQueueConsumer extends ConsumerProcess\n{\n    protected string $queue = 'fast';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Command Component\nDESCRIPTION: This command installs the `hyperf/command` component using Composer, allowing you to use command-line features in your Hyperf or non-Hyperf projects. The component is an abstraction of the Symfony Console component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/command.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/command\n```\n\n----------------------------------------\n\nTITLE: Publish Translation Configuration\nDESCRIPTION: Publishes the configuration file for the hyperf/translation component if it hasn't been published already.  This is a prerequisite for using the validation component's language files.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/translation\n```\n\n----------------------------------------\n\nTITLE: Serving WeChat Server Configuration in Hyperf\nDESCRIPTION: This code snippet illustrates how to handle the server configuration verification request from WeChat in a Hyperf application. It calls the `serve()` method of the EasyWeChat server, which processes the request and generates a response. It returns only the body content, since WeChat expects a plain text response for verification.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/sdks/wechat.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$response = $app->server->serve();\n\nreturn $response->getContent();\n```\n\n----------------------------------------\n\nTITLE: Coroutine Server Stop Handler\nDESCRIPTION: This PHP code defines a signal handler class, CoroutineServerStopHandler, that listens for SIGTERM and SIGINT signals in the Worker process of a coroutine-style service. It shuts down all open servers when either signal is received. It uses the ProcessManager and ServerManager to manage the shutdown process.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/signal.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Kernel\\Signal;\n\nuse Hyperf\\Contract\\ConfigInterface;\nuse Hyperf\\Process\\ProcessManager;\nuse Hyperf\\Server\\ServerManager;\nuse Hyperf\\Signal\\SignalHandlerInterface;\nuse Psr\\Container\\ContainerInterface;\n\nclass CoroutineServerStopHandler implements SignalHandlerInterface\n{\n\n    protected ContainerInterface $container;\n\n    protected ConfigInterface $config;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n        $this->config = $container->get(ConfigInterface::class);\n    }\n\n    public function listen(): array\n    {\n        // There is only one Worker process in the coroutine style, so you only need to monitor the WORKER here.\n        return [\n            [self::WORKER, SIGTERM],\n            [self::WORKER, SIGINT],\n        ];\n    }\n\n    public function handle(int $signal): void\n    {\n        ProcessManager::setRunning(false);\n\n        foreach (ServerManager::list() as [$type, $server]) {\n            // Cyclically close open services\n            $server->shutdown();\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Process via Configuration\nDESCRIPTION: This snippet shows how to register a custom process class within the `config/autoload/processes.php` configuration file. By adding the class to the returned array, Hyperf will automatically create and manage the process.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/process.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// config/autoload/processes.php\nreturn [\n    \\App\\Process\\FooProcess::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Scout Configuration File\nDESCRIPTION: This is the configuration file for Hyperf Scout. It defines the default engine, chunk sizes, prefix, soft delete option, concurrency, and engine-specific settings such as Elasticsearch host and index configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => env('SCOUT_ENGINE', 'elasticsearch'),\n    'chunk' => [\n        'searchable' => 500,\n        'unsearchable' => 500,\n    ],\n    'prefix' => env('SCOUT_PREFIX', ''),\n    'soft_delete' => false,\n    'concurrency' => 100,\n    'engine' => [\n        'elasticsearch' => [\n            'driver' => Hyperf\\Scout\\Provider\\ElasticsearchProvider::class,\n            // 如果 index 設置為 null，則每個模型會對應一個索引，反之每個模型對應一個類型\n            'index' => null,\n            'hosts' => [\n                env('ELASTICSEARCH_HOST', 'http://127.0.0.1:9200'),\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf WebSocket Client\nDESCRIPTION: This command installs the hyperf/websocket-client component using Composer. This package provides the necessary classes and functions for establishing and managing WebSocket connections.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/websocket-client.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/websocket-client\n```\n\n----------------------------------------\n\nTITLE: Getting Component Attributes in HTML\nDESCRIPTION: This snippet demonstrates how to retrieve a specific attribute value from a component using the `get()` method. The first parameter is the attribute name, and the second parameter is the default value to use if the attribute is not defined. The result is used within a div tag.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"{{ $attributes->get(\"class\", \"default\") }}\">\n    <!-- Component content -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: UserServiceFactory Definition\nDESCRIPTION: This defines a factory class `UserServiceFactory` to create `UserService` instances.  It retrieves a configuration value and passes it to the `UserService` constructor.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/di.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php \nnamespace App\\Service;\n\nuse Hyperf\\Contract\\ConfigInterface;\nuse Psr\\Container\\ContainerInterface;\n\nclass UserServiceFactory\n{\n    // Implement an __invoke() method for the production of the object, and parameters will be automatically injected into a current container instance and the parameters array.\n    public function __invoke(ContainerInterface $container, array $parameters = [])\n    {\n        $config = $container->get(ConfigInterface::class);\n        // Assume that the key of corresponding config is cache.enable\n        $enableCache = $config->get('cache.enable', false);\n        // The method make(string $name, array $parameters = []) is equivalent to new. Using make() allows AOP to intervene, however, using new will prevent AOP to intervene into normal processing.\n        return make(UserService::class, compact('enableCache'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Left and Right Join in Hyperf\nDESCRIPTION: This snippet shows how to use `leftJoin` and `rightJoin` to perform left and right joins respectively.  It joins the 'users' table with the 'posts' table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n    ->get();\n$users = Db::table('users')\n    ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Process Class in Hyperf\nDESCRIPTION: This code snippet demonstrates how to create a custom process by extending the `Hyperf\\Process\\AbstractProcess` class and implementing the `handle` method. The `handle` method contains the logic that the process will execute.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/process.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\Process\\AbstractProcess;\n\nclass FooProcess extends AbstractProcess\n{\n    public function handle(): void\n    {\n        // 您的程式碼 ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publish Hyperf DB Configuration\nDESCRIPTION: Publishes the default configuration file for the hyperf/db component to the config/autoload directory. This allows customization of database connection settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/db.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/db\n```\n\n----------------------------------------\n\nTITLE: Using Task with Annotations (Hyperf PHP)\nDESCRIPTION: This code demonstrates how to use the `#[Task]` annotation to automatically dispatch a method to a Task worker.  When the method is called within a Worker process, it's automatically sent to a Task process and awaits the result.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/task.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Coroutine\\Coroutine;\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\Task\\Annotation\\Task;\n\nclass AnnotationTask\n{\n    #[Task]\n    public function handle($cid)\n    {\n        return [\n            'worker.cid' => $cid,\n            // task_enable_coroutine=false 时返回 -1，反之 返回对应的协程 ID\n            'task.cid' => Coroutine::id(),\n        ];\n    }\n}\n\n$container = ApplicationContext::getContainer();\n$task = $container->get(AnnotationTask::class);\n$result = $task->handle(Coroutine::id());\n```\n\n----------------------------------------\n\nTITLE: Updating a Record in the Search Index\nDESCRIPTION: Updates a searchable model's data in the search index by updating the model's properties and saving it. Scout automatically synchronizes the changes to Elasticsearch when the model is saved.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$order = App\\Order::find(1);\n\n    // Update order...\n\n    $order->save();\n```\n\n----------------------------------------\n\nTITLE: Testing Service Availability\nDESCRIPTION: This command tests the availability of a service by sending a curl request to the service's endpoint. If the service is running correctly, it should return the expected data. Replace `127.0.0.1:9501` with the actual endpoint of the service.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_60\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://127.0.0.1:9501/\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Testing and Pest\nDESCRIPTION: Installs the hyperf/testing package and pestphp/pest package as development dependencies using Composer. These packages provide tools and utilities for writing and running tests in a Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/testing --dev\ncomposer require pestphp/pest --dev\n```\n\n----------------------------------------\n\nTITLE: Configure Nacos Connection\nDESCRIPTION: Configures the Nacos connection details, including host, port, username, and password.  If using Alibaba Cloud, access_key and access_secret can be configured for authentication. The 'guzzle' configuration allows customizing the HTTP client.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nacos.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    // 无法使用 IP 端口形式的开发者，直接配置 url 即可\n    // 'url' => '',\n    'host' => '127.0.0.1',\n    'port' => 8848,\n    'username' => null,\n    'password' => null,\n    'guzzle' => [\n        'config' => null,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Command Help (Bash)\nDESCRIPTION: Shows the help message for a command using the `php bin/hyperf.php demo:command --help` command.  The output displays the custom help message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/hyperf.php demo:command --help\n# 輸出\n...\nHelp:\n  Hyperf 自定義命令演示\n\n```\n\n----------------------------------------\n\nTITLE: Generate Code with Hyperf Code Generator (Annotations to Attributes)\nDESCRIPTION: This script uses the Hyperf code generator to replace Doctrine Annotations with PHP8 Attributes within the 'app' directory. It requires the hyperf/code-generator package to be installed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog/3.0.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp bin/hyperf.php code:generate -D app\n```\n\n----------------------------------------\n\nTITLE: Customize CoreMiddleware - Hyperf - PHP\nDESCRIPTION: This snippet shows how to customize the behavior of Hyperf's CoreMiddleware, specifically handling 404 (Not Found) and 405 (Method Not Allowed) HTTP status codes. It involves creating a custom CoreMiddleware class that extends the original and overriding the `handleNotFound` and `handleMethodNotAllowed` methods to implement custom logic.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/middleware/middleware.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Middleware;\n\nuse Hyperf\\Contract\\Arrayable;\nuse Hyperf\\HttpMessage\\Stream\\SwooleStream;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass CoreMiddleware extends \\Hyperf\\HttpServer\\CoreMiddleware\n{\n    /**\n     * Handle the response when cannot found any routes.\n     *\n     * @return array|Arrayable|mixed|ResponseInterface|string\n     */\n    protected function handleNotFound(ServerRequestInterface $request)\n    {\n        // Rewrite the processing logic for route not found\n        return $this->response()->withStatus(404);\n    }\n\n    /**\n     * Handle the response when the routes found but doesn't match any available methods.\n     *\n     * @return array|Arrayable|mixed|ResponseInterface|string\n     */\n    protected function handleMethodNotAllowed(array $methods, ServerRequestInterface $request)\n    {\n        // Rewrite processing logic that is not allowed by HTTP methods\n        return $this->response()->withStatus(405);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Qiniu Adapter (Flysystem v3.0)\nDESCRIPTION: This command installs the Qiniu adapter for Flysystem v3.0 using Composer. This adapter allows you to interact with Qiniu cloud storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/filesystem.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-qiniu:^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Records (Hyperf)\nDESCRIPTION: Demonstrates how to update multiple records that match a specific query condition using the `update` method in Hyperf. This allows for updating multiple models without instantiating them.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\nUser::query()->where('gender', 1)->update(['gender_show' => '男性']);\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with a Required Parameter in Hyperf\nDESCRIPTION: This code defines a route with a required parameter `id`. The `info` method in the `App\\Controller\\UserController` class is then called with this `id` as an argument. The type hint `int` ensures that the parameter is an integer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/router.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nRouter::get('/user/{id}', 'App\\Controller\\UserController::info');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\npublic function info(int $id)\n{\n    $user = User::find($id);\n    return $user->toArray();\n}\n```\n\n----------------------------------------\n\nTITLE: Define Named Unique Index in Hyperf Schema\nDESCRIPTION: This code demonstrates how to create a unique index with a custom name in a Hyperf schema. It creates a unique index named 'unique_name' on the 'name' column.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// 定義唯一索引名稱為 unique_name\n$table->unique('name', 'unique_name');\n// 定義一個複合索引名稱為 index_account_id_and_created_at\n$table->index(['account_id', 'created_at'], '');\n```\n\n----------------------------------------\n\nTITLE: Unique Rule with Custom Primary Key Field - PHP\nDESCRIPTION: Illustrates how to specify a custom primary key field when using the `ignore` method. If your table uses a primary key other than 'id', you can define it here.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n'email' => Rule::unique('users')->ignore($user->id,'user_id')\n```\n\n----------------------------------------\n\nTITLE: Inserting Record and Getting ID - PHP\nDESCRIPTION: This snippet demonstrates how to insert a new record and retrieve the auto-incrementing ID using the `insertGetId` method. It's useful for tables with auto-incrementing primary keys.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$id = Db::table('users')->insertGetId(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Search Models (PHP)\nDESCRIPTION: Searches models using the `search` method.  This method accepts a search string and returns a collection of models that match the query. The `get` method executes the search and retrieves the results as a collection of models.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->get();\n```\n\n----------------------------------------\n\nTITLE: Standalone Process Configuration\nDESCRIPTION: This PHP code snippet defines whether to use a standalone process for metric collection. This is recommended for asynchronous environments. The configuration is retrieved from the environment variable `TELEMETRY_USE_STANDALONE_PROCESS` with a fallback to `true`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n'use_standalone_process' => env('TELEMETRY_USE_STANDALONE_PROCESS', true),\n```\n\n----------------------------------------\n\nTITLE: Installing Gitlab Runner\nDESCRIPTION: This snippet installs gitlab-runner on a CentOS system, by adding the gitlab repository and installing the package.  Alternative option is also given using IUS repository for newer git version.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash\nyum install gitlab-runner\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl https://setup.ius.io | sh\n$ yum -y install git2u\n$ git version\n$ yum install gitlab-runner\n```\n\n----------------------------------------\n\nTITLE: Generate PHP8 Attributes for Hyperf\nDESCRIPTION: This script uses the Hyperf code generator to replace Doctrine Annotations with PHP8 Attributes. It requires the hyperf/code-generator package and is intended to be run within a Hyperf 2.2 project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog/changelog-v3.0.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp bin/hyperf.php code:generate -D app\n```\n\n----------------------------------------\n\nTITLE: Executing Select Queries in Hyperf\nDESCRIPTION: Demonstrates how to execute SELECT queries using the `Hyperf\\DbConnection\\Db` class in Hyperf. The `select` method returns an array of `StdClass` objects representing the query results.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/quick-start.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\DbConnection\\Db;\n\n$users = Db::select('SELECT * FROM `user` WHERE gender = ?',[1]);  //  返回array \n\nforeach($users as $user){\n    echo $user->name;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing S3 Adapter (Flysystem v2.0)\nDESCRIPTION: Install the S3 adapter for Flysystem v2.0.  This adapter allows Hyperf to store files on AWS S3 or compatible services like MinIO. Requires league/flysystem-aws-s3-v3 and hyperf/guzzle.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/filesystem.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"league/flysystem-aws-s3-v3:^2.0\"\ncomposer require hyperf/guzzle\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Timestamp Format in Hyperf Model\nDESCRIPTION: Illustrates how to customize the timestamp format in a Hyperf model using the `$dateFormat` property. This format determines how date attributes are stored in the database and serialized to arrays or JSON.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    protected ?string $dateFormat = 'U';\n}\n```\n\n----------------------------------------\n\nTITLE: Alert Component View (Blade)\nDESCRIPTION: This blade template represents the view for the Alert component.  It uses the `$type` and `$message` variables, which are passed from the component class. This template is located at `storage/view/components/alert.blade.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"alert alert-{{ $type }}\">\n    {{ $message }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Removing and Recreating Ingress Network\nDESCRIPTION: Removes the default ingress network and creates a new one with a specified subnet.  This resolves conflicts between the default network segment and newly created network segments.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\ndocker network rm ingress\ndocker network create --ingress --subnet 192.168.0.1/16 --driver overlay ingress\n```\n\n----------------------------------------\n\nTITLE: Define Route Group in Hyperf\nDESCRIPTION: This snippet demonstrates how to define a route group in Hyperf.  All routes defined inside the group will be prefixed with `/user/`. Requires `Hyperf\\HttpServer\\Router\\Router`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/router.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nRouter::addGroup('/user/',function (){\n    Router::get('index','App\\Controller\\UserController@index');\n    Router::post('store','App\\Controller\\UserController@store');\n    Router::get('update','App\\Controller\\UserController@update');\n    Router::post('delete','App\\Controller\\UserController@delete');\n});\n\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Scout and Elasticsearch driver (Bash)\nDESCRIPTION: Installs the hyperf/scout and hyperf/elasticsearch packages using Composer.  These packages provide the core Scout functionality and the Elasticsearch driver respectively. This is a prerequisite for using Scout with Elasticsearch.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/scout\ncomposer require hyperf/elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Unique Rule with Custom Column - PHP\nDESCRIPTION: This snippet demonstrates how to use the `unique` validation rule with a custom column name in Hyperf. It specifies that the `email` field must be unique in the `users` table, specifically in the `email_address` column.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_38\n\nLANGUAGE: PHP\nCODE:\n```\n'email' => 'unique:users,email_address'\n```\n\n----------------------------------------\n\nTITLE: Enable Coroutine Tracing via Aspect in Hyperf\nDESCRIPTION: This PHP code enables coroutine tracing in Hyperf by adding the `Hyperf\\Tracer\\Aspect\\CoroutineAspect` class to the aspects.php configuration file, providing insights into coroutine execution flows.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tracer.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    Hyperf\\Tracer\\Aspect\\CoroutineAspect::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a Command Using Annotations - PHP\nDESCRIPTION: Define a command's name using annotations via the `#[Command]` attribute.  This approach utilizes annotations to specify the command name directly within the class definition. Requires Hyperf Command component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\n\n#[Command(name: \"foo:hello\")]\nclass FooCommand extends HyperfCommand\n{\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Command Usage (Bash)\nDESCRIPTION: Shows the help message including the usage examples for a command using the `php bin/hyperf.php demo:command --help` command. The output displays the command usage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/hyperf.php demo:command --help\n# 輸出\n...\nUsage:\n  demo:command\n  demo:command --name 演示代碼\n\n```\n\n----------------------------------------\n\nTITLE: Getting the Request Method PHP\nDESCRIPTION: Demonstrates how to get the HTTP request method using `getMethod()` and how to verify if the method matches a specified value using `isMethod()`.  Common methods are GET, POST, PUT, DELETE etc.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/request.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$method = $request->getMethod();\n\nif ($request->isMethod('post')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting records with delete in Hyperf\nDESCRIPTION: This code demonstrates how to delete records from a database table using the `delete` method in Hyperf's query builder. The example deletes all records or records matching a `where` condition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->delete();\n\nDb::table('users')->where('votes', '>', 100)->delete();\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf HTTP Message Component\nDESCRIPTION: This command installs the hyperf/http-message component, which provides the PSR-7 implementation for request objects. This component is framework-independent and can be used in any PHP project supporting PSR-7 standards.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/http-message\n```\n\n----------------------------------------\n\nTITLE: Defining Unique Index Name\nDESCRIPTION: This snippet demonstrates how to define a custom name for a unique index when creating it. The second argument of the `unique()` method is used to specify the index name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// 定義唯一索引名稱為 unique_name\n$table->unique('name', 'unique_name');\n```\n\n----------------------------------------\n\nTITLE: Configure IDE for Quick Open\nDESCRIPTION: Configures the IDE to be used for the quick open feature in Devtool. This configuration specifies which IDE the `gen` command should use to open newly created files. The `DEVTOOL_IDE` environment variable is used to set the IDE.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/devtool.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    /**\n     * Supported IDEs: \"sublime\", \"textmate\", \"cursor\", \"emacs\", \"macvim\", \"phpstorm\", \"idea\",\n     *        \"vscode\", \"vscode-insiders\", \"vscode-remote\", \"vscode-insiders-remote\",\n     *        \"atom\", \"nova\", \"netbeans\", \"xdebug\"\n     */\n    'ide' => env('DEVTOOL_IDE', ''),\n    //...\n];\n```\n\n----------------------------------------\n\nTITLE: Configure Memory Room Adapter\nDESCRIPTION: This PHP configuration overrides the default Redis room adapter with the MemoryAdapter. This is suitable for single-worker scenarios where a distributed room management is not needed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/socketio-server/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\SocketIOServer\\Room\\AdapterInterface::class => \\Hyperf\\SocketIOServer\\Room\\MemoryAdapter::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Insert and Get ID - Hyperf PHP\nDESCRIPTION: Demonstrates the `insertGetId` method in Hyperf, which inserts a record and returns the auto-incrementing ID value. This is useful when the table has an auto-incrementing `ID` column.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$id = Db::table('users')->insertGetId(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Getting and Removing Session Data\nDESCRIPTION: This code demonstrates how to retrieve and remove a key-value pair from the session in a single operation using the `remove()` method of the `SessionInterface`. The method returns the value associated with the key before removing it from the session.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/session.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$data = $this->session->remove('foo');\n```\n\n----------------------------------------\n\nTITLE: Setting Usage (PHP)\nDESCRIPTION: Sets the usage information for a command using the `addUsage()` method. The usage information is displayed in the help message to show how to use the command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addUsage('--name 演示程式碼');\n}\n\n```\n\n----------------------------------------\n\nTITLE: Or Where Clauses - PHP\nDESCRIPTION: This snippet shows how to add `orWhere` clauses to a query, allowing for multiple conditions to be combined with an OR operator.  It selects users where 'gender' is 1 OR 'name' is 'John'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')\n    ->where('gender', 1)\n    ->orWhere('name', 'John')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Using Form Request\nDESCRIPTION: Demonstrates using a form request class in a controller method.  The `FooRequest` class will handle the validation logic before the controller method is executed. `$request->input('foo')` retrieves input data after validation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/validation/README.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass IndexController\n{\n    public function foo(FooRequest $request)\n    {\n        $request->input('foo');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Register Crontab Dispatcher Process - PHP\nDESCRIPTION: This PHP code snippet shows how to register the `Hyperf\\Crontab\\Process\\CrontabDispatcherProcess` custom process in the `config/autoload/processes.php` file.  This process is responsible for parsing and dispatching the scheduled tasks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/crontab.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/processes.php\nreturn [\n    Hyperf\\Crontab\\Process\\CrontabDispatcherProcess::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Update Models to New Syntax\nDESCRIPTION: This script regenerates model classes to comply with new type restrictions in the Hyperf framework. It requires the hyperf/code-generator package and takes the path to the model directory as an argument.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog/changelog-v3.0.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp vendor/bin/regenerate-models.php $PWD/app/Model\n```\n\n----------------------------------------\n\nTITLE: Configure WebSocket Middleware - PHP\nDESCRIPTION: This snippet configures middleware for the WebSocket server within the `config/autoload/middlewares.php` file. It defines a middleware pipeline specific to the 'ws' server. This allows applying custom logic to WebSocket connections.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/websocket-server.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'ws' => [\n        yourMiddleware::class\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Changing Middlewares Annotation Style PHP8\nDESCRIPTION: This code snippet demonstrates the change in annotation style for defining middlewares in PHP 8. The syntax has been updated from using `@Middlewares({@Middleware(FooMiddleware::class)})` to using PHP 8 attributes `#[Middlewares(FooMiddleware::class)]`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/CHANGELOG-2.2.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n#[Middlewares(FooMiddleware::class)]\n```\n\n----------------------------------------\n\nTITLE: Constructor Injection\nDESCRIPTION: Demonstrates constructor injection of the UserService into the IndexController.  The UserService instance is automatically resolved and injected by the DI container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserService;\n\nclass IndexController\n{\n    private UserService $userService;\n    \n    // 透過在建構函式的引數上宣告引數型別完成自動注入\n    public function __construct(UserService $userService)\n    {\n        $this->userService = $userService;\n    }\n    \n    public function index()\n    {\n        $id = 1;\n        // 直接使用\n        return $this->userService->getInfoById($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Closure Command - PHP\nDESCRIPTION: Define a command directly within the `config/console.php` file using a closure.  This provides a quick and easy way to create simple commands. Requires Hyperf Command Console.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Command\\Console;\n\nConsole::command('hello', function () {\n    $this->comment('Hello, Hyperf!');\n})->describe('This is a demo closure command.');\n\n```\n\n----------------------------------------\n\nTITLE: Config Provider Structure: Before Hyperf Update\nDESCRIPTION: Illustrates the structure of the Config Provider array before the Hyperf update, focusing on the 'scan' key and its nested structure. It is related to annotation scanning and path configurations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog-v1.1.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'scan' => [\n    'paths' => [\n        __DIR__,\n    ],\n    'collectors' => [],\n],\n```\n\n----------------------------------------\n\nTITLE: Getting Uploaded Files PHP\nDESCRIPTION: Illustrates how to retrieve uploaded files from the request using the `file()` method, which returns an instance of `Hyperf\\HttpMessage\\Upload\\UploadedFile`.  Returns null if the file does not exist.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/request.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// Returns a Hyperf\\HttpMessage\\Upload\\UploadedFile object if the file exists, or null if it does not exist\n$file = $request->file('photo');\n```\n\n----------------------------------------\n\nTITLE: Install StatsD Dependencies via Composer\nDESCRIPTION: This command installs the domnikl/statsd package, which is required for using the StatsD adapter with the Hyperf metric component. This allows the application to send metrics to a StatsD server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# StatsD required dependencies\ncomposer require domnikl/statsd\n```\n\n----------------------------------------\n\nTITLE: Docker UDP Port Configuration (Shell)\nDESCRIPTION: This shell command shows how to expose a UDP port when running a Docker container. The `-p` flag maps the host's port 9502 to the container's port 9502 using the UDP protocol.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tcp-server.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run -p 9502:9502/udp <image-name>\n\n```\n\n----------------------------------------\n\nTITLE: Mapping Custom Low-Frequency Component (PHP)\nDESCRIPTION: This code shows how to map the custom low-frequency component in the `dependencies` configuration to replace the default one. This is essential to apply the customized frequency settings to the connection pool.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/pool.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\DbConnection\\Frequency::class => App\\Pool\\Frequency::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonRPC Aspect for tracing\nDESCRIPTION: This code shows how to configure the JsonRPC aspect within the `aspects.php` file to enable tracing for JsonRPC calls.  The `Hyperf\\Tracer\\Aspect\\JsonRpcAspect::class` aspect is added to the return array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tracer.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    Hyperf\\Tracer\\Aspect\\JsonRpcAspect::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Removing Old Network from Docker Service\nDESCRIPTION: This command removes an existing network from a specified Docker service. The `--network-rm` option specifies the network to remove. Ensure that the service is properly connected to the new network before removing the old one.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\ndocker service update --network-rm old-network service_name\n```\n\n----------------------------------------\n\nTITLE: Ordering randomly with inRandomOrder in Hyperf\nDESCRIPTION: This code demonstrates how to randomly sort results using the `inRandomOrder` method in Hyperf's query builder. The example retrieves a random user from the 'users' table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$randomUser = Db::table('users')->inRandomOrder()->first();\n```\n\n----------------------------------------\n\nTITLE: Managing Database Transactions Automatically in Hyperf\nDESCRIPTION: Demonstrates how to manage database transactions automatically in Hyperf using the `Db::transaction` method. If an exception occurs within the closure, the transaction is rolled back; otherwise, it is committed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/quick-start.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\nDb::transaction(function () {\n    Db::table('user')->update(['votes' => 1]);\n\n    Db::table('posts')->delete();\n});\n\n```\n\n----------------------------------------\n\nTITLE: Override getCacheTTL() for custom cache time\nDESCRIPTION: Shows how to override the `getCacheTTL()` method in a model to define a custom cache time (TTL) for the model. Returns the time in seconds.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/model-cache.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass User extends Model implements CacheableInterface\n{\n    use Cacheable;\n    \n    /**\n     * Cache for 10 minutes. If null is returned, the timeout set in the configuration file will be used.\n     * @return int|null\n     */\n    public function getCacheTTL(): ?int\n    {\n        return 600;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Injection with Typehint Support in Hyperf\nDESCRIPTION: Demonstrates how to use type hinting for property injection with the `@Inject` annotation in Hyperf. This allows for cleaner and more readable dependency injection in PHP 8.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.0.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Example {\n    /**\n    * @Inject\n    */\n    private ExampleService $exampleService;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Command using $signature (PHP)\nDESCRIPTION: Defines a command, argument, and option using the `$signature` property.  This allows for concise command definitions within the class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Psr\\Container\\ContainerInterface;\n\n#[Command]\nclass DebugCommand extends HyperfCommand\n{\n    protected ContainerInterface $container;\n\n    protected ?string $signature = 'test:test {id : user_id} {--name= : user_name}';\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n        parent::__construct();\n    }\n\n    public function configure()\n    {\n        parent::configure();\n        $this->setDescription('Hyperf Demo Command');\n    }\n\n    public function handle()\n    {\n        var_dump($this->input->getArguments());\n        var_dump($this->input->getOptions());\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Request and Response Header Handling (After v3.1)\nDESCRIPTION: Demonstrates the changed behavior of `withHeader`, `withHeaders`, `setHeader`, and `setHeaders` methods in v3.1, where `withHeaders` and `setHeaders` now replace the existing headers instead of merging.  `withHeader` and `setHeader` will also replace instead of merging headers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/3.1.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// v3.1 之後\n$request->withHeader('foo', 1)->withHeader('bar', 2); // ['foo' => [1], 'bar' => [2]]\n$request->withHeader('foo', 1)->withHeader('foo', 2); // ['foo' => [2]]\n$request->withAddedHeader('foo', 1)->withAddedHeader('foo', 2); // ['foo' => [1, 2]]\n\n$request->withHeaders(['foo' => 1])->withHeaders(['bar' => 2]); // ['bar' => [2]]\n\n$request->setHeader('foo', 1)->setHeader('bar', 2); // ['foo' => [1], 'bar' => [2]]\n$request->setHeader('foo', 1)->setHeader('foo', 2); // ['foo' => [2]]\n$request->addHeader('foo', 1)->addHeader('foo', 2); // ['foo' => [1, 2]]\n\n$request->setHeaders(['foo' => 1])->setHeaders(['bar' => 2]); // ['bar' => [2]]\n```\n\n----------------------------------------\n\nTITLE: Rebooting the Machine\nDESCRIPTION: Reboots the machine to apply the kernel changes. This is necessary for the new kernel to be loaded and used by the system.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\nreboot\n```\n\n----------------------------------------\n\nTITLE: Defining VALUE_REQUIRED Option (PHP)\nDESCRIPTION: Defines an option that requires a value using `InputOption::VALUE_REQUIRED`.  Provides a default value if the option is not specified.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addOption('name', 'N', InputOption::VALUE_REQUIRED, '姓名', 'Hyperf');\n}\n\npublic function handle()\n{\n    var_dump($this->input->getOption('name'));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Scripts - composer.json\nDESCRIPTION: Defines Composer scripts for running tests using pest and phpunit. The pest script executes Pest tests with color output, and the test script runs phpunit with a specified configuration file and color output.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/testing.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"scripts\": {\n    \"pest\": \"pest --colors=always\",\n    \"test\": \"co-phpunit -c phpunit.xml --colors=always\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing Memory Adapter (Flysystem v1.0)\nDESCRIPTION: Installs the memory adapter for Flysystem v1.0, allowing in-memory file storage for testing or temporary storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/filesystem.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"league/flysystem-memory:^1.0\"\n```\n\n----------------------------------------\n\nTITLE: Get Imageable Association PHP\nDESCRIPTION: Retrieves the model associated with an image using the `imageable` relationship. The `imageable` property dynamically returns either a `User` or `Book` model based on the `imageable_type` value of the image.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/relationship.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\Image;\n\n$image = Image::find(1);\n\n$imageable = $image->imageable;\n```\n\n----------------------------------------\n\nTITLE: Nesting DAGs in Hyperf\nDESCRIPTION: This code demonstrates how to nest DAGs within each other. This allows for complex workflows to be built by composing smaller, more manageable DAGs. The outer DAG runs the nested DAG as one of its vertices.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/dag.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// 名稱空間已省略\n$a = Vertex::make(function () { return 1;});\n$b = Vertex::make(function () { return 2;});\n$c = Vertex::make(function () { return 3;});\n\n$nestedDag = new Dag();\n$nestedDag->addVertex($a)->addVertex($b)->addEdge($a, $b);\n$d = Vertex::of($nestedDag);\n\n$superDag = new Dag();\n$superDag->addVertex($c)->addVertex($d)->addEdge($c, $d);\n$superDag->run();\n```\n\n----------------------------------------\n\nTITLE: Client Configuration in config.php - PHP\nDESCRIPTION: Defines a client configuration within the `config.php` file. This example demonstrates how configurations are structured when defined directly in the main configuration file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/config.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'client' => [\n        'request' => [\n            'timeout' => 10,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Create Hyperf project with Swow\nDESCRIPTION: This command creates a new Hyperf project using the Swow driver. It uses Composer to install the hyperf/swow-skeleton package, setting up the project with Swow as the underlying engine.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/install.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer create-project hyperf/swow-skeleton\n```\n\n----------------------------------------\n\nTITLE: Supporting MySQL Bit Type in Hyperf\nDESCRIPTION: This code snippet shows how to add support for the `bit` data type in Hyperf's ORM. It involves creating an event listener that replaces the default MySQL connection with a custom connection (`MySqlBitConnection`) that handles the bit type. The listener is triggered when the application boots.  Dependencies: Hyperf framework and Hyperf Database component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Database\\Connection;\nuse Hyperf\\Database\\MySqlBitConnection;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\n\n#[Listener]\nclass SupportMySQLBitListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            BootApplication::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        Connection::resolverFor('mysql', static function ($connection, $database, $prefix, $config) {\n            return new MySqlBitConnection($connection, $database, $prefix, $config);\n        });\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Alert Component View - HTML\nDESCRIPTION: The Blade template for the `Alert` component, displaying an alert with a dynamic class based on the `$type` variable and the `$message` content. This template is located at `storage/view/components/alert.blade.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"alert alert-{{ $type }}\">\n    {{ $message }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Enable Foreign Key Constraints\nDESCRIPTION: This code shows how to enable foreign key constraints using the `Schema::enableForeignKeyConstraints()` method. It turns on foreign key checks in the database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\n// 开启外键约束\nSchema::enableForeignKeyConstraints();\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Crontab Component\nDESCRIPTION: This command installs the hyperf/crontab component using Composer, adding the necessary files and dependencies to your project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/crontab.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/crontab\n```\n\n----------------------------------------\n\nTITLE: PCNTL Extension Check\nDESCRIPTION: This snippet shows how to check if the `pcntl` extension is enabled in PHP, which is required for the v2.2 version of Hyperf's annotation scanning.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/questions.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nphp --ri pcntl\n\npcntl\n\npcntl support => enabled\n```\n\n----------------------------------------\n\nTITLE: Replacing CoreMiddleware via DI - PHP\nDESCRIPTION: This code snippet shows how to replace the default `CoreMiddleware` with a custom implementation via dependency injection.  This is done by defining a mapping in the `config/autoload/dependencies.php` file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/middleware/middleware.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\HttpServer\\CoreMiddleware::class => App\\Middleware\\CoreMiddleware::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Complex GraphQL Response - JSON\nDESCRIPTION: This is the expected JSON response from the GraphQL server when executing the complex query. It contains data for both `hello` and `product` queries.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/graphql.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"data\": {\n        \"hello\": \"graphql\",\n        \"product\": {\n            \"name\": \"goods\",\n            \"price\": 156.5\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hyperf View Engine Configuration\nDESCRIPTION: This is the default configuration array for the Hyperf View Engine. It defines the engine class, rendering mode (SYNC), view and cache paths, custom components, and namespaces. SYNC mode reduces inter-process communication.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'engine' => Hyperf\\ViewEngine\\HyperfViewEngine::class,\n    'mode' => Hyperf\\View\\Mode::SYNC,\n    'config' => [\n        'view_path' => BASE_PATH . '/storage/view/',\n        'cache_path' => BASE_PATH . '/runtime/view/',\n    ],\n\n    # 自定義組件註冊\n    'components' => [\n        // 'alert' => \\App\\View\\Components\\Alert::class\n    ],\n\n    # 視圖命名空間 (主要用於擴展包中)\n    'namespaces' => [\n        // 'admin' => BASE_PATH . '/storage/view/vendor/admin',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Generating Enum Class using gen:constant Command\nDESCRIPTION: This command generates a skeleton enum class using the Hyperf console command. The `--type enum` option specifies that an enum class should be created.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/constants.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nphp bin/hyperf.php gen:constant ErrorCode --type enum\n```\n\n----------------------------------------\n\nTITLE: Serializer Factory Configuration PHP\nDESCRIPTION: This code snippet configures the dependency injection container to use the `SerializerFactory` to create a `Serializer` instance for the `NormalizerInterface`. This enables serialization and deserialization of objects when returning from services.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/json-rpc.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Serializer\\SerializerFactory;\nuse Hyperf\\Serializer\\Serializer;\n\nreturn [\n    Hyperf\\Contract\\NormalizerInterface::class => new SerializerFactory(Serializer::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Generated Model After Custom Visitor\nDESCRIPTION: This code shows the generated model after applying the custom `ModelUpdateVisitor`. The `float_num` property is now cast to `decimal:2`, as configured in the custom visitor.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/gen.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare (strict_types=1);\n\nnamespace App\\Model;\n\n/**\n * @property int $id \n * @property int $count \n * @property string $float_num \n * @property string $str \n * @property string $json \n * @property \\Carbon\\Carbon $created_at \n * @property \\Carbon\\Carbon $updated_at \n */\nclass UserExt extends Model\n{\n    /**\n     * The table associated with the model.\n     */\n    protected ?string $table = 'user_ext';\n    /**\n     * The attributes that are mass assignable.\n     */\n    protected array $fillable = ['id', 'count', 'float_num', 'str', 'json', 'created_at', 'updated_at'];\n    /**\n     * The attributes that should be cast to native types.\n     */\n    protected array $casts = ['id' => 'integer', 'count' => 'integer', 'float_num' => 'decimal:2', 'created_at' => 'datetime', 'updated_at' => 'datetime'];\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response with Product Data\nDESCRIPTION: This is the expected JSON response from the GraphQL endpoint when executing the query including the Product type. It includes the results of both the 'hello' and 'product' queries.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/graphql.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"hello\": \"graphql\",\n        \"product\": {\n            \"name\": \"goods\",\n            \"price\": 156.5\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing InfluxDB Dependencies\nDESCRIPTION: This command installs the InfluxDB client library for PHP using Composer. This is required to use the InfluxDB driver with the Hyperf Metric component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# InfluxDB 所需依賴 \ncomposer require influxdb/influxdb-php\n```\n\n----------------------------------------\n\nTITLE: Use Form Request in Controller\nDESCRIPTION: Demonstrates how to use a FormRequest in a controller by type-hinting it as a parameter. Retrieves validated data using $request->validated().\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Request\\FooRequest;\n\nclass IndexController\n{\n    public function index(FooRequest $request)\n    {\n        // 傳入的請求通過驗證...\n        \n        // 獲取通過驗證的數據...\n        $validated = $request->validated();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Index\nDESCRIPTION: This snippet demonstrates how to rename an existing index using the `renameIndex()` method. The method takes two parameters: the original index name ('from') and the new index name ('to').\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n$table->renameIndex('from', 'to');\n```\n\n----------------------------------------\n\nTITLE: Optional Argument Output (Bash)\nDESCRIPTION: Demonstrates the output when running the command with and without the optional argument. Shows how the default value is used when no argument is provided.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/hyperf.php demo:command\n# 輸出\n...\nHyperf\n\n$ php bin/hyperf.php demo:command Swoole\n# 輸出\n...\nSwoole\n```\n\n----------------------------------------\n\nTITLE: Defining Array Argument for a Command - PHP\nDESCRIPTION: Demonstrates how to define an array argument for a command using `InputArgument::IS_ARRAY` in the `addArgument` method.  Allows the command to accept multiple values for the argument.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addArgument('name', InputArgument::IS_ARRAY, '姓名');\n}\n\npublic function handle()\n{\n    var_dump($this->input->getArgument('name'));\n}\n\n```\n\n----------------------------------------\n\nTITLE: CacheEvict Annotation Usage\nDESCRIPTION: This code shows how to use the `CacheEvict` annotation. It removes the cached entry after the method execution.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/cache.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse Hyperf\\Cache\\Annotation\\CacheEvict;\n\nclass UserBookService\n{\n    #[CacheEvict(prefix: \"userBook\", value: \"_#{id}\")]\n    public function updateUserBook(int $id)\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Anonymous Component Usage (HTML)\nDESCRIPTION: This snippet shows how to use an anonymous component. Anonymous components are defined by Blade templates in the `/storage/view/components` directory. The component name is derived from the filename.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n    <x-alert/>\n```\n\n----------------------------------------\n\nTITLE: Dropping a Table (php)\nDESCRIPTION: This code demonstrates dropping a table using `Schema::drop` or `Schema::dropIfExists`. `drop` will fail if the table does not exist, while `dropIfExists` will only drop the table if it exists.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nSchema::drop('users');\n\nSchema::dropIfExists('users');\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Record\nDESCRIPTION: This snippet shows how to insert a new record into the database by creating a new model instance, setting its attributes, and calling the `save()` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = new User();\n\n$user->name = 'Hyperf';\n\n$user->save();\n\n```\n\n----------------------------------------\n\nTITLE: Truncating table with truncate in Hyperf\nDESCRIPTION: This snippet shows how to truncate a database table using the `truncate` method in Hyperf's query builder.  Truncating a table removes all rows and resets the auto-incrementing ID.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->truncate();\n```\n\n----------------------------------------\n\nTITLE: Install Qiniu Adapter\nDESCRIPTION: This shell command installs the `overtrue/flysystem-qiniu` component using composer, allowing the Hyperf application to integrate with Qiniu cloud storage for file system operations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.2.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-qiniu:^2.0\"\n```\n\n----------------------------------------\n\nTITLE: Listing Commands in Hyperf Shell\nDESCRIPTION: This shell command demonstrates how to list available commands in a Hyperf application.  It shows example output of commands that were registered through the AsCommand annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\n$ php bin/hyperf.php\n\n...\nfoo\n  foo:bar                   The description of foo:bar command.\n  foo:bar1                  The description of foo:bar1 command.\n```\n\n----------------------------------------\n\nTITLE: Add Validation Exception Handler\nDESCRIPTION: This code snippet shows how to configure the `Hyperf\\Validation\\ValidationExceptionHandler` in `config/autoload/exceptions.php` to handle `Hyperf\\Validation\\ValidationException` exceptions thrown during validation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'handler' => [\n        // This corresponds to your current server name\n        'http' => [\n            \\Hyperf\\Validation\\ValidationExceptionHandler::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Publish Hyperf Tracer Configuration\nDESCRIPTION: This command publishes the default configuration file for the hyperf/tracer component to the config/autoload directory. This allows users to customize the tracing settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tracer.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/tracer\n```\n\n----------------------------------------\n\nTITLE: Registering ReloadChannelListener\nDESCRIPTION: This code demonstrates how to register the `ReloadChannelListener` in the `listeners` configuration. This listener will automatically reload timeout messages back to the waiting queue.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    Hyperf\\AsyncQueue\\Listener\\ReloadChannelListener::class\n];\n\n```\n\n----------------------------------------\n\nTITLE: 1.0 dependencies.php structure PHP\nDESCRIPTION: This snippet demonstrates the file structure of dependencies.php in Hyperf 1.0. It shows that the dependencies are nested under a 'dependencies' key in the returned array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/1.1.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// config/dependencies.php 文件\n\nreturn [\n    'dependencies' => [\n        FooInterface::class => Foo::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Or Where Clauses - PHP\nDESCRIPTION: Shows how to add `or` clauses to a query using the `orWhere()` method.  This method allows for combining multiple conditions with logical OR.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')\n    ->where('gender', 1)\n    ->orWhere('name', 'John')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Generate a Resource Class\nDESCRIPTION: Generates a resource class using the `gen:resource` command. The generated resource is placed in the `app/Resource` directory and inherits from `Hyperf\\Resource\\Json\\JsonResource`. The User parameter specifies the name of the resource to be generated.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:resource User\n```\n\n----------------------------------------\n\nTITLE: Search Route (PHP)\nDESCRIPTION: Defines a route that performs a search and returns the results as JSON. The search results are automatically converted to JSON format when returned from a route.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/search', function () {\n    return App\\Order::search([])->get();\n});\n```\n\n----------------------------------------\n\nTITLE: Using DB instance in Hyperf\nDESCRIPTION: Demonstrates how to use the DB instance in Hyperf to execute a query. It retrieves the DB class from the application context and then uses it to run a select query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/db.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Context\\ApplicationContext;\nuse Hyperf\\DB\\DB;\n\n$db = ApplicationContext::getContainer()->get(DB::class);\n\n$res = $db->query('SELECT * FROM `user` WHERE gender = ?;', [1]);\n\n```\n\n----------------------------------------\n\nTITLE: Installing PgSQL Driver using Composer\nDESCRIPTION: This command installs the PgSQL driver for Hyperf using Composer. It requires Swoole version 5.1.0 or higher and that Swoole is compiled with `--enable-swoole-pgsql`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/quick-start.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/database-pgsql\n```\n\n----------------------------------------\n\nTITLE: Backup Portainer Data\nDESCRIPTION: This command backs up Portainer data to a tar archive. It creates a temporary container based on nginx, mounts the data volume from portainer_container, and creates a tar archive of the /data directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run -it --volumes-from portainer_container -v $(pwd):/backup --name backup --rm nginx tar -cf /backup/data.tar /data/\n```\n\n----------------------------------------\n\nTITLE: Configuring EagerLoadListener - PHP\nDESCRIPTION: This snippet shows how to add the `EagerLoadListener` to the `listeners.php` configuration file, enabling eager loading of model relationships from the cache using the `loadCache` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model-cache.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    Hyperf\\ModelCache\\Listener\\EagerLoadListener::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Hyperf Multiple Port Listening - routes.php\nDESCRIPTION: Defines a route for the `innerHttp` server in the `routes.php` file. This ensures that the route is only accessible through the specified server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/overview.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nRouter::addServer('innerHttp', function () {\n    Router::get('/', 'App\\Controller\\IndexController@index');\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Task Component\nDESCRIPTION: This command installs the `hyperf/task` component using Composer, a dependency management tool for PHP. This component allows you to handle blocking functions within your Hyperf application using Task workers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/task.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/task\n```\n\n----------------------------------------\n\nTITLE: Getting a Single Row - PHP\nDESCRIPTION: This snippet demonstrates how to retrieve the first row from a database table using the `first()` method. The method automatically adds a `LIMIT 1` clause to the SQL query. It uses the `Db::table()` method to access the 'user' table and `var_dump()` to display the result.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\DbConnection\\Db;\n\n$row = Db::table('user')->first(); // sql 会自动加上 limit 1\nvar_dump($row);\n```\n\n----------------------------------------\n\nTITLE: Disable Data Wrapping\nDESCRIPTION: Demonstrates disabling the default data wrapping for resources using the `withoutWrapping` method. It only affects the top-level resource or resource collection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\UserCollection;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserCollection(User::all()))->withoutWrapping()->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rename Column\nDESCRIPTION: This code snippet shows how to rename a column using the `renameColumn()` method. It renames the 'from' column to 'to' in the 'users' table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nSchema::table('users', function (Blueprint $table) {\n    // 将字段从 from 重命名为 to\n    $table->renameColumn('from', 'to')->change();\n});\n```\n\n----------------------------------------\n\nTITLE: Anonymous Component Usage - HTML\nDESCRIPTION: Example of using an anonymous component by referencing its Blade template file located in the `/storage/view/components` directory. This allows for creating components without a corresponding class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_40\n\nLANGUAGE: html\nCODE:\n```\n    <x-alert/>\n```\n\nLANGUAGE: html\nCODE:\n```\n    <x-inputs.button/>\n```\n\n----------------------------------------\n\nTITLE: Returning Search Results as JSON\nDESCRIPTION: This route definition demonstrates how to return search results directly from a route. Scout search results are automatically converted to JSON when returned from a route or controller.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/scout.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nRoute::get('/search', function () {\n    return App\\Order::search([])->get();\n});\n```\n\n----------------------------------------\n\nTITLE: UserService Class Definition PHP\nDESCRIPTION: Defines a simple UserService class with a getInfoById method that returns a filled Info entity. This is used to demonstrate dependency injection examples.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Service;\n\nclass UserService\n{\n    public function getInfoById(int $id)\n    {\n        // 我們假設存在一個 Info 實體\n        return (new Info())->fill($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Unescaped Data in Blade\nDESCRIPTION: This Blade template displays the value of the `$name` variable without escaping, using ` {!! !!} `.  This should be used with caution to prevent XSS attacks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\nHello, {!! $name !!}.\n```\n\n----------------------------------------\n\nTITLE: Generate a Resource Collection\nDESCRIPTION: Generates a resource collection using the `gen:resource` command with the `--collection` flag. This creates a resource that extends `Hyperf\\Resource\\Json\\ResourceCollection`, useful for transforming collections of models.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:resource Users --collection\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:resource UserCollection\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Migrations with Step (Bash)\nDESCRIPTION: This command rolls back a specified number of migrations using the `step` parameter. It reverts the `down` methods for the given number of migration batches.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:rollback --step=5\n```\n\n----------------------------------------\n\nTITLE: Configuring Metric Middleware\nDESCRIPTION: This PHP code snippet shows how to configure the `MetricMiddleware` to enable request histogram statistics. It adds the middleware to the `http` server's middleware stack.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'http' => [\n        \\Hyperf\\Metric\\Middleware\\MetricMiddleware::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Array with whereJsonContains - PHP\nDESCRIPTION: This snippet demonstrates how to query a JSON array using `whereJsonContains`. It retrieves users where the `options->languages` array contains the value 'en'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereJsonContains('options->languages', 'en')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Adding User to Docker Group\nDESCRIPTION: Adds the current user to the Docker group, allowing the user to run Docker commands without `sudo`.  This simplifies Docker usage for non-root users.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_44\n\nLANGUAGE: shell\nCODE:\n```\nusermod -aG docker $USER\n```\n\n----------------------------------------\n\nTITLE: Freshening Migrations (Bash)\nDESCRIPTION: This command drops all tables from the database and then runs all migrations. It's similar to `migrate:reset` followed by `migrate`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:fresh\n\n// 重建数据库结构并执行数据填充\nphp bin/hyperf.php migrate:fresh --seed\n```\n\n----------------------------------------\n\nTITLE: Drop Foreign Key Constraint by Field Name in Hyperf Schema\nDESCRIPTION: This snippet demonstrates dropping a foreign key constraint by specifying the column name. The schema builder will generate the foreign key name based on the table and column.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$table->dropForeign(['user_id'']);\n```\n\n----------------------------------------\n\nTITLE: Disable Timestamps (Hyperf)\nDESCRIPTION: Illustrates how to disable automatic timestamp management (`created_at` and `updated_at` columns) for a model in Hyperf by setting the `$timestamps` property to `false`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    public bool $timestamps = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Install Qiniu Adapter (Flysystem v1.0)\nDESCRIPTION: This command installs the Qiniu adapter for Flysystem v1.0 using Composer. This adapter allows you to interact with Qiniu cloud storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/filesystem.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-qiniu:^1.0\"\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Signal\nDESCRIPTION: This command installs the hyperf/signal package, which is needed to resolve `Interface 'Hyperf\\Signal\\SignalHandlerInterface' not found` errors when using PHP 7.3.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.2.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/signal\n```\n\n----------------------------------------\n\nTITLE: Translation Configuration\nDESCRIPTION: Defines the translation configuration in `translation.php`, specifying the locale, fallback locale, and path to the language files. This configuration is essential for internationalizing validation messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/validation/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'locale' => 'zh_CN',\n    'fallback_locale' => 'en',\n    'path' => BASE_PATH . '/storage/languages',\n];\n```\n\n----------------------------------------\n\nTITLE: Installing DTM-Client using Composer\nDESCRIPTION: This command installs the DTM-Client package using Composer, a dependency manager for PHP. It downloads the necessary files and configures the autoloader to include the library in your project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/distributed-transaction.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require dtm/dtm-client\n```\n\n----------------------------------------\n\nTITLE: Process Memory Driver Configuration\nDESCRIPTION: Configures the cache driver to use in-memory storage. This can be useful for caching data that does not need to persist across requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/cache.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'memory' => [\n        'driver' => Hyperf\\Cache\\Driver\\MemoryDriver::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Chunked Transfer Encoding in Hyperf\nDESCRIPTION: Shows how to send chunked responses using the `write()` method of the `ResponseInterface`. This method sends data in segments and sets the `Transfer-Encoding` to `chunked`. Note that after calling `write`, subsequent data returned via `return` will not be sent.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/response.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\n\nclass IndexController\n{\n    public function index(ResponseInterface $response)\n    {\n        for ($i=0; $i<10; $i++) {\n            $response->write((string) $i);\n        }\n\n        return 'Hello Hyperf';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Resource Access\nDESCRIPTION: Configures the `document_root` and `enable_static_handler` in `config/autoload/server.php` to allow accessing locally uploaded files via HTTP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/filesystem.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'settings' => [\n        ...\n        // Replace public with the upload directory\n        'document_root' => BASE_PATH . '/public',\n        'enable_static_handler' => true,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Enabling grpc fork support\nDESCRIPTION: This configuration snippet enables fork support for the `grpc` extension in the `php.ini` file. This is required when using `grpc` in Hyperf to support opening child processes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/questions.md#_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\ngrpc.enable_fork_support=1;\n```\n\n----------------------------------------\n\nTITLE: Running Gitlab with Docker\nDESCRIPTION: This snippet runs a Gitlab service using Docker.  It publishes ports 443, 80, and 22, and mounts volumes for configuration, logs, and data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nsudo docker run -d --hostname gitlab.xxx.cn \\\n--publish 443:443 --publish 80:80 --publish 22:22 \\\n--name gitlab --restart always --volume /srv/gitlab/config:/etc/gitlab \\\n--volume /srv/gitlab/logs:/var/log/gitlab \\\n--volume /srv/gitlab/data:/var/opt/gitlab \\\ngitlab/gitlab-ce:latest\n```\n\n----------------------------------------\n\nTITLE: Component Method Example - PHP\nDESCRIPTION: Illustrates defining a public method within a component class (e.g., `isSelected`) that can be called from the component's view. This allows for encapsulating logic within the component and accessing it from the template.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n    /**\n     * 判斷給定選項是否為當前選項\n     *\n     * @param  string  $option\n     * @return bool\n     */\n    public function isSelected($option)\n    {\n        return $option === $this->selected;\n    }\n```\n\n----------------------------------------\n\nTITLE: Resuming Coordinator after command execution\nDESCRIPTION: This PHP code snippet is added at the end of a command's execution logic to properly close it, especially when using multiplex technologies like AMQP.  It resumes the Coordinator.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/questions.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Coordinator\\CoordinatorManager;\nuse Hyperf\\Coordinator\\Constants;\n\nCoordinatorManager::until(Constants::WORKER_EXIT)->resume();\n```\n\n----------------------------------------\n\nTITLE: Defining an Event - PHP\nDESCRIPTION: Defines an event class, `UserRegistered`, which holds user data. The class constructor accepts a user object and assigns it to the public property `$user`, making it accessible to listeners. This is a simple data object that will be passed to the listeners when the event is dispatched.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/event.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Event;\n\nclass UserRegistered\n{\n    // 建议这里定义成 public 属性，以便监听器对该属性的直接使用，或者你提供该属性的 Getter\n    public $user;\n    \n    public function __construct($user)\n    {\n        $this->user = $user;    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Signal Component\nDESCRIPTION: This command installs the `hyperf/signal` component using Composer, which is a dependency manager for PHP. This adds the signal handling capabilities to your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/signal.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/signal\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Filesystem Component\nDESCRIPTION: Install the main Hyperf filesystem component using composer. This is the base requirement for using any of the filesystem adapters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/filesystem.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/filesystem\n```\n\n----------------------------------------\n\nTITLE: Overwriting Other Attributes (Blade)\nDESCRIPTION: Demonstrates how `other-attr` can be overwrited\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_16\n\nLANGUAGE: blade\nCODE:\n```\n// 定义\n<div {{ $attributes->merge(['class' => 'alert alert-'.$type, 'other-attr' => 'foo']) }}>{{ $message }}</div>\n// 使用\n<x-alert type=\"error\" :message=\"$message\" class=\"mb-4\" other-attr=\"bar\"/>\n// 呈现\n<div class=\"alert alert-error mb-4\" other-attr=\"bar\"><!-- $message 变量的内容 --></div>\n```\n\n----------------------------------------\n\nTITLE: Build Phar Archive with Custom Path\nDESCRIPTION: Builds a Phar archive from a specified directory using the `--path` option. This option defines the base path for the Phar build process.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/phar.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php phar:build --path=BASE_PATH\n```\n\n----------------------------------------\n\nTITLE: Inline Component - PHP\nDESCRIPTION: Shows how to define a component's content directly within the `render` method, eliminating the need for a separate view file.  This is useful for small, self-contained components.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n    public function render()\n    {\n        return <<<'blade'\n            <div class=\"alert alert-danger\">\n                {{ $slot }}\n            </div>\n        blade;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining an Aspect in Hyperf using Aspect annotation properties in PHP\nDESCRIPTION: This code demonstrates defining an Aspect in Hyperf using the properties of the #[Aspect] annotation to configure the target classes and annotations. It provides an alternative to defining the $classes and $annotations properties directly within the class. The classes and annotations properties within the Aspect annotation are arrays that specify the classes, methods, and annotations to be intercepted. The process method remains the same, handling the logic before and after the original method execution through the ProceedingJoinPoint.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/aop.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Aspect;\n\nuse App\\Service\\SomeClass;\nuse App\\Annotation\\SomeAnnotation;\nuse Hyperf\\Di\\Annotation\\Aspect;\nuse Hyperf\\Di\\Aop\\AbstractAspect;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\n#[\n    Aspect(\n        classes: [\n            SomeClass::class,\n            \"App\\\\Service\\\\SomeClass::someMethod\",\n            \"App\\\\Service\\\\SomeClass::*Method\"\n        ],\n        annotations: [\n            SomeAnnotation::class\n        ]\n    )\n]\nclass FooAspect extends AbstractAspect\n{\n    public function process(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        // 切面切入後，執行對應的方法會由此來負責\n        // $proceedingJoinPoint 為連接點，通過該類的 process() 方法調用原方法並獲得結果\n        // 在調用前進行某些處理\n        $result = $proceedingJoinPoint->process();\n        // 在調用後進行某些處理\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Qiniu Adapter (Flysystem v2.0)\nDESCRIPTION: This command installs the Qiniu adapter for Flysystem v2.0, providing support for Qiniu cloud storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/filesystem.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-qiniu:^2.0\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Response with Product\nDESCRIPTION: This JSON represents the expected response from the GraphQL query that retrieves both 'hello' and 'product' data. It includes the 'name' and 'price' fields of the 'product' query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/graphql.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"data\": {\n        \"hello\": \"graphql\",\n        \"product\": {\n            \"name\": \"goods\",\n            \"price\": 156.5\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Consumer Process for Async Queue - PHP\nDESCRIPTION: This snippet demonstrates how to add a consumer process for a specific asynchronous queue in Hyperf.  It extends the `ConsumerProcess` class and overrides the `$queue` property to specify the queue name (in this case, 'other'). This process will consume messages from the 'other' queue.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Process;\n\nuse Hyperf\\AsyncQueue\\Process\\ConsumerProcess;\nuse Hyperf\\Process\\Annotation\\Process;\n\n#[Process]\nclass OtherConsumerProcess extends ConsumerProcess\n{\n    protected string $queue = 'other';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Visitors for Model Generation Hyperf PHP\nDESCRIPTION: This PHP configuration array demonstrates how to configure custom Visitors for the model generation process in Hyperf. It allows extending the functionality of the `gen:model` command by adding classes that modify the generated code.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/gen.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => [\n        // 忽略其他配置\n        'commands' => [\n            'gen:model' => [\n                'visitors' => [\n                    Hyperf\\Database\\Commands\\Ast\\ModelRewriteKeyInfoVisitor::class\n                ],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Paginator\nDESCRIPTION: This command installs the hyperf/paginator component using Composer, a dependency manager for PHP. This allows you to use the pagination features in your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/paginator.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/paginator\n```\n\n----------------------------------------\n\nTITLE: Crontab Enable Array Example - PHP\nDESCRIPTION: This code demonstrates using an array for the 'enable' property of a Crontab annotation, calling a method in another class to determine whether the task is enabled.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/crontab.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Crontab;\n\nuse Carbon\\Carbon;\nuse Hyperf\\Crontab\\Annotation\\Crontab;\n\n#[Crontab(name: \"Echo\", rule: \"* * * * *\", callback: \"execute\", enable: [EnableChecker::class, \"isEnable\"], memo: \"这是一个示例的定时任务\")]\nclass EchoCrontab\n{\n    public function execute()\n    {\n        var_dump(Carbon::now()->toDateTimeString());\n    }\n\n    public function isEnable(): bool\n    {\n        return true;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Resource Package\nDESCRIPTION: Installs the `hyperf/resource` package using composer. This package provides the base functionality for creating and using API resources in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/resource\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Swagger Component\nDESCRIPTION: This command installs the hyperf/swagger component using Composer, adding it as a dependency to your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/swagger.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/swagger\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Pool via Composer\nDESCRIPTION: This command installs the hyperf/pool package using Composer, a dependency manager for PHP. This allows you to use connection pooling in your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/pool.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/pool\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Tracer via Composer\nDESCRIPTION: This command installs the hyperf/tracer component using Composer, which provides call chain tracing capabilities for Hyperf applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tracer.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/tracer\n```\n\n----------------------------------------\n\nTITLE: UserService with Enable Cache PHP\nDESCRIPTION: Modified UserService to receive and use an enableCache parameter in its constructor.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Service;\n\nclass UserService implements UserServiceInterface\n{\n    private bool $enableCache;\n    \n    public function __construct(bool $enableCache)\n    {\n        // 接收值並儲存於類屬性中\n        $this->enableCache = $enableCache;\n    }\n    \n    public function getInfoById(int $id)\n    {\n        return (new Info())->fill($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Model Not Found Exception\nDESCRIPTION: This snippet shows how to use `findOrFail()` and `firstOrFail()` to retrieve a model and throw a `ModelNotFoundException` if the model is not found.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$model = User::findOrFail(1);\n$model = User::where('age', '>', 18)->firstOrFail();\n\n```\n\n----------------------------------------\n\nTITLE: Alpha Validation with ASCII Restriction in Hyperf\nDESCRIPTION: This snippet shows how to restrict the `alpha` validation rule to ASCII characters in Hyperf. It uses the `ascii` option to limit the allowed characters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n'username' => 'alpha:ascii',\n```\n\n----------------------------------------\n\nTITLE: Value Annotation Usage\nDESCRIPTION: This example uses the `#[Value]` annotation to inject a configuration value into a class property. The configuration key is specified within the annotation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Config\\Annotation\\Value;\n\nclass IndexController\n{\n    #[Value(\"config.key\")]\n    private $configValue;\n\n    public function index()\n    {\n        return $this->configValue;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Foreign Key Constraint by Name\nDESCRIPTION: This snippet demonstrates how to drop a foreign key constraint using its name.  The name is built automatically or can be specified upon creation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\n$table->dropForeign('posts_user_id_foreign');\n```\n\n----------------------------------------\n\nTITLE: Comments (Blade)\nDESCRIPTION: This Blade template demonstrates how to define comments that will not be included in the rendered HTML output.  Blade comments are enclosed in `{{-- --}}`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_20\n\nLANGUAGE: blade\nCODE:\n```\n{{-- This comment will not be present in the rendered HTML --}}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf WebSocket Server\nDESCRIPTION: This command installs the hyperf/websocket-server component using Composer, enabling WebSocket functionality in the Hyperf application. It adds the necessary files and dependencies to the project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/websocket-server.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/websocket-server\n```\n\n----------------------------------------\n\nTITLE: Deprecated Hyperf\\Coroutine\\Traits\\Container\nDESCRIPTION: The commit marks `Hyperf\\Coroutine\\Traits\\Container` as deprecated in Hyperf.  This indicates that the trait is no longer recommended for use and may be removed in future versions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/3.0.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nHyperf\\Coroutine\\Traits\\Container\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Tracer via Composer\nDESCRIPTION: Installs the hyperf/tracer component using Composer. This command downloads and installs the necessary files to enable call link tracing functionality.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tracer.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/tracer\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Task Component\nDESCRIPTION: This command installs the hyperf/task component using composer, making it available for use in the Hyperf project. The component is utilized for delegating tasks to separate worker processes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/task.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/task\n```\n\n----------------------------------------\n\nTITLE: Installing Async Queue Package\nDESCRIPTION: This command installs the `hyperf/async-queue` package using Composer. This package provides the necessary classes and interfaces for implementing asynchronous queues in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/async-queue\n```\n\n----------------------------------------\n\nTITLE: Get Current Page Number\nDESCRIPTION: This code snippet demonstrates how to retrieve the current page number from a Paginator instance using the `currentPage()` method. It returns an integer representing the current page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/paginator.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$currentPage = $paginator->currentPage();\n```\n\n----------------------------------------\n\nTITLE: Property Injection with Type Hints in PHP 8\nDESCRIPTION: This snippet demonstrates how to use the `@Inject` annotation with member property type declarations in PHP 8 as an alternative to the `@var` annotation in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog/2.0.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Example {\n    /**\n     * @Inject\n     */\n    private ExampleService $exampleService;\n}\n```\n\n----------------------------------------\n\nTITLE: Add Optimize Autoloader Configuration (composer.json)\nDESCRIPTION: This snippet demonstrates how to add the `optimize-autoloader` configuration to the `composer.json` file. This ensures that the composer autoloader is optimized whenever dependencies are updated. It requires composer and helps to improve the performance. This setting is recommended.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.1.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"config\": {\n        \"optimize-autoloader\": true,\n        \"sort-packages\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Migrations (Bash)\nDESCRIPTION: This command rolls back all migrations in the project. It effectively resets the database schema to its initial state by executing the `down` methods of all migrations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:reset\n```\n\n----------------------------------------\n\nTITLE: Memory Driver Configuration\nDESCRIPTION: This configuration snippet shows how to configure the Hyperf cache to use the in-memory driver. The driver stores cache data in the server's memory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/cache.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'memory' => [\n        'driver' => Hyperf\\Cache\\Driver\\MemoryDriver::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test with Filter\nDESCRIPTION: Runs a specific test method by using the --filter option with the composer test command.  This allows for focused testing of individual units of code.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncomposer test -- --filter=testUserDaoFirst\n```\n\n----------------------------------------\n\nTITLE: Check Configuration Existence\nDESCRIPTION: This snippet uses the `has()` method of the `Config` object to check if a configuration key exists.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @var \\Hyperf\\Contract\\ConfigInterface\n */\n// 通過 has(): bool 方法判斷對應的 $key 值是否存在於配置中，$key 值可以通過 . 連接符定位到下級數組\n$config->has($key);\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Definition\nDESCRIPTION: Example of defining an environment variable with a string value in a `.env` file. Demonstrates how to use quotes for values containing spaces or special characters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config.md#_snippet_8\n\nLANGUAGE: dotenv\nCODE:\n```\nAPP_NAME=\"Hyperf Skeleton\"\n```\n\n----------------------------------------\n\nTITLE: Configure Prometheus Scrape Mode\nDESCRIPTION: This PHP snippet configures Prometheus to use the scrape mode. This is the recommended official method, Prometheus pulls metrics data from the specified endpoint.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n'mode' => Constants::SCRAPE_MODE\n```\n\n----------------------------------------\n\nTITLE: Prometheus Push Mode\nDESCRIPTION: Configures the Prometheus driver to use push mode, where the application pushes metrics to a Prometheus Pushgateway.  This is recommended only for offline tasks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n'mode' => Constants::PUSH_MODE\n```\n\n----------------------------------------\n\nTITLE: Backing Up Portainer Data\nDESCRIPTION: This command creates a backup of the Portainer data by running a container that mounts the Portainer data volume and creates a tar archive.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run -it --volumes-from portainer_container -v $(pwd):/backup --name backup --rm nginx tar -cf /backup/data.tar /data/\n```\n\n----------------------------------------\n\nTITLE: Metric Middleware Configuration\nDESCRIPTION: Enables the MetricMiddleware for HTTP server to collect request Histogram statistics. Adds the middleware to the `http` server configuration in `config/autoload/middlewares.php`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'http' => [\n        \\Hyperf\\Metric\\Middleware\\MetricMiddleware::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Raw Search Results (PHP)\nDESCRIPTION: Retrieves the raw search results without mapping them to model instances. The `raw` method returns the underlying search engine's response data.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->raw();\n```\n\n----------------------------------------\n\nTITLE: Renaming a Table (PHP)\nDESCRIPTION: This line shows how to rename a table using the Schema builder's `rename` method. It renames the table from `$from` to `$to`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nSchema::rename($from, $to);\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Configuration\nDESCRIPTION: Illustrates using environment variables within configuration files. The `env()` function retrieves environment variables, providing a default value if the variable is not set.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/config.php\nreturn [\n    'app_name' => env('APP_NAME', 'Hyperf Skeleton'),\n];\n```\n\n----------------------------------------\n\nTITLE: Create Hyperf project with Swoole\nDESCRIPTION: This command creates a new Hyperf project using the Swoole driver. It leverages Composer to install the hyperf/hyperf-skeleton package, providing a pre-configured project structure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer create-project hyperf/hyperf-skeleton\n```\n\n----------------------------------------\n\nTITLE: Get Last Item Number on Current Page\nDESCRIPTION: This code snippet shows how to get the index or number of the last item on the current page.  The `lastItem()` method gives the index of the last item.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/paginator.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$lastItem = $paginator->lastItem();\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Nacos Config\nDESCRIPTION: This command installs the Hyperf component for integrating with Nacos, a dynamic service discovery and configuration management platform.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config-center.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-nacos\n```\n\n----------------------------------------\n\nTITLE: Get First Item Number on Current Page\nDESCRIPTION: This snippet illustrates how to retrieve the index or number of the first item on the current page.  The `firstItem()` method returns the index of the first item.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/paginator.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$firstItem = $paginator->firstItem();\n```\n\n----------------------------------------\n\nTITLE: Enable Checker Class Example - PHP\nDESCRIPTION: This is an example class for checking whether a crontab task should be enabled. This class is used in the array example below.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/crontab.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Crontab;\n\nclass EnableChecker\n{\n    public function isEnable(): bool\n    {\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Tencent COS Adapter (Flysystem v3.0)\nDESCRIPTION: This command installs the Tencent COS adapter for Flysystem v3.0, providing support for Tencent Cloud Object Storage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/filesystem.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-cos:^5.0\"\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Entrypoint for Watcher\nDESCRIPTION: This command configures the Dockerfile's entry point to start the Hyperf application with the watcher enabled when the container starts. This ensures that the watcher is active in a Docker environment.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/watcher.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nENTRYPOINT [\"php\", \"/opt/www/bin/hyperf.php\", \"server:watch\"]\n```\n\n----------------------------------------\n\nTITLE: Reloading a Hyperf Model with Refresh\nDESCRIPTION: Demonstrates how to reload a Hyperf model instance using the `refresh()` method.  The `refresh()` method re-populates the existing model instance with the latest data from the database, including re-loading any loaded relationships.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = User::query()->where('name','Hyperf')->first();\n\n$user->name = 'Hyperf2';\n\n$user->refresh();\n\necho $user->name; // Hyperf\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Model\nDESCRIPTION: This snippet shows how to retrieve a single model instance using `first()` or `find()` based on specified conditions or ID.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$user = User::query()->where('id', 1)->first();\n\n$user = User::query()->find(1);\n\n```\n\n----------------------------------------\n\nTITLE: Building Phar Archive (Default)\nDESCRIPTION: This command builds a Phar archive using the default settings. It creates a `phar` file with the default name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/phar.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php phar:build\n```\n\n----------------------------------------\n\nTITLE: 1.1 Container Configuration - PHP\nDESCRIPTION: Configures the dependency injection container in Hyperf 1.1 using the `DefinitionSourceFactory`.  It initializes a PSR-11 compatible container and sets it as the application context. It leverages the DefinitionSourceFactory to handle default behaviors including annotation scanning.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/1.1.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Initial a dependency injection container that implemented PSR-11 and return the container.\n */\ndeclare(strict_types=1);\n\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Di\\Definition\\DefinitionSourceFactory;\nuse Hyperf\\Utils\\ApplicationContext;\nuse Psr\\Container\\ContainerInterface;\n\n$container = new Container((new DefinitionSourceFactory(true))());\nif (! $container instanceof ContainerInterface) {\n    throw new RuntimeException('The dependency injection container is invalid.');\n}\nreturn ApplicationContext::setContainer($container);\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies with Annotations in PHP 8 - Hyperf\nDESCRIPTION: This code snippet demonstrates how to use the `@Inject` annotation in PHP 8 with Hyperf to inject dependencies through member property type declarations. This eliminates the need for `@var` declarations.  It requires PHP 8 and the Hyperf framework with annotation support enabled. The example shows injecting an `ExampleService` into an `Example` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog/changelog-v2.0.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Example {\n    /**\n     * @Inject\n     */\n    private ExampleService $exampleService;\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Kafka Configuration File\nDESCRIPTION: This command publishes the default Kafka configuration file to the `config/autoload` directory. This allows you to customize the Kafka connection settings for your Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/kafka.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/kafka\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Server for JSON RPC\nDESCRIPTION: This configuration defines an HTTP server in Hyperf to handle JSON RPC requests using the `jsonrpc-http` protocol. It specifies the server name, type, host, port, and the callback function `onRequest` which is handled by `Hyperf\\JsonRpc\\HttpServer`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/json-rpc.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Server\\Server;\nuse Hyperf\\Server\\Event;\n\nreturn [\n    // 這裡省略了該檔案的其它配置\n    'servers' => [\n        [\n            'name' => 'jsonrpc-http',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9504,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [\\Hyperf\\JsonRpc\\HttpServer::class, 'onRequest'],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Define One-to-One Relation in User Model for Eager Loading (PHP)\nDESCRIPTION: This is the same code as the first one-to-one relationship, but it is included again in the context of eager loading to avoid the N+1 problem.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    public function role()\n    {\n        return $this->hasOne(Role::class, 'user_id', 'id');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Hyperf Default Bootstrap Configuration - PHP\nDESCRIPTION: Configures the bootstrap file for Hyperf's testing environment, setting error reporting, timezone, base path, and enabling coroutines. It also loads the autoloader, initializes the class loader, and retrieves the application instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/testing.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nerror_reporting(E_ALL);\ndate_default_timezone_set('Asia/Shanghai');\n\n! defined('BASE_PATH') && define('BASE_PATH', dirname(__DIR__, 1));\n! defined('SWOOLE_HOOK_FLAGS') && define('SWOOLE_HOOK_FLAGS', SWOOLE_HOOK_ALL);\n\n// 默認開啓 當使用 pest --parallel 特性或其他涉及到原生並行操作時需要註釋掉\nSwoole\\Runtime::enableCoroutine(true);\n\nrequire BASE_PATH . '/vendor/autoload.php';\n\nHyperf\\Di\\ClassLoader::init();\n\n$container = require BASE_PATH . '/config/container.php';\n\n$container->get(Hyperf\\Contract\\ApplicationInterface::class);\n```\n\n----------------------------------------\n\nTITLE: Defining Array Option (PHP)\nDESCRIPTION: Defines an array option using `InputOption::VALUE_IS_ARRAY | InputOption::VALUE_OPTIONAL`. This allows the command to accept multiple values for the option, which are then stored as an array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addOption('name', 'N', InputOption::VALUE_IS_ARRAY | InputOption::VALUE_OPTIONAL, '姓名');\n}\n\npublic function handle()\n{\n    var_dump($this->input->getOption('name'));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating Swagger Documentation\nDESCRIPTION: This command generates the Swagger documentation files (JSON and HTML) based on the annotations in the code.  It needs to be executed if `auto_generate` is not configured.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/swagger.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php gen:swagger\n```\n\n----------------------------------------\n\nTITLE: Add Validation Exception Handler\nDESCRIPTION: This configuration adds the `ValidationExceptionHandler` to the HTTP server to handle `ValidationException` exceptions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'handler' => [\n        // 這裡對應您當前的 Server 名稱\n        'http' => [\n            \\Hyperf\\Validation\\ValidationExceptionHandler::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Kafka Configuration Array\nDESCRIPTION: This is the default configuration array for the Kafka component. It defines connection timeouts, client IDs, bootstrap servers, acknowledgements, and other Kafka-related settings. The array is located in `config/autoload/kafka.php`\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/kafka.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Kafka\\Constants\\KafkaStrategy;\n\nreturn [\n    'default' => [\n        'connect_timeout' => -1,\n        'send_timeout' => -1,\n        'recv_timeout' => -1,\n        'client_id' => '',\n        'max_write_attempts' => 3,\n        'bootstrap_servers' => '127.0.0.1:9092',\n        'acks' => 0,\n        'producer_id' => -1,\n        'producer_epoch' => -1,\n        'partition_leader_epoch' => -1,\n        'interval' => 0,\n        'session_timeout' => 60,\n        'rebalance_timeout' => 60,\n        'replica_id' => -1,\n        'rack_id' => '',\n        'group_retry' => 5,\n        'group_retry_sleep' => 1,\n        'group_heartbeat' => 3,\n        'offset_retry' => 5,\n        'auto_create_topic' => true,\n        'partition_assignment_strategy' => KafkaStrategy::RANGE_ASSIGNOR,\n        'sasl' => [],\n        'ssl' => [],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Throwing a Business Exception in a Controller in PHP\nDESCRIPTION: This code demonstrates how to throw a `BusinessException` in a controller action. It throws the exception with the `SERVER_ERROR` error code defined in the `ErrorCode` enum.  This snippet shows how to integrate the custom exception class into a Hyperf controller.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/constants.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse App\\Constants\\ErrorCode;\nuse App\\Exception\\BusinessException;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        throw new BusinessException(ErrorCode::SERVER_ERROR);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: StatsD Configuration\nDESCRIPTION: Configures the StatsD driver in the `metric.php` file. This includes settings for UDP host, UDP port, batching, and sampling.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'default' => env('METRIC_DRIVER', 'statd'),\n    'use_standalone_process' => env('TELEMETRY_USE_STANDALONE_PROCESS', true),\n    'enable_default_metric' => env('TELEMETRY_ENABLE_DEFAULT_TELEMETRY', true),\n    'metric' => [\n        'statsd' => [\n            'driver' => Hyperf\\Metric\\Adapter\\StatsD\\MetricFactory::class,\n            'namespace' => env('APP_NAME', 'skeleton'),\n            'udp_host' => env('STATSD_UDP_HOST', '127.0.0.1'),\n            'udp_port' => env('STATSD_UDP_PORT', '8125'),\n            'enable_batch' => env('STATSD_ENABLE_BATCH', true),\n            'push_interval' => env('STATSD_PUSH_INTERVAL', 5),\n            'sample_rate' => env('STATSD_SAMPLE_RATE', 1.0),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Define Routes with Controller and RequestMapping Annotations - Hyperf PHP\nDESCRIPTION: This code snippet demonstrates how to define routes using the `#[Controller]` and `#[RequestMapping]` annotations in Hyperf. The `#[Controller]` annotation marks the class as a controller, and `#[RequestMapping]` defines the specific path and methods for a route.  It requires the `Hyperf\\HttpServer\\Annotation\\Controller` and `Hyperf\\HttpServer\\Annotation\\RequestMapping` namespaces.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/overview.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\Controller;\nuse Hyperf\\HttpServer\\Annotation\\RequestMapping;\n\n#[Controller]\nclass IndexController\n{\n    // Hyperf 会自动为此方法生成一个 /index/index 的路由，允许通过 GET 或 POST 方式请求\n    #[RequestMapping(path: \"index\", methods: \"get,post\")]\n    public function index(RequestInterface $request)\n    {\n        // 从请求中获得 id 参数\n        $id = $request->input('id', 1);\n        return (string)$id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerate Hyperf Models\nDESCRIPTION: This script regenerates the Hyperf models to align with the new model base class that includes type restrictions. It requires the hyperf/code-generator package and specifies the directory where the models are located.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/changelog/3.0.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp vendor/bin/regenerate-models.php $PWD/app/Model\n```\n\n----------------------------------------\n\nTITLE: Custom Meta Generator\nDESCRIPTION: This PHP code defines a custom `UserDefinedIdGenerator` class that extends the Snowflake ID generation.  It generates IDs based on a `UserId` rather than `WorkerId` and utilizes the modulo operator to ensure the `UserId` remains within the acceptable range. The example also shows how to retrieve the custom generator from the DI container and generate an ID.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/snowflake.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Snowflake\\IdGenerator;\n\nclass UserDefinedIdGenerator\n{\n    /**\n     * @var IdGenerator\\SnowflakeIdGenerator\n     */\n    protected $idGenerator;\n\n    public function __construct(IdGenerator\\SnowflakeIdGenerator $idGenerator)\n    {\n        $this->idGenerator = $idGenerator;\n    }\n\n    public function generate(int $userId)\n    {\n        $meta = $this->idGenerator->getMetaGenerator()->generate();\n\n        return $this->idGenerator->generate($meta->setWorkerId($userId % 31));\n    }\n\n    public function degenerate(int $id)\n    {\n        return $this->idGenerator->degenerate($id);\n    }\n}\n\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n$generator = $container->get(UserDefinedIdGenerator::class);\n$userId = 20190620;\n\n$id = $generator->generate($userId);\n```\n\n----------------------------------------\n\nTITLE: Binding Interface to Consumer Class in dependencies.php\nDESCRIPTION: This configuration in `config/autoload/dependencies.php` binds the `CalculatorServiceInterface` interface to the `CalculatorServiceConsumer` class in the application's dependency injection container. This allows you to inject the interface and have the container resolve it to an instance of the consumer class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/json-rpc.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    App\\JsonRpc\\CalculatorServiceInterface::class => App\\JsonRpc\\CalculatorServiceConsumer::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Managing Hyperf Application with supervisorctl\nDESCRIPTION: These snippets demonstrate using the `supervisorctl` command-line tool to manage a Hyperf application. Commands include starting, restarting, stopping, checking status, updating configuration, and reloading all programs.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/supervisor.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# 啓動 hyperf 應用\nsupervisorctl start hyperf\n# 重啓 hyperf 應用\nsupervisorctl restart hyperf\n# 停止 hyperf 應用\nsupervisorctl stop hyperf\n# 查看所有被管理項目運行狀態\nsupervisorctl status\n# 重新加載配置文件\nsupervisorctl update\n# 重新啓動所有程序\nsupervisorctl reload\n```\n\n----------------------------------------\n\nTITLE: Getting PSR-16 Cache Instance\nDESCRIPTION: This code retrieves an instance of the Psr\\SimpleCache\\CacheInterface from the dependency injection container. This allows using the cache in a PSR-16 compliant way.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/cache.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$cache = $container->get(\\Psr\\SimpleCache\\CacheInterface::class);\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Database via Composer\nDESCRIPTION: Installs the hyperf/database package using Composer. This command is intended for non-Hyperf framework projects to use the database component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/quick-start.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/database\n```\n\n----------------------------------------\n\nTITLE: Installing fswatch on Ubuntu/Debian\nDESCRIPTION: This command installs fswatch on Ubuntu or Debian using the apt-get package manager. fswatch provides efficient file system monitoring.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/watcher.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napt-get install fswatch\n```\n\n----------------------------------------\n\nTITLE: Starting Hyperf Server\nDESCRIPTION: This command starts the Hyperf server, initiating the HTTP and WebSocket servers based on the configuration files.  It starts the workers and listens on specified ports.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/websocket-server.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/hyperf.php start\n```\n\n----------------------------------------\n\nTITLE: Use collection keys\nDESCRIPTION: Example of using collection keys and how it interacts with the `preserveKeys` attribute of the resource class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\User as UserResource;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return UserResource::collection(User::all()->keyBy->id)->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Annotation Injection\nDESCRIPTION: Demonstrates property injection using the #[Inject] attribute. Requires `use Hyperf\\Di\\Annotation\\Inject;`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserService;\nuse Hyperf\\Di\\Annotation\\Inject;\n\nclass IndexController\n{\n\n    #[Inject]\n    private UserService $userService;\n    \n    public function index()\n    {\n        $id = 1;\n        // 直接使用\n        return $this->userService->getInfoById($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf View Engine\nDESCRIPTION: Installs the `hyperf/view-engine` package using Composer. This is required for using the Blade template engine with Hyperf's view component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/view-engine\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Filesystem Component (Shell)\nDESCRIPTION: This command installs the core Hyperf filesystem component via Composer, providing the base functionality for interacting with various storage adapters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/filesystem.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/filesystem\n```\n\n----------------------------------------\n\nTITLE: Exists Validation in Hyperf\nDESCRIPTION: This snippet demonstrates basic usage of the `exists` validation rule in Hyperf, checking if a value exists in a specified database table and column.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n'state' => 'exists:states'\n```\n\n----------------------------------------\n\nTITLE: Refreshing Migrations with Step (Bash)\nDESCRIPTION: This command rolls back and then re-runs a specified number of migrations using the `step` parameter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:refresh --step=5\n```\n\n----------------------------------------\n\nTITLE: Validation Middleware Configuration\nDESCRIPTION: Configures the Validation Middleware to be used in the HTTP middleware stack. This middleware automatically validates incoming requests based on defined validation rules.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/validation/README.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'http' => [\n        \\Hyperf\\Validation\\Middleware\\ValidationMiddleware::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Remove and Get Session Data\nDESCRIPTION: Removes data associated with a specific key from the session and returns the removed value using the `remove()` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/session.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$data = $this->session->remove('foo');\n```\n\n----------------------------------------\n\nTITLE: Blade @hasSection Directive\nDESCRIPTION: This Blade template demonstrates how to use the `@hasSection` directive to check if a section has content defined.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n@hasSection('navigation')\n    <div class=\"pull-right\">\n        @yield('navigation')\n    </div>\n\n    <div class=\"clearfix\"></div>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Refreshing a Model (Hyperf)\nDESCRIPTION: Demonstrates the use of `fresh()` to retrieve a fresh copy of the model from the database without modifying the current instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n/** @var User $user */\n$user = User::query()->find(1);\n\n$freshUser = $user->fresh();\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf HTTP Message Component\nDESCRIPTION: Install the hyperf/http-message component via composer. This component provides the implementation support for the Request object based on the PSR-7 standard.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/request.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/http-message\n```\n\n----------------------------------------\n\nTITLE: Getting Help Output (Bash)\nDESCRIPTION: Demonstrates how to display the help message for a command by using the `--help` option.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/hyperf.php demo:command --help\n# 輸出\n...\nHelp:\n  Hyperf 自定義命令演示\n```\n\n----------------------------------------\n\nTITLE: Generate a Resource Class\nDESCRIPTION: Generates a resource class using the `gen:resource` command. This command creates a new resource file in the `app/Resource` directory. The resource extends `Hyperf\\Resource\\Json\\JsonResource`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:resource User\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Messages Array\nDESCRIPTION: Demonstrates how to use custom messages by passing them as the third argument to the `make` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$messages = [\n    'required' => 'The :attribute field is required.',\n];\n\n$validator = $this->validationFactory->make($request->all(), $rules, $messages);\n```\n\n----------------------------------------\n\nTITLE: Defining Application Configuration\nDESCRIPTION: This snippet defines the application configuration values in the `demo_v1.0` config.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_24\n\nLANGUAGE: Shell\nCODE:\n```\nAPP_NAME=demo\n\nDB_DRIVER=mysql\nDB_HOST=localhost\nDB_PORT=3306\nDB_DATABASE=hyperf\nDB_USERNAME=root\nDB_PASSWORD=\nDB_CHARSET=utf8mb4\nDB_COLLATION=utf8mb4_unicode_ci\nDB_PREFIX=\n\nREDIS_HOST=localhost\nREDIS_AUTH=\nREDIS_PORT=6379\nREDIS_DB=0\n```\n\n----------------------------------------\n\nTITLE: Resolving Guzzle 7.0 Conflicts\nDESCRIPTION: Composer command to update promphp/prometheus_client_php to resolve conflicts when using Guzzle 7.0 with the hyperf/metric component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/guzzle.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require \"promphp/prometheus_client_php:2.2.1\"\n```\n\n----------------------------------------\n\nTITLE: Install GraphQL Component with Composer\nDESCRIPTION: Installs the hyperf/graphql component using Composer. This command adds the necessary files to your Hyperf project to enable GraphQL functionality.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/graphql.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/graphql\n```\n\n----------------------------------------\n\nTITLE: Ignore Annotations Configuration in Hyperf\nDESCRIPTION: This configuration example demonstrates how to specify annotations to be ignored by the annotation scanner in Hyperf. This is useful for excluding annotations used by other tools, such as document generators.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/annotation.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse JetBrains\\PhpStorm\\ArrayShape;\n\nreturn [\n    'scan' => [\n        // Annotations in the ignore_annotations array will be ignored by the annotation scanner\n        'ignore_annotations' => [\n            ArrayShape::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Publishing Opentracing Config File\nDESCRIPTION: This command publishes the default opentracing.php configuration file to the config/autoload directory. This allows customization of the tracer settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tracer.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/tracer\n```\n\n----------------------------------------\n\nTITLE: Install Translation Component - Composer\nDESCRIPTION: Installs the hyperf/translation component using Composer. This component provides internationalization features for Hyperf applications and is framework-agnostic.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/translation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/translation\n```\n\n----------------------------------------\n\nTITLE: Creating Portainer Service in Docker Swarm\nDESCRIPTION: Creates a Portainer service in Docker Swarm, publishing port 9000, setting replica count to 1, constraining the service to manager nodes, and mounting volumes for data and Docker socket access.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ndocker service create \\\n    --name portainer \\\n    --publish 9000:9000 \\\n    --replicas=1 \\\n    --constraint 'node.role == manager' \\\n    --mount type=volume,src=portainer_data,dst=/data \\\n    --mount type=bind,src=//var/run/docker.sock,dst=/var/run/docker.sock \\\n    portainer/portainer\n```\n\n----------------------------------------\n\nTITLE: Logging into Aliyun Docker Registry\nDESCRIPTION: This snippet logs into the Aliyun Docker Registry as the `gitlab-runner` user, providing the username and registry URL.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_21\n\nLANGUAGE: Shell\nCODE:\n```\nusermod -aG docker gitlab-runner\nsu gitlab-runner\ndocker login --username=your_name registry.cn-shanghai.aliyuncs.com\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Config Center\nDESCRIPTION: This command installs the core Hyperf config center component, providing a unified interface for accessing different configuration providers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config-center.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-center\n```\n\n----------------------------------------\n\nTITLE: Install Twig Engine (Bash)\nDESCRIPTION: This command installs the Twig template engine using Composer, enabling the use of Twig templates for view rendering in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require twig/twig\n```\n\n----------------------------------------\n\nTITLE: Generate Form Request Class\nDESCRIPTION: Generates a new FormRequest class using the `gen:request` command.  Form requests are used to encapsulate validation logic.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/validation.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:request FooRequest\n```\n\n----------------------------------------\n\nTITLE: Setting Description for a Command - PHP\nDESCRIPTION: Configure the description for a command using the `setDescription` method within the `configure` method. This description is displayed in the command list.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/command.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->setDescription('Hyperf Demo Command');\n}\n\n```\n\n----------------------------------------\n\nTITLE: Publishing Watcher Configuration\nDESCRIPTION: This command publishes the default configuration file for the Hyperf Watcher component, allowing customization of the watcher's behavior.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/watcher.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/watcher\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf WebSocket Client\nDESCRIPTION: Installs the hyperf/websocket-client component using Composer. This component provides the necessary classes and functionalities to interact with WebSocket servers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/websocket-client.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/websocket-client\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Nano\nDESCRIPTION: Installs the `hyperf/nano` package using Composer. This command adds the Nano package to your project's dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nano.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer install hyperf/nano\n```\n\n----------------------------------------\n\nTITLE: Blade PHP Directive\nDESCRIPTION: This Blade template demonstrates how to embed and execute raw PHP code within a Blade template using the `@php` directive.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_24\n\nLANGUAGE: blade\nCODE:\n```\n@php\n    //\n@endphp\n```\n\n----------------------------------------\n\nTITLE: Publishing Hyperf DB Configuration\nDESCRIPTION: This command publishes the default configuration file for the hyperf/db component to the config/autoload directory.  This allows customization of database settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/db.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/db\n```\n\n----------------------------------------\n\nTITLE: Abstract Object Injection: Interface Definition\nDESCRIPTION: Defines an interface for the UserService. This allows for injecting implementations via configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Service;\n\ninterface UserServiceInterface\n{\n    public function getInfoById(int $id);\n}\n```\n\n----------------------------------------\n\nTITLE: Histogram Interface Definition\nDESCRIPTION: Defines the interface for a histogram metric, which is used to track the distribution of values over time.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\ninterface HistogramInterface\n{\n    public function with(string ...$labelValues): self;\n\n    public function put(float $sample);\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Resource\nDESCRIPTION: This command installs the hyperf/resource package using Composer. It is a prerequisite for using resource classes to transform models into JSON responses.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/resource\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Circuit Breaker\nDESCRIPTION: This command installs the hyperf/circuit-breaker component using Composer, which is required for implementing circuit breaker functionality in a Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/circuit-breaker.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/circuit-breaker\n```\n\n----------------------------------------\n\nTITLE: Publish Hyperf DB Configuration\nDESCRIPTION: Publishes the default configuration file for the hyperf/db component to the config/autoload directory. This allows customization of the database connection settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/db.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/db\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Nodes\nDESCRIPTION: Lists the nodes in the Docker Swarm cluster. This allows you to verify that the nodes have joined the Swarm successfully.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_51\n\nLANGUAGE: shell\nCODE:\n```\ndocker node ls\n```\n\n----------------------------------------\n\nTITLE: Rename Index\nDESCRIPTION: This snippet demonstrates how to rename an index using the `renameIndex()` method. It renames an index from 'from' to 'to'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n$table->renameIndex('from', 'to');\n```\n\n----------------------------------------\n\nTITLE: Logging into Docker Registry as Gitlab Runner\nDESCRIPTION: This snippet logs into a Docker registry as the `gitlab-runner` user, providing the username and registry URL.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nsu gitlab-runner\ndocker login -u username your-docker-repository\n```\n\n----------------------------------------\n\nTITLE: Installing hyperf/socketio-server\nDESCRIPTION: This command installs the hyperf/socketio-server package using Composer, which is required for implementing Socket.io functionality in a Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/socketio-server.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/socketio-server\n```\n\n----------------------------------------\n\nTITLE: Install ReactiveX Component via Composer\nDESCRIPTION: This command installs the hyperf/reactive-x component using Composer, which provides ReactiveX integration for Swoole/Hyperf environments.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/reactive-x.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/reactive-x\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Translation Component\nDESCRIPTION: This command installs the Hyperf translation component using Composer. This component is independent and can be used in other projects or frameworks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/translation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/translation\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network\nDESCRIPTION: This command creates a new Docker overlay network with a specified subnet.  It's designed to address IP exhaustion issues. It configures the network with encryption and makes it attachable. Requires Docker.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\ndocker network create \\\n--driver overlay \\\n--subnet 10.0.0.0/8 \\\n--opt encrypted \\\n--attachable \\\ndefault-network\n```\n\n----------------------------------------\n\nTITLE: Resource Collection Definition\nDESCRIPTION: Defines a custom resource collection class, extending `ResourceCollection`. The `toArray` method defines the structure of the collection response, including a `data` key for the collection and a `links` key for metadata.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     * @return array\n     */\n    public function toArray() :array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf NATS package\nDESCRIPTION: This command installs the `hyperf/nats` package using Composer, allowing you to integrate NATS messaging into your Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nats.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/nats\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Signal Package\nDESCRIPTION: Installs the hyperf/signal package using Composer, which is required for using signal handling functionalities.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/signal.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/signal\n```\n\n----------------------------------------\n\nTITLE: Raw Search Results\nDESCRIPTION: This example retrieves the raw search results from the engine using the `raw` method. This is useful if you need to access the original search results before they are converted to models.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->raw();\n```\n\n----------------------------------------\n\nTITLE: Getting Input from Query String\nDESCRIPTION: Shows how to retrieve input values specifically from the query string using the `query(?string $key = null, $default = null)` method. Demonstrates retrieving a specific query parameter with and without a default value, and retrieving all query parameters as an associative array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/request.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// 存在则返回，不存在则返回 null\n$name = $request->query('name');\n// 存在则返回，不存在则返回默认值 Hyperf\n$name = $request->query('name', 'Hyperf');\n// 不传递参数则以关联数组的形式返回所有 Query 参数\n$name = $request->query();\n```\n\n----------------------------------------\n\nTITLE: Configure Standalone Monitoring Process\nDESCRIPTION: This PHP snippet configures whether to use a standalone process for metric collection and reporting. When enabled, metric collection and reporting are handled in the Worker process after shutdown.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'use_standalone_process' => env('TELEMETRY_USE_STANDALONE_PROCESS', true),\n```\n\n----------------------------------------\n\nTITLE: Nesting DAGs in Hyperf DAG\nDESCRIPTION: This snippet demonstrates how to nest DAGs within each other. The `\\Hyperf\\Dag\\Dag` class itself implements the `\\Hyperf\\Dag\\Runner` interface, allowing it to be used as a vertex within another DAG. This enables the creation of complex task dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/dag.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// namespace omitted\n$a = Vertex::make(function () { return 1;});\n$b = Vertex::make(function () { return 2;});\n$c = Vertex::make(function () { return 3;});\n\n$nestedDag = new Dag();\n$nestedDag->addVertex($a)->addVertex($b)->addEdge($a, $b);\n$d = Vertex::of($nestedDag);\n\n$superDag = new Dag();\n$superDag->addVertex($c)->addVertex($d)->addEdge($c, $d);\n$superDag->run();\n```\n\n----------------------------------------\n\nTITLE: Searching within Index\nDESCRIPTION: This snippet shows how to specify a custom index to search within using the `within` method.  The `within` method allows you to target a specific index instead of the model's default index.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$orders = App\\Order::search('Star Trek')\n    ->within('tv_shows_popularity_desc')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Degenerating a Snowflake ID\nDESCRIPTION: This snippet shows how to reverse engineer a Snowflake ID to get its metadata. It uses the degenerate method of the IdGeneratorInterface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/snowflake.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Snowflake\\IdGeneratorInterface;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n$generator = $container->get(IdGeneratorInterface::class);\n\n$meta = $generator->degenerate($id);\n```\n\n----------------------------------------\n\nTITLE: Setting swoole.use_shortname in php.ini\nDESCRIPTION: This code snippet demonstrates how to disable Swoole short function names by adding the `swoole.use_shortname ='Off'` configuration to the `php.ini` file. This is a mandatory step for Hyperf to work correctly. This configuration CANNOT be overridden by the ini_set() function.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/questions.md#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nswoole.use_shortname ='Off'\n```\n\n----------------------------------------\n\nTITLE: Add Validation Middleware\nDESCRIPTION: This configuration adds the `ValidationMiddleware` to the HTTP server, ensuring that form requests are validated before reaching the controller.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // 下面的 http 字串對應 config/autoload/server.php 內每個 server 的 name 屬性對應的值，意味著對應的中介軟體配置僅應用在該 Server 中\n    'http' => [\n        // 陣列內配置您的全域性中介軟體，順序根據該陣列的順序\n        \\Hyperf\\Validation\\Middleware\\ValidationMiddleware::class\n        // 這裡隱藏了其它中介軟體\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Trace Middleware\nDESCRIPTION: This configuration adds the TraceMiddleware to the http middleware stack in middlewares.php. This middleware is responsible for collecting and propagating trace information for HTTP requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tracer.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'http' => [\n        \\Hyperf\\Tracer\\Middleware\\TraceMiddleware::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Update Composer Dependencies\nDESCRIPTION: This snippet demonstrates how to update composer dependencies after adding the path repository. It involves navigating to the `hyperf-skeleton` directory, removing the `composer.lock` file and `vendor` directory, and then running `composer update` to reinstall the dependencies using the new repository configuration. This will create symlinks from vendor/hyperf to the cloned hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/component-guide/intro.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd hyperf-skeleton\nrm -rf composer.lock && rm -rf vendor && composer update\n```\n\n----------------------------------------\n\nTITLE: Crontab Enable as String Method\nDESCRIPTION: This example demonstrates how to dynamically enable a Crontab task using a string that specifies a method to be called.  The `isEnable` method determines whether the task should run.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/crontab.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Crontab;\n\nuse Carbon\\Carbon;\nuse Hyperf\\Crontab\\Annotation\\Crontab;\n\n#[Crontab(name: \"Echo\", rule: \"* * * * *\", callback: \"execute\", enable: \"isEnable\", memo: \"這是一個示例的定時任務\")]\nclass EchoCrontab\n{\n    public function execute()\n    {\n        var_dump(Carbon::now()->toDateTimeString());\n    }\n\n    public function isEnable(): bool\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Choice Command Method\nDESCRIPTION: This adds a `choiceMultiple()` method to the `Hyperf\\Command\\Command` class.  This method is designed to handle multiple selections from a command-line interface, returning an array of selected choices. It complements the existing `choice` method, which only supports single selections.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.0.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nHyperf\\Command\\Command::choiceMultiple(): array\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents with Symbolic Links (Bash)\nDESCRIPTION: Uses the `ls -l` command to verify that symbolic links have been successfully established between the `hyperf-skeleton/vendor/hyperf` directory and the `hyperf/src` directory. Successful symbolic links allow developers to modify the core Hyperf code directly through the `vendor` directory of the `hyperf-skeleton` project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/component-guide/intro.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd vendor/hyperf/\nls -l\n```\n\n----------------------------------------\n\nTITLE: Decimal Validation with Precision in Hyperf\nDESCRIPTION: This snippet demonstrates the use of the `decimal` validation rule in Hyperf to specify the number of decimal places allowed in a numeric field. It shows examples for fixed and range of decimal places.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// 必須正好有兩位小數（例如 9.99）...\n'price' => 'decimal:2'\n```\n\nLANGUAGE: php\nCODE:\n```\n// 必須有 2 到 4 位小數...\n'price' => 'decimal:2,4'\n```\n\n----------------------------------------\n\nTITLE: Convert Infix to RPN Expression in Hyperf\nDESCRIPTION: This snippet converts an infix expression to its RPN equivalent using the `toRPNExpression` method of the `Calculator` class. The method takes an infix expression as input and returns the corresponding RPN expression as a string. Note: This implementation does not support variables.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/rpn/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->toRPNExpression('4 - 2 * ( 5 + 5 ) - 10'); // 4 2 5 5 + * - 10 -\n```\n\n----------------------------------------\n\nTITLE: Modifying Socket.IO Basic Configuration in Hyperf (PHP)\nDESCRIPTION: This code demonstrates how to modify the basic configuration of Socket.IO in Hyperf, specifically the pingTimeout parameter.  It creates a SocketIOFactory that overwrites the default SocketIO class, allowing customization of parameters like pingTimeout. This avoids disconnections caused by slow network or heavy message load.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/socketio-server.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Kernel;\n\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\SocketIOServer\\Parser\\Decoder;\nuse Hyperf\\SocketIOServer\\Parser\\Encoder;\nuse Hyperf\\SocketIOServer\\SidProvider\\SidProviderInterface;\nuse Hyperf\\SocketIOServer\\SocketIO;\nuse Hyperf\\WebSocketServer\\Sender;\nuse Psr\\Container\\ContainerInterface;\n\nclass SocketIOFactory\n{\n    public function __invoke(ContainerInterface $container)\n    {\n        $io = new SocketIO(\n            $container->get(StdoutLoggerInterface::class),\n            $container->get(Sender::class),\n            $container->get(Decoder::class),\n            $container->get(Encoder::class),\n            $container->get(SidProviderInterface::class)\n        );\n\n        // rewrite the pingTimeout parameter\n        $io->setPingTimeout(10000);\n\n        return $io;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Overriding ModelUpdateVisitor (PHP)\nDESCRIPTION: This code overrides the default `ModelUpdateVisitor` to customize how data types are handled during model generation.  It modifies the `formatDatabaseType` method to specify `decimal` type and the `formatPropertyType` function to return a string for the decimal cast. This ensures that decimal fields are treated as strings with specific precision and that corresponding @property annotations accurately reflect this.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/gen.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n *\n * @link     https://www.hyperf.io\n * @document https://hyperf.wiki\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\nnamespace App\\Kernel\\Visitor;\n\nuse Hyperf\\Database\\Commands\\Ast\\ModelUpdateVisitor as Visitor;\nuse Hyperf\\Stringable\\Str;\n\nclass ModelUpdateVisitor extends Visitor\n{\n    /**\n     * Used by `casts` attribute.\n     */\n    protected function formatDatabaseType(string $type): ?string\n    {\n        switch ($type) {\n            case 'tinyint':\n            case 'smallint':\n            case 'mediumint':\n            case 'int':\n            case 'bigint':\n                return 'integer';\n            case 'decimal':\n                // 设置为 decimal，并设置对应精度\n                return 'decimal:2';\n            case 'float':\n            case 'double':\n            case 'real':\n                return 'float';\n            case 'bool':\n            case 'boolean':\n                return 'boolean';\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * Used by `@property` docs.\n     */\n    protected function formatPropertyType(string $type, ?string $cast): ?string\n    {\n        if (! isset($cast)) {\n            $cast = $this->formatDatabaseType($type) ?? 'string';\n        }\n\n        switch ($cast) {\n            case 'integer':\n                return 'int';\n            case 'date':\n            case 'datetime':\n                return '\\Carbon\\Carbon';\n            case 'json':\n                return 'array';\n        }\n\n        if (Str::startsWith($cast, 'decimal')) {\n            // 如果 cast 为 decimal，则 @property 改为 string\n            return 'string';\n        }\n\n        return $cast;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Gitlab Runner to Docker Group\nDESCRIPTION: Adds the `gitlab-runner` user to the `docker` group to allow it to execute Docker commands without `sudo`. This enables the runner to manage Docker containers as part of the CI/CD pipeline.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsudo usermod -aG docker gitlab-runner\n```\n\n----------------------------------------\n\nTITLE: DemoLogic Test with Mocked Dependency\nDESCRIPTION: Tests the DemoLogic class by creating a mock (test double) for the DemoApi dependency.  This allows isolation of the logic and avoids external dependencies during the test.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/testing.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace HyperfTest\\Cases;\n\nuse App\\Api\\DemoApi;\nuse App\\Logic\\DemoLogic;\nuse Hyperf\\Di\\Container;\nuse HyperfTest\\HttpTestCase;\nuse Mockery;\n\nclass DemoLogicTest extends HttpTestCase\n{\n    public function tearDown(): void\n    {\n        Mockery::close();\n    }\n\n    public function testIndex()\n    {\n        $res = $this->getContainer()->get(DemoLogic::class)->test();\n\n        $this->assertEquals(1, $res['status']);\n    }\n\n    /**\n     * @return Container\n     */\n    protected function getContainer()\n    {\n        $container = Mockery::mock(Container::class);\n\n        $apiStub = $this->createMock(DemoApi::class);\n\n        $apiStub->method('test')->willReturn([\n            'status' => 1,\n        ]);\n\n        $container->shouldReceive('get')->with(DemoLogic::class)->andReturn(new DemoLogic($apiStub));\n\n        return $container;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Docker Swarm Join Token (Worker)\nDESCRIPTION: This command displays the command to join the Docker Swarm as a worker node. The token and IP address are required to join the swarm.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_50\n\nLANGUAGE: shell\nCODE:\n```\n$ docker swarm join-token worker\n```\n\n----------------------------------------\n\nTITLE: Install Consul Adapter\nDESCRIPTION: This command installs the hyperf/service-governance-consul package, which allows Hyperf to use Consul as a service registry.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/service-register.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/service-governance-consul\n```\n\n----------------------------------------\n\nTITLE: Displaying Docker Swarm Join Token (Manager)\nDESCRIPTION: This command displays the command to join the Docker Swarm as a manager node. The token and IP address are required to join the swarm.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_49\n\nLANGUAGE: shell\nCODE:\n```\n$ docker swarm join-token manager\n```\n\n----------------------------------------\n\nTITLE: Mass Assignment with fill()\nDESCRIPTION: Shows how to use the fill method for assigning attributes to an existing model instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$user->fill(['name' => 'Hyperf']);\n\n```\n\n----------------------------------------\n\nTITLE: Counter Interface Definition\nDESCRIPTION: Defines the interface for a counter metric, which is used to track monotonically increasing values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\ninterface CounterInterface\n{\n    public function with(string ...$labelValues): self;\n\n    public function add(int $delta);\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf WebSocket Client via Composer\nDESCRIPTION: Installs the hyperf/websocket-client component using Composer, which provides WebSocket client functionality for Hyperf applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/websocket-client.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/websocket-client\n```\n\n----------------------------------------\n\nTITLE: Configure Async Queue Consumer Process\nDESCRIPTION: Adds the `ConsumerProcess` to the `processes.php` configuration file to enable asynchronous message consumption.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/async-queue.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    Hyperf\\AsyncQueue\\Process\\ConsumerProcess::class,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf View Component (Bash)\nDESCRIPTION: This command installs the hyperf/view component using Composer, which is required for using the view rendering functionality in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/view\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Etcd Config\nDESCRIPTION: This command installs the Hyperf component for integrating with Etcd, a distributed key-value store.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config-center.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-etcd\n```\n\n----------------------------------------\n\nTITLE: Lazy Service Injection\nDESCRIPTION: Lazy loads the service using constructor injection.  The actual service is only instantiated when accessed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Service\\LazyUserService;\n\nclass Foo{\n    public $service;\n    public function __construct(LazyUserService $service){\n        $this->service = $service;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Snowflake Component\nDESCRIPTION: This command installs the hyperf/snowflake component using Composer, adding the necessary files to your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/snowflake.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/snowflake\n```\n\n----------------------------------------\n\nTITLE: Publish Metric Configuration File\nDESCRIPTION: Publishes the default metric configuration file to `config/autoload/metric.php`. This allows you to customize the component's settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/metric\n```\n\n----------------------------------------\n\nTITLE: Enable Coroutine Tracking\nDESCRIPTION: Enables coroutine link tracking by adding the `Hyperf\\Tracer\\Aspect\\CoroutineAspect::class` to the `aspects.php` configuration file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tracer.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    Hyperf\\Tracer\\Aspect\\CoroutineAspect::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Install Nacos Adapter\nDESCRIPTION: This command installs the hyperf/service-governance-nacos package, enabling Hyperf to use Nacos as a service registry.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/service-register.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/service-governance-nacos\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Resource\nDESCRIPTION: Installs the `hyperf/resource` package using Composer. This package provides the base functionality for creating API resources.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/resource\n```\n\n----------------------------------------\n\nTITLE: Response Resource in Controller - Hyperf - PHP\nDESCRIPTION: Shows how to return a resource directly in a controller in Hyperf. The `toResponse()` method is used to get the response object and set header information, status codes, etc. It also illustrates returning a resource without calling toResponse().\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/resource.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\User as UserResource;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserResource(User::find(1)))->toResponse();\n    }\n\n    public function info()\n    {\n        return new UserResource(User::find(1));\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Smarty Template Engine\nDESCRIPTION: Installs the Smarty template engine using Composer. This allows using Smarty templates with the Hyperf view component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require smarty/smarty\n```\n\n----------------------------------------\n\nTITLE: UserService Implementation PHP\nDESCRIPTION: Defines a UserService class that implements the UserServiceInterface. This demonstrates abstract object injection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Service;\n\nclass UserService implements UserServiceInterface\n{\n    public function getInfoById(int $id)\n    {\n        // 我們假設存在一個 Info 實體\n        return (new Info())->fill($id);    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Default Network\nDESCRIPTION: This command creates a Docker overlay network for services. The `--driver overlay` specifies the overlay network driver, `--subnet` defines the IP address range, `--opt encrypted` enables network encryption, and `--attachable` allows services to attach to the network.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_48\n\nLANGUAGE: shell\nCODE:\n```\ndocker network create \\\n--driver overlay \\\n--subnet 10.0.0.1/8 \\\n--opt encrypted \\\n--attachable \\\ndefault-network\n```\n\n----------------------------------------\n\nTITLE: Install hyperf/guzzle via Composer\nDESCRIPTION: Installs the hyperf/guzzle component using Composer, which provides coroutine-based HTTP client functionality.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/guzzle.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/guzzle\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf AMQP Component\nDESCRIPTION: Installs the hyperf/amqp component using composer. This component facilitates the implementation of AMQP standards, primarily for RabbitMQ.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/amqp.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/amqp\n```\n\n----------------------------------------\n\nTITLE: Enable Foreign Key Constraints in Hyperf Schema\nDESCRIPTION: This code shows how to enable foreign key constraints within a migration file in a Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n// 開啓外鍵約束\nSchema::enableForeignKeyConstraints();\n```\n\n----------------------------------------\n\nTITLE: Generate gRPC Resource\nDESCRIPTION: Generates a gRPC resource class. The `--grpc` flag specifies that the resource should be created with gRPC support.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:resource User --grpc\n```\n\n----------------------------------------\n\nTITLE: Installing Docker with Shell Script\nDESCRIPTION: This snippet installs Docker using a shell script. It downloads and executes the Docker installation script.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -sSL https://get.docker.com/ | sh\n```\n\n----------------------------------------\n\nTITLE: Installing Docker\nDESCRIPTION: Installs Docker using the provided script. This is the initial step in setting up a Docker environment.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSL https://get.docker.com/ | sh\n```\n\n----------------------------------------\n\nTITLE: Installing Elasticsearch Package\nDESCRIPTION: This command installs the hyperf/elasticsearch package as a dependency using Composer. This package provides a factory for creating Elasticsearch client objects within the Hyperf framework.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/elasticsearch.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Installing Tencent Cloud COS Adapter (Flysystem v2.0)\nDESCRIPTION: Installs the Tencent Cloud COS adapter for Flysystem v2.0.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/filesystem.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-cos:^4.0\"\n```\n\n----------------------------------------\n\nTITLE: Creating Foreign Key Constraint with Cascade Delete\nDESCRIPTION: This snippet extends the previous example by adding an `onDelete('cascade')` clause, which specifies that when a user is deleted from the `users` table, all related posts in the `posts` table should also be deleted.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\n$table->foreign('user_id')\n      ->references('id')->on('users')\n      ->onDelete('cascade');\n```\n\n----------------------------------------\n\nTITLE: Configuring Span Tags\nDESCRIPTION: This configuration allows customizing the names of the Span tags that are automatically collected by Hyperf. It allows overriding the default tag names for HTTP client, Redis client and DB client calls.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tracer.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'tags' => [\n        // HTTP 客户端 (Guzzle)\n        'http_client' => [\n            'http.url' => 'http.url',\n            'http.method' => 'http.method',\n            'http.status_code' => 'http.status_code',\n        ],\n        // Redis 客户端\n        'redis' => [\n            'arguments' => 'arguments',\n            'result' => 'result',\n        ],\n        // 數據庫客户端 (hyperf/database)\n        'db' => [\n            'db.query' => 'db.query',\n            'db.statement' => 'db.statement',\n            'db.query_time' => 'db.query_time',\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Nacos SDK with Composer\nDESCRIPTION: This command installs the Hyperf Nacos SDK using Composer, a dependency manager for PHP. It adds the hyperf/nacos package to your project, allowing you to interact with a Nacos server for service discovery and configuration management.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/nacos/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/nacos\n```\n\n----------------------------------------\n\nTITLE: Configure HTTP Proxy with Nginx\nDESCRIPTION: This snippet configures Nginx as an HTTP reverse proxy for Hyperf applications. It defines an upstream block for load balancing across multiple Hyperf HTTP server instances and sets up a server block to listen for HTTP requests and forward them to the Hyperf backend. The configuration includes setting appropriate headers for forwarding client information and cookies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/nginx.md#_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\n# At least one Hyperf node is required, multiple configuration lines\nupstream hyperf {\n    # IP and port of Hyperf HTTP Server\n    server 127.0.0.1:9501;\n    server 127.0.0.1:9502;\n}\n\nserver {\n    # listening port\n    listen 80; \n    # Bound domain name, fill in your domain name\n    server_name proxy.hyperf.io;\n\n    location / {\n        # Forward the client's Host and IP information to the corresponding node\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        \n        # Forward cookies, set SameSite\n        proxy_cookie_path / \"/; secure; HttpOnly; SameSite=strict\";\n        \n        # Execute proxy access to real server\n        proxy_pass http://hyperf;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Fswatch on Ubuntu/Debian\nDESCRIPTION: This command installs the fswatch utility on Ubuntu or Debian-based systems using the apt-get package manager. Fswatch is a file system monitor that can be used as a driver for the Hyperf Watcher component for efficient file change detection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/watcher.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napt-get install fswatch\n```\n\n----------------------------------------\n\nTITLE: Run Static Analysis with Composer\nDESCRIPTION: This shell command triggers static analysis of the code. It is used to detect potential issues and ensure code quality, especially when upgrading between versions of the framework. This assumes that a static analysis tool has been configured within the composer configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/changelog/3.0.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer analysis\n```\n\n----------------------------------------\n\nTITLE: Cross Join Clause - PHP\nDESCRIPTION: Shows how to perform a cross join between two tables using the `crossJoin()` method. A cross join returns the Cartesian product of the rows from the joined tables.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('sizes')\n    ->crossJoin('colours')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Class Annotation Usage PHP\nDESCRIPTION: This code demonstrates how to use a class annotation in Hyperf. The `ClassAnnotation` annotation is applied to the `Foo` class.  The annotation is placed in a comment block directly above the class declaration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/annotation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n#[ClassAnnotation]\nclass Foo {}\n```\n\n----------------------------------------\n\nTITLE: Blade Layout Definition\nDESCRIPTION: This Blade template defines a basic HTML layout with sections for title, sidebar, and content. The `@yield` directive displays the content of a named section, while `@section` defines the content for that section. `@show` outputs the section immediately.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<!-- Stored in storage/view/layouts/app.blade.php -->\n\n<html>\n    <head>\n        <title>App Name-@yield('title')</title>\n    </head>\n    <body>\n        @section('sidebar')\n            This is the master sidebar.\n        @show\n\n        <div class=\"container\">\n            @yield('content')\n        </div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Resetting Migrations (bash)\nDESCRIPTION: This command reverts all migrations in the application, effectively returning the database to its initial state.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/migration.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate:reset\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Model Cache via Composer\nDESCRIPTION: Installs the hyperf/model-cache component using Composer, the dependency manager for PHP. This command adds the package to your project and downloads all required dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model-cache.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/model-cache\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Config\nDESCRIPTION: Installs the hyperf/config component using Composer. This component is essential for managing application configurations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config\n```\n\n----------------------------------------\n\nTITLE: Installing hyperf/elasticsearch package\nDESCRIPTION: This command installs the `hyperf/elasticsearch` package using Composer, which provides convenient Elasticsearch integration for Hyperf projects.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/elasticsearch.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Cache via Composer\nDESCRIPTION: This command installs the Hyperf Cache component using Composer, the dependency manager for PHP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/cache.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/cache\n```\n\n----------------------------------------\n\nTITLE: Not In Validation Rule Using Rule Class in Hyperf\nDESCRIPTION: This snippet demonstrates how to use the `Rule::notIn` method to construct a `not_in` validation rule in Hyperf. It allows for validating that a field's value is not within a specified array of disallowed values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($data, [\n    'toppings' => [\n        'required',\n        Rule::notIn(['sprinkles', 'cherries']),\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Custom Swagger UI HTML with CDN Replacement\nDESCRIPTION: This example shows a customized Swagger UI HTML, specifically demonstrating how to replace the CDN URL for Swagger UI resources. This allows users to switch to a different CDN provider (e.g., unpkg.com instead of unpkg.hyperf.wiki) if the default CDN is experiencing issues.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/swagger.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'enable' => true,\n    'port' => 9500,\n    'json_dir' => BASE_PATH . '/storage/swagger',\n    'html' => <<<'HTML'\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta\n      name=\"description\"\n      content=\"SwaggerUI\"\n    />\n    <title>SwaggerUI</title>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui.css\" />\n  </head>\n  <body>\n  <div id=\"swagger-ui\"></div>\n  <script src=\"https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui-bundle.js\" crossorigin></script>\n  <script src=\"https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui-standalone-preset.js\" crossorigin></script>\n  <script>\n    window.onload = () => {\n      window.ui = SwaggerUIBundle({\n        url: GetQueryString(\"search\"),\n        dom_id: '#swagger-ui',\n        presets: [\n          SwaggerUIBundle.presets.apis,\n          SwaggerUIStandalonePreset\n        ],\n        layout: \"StandaloneLayout\",\n      });\n    };\n    function GetQueryString(name) {\n      var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\", \"i\");\n      var r = window.location.search.substr(1).match(reg); //獲取url中\"?\"符後的字串並正則匹配\n      var context = \"\";\n      if (r != null)\n        context = decodeURIComponent(r[2]);\n      reg = null;\n      r = null;\n      return context == null || context == \"\" || context == \"undefined\" ? \"/http.json\" : context;\n    }\n  </script>\n  </body>\n</html>\nHTML,\n    'url' => '/swagger',\n    'auto_generate' => true,\n    'scan' => [\n        'paths' => null,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Querying Data using Static Method\nDESCRIPTION: Demonstrates how to query data using the static query method of the DB class. This provides a simpler way to execute SQL queries without explicitly retrieving a DB instance from the container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/db.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\DB\\DB;\n\n$res = DB::query('SELECT * FROM `user` WHERE gender = ?;', [1]);\n\n```\n\n----------------------------------------\n\nTITLE: Customize Crontab Strategy\nDESCRIPTION: This configuration shows how to change the default Crontab execution strategy by binding a different class to the `Hyperf\\Crontab\\Strategy\\StrategyInterface` interface in the `config/autoload/dependencies.php` file. This example uses `App\\Crontab\\Strategy\\FooStrategy`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/crontab.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    \\Hyperf\\Crontab\\Strategy\\StrategyInterface::class => \\App\\Crontab\\Strategy\\FooStrategy::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Using Custom Annotation PHP\nDESCRIPTION: This snippet demonstrates how to use a custom annotation, `Foo`, defined in the previous example. The annotation is applied to the `IndexController` class with specific values for the `bar` and `baz` parameters. This allows for custom logic to be triggered based on the annotation's presence and values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/annotation.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Annotation\\Foo;\n\n#[Foo(bar: [1, 2], baz: 3)]\nclass IndexController extends AbstractController\n{\n    // 利用註解數據\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Stacks, Services, and Containers\nDESCRIPTION: These commands list the Docker Stacks, services, and containers running in the Docker Swarm. Requires Docker Swarm.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_55\n\nLANGUAGE: shell\nCODE:\n```\ndocker stack ls\ndocker service ls\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf DI\nDESCRIPTION: Installs the hyperf/di component using composer, allowing its use in projects outside the hyperf-skeleton.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/di\n```\n\n----------------------------------------\n\nTITLE: Binding Interface to Factory PHP\nDESCRIPTION: Configures the dependency injection container to use the UserServiceFactory to create UserService instances.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    \\App\\Service\\UserServiceInterface::class => \\App\\Service\\UserServiceFactory::class\n];\n```\n\n----------------------------------------\n\nTITLE: Binding Interface to Class\nDESCRIPTION: Binds the UserServiceInterface to the UserService implementation in the dependencies.php configuration file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/di.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    \\App\\Service\\UserServiceInterface::class => \\App\\Service\\UserService::class\n];\n```\n\n----------------------------------------\n\nTITLE: Joining Docker Swarm\nDESCRIPTION: This command joins a node to a Docker Swarm cluster as either a manager or worker. Requires Docker Swarm.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_49\n\nLANGUAGE: shell\nCODE:\n```\ndocker swarm join --token xxxx <ip>:2377\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf JSON RPC Component\nDESCRIPTION: Installs the hyperf/json-rpc component using composer. This component handles the JSON RPC protocol.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/json-rpc.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/json-rpc\n```\n\n----------------------------------------\n\nTITLE: Starting Hyperf Server\nDESCRIPTION: This command starts the Hyperf server, which listens for HTTP and WebSocket connections. It displays information about the started workers and the listening addresses.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/websocket-server.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/hyperf.php start\n\n[INFO] Worker#0 started.\n[INFO] WebSocket Server listening at 0.0.0.0:9502\n[INFO] HTTP Server listening at 0.0.0.0:9501\n```\n\n----------------------------------------\n\nTITLE: Use Resource Collection (Repeated)\nDESCRIPTION: Reiterates returning a resource collection using the `collection` method in the controller. This method allows defining simple ad-hoc resource collections directly from the controller.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Resource\\User as UserResource;\nuse App\\Model\\User;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return UserResource::collection(User::all())->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install hyperf/json-rpc Component\nDESCRIPTION: Installs the hyperf/json-rpc component using Composer. This component handles JSON RPC protocol processing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/json-rpc.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/json-rpc\n```\n\n----------------------------------------\n\nTITLE: Configure IDE for Quick Open\nDESCRIPTION: Configures the IDE to use with the `gen` command for quick file opening.  This involves adding an `ide` configuration in the `config/autoload/devtool.php` file. The value should correspond to a supported IDE identifier.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/devtool.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    /**\n     * Supported IDEs: \"sublime\", \"textmate\", \"cursor\", \"emacs\", \"macvim\", \"phpstorm\", \"idea\",\n     *        \"vscode\", \"vscode-insiders\", \"vscode-remote\", \"vscode-insiders-remote\",\n     *        \"atom\", \"nova\", \"netbeans\", \"xdebug\"\n     */\n    'ide' => env('DEVTOOL_IDE', ''),\n    //...\n];\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Functions\nDESCRIPTION: This snippet shows how to use aggregate functions like `count()` to retrieve scalar values instead of model instances.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/model.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$count = User::query()->where('gender', 1)->count();\n\n```\n\n----------------------------------------\n\nTITLE: Optimizing Container Parameters using sysctls\nDESCRIPTION: This YAML snippet configures sysctls parameters for Docker containers. It optimizes network connection reuse and manages connection expiration for LVS forwarding.  Requires Docker 19.09.0 or higher.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nsysctls:\n  # 網路連線複用模式的選擇\n  - net.ipv4.vs.conn_reuse_mode=0\n  # 當LVS轉發資料包，發現目的RS無效（刪除）時，會丟棄該資料包，但不刪除相應連線。值為1時，則馬上釋放相應連線\n  - net.ipv4.vs.expire_nodest_conn=1\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Date Format in Hyperf Model\nDESCRIPTION: Sets the `$dateFormat` attribute in a Hyperf model to specify a custom date format. This format will be used when saving date attributes to the database and when serializing the model to an array or JSON.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/mutators.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * 這個屬性應該被轉化為原生類型.\n     *\n     * @var string\n     */\n    protected $dateFormat = 'U';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing a Hyperf Nano Command\nDESCRIPTION: Executes a command registered with the Hyperf Nano application via the command line interface. This example calls the 'echo' command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nano.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nphp index.php echo\n```\n\n----------------------------------------\n\nTITLE: Inserting Records - PHP\nDESCRIPTION: This snippet demonstrates how to insert a new record into the database using the `insert` method. It accepts an array of field names and values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Supervisor with Configuration File\nDESCRIPTION: This command starts the Supervisor daemon using the specified configuration file. The `-c` option specifies the path to the configuration file that Supervisor should use.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/supervisor.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupervisord -c /etc/supervisord.d/supervisord.conf\n```\n\n----------------------------------------\n\nTITLE: Install hyperf/translation Component via Composer\nDESCRIPTION: This command installs the hyperf/translation component using Composer, enabling internationalization features in your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/translation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/translation\n```\n\n----------------------------------------\n\nTITLE: Optional Constructor Injection PHP\nDESCRIPTION: Illustrates optional constructor injection by making the UserService dependency nullable. If UserService cannot be resolved, null is injected instead.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Service\\UserService;\n\nclass IndexController\n{\n    private ?UserService $userService;\n    \n    // 通過設置參數為 nullable，表明該參數為一個可選參數\n    public function __construct(?UserService $userService)\n    {\n        $this->userService = $userService;\n    }\n    \n    public function index()\n    {\n        $id = 1;\n        if ($this->userService instanceof UserService) {\n            // 僅值存在時 $userService 可用\n            return $this->userService->getInfoById($id);    \n        }\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exists Validation with Custom Connection in Hyperf\nDESCRIPTION: This snippet shows how to specify a custom database connection for the `exists` validation rule in Hyperf. This is useful when you need to validate against a table in a different database connection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'exists:connection.staff,email'\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Consul\nDESCRIPTION: Installs the hyperf/consul package using composer, which provides the coroutine client for interacting with the Consul API.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/consul.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/consul\n```\n\n----------------------------------------\n\nTITLE: Configuring Jaeger Tracer\nDESCRIPTION: This configuration defines the specific settings for the Jaeger tracer. It includes the application name, sampler type and parameters, and the reporting address for the Jaeger agent.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tracer.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Tracer\\Adapter\\JaegerTracerFactory;\nuse const Jaeger\\SAMPLER_TYPE_CONST;\n\nreturn [\n    // 選擇默認的 Tracer\n    'default' => env('TRACER_DRIVER', 'jaeger'),\n\n    // 這裏的代碼演示不對 enable 內的配置進行展開\n    'enable' => [],\n\n    'tracer' => [\n        // Jaeger 驅動配置\n        'jaeger' => [\n            'driver' => JaegerTracerFactory::class,\n            // 項目名稱\n            'name' => env('APP_NAME', 'skeleton'),\n            'options' => [\n                // 採樣器，默認為所有請求的都追蹤\n                'sampler' => [\n                    'type' => SAMPLER_TYPE_CONST,\n                    'param' => true,\n                ],\n                // 上報地址\n                'local_agent' => [\n                    'reporting_host' => env('JAEGER_REPORTING_HOST', 'localhost'),\n                    'reporting_port' => env('JAEGER_REPORTING_PORT', 5775),\n                ],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Checking for Value Existence in Hyperf Session\nDESCRIPTION: Checks if a value exists in the session using the `has` method. The `has` method takes a string representing the key and returns a boolean indicating whether the key exists and its value is not null.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/session.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nif ($this->session->has('foo')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Installing hyperf/rpc-client component\nDESCRIPTION: This command installs the hyperf/rpc-client component, which is required for creating a JSON RPC service consumer in Hyperf. This allows a service to consume functionalities exposed by other JSON RPC service providers.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/json-rpc.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/rpc-client\n```\n\n----------------------------------------\n\nTITLE: Registering a JSONRPC Protocol in Hyperf Jet\nDESCRIPTION: This code snippet demonstrates how to register a JSONRPC protocol using the `ProtocolManager` class. It configures the transporter, packer, data formatter, and path generator components for the protocol.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/jet.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Jet\\DataFormatter\\DataFormatter;\nuse Hyperf\\Jet\\Packer\\JsonEofPacker;\nuse Hyperf\\Jet\\PathGenerator\\PathGenerator;\nuse Hyperf\\Jet\\ProtocolManager;\nuse Hyperf\\Jet\\Transporter\\StreamSocketTransporter;\n\nProtocolManager::register($protocol = 'jsonrpc', [\n    ProtocolManager::TRANSPORTER => new StreamSocketTransporter(),\n    ProtocolManager::PACKER => new JsonEofPacker(),\n    ProtocolManager::PATH_GENERATOR => new PathGenerator(),\n    ProtocolManager::DATA_FORMATTER => new DataFormatter(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining a Layout (Blade)\nDESCRIPTION: This Blade template defines a master layout with sections for title, sidebar, and content. The @yield directive is used to inject content from child views, while @section defines a section that can be overridden or extended in child views.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<!-- Stored in storage/view/layouts/app.blade.php -->\n\n<html>\n    <head>\n        <title>App Name - @yield('title')</title>\n    </head>\n    <body>\n        @section('sidebar')\n            This is the master sidebar.\n        @show\n\n        <div class=\"container\">\n            @yield('content')\n        </div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Consul Client\nDESCRIPTION: Installs the hyperf/consul package using composer, which provides the coroutine client for interacting with Consul.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/consul.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/consul\n```\n\n----------------------------------------\n\nTITLE: Adding Consul ACL Token via Query\nDESCRIPTION: Shows how to include the Consul ACL token as a query parameter in the request. This is done by passing the 'token' key in the $options array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/consul.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$response = $kv->get($namespace, ['token' => 'your-token'])->json();\n```\n\n----------------------------------------\n\nTITLE: Switching Scan Handler PHP\nDESCRIPTION: Snippet for switching the ScanHandler within the ClassLoader.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nHyperf\\Di\\ClassLoader::init(handler: new Hyperf\\Di\\ScanHandler\\ProcScanHandler());\n```\n\n----------------------------------------\n\nTITLE: Publish Hyperf View Configuration\nDESCRIPTION: Publishes the default configuration file for the hyperf/view component to the config/autoload directory. This allows customization of the view rendering engine and settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/view\n```\n\n----------------------------------------\n\nTITLE: Filesystem Configuration Array\nDESCRIPTION: This configuration array shows the structure of the `config/autoload/file.php` file. It defines different storage drivers such as local, ftp, memory, s3, minio, oss, qiniu and cos with their corresponding configurations, including access keys, secrets, buckets, and endpoints.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/filesystem.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 選擇storage下對應驅動的鍵即可。\n    'default' => 'local',\n    'storage' => [\n        'local' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\LocalAdapterFactory::class,\n            'root' => __DIR__ . '/../../runtime',\n        ],\n        'ftp' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\FtpAdapterFactory::class,\n            'host' => 'ftp.example.com',\n            'username' => 'username',\n            'password' => 'password',\n\n            /* optional config settings */\n            'port' => 21,\n            'root' => '/path/to/root',\n            'passive' => true,\n            'ssl' => true,\n            'timeout' => 30,\n            'ignorePassiveAddress' => false,\n        ],\n        'memory' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\MemoryAdapterFactory::class,\n        ],\n        's3' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\S3AdapterFactory::class,\n            'credentials' => [\n                'key' => env('S3_KEY'),\n                'secret' => env('S3_SECRET'),\n            ],\n            'region' => env('S3_REGION'),\n            'version' => 'latest',\n            'bucket_endpoint' => false,\n            'use_path_style_endpoint' => false,\n            'endpoint' => env('S3_ENDPOINT'),\n            'bucket_name' => env('S3_BUCKET'),\n        ],\n        'minio' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\S3AdapterFactory::class,\n            'credentials' => [\n                'key' => env('S3_KEY'),\n                'secret' => env('S3_SECRET'),\n            ],\n            'region' => env('S3_REGION'),\n            'version' => 'latest',\n            'bucket_endpoint' => false,\n            'use_path_style_endpoint' => true,\n            'endpoint' => env('S3_ENDPOINT'),\n            'bucket_name' => env('S3_BUCKET'),\n        ],\n        'oss' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\AliyunOssAdapterFactory::class,\n            'accessId' => env('OSS_ACCESS_ID'),\n            'accessSecret' => env('OSS_ACCESS_SECRET'),\n            'bucket' => env('OSS_BUCKET'),\n            'endpoint' => env('OSS_ENDPOINT'),\n            // 'timeout'        => 3600,\n            // 'connectTimeout' => 10,\n            // 'isCName'        => false,\n            // 'token'          => '',\n        ],\n        'qiniu' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\QiniuAdapterFactory::class,\n            'accessKey' => env('QINIU_ACCESS_KEY'),\n            'secretKey' => env('QINIU_SECRET_KEY'),\n            'bucket' => env('QINIU_BUCKET'),\n            'domain' => env('QINIU_DOMAIN'),\n        ],\n        'cos' => [\n            'driver' => \\Hyperf\\Filesystem\\Adapter\\CosAdapterFactory::class,\n            'region' => env('COS_REGION'),\n            // overtrue/flysystem-cos ^2.0 配置如下\n            'credentials' => [\n                'appId' => env('COS_APPID'),\n                'secretId' => env('COS_SECRET_ID'),\n                'secretKey' => env('COS_SECRET_KEY'),\n            ],\n            // overtrue/flysystem-cos ^3.0 配置如下\n            'app_id' => env('COS_APPID'),\n            'secret_id' => env('COS_SECRET_ID'),\n            'secret_key' => env('COS_SECRET_KEY'),\n            // 可選，如果 bucket 為私有訪問請開啟此項\n            // 'signed_url' => false,\n            'bucket' => env('COS_BUCKET'),\n            'read_from_cdn' => false,\n            // 'timeout'         => 60,\n            // 'connect_timeout' => 60,\n            // 'cdn'             => '',\n            // 'scheme'          => 'https',\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Session Sid Provider Configuration\nDESCRIPTION: Configures the Socket.io server to use the SessionSidProvider, which uses the SessionID as the SocketID (`sid`). Requires `Hyperf\\SocketIOServer\\SidProvider\\SessionSidProvider`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/socketio-server.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\SocketIOServer\\SidProvider\\SidProviderInterface::class => \\Hyperf\\SocketIOServer\\SidProvider\\SessionSidProvider::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Rule Listener - PHP\nDESCRIPTION: This code snippet registers a custom validation rule named 'foo' using a listener for the `ValidatorFactoryResolved` event. The 'foo' rule checks if the value is equal to 'foo'. It also defines a custom replacer for the ':foo' placeholder in error messages.  This relies on Hyperf's event system and validation components.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_49\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Listener;\n\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Validation\\Contract\\ValidatorFactoryInterface;\nuse Hyperf\\Validation\\Event\\ValidatorFactoryResolved;\nuse Hyperf\\Validation\\Validator;\n\n#[Listener]\nclass ValidatorFactoryResolvedListener implements ListenerInterface\n{\n\n    public function listen(): array\n    {\n        return [\n            ValidatorFactoryResolved::class,\n        ];\n    }\n\n    public function process(object $event): void\n    {\n        /**  @var ValidatorFactoryInterface $validatorFactory */\n        $validatorFactory = $event->validatorFactory;\n        // 註冊了 foo 驗證器\n        $validatorFactory->extend('foo', function (string $attribute, mixed $value, array $parameters, Validator $validator): bool {\n            return $value == 'foo';\n        });\n        // 當建立一個自定義驗證規則時，你可能有時候需要為錯誤資訊定義自定義佔位符這裡擴充套件了 :foo 佔位符\n        $validatorFactory->replacer('foo', function (string $message, string $attribute, string $rule, array $parameters): array|string {\n            return str_replace(':foo', $attribute, $message);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Hyperf Component Versions - JSON\nDESCRIPTION: Modifies the `composer.json` file to update the Hyperf component versions to `2.1.*`. This ensures that the project uses the latest features and bug fixes of the 2.1 release series. Requires updating the 'require' and 'require-dev' sections of the composer.json file with the correct versions.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.1.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require\": {\n        \"php\": \">=7.3\",\n        \"ext-json\": \"*\",\n        \"ext-openssl\": \"*\",\n        \"ext-pdo\": \"*\",\n        \"ext-pdo_mysql\": \"*\",\n        \"ext-redis\": \"*\",\n        \"ext-swoole\": \">=4.5\",\n        \"hyperf/async-queue\": \"2.1.*\",\n        \"hyperf/cache\": \"2.1.*\",\n        \"hyperf/command\": \"2.1.*\",\n        \"hyperf/config\": \"2.1.*\",\n        \"hyperf/constants\": \"2.1.*\",\n        \"hyperf/contract\": \"2.1.*\",\n        \"hyperf/database\": \"2.1.*\",\n        \"hyperf/db-connection\": \"2.1.*\",\n        \"hyperf/di\": \"2.1.*\",\n        \"hyperf/dispatcher\": \"2.1.*\",\n        \"hyperf/event\": \"2.1.*\",\n        \"hyperf/exception-handler\": \"2.1.*\",\n        \"hyperf/framework\": \"2.1.*\",\n        \"hyperf/guzzle\": \"2.1.*\",\n        \"hyperf/http-server\": \"2.1.*\",\n        \"hyperf/logger\": \"2.1.*\",\n        \"hyperf/model-cache\": \"2.1.*\",\n        \"hyperf/pool\": \"2.1.*\",\n        \"hyperf/process\": \"2.1.*\",\n        \"hyperf/redis\": \"2.1.*\",\n        \"hyperf/server\": \"2.1.*\",\n        \"hyperf/utils\": \"2.1.*\"\n    },\n    \"require-dev\": {\n        \"friendsofphp/php-cs-fixer\": \"^2.14\",\n        \"hyperf/devtool\": \"2.1.*\",\n        \"hyperf/testing\": \"2.1.*\",\n        \"mockery/mockery\": \"^1.0\",\n        \"phpstan/phpstan\": \"^0.12.18\",\n        \"swoole/ide-helper\": \"dev-master\",\n        \"symfony/var-dumper\": \"^5.1\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image\nDESCRIPTION: This command builds and pushes a Docker image to the Aliyun image registry. Requires Docker.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_52\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . -t registry.cn-shanghai.aliyuncs.com/your_namespace/your_project:latest\ndocker push registry.cn-shanghai.aliyuncs.com/your_namespace/your_project:latest\n```\n\n----------------------------------------\n\nTITLE: Check If On First Page\nDESCRIPTION: This snippet shows how to check if the paginator is currently on the first page using the `onFirstPage()` method. It returns a boolean value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/paginator.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$onFirstPage = $paginator->onFirstPage();\n```\n\n----------------------------------------\n\nTITLE: Delete Record (PHP)\nDESCRIPTION: Deletes a model instance and automatically removes it from the search index. The Searchable trait ensures that deletions are synchronized. This approach is compatible with soft-deleted models.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$order = App\\Order::find(1);\n\n$order->delete();\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Validation\nDESCRIPTION: Installs the hyperf/validation component using composer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/validation\n```\n\n----------------------------------------\n\nTITLE: Using Attribute Casting - Hyperf - PHP\nDESCRIPTION: This code snippet demonstrates how to access an attribute that has been defined for type casting. The `is_admin` property will return a boolean value regardless of how it's stored in the database, thanks to the `$casts` property defined on the model. Requires an existing `User` model instance fetched from the database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/mutators.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$user = App\\User::find(1);\n\nif ($user->is_admin) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Linux Crontab Script for Docker Command\nDESCRIPTION: This bash script is designed to be used with Linux Crontab to execute a command inside a Docker container. It pulls the latest image, runs the container with the .env file mounted, and executes the specified command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_31\n\nLANGUAGE: Bash\nCODE:\n```\n#!/usr/bin/env bash\nbasepath=$(cd `dirname $0`; pwd)\ndocker pull registry-vpc.cn-shanghai.aliyuncs.com/namespace/project:latest\ndocker run --rm -i -v $basepath/.env:/opt/www/.env \\\n--entrypoint php registry-vpc.cn-shanghai.aliyuncs.com/namespace/project:latest \\\n/opt/www/bin/hyperf.php your_command\n```\n\n----------------------------------------\n\nTITLE: Adding a /metrics Route to Worker (PHP)\nDESCRIPTION: Demonstrates how to add a `/metrics` route to a Worker process to expose Prometheus metrics. It retrieves the `CollectorRegistry` from the container, renders the metrics in the Prometheus text format, and returns them as the response. Requires `Hyperf\\HttpServer\\Router\\Router`, `Hyperf\\Context\\ApplicationContext`, and `Prometheus` dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\HttpServer\\Router\\Router;\n\nRouter::get('/metrics', function(){\n    $registry = Hyperf\\Context\\ApplicationContext::getContainer()->get(Prometheus\\CollectorRegistry::class);\n    $renderer = new Prometheus\\RenderTextFormat();\n    return $renderer->render($registry->getMetricFamilySamples());\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Supervisor with Configuration File\nDESCRIPTION: This command starts the Supervisor daemon using the specified configuration file. The `-c` option tells supervisord to use `/etc/supervisord.d/supervisord.conf` as its configuration file. It is essential to have a properly configured file for Supervisor to manage processes correctly.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/supervisor.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupervisord -c /etc/supervisord.d/supervisord.conf\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Translation Package using Composer\nDESCRIPTION: This command installs the `hyperf/translation` package using Composer. This package is needed to enable internationalization support for the `hyperf/constants` component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/constants.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/translation\n```\n\n----------------------------------------\n\nTITLE: Use Variables in RPN Calculation in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to use variables in an RPN calculation.  Variables are represented by `[index]` in the expression string. An array containing the variable values must be passed as the second argument to the `calculate()` method. In this example, '[0]' is replaced by 5 and '[1]' is replaced by 10, resulting in an output of '7'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/rpn.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->calculate('[0] 1 2 + 4 * + [1] -', [5, 10]); // '7'\n```\n\n----------------------------------------\n\nTITLE: Add Validation Middleware\nDESCRIPTION: Registers the ValidationMiddleware as a global middleware in the config/autoload/middlewares.php file for the 'http' server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // 下面的 http 字符串對應 config/autoload/server.php 內每個 server 的 name 屬性對應的值，意味着對應的中間件配置僅應用在該 Server 中\n    'http' => [\n        // 數組內配置您的全局中間件，順序根據該數組的順序\n        \\Hyperf\\Validation\\Middleware\\ValidationMiddleware::class\n        // 這裏隱藏了其它中間件\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Return Resource Collection\nDESCRIPTION: Demonstrates how to return a resource collection from a controller action. It uses the `collection` method of the resource class to create a resource collection and calls the `toResponse` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Resource\\User as UserResource;\nuse App\\Model\\User;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return UserResource::collection(User::all())->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listening for MetricFactoryReady Event\nDESCRIPTION: This PHP code snippet demonstrates how to listen for the `MetricFactoryReady` event to access the `MetricFactoryInterface` outside of the request lifecycle. This allows you to create metrics for long-running processes, such as queue length monitoring.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Metric\\Event\\MetricFactoryReady;\nuse Psr\\Container\\ContainerInterface;\nuse Redis;\n\nclass OnMetricFactoryReady implements ListenerInterface\n{\n    protected ContainerInterface $container;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n    }\n\n    public function listen(): array\n    {\n        return [\n            MetricFactoryReady::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        $redis = $this->container->get(Redis::class);\n        $gauge = $event\n                    ->factory\n                    ->makeGauge('queue_length', ['driver'])\n                    ->with('redis');\n        while (true) {\n            $length = $redis->llen('queue');\n            $gauge->set($length);\n            sleep(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stdout Logger Factory\nDESCRIPTION: This code creates a factory to customize the stdout logger and redirect the standard output to the Monolog system. This demonstrates dependency injection by binding the StdoutLoggerInterface to the custom factory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/logger.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App;\n\nuse Psr\\Container\\ContainerInterface;\n\nclass StdoutLoggerFactory\n{\n    public function __invoke(ContainerInterface $container)\n    {\n        return Log::get('sys');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calling the Controller via cURL\nDESCRIPTION: This bash command demonstrates how to call the defined controller via cURL. It sends a GET request to the specified URL with a 'target' parameter set to 'Hyperf'. The expected output is 'Hello Hyperf.'\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/controller.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl 'http://127.0.0.1:9501/?target=Hyperf'\nHello Hyperf.\n```\n\n----------------------------------------\n\nTITLE: Calling RPC Method with Custom Client in Hyperf Jet\nDESCRIPTION: Instantiates the custom client class and calls a remote method. This approach leverages the defined client class to interact with the RPC service.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/jet.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// Call the remote method `add` with arguments `1` and `2`.\n// The $result is the result of the remote method.\n$client = new CalculatorService();\n$result = $client->add(1, 2);\n```\n\n----------------------------------------\n\nTITLE: Installing Supervisor on CentOS\nDESCRIPTION: These commands install the Extra Packages for Enterprise Linux (EPEL) repository and then install Supervisor using yum package manager.  The EPEL repository provides additional packages that are not available in the default CentOS repositories. It assumes a CentOS system.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/supervisor.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 安装 epel 源，如果此前安装过，此步骤跳过\nyum install -y epel-release\nyum install -y supervisor\n```\n\n----------------------------------------\n\nTITLE: Hyperf Nano Command Line Example\nDESCRIPTION: Demonstrates how to add a custom command-line command to a Hyperf Nano application. The command logs a message using the StdoutLoggerInterface.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nano.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addCommand('echo', function(){\n    $this->get(StdoutLoggerInterface::class)->info('A new command called echo!');\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Command Component (Bash)\nDESCRIPTION: Installs the hyperf/command component using composer, which provides the command-line interface for Hyperf applications. This allows the use of custom console commands.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/command\n```\n\n----------------------------------------\n\nTITLE: Configure Symfony Serializer in Hyperf\nDESCRIPTION: This code snippet shows how to configure the Symfony Serializer in Hyperf to replace the default normalizer. It registers `SerializerFactory` to inject Symfony's Serializer for handling object normalization.  It needs dependencies on `symfony/serializer`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.1.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Utils\\Serializer\\SerializerFactory;\nuse Hyperf\\Utils\\Serializer\\Serializer;\n\nreturn [\n    Hyperf\\Contract\\NormalizerInterface::class => new SerializerFactory(Serializer::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Publishing Hyperf View Engine Configuration\nDESCRIPTION: This command publishes the configuration file for the hyperf/view-engine package to your project's config directory, allowing you to customize the engine's behavior.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/view-engine\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Services\nDESCRIPTION: Lists the running Docker services.  This provides information about the individual services within the stack.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_57\n\nLANGUAGE: shell\nCODE:\n```\ndocker service ls\n```\n\n----------------------------------------\n\nTITLE: Convert Doctrine Annotations to PHP8 Attributes (Shell)\nDESCRIPTION: This shell script uses the Hyperf code generator to convert all Doctrine Annotations in the application to PHP8 Attributes. This step should be performed in a Hyperf 2.2 environment.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/3.0.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp bin/hyperf.php code:generate -D app\n```\n\n----------------------------------------\n\nTITLE: Gauge Interface Definition\nDESCRIPTION: This PHP interface defines the methods for a gauge metric, including `with` for setting label values, `set` for setting the gauge value, and `add` for adjusting the gauge value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\ninterface GaugeInterface\n{\n    public function with(string ...$labelValues): self;\n\n    public function set(float $value);\n\n    public function add(float $delta);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Git version\nDESCRIPTION: This set of commands updates the git version to resolve `fatal: git fetch-pack: expected shallow list` error with `gitlab-runner`. It involves adding the IUS repository, removing the existing git, installing git2u, and reinstalling `gitlab-runner`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\n$ curl https://setup.ius.io | sh\n$ yum remove -y git\n$ yum -y install git2u\n$ git version\n\n# 重新安裝 gitlab-runner 並重新註冊 gitlab-runner\n$ yum install gitlab-runner\n```\n\n----------------------------------------\n\nTITLE: Enable Tracing for Guzzle, Redis, and DB in Hyperf\nDESCRIPTION: This PHP code snippet shows how to enable or disable tracing for Guzzle HTTP calls, Redis calls, and DB calls within the Hyperf framework by modifying the 'enable' array in the opentracing.php configuration file. These settings control whether the tracer actively monitors and records these types of remote calls.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tracer.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'enable' => [\n        // 開啟或關閉對 Guzzle HTTP 呼叫的追蹤\n        'guzzle' => false,\n        // 開啟或關閉對 Redis 呼叫的追蹤\n        'redis' => false,\n        // 開啟或關閉對 DB  呼叫的追蹤\n        'db' => false,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Install RPN package\nDESCRIPTION: This command installs the hyperf/rpn package using composer, making it available for use in a Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/rpn/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/rpn\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Signal Component\nDESCRIPTION: This command installs the hyperf/signal component using Composer, allowing your application to handle system signals.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/signal.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/signal\n```\n\n----------------------------------------\n\nTITLE: Forcing Migrations (Bash)\nDESCRIPTION: This command forces the execution of migrations, bypassing any confirmation prompts. This is useful for running potentially destructive migrations in production environments, but should be used with caution.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/migration.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php migrate --force\n```\n\n----------------------------------------\n\nTITLE: Conditional Pivot Table with Custom Accessor (PHP)\nDESCRIPTION: This PHP snippet demonstrates the usage of `whenPivotLoadedAs` when the pivot table uses a custom accessor (other than 'pivot').  It specifies 'subscription' as the accessor for the 'role_user' pivot table.  The 'expires_at' key comes from the subscription object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'expires_at' => $this->whenPivotLoadedAs('subscription', 'role_user', function () {\n                return $this->subscription->expires_at;\n            }),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Consumer Configuration with PHP Loop - Hyperf\nDESCRIPTION: This snippet demonstrates how to generate service consumer configurations dynamically using a PHP loop in a Hyperf application. It iterates through an array of services and creates configurations for each.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/json-rpc.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    // 此处省略了其它同层级的配置\n    'consumers' => value(function () {\n        $consumers = [];\n        // 这里示例自动创建代理消费者类的配置形式，顾存在 name 和 service 两个配置项，这里的做法不是唯一的，仅说明可以通过 PHP 代码来生成配置\n        // 下面的 FooServiceInterface 和 BarServiceInterface 仅示例多服务，并不是在文档示例中真实存在的\n        $services = [\n            'FooService' => App\\JsonRpc\\FooServiceInterface::class,\n            'BarService' => App\\JsonRpc\\BarServiceInterface::class,\n        ];\n        foreach ($services as $name => $interface) {\n            $consumers[] = [\n                'name' => $name,\n                'service' => $interface,\n                'registry' => [\n                   'protocol' => 'consul',\n                   'address' => 'http://127.0.0.1:8500',\n                ]\n            ];\n        }\n        return $consumers;\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Paginating Search Results\nDESCRIPTION: Paginates the search results using the `paginate` method. This returns a `Paginator` instance that can be used to display results in pages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/scout.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->paginate();\n```\n\n----------------------------------------\n\nTITLE: Install Aliyun OSS Flysystem Adapter - Shell\nDESCRIPTION: Installs the `hyperf/flysystem-oss` component via Composer. It's required when using Aliyun OSS as the filesystem.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.2.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/flysystem-oss\n```\n\n----------------------------------------\n\nTITLE: Publishing Metric Configuration\nDESCRIPTION: This command publishes the default `metric.php` configuration file to the `config/autoload/` directory. This allows you to customize the component's behavior.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/metric\n```\n\n----------------------------------------\n\nTITLE: Publishing Hyperf View Configuration\nDESCRIPTION: Publishes the default configuration file for the `hyperf/view` component. This command generates the `config/autoload/view.php` file if it doesn't exist, allowing for customization of view engine settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/view\n```\n\n----------------------------------------\n\nTITLE: Coroutine Server Listener Configuration Example\nDESCRIPTION: This code snippet demonstrates how to configure a signal handler for a coroutine-style server. It defines a `CoroutineServerStopHandler` class that listens for `SIGTERM` and `SIGINT` signals on the Worker process. When a signal is received, it shuts down all active servers and sets the process to not running.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/signal.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Kernel\\Signal;\n\nuse Hyperf\\Contract\\ConfigInterface;\nuse Hyperf\\Process\\ProcessManager;\nuse Hyperf\\Server\\ServerManager;\nuse Hyperf\\Signal\\SignalHandlerInterface;\nuse Psr\\Container\\ContainerInterface;\n\nclass CoroutineServerStopHandler implements SignalHandlerInterface\n{\n\n    protected ContainerInterface $container;\n\n    protected ConfigInterface $config;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n        $this->config = $container->get(ConfigInterface::class);\n    }\n\n    public function listen(): array\n    {\n        // 协程风格只会存在一个 Worker 进程，故这里只需要监听 WORKER 即可 \n        return [\n            [self::WORKER, SIGTERM],\n            [self::WORKER, SIGINT],\n        ];\n    }\n\n    public function handle(int $signal): void\n    {\n        ProcessManager::setRunning(false);\n\n        foreach (ServerManager::list() as [$type, $server]) {\n            // 循环关闭开启的服务\n            $server->shutdown();\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install Tencent COS Adapter (Flysystem v1.0)\nDESCRIPTION: This command installs the Tencent COS adapter for Flysystem, specifically version 3.0, for interaction with Tencent Cloud Object Storage.  Note that flysystem-cos v2.0 is not recommended.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/filesystem.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-cos:^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Regenerate Model Classes\nDESCRIPTION: This code snippet shows how to regenerate model classes due to changes in the model base class in Hyperf. It requires the hyperf/code-generator package. This script is necessary to update the models to the new syntax with added type constraints.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog/changelog-v3.0.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp vendor/bin/regenerate-models.php $PWD/app/Model\n```\n\n----------------------------------------\n\nTITLE: Setting Help Message (PHP)\nDESCRIPTION: Sets the help message for a command using the `setHelp()` method. This message is displayed when the `--help` option is used with the command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->setHelp('Hyperf 自定義命令演示');\n}\n\n```\n\n----------------------------------------\n\nTITLE: Preserve Collection Keys\nDESCRIPTION: Defines the `$preserveKeys` property on a resource class. When set to `true`, it indicates that the keys of the resource collection should be preserved in the response.  Default is `false` so keys will be re-indexed as simple numeric values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\JsonResource;\n\nclass User extends JsonResource\n{\n    /**\n     * 指示是否应保留资源的集合键。\n     * @var bool\n     */\n    public $preserveKeys = true;\n\n    /**\n     * Transform the resource into an array.\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Response Example\nDESCRIPTION: This is the expected JSON response from the GraphQL endpoint when executing the example query. It contains a 'data' field with the result of the 'hello' query.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/graphql.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"hello\": \"graphql\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Container Instance PHP\nDESCRIPTION: Get the container instance.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/di.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$container = \\Hyperf\\Context\\ApplicationContext::getContainer();\n```\n\n----------------------------------------\n\nTITLE: Adding New Network to Docker Service\nDESCRIPTION: This command adds the newly created network to a specified Docker service. The `--network-add` option specifies the network to add. The `service_name` should be replaced with the actual name of the Docker service.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\ndocker service update --network-add default-network service_name\n```\n\n----------------------------------------\n\nTITLE: Using whereRaw and orWhereRaw methods in Hyperf\nDESCRIPTION: This snippet showcases the usage of `whereRaw` to inject raw `where` clauses into the query.  It filters orders based on a condition involving 'price' and 'state', using a bound parameter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('order')\n    ->whereRaw('price > IF(state = \"TX\", ?, 100)', [200])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Route Parameters via Method Parameters - PHP\nDESCRIPTION: This code shows how to retrieve route parameters by declaring them as method parameters after the RequestInterface dependency. Hyperf automatically injects the corresponding parameter values into the method parameters based on the route definition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\RequestInterface;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\n\n#[AutoController]\nclass IndexController\n{\n    public function info(RequestInterface $request, int $id)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Fswatch from Source\nDESCRIPTION: These commands download, extract, configure, compile, and install fswatch from source. This is a fallback installation method when package managers are unavailable or a specific version is required.  It depends on standard build tools like `wget`, `tar`, `gcc`, `make`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/watcher.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/emcrisostomo/fswatch/releases/download/1.14.0/fswatch-1.14.0.tar.gz \\\n&& tar -xf fswatch-1.14.0.tar.gz \\\n&& cd fswatch-1.14.0/ \\\n&& ./configure \\\n&& make \\\n&& make install\n```\n\n----------------------------------------\n\nTITLE: Blade @sectionMissing Directive\nDESCRIPTION: This Blade template demonstrates how to use the `@sectionMissing` directive to check if a section is missing content.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_16\n\nLANGUAGE: blade\nCODE:\n```\n@sectionMissing('navigation')\n    <div class=\"pull-right\">\n        @include('default-navigation')\n    </div>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Create Docker Overlay Network - Shell\nDESCRIPTION: This command creates a custom overlay network for Docker Swarm. It specifies the driver, subnet, encryption option, and attachment option.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/docker-swarm.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ndocker network create \\\n--driver overlay \\\n--subnet 12.0.0.0/8 \\\n--opt encrypted \\\n--attachable \\\ndefault-network\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Functions (Hyperf)\nDESCRIPTION: Demonstrates the use of aggregate functions like `count` to retrieve scalar values from the database in Hyperf. These methods return the result of the aggregation rather than model instances.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$count = User::query()->where('gender', 1)->count();\n```\n\n----------------------------------------\n\nTITLE: Publishing Multiple Messages to NSQ\nDESCRIPTION: This code demonstrates how to publish multiple messages to an NSQ topic in a single call using the `Hyperf\\Nsq\\Nsq::publish()` method with an array of messages.  It retrieves the Nsq instance from the container, defines the topic and an array of messages, and then publishes the messages.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nsq.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Command;\n\nuse Hyperf\\Command\\Command as HyperfCommand;\nuse Hyperf\\Command\\Annotation\\Command;\nuse Hyperf\\Nsq\\Nsq;\n\n#[Command]\nclass NsqCommand extends HyperfCommand\n{\n    protected $name = 'nsq:pub';\n\n    public function handle()\n    {\n        /** @var Nsq $nsq */\n        $nsq = make(Nsq::class);\n        $topic = 'hyperf';\n        $messages = [\n            'This is message 1 at ' . time(),\n            'This is message 2 at ' . time(),\n            'This is message 3 at ' . time(),\n        ];\n        $nsq->publish($topic, $messages);\n\n        $this->line('success', 'info');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Pagination URLs\nDESCRIPTION: This code snippet demonstrates how to generate URLs for different pages in the pagination. It uses `nextPageUrl()` to get the URL for the next page, `previousPageUrl()` for the previous page, and `url($page)` for a specific page number.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/paginator.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// 下一页的 URL\n$nextPageUrl = $paginator->nextPageUrl();\n// 上一页的 URL\n$previousPageUrl = $paginator->previousPageUrl();\n// 获取指定 $page 页数的 URL\n$url = $paginator->url($page);\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint with Swagger Annotations\nDESCRIPTION: This code snippet demonstrates how to define a GET endpoint and its query parameters using Swagger annotations. It includes annotations for the path, summary, tags, query parameters, and response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/swagger.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n#[SA\\Get(path: '/test', summary: 'GET 示例', tags: ['Api/Test'])]\n#[SA\\QueryParameter(name: 'username', description: '用户名字段描述', required: true, schema: new SA\\Schema(type: 'string'))]\n#[SA\\QueryParameter(name: 'age', description: '年齡字段描述', required: true, schema: new SA\\Schema(type: 'string'))]\n#[SA\\QueryParameter(name: 'city', description: '城市字段描述', required: false, schema: new SA\\Schema(type: 'string'))]\n#[SA\\Response(\n    response: 200,\n    description: '返回值的描述',\n    content: new SA\\JsonContent(\n        example: '{\"code\":200,\"data\":[]}'\n    ),\n)]\npublic function list(ConversationRequest $request): array\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gitlab Runner\nDESCRIPTION: Installs Gitlab Runner on a CentOS system using the official Gitlab package repository. This script adds the Gitlab repository and installs the `gitlab-runner` package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash\nyum install gitlab-runner\n```\n\n----------------------------------------\n\nTITLE: Installing fswatch on Linux\nDESCRIPTION: This set of commands downloads, extracts, configures, compiles, and installs `fswatch` from source. It provides a method to install `fswatch` when a package manager isn't available.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/watcher.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/emcrisostomo/fswatch/releases/download/1.14.0/fswatch-1.14.0.tar.gz \\\n&& tar -xf fswatch-1.14.0.tar.gz \\\n&& cd fswatch-1.14.0/ \\\n&& ./configure \\\n&& make \\\n&& make install\n```\n\n----------------------------------------\n\nTITLE: Installing Nacos Client - Shell\nDESCRIPTION: This command installs the hyperf/nacos package using composer, which provides the Nacos client functionality for Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nacos.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/nacos\n```\n\n----------------------------------------\n\nTITLE: JSON Where Statement - Hyperf PHP\nDESCRIPTION: Illustrates querying `JSON` fields using the `where` method in Hyperf.  This is only applicable on databases supporting `JSON` types. It provides examples for querying nested values within the `JSON` object.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->where('options->language', 'en')\n    ->get();\n\n$users = Db::table('users')\n    ->where('preferences->dining->meal', 'salad')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Autoload Configuration Example\nDESCRIPTION: This example shows how to configure a value in the `config/autoload/client.php` file. The file name is used as the first level key when accessing the configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/config.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'request' => [\n        'timeout' => 10,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Publishing Configuration\nDESCRIPTION: This command publishes the default configuration file for the Hyperf View Engine to the application's config directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/view-engine\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster with Name (redis.php)\nDESCRIPTION: Configures Redis cluster using a name in the redis.php file. It enables the cluster mode and sets the cluster name, allowing the application to connect to a named Redis cluster.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/redis.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// 省略其他配置\nreturn [\n    'default' => [\n        'cluster' => [\n            'enable' => true,\n            'name' => 'mycluster',\n            'seeds' => [],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Counter Interface Definition\nDESCRIPTION: This PHP interface defines the methods for a counter metric, including `with` for setting label values and `add` for incrementing the counter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\ninterface CounterInterface\n{\n    public function with(string ...$labelValues): self;\n\n    public function add(int $delta);\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating an RPC Call in Hyperf\nDESCRIPTION: This code demonstrates how to initiate an RPC call using Hyperf's AMQP component. It retrieves the `Hyperf\\Amqp\\RpcClient` from the container and calls the `call` method with a `DynamicRpcMessage` to send the message to the consumer. It uses `Hyperf\\Context\\ApplicationContext` to retrieve the RpcClient.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/amqp.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Amqp\\Message\\DynamicRpcMessage;\nuse Hyperf\\Amqp\\RpcClient;\nuse Hyperf\\Context\\ApplicationContext;\n\n$rpcClient = ApplicationContext::getContainer()->get(RpcClient::class);\n// 在 DynamicRpcMessage 上設置與 Consumer 一致的 Exchange 和 RoutingKey\n$result = $rpcClient->call(new DynamicRpcMessage('hyperf', 'hyperf', ['message' => 'Hello Hyperf'])); \n\n// $result:\n// array(1) {\n//     [\"message\"]=>\n//     string(18) \"Reply:Hello Hyperf\"\n// }\n\n```\n\n----------------------------------------\n\nTITLE: Daily Log Rotation Configuration\nDESCRIPTION: This configuration enables daily log rotation using Monolog's RotatingFileHandler. This handler automatically creates new log files based on the current date, preventing large log files.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/logger.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'handler' => [\n            'class' => Monolog\\Handler\\RotatingFileHandler::class,\n            'constructor' => [\n                'filename' => BASE_PATH . '/runtime/logs/hyperf.log',\n                'level' => Monolog\\Level::Debug,\n            ],\n        ],\n        'formatter' => [\n            'class' => Monolog\\Formatter\\LineFormatter::class,\n            'constructor' => [\n                'format' => null,\n                'dateFormat' => null,\n                'allowInlineLineBreaks' => true,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Alpine gnu-libiconv Installation\nDESCRIPTION: These snippets demonstrate how to install `gnu-libiconv` when using the `aliyuncs/oss-sdk-php` component with Hyperf on Alpine Linux Docker images to avoid iconv errors.  Different versions of Alpine require different package names.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/questions.md#_snippet_7\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN apk --no-cache --allow-untrusted --repository http://dl-cdn.alpinelinux.org/alpine/edge/community/ add gnu-libiconv=1.15-r2\nENV LD_PRELOAD /usr/lib/preloadable_libiconv.so\n```\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN apk add --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/v3.13/community/ gnu-libiconv=1.15-r3\nENV LD_PRELOAD /usr/lib/preloadable_libiconv.so php\n```\n\n----------------------------------------\n\nTITLE: Run Hyperf in Docker\nDESCRIPTION: This command starts a Docker container pre-configured for Hyperf development. It maps a local directory to the container, exposes port 9501, and provides a shell for running commands.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/install.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run --name hyperf \\\n-v /workspace/skeleton:/data/project \\\n-w /data/project \\\n-p 9501:9501 -it \\\n--privileged -u root \\\n--entrypoint /bin/sh \\\nhyperf/hyperf:8.1-alpine-v3.18-swoole\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Jet via Composer\nDESCRIPTION: This command installs the Hyperf Jet component using Composer, the PHP dependency manager. It adds the `hyperf/jet` package to the project's dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/jet.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/jet\n```\n\n----------------------------------------\n\nTITLE: Registering Gitlab Runner\nDESCRIPTION: This snippet registers a gitlab-runner with a Gitlab instance, providing the coordinator URL, token, description, tags, and executor.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ sudo gitlab-runner register --clone-url http://your-ip/\n\nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):\nhttp://gitlab.xxx.cc/\nPlease enter the gitlab-ci token for this runner:\nxxxxx\nPlease enter the gitlab-ci description for this runner:\nxxx\nPlease enter the gitlab-ci tags for this runner (comma separated):\nbuilder\nPlease enter the executor: docker-ssh, shell, docker+machine, docker-ssh+machine, docker, parallels, ssh, virtualbox, kubernetes:\nshell\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Resource\nDESCRIPTION: Installs the hyperf/resource package using composer. This package provides functionality for transforming models into JSON responses.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/resource\n```\n\n----------------------------------------\n\nTITLE: Running the Hyperf Nano Application\nDESCRIPTION: This bash command starts the Hyperf Nano application using the PHP CLI.  It assumes the application entry point is index.php and passes the 'start' argument to initiate the server.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nano.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp index.php start\n```\n\n----------------------------------------\n\nTITLE: Mass Assignment with fill (Hyperf)\nDESCRIPTION: Illustrates using the `fill` method to populate model attributes from an array. It's still necessary to define `$fillable` or `$guarded` to prevent unexpected attribute changes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/model.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Model\\User;\n\n$user = new User;\n$user->fill(['name' => 'Hyperf']);\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf DB Component\nDESCRIPTION: This command installs the hyperf/db component using composer. This is a prerequisite for using the component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/db.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/db\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Nano\nDESCRIPTION: Installs the hyperf/nano package using Composer. This package allows you to quickly create Hyperf applications without the need for a skeleton project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nano.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer install hyperf/nano\n```\n\n----------------------------------------\n\nTITLE: Memory Room Adapter Configuration\nDESCRIPTION: Configures the Socket.io server to use the memory room adapter. This adapter is suitable for single-worker scenarios. Replaces the default Redis adapter. Requires `Hyperf\\SocketIOServer\\Room\\MemoryAdapter`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/socketio-server.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// config/autoload/dependencies.php\nreturn [\n    \\Hyperf\\SocketIOServer\\Room\\AdapterInterface::class => \\Hyperf\\SocketIOServer\\Room\\MemoryAdapter::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Executing Command from Command Line (Bash)\nDESCRIPTION: Executes a command from the command line using `php bin/hyperf.php` followed by the command name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php foo\n```\n\n----------------------------------------\n\nTITLE: Run Kong Dashboard\nDESCRIPTION: This command runs the Kong Dashboard container.  It exposes port 8080 and configures the dashboard to connect to the Kong API Gateway. Authentication is configured using basic auth.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_30\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run --rm --network=default-network -p 8080:8080 -d --name kong-dashboard pgbi/kong-dashboard start \\\n  --kong-url http://kong:8001 \\\n  --basic-auth user1=password1 user2=password2\n```\n\n----------------------------------------\n\nTITLE: Run Hyperf Server Watch\nDESCRIPTION: This command starts the Hyperf server in watch mode. When files are modified, the server will automatically restart to reflect the changes. This command should be executed from the project root directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/watcher.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php server:watch\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Template Engine\nDESCRIPTION: Configures the Hyperf View component to use a custom template engine. This involves updating the 'engine' parameter in the configuration array to point to the custom engine class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Engine\\TemplateEngine;\n\nreturn [\n    // 將 engine 參數改為您的自定義模板引擎類\n    'engine' => TemplateEngine::class,\n    'mode' => Mode::TASK,\n    'config' => [\n        'view_path' => BASE_PATH . '/storage/view/',\n        'cache_path' => BASE_PATH . '/runtime/view/',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Use Resource Collection (Repeated)\nDESCRIPTION: Reiterates returning the custom resource collection instance from controller.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/resource.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\UserCollection;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserCollection(User::all()))->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Event Component\nDESCRIPTION: Installs the hyperf/event component using Composer. This component provides the event manager for Hyperf and can be used in other frameworks or applications.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/event.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/event\n```\n\n----------------------------------------\n\nTITLE: Grant Gitlab Runner Docker Permissions\nDESCRIPTION: This script grants the gitlab-runner user the necessary permissions to execute Docker commands without sudo and to log in to the Docker registry. This ensures the runner can build and push images.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nsudo usermod -aG docker gitlab-runner\n```\n\nLANGUAGE: Shell\nCODE:\n```\nsu gitlab-runner\ndocker login -u username your-docker-repository\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf DI\nDESCRIPTION: This command installs the hyperf/di component using Composer. It is typically used in projects that are not based on hyperf-skeleton.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/di\n```\n\n----------------------------------------\n\nTITLE: Restoring Portainer Data\nDESCRIPTION: Restores Portainer data from a backup archive. The command uses a temporary Nginx container, mounts the Portainer data volume and a backup directory, extracts the `data.tar` archive to the `/` directory, effectively overwriting the Portainer data volume. Needs to re-create the portainer service first.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --volumes-from portainer_container -v $(pwd):/backup --name importer --rm nginx bash\ncd /backup\ntar xf data.tar -C /\n```\n\n----------------------------------------\n\nTITLE: Checking for Attribute Existence - HTML\nDESCRIPTION: Example of checking if a specific attribute exists in the attribute bag using the `has()` method.  This allows for conditional rendering based on attribute presence.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_36\n\nLANGUAGE: html\nCODE:\n```\n    @if($attributes->has(\"class\"))\n        <div class=\"{{ $attributes->get(\"class\") }}\">\n            <!-- 元件內容 -->\n        </div>\n    @endif\n```\n\n----------------------------------------\n\nTITLE: Displaying Join Token for Worker Nodes\nDESCRIPTION: Displays the command to join the Docker Swarm cluster as a worker node.  This command is used to add worker nodes to the cluster.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_49\n\nLANGUAGE: shell\nCODE:\n```\n$ docker swarm join-token worker\n```\n\n----------------------------------------\n\nTITLE: Building Phar Archive with Custom Name\nDESCRIPTION: This command builds a Phar archive with a specified name. The `--name` option allows you to customize the name of the generated `phar` file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/phar.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php phar:build --name=your_project.phar\n```\n\n----------------------------------------\n\nTITLE: Install Symfony Serializer Component\nDESCRIPTION: This shell command installs the `symfony/serializer` component using composer. This is a solution to the PHP 7.3 DI compatibility issues after upgrading.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.2.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require symfony/serializer\n```\n\n----------------------------------------\n\nTITLE: Installing fswatch on Ubuntu/Debian\nDESCRIPTION: This command installs the `fswatch` utility on Ubuntu or Debian-based Linux distributions using the apt package manager. `fswatch` is a file system monitoring tool.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/watcher.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napt-get install fswatch\n```\n\n----------------------------------------\n\nTITLE: Joining Docker Swarm\nDESCRIPTION: Joins a Docker Swarm cluster using the provided token and IP address.  This command connects the current node to the Swarm cluster.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_50\n\nLANGUAGE: shell\nCODE:\n```\ndocker swarm join --token xxxx <ip>:2377\n```\n\n----------------------------------------\n\nTITLE: Generating an AMQP Producer\nDESCRIPTION: Generates an AMQP producer class using the Hyperf CLI. The resulting class can be customized to define the exchange and routing key for message publishing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/amqp.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php gen:amqp-producer DemoProducer\n```\n\n----------------------------------------\n\nTITLE: Config Provider Scan Paths Before Change PHP\nDESCRIPTION: This code shows the previous structure of the `scan` configuration in the config provider. It defines the paths to be scanned for annotations and the collectors to be used.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.1.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n'scan' => [\n    'paths' => [\n        __DIR__,\n    ],\n    'collectors' => [],\n],\n```\n\n----------------------------------------\n\nTITLE: Socket API Usage Example\nDESCRIPTION: Demonstrates various Socket API functionalities for sending events to clients, broadcasting, and managing rooms. Includes examples of sending to specific clients, excluding the sender, using acknowledgements, and disabling compression. Requires the `Hyperf\\SocketIOServer\\Socket` class.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/socketio-server.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n#[Event(\"SomeEvent\")]\nfunction onSomeEvent(\\Hyperf\\SocketIOServer\\Socket $socket){\n\n  // sending to the client\n  // 向連線推送 hello 事件\n  $socket->emit('hello', 'can you hear me?', 1, 2, 'abc');\n\n  // sending to all clients except sender\n  // 向所有連線推送 broadcast 事件，但是不包括當前連線。\n  $socket->broadcast->emit('broadcast', 'hello friends!');\n\n  // sending to all clients in 'game' room except sender\n  // 向 game 房間內所有連線推送 nice game 事件，但是不包括當前連線。\n  $socket->to('game')->emit('nice game', \"let's play a game\");\n\n  // sending to all clients in 'game1' and/or in 'game2' room, except sender\n  // 向 game1 房間 和 game2 房間內所有連線取並集推送 nice game 事件，但是不包括當前連線。\n  $socket->to('game1')->to('game2')->emit('nice game', \"let's play a game (too)\");\n\n  // WARNING: `$socket->to($socket->getSid())->emit()` will NOT work, as it will send to everyone in the room\n  // named `$socket->getSid()` but the sender. Please use the classic `$socket->emit()` instead.\n  // 注意：自己給自己推送的時候不要加to，因為$socket->to()總是排除自己。直接$socket->emit()就好了。\n\n  // sending with acknowledgement\n  // 傳送資訊，並且等待並接收客戶端響應。\n  $reply = $socket->emit('question', 'do you think so?')->reply();\n\n  // sending without compression\n  // 無壓縮推送\n  $socket->compress(false)->emit('uncompressed', \"that's rough\");\n}\n```\n\n----------------------------------------\n\nTITLE: Calculate RPN Expression in Hyperf\nDESCRIPTION: This snippet calculates a RPN expression using the `Hyperf\\Rpn\\Calculator` class. It creates a new instance of the calculator and calls the `calculate` method with the RPN expression as the argument. It returns the result of the calculation as a string.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/rpn/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->calculate('5 1 2 + 4 * + 3 -', []); // '14'\n```\n\n----------------------------------------\n\nTITLE: Get Current Page Number with Paginator\nDESCRIPTION: Retrieves the current page number from the Paginator instance.  This allows determining which page is currently being displayed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/paginator.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$currentPage = $paginator->currentPage();\n```\n\n----------------------------------------\n\nTITLE: Basic Hyperf Nano Application\nDESCRIPTION: This snippet demonstrates a basic Hyperf Nano application setup, defining a route that returns a JSON response based on the 'user' input parameter and the request method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nano.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// index.php\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create('0.0.0.0', 9051);\n\n$app->get('/', function () {\n\n    $user = $this->request->input('user', 'nano');\n    $method = $this->request->getMethod();\n\n    return [\n        'message' => \"hello {$user}\",\n        'method' => $method,\n    ];\n\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: NSQ Protocol Flow\nDESCRIPTION: This PlantUML diagram illustrates the sequence of operations in the NSQ protocol, including connection, authentication, publishing (single, multiple, delayed), subscription, heartbeat, and connection closure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nsq.md#_snippet_10\n\nLANGUAGE: PlantUML\nCODE:\n```\n@startuml\n\nautonumber\nhide footbox\ntitle **NSQ 協議**\n\nparticipant \"客户端\" as client\nparticipant \"服務器\" as server #orange\n\nactivate client\nactivate server\n\n== connect ==\nnote left of client: connect 後都為 socket->send/recv\nclient -> server: socket->connect(ip, host)\nnote left of client: protocol version\nclient->server: magic: V2\n\n== auth ==\nnote left of client: client metadata\nclient->server: IDENTIFY\nnote right of server: 如果需要 auth\nserver->client: auth_required=true\nclient->server: AUTH\n...\n\n== pub ==\nnote left of client: 發送一條消息\nclient -> server: PUB~~~~ <topic_name>\nnote left of client: 發送多條消息\nclient -> server: MPUB\nnote left of client: 發送一條延時消息\nclient -> server: DPUB\n...\n\n== sub ==\nnote left of client: client 使用 channel 訂閲 topic\nnote right of server: SUB 成功後, client 處於 RDY 0 階段\nclient -> server: SUB <topic_name> <channel_name>\nnote left of client: 使用 RDY 告訴 server 準備好消費 <count> 條消息\nclient -> server: RDY <count>\nnote right of server: server 返回 client <count> 條消息\nserver -> client: <count> msg\nnote left of client: 標記消息完成消費(消費成功)\nclient -> server: FIN <message_id>\nnote left of client: 消息重新入隊(消費失敗, 重新入隊)\nclient -> server: REQ <message_id> <timeout>\nnote left of client: 重置消息超時時間\nclient -> server: TOUCH <message_id>\n...\n\n== heartbeat ==\nserver -> client: _heartbeat_\nnote right of server: client 2 次沒有應答 NOP, server 將斷開連接\nclient -> server: NOP\n...\n\n== close ==\nnote left of client: clean close connection, 表示沒有消息了, 關閉連接\nclient -> server: CLS\nnote right of server: server 端成功應答\nserver -> client: CLOSE_WAIT\n\ndeactivate client\ndeactivate server\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Analyzing code using Composer\nDESCRIPTION: This command is used to perform static analysis on the project to detect syntax errors and other potential issues.  It's useful for identifying the source of errors that prevent the application from starting. The command is executed via the command line.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/quick-start/questions.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer analyse\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Injection for Visitor PHP\nDESCRIPTION: This PHP configuration snippet defines the dependency injection mapping for the custom `ModelUpdateVisitor`. It tells Hyperf to use the `App\\Kernel\\Visitor\\ModelUpdateVisitor` class whenever `Hyperf\\Database\\Commands\\Ast\\ModelUpdateVisitor` is requested.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/gen.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    Hyperf\\Database\\Commands\\Ast\\ModelUpdateVisitor::class => App\\Kernel\\Visitor\\ModelUpdateVisitor::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Run Logtail Container in Docker\nDESCRIPTION: This command runs the Logtail container, which is responsible for collecting and shipping logs to Alibaba Cloud Log Service.  It mounts the host's root directory and Docker socket, and sets environment variables for region, user ID, and machine group identification.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/aliyun-logger.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d -v /:/logtail_host:ro -v /var/run/docker.sock:/var/run/docker.sock \\\n--env ALIYUN_LOGTAIL_CONFIG=/etc/ilogtail/conf/${your_region_name}/ilogtail_config.json \\\n--env ALIYUN_LOGTAIL_USER_ID=${your_aliyun_user_id} \\\n--env ALIYUN_LOGTAIL_USER_DEFINED_ID=${your_machine_group_user_defined_id} \\\nregistry.cn-hangzhou.aliyuncs.com/log-service/logtail\n```\n\n----------------------------------------\n\nTITLE: Listening for Events in Hyperf Nano\nDESCRIPTION: Shows how to listen for events in a Hyperf Nano application. This example listens for the `BootApplication` event and logs a message to the console when the application starts. Requires the `hyperf/nano` package and `Hyperf\\Framework\\Event\\BootApplication`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nano.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addListener(BootApplication::class, function($event){\n    $this->get(StdoutLoggerInterface::class)->info('App started');\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Install Consul Service Governance\nDESCRIPTION: This shell command installs the `hyperf/service-governance-consul` component using composer. This component is required when using Consul as the service governance driver.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.2.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"hyperf/service-governance-consul:~2.2.0\"\n```\n\n----------------------------------------\n\nTITLE: DemoApi Class for Testing\nDESCRIPTION: This PHP code defines a simple `DemoApi` class. The `test` method returns a fixed array with a 'status' key set to 1.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/testing.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Api;\n\nclass DemoApi\n{\n    public function test()\n    {\n        return [\n            'status' => 1\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Nacos via Composer\nDESCRIPTION: This command installs the `hyperf/nacos` package using Composer. It adds the Nacos client library to your Hyperf project's dependencies, enabling integration with Nacos for service discovery and configuration management.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nacos.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/nacos\n```\n\n----------------------------------------\n\nTITLE: Adding User to Docker Group\nDESCRIPTION: Adds the current user to the `docker` group to allow running Docker commands without `sudo`. This command avoids the need for `sudo` when executing docker commands, simplifying usage.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nusermod -aG docker $USER\n```\n\n----------------------------------------\n\nTITLE: Docker Stack List\nDESCRIPTION: This command lists the Docker stacks that are currently deployed. It shows the name, namespace, orchestrator, and services of each stack.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_57\n\nLANGUAGE: shell\nCODE:\n```\ndocker stack ls\n```\n\n----------------------------------------\n\nTITLE: Truncate Table in Hyperf PHP\nDESCRIPTION: Truncates the 'users' table, removing all rows and resetting the auto-incrementing ID to zero.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->truncate();\n```\n\n----------------------------------------\n\nTITLE: 1.1 container.php configuration PHP\nDESCRIPTION: This snippet shows the recommended content for config/container.php in Hyperf 1.1.  It initializes a dependency injection container using DefinitionSourceFactory, which handles default behaviors and simplifies configuration. It includes annotation scanning with caching enabled by default. This configuration ensures the dependency injection container functions correctly after the changes to dependencies.php.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/1.1.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Initial a dependency injection container that implemented PSR-11 and return the container.\n */\ndeclare(strict_types=1);\n\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Di\\Definition\\DefinitionSourceFactory;\nuse Hyperf\\Utils\\ApplicationContext;\nuse Psr\\Container\\ContainerInterface;\n\n$container = new Container((new DefinitionSourceFactory(true))());\nif (! $container instanceof ContainerInterface) {\n    throw new RuntimeException('The dependency injection container is invalid.');\n}\nreturn ApplicationContext::setContainer($container);\n```\n\n----------------------------------------\n\nTITLE: Install RPN Calculator using Composer\nDESCRIPTION: This command installs the `hyperf/rpn` package using Composer, a dependency manager for PHP.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/rpn.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/rpn\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Signal Component\nDESCRIPTION: This shell command installs the `hyperf/signal` component using composer.  This is a solution to the PHP 7.3 DI compatibility issues after upgrading.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.2.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/signal\n```\n\n----------------------------------------\n\nTITLE: Running Kong Dashboard with Docker\nDESCRIPTION: Runs the Kong Dashboard in a Docker container, configuring it to connect to the Kong gateway and setting basic authentication credentials.  Maps port 8080.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_29\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run --rm --network=default-network -p 8080:8080 -d --name kong-dashboard pgbi/kong-dashboard start \\\n  --kong-url http://kong:8001 \\\n  --basic-auth user1=password1 user2=password2\n```\n\n----------------------------------------\n\nTITLE: Default Swagger UI HTML\nDESCRIPTION: This is the default HTML structure for the Swagger UI. It includes references to Swagger UI's CSS and JavaScript files hosted on a CDN. The JavaScript code initializes the Swagger UI, configures the URL for the Swagger definition file, and sets the layout.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/swagger.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta\n      name=\"description\"\n      content=\"SwaggerUI\"\n    />\n    <title>SwaggerUI</title>\n    <link rel=\"stylesheet\" href=\"https://unpkg.hyperf.wiki/swagger-ui-dist@4.5.0/swagger-ui.css\" />\n  </head>\n  <body>\n  <div id=\"swagger-ui\"></div>\n  <script src=\"https://unpkg.hyperf.wiki/swagger-ui-dist@4.5.0/swagger-ui-bundle.js\" crossorigin></script>\n  <script src=\"https://unpkg.hyperf.wiki/swagger-ui-dist@4.5.0/swagger-ui-standalone-preset.js\" crossorigin></script>\n  <script>\n    window.onload = () => {\n      window.ui = SwaggerUIBundle({\n        url: GetQueryString(\"search\"),\n        dom_id: '#swagger-ui',\n        presets: [\n          SwaggerUIBundle.presets.apis,\n          SwaggerUIStandalonePreset\n        ],\n        layout: \"StandaloneLayout\",\n      });\n    };\n    function GetQueryString(name) {\n      var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\", \"i\");\n      var r = window.location.search.substr(1).match(reg); //獲取url中\"?\"符後的字串並正則匹配\n      var context = \"\";\n      if (r != null)\n        context = decodeURIComponent(r[2]);\n      reg = null;\n      r = null;\n      return context == null || context == \"\" || context == \"undefined\" ? \"/http.json\" : context;\n    }\n  </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf DB Component\nDESCRIPTION: Installs the hyperf/db component using Composer. This command adds the necessary files and dependencies to your project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/db.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/db\n```\n\n----------------------------------------\n\nTITLE: Delete Records Using Model Query Builder (PHP)\nDESCRIPTION: Deletes records from the search index using the `unsearchable` method on a model query builder. This allows removing records without first retrieving the model instances.  It can be used with model relations or collections.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// 透過模型查詢刪除...\nApp\\Order::where('price', '>', 100)->unsearchable();\n\n// 透過模型關係刪除...\n$user->orders()->unsearchable();\n\n// 透過集合刪除...\n$orders->unsearchable();\n```\n\n----------------------------------------\n\nTITLE: Setting Redis Client Options in PHP\nDESCRIPTION: This PHP code demonstrates how to set Redis client options, such as the serializer, within the Hyperf framework. It configures the Redis client to use PHP serialization.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/redis.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nreturn [\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'auth' => env('REDIS_AUTH', null),\n        'port' => (int) env('REDIS_PORT', 6379),\n        'db' => (int) env('REDIS_DB', 0),\n        'pool' => [\n            'min_connections' => 1,\n            'max_connections' => 10,\n            'connect_timeout' => 10.0,\n            'wait_timeout' => 3.0,\n            'heartbeat' => -1,\n            'max_idle_time' => (float) env('REDIS_MAX_IDLE_TIME', 60),\n        ],\n        'options' => [\n            \\Redis::OPT_SERIALIZER => \\Redis::SERIALIZER_PHP,\n            // 或者 'serializer' => \\Redis::SERIALIZER_PHP, v3.0.38 或更高版本\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Devtool\nDESCRIPTION: Installs the Hyperf Devtool component using Composer. This command adds the necessary files and dependencies to your Hyperf project for using the development tools.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/devtool.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer require hyperf/devtool\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Dependencies (Bash)\nDESCRIPTION: Removes the composer.lock file and the vendor directory in the hyperf-skeleton project, and then executes composer update to update the dependencies again. This ensures that the changes to the composer.json file, including the local repository configuration, are applied, and the dependencies are updated accordingly.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/component-guide/intro.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd hyperf-skeleton\nrm -rf composer.lock && rm -rf vendor && composer update\n```\n\n----------------------------------------\n\nTITLE: Removing and Creating Ingress Network\nDESCRIPTION: This set of commands removes the default ingress network and creates a new one with a specified subnet. It addresses subnet conflicts. Requires Docker Swarm.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\ndocker network rm ingress\ndocker network create --ingress --subnet 192.168.0.1/16 --driver overlay ingress\n```\n\n----------------------------------------\n\nTITLE: Trait Injection Example\nDESCRIPTION: This snippet demonstrates a trait using property injection with the `#[Inject]` annotation.  The trait injects `ResponseInterface`.  This can lead to issues when a class using the trait also imports a class with the same name from a different namespace.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/questions.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Hyperf\\Di\\Annotation\\Inject;\n\ntrait TestTrait\n{\n    #[Inject]\n    protected ResponseInterface $response;\n}\n```\n\n----------------------------------------\n\nTITLE: Blade SectionMissing Directive\nDESCRIPTION: This Blade template demonstrates how to use the `@sectionMissing` directive to check if a section does not contain content and render a default include if it's missing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_17\n\nLANGUAGE: blade\nCODE:\n```\n@sectionMissing('navigation')\n    <div class=\"pull-right\">\n        @include('default-navigation')\n    </div>\n@endif\n```\n\n----------------------------------------\n\nTITLE: PHP Directive (Blade)\nDESCRIPTION: This Blade template demonstrates how to embed a block of PHP code using the `@php` directive. While this is possible, it's generally recommended to avoid embedding too much logic in templates.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view-engine.md#_snippet_21\n\nLANGUAGE: blade\nCODE:\n```\n@php\n    //\n@endphp\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker to Accept TCP Connections\nDESCRIPTION: Modifies the Docker service configuration to allow TCP connections by appending `-H tcp://0.0.0.0:2375` to the `ExecStart` line. This enables remote access to the Docker daemon but might pose security risks if not properly secured.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375\n```\n\n----------------------------------------\n\nTITLE: Install Nacos Service Governance\nDESCRIPTION: This shell command installs the `hyperf/service-governance-nacos` component using composer. This component is required when using Nacos as the service governance driver.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/upgrade/2.2.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"hyperf/service-governance-nacos:~2.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Blade Loops\nDESCRIPTION: This Blade template showcases the use of loop directives like `@for`, `@foreach`, `@forelse`, and `@while` that mimic PHP loop structures for iterating over data within views.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_20\n\nLANGUAGE: blade\nCODE:\n```\n@for ($i = 0; $i < 10; $i++)\n    The current value is {{ $i }}\n@endfor\n```\n\nLANGUAGE: blade\nCODE:\n```\n@foreach ($users as $user)\n    <p>This is user {{ $user->id }}</p>\n@endforeach\n```\n\nLANGUAGE: blade\nCODE:\n```\n@forelse ($users as $user)\n    <li>{{ $user->name }}</li>\n@empty\n    <p>No users</p>\n@endforelse\n```\n\nLANGUAGE: blade\nCODE:\n```\n@while (true)\n    <p>I'm looping forever.</p>\n@endwhile\n```\n\n----------------------------------------\n\nTITLE: Running Static Analysis for Hyperf v3.0 Upgrade\nDESCRIPTION: This snippet shows how to run a static analysis check using composer. This is recommended when updating from Hyperf 2.2 to 3.0 due to increased type restrictions in the class library.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/3.0.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncomposer analysis\n```\n\n----------------------------------------\n\nTITLE: Trigger Custom Exception - Hyperf PHP\nDESCRIPTION: This code demonstrates how to throw a custom exception (`FooException`) within a Hyperf controller. When the `index()` method is called, it throws the `FooException` with a specific message and code, triggering the exception handling process.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/exception-handler.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse App\\Exception\\FooException;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        throw new FooException('Foo Exception...', 800);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Array Argument (PHP)\nDESCRIPTION: Defines an array argument using `addArgument()` and `InputArgument::IS_ARRAY`. This allows the command to accept multiple values for the argument, which are then stored as an array.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/command.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic function configure()\n{\n    parent::configure();\n    $this->addArgument('name', InputArgument::IS_ARRAY, '姓名');\n}\n\npublic function handle()\n{\n    var_dump($this->input->getArgument('name'));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Starting the Hyperf Project\nDESCRIPTION: These commands navigate to the project directory and then starts the Hyperf application using the built-in `hyperf.php` script. This script initializes the necessary components and starts the Hyperf server, allowing it to handle incoming requests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/quick-start/install.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncd hyperf-skeleton\nphp bin/hyperf.php start\n```\n\n----------------------------------------\n\nTITLE: Verifying Soft Links (Bash)\nDESCRIPTION: This snippet shows how to verify if the soft links have been established correctly using the `ls -l` command inside the `vendor/hyperf` directory. This confirms that the vendor files are linked to the source Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/component-guide/intro.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd vendor/hyperf/\nls -l\n```\n\n----------------------------------------\n\nTITLE: Logging into Docker Registry\nDESCRIPTION: This command logs into a Docker registry. Replace `xxxx` with the username and `registry.cn-shanghai.aliyuncs.com` with the registry address. Successful login is required to push and pull images from the registry.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_53\n\nLANGUAGE: shell\nCODE:\n```\ndocker login --username=xxxx registry.cn-shanghai.aliyuncs.com\n```\n\n----------------------------------------\n\nTITLE: Translation Configuration\nDESCRIPTION: This snippet shows an example of a translation configuration file.  It defines a translation key `params.invalid` with a parameterized message.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/constants.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// 國際化配置\n\nreturn [\n    'params.invalid' => 'Params :param is invalid.',\n];\n```\n\n----------------------------------------\n\nTITLE: Publishing Watcher Configuration\nDESCRIPTION: This command publishes the default configuration file for the Hyperf Watcher component to the config directory. This allows customization of the watcher settings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/watcher.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/watcher\n```\n\n----------------------------------------\n\nTITLE: Defining a Blade Layout\nDESCRIPTION: This Blade template defines a master layout for the application. It includes common HTML elements and uses @yield and @section directives to define and display content sections, enabling template inheritance in child views.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<!-- Stored in storage/view/layouts/app.blade.php -->\n\n<html>\n    <head>\n        <title>App Name - @yield('title')</title>\n    </head>\n    <body>\n        @section('sidebar')\n            This is the master sidebar.\n        @show\n\n        <div class=\"container\">\n            @yield('content')\n        </div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting the Default Kernel and Updating Grub\nDESCRIPTION: This snippet configures the system to boot into the newly installed kernel. It retrieves a list of available kernel options, sets the default kernel, and updates the GRUB configuration file. Requires `awk` and `grub2-` utilities.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\nsudo awk -F\\' '$1==\"menuentry \" {print i++ \" : \" $2}' /etc/grub2.cfg\ngrub2-set-default 0\ngrub2-mkconfig -o /boot/grub2/grub.cfg\n```\n\n----------------------------------------\n\nTITLE: Run Code Analysis\nDESCRIPTION: This snippet demonstrates how to run a static code analysis using Composer. This is useful for identifying syntax errors or other code issues that may be preventing the application from starting. The command executes the configured static analysis scripts defined in the `composer.json` file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/questions.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer analyse\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Response\nDESCRIPTION: This JSON represents the expected response from the 'hello' GraphQL query. It contains a data field with the result of the query, which is the string \"graphql\".\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/graphql.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"data\": {\n        \"hello\": \"graphql\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Task Implementation\nDESCRIPTION: This code defines a `MongoTask` class with `insert` and `query` methods annotated with `#[Task]` to perform MongoDB operations in a separate task worker. The `manager` method instantiates the MongoDB manager.  This ensures that blocking MongoDB operations do not block the main worker process.  Dependencies include `Hyperf\\Task\\Annotation\\Task`, `MongoDB\\Driver\\BulkWrite`, `MongoDB\\Driver\\Manager`, `MongoDB\\Driver\\Query`, and `MongoDB\\Driver\\WriteConcern`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/task.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Task;\n\nuse Hyperf\\Task\\Annotation\\Task;\nuse MongoDB\\Driver\\BulkWrite;\nuse MongoDB\\Driver\\Manager;\nuse MongoDB\\Driver\\Query;\nuse MongoDB\\Driver\\WriteConcern;\n\nclass MongoTask\n{\n    public Manager $manager;\n\n    #[Task]\n    public function insert(string $namespace, array $document)\n    {\n        $writeConcern = new WriteConcern(WriteConcern::MAJORITY, 1000);\n        $bulk = new BulkWrite();\n        $bulk->insert($document);\n\n        $result = $this->manager()->executeBulkWrite($namespace, $bulk, $writeConcern);\n        return $result->getUpsertedCount();\n    }\n\n    #[Task]\n    public function query(string $namespace, array $filter = [], array $options = [])\n    {\n        $query = new Query($filter, $options);\n        $cursor = $this->manager()->executeQuery($namespace, $query);\n        return $cursor->toArray();\n    }\n\n    protected function manager()\n    {\n        if ($this->manager instanceof Manager) {\n            return $this->manager;\n        }\n        $uri = 'mongodb://127.0.0.1:27017';\n        return $this->manager = new Manager($uri, []);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Retry Annotation in Hyperf\nDESCRIPTION: This code defines a custom retry annotation `MyRetry` that extends `AbstractRetry`. It sets the target to methods and allows customization of retry policies and attempts.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/retry.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Annotation;\n\nuse Doctrine\\Common\\Annotations\\Annotation\\Target;\n\n#[Attribute(Attribute::TARGET_METHOD)]\nclass MyRetry extends \\Hyperf\\Retry\\Annotation\\AbstractRetry\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Check Pcntl Extension\nDESCRIPTION: This snippet demonstrates how to check if the pcntl extension is enabled in PHP. The pcntl extension is required for the v2.2 annotation scanning process.  The `php --ri pcntl` command provides information about the pcntl extension, including its status.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/questions.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nphp --ri pcntl\n```\n\nLANGUAGE: Shell\nCODE:\n```\npcntl\n\npcntl support => enabled\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Data\nDESCRIPTION: This command imports existing database records into the search index using the `scout:import` command. It specifies the model to import data from.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php scout:import \"App\\Post\"\n```\n\n----------------------------------------\n\nTITLE: Using the MongoTask Class - PHP\nDESCRIPTION: Demonstrates how to use the `MongoTask` class to insert and query data in MongoDB. It retrieves the `MongoTask` instance from the container and calls the `insert` and `query` methods.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/task.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse App\\Task\\MongoTask;\nuse Hyperf\\Context\\ApplicationContext;\n\n$client = ApplicationContext::getContainer()->get(MongoTask::class);\n$client->insert('hyperf.test', ['id' => rand(0, 99999999)]);\n\n$result = $client->query('hyperf.test', [], [\n    'sort' => ['id' => -1],\n    'limit' => 5,\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Guzzle\nDESCRIPTION: Command to install the hyperf/guzzle component via Composer. This command adds the component to your project's dependencies.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/guzzle.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/guzzle\n```\n\n----------------------------------------\n\nTITLE: Configure PgSQL Driver - Hyperf\nDESCRIPTION: Configures the PgSQL database connection in Hyperf's `databases.php` file.  The configuration uses environment variables for connection parameters.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/quick-start.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// config/autoload/databases.php\nreturn [\n     // 其他配置\n    'pgsql'=>[\n        'driver' => env('DB_DRIVER', 'pgsql'),\n        'host' => env('DB_HOST', 'localhost'),\n        'database' => env('DB_DATABASE', 'hyperf'),\n        'port' => env('DB_PORT', 5432),\n        'username' => env('DB_USERNAME', 'postgres'),\n        'password' => env('DB_PASSWORD'),\n        'charset' => env('DB_CHARSET', 'utf8'),\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Modify Hyperf test script in composer.json\nDESCRIPTION: This JSON snippet demonstrates the modified test script in the composer.json file, adding the `--prepend test/bootstrap.php` option to the co-phpunit command. This ensures that the bootstrap file is included before running the tests.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.2.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"scripts\": {\n        \"test\": \"co-phpunit --prepend test/bootstrap.php -c phpunit.xml --colors=always\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Kong Database\nDESCRIPTION: Initializes the Kong database by running the `kong migrations bootstrap` command within a Kong container.  Requires the database container to be running.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_27\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run --rm \\\n  --network=default-network \\\n  -e \"KONG_DATABASE=postgres\" \\\n  -e \"KONG_PG_HOST=kong-database\" \\\n  -e \"KONG_PG_PASSWORD=kong\" \\\n  -e \"KONG_CASSANDRA_CONTACT_POINTS=kong-database\" \\\n  kong:latest kong migrations bootstrap\n```\n\n----------------------------------------\n\nTITLE: Joining Docker Swarm\nDESCRIPTION: This command joins a Docker Swarm cluster using the provided token and IP address. Replace `<ip>` with the IP address of the swarm manager.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_51\n\nLANGUAGE: shell\nCODE:\n```\ndocker swarm join --token xxxx <ip>:2377\n```\n\n----------------------------------------\n\nTITLE: Producing an AMQP Message\nDESCRIPTION: Demonstrates how to produce an AMQP message using the `Hyperf\\Amqp\\Producer` instance in Hyperf. It creates a `DemoProducer` instance with a specific ID, retrieves the producer from the DI container, and then sends the message using the `produce` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/amqp.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Amqp\\Producer;\nuse App\\Amqp\\Producers\\DemoProducer;\nuse Hyperf\\Context\\ApplicationContext;\n\n$message = new DemoProducer(1);\n$producer = ApplicationContext::getContainer()->get(Producer::class);\n$result = $producer->produce($message);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Coroutine Server Type in Hyperf\nDESCRIPTION: This code snippet demonstrates how to configure the server type in the `autoload/server.php` file to use the coroutine style in Hyperf. It sets the `type` to `Hyperf\\Server\\CoroutineServer::class` to enable the coroutine-style service.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/coroutine-server.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Hyperf\\Server\\Event;\nuse Hyperf\\Server\\Server;\n\nreturn [\n    'type' => Hyperf\\Server\\CoroutineServer::class,\n    'servers' => [\n        [\n            'name' => 'http',\n            'type' => Server::SERVER_HTTP,\n            'host' => '0.0.0.0',\n            'port' => 9501,\n            'sock_type' => SWOOLE_SOCK_TCP,\n            'callbacks' => [\n                Event::ON_REQUEST => [Hyperf\\HttpServer\\Server::class, 'onRequest'],\n            ],\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Docker Service File\nDESCRIPTION: This snippet shows how to modify the Docker service file to allow TCP connections. It adds the `-H tcp://0.0.0.0:2375` option to the `ExecStart` line.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375\n```\n\n----------------------------------------\n\nTITLE: Running Kong Dashboard\nDESCRIPTION: Runs the Kong Dashboard container, exposing it on port 8080 and configuring it to connect to the Kong gateway at `http://kong:8001`. It also sets up basic authentication for access to the dashboard.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm --network=default-network -p 8080:8080 -d --name kong-dashboard pgbi/kong-dashboard start \\\n  --kong-url http://kong:8001 \\\n  --basic-auth user1=password1 user2=password2\n```\n\n----------------------------------------\n\nTITLE: Docker Stack Deploy YAML\nDESCRIPTION: This YAML file defines a Docker Stack deployment.  It specifies the image, ports, replicas, restart policy, update configuration, networks, and configs for the service. Requires Docker Swarm.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.7'\nservices:\n  your_project:\n    image: registry.cn-shanghai.aliyuncs.com/your_namespace/your_project:latest\n    ports:\n      - \"9501:9501\"\n    deploy:\n      replicas: 3\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 5\n      update_config:\n        parallelism: 2\n        delay: 5s\n        order: start-first\n    networks:\n      - default-network\n    configs:\n      - source: your_project_v1.1\n        target: /opt/www/.env\nconfigs:\n  your_project_v1.1:\n    file: /opt/www/your_project/.env\nnetworks:\n  default-network:\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Magic Method Output (Shell)\nDESCRIPTION: This shows the output generated by the PHP magic method example.  It illustrates the result of the isset check within the two coroutines. The bool(false) is the result of the first `isset` evaluation after the 1-second delay in the magic method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/important.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbool(false)\nstring(3) \"xxx\"\nbool(true)\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Kernel Version\nDESCRIPTION: This snippet installs a specific kernel version and its associated development and header files using the yum package manager. It specifies the exact versions for the kernel, kernel-devel, and kernel-headers packages. Verify the kernel versions available in the configured repository before running this command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\nyum -y install kernel-devel-4.14.105-19.0012.tl2.x86_64 kernel-4.14.105-19.0013.tl2.x86_64 kernel-headers-4.14.105-19.0013.tl2.x86_64\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Template Engine\nDESCRIPTION: Installs the Twig template engine using Composer. This enables the use of Twig templates within the Hyperf view component.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require twig/twig\n```\n\n----------------------------------------\n\nTITLE: InfluxDB Configuration\nDESCRIPTION: Configures the InfluxDB driver with settings such as host, port, username, password, database name, and push interval.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/metric.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => env('METRIC_DRIVER', 'influxdb'),\n    'use_standalone_process' => env('TELEMETRY_USE_STANDALONE_PROCESS', true),\n    'enable_default_metric' => env('TELEMETRY_ENABLE_DEFAULT_TELEMETRY', true),\n    'metric' => [\n        'influxdb' => [\n            'driver' => Hyperf\\Metric\\Adapter\\InfluxDB\\MetricFactory::class,\n            'namespace' => env('APP_NAME', 'skeleton'),\n            'host' => env('INFLUXDB_HOST', '127.0.0.1'),\n            'port' => env('INFLUXDB_PORT', '8086'),\n            'username' => env('INFLUXDB_USERNAME', ''),\n            'password' => env('INFLUXDB_PASSWORD', ''),\n            'dbname' => env('INFLUXDB_DBNAME', true),\n            'push_interval' => env('INFLUXDB_PUSH_INTERVAL', 5),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Verify Symbolic Links Creation\nDESCRIPTION: This snippet shows how to verify that the symbolic links have been created correctly by listing the contents of the `vendor/hyperf` directory using the `ls -l` command. The output should show links pointing to the corresponding directories in the `hyperf/src` directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/component-guide/intro.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd vendor/hyperf/\nls -l\n```\n\n----------------------------------------\n\nTITLE: Mapping NormalizerInterface Implementation\nDESCRIPTION: This snippet shows how to manually map the `Hyperf\\Contract\\NormalizerInterface` implementation when the `symfony/serializer` library is required, as the automatic mapping is no longer performed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog/2.0.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Utils\\Serializer\\SerializerFactory;\nuse Hyperf\\Utils\\Serializer\\Serializer;\n\nreturn [\n    Hyperf\\Contract\\NormalizerInterface::class => new SerializerFactory(Serializer::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Adding User to Docker Group\nDESCRIPTION: This command adds the current user to the `docker` group, allowing them to run Docker commands without `sudo`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nusermod -aG docker $USER\n```\n\n----------------------------------------\n\nTITLE: Generate Snowflake ID\nDESCRIPTION: Generates a Snowflake ID using the default IdGeneratorInterface in Hyperf. It retrieves the IdGeneratorInterface from the container and calls the generate() method to produce a unique ID.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/snowflake.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Snowflake\\IdGeneratorInterface;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = ApplicationContext::getContainer();\n$generator = $container->get(IdGeneratorInterface::class);\n\n$id = $generator->generate();\n```\n\n----------------------------------------\n\nTITLE: Adding Hyperf\\Config\\config function\nDESCRIPTION: This commit introduces the `Hyperf\\Config\\config` function to the Hyperf framework.  This function likely serves as a helper function to retrieve configuration values, simplifying access to configuration data within the application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/3.0.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nHyperf\\Config\\config\n```\n\n----------------------------------------\n\nTITLE: Run Phar Archive\nDESCRIPTION: Runs the built Phar archive using the `php` command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/phar.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp your_project.phar start\n```\n\n----------------------------------------\n\nTITLE: Priority Definition Config 2\nDESCRIPTION: Example of using PriorityDefinition for DI configuration. When not using `PriorityDefinition` the weight is 0.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/di.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse FooInterface;\nuse Foo2;\n\nreturn [\n    'dependencies' => [\n        FooInterface::class => Foo2::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Getting Request URL - PHP\nDESCRIPTION: Shows how to obtain the full URL of the request using the `url()` and `fullUrl()` methods.  `url()` returns the URL without query parameters, while `fullUrl()` includes them.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/request.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// 沒有查詢參數\n$url = $request->url();\n\n// 帶上查詢參數\n$url = $request->fullUrl();\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Guzzle\nDESCRIPTION: Installs the hyperf/guzzle component using Composer, adding it as a dependency to your Hyperf project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/guzzle.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/guzzle\n```\n\n----------------------------------------\n\nTITLE: Update Git and Install Gitlab-runner - Shell\nDESCRIPTION: These commands update the git source and install git and gitlab-runner on a CentOS system. It uses a custom repository to install a newer version of git before installing gitlab-runner.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tutorial/docker-swarm.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl https://setup.ius.io | sh\n$ yum -y install git2u\n$ git version\n$ yum install gitlab-runner\n```\n\n----------------------------------------\n\nTITLE: Changing Config Provider Structure in Hyperf (Before)\nDESCRIPTION: This code snippet represents the previous structure of the config provider in Hyperf, specifically the 'scan' configuration. This structure defined paths to scan for annotations and collectors. The paths defined where the application should search for relevant classes and configurations.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.2.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n'scan' => [\n    'paths' => [\n        __DIR__,\n    ],\n    'collectors' => [],\n],\n```\n\n----------------------------------------\n\nTITLE: Customizing Resource Collection\nDESCRIPTION: Demonstrates how to customize the resource class used for individual items in a resource collection by overriding the `$collects` property.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Resource;\n\nuse Hyperf\\Resource\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * collects 屬性定義了資源類。\n     *\n     * @var string\n     */\n    public $collects = 'App\\Resource\\Member';\n\n    /**\n     * Transform the resource collection into an array.\n     * @return array\n     */\n    public function toArray(): array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: View PHP INI Path\nDESCRIPTION: This snippet demonstrates how to find the location of the php.ini configuration file using the command line. This is necessary to modify PHP settings like `memory_limit`. The `php --ini` command displays the loaded configuration file and additional .ini files.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/questions.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nphp --ini\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf Cache Component\nDESCRIPTION: Installs the `hyperf/cache` package using Composer. This package provides aspect-oriented caching and implements the `Psr\\SimpleCache\\CacheInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/cache.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require hyperf/cache\n```\n\n----------------------------------------\n\nTITLE: Exclude If Rule with Closure\nDESCRIPTION: The `exclude_if` rule excludes the field being validated if another field is equal to a value, or based on the result of a boolean value or closure. This example shows how to use a closure with the `Rule::excludeIf` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$this->validationFactory->make($request->all(), [\n    'role_id' => Rule::excludeIf($request->user()->is_admin),\n]);\n\n$this->validationFactory->make($request->all(), [\n    'role_id' => Rule::excludeIf(fn () => $request->user()->is_admin),\n]);\n```\n\n----------------------------------------\n\nTITLE: Create Foreign Key Constraint in Hyperf Schema\nDESCRIPTION: This code snippet demonstrates how to create a foreign key constraint in a Hyperf database schema. It establishes a relationship between the 'user_id' column in the 'posts' table and the 'id' column in the 'users' table.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/migration.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\nSchema::table('posts', function (Blueprint $table) {\n    $table->unsignedInteger('user_id');\n\n    $table->foreign('user_id')->references('id')->on('users');\n});\n```\n\n----------------------------------------\n\nTITLE: Running Kong Migrations\nDESCRIPTION: Runs Kong migrations to bootstrap the database schema. The command sets environment variables to connect to the PostgreSQL database and then executes the `kong migrations bootstrap` command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm \\\n  --network=default-network \\\n  -e \"KONG_DATABASE=postgres\" \\\n  -e \"KONG_PG_HOST=kong-database\" \\\n  -e \"KONG_PG_PASSWORD=kong\" \\\n  -e \"KONG_CASSANDRA_CONTACT_POINTS=kong-database\" \\\n  kong:latest kong migrations bootstrap\n```\n\n----------------------------------------\n\nTITLE: Connecting to SSH with Custom Port\nDESCRIPTION: Connects to a server via SSH using a specified port (2222 in this case). This is required after changing the SSH daemon's default port.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nssh -p 2222 root@host\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Stacks\nDESCRIPTION: Lists the deployed Docker stacks. This allows you to verify that the stack has been deployed successfully.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_56\n\nLANGUAGE: shell\nCODE:\n```\ndocker stack ls\n```\n\n----------------------------------------\n\nTITLE: Coroutine Parallel Usage Example\nDESCRIPTION: Illustrates the use of Hyperf's Parallel feature to run multiple coroutines concurrently and collect their results.  This example creates two coroutines using the `Parallel` class and waits for their completion, demonstrating a way to easily execute tasks in parallel.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/coroutine.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\Coroutine\\Exception\\ParallelExecutionException;\nuse Hyperf\\Coroutine\\Coroutine;\nuse Hyperf\\Coroutine\\Parallel;\n\n$parallel = new Parallel();\n$parallel->add(function () {\n    sleep(1);\n    return Coroutine::id();\n});\n$parallel->add(function () {\n    sleep(1);\n    return Coroutine::id();\n});\n\ntry{\n    // $results 结果为 [1, 2]\n   $results = $parallel->wait(); \n} catch(ParallelExecutionException $e){\n    // $e->getResults() 获取协程中的返回值。\n    // $e->getThrowables() 获取协程中出现的异常。\n}\n```\n\n----------------------------------------\n\nTITLE: Publish Scout Configuration File (Bash)\nDESCRIPTION: Publishes the Scout configuration file. This command makes the scout.php file available in the config directory, allowing customization of Scout's behavior.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/scout.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/scout\n```\n\n----------------------------------------\n\nTITLE: Using Static Method in Hyperf DB\nDESCRIPTION: Shows how to directly use the static query method of the DB class to execute a SQL query.  This is a simpler approach without needing to retrieve an instance from the container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/db.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\DB\\DB;\n\n$res = DB::query('SELECT * FROM `user` WHERE gender = ?;', [1]);\n\n```\n\n----------------------------------------\n\nTITLE: Disable Wrapping\nDESCRIPTION: Demonstrates how to disable the default data wrapping for a resource response using the `withoutWrapping` method. This removes the top-level `data` key from the JSON response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse App\\Model\\User;\nuse App\\Resource\\UserCollection;\n\nclass IndexController extends AbstractController\n{\n    public function index()\n    {\n        return (new UserCollection(User::all()))->withoutWrapping()->toResponse();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: AMQP consumer consumeMessage before v3.1\nDESCRIPTION: This PHP code demonstrates the `consumeMessage` method's return type for an AMQP consumer before Hyperf v3.1. It returns a string representing the result.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/3.1.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// before v3.1\npublic function consumeMessage($data, AMQPMessage $message): string\n{\n    return Result::ACK;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Redirect Response in Hyperf\nDESCRIPTION: This snippet demonstrates how to create a redirect response using the `redirect()` method of the `ResponseInterface`. It takes a URL to redirect to, an optional status code (default 302), and an optional schema ('http' or 'https'). If the URL doesn't include a schema, the schema parameter is used to construct the full URL. Returns a `Psr7ResponseInterface` object configured for redirection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/response.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Controller;\n\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface;\n\nclass IndexController\n{\n    public function redirect(ResponseInterface $response): Psr7ResponseInterface\n    {\n        // redirect() 方法返回的是一个 Psr\\Http\\Message\\ResponseInterface 对象，需再 return 回去\n        return $response->redirect('/anotherUrl');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Container Parameter Optimization\nDESCRIPTION: This YAML snippet defines `sysctls` parameters for Docker containers, specifically related to network connection reuse and LVS behavior. `net.ipv4.vs.conn_reuse_mode` controls network connection reuse, and `net.ipv4.vs.expire_nodest_conn` determines whether to release connections when an invalid destination RS is detected. Docker 19.09.0 or higher is required.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nsysctls:\n  # 网络连接复用模式的选择\n  - net.ipv4.vs.conn_reuse_mode=0\n  # 当LVS转发数据包，发现目的RS无效（删除）时，会丢弃该数据包，但不删除相应连接。值为1时，则马上释放相应连接\n  - net.ipv4.vs.expire_nodest_conn=1\n```\n\n----------------------------------------\n\nTITLE: Config Dependencies PHP 1.0\nDESCRIPTION: This snippet shows the structure of the `config/dependencies.php` file in Hyperf 1.0. It defines an array with a 'dependencies' key, which contains the dependency mappings.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/1.1.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// config/dependencies.php document\n\nreturn [\n    'dependencies' => [\n        FooInterface::class => Foo::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Exclude If Validation Rule in Hyperf\nDESCRIPTION: This snippet demonstrates how to use the `Rule::excludeIf` method to conditionally exclude a field from validation based on a boolean value or a closure in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$this->validationFactory->make($request->all(), [\n    'role_id' => Rule::excludeIf($request->user()->is_admin),\n]);\n\n$this->validationFactory->make($request->all(), [\n    'role_id' => Rule::excludeIf(fn () => $request->user()->is_admin),\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Nacos Config\nDESCRIPTION: This command installs the Hyperf component for integrating with Nacos, another popular configuration management system.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/config-center.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/config-nacos\n```\n\n----------------------------------------\n\nTITLE: Initialize Kong Database Migrations\nDESCRIPTION: This command initializes the Kong database by running migrations.  It connects to the PostgreSQL database container and executes the kong migrations bootstrap command.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_28\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run --rm \\\n  --network=default-network \\\n  -e \"KONG_DATABASE=postgres\" \\\n  -e \"KONG_PG_HOST=kong-database\" \\\n  -e \"KONG_PG_PASSWORD=kong\" \\\n  -e \"KONG_CASSANDRA_CONTACT_POINTS=kong-database\" \\\n  kong:latest kong migrations bootstrap\n```\n\n----------------------------------------\n\nTITLE: Define an Accessor in Hyperf Model (getFooAttribute)\nDESCRIPTION: Defines an accessor for the `first_name` attribute in a Hyperf model. This method is automatically called when the `first_name` attribute is accessed. It receives the raw attribute value, allowing for processing before returning the result. In this example, the first letter of the first name is capitalized.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/mutators.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Hyperf\\DbConnection\\Model\\Model;\n\nclass User extends Model\n{\n    /**\n     * 獲取使用者的姓名.\n     * This is a accessor for `first_name` attribute.\n     *\n     * @param  string  $value\n     * @return string\n     */\n    public function getFirstNameAttribute($value)\n    {\n        return ucfirst($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fswatch on Ubuntu/Debian\nDESCRIPTION: This command installs the fswatch utility on Ubuntu or Debian-based systems using the apt-get package manager.  Fswatch is required for the FswatchDriver.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/watcher.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napt-get install fswatch\n```\n\n----------------------------------------\n\nTITLE: Getting Attribute Value - HTML\nDESCRIPTION: Example of retrieving a specific attribute value from the attribute bag using the `get()` method. The method accepts the attribute name and an optional default value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_35\n\nLANGUAGE: html\nCODE:\n```\n    <div class=\"{{ $attributes->get(\"class\", \"default\") }}\">\n        <!-- 元件內容 -->\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Default Metric Interval Configuration\nDESCRIPTION: Configures the interval (in seconds) at which default metrics are pushed to the metric backend.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/metric.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n'default_metric_interval' => env('DEFAULT_METRIC_INTERVAL', 5),\n```\n\n----------------------------------------\n\nTITLE: Updating or inserting records using updateOrInsert in Hyperf\nDESCRIPTION: This snippet demonstrates the `updateOrInsert` method, which either updates an existing record if it matches the given conditions or inserts a new record if no match is found.  It takes two arrays: conditions for finding the record, and the values to update or insert.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->updateOrInsert(\n    ['email' => 'john@example.com', 'name' => 'John'],\n    ['votes' => '2']\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing ClassLoader in PHPUnit entry file (tests/bootstrap.php)\nDESCRIPTION: This snippet shows how to initialize the ClassLoader in the PHPUnit bootstrap file `tests/bootstrap.php`.  Similar to the main entry point, this is required to support AOP functionality. The initialization code `Hyperf\\Di\\ClassLoader::init();` needs to be added after the `autoload.php` include.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/2.0.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nerror_reporting(E_ALL);\ndate_default_timezone_set('Asia/Shanghai');\n\n! defined('BASE_PATH') && define('BASE_PATH', dirname(__DIR__, 1));\n! defined('SWOOLE_HOOK_FLAGS') && define('SWOOLE_HOOK_FLAGS', SWOOLE_HOOK_ALL);\n\nSwoole\\Runtime::enableCoroutine(true);\n\nrequire BASE_PATH . '/vendor/autoload.php';\n\nHyperf\\Di\\ClassLoader::init();\n\n$container = require BASE_PATH . '/config/container.php';\n\n$container->get(Hyperf\\Contract\\ApplicationInterface::class);\n\n```\n\n----------------------------------------\n\nTITLE: Querying Users Without Type Casting PHP\nDESCRIPTION: This snippet shows how to query users and retrieve the last posted time without type casting. The `last_posted_at` attribute in the result set will be a string.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/mutators.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Post;\nuse App\\User;\n\n$users = User::select([\n    'users.*',\n    'last_posted_at' => Post::selectRaw('MAX(created_at)')\n            ->whereColumn('user_id', 'users.id')\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Default Metric Interval Configuration\nDESCRIPTION: This PHP code snippet defines the interval in seconds for pushing default metrics. The configuration is retrieved from the environment variable `DEFAULT_METRIC_INTERVAL` with a fallback to `5`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n'default_metric_interval' => env('DEFAULT_METRIC_INTERVAL', 5),\n```\n\n----------------------------------------\n\nTITLE: Check if There Are More Pages with Paginator\nDESCRIPTION: Checks if there are more pages in total in the paginator.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/paginator.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$hasMorePages = $paginator->hasMorePages();\n```\n\n----------------------------------------\n\nTITLE: Access Many-to-Many Relation as Dynamic Property (PHP)\nDESCRIPTION: This code demonstrates how to access the collection of associated Role models through the User model using the dynamically defined roles property. It retrieves a specific user and then iterates through the associated roles.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/relationship.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$user = User::query()->find(1);\n\nforeach ($user->roles as $role) {\n    //\n}\n\n```\n\n----------------------------------------\n\nTITLE: Required If Rule with Closure\nDESCRIPTION: The `required_if:anotherfield,value,…` rule validates that the field under validation is required if another field has a specific value, or if a given closure returns true. This example shows how to use a closure with the `Rule::requiredIf` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/validation.md#_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\nuse Hyperf\\Validation\\Rule;\n\n$validator = $this->validationFactory->make($request->all(), [\n    'role_id' => Rule::requiredIf($request->user()->is_admin),\n]);\n\n$validator = $this->validationFactory->make($request->all(), [\n    'role_id' => Rule::requiredIf(function () use ($request) {\n        return $request->user()->is_admin;\n    }),\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Skeleton and Cloning Hyperf Repository (Bash)\nDESCRIPTION: This snippet demonstrates how to install the Hyperf skeleton project using composer and clone the Hyperf component library project. This sets up the initial project structure for component development.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/component-guide/intro.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n// 安裝 skeleton，並配置完成\ncomposer create-project hyperf/hyperf-skeleton \n\n// 克隆 hyperf 元件庫專案，這裡記得要替換 hyperf 為您的 Github ID，也就是克隆您所 Fork 的專案\ngit clone git@github.com:hyperf/hyperf.git\n```\n\n----------------------------------------\n\nTITLE: Install PgSQL Driver via Composer\nDESCRIPTION: This command installs the PgSQL driver for Hyperf using Composer. It requires Swoole >= 5.1.0 and `--enable-swoole-pgsql` to be enabled during compilation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/quick-start.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/database-pgsql\n```\n\n----------------------------------------\n\nTITLE: Static Code Analysis for Hyperf Upgrade\nDESCRIPTION: This command runs a static code analysis to check for potential issues when upgrading from Hyperf 2.2 to 3.0. The framework adds more type restrictions, making static analysis crucial for ensuring compatibility.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/CHANGELOG-3.0.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer analysis\n```\n\n----------------------------------------\n\nTITLE: Paginating with a Page Size\nDESCRIPTION: This example shows how to specify the number of items per page when paginating search results using the `paginate` method.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/scout.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$orders = App\\Order::search('Star Trek')->paginate(15);\n```\n\n----------------------------------------\n\nTITLE: AMQP Configuration - PHP\nDESCRIPTION: Updates the AMQP configuration to support multiplexing. This includes changes to the 'connections' and 'max_idle_channels' settings. The AMQP component has been fully upgraded to support multiplexing, requiring configuration changes.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.2.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'host' => env('AMQP_HOST', 'localhost'),\n        'port' => (int) env('AMQP_PORT', 5672),\n        'user' => env('AMQP_USER', 'guest'),\n        'password' => env('AMQP_PASSWORD', 'guest'),\n        'vhost' => env('AMQP_VHOST', '/'),\n        'concurrent' => [\n            'limit' => 1,\n        ],\n        'pool' => [\n            // 同時開啓的連接數\n            // 因為新版本連接是支持多路複用的，所以可以用極少的連接數達到很高的併發\n            'connections' => 2,\n        ],\n        'params' => [\n            'insist' => false,\n            'login_method' => 'AMQPLAIN',\n            'login_response' => null,\n            'locale' => 'en_US',\n            'connection_timeout' => 3,\n            'read_write_timeout' => 6,\n            'context' => null,\n            'keepalive' => true,\n            'heartbeat' => 3,\n            'channel_rpc_timeout' => 0.0,\n            'close_on_destruct' => false,\n            // 多路複用中閒置 Channel 的最大值，超過這個數量後，會關閉多餘的限制 Channel\n            'max_idle_channels' => 10,\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Changing Fetch Mode to Array - PHP\nDESCRIPTION: Shows how to change the default fetch mode to return results as an array instead of `stdClass` objects. This is achieved by listening to the `Hyperf\\Database\\Events\\StatementPrepared` event and setting the fetch mode to `PDO::FETCH_ASSOC` within the event listener's `process` method. Requires `Hyperf\\Database\\Events\\StatementPrepared` and `PDO`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/querybuilder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Listener;\n\nuse Hyperf\\Database\\Events\\StatementPrepared;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse PDO;\n\n#[Listener]\nclass FetchModeListener implements ListenerInterface\n{\n    public function listen(): array\n    {\n        return [\n            StatementPrepared::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        if ($event instanceof StatementPrepared) {\n            $event->statement->setFetchMode(PDO::FETCH_ASSOC);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Box on macOS\nDESCRIPTION: These commands download, move, and set execute permissions for the Box binary on macOS. It ensures the box command is available in the system's PATH. The download URL points to the v0.5.5 release for x86_64 architecture.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/eco/box.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/hyperf/box/releases/download/v0.5.5/box_x86_64_macos -O box\nsudo mv ./box /usr/local/bin/box\nsudo chmod 755 /usr/local/bin/box\n// 確保 /usr/local/bin/box 在你的 $PATH 環境中，或者將 `box` 放到你想要的任意 $PATH 路徑中\n```\n\n----------------------------------------\n\nTITLE: Displaying Command Description (Bash)\nDESCRIPTION: Shows the help message including the description for a command using the `php bin/hyperf.php demo:command --help` command. The output displays the command description.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/command.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/hyperf.php demo:command --help\n# 輸出\n...\nDescription:\n  Hyperf Demo Command\n\n\n```\n\n----------------------------------------\n\nTITLE: Removing Service from Network\nDESCRIPTION: This command removes a service from an old Docker network. It updates the service configuration to exclude the specified network. Requires Docker.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\ndocker service update --network-rm old-network service_name\n```\n\n----------------------------------------\n\nTITLE: Pessimistic locking with sharedLock and lockForUpdate in Hyperf\nDESCRIPTION: This snippet demonstrates how to implement pessimistic locking using `sharedLock` and `lockForUpdate`. `sharedLock` prevents data modification until the transaction is committed, while `lockForUpdate` prevents other shared locks.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/querybuilder.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->sharedLock()->get();\n\nDb::table('users')->where('votes', '>', 100)->lockForUpdate()->get();\n```\n\n----------------------------------------\n\nTITLE: Set Memory Limit in PHP INI\nDESCRIPTION: This snippet shows how to configure the `memory_limit` setting in the php.ini file. Setting it to `-1` removes the memory limit, allowing the application to use as much memory as needed.  This helps to avoid out-of-memory errors.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/quick-start/questions.md#_snippet_5\n\nLANGUAGE: INI\nCODE:\n```\nmemory_limit=-1\n```\n\n----------------------------------------\n\nTITLE: Define a PHP Object - Hyperf\nDESCRIPTION: This snippet defines a simple PHP object, `MathValue`, with a public property `$value` and a constructor. This object is used to demonstrate how to return PHP objects from a Hyperf JSON-RPC service.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/json-rpc.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\JsonRpc;\n\nclass MathValue\n{\n    public $value;\n\n    public function __construct($value)\n    {\n        $this->value = $value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Model with Custom Data Types\nDESCRIPTION: This example showcases a model with custom data types. It defines properties with different types, including integers, strings, and Carbon dates.  The `$casts` array specifies how these properties should be cast when retrieved from the database.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/gen.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Model;\n\n/**\n * @property int $id\n * @property int $count\n * @property string $float_num // decimal\n * @property string $str\n * @property string $json\n * @property \\Carbon\\Carbon $created_at\n * @property \\Carbon\\Carbon $updated_at\n */\nclass UserExt extends Model\n{\n    /**\n     * The table associated with the model.\n     */\n    protected ?string $table = 'user_ext';\n\n    /**\n     * The attributes that are mass assignable.\n     */\n    protected array $fillable = ['id', 'count', 'float_num', 'str', 'json', 'created_at', 'updated_at'];\n\n    /**\n     * The attributes that should be cast to native types.\n     */\n    protected array $casts = ['id' => 'integer', 'count' => 'integer', 'float_num' => 'string', 'created_at' => 'datetime', 'updated_at' => 'datetime'];\n\n}\n```\n\n----------------------------------------\n\nTITLE: NSQ Socket Basics Diagram\nDESCRIPTION: This PlantUML diagram illustrates the fundamental socket communication between a client and a server, including connection establishment, data exchange using send/recv, and connection closure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nsq.md#_snippet_9\n\nLANGUAGE: PlantUML\nCODE:\n```\n@startuml\n\nautonumber\nhide footbox\ntitle **Socket 基礎**\n\nparticipant \"客戶端\" as client\nparticipant \"伺服器\" as server #orange\n\nactivate client\nactivate server\n\nnote right of server: 建立連線\nclient -> server: socket->connect(ip, port)\n\n...\nnote right of server: 多次通訊 send/recv\nclient -> server: socket->send()\nserver-> client: socket->recv()\n...\n\nnote right of server: 關閉連線\nclient->server: socket->close()\n\ndeactivate client\ndeactivate server\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Configure Composer Repository for Local Hyperf Path\nDESCRIPTION: This snippet configures the `composer.json` file to use a local path for the Hyperf components. This allows the `hyperf-skeleton` project to directly use the local `hyperf` directory as a dependency. The `type` is set to \"path\" and the `url` points to the `src` directory of the `hyperf` project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/component-guide/intro.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"repositories\": {\n        \"hyperf\": {\n            \"type\": \"path\",\n            \"url\": \"../hyperf/src/*\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Where Length Statement - Hyperf PHP\nDESCRIPTION: Demonstrates the usage of `whereJsonLength` in Hyperf to query the length of a `JSON` array. It provides examples for checking if the length is equal to a value, or using operators such as greater than.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/querybuilder.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereJsonLength('options->languages', 0)\n    ->get();\n\n$users = Db::table('users')\n    ->whereJsonLength('options->languages', '>', 1)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Renaming a Column using Schema Builder in PHP\nDESCRIPTION: This PHP snippet renames a database column using Hyperf's Schema Builder. The code renames the 'from' column to 'to' in the 'users' table. The `doctrine/dbal` dependency is likely required for this functionality.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/db/migration.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nSchema::table('users', function (Blueprint $table) {\n    // Rename field from from to to\n    $table->renameColumn('from', 'to')->change();\n});\n```\n\n----------------------------------------\n\nTITLE: Logging into Aliyun Image Registry\nDESCRIPTION: This command logs into the Aliyun image registry. Requires Docker.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_51\n\nLANGUAGE: shell\nCODE:\n```\ndocker login --username=xxxx registry.cn-shanghai.aliyuncs.com\n```\n\n----------------------------------------\n\nTITLE: Update config/autoload/exceptions.php - PHP\nDESCRIPTION: This snippet shows how to configure `Hyperf\\HttpServer\\Exception\\Handler\\HttpExceptionHandler` in the `config/autoload/exceptions.php` file. This is necessary to handle HTTP exceptions (404, 405) consistently and provides a unified response experience.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/2.0.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'handler' => [\n        'http' => [\n            Hyperf\\HttpServer\\Exception\\Handler\\HttpExceptionHandler::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Blade Comments\nDESCRIPTION: This Blade template shows how to define comments using `{{-- --}}`. Blade comments are not included in the rendered HTML.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/view-engine.md#_snippet_23\n\nLANGUAGE: blade\nCODE:\n```\n{{-- This comment will not be present in the rendered HTML --}}\n```\n\n----------------------------------------\n\nTITLE: Install Qiniu Flysystem Adapter - Shell\nDESCRIPTION: Installs the `overtrue/flysystem-qiniu` component via Composer. This is required when using Qiniu as the filesystem.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.2.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"overtrue/flysystem-qiniu:^2.0\"\n```\n\n----------------------------------------\n\nTITLE: Run MySQL Container\nDESCRIPTION: This command runs a MySQL 5.7 container with a specified root password and port mapping. It mounts a volume for persistent data storage and connects the container to the `default-network` network for inter-container communication.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run --name mysql -v /srv/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=xxxx -p 3306:3306 --rm --network default-network -d mysql:5.7\n```\n\n----------------------------------------\n\nTITLE: Installing Box on Linux x86_64\nDESCRIPTION: These commands download, move, and set execute permissions for the Box binary on Linux (x86_64 architecture). It ensures the box command is available in the system's PATH. The download URL points to the v0.5.5 release.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/eco/box.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/hyperf/box/releases/download/v0.5.5/box_x86_64_linux -O box\nsudo mv ./box /usr/local/bin/box\nsudo chmod 755 /usr/local/bin/box\n// 確保 /usr/local/bin/box 在你的 $PATH 環境中，或者將 `box` 放到你想要的任意 $PATH 路徑中\n```\n\n----------------------------------------\n\nTITLE: Adding TLinux Yum Repository\nDESCRIPTION: This snippet configures the yum package manager to use the TLinux repository, which provides optimized kernel packages for CentOS. The repository information is written to `/etc/yum.repos.d/CentOS-TLinux.repo`. It is important to verify the gpgkey URL and baseurl for correctness.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/tutorial/docker-swarm.md#_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\ntee /etc/yum.repos.d/CentOS-TLinux.repo <<-'EOF'\n[Tlinux]\nname=Tlinux for redhat/centos $releasever - $basearch\nfailovermethod=priority\ngpgcheck=0\ngpgkey=http://mirrors.tencentyun.com/epel/RPM-GPG-KEY-EPEL-7\nenabled=1\nbaseurl=https://mirrors.tencent.com/tlinux/2.4/tlinux/x86_64/\nEOF\n```\n\n----------------------------------------\n\nTITLE: Updating Config Provider Structure in Hyperf\nDESCRIPTION: The structure of the ConfigProvider class has been adjusted. This snippet shows the previous and current data structures of the ConfigProvider.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/changelog/1.1.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n'scan' => [\n    'paths' => [\n        __DIR__,\n    ],\n    'collectors' => [],\n],\n\n'annotations' => [\n    'scan' => [\n        'paths' => [\n            __DIR__,\n        ],\n        'collectors' => [],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: This GraphQL query invokes the 'hello' query defined in the GraphQLController. It passes the string \"graphql\" as the 'name' argument to the 'hello' resolver.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/graphql.md#_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n    hello(name: \"graphql\")\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Undefined Offset Error - Hyperf PHP\nDESCRIPTION: This code snippet demonstrates an example where accessing an undefined offset in an array will trigger a PHP Notice. When the `ErrorExceptionHandler` listener is configured, this notice is converted into an `ErrorException`. Without the listener, the error is a simple notice that doesn't halt execution.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/exception-handler.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ntry {\n    $a = [];\n    var_dump($a[1]);\n} catch (\\Throwable $throwable) {\n    var_dump(get_class($throwable), $throwable->getMessage());\n}\n\n// string(14) \"ErrorException\"\n// string(19) \"Undefined offset: 1\"\n\n```\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nPHP Notice:  Undefined offset: 1 in IndexController.php on line 24\n\nNotice: Undefined offset: 1 in IndexController.php on line 24\nNULL\n```\n\n----------------------------------------\n\nTITLE: Trait Injection Example - IndexController\nDESCRIPTION: This PHP code shows a class that uses the `TestTrait` and has a conflicting namespace for `ResponseInterface`, leading to an injection error.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/questions.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface; # A conflicting namespace containing a ResponseInterface class\n\nclass IndexController\n{\n    use TestTrait;\n    // Error while injecting dependencies into App\\Controller\\IndexController: No entry or class found for 'Psr\\Http\\Message\\ResponseInterface'\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Validation Config\nDESCRIPTION: Publishes the validation configuration files for Hyperf using the `vendor:publish` command. This step makes the validation configuration accessible and customizable.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/src/validation/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/validation\n```\n\n----------------------------------------\n\nTITLE: Customizing Cache TTL in Model - PHP\nDESCRIPTION: This code snippet shows how to define a custom cache TTL for a specific model by implementing the `getCacheTTL()` method. The method should return the desired TTL in seconds or null to use the default TTL from the configuration.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/model-cache.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass User extends Model implements CacheableInterface\n{\n    use Cacheable;\n    \n    /**\n     * 缓存 10 分钟，返回 null 则使用配置文件中设置的超时时间\n     * @return int|null\n     */\n    public function getCacheTTL(): ?int\n    {\n        return 600;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Injection with @Inject Annotation in PHP 8\nDESCRIPTION: This code demonstrates how to use the `@Inject` annotation in PHP 8 to inject dependencies through member property type declarations, instead of the `@var` declaration. This simplifies dependency injection by leveraging PHP 7.4+ type hints.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog-v2.0.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Example {\n    /**\n     * @Inject\n     */\n    private ExampleService $exampleService;\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf DB Connection via Composer\nDESCRIPTION: Installs the hyperf/db-connection package using Composer. This command is intended for Hyperf framework projects to manage database connections.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/quick-start.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/db-connection\n```\n\n----------------------------------------\n\nTITLE: Custom Validator Usage - PHP\nDESCRIPTION: Illustrates how to use a custom validator in a FormRequest. This example uses the 'foo' validator defined in the previous snippet to validate the 'name' field.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/validation.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Request;\n\nuse Hyperf\\Validation\\Request\\FormRequest;\n\nclass DemoRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     */\n    public function rules(): array\n    {\n        return [\n            // use foo validator\n            'name' => 'foo'\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration for Quick File Opening in IDE\nDESCRIPTION: This configuration block allows you to specify your preferred IDE for quick file opening using the `gen` command. The `DEVTOOL_IDE` environment variable determines which IDE will be used.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/devtool.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    /**\n     * Supported IDEs: \"sublime\", \"textmate\", \"cursor\", \"emacs\", \"macvim\", \"phpstorm\", \"idea\",\n     *        \"vscode\", \"vscode-insiders\", \"vscode-remote\", \"vscode-insiders-remote\",\n     *        \"atom\", \"nova\", \"netbeans\", \"xdebug\"\n     */\n    'ide' => env('DEVTOOL_IDE', ''),\n    //...\n];\n```\n\n----------------------------------------\n\nTITLE: Test Application Endpoint\nDESCRIPTION: This command tests the application endpoint by sending an HTTP request to port 9501 of the local machine. It expects a response from the application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_26\n\nLANGUAGE: Shell\nCODE:\n```\ncurl http://127.0.0.1:9501/\n```\n\n----------------------------------------\n\nTITLE: Remove doctrine/common Component - composer.json\nDESCRIPTION: Removes the `doctrine/common` component from the project's dependencies using composer. This resolves a dependency conflict between `doctrine/common` and `hyperf/utils`. After removal, updates the hyperf packages to make sure dependencies are correctly resolved.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.1.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# 移除組件\ncomposer remove doctrine/common\n# 更新\ncomposer update \"hyperf/*\" -o\n```\n\n----------------------------------------\n\nTITLE: Install Hyperf GraphQL\nDESCRIPTION: This command installs the Hyperf GraphQL component via Composer. It adds the necessary dependencies to your project.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/graphql.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/graphql\n```\n\n----------------------------------------\n\nTITLE: Starting the Hyperf Nano application\nDESCRIPTION: Starts the Hyperf Nano application using the PHP CLI.  Assumes that the `index.php` file contains the application definition.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/nano.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nphp index.php start\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Watcher\nDESCRIPTION: This command installs the hyperf/watcher package as a development dependency using Composer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/watcher.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/watcher --dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Container in Hyperf with PHP\nDESCRIPTION: This snippet shows how to configure the dependency injection container in Hyperf. It creates a new container using DefinitionSourceFactory, checks if it implements the ContainerInterface, and sets it as the application context.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Di\\Definition\\DefinitionSourceFactory;\nuse Hyperf\\Utils\\ApplicationContext;\n\n$container = new Container((new DefinitionSourceFactory(true))());\n\nif (! $container instanceof \\Psr\\Container\\ContainerInterface) {\n    throw new RuntimeException('The dependency injection container is invalid.');\n}\nreturn ApplicationContext::setContainer($container);\n```\n\n----------------------------------------\n\nTITLE: Custom Metric Usage Example\nDESCRIPTION: This PHP code snippet demonstrates how to inject the `MetricFactoryInterface` and use it to create a counter for order creation. It shows how to define labels and increment the counter.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/metric.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse App\\Model\\Order;\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\Metric\\Contract\\MetricFactoryInterface;\n\nclass IndexController extends AbstractController\n{\n    #[Inject]\n    private MetricFactoryInterface $metricFactory;\n\n    public function create(Order $order)\n    {\n        $counter = $this->metricFactory->makeCounter('order_created', ['order_type']);\n        $counter->with($order->type)->add(1);\n        // 訂單邏輯...\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Run Phar Archive\nDESCRIPTION: Runs a Phar archive using the `php` command. This command executes the Phar package, starting the Hyperf application.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/phar.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nphp your_project.phar start\n```\n\n----------------------------------------\n\nTITLE: Executing Hyperf Nano Command\nDESCRIPTION: Executes a custom command-line command in a Hyperf Nano application. Replace 'echo' with the actual command name.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nano.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nphp index.php echo\n```\n\n----------------------------------------\n\nTITLE: Container Configuration in container.php - PHP\nDESCRIPTION: This snippet shows the updated content of the `config/container.php` file.  It instantiates a `Hyperf\\Di\\Container`, sets it as the application context, and throws an exception if the container is invalid. It utilizes `Hyperf\\Di\\Definition\\DefinitionSourceFactory` to create the container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/changelog/1.1.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Container;\nuse Hyperf\\Di\\Definition\\DefinitionSourceFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$container = new Container((new DefinitionSourceFactory(true))());\n\nif (! $container instanceof \\Psr\\Container\\ContainerInterface) {\n    throw new RuntimeException('The dependency injection container is invalid.');\n}\nreturn ApplicationContext::setContainer($container);\n```\n\n----------------------------------------\n\nTITLE: Update Dockerfile for Hyperf\nDESCRIPTION: This Dockerfile snippet demonstrates how to optimize the application startup time and memory usage in a production environment. It copies the project files, installs composer dependencies, and executes `php bin/hyperf.php` during the image build process to pre-generate proxy classes and annotation scan caches.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/upgrade/2.0.md#_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV TIMEZONE=${timezone:-\"Asia/Shanghai\"} \\\n    APP_ENV=prod \\\n    SCAN_CACHEABLE=(true)\n\nCOPY . /opt/www\nRUN composer install --no-dev -o && php bin/hyperf.php\n\nEXPOSE 9501\n\nENTRYPOINT [\"php\", \"/opt/www/bin/hyperf.php\", \"start\"]\n\n```\n\n----------------------------------------\n\nTITLE: Calling Async Queue Driver - PHP\nDESCRIPTION: This snippet illustrates how to retrieve and use a specific asynchronous queue driver in Hyperf. It obtains the 'other' queue driver from the `DriverFactory` using the `ApplicationContext` and then pushes a new `ExampleJob` onto the queue.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Hyperf\\AsyncQueue\\Driver\\DriverFactory;\nuse Hyperf\\Context\\ApplicationContext;\n\n$driver = ApplicationContext::getContainer()->get(DriverFactory::class)->get('other');\nreturn $driver->push(new ExampleJob());\n\n```\n\n----------------------------------------\n\nTITLE: ConfigProvider file structure for 1.0 PHP\nDESCRIPTION: This snippet shows the structure of the ConfigProvider file in Hyperf 1.0. The scan paths were under the 'scan' key.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/1.1.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nclass ConfigProvider\n{\n\n    public function __invoke(): array\n    {\n        return [\n            'scan' => [\n                'paths' => [\n                    __DIR__,\n                ],\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Deploy Test YML\nDESCRIPTION: This is a docker-compose file for deploying the application in the test environment using Docker Swarm. It defines the service, image, environment variables, ports, deploy configuration, networks, and configs.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_24\n\nLANGUAGE: YML\nCODE:\n```\nversion: '3.7'\nservices:\n  demo:\n    image: $REGISTRY_URL/$PROJECT_NAME:test\n    environment:\n      - \"APP_PROJECT=demo\"\n      - \"APP_ENV=test\"\n    ports:\n      - 9501:9501\n    deploy:\n      replicas: 1\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 5\n      update_config:\n        parallelism: 2\n        delay: 5s\n        order: start-first\n    networks:\n      - default-network\n    configs:\n      - source: demo_v1.0\n        target: /opt/www/.env\nconfigs:\n  demo_v1.0:\n    external: true\nnetworks:\n  default-network:\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Publishing NATS Message\nDESCRIPTION: This code demonstrates how to publish a message to a NATS subject using the `publish` method of the `DriverInterface`. The `publish` method takes the subject and the message payload as arguments. In this example, the message is an array containing an 'id' key with the value 'Hyperf'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/nats.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Hyperf\\HttpServer\\Annotation\\AutoController;\nuse Hyperf\\Nats\\Driver\\DriverInterface;\n\n#[AutoController(prefix: \"nats\")]\nclass NatsController extends AbstractController\n{\n    #[Inject]\n    protected DriverInterface $nats;\n\n    public function publish()\n    {\n        $res = $this->nats->publish('hyperf.demo', [\n            'id' => 'Hyperf',\n        ]);\n\n        return $this->response->success($res);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Attribute Values (HTML)\nDESCRIPTION: This snippet demonstrates how to retrieve the value of a specific attribute from the attribute bag using the `get()` method. A default value can be provided as the second argument.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n    <div class=\"{{ $attributes->get(\"class\", \"default\") }}\">\n        <!-- 组件内容 -->\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Trait Injection Example - TestTrait\nDESCRIPTION: This PHP code demonstrates a trait that uses dependency injection to inject a `ResponseInterface`. It highlights a potential conflict if the class using this trait has a conflicting namespace for `ResponseInterface`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/quick-start/questions.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\HttpServer\\Contract\\ResponseInterface; # Namespace containing ResponseInterface class\nuse Hyperf\\Di\\Annotation\\Inject;\n\ntrait TestTrait\n{\n    #[Inject]\n    protected ResponseInterface $response;\n}\n```\n\n----------------------------------------\n\nTITLE: AMQP Consumer Message Return Type (Hyperf < 3.1)\nDESCRIPTION: Shows the return type of the `consumeMessage` method in AMQP consumers before Hyperf 3.1. It returned a string representing the acknowledgment result.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/upgrade/3.1.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// v3.1之前\npublic function consumeMessage($data, AMQPMessage $message): string\n{\n    return Result::ACK;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Box on Windows\nDESCRIPTION: This snippet provides the command to download the Hyperf Box executable on Windows. It instructs users to add the executable to the system's PATH environment variable and emphasizes the need to use `box.exe` instead of `box` when executing commands.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/eco/box.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\ncurl -o box.exe https://github.com/hyperf/box/releases/download/v0.5.5/box_x64_windows.exe\n// 將 `box.exe` 放到你想要的任意 Path 環境變量路徑中，同時 Windows 版本在執行時需要在命令行中使用 `box.exe` 而不是 `box`\n```\n\n----------------------------------------\n\nTITLE: JSON Pagination Response\nDESCRIPTION: This JSON snippet demonstrates the structure of a paginated response when using resources in Hyperf. It includes the `data` array containing the resource items, `links` for navigation, and `meta` for pagination details.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/db/resource.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Eladio Schroeder Sr.\",\n            \"email\": \"therese28@example.com\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Liliana Mayert\",\n            \"email\": \"evandervort@example.com\"\n        }\n    ],\n    \"links\":{\n        \"first\": \"/pagination?page=1\",\n        \"last\": \"/pagination?page=1\",\n        \"prev\": null,\n        \"next\": null\n    },\n    \"meta\":{\n        \"current_page\": 1,\n        \"from\": 1,\n        \"last_page\": 1,\n        \"path\": \"/pagination\",\n        \"per_page\": 15,\n        \"to\": 10,\n        \"total\": 10\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Driver\nDESCRIPTION: This PHP code demonstrates how to register a custom service governance driver with the `DriverManager`.  A listener (`RegisterDriverListener`) is created to listen for the `BootApplication` event.  In the `process` method, the custom driver (`FooDriver`) is registered with the `DriverManager` under the name 'foo'.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/service-register.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n *\n * @link     https://www.hyperf.io\n * @document https://hyperf.wiki\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\nnamespace App\\ServiceGovernance\\Listener;\n\nuse App\\ServiceGovernance\\FooDriver;\nuse Hyperf\\Event\\Annotation\\Listener;\nuse Hyperf\\Event\\Contract\\ListenerInterface;\nuse Hyperf\\Framework\\Event\\BootApplication;\nuse Hyperf\\ServiceGovernance\\DriverManager;\n\n#[Listener]\nclass RegisterDriverListener implements ListenerInterface\n{\n    protected DriverManager $driverManager;\n\n    public function __construct(DriverManager $manager)\n    {\n        $this->driverManager = $manager;\n    }\n\n    public function listen(): array\n    {\n        return [\n            BootApplication::class,\n        ];\n    }\n\n    public function process(object $event)\n    {\n        $this->driverManager->register('foo', make(FooDriver::class));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Pagination Response Example\nDESCRIPTION: This JSON example shows the structure of a paginated response in Hyperf, including the 'data', 'links', and 'meta' keys. It demonstrates how pagination information is conveyed in the API response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/resource.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Eladio Schroeder Sr.\",\n            \"email\": \"therese28@example.com\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Liliana Mayert\",\n            \"email\": \"evandervort@example.com\"\n        }\n    ],\n    \"links\":{\n        \"first\": \"/pagination?page=1\",\n        \"last\": \"/pagination?page=1\",\n        \"prev\": null,\n        \"next\": null\n    },\n    \"meta\":{\n        \"current_page\": 1,\n        \"from\": 1,\n        \"last_page\": 1,\n        \"path\": \"/pagination\",\n        \"per_page\": 15,\n        \"to\": 10,\n        \"total\": 10\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling and Deploying Docker Stack\nDESCRIPTION: This set of commands pulls a Docker image from a registry and deploys a Docker Stack. Requires Docker Swarm.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_54\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull registry.cn-shanghai.aliyuncs.com/your_namespace/your_project:latest\ndocker stack deploy -c /opt/www/your_project/deploy.yml --with-registry-auth your_project\n```\n\n----------------------------------------\n\nTITLE: Configure Span Tags\nDESCRIPTION: Configures custom Span Tag names for HTTP client, Redis client, and database client in the `config/autolaod/opentracing.php` file.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/tracer.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'tags' => [\n        // HTTP client (Guzzle)\n        'http_client' => [\n            'http.url' => 'http.url',\n            'http.method' => 'http.method',\n            'http.status_code' => 'http.status_code',\n        ],\n        // Redis client\n        'redis' => [\n            'arguments' => 'arguments',\n            'result' => 'result',\n        ],\n        // database client (hyperf/database)\n        'db' => [\n            'db.query' => 'db.query',\n            'db.statement' => 'db.statement',\n            'db.query_time' => 'db.query_time',\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Config Provider Scan Paths After Change\nDESCRIPTION: This snippet shows the updated structure of the config provider's scan paths configuration in Hyperf. The configuration is now nested under the `'annotations'` key. This change allows for more granular control over the annotation scanning process within the framework, specifying which paths should be scanned for annotations and which collectors should be used.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/1.1.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n'annotations' => [\n    'scan' => [\n        'paths' => [\n            __DIR__,\n        ],\n        'collectors' => [],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Registering SerializerFactory for Object Serialization in Hyperf\nDESCRIPTION: This snippet configures Hyperf to support object serialization and deserialization by mapping the `NormalizerInterface` to a `SerializerFactory` instance. It requires the installation of `symfony/serializer` and `symfony/property-access`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/json-rpc.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Hyperf\\Serializer\\SerializerFactory;\nuse Hyperf\\Serializer\\Serializer;\n\nreturn [\n    Hyperf\\Contract\\NormalizerInterface::class => new SerializerFactory(Serializer::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a Component with a Named Slot in Blade\nDESCRIPTION: This snippet defines a component that includes a named slot, `title`, in addition to the default `$slot`.  This allows for injecting content into specific areas within the component template, offering more control over the component's structure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/view-engine.md#_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<!-- /storage/view/components/alert.blade.php -->\n\n<span class=\"alert-title\">{{ $title }}</span>\n\n<div class=\"alert alert-danger\">\n    {{ $slot }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Example Job Class Definition (Incorrect)\nDESCRIPTION: This example shows an incorrect way to define a Job class. It includes the `ContainerInterface` as a dependency, which can cause serialization issues due to the size and complexity of the container.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/async-queue.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Job;\n\nuse Hyperf\\AsyncQueue\\Job;\nuse Psr\\Container\\ContainerInterface;\n\nclass ExampleJob extends Job\n{\n    public $container;\n\n    public $params;\n\n    public function __construct(ContainerInterface $container, $params)\n    {\n        $this->container = $container;\n        $this->params = $params;\n    }\n\n    public function handle()\n    {\n        // 根據參數處理具體邏輯\n        var_dump($this->params);\n    }\n}\n\n$job = make(ExampleJob::class);\n\n```\n\n----------------------------------------\n\nTITLE: Calculate RPN Expression in PHP\nDESCRIPTION: This code snippet demonstrates how to directly calculate an RPN expression using the `Hyperf\\Rpn\\Calculator` class. It initializes the calculator and calls the `calculate` method with the RPN expression and an empty array for variables.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/rpn.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Rpn\\Calculator;\n\n$calculator = new Calculator();\n$calculator->calculate('5 1 2 + 4 * + 3 -', []); // '14'\n```\n\n----------------------------------------\n\nTITLE: CacheEvict Annotation Example\nDESCRIPTION: Illustrates the use of the `CacheEvict` annotation, which actively clears the cache when the method is executed.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/cache.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Service;\n\nuse Hyperf\\Cache\\Annotation\\CacheEvict;\n\nclass UserBookService\n{\n    #[CacheEvict(prefix: \"userBook\", value: \"_#{id}\")]\n    public function updateUserBook(int $id)\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Service with Registry Auth\nDESCRIPTION: This command updates a Docker service with registry authentication.  It's used to address issues arising from password changes in Portainer. Requires Docker.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/tutorial/docker-swarm.md#_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\ndocker service update --with-registry-auth service_name\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Devtool\nDESCRIPTION: Installs the hyperf/devtool package using Composer. This command adds the devtool component to the project's dependencies, enabling code generation and other development-related commands.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/devtool.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer require hyperf/devtool\n```\n\n----------------------------------------\n\nTITLE: WaitGroup Usage Example (PHP)\nDESCRIPTION: Demonstrates the use of WaitGroup to synchronize coroutines. The main coroutine waits for two child coroutines to complete their tasks before continuing. Requires `Hyperf\\Coroutine\\WaitGroup` and the `co` function.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/coroutine.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$wg = new \\Hyperf\\Coroutine\\WaitGroup();\n// 計數器加二\n$wg->add(2);\n// 創建協程 A\nco(function () use ($wg) {\n    // some code\n    // 計數器減一\n    $wg->done();\n});\n// 創建協程 B\nco(function () use ($wg) {\n    // some code\n    // 計數器減一\n    $wg->done();\n});\n// 等待協程 A 和協程 B 運行完成\n$wg->wait();\n```\n\n----------------------------------------\n\nTITLE: Convert Doctrine Annotations to PHP8 Attributes (Hyperf)\nDESCRIPTION: This shell command uses the Hyperf code generator to convert all Doctrine Annotations in the 'app' directory to PHP8 Attributes. It requires the hyperf/code-generator package to be installed via composer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/upgrade/3.0.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require hyperf/code-generator\nphp bin/hyperf.php code:generate -D app\n```\n\n----------------------------------------\n\nTITLE: Implement gRPC Server Method\nDESCRIPTION: This PHP snippet shows the implementation of the `sayHello` method in the `HiController.php` file. It receives a `HiUser` object, creates a `HiReply` object, sets the message and user, and returns the reply. This method handles the gRPC request and constructs the response.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/grpc.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\npublic function sayHello(HiUser $user) \n{\n    $message = new HiReply();\n    $message->setMessage(\"Hello World\");\n    $message->setUser($user);\n    return $message;\n}\n```\n\n----------------------------------------\n\nTITLE: Check for More Pages\nDESCRIPTION: This code snippet shows how to check if there are more pages available after the current page using the `hasMorePages()` method. It returns a boolean value.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/paginator.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nif ($paginator->hasMorePages()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Subquery Joins with joinSub() in Hyperf\nDESCRIPTION: Illustrates how to join a subquery using the `joinSub()` method. This method allows you to treat the result of a subquery as a table in a join operation.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/db/querybuilder.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$latestPosts = Db::table('posts')\n    ->select('user_id', Db::raw('MAX(created_at) as last_post_created_at'))\n    ->where('is_published', true)\n    ->groupBy('user_id');\n\n$users = Db::table('users')\n    ->joinSub($latestPosts, 'latest_posts', function($join) {\n        $join->on('users.id', '=', 'latest_posts.user_id');\n    })->get();\n```\n\n----------------------------------------\n\nTITLE: Publish Validation Component Configuration\nDESCRIPTION: This command publishes the validation language files to the `storage/languages` directory.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/validation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/hyperf.php vendor:publish hyperf/validation\n```\n\n----------------------------------------\n\nTITLE: Adding a Crontab Task to Hyperf Nano\nDESCRIPTION: This example demonstrates how to add a crontab task to a Hyperf Nano application. It schedules a task to execute every second, logging a message to the console.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/nano.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Hyperf\\Contract\\StdoutLoggerInterface;\nuse Hyperf\\Nano\\Factory\\AppFactory;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->addCrontab('* * * * * *', function(){\n    $this->get(StdoutLoggerInterface::class)->info('execute every second!');\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Example Class with Inject Annotation PHP 8\nDESCRIPTION: This code demonstrates how to use type hinting on properties in PHP 8 to replace the @var docblock when using the @Inject annotation in Hyperf.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/changelog/2.2.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nclass Example {\n    /**\n    * @Inject\n    */\n    private ExampleService $exampleService;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Close for WebSocket Client\nDESCRIPTION: Shows how to prevent the WebSocket client from automatically closing the connection after use by passing `false` as the second argument to the `create` method of the `ClientFactory`. This allows for maintaining a persistent WebSocket connection.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/websocket-client.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$autoClose = false;\n$client = $clientFactory->create($host, $autoClose);\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Rate Limit\nDESCRIPTION: Installs the Hyperf Rate Limit component using Composer.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/rate-limit.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require hyperf/rate-limit\n```\n\n----------------------------------------\n\nTITLE: Histogram Interface Definition\nDESCRIPTION: This PHP interface defines the contract for a Histogram metric. It includes methods for setting labels and putting (observing) values.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/en/metric.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ninterface HistogramInterface\n{\n    public function with(string ...$labelValues): self;\n\n    public function put(float $sample);\n}\n```\n\n----------------------------------------\n\nTITLE: Get Current Page Number\nDESCRIPTION: This code snippet demonstrates how to retrieve the current page number from a Paginator instance.  The `currentPage()` method returns an integer representing the current page.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/paginator.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$currentPage = $paginator->currentPage();\n```\n\n----------------------------------------\n\nTITLE: Get Total Item Count with LengthAwarePaginator\nDESCRIPTION: Retrieves the total number of items across all pages. Note: This method is available on `LengthAwarePaginator`, not `Paginator`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-tw/paginator.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$total = $paginator->total();\n```\n\n----------------------------------------\n\nTITLE: Overriding ModelUpdateVisitor\nDESCRIPTION: This code snippet demonstrates how to override the default `ModelUpdateVisitor` in Hyperf.  This allows customizing the data type mapping during model generation. The example shows how to handle the `decimal` type and map it to `decimal:2`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/db/gen.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n/**\n * This file is part of Hyperf.\n *\n * @link     https://www.hyperf.io\n * @document https://hyperf.wiki\n * @contact  group@hyperf.io\n * @license  https://github.com/hyperf/hyperf/blob/master/LICENSE\n */\nnamespace App\\Kernel\\Visitor;\n\nuse Hyperf\\Database\\Commands\\Ast\\ModelUpdateVisitor as Visitor;\nuse Hyperf\\Stringable\\Str;\n\nclass ModelUpdateVisitor extends Visitor\n{\n    /**\n     * Used by `casts` attribute.\n     */\n    protected function formatDatabaseType(string $type): ?string\n    {\n        switch ($type) {\n            case 'tinyint':\n            case 'smallint':\n            case 'mediumint':\n            case 'int':\n            case 'bigint':\n                return 'integer';\n            case 'decimal':\n                // 設置為 decimal，並設置對應精度\n                return 'decimal:2';\n            case 'float':\n            case 'double':\n            case 'real':\n                return 'float';\n            case 'bool':\n            case 'boolean':\n                return 'boolean';\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * Used by `@property` docs.\n     */\n    protected function formatPropertyType(string $type, ?string $cast): ?string\n    {\n        if (! isset($cast)) {\n            $cast = $this->formatDatabaseType($type) ?? 'string';\n        }\n\n        switch ($cast) {\n            case 'integer':\n                return 'int';\n            case 'date':\n            case 'datetime':\n                return '\\\\Carbon\\\\Carbon';\n            case 'json':\n                return 'array';\n        }\n\n        if (Str::startsWith($cast, 'decimal')) {\n            // 如果 cast 為 decimal，則 @property 改為 string\n            return 'string';\n        }\n\n        return $cast;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf Blade Engine\nDESCRIPTION: Installs the Hyperf Blade Engine using Composer, allowing for the use of Blade templates in Hyperf applications. This installs the hyperf/view-engine package.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/view.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require hyperf/view-engine\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Timeout in config.php\nDESCRIPTION: Illustrates configuring the same client request timeout in `config.php`. Unlike `autoload` files, the keys defined directly within the file determine the configuration structure.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/config.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'client' => [\n        'request' => [\n            'timeout' => 10,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Performance Test Results in Hyperf\nDESCRIPTION: This snippet displays the results of a performance test conducted on Hyperf. It shows the average latency, requests per second, and transfer rate. These metrics provide insights into the framework's performance under load.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/README-CN.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nRunning 10s test @ http://127.0.0.1:9501/\n  8 threads and 1024 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency    10.08ms    6.82ms  56.66ms   70.19%\n    Req/Sec    13.17k     5.94k   33.06k    84.12%\n  1049478 requests in 10.10s, 190.16MB read\nRequests/sec: 103921.49\nTransfer/sec:     18.83MB\n```\n\n----------------------------------------\n\nTITLE: Socket Basic Sequence Diagram\nDESCRIPTION: This PlantUML diagram illustrates the basic sequence of operations in a socket communication, including connection establishment, data transfer (send/recv), and connection closing.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/nsq.md#_snippet_10\n\nLANGUAGE: PlantUML\nCODE:\n```\n@startuml\n\nautonumber\nhide footbox\ntitle **Socket 基础**\n\nparticipant \"客户端\" as client\nparticipant \"服务器\" as server #orange\n\nactivate client\nactivate server\n\nnote right of server: 建立连接\nclient -> server: socket->connect(ip, port)\n\n...\nnote right of server: 多次通信 send/recv\nclient -> server: socket->send()\nserver-> client: socket->recv()\n...\n\nnote right of server: 关闭连接\nclient->server: socket->close()\n\ndeactivate client\ndeactivate server\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Gitlab CI Variables\nDESCRIPTION: These are the variables used in the .gitlab-ci.yml file for defining the project name and the registry URL. These variables are used to tag and push the docker image to the registry.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_23\n\nLANGUAGE: YML\nCODE:\n```\nvariables:\n  PROJECT_NAME: demo\n  REGISTRY_URL: registry.cn-shanghai.aliyuncs.com/test_namespace\n```\n\n----------------------------------------\n\nTITLE: Dispatch a Hyperf Event\nDESCRIPTION: Demonstrates how to dispatch an event using the EventDispatcherInterface. The event is dispatched within the register method of the UserService class after the user has been successfully saved.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/event.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Service;\n\nuse Hyperf\\Di\\Annotation\\Inject;\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\nuse App\\Event\\UserRegistered; \n\nclass UserService\n{\n    #[Inject]\n    private EventDispatcherInterface $eventDispatcher;\n    \n    public function register()\n    {\n        // 我們假設存在 User 這個實體\n        $user = new User();\n        $result = $user->save();\n        // 完成賬號註冊的邏輯\n        // 這裏 dispatch(object $event) 會逐個運行監聽該事件的監聽器\n        $this->eventDispatcher->dispatch(new UserRegistered($user));\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Slots in a Component (HTML)\nDESCRIPTION: This shows how to use the `<x-slot>` tag to define content for a named slot (`title`).  Content outside the `<x-slot>` tags is passed to the default `$slot`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-cn/view-engine.md#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n    <x-alert>\n        <x-slot name=\"title\">\n            Server Error\n        </x-slot>\n\n        <strong>Whoops!</strong> Something went wrong!\n    </x-alert>\n```\n\n----------------------------------------\n\nTITLE: Updating Git Version\nDESCRIPTION: Updates the `git` version to resolve the `fatal: git fetch-pack: expected shallow list` error.  This involves installing a new `git` version, removing the old one, and reinstalling `gitlab-runner`.\nSOURCE: https://github.com/hyperf/hyperf/blob/master/docs/zh-hk/tutorial/docker-swarm.md#_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\n$ curl https://setup.ius.io | sh\n$ yum remove -y git\n$ yum -y install git2u\n$ git version\n\n# 重新安裝 gitlab-runner 並重新註冊 gitlab-runner\n$ yum install gitlab-runner\n```"
  }
]