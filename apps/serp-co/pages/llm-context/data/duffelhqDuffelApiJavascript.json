[
  {
    "owner": "duffelhq",
    "repo": "duffel-api-javascript",
    "content": "TITLE: Initializing Duffel API Client with Access Token (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize the Duffel API client with your access token. The access token should be stored in an environment variable for security. It retrieves an aircraft by its Duffel ID as a quick integration test.\nSOURCE: https://github.com/duffelhq/duffel-api-javascript/blob/main/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Duffel } from '@duffel/api'\n\nconst duffel = new Duffel({\n  // Store your access token in an environment variable, keep it secret and only readable on your server\n  token: process.env.DUFFEL_ACCESS_TOKEN,\n})\n\n// To quickly test whether your integration is working, you can get a single aircraft by its Duffel ID\nconst aircraft = await duffel.aircraft.get('arc_00009VMF8AhXSSRnQDI6Hi')\nconsole.log(aircraft)\n```\n\n----------------------------------------\n\nTITLE: Creating Objects (Offer Request) (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create an object, specifically an offer request, using the `create` method. It sets required parameters like slices (origin, destination, departure date), passengers, cabin class and disabling returned offers.\nSOURCE: https://github.com/duffelhq/duffel-api-javascript/blob/main/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst offerRequestResponse = await duffel.offerRequests.create({\n  slices: [\n    {\n      origin: 'NYC',\n      destination: 'ATL',\n      departure_date: '2021-06-21',\n    },\n  ],\n  passengers: [{ type: 'adult' }],\n  cabin_class: 'economy',\n  return_offers: false,\n})\n\nconsole.log(offerRequestResponse.data.id)\n```\n\n----------------------------------------\n\nTITLE: Handling API Errors with Try/Catch (JavaScript)\nDESCRIPTION: This snippet demonstrates how to handle API errors using a try/catch block. It attempts to retrieve a non-existent aircraft and logs the error object to the console.\nSOURCE: https://github.com/duffelhq/duffel-api-javascript/blob/main/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  const test = await duffel.aircraft.get('nonexistent_id')\n  // The request failed, so we won't hit this\n  console.log(test)\n} catch (error) {\n  console.log(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Duffel API Typescript Definitions (JavaScript)\nDESCRIPTION: This snippet shows how to import and use TypeScript types for Duffel API objects. It demonstrates retrieving an aircraft by its ID and assigning the response data to a typed variable `Aircraft`.\nSOURCE: https://github.com/duffelhq/duffel-api-javascript/blob/main/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Aircraft } from '@duffel/api'\n\nconst response = await duffel.aircraft.get('arc_00009VMF8AhXSSRnQDI6Hi')\nconst aircraft: Aircraft = response.data\n```\n\n----------------------------------------\n\nTITLE: Getting a Single Object by ID (JavaScript)\nDESCRIPTION: This snippet demonstrates how to retrieve a single object from the Duffel API by its ID using the `get` method. It fetches aircraft data based on the provided ID.\nSOURCE: https://github.com/duffelhq/duffel-api-javascript/blob/main/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst aircraft = await duffel.aircraft.get('arc_00009VMF8AhXSSRnQDI6Hi')\n```\n\n----------------------------------------\n\nTITLE: Automatic Pagination with `listWithGenerator` (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use automatic pagination with the `listWithGenerator` method and async iterators. It iterates over all airlines and logs each airline to the console.\nSOURCE: https://github.com/duffelhq/duffel-api-javascript/blob/main/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// This is how you can iterate over all the objects using the generator\nconst airlines = duffel.airlines.listWithGenerator()\nfor await (const airline of airlines) {\n  console.log(airline)\n  /* Expecting output similar to:\n   * {\n   *   \"data\": {\n   *     \"name\": \"British Airways\",\n   *     \"id\": \"aln_00001876aqC8c5umZmrRds\",\n   *     \"iata_code\": \"BA\"\n   *   }\n   * }\n   */\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Objects (Order Update) (JavaScript)\nDESCRIPTION: This snippet demonstrates how to update an object, specifically an order, using the `update` method. It updates the `metadata` field of the order with a new `payment_intent_id`.\nSOURCE: https://github.com/duffelhq/duffel-api-javascript/blob/main/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst orderUpdateResponse = await duffel.orders.update(\n  'ord_00009hthhsUZ8W4LxQgkjo',\n  {\n    metadata: {\n      payment_intent_id: 'pit_00009htYpSCXrwaB9DnUm2',\n    },\n  },\n)\n\nconsole.log(orderUpdateResponse.data.id)\n```\n\n----------------------------------------\n\nTITLE: Passing Optional Query Parameters to `get` (JavaScript)\nDESCRIPTION: This snippet shows how to pass optional query parameters to the `get` method when retrieving a single object. It demonstrates retrieving an offer with the `return_available_services` parameter set to true.\nSOURCE: https://github.com/duffelhq/duffel-api-javascript/blob/main/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nduffel.offers.get(offer_id, {\n  return_available_services: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Performing Actions (Confirm Order Cancellation) (JavaScript)\nDESCRIPTION: This snippet demonstrates how to perform an action, specifically confirming an order cancellation, using the `confirm` method. It uses the `order_cancellation_id` to confirm the cancellation.\nSOURCE: https://github.com/duffelhq/duffel-api-javascript/blob/main/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst orderCancellationResponse = await duffel.orderCancellations.confirm(\n  order_cancellation_id,\n)\nconsole.log(orderCancellationResponse.data.id)\n```\n\n----------------------------------------\n\nTITLE: Manual Pagination with `list` (JavaScript)\nDESCRIPTION: This snippet demonstrates how to perform manual pagination using the `list` method. It retrieves the first page of airlines and then retrieves the next page using the `limit` and `after` parameters from the `meta` field of the first page.\nSOURCE: https://github.com/duffelhq/duffel-api-javascript/blob/main/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst firstPage = await duffel.airlines.list()\nconsole.log(firstPage)\n/* Expected output:\n * {\n *   data: [{\n *     name: \"Airbus Industries A380\",\n *     id: \"arc_00009UhD4ongolulWd91Ky\",\n *     iata_code: \"380\"\n *   }, ...],\n *   meta: {\n *     limit: 50,\n *     before: null,\n *     after: 'g3QAAAACZAACaWRtAAAAGmFybF8wMDAwOVZNRTdEQUdpSmp3b21odjJ6ZAAEbmFtZW0AAAAPQWJlbGFnIEF2aWF0aW9u'\n *   }\n * }\n */\n\n// You can then manually paginate by passing in the relevant query parameters\nconst nextPage = await duffel.airlines.list({\n  limit: firstPage.meta.limit,\n  after: firstPage.meta.after,\n})\nconsole.log(nextPage)\n```\n\n----------------------------------------\n\nTITLE: Clearing Metadata (Order Update) (JavaScript)\nDESCRIPTION: This snippet demonstrates how to clear the `metadata` of an order using the `update` method. It passes an empty object for the `metadata` field to remove all existing metadata.\nSOURCE: https://github.com/duffelhq/duffel-api-javascript/blob/main/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst orderUpdateResponse = await duffel.orders.update(\n  'ord_00009hthhsUZ8W4LxQgkjo',\n  {\n    metadata: {},\n  },\n)\n\nconsole.log(orderUpdateResponse.data.id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging (JavaScript)\nDESCRIPTION: This snippet demonstrates how to enable verbose debug logging when initializing the Duffel API client.  Setting `debug: {verbose: true}` will output detailed information about API calls.\nSOURCE: https://github.com/duffelhq/duffel-api-javascript/blob/main/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst duffel = new Duffel({\n  // We recommend storing your access token in an environment variable for security\n  token: process.env.DUFFEL_ACCESS_TOKEN,\n  debug: { verbose: true },\n})\n```\n\n----------------------------------------\n\nTITLE: Using `listWithGenerator` One Object at a Time (JavaScript)\nDESCRIPTION: This snippet demonstrates using the `listWithGenerator` method to retrieve objects one at a time.  It gets the first and (if available) second aircraft objects using `aircraft.next()`.\nSOURCE: https://github.com/duffelhq/duffel-api-javascript/blob/main/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Alternatively, you can go through the objects one by one\nconst aircraft = duffel.aircraft.listWithGenerator()\nconst firstAircraft = await aircraft.next()\nconsole.log(firstAircraft.value)\n/* Expecting output similar to\n * {\n *   \"data\": {\n *     name: \"Airbus Industries A380\",\n *     id: \"arc_00009UhD4ongolulWd91Ky\",\n *     iata_code: \"380\"\n *   }\n * }\n */\nif (!firstAircraft.done) {\n  const secondAircraft = await aircraft.next()\n  console.log(secondAircraft.value)\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Aircraft Data (JavaScript)\nDESCRIPTION: This snippet demonstrates retrieving aircraft data and logging the `aircraft` object to the console.\nSOURCE: https://github.com/duffelhq/duffel-api-javascript/blob/main/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst aircraft = await duffel.aircraft.get('arc_00009VMF8AhXSSRnQDI6Hi')\nconsole.log(aircraft)\n```\n\n----------------------------------------\n\nTITLE: Setting Duffel Access Token (Environment Variable)\nDESCRIPTION: This snippet demonstrates how to configure the Duffel access token as an environment variable in a `.env.local` file.  The `DUFFEL_ACCESS_TOKEN` variable is used to authenticate requests to the Duffel API.\nSOURCE: https://github.com/duffelhq/duffel-api-javascript/blob/main/examples/with-next/README.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nDUFFEL_ACCESS_TOKEN=<YOUR_TOKEN_HERE>\n```\n\n----------------------------------------\n\nTITLE: Error Response JSON Example\nDESCRIPTION: This JSON represents an example error response from the Duffel API. It includes the error type, title, message, documentation URL, code, status, and request ID.\nSOURCE: https://github.com/duffelhq/duffel-api-javascript/blob/main/README.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meta\": { \"status\": 404, \"request_id\": \"Fn6SwqLT_Isf3CAAAEah\" },\n  \"errors\": [\n    {\n      \"type\": \"invalid_request_error\",\n      \"title\": \"Not found\",\n      \"message\": \"The resource you are trying to access does not exist.\",\n      \"documentation_url\": \"https://duffel.com/docs/api/overview/errors\",\n      \"code\": \"not_found\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Aircraft Data JSON Example\nDESCRIPTION: This JSON represents the expected data structure of an aircraft returned by the Duffel API. It contains the aircraft's name, ID, and IATA code.\nSOURCE: https://github.com/duffelhq/duffel-api-javascript/blob/main/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"name\": \"Airbus Industries A380\",\n      \"id\": \"arc_00009UhD4ongolulWd91Ky\",\n      \"iata_code\": \"380\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Duffel Example (Bash)\nDESCRIPTION: This command uses `create-next-app` to bootstrap a new Next.js project named `duffel-next-starter` with the Duffel API example from the specified GitHub repository.  It utilizes either `npx` or `yarn` to execute the command.\nSOURCE: https://github.com/duffelhq/duffel-api-javascript/blob/main/examples/with-next/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpx create-next-app duffel-next-starter --example \"https://github.com/duffelhq/duffel-api-javascript/tree/main/examples/with-next\"\n# or\nyarn create next-app duffel-next-starter --example \"https://github.com/duffelhq/duffel-api-javascript/tree/main/examples/with-next\"\n```"
  }
]