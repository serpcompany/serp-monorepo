[
  {
    "owner": "0x5446",
    "repo": "api4sensevoice",
    "content": "TITLE: Cloning and Setting Up the API4SenseVoice Repository\nDESCRIPTION: Commands to clone the repository and navigate to the project directory. This is the first step in setting up the project locally.\nSOURCE: https://github.com/0x5446/api4sensevoice/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/0x5446/api4sensevoice.git\ncd api4sensevoice\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for API4SenseVoice\nDESCRIPTION: Commands to create a Conda environment, activate it, and install the required dependencies including ffmpeg and the packages listed in requirements.txt.\nSOURCE: https://github.com/0x5446/api4sensevoice/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n api4sensevoice python=3.10\nconda activate api4sensevoice\n\nconda install -c conda-forge ffmpeg\n\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running the WebSocket Real-time Recognition Server\nDESCRIPTION: Main script configuration for running the FastAPI WebSocket server for real-time streaming recognition. Similar to the single sentence server, it sets up command-line arguments and starts the server.\nSOURCE: https://github.com/0x5446/api4sensevoice/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Run the FastAPI app with a specified port.\")\n    parser.add_argument('--port', type=int, default=27000, help='Port number to run the FastAPI app on.')\n    parser.add_argument('--certfile', type=str, default='path_to_your_certfile', help='SSL certificate file')\n    parser.add_argument('--keyfile', type=str, default='path_to_your_keyfile', help='SSL key file')\n    args = parser.parse_args()\n\n    uvicorn.run(app, host=\"0.0.0.0\", port=args.port, ssl_certfile=args.certfile, ssl_keyfile=args.keyfile)\n```\n\n----------------------------------------\n\nTITLE: Initializing WebSocket Connection in Client\nDESCRIPTION: JavaScript code for establishing a WebSocket connection to the server. It includes a parameter for enabling speaker verification and connects to the transcription endpoint.\nSOURCE: https://github.com/0x5446/api4sensevoice/blob/main/README.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nws = new WebSocket(`wss://your_wss_server_address/ws/transcribe${sv ? '?sv=1' : ''}`);\n```\n\n----------------------------------------\n\nTITLE: Making a Transcription Request to the API\nDESCRIPTION: cURL command example to send an audio file for transcription to the API endpoint. It demonstrates how to make a POST request with a file attachment to the /transcribe endpoint.\nSOURCE: https://github.com/0x5446/api4sensevoice/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST'  \n  'http://yourapiaddress/transcribe'  \n  -H 'accept: application/json'  \n  -H 'Content-Type: multipart/form-data'  \n  -F 'file=@path_to_your_audio_file'\n```\n\n----------------------------------------\n\nTITLE: Configuring Speaker Verification in WebSocket Server\nDESCRIPTION: Code snippet showing how to configure speaker verification by specifying reference speaker audio files. The system will verify speakers against these reference files before processing transcription.\nSOURCE: https://github.com/0x5446/api4sensevoice/blob/main/README.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nreg_spks_files = [\n    \"speaker/speaker1_a_cn_16k.wav\"\n]\n```\n\n----------------------------------------\n\nTITLE: Running the FastAPI Single Sentence Recognition Server\nDESCRIPTION: Main script configuration for running the FastAPI server for single sentence recognition. It sets up command-line arguments for port and SSL configuration and starts the server.\nSOURCE: https://github.com/0x5446/api4sensevoice/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Run the FastAPI app with a specified port.\")\n    parser.add_argument('--port', type=int, default=7000, help='Port number to run the FastAPI app on.')\n    parser.add_argument('--certfile', type=str, default='path_to_your_certfile', help='SSL certificate file')\n    parser.add_argument('--keyfile', type=str, default='path_to_your_keyfile', help='SSL key file')\n    args = parser.parse_args()\n    \n    uvicorn.run(app, host=\"0.0.0.0\", port=args.port, ssl_certfile=args.certfile, ssl_keyfile=args.keyfile)\n```\n\n----------------------------------------\n\nTITLE: Starting the WebSocket Server via Command Line\nDESCRIPTION: Command-line example for starting the server_wss.py script with custom port and SSL certificate paths. This allows for flexible configuration of the WebSocket server.\nSOURCE: https://github.com/0x5446/api4sensevoice/blob/main/README.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython server_wss.py --port 8888 --certfile path_to_your_certfile --keyfile path_to_your_key\n```\n\n----------------------------------------\n\nTITLE: Starting the Single Sentence Recognition API Server via Command Line\nDESCRIPTION: Command-line example for starting the server.py script with custom port and SSL certificate paths. This allows for flexible configuration when deploying the service.\nSOURCE: https://github.com/0x5446/api4sensevoice/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython server.py --port 8888 --certfile path_to_your_certfile --keyfile path_to_your_key\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Transcription API\nDESCRIPTION: Example JSON response structure from a successful transcription request. The response includes a code, message, and data field containing the transcription results.\nSOURCE: https://github.com/0x5446/api4sensevoice/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 0,\n  \"msg\": \"Success\",\n  \"data\": {\n    // Transcription result\n  }\n}\n```"
  }
]