[
  {
    "owner": "pycaret",
    "repo": "pycaret",
    "content": "TITLE: Making and Plotting Future Predictions with PyCaret Time Series Model in Python\nDESCRIPTION: Uses the safe_predict function to generate future predictions with the finalized time series model and plots the results. This step demonstrates the model's forecasting capabilities.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_with_exogeneous_part3.ipynb#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfuture_preds = safe_predict(exp_auto, final_auto_model)\nfuture_preds.plot()\n```\n\n----------------------------------------\n\nTITLE: Setting Parameters for AutoML Time Series Forecasting in Python\nDESCRIPTION: Defines key parameters for the automated time series forecasting, including forecast horizon, evaluation metric, and models to exclude. This configures the AutoML process for the specific forecasting task.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_with_exogeneous_part3.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nFH=48\nmetric = \"mase\"\nexclude = [\"auto_arima\", \"bats\", \"tbats\", \"lar_cds_dt\", \"par_cds_dt\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Up PyCaret Environment for Classification\nDESCRIPTION: Initializes the PyCaret environment for classification, specifying the dataset, target variable, and a session ID for reproducibility.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nexp_clf101 = setup(data = data, target = 'default', session_id=123) \n```\n\n----------------------------------------\n\nTITLE: Preparing Air Quality Dataset for Time Series Analysis in Python\nDESCRIPTION: Loads and preprocesses the air quality dataset, including date-time parsing, column selection, and data cleaning. This prepares the data for time series forecasting with PyCaret.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_with_exogeneous_part3.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndata = get_data(\"airquality\", verbose=False)\n\n# Limiting the data for demonstration purposes.\ndata = data.iloc[-720:]\ndata[\"index\"] = pd.to_datetime(data[\"Date\"] + \" \" + data[\"Time\"])\ndata.drop(columns=[\"Date\", \"Time\"], inplace=True)\ndata.replace(-200, np.nan, inplace=True)\ndata.set_index(\"index\", inplace=True)\n\ntarget = \"CO(GT)\"\nexog_vars = ['NOx(GT)', 'PT08.S3(NOx)', 'RH']\ninclude = [target] + exog_vars\ndata = data[include]\ndata.head()\n```\n\n----------------------------------------\n\nTITLE: Classification Example using Functional API\nDESCRIPTION: A complete classification example demonstrating PyCaret's functional API workflow, including setup, model comparison, evaluation, prediction, and model saving.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Classification Functional API Example\n\n# loading sample dataset\nfrom pycaret.datasets import get_data\ndata = get_data('juice')\n\n# init setup\nfrom pycaret.classification import *\ns = setup(data, target = 'Purchase', session_id = 123)\n\n# model training and selection\nbest = compare_models()\n\n# evaluate trained model\nevaluate_model(best)\n\n# predict on hold-out/test set\npred_holdout = predict_model(best)\n\n# predict on new data\nnew_data = data.copy().drop('Purchase', axis = 1)\npredictions = predict_model(best, data = new_data)\n\n# save model\nsave_model(best, 'best_pipeline')\n```\n\n----------------------------------------\n\nTITLE: Comparing Classification Models\nDESCRIPTION: Trains and evaluates multiple classification models using cross-validation, automatically comparing their performance metrics. Returns the best performing model.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbest_model = compare_models()\n```\n\n----------------------------------------\n\nTITLE: Classification Example using Object-Oriented API\nDESCRIPTION: A complete classification example demonstrating PyCaret's object-oriented programming (OOP) API workflow, showing the same functionality as the functional API but with an object-oriented approach.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Classification OOP API Example\n\n# loading sample dataset\nfrom pycaret.datasets import get_data\ndata = get_data('juice')\n\n# init setup\nfrom pycaret.classification import ClassificationExperiment\ns = ClassificationExperiment()\ns.setup(data, target = 'Purchase', session_id = 123)\n\n# model training and selection\nbest = s.compare_models()\n\n# evaluate trained model\ns.evaluate_model(best)\n\n# predict on hold-out/test set\npred_holdout = s.predict_model(best)\n\n# predict on new data\nnew_data = data.copy().drop('Purchase', axis = 1)\npredictions = s.predict_model(best, data = new_data)\n\n# save model\ns.save_model(best, 'best_pipeline')\n```\n\n----------------------------------------\n\nTITLE: Setting Up PyCaret Environment\nDESCRIPTION: Initializes the PyCaret environment for a classification task using the setup() function. It prepares the data for modeling by specifying the dataset, target variable, and a session ID for reproducibility.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nexp_clf101 = setup(data = data, target = 'default', session_id=123)\n```\n\n----------------------------------------\n\nTITLE: Predicting on Unseen Data with PyCaret\nDESCRIPTION: Using predict_model() to make predictions on unseen data. The function automatically applies all preprocessing transformations and returns the original dataset with added Label and Score columns.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nunseen_predictions = predict_model(final_rf, data=data_unseen)\nunseen_predictions.head()\n```\n\n----------------------------------------\n\nTITLE: Comparing All Classification Models\nDESCRIPTION: Uses the compare_models() function to train and evaluate multiple classification models using 10-fold cross-validation. The best performing model is returned and stored in the 'best_model' variable.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbest_model = compare_models(fold=10)\n```\n\n----------------------------------------\n\nTITLE: Finalizing Model for Deployment\nDESCRIPTION: Trains the final Random Forest model on the entire dataset (including the test set) to prepare it for deployment in production.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfinal_rf = finalize_model(tuned_rf)\n```\n\n----------------------------------------\n\nTITLE: Setting Up PyCaret TSForecastingExperiment for AutoML in Python\nDESCRIPTION: Initializes and configures a TSForecastingExperiment for automated time series forecasting. This setup includes data, target variable, forecast horizon, and other parameters for the experiment.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_with_exogeneous_part3.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nexp_auto = TSForecastingExperiment()\n\n# enforce_exogenous=False --> Use multivariate forecasting when model supports it, else use univariate forecasting\nexp_auto.setup(\n    data=data, target=target, fh=FH, enforce_exogenous=False,\n    numeric_imputation_target=\"ffill\", numeric_imputation_exogenous=\"ffill\",\n    fig_kwargs=global_fig_settings, session_id=42\n)\n```\n\n----------------------------------------\n\nTITLE: Tuning a Random Forest Classifier in PyCaret\nDESCRIPTION: Uses tune_model to optimize a Random Forest classifier. By default it optimizes for Accuracy, but can be configured to optimize for other metrics like F1 score.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntuned_rf = tune_model(rf, optimize='F1')\n```\n\n----------------------------------------\n\nTITLE: Finalizing Model for Deployment in PyCaret\nDESCRIPTION: Finalizes the model by training on the entire dataset (including test set) to prepare it for production deployment.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfinal_rf = finalize_model(tuned_rf)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Feature Importance in PyCaret\nDESCRIPTION: Generates a feature importance plot for a Random Forest classifier to understand which variables have the most influence on predictions.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nplot_model(tuned_rf, plot='feature')\n```\n\n----------------------------------------\n\nTITLE: Saving a Trained PyCaret Model\nDESCRIPTION: Using save_model() to persist the trained model along with the entire transformation pipeline for future use, with a timestamped filename for version control.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nsave_model(final_rf,'Final RF Model 11Nov2020')\n```\n\n----------------------------------------\n\nTITLE: Predicting with a Loaded PyCaret Model\nDESCRIPTION: Applying a loaded model to make predictions on unseen data using predict_model(), which automatically handles all necessary transformations.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nnew_prediction = predict_model(saved_final_rf, data=data_unseen)\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Prediction Function for Time Series Forecasting in Python\nDESCRIPTION: Defines a function to safely make predictions, handling cases where exogenous variables are required. It includes logic to forecast exogenous variables if needed for future predictions.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_with_exogeneous_part3.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef safe_predict(exp, model):\n    \"\"\"Prediction wrapper for demo purposes.\"\"\"\n    try: \n        future_preds = exp.predict_model(model)\n    except ValueError as exception:\n        print(exception)\n        exo_vars = exp.exogenous_variables\n        print(f\"{len(exo_vars)} exogenous variables (X) needed in order to make future predictions:\\n{exo_vars}\")\n        \n        \n        exog_exps = []\n        exog_models = []\n        for exog_var in exog_vars:\n            exog_exp = TSForecastingExperiment()\n            exog_exp.setup(\n                data=data[exog_var], fh=FH,\n                numeric_imputation_target=\"ffill\", numeric_imputation_exogenous=\"ffill\",\n                fig_kwargs=global_fig_settings, session_id=42\n            )\n\n            # Users can customize how to model future exogenous variables i.e. add\n            # more steps and models to potentially get better models at the expense\n            # of higher modeling time.\n            best = exog_exp.compare_models(\n                sort=metric, include=[\"arima\", \"ets\", \"exp_smooth\", \"theta\", \"lightgbm_cds_dt\",]        \n            )\n            final_exog_model = exog_exp.finalize_model(best)\n\n            exog_exps.append(exog_exp)\n            exog_models.append(final_exog_model)\n\n        # Step 2: Get future predictions for exog variables ----\n        future_exog = [\n            exog_exp.predict_model(exog_model)\n            for exog_exp, exog_model in zip(exog_exps, exog_models)\n        ]\n        future_exog = pd.concat(future_exog, axis=1)\n        future_exog.columns = exog_vars\n        \n        future_preds = exp.predict_model(model, X=future_exog)\n    \n    return future_preds\n```\n\n----------------------------------------\n\nTITLE: Saving a PyCaret Model for Future Use\nDESCRIPTION: Saves the trained and finalized model along with its entire transformation pipeline for later use.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nsave_model(final_rf,'Final RF Model 01Jun2022')\n```\n\n----------------------------------------\n\nTITLE: Predicting on Unseen Data in PyCaret\nDESCRIPTION: Uses the finalized model to make predictions on entirely new data that wasn't used in the training process.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nunseen_predictions = predict_model(final_rf, data=data_unseen)\nunseen_predictions.head()\n```\n\n----------------------------------------\n\nTITLE: Creating Conda Environment and Installing PyCaret in Python\nDESCRIPTION: This snippet demonstrates how to create a conda environment, activate it, install PyCaret, and create a notebook kernel connected to the environment. It's recommended to use a virtual environment to avoid conflicts with other packages.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/docs/source/installation.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# create a conda environment\nconda create --name yourenvname python=3.10\n\n# activate conda environment\nconda activate yourenvname\n\n# install pycaret\npip install pycaret\n\n# create notebook kernel connected with the conda environment\npython -m ipykernel install --user --name yourenvname --display-name \"display-name\"\n```\n\n----------------------------------------\n\nTITLE: Loading a Saved PyCaret Model\nDESCRIPTION: Using load_model() to restore a previously saved model with its transformation pipeline into the current environment for making predictions.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nsaved_final_rf = load_model('Final RF Model 11Nov2020')\n```\n\n----------------------------------------\n\nTITLE: Tuning Random Forest Hyperparameters\nDESCRIPTION: Performs hyperparameter tuning for the Random Forest model to find the optimal configuration that maximizes accuracy.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ntuned_rf = tune_model(rf)\n```\n\n----------------------------------------\n\nTITLE: Installing PyCaret via pip\nDESCRIPTION: Commands for installing PyCaret using pip. Shows different installation options including the core library and various optional dependencies for specific use cases.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# install pycaret\npip install pycaret\n```\n\nLANGUAGE: python\nCODE:\n```\n# install analysis extras\npip install pycaret[analysis]\n\n# models extras\npip install pycaret[models]\n\n# install tuner extras\npip install pycaret[tuner]\n\n# install mlops extras\npip install pycaret[mlops]\n\n# install parallel extras\npip install pycaret[parallel]\n\n# install test extras\npip install pycaret[test]\n\n# install dev extras\npip install pycaret[dev]\n\n##\n\n# install multiple extras together\npip install pycaret[analysis,models]\n```\n\nLANGUAGE: python\nCODE:\n```\n# install full version\npip install pycaret[full]\n```\n\n----------------------------------------\n\nTITLE: Tuning Decision Tree Hyperparameters\nDESCRIPTION: Performs hyperparameter tuning for the Decision Tree model using random grid search to find the optimal configuration that maximizes accuracy.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ntuned_dt = tune_model(dt)\n```\n\n----------------------------------------\n\nTITLE: Tuning Decision Tree Classifier\nDESCRIPTION: Performs hyperparameter tuning on the Decision Tree Classifier using PyCaret's tune_model() function. The tuned model is stored in the 'tuned_dt' variable.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntuned_dt = tune_model(dt)\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(tuned_dt)\n```\n\n----------------------------------------\n\nTITLE: Comparing Time Series Models with PyCaret AutoML in Python\nDESCRIPTION: Executes the model comparison process in PyCaret's AutoML, evaluating various time series models. This step identifies the best performing model based on the specified metric and exclusion criteria.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_with_exogeneous_part3.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Include slower models like Prophet (turbo=False), but exclude some specific models ----\nbest = exp_auto.compare_models(sort=metric, turbo=False, exclude=exclude)\n```\n\n----------------------------------------\n\nTITLE: Tuning KNN with Custom Parameter Grid\nDESCRIPTION: Tunes the K-Nearest Neighbors model using a custom grid for the n_neighbors parameter, allowing fine control over the hyperparameter search space.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\ntuned_knn = tune_model(knn, custom_grid = {'n_neighbors' : np.arange(0,50,1)})\n```\n\n----------------------------------------\n\nTITLE: Finalizing Best Time Series Model with PyCaret in Python\nDESCRIPTION: Finalizes the best performing time series model identified by PyCaret's AutoML. This step prepares the model for making predictions on new data.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_with_exogeneous_part3.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfinal_auto_model = exp_auto.finalize_model(best)\n```\n\n----------------------------------------\n\nTITLE: Testing Model on Hold-out Set\nDESCRIPTION: Evaluates the tuned Random Forest model on the hold-out test set to verify its performance on unseen data and detect potential overfitting.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\npredict_model(tuned_rf);\n```\n\n----------------------------------------\n\nTITLE: Tuning K Neighbors Classifier with Custom Grid\nDESCRIPTION: Performs hyperparameter tuning on the K Neighbors Classifier using a custom grid for the 'n_neighbors' parameter. The numpy library is imported to create a range of values for tuning.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\ntuned_knn = tune_model(knn, custom_grid = {'n_neighbors' : np.arange(0,50,1)})\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(tuned_knn)\n```\n\n----------------------------------------\n\nTITLE: Comparing and Selecting Best Models\nDESCRIPTION: Compares different time series models and selects the top 3 performing models.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_without_exogeneous_part3.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbest_baseline_models = exp.compare_models(n_select=3)\nbest_baseline_models\n```\n\n----------------------------------------\n\nTITLE: Tuning Best Models\nDESCRIPTION: Performs hyperparameter tuning on the selected best models.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_without_exogeneous_part3.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nbest_tuned_models = [exp.tune_model(model) for model in best_baseline_models]\nbest_tuned_models\n```\n\n----------------------------------------\n\nTITLE: Making Predictions with Blended Model\nDESCRIPTION: Generates and visualizes predictions using the blended model.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_without_exogeneous_part3.ipynb#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ny_predict = exp.predict_model(blender)\nprint(y_predict)\nexp.plot_model(estimator=blender)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Finalized Random Forest Model\nDESCRIPTION: Displays the parameters and structure of the finalized Random Forest model that is ready for deployment.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n#Final Random Forest model parameters for deployment\nprint(final_rf)\n```\n\n----------------------------------------\n\nTITLE: Plotting Feature Importance for Random Forest\nDESCRIPTION: Generates a feature importance plot for the Random Forest model to identify which features have the most impact on predictions.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nplot_model(tuned_rf, plot='feature')\n```\n\n----------------------------------------\n\nTITLE: Running PyCaret in Docker\nDESCRIPTION: Docker commands to run PyCaret in a container with Jupyter notebook. Shows options for both the default slim version and the full version with all dependencies.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# default version\ndocker run -p 8888:8888 pycaret/slim\n\n# full version\ndocker run -p 8888:8888 pycaret/full\n```\n\n----------------------------------------\n\nTITLE: Creating Confusion Matrix in PyCaret\nDESCRIPTION: Generates a confusion matrix visualization for the tuned Random Forest model to evaluate classification performance.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nplot_model(tuned_rf, plot = 'confusion_matrix')\n```\n\n----------------------------------------\n\nTITLE: Finalizing and Saving Model\nDESCRIPTION: Finalizes the blended model and saves it to disk.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_without_exogeneous_part3.ipynb#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n_ = exp.save_model(final_model, \"my_blender\")\n```\n\n----------------------------------------\n\nTITLE: Plotting Confusion Matrix\nDESCRIPTION: Generates a confusion matrix for the tuned Random Forest model to visualize true positives, false positives, true negatives, and false negatives.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nplot_model(tuned_rf, plot = 'confusion_matrix')\n```\n\n----------------------------------------\n\nTITLE: Loading and Testing Saved Model\nDESCRIPTION: Demonstrates loading the saved model and generating predictions.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_without_exogeneous_part3.ipynb#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nloaded_exp = TSForecastingExperiment()\nm = loaded_exp.load_model(\"my_blender\")\n# Predictions should be same as before the model was saved and loaded\nloaded_exp.predict_model(m)\n```\n\n----------------------------------------\n\nTITLE: Visualizing AUC Plot with PyCaret\nDESCRIPTION: Creates an AUC (Area Under the Curve) plot for a tuned Random Forest model using the plot_model function.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nplot_model(tuned_rf, plot = 'auc')\n```\n\n----------------------------------------\n\nTITLE: Initializing Time Series Experiment\nDESCRIPTION: Sets up the time series forecasting experiment with defined parameters.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_without_exogeneous_part3.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nexp = TSForecastingExperiment()\nexp.setup(data=y, fh=fh, fold=fold, fig_kwargs=fig_kwargs, session_id=42)\n```\n\n----------------------------------------\n\nTITLE: Plotting AUC Curve for Tuned Random Forest\nDESCRIPTION: Generates and displays the Area Under the ROC Curve (AUC) plot for the tuned Random Forest model to visualize its classification performance.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nplot_model(tuned_rf, plot = 'auc')\n```\n\n----------------------------------------\n\nTITLE: Creating a Decision Tree Classifier\nDESCRIPTION: Creates and trains a Decision Tree classifier using default parameters and cross-validation, displaying performance metrics for each fold.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndt = create_model('dt')\n```\n\n----------------------------------------\n\nTITLE: Inspecting Tuned KNN Model\nDESCRIPTION: Displays the details of the tuned K-Nearest Neighbors model with its optimized n_neighbors parameter.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nprint(tuned_knn)\n```\n\n----------------------------------------\n\nTITLE: Generating Precision-Recall Plot in PyCaret\nDESCRIPTION: Creates a precision-recall curve plot for a tuned Random Forest model using plot_model function.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nplot_model(tuned_rf, plot = 'pr')\n```\n\n----------------------------------------\n\nTITLE: Plotting Best Time Series Model Results with PyCaret in Python\nDESCRIPTION: Generates a plot of the best performing time series model identified by PyCaret's AutoML. This visualization helps in understanding the model's performance and fit.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_with_exogeneous_part3.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nexp_auto.plot_model(best)\n```\n\n----------------------------------------\n\nTITLE: Viewing Predictions from Loaded Model in PyCaret\nDESCRIPTION: Displays the first few rows of predictions made with the loaded model.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nnew_prediction.head()\n```\n\n----------------------------------------\n\nTITLE: Plotting Precision-Recall Curve\nDESCRIPTION: Generates and displays the Precision-Recall curve for the tuned Random Forest model, which is particularly useful for imbalanced classification problems.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nplot_model(tuned_rf, plot = 'pr')\n```\n\n----------------------------------------\n\nTITLE: Installing Full Version of PyCaret in Python\nDESCRIPTION: This command installs the full version of PyCaret, which includes all dependencies beyond the default slim version.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/docs/source/installation.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# install the full version of pycaret\npip install pycaret[full]\n```\n\n----------------------------------------\n\nTITLE: Interactive Model Evaluation\nDESCRIPTION: Opens an interactive interface for comprehensive model evaluation, displaying various performance plots and metrics for the tuned Random Forest model.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nevaluate_model(tuned_rf)\n```\n\n----------------------------------------\n\nTITLE: Calculating Model Weights\nDESCRIPTION: Calculates weights for model blending based on MAE metrics.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_without_exogeneous_part3.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntop_model_metrics = compare_metrics.iloc[0:3]['MAE']\ndisplay(top_model_metrics)\n\ntop_model_weights = 1 - top_model_metrics/top_model_metrics.sum()\ndisplay(top_model_weights)\n```\n\n----------------------------------------\n\nTITLE: Interactive Model Evaluation in PyCaret\nDESCRIPTION: Uses evaluate_model function to display an interactive UI with all available plots for a given model. This function internally uses plot_model.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nevaluate_model(tuned_rf)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Time Series Analysis in Python\nDESCRIPTION: Imports necessary modules from NumPy, Pandas, and PyCaret for time series forecasting. These libraries provide essential tools for data manipulation and automated machine learning.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_with_exogeneous_part3.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nfrom pycaret.datasets import get_data\nfrom pycaret.time_series import TSForecastingExperiment\n```\n\n----------------------------------------\n\nTITLE: Creating a Random Forest Classifier\nDESCRIPTION: Creates and trains a Random Forest classifier using default parameters and cross-validation, displaying performance metrics.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nrf = create_model('rf')\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Imports necessary Python packages including PyCaret modules for time series forecasting.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_without_exogeneous_part3.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport time\nimport numpy as np\nimport pandas as pd\n\nfrom pycaret.datasets import get_data\nfrom pycaret.time_series import TSForecastingExperiment\n```\n\n----------------------------------------\n\nTITLE: Creating Random Forest Classifier\nDESCRIPTION: Creates a Random Forest Classifier model using PyCaret's create_model() function and stores it in the 'rf' variable.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrf = create_model('rf')\n```\n\n----------------------------------------\n\nTITLE: Importing PyCaret Classification Module\nDESCRIPTION: Imports all functions from the PyCaret classification module, which provides tools for binary and multi-class classification tasks.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pycaret.classification import *\n```\n\n----------------------------------------\n\nTITLE: Creating a K-Nearest Neighbors Classifier\nDESCRIPTION: Creates and trains a K-Nearest Neighbors classifier using default parameters and cross-validation, displaying performance metrics.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nknn = create_model('knn')\n```\n\n----------------------------------------\n\nTITLE: Getting Data from PyCaret Dataset Repository\nDESCRIPTION: Demonstrates how to load a sample dataset from PyCaret's built-in repository. This code retrieves the credit card default dataset which will be used throughout the tutorial.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pycaret.datasets import get_data\ndataset = get_data('credit')\n```\n\n----------------------------------------\n\nTITLE: Creating K Neighbors Classifier\nDESCRIPTION: Creates a K Neighbors Classifier model using PyCaret's create_model() function and stores it in the 'knn' variable.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nknn = create_model('knn')\n```\n\n----------------------------------------\n\nTITLE: Installing PyCaret Development Version with Test Dependencies\nDESCRIPTION: This command installs the development version of PyCaret with additional dependencies required for testing. It should be run after creating a virtual environment following the official installation instructions.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/docs/source/contribute.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install -e .[test]\n```\n\n----------------------------------------\n\nTITLE: Creating Decision Tree Classifier\nDESCRIPTION: Creates a Decision Tree Classifier model using PyCaret's create_model() function and stores it in the 'dt' variable.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndt = create_model('dt')\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(dt)\n```\n\n----------------------------------------\n\nTITLE: Installing Nightly Build of PyCaret in Python\nDESCRIPTION: These commands install the latest nightly build of PyCaret directly from GitHub, allowing access to the most recent features before the next official release.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/docs/source/installation.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# install the nightly build \npip install \"https://github.com/pycaret/pycaret.git#egg=pycaret\"\n\n# or install the full version of the nightly build\npip install \"https://github.com/pycaret/pycaret.git#egg=pycaret[full]\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting Trained Decision Tree Model\nDESCRIPTION: Displays the details of the trained Decision Tree model including its parameters and structure.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n#trained model object is stored in the variable 'dt'. \nprint(dt)\n```\n\n----------------------------------------\n\nTITLE: Checking and Installing PyCaret in Python\nDESCRIPTION: Defines a function to check installed versions and attempts to install PyCaret if not found. This ensures the required library is available for the analysis.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_with_exogeneous_part3.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef what_is_installed():\n    from pycaret import show_versions\n    show_versions()\n\ntry:\n    what_is_installed()\nexcept ModuleNotFoundError:\n    !pip install pycaret\n    what_is_installed()\n```\n\n----------------------------------------\n\nTITLE: Inspecting Tuned Decision Tree Model\nDESCRIPTION: Displays the details of the tuned Decision Tree model with its optimized hyperparameters.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n#tuned model object is stored in the variable 'tuned_dt'. \nprint(tuned_dt)\n```\n\n----------------------------------------\n\nTITLE: PyCaret Installation Check Function\nDESCRIPTION: Defines and executes a function to check PyCaret installation and display version information, installing if not found.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_without_exogeneous_part3.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef what_is_installed():\n    from pycaret import show_versions\n    show_versions()\n\ntry:\n    what_is_installed()\nexcept ModuleNotFoundError:\n    !pip install pycaret\n    what_is_installed()\n```\n\n----------------------------------------\n\nTITLE: Predicting on Hold-out Sample in PyCaret\nDESCRIPTION: Evaluates model performance by predicting on the hold-out/test set that was automatically created during setup.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\npredict_model(tuned_rf);\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Figure Settings for PyCaret in Python\nDESCRIPTION: Sets up global figure settings for PyCaret visualizations, including renderer type and plot dimensions. This ensures consistent and optimized plot outputs throughout the notebook.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_with_exogeneous_part3.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nglobal_fig_settings = {\n    # \"renderer\": \"notebook\",\n    \"renderer\": \"png\",\n    \"width\": 1000,\n    \"height\": 600,\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Finalized Model\nDESCRIPTION: Evaluates the finalized model's performance, demonstrating how metrics can be misleading when testing on data that was used for training.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\npredict_model(final_rf);\n```\n\n----------------------------------------\n\nTITLE: Configuring Visualization Settings\nDESCRIPTION: Sets global figure parameters for plot rendering in the notebook environment.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_without_exogeneous_part3.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfig_kwargs = {\n    # \"renderer\": \"notebook\",\n    \"renderer\": \"png\",\n    \"width\": 1000,\n    \"height\": 600,\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Finalized Model Performance in PyCaret\nDESCRIPTION: Demonstrates how the finalized model's metrics change when it's used to predict on data that was included in training.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\npredict_model(final_rf);\n```\n\n----------------------------------------\n\nTITLE: Building PyCaret from Source\nDESCRIPTION: Command to install the development version of PyCaret directly from GitHub repository. This version may have unstable API and is not recommended for production use.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npip install git+https://github.com/pycaret/pycaret.git@master --upgrade\n```\n\n----------------------------------------\n\nTITLE: Evaluating Model Performance with PyCaret Utils\nDESCRIPTION: Using the check_metric utility from pycaret.utils to evaluate model performance on unseen data by comparing actual values with predicted labels.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom pycaret.utils import check_metric\ncheck_metric(unseen_predictions['default'], unseen_predictions['Label'], metric = 'Accuracy')\n```\n\n----------------------------------------\n\nTITLE: Saving Comparison Metrics\nDESCRIPTION: Stores model comparison metrics for later use in model blending.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_without_exogeneous_part3.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncompare_metrics = exp.pull()\n# compare_metrics\n```\n\n----------------------------------------\n\nTITLE: Evaluating Prediction Accuracy with PyCaret\nDESCRIPTION: Verifies the accuracy of predictions on unseen data using the check_metric utility function.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom pycaret.utils import check_metric\ncheck_metric(unseen_predictions['default'], unseen_predictions['Label'], metric = 'Accuracy')\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit for Code Formatting\nDESCRIPTION: This snippet shows how to install and set up pre-commit, which is used with black for code formatting. It runs automatically before making a new commit.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/docs/source/contribute.rst#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install pre-commit\n```\n\nLANGUAGE: shell\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Verifying Model Consistency with PyCaret Utils\nDESCRIPTION: Using check_metric to confirm that the predictions from the loaded model match the performance of the original model, ensuring consistency across model saves and loads.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom pycaret.utils import check_metric\ncheck_metric(new_prediction['default'], new_prediction['Label'], metric = 'Accuracy')\n```\n\n----------------------------------------\n\nTITLE: Running Pytest for Unit Testing\nDESCRIPTION: This command runs pytest to execute unit tests for PyCaret, excluding any tests marked with the @pytest.mark.skip decorator.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/docs/source/contribute.rst#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npytest pycaret\n```\n\n----------------------------------------\n\nTITLE: Verifying Accuracy of Loaded Model in PyCaret\nDESCRIPTION: Checks that the predictions made by the loaded model have the same accuracy as the original model.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom pycaret.utils import check_metric\ncheck_metric(new_prediction['default'], new_prediction['Label'], metric = 'Accuracy')\n```\n\n----------------------------------------\n\nTITLE: Splitting Data for Training and Validation\nDESCRIPTION: Creates a training dataset and a separate unseen dataset for later prediction. This simulates a real-world scenario where new data comes in after model training.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata = dataset.sample(frac=0.95, random_state=786)\ndata_unseen = dataset.drop(data.index)\ndata.reset_index(inplace=True, drop=True)\ndata_unseen.reset_index(inplace=True, drop=True)\nprint('Data for Modeling: ' + str(data.shape))\nprint('Unseen Data For Predictions: ' + str(data_unseen.shape))\n```\n\n----------------------------------------\n\nTITLE: Viewing Predictions from a Loaded Model\nDESCRIPTION: Displaying the first few rows of predictions made by the loaded model to review the results, which contain the original data with added prediction columns.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nnew_prediction.head()\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies\nDESCRIPTION: This command installs the additional dependencies required for building the PyCaret documentation locally. The dependencies are listed in the docs/source/requirements.txt file.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/docs/source/contribute.rst#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install -r docs/source/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Making Predictions with Loaded Model in PyCaret\nDESCRIPTION: Uses a previously saved and loaded model to make predictions on new data.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nnew_prediction = predict_model(saved_final_rf, data=data_unseen)\n```\n\n----------------------------------------\n\nTITLE: Building PyCaret Documentation Locally\nDESCRIPTION: This command runs a shell script to build the PyCaret documentation website locally. The generated files can be found in the docs/build/ folder.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/docs/source/contribute.rst#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsh make.sh\n```\n\n----------------------------------------\n\nTITLE: Loading a Saved PyCaret Model\nDESCRIPTION: Loads a previously saved model for making new predictions without having to retrain.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nsaved_final_rf = load_model('Final RF Model 01Jun2022')\n```\n\n----------------------------------------\n\nTITLE: Checking Dataset Shape\nDESCRIPTION: Simple code to display the dimensions of the loaded dataset, showing the number of rows and columns available for analysis.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#查看数据的形状\ndataset.shape\n```\n\n----------------------------------------\n\nTITLE: Displaying Final Random Forest Model Parameters\nDESCRIPTION: Prints the final parameters of the Random Forest model that has been tuned and finalized for deployment.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n#Parâmetros finais do modelo Random Forest para deploy\nprint(final_rf)\n```\n\n----------------------------------------\n\nTITLE: Enabling GPU Support for Light Gradient Boosting Machine in Shell\nDESCRIPTION: This shell command enables GPU support for Light Gradient Boosting Machine in Google Colab by creating necessary directories and configuration files.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/docs/source/installation.rst#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n!mkdir -p /etc/OpenCL/vendors && echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Models in PyCaret\nDESCRIPTION: Lists all classification models available in the PyCaret library that can be used for training and comparison.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmodels()\n```\n\n----------------------------------------\n\nTITLE: Setting Forecast Parameters\nDESCRIPTION: Defines forecast horizon and cross-validation fold parameters for the time series models.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_without_exogeneous_part3.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfh = 12 # or alternately fh = np.arange(1,13)\nfold = 3\n```\n\n----------------------------------------\n\nTITLE: Listing Available Classification Models\nDESCRIPTION: Uses the models() function to display a list of all available classification models in PyCaret.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmodels()\n```\n\n----------------------------------------\n\nTITLE: Loading Airline Dataset\nDESCRIPTION: Loads the airline dataset from PyCaret's built-in datasets.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_without_exogeneous_part3.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ny = get_data('airline', verbose=False)\n```\n\n----------------------------------------\n\nTITLE: Displaying Model Information\nDESCRIPTION: Prints detailed information about the best model selected from the comparison, showing the algorithm and parameters.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/chinese/Binary Classification Tutorial Level Beginner (中文) -  CLF101.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprint(best_model)\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table of PyCaret Resources\nDESCRIPTION: This code snippet creates a markdown table listing important links and resources for the PyCaret project, including tutorials, example notebooks, blog posts, documentation, videos, cheat sheets, community discussions, and release notes.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n# ℹ️ More Information\n\n| Important Links              |            Description                                       |\n| -------------------------- | -------------------------------------------------------------- |\n| :star: **[Tutorials]**        | Tutorials developed and maintained by core developers       |\n| :clipboard: **[Example Notebooks]** | Example notebooks created by community               |\n| :orange_book: **[Blog]** | Official blog by creator of PyCaret                      |\n| :books: **[Documentation]**      | API docs                              |\n| :tv: **[Videos]**            | Video resources             |\n| ✈️ **[Cheat sheet]**            | Community Cheat sheet            |\n| :loudspeaker: **[Discussions]**        | Community Discussion board on GitHub|\n| :hammer_and_wrench: **[Release Notes]**          | Release Notes          |\n\n[tutorials]: https://pycaret.gitbook.io/docs/get-started/tutorials\n[Example notebooks]: https://github.com/pycaret/examples\n[Blog]: https://pycaret.gitbook.io/docs/learn-pycaret/official-blog\n[Documentation]: https://pycaret.gitbook.io/docs/\n[Videos]: https://pycaret.gitbook.io/docs/learn-pycaret/videos\n[Cheat sheet]: https://pycaret.gitbook.io/docs/learn-pycaret/cheat-sheet\n[Discussions]: https://github.com/pycaret/pycaret/discussions\n[Release Notes]: https://github.com/pycaret/pycaret/releases\n```\n\n----------------------------------------\n\nTITLE: Printing Best Model Details\nDESCRIPTION: Displays information about the best performing model selected by the compare_models() function.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(best_model)\n```\n\n----------------------------------------\n\nTITLE: Setting PyCaret Logging Level\nDESCRIPTION: Configures PyCaret to only show critical logging messages by setting an environment variable.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_without_exogeneous_part3.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nos.environ[\"PYCARET_CUSTOM_LOGGING_LEVEL\"] = \"CRITICAL\"\n```\n\n----------------------------------------\n\nTITLE: Creating Blended Model\nDESCRIPTION: Combines multiple models using weighted averaging method.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_without_exogeneous_part3.ipynb#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nblender = exp.blend_models(best_tuned_models, method='mean', weights=top_model_weights.values.tolist())\n```\n\n----------------------------------------\n\nTITLE: Configuring PyCaret Logging Level in Python\nDESCRIPTION: Sets the PyCaret custom logging level to CRITICAL using an environment variable. This reduces the verbosity of PyCaret's output.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/time_series/forecasting/univariate_with_exogeneous_part3.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nos.environ[\"PYCARET_CUSTOM_LOGGING_LEVEL\"] = \"CRITICAL\"\n```\n\n----------------------------------------\n\nTITLE: Importing PyCaret Classification Module\nDESCRIPTION: Imports the classification module from PyCaret library to use its functions for classification tasks.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/tutorials/translations/portuguese/Tutorial de classificacao binaria (CLF101) - Nivel iniciante.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pycaret.classification import *\n```\n\n----------------------------------------\n\nTITLE: Sphinx Time Series Module Documentation Reference\nDESCRIPTION: Defines a Sphinx documentation reference for the PyCaret time series module. This reStructuredText (rst) snippet establishes a documentation label and calls the automodule directive to automatically generate documentation for all members of the pycaret.time_series module.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/docs/source/api/time_series.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _Time Series:\n\nTime Series\n===========\n.. automodule:: pycaret.time_series\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for PyCaret Installation\nDESCRIPTION: This Dockerfile sets up a Python 3.7 slim environment, installs necessary dependencies, and prepares for running PyCaret applications in a Docker container.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/docs/source/installation.rst#2025-04-22_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM python:3.7-slim\n\nWORKDIR /app\n\nADD . /app\n\nRUN apt-get update && apt-get install -y libgomp1\n\nRUN pip install --trusted-host pypi.python.org -r requirements.txt\n\nCMD pytest #replace it with your entry point.\n```\n\n----------------------------------------\n\nTITLE: Installing PyCaret with cuML Support in Python\nDESCRIPTION: This command installs PyCaret with support for cuML 0.15 in a pre-configured environment, typically used in blazingSQL setups.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/docs/source/installation.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# install pycaret\n!/opt/conda-environments/rapids-stable/bin/python -m pip install --upgrade pycaret\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for PyCaret regression module documentation\nDESCRIPTION: This RST (reStructuredText) directive tells Sphinx to automatically generate documentation for the pycaret.regression module, including all its members such as functions and classes.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/docs/source/api/regression.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: pycaret.regression\n   :members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for PyCaret Datasets\nDESCRIPTION: Sphinx documentation structure that automatically generates API documentation for the pycaret.datasets module. Uses the automodule directive to include all members of the module.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/docs/source/api/datasets.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _Datasets:\n\nDatasets\n========\n.. automodule:: pycaret.datasets\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Generating Clustering Module Documentation with Sphinx\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the pycaret.clustering module. It includes all members of the module in the documentation.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/docs/source/api/clustering.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: pycaret.clustering\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Setting up Sphinx Documentation for PyCaret Classification Module\nDESCRIPTION: ReStructuredText directive that creates a reference label for the Classification section and sets up automatic documentation generation for the pycaret.classification module. This directive instructs Sphinx to document all members of the module.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/docs/source/api/classification.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _Classification:\n\nClassification\n==============\n.. automodule:: pycaret.classification\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for PyCaret Anomaly Detection Module\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for all members of the pycaret.anomaly module. This includes classes, functions, and other objects defined in the module.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/docs/source/api/anomaly.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: pycaret.anomaly\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Dependencies for PyCaret\nDESCRIPTION: A list of package dependencies required for generating PyCaret documentation. It specifies Sphinx as the documentation generator with a minimum version of 3.0.0, the Read the Docs Sphinx theme with minimum version 0.5.0, and NumPy as a core dependency without version restriction.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/docs/source/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsphinx>=3.0.0\nsphinx-rtd-theme>=0.5.0\nnumpy\n```\n\n----------------------------------------\n\nTITLE: Citation format for PyCaret in BibTeX\nDESCRIPTION: Provides the recommended BibTeX citation format for referencing PyCaret in academic or scientific papers. The citation includes author, title, year, version information and URL.\nSOURCE: https://github.com/pycaret/pycaret/blob/master/docs/source/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: bibtex\nCODE:\n```\n@Manual{PyCaret,\n  author  = {Moez Ali},\n  title   = {PyCaret: An open source, low-code machine learning library in Python},\n  year    = {2020},\n  month   = {April},\n  note    = {PyCaret version 1.0.0},\n  url     = {https://www.pycaret.org}\n}\n```"
  }
]