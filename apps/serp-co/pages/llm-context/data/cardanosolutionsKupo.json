[
  {
    "owner": "cardanosolutions",
    "repo": "kupo",
    "content": "TITLE: Kupo Copy Command Usage\nDESCRIPTION: This code snippet demonstrates the usage of the `kupo copy` command to clone an existing database into a smaller subset. It allows for quickly forking new instances of a parent index without resynchronizing the entire chain. The command accepts one or many patterns and copies indexes in seconds.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nUsage: kupo copy --from DIR --into DIR [--match PATTERN]\n\n  Copy from a source database into another, while applying the provided pattern\n  filters.\n\nAvailable options:\n  -h,--help                Show this help text\n  --from DIR               Working directory to copy from.\n  --into DIR               Working directory to copy into.\n  --match PATTERN          A pattern to match on. Can be provided multiple times (as a logical disjunction, i.e. 'or')\n```\n\n----------------------------------------\n\nTITLE: Kupo Matches Endpoint Usage Examples\nDESCRIPTION: These code snippets demonstrate example usages of the `/matches` endpoint for fetching data in a paginated fashion using slot ranges. Ranges can be made on either `created_at` or `spent_at` fields, and can be defined by absolute slot number or by a point (slot number + block header hash).\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CHANGELOG.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\n/matches?created_after=1234\n```\n\nLANGUAGE: HTTP\nCODE:\n```\n/matches?created_after=1234&created_before=5678\n```\n\nLANGUAGE: HTTP\nCODE:\n```\n/matches?spent&spent_before=1234\n```\n\nLANGUAGE: HTTP\nCODE:\n```\n/matches?spent&created_after=1234.4675360c80235b60b127222702b6e9b2b5c20dee7115acfc46eb6f3e9fd97ff0&spent_before=5678\n```\n\n----------------------------------------\n\nTITLE: HTTP PUT Endpoint for Inserting a Pattern\nDESCRIPTION: This endpoint allows inserting a new pattern, requiring a rollback point to synchronize again from.  Passing the most recent checkpoint recovers the old behavior. Adding an already existing pattern allows rolling back the indexer to a previous point in time.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CHANGELOG.md#_snippet_9\n\nLANGUAGE: HTTP\nCODE:\n```\nPUT /patterns/{pattern-fragment}\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Endpoint for Matches with Spent/Unspent Filter\nDESCRIPTION: This endpoint allows filtering matches based on whether they have been spent or not, using the `spent` or `unspent` query flags. It returns a list of matches, each with a `spent_at` field indicating the slot in which the input was spent.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CHANGELOG.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /matches[?(spent|unspent)]\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /matches/{pattern-fragment}[?(spent|unspent)]\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /matches/{pattern-fragment}/{pattern-fragment}[?(spent|unspent)]\n```\n\n----------------------------------------\n\nTITLE: Policy ID and Asset Name Pattern Syntax\nDESCRIPTION: Defines the syntax for matching results by policy ID and asset name in Kupo. This pattern is used for querying transactions based on specific asset types. It requires the POLICY_ID and ASSET_NAME to be valid values.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n  ┏━━━━━━━━━━━┓ ╭───╮ ┏━━━━━━━━━━━━┓\n╾─┫ POLICY_ID ┣─┤ . ├─┫ ASSET_NAME ┣─╼\n  ┗━━━━━━━━━━━┛ ╰───╯ ┗━━━━━━━━━━━━┛\n```\n\n----------------------------------------\n\nTITLE: Output Index and Transaction ID Pattern Syntax\nDESCRIPTION: Defines the syntax for matching results by output index and transaction ID in Kupo.  This pattern is used for querying transactions based on specific output references. It requires the OUTPUT_INDEX and TRANSACTION_ID to be valid values.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n  ┏━━━━━━━━━━━━━━┓ ╭───╮ ┏━━━━━━━━━━━━━━━━┓\n╾─┫ OUTPUT_INDEX ┣─┤ @ ├─┫ TRANSACTION_ID ┣─╼\n  ┗━━━━━━━━━━━━━━┛ ╰───╯ ┗━━━━━━━━━━━━━━━━┛\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Endpoint for Datum by Hash\nDESCRIPTION: This endpoint retrieves a Plutus datum pre-image from a datum hash digest. Kupo tracks datums found in transactions' witnesses or output (inline datums). Datums not associated with any existing pattern matches are eventually garbage-collected.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CHANGELOG.md#_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /datums/{datum-hash}\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Endpoint for Script by Hash\nDESCRIPTION: This endpoint retrieves a native or Plutus script pre-image from a script hash digest. Kupo tracks scripts found in transactions' witnesses, auxiliary data, or outputs (reference scripts).\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CHANGELOG.md#_snippet_6\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /scripts/{script-hash}\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Endpoint for Matching Patterns\nDESCRIPTION: This endpoint retrieves patterns that include a given pattern fragment. It's useful for checking if an address is matched by a particular configuration.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CHANGELOG.md#_snippet_7\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /patterns/{pattern-fragment}[/{pattern-fragment}]\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Endpoint for Listing Patterns\nDESCRIPTION: This endpoint retrieves a list of existing patterns. It was added as part of the dynamic management of patterns feature.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CHANGELOG.md#_snippet_11\n\nLANGUAGE: HTTP\nCODE:\n```\nGET v1/patterns\n```\n\n----------------------------------------\n\nTITLE: Defining Inputs Table Schema - SQL\nDESCRIPTION: Defines the `inputs` table schema, which stores information about transaction inputs. Includes columns for output reference, address, value, datum information, script hash, creation and spending details. Uses virtual columns for derived values like output index, transaction index, datum hash, and payment credential.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/db/README.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `inputs` (\n  `ext_output_reference` BLOB NOT NULL,\n  `address` TEXT COLLATE NOCASE NOT NULL,\n  `value` BLOB NOT NULL,\n  `datum_info` BLOB,\n  `script_hash` BLOB,\n  `created_at` INTEGER NOT NULL,\n  `spent_at` INTEGER,\n  `spent_by` BLOB,\n  `spent_with` BLOB,\n\n  `output_reference` BLOB NOT NULL GENERATED ALWAYS AS (substr(`ext_output_reference`, 1, 34)) VIRTUAL,\n  `output_index` BLOB NOT NULL GENERATED ALWAYS AS (substr(`ext_output_reference`, -4, 2)) VIRTUAL,\n  `transaction_index` BLOB NOT NULL GENERATED ALWAYS AS (substr(`ext_output_reference`, -2)) VIRTUAL,\n  `datum_hash` BLOB GENERATED ALWAYS AS (substr(`datum_info`, 2)) VIRTUAL,\n  `payment_credential` TEXT COLLATE NOCASE NOT NULL GENERATED ALWAYS AS (substr(`address`, -56)) VIRTUAL,\n\n  PRIMARY KEY (`ext_output_reference`)\n);\n\nCREATE UNIQUE INDEX `inputsByOutputReference` ON `inputs` (`output_reference`);\n\nCREATE INDEX `inputsByAddress` ON `inputs` (`address` COLLATE NOCASE);\nCREATE INDEX `inputsByPaymentCredential` ON `inputs` (`payment_credential` COLLATE NOCASE);\nCREATE INDEX `inputsByCreatedAt` ON `inputs` (`created_at`);\nCREATE INDEX `inputsBySpentAt` ON `inputs` (`spent_at`);\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Endpoint for Checkpoint by Slot\nDESCRIPTION: This endpoint retrieves a point on-chain from a given slot number. It's flexible and allows retrieving the ancestor of a known point, useful in combination with protocols like Ogmios' chain-sync.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CHANGELOG.md#_snippet_8\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /checkpoints/{slot-no}[?strict]\n```\n\n----------------------------------------\n\nTITLE: Defining Patterns Table Schema - SQL\nDESCRIPTION: Defines the `patterns` table schema, which stores patterns, used for configuration and dynamic management via HTTP. Includes a column for the pattern itself, which serves as the primary key.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/db/README.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `patterns` (\n  `pattern` TEXT PRIMARY KEY NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: HTTP DELETE Endpoint for Deleting Patterns\nDESCRIPTION: These endpoints allow removing patterns via the HTTP API.  This is part of the dynamic management of patterns feature.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CHANGELOG.md#_snippet_12\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE v1/patterns/{pattern-fragment}\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE v1/patterns/{pattern-fragment}/{pattern-fragment}\n```\n\n----------------------------------------\n\nTITLE: HTTP DELETE Endpoint for Purging Matches\nDESCRIPTION: These endpoints allow purging old matches, but only if the provided pattern is strictly non-overlapping with an existing active pattern.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CHANGELOG.md#_snippet_13\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE v1/matches/{pattern-fragment}\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE v1/matches/{pattern-fragment}/{pattern-fragment}\n```\n\n----------------------------------------\n\nTITLE: Command Line Flag for Pruning UTxO\nDESCRIPTION: This command-line flag, `--prune-utxo`, allows users to remove spent inputs from the index. When set, the index only contains the current ledger UTxO set. When not set, spent inputs are kept but marked as spent.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CHANGELOG.md#_snippet_14\n\nLANGUAGE: Command Line\nCODE:\n```\n--prune-utxo\n```\n\n----------------------------------------\n\nTITLE: Nix Development Environment Setup\nDESCRIPTION: This snippet demonstrates how to use Nix to create a development environment for Kupo. It utilizes the `nix develop` command with a specific devx configuration. This provides a reproducible environment with the necessary dependencies for building and testing Kupo.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Nix\nCODE:\n```\nnix develop github:CardanoSolutions/devx#ghc94-iog-full --no-write-lock-file --refresh\n```\n\n----------------------------------------\n\nTITLE: Cabal Project Local Configuration\nDESCRIPTION: This snippet shows a `cabal.project.local` file, used to configure Cabal builds with specific library directories and constraints. It addresses dependency issues, especially regarding `HsOpenSSL`, `zlib`, and `pcre-lite`, by specifying extra library directories and forcing the use of `pkg-config`.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: Cabal\nCODE:\n```\npackage digest\n  extra-lib-dirs: /nix/store/y08crgb0j7bniwwpcsfwn0dikpcim948-zlib-1.3/lib /nix/store/sk54pr3wx1jbfv8pd0fizkvdsb38j5ga-pcre-8.45-bin/lib\n\nconstraints:\n  HsOpenSSL +use-pkg-config,\n  zlib +pkg-config,\n  pcre-lite +pkg-config\n```\n\n----------------------------------------\n\nTITLE: Defining Policies Table Schema - SQL\nDESCRIPTION: Defines the `policies` table schema, which stores information about token policies associated with outputs. Includes columns for output reference and policy ID. Establishes a foreign key constraint referencing the `inputs` table for referential integrity and cascading deletes.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/db/README.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `policies` (\n  `output_reference` BLOB NOT NULL,\n  `policy_id` BLOB NOT NULL,\n  PRIMARY KEY (`output_reference`, `policy_id`),\n  CONSTRAINT `fk_policies_inputs`\n    FOREIGN KEY (`output_reference`)\n    REFERENCES inputs(`output_reference`)\n    ON DELETE CASCADE\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Cardano Node & Ogmios\nDESCRIPTION: This snippet shows the environment variables required to run end-to-end tests that depend on a running Cardano node and Ogmios instance.  It specifies the socket path for the Cardano node, the path to the node configuration file, and the host and port for the Ogmios instance.  `direnv` is recommended for managing these variables.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n# For cardano-node\nexport CARDANO_NODE_SOCKET=/path/to/testnet/cardano-node/node.socket\nexport CARDANO_NODE_CONFIG=/path/to/testnet/cardano-node/config.json\n\n# For Ogmios\nexport OGMIOS_HOST=127.0.0.1\nexport OGMIOS_PORT=1337\n```\n\n----------------------------------------\n\nTITLE: Command Line Options for Ogmios Provider\nDESCRIPTION: These command-line options enable support for Ogmios as an alternative chain-sync provider. They are used instead of `--node-socket` and `--node-config` when using Ogmios with remote instances.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CHANGELOG.md#_snippet_16\n\nLANGUAGE: Command Line\nCODE:\n```\n--ogmios-host\n```\n\nLANGUAGE: Command Line\nCODE:\n```\n--ogmios-port\n```\n\n----------------------------------------\n\nTITLE: Command Line Flag for GC Interval\nDESCRIPTION: The `--gc-interval` command-line option allows users to tweak the interval between database garbage collections.  Optimal values depend on the use-case; a too short interval may impact syncing, while a too long interval may increase the time needed for garbage collection.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CHANGELOG.md#_snippet_15\n\nLANGUAGE: Command Line\nCODE:\n```\n--gc-interval\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Endpoint for Application Health\nDESCRIPTION: This endpoint retrieves the application's health status. It was introduced in version 1.0.0 of Kupo.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CHANGELOG.md#_snippet_10\n\nLANGUAGE: HTTP\nCODE:\n```\nGET v1/health\n```\n\n----------------------------------------\n\nTITLE: Defining Checkpoints Table Schema - SQL\nDESCRIPTION: Defines the `checkpoints` table schema, which stores information about blockchain checkpoints. Includes columns for header hash and slot number. The slot number serves as the primary key.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/db/README.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `checkpoints` (\n  `header_hash` BLOB NOT NULL,\n  `slot_no` INTEGER PRIMARY KEY NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Binary Data Table Schema - SQL\nDESCRIPTION: Defines the `binary_data` table schema, which stores binary data, such as datum or redeemers, indexed by their hash. Includes columns for binary data hash and the binary data itself. The binary data hash serves as the primary key.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/db/README.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `binary_data` (\n  `binary_data_hash` BLOB PRIMARY KEY NOT NULL,\n  `binary_data` BLOB NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Scripts Table Schema - SQL\nDESCRIPTION: Defines the `scripts` table schema, which stores scripts, indexed by their hash. Includes columns for script hash and the script itself. The script hash serves as the primary key.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/db/README.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `scripts` (\n  `script_hash` BLOB PRIMARY KEY NOT NULL,\n  `script` BLOB NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Make\nDESCRIPTION: This snippet shows how to run tests for Kupo using `make`. The `make check` command executes the project's test suite. It assumes a `Makefile` is defined with the `check` target configured to run the tests.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ make check\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Cabal\nDESCRIPTION: This snippet demonstrates how to run all tests in a Cabal project using the `cabal test all` command. This command executes the test suites defined in the Cabal project file. It's an alternative to using `make` for running tests.\nSOURCE: https://github.com/cardanosolutions/kupo/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cabal test all\n```"
  }
]