[
  {
    "owner": "software-mansion",
    "repo": "react-native-gesture-handler",
    "content": "TITLE: Implementing Race Gesture Composition for Dragging and Long Press in React Native\nDESCRIPTION: This example demonstrates the Race composition method where either a pan gesture or long press gesture can be active at once. When the user drags, the component moves; when they long press, a popup appears. The first gesture to activate will cancel the other one.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/fundamentals/gesture-composition.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GestureDetector, Gesture } from 'react-native-gesture-handler';\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n  withTiming,\n} from 'react-native-reanimated';\n\nfunction App() {\n  const offset = useSharedValue({ x: 0, y: 0 });\n  const start = useSharedValue({ x: 0, y: 0 });\n  const popupPosition = useSharedValue({ x: 0, y: 0 });\n  const popupAlpha = useSharedValue(0);\n\n  const animatedStyles = useAnimatedStyle(() => {\n    return {\n      transform: [\n        { translateX: offset.value.x },\n        { translateY: offset.value.y },\n      ],\n    };\n  });\n\n  const animatedPopupStyles = useAnimatedStyle(() => {\n    return {\n      transform: [\n        { translateX: popupPosition.value.x },\n        { translateY: popupPosition.value.y },\n      ],\n      opacity: popupAlpha.value,\n    };\n  });\n\n  const dragGesture = Gesture.Pan()\n    .onStart((_e) => {\n      popupAlpha.value = withTiming(0);\n    })\n    .onUpdate((e) => {\n      offset.value = {\n        x: e.translationX + start.value.x,\n        y: e.translationY + start.value.y,\n      };\n    })\n    .onEnd(() => {\n      start.value = {\n        x: offset.value.x,\n        y: offset.value.y,\n      };\n    });\n\n  const longPressGesture = Gesture.LongPress().onStart((_event) => {\n    popupPosition.value = { x: offset.value.x, y: offset.value.y };\n    popupAlpha.value = withTiming(1);\n  });\n\n  const composed = Gesture.Race(dragGesture, longPressGesture);\n\n  return (\n    <Animated.View>\n      <Popup style={animatedPopupStyles} />\n      <GestureDetector gesture={composed}>\n        <Component style={animatedStyles} />\n      </GestureDetector>\n    </Animated.View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pan Gesture in React Native\nDESCRIPTION: This example demonstrates how to use the Pan gesture in a React Native application. It creates a draggable box that can be moved horizontally and snaps to either end position based on the drag distance.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/pan-gesture.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet } from 'react-native';\nimport { Gesture, GestureDetector } from 'react-native-gesture-handler';\nimport Animated, {\n  useSharedValue,\n  withTiming,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\n\nconst END_POSITION = 200;\n\nexport default function App() {\n  const onLeft = useSharedValue(true);\n  const position = useSharedValue(0);\n\n  const panGesture = Gesture.Pan()\n    .onUpdate((e) => {\n      if (onLeft.value) {\n        position.value = e.translationX;\n      } else {\n        position.value = END_POSITION + e.translationX;\n      }\n    })\n    .onEnd((e) => {\n      if (position.value > END_POSITION / 2) {\n        position.value = withTiming(END_POSITION, { duration: 100 });\n        onLeft.value = false;\n      } else {\n        position.value = withTiming(0, { duration: 100 });\n        onLeft.value = true;\n      }\n    });\n\n  const animatedStyle = useAnimatedStyle(() => ({\n    transform: [{ translateX: position.value }],\n  }));\n\n  return (\n    <GestureDetector gesture={panGesture}>\n      <Animated.View style={[styles.box, animatedStyle]} />\n    </GestureDetector>\n  );\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    height: 120,\n    width: 120,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n    marginBottom: 30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Simultaneous Gesture Composition for Photo Gallery Interactions\nDESCRIPTION: This example shows how to use the Simultaneous composition method to allow multiple gestures (pan, pinch, and rotate) to be active at the same time. This approach enables users to move, zoom, and rotate a photo simultaneously.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/fundamentals/gesture-composition.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GestureDetector, Gesture } from 'react-native-gesture-handler';\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\n\nfunction App() {\n  const offset = useSharedValue({ x: 0, y: 0 });\n  const start = useSharedValue({ x: 0, y: 0 });\n  const scale = useSharedValue(1);\n  const savedScale = useSharedValue(1);\n  const rotation = useSharedValue(0);\n  const savedRotation = useSharedValue(0);\n  const animatedStyles = useAnimatedStyle(() => {\n    return {\n      transform: [\n        { translateX: offset.value.x },\n        { translateY: offset.value.y },\n        { scale: scale.value },\n        { rotateZ: `${rotation.value}rad` },\n      ],\n    };\n  });\n\n  const dragGesture = Gesture.Pan()\n    .averageTouches(true)\n    .onUpdate((e) => {\n      offset.value = {\n        x: e.translationX + start.value.x,\n        y: e.translationY + start.value.y,\n      };\n    })\n    .onEnd(() => {\n      start.value = {\n        x: offset.value.x,\n        y: offset.value.y,\n      };\n    });\n\n  const zoomGesture = Gesture.Pinch()\n    .onUpdate((event) => {\n      scale.value = savedScale.value * event.scale;\n    })\n    .onEnd(() => {\n      savedScale.value = scale.value;\n    });\n\n  const rotateGesture = Gesture.Rotation()\n    .onUpdate((event) => {\n      rotation.value = savedRotation.value + event.rotation;\n    })\n    .onEnd(() => {\n      savedRotation.value = rotation.value;\n    });\n\n  const composed = Gesture.Simultaneous(\n    dragGesture,\n    Gesture.Simultaneous(zoomGesture, rotateGesture)\n  );\n\n  return (\n    <Animated.View>\n      <GestureDetector gesture={composed}>\n        <Photo style={animatedStyles} />\n      </GestureDetector>\n    </Animated.View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Component with Animation\nDESCRIPTION: Example showing how to implement a draggable component using PanGestureHandler with Animated.event and useNativeDriver.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gesture-handlers/about-handlers.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nclass Draggable extends Component {\n  render() {\n    return (\n      <PanGestureHandler onGestureEvent={Animated.event({ ... }, { useNativeDriver: true })}>\n        <Animated.View style={animatedStyles} />\n      </PanGestureHandler>\n    );\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Right Fling Gesture with Animation in React Native\nDESCRIPTION: Example showing how to create a fling gesture that detects right swipes and animates a box when triggered. Uses react-native-gesture-handler for detection and react-native-reanimated for animation.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/fling-gesture.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet } from 'react-native';\nimport {\n  Gesture,\n  GestureDetector,\n  Directions,\n} from 'react-native-gesture-handler';\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n  withTiming,\n} from 'react-native-reanimated';\n\nexport default function App() {\n  const position = useSharedValue(0);\n  // highlight-next-line\n  const flingGesture = Gesture.Fling()\n    .direction(Directions.RIGHT)\n    .onStart((e) => {\n      position.value = withTiming(position.value + 10, { duration: 100 });\n    });\n\n  const animatedStyle = useAnimatedStyle(() => ({\n    transform: [{ translateX: position.value }],\n  }));\n\n  return (\n    <GestureDetector gesture={flingGesture}>\n      <Animated.View style={[styles.box, animatedStyle]} />\n    </GestureDetector>\n  );\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    height: 120,\n    width: 120,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n    marginBottom: 30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Documenting PanGestureHandler Properties in Markdown\nDESCRIPTION: This snippet describes various properties of the PanGestureHandler, including velocityX, velocityY, x, y, absoluteX, absoluteY, and stylusData. It provides detailed explanations of each property's purpose and usage in the context of gesture handling in React Native.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/pan-gesture.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `velocityX`\n\nVelocity of the pan gesture along the X axis in the current moment. The value is expressed in point units per second.\n\n### `velocityY`\n\nVelocity of the pan gesture along the Y axis in the current moment. The value is expressed in point units per second.\n\n### `x`\n\nX coordinate of the current position of the pointer (finger or a leading pointer when there are multiple fingers placed) relative to the view attached to the [`GestureDetector`](/docs/gestures/gesture-detector). Expressed in point units.\n\n### `y`\n\nY coordinate of the current position of the pointer (finger or a leading pointer when there are multiple fingers placed) relative to the view attached to the [`GestureDetector`](/docs/gestures/gesture-detector). Expressed in point units.\n\n### `absoluteX`\n\nX coordinate of the current position of the pointer (finger or a leading pointer when there are multiple fingers placed) relative to the window. The value is expressed in point units. It is recommended to use it instead of [`x`](#x) in cases when the original view can be transformed as an effect of the gesture.\n\n### `absoluteY`\n\nY coordinate of the current position of the pointer (finger or a leading pointer when there are multiple fingers placed) relative to the window. The value is expressed in point units. It is recommended to use it instead of [`y`](#y) in cases when the original view can be transformed as an effect of the gesture.\n\n### `stylusData`\n\nObject that contains additional information about `stylus`. It consists of the following fields:\n\n- [`tiltX`](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX) - angle in degrees between the Y-Z plane of the stylus and the screen.\n- [`tiltY`](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY) - angle in degrees between the X-Z plane of the stylus and the screen.\n- [`altitudeAngle`](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/altitudeAngle) - angle between stylus axis and the X-Y plane of a device screen.\n- [`azimuthAngle`](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/azimuthAngle) - angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis.\n- [`pressure`](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure) - indicates the normalized pressure of the stylus.\n\n<BaseEventData />\n```\n\n----------------------------------------\n\nTITLE: Implementing Pinch Gesture Handler in React Native\nDESCRIPTION: Example implementation of a PinchableBox component that handles pinch gestures for image scaling. Uses Animated API for smooth scaling transitions and native driver for performance optimization.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gesture-handlers/pinch-gh.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport class PinchableBox extends React.Component {\n  _baseScale = new Animated.Value(1);\n  _pinchScale = new Animated.Value(1);\n  _scale = Animated.multiply(this._baseScale, this._pinchScale);\n  _lastScale = 1;\n  _onPinchGestureEvent = Animated.event(\n    [{ nativeEvent: { scale: this._pinchScale } }],\n    { useNativeDriver: USE_NATIVE_DRIVER }\n  );\n\n  _onPinchHandlerStateChange = (event) => {\n    if (event.nativeEvent.oldState === State.ACTIVE) {\n      this._lastScale *= event.nativeEvent.scale;\n      this._baseScale.setValue(this._lastScale);\n      this._pinchScale.setValue(1);\n    }\n  };\n\n  render() {\n    return (\n      <PinchGestureHandler\n        onGestureEvent={this._onPinchGestureEvent}\n        onHandlerStateChange={this._onPinchHandlerStateChange}>\n        <View style={styles.container} collapsable={false}>\n          <Animated.Image\n            style={[\n              styles.pinchableImage,\n              {\n                transform: [{ perspective: 200 }, { scale: this._scale }],\n              },\n            ]}\n          />\n        </View>\n      </PinchGestureHandler>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rotation Gesture Handler in React Native\nDESCRIPTION: Example implementation of a rotation gesture handler using react-native-gesture-handler and react-native-reanimated. The code demonstrates how to track rotation movements, update shared values, and apply animated transformations to a view based on gesture input.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/rotation-gesture.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet } from 'react-native';\nimport { Gesture, GestureDetector } from 'react-native-gesture-handler';\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\n\nexport default function App() {\n  const rotation = useSharedValue(1);\n  const savedRotation = useSharedValue(1);\n\n  const rotationGesture = Gesture.Rotation()\n    .onUpdate((e) => {\n      rotation.value = savedRotation.value + e.rotation;\n    })\n    .onEnd(() => {\n      savedRotation.value = rotation.value;\n    });\n\n  const animatedStyle = useAnimatedStyle(() => ({\n    transform: [{ rotateZ: `${(rotation.value / Math.PI) * 180}deg` }],\n  }));\n\n  return (\n    <GestureDetector gesture={rotationGesture}>\n      <Animated.View style={[styles.box, animatedStyle]} />\n    </GestureDetector>\n  );\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    height: 120,\n    width: 120,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n    marginBottom: 30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing DrawerLayout in React Native\nDESCRIPTION: Demonstrates a complete example of using the DrawerLayout component in a React Native application. It includes rendering the drawer content, handling drawer slides, and setting various drawer properties.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/components/drawer-layout.mdx#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Drawerable extends Component {\n  handleDrawerSlide = (status) => {\n    // outputs a value between 0 and 1\n    console.log(status);\n  };\n\n  renderDrawer = () => {\n    return (\n      <View>\n        <Text>I am in the drawer!</Text>\n      </View>\n    );\n  };\n\n  render() {\n    return (\n      <View style={{ flex: 1 }}>\n        <DrawerLayout\n          drawerWidth={200}\n          drawerPosition={DrawerLayout.positions.Right}\n          drawerType=\"front\"\n          drawerBackgroundColor=\"#ddd\"\n          renderNavigationView={this.renderDrawer}\n          onDrawerSlide={this.handleDrawerSlide}>\n          <View>\n            <Text>Hello, it's me</Text>\n          </View>\n        </DrawerLayout>\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pinch Gesture in React Native with Gesture Handler and Reanimated\nDESCRIPTION: This code snippet demonstrates how to implement a pinch gesture in a React Native application using React Native Gesture Handler and Reanimated. It creates a scalable box that responds to pinch gestures, updating its size based on the pinch scale.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/pinch-gesture.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet } from 'react-native';\nimport { Gesture, GestureDetector } from 'react-native-gesture-handler';\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\n\nexport default function App() {\n  const scale = useSharedValue(1);\n  const savedScale = useSharedValue(1);\n\n  const pinchGesture = Gesture.Pinch()\n    .onUpdate((e) => {\n      scale.value = savedScale.value * e.scale;\n    })\n    .onEnd(() => {\n      savedScale.value = scale.value;\n    });\n\n  const animatedStyle = useAnimatedStyle(() => ({\n    transform: [{ scale: scale.value }],\n  }));\n\n  return (\n    <GestureDetector gesture={pinchGesture}>\n      <Animated.View style={[styles.box, animatedStyle]} />\n    </GestureDetector>\n  );\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    height: 120,\n    width: 120,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n    marginBottom: 30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Rotatable Box Component with RotationGestureHandler in React Native\nDESCRIPTION: This code snippet demonstrates how to create a RotableBox component using RotationGestureHandler. It sets up an animated rotation value, handles gesture events, and applies the rotation transform to an image.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/api/gesture-handlers/rotation-gh.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass RotableBox extends React.Component {\n  _rotate = new Animated.Value(0);\n  _rotateStr = this._rotate.interpolate({\n    inputRange: [-100, 100],\n    outputRange: ['-100rad', '100rad'],\n  });\n  _lastRotate = 0;\n  _onRotateGestureEvent = Animated.event(\n    [{ nativeEvent: { rotation: this._rotate } }],\n    { useNativeDriver: USE_NATIVE_DRIVER }\n  );\n  _onRotateHandlerStateChange = (event) => {\n    if (event.nativeEvent.oldState === State.ACTIVE) {\n      this._lastRotate += event.nativeEvent.rotation;\n      this._rotate.setOffset(this._lastRotate);\n      this._rotate.setValue(0);\n    }\n  };\n  render() {\n    return (\n      <RotationGestureHandler\n        onGestureEvent={this._onRotateGestureEvent}\n        onHandlerStateChange={this._onRotateHandlerStateChange}>\n        <Animated.Image\n          style={[\n            styles.pinchableImage,\n            {\n              transform: [{ perspective: 200 }, { rotate: this._rotateStr }],\n            },\n          ]}\n        />\n      </RotationGestureHandler>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pan Gesture for Ball Component in React Native Gesture Handler\nDESCRIPTION: This snippet defines a pan gesture using React Native Gesture Handler and applies it to the Ball component. It updates the ball's position based on the gesture's translation and handles the gesture's start and end events.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/quickstart/index.md#2025-04-20_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst gesture = Gesture.Pan()\n  .onStart(() => {\n    start.value = offset.value;\n  })\n  .onUpdate((e) => {\n    offset.value = {\n      x: e.translationX + start.value.x,\n      y: e.translationY + start.value.y,\n    };\n  })\n  .onEnd(() => {});\n\nexport const Ball = () => {\n  return (\n    <GestureDetector gesture={gesture}>\n      <Animated.View style={[styles.ball, animatedStyles]} />\n    </GestureDetector>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing an Apple-Style Swipeable Row in React Native\nDESCRIPTION: A complete example implementation of a swipeable row component with an Archive action on the left side. The component uses interpolation to create an animation effect when dragging, and includes styling for the action button.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/components/swipeable.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport { RectButton } from 'react-native-gesture-handler';\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\n\nclass AppleStyleSwipeableRow extends Component {\n  renderLeftActions = (progress, dragX) => {\n    const trans = dragX.interpolate({\n      inputRange: [0, 50, 100, 101],\n      outputRange: [-20, 0, 0, 1],\n    });\n    return (\n      <RectButton style={styles.leftAction} onPress={this.close}>\n        <Animated.Text\n          style={[\n            styles.actionText,\n            {\n              transform: [{ translateX: trans }],\n            },\n          ]}>\n          Archive\n        </Animated.Text>\n      </RectButton>\n    );\n  };\n  render() {\n    return (\n      <Swipeable renderLeftActions={this.renderLeftActions}>\n        <Text>\"hello\"</Text>\n      </Swipeable>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Circle with Pan Gesture Handler in React Native\nDESCRIPTION: This example demonstrates how to create a draggable circle using the PanGestureHandler from react-native-gesture-handler. It uses Animated to handle the circle's position and responds to pan gestures.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gesture-handlers/pan-gh.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Component } from 'react';\nimport { Animated, Dimensions } from 'react-native';\nimport {\n  GestureHandlerRootView,\n  PanGestureHandler,\n} from 'react-native-gesture-handler';\n\nconst { width } = Dimensions.get('screen');\nconst circleRadius = 30;\n\nclass Circle extends Component {\n  _touchX = new Animated.Value(width / 2 - circleRadius);\n\n  _onPanGestureEvent = Animated.event([{ nativeEvent: { x: this._touchX } }], {\n    useNativeDriver: true,\n  });\n\n  render() {\n    return (\n      <GestureHandlerRootView>\n        <PanGestureHandler onGestureEvent={this._onPanGestureEvent}>\n          <Animated.View\n            style={{\n              height: 150,\n              justifyContent: 'center',\n            }}>\n            <Animated.View\n              style={[\n                {\n                  backgroundColor: '#42a5f5',\n                  borderRadius: circleRadius,\n                  height: circleRadius * 2,\n                  width: circleRadius * 2,\n                },\n                {\n                  transform: [\n                    {\n                      translateX: Animated.add(\n                        this._touchX,\n                        new Animated.Value(-circleRadius)\n                      ),\n                    },\n                  ],\n                },\n              ]}\n            />\n          </Animated.View>\n        </PanGestureHandler>\n      </GestureHandlerRootView>\n    );\n  }\n}\n\nexport default function App() {\n  return <Circle />;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Swipeable Implementation Example\nDESCRIPTION: Full example demonstrating the implementation of a Reanimated Swipeable component with right actions and custom styling.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/components/reanimated_swipeable.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text, StyleSheet } from 'react-native';\n\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport ReanimatedSwipeable from 'react-native-gesture-handler/ReanimatedSwipeable';\nimport Reanimated, {\n  SharedValue,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\n\nfunction RightAction(prog: SharedValue<number>, drag: SharedValue<number>) {\n  const styleAnimation = useAnimatedStyle(() => {\n    console.log('showRightProgress:', prog.value);\n    console.log('appliedTranslation:', drag.value);\n\n    return {\n      transform: [{ translateX: drag.value + 50 }],\n    };\n  });\n\n  return (\n    <Reanimated.View style={styleAnimation}>\n      <Text style={styles.rightAction}>Text</Text>\n    </Reanimated.View>\n  );\n}\n\nexport default function Example() {\n  return (\n    <GestureHandlerRootView>\n      <ReanimatedSwipeable\n        containerStyle={styles.swipeable}\n        friction={2}\n        enableTrackpadTwoFingerGesture\n        rightThreshold={40}\n        renderRightActions={RightAction}>\n        <Text>Swipe me!</Text>\n      </ReanimatedSwipeable>\n    </GestureHandlerRootView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  rightAction: { width: 50, height: 50, backgroundColor: 'purple' },\n  separator: {\n    width: '100%',\n    borderTopWidth: 1,\n  },\n  swipeable: {\n    height: 50,\n    backgroundColor: 'papayawhip',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Long Press Gesture in React Native\nDESCRIPTION: Example of implementing a Long Press gesture in React Native using the Gesture Handler library. The gesture detects when a user presses and holds on an element for a specified duration, logging the duration when the press is released successfully.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/long-press-gesture.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, StyleSheet } from 'react-native';\nimport { Gesture, GestureDetector } from 'react-native-gesture-handler';\n\nexport default function App() {\n  // highlight-next-line\n  const longPressGesture = Gesture.LongPress().onEnd((e, success) => {\n    if (success) {\n      console.log(`Long pressed for ${e.duration} ms!`);\n    }\n  });\n\n  return (\n    <GestureDetector gesture={longPressGesture}>\n      <View style={styles.box} />\n    </GestureDetector>\n  );\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    height: 120,\n    width: 120,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n    marginBottom: 30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing PinchGestureHandler in React Native\nDESCRIPTION: This code snippet demonstrates how to implement a PinchGestureHandler in a React Native component. It creates a pinchable box that can be scaled using pinch gestures. The component uses Animated values to track and apply the scale transformations based on the pinch gesture events.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/api/gesture-handlers/pinch-gh.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport class PinchableBox extends React.Component {\n  _baseScale = new Animated.Value(1);\n  _pinchScale = new Animated.Value(1);\n  _scale = Animated.multiply(this._baseScale, this._pinchScale);\n  _lastScale = 1;\n  _onPinchGestureEvent = Animated.event(\n    [{ nativeEvent: { scale: this._pinchScale } }],\n    { useNativeDriver: USE_NATIVE_DRIVER }\n  );\n\n  _onPinchHandlerStateChange = (event) => {\n    if (event.nativeEvent.oldState === State.ACTIVE) {\n      this._lastScale *= event.nativeEvent.scale;\n      this._baseScale.setValue(this._lastScale);\n      this._pinchScale.setValue(1);\n    }\n  };\n\n  render() {\n    return (\n      <PinchGestureHandler\n        onGestureEvent={this._onPinchGestureEvent}\n        onHandlerStateChange={this._onPinchHandlerStateChange}>\n        <View style={styles.container} collapsable={false}>\n          <Animated.Image\n            style={[\n              styles.pinchableImage,\n              {\n                transform: [{ perspective: 200 }, { scale: this._scale }],\n              },\n            ]}\n          />\n        </View>\n      </PinchGestureHandler>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single and Double Tap Gestures in React Native\nDESCRIPTION: Example showing how to implement both single and double tap gesture detection using React Native Gesture Handler. The code demonstrates creating exclusive tap gestures with different configurations and handling tap events.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/tap-gesture.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, StyleSheet } from 'react-native';\nimport { Gesture, GestureDetector } from 'react-native-gesture-handler';\n\nexport default function App() {\n  const singleTap = Gesture.Tap()\n    .maxDuration(250)\n    .onStart(() => {\n      console.log('Single tap!');\n    });\n\n  const doubleTap = Gesture.Tap()\n    .maxDuration(250)\n    .numberOfTaps(2)\n    .onStart(() => {\n      console.log('Double tap!');\n    });\n\n  return (\n    <GestureDetector gesture={Gesture.Exclusive(doubleTap, singleTap)}>\n      <View style={styles.box} />\n    </GestureDetector>\n  );\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    height: 120,\n    width: 120,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n    marginBottom: 30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Single and Double Tap Handlers with Wait For Pattern\nDESCRIPTION: Example demonstrating how to implement both single and double tap handlers on the same view using the waitFor prop. The single tap handler waits for the double tap handler to ensure proper gesture recognition.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/interactions.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst doubleTap = React.createRef();\nconst PressBox = () => (\n  <TapGestureHandler\n    onHandlerStateChange={({ nativeEvent }) =>\n      nativeEvent.state === State.ACTIVE && Alert.alert('Single tap!')\n    }\n    waitFor={doubleTap}>\n    <TapGestureHandler\n      ref={doubleTap}\n      onHandlerStateChange={({ nativeEvent }) =>\n        nativeEvent.state === State.ACTIVE && Alert.alert(\"You're so fast\")\n      }\n      numberOfTaps={2}>\n      <View style={styles.box} />\n    </TapGestureHandler>\n  </TapGestureHandler>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Double Tap Detection with TapGestureHandler in React Native\nDESCRIPTION: This code snippet demonstrates how to use TapGestureHandler to detect both single and double taps on a view. It uses nested TapGestureHandlers with the 'waitFor' prop to prioritize double tap detection.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/api/gesture-handlers/tap-gh.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport class PressBox extends Component {\n  doubleTapRef = React.createRef();\n  render() {\n    return (\n      <TapGestureHandler\n        onHandlerStateChange={this._onSingleTap}\n        waitFor={this.doubleTapRef}>\n        <TapGestureHandler ref={this.doubleTapRef} numberOfTaps={2}>\n          <View style={styles.box} />\n        </TapGestureHandler>\n      </TapGestureHandler>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simultaneous Pinch and Rotation Gesture Handlers in React Native\nDESCRIPTION: Example showing how to implement simultaneous pinch and rotation gestures on an image using PinchGestureHandler and RotationGestureHandler. The handlers are connected using refs and simultaneousHandlers prop to allow concurrent recognition.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/interactions.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass PinchableBox extends React.Component {\n  // ...take a look on full implementation in an Example app\n  render() {\n    const imagePinch = React.createRef();\n    const imageRotation = React.createRef();\n    return (\n      <RotationGestureHandler\n        ref={imageRotation}\n        simultaneousHandlers={imagePinch}\n        onGestureEvent={this._onRotateGestureEvent}\n        onHandlerStateChange={this._onRotateHandlerStateChange}>\n        <Animated.View>\n          <PinchGestureHandler\n            ref={imagePinch}\n            simultaneousHandlers={imageRotation}\n            onGestureEvent={this._onPinchGestureEvent}\n            onHandlerStateChange={this._onPinchHandlerStateChange}>\n            <Animated.View style={styles.container} collapsable={false}>\n              <Animated.Image\n                style={[\n                  styles.pinchableImage,\n                  {\n                    /* events-related transformations */\n                  },\n                ]}\n              />\n            </Animated.View>\n          </PinchGestureHandler>\n        </Animated.View>\n      </RotationGestureHandler>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing State Change Handler in React Native Gesture Handler\nDESCRIPTION: Example showing how to monitor gesture handler state changes using onHandlerStateChange callback. The code demonstrates implementing a long press gesture handler that alerts when the gesture becomes active.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/under-the-hood/state.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { State, LongPressGestureHandler } from 'react-native-gesture-handler';\n\nclass Demo extends Component {\n  _handleStateChange = ({ nativeEvent }) => {\n    if (nativeEvent.state === State.ACTIVE) {\n      Alert.alert('Longpress');\n    }\n  };\n  render() {\n    return (\n      <LongPressGestureHandler onHandlerStateChange={this._handleStateChange}>\n        <Text style={styles.buttonText}>Longpress me</Text>\n      </LongPressGestureHandler>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LongPressGestureHandler in React Native\nDESCRIPTION: A basic example of implementing a LongPressGestureHandler component that displays an alert when a long press is detected. The handler is configured with a minimum duration of 800ms and triggers an alert when the gesture state becomes ACTIVE.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/api/gesture-handlers/longpress-gh.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst LongPressButton = () => (\n  <LongPressGestureHandler\n    onHandlerStateChange={({ nativeEvent }) => {\n      if (nativeEvent.state === State.ACTIVE) {\n        Alert.alert(\"I'm being pressed for so long\");\n      }\n    }}\n    minDurationMs={800}>\n    <View style={styles.box} />\n  </LongPressGestureHandler>\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Tap Gesture in React Native Gesture Handler\nDESCRIPTION: This snippet demonstrates how to import and use the Gesture object to create a tap gesture in a React Native component. It shows the basic structure of using GestureDetector with an Animated.View.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/gesture.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GestureDetector, Gesture } from 'react-native-gesture-handler';\n\nfunction App() {\n  // highlight-next-line\n  const tap = Gesture.Tap();\n\n  return (\n    <GestureDetector gesture={tap}>\n      <Animated.View />\n    </GestureDetector>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Gesture Detection with React Native Gesture Handler\nDESCRIPTION: This snippet demonstrates how to use the Gesture and GestureDetector components from react-native-gesture-handler. It sets up a manual gesture and renders multiple pointer elements based on tracked pointers using Animated.SharedValue.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/manual-gestures/_steps/step3.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Gesture, GestureDetector } from 'react-native-gesture-handler';\n\nexport default function Example() {\n  const trackedPointers: Animated.SharedValue<Pointer>[] = [];\n  const active = useSharedValue(false);\n\n  for (let i = 0; i < 12; i++) {\n    trackedPointers[i] =\n      useSharedValue <\n      Pointer >\n      {\n        visible: false,\n        x: 0,\n        y: 0,\n      };\n  }\n\n  const gesture = Gesture.Manual();\n\n  return (\n    <GestureDetector gesture={gesture}>\n      <Animated.View style={{ flex: 1 }}>\n        {trackedPointers.map((pointer, index) => (\n          <PointerElement pointer={pointer} active={active} key={index} />\n        ))}\n      </Animated.View>\n    </GestureDetector>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Accessible Button Components in React Native Gesture Handler\nDESCRIPTION: Example showing how to properly make RectButton components accessible by wrapping children in a View with appropriate accessibility props. Shows both inaccessible and accessible implementations.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/components/buttons.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Not accessible:\nconst NotAccessibleButton = () => (\n  <RectButton onPress={this._onPress}>\n    <Text>Foo</Text>\n  </RectButton>\n);\n// Accessible:\nconst AccessibleButton = () => (\n  <RectButton onPress={this._onPress}>\n    <View accessible accessibilityRole=\"button\">\n      <Text>Bar</Text>\n    </View>\n  </RectButton>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Gesture with ScrollView in React Native Gesture Handler\nDESCRIPTION: This example shows how to use Gesture.Native() with a ScrollView to enable gesture relations. It creates a scrollable view with colored rectangles where black sections can be panned separately, blocking the ScrollView during the pan gesture.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/native-gesture.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, ScrollView } from 'react-native';\nimport { Gesture, GestureDetector } from 'react-native-gesture-handler';\n\nconst COLORS = ['red', 'green', 'blue', 'purple', 'orange', 'cyan'];\n\nexport default function App() {\n  // highlight-next-line\n  const native = Gesture.Native();\n\n  return (\n    <GestureDetector gesture={native}>\n      <ScrollView style={{ flex: 1 }}>\n        <ScrollableContent scrollGesture={native} />\n      </ScrollView>\n    </GestureDetector>\n  );\n}\n\nfunction ScrollableContent({ scrollGesture }) {\n  return (\n    <View>\n      {COLORS.map((color) => (\n        <Rectangle key={color} color={color} scrollGesture={scrollGesture} />\n      ))}\n    </View>\n  );\n}\n\nfunction Rectangle({ color, scrollGesture }) {\n  const pan = Gesture.Pan().blocksExternalGesture(scrollGesture);\n\n  return (\n    <View\n      key={color}\n      style={{ width: '100%', height: 250, backgroundColor: color }}>\n      <GestureDetector gesture={pan}>\n        <View style={{ width: '100%', height: 50, backgroundColor: 'black' }} />\n      </GestureDetector>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Gesture Event Handler Interface in React Native\nDESCRIPTION: Interface showing the available event handlers for gesture recognition in React Native Gesture Handler. Includes handlers for state changes, updates, and pointer events.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/fundamentals/states-events.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GestureHandlers {\n  onBegin?: () => void;          // Called when gesture enters BEGAN state\n  onStart?: () => void;          // Called when gesture enters ACTIVE state\n  onEnd?: (success: boolean) => void;   // Called when gesture exits ACTIVE state\n  onFinalize?: (success: boolean) => void;  // Called when gesture enters END/FAILED/CANCELLED state\n  onUpdate?: () => void;         // Called during ACTIVE state updates\n  onPointerDown?: () => void;    // Called when pointers are placed\n  onPointerMove?: () => void;    // Called when pointers move\n  onPointerUp?: () => void;      // Called when pointers are lifted\n  onPointerCancelled?: () => void;  // Called when pointer tracking ends\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Exclusive Gesture Composition for Single and Double Tap Recognition\nDESCRIPTION: This example demonstrates the Exclusive composition method to distinguish between single and double taps. The double tap gesture has higher priority and if it succeeds, the single tap gesture will not activate. If double tap fails, the single tap will activate instead.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/fundamentals/gesture-composition.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GestureDetector, Gesture } from 'react-native-gesture-handler';\n\nfunction App() {\n  const singleTap = Gesture.Tap().onEnd((_event, success) => {\n    if (success) {\n      console.log('single tap!');\n    }\n  });\n  const doubleTap = Gesture.Tap()\n    .numberOfTaps(2)\n    .onEnd((_event, success) => {\n      if (success) {\n        console.log('double tap!');\n      }\n    });\n\n  const taps = Gesture.Exclusive(doubleTap, singleTap);\n\n  return (\n    <GestureDetector gesture={taps}>\n      <Component />\n    </GestureDetector>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using GestureHandlerRootView with Modal in React Native\nDESCRIPTION: Demonstrates how to properly wrap Modal content with GestureHandlerRootView to enable gesture recognition within modal components on Android.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/fundamentals/installation.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Modal } from 'react-native';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\n\nexport function CustomModal({ children, ...rest }) {\n  return (\n    <Modal {...rest}>\n      <GestureHandlerRootView>\n        {children}\n      </GestureHandlerRootView>\n    </Modal>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GestureDetector Implementation with Tap Gesture in React Native\nDESCRIPTION: Demonstrates the basic usage of GestureDetector with a Tap gesture. Shows how to import the necessary components from react-native-gesture-handler, create a Tap gesture, and apply it to an Animated.View using the GestureDetector component.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/gesture-detector.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Gesture, GestureDetector } from 'react-native-gesture-handler';\n\nfunction App() {\n  const tap = Gesture.Tap();\n  return (\n    // highlight-next-line\n    <GestureDetector gesture={tap}>\n      <Animated.View />\n      // highlight-next-line\n    </GestureDetector>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Double Tap Detection with TapGestureHandler in React Native\nDESCRIPTION: This code snippet demonstrates how to use TapGestureHandler to detect both single and double taps on a view. It uses nested TapGestureHandlers with the 'waitFor' prop to prioritize double tap detection.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gesture-handlers/tap-gh.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport class PressBox extends Component {\n  doubleTapRef = React.createRef();\n  render() {\n    return (\n      <TapGestureHandler\n        onHandlerStateChange={this._onSingleTap}\n        waitFor={this.doubleTapRef}>\n        <TapGestureHandler ref={this.doubleTapRef} numberOfTaps={2}>\n          <View style={styles.box} />\n        </TapGestureHandler>\n      </TapGestureHandler>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rotation Gesture in React Native with RotationGestureHandler\nDESCRIPTION: This example demonstrates how to create a rotatable component using RotationGestureHandler. It tracks rotation gestures, animates the UI element accordingly, and handles state changes between gestures to ensure smooth rotation behavior.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gesture-handlers/rotation-gh.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass RotableBox extends React.Component {\n  _rotate = new Animated.Value(0);\n  _rotateStr = this._rotate.interpolate({\n    inputRange: [-100, 100],\n    outputRange: ['-100rad', '100rad'],\n  });\n  _lastRotate = 0;\n  _onRotateGestureEvent = Animated.event(\n    [{ nativeEvent: { rotation: this._rotate } }],\n    { useNativeDriver: USE_NATIVE_DRIVER }\n  );\n  _onRotateHandlerStateChange = (event) => {\n    if (event.nativeEvent.oldState === State.ACTIVE) {\n      this._lastRotate += event.nativeEvent.rotation;\n      this._rotate.setOffset(this._lastRotate);\n      this._rotate.setValue(0);\n    }\n  };\n  render() {\n    return (\n      <RotationGestureHandler\n        onGestureEvent={this._onRotateGestureEvent}\n        onHandlerStateChange={this._onRotateHandlerStateChange}>\n        <Animated.Image\n          style={[\n            styles.pinchableImage,\n            {\n              transform: [{ perspective: 200 }, { rotate: this._rotateStr }],\n            },\n          ]}\n        />\n      </RotationGestureHandler>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Animated Native Button with React Native Gesture Handler and Reanimated\nDESCRIPTION: Shows how to create an animated native button by combining PureNativeButton from React Native Gesture Handler with Reanimated. This example wraps the button in Animated components for custom animations.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/api/components/buttons.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createNativeWrapper,\n  PureNativeButton,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nconst { event, Value, createAnimatedComponent } = Animated;\n\nconst AnimatedRawButton = createNativeWrapper(\n  createAnimatedComponent(PureNativeButton),\n  {\n    shouldCancelWhenOutside: false,\n    shouldActivateOnStart: false,\n  }\n);\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    const state = new Value();\n    this._onGestureEvent = event([\n      {\n        nativeEvent: { state },\n      },\n    ]);\n  }\n\n  render() {\n    return <AnimatedRawButton onHandlerStateChange={this._onGestureEvent} />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Component Gesture Interactions with requireExternalGestureToFail\nDESCRIPTION: This example shows how to use requireExternalGestureToFail method to coordinate gestures across different components. It creates a nested view structure where the outer view responds to single taps and the inner view responds to double taps, preventing the outer view's gesture from activating when tapping on the inner view.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/fundamentals/gesture-composition.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport {\n  GestureDetector,\n  Gesture,\n  GestureHandlerRootView,\n} from 'react-native-gesture-handler';\n\nexport default function Example() {\n  const innerTap = Gesture.Tap()\n    .numberOfTaps(2)\n    .onStart(() => {\n      console.log('inner tap');\n    });\n\n  const outerTap = Gesture.Tap()\n    .onStart(() => {\n      console.log('outer tap');\n    })\n    .requireExternalGestureToFail(innerTap);\n\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <GestureDetector gesture={outerTap}>\n        <View style={styles.outer}>\n          <GestureDetector gesture={innerTap}>\n            <View style={styles.inner} />\n          </GestureDetector>\n        </View>\n      </GestureDetector>\n    </GestureHandlerRootView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  outer: {\n    width: 250,\n    height: 250,\n    backgroundColor: 'lightblue',\n  },\n  inner: {\n    width: 100,\n    height: 100,\n    backgroundColor: 'blue',\n    alignSelf: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing blocksExternalGesture in React Native Gesture Handler\nDESCRIPTION: This code snippet demonstrates the use of blocksExternalGesture to create a scrollable list with pinchable items. It uses a ScrollView component that waits for gestures from child components before scrolling.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/fundamentals/gesture-composition.md#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useRef } from 'react';\nimport { StyleSheet } from 'react-native';\nimport {\n  GestureDetector,\n  Gesture,\n  GestureHandlerRootView,\n  ScrollView,\n} from 'react-native-gesture-handler';\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n  withTiming,\n} from 'react-native-reanimated';\n\nconst ITEMS = ['red', 'green', 'blue', 'yellow'];\n\nfunction Item({ backgroundColor, scrollRef }) {\n  const scale = useSharedValue(1);\n  const zIndex = useSharedValue(1);\n\n  const pinch = Gesture.Pinch()\n    .blocksExternalGesture(scrollRef)\n    .onBegin(() => {\n      zIndex.value = 100;\n    })\n    .onChange((e) => {\n      scale.value *= e.scaleChange;\n    })\n    .onFinalize(() => {\n      scale.value = withTiming(1, undefined, (finished) => {\n        if (finished) {\n          zIndex.value = 1;\n        }\n      });\n    });\n\n  const animatedStyles = useAnimatedStyle(() => ({\n    transform: [{ scale: scale.value }],\n    zIndex: zIndex.value,\n  }));\n\n  return (\n    <GestureDetector gesture={pinch}>\n      <Animated.View\n        style={[\n          { backgroundColor: backgroundColor },\n          styles.item,\n          animatedStyles,\n        ]}\n      />\n    </GestureDetector>\n  );\n}\n\nexport default function Example() {\n  const scrollRef = useRef();\n\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <ScrollView style={styles.container} ref={scrollRef}>\n        {ITEMS.map((item) => (\n          <Item backgroundColor={item} key={item} scrollRef={scrollRef} />\n        ))}\n      </ScrollView>\n    </GestureHandlerRootView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  item: {\n    flex: 1,\n    aspectRatio: 1,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pan Gesture for Ball Component in React Native\nDESCRIPTION: This snippet defines a pan gesture for a ball component using React Native Gesture Handler. It handles the gesture's begin, update, end, and finalize events to control the ball's position and pressed state.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/quickstart/_steps/step5.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Gesture } from 'react-native-gesture-handler';\n\nfunction Ball() {\n  // ...\n  const start = useSharedValue({ x: 0, y: 0 });\n  const gesture = Gesture.Pan()\n    .onBegin(() => {\n      isPressed.value = true;\n    })\n    .onUpdate((e) => {\n      offset.value = {\n        x: e.translationX + start.value.x,\n        y: e.translationY + start.value.y,\n      };\n    })\n    .onEnd(() => {\n      start.value = {\n        x: offset.value.x,\n        y: offset.value.y,\n      };\n    })\n    .onFinalize(() => {\n      isPressed.value = false;\n    });\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Gesture Configuration with useMemo in React Native\nDESCRIPTION: This example shows how to use React's useMemo hook to optimize gesture configurations in React Native Gesture Handler. It creates a memoized tap gesture that updates a tap counter, reducing unnecessary recalculations.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/gesture.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\n\nfunction App() {\n  const gesture = React.useMemo(\n    () =>\n      Gesture.Tap().onStart(() => {\n        console.log('Number of taps:', tapNumber + 1);\n        setTapNumber((value) => value + 1);\n      }),\n    [tapNumber, setTapNumber]\n  );\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Race Composed Gesture in React Native Gesture Handler\nDESCRIPTION: This snippet demonstrates how to create a Race composed gesture between Pan and LongPress gestures. The Race gesture activates the first gesture that becomes active, preventing other gestures from activating afterward.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/composed-gestures.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GestureDetector, Gesture } from 'react-native-gesture-handler';\n\nfunction App() {\n  const pan = Gesture.Pan();\n  const longPress = Gesture.LongPress();\n\n  // highlight-next-line\n  const composed = Gesture.Race(pan, longPress);\n\n  return (\n    <GestureDetector gesture={composed}>\n      <Animated.View />\n    </GestureDetector>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Pointer Element in React Native with Reanimated\nDESCRIPTION: This code defines a PointerElement component that renders an animated pointer using React Native Reanimated. It takes shared values for pointer position and active state as props, and applies dynamic styles based on these values. The component uses useAnimatedStyle to create animated transformations and color changes.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/manual-gestures/_steps/step2.md#2025-04-20_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { StyleSheet } from 'react-native';\nimport Animated, {\n  useAnimatedStyle,\n  useSharedValue,\n} from 'react-native-reanimated';\n\nfunction PointerElement(props: {\n  pointer: Animated.SharedValue<Pointer>,\n  active: Animated.SharedValue<boolean>,\n}) {\n  const animatedStyle = useAnimatedStyle(() => ({\n    transform: [\n      { translateX: props.pointer.value.x },\n      { translateY: props.pointer.value.y },\n      {\n        scale:\n          (props.pointer.value.visible ? 1 : 0) *\n          (props.active.value ? 1.3 : 1),\n      },\n    ],\n    backgroundColor: props.active.value ? 'red' : 'blue',\n  }));\n\n  return <Animated.View style={[styles.pointer, animatedStyle]} />;\n}\n\n// ...\n\nconst styles = StyleSheet.create({\n  pointer: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    backgroundColor: 'red',\n    position: 'absolute',\n    marginStart: -30,\n    marginTop: -30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Ball Component with Gesture Detector in React Native\nDESCRIPTION: This snippet shows how to render the Ball component with the defined gesture using GestureDetector. It wraps an Animated.View with the GestureDetector to apply the pan gesture to the ball.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/quickstart/_steps/step5.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// ...\nreturn (\n  <GestureDetector gesture={gesture}>\n    <Animated.View style={[styles.ball, animatedStyles]} />\n  </GestureDetector>\n);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Basic Tap Gesture Implementation using GestureDetector\nDESCRIPTION: Demonstrates the basic usage of the new GestureDetector component with a tap gesture configuration.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/upgrading-to-2.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst tapGesture = Gesture.Tap().onStart(() => {\n  console.log('Tap!');\n});\n...\nreturn (\n  <GestureDetector gesture={tapGesture}>\n    <View />\n  </GestureDetector>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing GestureHandlerRootView in React Native\nDESCRIPTION: Example of wrapping the application's entry point with GestureHandlerRootView component. The component requires flex: 1 style to fill the screen.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/migrating-off-rnghenabledroot.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App() {\n  return <GestureHandlerRootView style={{ flex: 1 }}>{/* content */}</GestureHandlerRootView>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a LongPressGestureHandler in React Native\nDESCRIPTION: Example implementation of a LongPressGestureHandler that shows an alert when the gesture is active (after being pressed for the specified duration). The handler is configured with a minimum press duration of 800ms.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gesture-handlers/longpress-gh.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst LongPressButton = () => (\n  <LongPressGestureHandler\n    onHandlerStateChange={({ nativeEvent }) => {\n      if (nativeEvent.state === State.ACTIVE) {\n        Alert.alert(\"I'm being pressed for so long\");\n      }\n    }}\n    minDurationMs={800}>\n    <View style={styles.box} />\n  </LongPressGestureHandler>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Awaiting Gesture Handlers for Single and Double Tap Detection\nDESCRIPTION: Example implementation of a component that handles both single and double tap gestures on the same view. It uses the waitFor property to make the single tap handler wait for the double tap handler to finish recognition.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gesture-handlers/interactions.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst doubleTap = React.createRef();\nconst PressBox = () => (\n  <TapGestureHandler\n    onHandlerStateChange={({ nativeEvent }) =>\n      nativeEvent.state === State.ACTIVE && Alert.alert('Single tap!')\n    }\n    waitFor={doubleTap}>\n    <TapGestureHandler\n      ref={doubleTap}\n      onHandlerStateChange={({ nativeEvent }) =>\n        nativeEvent.state === State.ACTIVE && Alert.alert(\"You're so fast\")\n      }\n      numberOfTaps={2}>\n      <View style={styles.box} />\n    </TapGestureHandler>\n  </TapGestureHandler>\n);\n```\n\n----------------------------------------\n\nTITLE: Using React Refs with simultaneousHandlers in React Native Gesture Handler\nDESCRIPTION: Example showing how to create and use React refs with the simultaneousHandlers property to allow multiple gesture handlers to be active simultaneously.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/api/gesture-handlers/common-gh.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nReact.createRef()\n```\n\n----------------------------------------\n\nTITLE: Using simultaneousWithExternalGesture in React Native Gesture Handler\nDESCRIPTION: This code snippet shows how to use simultaneousWithExternalGesture to allow nested views to recognize taps simultaneously. It creates two nested views with tap gestures, where tapping the inner view also activates the outer view's gesture.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/fundamentals/gesture-composition.md#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport {\n  GestureDetector,\n  Gesture,\n  GestureHandlerRootView,\n} from 'react-native-gesture-handler';\n\nexport default function Example() {\n  const innerTap = Gesture.Tap()\n    .onStart(() => {\n      console.log('inner tap');\n    });\n\n  const outerTap = Gesture.Tap()\n    .onStart(() => {\n      console.log('outer tap');\n    })\n    .simultaneousWithExternalGesture(innerTap);\n\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <GestureDetector gesture={outerTap}>\n        <View style={styles.outer}>\n          <GestureDetector gesture={innerTap}>\n            <View style={styles.inner} />\n          </GestureDetector>\n        </View>\n      </GestureDetector>\n    </GestureHandlerRootView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  outer: {\n    width: 250,\n    height: 250,\n    backgroundColor: 'lightblue',\n  },\n  inner: {\n    width: 100,\n    height: 100,\n    backgroundColor: 'blue',\n    alignSelf: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Force Touch Gesture Handler in React Native\nDESCRIPTION: Example of using ForceTouchGestureHandler to scale a view based on touch pressure. The handler activates when any touch is detected (minForce=0) and scales the box proportionally to the force applied.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gesture-handlers/force-gh.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<ForceTouchGestureHandler\n  minForce={0}\n  onGestureEvent={this._onGestureEvent}\n  onHandlerStateChange={this._onHandlerStateChange}>\n  <Animated.View\n    style={[\n      styles.box,\n      { transform: [{ scale: Animated.add(1, this.force) }] },\n    ]}\n  />\n</ForceTouchGestureHandler>\n```\n\n----------------------------------------\n\nTITLE: Creating an Animated Ball Component with React Native Reanimated\nDESCRIPTION: This code implements a Ball component that animates in response to user interaction. It uses Reanimated's shared values to track press state and position offset, then applies spring animations to scale and color changes based on that state.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/quickstart/_steps/step3.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  useSharedValue,\n  useAnimatedStyle,\n  withSpring,\n} from 'react-native-reanimated';\n\nfunction Ball() {\n  const isPressed = useSharedValue(false);\n  const offset = useSharedValue({ x: 0, y: 0 });\n\n  const animatedStyles = useAnimatedStyle(() => {\n    return {\n      transform: [\n        { translateX: offset.value.x },\n        { translateY: offset.value.y },\n        { scale: withSpring(isPressed.value ? 1.2 : 1) },\n      ],\n      backgroundColor: isPressed.value ? 'yellow' : 'blue',\n    };\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Touch Event API Documentation\nDESCRIPTION: Documentation of touch event attributes including eventType, changedTouches, allTouches, and numberOfTouches. These properties provide information about touch interactions and their current state.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/touch-events.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Touch event attributes:\n\n### `eventType`\n\nType of the current event - whether the finger was placed on the screen, moved, lifted or cancelled.\n\n### `changedTouches`\n\nAn array of objects where every object represents a single touch. Contains information only about the touches that were affected by the event i.e. those that were placed down, moved, lifted or cancelled.\n\n### `allTouches`\n\nAn array of objects where every object represents a single touch. Contains information about all active touches.\n\n### `numberOfTouches`\n\nNumber representing the count of currently active touches.\n```\n\n----------------------------------------\n\nTITLE: Implementing DrawerLayout Component in React Native\nDESCRIPTION: Demonstrates a complete example of implementing a drawer layout with custom slide handling and drawer content rendering. Shows basic configuration including drawer width, position, type, and event handlers.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/api/components/drawer-layout.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Drawerable extends Component {\n  handleDrawerSlide = (status) => {\n    // outputs a value between 0 and 1\n    console.log(status);\n  };\n\n  renderDrawer = () => {\n    return (\n      <View>\n        <Text>I am in the drawer!</Text>\n      </View>\n    );\n  };\n\n  render() {\n    return (\n      <View style={{ flex: 1 }}>\n        <DrawerLayout\n          drawerWidth={200}\n          drawerPosition={DrawerLayout.positions.Right}\n          drawerType=\"front\"\n          drawerBackgroundColor=\"#ddd\"\n          renderNavigationView={this.renderDrawer}\n          onDrawerSlide={this.handleDrawerSlide}>\n          <View>\n            <Text>Hello, it's me</Text>\n          </View>\n        </DrawerLayout>\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hover Gesture in React Native\nDESCRIPTION: Demonstrates how to import and use the Hover gesture in a React Native application. It shows the basic setup with GestureDetector and Gesture.Hover().\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/hover-gesture.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GestureDetector, Gesture } from 'react-native-gesture-handler';\n\nfunction App() {\n  // highlight-next-line\n  const hover = Gesture.Hover();\n\n  return (\n    <GestureDetector gesture={hover}>\n      <View />\n    </GestureDetector>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Pan Gesture Events with React Native Gesture Handler\nDESCRIPTION: This example demonstrates how to use RNGH's testing API to simulate pan gesture events. It uses fireGestureHandler to trigger a series of pan gesture events and checks if the handlers are called correctly with the expected data.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/testing.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nit('sends events with additional data to handlers', () => {\n  const panHandlers = mockedEventHandlers();\n  render(<SingleHandler handlers={panHandlers} treatStartAsUpdate />);\n  fireGestureHandler<PanGesture>(getByGestureTestId('pan'), [\n    { state: State.BEGAN, translationX: 0 },\n    { state: State.ACTIVE, translationX: 10 },\n    { translationX: 20 },\n    { translationX: 20 },\n    { state: State.END, translationX: 30 },\n  ]);\n\n  expect(panHandlers.active).toBeCalledTimes(3);\n  expect(panHandlers.active).toHaveBeenLastCalledWith(\n    expect.objectContaining({ translationX: 20 })\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing onUpdate Callback for Continuous Gestures in React Native\nDESCRIPTION: The onUpdate callback is called every time the gesture receives an update while it's active. It allows real-time tracking of gesture state changes.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/_shared/base-continuous-gesture-callbacks.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nonUpdate(callback)\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Gesture Handlers in React Native\nDESCRIPTION: Example showing how to nest multiple gesture handlers (LongPress and Tap) to handle different touch interactions on a single view component. Demonstrates proper handler configuration and nesting structure.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gesture-handlers/about-handlers.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass Multitap extends Component {\n  render() {\n    return (\n      <LongPressGestureHandler\n        onHandlerStateChange={this._onLongpress}\n        minDurationMs={800}>\n        <TapGestureHandler\n          onHandlerStateChange={this._onSingleTap}\n          waitFor={this.doubleTapRef}>\n          <TapGestureHandler\n            ref={this.doubleTapRef}\n            onHandlerStateChange={this._onDoubleTap}\n            numberOfTaps={2}>\n            <View style={styles.box} />\n          </TapGestureHandler>\n        </TapGestureHandler>\n      </LongPressGestureHandler>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Touch Movement Events with React Native Gesture Handler\nDESCRIPTION: Implements a manual gesture handler that tracks touch movement events and updates pointer positions. Uses a tracked pointers object to store the x/y coordinates and visibility state for each touch point.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/manual-gestures/_steps/step5.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst gesture = Gesture.Manual()\n    ...\n    .onTouchesMove((e, _manager) => {\n      for (const touch of e.changedTouches) {\n        trackedPointers[touch.id].value = {\n          visible: true,\n          x: touch.x,\n          y: touch.y,\n        };\n      }\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating a Ball Component with GestureDetector in React Native\nDESCRIPTION: This snippet defines a Ball component that uses GestureDetector from react-native-gesture-handler to wrap an Animated.View from react-native-reanimated. This setup allows for gesture detection and animation on the ball element.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/quickstart/_steps/step2.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GestureDetector } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\n\nfunction Ball() {\n  return (\n    <GestureDetector>\n      <Animated.View style={[styles.ball]} />\n    </GestureDetector>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Gesture Configuration Example\nDESCRIPTION: Example showing how to configure a pan gesture to work simultaneously with the swipeable gesture handler.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/components/reanimated_swipeable.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst panGesture = Gesture.Pan();\n\n<GestureDetector gesture={panGesture}>\n  <ReanimatedSwipeable simultaneousWithExternalGesture={panGesture} />\n</GestureDetector>\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Gesture Handlers in React Native\nDESCRIPTION: Example of nested gesture handlers implementation with LongPressGestureHandler and TapGestureHandler working together. This demonstrates how to combine multiple handlers with proper references and event handling.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/about-handlers.md#2025-04-20_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nclass Multitap extends Component {\n  render() {\n    return (\n      <LongPressGestureHandler\n        onHandlerStateChange={this._onLongpress}\n        minDurationMs={800}>\n        <TapGestureHandler\n          onHandlerStateChange={this._onSingleTap}\n          waitFor={this.doubleTapRef}>\n          <TapGestureHandler\n            ref={this.doubleTapRef}\n            onHandlerStateChange={this._onDoubleTap}\n            numberOfTaps={2}>\n            <View style={styles.box} />\n          </TapGestureHandler>\n        </TapGestureHandler>\n      </LongPressGestureHandler>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Manual Gesture with Touch Detection in React Native Gesture Handler\nDESCRIPTION: This code creates a manual gesture that tracks touch points and activates the gesture manager when multiple touches are detected. It stores touch coordinates in a trackedPointers object and activates the gesture when two or more simultaneous touches are detected.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/manual-gestures/_steps/step4.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst gesture = Gesture.Manual().onTouchesDown((e, manager) => {\n  for (const touch of e.changedTouches) {\n    trackedPointers[touch.id].value = {\n      visible: true,\n      x: touch.x,\n      y: touch.y,\n    };\n  }\n\n  if (e.numberOfTouches >= 2) {\n    manager.activate();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pressable Component Example\nDESCRIPTION: Demonstrates a complete example of using the Pressable component with styling and press handling. The component changes appearance when pressed and includes hit slop and press retention offset configurations.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/components/pressable.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View, Text, StyleSheet } from 'react-native';\nimport { Pressable } from 'react-native-gesture-handler';\n\nexport default function Example() {\n  return (\n    <Pressable\n      style={({ pressed }) => (pressed ? styles.highlight : styles.pressable)}\n      hitSlop={20}\n      pressRetentionOffset={20}>\n      <View style={styles.textWrapper}>\n        <Text style={styles.text}>Pressable!</Text>\n      </View>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  pressable: {\n    width: 120,\n    height: 120,\n    backgroundColor: 'mediumpurple',\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n  highlight: {\n    width: 120,\n    height: 120,\n    backgroundColor: 'red',\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n  textWrapper: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    color: 'black',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring hitSlop Object for Gesture Recognition Boundaries\nDESCRIPTION: Example of the hitSlop property configuration options that control which parts of a view can recognize gestures. The hitSlop can be configured with different values for each side or with width/height specifications.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/api/gesture-handlers/common-gh.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nleft: 0, width: 20\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Gesture in React Native Gesture Handler\nDESCRIPTION: Example of how to create and use a Manual gesture with GestureDetector in a React Native application. The Manual gesture has no specific activation criteria and needs to be controlled manually using a state manager.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/manual-gesture.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GestureDetector, Gesture } from 'react-native-gesture-handler';\n\nfunction App() {\n  // highlight-next-line\n  const manual = Gesture.Manual();\n\n  return (\n    <GestureDetector gesture={manual}>\n      <Animated.View />\n    </GestureDetector>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using GestureDetector with Animated.View in React Native\nDESCRIPTION: This code snippet shows how to wrap an Animated.View component with a GestureDetector to enable gesture recognition. The animatedStyles object contains animation configurations that respond to gestures, and the styles.ball provides basic styling for the view.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/quickstart/_steps/step4.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// ...\nreturn (\n  <GestureDetector>\n    <Animated.View style={[styles.ball, animatedStyles]} />\n  </GestureDetector>\n);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Manual Gesture in React Native Gesture Handler\nDESCRIPTION: This snippet shows how to create a Manual gesture using React Native Gesture Handler and configure its lifecycle callbacks. The gesture sets an 'active' state value to true when the gesture starts and resets it to false when the gesture ends.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/manual-gestures/_steps/step7.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst gesture = Gesture.Manual()\n  ...\n  .onStart(() => {\n    active.value = true;\n  })\n  .onEnd(() => {\n    active.value = false;\n  });\n```\n\n----------------------------------------\n\nTITLE: Adding Worklet Directive to Gesture Callbacks\nDESCRIPTION: Examples showing how to properly add the worklet directive to callbacks that aren't automatically workletized by Reanimated's Babel plugin.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/troubleshooting.md#2025-04-20_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst callback = () => {\n  // highlight-next-line\n  \"worklet\";\n  console.log(_WORKLET);\n};\nconst gesture = Gesture.Tap().onBegin(callback);\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst callback = () => {\n  // highlight-next-line\n  \"worklet\";\n  console.log(_WORKLET);\n};\nconst gesture = Gesture.Tap();\ngesture.onBegin(callback);\n```\n\n----------------------------------------\n\nTITLE: Implementing Tap Gesture in React Native with Gesture Handler\nDESCRIPTION: This snippet defines an Example component that sets up a tap gesture using React Native Gesture Handler. It wraps a custom FunctionalComponent with a GestureDetector to enable tap detection on a styled View.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/_shared/gesture-detector-functional1.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Example() {\n  const tap = Gesture.Tap().onStart(() => {\n    console.log('tap');\n  });\n\n  return (\n    <GestureDetector gesture={tap}>\n      <FunctionalComponent>\n        <View style={styles.box} />\n      </FunctionalComponent>\n    </GestureDetector>\n  );\n}\n\nfunction FunctionalComponent(props) {\n  return <View collapsable={false}>{props.children}</View>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Force Touch Gesture in React Native\nDESCRIPTION: Basic implementation of force touch gesture detection using GestureDetector and Gesture components from react-native-gesture-handler. Shows how to create and attach a force touch gesture handler to a View component.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/force-touch-gesture.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GestureDetector, Gesture } from 'react-native-gesture-handler';\n\nfunction App() {\n  // highlight-next-line\n  const forceTouch = Gesture.ForceTouch();\n\n  return (\n    <GestureDetector gesture={forceTouch}>\n      <View />\n    </GestureDetector>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simultaneous Gesture Recognition in React Native\nDESCRIPTION: Example implementation of a component that allows pinch and rotation gestures to be recognized simultaneously. The component uses React.createRef() to create references to gesture handlers and connects them with simultaneousHandlers property.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gesture-handlers/interactions.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass PinchableBox extends React.Component {\n  // ...take a look on full implementation in an Example app\n  render() {\n    const imagePinch = React.createRef();\n    const imageRotation = React.createRef();\n    return (\n      <RotationGestureHandler\n        ref={imageRotation}\n        simultaneousHandlers={imagePinch}\n        onGestureEvent={this._onRotateGestureEvent}\n        onHandlerStateChange={this._onRotateHandlerStateChange}>\n        <Animated.View>\n          <PinchGestureHandler\n            ref={imagePinch}\n            simultaneousHandlers={imageRotation}\n            onGestureEvent={this._onPinchGestureEvent}\n            onHandlerStateChange={this._onPinchHandlerStateChange}>\n            <Animated.View style={styles.container} collapsable={false}>\n              <Animated.Image\n                style={[\n                  styles.pinchableImage,\n                  {\n                    /* events-related transformations */\n                  },\n                ]}\n              />\n            </Animated.View>\n          </PinchGestureHandler>\n        </Animated.View>\n      </RotationGestureHandler>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using activate() Method in GestureStateManager for React Native Gesture Handler\nDESCRIPTION: The activate() method transitions the gesture to the ACTIVE state. It has no effect if the handler is already active or has finished. For exclusive gestures, activation may be delayed based on priority.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/state-manager.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nactivate()\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Activation for Continuous Gestures in React Native Gesture Handler\nDESCRIPTION: Sets whether a gesture handler should be manually activated rather than automatically activating when criteria are met. When set to true, you'll need to use the state manager to control the gesture's activation state.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/_shared/base-continuous-gesture-config.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmanualActivation(value: boolean)\n```\n\n----------------------------------------\n\nTITLE: Accessing Handler State in React Native Gesture Handler\nDESCRIPTION: This snippet demonstrates how to monitor a gesture handler's state changes using the onHandlerStateChange callback. It shows how to compare the nativeEvent's state attribute to constants exported under the State object.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/state.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { State, LongPressGestureHandler } from 'react-native-gesture-handler';\n\nclass Demo extends Component {\n  _handleStateChange = ({ nativeEvent }) => {\n    if (nativeEvent.state === State.ACTIVE) {\n      Alert.alert('Longpress');\n    }\n  };\n  render() {\n    return (\n      <LongPressGestureHandler onHandlerStateChange={this._handleStateChange}>\n        <Text style={styles.buttonText}>Longpress me</Text>\n      </LongPressGestureHandler>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onStart Callback for Gesture Handler in React Native\nDESCRIPTION: Sets a callback that is called when the gesture is recognized by the handler and transitions to the active state.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/_shared/base-gesture-callbacks.md#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nonStart(callback)\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Direction for Fling Gesture in React Native\nDESCRIPTION: Shows how to configure a fling gesture to detect movement in a single direction (downward) using the Directions object from react-native-gesture-handler.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/fling-gesture.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfling.direction(Directions.DOWN);\n```\n\n----------------------------------------\n\nTITLE: Creating Accessible and Non-Accessible Buttons in React Native\nDESCRIPTION: Demonstrates how to create accessible and non-accessible buttons using RectButton component from React Native Gesture Handler. Accessibility is achieved by wrapping button content in a View with appropriate props.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/api/components/buttons.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Not accessible:\nconst NotAccessibleButton = () => (\n  <RectButton onPress={this._onPress}>\n    <Text>Foo</Text>\n  </RectButton>\n);\n// Accessible:\nconst AccessibleButton = () => (\n  <RectButton onPress={this._onPress}>\n    <View accessible accessibilityRole=\"button\">\n      <Text>Bar</Text>\n    </View>\n  </RectButton>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing onTouchesDown Callback for Gesture Handler in React Native\nDESCRIPTION: Sets the onTouchesDown callback which is called every time a finger is placed on the screen during a gesture.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/_shared/base-gesture-callbacks.md#2025-04-20_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nonTouchesDown(callback)\n```\n\n----------------------------------------\n\nTITLE: Using PureNativeButton with Reanimated in React Native Gesture Handler\nDESCRIPTION: Example demonstrating how to create an animated button using PureNativeButton wrapped with Reanimated for advanced animation capabilities. Shows implementation with gesture state tracking.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/components/buttons.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createNativeWrapper,\n  PureNativeButton,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nconst { event, Value, createAnimatedComponent } = Animated;\n\nconst AnimatedRawButton = createNativeWrapper(\n  createAnimatedComponent(PureNativeButton),\n  {\n    shouldCancelWhenOutside: false,\n    shouldActivateOnStart: false,\n  }\n);\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    const state = new Value();\n    this._onGestureEvent = event([\n      {\n        nativeEvent: { state },\n      },\n    ]);\n  }\n\n  render() {\n    return <AnimatedRawButton onHandlerStateChange={this._onGestureEvent} />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onEnd Callback for Gesture Handler in React Native\nDESCRIPTION: Sets a callback that is called when a recognized gesture finishes. This is only called if the handler was previously in the active state.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/_shared/base-gesture-callbacks.md#2025-04-20_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nonEnd(callback)\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Values for Ball Position in React Native Reanimated\nDESCRIPTION: This snippet creates shared values using React Native Reanimated to track the ball's position. It defines values for the ball's offset and starting position, and creates animated styles for positioning.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/quickstart/index.md#2025-04-20_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst offset = useSharedValue({ x: 0, y: 0 });\nconst start = useSharedValue({ x: 0, y: 0 });\nconst animatedStyles = useAnimatedStyle(() => {\n  return {\n    transform: [\n      { translateX: offset.value.x },\n      { translateY: offset.value.y },\n    ],\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing onTouchesMove Callback for Gesture Handler in React Native\nDESCRIPTION: Sets the onTouchesMove callback which is called every time a finger is moved on the screen during a gesture.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/_shared/base-gesture-callbacks.md#2025-04-20_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nonTouchesMove(callback)\n```\n\n----------------------------------------\n\nTITLE: Configuring GestureDetector with Pan-Y Touch Action\nDESCRIPTION: Example showing how to set up a GestureDetector component with touchAction property set to 'pan-y' to enable proper scrolling behavior when implementing custom swipeable components inside ScrollView.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/swipe-and-scroll.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<GestureDetector gesture={...} ... touchAction=\"pan-y\">\n  ...\n</GestureDetector>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Directions for Fling Gesture in React Native\nDESCRIPTION: Shows how to configure a fling gesture to detect movements in multiple directions using the Directions object from react-native-gesture-handler.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/fling-gesture.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Directions } from 'react-native-gesture-handler';\nfling.direction(Directions.RIGHT | Directions.LEFT);\n```\n\n----------------------------------------\n\nTITLE: Applying Animated Styles to Ball Component in React Native\nDESCRIPTION: This snippet updates the Ball component to apply the animated styles created with React Native Reanimated. It combines the static and animated styles for the ball's appearance and position.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/quickstart/index.md#2025-04-20_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nexport const Ball = () => {\n  return (\n    <GestureDetector>\n      <Animated.View style={[styles.ball, animatedStyles]} />\n    </GestureDetector>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing onBegin Callback for Gesture Handler in React Native\nDESCRIPTION: Sets a callback that is called when a gesture handler starts receiving touches. This occurs before the handler enters an active state or recognizes the gesture.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/_shared/base-gesture-callbacks.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nonBegin(callback)\n```\n\n----------------------------------------\n\nTITLE: Defining Pointer Types in React Native Gesture Handler\nDESCRIPTION: Enumeration of possible pointer device types that can trigger gesture events, including touch, stylus, mouse, keyboard and other inputs.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/_shared/base-gesture-event-data.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum PointerType {\n  TOUCH = 'touch',\n  STYLUS = 'stylus',\n  MOUSE = 'mouse',\n  KEY = 'key',\n  OTHER = 'other'\n}\n```\n\n----------------------------------------\n\nTITLE: Modal Usage with Gesture Handler HOC\nDESCRIPTION: Example of using gestureHandlerRootHOC with modal components on Android\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/getting-started.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst ExampleWithHoc = gestureHandlerRootHOC(() => (\n    <View>\n      <DraggableBox />\n    </View>\n  );\n);\n\nexport default function Example() {\n  return (\n    <Modal>\n      <ExampleWithHoc />\n    </Modal>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onChange Callback for Continuous Gestures in React Native\nDESCRIPTION: The onChange callback is called every time the gesture receives an update while it's active. It provides information about the change in value relative to the last received event, allowing for more precise gesture tracking.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/_shared/base-continuous-gesture-callbacks.md#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nonChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Configuring onTouchesUp Handler for Manual Gesture in React Native Gesture Handler\nDESCRIPTION: This code snippet shows how to handle touch up events in a manual gesture. It updates tracked pointer states when touches end and finalizes the gesture when all touches are removed from the screen.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/manual-gestures/_steps/step6.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst gesture = Gesture.Manual()\n    ...\n    .onTouchesUp((e, manager) => {\n      for (const touch of e.changedTouches) {\n        trackedPointers[touch.id].value = {\n          visible: false,\n          x: touch.x,\n          y: touch.y,\n        };\n      }\n\n      if (e.numberOfTouches === 0) {\n        manager.end();\n      }\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating Ball Component Structure in React Native\nDESCRIPTION: This snippet defines the basic structure of the Ball component using React Native components. It imports necessary dependencies and sets up the component's render method.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/quickstart/index.md#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { GestureDetector } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\n\nexport const Ball = () => {\n  return (\n    <GestureDetector>\n      <Animated.View style={[styles.ball]} />\n    </GestureDetector>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing onTouchesCancelled Callback for Gesture Handler in React Native\nDESCRIPTION: Sets the onTouchesCancelled callback which is called every time a finger stops being tracked, such as when the gesture finishes.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/_shared/base-gesture-callbacks.md#2025-04-20_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nonTouchesCancelled(callback)\n```\n\n----------------------------------------\n\nTITLE: Implementing onFinalize Callback for Gesture Handler in React Native\nDESCRIPTION: Sets a callback that is called when the handler finalizes handling a gesture. This occurs when the gesture was recognized and has finished, or if it failed to recognize.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/_shared/base-gesture-callbacks.md#2025-04-20_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nonFinalize(callback)\n```\n\n----------------------------------------\n\nTITLE: Correct Nested Gesture Handlers with Animation\nDESCRIPTION: Example showing the correct way to nest gesture handlers with Animated.event by adding an intermediate Animated.View component.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gesture-handlers/about-handlers.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst PanAndRotate = () => (\n  <PanGestureHandler onGestureEvent={Animated.event({ ... }, { useNativeDriver: true })}>\n    <Animated.View>\n      <RotationGestureHandler onGestureEvent={Animated.event({ ... }, { useNativeDriver: true })}>\n        <Animated.View style={animatedStyles}/>\n      </RotationGestureHandler>\n    </Animated.View>\n  </PanGestureHandler>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Styles for Ball Component in React Native\nDESCRIPTION: This snippet defines the styles for the Ball component, including its container and the ball itself. It uses StyleSheet.create to create a style object with dimensions and colors.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/quickstart/index.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  ball: {\n    width: 100,\n    height: 100,\n    borderRadius: 100,\n    backgroundColor: 'blue',\n    alignSelf: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Styles for a Ball Component in React Native\nDESCRIPTION: This code snippet uses React Native's StyleSheet.create method to define styles for a ball component. It specifies dimensions, shape, color, and positioning for the ball.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/quickstart/_steps/step1.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  ball: {\n    width: 100,\n    height: 100,\n    borderRadius: 100,\n    backgroundColor: 'blue',\n    alignSelf: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Pointer Data API Documentation\nDESCRIPTION: Documentation of pointer data attributes including id, x, y, absoluteX, and absoluteY coordinates. These properties provide precise location information for touch events relative to different reference points.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/touch-events.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### PointerData attributes:\n\n### `id`\n\nA number representing id of the touch. It may be used to track the touch between events as the id will not change while it is being tracked.\n\n### `x`\n\nX coordinate of the current position of the touch relative to the view attached to the [`GestureDetector`](/docs/gestures/gesture-detector). Expressed in point units.\n\n### `y`\n\nY coordinate of the current position of the touch relative to the view attached to the [`GestureDetector`](/docs/gestures/gesture-detector). Expressed in point units.\n\n### `absoluteX`\n\nX coordinate of the current position of the touch relative to the window. The value is expressed in point units. It is recommended to use it instead of [`x`](#x) in cases when the original view can be transformed as an effect of the gesture.\n\n### `absoluteY`\n\nY coordinate of the current position of the touch relative to the window. The value is expressed in point units. It is recommended to use it instead of [`y`](#y) in cases when the original view can be transformed as an effect of the gesture.\n```\n\n----------------------------------------\n\nTITLE: Using fail() Method in GestureStateManager for React Native Gesture Handler\nDESCRIPTION: The fail() method transitions the gesture to the FAILED state. It has no effect if the handler has already finished.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/state-manager.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfail()\n```\n\n----------------------------------------\n\nTITLE: Integrating with react-native-navigation using gestureHandlerRootHOC\nDESCRIPTION: Demonstrates how to wrap screens with gestureHandlerRootHOC when using wix/react-native-navigation to ensure gesture recognition works properly across all screens.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/fundamentals/installation.md#2025-04-20_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { gestureHandlerRootHOC } from 'react-native-gesture-handler';\nimport { Navigation } from 'react-native-navigation';\nimport FirstTabScreen from './FirstTabScreen';\nimport SecondTabScreen from './SecondTabScreen';\nimport PushedScreen from './PushedScreen';\n// register all screens of the app (including internal ones)\nexport function registerScreens() {\n  Navigation.registerComponent(\n    'example.FirstTabScreen',\n    () => gestureHandlerRootHOC(FirstTabScreen),\n    () => FirstTabScreen\n  );\n  Navigation.registerComponent(\n    'example.SecondTabScreen',\n    () => gestureHandlerRootHOC(SecondTabScreen),\n    () => SecondTabScreen\n  );\n  Navigation.registerComponent(\n    'example.PushedScreen',\n    () => gestureHandlerRootHOC(PushedScreen),\n    () => PushedScreen\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Animated.View with Gesture Handlers and useNativeDriver\nDESCRIPTION: Implementation of a draggable component demonstrating the requirement to use Animated.View as the direct child of a gesture handler when using useNativeDriver with Animated.event.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/about-handlers.md#2025-04-20_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nclass Draggable extends Component {\n  render() {\n    return (\n      <PanGestureHandler onGestureEvent={Animated.event({ ... }, { useNativeDriver: true })}>\n        <Animated.View style={animatedStyles} /> {/* <-- NEEDS TO BE Animated.View */}\n      </PanGestureHandler>\n    );\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using end() Method in GestureStateManager for React Native Gesture Handler\nDESCRIPTION: The end() method transitions the gesture to the END state. It has no effect if the handler has already finished.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/state-manager.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nend()\n```\n\n----------------------------------------\n\nTITLE: Importing Touchable Components from React Native\nDESCRIPTION: Example showing how to import the standard touchable components from React Native. This is the import pattern that would be replaced when switching to Gesture Handler's implementation.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/components/touchables.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  TouchableNativeFeedback,\n  TouchableHighlight,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n} from 'react-native';\n```\n\n----------------------------------------\n\nTITLE: Importing Pressable Component\nDESCRIPTION: Shows how to import the Pressable component from react-native-gesture-handler library\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/components/pressable.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Pressable } from 'react-native-gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Basic React Native Gesture Handler Property Example\nDESCRIPTION: Example showing basic usage of common gesture handler properties like enabled and shouldCancelWhenOutside\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gesture-handlers/common-gh.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GestureHandlerRefObject } from 'react-native-gesture-handler';\n\nconst gestureRef = React.createRef<GestureHandlerRefObject>();\n\n<GestureHandler\n  enabled={true}\n  shouldCancelWhenOutside={false}\n  simultaneousHandlers={gestureRef}\n  waitFor={gestureRef}\n  hitSlop={{\n    left: -10,\n    right: -10,\n    top: -10,\n    bottom: -10\n  }}\n  onGestureEvent={(event) => console.log(event.state)}\n  onHandlerStateChange={(event) => console.log(event.oldState)}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Pointer Interface for Gesture Handling in TypeScript\nDESCRIPTION: A TypeScript interface that defines a Pointer object with properties for tracking visibility and coordinates. The interface includes a boolean 'visible' property and numeric 'x' and 'y' properties for position tracking.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/manual-gestures/_steps/step1.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Pointer {\n  visible: boolean;\n  x: number;\n  y: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Gesture Handler Example\nDESCRIPTION: Commands to install and run the example project for React Native Gesture Handler. Includes steps for package installation and running on Android or iOS platforms.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Importing Swipeable Component in React Native Gesture Handler\nDESCRIPTION: Shows how to import the Swipeable component from the react-native-gesture-handler package. Note that Swipeable is not exported by default and requires a specific import path.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/components/swipeable.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\n```\n\n----------------------------------------\n\nTITLE: Setting Direction Property with Multiple Directions in FlingGestureHandler\nDESCRIPTION: Demonstrates how to configure the direction property of FlingGestureHandler to recognize horizontal (left and right) movements using the Directions enum with bitwise OR operator.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/api/gesture-handlers/fling-gh.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndirection={Directions.RIGHT | Directions.LEFT}\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with GestureHandlerRootView Component in JSX\nDESCRIPTION: Shows how to wrap a React Native application with the GestureHandlerRootView component, which is required for gesture recognition throughout the app.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/fundamentals/installation.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\n\nexport default function App() {\n  return (\n    <GestureHandlerRootView>\n      <ActualApp />\n    </GestureHandlerRootView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Gesture Handler with Package Managers\nDESCRIPTION: Commands for installing the library using yarn or npm package managers\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/getting-started.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-gesture-handler\n\nnpm install --save react-native-gesture-handler\n```\n\n----------------------------------------\n\nTITLE: Using begin() Method in GestureStateManager for React Native Gesture Handler\nDESCRIPTION: The begin() method transitions the gesture to the BEGAN state. It has no effect if the gesture has already activated or finished.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/state-manager.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbegin()\n```\n\n----------------------------------------\n\nTITLE: Implementing Reanimated Drawer Layout in React Native\nDESCRIPTION: Demonstrates a complete example of using the Reanimated Drawer Layout component, including drawer content, gesture handling, and styling.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/components/reanimated-drawer-layout.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useRef } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Gesture, GestureDetector } from 'react-native-gesture-handler';\n\nimport ReanimatedDrawerLayout, {\n  DrawerType,\n  DrawerPosition,\n  DrawerLayoutMethods,\n} from 'react-native-gesture-handler/ReanimatedDrawerLayout';\n\nconst DrawerPage = () => {\n  return (\n    <View style={styles.drawerContainer}>\n      <Text>Lorem ipsum</Text>\n    </View>\n  );\n};\n\nexport default function ReanimatedDrawerExample() {\n  const drawerRef = useRef < DrawerLayoutMethods > null;\n  const tapGesture = Gesture.Tap()\n    .runOnJS(true)\n    .onStart(() => drawerRef.current?.openDrawer());\n\n  return (\n    <ReanimatedDrawerLayout\n      ref={drawerRef}\n      renderNavigationView={() => <DrawerPage />}\n      drawerPosition={DrawerPosition.LEFT}\n      drawerType={DrawerType.FRONT}>\n      <View style={styles.innerContainer}>\n        <GestureDetector gesture={tapGesture}>\n          <View style={styles.box}>\n            <Text>Open drawer</Text>\n          </View>\n        </GestureDetector>\n      </View>\n    </ReanimatedDrawerLayout>\n  );\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'pink',\n  },\n  innerContainer: {\n    flex: 1,\n    backgroundColor: 'white',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 20,\n  },\n  box: {\n    padding: 20,\n    backgroundColor: 'pink',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Gestures Implementation Comparison\nDESCRIPTION: Demonstrates the difference between stacking multiple gesture handlers in the old API versus using the new Gesture Composition API.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/upgrading-to-2.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n  <TapGestureHandler ... >\n    <Animated.View>\n      <PanGestureHandler ... >\n        <Animated.View>\n          <PinchGestureHandler ... >\n            <YourView />\n          </PinchGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>\n    </Animated.View>\n  </TapGestureHandler>\n);\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst tapGesture = Gesture.Tap();\nconst panGesture = Gesture.Pan();\nconst pinchGesture = Gesture.Pinch();\n\nreturn (\n  <GestureDetector gesture={Gesture.Race(tapGesture, panGesture, pinchGesture)}>\n    <YourView />\n  </GestureDetector>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing onTouchesUp Callback for Gesture Handler in React Native\nDESCRIPTION: Sets the onTouchesUp callback which is called every time a finger is lifted from the screen during a gesture.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/_shared/base-gesture-callbacks.md#2025-04-20_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nonTouchesUp(callback)\n```\n\n----------------------------------------\n\nTITLE: Basic React Native App Setup with GestureHandlerRootView\nDESCRIPTION: Example of wrapping the main app component with GestureHandlerRootView wrapper\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/getting-started.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App() {\n  return <GestureHandlerRootView>{/* content */}</GestureHandlerRootView>;\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Old vs New Tap Gesture Implementation\nDESCRIPTION: Shows the difference between the old TapGestureHandler implementation and the new GestureDetector approach with equivalent configurations.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/upgrading-to-2.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n  <TapGestureHandler\n    numberOfTaps={2}\n    maxDurationMs={500}\n    maxDelayMs={500}\n    maxDist={10}\n    onHandlerStateChange={({ nativeEvent }) => {\n      if (nativeEvent.state === State.ACTIVE) {\n        console.log('Tap!');\n      }\n    }}>\n    <View />\n  </TapGestureHandler>\n);\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst tapGesture = Gesture.Tap()\n  .numberOfTaps(2)\n  .maxDuration(500)\n  .maxDelay(500)\n  .maxDistance(10)\n  .onStart(() => {\n    console.log('Tap!');\n  });\n\nreturn (\n  <GestureDetector gesture={tapGesture}>\n    <View />\n  </GestureDetector>\n);\n```\n\n----------------------------------------\n\nTITLE: Correct Nesting of Gesture Handlers with Animated.event\nDESCRIPTION: Proper implementation of nested gesture handlers with Animated.event by adding an intermediate Animated.View component between handlers to ensure correct event propagation.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/about-handlers.md#2025-04-20_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nconst PanAndRotate = () => (\n  <PanGestureHandler onGestureEvent={Animated.event({ ... }, { useNativeDriver: true })}>\n    <Animated.View>\n      <RotationGestureHandler onGestureEvent={Animated.event({ ... }, { useNativeDriver: true })}>\n        <Animated.View style={animatedStyles}/>\n      </RotationGestureHandler>\n    </Animated.View>\n  </PanGestureHandler>\n);\n```\n\n----------------------------------------\n\nTITLE: Auto-workletized Gesture Callback Example\nDESCRIPTION: Example of a gesture callback that will be automatically workletized by Reanimated's Babel plugin when defined in a single chain.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/troubleshooting.md#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst gesture = Gesture.Tap().onBegin(() => {\n  console.log(_WORKLET);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Touchable Components from React Native Gesture Handler\nDESCRIPTION: Example showing how to import the touchable components from React Native Gesture Handler. This is a direct replacement for the React Native imports, providing the same API but with native-based implementation.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/components/touchables.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  TouchableNativeFeedback,\n  TouchableHighlight,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n} from 'react-native-gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: React Native Navigation Screen Registration\nDESCRIPTION: Example of registering screens with gesture handler HOC for react-native-navigation\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/getting-started.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { gestureHandlerRootHOC } from 'react-native-gesture-handler';\nimport { Navigation } from 'react-native-navigation';\n\nimport FirstTabScreen from './FirstTabScreen';\nimport SecondTabScreen from './SecondTabScreen';\nimport PushedScreen from './PushedScreen';\n\nexport function registerScreens() {\n  Navigation.registerComponent(\n    'example.FirstTabScreen',\n    () => gestureHandlerRootHOC(FirstTabScreen),\n    () => FirstTabScreen\n  );\n  Navigation.registerComponent(\n    'example.SecondTabScreen',\n    () => gestureHandlerRootHOC(SecondTabScreen),\n    () => SecondTabScreen\n  );\n  Navigation.registerComponent(\n    'example.PushedScreen',\n    () => gestureHandlerRootHOC(PushedScreen),\n    () => PushedScreen\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Nesting of Gesture Handlers with Animated.event\nDESCRIPTION: Example showing incorrect way to nest gesture handlers when using Animated.event with useNativeDriver. This approach is not supported due to how handlers hook into their child views.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/about-handlers.md#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nconst PanAndRotate = () => (\n  <PanGestureHandler onGestureEvent={Animated.event({ ... }, { useNativeDriver: true })}>\n    <RotationGestureHandler onGestureEvent={Animated.event({ ... }, { useNativeDriver: true })}>\n      <Animated.View style={animatedStyles}/>\n    </RotationGestureHandler>\n  </PanGestureHandler>\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Gesture Instance Across Multiple GestureDetectors\nDESCRIPTION: Illustrates an anti-pattern where the same gesture instance is used in multiple GestureDetector components. This example demonstrates what not to do, as reusing the same gesture instance across different detectors will cause an error.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/gesture-detector.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Example() {\n  const pan = Gesture.Pan();\n\n  return (\n    <View>\n      <GestureDetector gesture={pan}>\n        <View>\n          <GestureDetector gesture={pan}> {/* Don't do this! */}\n            <View />\n          </GestureDetector>\n        </View>\n      </GestureDetector>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Circle with PanGestureHandler in React Native\nDESCRIPTION: This example demonstrates how to create a draggable circle UI element using PanGestureHandler. It uses Animated API to track the x-coordinate of touch events and applies them to the circle's position. The handler captures pan gestures and updates the circle's horizontal position accordingly.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/api/gesture-handlers/pan-gh.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst circleRadius = 30;\nclass Circle extends Component {\n  _touchX = new Animated.Value(windowWidth / 2 - circleRadius);\n  _onPanGestureEvent = Animated.event([{ nativeEvent: { x: this._touchX } }], {\n    useNativeDriver: true,\n  });\n  render() {\n    return (\n      <PanGestureHandler onGestureEvent={this._onPanGestureEvent}>\n        <Animated.View\n          style={{\n            height: 150,\n            justifyContent: 'center',\n          }}>\n          <Animated.View\n            style={[\n              {\n                backgroundColor: '#42a5f5',\n                borderRadius: circleRadius,\n                height: circleRadius * 2,\n                width: circleRadius * 2,\n              },\n              {\n                transform: [\n                  {\n                    translateX: Animated.add(\n                      this._touchX,\n                      new Animated.Value(-circleRadius)\n                    ),\n                  },\n                ],\n              },\n            ]}\n          />\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Nested Gesture Handlers with Animation\nDESCRIPTION: Example showing incorrect way of nesting gesture handlers when using Animated.event with useNativeDriver, which is not supported directly.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gesture-handlers/about-handlers.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst PanAndRotate = () => (\n  <PanGestureHandler onGestureEvent={Animated.event({ ... }, { useNativeDriver: true })}>\n    <RotationGestureHandler onGestureEvent={Animated.event({ ... }, { useNativeDriver: true })}>\n      <Animated.View style={animatedStyles}/>\n    </RotationGestureHandler>\n  </PanGestureHandler>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing HoverEffect for iOS Configuration\nDESCRIPTION: Shows how to import the HoverEffect enum for configuring the visual effect of the Hover gesture on iOS.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/gestures/hover-gesture.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { HoverEffect } from 'react-native-gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Implementing ForceTouchGestureHandler in React Native\nDESCRIPTION: Example of implementing a ForceTouchGestureHandler that scales a view based on touch pressure. The handler activates when any force is applied (minForce={0}) and animates the scale of the box proportionally to the force applied.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/api/gesture-handlers/force-gh.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<ForceTouchGestureHandler\n  minForce={0}\n  onGestureEvent={this._onGestureEvent}\n  onHandlerStateChange={this._onHandlerStateChange}>\n  <Animated.View\n    style={[\n      styles.box,\n      { transform: [{ scale: Animated.add(1, this.force) }] },\n    ]}\n  />\n</ForceTouchGestureHandler>\n```\n\n----------------------------------------\n\nTITLE: Jest Testing Configuration\nDESCRIPTION: JSON configuration for setting up Jest testing with React Native Gesture Handler\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/getting-started.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jest\": {\n    \"preset\": \"react-native\",\n    \"setupFiles\": [\"./node_modules/react-native-gesture-handler/jestSetup.js\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Reanimated Drawer Layout in React Native\nDESCRIPTION: Shows how to import the Reanimated Drawer Layout component from the react-native-gesture-handler package.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/components/reanimated-drawer-layout.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ReanimatedDrawerLayout from 'react-native-gesture-handler/ReanimatedDrawerLayout';\n```\n\n----------------------------------------\n\nTITLE: FlingGestureHandler Implementation Example\nDESCRIPTION: Complete example of a FlingGestureHandler implementation that recognizes horizontal fling gestures and displays an alert when the gesture is detected. The handler is configured to recognize both left and right fling directions.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/api/gesture-handlers/fling-gh.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst LongPressButton = () => (\n  <FlingGestureHandler\n    direction={Directions.RIGHT | Directions.LEFT}\n    onHandlerStateChange={({ nativeEvent }) => {\n      if (nativeEvent.state === State.ACTIVE) {\n        Alert.alert(\"I'm flinged!\");\n      }\n    }}>\n    <View style={styles.box} />\n  </FlingGestureHandler>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing DrawerLayout in React Native\nDESCRIPTION: Shows how to import the DrawerLayout component from react-native-gesture-handler package.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/components/drawer-layout.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DrawerLayout from 'react-native-gesture-handler/DrawerLayout';\n```\n\n----------------------------------------\n\nTITLE: Running Pod Install for iOS Development\nDESCRIPTION: Shows the terminal command to install CocoaPods dependencies required for iOS development with react-native-gesture-handler.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/fundamentals/installation.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ios && pod install && cd ..\n```\n\n----------------------------------------\n\nTITLE: Importing DrawerLayout in React Native\nDESCRIPTION: Shows how to import the DrawerLayout component from react-native-gesture-handler package.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/api/components/drawer-layout.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DrawerLayout from 'react-native-gesture-handler/DrawerLayout';\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Version for Android in build.gradle\nDESCRIPTION: Shows how to set a specific Kotlin version for the react-native-gesture-handler library in an Android project's build.gradle file.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/fundamentals/installation.md#2025-04-20_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nbuildscript {\n    ext {\n        kotlinVersion = \"1.6.21\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Gesture Handler Touchables\nDESCRIPTION: Shows how to import touchable components from React Native Gesture Handler library as a replacement for default touchables.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/api/components/touchables.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  TouchableNativeFeedback,\n  TouchableHighlight,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n} from 'react-native-gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Starting Metro Bundler for MacOSExample\nDESCRIPTION: These commands navigate back to the MacOSExample directory and start the Metro bundler using Yarn.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/MacOSExample/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Importing Swipeable from React Native Gesture Handler\nDESCRIPTION: Shows how to import the Swipeable component from the react-native-gesture-handler package. The Swipeable component isn't exported by default, so it requires a specific import path.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/api/components/swipeable.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting MacOSExample Build Issues\nDESCRIPTION: This command removes Pods, Podfile.lock, and the build directory to resolve potential build issues.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/MacOSExample/README.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf Pods Podfile.lock build\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple-Style Swipeable Row in React Native\nDESCRIPTION: A complete example showing how to implement a swipeable row with an archive action. It demonstrates rendering left actions using animation interpolation for a smooth user experience.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/api/components/swipeable.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Component } from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport { RectButton } from 'react-native-gesture-handler';\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\n\nclass AppleStyleSwipeableRow extends Component {\n  renderLeftActions = (progress, dragX) => {\n    const trans = dragX.interpolate({\n      inputRange: [0, 50, 100, 101],\n      outputRange: [-20, 0, 0, 1],\n    });\n    return (\n      <RectButton style={styles.leftAction} onPress={this.close}>\n        <Animated.Text\n          style={[\n            styles.actionText,\n            {\n              transform: [{ translateX: trans }],\n            },\n          ]}>\n          Archive\n        </Animated.Text>\n      </RectButton>\n    );\n  };\n  render() {\n    return (\n      <Swipeable renderLeftActions={this.renderLeftActions}>\n        <Text>\"hello\"</Text>\n      </Swipeable>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Root Project Dependencies\nDESCRIPTION: This command installs the node modules in the project root directory using Yarn.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/MacOSExample/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Referencing UIGestureRecognizer in Objective-C\nDESCRIPTION: This code snippet demonstrates how to reference the UIGestureRecognizer class in Objective-C documentation. It's used to explain that RNGH uses UIGestureRecognizers for implementing gestures on iOS.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/under-the-hood/how-does-it-work.md#2025-04-20_snippet_0\n\nLANGUAGE: objc\nCODE:\n```\nUIGestureRecognizer\n```\n\n----------------------------------------\n\nTITLE: Running MacOSExample from Command Line\nDESCRIPTION: This command builds and runs the MacOSExample app directly from the command line using React Native CLI.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/MacOSExample/README.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn react-native run-macos\n```\n\n----------------------------------------\n\nTITLE: Updating MainActivity.java Implementation\nDESCRIPTION: Shows how to modify the MainActivity.java file to remove RNGestureHandlerEnabledRootView implementation. The code demonstrates removing the createReactActivityDelegate override and associated import.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/migrating-off-rnghenabledroot.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.swmansion.gesturehandler.react.example;\n\nimport com.facebook.react.ReactActivity;\n- import com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;\npublic class MainActivity extends ReactActivity {\n\n-  @Override\n-  protected ReactActivityDelegate createReactActivityDelegate() {\n-    return new ReactActivityDelegate(this, getMainComponentName()) {\n-      @Override\n-      protected ReactRootView createRootView() {\n-       return new RNGestureHandlerEnabledRootView(MainActivity.this);\n-      }\n-    };\n-  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Pods for Fabric Architecture\nDESCRIPTION: Commands to install CocoaPods dependencies for the iOS application with Fabric architecture support. This must be run from the iOS directory within the FabricExample folder.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/FabricExample/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npod install\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Dependencies with Fabric Enabled\nDESCRIPTION: Command to install CocoaPods dependencies with the new React Native Fabric architecture enabled using RCT_NEW_ARCH_ENABLED flag.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/README-Fabric.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nRCT_NEW_ARCH_ENABLED=1 pod install\n```\n\n----------------------------------------\n\nTITLE: Android MainActivity Configuration\nDESCRIPTION: Required modifications to MainActivity.java for Android platform integration\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/getting-started.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.swmansion.gesturehandler.react.example;\n\nimport com.facebook.react.ReactActivity;\nimport com.facebook.react.ReactActivityDelegate;\nimport com.facebook.react.ReactRootView;\nimport com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;\n\npublic class MainActivity extends ReactActivity {\n\n  @Override\n  protected String getMainComponentName() {\n    return \"Example\";\n  }\n\n  @Override\n  protected ReactActivityDelegate createReactActivityDelegate() {\n    return new ReactActivityDelegate(this, getMainComponentName()) {\n      @Override\n      protected ReactRootView createRootView() {\n       return new RNGestureHandlerEnabledRootView(MainActivity.this);\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running React Native Gesture Handler Example on Android\nDESCRIPTION: Command to run the React Native Gesture Handler example application on an Android device or emulator after dependencies are installed.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/FabricExample/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Enabling Fabric Architecture on Android\nDESCRIPTION: Property setting in gradle.properties file to enable the new React Native Fabric architecture for Android builds.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/README-Fabric.md#2025-04-20_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nnewArchEnabled=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Web Implementation for Gesture Handler\nDESCRIPTION: Shows how to revert to the legacy web implementation of react-native-gesture-handler if needed in the application's entry point.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/fundamentals/installation.md#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { enableLegacyWebImplementation } from 'react-native-gesture-handler';\n\nenableLegacyWebImplementation(true);\n```\n\n----------------------------------------\n\nTITLE: Building Static Website Content\nDESCRIPTION: Command to generate static website content in the build directory, which can then be deployed to any static content hosting service.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/README.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Referencing UIKit in Objective-C\nDESCRIPTION: This code snippet shows how to reference the UIKit framework in Objective-C documentation. It's used to explain that UIKit handles most of the gesture recognition work on iOS for RNGH.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/under-the-hood/how-does-it-work.md#2025-04-20_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\nUIKit\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for React Native Gesture Handler\nDESCRIPTION: Sets up CMake build configuration for the gesture handler native module. Includes version-specific C++ standard selection, compilation flags, and proper linking with React Native dependencies based on the framework version.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/android/src/main/jni/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(GestureHandler)\ncmake_minimum_required(VERSION 3.9.0)\n\nset(CMAKE_VERBOSE_MAKEFILE ON)\nif(${REACT_NATIVE_MINOR_VERSION} GREATER_EQUAL 73)\n    set(CMAKE_CXX_STANDARD 20)\nelse()\n    set(CMAKE_CXX_STANDARD 17)\nendif()\n\nset(PACKAGE_NAME \"gesturehandler\")\nset(REACT_ANDROID_DIR \"${REACT_NATIVE_DIR}/ReactAndroid\")\n\ninclude(${REACT_ANDROID_DIR}/cmake-utils/folly-flags.cmake)\nadd_compile_options(${folly_FLAGS})\n\nadd_library(${PACKAGE_NAME}\n  SHARED\n  cpp-adapter.cpp\n)\n\ntarget_include_directories(\n  ${PACKAGE_NAME}\n  PRIVATE\n  \"${REACT_NATIVE_DIR}/ReactCommon\"\n)\n\nfind_package(ReactAndroid REQUIRED CONFIG)\nif (ReactAndroid_VERSION_MINOR GREATER_EQUAL 76)\n  target_link_libraries(\n    ${PACKAGE_NAME}\n    ReactAndroid::reactnative\n    ReactAndroid::jsi\n  )\nelseif (ReactAndroid_VERSION_MINOR GREATER_EQUAL 75)\n  target_link_libraries(\n    ${PACKAGE_NAME}\n    ReactAndroid::react_render_core\n    ReactAndroid::react_render_uimanager\n    ReactAndroid::react_render_graphics\n    ReactAndroid::jsi\n    ReactAndroid::react_nativemodule_core\n  )\nelse ()\n  message(FATAL_ERROR \"react-native-gesture-handler on the New Architecture requires react-native 0.75 or newer.\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding NPM Overrides for React Native Gesture Handler\nDESCRIPTION: JSON configuration to resolve multiple instances of React Native Gesture Handler when using NPM as package manager.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/troubleshooting.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"overrides\": {\n  \"react-native-gesture-handler\": <Gesture Handler version>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Native Gesture Handler Example\nDESCRIPTION: Commands to install dependencies for the React Native Gesture Handler example app. This requires installing packages in both the root directory and in the FabricExample directory.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/FabricExample/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Adding Yarn Resolutions for React Native Gesture Handler\nDESCRIPTION: JSON configuration to resolve multiple instances of React Native Gesture Handler when using Yarn as package manager.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/troubleshooting.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"resolutions\": {\n  \"react-native-gesture-handler\": <Gesture Handler version>\n}\n```\n\n----------------------------------------\n\nTITLE: Running Dependency Analysis Commands for React Native Gesture Handler\nDESCRIPTION: Commands to identify which libraries in your project are using React Native Gesture Handler, helping diagnose multiple instance issues.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/troubleshooting.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm ls react-native-gesture-handler\nyarn why react-native-gesture-handler\n```\n\n----------------------------------------\n\nTITLE: Running React Native Gesture Handler Example on iOS\nDESCRIPTION: Command to run the React Native Gesture Handler example application on an iOS device or simulator after dependencies and pods are installed.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/FabricExample/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Running the Example App on iOS\nDESCRIPTION: Command to build, install, and launch the example app on a connected iOS device or simulator using React Native CLI.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/example.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nreact-native run-ios\n```\n\n----------------------------------------\n\nTITLE: Non-auto-workletized Gesture Callback Examples\nDESCRIPTION: Examples of gesture callbacks that won't be automatically workletized because they're not defined in a single chain.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/troubleshooting.md#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst gesture = Gesture.Tap();\ngesture.onBegin(() => {\n  console.log(_WORKLET);\n});\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst callback = () => {\n  console.log(_WORKLET);\n};\nconst gesture = Gesture.Tap().onBegin(callback);\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst callback = () => {\n  console.log(_WORKLET);\n};\nconst gesture = Gesture.Tap();\ngesture.onBegin(callback);\n```\n\n----------------------------------------\n\nTITLE: Running Package Manager After Configuration Changes\nDESCRIPTION: Commands to apply the resolution/override changes for React Native Gesture Handler.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/troubleshooting.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the React Native development server for the example app.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/example.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Default Touchables\nDESCRIPTION: Shows how to import touchable components from React Native's default implementation.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/api/components/touchables.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  TouchableNativeFeedback,\n  TouchableHighlight,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n} from 'react-native';\n```\n\n----------------------------------------\n\nTITLE: Opening MacOSExample Workspace in Xcode\nDESCRIPTION: This command opens the MacOSExample workspace in Xcode for running the app.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/MacOSExample/README.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nopen macos/MacOSExample.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Running the Example App on Android\nDESCRIPTION: Command to build, install, and launch the example app on a connected Android device or emulator using React Native CLI.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/example.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nreact-native run-android\n```\n\n----------------------------------------\n\nTITLE: Installing Library Dependencies\nDESCRIPTION: Command to install the dependencies of the React Native Gesture Handler library using Yarn.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/example.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Setting Direction Property with Single Direction in FlingGestureHandler\nDESCRIPTION: Shows how to set the direction property of FlingGestureHandler to recognize only downward movements using the Directions enum.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/api/gesture-handlers/fling-gh.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndirection={Directions.DOWN}\n```\n\n----------------------------------------\n\nTITLE: Installing Example App Dependencies\nDESCRIPTION: Command to install the dependencies of the example app using Yarn.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/example.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Pods for MacOSExample\nDESCRIPTION: These commands navigate to the macOS directory within MacOSExample and install the required Pods.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/MacOSExample/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd macos\npod install\n```\n\n----------------------------------------\n\nTITLE: Importing Reanimated Swipeable\nDESCRIPTION: Basic import statement for the Reanimated Swipeable component.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/components/reanimated_swipeable.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Swipeable from 'react-native-gesture-handler/ReanimatedSwipeable';\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Example Directory\nDESCRIPTION: Command to change directory to the Example folder within the React Native Gesture Handler repository.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/example.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd Example\n```\n\n----------------------------------------\n\nTITLE: Checking Java Version for Android Setup\nDESCRIPTION: Command to verify the Java version installed on your system, which needs to be Java 11 for running the Android application.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/FabricExample/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njavac --version\n```\n\n----------------------------------------\n\nTITLE: Installing MacOSExample Dependencies\nDESCRIPTION: These commands navigate to the MacOSExample directory and install its node modules using Yarn.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/MacOSExample/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd MacOSExample\nyarn\n```\n\n----------------------------------------\n\nTITLE: Cloning React Native Gesture Handler Repository\nDESCRIPTION: These commands clone the React Native Gesture Handler repository and navigate to the project directory.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/MacOSExample/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/software-mansion/react-native-gesture-handler\ncd react-native-gesture-handler\n```\n\n----------------------------------------\n\nTITLE: Cloning the React Native Gesture Handler Repository\nDESCRIPTION: Command to clone the React Native Gesture Handler repository from GitHub to your local machine using SSH.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/example.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:software-mansion/react-native-gesture-handler.git\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Library Directory\nDESCRIPTION: Command to change directory to the cloned React Native Gesture Handler repository.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/example.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd react-native-gesture-handler/\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Website\nDESCRIPTION: Command to start a local development server that opens a browser window. Changes to the website are reflected live without requiring server restarts.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/README.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Website Dependencies with Yarn\nDESCRIPTION: Command to install all required dependencies for the Docusaurus 2 website using yarn package manager.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Deploying Website to GitHub Pages\nDESCRIPTION: Command to build the website and deploy it to the gh-pages branch. Requires GitHub username and SSH configuration for GitHub Pages hosting.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/README.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nGIT_USER=<Your GitHub username> USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Markdown Credits Section\nDESCRIPTION: Markdown content displaying the project credits section with links and images to supporting organizations Expo.io and Software Mansion.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/versioned_docs/version-1.x/credits.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: credits\ntitle: Credits\n---\n\nThis project is supported by amazing people from [Expo.io](https://expo.io) and [Software Mansion](https://swmansion.com)\n\n[![expo](https://avatars2.githubusercontent.com/u/12504344?v=3&s=100 \"Expo.io\")](https://expo.io)\n[![swm](https://avatars0.githubusercontent.com/u/56880679?v=3&s=100 \"Software Mansion\")](https://swmansion.com)\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for React Native Gesture Handler Testing\nDESCRIPTION: This snippet shows how to configure Jest in package.json to load mocks provided by React Native Gesture Handler. It sets up the necessary setupFiles for testing RNGH components.\nSOURCE: https://github.com/software-mansion/react-native-gesture-handler/blob/main/docs/docs/guides/testing.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"jest\": {\n  \"preset\": \"react-native\",\n  \"setupFiles\": [\"./node_modules/react-native-gesture-handler/jestSetup.js\"]\n}\n```"
  }
]