[
  {
    "owner": "knadh",
    "repo": "listmonk",
    "content": "TITLE: Creating a Dynamic Campaign Body in listmonk\nDESCRIPTION: An example of how to create a campaign body that uses Go templating expressions to personalize content for subscribers. It demonstrates conditional rendering, attribute access, and link tracking functionality.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/templating.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nHey, did you notice how the template showed your first name?\nYour last name is {{.Subscriber.LastName }}.\n\nYou have done {{ .Subscriber.Attribs.projects }} projects.\n\n\n{{ if eq .Subscriber.Attribs.city \"Bengaluru\" }}\n  You live in Bangalore!\n{{ else }}\n  Where do you live?\n{{ end }}\n\n\nHere is a link for you to click that will be tracked.\n<a href=\"{{ TrackLink \"https://google.com\" }}\">Google</a>\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Email Template in listmonk\nDESCRIPTION: A sample HTML email template that demonstrates how to create a reusable template with fixed header and footer sections. It includes styling, dynamic content insertion with the 'content' template placeholder, and tracking functionality.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/templating.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      body {\n        background: #eee;\n        font-family: Arial, sans-serif;\n        font-size: 6px;\n        color: #111;\n      }\n      header {\n        border-bottom: 1px solid #ddd;\n        padding-bottom: 30px;\n        margin-bottom: 30px;\n      }\n      .container {\n        background: #fff;\n        width: 450px;\n        margin: 0 auto;\n        padding: 30px;\n      }\n    </style>\n  </head>\n  <body>\n    <section class=\"container\">\n      <header>\n        <!-- This will appear in the header of all e-mails.\n             The subscriber's name will be automatically inserted here. //-->\n        Hi {{ .Subscriber.FirstName }}!\n      </header>\n\n      <!-- This is where the e-mail body will be inserted //-->\n      <div class=\"content\">\n        {{ template \"content\" . }}\n      </div>\n\n      <footer>\n        Copyright 2019. All rights Reserved.\n      </footer>\n\n      <!-- The tracking pixel will be inserted here //-->\n      {{ TrackView }}\n    </section>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Subscriber with POST Request in Shell\nDESCRIPTION: Makes a POST request to create a new subscriber with specified email, name, status, list memberships, and custom attributes. Demonstrates creating a subscriber with nested JSON attributes.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' 'http://localhost:9000/api/subscribers' -H 'Content-Type: application/json' \\\n    --data '{\"email\":\"subscriber@domain.com\",\"name\":\"The Subscriber\",\"status\":\"enabled\",\"lists\":[1],\"attribs\":{\"city\":\"Bengaluru\",\"projects\":3,\"stack\":{\"languages\":[\"go\",\"python\"]}}}'\n```\n\n----------------------------------------\n\nTITLE: Setting Super Admin Credentials for Listmonk Binary Installation\nDESCRIPTION: Command to set the Super Admin username and password during Listmonk installation using environment variables.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/installation.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nLISTMONK_ADMIN_USER=myuser LISTMONK_ADMIN_PASSWORD=xxxxx ./listmonk --install\n```\n\n----------------------------------------\n\nTITLE: Sending Transactional Message with File Attachments\nDESCRIPTION: Example of sending a transactional message with file attachments using curl with multipart/form-data. The request uses the 'data' field for JSON parameters and multiple 'file' fields for attachments.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/transactional.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" \"http://localhost:9000/api/tx\" -X POST \\\n-F 'data=\\\"{\\n    \\\"subscriber_email\\\": \\\"user@test.com\\\",\\n    \\\"template_id\\\": 4\\n}\"' \\\n-F 'file=@\"/path/to/attachment.pdf\"' \\\n-F 'file=@\"/path/to/attachment2.pdf\"'\n```\n\n----------------------------------------\n\nTITLE: Setting Super Admin Credentials for Listmonk Docker Installation\nDESCRIPTION: Command to set the Super Admin username and password during Listmonk setup using Docker Compose and environment variables.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/installation.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nLISTMONK_ADMIN_USER=myuser LISTMONK_ADMIN_PASSWORD=xxxxx docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Creating Template with POST Request in Shell\nDESCRIPTION: Example of how to create a new template using a POST request to the /api/templates endpoint with API authentication, including required parameters like name, type, subject, and body content.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/templates.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X POST 'http://localhost:9000/api/templates' \\\n-H 'Content-Type: application/json' \\\n-d '{\n    \"name\": \"New template\",\n    \"type\": \"campaign\",\n    \"subject\": \"Your Weekly Newsletter\",\n    \"body\": \"<h1>Header</h1><p>Content goes here</p>\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Running Local Development Environment for listmonk\nDESCRIPTION: Commands for running the backend Go server and frontend Vue development server locally. The backend runs on port 9000 while the frontend runs on port 8080 with API proxying.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/developer-setup.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake run\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake run-frontend\n```\n\n----------------------------------------\n\nTITLE: Querying Subscribers via API\nDESCRIPTION: Example requests for retrieving subscribers using GET /api/subscribers endpoint with various filtering options including pagination, list filtering, and SQL query expressions.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' 'http://localhost:9000/api/subscribers?page=1&per_page=100'\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' 'http://localhost:9000/api/subscribers?list_id=1&list_id=2&page=1&per_page=100'\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' -X GET 'http://localhost:9000/api/subscribers' \\\n    --url-query 'page=1' \\\n    --url-query 'per_page=100' \\\n    --url-query \"query=subscribers.name LIKE 'Test%' AND subscribers.attribs->>'city' = 'Bengaluru'\"\n```\n\n----------------------------------------\n\nTITLE: Sending Campaign Message to Custom Messenger in JSON (listmonk)\nDESCRIPTION: This JSON structure represents the format in which listmonk sends campaign messages to custom messenger endpoints. It includes campaign details, recipient information, and custom attributes for addressing various messaging channels.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/messengers.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"subject\": \"Welcome to listmonk\",\n\t\"body\": \"The message body\",\n\t\"content_type\": \"plain\",\n\t\"recipients\": [{\n\t\t\"uuid\": \"e44b4135-1e1d-40c5-8a30-0f9a886c2884\",\n\t\t\"email\": \"anon@example.com\",\n\t\t\"name\": \"Anon Doe\",\n\t\t\"attribs\": {\n\t\t\t\"phone\": \"123123123\",\n\t\t\t\"fcm_id\": \"2e7e4b512e7e4b512e7e4b51\",\n\t\t\t\"city\": \"Bengaluru\"\n\t\t},\n\t\t\"status\": \"enabled\"\n\t}],\n\t\"campaign\": {\n\t\t\"uuid\": \"2e7e4b51-f31b-418a-a120-e41800cb689f\",\n\t\t\"name\": \"Test campaign\",\n\t\t\"tags\": [\"test-campaign\"]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Public Subscription with JSON Request in Shell\nDESCRIPTION: Makes a public POST request to create a subscription with JSON data. Includes email, name, and list UUIDs. This endpoint does not require authentication as it's for public use.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncurl 'http://localhost:9000/api/public/subscription' -H 'Content-Type: application/json' \\\n    --data '{\"email\":\"subscriber@domain.com\",\"name\":\"The Subscriber\",\"list_uuids\": [\"eb420c55-4cfb-4972-92ba-c93c34ba475d\", \"0c554cfb-eb42-4972-92ba-c93c34ba475d\"]}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Zone for Listmonk Docker Container\nDESCRIPTION: This YAML snippet shows how to set the time zone for a Listmonk Docker container by modifying the docker-compose.yml file. It uses the TZ environment variable to specify the desired time zone.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n    - TZ=Etc/UTC\n```\n\n----------------------------------------\n\nTITLE: Creating a Public Subscription with Form Request in Shell\nDESCRIPTION: Makes a public POST request to create a subscription using form data. Uses 'l' parameter for multiple list UUIDs. This endpoint does not require authentication as it's for public use.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'http://localhost:9000/api/public/subscription' \\\n    -d 'email=subscriber@domain.com' -d 'name=The Subscriber' -d 'l=eb420c55-4cfb-4972-92ba-c93c34ba475d' -d 'l=0c554cfb-eb42-4972-92ba-c93c34ba475d'\n```\n\n----------------------------------------\n\nTITLE: Installing Listmonk Using Docker Compose\nDESCRIPTION: Docker installation commands for setting up listmonk using docker-compose. Downloads the compose file and starts the services in detached mode.\nSOURCE: https://github.com/knadh/listmonk/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Download the compose file to the current directory.\ncurl -LO https://github.com/knadh/listmonk/raw/master/docker-compose.yml\n\n# Run the services in the background.\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Mounting Custom config.toml in Docker Compose\nDESCRIPTION: Docker Compose configuration to mount a custom config.toml file for Listmonk.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/installation.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  app:\n    ...\n    volumes:\n    - /path/on/your/host/config.toml:/listmonk/config.toml\n```\n\n----------------------------------------\n\nTITLE: Authentication with BasicAuth in Listmonk API\nDESCRIPTION: Example showing how to authenticate with the Listmonk API using HTTP BasicAuth. This method requires passing the API username and token in the request header.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/apis.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" http://localhost:9000/api/lists\n```\n\n----------------------------------------\n\nTITLE: Downloading and Running Listmonk with Docker Compose\nDESCRIPTION: Commands to download the docker-compose.yml file and run Listmonk services in the background using Docker Compose.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/installation.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Download the compose file to the current directory.\ncurl -LO https://github.com/knadh/listmonk/raw/master/docker-compose.yml\n\n# Run the services in the background.\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Development Environment for listmonk\nDESCRIPTION: This command builds the necessary Docker images and initializes the database for the listmonk development environment.\nSOURCE: https://github.com/knadh/listmonk/blob/master/dev/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake init-dev-docker\n```\n\n----------------------------------------\n\nTITLE: Example Response for Creating a Campaign in Listmonk\nDESCRIPTION: This JSON shows the response structure when creating a new campaign. It includes the campaign's ID, creation timestamp, status, and all the parameters provided in the request.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/campaigns.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"id\": 1,\n        \"created_at\": \"2021-12-27T11:50:23.333485Z\",\n        \"updated_at\": \"2021-12-27T11:50:23.333485Z\",\n        \"views\": 0,\n        \"clicks\": 0,\n        \"bounces\": 0,\n        \"lists\": [{\n            \"id\": 1,\n            \"name\": \"Default list\"\n        }],\n        \"started_at\": null,\n        \"to_send\": 1,\n        \"sent\": 0,\n        \"uuid\": \"90c889cc-3728-4064-bbcb-5c1c446633b3\",\n        \"type\": \"regular\",\n        \"name\": \"Test campaign\",\n        \"subject\": \"Hello, world\",\n        \"from_email\": \"listmonk \\u003cnoreply@listmonk.yoursite.com\\u003e\",\n        \"body\": \"\",\n        \"altbody\": null,\n        \"send_at\": null,\n        \"status\": \"draft\",\n        \"content_type\": \"richtext\",\n        \"tags\": [\"test\"],\n        \"template_id\": 1,\n        \"messenger\": \"email\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Development Stack for listmonk\nDESCRIPTION: This command starts the local development stack, including PostgreSQL, Mailhog, Node.js frontend app, and Golang backend app.\nSOURCE: https://github.com/knadh/listmonk/blob/master/dev/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake dev-docker\n```\n\n----------------------------------------\n\nTITLE: Configuring Listmonk with Custom config.toml\nDESCRIPTION: Example of a custom config.toml file for Listmonk, including database configuration and application settings.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/installation.md#2025-04-20_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[app]\naddress = \"0.0.0.0:9000\"\n\n# Database.\n[db]\nhost = \"listmonk_db\" # Postgres container name in the compose file.\nport = 5432\nuser = \"listmonk\"\npassword = \"listmonk\"\ndatabase = \"listmonk\"\nssl_mode = \"disable\"\nmax_open = 25\nmax_idle = 25\nmax_lifetime = \"300s\"\n```\n\n----------------------------------------\n\nTITLE: Querying Bounce Data in SQL\nDESCRIPTION: This SQL query demonstrates how to directly retrieve bounce data from the listmonk database. It joins the bounces and subscribers tables to get detailed information about bounce events.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/bounces.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT bounces.created_at,\n    bounces.subscriber_id,\n    subscribers.uuid AS subscriber_uuid,\n    subscribers.email AS email\nFROM bounces\nLEFT JOIN subscribers ON (subscribers.id = bounces.subscriber_id)\nORDER BY bounces.created_at DESC LIMIT 1000;\n```\n\n----------------------------------------\n\nTITLE: Subscriber Attributes Example in JSON\nDESCRIPTION: An example of subscriber attributes represented as a JSON map. This demonstrates how arbitrary properties can be attached to a subscriber beyond their basic email and name, which can later be used for querying, segmentation, and personalized content in emails.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/concepts.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"city\": \"Bengaluru\",\n  \"likes_tea\": true,\n  \"spoken_languages\": [\"English\", \"Malayalam\"],\n  \"projects\": 3,\n  \"stack\": {\n    \"frameworks\": [\"echo\", \"go\"],\n    \"languages\": [\"go\", \"python\"],\n    \"preferred_language\": \"go\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Subscribers Who Viewed a Campaign Email in listmonk\nDESCRIPTION: SQL query to find all subscribers who viewed a specific campaign email. It uses a subquery with the EXISTS clause to check the campaign_views table.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/querying-and-segmentation.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- Find all subscribers who viewed the campaign email.\nEXISTS(SELECT 1 FROM campaign_views WHERE campaign_views.subscriber_id=subscribers.id AND campaign_views.campaign_id=<put_id_of_campaign>)\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Attributes for listmonk Subscriber\nDESCRIPTION: An example of a JSON map of attributes that can be assigned to a subscriber in listmonk. It includes various types of data such as strings, booleans, arrays, and nested objects.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/querying-and-segmentation.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"city\": \"Bengaluru\",\n  \"likes_tea\": true,\n  \"spoken_languages\": [\"English\", \"Malayalam\"],\n  \"projects\": 3,\n  \"stack\": {\n    \"frameworks\": [\"echo\", \"go\"],\n    \"languages\": [\"go\", \"python\"],\n    \"preferred_language\": \"go\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running VACUUM ANALYZE on Postgres Database\nDESCRIPTION: Command for reclaiming disk space and improving query performance in Postgres databases. This operation is recommended for regular maintenance (weekly) but should be noted as a blocking operation that can temporarily pause database queries.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/maintenance/performance.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nVACUUM ANALYZE\n```\n\n----------------------------------------\n\nTITLE: POST Upload Media Request\nDESCRIPTION: API request to upload a new media file. Requires file parameter in multipart form data and API authentication.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/media.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X POST 'http://localhost:9000/api/media' \\\n--header 'Content-Type: multipart/form-data; boundary=--------------------------183679989870526937212428' \\\n--form 'file=@/path/to/image.jpg'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"id\": 1,\n        \"uuid\": \"ec7b45ce-1408-4e5c-924e-965326a20287\",\n        \"filename\": \"Media file\",\n        \"created_at\": \"2020-04-08T22:43:45.080058+01:00\",\n        \"thumb_uri\": \"/uploads/image_thumb.jpg\",\n        \"uri\": \"/uploads/image.jpg\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Transactional Message with JSON Data in Shell\nDESCRIPTION: Example of sending a transactional message to a subscriber using curl with JSON data. The request includes subscriber email, template ID, custom data that will be available in the template, and content type specification.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/transactional.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" \"http://localhost:9000/api/tx\" -X POST \\\n     -H 'Content-Type: application/json; charset=utf-8' \\\n     --data-binary @- << EOF\n    {\n        \"subscriber_email\": \"user@test.com\",\n        \"template_id\": 2,\n        \"data\": {\"order_id\": \"1234\", \"date\": \"2022-07-30\", \"items\": [1, 2, 3]},\n        \"content_type\": \"html\"\n    }\nEOF\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Logs for Listmonk\nDESCRIPTION: These Bash commands demonstrate how to view and manage Docker logs for Listmonk containers. They include options for following logs in real-time and viewing logs with timestamps.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker logs -f\nsudo docker logs listmonk_app -t\nsudo docker logs listmonk_db -t\nsudo docker logs --help\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for List Creation\nDESCRIPTION: This JSON snippet demonstrates the response structure when creating a new list, including the details of the newly created list.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/lists.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"id\": 5,\n        \"created_at\": \"2020-03-07T06:31:06.072483+01:00\",\n        \"updated_at\": \"2020-03-07T06:31:06.072483+01:00\",\n        \"uuid\": \"1bb246ab-7417-4cef-bddc-8fc8fc941d3a\",\n        \"name\": \"Test list\",\n        \"type\": \"public\",\n        \"tags\": [],\n        \"subscriber_count\": 0,\n        \"description\": \"This is a test list\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Subscribers by SQL Query in listmonk API\nDESCRIPTION: This endpoint allows deleting subscribers based on a SQL expression. It accepts parameters for a SQL query, optional list IDs to limit filtering, and an 'all' flag to delete all subscribers.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' -X POST 'http://localhost:9000/api/subscribers/query/delete' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\"query\":\"subscribers.name LIKE \\'John Doe\\' AND subscribers.attribs->>\\'city\\'' = \\'Bengaluru\\''\"}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribers API Response Format\nDESCRIPTION: Example JSON response from the GET /api/subscribers endpoint showing paginated results with subscriber details including IDs, attributes, status, and list memberships.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"results\": [\n            {\n                \"id\": 1,\n                \"created_at\": \"2020-02-10T23:07:16.199433+01:00\",\n                \"updated_at\": \"2020-02-10T23:07:16.199433+01:00\",\n                \"uuid\": \"ea06b2e7-4b08-4697-bcfc-2a5c6dde8f1c\",\n                \"email\": \"john@example.com\",\n                \"name\": \"John Doe\",\n                \"attribs\": {\n                    \"city\": \"Bengaluru\",\n                    \"good\": true,\n                    \"type\": \"known\"\n                },\n                \"status\": \"enabled\",\n                \"lists\": [\n                    {\n                        \"subscription_status\": \"unconfirmed\",\n                        \"id\": 1,\n                        \"uuid\": \"ce13e971-c2ed-4069-bd0c-240e9a9f56f9\",\n                        \"name\": \"Default list\",\n                        \"type\": \"public\",\n                        \"tags\": [\n                            \"test\"\n                        ],\n                        \"created_at\": \"2020-02-10T23:07:16.194843+01:00\",\n                        \"updated_at\": \"2020-02-10T23:07:16.194843+01:00\"\n                    }\n                ]\n            },\n            {\n                \"id\": 2,\n                \"created_at\": \"2020-02-18T21:10:17.218979+01:00\",\n                \"updated_at\": \"2020-02-18T21:10:17.218979+01:00\",\n                \"uuid\": \"ccf66172-f87f-4509-b7af-e8716f739860\",\n                \"email\": \"quadri@example.com\",\n                \"name\": \"quadri\",\n                \"attribs\": {},\n                \"status\": \"enabled\",\n                \"lists\": [\n                    {\n                        \"subscription_status\": \"unconfirmed\",\n                        \"id\": 1,\n                        \"uuid\": \"ce13e971-c2ed-4069-bd0c-240e9a9f56f9\",\n                        \"name\": \"Default list\",\n                        \"type\": \"public\",\n                        \"tags\": [\n                            \"test\"\n                        ],\n                        \"created_at\": \"2020-02-10T23:07:16.194843+01:00\",\n                        \"updated_at\": \"2020-02-10T23:07:16.194843+01:00\"\n                    }\n                ]\n            },\n            {\n                \"id\": 3,\n                \"created_at\": \"2020-02-19T19:10:49.36636+01:00\",\n                \"updated_at\": \"2020-02-19T19:10:49.36636+01:00\",\n                \"uuid\": \"5d940585-3cc8-4add-b9c5-76efba3c6edd\",\n                \"email\": \"sugar@example.com\",\n                \"name\": \"sugar\",\n                \"attribs\": {},\n                \"status\": \"enabled\",\n                \"lists\": []\n            }\n        ],\n        \"query\": \"\",\n        \"total\": 3,\n        \"per_page\": 20,\n        \"page\": 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Up listmonk Development Environment\nDESCRIPTION: Commands for cloning the repository, configuring the application, and initializing the database for development purposes. Includes steps for making the binary and running the setup process.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/developer-setup.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/knadh/listmonk.git\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake dist\n```\n\nLANGUAGE: bash\nCODE:\n```\n./listmonk --install\n```\n\n----------------------------------------\n\nTITLE: Publishing Campaign to Archive with curl in Listmonk\nDESCRIPTION: This example demonstrates how to publish a campaign to the public archive using the PUT /api/campaigns/{campaign_id}/archive endpoint, specifying template, metadata, and a custom URL slug.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/campaigns.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X PUT 'http://localhost:8080/api/campaigns/33/archive' \n--header 'Content-Type: application/json' \n--data-raw '{\"archive\":true,\"archive_template_id\":1,\"archive_meta\":{},\"archive_slug\":\"my-newsletter-old-edition\"}'\n```\n\n----------------------------------------\n\nTITLE: Setting Default Template with PUT Request in Shell\nDESCRIPTION: Example of how to set a template as the default using a PUT request to the /api/templates/{template_id}/default endpoint with API authentication.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/templates.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X PUT 'http://localhost:9000/api/templates/1/default'\n```\n\n----------------------------------------\n\nTITLE: Creating a Campaign with curl in Listmonk\nDESCRIPTION: This example demonstrates how to create a new campaign using the POST /api/campaigns endpoint. The request includes required fields like name, subject, lists, content type, and campaign type.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/campaigns.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" 'http://localhost:9000/api/campaigns' -X POST -H 'Content-Type: application/json;charset=utf-8' --data-raw '{\"name\":\"Test campaign\",\"subject\":\"Hello, world\",\"lists\":[1],\"from_email\":\"listmonk <noreply@listmonk.yoursite.com>\",\"content_type\":\"richtext\",\"messenger\":\"email\",\"type\":\"regular\",\"tags\":[\"test\"],\"template_id\":1}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Campaign Archive Metadata in JSON\nDESCRIPTION: Example JSON object showing the required campaign metadata structure for archived campaigns when using subscriber-dependent template variables. The metadata includes subscriber UUID, email, name and attributes that will replace .Subscriber variables in the archive template.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/archives.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"UUID\": \"5a837423-a186-5623-9a87-82691cbe3631\",\n  \"email\": \"example@example.com\",\n  \"name\": \"Reader\",\n  \"attribs\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Template with DELETE Request in Shell\nDESCRIPTION: Example of how to delete a template using a DELETE request to the /api/templates/{template_id} endpoint with API authentication.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/templates.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X DELETE 'http://localhost:9000/api/templates/35'\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Subscriber Creation in JSON\nDESCRIPTION: Example JSON response when a new subscriber is successfully created. Shows subscriber details including ID, UUID, email, name, custom attributes, status, and list memberships.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 3,\n    \"created_at\": \"2019-07-03T12:17:29.735507+05:30\",\n    \"updated_at\": \"2019-07-03T12:17:29.735507+05:30\",\n    \"uuid\": \"eb420c55-4cfb-4972-92ba-c93c34ba475d\",\n    \"email\": \"subscriber@domain.com\",\n    \"name\": \"The Subscriber\",\n    \"attribs\": {\n      \"city\": \"Bengaluru\",\n      \"projects\": 3,\n      \"stack\": { \"languages\": [\"go\", \"python\"] }\n    },\n    \"status\": \"enabled\",\n    \"lists\": [1]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Subscribers by ID in listmonk API\nDESCRIPTION: This endpoint allows deleting one or more subscribers by their IDs. It requires an array of subscriber IDs passed as query parameters and returns a boolean response indicating success.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' -X DELETE 'http://localhost:9000/api/subscribers?id=10&id=11'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Attributes in listmonk Subscriber Data\nDESCRIPTION: Advanced SQL query showing how to access and filter based on nested JSON attributes. It combines multiple conditions and uses different JSON operators.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/querying-and-segmentation.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- Find all blocklisted subscribers who like to drink tea, can code Python\n-- and prefer coding Go.\n--\n-- The -> operator returns the value as a structure. Here, the \"languages\" field\n-- The ? operator checks for the existence of a value in a list.\nsubscribers.status = 'blocklisted' AND\n    (subscribers.attribs->>'likes_tea')::BOOLEAN = true AND\n    subscribers.attribs->'stack'->'languages' ? 'python' AND\n    subscribers.attribs->'stack'->>'preferred_language' = 'go'\n\n```\n\n----------------------------------------\n\nTITLE: Sending Bounce Event via Curl in Shell\nDESCRIPTION: This shell command demonstrates how to use the bounce webhook API to record a bounce event. It sends a POST request with JSON data including email, campaign UUID, source, type, and optional metadata.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/bounces.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' -X POST 'http://localhost:9000/webhooks/bounce' \\\n\t-H \"Content-Type: application/json\" \\\n\t--data '{\"email\": \"user1@mail.com\", \"campaign_uuid\": \"9f86b50d-5711-41c8-ab03-bc91c43d711b\", \"source\": \"api\", \"type\": \"hard\", \"meta\": \"{\\\"additional\\\": \\\"info\\\"}'}'\n```\n\n----------------------------------------\n\nTITLE: Campaign Preview API Request\nDESCRIPTION: Example of retrieving a campaign preview using the GET /api/campaigns/{campaign_id}/preview endpoint.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/campaigns.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X GET 'http://localhost:9000/api/campaigns/1/preview'\n```\n\nLANGUAGE: html\nCODE:\n```\n<h3>Hi John!</h3>\nThis is a test e-mail campaign. Your second name is Doe and you are from Bengaluru.\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Conditions in listmonk Subscriber Queries\nDESCRIPTION: SQL query demonstrating how to combine multiple conditions to filter subscribers. This example finds all subscribers named John who have been blocklisted.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/querying-and-segmentation.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- Find all Johns who have been blocklisted.\nsubscribers.email LIKE 'John%' AND status = 'blocklisted'\n```\n\n----------------------------------------\n\nTITLE: Creating a New List with POST Request in Shell\nDESCRIPTION: This snippet shows how to create a new list using a POST request to the /api/lists endpoint. It includes authentication and form data for the new list.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/lists.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X POST 'http://localhost:9000/api/lists'\n```\n\n----------------------------------------\n\nTITLE: Campaign Running Stats API Request\nDESCRIPTION: Example of retrieving running campaign statistics using the GET /api/campaigns/running/stats endpoint.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/campaigns.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X GET 'http://localhost:9000/api/campaigns/running/stats?campaign_id=1'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a List with PUT Request in Shell\nDESCRIPTION: This snippet demonstrates how to update an existing list using a PUT request to the /api/lists/{list_id} endpoint. It includes authentication and form data for the update.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/lists.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X PUT 'http://localhost:9000/api/lists/5' \\\n--form 'name=modified test list' \\\n--form 'type=private'\n```\n\n----------------------------------------\n\nTITLE: Blocklisting Multiple Subscribers with PUT Request in Shell\nDESCRIPTION: Makes a PUT request to blocklist multiple subscribers by providing an array of subscriber IDs. Requires API authentication with username and access token.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' -X PUT 'http://localhost:8080/api/subscribers/blocklist' -H 'Content-Type: application/json' --data-raw '{\"ids\":[2,1]}'\n```\n\n----------------------------------------\n\nTITLE: Upgrading Listmonk with Docker Compose (New Method)\nDESCRIPTION: Commands for upgrading Listmonk using the new docker-compose.yml file. This method takes down the app container, pulls the latest image, and brings the app back up.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/upgrade.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose down app\ndocker compose pull\ndocker compose up app -d\n```\n\n----------------------------------------\n\nTITLE: Modifying Subscriber List Memberships with PUT Request in Shell\nDESCRIPTION: Makes a PUT request to modify list memberships for multiple subscribers. Demonstrates adding subscribers to lists with a confirmed status. Requires API authentication.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' -X PUT 'http://localhost:9000/api/subscribers/lists' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\"ids\": [1, 2, 3], \"action\": \"add\", \"target_list_ids\": [4, 5, 6], \"status\": \"confirmed\"}'\n```\n\n----------------------------------------\n\nTITLE: Deleting Subscriber Bounce Records with DELETE Request in Shell\nDESCRIPTION: Makes a DELETE request to remove all bounce records for a specific subscriber identified by ID. Requires API authentication with username and access token.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' -X DELETE 'http://localhost:9000/api/subscribers/9/bounces'\n```\n\n----------------------------------------\n\nTITLE: Failed Response Structure in Listmonk API\nDESCRIPTION: Example of an error response from the Listmonk API with HTTP status 500. Error responses include a 'message' field with the error description and may optionally include a 'data' field with additional information.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/apis.md#2025-04-20_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 500 Server error\nContent-Type: application/json\n\n{\n    \"message\": \"Error message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Opt-in Confirmation Email with POST Request in Shell\nDESCRIPTION: Makes a POST request to send an opt-in confirmation email to a subscriber identified by ID. Requires API authentication with username and access token.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' 'http://localhost:9000/api/subscribers/11/optin' -H 'Content-Type: application/json' \\\n--data {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Template HTML Preview with GET Request in Shell\nDESCRIPTION: Example of how to retrieve an HTML preview of a template using a GET request to the /api/templates/{template_id}/preview endpoint with API authentication.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/templates.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X GET 'http://localhost:9000/api/templates/1/preview'\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Import\nDESCRIPTION: DELETE request to stop and remove an ongoing import operation.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/import.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X DELETE 'http://localhost:9000/api/import/subscribers'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"name\": \"\",\n        \"total\": 0,\n        \"imported\": 0,\n        \"status\": \"none\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication with Authorization Token in Listmonk API\nDESCRIPTION: Example showing how to authenticate with the Listmonk API using an Authorization token header. This method passes the API username and token as part of the Authorization header.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/apis.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Authorization: token api_user:token\" http://localhost:9000/api/lists\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Templates with GET Request in Shell\nDESCRIPTION: Example of how to retrieve all templates using a GET request to the /api/templates endpoint with API authentication.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/templates.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X GET 'http://localhost:9000/api/templates'\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Public Subscription in JSON\nDESCRIPTION: Example JSON response when a public subscription request is successful. Returns a boolean value indicating success.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Template with GET Request in Shell\nDESCRIPTION: Example of how to retrieve a specific template by ID using a GET request to the /api/templates/{template_id} endpoint with API authentication.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/templates.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X GET 'http://localhost:9000/api/templates/1'\n```\n\n----------------------------------------\n\nTITLE: Template Creation Response in JSON\nDESCRIPTION: Example response after successfully creating a new template, showing the JSON structure containing the created template's data.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/templates.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"created_at\": \"2020-03-14T17:36:41.288578+01:00\",\n            \"updated_at\": \"2020-03-14T17:36:41.288578+01:00\",\n            \"name\": \"Default template\",\n            \"body\": \"{{ template \\\"content\\\" . }}\",\n            \"type\": \"campaign\",\n            \"is_default\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Multiple Subscriber Blocklisting in JSON\nDESCRIPTION: Example JSON response when multiple subscribers are successfully blocklisted. Returns a boolean value indicating success.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Campaigns API Request\nDESCRIPTION: Example of retrieving all campaigns with pagination using the GET /api/campaigns endpoint.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/campaigns.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X GET 'http://localhost:9000/api/campaigns?page=1&per_page=100'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"results\": [\n            {\n                \"id\": 1,\n                \"created_at\": \"2020-03-14T17:36:41.29451+01:00\",\n                \"updated_at\": \"2020-03-14T17:36:41.29451+01:00\",\n                \"views\": 0,\n                \"clicks\": 0,\n                \"lists\": [\n                    {\n                        \"id\": 1,\n                        \"name\": \"Default list\"\n                    }\n                ],\n                \"started_at\": null,\n                \"to_send\": 0,\n                \"sent\": 0,\n                \"uuid\": \"57702beb-6fae-4355-a324-c2fd5b59a549\",\n                \"type\": \"regular\",\n                \"name\": \"Test campaign\",\n                \"subject\": \"Welcome to listmonk\",\n                \"from_email\": \"No Reply <noreply@yoursite.com>\",\n                \"body\": \"<h3>Hi {{ .Subscriber.FirstName }}!</h3>\\n\\t\\t\\tThis is a test e-mail campaign. Your second name is {{ .Subscriber.LastName }} and you are from {{ .Subscriber.Attribs.city }}.\",\n                \"send_at\": \"2020-03-15T17:36:41.293233+01:00\",\n                \"status\": \"draft\",\n                \"content_type\": \"richtext\",\n                \"tags\": [\n                    \"test-campaign\"\n                ],\n                \"template_id\": 1,\n                \"messenger\": \"email\"\n            }\n        ],\n        \"query\": \"\",\n        \"total\": 1,\n        \"per_page\": 20,\n        \"page\": 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response for Archiving Campaign in Listmonk\nDESCRIPTION: This JSON shows the response structure when publishing a campaign to the public archive. It confirms the archive status and includes the template ID, metadata, and custom slug.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/campaigns.md#2025-04-20_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"archive\": true,\n    \"archive_template_id\": 1,\n    \"archive_meta\": {},\n    \"archive_slug\": \"my-newsletter-old-edition\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Subscribers by Email in listmonk\nDESCRIPTION: SQL queries to find subscribers by their email address. Includes examples for exact matching and partial matching using the LIKE operator.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/querying-and-segmentation.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Exact match\nsubscribers.email = 'some@domain.com'\n\n-- Partial match to find e-mails that end in @domain.com.\nsubscribers.email LIKE '%@domain.com'\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Campaign with curl in Listmonk\nDESCRIPTION: This example shows how to delete a campaign using the DELETE /api/campaigns/{campaign_id} endpoint. The request targets campaign ID 34 for deletion.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/campaigns.md#2025-04-20_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X DELETE 'http://localhost:9000/api/campaigns/34'\n```\n\n----------------------------------------\n\nTITLE: Template Deletion Response in JSON\nDESCRIPTION: Example response after successfully deleting a template, showing a simple JSON confirmation with data field set to true.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/templates.md#2025-04-20_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific List with GET Request in Shell\nDESCRIPTION: This snippet demonstrates how to retrieve a specific list by its ID using a GET request to the /api/lists/{list_id} endpoint.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/lists.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X GET 'http://localhost:9000/api/lists/5'\n```\n\n----------------------------------------\n\nTITLE: Campaign Analytics Links API Request\nDESCRIPTION: Example of retrieving campaign link analytics using the GET /api/campaigns/analytics/links endpoint.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/campaigns.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X GET 'http://localhost:9000/api/campaigns/analytics/links?id=1&from=2024-08-04T18%3A30%3A00.624Z&to=2024-08-12T18%3A29%3A00.624Z'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"url\": \"https://freethebears.org\",\n      \"count\": 294\n    },\n    {\n      \"url\": \"https://calmcode.io\",\n      \"count\": 278\n    },\n    {\n      \"url\": \"https://climate.nasa.gov\",\n      \"count\": 261\n    },\n    {\n      \"url\": \"https://www.storybreathing.com\",\n      \"count\": 260\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Listmonk on Kubernetes with Helm\nDESCRIPTION: Helm command to install Listmonk on a Kubernetes cluster using a community-provided Helm chart.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/installation.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ helm upgrade \\\n    --create-namespace \\\n    --install listmonk listmonk \\\n    --namespace listmonk \\\n    --repo https://th0th.github.io/helm-charts \\\n    --values values.yaml \\\n    --version 0.1.0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Subscriber API Request\nDESCRIPTION: Example request for retrieving a specific subscriber by ID using the GET /api/subscribers/{subscriber_id} endpoint with authentication.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' 'http://localhost:9000/api/subscribers/1'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lists with GET Request in Shell\nDESCRIPTION: This snippet demonstrates how to retrieve lists using a GET request to the /api/lists endpoint. It includes pagination parameters and uses basic authentication.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/lists.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X GET 'http://localhost:9000/api/lists?page=1&per_page=100'\n```\n\n----------------------------------------\n\nTITLE: Managing Docker Development Environment for listmonk\nDESCRIPTION: Makefile commands for setting up, running, and cleaning up Docker containers for development. Includes initializing the database container and the complete development suite.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/developer-setup.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake init-dev-docker\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake dev-docker\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake rm-dev-docker\n```\n\n----------------------------------------\n\nTITLE: Uploading Subscribers for Import\nDESCRIPTION: POST request to upload a CSV file for bulk subscriber import with configuration parameters including mode, delimiter, and list IDs.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/import.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X POST 'http://localhost:9000/api/import/subscribers' \\\n  -F 'params={\"mode\":\"subscribe\", \"subscription_status\":\"confirmed\", \"delim\":\",\", \"lists\":[1, 2], \"overwrite\": true}' \\\n  -F \"file=@/path/to/subs.csv\"\n```\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"mode\": \"subscribe\",\n        \"delim\": \",\",\n        \"lists\":[1],\n        \"overwrite\": true\n    }\n```\n\n----------------------------------------\n\nTITLE: Deleting a List with DELETE Request in Shell\nDESCRIPTION: This snippet shows how to delete a specific list using a DELETE request to the /api/lists/{list_id} endpoint. It includes authentication.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/lists.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' -X DELETE 'http://localhost:9000/api/lists/1'\n```\n\n----------------------------------------\n\nTITLE: Markdown Permission Matrix Table\nDESCRIPTION: Detailed table displaying all available permissions in Listmonk, organized by functional groups including lists, subscribers, campaigns, bounces, media, templates, users, and settings. Each permission includes a description of its capabilities.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/roles-and-permissions.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Group       | Permission              | Description                                                                                                                                                                                                          |\n| ----------- | ----------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| lists       | lists:get_all           | Get details of all lists                                                                                                                                                                                                                |\n|             | lists:manage_all        | Create, update, and delete all lists                                                                                                                                                                                                 |\n| subscribers | subscribers:get         | Get individual subscriber details                                                                                                                                                                                                    |\n|             | subscribers:get_all     | Get all subscribers and their details                                                                                                                                                                                                |\n|             | subscribers:manage      | Add, update, and delete subscribers                                                                                                                                                                                                  |\n|             | subscribers:import      | Import subscribers from external files                                                                                                                                                                                               |\n|             | subscribers:sql_query   | Run SQL queries on subscriber data. **WARNING:** This permission will allow the querying of all lists and subscribers directly from the database with SQL expressions, superceding individual list and subscriber permissions above. |\n|             | tx:send                 | Send transactional messages to subscribers                                                                                                                                                                                           |\n| campaigns   | campaigns:get           | Get campaign details                                                                                                                                                                                                                 |\n|             | campaigns:get_analytics | Access campaign performance metrics                                                                                                                                                                                                  |\n|             | campaigns:manage        | Create, update, and delete campaigns                                                                                                                                                                                                 |\n| bounces     | bounces:get             | Get email bounce records                                                                                                                                                                                                             |\n|             | bounces:manage          | Process and handle bounced emails                                                                                                                                                                                                    |\n|             | webhooks:post_bounce    | Receive bounce notifications via webhook                                                                                                                                                                                             |\n| media       | media:get               | Get uploaded media files                                                                                                                                                                                                             |\n|             | media:manage            | Upload, update, and delete media                                                                                                                                                                                                     |\n| templates   | templates:get           | Get email templates                                                                                                                                                                                                                  |\n|             | templates:manage        | Create, update, and delete templates                                                                                                                                                                                                 |\n| users       | users:get               | Get system user accounts                                                                                                                                                                                                             |\n|             | users:manage            | Create, update, and delete user accounts                                                                                                                                                                                             |\n|             | roles:get               | Get user roles and permissions                                                                                                                                                                                                       |\n|             | roles:manage            | Create and modify user roles                                                                                                                                                                                                         |\n| settings    | settings:get            | Get system settings                                                                                                                                                                                                                  |\n|             | settings:manage         | Modify system configuration                                                                                                                                                                                                          |\n|             | settings:maintain       | Perform system maintenance tasks                                                                                                                                                                                                     |\n```\n\n----------------------------------------\n\nTITLE: Blocklisting Subscribers with SQL Query in Shell\nDESCRIPTION: Makes a POST request to blocklist subscribers based on an SQL expression. This example filters subscribers by name and custom attribute (city). Requires API authentication.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' -X POST 'http://localhost:9000/api/subscribers/query/blocklist' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\"query\":\"subscribers.name LIKE \\'John Doe\\' AND subscribers.attribs->>\\'city\\' = \\'Bengaluru\\'\"}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bounce Records with GET Request in Shell\nDESCRIPTION: This snippet demonstrates how to make a GET request to retrieve bounce records. It includes parameters for filtering by campaign ID, pagination, and sorting options.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/bounces.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X GET 'http://localhost:9000/api/bounces?campaign_id=1&page=1&per_page=2' \\ \n    -H 'accept: application/json' -H 'Content-Type: application/x-www-form-urlencoded' \\\n    --data '{\"source\":\"demo\",\"order_by\":\"created_at\",\"order\":\"asc\"}'\n```\n\n----------------------------------------\n\nTITLE: Stopping Listmonk Docker Container\nDESCRIPTION: Command to stop the Listmonk application container when performing a downgrade.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/upgrade.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker stop listmonk_app\n```\n\n----------------------------------------\n\nTITLE: Querying Subscriber Attributes in listmonk\nDESCRIPTION: SQL query demonstrating how to query subscriber attributes stored as JSON. It shows how to access JSON fields and perform type casting for comparisons.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/querying-and-segmentation.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- The ->> operator returns the value as text. Find all subscribers\n-- who live in Bengaluru and have done more than 3 projects.\n-- Here 'projects' is cast into an integer so that we can apply the\n-- numerical operator >\nsubscribers.attribs->>'city' = 'Bengaluru' AND\n    (subscribers.attribs->>'projects')::INT > 3\n```\n\n----------------------------------------\n\nTITLE: Single Subscriber API Response Format\nDESCRIPTION: Example JSON response from the GET /api/subscribers/{subscriber_id} endpoint showing detailed information about a specific subscriber including profile data and list memberships.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"id\": 1,\n        \"created_at\": \"2020-02-10T23:07:16.199433+01:00\",\n        \"updated_at\": \"2020-02-10T23:07:16.199433+01:00\",\n        \"uuid\": \"ea06b2e7-4b08-4697-bcfc-2a5c6dde8f1c\",\n        \"email\": \"john@example.com\",\n        \"name\": \"John Doe\",\n        \"attribs\": {\n            \"city\": \"Bengaluru\",\n            \"good\": true,\n            \"type\": \"known\"\n        },\n        \"status\": \"enabled\",\n        \"lists\": [\n            {\n                \"subscription_status\": \"unconfirmed\",\n                \"id\": 1,\n                \"uuid\": \"ce13e971-c2ed-4069-bd0c-240e9a9f56f9\",\n                \"name\": \"Default list\",\n                \"type\": \"public\",\n                \"tags\": [\n                    \"test\"\n                ],\n                \"created_at\": \"2020-02-10T23:07:16.194843+01:00\",\n                \"updated_at\": \"2020-02-10T23:07:16.194843+01:00\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Listmonk with Docker Compose after Downgrade\nDESCRIPTION: Command to restart the Listmonk stack after completing the downgrade procedure, bringing up the application, database, and web server containers.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/upgrade.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker compose up -d app db nginx certbot\n```\n\n----------------------------------------\n\nTITLE: GET Media Files Request\nDESCRIPTION: API request to retrieve all uploaded media files. Requires API authentication via username and token.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/media.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X GET 'http://localhost:9000/api/media' \\\n--header 'Content-Type: multipart/form-data; boundary=--------------------------093715978792575906250298'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"uuid\": \"ec7b45ce-1408-4e5c-924e-965326a20287\",\n            \"filename\": \"Media file\",\n            \"created_at\": \"2020-04-08T22:43:45.080058+01:00\",\n            \"thumb_url\": \"/uploads/image_thumb.jpg\",\n            \"uri\": \"/uploads/image.jpg\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Subscriber Export API Response Format\nDESCRIPTION: Example JSON response from the GET /api/subscribers/{subscriber_id}/export endpoint showing the exported subscriber data including profile information, list subscriptions, campaign views, and link click data.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"profile\": [\n    {\n      \"id\": 1,\n      \"uuid\": \"c2cc0b31-b485-4d72-8ce8-b47081beadec\",\n      \"email\": \"john@example.com\",\n      \"name\": \"John Doe\",\n      \"attribs\": {\n        \"city\": \"Bengaluru\",\n        \"good\": true,\n        \"type\": \"known\"\n      },\n      \"status\": \"enabled\",\n      \"created_at\": \"2024-07-29T11:01:31.478677+05:30\",\n      \"updated_at\": \"2024-07-29T11:01:31.478677+05:30\"\n    }\n  ],\n  \"subscriptions\": [\n    {\n      \"subscription_status\": \"unconfirmed\",\n      \"name\": \"Private list\",\n      \"type\": \"private\",\n      \"created_at\": \"2024-07-29T11:01:31.478677+05:30\"\n    }\n  ],\n  \"campaign_views\": [],\n  \"link_clicks\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Tearing Down Docker Development Environment for listmonk\nDESCRIPTION: This command removes all containers and data, including the database, from the listmonk development environment.\nSOURCE: https://github.com/knadh/listmonk/blob/master/dev/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake rm-dev-docker\n```\n\n----------------------------------------\n\nTITLE: Updating Campaign Status with curl in Listmonk\nDESCRIPTION: This example shows how to update a campaign's status using the PUT /api/campaigns/{campaign_id}/status endpoint. The request changes the campaign status to 'scheduled'.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/campaigns.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X PUT 'http://localhost:9000/api/campaigns/1/status' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\"status\":\"scheduled\"}'\n```\n\n----------------------------------------\n\nTITLE: Exporting Subscriber Data API Request\nDESCRIPTION: Example request for exporting a specific subscriber's data using the GET /api/subscribers/{subscriber_id}/export endpoint, which provides comprehensive information including profile, subscriptions, and campaign interactions.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' 'http://localhost:9000/api/subscribers/1/export'\n```\n\n----------------------------------------\n\nTITLE: Building Production Binary for listmonk\nDESCRIPTION: Command to create a production build of listmonk that compiles the Go backend, builds the JavaScript frontend, and embeds all static assets into a single self-contained binary.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/developer-setup.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake dist\n```\n\n----------------------------------------\n\nTITLE: Installing MkDocs Dependencies and Previewing Documentation\nDESCRIPTION: Commands to install the required Python dependencies and run the MkDocs server locally to preview the documentation. These should be executed inside the 'docs' directory.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs serve\n```\n\n----------------------------------------\n\nTITLE: Blocklisting a Specific Subscriber with PUT Request in Shell\nDESCRIPTION: Makes a PUT request to blocklist a specific subscriber identified by ID. Requires API authentication with username and access token.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' -X PUT 'http://localhost:9000/api/subscribers/9/blocklist'\n```\n\n----------------------------------------\n\nTITLE: Single Template Response Format in JSON\nDESCRIPTION: Example response when retrieving a single template by ID, showing the JSON structure containing the template's complete data.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/templates.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"id\": 1,\n        \"created_at\": \"2020-03-14T17:36:41.288578+01:00\",\n        \"updated_at\": \"2020-03-14T17:36:41.288578+01:00\",\n        \"name\": \"Default template\",\n        \"body\": \"{{ template \\\"content\\\" . }}\",\n        \"type\": \"campaign\",\n        \"is_default\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subscriber Bounce Records with GET Request in Shell\nDESCRIPTION: Makes a GET request to retrieve bounce records for a specific subscriber identified by ID. Requires API authentication with username and access token.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' 'http://localhost:9000/api/subscribers/1/bounces'\n```\n\n----------------------------------------\n\nTITLE: Templates List Response Format in JSON\nDESCRIPTION: Example response when retrieving all templates, showing the JSON structure containing template data including ID, timestamps, name, body content, type, and default status.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/templates.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"created_at\": \"2020-03-14T17:36:41.288578+01:00\",\n            \"updated_at\": \"2020-03-14T17:36:41.288578+01:00\",\n            \"name\": \"Default template\",\n            \"body\": \"{{ template \\\"content\\\" . }}\",\n            \"type\": \"campaign\",\n            \"is_default\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public Lists with GET Request in Shell\nDESCRIPTION: This snippet shows how to retrieve public lists using a GET request to the /api/public/lists endpoint. This is an unauthenticated call for use in subscription forms.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/lists.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET 'http://localhost:9000/api/public/lists'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Campaign API Request\nDESCRIPTION: Example of retrieving a specific campaign by ID using the GET /api/campaigns/{campaign_id} endpoint.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/campaigns.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X GET 'http://localhost:9000/api/campaigns/1'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"id\": 1,\n        \"created_at\": \"2020-03-14T17:36:41.29451+01:00\",\n        \"updated_at\": \"2020-03-14T17:36:41.29451+01:00\",\n        \"views\": 0,\n        \"clicks\": 0,\n        \"lists\": [\n            {\n                \"id\": 1,\n                \"name\": \"Default list\"\n            }\n        ],\n        \"started_at\": null,\n        \"to_send\": 0,\n        \"sent\": 0,\n        \"uuid\": \"57702beb-6fae-4355-a324-c2fd5b59a549\",\n        \"type\": \"regular\",\n        \"name\": \"Test campaign\",\n        \"subject\": \"Welcome to listmonk\",\n        \"from_email\": \"No Reply <noreply@yoursite.com>\",\n        \"body\": \"<h3>Hi {{ .Subscriber.FirstName }}!</h3>\\n\\t\\t\\tThis is a test e-mail campaign. Your second name is {{ .Subscriber.LastName }} and you are from {{ .Subscriber.Attribs.city }}.\",\n        \"send_at\": \"2020-03-15T17:36:41.293233+01:00\",\n        \"status\": \"draft\",\n        \"content_type\": \"richtext\",\n        \"tags\": [\n            \"test-campaign\"\n        ],\n        \"template_id\": 1,\n        \"messenger\": \"email\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GET Specific Media Request\nDESCRIPTION: API request to retrieve a specific media file by ID. Requires media_id parameter and API authentication.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/media.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' 'http://localhost:9000/api/media/7'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": \n    {\n        \"id\": 7,\n        \"uuid\": \"62e32e97-d6ca-4441-923f-b62607000dd1\",\n        \"filename\": \"ResumeB.pdf\",\n        \"content_type\": \"application/pdf\",\n        \"created_at\": \"2024-08-06T11:28:53.888257+05:30\",\n        \"thumb_url\": null,\n        \"provider\": \"filesystem\",\n        \"meta\": {},\n        \"url\": \"http://localhost:9000/uploads/ResumeB.pdf\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for List Retrieval\nDESCRIPTION: This JSON snippet shows the structure of the response when retrieving lists. It includes list details such as ID, creation date, name, type, and subscriber count.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/lists.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"results\": [\n            {\n                \"id\": 1,\n                \"created_at\": \"2020-02-10T23:07:16.194843+01:00\",\n                \"updated_at\": \"2020-03-06T22:32:01.118327+01:00\",\n                \"uuid\": \"ce13e971-c2ed-4069-bd0c-240e9a9f56f9\",\n                \"name\": \"Default list\",\n                \"type\": \"public\",\n                \"optin\": \"double\",\n                \"tags\": [\n                    \"test\"\n                ],\n                \"subscriber_count\": 2\n            },\n            {\n                \"id\": 2,\n                \"created_at\": \"2020-03-04T21:12:09.555013+01:00\",\n                \"updated_at\": \"2020-03-06T22:34:46.405031+01:00\",\n                \"uuid\": \"f20a2308-dfb5-4420-a56d-ecf0618a102d\",\n                \"name\": \"get\",\n                \"type\": \"private\",\n                \"optin\": \"single\",\n                \"tags\": [],\n                \"subscriber_count\": 0\n            }\n        ],\n        \"total\": 5,\n        \"per_page\": 20,\n        \"page\": 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Campaign Analytics Views API Request\nDESCRIPTION: Example of retrieving campaign view analytics using the GET /api/campaigns/analytics/views endpoint.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/campaigns.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X GET 'http://localhost:9000/api/campaigns/analytics/views?id=1&from=2024-08-04&to=2024-08-12'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"campaign_id\": 1,\n      \"count\": 10,\n      \"timestamp\": \"2024-08-04T00:00:00Z\"\n    },\n    {\n      \"campaign_id\": 1,\n      \"count\": 14,\n      \"timestamp\": \"2024-08-08T00:00:00Z\"\n    },\n    {\n      \"campaign_id\": 1,\n      \"count\": 20,\n      \"timestamp\": \"2024-08-09T00:00:00Z\"\n    },\n    {\n      \"campaign_id\": 1,\n      \"count\": 21,\n      \"timestamp\": \"2024-08-10T00:00:00Z\"\n    },\n    {\n      \"campaign_id\": 1,\n      \"count\": 21,\n      \"timestamp\": \"2024-08-11T00:00:00Z\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Import Status\nDESCRIPTION: GET request to fetch the current status of an ongoing subscriber import operation.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/import.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X GET 'http://localhost:9000/api/import/subscribers'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"name\": \"\",\n        \"total\": 0,\n        \"imported\": 0,\n        \"status\": \"none\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DELETE Media Request\nDESCRIPTION: API request to delete a specific media file by ID. Requires media_id parameter and API authentication.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/media.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X DELETE 'http://localhost:9000/api/media/1'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Template HTML Preview Response\nDESCRIPTION: Example HTML response when retrieving a template preview, showing the rendered HTML content of the template that would be sent in an email.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/templates.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<p>Hi there</p>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis et elit ac elit sollicitudin condimentum non a magna.\n\tSed tempor mauris in facilisis vehicula. Aenean nisl urna, accumsan ac tincidunt vitae, interdum cursus massa.\n\tInterdum et malesuada fames ac ante ipsum primis in faucibus. Aliquam varius turpis et turpis lacinia placerat.\n\tAenean id ligula a orci lacinia blandit at eu felis. Phasellus vel lobortis lacus. Suspendisse leo elit, luctus sed\n\terat ut, venenatis fermentum ipsum. Donec bibendum neque quis.</p>\n\n<h3>Sub heading</h3>\n<p>Nam luctus dui non placerat mattis. Morbi non accumsan orci, vel interdum urna. Duis faucibus id nunc ut euismod.\n\tCurabitur et eros id erat feugiat fringilla in eget neque. Aliquam accumsan cursus eros sed faucibus.</p>\n\n<p>Here is a link to <a href=\"https://listmonk.app\" target=\"_blank\">listmonk</a>.</p>\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Bounce Records Retrieval\nDESCRIPTION: This snippet shows the structure of the JSON response when retrieving bounce records. It includes details such as bounce type, source, email, subscriber information, and campaign details.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/bounces.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"results\": [\n      {\n        \"id\": 839971,\n        \"type\": \"hard\",\n        \"source\": \"demo\",\n        \"meta\": {\n          \"some\": \"parameter\"\n        },\n        \"created_at\": \"2024-08-20T23:54:22.851858Z\",\n        \"email\": \"gilles.deleuze@example.app\",\n        \"subscriber_uuid\": \"32ca1f3e-1a1d-42e1-af04-df0757f420f3\",\n        \"subscriber_id\": 60,\n        \"campaign\": {\n          \"id\": 1,\n          \"name\": \"Test campaign\"\n        }\n      },\n      {\n        \"id\": 839725,\n        \"type\": \"hard\",\n        \"source\": \"demo\",\n        \"meta\": {\n          \"some\": \"parameter\"\n        },\n        \"created_at\": \"2024-08-20T22:46:36.393547Z\",\n        \"email\": \"gottfried.leibniz@example.app\",\n        \"subscriber_uuid\": \"5911d3f4-2346-4bfc-aad2-eb319ab0e879\",\n        \"subscriber_id\": 13,\n        \"campaign\": {\n          \"id\": 1,\n          \"name\": \"Test campaign\"\n        }\n      }\n    ],\n    \"query\": \"\",\n    \"total\": 528,\n    \"per_page\": 2,\n    \"page\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Transactional API\nDESCRIPTION: Sample JSON response returned by the transactional API endpoint after successfully processing a request. The response data field contains a boolean value indicating success.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/transactional.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Specific Subscriber with DELETE Request in Shell\nDESCRIPTION: Makes a DELETE request to remove a specific subscriber identified by ID. Requires API authentication with username and access token.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' -X DELETE 'http://localhost:9000/api/subscribers/9'\n```\n\n----------------------------------------\n\nTITLE: Sample Response for List Membership Modification in JSON\nDESCRIPTION: Example JSON response when list memberships are successfully modified. Returns a boolean value indicating success.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Subscribers by Name in listmonk\nDESCRIPTION: SQL query to find subscribers by their name. This example demonstrates how to use the LIKE operator for partial name matching.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/querying-and-segmentation.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Find all subscribers whose name start with John.\nsubscribers.email LIKE 'John%'\n\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Subscriber Deletion in JSON\nDESCRIPTION: Example JSON response when a subscriber is successfully deleted. Returns a boolean value indicating success.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Specific List Retrieval\nDESCRIPTION: This JSON snippet shows the response structure when retrieving a specific list, including detailed information about the list.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/lists.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"id\": 5,\n        \"created_at\": \"2020-03-07T06:31:06.072483+01:00\",\n        \"updated_at\": \"2020-03-07T06:31:06.072483+01:00\",\n        \"uuid\": \"1bb246ab-7417-4cef-bddc-8fc8fc941d3a\",\n        \"name\": \"Test list\",\n        \"type\": \"public\",\n        \"optin\": \"double\",\n        \"tags\": [],\n        \"subscriber_count\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Bounce Records Deletion in JSON\nDESCRIPTION: Example JSON response when bounce records are successfully deleted for a subscriber. Returns a boolean value indicating success.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Listmonk with Docker Compose (Legacy Method)\nDESCRIPTION: Commands for upgrading Listmonk using an older docker-compose.yml file. This method requires manually running the upgrade step to update the database schema.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/upgrade.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose down\ndocker-compose pull && docker-compose run --rm app ./listmonk --upgrade\ndocker-compose up -d app db\n```\n\n----------------------------------------\n\nTITLE: Example Response for Updating Campaign Status in Listmonk\nDESCRIPTION: This JSON shows the response structure when updating a campaign's status. It includes the updated campaign details with the new status ('scheduled').\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/campaigns.md#2025-04-20_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"id\": 1,\n        \"created_at\": \"2020-03-14T17:36:41.29451+01:00\",\n        \"updated_at\": \"2020-04-08T19:35:17.331867+01:00\",\n        \"views\": 0,\n        \"clicks\": 0,\n        \"lists\": [\n            {\n                \"id\": 1,\n                \"name\": \"Default list\"\n            }\n        ],\n        \"started_at\": null,\n        \"to_send\": 0,\n        \"sent\": 0,\n        \"uuid\": \"57702beb-6fae-4355-a324-c2fd5b59a549\",\n        \"type\": \"regular\",\n        \"name\": \"Test campaign\",\n        \"subject\": \"Welcome to listmonk\",\n        \"from_email\": \"No Reply <noreply@yoursite.com>\",\n        \"body\": \"<h3>Hi {{ .Subscriber.FirstName }}!</h3>\\n\\t\\t\\tThis is a test e-mail campaign. Your second name is {{ .Subscriber.LastName }} and you are from {{ .Subscriber.Attribs.city }}.\",\n        \"send_at\": \"2020-03-15T17:36:41.293233+01:00\",\n        \"status\": \"scheduled\",\n        \"content_type\": \"richtext\",\n        \"tags\": [\n            \"test-campaign\"\n        ],\n        \"template_id\": 1,\n        \"messenger\": \"email\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Listmonk Docker Command for Custom Config\nDESCRIPTION: Modified Docker Compose command to use a custom config.toml file for Listmonk installation and execution.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/installation.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncommand: [sh, -c, \"./listmonk --install --idempotent --yes --config /listmonk/config.toml && ./listmonk --upgrade --yes --config /listmonk/config.toml && ./listmonk --config /listmonk/config.toml\"]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Import Logs\nDESCRIPTION: GET request to fetch logs from an ongoing import process, showing progress and completion status.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/import.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"api_user:token\" -X GET 'http://localhost:9000/api/import/subscribers/logs'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": \"2020/04/08 21:55:20 processing 'import.csv'\\n2020/04/08 21:55:21 imported finished\\n\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Volumes for Listmonk Uploads\nDESCRIPTION: This YAML snippet demonstrates how to configure Docker volumes for handling media uploads in Listmonk. It specifies a named volume for storing uploaded files inside the container.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napp:\n    volumes:\n      - type: volume\n        source: listmonk-uploads\n        target: /listmonk/uploads\n\nvolumes:\n  listmonk-uploads:\n```\n\n----------------------------------------\n\nTITLE: Exporting Bounces via Curl in Shell\nDESCRIPTION: This shell command shows how to export bounce data using the listmonk JSON API. It sends a GET request to the /api/bounces endpoint with authentication.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/bounces.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'username:passsword' 'http://localhost:9000/api/bounces'\n```\n\n----------------------------------------\n\nTITLE: Deleting a Specific Bounce Record with DELETE Request in Shell\nDESCRIPTION: This snippet shows how to delete a specific bounce record by its ID using a DELETE request to the API endpoint.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/bounces.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' -X DELETE 'http://localhost:9000/api/bounces/840965'\n```\n\n----------------------------------------\n\nTITLE: Deleting All Bounce Records with DELETE Request in Shell\nDESCRIPTION: This snippet shows how to make a DELETE request to remove all bounce records. It requires a boolean parameter 'all' set to true to confirm the deletion of all records.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/bounces.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' -X DELETE 'http://localhost:9000/api/bounces?all=true'\n```\n\n----------------------------------------\n\nTITLE: Configuring Bind Mounts for Listmonk Uploads\nDESCRIPTION: This YAML snippet shows how to use bind mounts to manage file uploads in Listmonk. It maps a host directory to a container directory for storing uploaded files.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napp:\n    volumes:\n      - ./data/uploads:/listmonk/uploads\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Bounce Records with DELETE Request in Shell\nDESCRIPTION: This snippet demonstrates how to delete multiple bounce records by specifying their IDs in the DELETE request.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/bounces.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u 'api_username:access_token' -X DELETE 'http://localhost:9000/api/bounces?id=840965&id=840168&id=840879'\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Subscriber Bounce Records in JSON\nDESCRIPTION: Example JSON response showing bounce records for a subscriber. Each record includes details like bounce type, source, metadata, timestamps, and associated campaign information.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 841706,\n      \"type\": \"hard\",\n      \"source\": \"demo\",\n      \"meta\": {\n        \"some\": \"parameter\"\n      },\n      \"created_at\": \"2024-08-22T09:05:12.862877Z\",\n      \"email\": \"thomas.hobbes@example.com\",\n      \"subscriber_uuid\": \"137c0d83-8de6-44e2-a55f-d4238ab21969\",\n      \"subscriber_id\": 99,\n      \"campaign\": {\n        \"id\": 2,\n        \"name\": \"Welcome to listmonk\"\n      }\n    },\n    {\n      \"id\": 841680,\n      \"type\": \"hard\",\n      \"source\": \"demo\",\n      \"meta\": {\n        \"some\": \"parameter\"\n      },\n      \"created_at\": \"2024-08-19T14:07:53.141917Z\",\n      \"email\": \"thomas.hobbes@example.com\",\n      \"subscriber_uuid\": \"137c0d83-8de6-44e2-a55f-d4238ab21969\",\n      \"subscriber_id\": 99,\n      \"campaign\": {\n        \"id\": 1,\n        \"name\": \"Test campaign\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Structure in Listmonk API\nDESCRIPTION: Example of a successful response from the Listmonk API with HTTP status 200. All successful responses include a JSON body with a 'data' field containing the response payload.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/apis.md#2025-04-20_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"data\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Public List Retrieval\nDESCRIPTION: This JSON snippet demonstrates the response structure when retrieving public lists, showing the UUID and name of each list.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/lists.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"uuid\": \"55e243af-80c6-4169-8d7f-bc571e0269e9\",\n    \"name\": \"Opt-in list\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Subscriber Blocklisting in JSON\nDESCRIPTION: Example JSON response when a subscriber is successfully blocklisted. Returns a boolean value indicating success.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Opt-in Confirmation in JSON\nDESCRIPTION: Example JSON response when an opt-in confirmation email is successfully sent to a subscriber. Returns a boolean value indicating success.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Query-based Blocklisting in JSON\nDESCRIPTION: Example JSON response when subscribers are successfully blocklisted based on an SQL query. Returns a boolean value indicating success.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/subscribers.md#2025-04-20_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for List Update\nDESCRIPTION: This JSON snippet shows the response structure when updating a list, including the updated details of the list.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/lists.md#2025-04-20_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"id\": 5,\n        \"created_at\": \"2020-03-07T06:31:06.072483+01:00\",\n        \"updated_at\": \"2020-03-07T06:52:15.208075+01:00\",\n        \"uuid\": \"1bb246ab-7417-4cef-bddc-8fc8fc941d3a\",\n        \"name\": \"modified test list\",\n        \"type\": \"private\",\n        \"optin\": \"single\",\n        \"tags\": [],\n        \"subscriber_count\": 0,\n        \"description\": \"This is a test list\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response for Deleting Campaign in Listmonk\nDESCRIPTION: This JSON shows the response structure when deleting a campaign. A successful deletion returns a data field with value true.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/campaigns.md#2025-04-20_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for List Deletion\nDESCRIPTION: This JSON snippet demonstrates the response structure when deleting a list, confirming the successful deletion.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/lists.md#2025-04-20_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Language Files in listmonk\nDESCRIPTION: Command flag to specify a directory containing custom language JSON files for listmonk to load. This allows for customizing existing languages or adding new ones.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/i18n.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--i18n-dir=/path/to/dir\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Return-Path Header in JSON\nDESCRIPTION: This JSON snippet shows how to set a custom Return-Path header in the SMTP settings of listmonk. It's used to specify a dedicated POP3 mailbox for receiving bounce emails.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/bounces.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\"Return-Path\": \"your-bounce-inbox@site.com\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Restoring PostgreSQL Database for Listmonk Downgrade\nDESCRIPTION: SQL commands to drop and recreate the schema, then import a pre-upgrade database backup during a downgrade procedure.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/upgrade.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npsql -h 127.0.0.1 -p 9432 -U listmonk\ndrop schema public cascade;\ncreate schema public;\n\\q\npsql -h 127.0.0.1 -p 9432 -U listmonk -W listmonk < listmonk-preupgrade-db.sql\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Successful Bounce Record Deletion\nDESCRIPTION: This snippet shows the JSON response structure for a successful deletion of bounce records. It returns a boolean value indicating the success of the operation.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/bounces.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Previewing Hugo Website for listmonk\nDESCRIPTION: Command to run the Hugo server locally to preview the static website. This should be executed inside the 'site' directory.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhugo serve\n```\n\n----------------------------------------\n\nTITLE: Default Template Setting Response in JSON\nDESCRIPTION: Example response after successfully setting a template as the default, showing the JSON structure containing the updated template data with is_default set to true.\nSOURCE: https://github.com/knadh/listmonk/blob/master/docs/docs/content/apis/templates.md#2025-04-20_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"id\": 1,\n        \"created_at\": \"2020-03-14T17:36:41.288578+01:00\",\n        \"updated_at\": \"2020-03-14T17:36:41.288578+01:00\",\n        \"name\": \"Default template\",\n        \"body\": \"{{ template \\\"content\\\" . }}\",\n        \"type\": \"campaign\",\n        \"is_default\": true\n    }\n}\n```"
  }
]