[
  {
    "owner": "appwrite",
    "repo": "sdk-for-android",
    "content": "TITLE: Add Appwrite SDK Dependency with Gradle\nDESCRIPTION: Adds the Appwrite SDK as a dependency to the project's `build.gradle(.kts)` file. Specifies the group ID, artifact ID, and version of the SDK.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/README.md#_snippet_2\n\nLANGUAGE: Groovy\nCODE:\n```\nimplementation(\"io.appwrite:sdk-for-android:7.0.1\")\n```\n\n----------------------------------------\n\nTITLE: Full Example: Initialize and Register User Account with Kotlin\nDESCRIPTION: A full example that initializes the Appwrite client and then registers a user account using the Account service.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/README.md#_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.services.Account\nimport io.appwrite.ID\n\nval client = Client(context)\n  .setEndpoint(\"https://[HOSTNAME_OR_IP]/v1\") // Your API Endpoint\n  .setProject(\"5df5acd0d48c2\") // Your project ID\n  .setSelfSigned(true) // Remove in production\n\nval account = Account(client)\nval user = account.create(\n    ID.unique(),\n    \"email@example.com\",\n    \"password\",\n    \"Walter O'Brien\"\n)\n```\n\n----------------------------------------\n\nTITLE: Appwrite Account Creation Kotlin\nDESCRIPTION: This snippet demonstrates how to create an Appwrite account in an Android application using the Appwrite SDK. It initializes the client, sets the endpoint and project ID, and calls the `create` method on the `Account` service to create the account. The required parameters are userId, email, password and optional parameter is name.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.create(\n    userId = \"<USER_ID>\", \n    email = \"email@example.com\", \n    password = \"\", \n    name = \"<NAME>\", // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Update Password with Recovery - Appwrite Android SDK\nDESCRIPTION: This snippet demonstrates how to update a user's password using the recovery process with the Appwrite Android SDK. It initializes the client, sets the endpoint and project ID, and then calls the `updateRecovery` method on the `Account` service. The callback handles both successful responses and errors, logging them to the console.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/update-recovery.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.updateRecovery(\n    \"<USER_ID>\", // userId \n    \"<SECRET>\", // secret \n    \"\", // password \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Account Session with Email and Password - Java\nDESCRIPTION: This snippet initializes the Appwrite client, sets the endpoint and project ID, and creates an account session using email and password. It utilizes the `createEmailPasswordSession` method from the Account service and handles potential errors through a callback. Requires the `io.appwrite` library.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/create-email-password-session.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.createEmailPasswordSession(\n    \"email@example.com\", // email \n    \"password\", // password \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Download File from Appwrite Storage in Kotlin\nDESCRIPTION: This code snippet demonstrates how to download a file from Appwrite Storage using the Appwrite Android SDK. It initializes the Appwrite client, configures the endpoint and project ID, creates a Storage service, and then calls the `getFileDownload` method with the bucket ID and file ID to retrieve the file.  The downloaded file is returned as a `Result<ByteArray>`.  Replace `<REGION>`, `<YOUR_PROJECT_ID>`, `<BUCKET_ID>`, and `<FILE_ID>` with your actual Appwrite credentials and resource identifiers.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/storage/get-file-download.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Storage\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval storage = Storage(client)\n\nval result = storage.getFileDownload(\n    bucketId = \"<BUCKET_ID>\", \n    fileId = \"<FILE_ID>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Appwrite Account Recovery\nDESCRIPTION: This snippet initializes the Appwrite client, sets the endpoint and project ID, creates an account service, and calls the createRecovery method to initiate the password recovery process. It takes an email address and a recovery URL as parameters and handles the success or failure of the request via a callback.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/create-recovery.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.createRecovery(\n    \"email@example.com\", // email \n    \"https://example.com\", // url \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update Document in Appwrite Database - Android\nDESCRIPTION: This code snippet demonstrates how to update a document in an Appwrite database using the Android SDK. It requires the `io.appwrite` dependency and an initialized Appwrite client. The `updateDocument` method is called with the database ID, collection ID, document ID, data (a map of key-value pairs), and permissions (a list of permission strings). A callback is used to handle the result and log any errors.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/databases/update-document.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nDatabases databases = new Databases(client);\n\ndatabases.updateDocument(\n    \"<DATABASE_ID>\", // databaseId \n    \"<COLLECTION_ID>\", // collectionId \n    \"<DOCUMENT_ID>\", // documentId \n    mapOf( \"a\" to \"b\" ), // data (optional)\n    listOf(\"read(\"any\")\"), // permissions (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Email/Password Session Kotlin\nDESCRIPTION: This snippet creates an email/password session using the Appwrite Account service. It requires an initialized Appwrite client and the `email` and `password` parameters.  The expected output is a session object representing the created session.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-email-password-session.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = account.createEmailPasswordSession(\n    email = \"email@example.com\", \n    password = \"password\", \n)\n```\n\n----------------------------------------\n\nTITLE: Deleting MFA Authenticator with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to delete a Multi-Factor Authentication (MFA) authenticator using the Appwrite Android SDK. It initializes the client, sets the endpoint and project ID, and then uses the `deleteMfaAuthenticator` method of the `Account` service to remove a TOTP authenticator. Ensure you replace `<REGION>` and `<YOUR_PROJECT_ID>` with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/delete-mfa-authenticator.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\nimport io.appwrite.enums.AuthenticatorType\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.deleteMfaAuthenticator(\n    type = AuthenticatorType.TOTP,\n)\n```\n\n----------------------------------------\n\nTITLE: Update File in Appwrite Storage Kotlin\nDESCRIPTION: This snippet demonstrates how to update a file in Appwrite Storage using the Appwrite Android SDK. It requires the io.appwrite library.  The client is initialized with the endpoint and project ID, and then the Storage service is used to update the specified file with new name and permissions.  Ensure to replace placeholders with actual values.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/storage/update-file.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Storage\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval storage = Storage(client)\n\nval result = storage.updateFile(\n    bucketId = \"<BUCKET_ID>\", \n    fileId = \"<FILE_ID>\", \n    name = \"<NAME>\", // (optional)\n    permissions = listOf(\"read(any)\"), // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Appwrite Database Document in Kotlin\nDESCRIPTION: This snippet demonstrates creating a document within an Appwrite database using the Kotlin SDK. It initializes the Appwrite client, configures the endpoint and project ID, and then creates a document with specified data and permissions using the `createDocument` function. Requires the io.appwrite library.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/databases/create-document.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval databases = Databases(client)\n\nval result = databases.createDocument(\n    databaseId = \"<DATABASE_ID>\", \n    collectionId = \"<COLLECTION_ID>\", \n    documentId = \"<DOCUMENT_ID>\", \n    data = mapOf( \"a\" to \"b\" ), \n    permissions = listOf(\"read(\"any\")\"), // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Phone Verification Request with Appwrite in Java\nDESCRIPTION: This snippet uses the Appwrite Android SDK to create a phone verification request for the current account. It utilizes a CoroutineCallback to handle the asynchronous result. The callback either logs the result to the console or prints the stack trace of the error if one occurs. Requires an initialized Appwrite client and Account service.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/create-phone-verification.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\naccount.createPhoneVerification(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    Log.d(\"Appwrite\", result.toString());\n}));\n```\n\n----------------------------------------\n\nTITLE: Listing Documents from Database in Java\nDESCRIPTION: This snippet shows how to list documents from a specific database and collection using the Appwrite Databases service. It requires the database ID and collection ID. It uses a CoroutineCallback to handle the asynchronous response and print the result or error to the log.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/databases/list-documents.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nDatabases databases = new Databases(client);\n\ndatabases.listDocuments(\n    \"<DATABASE_ID>\", // databaseId \n    \"<COLLECTION_ID>\", // collectionId \n    listOf(), // queries (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client and Update Password - Java\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It then creates an Account service instance and calls the updatePassword method to change the user's password. The method takes the new password and an optional old password as parameters. A callback is used to handle the result or any potential errors during the process. The result is logged to the console.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/update-password.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.updatePassword(\n    \"\", // password \n    \"password\", // oldPassword (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Account Name with Appwrite in Kotlin\nDESCRIPTION: This code snippet demonstrates how to update the account name using the Appwrite Android SDK.  It uses the initialized `Account` service to call the `updateName` function.  Replace `<NAME>` with the desired name.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-name.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval account = Account(client)\n\nval result = account.updateName(\n    name = \"<NAME>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Updating a File in Appwrite Storage - Java\nDESCRIPTION: This snippet demonstrates how to update a file in an Appwrite storage bucket using the Java-based Android SDK. It initializes the Appwrite client with the endpoint and project ID. It then utilizes the Storage service's updateFile method, which requires the bucket ID, file ID, and optional parameters like name and permissions. The result is handled via a CoroutineCallback to log the result or any errors.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/storage/update-file.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Storage;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nStorage storage = new Storage(client);\n\nstorage.updateFile(\n    \"<BUCKET_ID>\", // bucketId \n    \"<FILE_ID>\", // fileId \n    \"<NAME>\", // name (optional)\n    listOf(\"read(\\\"any\\\")\"), // permissions (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Create Team Membership with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a team membership using the Appwrite Android SDK. It initializes the Appwrite client with the endpoint and project ID, then utilizes the Teams service to create a new membership. The code demonstrates setting parameters like team ID, roles, email, user ID, phone number, URL, and name for the new membership. The snippet requires the Appwrite Android SDK and the Coroutines library.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/teams/create-membership.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval teams = Teams(client)\n\nval result = teams.createMembership(\n    teamId = \"<TEAM_ID>\", \n    roles = listOf(), \n    email = \"email@example.com\", // (optional)\n    userId = \"<USER_ID>\", // (optional)\n    phone = \"+12065550100\", // (optional)\n    url = \"https://example.com\", // (optional)\n    name = \"<NAME>\", // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Uploading File to Appwrite Storage in Kotlin\nDESCRIPTION: This snippet shows how to upload a file to Appwrite Storage using the `createFile` method. It requires a bucket ID, file ID, and the file itself provided via `InputFile.fromPath()`.  Permissions can also be set. Replace `<BUCKET_ID>` and `<FILE_ID>` with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/storage/create-file.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = storage.createFile(\n    bucketId = \"<BUCKET_ID>\", \n    fileId = \"<FILE_ID>\", \n    file = InputFile.fromPath(\"file.png\"), \n    permissions = listOf(\"read(\\\"any\\\")\"), // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client and Create Anonymous Session (Java)\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID, and then creates an anonymous session using the Account service. It handles potential errors and logs the result or error message.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/create-anonymous-session.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.createAnonymousSession(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    Log.d(\"Appwrite\", result.toString());\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating Appwrite Account in Android (Java)\nDESCRIPTION: This code snippet initializes the Appwrite client, sets the endpoint and project ID, and then creates a new user account using the `account.create` method. It includes parameters for `userId`, `email`, `password`, and an optional `name`. A `CoroutineCallback` is used to handle the asynchronous result and any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/create.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.create(\n    \"<USER_ID>\", // userId \n    \"email@example.com\", // email \n    \"\", // password \n    \"<NAME>\", // name (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update Appwrite Account Email - Kotlin\nDESCRIPTION: This code snippet demonstrates how to update an email address for an Appwrite account using the Android SDK. It initializes the Appwrite client, sets the endpoint and project ID, and then uses the `updateEmail` method to update the email address with the provided email and password.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-email.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.updateEmail(\n    email = \"email@example.com\", \n    password = \"password\", \n)\n```\n\n----------------------------------------\n\nTITLE: Updating MFA Authenticator in Kotlin\nDESCRIPTION: This snippet demonstrates how to update an MFA authenticator using the Appwrite Android SDK. It uses the `updateMfaAuthenticator` method with `AuthenticatorType.TOTP` and a given OTP. Ensure the client is properly initialized before calling this function.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-mfa-authenticator.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval account = Account(client)\n\nval result = account.updateMfaAuthenticator(\n    type = AuthenticatorType.TOTP,\n    otp = \"<OTP>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Listing Files with Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client, sets the endpoint and project ID, and creates a Storage service instance. It then uses the `listFiles` method to list files within a specified bucket. The `bucketId` parameter specifies the bucket to list files from.  The `queries` parameter is an optional list of queries. The `search` parameter is an optional search term.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/storage/list-files.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Storage\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval storage = Storage(client)\n\nval result = storage.listFiles(\n    bucketId = \"<BUCKET_ID>\", \n    queries = listOf(), // (optional)\n    search = \"<SEARCH>\", // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Identity with Appwrite Kotlin\nDESCRIPTION: This snippet deletes an identity using the Appwrite Account service.  Replace `<IDENTITY_ID>` with the ID of the identity you want to delete. The Account object must be initialized with a valid Appwrite Client.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/delete-identity.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = account.deleteIdentity(\n    identityId = \"<IDENTITY_ID>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating JWT in Java\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID and then calls the `createJWT` method from the `Account` service to generate a JSON Web Token. It also includes error handling and logging for the result.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/create-j-w-t.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.createJWT(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    Log.d(\"Appwrite\", result.toString());\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating a User Session in Kotlin\nDESCRIPTION: This snippet creates a new user session using the `Account.createSession()` method. It requires a user ID and a secret. Replace `<USER_ID>` and `<SECRET>` with the appropriate values for user authentication.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-session.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval account = Account(client)\n\nval result = account.createSession(\n    userId = \"<USER_ID>\", \n    secret = \"<SECRET>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Creating a File in Appwrite Storage - Android (Java)\nDESCRIPTION: This code snippet demonstrates how to create a file in Appwrite Storage using the Appwrite Android SDK. It requires the Appwrite SDK as a dependency. The code initializes the Appwrite client with the endpoint and project ID, then uses the Storage service to create a new file from a file path.  It takes bucketId, fileId, file path and permission as parameters.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/storage/create-file.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.models.InputFile;\nimport io.appwrite.services.Storage;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nStorage storage = new Storage(client);\n\nstorage.createFile(\n    \"<BUCKET_ID>\", // bucketId \n    \"<FILE_ID>\", // fileId \n    InputFile.fromPath(\"file.png\"), // file \n    listOf(\"read(\"any\")\"), // permissions (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting File from Appwrite Storage in Java\nDESCRIPTION: This code snippet shows how to delete a file from an Appwrite storage bucket using the Appwrite Android SDK. It requires the `io.appwrite` dependency and initializes the `Client` and `Storage` services. The snippet uses `deleteFile` method with bucket and file IDs as parameters. It handles potential errors using a callback.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/storage/delete-file.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Storage;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nStorage storage = new Storage(client);\n\nstorage.deleteFile(\n    \"<BUCKET_ID>\", // bucketId \n    \"<FILE_ID>\", // fileId \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating MFA Challenge in Kotlin\nDESCRIPTION: This code snippet creates an MFA challenge for the account using the email factor.  It requires an initialized `Account` service instance and the `AuthenticationFactor` enum.  The `factor` parameter specifies the authentication factor to use.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-mfa-challenge.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = account.createMfaChallenge(\n    factor = AuthenticationFactor.EMAIL,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Updating Session (Kotlin)\nDESCRIPTION: This snippet demonstrates initializing the Appwrite client, setting the endpoint and project ID, creating an Account service, and then updating a session. It requires the io.appwrite library as a dependency.  The `sessionId` parameter is required to identify the session to be updated.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-session.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.updateSession(\n    sessionId = \"<SESSION_ID>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Document from Appwrite Database (Kotlin)\nDESCRIPTION: This code snippet demonstrates how to delete a specific document from an Appwrite database using the Appwrite Android SDK.  It requires the io.appwrite dependency. The code initializes an Appwrite client and calls the `deleteDocument` method, passing the database ID, collection ID, and document ID as parameters.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/databases/delete-document.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval databases = Databases(client)\n\nval result = databases.deleteDocument(\n    databaseId = \"<DATABASE_ID>\", \n    collectionId = \"<COLLECTION_ID>\", \n    documentId = \"<DOCUMENT_ID>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Update Account Name with Appwrite Android SDK\nDESCRIPTION: This code snippet updates the account name using the Appwrite Android SDK. It initializes the client with the endpoint and project ID, creates an Account service instance, and calls the updateName method with the new name and a callback to handle the result or any errors.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/update-name.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.updateName(\n    \"<NAME>\", // name \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving Account - Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID, then retrieves account information using the Account service. It sets up the Appwrite client, creates an `Account` service, and calls the `get()` method to fetch account details.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/get.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.get()\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth2 Token Kotlin\nDESCRIPTION: This snippet creates an OAuth2 token using the Appwrite Account service. It specifies the OAuth provider (Amazon in this case), success and failure URLs, and optional scopes. The success and failure URLs are used to redirect the user after authentication.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-o-auth2token.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\naccount.createOAuth2Token(\n    provider = OAuthProvider.AMAZON,\n    success = \"https://example.com\", // (optional)\n    failure = \"https://example.com\", // (optional)\n    scopes = listOf(), // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Update Appwrite Database Document in Kotlin\nDESCRIPTION: This snippet demonstrates updating a document in an Appwrite database using the Appwrite Android SDK. It requires the Appwrite SDK as a dependency and a properly configured Appwrite client. The `updateDocument` method takes databaseId, collectionId, documentId, data (as a map), and optional permissions as parameters.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/databases/update-document.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval databases = Databases(client)\n\nval result = databases.updateDocument(\n    databaseId = \"<DATABASE_ID>\", \n    collectionId = \"<COLLECTION_ID>\", \n    documentId = \"<DOCUMENT_ID>\", \n    data = mapOf( \"a\" to \"b\" ), // (optional)\n    permissions = listOf(\"read(\\\"any\\\")\"), // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Email Verification in Android with Appwrite\nDESCRIPTION: This snippet showcases how to initiate the email verification process for an Appwrite account. It uses the Account service and the createVerification method, providing a success URL. The result or error is handled within the callback.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/create-verification.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nAccount account = new Account(client);\n\naccount.createVerification(\n    \"https://example.com\", // url \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Listing Account Sessions (Java)\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client in an Android application and then uses the Account service to list all user sessions. It sets the endpoint and project ID, then creates an Account object. The listSessions method is called with a CoroutineCallback to handle the asynchronous response, logging the result or printing the error stack trace if an error occurs. You must replace `<REGION>.cloud.appwrite.io` with your Appwrite instance's URL and `<YOUR_PROJECT_ID>` with the Project ID found in the Appwrite console.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/list-sessions.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.listSessions(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    Log.d(\"Appwrite\", result.toString());\n}));\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client and Retrieve File - Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint and project ID, and then retrieves a file from Appwrite Storage using the provided bucket ID and file ID. It requires the Appwrite Android SDK as a dependency and assumes that the bucket and file exist in your Appwrite project. The result of the file retrieval operation is stored in the 'result' variable.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/storage/get-file.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Storage\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval storage = Storage(client)\n\nval result = storage.getFile(\n    bucketId = \"<BUCKET_ID>\", \n    fileId = \"<FILE_ID>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Deleting Push Target in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It then creates an Account service instance and calls the deletePushTarget method to delete a push notification target by its ID. Replace `<REGION>`, `<YOUR_PROJECT_ID>`, and `<TARGET_ID>` with appropriate values.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/delete-push-target.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.deletePushTarget(\n    targetId = \"<TARGET_ID>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Document with Appwrite Databases\nDESCRIPTION: This snippet demonstrates how to delete a document from an Appwrite database using the Appwrite Android SDK. It requires the `io.appwrite` dependency and initializes the Appwrite client with the endpoint and project ID. The `deleteDocument` method is called with the database ID, collection ID, and document ID to delete the specified document. The callback handles the success or failure of the operation.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/databases/delete-document.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nDatabases databases = new Databases(client);\n\ndatabases.deleteDocument(\n    \"<DATABASE_ID>\", // databaseId \n    \"<COLLECTION_ID>\", // collectionId \n    \"<DOCUMENT_ID>\", // documentId \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Create Account Session with Appwrite Android SDK\nDESCRIPTION: This code snippet demonstrates how to initialize the Appwrite client and create a new account session using the Android SDK.  It requires the Appwrite SDK as a dependency. The function takes a user ID and secret as parameters and returns a session object upon successful creation. Errors are printed to the stack trace.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/create-session.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.createSession(\n    \"<USER_ID>\", // userId \n    \"<SECRET>\", // secret \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Account Phone Number Kotlin\nDESCRIPTION: This snippet updates an account's phone number using the `updatePhone` method of the Appwrite Account service. It requires the new phone number and the account's password.  The `CoroutineCallback` handles the asynchronous nature of the call.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-phone.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = account.updatePhone(\n    phone = \"+12065550100\", \n    password = \"password\", \n)\n```\n\n----------------------------------------\n\nTITLE: Get Team Membership with Appwrite Android SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific team membership from Appwrite using the Android SDK. It requires the Appwrite client to be initialized with the correct endpoint and project ID. The `getMembership` method is called with the team ID and membership ID to fetch the desired membership details. The result is then logged to the console. The code uses CoroutineCallback to handle asynchronous response.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/teams/get-membership.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nTeams teams = new Teams(client);\n\nteams.getMembership(\n    \"<TEAM_ID>\", // teamId \n    \"<MEMBERSHIP_ID>\", // membershipId \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. The endpoint should be replaced with your Appwrite instance's URL, and the project ID should be your Appwrite project's ID. This client instance is then used for subsequent API calls.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-o-auth2token.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\nimport io.appwrite.enums.OAuthProvider\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Updating Appwrite Session ID in Android\nDESCRIPTION: This snippet demonstrates updating an Appwrite session using the Android SDK. It requires the io.appwrite library and utilizes the Client and Account classes. The snippet takes the session ID as input and then updates it using the `updateSession` method.  Error handling is included to log any potential errors during the process.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/update-session.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.updateSession(\n    \"<SESSION_ID>\", // sessionId \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update Account Verification with Appwrite Android SDK\nDESCRIPTION: This code snippet demonstrates how to initialize the Appwrite client, instantiate the Account service, and update the verification status of a user account. It requires an Appwrite project ID, API endpoint, user ID, and a secret.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-verification.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.updateVerification(\n    userId = \"<USER_ID>\", \n    secret = \"<SECRET>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Create MFA Authenticator with Appwrite Android SDK\nDESCRIPTION: This snippet demonstrates how to create an MFA authenticator using the Appwrite Android SDK. It initializes the client, configures the endpoint and project ID, and then uses the Account service to create an MFA authenticator of type TOTP. The callback handles the result and logs any errors.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/create-mfa-authenticator.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\nimport io.appwrite.enums.AuthenticatorType;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.createMfaAuthenticator(\n    AuthenticatorType.TOTP, // type \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Push Target with Appwrite Android SDK\nDESCRIPTION: This snippet shows how to initialize the Appwrite client and use it to create a push target using the Account service. It requires the Appwrite Android SDK dependency and a valid endpoint and project ID. The CoroutineCallback handles the result and any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/create-push-target.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.createPushTarget(\n    \"<TARGET_ID>\", // targetId \n    \"<IDENTIFIER>\", // identifier \n    \"<PROVIDER_ID>\", // providerId (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating MFA Challenge with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates updating a Multi-Factor Authentication (MFA) challenge using the Appwrite SDK for Android. It initializes the Appwrite client with the endpoint and project ID, then uses the `updateMfaChallenge` method to complete the MFA process. It requires the Appwrite SDK dependency to be included in the project.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-mfa-challenge.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.updateMfaChallenge(\n    challengeId = \"<CHALLENGE_ID>\", \n    otp = \"<OTP>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Updating Push Target with Appwrite Kotlin\nDESCRIPTION: This snippet demonstrates how to update a push notification target using the Appwrite Android SDK. It utilizes the Account service to update an existing target with a specified target ID and identifier.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-push-target.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval result = account.updatePushTarget(\n    targetId = \"<TARGET_ID>\", \n    identifier = \"<IDENTIFIER>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It requires the `io.appwrite.Client` import. Replace `<REGION>` and `<YOUR_PROJECT_ID>` with your Appwrite endpoint region and project ID, respectively.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-email-password-session.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client and Retrieve Account - Java\nDESCRIPTION: This code snippet demonstrates how to initialize the Appwrite client with your API endpoint and project ID, create an Account service, and retrieve the current account. The get() method retrieves the account details asynchronously using a CoroutineCallback to handle the result or any potential errors. Ensure that the 'context', '<REGION>', and '<YOUR_PROJECT_ID>' placeholders are replaced with appropriate values for your Appwrite project and Android application.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/get.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.get(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    Log.d(\"Appwrite\", result.toString());\n}));\n```\n\n----------------------------------------\n\nTITLE: Updating Email Verification with Appwrite in Android\nDESCRIPTION: This code snippet demonstrates how to update a user's email verification status using the Appwrite Android SDK. It initializes the Appwrite client with the endpoint and project ID, creates an Account service instance, and then calls the `updateVerification` method with the user ID and secret. The result or any error is handled in the callback.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/update-verification.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.updateVerification(\n    \"<USER_ID>\", // userId \n    \"<SECRET>\", // secret \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Team - Kotlin\nDESCRIPTION: This snippet creates a new team using the Appwrite Teams service.  It requires a unique team ID and a name for the team. An optional list of roles can also be provided. Replace `<TEAM_ID>` with the desired team ID and `<NAME>` with the team's name.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/teams/create.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval result = teams.create(\n    teamId = \"<TEAM_ID>\", \n    name = \"<NAME>\", \n    roles = listOf(), // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. The client is configured with the Appwrite server endpoint and the project identifier. The Account service is then instantiated using this configured client.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-push-target.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Executing Appwrite Function in Android\nDESCRIPTION: This code snippet demonstrates how to initialize the Appwrite client with the endpoint and project ID, and then use the Functions service to execute a function. It shows the usage of createExecution method with parameters such as function ID, body, async flag, path, method, headers and scheduledAt. Ensure to replace placeholders with actual values.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/functions/create-execution.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval functions = Functions(client)\n\nval result = functions.createExecution(\n    functionId = \"<FUNCTION_ID>\", \n    body = \"<BODY>\", // (optional)\n    async = false, // (optional)\n    path = \"<PATH>\", // (optional)\n    method = ExecutionMethod.GET, // (optional)\n    headers = mapOf( \"a\" to \"b\" ), // (optional)\n    scheduledAt = \"\", // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving Document in Kotlin\nDESCRIPTION: This snippet demonstrates initializing the Appwrite client with the endpoint and project ID and then uses the Databases service to retrieve a specific document using its database ID, collection ID, and document ID. It requires the io.appwrite library.  The snippet uses CoroutineCallback for handling the asynchronous nature of the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/databases/get-document.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval databases = Databases(client)\n\nval result = databases.getDocument(\n    databaseId = \"<DATABASE_ID>\", \n    collectionId = \"<COLLECTION_ID>\", \n    documentId = \"<DOCUMENT_ID>\", \n    queries = listOf(), // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving MFA Recovery Codes - Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It then creates an Account service instance and calls the getMfaRecoveryCodes() method to retrieve MFA recovery codes.  The `context` variable needs to be an instance of the Android `Context` class.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/get-mfa-recovery-codes.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.getMfaRecoveryCodes()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Updating Account Status Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the project endpoint and ID, and then uses the Account service to update the account status. It requires the Appwrite Android SDK dependency. Replace <REGION> and <YOUR_PROJECT_ID> with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-status.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.updateStatus()\n```\n\n----------------------------------------\n\nTITLE: Download File from Appwrite Storage in Android\nDESCRIPTION: This code snippet downloads a file from an Appwrite Storage bucket using the Appwrite Android SDK. It requires the Appwrite client to be initialized with the endpoint and project ID. The getFileDownload method is called with the bucket and file IDs, and the result is handled within a CoroutineCallback. Dependencies include the Appwrite Android SDK.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/storage/get-file-download.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Storage;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nStorage storage = new Storage(client);\n\nstorage.getFileDownload(\n    \"<BUCKET_ID>\", // bucketId \n    \"<FILE_ID>\", // fileId \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Team with Appwrite Android SDK\nDESCRIPTION: This code snippet demonstrates how to delete a team from your Appwrite project using the Android SDK. It initializes the client, sets the endpoint and project ID, and calls the `delete` method on the `Teams` service. It uses a CoroutineCallback to handle the asynchronous result and any potential errors.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/teams/delete.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nTeams teams = new Teams(client);\n\nteams.delete(\n    \"<TEAM_ID>\", // teamId \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Android\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint and project ID. It sets the base configuration required to interact with the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/create-verification.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n```\n\n----------------------------------------\n\nTITLE: Get File Preview from Appwrite Storage - Kotlin\nDESCRIPTION: This snippet initializes an Appwrite client, configures the storage service, and retrieves a file preview using the `getFilePreview` method. It showcases how to set various optional parameters like width, height, gravity, quality, and other visual attributes to customize the preview.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/storage/get-file-preview.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Storage\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval storage = Storage(client)\n\nval result = storage.getFilePreview(\n    bucketId = \"<BUCKET_ID>\", \n    fileId = \"<FILE_ID>\", \n    width = 0, // (optional)\n    height = 0, // (optional)\n    gravity = ImageGravity.CENTER, // (optional)\n    quality = 0, // (optional)\n    borderWidth = 0, // (optional)\n    borderColor = \"\", // (optional)\n    borderRadius = 0, // (optional)\n    opacity = 0, // (optional)\n    rotation = -360, // (optional)\n    background = \"\", // (optional)\n    output = ImageFormat.JPG, // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth2 Session with Amazon - Android Java\nDESCRIPTION: This code snippet demonstrates how to initialize the Appwrite client and create an OAuth2 session using the Amazon provider. It requires the `io.appwrite` dependency and utilizes `CoroutineCallback` for handling asynchronous responses. The `success` and `failure` parameters specify the redirect URLs after successful or failed authentication.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/create-o-auth2session.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\nimport io.appwrite.enums.OAuthProvider;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.createOAuth2Session(\n    OAuthProvider.AMAZON, // provider \n    \"https://example.com\", // success (optional)\n    \"https://example.com\", // failure (optional)\n    listOf(), // scopes (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Get File View using Appwrite Storage in Kotlin\nDESCRIPTION: This code snippet shows how to retrieve a file view from Appwrite Storage.  It calls the `getFileView` method with the bucket ID and file ID as parameters.  Replace `<BUCKET_ID>` and `<FILE_ID>` with the appropriate values for your Appwrite storage.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/storage/get-file-view.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = storage.getFileView(\n    bucketId = \"<BUCKET_ID>\", \n    fileId = \"<FILE_ID>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Listing Team Memberships with Appwrite Kotlin SDK\nDESCRIPTION: This code snippet uses the `listMemberships` method of the `Teams` service to retrieve a list of memberships for a given team ID. It accepts the team ID as a parameter and allows for optional filtering using queries and a search term. The result contains the team memberships that match the specified criteria.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/teams/list-memberships.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = teams.listMemberships(\n    teamId = \"<TEAM_ID>\", \n    queries = listOf(), // (optional)\n    search = \"<SEARCH>\", // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Session with Appwrite Android SDK\nDESCRIPTION: This code snippet demonstrates how to delete a user session using the Appwrite Android SDK. It initializes the Appwrite client with the endpoint and project ID, then uses the `deleteSession` method of the `Account` service to delete a specific session identified by its ID. The result of the operation is handled within a CoroutineCallback which logs either the success message or any error that occurred. Note that `context` must be a valid Android Context.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/delete-session.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.deleteSession(\n    \"<SESSION_ID>\", // sessionId \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize an Appwrite client in a Kotlin-based Android application. It sets the endpoint and project ID necessary for interacting with the Appwrite service. Replace `<REGION>.cloud.appwrite.io` with your Appwrite endpoint and `<YOUR_PROJECT_ID>` with your project ID.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/storage/create-file.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.models.InputFile\nimport io.appwrite.services.Storage\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval storage = Storage(client)\n```\n\n----------------------------------------\n\nTITLE: Getting File Preview from Appwrite Storage (Android)\nDESCRIPTION: This snippet retrieves a file preview from Appwrite Storage using the Android SDK. It configures various parameters such as width, height, gravity, quality, border, rotation, background, and output format for the preview image. It uses a CoroutineCallback to handle the asynchronous response and logs the result or any errors that occur.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/storage/get-file-preview.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nStorage storage = new Storage(client);\n\nstorage.getFilePreview(\n    \"<BUCKET_ID>\", // bucketId \n    \"<FILE_ID>\", // fileId \n    0, // width (optional)\n    0, // height (optional)\n    ImageGravity.CENTER, // gravity (optional)\n    0, // quality (optional)\n    0, // borderWidth (optional)\n    \"\", // borderColor (optional)\n    0, // borderRadius (optional)\n    0, // opacity (optional)\n    -360, // rotation (optional)\n    \"\", // background (optional)\n    ImageFormat.JPG, // output (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Messaging Subscriber with Appwrite in Kotlin\nDESCRIPTION: This code snippet demonstrates how to delete a messaging subscriber using the Appwrite Android SDK. It requires the Appwrite client to be initialized with the correct endpoint and project ID. The `deleteSubscriber` method is called with the topic ID and subscriber ID.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/messaging/delete-subscriber.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval messaging = Messaging(client)\n\nval result = messaging.deleteSubscriber(\n    topicId = \"<TOPIC_ID>\", \n    subscriberId = \"<SUBSCRIBER_ID>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Listing Team Memberships with Appwrite SDK in Java\nDESCRIPTION: This snippet demonstrates how to list team memberships using the Appwrite Android SDK. It initializes the Appwrite client with the endpoint and project ID. Then, it creates a Teams service and calls the listMemberships method to retrieve team memberships. The result or error is handled in the CoroutineCallback.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/teams/list-memberships.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nTeams teams = new Teams(client);\n\nteams.listMemberships(\n    \"<TEAM_ID>\", // teamId \n    listOf(), // queries (optional)\n    \"<SEARCH>\", // search (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Documents using Appwrite in Kotlin\nDESCRIPTION: This snippet shows how to list documents from a specific database and collection using the Appwrite Android SDK. It requires the `Databases` service to be initialized with a valid `client`. The `databaseId` and `collectionId` parameters specify the target database and collection. The `queries` parameter is an optional list of query filters.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/databases/list-documents.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval result = databases.listDocuments(\n    databaseId = \"<DATABASE_ID>\", \n    collectionId = \"<COLLECTION_ID>\", \n    queries = listOf(), // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Register User Account with Kotlin\nDESCRIPTION: Registers a new user account using the Appwrite Account service. Creates a new user with a unique ID, email, password, and name. Requires the Appwrite client to be initialized.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/README.md#_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Register User\nval account = Account(client)\nval response = account.create(\n    ID.unique(),\n    \"email@example.com\",\n    \"password\",\n    \"Walter O'Brien\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating Anonymous Session (Kotlin)\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint and project ID, then uses the Account service to create an anonymous session. It requires the `io.appwrite` library as a dependency. Replace `<REGION>.cloud.appwrite.io` and `<YOUR_PROJECT_ID>` with your actual Appwrite endpoint and project ID respectively.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-anonymous-session.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.createAnonymousSession()\n```\n\n----------------------------------------\n\nTITLE: Updating Account Phone with Appwrite Android SDK\nDESCRIPTION: This snippet demonstrates how to update an account's phone number using the Appwrite Android SDK.  It requires the Appwrite SDK as a dependency and the context for initializing the client. The parameters include the new phone number and password.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/update-phone.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.updatePhone(\n    \"+12065550100\", // phone \n    \"password\", // password \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Files from Storage Bucket with Appwrite Android SDK\nDESCRIPTION: This snippet initializes an Appwrite client and uses the Storage service to list files in a specified bucket. It sets the Appwrite endpoint and project ID, then calls `listFiles` with the bucket ID, optional queries, and a search term. A CoroutineCallback handles the response, logging any errors or the resulting file list.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/storage/list-files.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Storage;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nStorage storage = new Storage(client);\n\nstorage.listFiles(\n    \"<BUCKET_ID>\", // bucketId \n    listOf(), // queries (optional)\n    \"<SEARCH>\", // search (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieve Team Details with Appwrite Android SDK\nDESCRIPTION: This snippet retrieves team details from Appwrite using the Android SDK. It requires the Appwrite client to be initialized with the correct endpoint and project ID. The `getTeam` method is called with the team ID, and the result is handled using a callback.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/teams/get.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nTeams teams = new Teams(client);\n\nteams.get(\n    \"<TEAM_ID>\", // teamId \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Delete a Team with Appwrite Android SDK\nDESCRIPTION: This code snippet demonstrates how to delete a team in Appwrite using the Android SDK. It requires the Appwrite client to be initialized and the `Teams` service to be created. The `teamId` parameter is the ID of the team to be deleted.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/teams/delete.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval teams = Teams(client)\n\nval result = teams.delete(\n    teamId = \"<TEAM_ID>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Update Team Membership in Android with Appwrite\nDESCRIPTION: This code updates a specific team membership in Appwrite. It initializes the Appwrite client with the endpoint and project ID, then calls the `updateMembership` function from the `Teams` service. It uses a `CoroutineCallback` to handle the asynchronous result and any potential errors. The callback logs the result or prints the stack trace of the error.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/teams/update-membership.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nTeams teams = new Teams(client);\n\nteams.updateMembership(\n    \"<TEAM_ID>\", // teamId \n    \"<MEMBERSHIP_ID>\", // membershipId \n    listOf(), // roles \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Get File View from Appwrite Storage in Android\nDESCRIPTION: This code snippet demonstrates how to retrieve a file view from Appwrite Storage using the Android SDK. It initializes the Appwrite client with the endpoint and project ID, and then uses the Storage service to get a file view. The bucketId and fileId parameters are required. A CoroutineCallback is used to handle the asynchronous response.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/storage/get-file-view.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Storage;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nStorage storage = new Storage(client);\n\nstorage.getFileView(\n    \"<BUCKET_ID>\", // bucketId \n    \"<FILE_ID>\", // fileId \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Listing Sessions - Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It then creates an Account service instance and calls the `listSessions()` method to retrieve a list of user sessions. Requires the Appwrite Android SDK dependency.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/list-sessions.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.listSessions()\n```\n\n----------------------------------------\n\nTITLE: Updating Phone Session Kotlin\nDESCRIPTION: This snippet demonstrates how to update a phone session using the Account service. It requires the user ID and secret. Ensure that the user ID and secret are valid for the phone session to be updated successfully.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-phone-session.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval result = account.updatePhoneSession(\n    userId = \"<USER_ID>\", \n    secret = \"<SECRET>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Listing Function Executions Kotlin\nDESCRIPTION: This snippet demonstrates how to list function executions using the Appwrite Functions service. It calls the `listExecutions` method with the function ID, optional queries, and an optional search string. Replace `<FUNCTION_ID>` with the ID of the function you want to list executions for, and `<SEARCH>` with your search term.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/functions/list-executions.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = functions.listExecutions(\n    functionId = \"<FUNCTION_ID>\", \n    queries = listOf(), // (optional)\n    search = \"<SEARCH>\", // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Delete File from Appwrite Storage with Kotlin\nDESCRIPTION: This code snippet demonstrates how to initialize an Appwrite client and use the Storage service to delete a file. It requires the Appwrite Android SDK. The bucketId and fileId parameters specify the bucket and file to delete, respectively.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/storage/delete-file.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Storage\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval storage = Storage(client)\n\nval result = storage.deleteFile(\n    bucketId = \"<BUCKET_ID>\", \n    fileId = \"<FILE_ID>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Team with Appwrite Android SDK\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client and use the `Teams` service to create a new team. It requires the Appwrite Android SDK and the context to be properly configured, as well as a valid Appwrite endpoint, project ID, team ID, and team name. A `CoroutineCallback` handles the result or any potential errors during team creation.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/teams/create.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nTeams teams = new Teams(client);\n\nteams.create(\n    \"<TEAM_ID>\", // teamId \n    \"<NAME>\", // name \n    listOf(), // roles (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Account Verification Kotlin\nDESCRIPTION: This snippet creates an email verification request using the `createVerification` method of the `Account` service. It requires a URL parameter, which is the URL to which the user will be redirected after verifying their email. Replace `https://example.com` with your desired redirect URL.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-verification.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = account.createVerification(\n    url = \"https://example.com\", \n)\n```\n\n----------------------------------------\n\nTITLE: Listing Currencies using Appwrite Locale in Kotlin\nDESCRIPTION: This snippet uses the initialized Appwrite client and the Locale service to list available currencies. The output is a list of currencies. It depends on the Appwrite client being properly initialized.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/locale/list-currencies.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval locale = Locale(client)\n\nval result = locale.listCurrencies()\n```\n\n----------------------------------------\n\nTITLE: List MFA Factors with Appwrite Android SDK\nDESCRIPTION: This snippet demonstrates how to list MFA factors associated with an account using the Appwrite Android SDK. It initializes the client with the Appwrite endpoint and project ID, creates an `Account` service instance, and then calls `listMfaFactors` using a `CoroutineCallback` to handle the asynchronous result.  The result or any error is then logged to the console.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/list-mfa-factors.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.listMfaFactors(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    Log.d(\"Appwrite\", result.toString());\n}));\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code using Appwrite Avatars Service in Java\nDESCRIPTION: This snippet demonstrates how to use the Appwrite Avatars service to generate a QR code from a given text. It sets optional parameters like size and margin and handles potential errors through a callback.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/avatars/get-q-r.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nAvatars avatars = new Avatars(client);\n\navatars.getQR(\n    \"<TEXT>\", // text \n    1, // size (optional)\n    0, // margin (optional)\n    false, // download (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It's a necessary first step before using any Appwrite services. The endpoint should point to your Appwrite instance, and the project ID should match your project in Appwrite.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-phone-session.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Generating a QR Code with Appwrite Avatars in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the Appwrite Avatars service to generate a QR code. It calls the `getQR` method with the text to encode, optional size, margin, and download parameters. The `text` parameter is required, while `size`, `margin`, and `download` are optional.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/avatars/get-q-r.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = avatars.getQR(\n    text = \"<TEXT>\", \n    size = 1, // (optional)\n    margin = 0, // (optional)\n    download = false, // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting All Sessions in Appwrite with Android SDK\nDESCRIPTION: This code snippet demonstrates how to delete all sessions for a user account in Appwrite using the Android SDK. It initializes the Appwrite client with the endpoint and project ID, then utilizes the `deleteSessions` method of the `Account` service. The result and any potential errors are handled in a callback.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/delete-sessions.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.deleteSessions(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    Log.d(\"Appwrite\", result.toString());\n}));\n```\n\n----------------------------------------\n\nTITLE: Updating Account Password with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to update an account's password using the Appwrite Android SDK.  It requires the `Account` service instance. The `password` parameter needs to be set and the `oldPassword` is optional.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-password.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval result = account.updatePassword(\n    password = \"\", \n    oldPassword = \"password\", // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Function Execution Details - Appwrite Android\nDESCRIPTION: This snippet demonstrates how to retrieve function execution details using the Appwrite Android SDK. It initializes the Appwrite client with the endpoint and project ID, then uses the `getExecution` method of the `Functions` service to fetch the execution details. It requires the Function ID and Execution ID as input.  The callback handles the response, logging the result or printing the stack trace if an error occurs.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/functions/get-execution.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Functions;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nFunctions functions = new Functions(client);\n\nfunctions.getExecution(\n    \"<FUNCTION_ID>\", // functionId \n    \"<EXECUTION_ID>\", // executionId \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving Document in Android\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It then uses the Databases service to retrieve a document using the database ID, collection ID, and document ID. A callback handles either the retrieved document (logging it) or any errors encountered.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/databases/get-document.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Databases;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nDatabases databases = new Databases(client);\n\ndatabases.getDocument(\n    \"<DATABASE_ID>\", // databaseId \n    \"<COLLECTION_ID>\", // collectionId \n    \"<DOCUMENT_ID>\", // documentId \n    listOf(), // queries (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Get Flag Avatar with Appwrite Java\nDESCRIPTION: This snippet uses the Appwrite Android SDK to get a flag avatar. It sets the country code, and optionally sets width, height, and quality parameters. The result is handled by a callback that logs the response or prints the stack trace in case of an error.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/avatars/get-flag.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nAvatars avatars = new Avatars(client);\n\navatars.getFlag(\n    Flag.AFGHANISTAN, // code \n    0, // width (optional)\n    0, // height (optional)\n    0, // quality (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Messaging Subscriber with Appwrite Android SDK\nDESCRIPTION: This code snippet initializes an Appwrite client with the endpoint and project ID, then uses the Messaging service to create a new subscriber. It requires the Appwrite Android SDK and uses a CoroutineCallback to handle the asynchronous result. Replace `<REGION>`, `<YOUR_PROJECT_ID>`, `<TOPIC_ID>`, `<SUBSCRIBER_ID>`, and `<TARGET_ID>` with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/messaging/create-subscriber.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Messaging;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nMessaging messaging = new Messaging(client);\n\nmessaging.createSubscriber(\n    \"<TOPIC_ID>\", // topicId \n    \"<SUBSCRIBER_ID>\", // subscriberId \n    \"<TARGET_ID>\", // targetId \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flag Image using Avatars Service in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the Avatars service to retrieve a flag image by specifying the flag code. Optional parameters for width, height, and quality can be provided.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/avatars/get-flag.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = avatars.getFlag(\n    code = Flag.AFGHANISTAN,\n    width = 0, // (optional)\n    height = 0, // (optional)\n    quality = 0, // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Get Session with Appwrite Android SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific session using the Appwrite Android SDK. It requires the Appwrite SDK to be included as a dependency. The snippet initializes an Appwrite client with the endpoint and project ID, then uses the Account service to retrieve a session based on the provided session ID. The result or any error is handled within a CoroutineCallback.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/get-session.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.getSession(\n    \"<SESSION_ID>\", // sessionId \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Updating Team Name in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite Client with the endpoint and project ID. It then creates a Teams service instance and uses it to update a team's name.  Replace <REGION>, <YOUR_PROJECT_ID>, <TEAM_ID>, and <NAME> with your actual Appwrite project details and desired team name.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/teams/update-name.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval teams = Teams(client)\n\nval result = teams.updateName(\n    teamId = \"<TEAM_ID>\", \n    name = \"<NAME>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client and List Currencies - Java\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID, then uses the Locale service to asynchronously retrieve a list of currencies.  It requires the io.appwrite library and an Android context. The result is printed to the log, or the error stacktrace is printed if the request fails.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/locale/list-currencies.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Locale;\nimport android.util.Log;\nimport android.content.Context;\n\n// Assuming 'context' is an Android Context object\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nLocale locale = new Locale(client);\n\nlocale.listCurrencies(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    Log.d(\"Appwrite\", result.toString());\n}));\n```\n\n----------------------------------------\n\nTITLE: Updating Team Name with Appwrite Android SDK\nDESCRIPTION: This snippet shows how to update a team's name in Appwrite using the Android SDK. It requires the Appwrite client to be initialized with the correct endpoint and project ID. It calls the `updateName` method on the `Teams` service, providing the team ID and the new name. A `CoroutineCallback` is used to handle the asynchronous response, logging either the result or any errors that occur. This snippet uses Coroutines for asynchronous execution.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/teams/update-name.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nTeams teams = new Teams(client);\n\nteams.updateName(\n    \"<TEAM_ID>\", // teamId \n    \"<NAME>\", // name \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Avatar Image with Appwrite in Android\nDESCRIPTION: This snippet demonstrates how to fetch an avatar image from a URL using the Appwrite Avatars service. It takes a URL, width, and height as parameters. The width and height are optional and if set to 0, defaults will be used. A callback is used to handle the result, logging the data to the console or printing the stack trace of the error.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/avatars/get-image.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nAvatars avatars = new Avatars(client);\n\navatars.getImage(\n    \"https://example.com\", // url \n    0, // width (optional)\n    0, // height (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: List Teams in Android with Appwrite\nDESCRIPTION: This snippet initializes the Appwrite client with the provided endpoint and project ID. It then utilizes the `Teams` service to retrieve a list of teams. An optional search parameter can be specified.  The response or any errors are handled within a CoroutineCallback. Dependencies: io.appwrite.Client, io.appwrite.coroutines.CoroutineCallback, io.appwrite.services.Teams\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/teams/list.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nTeams teams = new Teams(client);\n\nteams.list(\n    listOf(), // queries (optional)\n    \"<SEARCH>\", // search (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Error Handling with AppwriteException in Kotlin\nDESCRIPTION: Demonstrates how to catch and handle `AppwriteException` when making API calls. Prints the stack trace of the exception for debugging.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/README.md#_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\ntry {\n    var user = account.create(ID.unique(),\"email@example.com\",\"password\",\"Walter O'Brien\")\n    Log.d(\"Appwrite user\", user.toMap())\n} catch(e : AppwriteException) {\n    e.printStackTrace()\n}\n```\n\n----------------------------------------\n\nTITLE: Update MFA Setting with Appwrite Android SDK\nDESCRIPTION: This snippet demonstrates how to update the MFA setting for an Appwrite account. It initializes the Appwrite client with the endpoint and project ID, then uses the Account service to update the MFA setting.  The `updateMFA` method is called with a boolean value indicating whether to enable or disable MFA. The result is handled in a callback.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/update-m-f-a.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.updateMFA(\n    false, // mfa \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Favicon using Appwrite Avatars Service (Kotlin)\nDESCRIPTION: This snippet demonstrates how to use the Appwrite Avatars service to retrieve a favicon from a given URL. It calls the `getFavicon` method with the URL as a parameter.\n\nDependencies: io.appwrite.services.Avatars\n\nParameters:\n- url: The URL of the website to fetch the favicon from.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/avatars/get-favicon.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval result = avatars.getFavicon(\n    url = \"https://example.com\", \n)\n```\n\n----------------------------------------\n\nTITLE: Update Team Preferences with Appwrite Android SDK\nDESCRIPTION: This snippet initializes an Appwrite client, configures the endpoint and project ID, and then uses the Teams service to update team preferences. It requires the Appwrite Android SDK as a dependency.  It takes a team ID and a map of preferences as input and attempts to update preferences for a specific team.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/teams/update-prefs.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval teams = Teams(client)\n\nval result = teams.updatePrefs(\n    teamId = \"<TEAM_ID>\", \n    prefs = mapOf( \"a\" to \"b\" ), \n)\n```\n\n----------------------------------------\n\nTITLE: Listing MFA Factors with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the Account service to list the multi-factor authentication (MFA) factors associated with an account. It requires an initialized Appwrite client and Account service instance.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/list-mfa-factors.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = account.listMfaFactors()\n```\n\n----------------------------------------\n\nTITLE: Update Magic URL Session with Appwrite Account in Android\nDESCRIPTION: This snippet initializes an Appwrite client and uses it to update a user's magic URL session.  It requires the Appwrite Android SDK. It takes a userId and secret, then uses a CoroutineCallback to handle the result or any errors that occur during the session update.  The endpoint and project ID must be properly configured.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/update-magic-u-r-l-session.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.updateMagicURLSession(\n    \"<USER_ID>\", // userId \n    \"<SECRET>\", // secret \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Add Maven Central Repository with Gradle\nDESCRIPTION: Adds the Maven Central repository to the `build.gradle(.kts)` file. This is necessary to fetch the Appwrite Android SDK.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/README.md#_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\nrepositories {\n    mavenCentral()\n}\n```\n\n----------------------------------------\n\nTITLE: Update Phone Session with Appwrite Android SDK\nDESCRIPTION: This code snippet updates a user's phone session using the Appwrite Android SDK. It requires the Appwrite client to be initialized with the correct endpoint and project ID. The `updatePhoneSession` method of the `Account` service is called with the user ID and secret to update the session. A CoroutineCallback handles the result or any errors that occur during the process.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/update-phone-session.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.updatePhoneSession(\n    \"<USER_ID>\", // userId \n    \"<SECRET>\", // secret \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Update Team Membership Status with Appwrite in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client, sets the endpoint and project ID, and then uses the Teams service to update the status of a membership. It requires the team ID, membership ID, user ID, and a secret key for authentication.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/teams/update-membership-status.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval teams = Teams(client)\n\nval result = teams.updateMembershipStatus(\n    teamId = \"<TEAM_ID>\", \n    membershipId = \"<MEMBERSHIP_ID>\", \n    userId = \"<USER_ID>\", \n    secret = \"<SECRET>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Update Team Membership Appwrite Kotlin\nDESCRIPTION: This snippet updates a team membership using the Appwrite Android SDK. It calls the `updateMembership` function with the team ID, membership ID, and roles.  It relies on the initialized Appwrite client and the `Teams` service.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/teams/update-membership.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = teams.updateMembership(\n    teamId = \"<TEAM_ID>\", \n    membershipId = \"<MEMBERSHIP_ID>\", \n    roles = listOf(), \n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving Account Preferences in Android\nDESCRIPTION: This code snippet demonstrates initializing the Appwrite client with the endpoint and project ID. It then creates an Account service instance and retrieves account preferences using the getPrefs method with a CoroutineCallback. The retrieved preferences, or any encountered error, are logged to the console.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/get-prefs.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.getPrefs(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    Log.d(\"Appwrite\", result.toString());\n}));\n```\n\n----------------------------------------\n\nTITLE: Updating Phone Verification Kotlin\nDESCRIPTION: This snippet updates the phone verification status for a user using the Appwrite Account service. It requires the user ID and secret as parameters.  It assumes that the Appwrite client and Account service have already been initialized.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-phone-verification.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = account.updatePhoneVerification(\n    userId = \"<USER_ID>\", \n    secret = \"<SECRET>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Push Notification Target in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a push notification target using the Appwrite Android SDK.  It requires a target ID, an identifier, and an optional provider ID. The `account.createPushTarget` method is called to register the push target.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-push-target.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval result = account.createPushTarget(\n    targetId = \"<TARGET_ID>\", \n    identifier = \"<IDENTIFIER>\", \n    providerId = \"<PROVIDER_ID>\", // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Account Recovery in Kotlin\nDESCRIPTION: This code snippet demonstrates how to use the Appwrite Account service to initiate the account recovery process. It requires a valid Appwrite client and the user's email address and a URL where the user will be redirected after recovery. The 'email' and 'url' parameters are mandatory for the recovery process.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-recovery.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval account = Account(client)\n\nval result = account.createRecovery(\n    email = \"email@example.com\", \n    url = \"https://example.com\", \n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Appwrite Session Kotlin\nDESCRIPTION: This snippet demonstrates how to delete a specific session using the Appwrite Account service. It requires the `sessionId` of the session to be deleted. Replace `<SESSION_ID>` with the ID of the session you want to delete.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/delete-session.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = account.deleteSession(\n    sessionId = \"<SESSION_ID>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Listing Identities in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID.  It then uses the Account service to list identities, with an empty list of queries, which is optional.  The `listIdentities` function returns a list of identities associated with the account.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/list-identities.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.listIdentities(\n    queries = listOf(), // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Delete Team Membership Kotlin\nDESCRIPTION: This snippet demonstrates how to delete a team membership using the Appwrite Android SDK.  It calls the `deleteMembership` method of the `Teams` service, passing the team ID and membership ID as parameters. Replace `<TEAM_ID>` and `<MEMBERSHIP_ID>` with the appropriate values. The `result` variable will contain the server response.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/teams/delete-membership.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = teams.deleteMembership(\n    teamId = \"<TEAM_ID>\", \n    membershipId = \"<MEMBERSHIP_ID>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Update MFA Challenge with Appwrite in Java\nDESCRIPTION: This code snippet demonstrates how to update an MFA challenge using the Appwrite Android SDK. It initializes an Appwrite client with the endpoint and project ID, then uses the `updateMfaChallenge` method of the `Account` service to update a specified challenge with a given OTP. The result or any error is logged.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/update-mfa-challenge.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.updateMfaChallenge(\n    \"<CHALLENGE_ID>\", // challengeId \n    \"<OTP>\", // otp \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating Phone Token in Kotlin\nDESCRIPTION: This snippet demonstrates initializing the Appwrite client with the endpoint and project ID. It then uses the Account service to create a phone token for a user. The `createPhoneToken` method requires a user ID and a phone number as parameters.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-phone-token.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.createPhoneToken(\n    userId = \"<USER_ID>\", \n    phone = \"+12065550100\", \n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Avatars Service in Java\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID, then creates an Avatars service instance using the client. The client requires a Context object as a parameter.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/avatars/get-initials.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAvatars avatars = new Avatars(client);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Updating MFA in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID, then updates the MFA status for an account. It requires the Appwrite Android SDK dependency and the context to be available. The `updateMFA` function is called with a boolean parameter, where `false` disables MFA and `true` enables it.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-m-f-a.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.updateMFA(\n    mfa = false, \n)\n```\n\n----------------------------------------\n\nTITLE: Listing Locale Codes with Appwrite in Android\nDESCRIPTION: This code snippet shows how to use the Appwrite Android SDK to retrieve a list of locale codes. It initializes the Appwrite client with the endpoint and project ID, creates a Locale service instance, and calls the listCodes method with a CoroutineCallback to handle the asynchronous response. The callback prints the result or error to the Android log.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/locale/list-codes.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Locale;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nLocale locale = new Locale(client);\n\nlocale.listCodes(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    Log.d(\"Appwrite\", result.toString());\n}));\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Account Service in Java\nDESCRIPTION: This snippet initializes the Appwrite client with the specified endpoint and project ID.  It then creates an instance of the Account service using the initialized client.  The endpoint and project ID should be replaced with the appropriate values for your Appwrite project.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/create-phone-verification.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It requires the `io.appwrite.Client` import and a `context` object representing the Android application context. The endpoint should be replaced with your Appwrite instance URL and the project ID with your Appwrite project ID.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/locale/list-languages.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Locale\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval locale = Locale(client)\n\nval result = locale.listLanguages()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Appwrite Session by ID Kotlin\nDESCRIPTION: This snippet retrieves a specific user session by its ID using the Appwrite Account service.  It requires a valid `sessionId`. Replace `<SESSION_ID>` with the actual session ID to retrieve. The `account` object must be initialized with a valid `client`.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/get-session.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = account.getSession(\n    sessionId = \"<SESSION_ID>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Update Magic URL Session with Appwrite Android SDK\nDESCRIPTION: This code snippet demonstrates how to update a magic URL session using the Appwrite Android SDK. It requires the Appwrite client to be initialized with the correct endpoint and project ID. It then calls the `updateMagicURLSession` method on the `Account` service, passing in the `userId` and `secret` as parameters.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-magic-u-r-l-session.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.updateMagicURLSession(\n    userId = \"<USER_ID>\", \n    secret = \"<SECRET>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Get Team Preferences with Appwrite in Android\nDESCRIPTION: This snippet retrieves team preferences using the Appwrite Teams service. It requires the team ID as input. It makes an asynchronous call using CoroutineCallback to retrieve the preferences. The result or any potential error is handled in the callback.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/teams/get-prefs.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nTeams teams = new Teams(client);\n\nteams.getPrefs(\n    \"<TEAM_ID>\", // teamId \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Messaging Subscriber in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a messaging subscriber using the Appwrite Messaging service. It requires a topic ID, a subscriber ID, and a target ID. The result of the createSubscriber method is stored in the 'result' variable.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/messaging/create-subscriber.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = messaging.createSubscriber(\n    topicId = \"<TOPIC_ID>\", \n    subscriberId = \"<SUBSCRIBER_ID>\", \n    targetId = \"<TARGET_ID>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth2 Session with Appwrite in Kotlin\nDESCRIPTION: Creates an OAuth2 session with Appwrite using the specified provider (Amazon), success URL, failure URL, and an empty list of scopes. The OAuthProvider enum is used to define the provider.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-o-auth2session.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\naccount.createOAuth2Session(\n    provider = OAuthProvider.AMAZON,\n    success = \"https://example.com\", // (optional)\n    failure = \"https://example.com\", // (optional)\n    scopes = listOf(), // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Listing Account Logs in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It then creates an Account service instance and uses it to list account logs. The queries parameter in listLogs is optional.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/list-logs.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.listLogs(\n    queries = listOf(), // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Initialize and Use Appwrite Locale in Android (Java)\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID, then creates a Locale service instance. It calls the `listCountriesEU` method using a CoroutineCallback to handle the result or any errors that occur during the API call.  The result is logged to the Android Logcat.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/locale/list-countries-e-u.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Locale;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nLocale locale = new Locale(client);\n\nlocale.listCountriesEU(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    Log.d(\"Appwrite\", result.toString());\n}));\n```\n\n----------------------------------------\n\nTITLE: Register Callback Activity in AndroidManifest.xml\nDESCRIPTION: Registers the `CallbackActivity` in `AndroidManifest.xml` to handle OAuth callbacks.  Replace `[PROJECT_ID]` with your Appwrite project ID. This activity uses an intent filter to listen for the custom scheme 'appwrite-callback-[PROJECT_ID]'.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/README.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<manifest>\n    <application>\n        <activity android:name=\"io.appwrite.views.CallbackActivity\" >\n            <intent-filter android:label=\"android_web_auth\">\n                <action android:name=\"android.intent.action.VIEW\" />\n                <category android:name=\"android.intent.category.DEFAULT\" />\n                <category android:name=\"android.intent.category.BROWSABLE\" />\n                <data android:scheme=\"appwrite-callback-[PROJECT_ID]\" />\n            </intent-filter>\n        </activity>\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Team Preferences using Appwrite Android SDK\nDESCRIPTION: This snippet demonstrates how to retrieve team preferences using the `getPrefs` method of the Teams service. It requires a valid `teamId` as input. The result is stored in the `result` variable.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/teams/get-prefs.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = teams.getPrefs(\n    teamId = \"<TEAM_ID>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Using Avatars Service in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client for Android, configures the endpoint and project ID, and then uses the Avatars service to generate initials based on a given name. The `getInitials` method is called with optional parameters for width, height, and background.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/avatars/get-initials.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Avatars\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval avatars = Avatars(client)\n\nval result = avatars.getInitials(\n    name = \"<NAME>\", // (optional)\n    width = 0, // (optional)\n    height = 0, // (optional)\n    background = \"\", // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving Team Membership in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID.  Then, it creates an instance of the Teams service and uses it to get a team membership by team ID and membership ID.  Replace `<REGION>.cloud.appwrite.io/v1`, `<YOUR_PROJECT_ID>`, `<TEAM_ID>`, and `<MEMBERSHIP_ID>` with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/teams/get-membership.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval teams = Teams(client)\n\nval result = teams.getMembership(\n    teamId = \"<TEAM_ID>\", \n    membershipId = \"<MEMBERSHIP_ID>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Creating Magic URL Token Kotlin\nDESCRIPTION: This snippet creates a magic URL token for a user account using the Appwrite Account service. It requires a user ID, an email address, and a URL to redirect to after authentication. The `phrase` parameter is optional and can be used to include a secret phrase in the token.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-magic-u-r-l-token.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = account.createMagicURLToken(\n    userId = \"<USER_ID>\", \n    email = \"email@example.com\", \n    url = \"https://example.com\", // (optional)\n    phrase = false, // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Updating Team Preferences in Android\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint and project ID. It then uses the Teams service to update the preferences for a given team. The updatePrefs method takes the team ID and a map of preferences as input and uses a CoroutineCallback to handle the asynchronous response.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/teams/update-prefs.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nTeams teams = new Teams(client);\n\nteams.updatePrefs(\n    \"<TEAM_ID>\", // teamId \n    mapOf( \"a\" to \"b\" ), // prefs \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Get Image Avatar with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the `getImage` method from the `Avatars` service to retrieve an image avatar from a URL. You can specify the width and height of the image, or leave them as 0 for the original size.  The `url` parameter is mandatory.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/avatars/get-image.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = avatars.getImage(\n    url = \"https://example.com\", \n    width = 0, // (optional)\n    height = 0, // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Create Email Token Appwrite Kotlin\nDESCRIPTION: This snippet demonstrates how to create an email token using the Appwrite Account service.  It requires a user ID and an email address. The `phrase` parameter is optional and defaults to false if not provided.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-email-token.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval result = account.createEmailToken(\n    userId = \"<USER_ID>\", \n    email = \"email@example.com\", \n    phrase = false, // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Getting Team - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates initializing an Appwrite client for Android, setting the API endpoint and project ID, creating a Teams service instance, and then retrieving a team by its ID. Replace `<REGION>.cloud.appwrite.io` with your Appwrite instance's region, `<YOUR_PROJECT_ID>` with your Appwrite project ID, and `<TEAM_ID>` with the ID of the team you want to retrieve.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/teams/get.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval teams = Teams(client)\n\nval result = teams.get(\n    teamId = \"<TEAM_ID>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Using Appwrite Locale Service in Android with Java\nDESCRIPTION: This snippet shows how to use the Appwrite Locale service to fetch a list of countries and their phone codes. It initializes the Appwrite client with the endpoint and project ID, creates a Locale service instance, and then calls the listCountriesPhones method. The CoroutineCallback handles the asynchronous response, logging the results or errors.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/locale/list-countries-phones.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Locale;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nLocale locale = new Locale(client);\n\nlocale.listCountriesPhones(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    Log.d(\"Appwrite\", result.toString());\n}));\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes an Appwrite Client with the provided context, sets the API endpoint and project ID, and creates an Account service instance. The endpoint should be replaced with your Appwrite instance's URL, and the project ID with your Appwrite project's ID. The Account service provides methods for user authentication and management.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-magic-u-r-l-token.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Function Execution Details using Appwrite in Kotlin\nDESCRIPTION: This snippet retrieves the execution details of a specific function using the `getExecution` method of the `Functions` service. It requires the `functionId` and `executionId` as parameters to identify the specific execution to retrieve.  The returned `result` variable contains details about the execution, and any errors will be handled by the exception mechanism.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/functions/get-execution.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = functions.getExecution(\n    functionId = \"<FUNCTION_ID>\", \n    executionId = \"<EXECUTION_ID>\", \n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Listing Teams in Kotlin\nDESCRIPTION: This code snippet demonstrates how to initialize an Appwrite client for Android, set the endpoint and project ID, create an instance of the Teams service, and then list the teams. The endpoint and project ID must be configured for the Appwrite project.  The `queries` and `search` parameters are optional.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/teams/list.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval teams = Teams(client)\n\nval result = teams.list(\n    queries = listOf(), // (optional)\n    search = \"<SEARCH>\", // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Listing EU Countries using Locale Service Kotlin\nDESCRIPTION: This snippet demonstrates how to use the Locale service to list EU countries. It assumes that the Appwrite client has been initialized. It creates a Locale service instance using the initialized client and then calls the `listCountriesEU()` method to get the list of EU countries. The result is stored in the `result` variable.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/locale/list-countries-e-u.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval locale = Locale(client)\n\nval result = locale.listCountriesEU()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating JWT in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint and project ID.  It then creates an instance of the Account service and generates a JWT using the createJWT() method. The process utilizes coroutines for asynchronous execution.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-j-w-t.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.createJWT()\n```\n\n----------------------------------------\n\nTITLE: Listing Languages with Appwrite Android SDK\nDESCRIPTION: This code snippet demonstrates how to initialize the Appwrite client for Android, configure the endpoint and project ID, instantiate the Locale service, and call the listLanguages method to retrieve a list of supported languages. It uses a CoroutineCallback to handle the asynchronous result and print the output to the Android Log, or print the error stacktrace in case of an exception.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/locale/list-languages.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Locale;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nLocale locale = new Locale(client);\n\nlocale.listLanguages(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    Log.d(\"Appwrite\", result.toString());\n}));\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID.  It sets up the client to communicate with the Appwrite server and prepares it for making API calls. Requires `context` to be available.  The endpoint and project ID should be replaced with your actual Appwrite instance details.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/teams/delete-membership.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval teams = Teams(client)\n```\n\n----------------------------------------\n\nTITLE: Generating User Initials with Appwrite Avatars in Java\nDESCRIPTION: This snippet demonstrates how to use the Appwrite Avatars service to generate user initials. It calls the getInitials method with the user's name and optional parameters for width, height, background, and provides a callback to handle the result or error.  The Log.d statement logs the result.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/avatars/get-initials.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\navatars.getInitials(\n    \"<NAME>\", // name (optional)\n    0, // width (optional)\n    0, // height (optional)\n    \"\", // background (optional)\n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID.  It is crucial to replace `<REGION>.cloud.appwrite.io` and `<YOUR_PROJECT_ID>` with the appropriate values for your Appwrite instance. The `Client` object is used to configure the connection to the Appwrite server.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-mfa-recovery-codes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.createMfaRecoveryCodes()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. The client is then used to create a Functions service instance.  Replace `<REGION>` with your Appwrite region and `<YOUR_PROJECT_ID>` with your Appwrite project ID.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/functions/list-executions.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval functions = Functions(client)\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client in Android\nDESCRIPTION: This snippet initializes the Appwrite client, sets the API endpoint, and configures the project ID. The context is needed to initialize the client in an Android environment. The endpoint should be changed to your Appwrite instance's endpoint, and the project ID should be changed to your Appwrite project ID.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/teams/get-prefs.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID.  It requires the Appwrite Android SDK as a dependency. The endpoint should point to your Appwrite instance and the project ID should match your project's ID.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-recovery.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n```\n\n----------------------------------------\n\nTITLE: Get Credit Card Image Appwrite Kotlin\nDESCRIPTION: This snippet demonstrates how to retrieve a credit card image using the Appwrite Avatars service. It initializes an Avatars service instance and calls the `getCreditCard` method, specifying the credit card type (American Express) and optional parameters for width, height, and quality. The method returns an image of the specified credit card.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/avatars/get-credit-card.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval result = avatars.getCreditCard(\n    code = CreditCard.AMERICAN_EXPRESS,\n    width = 0, // (optional)\n    height = 0, // (optional)\n    quality = 0, // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint URL and project ID. It sets up the client to interact with the Appwrite API.  Replace `<REGION>.cloud.appwrite.io` and `<YOUR_PROJECT_ID>` with your actual Appwrite endpoint and project ID.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-mfa-recovery-codes.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.updateMfaRecoveryCodes()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Updating Preferences (Kotlin)\nDESCRIPTION: This snippet initializes an Appwrite client, sets the API endpoint and project ID, and then updates the account preferences using the Account service.  It requires the `io.appwrite` library. The `context` parameter is a reference to the Android application context.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-prefs.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.updatePrefs(\n    prefs = mapOf( \"a\" to \"b\" ), \n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID.  The endpoint should point to your Appwrite instance and the project ID should be the ID of your Appwrite project.  The client is then used to create a Messaging service instance.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/messaging/create-subscriber.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Messaging\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval messaging = Messaging(client)\n```\n\n----------------------------------------\n\nTITLE: Appwrite Account Recovery Initialization Kotlin\nDESCRIPTION: This code snippet initializes an Appwrite client, configures the endpoint and project ID, and creates an Account service instance for interacting with the Appwrite Account API.\n\nDependencies: io.appwrite.Client, io.appwrite.services.Account.\n\nParameters: context (Android Context), endpoint (Appwrite API endpoint), project ID (Your project ID).\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-recovery.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.updateRecovery(\n    userId = \"<USER_ID>\", \n    secret = \"<SECRET>\", \n    password = \"\", \n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Browser Avatar using Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to fetch a browser avatar using the Appwrite Avatars service.  It calls the `getBrowser` method, specifying the browser type (`Browser.AVANT_BROWSER`) and optional width, height, and quality parameters. The result is stored in the `result` variable, which can then be processed or displayed.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/avatars/get-browser.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval result = avatars.getBrowser(\n    code = Browser.AVANT_BROWSER,\n    width = 0, // (optional)\n    height = 0, // (optional)\n    quality = 0, // (optional)\n)\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It sets up the client to communicate with the Appwrite server.  It requires the Appwrite Android SDK to be imported and a valid context.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/teams/update-membership.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval teams = Teams(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It sets up the client for interacting with the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/avatars/get-flag.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Avatars\nimport io.appwrite.enums.Flag\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval avatars = Avatars(client)\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It sets up the client context, endpoint, and project ID to establish a connection with the Appwrite server.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/avatars/get-credit-card.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Avatars\nimport io.appwrite.enums.CreditCard\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval avatars = Avatars(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the specified endpoint and project ID. The endpoint should be set to your Appwrite instance's URL, and the project ID should match your Appwrite project. The client instance is then used to create a Teams service object.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/teams/list-memberships.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval teams = Teams(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It's necessary to set the endpoint and project ID to connect to your Appwrite instance. Replace `<REGION>` with your region and `<YOUR_PROJECT_ID>` with your project ID.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/delete-identity.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This code snippet shows how to initialize the Appwrite client with your endpoint and project ID. The `Client` object is created and configured with the necessary credentials to interact with the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-name.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n```\n\n----------------------------------------\n\nTITLE: Update Push Target with Appwrite Android SDK\nDESCRIPTION: This code snippet demonstrates how to update a push notification target using the Appwrite Android SDK. It initializes the Appwrite client, sets the endpoint and project ID, and then calls the `updatePushTarget` method to update the target with the provided target ID and identifier.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/update-push-target.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.updatePushTarget(\n    \"<TARGET_ID>\", // targetId \n    \"<IDENTIFIER>\", // identifier \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client, setting the endpoint and project ID. It requires the `io.appwrite.Client` import and uses a `Context` object for initialization. The endpoint should point to your Appwrite instance and the project ID should match your Appwrite project.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/databases/list-documents.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Databases\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval databases = Databases(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint and project ID. The client is then used to create an instance of the Locale service. Replace `<REGION>` and `<YOUR_PROJECT_ID>` with your actual Appwrite project details. The `context` variable refers to an Android `Context` object.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/locale/get.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Locale\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval locale = Locale(client)\n\nval result = locale.get()\n```\n\n----------------------------------------\n\nTITLE: Creating Phone Verification Request in Kotlin\nDESCRIPTION: This snippet showcases the creation of a phone verification request using the Appwrite Account service. It depends on the initialized Appwrite client. The `createPhoneVerification()` method initiates the phone verification process.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-phone-verification.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval account = Account(client)\n\nval result = account.createPhoneVerification()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint URL and project ID. These values are crucial for connecting to your Appwrite project.  It also instantiates the Account service for performing account-related operations.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-phone.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Getting Locale with Appwrite in Java\nDESCRIPTION: This snippet demonstrates how to use the Appwrite Locale service to asynchronously retrieve the current locale. It uses a `CoroutineCallback` to handle the result or any potential errors. The result (locale information) is then logged to the console.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/locale/get.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nLocale locale = new Locale(client);\n\nlocale.get(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    Log.d(\"Appwrite\", result.toString());\n}));\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It requires the application context and the Appwrite SDK dependency. The client object is then used to instantiate the Account service.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-phone-verification.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite SDK with Kotlin\nDESCRIPTION: Initializes the Appwrite SDK with the Appwrite server API endpoint and project ID. Sets the endpoint, project ID, and self-signed certificate option. Replace `[HOSTNAME_OR_IP]` and `5df5acd0d48c2` with your endpoint and project ID respectively.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/README.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.services.Account\n\nval client = Client(context)\n  .setEndpoint(\"https://[HOSTNAME_OR_IP]/v1\") // Your API Endpoint\n  .setProject(\"5df5acd0d48c2\") // Your project ID\n  .setSelfSigned(true) // Remove in production\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client with the endpoint and project ID. It requires the `io.appwrite.Client` dependency. Replace `<REGION>.cloud.appwrite.io` and `<YOUR_PROJECT_ID>` with your Appwrite instance details.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-phone-verification.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n```\n\n----------------------------------------\n\nTITLE: Deleting Team Membership with Appwrite Android SDK\nDESCRIPTION: This snippet demonstrates how to delete a team membership in Appwrite using the Android SDK. It initializes the Appwrite client, configures the endpoint and project ID, creates a Teams service instance, and then calls the `deleteMembership` method to remove the specified membership from a given team.  The result is handled in a CoroutineCallback.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/teams/delete-membership.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nTeams teams = new Teams(client);\n\nteams.deleteMembership(\n    \"<TEAM_ID>\", // teamId \n    \"<MEMBERSHIP_ID>\", // membershipId \n    new CoroutineCallback<>((result, error) -> {\n        if (error != null) {\n            error.printStackTrace();\n            return;\n        }\n\n        Log.d(\"Appwrite\", result.toString());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the provided endpoint and project ID. It sets up the client to communicate with the Appwrite server and prepares it for further API calls.  The `context` variable is expected to be an Android Context instance.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/locale/list-continents.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Locale\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval locale = Locale(client)\n\nval result = locale.listContinents()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: Initializes the Appwrite client with the endpoint and project ID. This client instance is then used to create an Account service instance, which is necessary for interacting with Appwrite's account-related functions.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-o-auth2session.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\nimport io.appwrite.enums.OAuthProvider\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Listing Continents with Appwrite Android SDK\nDESCRIPTION: This snippet uses the Appwrite Android SDK to retrieve a list of continents.  It initializes the `Locale` service with the configured `client`. The `listContinents` method is called with a CoroutineCallback to handle the asynchronous response.  The result is printed to the log or errors are handled if present.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/locale/list-continents.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nLocale locale = new Locale(client);\n\nlocale.listContinents(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    Log.d(\"Appwrite\", result.toString());\n}));\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the provided endpoint and project ID. It also creates an Account service instance using the configured client. Replace <REGION>.cloud.appwrite.io and <YOUR_PROJECT_ID> with your actual endpoint and project ID respectively. Requires the io.appwrite dependency.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/delete-sessions.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.deleteSessions()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite Client with the endpoint URL and project ID.  The endpoint URL specifies the Appwrite server, and the project ID identifies your Appwrite project. Replace `<REGION>.cloud.appwrite.io/v1` and `<YOUR_PROJECT_ID>` with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-session.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It uses the `Client` class from the `io.appwrite` package and sets the endpoint and project ID. Replace `<REGION>.cloud.appwrite.io` with your Appwrite region and `<YOUR_PROJECT_ID>` with your project ID. This client instance is used for subsequent Appwrite API calls.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-verification.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint and project ID. It requires the `io.appwrite.Client` dependency. The endpoint should be replaced with your Appwrite instance's endpoint, and the project ID with your Appwrite project's ID.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-mfa-challenge.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\nimport io.appwrite.enums.AuthenticationFactor\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the specified endpoint and project ID. It requires the `io.appwrite.Client` dependency and an Android `context`.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/graphql/mutation.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Graphql\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval graphql = Graphql(client)\n\nval result = graphql.mutation(\n    query = mapOf( \"a\" to \"b\" ), \n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Teams Service in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID, and then creates an instance of the Teams service. This setup is required before making any API calls to the Appwrite server.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/teams/get-prefs.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval teams = Teams(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Java\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. The endpoint should be set to your Appwrite instance URL, and the project ID should match the ID of your Appwrite project. This client instance is then used for subsequent API calls.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/locale/get.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Locale;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Android\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. The endpoint should point to your Appwrite instance, and the project ID should be the ID of your Appwrite project. The context variable is a required parameter for the client initialization.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/avatars/get-image.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Android\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It's a prerequisite for interacting with the Appwrite API. Replace `<REGION>` and `<YOUR_PROJECT_ID>` with your actual Appwrite endpoint and project ID, respectively. The `context` variable refers to the Android application context.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/locale/list-continents.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and GraphQL Service in Kotlin\nDESCRIPTION: This code snippet demonstrates how to initialize the Appwrite client and create a GraphQL service instance. It requires setting the Appwrite endpoint and project ID. The context variable needs to be an Android Context object.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/graphql/query.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Graphql\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval graphql = Graphql(client)\n\nval result = graphql.query(\n    query = mapOf( \"a\" to \"b\" ), \n)\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. Replace `<REGION>.cloud.appwrite.io` with your Appwrite region and `<YOUR_PROJECT_ID>` with your project ID. The client object is then used to create an Avatars service instance.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/avatars/get-image.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Avatars\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval avatars = Avatars(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client with the endpoint and project ID.  It sets up the client to interact with the Appwrite API. Replace `<REGION>` with the Appwrite region and `<YOUR_PROJECT_ID>` with the actual project ID.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/get-prefs.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.getPrefs()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client - Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID.  It sets up the client to interact with the Appwrite API.  Replace `<REGION>.cloud.appwrite.io` with your Appwrite region and `<YOUR_PROJECT_ID>` with your project's ID.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/teams/create.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Teams\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval teams = Teams(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Java\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It's a prerequisite for using any of the Appwrite services.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/avatars/get-q-r.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Functions Service in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It then creates an instance of the `Functions` service using the initialized client. The endpoint should point to your Appwrite instance, and the project ID must match your project's identifier.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/functions/get-execution.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Functions\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval functions = Functions(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It requires an Android context.  The endpoint should point to your Appwrite instance, and the project ID should match your Appwrite project.  This creates a client instance used for subsequent API calls.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/get-session.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. The client is then used to create an Account service instance for performing account-related operations.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/list-mfa-factors.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID.  It requires the `io.appwrite.Client` import. Replace `<REGION>.cloud.appwrite.io` with your Appwrite endpoint and `<YOUR_PROJECT_ID>` with your project ID.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-password.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: List Locale Codes with Appwrite in Kotlin\nDESCRIPTION: This snippet demonstrates how to retrieve a list of locale codes using the Appwrite Android SDK. It calls the `listCodes()` method on the `Locale` service instance. This requires a previously initialized Appwrite client and Locale service.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/locale/list-codes.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval result = locale.listCodes()\n```\n\n----------------------------------------\n\nTITLE: Add SNAPSHOT Maven Repository with Gradle\nDESCRIPTION: Adds the SNAPSHOT Maven repository to the `build.gradle(.kts)` file. This is necessary to fetch the SNAPSHOT releases of the Appwrite Android SDK.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/README.md#_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\nrepositories {\n    maven {\n        url \"https://s01.oss.sonatype.org/content/repositories/snapshots/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. Replace `<REGION>.cloud.appwrite.io` with your Appwrite region and `<YOUR_PROJECT_ID>` with your project ID. This client instance is then used to create a Locale service instance.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/locale/list-codes.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Locale\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval locale = Locale(client)\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client and Storage Service in Kotlin\nDESCRIPTION: This code initializes the Appwrite client with the endpoint and project ID.  It then creates an instance of the Storage service using the initialized client. The endpoint and project ID placeholders should be replaced with your Appwrite project's actual values. This snippet demonstrates setting up the necessary Appwrite components for subsequent storage operations.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/storage/get-file-view.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Storage\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval storage = Storage(client)\n```\n\n----------------------------------------\n\nTITLE: Add Appwrite SDK Dependency with Maven\nDESCRIPTION: Adds the Appwrite SDK as a dependency to the project's `pom.xml` file. Specifies the group ID, artifact ID, and version of the SDK.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/README.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>io.appwrite</groupId>\n        <artifactId>sdk-for-android</artifactId>\n        <version>7.0.1</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Import statements for Appwrite SDK in Android\nDESCRIPTION: These are the import statements required for the code to work correctly. They import the necessary classes from the Appwrite SDK for Android, including Client, CoroutineCallback, and Teams.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/teams/get-prefs.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Teams;\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. The endpoint should point to your Appwrite instance, and the project ID should be your Appwrite project's ID.  This client instance is then used to instantiate the Account service.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-email-token.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Java\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. The endpoint should be the URL of your Appwrite instance, and the project ID is the unique identifier of your Appwrite project. The `context` is required for Android client initialization.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/databases/list-documents.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID.  It creates a Client object, sets the endpoint to the Appwrite server, and sets the project ID. The `context` parameter is required for initializing the client.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/update-mfa-authenticator.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\nimport io.appwrite.enums.AuthenticatorType\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Avatars Service in Kotlin\nDESCRIPTION: This code snippet initializes the Appwrite client and the Avatars service.  It sets the endpoint and project ID for the Appwrite client and creates an instance of the Avatars service, allowing interaction with Appwrite's avatar generation functionality. The `context` is required for initializing the Client.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/avatars/get-q-r.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Avatars\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval avatars = Avatars(client)\n```\n\n----------------------------------------\n\nTITLE: Retrieving List of Countries with Appwrite - Android\nDESCRIPTION: This code snippet demonstrates how to initialize an Appwrite client, set the endpoint and project ID, create a Locale service, and retrieve a list of countries using a CoroutineCallback. The result or any potential error is then logged.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/locale/list-countries.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Locale;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nLocale locale = new Locale(client);\n\nlocale.listCountries(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    Log.d(\"Appwrite\", result.toString());\n}));\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Locale Service - Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the specified endpoint and project ID. It then creates an instance of the Locale service using the initialized client. The Locale service is used to interact with the Appwrite Locale API.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/locale/list-countries-phones.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Locale\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval locale = Locale(client)\n\nval result = locale.listCountriesPhones()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client for Android with the specified endpoint and project ID. The client is configured to connect to the Appwrite API. It sets the endpoint URL and the project ID, which are essential for authenticating and authorizing requests to the Appwrite backend.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/locale/list-countries.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Locale\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval locale = Locale(client)\n\nval result = locale.listCountries()\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It requires the io.appwrite dependency. Replace <REGION> and <YOUR_PROJECT_ID> with appropriate values.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/locale/list-currencies.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Locale\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Updating Account Status (Java)\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. It then uses the Account service's `updateStatus` method to update the account status. A `CoroutineCallback` handles the asynchronous response, printing the result or any errors that occur.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/account/update-status.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.appwrite.Client;\nimport io.appwrite.coroutines.CoroutineCallback;\nimport io.appwrite.services.Account;\n\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n\nAccount account = new Account(client);\n\naccount.updateStatus(new CoroutineCallback<>((result, error) -> {\n    if (error != null) {\n        error.printStackTrace();\n        return;\n    }\n\n    Log.d(\"Appwrite\", result.toString());\n}));\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet shows how to initialize the Appwrite client in a Kotlin Android application. It sets the endpoint and project ID, which are required for authenticating with the Appwrite server. You need to replace `<REGION>.cloud.appwrite.io` with your Appwrite Cloud region and `<YOUR_PROJECT_ID>` with your Appwrite project ID.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/delete-session.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet initializes the Appwrite client with the endpoint and project ID. The endpoint should point to your Appwrite instance, and the project ID should match the ID of your Appwrite project. Replace `<REGION>` and `<YOUR_PROJECT_ID>` with your actual values.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-mfa-authenticator.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\nimport io.appwrite.enums.AuthenticatorType\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n\nval result = account.createMfaAuthenticator(\n    type = AuthenticatorType.TOTP,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client with the endpoint and project ID. It sets up the client for interacting with the Appwrite API. The client object is then used to initialize the Account service.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/account/create-push-target.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval account = Account(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Kotlin\nDESCRIPTION: This code initializes the Appwrite client with the endpoint and project ID. It sets up the client to interact with the Appwrite API. The endpoint URL should point to your Appwrite instance, and the project ID should match the one in your Appwrite console.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/avatars/get-browser.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Avatars\nimport io.appwrite.enums.Browser\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval avatars = Avatars(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Avatars Service (Kotlin)\nDESCRIPTION: This snippet initializes the Appwrite client with the specified endpoint and project ID. It then creates an instance of the Avatars service using the configured client.\n\nDependencies: io.appwrite.Client, io.appwrite.services.Avatars\n\nParameters:\n- context: Android application context.\n- endpoint: The Appwrite API endpoint URL.\n- projectId: Your Appwrite project ID.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/avatars/get-favicon.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Avatars\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n\nval avatars = Avatars(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client Kotlin\nDESCRIPTION: This snippet shows how to initialize the Appwrite client with the endpoint and project ID. It sets up the client with your project's API endpoint and project ID. Ensure that you replace \"<REGION>.cloud.appwrite.io\" and \"<YOUR_PROJECT_ID>\" with your actual Appwrite project details.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/kotlin/locale/list-countries-e-u.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.appwrite.Client\nimport io.appwrite.coroutines.CoroutineCallback\nimport io.appwrite.services.Locale\n\nval client = Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n```\n\n----------------------------------------\n\nTITLE: Initialize Appwrite Client Java\nDESCRIPTION: This snippet initializes an Appwrite client with the endpoint and project ID. It sets up the client to communicate with the Appwrite server.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/avatars/get-flag.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in Android\nDESCRIPTION: This code snippet initializes the Appwrite client with the specified endpoint and project ID. It sets the endpoint URL and project ID necessary for interacting with the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-android/blob/main/docs/examples/java/storage/get-file-preview.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nClient client = new Client(context)\n    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"<YOUR_PROJECT_ID>\"); // Your project ID\n```"
  }
]