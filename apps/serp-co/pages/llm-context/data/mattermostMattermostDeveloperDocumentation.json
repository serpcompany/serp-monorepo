[
  {
    "owner": "mattermost",
    "repo": "mattermost-developer-documentation",
    "content": "TITLE: Creating the Mattermost plugin entry point\nDESCRIPTION: React component and plugin initialization code for a basic Mattermost web app plugin that adds a button to the channel header.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/webapp/hello-world.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\n\n// Courtesy of https://feathericons.com/\nconst Icon = () => <i className='icon fa fa-plug'/>;\n\nclass HelloWorldPlugin {\n    initialize(registry, store) {\n        registry.registerChannelHeaderButtonAction(\n            // icon - JSX element to use as the button's icon\n            <Icon />,\n            // action - a function called when the button is clicked, passed the channel and channel member as arguments\n            // null,\n            () => {\n                alert(\"Hello World!\");\n            },\n            // dropdown_text - string or JSX element shown for the dropdown button description\n            \"Hello World\",\n        );\n    }\n}\n\nwindow.registerPlugin('com.mattermost.webapp-hello-world', new HelloWorldPlugin());\n```\n\n----------------------------------------\n\nTITLE: Implementing PluginClass in JavaScript\nDESCRIPTION: Provides an example implementation of the PluginClass, demonstrating how to register components and actions with the plugin registry.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/reference/webapp/webapp-reference.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UserPopularity from './components/profile_popover/user_popularity';\nimport SomePost from './components/some_post';\nimport MenuIcon from './components/menu_icon';\nimport {openExampleModal} from './actions';\n\nclass PluginClass {\n    initialize(registry, store) {\n        registry.registerPopoverUserAttributesComponent(\n            UserPopularity,\n        );\n        registry.registerPostTypeComponent(\n            'custom_somepost',\n            SomePost,\n        );\n        registry.registerMainMenuAction(\n            'Plugin Menu Item',\n            () => store.dispatch(openExampleModal()),\n            mobile_icon: MenuIcon,\n        );\n    }\n\n    uninitialize() {\n        // No clean up required.\n    }\n}\n\nwindow.registerPlugin('myplugin', new PluginClass());\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Manifest Structure\nDESCRIPTION: The manifest file (plugin.json) defines required metadata about the plugin such as name and ID. It can be written in either JSON or YAML format.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"plugin-id\",\n  \"name\": \"plugin-name\",\n  \"description\": \"plugin-description\"\n  // Additional metadata fields\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cypress Hooks for Mattermost E2E Test Isolation\nDESCRIPTION: Demonstrates the use of Cypress hooks to set up test isolation, create necessary test data, and prepare the environment for specific E2E tests.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-testing.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet incomingWebhook;\nlet testChannel;\n\nbefore(() => {\n  // # Create and visit new channel and create incoming webhook\n  cy.apiInitSetup().then(({team, channel}) => {\n    testChannel = channel;\n\n    const newIncomingHook = {\n      channel_id: channel.id,\n      channel_locked: true,\n      description: 'Incoming webhook - attachment does not collapse',\n      display_name: 'attachment-does-not-collapse',\n    };\n\n    cy.apiCreateWebhook(newIncomingHook).then((hook) => {\n      incomingWebhook = hook;\n    });\n\n    cy.visit(`/${team.name}/channels/${channel.name}`);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using bindClientFunc for API Actions\nDESCRIPTION: Implementation of async action creators using bindClientFunc helper for handling API requests. Shows both simple and verbose examples with different configuration options.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/actions.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction somethingAsyncHappened(channelId: string) {\n    return bindClientFunc({\n        clientFunc: client.doSomething,\n\n        onSuccess: SOMETHING_HAPPENED,\n        params: [channelId],\n    };\n}\n\n// clientFunc is the only mandatory parameter of bindClientFunc. The rest may be added as needed.\nfunction somethingVerboseHappened(userId: string, channelId: string) {\n    return bindClientFunc({\n        clientFunc: client.doSomething,\n\n        // The onRequest action will be dispatched before the request is made\n        onRequest: SOMETHING_REQUEST,\n\n        // The onSuccess action will be dispatched if the request succeeds. It will include a data parameter\n        // containing the response to the request. Additionally, onSuccess can be an array of actions if multiple\n        // should be dispatched when the request succeeds.\n        onSuccess: [SOMETHING_SUCCESS, SOMETHING_HAPPENED],\n\n        // The onFailure action will be dispatched if the request fails due to a network issue or an invalid request.\n        // It will include an error parameter containing an Error object.\n        onFailure: SOMETHING_FAILED,\n\n        // An array of parameters will be passed into clientFunc in the order they're received\n        params: [userId, channelId],\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTracing Module in Go\nDESCRIPTION: A tracing module that provides initialization and span creation functions for OpenTracing with Jaeger integration. It includes functions for creating root spans and child spans from a context.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-10-25-instrumenting-go-code-via-ast.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage tracing\n\nimport (\n    \"context\"\n\n    opentracing \"github.com/opentracing/opentracing-go\"\n    \"github.com/uber/jaeger-client-go\"\n    jaegercfg \"github.com/uber/jaeger-client-go/config\"\n    jaegerlog \"github.com/uber/jaeger-client-go/log\"\n    \"github.com/uber/jaeger-lib/metrics\"\n)\n\nvar initialized = false\n\nfunc Initialize() error {\n    cfg := jaegercfg.Configuration{\n        Sampler: &jaegercfg.SamplerConfig{\n                Type:  jaeger.SamplerTypeConst,\n                Param: 1,\n        },\n        Reporter: &jaegercfg.ReporterConfig{\n                LogSpans: true,\n        },\n    }\n\n    _, err := cfg.InitGlobalTracer(\n        \"mattermost\",\n        jaegercfg.Logger(jaegerlog.StdLogger),\n        jaegercfg.Metrics(metrics.NullFactory),\n    )\n    if err != nil {\n        return err\n    }\n\n    initialized = true\n\n    return nil\n}\n\nfunc StartRootSpanByContext(ctx context.Context, operationName string) (opentracing.Span, context.Context) {\n    return opentracing.StartSpanFromContext(ctx, operationName)\n}\n\nfunc StartSpanWithParentByContext(ctx context.Context, operationName string) (opentracing.Span, context.Context) {\n    parentSpan := opentracing.SpanFromContext(ctx)\n\n    if parentSpan == nil {\n        return StartRootSpanByContext(ctx, operationName)\n    }\n\n    return opentracing.StartSpanFromContext(ctx, operationName, opentracing.ChildOf(parentSpan.Context()))\n}\n```\n\n----------------------------------------\n\nTITLE: Web App Plugin Integration\nDESCRIPTION: JavaScript/React code that implements the PluginClass interface to integrate with and extend the Mattermost web application.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Plugin {\n    public async initialize(registry: PluginRegistry) {\n        // Plugin initialization code\n    }\n\n    public uninitialize() {\n        // Cleanup code\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticated Server Request Example\nDESCRIPTION: Example showing how to include authentication tokens in the context for secure server verification.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-messages/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"user_id\": \"rd49ehbqyjytddasoownkuqrxe\",\n    \"post_id\": \"gqrnh3675jfxzftnjyjfe4udeh\",\n    \"channel_id\": \"j6j53p28k6urx15fpcgsr20psq\",\n    \"team_id\": \"5xxzt146eax4tul69409opqjlf\",\n    \"context\": {\n        \"repo\": \"mattermost/mattermost\",\n        \"pr\": 1234,\n        \"action\": \"merge\",\n        \"token\": \"somerandomlygeneratedsecret\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Workspace\nDESCRIPTION: Commands to create and navigate to the plugin development directory\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/server/hello-world.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $GOPATH/src/my-plugin\ncd $GOPATH/src/my-plugin\n```\n\n----------------------------------------\n\nTITLE: Including CSRF Token in Plugin API Requests\nDESCRIPTION: Example of how to include the Mattermost server's CSRF token in plugin API requests using the mattermost-redux Client4 utility.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/webapp/best-practices.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await fetch(url, Client4.getOptions(options));\n```\n\n----------------------------------------\n\nTITLE: Opening Interactive Dialog Request Structure in JSON\nDESCRIPTION: JSON structure for opening an interactive dialog, including trigger ID, callback URL, and dialog configuration options.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-dialogs/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"trigger_id\": \"<unique ID generated by the server>\",\n    \"url\": \"<URL to send the submitted request to>\",\n    \"dialog\": {\n        \"callback_id\": \"<ID specified by the integration to identify the request>\",\n        \"title\": \"<title of the dialog>\",\n        \"introduction_text\": \"<Text describing the dialog box content>\",\n        \"elements\": [\"<Array of UI elements to display in the dialog>\"],\n        \"submit_label\": \"<label of the button to complete the dialog>\",\n        \"notify_on_cancel\": false,\n        \"state\": \"<string provided by the integration that will be echoed back with dialog submission>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Component Functions and Event Handlers\nDESCRIPTION: Illustrates how to test component functions by simulating events or calling them directly, and verifying their effects.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/unit-testing.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst baseProps = {\n    updateSection: jest.fn(),\n};\n\ntest('should call updateSection on handleExpand', () => {\n    const {getByRole} = render(<EmailNotificationSetting {...baseProps}/>);\n    const button = getByRole('button', { name: /expand/i });\n\n    userEvent.click(button);\n\n    expect(baseProps.updateSection).toBeCalled();\n    expect(baseProps.updateSection).toHaveBeenCalledTimes(1);\n    expect(baseProps.updateSection).toBeCalledWith('email');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Mode Settings in Mattermost JSON\nDESCRIPTION: JSON configuration required to enable local mode and plugin uploads in Mattermost server settings. Enables local development mode and specifies socket location for plugin deployment.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/developer-setup.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ServiceSettings\": {\n        \"EnableLocalMode\": true,\n        \"LocalModeSocketLocation\": \"/var/tmp/mattermost_local.socket\"\n    },\n    \"PluginSettings\": {\n        \"Enable\": true,\n        \"EnableUploads\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request Format for Mattermost Slash Command\nDESCRIPTION: Example of the HTTP POST request format sent by Mattermost to an external application when a slash command is executed. Shows headers and form data structure.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/slash-commands/custom/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /weather HTTP/1.1\nHost: weather-service:4000\nAccept: application/json\nAccept-Encoding: gzip\nAuthorization: Token qzgakf1nx3yt9dr4n8585ihbxy\nContent-Length: 567\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mattermost-Bot/1.1\n\nchannel_id=fukxanjgjbnp7ng383at53k1sy&\nchannel_name=town-square&\ncommand=%2Fweather&\nresponse_url=http%3A%2F%2Flocalhost%3A8066%2Fhooks%2Fcommands%2Fi11f6nnfgfyk8eg56x9omc6dpa&\nteam_domain=team-awesome&\nteam_id=wx4zz8t4ttgmtxqiwfohijayzc&\ntext=toronto+week&\ntoken=qzgakf1nx3yt9dr4n8585ihbxy&\ntrigger_id=ZWZ5ZjRndzR4YmJxOHJlZWh4MXpkaHozbnI6ZXJqNnFjazNyZmd0dWpzODZ3NXI2cmNremg6MTY2MjA0MTY5Njg5NjpNRVFDSUQ5cTZ3MkRHU1RaNjhyaDh1TGl1STlSVHh2R1czSXZ5aGVRYjhkWThuZnlBaUI2YnlPR2ZpWlczR1FmVkdIODlreEp4MmlVT0UxMm9LMjlkZ1d0RC8xbjZRPT0%3D&\nuser_id=erj6qck3rfgtujs86w5r6rckzh&\nuser_name=alan\n```\n\n----------------------------------------\n\nTITLE: Creating a Memoized Selector with Reselect in JavaScript\nDESCRIPTION: Shows how to create a memoized selector using Reselect's createSelector function. This selector computes data efficiently by combining simple selectors and memoizing the result.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/selectors.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getCurrentUser = createSelector(\n    getCurrentUserId,\n    (state) => state.entities.users.profiles,\n    (currentUserId, profiles) => {\n        if (!profiles.hasOwnProperty(currentUserId)) {\n            // Current user not found\n            return {};\n        }\n\n        return profiles[currentUserId];\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering and Snapshot Testing React Components with Jest\nDESCRIPTION: Demonstrates how to render a React component using testing library helpers, assert on rendered elements, and perform snapshot testing.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/unit-testing.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render, screen, userEvent} from 'tests/react_testing_utils';\nconst baseProps = {\n    active: true,\n    onSubmit: jest.fn(),\n};\n\ntest('should match snapshot, not send email notifications', () => {\n    // For components that use Redux, React Intl, or Reach Router, you can also use the renderWithFullContext helper\n    const {container} = render(<EmailNotificationSetting {...baseProps}/>);\n\n    expect(container.firstChild).toMatchSnapshot();\n\n    // Assert on a specific element rendered by the component\n    const submitButton = screen.getByRole('button', { name: 'Submit' });\n    expect(submitButton).toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Using apiInitSetup Custom Command in Cypress Tests for Test Isolation\nDESCRIPTION: This snippet demonstrates how to use the apiInitSetup custom command to create isolated test data for each test file. The command creates necessary data and can automatically log in the user after setup.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-07-27-automated-ui-testing-with-cypress.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.apiInitSetup({loginAfter: true}).then(({team}) => {\n    cy.visit(`/${team.name}/channels/town-square`);\n});\n```\n\n----------------------------------------\n\nTITLE: Immutable State Updates in Redux Reducer\nDESCRIPTION: Demonstrates how to properly update state immutably in a Redux reducer using the spread operator to create new object references when state changes.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/reducers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myOtherValue(state = {color: 'red', weather: 'rain'}, action) {\n    switch(action.type) {\n    case SET_OTHER_VALUE_COLOR:\n        // This destructuring syntax is used to create a new object that is a shallow copy of state\n        // with the color field updated to the new value\n        return {\n            ...state,\n            color: action.data\n        };\n    case SET_OTHER_VALUE_WEATHER:\n        return {\n            ...state,\n            weather: action.data\n        };\n\n    default:\n        // There's no changes, so return the previous value\n        return state;\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Logging with Contextual Information in Go\nDESCRIPTION: Shows how to annotate log messages with key-value pairs for better context, using snake_case for keys and referencing JSON struct tags.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/style-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (a *App) SendNotifications(...) {\n\t..\n\t_, err := a.sendOutOfChannelMentions(c, sender, post, channel, ...)\n\t\tif err != nil {\n\t\t\tc.Logger().Error(\n\t\t\t\t\"Failed to send warning for out of channel mentions\",\n\t\t\t\tmlog.String(\"user_id\", sender.Id),\n\t\t\t\tmlog.String(\"post_id\", post.Id),\n\t\t\t\tmlog.Err(err),\n\t\t\t)\n\t\t}\n\t..\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Connection Pattern in React Component\nDESCRIPTION: Shows the basic pattern of connecting a React component to Redux store using connect(), mapStateToProps, and mapDispatchToProps. Demonstrates proper component file structure and implementation of a connected component.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/react-redux.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// components/my_component/index.jsx\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {messageUser} from 'actions/entities/users';\n\nimport {getCurrentUser, getUser} from 'selectors/entities/users';\n\nimport MyComponent from './my_component';\n\n// mapStateToProps receives the Redux store state and any props passed into the connected\n// component, and they are used to return any additional data from the Redux store that is\n// needed to render the component. ownProps will also be passed directly to the component.\nfunction mapStateToProps(state, ownProps) {\n    return {\n        currentUser: getCurrentUser(state),\n        otherUser: getUser(state, ownProps.userId),\n    };\n}\n\n// mapDispatchToProps receives the Redux store's dispatch method so that bindActionCreators\n// can be used to automatically dispatch those actions as necessary.\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            messageUser,\n        }, dispatch)\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyComponent);\n\n// components/my_component/my_component.jsx\n\nimport React from 'react';\n\nfunction MyComponent(props) {\n    const handleClick = () => {\n        props.actions.messageUser(props.otherUser, props.currentUser, `Hello, ${props.otherUser.first_name}!`);\n    };\n\n    return (\n        <label>\n            {`${props.otherUser.first_name} ${props.otherUser.last_name}: `}\n            <button onClick={this.handleClick}>{'Say Hi'}</button>\n        </label>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Redux Selectors in Mattermost Web App Plugin Component\nDESCRIPTION: Example showing how to use various Redux selectors to access current post, user, channel and team data within a React component using the useSelector hook.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/webapp/actions.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useSelector} from 'react-redux';\n\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nconst MyComponent = ({postId}) => {\n    const post = useSelector((state) => getPost(state, postId));\n    const currentUser = useSelector(getCurrentUser);\n    const currentChannel = useSelector(getCurrentChannel);\n    const currentTeam = useSelector(getCurrentTeam);\n\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Authorization Header Example\nDESCRIPTION: Header used for external system authentication with plugins from Mattermost v9.4 onwards. This allows external systems to authenticate using their own tokens, as long as they're not Mattermost user tokens.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/server/best-practices.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nAuthorization\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin with Mattermost Web App in JavaScript\nDESCRIPTION: Shows how to register a plugin implementation with the Mattermost web app using the global registerPlugin method.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/reference/webapp/webapp-reference.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.registerPlugin('myplugin', new PluginClass());\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request Example for Mattermost Outgoing Webhook\nDESCRIPTION: Example of an HTTP POST request format sent by Mattermost when an outgoing webhook is triggered. Shows the structure and required parameters including channel details, user information, and trigger data.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/webhooks/outgoing/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /my-endpoint HTTP/1.1\nContent-Length: 244\nUser-Agent: Go 1.1 package http\nHost: localhost:5000\nAccept: application/json\nContent-Type: application/x-www-form-urlencoded\n\nchannel_id=hawos4dqtby53pd64o4a4cmeoo&\nchannel_name=town-square&\nteam_domain=someteam&\nteam_id=kwoknj9nwpypzgzy78wkw516qe&\npost_id=axdygg1957njfe5pu38saikdho&\ntext=some+text+here&\ntimestamp=1445532266&\ntoken=zmigewsanbbsdf59xnmduzypjc&\ntrigger_word=some&\nuser_id=rnina9994bde8mua79zqcg5hmo&\nuser_name=somename\n```\n\n----------------------------------------\n\nTITLE: Computing Plugin Server Route with SiteURL in JavaScript\nDESCRIPTION: Helper function to compute the correct plugin server route using the Mattermost server's configured SiteURL. Handles path normalization and ensures proper URL construction for plugin endpoints.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/webapp/best-practices.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getPluginServerRoute = (state) => {\n    const config = getConfig(state);\n\n    let basePath = '';\n    if (config && config.SiteURL) {\n        basePath = new URL(config.SiteURL).pathname;\n\n        if (basePath && basePath[basePath.length - 1] === '/') {\n            basePath = basePath.substr(0, basePath.length - 1);\n        }\n    }\n\n    return basePath + '/plugins/' + PluginId;\n};\n```\n\n----------------------------------------\n\nTITLE: Error Level Logging in Plugin Sync\nDESCRIPTION: Shows error level logging when plugin bundle reading fails. Used for unexpected situations that don't result in total service loss but require administrator intervention.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/style-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (a *App) SyncPlugins(..) {\n\t..\n\treader, appErr := a.FileReader(plugin.path)\n\tif appErr != nil {\n\t\tmlog.Error(\"Failed to open plugin bundle from file store.\", mlog.String(\"bundle\", plugin.path), mlog.Err(appErr))\n\t\treturn\n\t}\n\t..\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Interactive Dialog Example\nDESCRIPTION: Comprehensive example of an interactive dialog configuration including various field types, validation rules, and submission settings.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-dialogs/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"trigger_id\":\"nbt1dxzqwpn6by14sfs66ganhc\",\n  \"url\":\"http://localhost:5000/dialog_submit\",\n  \"dialog\":{\n    \"callback_id\":\"somecallbackid\",\n    \"title\":\"Test Title\",\n    \"icon_url\":\"https://mattermost.com/wp-content/uploads/2022/02/icon.png\",\n    \"elements\":[\n       {\n          \"display_name\":\"Display Name\",\n          \"name\":\"realname\",\n          \"type\":\"text\",\n          \"subtype\":\"\",\n          \"default\":\"default text\",\n          \"placeholder\":\"placeholder\",\n          \"help_text\":\"This a regular input in an interactive dialog triggered by a test integration.\",\n          \"optional\":false,\n          \"min_length\":0,\n          \"max_length\":0,\n          \"data_source\":\"\",\n          \"options\":null\n       },\n       {\n          \"display_name\":\"Email\",\n          \"name\":\"someemail\",\n          \"type\":\"text\",\n          \"subtype\":\"email\",\n          \"default\":\"\",\n          \"placeholder\":\"placeholder@bladekick.com\",\n          \"help_text\":\"This a regular email input in an interactive dialog triggered by a test integration.\",\n          \"optional\":false,\n          \"min_length\":0,\n          \"max_length\":0,\n          \"data_source\":\"\",\n          \"options\":null\n       },\n       {\n          \"display_name\":\"Number\",\n          \"name\":\"somenumber\",\n          \"type\":\"text\",\n          \"subtype\":\"number\",\n          \"default\":\"\",\n          \"placeholder\":\"\",\n          \"help_text\":\"\",\n          \"optional\":false,\n          \"min_length\":0,\n          \"max_length\":0,\n          \"data_source\":\"\",\n          \"options\":null\n       },\n       {\n          \"display_name\":\"Display Name Long Text Area\",\n          \"name\":\"realnametextarea\",\n          \"type\":\"textarea\",\n          \"subtype\":\"\",\n          \"default\":\"\",\n          \"placeholder\":\"placeholder\",\n          \"help_text\":\"\",\n          \"optional\":true,\n          \"min_length\":5,\n          \"max_length\":100,\n          \"data_source\":\"\",\n          \"options\":null\n       },\n       {\n          \"display_name\":\"User Selector\",\n          \"name\":\"someuserselector\",\n          \"type\":\"select\",\n          \"subtype\":\"\",\n          \"default\":\"\",\n          \"placeholder\":\"Select a user...\",\n          \"help_text\":\"\",\n          \"optional\":false,\n          \"min_length\":0,\n          \"max_length\":0,\n          \"data_source\":\"users\",\n          \"options\":null\n       },\n       {\n          \"display_name\":\"Channel Selector\",\n          \"name\":\"somechannelselector\",\n          \"type\":\"select\",\n          \"subtype\":\"\",\n          \"default\":\"\",\n          \"placeholder\":\"Select a channel...\",\n          \"help_text\":\"Choose a channel from the list.\",\n          \"optional\":true,\n          \"min_length\":0,\n          \"max_length\":0,\n          \"data_source\":\"channels\",\n          \"options\":null\n       },\n       {\n          \"display_name\":\"Option Selector\",\n          \"name\":\"someoptionselector\",\n          \"type\":\"select\",\n          \"subtype\":\"\",\n          \"default\":\"\",\n          \"placeholder\":\"Select an option...\",\n          \"help_text\":\"\",\n          \"optional\":false,\n          \"min_length\":0,\n          \"max_length\":0,\n          \"data_source\":\"\",\n          \"options\":[\n             {\n                \"text\":\"Option1\",\n                \"value\":\"opt1\"\n             },\n             {\n                \"text\":\"Option2\",\n                \"value\":\"opt2\"\n             },\n             {\n                \"text\":\"Option3\",\n                \"value\":\"opt3\"\n             }\n          ]\n       }\n    ],\n    \"submit_label\":\"Submit\",\n    \"notify_on_cancel\":true,\n    \"state\":\"somestate\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized MySQL Query with Modified ORDER BY Clause\nDESCRIPTION: The optimized query that forces MySQL to use the composite index by including all indexed columns in the ORDER BY clause. This maintains the same query results while dramatically improving performance.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-11-17-mysql-index-merge.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT Id FROM Posts WHERE ChannelId = '9tne5g44z7f1zn4z1whebb7jna'\n\tAND DeleteAt = 0\n\tAND CreateAt < 1582683608013\n\tORDER BY ChannelId, DeleteAt, CreateAt DESC\n\tLIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Implementing Client4 API Method in TypeScript\nDESCRIPTION: Example showing how to add a new method to the Client4 class for making API requests. Demonstrates URL construction and request handling using doFetch.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/actions.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass Client4 {\n    doSomething = (userId: string, channelId: string) => {\n        return this.doFetch<SomethingResponse>(\n            `${this.getUserRoute(userId)}/something`,\n            {method: 'post', body: JSON.stringify({channelId})},\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Handler Pattern in Go\nDESCRIPTION: This code snippet demonstrates the general pattern for implementing API handlers in Mattermost. It includes steps for parsing the request, performing permissions checks, invoking handler logic, checking Etag, and formatting the response.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/rest-api.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc handlerName(c *Context, w http.ResponseWriter, r *http.Request) {\n    // 1. Parse the request URL and body.\n    // 2. Do a permissions check if required.\n    // 3. Invoke handler logic through the app package.\n    // 4. (Optional) Check the Etag.\n    // 5. Format the response and write the response.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Channel Selection Menu in Mattermost JSON\nDESCRIPTION: This snippet shows how to create a message menu for channel selection in Mattermost. It uses the 'channels' data source to populate the menu with available public channels.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-messages/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attachments\": [\n    {\n      \"pretext\": \"This is the attachment pretext.\",\n      \"text\": \"This is the attachment text.\",\n      \"actions\": [\n        {\n          \"id\": \"actionoptions\",\n          \"name\": \"Select an option...\",\n          \"integration\": {\n            \"url\": \"http://127.0.0.1:7357/actionoptions\",\n            \"context\": {\n              \"action\": \"do_something\"\n            }\n          },\n          \"type\": \"select\",\n          \"data_source\": \"channels\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying If-Else Statements in Go\nDESCRIPTION: Demonstrates how to reduce indentation by removing unnecessary else blocks and outdenting return statements in if-else structures.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/style-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Look for an initial \"{\"\nif token, err := dec.Token(); err != nil {\n\treturn result, err\n}\nd, ok := token.(json.Delim)\nif !ok || d != '{' {\n\treturn result, fmt.Errorf(\"input is not a JSON object, found: %v\", token)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Component State in React (JavaScript)\nDESCRIPTION: This code initializes the state of a custom React component for a plugin setting. It processes the initial value passed in props and sets it in the component's state.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/best-practices.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor(props) {\n    super(props);\n\n    this.state = {\n        attributes: this.initAttributes(props.value),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Redux Actions with Jest and Nock in TypeScript\nDESCRIPTION: Demonstrates how to test both synchronous and asynchronous Redux actions using Jest and Nock. Includes examples of mocking API requests, handling success and failure cases, and verifying store state changes.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport nock from 'nock';\n\nimport mockStore from 'tests/test_store';\n\nimport {somethingAsyncHappened, somethingHappened} from './actions';\n\ndescribe('somethingHappened', () => {\n    const channelId = 'channelId';\n\n    test('should update state.somethingCount', () => {\n        const store = mockStore({\n            somethingCount: 0,\n        });\n\n        // Remember to actually call your action creator since that's very easy to forget to do\n        store.dispatch(somethingHappened(channelId));\n\n        expect(store.getState().somethingCount).toBe(1234);\n    });\n});\n\ndescribe('somethingAsyncHappened', () => {\n    // Initial state may be shared between multiple test cases and may include state that's required for both\n    // testing and for thunk actions\n    const currentUserId = 'currentUserId';\n    const initialState = {\n        entities: {\n            users: {\n                currentUserId: 'user1',\n            },\n        },\n        somethingCount: 0,\n    };\n\n    test('should update state.somethingCount on success', async () => {\n        const store = mockStore(initialState);\n\n        const expectedResult = {status: 'SomethingHappened'};\n        nock(Client4.getBaseRoute()).\n            post(`/channels/${channelId}/something`).\n            reply(200, {});\n\n        // Remember that tests for async requests need to themselves be async and we need to wait for the dispatch\n        await store.dispatch(somethingAsyncHappened(channelId));\n\n        expect(store.getState().somethingCount).toBe(1234);\n    });\n\n    test('should update state.somethingCount on failure', async () => {\n        const store = mockStore(initialState);\n\n        const expectedResult = {status: 'SomethingHappened'};\n        nock(Client4.getBaseRoute()).\n            post(`/channels/${channelId}/something`).\n            reply(400, {});\n\n        // You can also inspect the result of the action if desired\n        const result = await store.dispatch(somethingAsyncHappened(channelId));\n\n        expect(result.error).toBeDefined();\n        expect(result.data).not.toBeDefined();\n\n        expect(store.getState().somethingCount).toBe(0);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Thunk Action Creator in TypeScript\nDESCRIPTION: Example of a more complex action creator using Redux Thunk for asynchronous operations and multiple dispatches.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/actions.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction loadAndSelectChannel(channelId: string) {\n    return async (dispatch: DispatchFunc, getState: GetStateFunc) => {\n        const {channels} = getState().entities.channels;\n\n        if (!channels.hasOwnProperty(channelId)) {\n            // Optionally call another action to asynchronously load the channel over the network\n            dispatch(setChannelLoading(true));\n\n            await dispatch(loadChannel(channelId));\n\n            dispatch(setChannelLoading(false));\n        }\n\n        // Switch to the channel\n        dispatch(selectChannel(channelId));\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a CounterLayer for Store Metrics in Go\nDESCRIPTION: Creates a metrics layer that counts method calls to the store. This layer intercepts all method calls, increments a counter for each method type, and prints the current count before delegating to the underlying store.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-02-26-layered-store-and-struct-embedding.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype CounterLayer struct {\n\tStore\n\tcounterGetUser    int\n\tcounterDeleteUser int\n\tcounterCountUsers int\n}\n\nfunc NewCounterLayer(substore Store) *CounterLayer {\n\treturn &CounterLayer{\n\t\tStore: substore,\n\t}\n}\n\nfunc (s *CounterLayer) GetUser(username string) (*User, error) {\n\ts.counterGetUser++\n\tfmt.Printf(\"GetUser calls: %d.\\n\", s.counterGetUser)\n\treturn s.Store.GetUser(username)\n}\n\nfunc (s *CounterLayer) DeleteUser(username string) error {\n\ts.counterDeleteUser++\n\tfmt.Printf(\"DeleteUser calls: %d.\\n\", s.counterDeleteUser)\n\treturn s.Store.DeleteUser(username)\n}\n\nfunc (s *CounterLayer) CountUsers() int {\n\ts.counterCountUsers++\n\tfmt.Printf(\"CountUsers calls: %d.\\n\", s.counterCountUsers)\n\treturn s.Store.CountUsers()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Parameterized Selector Factory in JavaScript\nDESCRIPTION: Demonstrates how to create a selector that accepts parameters using a factory function. This approach allows for separate memoization for each instance of the selector.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/selectors.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport function makeGetUser() {\n    return createSelector(\n        getProfiles,\n        (state, userId) => userId,\n        (profiles, userId) => {\n            if (!profiles.hasOwnProperty(userId)) {\n                // User not found\n                return {};\n            }\n\n            return profiles[userId];\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Setting Type in Plugin Manifest (JSON)\nDESCRIPTION: This snippet shows how to define a custom setting type in the plugin's manifest file. It adds a 'CustomSetting' with type 'custom' to the settings schema.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/best-practices.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"settings_schema\": {\n    \"settings\": [{\n        \"key\": \"NormalSetting\",\n        \"type\": \"text\",\n    }, {\n        \"key\": \"CustomSetting\",\n        \"type\": \"custom\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin API in Go\nDESCRIPTION: Steps to add a new plugin API method to the Mattermost server. This involves modifying the API interface, implementing the method, and generating RPC glue code.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// 1. Add method signature to API interface\n// 2. Implement API in plugin_api.go\n// 3. Run make commands:\nmake pluginapi\nmake plugin-mocks\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Buttons in Mattermost JSON Payload\nDESCRIPTION: This snippet demonstrates how to add message buttons as actions in a Mattermost message attachment. It includes two buttons with different actions and shows the structure required for the JSON payload.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-messages/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attachments\": [\n    {\n      \"pretext\": \"This is the attachment pretext.\",\n      \"text\": \"This is the attachment text.\",\n      \"actions\": [\n        {\n          \"id\": \"message\",\n          \"name\": \"Ephemeral Message\",\n          \"integration\": {\n            \"url\": \"http://127.0.0.1:7357\",\n            \"context\": {\n              \"action\": \"do_something_ephemeral\"\n            }\n          }\n        }, {\n          \"id\": \"update\",\n          \"name\": \"Update\",\n          \"integration\": {\n            \"url\": \"http://127.0.0.1:7357\",\n            \"context\": {\n              \"action\": \"do_something_update\"\n            }\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Background Job in High Availability Mode using Go\nDESCRIPTION: This code snippet demonstrates how to schedule a background job that runs at regular intervals in a high availability Mattermost environment. It uses the cluster package to ensure the job is coordinated across multiple plugin instances.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/server/ha.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\njob, cronErr := cluster.Schedule(\n    p.API,\n    \"BackgroundJob\",\n    cluster.MakeWaitForRoundedInterval(15*time.Minute),\n    p.BackgroundJobFunc,\n)\nif cronErr != nil {\n    return errors.Wrap(cronErr, \"failed to schedule background job\")\n}\n\np.backgroundJob = job\n```\n\n----------------------------------------\n\nTITLE: Implementing User Selection Menu in Mattermost JSON\nDESCRIPTION: This snippet demonstrates how to create a message menu for user selection in Mattermost. It uses the 'users' data source to populate the menu with available Mattermost users.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-messages/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attachments\": [\n    {\n      \"id\": \"actionoptions\",\n      \"pretext\": \"This is the attachment pretext.\",\n      \"text\": \"This is the attachment text.\",\n      \"actions\": [\n        {\n          \"name\": \"Select an option...\",\n          \"integration\": {\n            \"url\": \"http://127.0.0.1:7357/actionoptions\",\n            \"context\": {\n              \"action\": \"do_something\"\n            }\n          },\n          \"type\": \"select\",\n          \"data_source\": \"users\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Idiomatic Error Handling in Go\nDESCRIPTION: This snippet demonstrates the idiomatic way of handling errors in Go, where the successful flow of control runs down the page, eliminating error cases as they arise. It shows how to handle multiple potential errors without using 'else' statements.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2018-10-18-idiomatic-error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nf, err := os.Open(name)\nif err != nil {\n    return err\n}\nd, err := f.Stat()\nif err != nil {\n    f.Close()\n    return err\n}\ncodeUsing(f, d)\n```\n\n----------------------------------------\n\nTITLE: Implementing a TimerLayer for Store Performance Metrics in Go\nDESCRIPTION: Creates a timing layer that measures the execution time of store method calls. This layer captures the start time before calling the underlying store method, then calculates and prints the elapsed time for each operation.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-02-26-layered-store-and-struct-embedding.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype TimerLayer struct {\n\tStore\n}\n\nfunc NewTimerLayer(substore Store) *TimerLayer {\n\treturn &TimerLayer{\n\t\tStore: substore,\n\t}\n}\n\nfunc (s *TimerLayer) GetUser(username string) (*User, error) {\n\tstart := time.Now()\n\tuser, err := s.Store.GetUser(username)\n\telapsed := float64(time.Since(start)) / float64(time.Second)\n\tfmt.Printf(\"GetUser time %f secons.\\n\", elapsed)\n\treturn user, err\n}\n\nfunc (s *TimerLayer) DeleteUser(username string) error {\n\tstart := time.Now()\n\terr := s.Store.DeleteUser(username)\n\telapsed := float64(time.Since(start)) / float64(time.Second)\n\tfmt.Printf(\"DeleteUser time %f secons.\\n\", elapsed)\n\treturn err\n}\n\nfunc (s *TimerLayer) CountUsers() int {\n\tstart := time.Now()\n\tcount := s.Store.CountUsers()\n\telapsed := float64(time.Since(start)) / float64(time.Second)\n\tfmt.Printf(\"CountUsers time %f secons.\\n\", elapsed)\n\treturn count\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Container Component\nDESCRIPTION: Redux container implementation using connect pattern to map state and dispatch to props, including selectors and action creators.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/build-component.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {removeItem} from 'mattermost-redux/actions/items';\nimport {getItems} from 'mattermost-redux/selectors/entities/items';\n\nimport {GlobalState} from 'types/store';\n\nimport ItemList from './item_list';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        items: getItems(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            removeItem,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemList);\n```\n\n----------------------------------------\n\nTITLE: Defining GetUsers API Method in Go\nDESCRIPTION: This snippet demonstrates how to define a new API method for getting users with options. It uses a struct for options to allow easier future extensions.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/best-practices.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// GetUsers a list of users based on search options.\n//\n// Minimum server version: 5.10\nGetUsers(options *model.UserGetOptions) ([]*model.User, *model.AppError)\n```\n\n----------------------------------------\n\nTITLE: Writing Async Test Cases in Jest\nDESCRIPTION: Shows the correct way to write test cases for async functions, including proper async/await usage and function completion handling.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/unit-testing.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// DO NOT forget to wait for the async function to complete.\ntest('should match state when handleSubmit is called', () => {\n    wrapper.instance().handleSubmit();\n    expect(...)\n});\n\n// DO remember to wait on the async function and to make the entire test case async.\ntest('should match state when handleSubmit is called', async () => {\n    await wrapper.instance().handleSubmit();\n    expect(addUsersToTeam).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Change in Custom Plugin Setting (JavaScript)\nDESCRIPTION: This function handles changes in a custom plugin setting. It updates the setting value and notifies the System Console that changes need to be saved.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/best-practices.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nhandleChange = () => {\n    // ...\n    this.props.onChange(this.props.id,  Array.from(this.state.attributes.values()));\n    this.props.setSaveNeeded()\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTracing in HTTP Handler (Go)\nDESCRIPTION: Shows how to implement basic tracing in a ServeHTTP handler by creating root spans and injecting trace context into HTTP headers. Includes error handling and span completion.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-06-10-opentracing.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (h Handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tc := &Context{}\n\t// Start root span\n\tspan, ctx := tracing.StartRootSpanByContext(context.Background(), \"apiHandler\")\n\t// Populate different span fields based on request headers\n\tcarrier := opentracing.HTTPHeadersCarrier(r.Header)\n\t_ = opentracing.GlobalTracer().Inject(span.Context(), opentracing.HTTPHeaders, carrier)\n\text.HTTPMethod.Set(span, r.Method)\n\text.HTTPUrl.Set(span, c.App.Path())\n\text.PeerAddress.Set(span, c.App.IpAddress())\n\tspan.SetTag(\"request_id\", c.App.RequestId())\n\tspan.SetTag(\"user_agent\", c.App.UserAgent())\n\t// On handler exit, do the following:\n\tdefer func() {\n\t\t// In case of an error, add it to the trace\n\t\tif c.Err != nil {\n\t\t\tspan.LogFields(spanlog.Error(c.Err))\n\t\t\text.HTTPStatusCode.Set(span, uint16(c.Err.StatusCode))\n\t\t\text.Error.Set(span, true)\n\t\t}\n\t\t// Finish the span\n\t\tspan.Finish()\n\t}()\n\t// Set current context to the one we got from root span - it will be passed down to actual API handlers\n\tc.App.SetContext(ctx)\n\t// ...\n\t// Execute the actual API handler\n\th.HandleFunc(c, w, r)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Select Element\nDESCRIPTION: JSON configuration for a select element that creates a dropdown menu populated with public channels. Used for channel selection in dialogs.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-dialogs/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"display_name\": \"Post this message to\",\n    \"name\": \"channel\",\n    \"type\": \"select\",\n    \"data_source\": \"channels\"\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Redux Actions to React Components using TypeScript\nDESCRIPTION: Example of using React Redux's connect function to map action creators to component props.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/actions.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// src/components/widget/index.jsx\n\nimport {connect} from 'react-redux';\n\nimport {loadAndSelectChannel} from 'src/actions/channels';\n\nimport Widget from './widget';\n\n// mapDispatchToProps is an object containing all actions passed into the component\nconst mapDispatchToProps = {\n    loadAndSelectChannel,\n};\n\nexport default connect(null, mapDispatchToProps)(Widget);\n\n// src/components/widget/widget.tsx\n\ntype Props = {\n    channelId: string;\n\n    // Notice that the type of the wrapped action omits the `getState` and `dispatch` parameters of the Thunk action\n    loadAndSelectChannel: (channelId: string) => void;\n}\n\nexport default function Widget(props: Props) {\n    const handleClick = useCallback(() => {\n        // We don't need to dispatch anything at this point\n        props.loadAndSelectChannel(props.channelId);\n    }, [props.loadAndSelectChannel, props.channelId]);\n\n    return (\n        <button onClick={handleClick}>\n            {'Click me!'}\n        </button>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Header Authentication Example\nDESCRIPTION: Shows the default HTTP header ('Mattermost-User-Id') used by Mattermost Server to authenticate requests from Mattermost clients. This header should be checked by plugins to verify request authenticity. From v9.4, external systems can also use the Authorization header for authentication.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/server/best-practices.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMattermost-User-Id\n```\n\n----------------------------------------\n\nTITLE: Example Message Attachment JSON Structure\nDESCRIPTION: Complete example of a message attachment JSON payload showing all major formatting options including colors, fields, images, and author details.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/reference/message-attachments/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"attachments\": [\n        {\n            \"fallback\": \"test\",\n            \"color\": \"#FF8000\",\n            \"pretext\": \"This is optional pretext that shows above the attachment.\",\n            \"text\": \"This is the text of the attachment. It should appear just above an image of the Mattermost logo. The left border of the attachment should be colored orange, and below the image it should include additional fields that are formatted in columns. At the top of the attachment, there should be an author name followed by a bolded title. Both the author name and the title should be hyperlinks.\",\n            \"author_name\": \"Mattermost\",\n            \"author_icon\": \"https://mattermost.com/wp-content/uploads/2022/02/icon_WS.png\",\n            \"author_link\": \"https://mattermost.org/\",\n            \"title\": \"Example Attachment\",\n            \"title_link\": \"https://developers.mattermost.com/integrate/reference/message-attachments/\",\n            \"fields\": [\n                {\n                    \"short\":false,\n                    \"title\":\"Long Field\",\n                    \"value\":\"Testing with a very long piece of text that will take up the whole width of the table. And then some more text to make it extra long.\"\n                },\n                {\n                    \"short\":true,\n                    \"title\":\"Column One\",\n                    \"value\":\"Testing\"\n                },\n                {\n                    \"short\":true,\n                    \"title\":\"Column Two\",\n                    \"value\":\"Testing\"\n                },\n                {\n                    \"short\":false,\n                    \"title\":\"Another Field\",\n                    \"value\":\"Testing\"\n                }\n            ],\n            \"image_url\": \"https://mattermost.com/wp-content/uploads/2022/02/icon_WS.png\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Interactive Message Request Structure\nDESCRIPTION: Example of a basic HTTP POST request payload sent when a user interacts with a message button.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-messages/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"user_id\": \"rd49ehbqyjytddasoownkuqrxe\",\n    \"post_id\": \"gqrnh3675jfxzftnjyjfe4udeh\",\n    \"channel_id\": \"j6j53p28k6urx15fpcgsr20psq\",\n    \"team_id\": \"5xxzt146eax4tul69409opqjlf\",\n    \"context\": {\n        \"action\": \"do_something\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating User Events and Verifying State Changes\nDESCRIPTION: Shows how to simulate user events using userEvent from React Testing Library and verify resulting state changes.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/unit-testing.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntest('should pass handleChange', () => {\n    const {getByRole} = render(<EmailNotificationSetting {...baseProps}/>);\n    const emailNotificationImmediately = getByRole('checkbox', { id: 'emailNotificationImmediately' });\n\n    userEvent.click(emailNotificationImmediately);\n\n    expect(emailNotificationImmediately.checked).toBe(true);\n    expect(screen.getByTestId('emailInterval').value).toBe('30');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Rich Text Formatting with React-Intl in TypeScript\nDESCRIPTION: Shows the modern approach using React-Intl's rich text formatting feature, which allows custom tags in translation strings while keeping implementation details separate.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-12-04-common-i18n-mistakes.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nreturn (\n    <FormattedMessage\n        id='popup.moreInformation'\n        defaultMessage='<link>Click here</link> for more information.'\n        values={{\n            link: (msg: React.ReactNode) => (\n                <a\n                    href='https://mattermost.com'\n                    referrer='noreferrer'\n                    target='_blank'\n                >\n                    {msg}\n                </a>\n            ),\n        }}\n    />\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nreturn (\n    <FormattedMessage\n        id='popup.moreInformation'\n        defaultMessage='<link>Click here</link> for more information.'\n        values={{\n            link: (msg: React.ReactNode) => <ExternalLink href='https://mattermost.com'>{msg}</ExternalLink>,\n        }}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Cloning Mattermost Desktop Repository\nDESCRIPTION: Command to clone the forked Mattermost desktop repository to local machine. Requires Git to be installed.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/developer-setup.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/<YOUR_GITHUB_USERNAME>/desktop.git\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Go vet Analyzer for Forbidden Words Check\nDESCRIPTION: This code snippet demonstrates how to create a custom Go vet analyzer that checks for forbidden words in string literals. It includes the main analyzer structure, the run function that performs the check, and the main function to register the analyzer with Go vet.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-17-maintaining-consistency-in-codebases-with-go-vet.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// File: checkwords.go\npackage main\n\nimport (\n\t\"go/ast\"\n\t\"go/token\"\n\t\"strings\"\n\n\t\"golang.org/x/tools/go/analysis\"\n\t\"golang.org/x/tools/go/analysis/unitchecker\"\n)\n\nvar analyzer = &analysis.Analyzer{\n\tName: \"checkWords\",\n\tDoc:  \"check forbidden words usage in our strings\",\n\tRun:  run,\n}\n\nfunc run(pass *analysis.Pass) (interface{}, error) {\n\tforbiddenWords := []string{\n\t\t\"bird\",\n\t\t\"water\",\n\t\t\"candy\",\n\t}\n\n\tfor _, file := range pass.Files {\n\t\tast.Inspect(file, func(node ast.Node) bool {\n\t\t\tswitch x := node.(type) {\n\t\t\tcase *ast.BasicLit:\n\t\t\t\tif x.Kind != token.STRING {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\twords := strings.Fields(x.Value)\n\t\t\t\tfor _, word := range words {\n\t\t\t\t\tfor _, forbiddenWord := range forbiddenWords {\n\t\t\t\t\t\tif word == forbiddenWord {\n\t\t\t\t\t\t\tpass.Reportf(x.Pos(), \"Forbidden word used, please do not use the word %s in your strings\", word)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn true\n\t\t})\n\t}\n\treturn nil, nil\n}\n\nfunc main() {\n\tunitchecker.Main(\n\t\tanalyzer,\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Redux Reducers\nDESCRIPTION: Shows how to combine multiple reducers using Redux's combineReducers function to create a more complex data store structure with multiple value types.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/reducers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myStringValue(state = '', action) {\n    ...\n}\n\nfunction myNumberValue(state = 0, action) {\n    ...\n}\n\nfunction myOtherValue(state = {}, action) {\n    ...\n}\n\n// This combines the reducers so that the resulting store will look like\n// {\n//     myStringValue: 'abc',\n//     myNumberValue: '1234',\n//     myOtherValue: {color: 'red', weather: 'rain'}\n// }\nexport const combineReducers({\n    myStringValue,\n    myNumberValue,\n    myOtherValue\n});\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Cypress Test Template for Mattermost E2E Testing\nDESCRIPTION: Provides a complete template for setting up Cypress E2E tests, including license checks, setup for test isolation, and structure for test steps and assertions.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-testing.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n// **********************************************************************\n// - Use [#] in comment to indicate a test step (e.g. # Go to a page)\n// - Use [*] in comment to indicate an assertion (e.g. * Check the title)\n// - Query an element with @testing-library/cypress as much as possible\n// **********************************************************************\n\n// Group: @change_group\n\ndescribe('Change to Functional Group', () => {\n    before(() => {\n        // Add hard requirement(s) to immediately fail and throw a descriptive error if not met\n        // cy.shouldNotRunOnCloudEdition();\n\n        // Add license requirement(s)\n        // cy.apiRequireLicense();\n\n        // Init basic setup for test isolation\n        cy.apiInitSetup({loginAfter: true}).then(({team, channel, user}) => {\n            // Assign return values to variable/s\n            // # Visit a channel\n            // Do other setup per test data preconditions\n        });\n    });\n\n    // Add a title of \"[Zephyr_id] - [Zephyr title]\" for test case with single step,\n    // or \"[Zephyr_id]_[step_number] - [Zephyr title]\" for test case with multiple steps\n    it('[Zephyr_id] - [Zephyr title]', () => {\n        // Put test steps and assertions here\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Formatting in React Component - JSX\nDESCRIPTION: Example React component demonstrating how to use PostUtils functions to format text and convert HTML to React components. Shows integration of formatText and messageHtmlToComponent within a PureComponent.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/reference/webapp/webapp-reference.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'; // accessed through webpack externals\nimport PropTypes from 'prop-types';\n\nconst PostUtils = window.PostUtils; // must be accessed through `window`\n\nexport default class PostTypeFormatted extends React.PureComponent {\n\n    // ...\n\n    render() {\n        const post = this.props.post;\n\n        const formattedText = PostUtils.formatText(post.message); // format the text\n\n        return (\n            <div>\n                {'Formatted text: '}\n                {PostUtils.messageHtmlToComponent(formattedText)} // convert the html to components\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request for Mattermost Incoming Webhook\nDESCRIPTION: This snippet demonstrates how to construct an HTTP POST request to send a message via a Mattermost incoming webhook. It includes the necessary headers and JSON payload.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/webhooks/incoming/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /hooks/xxx-generatedkey-xxx HTTP/1.1\nHost: your-mattermost-server.com\nContent-Type: application/json\nContent-Length: 63\n\n{\n    \"text\": \"Hello, this is some text\\nThis is more text. :tada:\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Message Button Responses in Mattermost JSON\nDESCRIPTION: This snippet shows how an integration can respond to a message button action. It demonstrates updating the original post and sending an ephemeral message in the JSON response.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-messages/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"update\": {\n    \"message\": \"Updated!\",\n    \"props\": {}\n  },\n  \"ephemeral_text\": \"You updated the post!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dialog Submission Payload Structure\nDESCRIPTION: JSON structure for dialog submission payload sent to the integration. Contains user, channel, and team information along with submitted form data.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-dialogs/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"dialog_submission\",\n    \"callback_id\": \"<callback ID provided by the integration>\",\n    \"state\": \"<state provided by the integration>\",\n    \"user_id\": \"<user ID of the user who submitted the dialog>\",\n    \"channel_id\": \"<channel ID the user was in when submitting the dialog>\",\n    \"team_id\": \"<team ID the user was on when submitting the dialog>\",\n    \"submission\": {\n        \"some_element_name\": \"<value of that element>\",\n        \"some_other_element\": \"<value of some other element>\"\n    },\n    \"cancelled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Pluralization in React Intl\nDESCRIPTION: Proper implementation of pluralization in React Intl using the plural modifier.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-12-04-common-i18n-mistakes.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nreturn (\n    <FormattedMessage\n        id='email_sender.remaining'\n        defaultMessage='{remaining, number} {remaining, plural, one {email} other {emails}} remaining.'\n        values={{remaining}}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: cURL Command for Mattermost Incoming Webhook\nDESCRIPTION: This snippet shows how to use cURL to send a message to a Mattermost incoming webhook. It includes the necessary headers and JSON payload.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/webhooks/incoming/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i -X POST -H 'Content-Type: application/json' -d '{\"text\": \"Hello, this is some text\\nThis is more text. :tada:\"}' https://your-mattermost-server.com/hooks/xxx-generatedkey-xxx\n```\n\n----------------------------------------\n\nTITLE: Implementing React Functional Component\nDESCRIPTION: Example implementation of a functional React component with TypeScript props, rendering a list of items with optional title.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/build-component.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype Props = {\n    /**\n     * The title of the list\n     */\n    title?: string;\n    \n    /**\n     * An array of item components to display\n     */\n    items: ListItem[];\n    \n    actions: {\n        /**\n        * An action to remove an item from the list\n        */\n        removeItem: (item: ListItem) => void;\n    };\n}\n\nexport default function ItemList(props: Props) {\n    const title = this.props.title ? <h1>{this.props.title}</h1> : null;\n    const items = this.props.items.map((item: ListItem) => (\n        <Item\n            key={item.id}\n            item={item}\n            removeItem={this.props.actions.removeItem}\n        />\n    ));\n\n    return (\n        <div className='item-list'>\n            {title}\n            {items}\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic MapStore in Go\nDESCRIPTION: Creates a basic in-memory store implementation with a User struct and the Store interface. The MapStore implements methods for retrieving, counting and deleting users with simulated delays to mimic database operations.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-02-26-layered-store-and-struct-embedding.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/pkg/errors\"\n)\n\ntype User struct {\n\tUsername string\n\tFullName string\n}\n\ntype Store interface {\n\tGetUser(username string) (*User, error)\n\tCountUsers() int\n\tDeleteUser(username string) error\n}\n\ntype MapStore struct {\n\tdb map[string]*User\n}\n\nfunc NewMapStore() *MapStore {\n\treturn &MapStore{db: make(map[string]*User)}\n}\n\nfunc (s *MapStore) GetUser(username string) (*User, error) {\n\ttime.Sleep(100 * time.Millisecond)\n\tuser, ok := s.db[username]\n\tif !ok {\n\t\treturn nil, errors.New(\"User not found\")\n\t}\n\treturn user, nil\n}\n\nfunc (s *MapStore) CountUsers() int {\n\ttime.Sleep(150 * time.Millisecond)\n\treturn len(s.db)\n}\n\nfunc (s *MapStore) DeleteUser(username string) error {\n\ttime.Sleep(200 * time.Millisecond)\n\tif _, ok := s.db[username]; !ok {\n\t\treturn errors.New(\"User not found\")\n\t}\n\tdelete(s.db, username)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Redux Action in TypeScript\nDESCRIPTION: Example of a simple Redux action object with a type and data field.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/actions.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    type: 'SELECT_CHANNEL',\n    data: channelId,\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Utility Functions with Multiple Cases\nDESCRIPTION: Shows how to test utility functions by listing multiple test cases with descriptions, inputs, and expected outputs.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/unit-testing.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('stripMarkdown | RemoveMarkdown', () => {\n    const testCases = [{\n        description: 'emoji: same',\n        inputText: 'Hey :smile: :+1: :)',\n        outputText: 'Hey :smile: :+1: :)',\n    },\n    {\n        description: 'at-mention: same',\n        inputText: 'Hey @user and @test',\n        outputText: 'Hey @user and @test',\n    }];\n\n    testCases.forEach((testCase) => {\n        test(testCase.description, () => {\n            expect(stripMarkdown(testCase.inputText)).toEqual(testCase.outputText);\n        });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Main io_uring Event Loop Handler in Go\nDESCRIPTION: Main event loop that processes submission requests and manages the submission queue. Handles both read and write operations and maintains queue thresholds.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-05-20-hands-on-iouring-go.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nqueueSize := 0\nfor {\n\tselect {\n\tcase sqe := <-submitChan:\n\t\tswitch sqe.code {\n\t\tcase opCodeRead:\n\t\t\tcbMap[sqe.f.Fd()] = cbInfo{\n\t\t\t\treadCb: sqe.readCb,\n\t\t\t\tclose:  sqe.f.Close,\n\t\t\t}\n\n\t\t\tC.push_read_request(C.int(sqe.f.Fd()), C.long(sqe.size))\n\t\tcase opCodeWrite:\n\t\t\tcbMap[sqe.f.Fd()] = cbInfo{\n\t\t\t\twriteCb: sqe.writeCb,\n\t\t\t\tclose:   sqe.f.Close,\n\t\t\t}\n\n\t\t\tC.push_write_request(C.int(sqe.f.Fd()), ptr, C.long(len(sqe.buf)))\n\t\t}\n\n\t\tqueueSize++\n\t\tif queueSize > queueThreshold { // if queue_size > threshold, then pop all.\n\t\t\tsubmitAndPop(queueSize)\n\t\t\tqueueSize = 0\n\t\t}\n\tcase <-pollChan:\n\t\tif queueSize > 0 {\n\t\t\tsubmitAndPop(queueSize)\n\t\t\tqueueSize = 0\n\t\t}\n\tcase <-quitChan:\n\t\treturn\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Server Component Implementation\nDESCRIPTION: Server-side plugin code written in Go that extends the MattermostPlugin struct to interact with the Mattermost server through APIs and hooks.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Plugin struct {\n    plugin.MattermostPlugin\n}\n\nfunc (p *Plugin) OnActivate() error {\n    // Plugin activation code\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Using Structured Logging in Go (5.2+)\nDESCRIPTION: Demonstration of using the new structured logging API methods (LogDebug, LogError) introduced in Mattermost 5.2 for more detailed plugin logging.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/migration.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (p *MyPlugin) ServeHTTP(c *plugin.Context, w http.ResponseWriter, r *http.Request) {\n    p.API.LogDebug(\"received http request\", \"user_agent\", r.UserAgent())\n    if r.Referer() == \"\" {\n        p.API.LogError(\"missing referer\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Mattermost Server Plugin Package in Go\nDESCRIPTION: This code snippet demonstrates how to import the Mattermost Server plugin package in a Go file. It's a crucial step for developing Mattermost Server plugins.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/reference/server/server-reference.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/mattermost/mattermost/server/public/plugin\"\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request for Mattermost Incoming Webhook\nDESCRIPTION: Example HTTP POST request demonstrating the usage of multiple webhook parameters including channel, username, and icon_url configurations.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/webhooks/incoming/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /hooks/xxx-generatedkey-xxx HTTP/1.1\nHost: your-mattermost-server.com\nContent-Type: application/json\nContent-Length: 630\n\n{\n  \"channel\": \"town-square\",\n  \"username\": \"test-automation\",\n  \"icon_url\": \"https://mattermost.com/wp-content/uploads/2022/02/icon.png\",\n\n```\n\n----------------------------------------\n\nTITLE: Correct Pluralization in go-i18n\nDESCRIPTION: Proper implementation of pluralization in go-i18n using separate strings for singular and plural cases.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-12-04-common-i18n-mistakes.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n/*\n    The translation file contains:\n    {\n        \"id\": \"app.email_sender.remaining\",\n        \"translation\": {\n            \"one\": \"{{.Remaining}} email remaining\",\n            \"other\": \"{{.Remaining}} emails remaining\"\n        }\n    }\n*/\n\nfunc logEmailsRemaining(remaining int) {\n    log.Print(translateFunc(\"app.email_sender.remaining\", remaining, map[string]interface{}{\n        \"Remaining\": remaining,\n    }))\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Async Redux Actions in Jest\nDESCRIPTION: Demonstrates how to mock async Redux actions with readable action types and passing arguments for testing.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/unit-testing.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('mattermost-redux/actions/channels', () => {\n    const original = jest.requireActual('mattermost-redux/actions/channels');\n    return {\n        ...original,\n        fetchMyChannelsAndMembers: (...args) => ({type: 'MOCK_FETCH_CHANNELS_AND_MEMBERS', args}),\n    };\n});\n\n// Then compare the dispatched actions\nawait testStore.dispatch(Actions.loadChannelsForCurrentUser());\nexpect(testStore.getActions()).toEqual(expectedActions);\n```\n\n----------------------------------------\n\nTITLE: Creating User-Specific Localizer in Go for Matterpoll Plugin\nDESCRIPTION: This helper function creates a localizer for a specific user by fetching their locale setting. It falls back to the server localizer if there's an error retrieving the user's locale.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-10-21-localizing-matterpoll/index.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (p *MatterpollPlugin) getUserLocalizer(userID string) *i18n.Localizer {\n\tuser, err := p.API.GetUser(userID)\n\tif err != nil {\n\t\tp.API.LogWarn(\"Failed get user's locale\", \"error\", err.Error())\n\t\treturn p.getServerLocalizer()\n\t}\n\n\treturn i18n.NewLocalizer(p.bundle, user.Locale)\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Redux Actions in TypeScript\nDESCRIPTION: Example of how to dispatch a Redux action using the store's dispatch method.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/actions.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = createReduxStore();\n\nstore.dispatch(loadAndSelectChannel(channelId));\n```\n\n----------------------------------------\n\nTITLE: Using Memoized Selectors with Parameters in JavaScript\nDESCRIPTION: Shows how to use a memoized selector that takes additional parameters. It uses a factory function to create separate instances for proper memoization.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/selectors.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst getPostsInThread = makeGetPostsInThread();\n\nconst selectedPost = getSelectedPost(state);\nconst postsInSelectedThread = getPostsInThread(state, selectedPost.root_id);\n```\n\n----------------------------------------\n\nTITLE: Implementing Channel Show Command Function in Go\nDESCRIPTION: Implementation of the command function that executes when the channel show command is called. Demonstrates error handling and client interaction.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/cli-commands.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc showChannelCmdF(c client.Client, cmd *cobra.Command, args []string) error {\n    // Your code implementing the command itself\n    newChannel, _, err := c.ShowChannel(channel)\n\tif err != nil {\n\t\treturn err\n\t}\n\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Cypress Test Actions with Comments\nDESCRIPTION: Example showing proper test documentation with comments explaining each action and verification step in a Cypress test. Demonstrates posting messages and checking notifications in different channels.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-07-27-automated-ui-testing-with-cypress.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// # Post a message in a test channel by another user\ncy.postMessageAs({sender: anotherUser, message: 'from another user', channelId: testChannel.id});\n\n// # Go to off-topic channel via LHS and post a message\ncy.get('#sidebarItem_off-topic').click();\nconst message = 'Hello';\ncy.postMessage(message);\ncy.uiWaitUntilMessagePostedIncludes(message);\n\n// # Go to test channel where the first message is posted\ncy.get(`#sidebarItem_${testChannel.name}`).click();\n\n// * Check that the new message separator is visible\ncy.findByTestId('NotificationSeparator').should('be.visible').within(() => {\n    cy.findByText('New Messages').should('be.visible');\n});\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Jest\nDESCRIPTION: Commands for executing unit tests in the desktop app using Jest test runner. These tests primarily cover the common and main modules, with a target of maintaining 70% code coverage.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:unit\nnpm run test:coverage\n```\n\n----------------------------------------\n\nTITLE: Critical Level Logging in Go Server Startup\nDESCRIPTION: Demonstrates critical level logging when server initialization fails, resulting in service termination. Used for severe situations where the service cannot continue operating.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/style-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc runServer(..) {\n\t..\n\tserver, err := app.NewServer(options...)\n\tif err != nil {\n\t\tmlog.Critical(err.Error())\n\t\treturn\n\t}\n\t..\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a CacheLayer in Go\nDESCRIPTION: Creates a cache layer that embeds the Store interface. This layer implements GetUser to check a local cache before delegating to the underlying store, and DeleteUser to maintain cache consistency when users are deleted.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-02-26-layered-store-and-struct-embedding.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype CacheLayer struct {\n\tStore\n\tcache map[string]*User\n}\n\nfunc NewCacheLayer(substore Store) *CacheLayer {\n\treturn &CacheLayer{\n\t\tStore: substore,\n\t\tcache: make(map[string]*User),\n\t}\n}\n\nfunc (s *CacheLayer) GetUser(username string) (*User, error) {\n\tuser, ok := s.cache[username]\n\tif ok {\n\t\treturn user, nil\n\t}\n\tuser, err := s.Store.GetUser(username)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ts.cache[username] = user\n\treturn user, nil\n}\n\nfunc (s *CacheLayer) DeleteUser(username string) error {\n\tdelete(s.cache, username)\n\treturn s.Store.DeleteUser(username)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unstable Tests\nDESCRIPTION: Command for running unstable tests against master branch, excluding production tests.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-testing.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nnode run_tests.js --stage='@prod' --invert\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for Weather Slash Command\nDESCRIPTION: Example of a JSON response from a weather service slash command, showing formatted markdown table with weather forecast data.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/slash-commands/custom/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"response_type\": \"in_channel\", \"text\": \"\n     ---\n     #### Weather in Toronto, Ontario for the Week of February 16th, 2016\n    \n     | Day                 | Description                      | High   | Low    |\n     |:--------------------|:---------------------------------|:-------|:-------|\n     | Monday, Feb. 15     | Cloudy with a chance of flurries | 3 °C   | -12 °C |\n     | Tuesday, Feb. 16    | Sunny                            | 4 °C   | -8 °C  |\n     | Wednesday, Feb. 17  | Partly cloudly                   | 4 °C   | -14 °C |\n     | Thursday, Feb. 18   | Cloudy with a chance of rain     | 2 °C   | -13 °C |\n     | Friday, Feb. 19     | Overcast                         | 5 °C   | -7 °C  |\n     | Saturday, Feb. 20   | Sunny with cloudy patches        | 7 °C   | -4 °C  |\n     | Sunday, Feb. 21     | Partly cloudy                    | 6 °C   | -9 °C  |\n     ---\n   \"}\n```\n\n----------------------------------------\n\nTITLE: Webhook Post Request with Attachment\nDESCRIPTION: HTTP request example demonstrating how to post a message attachment using an incoming webhook.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/reference/message-attachments/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /hooks/{your-webhook-id} HTTP/1.1\nHost: {your-mattermost-site}\nUser-Agent: curl/7.63.0\nAccept: */*\nContent-Type: application/json\nContent-Length: 192\n\n{\"text\":\"Test message #testing\", \"attachments\": [{\"pretext\": \"This is the attachment pretext.\",\"text\": \"This is the attachment text.\"}]}\n```\n\n----------------------------------------\n\nTITLE: Using useDispatch Hook for Redux Actions in React Components\nDESCRIPTION: Example of using the useDispatch hook from React Redux to dispatch actions directly in a functional component.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/actions.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// src/components/widget/widget.tsx\n\nimport {useDispatch} from 'react-redux';\n\nimport {loadAndSelectChannel} from 'src/actions/channels';\n\ntype Props = {\n    channelId: string;\n}\n\nexport default function Widget(props: Props) {\n    const dispatch = useDispatch();\n\n    const handleClick = useCallback(() => {\n        dispatch(loadAndSelectChannel(props.channelId));\n    }, [dispatch, props.channelId]);\n\n    return (\n        <button onClick={handleClick}>\n            {'Click me!'}\n        </button>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Types in TypeScript\nDESCRIPTION: TypeScript interface definition for component props including optional title and required items array with JSDoc comments for documentation.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/build-component.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Props = {\n    /**\n     * The title of the list\n     */\n    title?: string;\n    \n    /**\n     * An array of items to display\n     */\n    items: ListItem[];\n}\n```\n\n----------------------------------------\n\nTITLE: Slow MySQL Query with Default Index Selection\nDESCRIPTION: The original slow query selecting posts with filtered criteria that takes several minutes to run because MySQL chooses a suboptimal index (idx_posts_create_at) instead of the more efficient composite index.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-11-17-mysql-index-merge.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT Id FROM Posts WHERE ChannelId = '9tne5g44z7f1zn4z1whebb7jna'\n\tAND DeleteAt = 0\n\tAND CreateAt < 1582683608013\n\tORDER BY CreateAt DESC\n\tLIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Mocking Imported Functions in Jest\nDESCRIPTION: Shows how to mock a single function from an imported module while keeping the original versions of other exports.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/unit-testing.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('utils/utils', () => {\n    const original = jest.requireActual('utils/utils');\n    return {\n        ...original,\n        isMobileView: jest.fn(() => true),\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Data in Batches with PostgreSQL Function\nDESCRIPTION: Defines a PostgreSQL function to update data in batches, avoiding large locks on tables. This example updates a new column in the channels table.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/schema-migration-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION public.update_in_batches()\nRETURNS INTEGER\nLANGUAGE plpgsql\nAS $function$\nDECLARE\n  id_offset text := '';\n  rows_updated integer;\nBEGIN\n  LOOP\n    WITH table_holder AS (\n      SELECT id FROM channels\n      WHERE id > id_offset\n      ORDER BY id ASC limit 100\n    )\n    UPDATE channels c SET new='improved' WHERE c.id in (SELECT id FROM table_holder); -- change this query to whatever your requirement is\n    GET DIAGNOSTICS rows_updated = ROW_COUNT;\n\n     -- We have to run the select query again\n     -- becaue \"select into\" isn't allowed inside a CTE\n     -- and without CTE, we have to use a temp table (because you can't select into a table)\n     -- and with a temp table, you run into max_locks_inside_transaction limit.\n     -- Probably there is a better way but keeping things simple for now.\n    select id into id_offset from (select id from channels where id > id_offset ORDER BY id ASC limit 100) as temp order by id desc limit 1;\n    EXIT WHEN rows_updated = 0;\n  END LOOP;\n  return 1;\nEND\n$function$;\n```\n\n----------------------------------------\n\nTITLE: Registering Root Command in Go\nDESCRIPTION: Example of creating and registering a new root-level command for emoji management using Cobra.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/cli-commands.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar EmojiCmd = &cobra.Command{\n    Use:   \"emoji\",\n    Short: \"Emoji management\",\n    Long:  \"Lists, creates and deletes custom emoji\",\n}\nfunc init() {\n    ...\n    RootCmd.AddCommand(EmojiCmd)\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Menus in Mattermost JSON Payload\nDESCRIPTION: This snippet demonstrates how to add a message menu as an action in a Mattermost message attachment. It includes a select menu with multiple options and shows the required JSON structure.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-messages/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attachments\": [\n    {\n      \"pretext\": \"This is the attachment pretext.\",\n      \"text\": \"This is the attachment text.\",\n      \"actions\": [\n        {\n          \"id\": \"actionoptions\",\n          \"name\": \"Select an option...\",\n          \"integration\": {\n            \"url\": \"http://127.0.0.1:7357/actionoptions\",\n            \"context\": {\n              \"action\": \"do_something\"\n            }\n          },\n          \"type\": \"select\",\n          \"options\": [\n            {\n              \"text\": \"Option1\",\n              \"value\": \"opt1\"\n            },\n            {\n              \"text\": \"Option2\",\n              \"value\": \"opt2\"\n            },\n            {\n              \"text\": \"Option3\",\n              \"value\": \"opt3\"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Login Request for Bot Authentication\nDESCRIPTION: Example HTTP POST request to authenticate a bot account and retrieve a session token. The request includes login credentials in JSON format.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/faq/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/v4/users/login HTTP/1.1\nHost: your-mattermost-url.com\nContent-Length: 66\nContent-Type: application/json\n\n{\"login_id\":\"someone@nowhere.com\",\"password\":\"thisisabadpassword\"}\n```\n\n----------------------------------------\n\nTITLE: Opening Channel Menu in Cypress Tests\nDESCRIPTION: Opens the channel menu by clicking the channel header title or dropdown icon. Can be called without parameters to just open the menu, or with a specific menu item to open and select that item.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-cheatsheets.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// # Open 'Channel Menu'\ncy.uiOpenChannelMenu();\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Element with Static Options\nDESCRIPTION: JSON configuration for a select element that creates a dropdown menu with predefined options. Allows users to choose from a list of three static options.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-dialogs/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"display_name\": \"Option Selector\",\n    \"name\": \"options\",\n    \"type\": \"select\",\n    \"options\": [\n         {\n             \"text\": \"Option1\",\n             \"value\": \"opt1\"\n         },\n         {\n             \"text\": \"Option2\",\n             \"value\": \"opt2\"\n         },\n         {\n             \"text\": \"Option3\",\n             \"value\": \"opt3\"\n         }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FormattedMarkdownMessage for Markdown-based Translations in JSX\nDESCRIPTION: Demonstrates using FormattedMarkdownMessage to handle translations with Markdown syntax, providing a safer and simpler alternative to HTML-based translations.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-12-04-common-i18n-mistakes.md#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n    <FormattedMarkdownMessage\n        id='popup.moreInformation'\n        defaultMessage='[Click here](!https://mattermost.com) for more information.'\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Component Class Definition Example\nDESCRIPTION: Example showing how to define a React component class with TypeScript generic type parameters for Props and State. This demonstrates the proper way to type React components after migration.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/migrating-to-typescript.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyComponent extends React.PureComponent<Props, State>\n```\n\n----------------------------------------\n\nTITLE: Mattermost Slash Command Response Example in JSON\nDESCRIPTION: Example of a slash command response payload using multiple parameters including response_type, text formatting with markdown tables, custom username, icon URL, and custom props for storing test data.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/slash-commands/custom/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"response_type\": \"in_channel\",\n    \"text\": \"\\n#### Test results for July 27th, 2017\\n@channel here are the requested test results.\\n\\n| Component  | Tests Run   | Tests Failed                                   |\\n| ---------- | ----------- | ---------------------------------------------- |\\n| Server     | 948         | :white_check_mark: 0                           |\\n| Web Client | 123         | :warning: 2 [(see details)](https://linktologs) |\\n| iOS Client | 78          | :warning: 3 [(see details)](https://linktologs) |\\n\\t\\t      \",\n    \"username\": \"test-automation\",\n    \"icon_url\": \"https://mattermost.com/wp-content/uploads/2022/02/icon.png\",\n    \"props\": {\n        \"test_data\": {\n            \"ios\": 78,\n            \"server\": 948,\n            \"web\": 123\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Select Element\nDESCRIPTION: JSON configuration for a select element that creates a dropdown menu populated with system users. Used for user selection fields like assignee picking.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-dialogs/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"display_name\": \"Assignee\",\n    \"name\": \"assignee\",\n    \"type\": \"select\",\n    \"data_source\": \"users\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Feature Flag Environment Variable in Go\nDESCRIPTION: Shows the pattern for setting feature flag values via environment variables in Go. The variable name is constructed by prefixing 'MM_FEATUREFLAGS_' to the uppercase key of the feature flag added to model/feature_flags.go.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/feature-flags.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nMM_FEATUREFLAGS_<name>\n```\n\n----------------------------------------\n\nTITLE: Creating Action Example Component in React\nDESCRIPTION: React component that displays a user's first name and provides a link to update it using a Redux action.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/webapp/actions.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class ActionExample extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        patchUser: PropTypes.func.isRequired, // here we define the action as a prop\n    }\n\n    updateFirstName = () => {\n        const patchedUser = {\n            id: this.props.user.id,\n            first_name: 'Jim',\n        };\n\n        this.props.patchUser(patchedUser); // here we use the action\n    }\n\n    render() {\n        return (\n            <div>\n                {'First name: ' + this.props.user.first_name}\n                <a\n                    href='#'\n                    onClick={this.updateFirstName}\n                >\n                    Click me to update the first name!\n                </a>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Text Element Configuration in JSON\nDESCRIPTION: Example JSON configuration for a text element in an interactive dialog, specifically showing email input configuration with subtypes and placeholders.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-dialogs/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"display_name\": \"Email\",\n    \"name\": \"email\",\n    \"type\": \"text\",\n    \"subtype\": \"email\",\n    \"placeholder\": \"placeholder@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: API Post Request with Attachment\nDESCRIPTION: HTTP request example showing how to create a post with an attachment using the Mattermost API.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/reference/message-attachments/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/v4/posts HTTP/1.1\nHost: {your-mattermost-site}\nUser-Agent: curl/7.63.0\nAccept: */*\nContent-Type: application/json\nContent-Length: 192\n\n{\"channel_id\":\"qmd5oqtwoibz8cuzxzg5ekshgr\", \"message\":\"Test message #testing\", \"props\":{\"attachments\": [{\"pretext\": \"This is the attachment pretext.\",\"text\": \"This is the attachment text.\"}]}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mattermost Launch Button in HTML/JavaScript\nDESCRIPTION: Example code demonstrating how to create buttons that open and close a Mattermost channel in a new browser window. The implementation uses JavaScript window.open() to create a popup window with specific dimensions and window properties.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/embedding/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n    var myWindow = null;\n\n    function openMMWindow() {\n        myWindow = window.open(\"https://community.mattermost.com/core/channels/developer\", \"Mattermost\", \"top=0,left=0,width=400,height=600,status=no,toolbar=no,location=no,menubar=no,titlebar=no\");\n    }\n\n    function closeMMWindow() {\n        if (myWindow) {\n            myWindow.close();\n        }\n    }\n</script>\n\n<html>\n    <br/>\n    <br/>\n    <button onclick=\"openMMWindow()\">Open Developer Channel</button>\n    <br/>\n    <br/>\n    <button onclick=\"closeMMWindow()\">Close Developer Channel</button>\n    <br/>\n    <br/>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Externals for Web App Plugins\nDESCRIPTION: Example of configuring Webpack externals in .webpack.config.js to properly import common libraries in web app plugins for Mattermost 5.2 and later.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/migration.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    // ...\n    externals: {\n        react: 'react',\n    },\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Querying and Asserting on React Component Elements\nDESCRIPTION: Shows how to use React Testing Library's screen queries to find elements and make assertions on their existence and properties.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/unit-testing.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(screen.getByRole('checkbox', { id: 'emailNotificationImmediately' })).toBeInTheDocument();\nexpect(screen.getByRole('heading', { name: props.siteName })).toBeInTheDocument();\nexpect(screen.getByRole('heading', { name: props.customDescriptionText })).toBeInTheDocument();\n```\n\n----------------------------------------\n\nTITLE: Starting the Mattermost Server\nDESCRIPTION: Commands to navigate to the server directory and start the Mattermost server using make.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd server\nmake run-server\n```\n\n----------------------------------------\n\nTITLE: Converting User to Bot Account via CLI\nDESCRIPTION: Command to convert an existing user account to a bot account using Mattermost CLI. The user can be identified by email, username, or user ID.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/reference/bot-accounts/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuser convert user@example.com --bot\n```\n\n----------------------------------------\n\nTITLE: Basic Logging with Module Prefix\nDESCRIPTION: Demonstrates how to use the Logger object to create log entries that are automatically prefixed with the module name.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/architecture/logging.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Will print out \"[MyModuleName] a long entry\"\nlog.debug('a log entry');\n```\n\n----------------------------------------\n\nTITLE: Example Outgoing Webhook Response with Advanced Parameters\nDESCRIPTION: Shows a complete HTTP response for an outgoing webhook that includes custom username, icon, formatted text with tables, and custom properties. The response demonstrates usage of response_type, username override, icon_url, markdown-formatted text, and custom props.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/webhooks/outgoing/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 755\n\n{\n  \"response_type\": \"comment\",\n  \"username\": \"test-automation\",\n  \"icon_url\": \"https://mattermost.com/wp-content/uploads/2022/02/icon.png\",\n  \"text\": \"\\n#### Test results for July 27th, 2017\\n@channel here are the requested test results.\\n\\n| Component  | Tests Run   | Tests Failed                                   |\\n| ---------- | ----------- | ---------------------------------------------- |\\n| Server     | 948         | :white_check_mark: 0                           |\\n| Web Client | 123         | :warning: 2 [(see details)](http://linktologs) |\\n| iOS Client | 78          | :warning: 3 [(see details)](http://linktologs) |\\n\\t\\t      \",\n  \"props\": {\n    \"test_data\": {\n    \"server\": 948,\n    \"web\": 123,\n    \"ios\": 78\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Important Message Priority with Acknowledgment Request\nDESCRIPTION: JSON configuration for setting a message as important with a required acknowledgment. This creates a message that displays a checkmark icon and requires user acknowledgment.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/reference/message-priority/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"priority\": {\n        \"priority\": \"important\",\n        \"requested_ack\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Message Buttons in Mattermost JSON\nDESCRIPTION: This snippet illustrates how to style message buttons using different color options. It shows various button styles including default, primary, warning, success, and danger.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-messages/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"vote0\",\n    \"type\": \"button\",\n    \"name\": \"Yes\",\n    \"style\": \"default\"\n  },\n  {\n    \"id\": \"vote1\",\n    \"type\": \"button\",\n    \"name\": \"No\",\n    \"style\": \"primary\"\n  },\n  {\n    \"id\": \"addOption\",\n    \"type\": \"button\",\n    \"name\": \"Add Option\",\n    \"style\": \"warning\"\n  },\n  {\n    \"id\": \"deletePoll\",\n    \"type\": \"button\",\n    \"name\": \"Delete Poll\",\n    \"style\": \"success\"\n  },\n  {\n    \"id\": \"endPoll\",\n    \"type\": \"button\",\n    \"name\": \"End Poll\",\n    \"style\": \"danger\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Idiomatic Error Handling in Mattermost\nDESCRIPTION: This snippet demonstrates the improved, idiomatic way of handling errors in Mattermost's codebase. It eliminates the unnecessary 'else' statement and pre-declares the 'result' variable.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2018-10-18-idiomatic-error-handling.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nresult := <-pchan\nif result.Err != nil {\n    return nil, result.Err\n}\nprofileMap := result.Data.(map[string]*model.User)\n```\n\n----------------------------------------\n\nTITLE: Adding Tracing to Business Logic Function (Go)\nDESCRIPTION: Demonstrates how to add tracing to a business logic function (SearchUsers) by creating nested spans and managing context. Includes error handling and parameter logging.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-06-10-opentracing.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (a *App) SearchUsers(props *model.UserSearch, options *model.UserSearchOptions) ([]*model.User, *model.AppError) {\n\t// Save previous context\n\torigCtx := a.ctx\n\t// Generate new span, nested inside the parent span\n\tspan, newCtx := tracing.StartSpanWithParentByContext(a.ctx, \"app.SearchUsers\")\n\t// Set new context\n\ta.ctx = newCtx\n\t\n\t// Log some parameters\n\tspan.SetTag(\"searchProps\", props)\n\n\t// On function exit, restore context and finish the span\n\tdefer func() {\n\t\ta.ctx = origCtx\n\t\tspan.Finish()\n\t}()\n\n\t// ...\n\t// Perform actual work\n\t// ...\n\n\t// In case of an error, add it to the span\n\tif err != nil {\n\t\tspan.LogFields(spanlog.Error(err))\n\t\text.Error.Set(span, true)\n\t}\n\n\t// Return results\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Module Mocking in Jest\nDESCRIPTION: Demonstrates the correct way to mock a module by combining original functionality with mock methods using jest.requireActual(). Shows how to avoid partial mocking errors.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/unit-testing.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// DO NOT partially mock the module\njest.mock('actions/storage', () => ({\n    setGlobalItem: (...args) => ({type: 'MOCK_SET_GLOBAL_ITEM', args}),\n}));\n\n// DO fully mock the module\njest.mock('actions/storage', () => {\n    const original = jest.requireActual('actions/storage');\n    return {\n        ...original,\n        setGlobalItem: (...args) => ({type: 'MOCK_SET_GLOBAL_ITEM', args}),\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Running Server and Web App Separately\nDESCRIPTION: Commands to run the Mattermost server and web app independently in separate terminals\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/developer-workflow.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake run-server   # in server directory\nmake run          # in webapp directory\nmake stop-server  # stop server\nmake stop         # stop webapp\n```\n\n----------------------------------------\n\nTITLE: Resetting Mattermost Database\nDESCRIPTION: This command resets the Mattermost database to its initial state. It's useful for clearing test data and starting with a fresh database during development.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/developer-workflow.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmattermost db reset\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests and CI Workflow\nDESCRIPTION: Commands for running various test suites including server unit tests, web app ESLint checks, web app unit tests, and web app UI tests as part of the CI workflow.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/focalboard/personal-server-setup-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake ci\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake server-test\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd webapp; npm run check\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd webapp; npm run test\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd webapp; npm run cypress:ci\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Deployment Command\nDESCRIPTION: Simple shell command to deploy a Mattermost plugin using make.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/developer-setup.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake deploy\n```\n\n----------------------------------------\n\nTITLE: Advanced Logging with Custom Prefix\nDESCRIPTION: Shows how to add additional prefixes to log entries using the withPrefix() method, useful for tracking specific object instances.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/architecture/logging.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Will print out \"[MyModuleName] [some-id] a long entry\"\nconst myObjectId = 'some-id';\nlog.withPrefix(myObjectId).debug('a log entry');\n```\n\n----------------------------------------\n\nTITLE: Improved Team Name Generation in Go\nDESCRIPTION: This code snippet demonstrates an improved approach to team name generation. It prefixes the random ID with 'zz' to avoid conflicts with reserved prefixes, making the test more reliable.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-09-29-avoiding-flaky-tests.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nt1 := model.Team{}\nt1.DisplayName = \"Name\"\nt1.Name = \"zz\" + model.NewId()\nt1.Email = MakeEmail()\nt1.Type = model.TEAM_OPEN\n_, err := ss.Team().Save(&t1)\nrequire.Nil(t, err)\n```\n\n----------------------------------------\n\nTITLE: Creating a Logger Object in JavaScript\nDESCRIPTION: Shows how to import and instantiate a Logger object for a module. This creates a logger that automatically prefixes log entries with the module name.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/architecture/logging.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Logger} from 'common/log';\n\nconst log = new Logger('MyModuleName');\n```\n\n----------------------------------------\n\nTITLE: OpenTracing Decorator Template\nDESCRIPTION: Template for generating OpenTracing decorator with context management and span tracking.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-06-10-opentracing.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n{{range $index, $element := .Methods}}\nfunc (a *{{$.Name}}) {{$index}}({{$element.Params | joinParamsWithType}}) {{$element.Results | joinResultsForSignature}} {\n\torigCtx := a.ctx\n\tspan, newCtx := tracing.StartSpanWithParentByContext(a.ctx, \"app.{{$index}}\")\n\n\ta.ctx = newCtx\n\ta.app.Srv().Store.SetContext(newCtx)\n\tdefer func() { \n\t\ta.app.Srv().Store.SetContext(origCtx)\n\t\ta.ctx = origCtx \n\t}()\n\t{{range $paramIdx, $param := $element.Params}}\n\t\t{{ shouldTrace $element.ParamsToTrace $param.Name }}\n\t{{end}}\n\tdefer span.Finish()\n\t{{- if $element.Results | len | eq 0}}\n\t\ta.app.{{$index}}({{$element.Params | joinParams}})\n\t{{else}}\n\t\t{{$element.Results | genResultsVars}} := a.app.{{$index}}({{$element.Params | joinParams}})\n\t\t{{if $element.Results | errorPresent}}\n\t\t\tif {{$element.Results | errorVar}} != nil {\n\t\t\t\tspan.LogFields(spanlog.Error({{$element.Results | errorVar}}))\n\t\t\t\text.Error.Set(span, true)\n\t\t\t}\n\t\t{{end}}\t\t\n\t\treturn {{$element.Results | genResultsVars -}}\n\t{{end}}}\n{{end}}\n```\n\n----------------------------------------\n\nTITLE: Async Data Access Example in Jest Tests\nDESCRIPTION: Shows an example of accessing data from an async function response in a test environment.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/unit-testing.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst {data} = await this.props.actions.addUsersToTeam(this.props.currentTeamId, userIds);\n```\n\n----------------------------------------\n\nTITLE: Changing Settings Values in Settings Modal with Cypress\nDESCRIPTION: Demonstrates how to change the value of a specific setting in the Settings modal using Cypress commands.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-cheatsheets.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// # Open 'Notifications' of 'Settings' modal\ncy.uiOpenSettingsModal('Notifications').within(() => {\n  // # Open 'Words That Trigger Mentions' setting\n  cy.findByRole('heading', {name: 'Words That Trigger Mentions'}).should('be.visible').click();\n  // # Check channel-wide mentions\n  cy.findByRole('checkbox', {name: 'Channel-wide mentions \"@channel\", \"@all\", \"@here\"'}).click();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Migration Files for Mattermost\nDESCRIPTION: Example of SQL migration file naming convention in Mattermost. Developers must create 'up' and 'down' scripts for each migration, following a specific naming pattern.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/schema-migration-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n000066_upgrade_posts_v6.0.down.sql\n000066_upgrade_posts_v6.0.up.sql\n```\n\n----------------------------------------\n\nTITLE: Manually Handling Plugin Configuration in Go (5.6+)\nDESCRIPTION: Updated example showing how to manually handle plugin configuration changes and synchronize access to configuration variables using a mutex in Mattermost 5.6 and later.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/migration.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Plugin struct {\n    plugin.MattermostPlugin\n\n    greetingLock sync.Mutex\n    greeting string\n}\n\nfunc (p *Plugin) OnConfigurationChange() error {\n    type configuration struct {\n        Greeting string\n    }\n\n    // Load the public configuration fields from the Mattermost server configuration.\n    if err := p.API.LoadPluginConfiguration(configuration); err != nil {\n        return errors.Wrap(err, \"failed to load plugin configuration\")\n    }\n\n    p.configurationLock.Lock()\n    defer p.configurationLock.Unlock()\n    p.greeting = configuration.Greeting\n\n    return nil\n}\n\nfunc (p *Plugin) ServeHTTP(c *plugin.Context, w http.ResponseWriter, r *http.Request) {\n    p.configurationLock.RLock()\n    defer p.configurationLock.RUnlock()\n\n    fmt.Fprintf(w, \"Hello %s!\", p.greeting)\n}\n```\n\n----------------------------------------\n\nTITLE: GitLab CI Pipeline for Docker Image Signing\nDESCRIPTION: GitLab CI/CD pipeline configuration for building, signing, and pushing Docker images with Content Trust. Includes setup for signer keys, trust configuration, and cleanup steps.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-10-28-docker-content-trust-in-gitlab-with-delegation.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndockerhub-edge:\n  variables:\n    URL: docker.io\n    USERNAME: $DOCKER_HUB_USERNAME # GitLab CI variable type variable\n    TOKEN: $DOCKER_HUB_TOKEN # GitLab CI variable type variable\n    IMAGE: $URL/mattermost/${CI_PROJECT_NAME}\n    TAG: edge\n  before_script:\n    - echo $TOKEN | docker login --username $USERNAME $URL --password-stdin\n  script:\n    - docker build --tag ${IMAGE}:${TAG} .\n    - export DOCKER_CONTENT_TRUST=1\n    - SIGNER_KEY_NAME=\"CHANGE_TO_SIGNER_KEY_HASH\" # change this to your hash\n    - PATH_KEYS=$HOME/.docker/trust/private\n    - mkdir -p $PATH_KEYS\n    - chmod 600 $DCT_SIGNER_PRIV_KEY\n    - cp $DCT_SIGNER_PRIV_KEY $PATH_KEYS/$SIGNER_KEY_NAME.key # GitLab CI variable type file\n\n    - export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$DCT_SIGNER_PASS # GitLab CI variable type variable\n    - docker trust key load $PATH_KEYS/$SIGNER_KEY_NAME.key\n    - docker trust sign ${IMAGE}:${TAG}\n    - docker push ${IMAGE}:${TAG}\n    - docker trust inspect --pretty ${IMAGE}:${TAG}\n  after_script:\n    - docker logout\n    - SIGNER_KEY_NAME=\"CHANGE_TO_SIGNER_KEY_HASH\" # change this to your hash\n    - PATH_KEYS=$HOME/.docker/trust/private\n    - rm $PATH_KEYS/$SIGNER_KEY_NAME.key\n  tags:\n    - docker\n  only:\n    - master\n```\n\n----------------------------------------\n\nTITLE: Building Mattermost Server Binary Files\nDESCRIPTION: This command builds the binary files for the Mattermost server after customization.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/customization/server-build.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: Final Table-Driven Tests in Go\nDESCRIPTION: Refactored implementation using table-driven tests to reduce code duplication and improve test clarity.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-27-advanced-git-tbilisi-free-university.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc TestConfigEnableDeveloper(t *testing.T) {\n\ttestCases := []struct {\n\t\tDescription     string\n\t\tEnableDeveloper *bool\n\t\tExpectedSiteURL string\n\t}{\n\t\t{\"empty site URL when nil\", nil, \"\"},\n\t\t{\"empty site URL when false\", NewBool(false), \"\"},\n\t\t{\"default site URL when true\", NewBool(true), SERVICE_SETTINGS_DEFAULT_SITE_URL},\n\t}\n\n\tfor _, testCase := range testCases {\n\t\tt.Run(testCase.Description, func(t *testing.T) {\n\t\t\tc1 := Config{\n\t\t\t\tServiceSettings: ServiceSettings{\n\t\t\t\t\tEnableDeveloper: testCase.EnableDeveloper,\n\t\t\t\t},\n\t\t\t}\n\t\t\tc1.SetDefaults()\n\n\t\t\trequire.Equal(t, testCase.ExpectedSiteURL, *c1.ServiceSettings.SiteURL)\n\t\t})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Bot Account API Integration\nDESCRIPTION: cURL command to test bot account functionality by posting a message with attachments to a channel using the Mattermost API. Requires bot access token and channel ID.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/reference/bot-accounts/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i -X POST -H 'Content-Type: application/json' -d '{\"channel_id\":\"<channel-id>\", \"message\":\"This is a message from a bot\", \"props\":{\"attachments\": [{\"pretext\": \"Look some text\",\"text\": \"This is text\"}]}}' -H 'Authorization: Bearer <bot-access-token>' <mattermost-url>/api/v4/posts\n```\n\n----------------------------------------\n\nTITLE: Initializing go-i18n Bundle in Go for Matterpoll Plugin\nDESCRIPTION: This function initializes the go-i18n bundle by loading all localization files from the assets directory. It uses the plugin API to get the bundle path and registers JSON unmarshaling for the translation files.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-10-21-localizing-matterpoll/index.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (p *MatterpollPlugin) initBundle() (*i18n.Bundle, error) {\n\tbundle := &i18n.Bundle{DefaultLanguage: language.English}\n\tbundle.RegisterUnmarshalFunc(\"json\", json.Unmarshal)\n\n\tbundlePath, err := p.API.GetBundlePath()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to get bundle path\")\n\t}\n\n\ti18nDir := filepath.Join(bundlePath, \"assets\", \"i18n\")\n\tfiles, err := ioutil.ReadDir(i18nDir)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to open i18n directory\")\n\t}\n\n\tfor _, file := range files {\n\t\tif !strings.HasPrefix(file.Name(), \"active.\") {\n\t\t\tcontinue\n\t\t}\n\n\t\tif file.Name() == \"active.en.json\" {\n\t\t\tcontinue\n\t\t}\n\t\t_, err = bundle.LoadMessageFile(filepath.Join(i18nDir, file.Name()))\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrapf(err, \"failed to load message file %s\", file.Name())\n\t\t}\n\t}\n\n\treturn bundle, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WriteFile Function in Go with io_uring\nDESCRIPTION: Function to write data to file asynchronously using io_uring. Takes file path, data, permissions and callback function as parameters.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-05-20-hands-on-iouring-go.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc WriteFile(path string, data []byte, perm os.FileMode, cb func(written int)) error {\n\tf, err := os.OpenFile(path, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)\n\t// handle error\n\n\tsubmitChan <- &request{\n\t\tcode:    opCodeWrite, // same as above. This is for the writev syscall\n\t\tbuf:     data,\t\t  // the byte slice of data to be written\n\t\tf:       f, \t\t  // the file descriptor\n\t\twriteCb: cb,\t\t  // the callback to call when the write is done\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Actions with Error Handling in TypeScript\nDESCRIPTION: Examples of implementing both synchronous and asynchronous Redux actions with error handling.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/actions.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction somethingHappened(channelId: string) {\n    return {\n        type: SOMETHING_HAPPENED,\n        channelId,\n        data: 1234,\n    };\n}\n\nfunction somethingAsyncHappened(channelId: string) {\n    return async (dispatch: DispatchFunc, getState: GetStateFunc) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        let data;\n        try {\n            data = await Client4.doSomething(currentUserId, channelId);\n        } catch (error) {\n            dispatch({\n                type: SOMETHING_FAILED,\n                channelId,\n                error,\n            });\n\n            return {error};\n        }\n\n        // Note that if you need to access state again after waiting for something asynchronous, you should call\n        // getState a second time to ensure you have an up to date version of the state\n\n        dispatch({\n            type: SOMETHING_HAPPENED,\n            channelId,\n            data,\n        });\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Async Function Mocking in Jest\nDESCRIPTION: Demonstrates various approaches to mocking async functions in Jest, including resolved values and multiple resolved values for repeated calls.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/unit-testing.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// DO NOT assign a regular mock function.\nconst addUsersToTeam = jest.fn();\n\n// DO NOT forget to provide a resolved value.\nconst addUsersToTeam: jest.fn(() => {\n    return new Promise((resolve) => {\n        process.nextTick(() => resolve());\n    });\n}),\n\n// DO mock async function with resolved value. `mockResolvedValue` is the easiest way to do this.\nconst addUsersToTeam = jest.fn().mockResolvedValue({data: true})\n\n// DO mock async function with several resolved values for repeated calls.\nconst addUsersToTeam = jest.fn().\nmockResolvedValueOnce({error: true}).\nmockResolvedValue({data: true});\n```\n\n----------------------------------------\n\nTITLE: Implementing LDAP Nested Groups as Adjacency List in Go\nDESCRIPTION: This Go code shows how to represent a directed graph of LDAP nested groups using an adjacency list. This implementation models the relationships between groups and users shown in the article's 'figure 1'.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-06-05-ldap-nested-groups-modelling-and-representation-in-code.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nadjacencyList := map[string][]string{\n    \"group/developers\":        []string{\"person/miranda\", \"group/senior-developers\"},\n    \"group/senior-developers\": []string{\"person/suzanne\"},\n    //\"person/miranda\":          []string{},\n    //\"person/suzanne\":          []string{},\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Mattermost plugin manifest\nDESCRIPTION: JSON manifest file (plugin.json) that describes the plugin's metadata and entry point for the Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/webapp/hello-world.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"com.mattermost.webapp-hello-world\",\n    \"name\": \"Hello World\",\n    \"webapp\": {\n        \"bundle_path\": \"main.js\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: VSCode Debug Configuration for Mattermost Plugin\nDESCRIPTION: Launch configuration for VSCode to enable remote debugging of Mattermost plugins\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/developer-workflow.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Attach to Mattermost plugin\",\n    \"type\": \"go\",\n    \"request\": \"attach\",\n    \"mode\": \"remote\",\n    \"port\": 2346,\n    \"host\": \"127.0.0.1\",\n    \"apiVersion\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Scope with Base Queries in Cypress\nDESCRIPTION: Demonstrates acceptable use of base queries to limit the scope of selection, followed by recommended queries within that scope.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-cheatsheets.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// limit the scope but chained with recommended query\ncy.get('#elementId').should('be.visible').findByRole('button', {name: 'Save'}).click();\n\n// limit the scope then use the recommended queries within the scope\ncy.get('.class-name').should('be.visible').within(() => {\n    cy.findByRole('input', {name: 'Position'}).type('Software Developer');\n    cy.findByRole('button', {name: 'Save'}).click();\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting React Component to Redux Store\nDESCRIPTION: Container component that connects the ActionExample component to the Redux store, mapping state and actions to props.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/webapp/actions.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {patchUser} from 'mattermost-redux/actions'; // importing the action\n\nimport ActionExample from './action_example.jsx';\n\nconst mapStateToProps = (state) => {\n    const currentUserId = state.entities.users.currentUserId;\n\n    return {\n        user: state.entities.users.profiles[currentUserId],\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({\n    patchUser, // passing the action as a prop\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActionExample);\n```\n\n----------------------------------------\n\nTITLE: Saving and Closing Settings Modal with Cypress\nDESCRIPTION: Shows how to save changes and close the Settings modal using Cypress commands.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-cheatsheets.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// # Open 'Notifications' of 'Settings' modal\ncy.uiOpenSettingsModal('Notifications').within(() => {\n  // # Open 'Words That Trigger Mentions' setting\n  cy.findByRole('heading', {name: 'Words That Trigger Mentions'}).should('be.visible').click();\n  // # Check channel-wide mentions\n  cy.findByRole('checkbox', {name: 'Channel-wide mentions \"@channel\", \"@all\", \"@here\"'}).click();\n  // # Save then close the modal\n  cy.uiSave();\n  cy.uiClose();\n});\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Existing Data in PostgreSQL\nDESCRIPTION: SQL query to update the channel_count column in the status table for a batch of users, used in conjunction with a background job for data migration.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/schema-migration-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE status s SET channel_count=(SELECT count(*) FROM channelmembers cm WHERE cm.userid=s.userid) WHERE channel_count IS NOT NULL AND s.userid in (SELECT userid FROM status WHERE userid > '' ORDER BY userid ASC limit 10);\n```\n\n----------------------------------------\n\nTITLE: Adding Test Metadata in Cypress Spec Files\nDESCRIPTION: This snippet demonstrates how to add metadata to a Cypress spec file, including stage, group, and skip information, as well as copyright and license details.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-testing.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n// ***************************************************************\n// - [#] indicates a test step (e.g. # Go to a page)\n// - [*] indicates an assertion (e.g. * Check the title)\n// - Use element ID when selecting an element. Create one if none.\n// ***************************************************************\n\n// Stage: @prod\n// Group: @incoming_webhook\n```\n\n----------------------------------------\n\nTITLE: AST Code Scanner Implementation\nDESCRIPTION: Implementation of source code scanner that finds all methods bound to a specific struct using Go's AST package.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-15-instrumenting-go-code-via-ast-2.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfset := token.NewFileSet()\n// 1. scan source code folder\npkgs, err := parser.ParseDir(fset, folder, nil, parser.AllErrors|parser.ParseComments)\nif err != nil {\n\tlog.Fatalf(\"Unable to parse %s folder\", folder)\n}\n// 2. find the required package by name\nvar appPkg *ast.Package\nfor _, pkg := range pkgs {\n\tif pkg.Name == pkgName {\n\t\tappPkg = pkg\n\t\tbreak\n\t}\n}\nif appPkg == nil {\n\tlog.Fatalf(\"Unable to find package %s\", pkgName)\n}\n\n// 3. find all methods that are bound to the specific struct\nfor _, file := range appPkg.Files {\n\tast.Inspect(file, func(n ast.Node) bool {\n\t\tif fun, ok := n.(*ast.FuncDecl); ok {\n\t\t\t// 4. Validate that method is exported and has a receiver\n\t\t\tif fun.Name.IsExported() && fun.Recv != nil && len(fun.Recv.List) == 1 {\n\t\t\t\t\t// 5. Check that the receiver is actually the struct we want\n\t\t\t\t\tif r, rok := fun.Recv.List[0].Type.(*ast.StarExpr); rok && r.X.(*ast.Ident).Name == structName {\n\t\t\t\t\t\t// we found it!\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\treturn true\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Prop Functions in React Components\nDESCRIPTION: Demonstrates how to test functions passed as props to a component, verifying they are called correctly for specific events or state changes.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/unit-testing.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst baseProps = {\n    onSubmit: jest.fn(),\n    updateSection: jest.fn(),\n};\n\ntest('should call functions on handleSubmit', () => {\n    const {getByTestId} = render(<EmailNotificationSetting {...baseProps}/>);\n    const submitButton = getByTestId('submit-button');\n\n    userEvent.click(submitButton);\n\n    expect(baseProps.onSubmit).not.toBeCalled();\n    expect(baseProps.updateSection).toHaveBeenCalledTimes(1);\n    expect(baseProps.updateSection).toBeCalledWith('email');\n\n    const emailNotificationNever = getByTestId('email-notification-never');\n    userEvent.change(emailNotificationNever);\n\n    userEvent.click(submitButton);\n\n    expect(baseProps.onSubmit).toBeCalled();\n    expect(baseProps.onSubmit).toHaveBeenCalledTimes(1);\n    expect(baseProps.onSubmit).toBeCalledWith({enableEmail: 'false'});\n\n    expect(baseProps.updateSection).toHaveBeenCalledTimes(2);\n    expect(baseProps.updateSection).toBeCalledWith('');\n});\n```\n\n----------------------------------------\n\nTITLE: Running Specific Go Tests in Mattermost Server\nDESCRIPTION: This command demonstrates how to run a specific unit test or a subset of tests in the Mattermost server project. It's useful for quickly testing changes without running the entire test suite.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/developer-workflow.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -v -run='<test name or regex>' ./<package containing test>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Redux Reducer in JavaScript\nDESCRIPTION: Demonstrates a simple Redux reducer that handles a single value in the store. The reducer takes a previous state and action as parameters and returns the new state based on the action type.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/reducers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myValueDefault = '';\nfunction myValue(state = myValueDefault, action) {\n    switch(action.type) {\n    case SET_MY_VALUE:\n        // This data changes myValue, so just return the new value\n        return action.data;\n\n    default:\n        // This action doesn't affect us, so return the previous value\n        return state;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Mattermost Boards Plugin\nDESCRIPTION: Commands to build the Mattermost Boards plugin. This process involves building the webapp component first and then creating a distributable package in the mattermost-plugin directory.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/focalboard/mattermost-boards-setup-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake webapp\ncd mattermost-plugin\nmake dist\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Selector in JavaScript\nDESCRIPTION: Demonstrates how to create a simple selector function that retrieves a specific part of the Redux store state without any complex logic or memoization.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/selectors.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getCurrentUserId(state) {\n    return state.entities.users.currentUserId;\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for Mattermost Webhook\nDESCRIPTION: Example JSON response format that can be sent back to Mattermost, demonstrating how to format a table message with test results using Markdown syntax.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/webhooks/outgoing/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"text\": \"\n| Component  | Tests Run | Tests Failed                                   |\n|:-----------|:----------|:-----------------------------------------------|\n| Server     | 948       | :white_check_mark: 0                           |\n| Web Client | 123       | :warning: [2 (see details)](http://linktologs) |\n| iOS Client | 78        | :warning: [3 (see details)](http://linktologs) |\n\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a Mattermost System Admin Account\nDESCRIPTION: This command creates a new user account with system admin privileges in Mattermost using the mmctl tool. It includes the --system_admin flag to grant admin rights.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/developer-workflow.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmmctl user create --email user@example.com --username test1 --password mypassword --system_admin\n```\n\n----------------------------------------\n\nTITLE: Basic Struct Implementation Example\nDESCRIPTION: Example showing two structs (Person and Animal) that implement the same method signature but lack a common interface.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-15-instrumenting-go-code-via-ast-2.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Person struct {\n\tName string\n}\n\nfunc (p Person) Hello() string {\n\treturn \"Hello: \" + p.Name\n}\n\ntype Animal struct {\n\tLegs int\n}\n\nfunc (a Animal) Hello() string {\n\treturn fmt.Sprintf(\"I have %d legs!\", a.Legs)\n}\n\nfunc main() {\n\tp := Person{Name: \"Fred\"}\n\ta := Animal{Legs: 4}\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Flaky Tests in Golang\nDESCRIPTION: Code snippet demonstrating how to properly skip a flaky test by adding a t.Skip() call with a JIRA ticket reference. This is used when a test is identified as flaky and needs to be temporarily disabled while a fix is developed.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/tests.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nt.Skip(\"https://mattermost.atlassian.net/browse/MM-XXXXX\")\n```\n\n----------------------------------------\n\nTITLE: Generating GPG Key Pair for Plugin Signing in Bash\nDESCRIPTION: This snippet demonstrates the process of generating a public and private key pair using GPG for plugin signing in Mattermost. It specifies key type, size, validity, and user information.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/using-and-managing-plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngpg --full-generate-key\n\nPlease select what kind of key you want:\n  (1) RSA and RSA (default)\n  (2) DSA and Elgamal\n  (3) DSA (sign only)\n  (4) RSA (sign only)\nYour selection? 1\n\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048) 3072\n\nRequested keysize is 3072 bits\n\nPlease specify how long the key should be valid.\n      0 = key does not expire\n      <n>  = key expires in n days\n      <n>w = key expires in n weeks\n      <n>m = key expires in n months\n      <n>y = key expires in n years\nKey is valid for? (0) 0\n\nKey expires at ...\n\nIs this correct? (y/N) y\n\nGnuPG needs to construct a user ID to identify your key.\nReal name: Mattermost Inc\n\nEmail address: info@mattermost.com\nComment:\n\nYou selected this USER-ID:\n    \"Mattermost Inc <info@mattermost.com>\"\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O\n```\n\n----------------------------------------\n\nTITLE: Running Server and Web App Together\nDESCRIPTION: Commands to run both the Mattermost server and web app simultaneously from the server directory\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/developer-workflow.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake run\nmake stop\n```\n\n----------------------------------------\n\nTITLE: Starting Headless Delve Debugger\nDESCRIPTION: Command to start a headless Delve debugging process that listens on port 2346 for IDE connection.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/developer-workflow.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmake attach-headless\n```\n\n----------------------------------------\n\nTITLE: Installing mattermost-redux Dependency for Web App Plugin\nDESCRIPTION: Commands to add mattermost-redux as a dependency for a Mattermost web app plugin using npm.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/webapp/actions.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/plugin/webapp\nnpm install mattermost-redux\n```\n\n----------------------------------------\n\nTITLE: Finding and Cherry-Picking a Commit in Git\nDESCRIPTION: Commands to find the SHA of a pull request merge commit and cherry-pick it into the current branch for manual cherry-picking.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/getting-started/branching.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit log origin/master\ngit cherry-pick [SHA]\n```\n\n----------------------------------------\n\nTITLE: Test Suite Function with Multiple Test Cases\nDESCRIPTION: Shows how to structure multiple test cases within a test suite function, including proper printer cleanup between cases.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-11-04-unit-testing-mmctl-commands.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *MmctlUnitTestSuite) TestMyCommandCmd() {\n    s.Run(\"First test case\", func() {\n        printer.Clean()\n        // ...\n    })\n\n    s.Run(\"First test case\", func() {\n        printer.Clean()\n        // ...\n    })\n\n    s.Run(\"First test case\", func() {\n        printer.Clean()\n        // ...\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Developer Tools for BrowserView in Electron\nDESCRIPTION: This code snippet demonstrates how to open the Developer Tools for a specific BrowserView in the Electron-based Mattermost desktop app. It's used for debugging the dropdown menu view.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/debugging.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthis.view.webContents.openDevTools({mode: 'detach'});\n```\n\n----------------------------------------\n\nTITLE: Examining MySQL EXPLAIN Output for Problematic Query\nDESCRIPTION: EXPLAIN output showing MySQL's decision to use an index_merge strategy instead of a single index, leading to performance issues.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-11-17-mysql-index-merge.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n+------------------------------------------+---------+-------+--------+----------+----------------------------------------------------------------------------------------+\n| id | select_type | table | partitions | type        | possible_keys                                                                                                                        | key                                      | key_len | ref   | rows   | filtered | Extra                                                                                  |\n+----+-------------+-------+------------+-------------+--------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------+---------+-------+--------+----------+----------------------------------------------------------------------------------------+\n|  1 | PRIMARY     | p     | NULL       | index_merge | idx_posts_create_at,idx_posts_delete_at,idx_posts_channel_id,idx_posts_channel_id_update_at,idx_posts_channel_id_delete_at_create_at | idx_posts_channel_id,idx_posts_delete_at | 107,9   | NULL  | 195092 |    50.00 | Using intersect(idx_posts_channel_id,idx_posts_delete_at); Using where; Using filesort |\n|  2 | SUBQUERY    | Posts | NULL       | const       | PRIMARY                                                                                                                              | PRIMARY                                  | 106     | const |      1 |   100.00 | NULL                                                                                   |\n+----+-------------+-------+------------+-------------+--------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------+---------+-------+--------+----------+----------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Initializing Cypress Test Structure for Mattermost E2E Testing\nDESCRIPTION: Sets up the basic structure for a Cypress E2E test, including the describe block, test case with Zephyr ID, and placeholder for test steps and assertions.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-testing.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Integrations/Incoming Webhook', () => {\n  it('MM-T642 Attachment does not collapse', () => {\n    // Put test steps and assertions here\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Non-Admin Access to Settings\nDESCRIPTION: Add settings to GenerateClientConfig method to make them available to non-admin users. Values are encoded as strings for client-side use.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/system_console.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// In client.go\nfunc GenerateClientConfig() {\n    // Add setting for non-admin access\n    config.NewConfigField = *cfg.ServiceSettings.NewConfigField\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Pritunl API using Python\nDESCRIPTION: This Python code demonstrates how to authenticate with the Pritunl API. It creates a function that handles the authentication process by generating the required headers with token, timestamp, nonce, and signature, then makes HTTP requests to the Pritunl server. This is an adaptation of the official Pritunl API documentation.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-05-04-pritunl.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport requests, time, uuid, hmac, hashlib, base64\nBASE_URL = 'https://localhost'\nAPI_TOKEN = 'p7g444S3IZ5wmFvmzWmx14qACXdzQ25b'\nAPI_SECRET = 'OpS9fjxkPI3DclkdKDDr6mqYVd0DJh4i'\n\n\ndef auth_request(method, path, headers=None, data=None):\n    auth_timestamp = str(int(time.time()))\n    auth_nonce = uuid.uuid4().hex\n    auth_string = '&'.join([API_TOKEN, auth_timestamp, auth_nonce,\n        method.upper(), path])\n    auth_string_bytes = bytes(auth_string, 'utf-8')\n    api_secret_bytes = bytes(API_SECRET, 'utf-8')\n\n    auth_signature = base64.b64encode(hmac.new(\n        api_secret_bytes, auth_string_bytes, hashlib.sha256).digest())\n    auth_headers = {\n        'Auth-Token': API_TOKEN,\n        'Auth-Timestamp': auth_timestamp,\n        'Auth-Nonce': auth_nonce,\n        'Auth-Signature': auth_signature,\n    }\n    if headers:\n        auth_headers.update(headers)\n    return getattr(requests, method.lower())(\n        BASE_URL + path,\n        headers=auth_headers,\n        data=data,\n    )\n```\n\n----------------------------------------\n\nTITLE: Localizing Simple Message in Go for Matterpoll Plugin\nDESCRIPTION: This code snippet demonstrates how to localize a simple message using the user's localizer. It defines a message ID and default text, then uses the localizer to translate it.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-10-21-localizing-matterpoll/index.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nl := p.getUserLocalizer(userID)\nresponse, err := l.LocalizeMessage(&i18n.Message{\n\tID:    \"response.vote.counted\",\n\tOther: \"Your vote has been counted.\",\n}\n\n// Send response back\n```\n\n----------------------------------------\n\nTITLE: Updating Android Dependencies Lock File\nDESCRIPTION: Command to update all dependencies to their latest versions in the lock file. This ensures all dependencies are updated while maintaining reproducible builds.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/build-your-own/android.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd android\n./gradlew app:dependencies --update-locks \"*:*\"\n```\n\n----------------------------------------\n\nTITLE: Generated Tracer Output\nDESCRIPTION: Example of the generated tracer code showing the decorator pattern implementation.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-06-10-opentracing.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage animals\n\nimport \"fmt\"\n\ntype AnimalTracer struct {\n\tSpeaker\n}\n\nfunc (a *AnimalTracer) Speak(x int) {\n\tfmt.Printf(\"Running Speak(x) with 'x'=%v \", x)\n\ta.Speaker.Speak(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding or Updating a Specific Dependency Version in Go\nDESCRIPTION: This command adds or updates a dependency to a specific version using Go modules. It then tidies up the go.mod file and synchronizes the vendor directory.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/dependencies.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/pkg/errors@v0.8.1\ngo mod tidy\ngo mod vendor\n```\n\n----------------------------------------\n\nTITLE: Tagging Unextracted Strings with 't' Function in JavaScript\nDESCRIPTION: If a string is not properly extracted, it needs to be tagged using the 't' function. This example demonstrates how to tag a string for translation.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/using-i18n-extract.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nt('new-text-id')\n```\n\n----------------------------------------\n\nTITLE: Using KV Store API in Go (5.2+)\nDESCRIPTION: Example of using the new KV Store API methods (KVSet, KVGet, KVDelete) introduced in Mattermost 5.2 to replace the previous KeyValueStore() method.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/migration.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (p *MyPlugin) ServeHTTP(c *plugin.Context, w http.ResponseWriter, r *http.Request) {\n    key := r.URL.Query().Get(\"key\")\n    switch r.Method {\n    case http.MethodGet:\n        value, _ := p.API.KVGet(key)\n        fmt.Fprintf(w, string(value))\n    case http.MethodPut:\n        value := r.URL.Query().Get(\"value\")\n        p.API.KVSet(key, []byte(value))\n    case http.MethodDelete:\n        p.API.KVDelete(key)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Database Settings for Mattermost\nDESCRIPTION: Environment variable configuration for connecting Mattermost to a PostgreSQL database. These settings specify the database driver and connection string.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/docker.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nMM_SQLSETTINGS_DRIVERNAME=postgres\nMM_SQLSETTINGS_DATASOURCE=postgres://mmuser:mostest@localhost:5432/mattermost_test?sslmode=disable\\u0026connect_timeout=10\n```\n\n----------------------------------------\n\nTITLE: Enhanced Config Tests with Subtests in Go\nDESCRIPTION: Improved test implementation using subtests to verify multiple cases of EnableDeveloper configuration.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-27-advanced-git-tbilisi-free-university.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc TestConfigEnableDeveloper(t *testing.T) {\n\tt.Run(\"empty site URL when nil\", func(t *testing.T) {\n\t\tc1 := Config{\n\t\t\tServiceSettings: ServiceSettings{\n\t\t\t\tEnableDeveloper: nil,\n\t\t\t},\n\t\t}\n\t\tc1.SetDefaults()\n\n\t\trequire.Empty(t, *c1.ServiceSettings.SiteURL)\n\t})\n\n\tt.Run(\"empty site URL when false\", func(t *testing.T) {\n\t\tc1 := Config{\n\t\t\tServiceSettings: ServiceSettings{\n\t\t\t\tEnableDeveloper: NewBool(false),\n\t\t\t},\n\t\t}\n\t\tc1.SetDefaults()\n\n\t\trequire.Empty(t, *c1.ServiceSettings.SiteURL)\n\t})\n\n\tt.Run(\"default site URL when true\", func(t *testing.T) {\n\t\tc1 := Config{\n\t\t\tServiceSettings: ServiceSettings{\n\t\t\t\tEnableDeveloper: NewBool(true),\n\t\t\t},\n\t\t}\n\t\tc1.SetDefaults()\n\n\t\trequire.Equal(t, SERVICE_SETTINGS_DEFAULT_SITE_URL, *c1.ServiceSettings.SiteURL)\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Credential-based Plugin Deployment\nDESCRIPTION: Shell commands to deploy plugin using admin username and password authentication.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/developer-setup.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport MM_SERVICESETTINGS_SITEURL=http://localhost:8065\nexport MM_ADMIN_USERNAME=admin\nexport MM_ADMIN_PASSWORD=password\nmake deploy\n```\n\n----------------------------------------\n\nTITLE: Multiple Response Slash Command Example\nDESCRIPTION: Example of how to send multiple responses from a slash command using the extra_responses parameter. The response includes a main message with test results formatted in markdown, along with two additional messages.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/slash-commands/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 696\n\n{\n    \"response_type\": \"in_channel\",\n    \"text\": \"\\n#### Test results for July 27th, 2017\\n@channel here are the requested test results.\\n\\n| Component  | Tests Run   | Tests Failed                                   |\\n| ---------- | ----------- | ---------------------------------------------- |\\n| Server     | 948         | :white_check_mark: 0                           |\\n| Web Client | 123         | :warning: 2 [(see details)](http://linktologs) |\\n| iOS Client | 78          | :warning: 3 [(see details)](http://linktologs) |\\n\\t\\t      \",\n    \"username\": \"test-automation\",\n    \"icon_url\": \"https://www.mattermost.org/wp-content/uploads/2016/04/icon.png\",\n    \"props\": {\n        \"test_data\": {\n            \"ios\": 78,\n            \"server\": 948,\n            \"web\": 123\n        }\n    },\n    \"extra_responses\": [\n       {\n         \"text\": \"message 2\",\n         \"username\": \"test-automation\"\n       },\n       {\n         \"text\": \"message 3\",\n         \"username\": \"test-automation\"\n       }\n     ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Channel Show Command in Go using Cobra\nDESCRIPTION: Example of creating a new channel show subcommand using the Cobra library. Shows how to define command structure with usage, description and example.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/cli-commands.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar ChannelShowCmd = &cobra.Command{\n    Use:   \"show\",\n    Short: \"Show channel info\",\n    Long:  \"Show channel information, including the name, header, purpose and the number of members.\",\n    Example: \"  channel show --team myteam --channel mychannel\"\n    RunE: showChannelCmdF,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorator Pattern with Struct Embedding in Go\nDESCRIPTION: Shows how to use struct embedding to implement the decorator pattern in Go. It defines a Speaker interface, an Animal struct, and two decorator structs (TraceAnimal and MeasureAnimal) that wrap and extend the Speaker interface.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-06-10-opentracing.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Speaker interface {\n\tSpeak(x int)\n}\n\ntype Animal struct {\n\tName string\n}\n\ntype TraceAnimal struct {\n\tSpeaker\n}\n\ntype MeasureAnimal struct {\n\tSpeaker\n}\n\nfunc (c Animal ) Speak(x int) {\n\tfmt.Println(strings.Repeat(\"I am a \" + c.Name + \" \",x))\n}\n\nfunc (c TraceAnimal) Speak(x int) {\n\tfmt.Printf(\"Running Speak(x) function with x=%d!\\n\",x)\n\tc.Speaker.Speak(x)\n}\n\nfunc (c MeasureAnimal) Speak(x int) {\n\tfmt.Println(\"Timing Speak() function...\")\n\tt := time.Now()\n\tc.Speaker.Speak(x)\n\t\n\tfmt.Printf(\"Speak(%d) took %s\\n\", x, time.Since(t))\n}\n\nfunc main() {\n\ta := Animal{Name: \"Cow\"}\n\tc := TraceAnimal {Speaker: a}\n\td := MeasureAnimal{Speaker: c}\n\td.Speak(2)\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Time Delta Test in Go\nDESCRIPTION: This code snippet demonstrates an improved version of the time delta test. It uses time.Sleep to ensure a minimum time difference between user record creations, making the test more reliable.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-09-29-avoiding-flaky-tests.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc TestTimeDelta(t *testing.T) {\n    store := NewStore()\n\n    user1, err := store.CreateUserRecord(&model.User{Username: \"test1\"})\n    require.NoError(t, user)\n\n    // Ensure the next user has a different CreateAt timestamp.\n    time.Sleep(1 * time.Millisecond)\n\n    user2, err := store.CreateUserRecord(&model.User{Username: \"test2\"})\n    require.NoError(t, user)\n\n    require.NotEqual(t, user1.CreateAt, user2.CreateAt)\n}\n```\n\n----------------------------------------\n\nTITLE: Slack-Compatible Payload Format for Mattermost Incoming Webhook\nDESCRIPTION: This snippet demonstrates the payload format for Slack-compatible requests when no Content-Type header is set. The JSON payload must be prefixed with 'payload='.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/webhooks/incoming/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\npayload={\"text\": \"Hello, this is some text\\nThis is more text. :tada:\"}\n```\n\n----------------------------------------\n\nTITLE: Writing E2E Test Description in JavaScript\nDESCRIPTION: Demonstrates how to write an E2E test description with Zephyr ID and title using JavaScript syntax.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/e2e.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Messaging', () => {\n    it('MM-T109 User can\\'t send the same message repeatedly', () => {\n        // Test steps and assertion here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Translations with React Elements in TypeScript\nDESCRIPTION: Demonstrates using React elements as values within FormattedMessage components to construct translated sentences with embedded links. This approach allows complex formatting but can be difficult for translators to understand.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-12-04-common-i18n-mistakes.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nreturn (\n    <FormattedMessage\n        id='popup.moreInformation'\n        defaultMessage='{link} for more information.'\n        values={{\n            link: (\n                <a\n                    href='https://mattermost.com'\n                    rel='noreferrer'\n                    target='_blank'\n                >\n                    <FormattedMessage\n                        id='popup.moreInformation.link'\n                        defaultMessage='Click here'\n                    />\n                </a>\n            ),\n        }}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkbox Element\nDESCRIPTION: JSON configuration for a checkbox element that creates a boolean input field. Introduced in Mattermost v5.16, used for yes/no or true/false inputs.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-dialogs/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"display_name\": \"Can you please select below\",\n    \"placeholder\": \"The meeting was helpful.\",\n    \"name\": \"meeting_input\",\n    \"type\": \"bool\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Trigger for Column Data Migration in PostgreSQL\nDESCRIPTION: Defines a PostgreSQL function and trigger to automatically update a new column (channel_count) in the status table based on data from the channelmembers table.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/schema-migration-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION public.update_status_channel_count()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n        member_count integer;\nBEGIN\n    select count(*) into member_count from channelmembers where userid=NEW.userid;\n    NEW.channel_count := member_count;\n    RETURN NEW;\nEND\n$function$\n\nCREATE TRIGGER tr_update_status_channel_count\nBEFORE INSERT OR UPDATE ON status\nFOR EACH ROW EXECUTE PROCEDURE update_status_channel_count();\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Commands for Mobile Development\nDESCRIPTION: Essential commands for running Storybook in a mobile development environment. Includes commands for starting Storybook server, running Android/iOS simulators, and launching the development server.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/storybook.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run storybook\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run android\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run ios\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Setting Extended Docker Services for Mattermost Development\nDESCRIPTION: Environment variable configuration for enabling a comprehensive set of Docker services for Mattermost development, including databases, email testing, monitoring, and authentication services.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/docker.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nENABLED_DOCKER_SERVICES=\"postgres mysql inbucket minio openldap dejavu keycloak elasticsearch grafana prometheus promtail loki\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Interface Methods from AST in Go\nDESCRIPTION: Demonstrates how to extract interface methods from an AST node. It checks for the 'Speaker' interface and extracts metadata for each of its methods.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-06-10-opentracing.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nast.Inspect(f, func(n ast.Node) bool {\n\tswitch x := n.(type) {\n\tcase *ast.TypeSpec:\n\t\tif x.Name.Name == \"Speaker\" {\n\t\t\tfor _, method := range x.Type.(*ast.InterfaceType).Methods.List {\n\t\t\t\tmethodName := method.Names[0].Name\n\t\t\t\t// Here we can parse all the required information about the method\n\t\t\t\tmethods[methodName] = extractMethodMetadata(method, src)\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n})\n```\n\n----------------------------------------\n\nTITLE: Decorator Pattern Example in JavaScript\nDESCRIPTION: Shows implementation of the decorator pattern in JavaScript using Proxies to add tracing and timing functionality to methods without modifying the original code.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-06-10-opentracing.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst tracerHandler = {\n  get: function(target, prop, receiver) {\n    if (typeof target[prop] === \"function\") {\n      return function(...args) {\n        console.log(`'${prop} 'called with arguments: `, ...arguments);\n        return target[prop](...arguments);\n      };\n    }\n  }\n};\n\nconst timerHandler = {\n  get: function(target, prop, receiver) {\n    if (typeof target[prop] === \"function\") {\n      return function(...args) {\n        console.log(`starting '${prop}'`);\n        const t1 = window.performance.now();\n\n        const res = target[prop](...arguments);\n        const t2 = window.performance.now();\n\n        console.log(`'${prop}' took ${t2 - t1}ns`);\n        return res;\n      };\n    }\n  }\n};\n\nconst proxy = new Proxy(cow, tracerHandler);\nconst proxy2 = new Proxy(proxy, timerHandler);\nconsole.log(proxy2.feed(20));\nconsole.log(proxy2.speak(3));\n```\n\n----------------------------------------\n\nTITLE: AST Walker Boilerplate for Go Code Analysis\nDESCRIPTION: Boilerplate code that parses all Go files in the api4 directory, allowing for AST-based analysis and transformation. This sets up the framework to find and modify API handler functions.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-10-25-instrumenting-go-code-via-ast.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"go/ast\"\n\t\"go/format\"\n\t\"go/parser\"\n\t\"go/token\"\n\t\"io/ioutil\"\n)\n\nfunc fix(dir string) {\n\tfset := token.NewFileSet()\n\tpkgs, err := parser.ParseDir(fset, dir, nil, parser.ParseComments)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor _, pkg := range pkgs {\n\t\tfor fileName, file := range pkg.Files {\n\t\t\tfmt.Printf(\"working on file %v\\n\", fileName)\n\t\t\tast.Inspect(file, func(n ast.Node) bool {\n                // perform analysis here\n\t\t\t\treturn true\n\t\t\t})\n\n\t\t\tbuf := new(bytes.Buffer)\n\t\t\terr := format.Node(buf, fset, file)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"error: %v\\n\", err)\n\t\t\t} else if fileName[len(fileName)-8:] != \"_test.go\" {\n\t\t\t\tioutil.WriteFile(fileName, buf.Bytes(), 0664)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc main() {\n\tfix(\"./api4\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ReadFile Function in Go with io_uring\nDESCRIPTION: Function to read file contents asynchronously using io_uring. Takes a file path and callback function as parameters, submits read request to the submission queue.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-05-20-hands-on-iouring-go.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc ReadFile(path string, cb func(buf []byte)) error {\n\tf, err := os.Open(path)\n\t// handle error\n\n\tfi, err := f.Stat()\n\t// handle error\n\n\tsubmitChan <- &request{\n\t\tcode:   opCodeRead, // a constant to identify which syscall we are going to make\n\t\tf:      f, \t\t\t// the file descriptor\n\t\tsize:   fi.Size(),\t// size of the file\n\t\treadCb: cb,\t\t\t// the callback to call when the read is done\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Warning Level Logging in User Role Updates\nDESCRIPTION: Illustrates warning level logging for non-critical failures that don't impact overall functionality. Used when operations complete successfully despite encountered issues.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/style-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (a *App) UpdateUserRoles(..) {\n\t..\n\tif result := <-schan; result.NErr != nil {\n\t\t// soft error since the user roles were still updated\n\t\tmlog.Warn(\"Error during updating user roles\", mlog.Err(result.NErr))\n\t}\n\n\ta.InvalidateCacheForUser(userId)\n\t..\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Factory Selector Pattern with Redux\nDESCRIPTION: Demonstrates how to use factory selectors with Redux components for better memoization. Shows implementation of makeMapStateToProps for creating individual selector instances per component.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/react-redux.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// component/my_component/index.jsx\n\n...\n\nimport {getCurrentUser, makeGetUser} from 'selectors/entities/users';\n\n// makeMapStateToProps is called once for each instance of the component on the page. Because of this\n// a separate getUser selector is created for each instance, allowing them to be memoized separately.\nfunction makeMapStateToProps() {\n    const getUser = makeGetUser();\n\n    return (state, ownProps) => {\n        return {\n            currentUser: getCurrentUser(state),\n            otherUser: getUser(state, ownProps.userId)\n        };\n    };\n}\n\n...\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(MyComponent);\n```\n\n----------------------------------------\n\nTITLE: Localizing Message with Variables in Go for Matterpoll Plugin\nDESCRIPTION: This code snippet shows how to localize a message that includes variables. It uses a template with placeholders and provides the data to fill those placeholders.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-10-21-localizing-matterpoll/index.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nl := p.getUserLocalizer(userID)\nresponse, err := l.Localize(&i18n.LocalizeConfig{\n\tDefaultMessage: &i18n.Message{\n\t\tID:    \"poll.message.totalVotes\",\n\t\tOther: \"**Total votes**: {{.TotalVotes}}\",\n\t},\n\tTemplateData:   map[string]interface{}{\"TotalVotes\": numberOfVotes},\n})\n\n// Send response back\n```\n\n----------------------------------------\n\nTITLE: Cryptographic Signature Authentication Example\nDESCRIPTION: Example demonstrating how to use cryptographic signatures for stateless authentication.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-messages/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"user_id\": \"rd49ehbqyjytddasoownkuqrxe\",\n    \"post_id\": \"gqrnh3675jfxzftnjyjfe4udeh\",\n    \"channel_id\": \"j6j53p28k6urx15fpcgsr20psq\",\n    \"team_id\": \"5xxzt146eax4tul69409opqjlf\",\n    \"context\": {\n        \"repo\": \"mattermost/mattermost\",\n        \"pr\": 1234,\n        \"action\": \"merge\",\n        \"signature\": \"mycryptographicsignature\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Data for Mattermost\nDESCRIPTION: This command uses the mmctl tool to generate random sample data in the Mattermost database. It's helpful for populating the database with test data for development and testing purposes.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/developer-workflow.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmmctl sampledata\n```\n\n----------------------------------------\n\nTITLE: Creating Server-Default Localizer in Go for Matterpoll Plugin\nDESCRIPTION: This helper function creates a localizer using the server's default client locale setting. It's used for translating strings that need to be consistent across all users.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-10-21-localizing-matterpoll/index.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (p *MatterpollPlugin) getServerLocalizer() *i18n.Localizer {\n\treturn i18n.NewLocalizer(p.bundle, *p.ServerConfig.LocalizationSettings.DefaultClientLocale)\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Product Menu in Cypress Tests\nDESCRIPTION: Opens the product menu without selecting any specific item. Used for basic menu access in Mattermost testing.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-cheatsheets.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// # Open 'Product menu'\ncy.uiOpenProductMenu();\n```\n\n----------------------------------------\n\nTITLE: Packaging Mattermost Desktop App for Different OS\nDESCRIPTION: Command to package the Mattermost desktop app for different operating systems using electron-builder. The <os> placeholder should be replaced with the target OS.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/packaging-and-releasing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run package:<os>\n```\n\n----------------------------------------\n\nTITLE: Initializing AST Parser for Go Code Analysis\nDESCRIPTION: Sets up the Abstract Syntax Tree (AST) parser to analyze Go code. It opens a file, reads its contents, and parses it into an AST for further inspection.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-06-10-opentracing.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bytes\"\n\t\"flag\"\n\t\"fmt\"\n\t\"go/ast\"\n\t\"go/parser\"\n\t\"go/token\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"path\"\n\t\"strings\"\n\t\"text/template\"\n\n\t\"golang.org/x/tools/imports\"\n)\n\nfunc main() {\n\tfset := token.NewFileSet() // Positions are relative to fset\n\n\tfile, err := os.Open(\"animal.go\")\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Unable to open %s file: %w\", inputFile, err)\n\t}\n\tdefer file.Close()\n\n\tsrc, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tf, err := parser.ParseFile(fset, \"animal.go\", src, parser.AllErrors|parser.ParseComments)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tast.Inspect(f, func(n ast.Node) bool {\n\t\t// ... Handle the found nodes\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Federation Targets\nDESCRIPTION: YAML configuration showing how to define target Prometheus servers for the Federation server to scrape. Each target includes a clusterID label for easier identification in Grafana dashboards.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-12-18-cloud-monitoring.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_configs:\n      - targets:\n        - prometheus1.example.com.\n        labels:\n          clusterID: cluster1\n      - targets:\n        - prometheus2.example.com.\n        labels:\n          clusterID: cluster2\n```\n\n----------------------------------------\n\nTITLE: System Post Action Cookie Secret Generation in Go\nDESCRIPTION: Example demonstrating a common Go gotcha where custom error types don't evaluate to nil when assigned to error interface. This was identified by govet linter.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-01-13-incorporating-golangci-lint.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nnewSecret := &model.SystemPostActionCookieSecret{\n\tSecret: make([]byte, 32),\n}\n_, err := rand.Reader.Read(newSecret.Secret)\nif err != nil {\n\treturn err\n}\n\nsystem := &model.System{\n\tName: model.SYSTEM_POST_ACTION_COOKIE_SECRET,\n}\nv, err := json.Marshal(newSecret)\nif err != nil {\n\treturn err\n}\nsystem.Value = string(v)\n// If we were able to save the key, use it, otherwise log the error.\nif err = a.Srv.Store.System().Save(system); err == nil {\n\tsecret = newSecret\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Bot Account Deactivation Configuration in JSON\nDESCRIPTION: Configuration setting in config.json to control whether bot accounts remain enabled after their owner is deactivated. Setting DisableBotsWhenOwnerIsDeactivated to false keeps bots active after owner deactivation.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/reference/bot-accounts/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"DisableBotsWhenOwnerIsDeactivated\": false\n```\n\n----------------------------------------\n\nTITLE: Modern Plugin Initialization with Registry API\nDESCRIPTION: Demonstrates the current initialization pattern using the registry API, which provides more granular control over component registration and handling different rendering scenarios.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/migration.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport ChannelHeaderButtonIcon from './components/channel_header_button/icon';\nimport MobileChannelHeaderButton from './components/mobile_channel_header_button';\nimport PostTypeZoom from './components/post_type_zoom';\nimport {startZoomMeeting, configureZoom} from './actions/zoom';\n\nclass MyPlugin {\n    initialize(registry) {\n        registry.registerChannelHeaderButtonAction(\n            ChannelHeaderButtonIcon,\n            startZoomMeeting,\n            'Start Zoom Meeting',\n        );\n\n        registry.registerPostTypeComponent('custom_zoom', PostTypeZoom);\n\n        registry.registerMainMenuAction(\n            'Zoom Configuration',\n            configureZoom,\n            MobileChannelHeaderButton,\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus using Helm\nDESCRIPTION: A simple Helm command to install the default version of Prometheus server in a Kubernetes cluster for testing purposes.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-12-18-cloud-monitoring.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install stable/prometheus\n```\n\n----------------------------------------\n\nTITLE: Setting Up VS Code Development Environment\nDESCRIPTION: Commands for configuring VS Code for Focalboard development, including installing dependencies and setting up the development environment with automatic rebuilding of the web app.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/focalboard/personal-server-setup-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake prebuild\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd webapp && npm run watchdev\n```\n\n----------------------------------------\n\nTITLE: Installing React Native CLI Tools\nDESCRIPTION: Global installation command for React Native command line tools using npm.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm -g install react-native-cli\n```\n\n----------------------------------------\n\nTITLE: Inline Variable Declaration in Idiomatic Go\nDESCRIPTION: This snippet shows a correct example of idiomatic Go code using a single inline variable declaration within a conditional statement.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2018-10-18-idiomatic-error-handling.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif err := a.IsPhase2MigrationCompleted(); err != nil {\n    return nil, err\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Systemd Unit File for Mattermost Push Proxy (Bash)\nDESCRIPTION: This snippet creates a systemd unit file to manage the Mattermost Push Notification Service. It sets up the service to run on boot and log output to syslog.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/push-notifications/service.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"[Unit]\nDescription=Mattermost Push Notification Service\n\n[Service]\nType=oneshot\nExecStart=/bin/sh -c '/home/ubuntu/mattermost-push-proxy/bin/mattermost-push-proxy | logger'\nWorkingDirectory=/home/ubuntu/mattermost-push-proxy\n\n[Install]\nWantedBy=multi-user.target\" >> /etc/systemd/system/mattermost-push-proxy.service\n```\n\n----------------------------------------\n\nTITLE: Generating Code with Templates\nDESCRIPTION: Example of using Go template to process and format generated code with proper imports.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-06-10-opentracing.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// Create output buffer\nout := bytes.NewBufferString(\"\")\n// Parse the template and pass it the helper functions\nt := template.Must(template.New(\"my.go.tmpl\").Funcs(helperFuncs).Parse(tracerTemplate))\n// Execute the template and pass it the metadata we collected before\nt.Execute(out, metadata)\n// Add needed imports and format the code before printing\nformattedCode, err := imports.Process(\"animal_tracer.go\", out.Bytes(), &imports.Options{Comments: true})\nif err != nil {\n\tfmt.Printf(\"cannot format source code, might be an error in template: %s\\n\", err)\n\treturn err\n}\n// print it out!\nfmt.Println(string(formattedCode))\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Settings for Inbucket with Mattermost\nDESCRIPTION: Environment variable configuration for connecting Mattermost to the Inbucket email testing service. These settings specify SMTP server details for email delivery during development.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/docker.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nMM_EMAILSETTINGS_ENABLESMTPAUTH=false\nMM_EMAILSETTINGS_SMTPUSERNAME=\nMM_EMAILSETTINGS_SMTPPASSWORD=\nMM_EMAILSETTINGS_SMTPSERVER=localhost\nMM_EMAILSETTINGS_SMTPPORT=10025\n```\n\n----------------------------------------\n\nTITLE: Using Basic Selectors in JavaScript\nDESCRIPTION: Demonstrates how to use simple selectors to retrieve data from the Redux store. These selectors directly access specific parts of the state without additional computation.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/selectors.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst currentUser = getCurrentUser(state);\nconst currentTeam = getCurrentTeam(state);\n```\n\n----------------------------------------\n\nTITLE: Injecting Tracing Code in Go API Handlers\nDESCRIPTION: Example of the tracing code that needs to be injected at the beginning of every API handler for instrumentation purposes.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-10-25-instrumenting-go-code-via-ast.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n\tspan, ctx := tracing.StartSpanWithParentByContext(c.App.Context, \"api4:apiCall\")\n\tc.App.Context = ctx\n    defer span.Finish()\n```\n\n----------------------------------------\n\nTITLE: Complete Unit Test Example for User Search Command\nDESCRIPTION: Demonstrates a full test case for the user search command, including mock setup, execution, and assertions using testify suite.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-11-04-unit-testing-mmctl-commands.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *MmctlUnitTestSuite) TestSearchUserCmd() {\n\ts.Run(\"Search for an existing user\", func() {\n\t\temailArg := \"example@example.com\"\n\t\tmockUser := model.User{Username: \"ExampleUser\", Email: emailArg}\n\n\t\ts.client.\n\t\t\tEXPECT().\n\t\t\tGetUserByEmail(emailArg, \"\").\n\t\t\tReturn(&mockUser, &model.Response{Error: nil}).\n\t\t\tTimes(1)\n\n\t\terr := searchUserCmdF(s.client, &cobra.Command{}, []string{emailArg})\n\t\ts.Require().Nil(err)\n\t\ts.Require().Equal(&mockUser, printer.GetLines()[0])\n\t\ts.Require().Len(printer.GetErrorLines(), 0)\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux Action Creator in TypeScript\nDESCRIPTION: Example of a function that creates a Redux action object for selecting a channel.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/actions.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction selectChannel(channelId: string) {\n    return {\n        type: 'SELECT_CHANNEL',\n        data: channelId,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Dependency in Go\nDESCRIPTION: After removing all references to a dependency in the code, these commands remove it from the go.mod file and the vendor directory.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/dependencies.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo mod tidy\ngo mod vendor\n```\n\n----------------------------------------\n\nTITLE: Sample Configuration Structure in JSON\nDESCRIPTION: Example structure of the config.json file that stores user settings and server configurations. This is the main configuration file used by the desktop application.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/architecture/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config.json\": {\n    \"servers\": [],\n    \"settings\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Inline Variables in Idiomatic Go\nDESCRIPTION: This snippet demonstrates a correct example of idiomatic Go code using multiple inline variable declarations within a conditional statement.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2018-10-18-idiomatic-error-handling.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nif cacheItem, ok := cache.Get(key); ok {\n    if s.metrics != nil {\n        s.metrics.IncrementMemCacheHitCounter(cache.Name())\n    }\n    result := NewSupplierResult()\n    result.Data = cacheItem\n    return result\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Docker Services for Mattermost Development\nDESCRIPTION: Environment variable configuration for enabling the minimal set of Docker services required for Mattermost development, including postgres, mysql and inbucket.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/docker.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nENABLED_DOCKER_SERVICES=\"postgres mysql inbucket\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Textarea Element in Mattermost Dialog\nDESCRIPTION: JSON configuration for a textarea element that creates a multi-line text input field with a maximum length of 3,000 characters. Used for collecting longer text input like descriptions.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-dialogs/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"display_name\": \"Ticket Description\",\n    \"name\": \"ticket_description\",\n    \"type\": \"textarea\",\n    \"help_text\": \"Provide description for your ticket.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Internationalization Command\nDESCRIPTION: Command to extract and update English translation strings in the web app\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/developer-workflow.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake i18n-extract\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics for Prometheus in Mattermost\nDESCRIPTION: Environment variable configuration for enabling metrics collection in Mattermost, which allows Prometheus to scrape metrics data from the Mattermost instance. Requires an Enterprise license.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/docker.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nMM_METRICSSETTINGS_ENABLE=true\n```\n\n----------------------------------------\n\nTITLE: Adding Import Statement Using AST\nDESCRIPTION: Demonstrates how to add an import statement for the tracing module using the golang.org/x/tools/go/ast/astutil package.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-10-25-instrumenting-go-code-via-ast.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nastutil.AddImport(fset, file, \"github.com/mattermost/mattermost-server/services/tracing\")\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request with Basic Message\nDESCRIPTION: Example showing test results display in a channel using an HTTP POST request with JSON payload containing a formatted message with test statistics.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/webhooks/incoming/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /hooks/xxx-generatedkey-xxx HTTP/1.1\nHost: your-mattermost-server.com\nContent-Type: application/json\n\n{\n  \"channel\": \"town-square\",\n  \"username\": \"Winning-bot\",\n  \"text\": \"#### We won a new deal!\",\n  \"props\": {\n    \"card\": \"Salesforce Opportunity Information:\\n\\n [Opportunity Name](https://salesforce.com/OPPORTUNITY_ID)\\n\\n-Salesperson: **Bob McKnight** \\n\\n Amount: **$300,020.00**\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying API Handler Functions via AST in Go\nDESCRIPTION: AST analysis code that identifies API handler functions by examining their parameter structure. It looks for functions with exactly three parameters of specific types and names: c *Context, w http.ResponseWriter, r *http.Request.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-10-25-instrumenting-go-code-via-ast.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc FormatNode(node ast.Node) string {\n\tbuf := new(bytes.Buffer)\n\t_ = format.Node(buf, token.NewFileSet(), node)\n\treturn buf.String()\n}\n// retreive function's parameter list\nparams  := fn.Type.Params.List\n// we are only interested in functions with exactly 3 parameters\nif  len(params) ==  3 {\n\tfirst_parameter_is_c := FormatNode(params[0].Names[0]) ==  \"c\"  &&  FormatNode(params[0].Type) ==  \"*Context\"\n\tsecond_parameter_is_w := FormatNode(params[1].Names[0]) ==  \"w\"  &&  FormatNode(params[1].Type) ==  \"http.ResponseWriter\"  \n\tthird_parameters_is_r := FormatNode(params[2].Names[0]) ==  \"r\"  &&  FormatNode(params[2].Type) ==  \"*http.Request\"\n\tif first_parameter_is_c && second_parameter_is_w && third_parameters_is_r {\n\t\t// this is an API handler!\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Developer Tools for URL View in Electron\nDESCRIPTION: This code snippet shows how to open the Developer Tools for the URL view in the Mattermost desktop app. It's added to the showURLView function to enable debugging of the ephemeral URL preview feature.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/debugging.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nurlView.webContents.openDevTools({mode: 'detach'});\n```\n\n----------------------------------------\n\nTITLE: Basic Git Workflow for Feature Development\nDESCRIPTION: This snippet illustrates a typical Git workflow for developing features, including creating commits and pushing to a remote branch.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-27-advanced-git-tbilisi-free-university.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout feature-branch\nvim ...\ngit commit -m 'wip'\nvim ...\ngit commit -m 'wip'\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Transposed Adjacency List for Reversed Group Relationships in Go\nDESCRIPTION: This Go code demonstrates how to represent the transposed (reversed) directed graph of LDAP nested groups. This is used to find all groups a person belongs to, as shown in the article's 'figure 2'.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-06-05-ldap-nested-groups-modelling-and-representation-in-code.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntransposedAdjacencyList := map[string][]string{\n    \"person/miranda\":          []string{\"group/developers\"},\n    \"group/senior-developers\": []string{\"group/developers\"},\n    \"person/suzanne\":          []string{\"group/senior-developers\"},\n    \"group/developers\":        []string{},\n}\n```\n\n----------------------------------------\n\nTITLE: Bundling the Mattermost plugin for distribution\nDESCRIPTION: Bash commands to compile the plugin with Webpack and create a distributable tar.gz file containing the plugin manifest and compiled JavaScript.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/webapp/hello-world.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./node_modules/.bin/webpack --mode=production\n\nmkdir -p com.mattermost.webapp-hello-world\ncp -r dist/main.js com.mattermost.webapp-hello-world/\ncp plugin.json com.mattermost.webapp-hello-world/\ntar -czvf plugin.tar.gz com.mattermost.webapp-hello-world\n```\n\n----------------------------------------\n\nTITLE: Incoming Webhook URL Format in Mattermost\nDESCRIPTION: This snippet shows the format of the webhook URL generated by Mattermost. The URL contains a unique key for each webhook.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/webhooks/incoming/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://your-mattermost-server.com/hooks/xxx-generatedkey-xxx\n```\n\n----------------------------------------\n\nTITLE: Correct Internationalized Possessive in React Intl\nDESCRIPTION: Proper implementation of possessive grammar in React Intl, allowing for correct translation across languages.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-12-04-common-i18n-mistakes.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreturn (\n    <FormattedMessage\n        id='post.commentedOn'\n        defaultMessage=\"Commented on @{username}'s message:\"\n        values={{username: rootPost.username}}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Cypress Test Case with Known Issue\nDESCRIPTION: Example of how to annotate a test case with a known issue Jira key in the test title.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-testing.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Upload Files', () => {\n  it('MM-T2261 Upload SVG and post -- KNOWN ISSUE: MM-38982', () => {\n    // Test steps and assertion here\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Database Migration CLI Command\nDESCRIPTION: Command for rolling back a migration using the morph CLI tool. Used when a migration needs to be reverted.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/schema-migration-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmorph apply down --driver {your-driver} --dsn \"{your-dsn}\" --path {path-to-your-driver-specific-migration-files} --number 1\n```\n\n----------------------------------------\n\nTITLE: Interface Generation and Formatting\nDESCRIPTION: Code to generate and format the final interface file with proper imports using the golang.org/x/tools/imports package.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-15-instrumenting-go-code-via-ast-2.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nsort.Strings(funcs)\nout := bytes.NewBufferString(\"\")\n\nt := template.Must(template.New(\"\").Parse(outputTemplate))\nerr = t.Execute(out, map[string]interface{}{\n\t\"Content\": strings.Join(funcs, \"\\n\"),\n\t\"Name\":    ifName,\n\t\"Package\": pkgName,\n})\n\nformatted, err := imports.Process(outputFile, out.Bytes(), &imports.Options{Comments: true})\nif err != nil {\n\tlog.Panic(err)\n}\nerr = ioutil.WriteFile(outputFile, formatted, 0644)\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with Playwright\nDESCRIPTION: Commands for executing end-to-end tests using Playwright and RobotJS. These tests can be run with or without rebuilding the app, and can be filtered using grep patterns.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:e2e\nnpm run test:e2e:nobuild\nnpm run test:e2e:run -- --grep back_button\n```\n\n----------------------------------------\n\nTITLE: Updating Plugin Entry Point in Go (5.2+)\nDESCRIPTION: Changes required for the plugin entry point in Go code when migrating from Mattermost 5.1 and earlier to 5.2 and later.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/migration.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/mattermost/mattermost/server/public/plugin\"\n\nfunc main() {\n    plugin.ClientMain(&HelloWorldPlugin{})\n}\n```\n\n----------------------------------------\n\nTITLE: Internationalized Button using React Intl\nDESCRIPTION: Correct implementation of an internationalized button using React Intl's FormattedMessage component.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-12-04-common-i18n-mistakes.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FormattedMessage} from 'react-intl';\n\nfunction MyButton() {\n    return (\n        <button>\n            <FormattedMessage\n                id='my_button.label'\n                defaultMessage='Click me!'\n            />\n        </button>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS EC2 Instance with Fixed Network Interface for Pritunl\nDESCRIPTION: This bash script installs AWS CLI, attaches a Network Interface to an EC2 instance, and configures the instance to use the secondary ENI. It retrieves instance metadata, identifies an available network interface tagged for Pritunl, and creates a netplan configuration for the secondary interface.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-05-04-pritunl.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# -----  Add fixed Network Interface -----\nprintf \"\\n### Installing AWS CLI ###\\n\"\napt  install awscli -y\n\nprintf \"\\n### Attaching ENI to instance ###\\n\"\nINSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id)\nMACS=$(curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/ | head -n1)\nSUBNETID=$(curl \"http://169.254.169.254/latest/meta-data/network/interfaces/macs/$MACS/subnet-id\")\nNETWORKINTERFACEID=$(aws ec2 describe-network-interfaces --filters Name=tag:OnlyFor,Values=pritunl Name=status,Values=available Name=subnet-id,Values=$SUBNETID --query 'NetworkInterfaces[0].NetworkInterfaceId' --region us-east-1 --output text)\nNETWORKINTERFACEIP=$(aws ec2 describe-network-interfaces --network-interface-ids $NETWORKINTERFACEID --region us-east-1 --query 'NetworkInterfaces[].[PrivateIpAddress]' --output text)\naws ec2 attach-network-interface --network-interface-id $NETWORKINTERFACEID --instance-id $INSTANCEID --device-index 1 --region us-east-1\n\nprintf \"\\n### Configuring instance to use secondary ENI ###\\n\"\nSUFFIXDEFAULTIP=$(echo $NETWORKINTERFACEIP | sed 's/\\.[^.]*$//')\ncat <<EOF > /etc/netplan/51-eth1.yaml\nnetwork:\n  version: 2\n  renderer: networkd\n  ethernets:\n    eth1:\n      addresses:\n       - $NETWORKINTERFACEIP/20\n      dhcp4: no\n      routes:\n       - to: 0.0.0.0/0\n         via: $SUFFIXDEFAULTIP.1 # Default gateway\n         table: 1000\n       - to: $NETWORKINTERFACEIP\n         via: 0.0.0.0\n         scope: link\n         table: 1000\n      routing-policy:\n        - from: $NETWORKINTERFACEIP\n          table: 1000\nEOF\nnetplan --debug apply\n```\n\n----------------------------------------\n\nTITLE: Implementing Mattermost E2E Test Steps with Cypress\nDESCRIPTION: Demonstrates how to implement specific E2E test steps using Cypress commands, including posting webhooks, interacting with UI elements, and making assertions.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-testing.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// # Post the incoming webhook with a text attachment\nconst content = '[very long lorem ipsum test text]';\nconst payload = {\n  channel: testChannel.name,\n  attachments: [{fallback: 'testing attachment does not collapse', pretext: 'testing attachment does not collapse', text: content}],\n};\ncy.postIncomingWebhook({url: incomingWebhook.url, data: payload, waitFor: 'attachment-pretext'});\n\n// * Check \"show more\" button is visible and click\ncy.getLastPostId().then((postId) => {\n  const postMessageId = `#${postId}_message`;\n  cy.get(postMessageId).within(() => {\n    cy.get('#showMoreButton').scrollIntoView().should('be.visible').and('have.text', 'Show more').click();\n  });\n});\n// # Type /collapse and press Enter\nconst collapseCommand = 'collapse';\ncy.uiGetPostTextBox().type(`/${collapseCommand} {enter}`);\n\ncy.getNthPostId(-2).then((postId) => {\nconst postMessageId = `#${postId}_message`;\ncy.get(postMessageId).within(() => {\n  // * Verify \"show more\" button says \"Show less\"\n  cy.get('#showMoreButton').scrollIntoView().should('be.visible').and('have.text', 'Show less');\n  // * Verify gradient\n  cy.get('#collapseGradient').should('not.be.visible');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating LDAP Groups with Nested Structure using LDIF\nDESCRIPTION: This LDIF snippet demonstrates how to create two LDAP groups ('developers' and 'senior-developers') with nested group membership. The developers group contains both a user and another group as members.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-06-05-ldap-nested-groups-modelling-and-representation-in-code.md#2025-04-23_snippet_0\n\nLANGUAGE: ldif\nCODE:\n```\ndn: cn=developers,ou=groups,dc=www,dc=test,dc=com\nchangetype: add\nobjectclass: groupOfNames\nmember: uid=miranda,ou=users,dc=www,dc=test,dc=com\nmember: cn=senior-developers,ou=groups,dc=www,dc=test,dc=com\n\ndn: cn=senior-developers,ou=groups,dc=www,dc=test,dc=com\nchangetype: add\nobjectclass: groupOfNames\nmember: uid=suzanne,ou=users,dc=www,dc=test,dc=com\n```\n\n----------------------------------------\n\nTITLE: Using the sign-android Script for Mattermost Android App Signing\nDESCRIPTION: This bash script is used to sign unsigned Android APK files for the Mattermost mobile app. It allows specifying package ID, Google services configuration, and custom display name. The script handles the extraction, modification, and signing process.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/unsigned/android.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage: sign-android <unsigned apk file>\n\t\t[-e|--extract path]\n\t\t[-p|--package-id packageID]\n\t\t[-g|--google-services path]\n\t\t[-d|--display-name displayName]\n\t\toutputApk\nUsage: sign-android -h|--help\nOptions:\n\t-e, --extract path\t\t\t    (Optional) Path to extract the unsigned APK file.\n                                    By default the path of the unsigned APK is used.\n\n\t-p, --package-id packageID\t\t(Optional) Specify the unique Android application ID.\n\n\t-g, --google-services path\t\t(Optional) Path to the google-services.json file.\n\t\t\t\t\t\t\t        Will setup the Firebase to receive Push Notifications.\n\t\t\t\t\t\t\t        Warning: will apply only if packageID is set.\n\n\t-d, --display-name displayName\t(Optional) Specify new application display name.\n                                    By default \"Mattermost\" is used.\n\n\t-h, --help\t\t\t\t        Display help message.\n```\n\n----------------------------------------\n\nTITLE: Legacy Plugin Initialization with registerComponents\nDESCRIPTION: Shows the older initialization pattern where plugins received a registerComponents callback to configure components, post types, and menu overrides in a single call.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/migration.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport ChannelHeaderButton from './components/channel_header_button';\nimport MobileChannelHeaderButton from './components/mobile_channel_header_button';\nimport PostTypeZoom from './components/post_type_zoom';\nimport {configureZoom} from './actions/zoom';\n\nclass MyPlugin {\n    initialize(registerComponents) {\n        registerComponents(\n            {ChannelHeaderButton, MobileChannelHeaderButton},\n            {custom_zoom: PostTypeZoom},\n            {\n                id: 'zoom-configuration',\n                text: 'Zoom Configuration',\n                action: configureZoom,\n            },\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request with Auth Token\nDESCRIPTION: Example HTTP GET request to verify bot authentication using the session token in the Authorization header.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/faq/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v4/users/me HTTP/1.1\nAuthorization: bearer <yourtokenhere>\nHost: your-mattermost-url.com\n```\n\n----------------------------------------\n\nTITLE: Unmarshalling Plugin Configuration in Go (Pre-5.6)\nDESCRIPTION: Example of how plugin configuration was automatically unmarshalled onto the struct embedding MattermostPlugin before Mattermost 5.6. This approach is no longer supported due to concurrency issues.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/migration.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Plugin struct {\n    plugin.MattermostPlugin\n\n    Greeting string\n}\n\nfunc (p *Plugin) ServeHTTP(c *plugin.Context, w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"Hello %s!\", p.Greeting)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining io_uring Enter System Call in C\nDESCRIPTION: Definition of the io_uring_enter system call which submits requests to the kernel. It specifies how many entries to process, how many completions to wait for, and other control parameters.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-05-20-hands-on-iouring-go.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint io_uring_enter(unsigned int fd, unsigned int to_submit, unsigned int min_complete, unsigned int flags, sigset_t sig);\n```\n\n----------------------------------------\n\nTITLE: Releasing Mattermost Desktop App with Shell Script\nDESCRIPTION: Shell script commands to release a new version of the Mattermost desktop app. The script increments the version number, creates a tag, and generates a commit. Different options are available for patch, release candidate, and final versions.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/packaging-and-releasing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n// generates a patch version release candidate, will increment x of v0.0.x (so v5.0.1 becomes v5.0.2-rc1)\n$ ./scripts/release.sh patch\n\n// generates a release candidate version, on top of a current release candidate (so v5.0.2-rc1 becomes v5.0.2-rc2)\n$ ./scripts/release.sh rc\n\n// generates a final version, on top of a current release candidate (so v5.0.2-rc2 becomes v5.0.2)\n$ ./scripts/release.sh final\n```\n\n----------------------------------------\n\nTITLE: Registering Channel Command Flags in Go\nDESCRIPTION: Example of initializing and registering command flags and subcommands using Cobra's initialization function.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/cli-commands.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n    ...\n\n    ChannelShowCmd.Flags().String(\"team\", \"\", \"Team name or ID\")\n    ChannelShowCmd.Flags().String(\"channel\", \"\", \"Channel name or ID\")\n    ...\n    ChannelCmd.AddCommand(\n        ...\n        ChannelShowCmd,\n    )\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Trust Signer Command\nDESCRIPTION: Command to add a signer to a Docker repository with content trust enabled. Requires root key access and creates repository trust on first run.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-10-28-docker-content-trust-in-gitlab-with-delegation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker trust signer add --key public-key-of-signer.pub signer-name registry/company/repository\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Database Settings for Mattermost\nDESCRIPTION: Environment variable configuration for connecting Mattermost to a MySQL database. These settings specify the database driver and connection string with appropriate charset and timeout parameters.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/docker.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nMM_SQLSETTINGS_DRIVERNAME=mysql\nMM_SQLSETTINGS_DATASOURCE=mmuser:mostest@tcp(localhost:3306)/mattermost_test?charset=utf8mb4,utf8\\u0026readTimeout=30s\\u0026writeTimeout=30s\n```\n\n----------------------------------------\n\nTITLE: LDAP Query for Recursive Group Members using Extensible Match Operator\nDESCRIPTION: This LDAP filter uses the LDAP_MATCHING_RULE_IN_CHAIN extensible match operator to recursively retrieve all members of the 'developers' group, including those in nested groups.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-06-05-ldap-nested-groups-modelling-and-representation-in-code.md#2025-04-23_snippet_1\n\nLANGUAGE: ldif\nCODE:\n```\n(&\n    (objectClass=person)\n    (memberOf:1.2.840.113556.1.4.1941:=cn=developers,ou=groups,dc=www,dc=test,dc=com)\n)\n```\n\n----------------------------------------\n\nTITLE: Signing Mattermost Android App with Custom Settings\nDESCRIPTION: This bash command demonstrates how to use the sign-android script to sign the Mattermost Android app. It specifies a custom package identifier, Google services configuration file, and display name for the app.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/unsigned/android.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./sign-android Mattermost-unsigned.apk -p com.example.test -g google-services.json -d \"My App\" MyApp-signed.apk\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Element in Mattermost Dialog\nDESCRIPTION: Configuration for a radio button element in Mattermost dialogs. Demonstrates how to create a department selection radio input with multiple options and help text.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-dialogs/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"display_name\": \"Which department do you work in?\",\n    \"name\": \"department\",\n    \"type\": \"radio\",\n    \"options\": [\n        {\n            \"text\": \"Engineering\",\n            \"value\": \"engineering\"\n        },\n        {\n            \"text\": \"Sales\",\n            \"value\": \"sales\"\n        },\n        {\n            \"text\": \"Administration\",\n            \"value\": \"administration\"\n        }\n    ],\n    \"help_text\": \"Please indicate your department as of January 1.\",\n    \"default\": \"engineering\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Federation in values.yaml\nDESCRIPTION: YAML configuration for setting up Prometheus Federation server. This configuration replaces the standard scrape_configs with a federate job that collects metrics from other Prometheus servers.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-12-18-cloud-monitoring.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus.yml:\n    rule_files:\n      - /etc/config/rules\n      - /etc/config/alerts\n\n    scrape_configs:\n      - job_name: 'federate'\n        scrape_interval: 15s\n\n        honor_labels: true\n        metrics_path: '/federate'\n\n        params:\n          'match[]':\n            - '{job=\"prometheus\"}'\n            - '{__name__=~\"job:.*\"}'\n\n        static_configs:\n          - targets:\n            - 'prometheus-server:80'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating git revert in Bash\nDESCRIPTION: This code snippet demonstrates how to use git revert to undo changes from a specific commit. It clones the Mattermost repository, checks out a specific version, finds the target commit, and reverts it.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-27-advanced-git-tbilisi-free-university.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Checkout the mattermost-server repository\ngit clone https://github.com/mattermost/mattermost.git\ncd mattermost-server\n\n# Go back in time to the v4.9.0 tag\ngit checkout -b test-git-revert\ngit reset --hard v4.9.0\n\n# Find the offending commit\ngit log --author Jesse\ngit show 4b675b347b5241def7807fab5e01ce9b98531815\ngit revert --no-commit 4b675b347b5241def7807fab5e01ce9b98531815\n\n# Examine and commit the differences\ngit diff --cached\ngit commit\n```\n\n----------------------------------------\n\nTITLE: File Structure for Mattermost E2E Testing\nDESCRIPTION: This snippet shows the folder structure for E2E tests in the Mattermost repository, including key directories and files for Cypress testing.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-testing.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n|-- e2e-tests\n  |-- cypress\n    |-- tests\n      |-- fixtures\n      |-- integration\n      |-- plugins\n      |-- support\n      |-- utils\n    |-- cypress.config.ts\n    |-- package.json\n```\n\n----------------------------------------\n\nTITLE: Defining Structs for Method Metadata in Go\nDESCRIPTION: Defines structs to store metadata about method parameters and return types. This is used to collect information about interface methods during AST parsing.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-06-10-opentracing.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype methodParam struct {\n\tName string\n\tType string\n}\n\ntype methodData struct {\n\tParams        []methodParam\n\tResults       []string\n}\n\n// For each found method we'll store its name, params with their types, and return types in methods := map[string]methodData {}\n```\n\n----------------------------------------\n\nTITLE: Converting and Configuring Apple Push Notification Certificates (Bash)\nDESCRIPTION: This snippet provides a series of commands to convert an Apple Push Notification SSL Certificate to the correct format, extract the private key, and create a valid certificate bundle for use with Mattermost.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/push-notifications/service.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -in aps.cer -inform DER -out aps_production.pem\nopenssl pkcs12 -in Certificates.p12 -out intermediate.pem -nodes -clcerts\nopenssl rsa -in intermediate.pem -out intermediate_rsa_priv.pem\nsed -i '/^-----BEGIN PRIVATE KEY-----$/,$d' intermediate.pem\ncat intermediate.pem intermediate_rsa_priv.pem >> aps_production_priv.pem && rm intermediate.pem intermediate_rsa_priv.pem\nopenssl s_client -connect gateway.push.apple.com:2195 -cert aps_production.pem -key aps_production_priv.pem\n```\n\n----------------------------------------\n\nTITLE: Handling SQL Compliance Store Error Checking in Go\nDESCRIPTION: Example of a bug where err.Error() would cause a null pointer exception when err is nil. This was caught by the govet linter.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-01-13-incorporating-golangci-lint.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nobj, err := us.GetReplica().Get(model.Compliance{}, id)\nif err != nil {\n\treturn nil, model.NewAppError(\"SqlComplianceStore.Get\", \"store.sql_compliance.get.finding.app_error\", nil, err.Error(), http.StatusInternalServerError)\n}\nif obj == nil {\n\treturn nil, model.NewAppError(\"SqlComplianceStore.Get\", \"store.sql_compliance.get.finding.app_error\", nil, err.Error(), http.StatusNotFound)\n}\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN Output Showing Suboptimal Index Selection\nDESCRIPTION: The EXPLAIN output showing MySQL's query execution plan. It reveals that MySQL chose the idx_posts_create_at index instead of the more suitable composite index that includes all three columns in the WHERE clause.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-11-17-mysql-index-merge.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN SELECT Id FROM Posts WHERE ChannelId = '9tne5g44z7f1zn4z1whebb7jna' AND DeleteAt = 0 AND CreateAt < 1582683608013 ORDER BY CreateAt DESC LIMIT 1;\n+----+-------------+-------+------------+-------+--------------------------------------------------------------------------------------------------------------------------------------+---------------------+---------+------+------+----------+----------------------------------+\n| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |\n+----+-------------+-------+------------+-------+--------------------------------------------------------------------------------------------------------------------------------------+---------------------+---------+------+------+----------+----------------------------------+\n| 1 | SIMPLE | Posts | NULL | index | idx_posts_create_at,idx_posts_delete_at,idx_posts_channel_id,idx_posts_channel_id_update_at,idx_posts_channel_id_delete_at_create_at | idx_posts_create_at | 9 | NULL | 3 | 10.57 | Using where; Backward index scan |\n+----+-------------+-------+------------+-------+--------------------------------------------------------------------------------------------------------------------------------------+---------------------+---------+------+------+----------+----------------------------------+\n1 row in set (0.06 sec)\n```\n\n----------------------------------------\n\nTITLE: Flaky Team Name Generation in Go\nDESCRIPTION: This code snippet shows a potential issue with random team name generation. The test may fail if the randomly generated ID starts with a reserved prefix.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-09-29-avoiding-flaky-tests.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nt1 := model.Team{}\nt1.DisplayName = \"Name\"\nt1.Name = model.NewId()\nt1.Email = MakeEmail()\nt1.Type = model.TEAM_OPEN\n_, err := ss.Team().Save(&t1)\nrequire.Nil(t, err)\n```\n\n----------------------------------------\n\nTITLE: LDAP Query for Finding All Groups a User Belongs To\nDESCRIPTION: This LDAP filter uses the LDAP_MATCHING_RULE_IN_CHAIN operator to find all groups that the user 'suzanne' belongs to, including groups that contain other groups she's a member of.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-06-05-ldap-nested-groups-modelling-and-representation-in-code.md#2025-04-23_snippet_2\n\nLANGUAGE: ldif\nCODE:\n```\n(member:1.2.840.113556.1.4.1941:=uid=suzanne,ou=users,dc=www,dc=test,dc=com)\n```\n\n----------------------------------------\n\nTITLE: Running Android App on Connected Device\nDESCRIPTION: This command compiles and runs the Mattermost mobile app on a connected Android device. It's used after setting up USB debugging and connecting the device.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/run/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run android\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Certificate Using OpenSSL (DER format)\nDESCRIPTION: This command uses OpenSSL to connect to the server, retrieve its SSL certificate, and save it in DER format. It's a crucial step in obtaining the certificate for SSL pinning implementation.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/build-your-own/ssl-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nopenssl s_client -connect yourserver.com:443 -showcerts < /dev/null | openssl x509 -outform DER -out yourserver.cer\n```\n\n----------------------------------------\n\nTITLE: Converting iOS Push Notification Certificate (Bash)\nDESCRIPTION: These commands convert the downloaded iOS push notification certificate to the required format and extract the private key for use with the push notification service.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/push-notifications/service.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ openssl x509 -in aps.cer -inform DER -out aps_production.pem\n$ openssl pkcs12 -in Certificates.p12 -out aps_production_priv.pem -nodes -clcerts -passin pass: -legacy -rc2\n$ openssl s_client -connect gateway.push.apple.com:2195 -cert aps_production.pem -key aps_production_priv.pem\n```\n\n----------------------------------------\n\nTITLE: Cherry-Picking a Commit in Git\nDESCRIPTION: This snippet demonstrates how to create a new branch from a tag and cherry-pick a specific commit, which results in merge conflicts.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-27-advanced-git-tbilisi-free-university.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b test-git-cherrypick v5.20.0\ngit cherry-pick 9a51c73f6428b70e31fc8c35de770b91270e6bba\n```\n\n----------------------------------------\n\nTITLE: Posts Table Schema Definition in MySQL\nDESCRIPTION: The table schema for the Posts table showing its structure and the available indexes, including the single-column and multi-column indexes relevant to the query optimization.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-11-17-mysql-index-merge.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nmysql> show CREATE TABLE Posts;\nCREATE TABLE `Posts` (\n  `Id` varchar(26) NOT NULL,\n  `CreateAt` bigint(20) DEFAULT NULL,\n  `UpdateAt` bigint(20) DEFAULT NULL,\n  `EditAt` bigint(20) DEFAULT NULL,\n  `DeleteAt` bigint(20) DEFAULT NULL,\n  `UserId` varchar(26) DEFAULT NULL,\n  `ChannelId` varchar(26) DEFAULT NULL,\n  `Message` text,\n  PRIMARY KEY (`Id`),\n  KEY `idx_posts_update_at` (`UpdateAt`),\n  KEY `idx_posts_create_at` (`CreateAt`),\n  KEY `idx_posts_delete_at` (`DeleteAt`),\n  KEY `idx_posts_channel_id` (`ChannelId`),\n  KEY `idx_posts_user_id` (`UserId`),\n  KEY `idx_posts_channel_id_update_at` (`ChannelId`,`UpdateAt`),\n  KEY `idx_posts_channel_id_delete_at_create_at` (`ChannelId`,`DeleteAt`,`CreateAt`),\n  FULLTEXT KEY `idx_posts_message_txt` (`Message`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n```\n\n----------------------------------------\n\nTITLE: Testing Mattermost Push Notification Service (Bash)\nDESCRIPTION: This curl command tests the push notification service by sending a POST request to the local server with a JSON payload containing test notification data.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/push-notifications/service.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:8066/api/v1/send_push -X POST -H \"Content-Type: application/json\" -d '{\"type\": \"message\", \"message\": \"test\", \"badge\": 1, \"platform\": \"PLATFORM\", \"server_id\": \"MATTERMOST_DIAG_ID\", \"device_id\": \"DEVICE_ID\", \"channel_id\": \"CHANNEL_ID\"}'\n```\n\n----------------------------------------\n\nTITLE: Defining Redux Action Types in TypeScript\nDESCRIPTION: Example of defining Redux action type constants using the keyMirror utility.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/actions.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default keyMirror({\n    SOMETHING_HAPPENED: null\n});\n```\n\n----------------------------------------\n\nTITLE: C Functions for io_uring Request Handling\nDESCRIPTION: C functions using liburing to push read and write requests to the submission queue and handle completions.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-05-20-hands-on-iouring-go.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nint push_read_request(int file_fd, off_t file_sz) {\n    struct file_info *fi;\n    struct io_uring_sqe *sqe = io_uring_get_sqe(&ring);\n    io_uring_prep_readv(sqe, file_fd, fi->iovecs, total_blocks, 0);\n    io_uring_sqe_set_data(sqe, fi);\n    return 0;\n}\n\nint push_write_request(int file_fd, void *data, off_t file_sz) {\n    struct file_info *fi;\n    struct io_uring_sqe *sqe = io_uring_get_sqe(&ring);\n    io_uring_prep_writev(sqe, file_fd, fi->iovecs, 1, 0);\n    io_uring_sqe_set_data(sqe, fi);\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining io_uring Setup System Call in C\nDESCRIPTION: Definition of the io_uring_setup system call which initializes an io_uring instance. It takes the number of entries and a parameters structure as arguments and returns a file descriptor.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-05-20-hands-on-iouring-go.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint io_uring_setup(unsigned entries, struct io_uring_params *params);\n```\n\n----------------------------------------\n\nTITLE: Adding Unique Constraint in PostgreSQL\nDESCRIPTION: Demonstrates how to add a unique constraint to a table in PostgreSQL without locking the table by first creating a concurrent index and then attaching it to the constraint.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/schema-migration-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS oauthaccessdata_clientid_userid_key on oauthaccessdata(clientid, userid);\nALTER TABLE oauthaccessdata ADD UNIQUE USING INDEX oauthaccessdata_clientid_userid_key; -- This is instantaneous\n```\n\n----------------------------------------\n\nTITLE: Displaying Detox File Structure\nDESCRIPTION: Shows the folder structure for Detox E2E testing setup in the Mattermost mobile project.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/e2e.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n|\n|-- detox\n  |-- e2e\n    |-- support\n    |-- test\n    |-- config.json\n    |-- environment.js\n    |-- init.js\n  |-- .babelrc\n  |-- .detoxrc.json\n  |-- package-lock.json\n  |-- package.json\n```\n\n----------------------------------------\n\nTITLE: Creating a Mattermost User Account\nDESCRIPTION: This command creates a new user account in Mattermost using the mmctl tool. It specifies the email, username, and password for the new account.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/developer-workflow.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmmctl user create --email user@example.com --username test1 --password mypassword\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata for Selective Test Execution\nDESCRIPTION: Example showing how to add metadata tags to Cypress test files for selective test execution based on stage and group parameters.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-07-27-automated-ui-testing-with-cypress.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Stage: @prod\n// Group: @accessibility\n```\n\n----------------------------------------\n\nTITLE: Querying Mattermost Diagnostic ID (SQL)\nDESCRIPTION: This SQL query retrieves the Mattermost Diagnostic ID from the Systems table, which is needed for testing push notifications.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/push-notifications/service.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM Systems WHERE Name = 'DiagnosticId';\n```\n\n----------------------------------------\n\nTITLE: Viewing Merge Conflicts in Git\nDESCRIPTION: This snippet shows the content of a file with merge conflicts, including the conflict markers for the current branch, common ancestor, and incoming changes.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-27-advanced-git-tbilisi-free-university.md#2025-04-23_snippet_4\n\nLANGUAGE: patch\nCODE:\n```\n<<<<<<< HEAD\n\tth := Setup(t).InitBasic()\n||||||| parent of 9a51c73f6... MM-22619: check for nil plugins environment (#13901)\n\tth := Setup(t)\n=======\n\tth := SetupWithCustomConfig(t, func(config *model.Config) {\n\t\t*config.PluginSettings.Enable = false\n\t})\n>>>>>>> 9a51c73f6... MM-22619: check for nil plugins environment (#13901)\n\tdefer th.TearDown()\n```\n\n----------------------------------------\n\nTITLE: Opening Settings Modal and Changing Settings in Cypress\nDESCRIPTION: Shows how to open the Settings modal, navigate to a specific section, and change a setting using Cypress commands.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-cheatsheets.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// # Open 'Advanced' section of 'Settings' modal\ncy.uiOpenSettingsModal('Advanced').within(() => {\n  // # Open 'Enable Join/Leave Messages' and turn it off\n  cy.findByRole('heading', {name: 'Enable Join/Leave Messages'}).click();\n  cy.findByRole('radio', {name: 'Off'}).click();\n  // # Save and close the modal\n  cy.uiSave();\n  cy.uiClose();\n});\n```\n\n----------------------------------------\n\nTITLE: Examining MySQL EXPLAIN Output for Original Query\nDESCRIPTION: EXPLAIN output for the original query showing the expected use of a single index (idx_posts_create_at) for comparison.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-11-17-mysql-index-merge.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n+----+-------------+-------+------------+-------+--------------------------------------------------------------------------------------------------------------------------------------+---------------------+---------+-------+---------+----------+----------------------------------+\n| id | select_type | table | partitions | type  | possible_keys                                                                                                                        | key                 | key_len | ref   | rows    | filtered | Extra                            |\n+----+-------------+-------+------------+-------+--------------------------------------------------------------------------------------------------------------------------------------+---------------------+---------+-------+---------+----------+----------------------------------+\n|  1 | PRIMARY     | p     | NULL       | range | idx_posts_create_at,idx_posts_delete_at,idx_posts_channel_id,idx_posts_channel_id_update_at,idx_posts_channel_id_delete_at_create_at | idx_posts_create_at | 9       | NULL  | 6175639 |     1.58 | Using where; Backward index scan |\n|  2 | SUBQUERY    | Posts | NULL       | const | PRIMARY                                                                                                                              | PRIMARY             | 106     | const |       1 |   100.00 | NULL                             |\n+----+-------------+-------+------------+-------+--------------------------------------------------------------------------------------------------------------------------------------+---------------------+---------+-------+---------+----------+----------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Listing Public Keys on Mattermost Server in Bash\nDESCRIPTION: Command to list all public keys installed on the Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/using-and-managing-plugins.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmattermost plugin keys\n```\n\n----------------------------------------\n\nTITLE: Interface Usage Example\nDESCRIPTION: Shows how to use interfaces to create type-safe collections of structs with similar method signatures.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-15-instrumenting-go-code-via-ast-2.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype interface Hello {\n\tHello() string\n}\n// ...\nlist := []Hello{p,a}\nfmt.Printf(\"Person: [%v] Animal: [%v]\\n\", list[0].Hello(), list[1].Hello())\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Settings in Kubernetes YAML\nDESCRIPTION: Example of modifying the Kubernetes ConfigMap to enable and configure plugins in the community server. The configuration needs to be added to configmap-config.yaml for plugin settings and configmap-plugins.yaml for plugin downloads.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/infrastructure/plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nPluginSettings:\n  Enable: true\n  PluginStates:\n    yourplugin:\n      Enable: true\n```\n\n----------------------------------------\n\nTITLE: Installing Mattermost Server Source\nDESCRIPTION: Command to download the Mattermost server source code using Go get\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/server/hello-world.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/mattermost/server/v8\n```\n\n----------------------------------------\n\nTITLE: Development Testing Commands\nDESCRIPTION: Commands for running code style checks, type checking, and unit tests during development\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/developer-workflow.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake check-style\nmake fix-style\nmake check-types\nmake test\n```\n\n----------------------------------------\n\nTITLE: Example Usage of io_uring Wrapper Library\nDESCRIPTION: Example demonstrating how to use the io_uring wrapper library for file operations.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-05-20-hands-on-iouring-go.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nerr := frodo.ReadFile(\"shire.html\", func(buf []byte) {\n\t// handle buf\n})\nif err != nil {\n\t// handle err\n}\n```\n\n----------------------------------------\n\nTITLE: Adding License Section to README for Mixed-license Plugin\nDESCRIPTION: This snippet demonstrates how to add a license section to the README.md file for a mixed-license plugin. It specifies different licenses for different parts of the repository and includes a link to learn more about the Mattermost Source Available License.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/source-available-license.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## License\n\nThis repository is licensed under the Apache 2.0 License, except for the [server/enterprise](server/enterprise) directory which is licensed under the [Mattermost Source Available License](LICENSE.enterprise). See {{< newtabref href=\"https://docs.mattermost.com/overview/faq.html#mattermost-source-available-license\" title=\"Mattermost Source Available License\" >}} to learn more.\n```\n\n----------------------------------------\n\nTITLE: Generating Signing Key for Android App\nDESCRIPTION: Uses keytool to generate a signing key for the Android app. The key is valid for 10000 days and uses RSA algorithm with 2048-bit key size.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/build-your-own/android.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ keytool -genkey -v -keystore <my-release-key>.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000\n```\n\n----------------------------------------\n\nTITLE: Clicking Buttons in Settings Modal with Cypress\nDESCRIPTION: Demonstrates how to click a button within the Settings modal using Cypress commands.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-cheatsheets.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// # Open 'Advanced' section of 'Settings' modal\ncy.uiOpenSettingsModal().within(() => {\n  // # Click 'Notifications' button\n  cy.findByRoleExtended('button', {name: 'Notifications'}).should('be.visible').click();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Build Essential Tools for Ubuntu\nDESCRIPTION: Command to install the build-essential package on Ubuntu, which includes make and other essential build tools.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install build-essential\n```\n\n----------------------------------------\n\nTITLE: Resolving Cherry-Pick Conflicts in Git\nDESCRIPTION: Commands to resolve conflicts that occur during a manual cherry-pick process by adding the conflicted files and continuing the cherry-pick operation.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/getting-started/branching.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit add [path/to/conflicted/files]\ngit cherry-pick --continue\n```\n\n----------------------------------------\n\nTITLE: Opening Channel Menu with Item Selection in Cypress Tests\nDESCRIPTION: Opens the channel menu and selects a specific menu item. Demonstrates selecting the 'View Info' option from the channel menu.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-cheatsheets.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// # Open 'Advanced' section of 'Settings' modal\ncy.uiOpenChannelMenu('View Info');\n```\n\n----------------------------------------\n\nTITLE: Setting Default Ruby Version\nDESCRIPTION: Command to set Ruby 3.2.0 as the default version.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nrvm alias create default 3.2.0\n```\n\n----------------------------------------\n\nTITLE: Running Android App with React Native CLI\nDESCRIPTION: This command directly uses the React Native CLI to run the Android app and display available options. It provides more flexibility for advanced configurations.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/run/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx react-native run-android --help\n```\n\n----------------------------------------\n\nTITLE: Merging Master Branch to Resolve Conflicts in Git\nDESCRIPTION: This code snippet shows how to fetch the latest changes from the remote repository and merge them with the current branch to resolve conflicts. It's recommended instead of rebasing after a pull request has been opened.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-01-24-submitting-great-prs.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit fetch && git merge origin/master\n```\n\n----------------------------------------\n\nTITLE: Copying Configuration Files from Old Repository in Monorepo Migration\nDESCRIPTION: Copies the config.json file from the old mattermost-server location to the new server directory in the monorepo structure. This preserves your existing server configuration after migration.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/monorepo-migration-notes.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd server\ncp ../../mattermost-server-old/config/config.json ./config/\n```\n\n----------------------------------------\n\nTITLE: Building Mattermost Desktop App with npm\nDESCRIPTION: Commands to build the Mattermost desktop application for production and development. The build process uses webpack to bundle scripts for the main and renderer processes.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/packaging-and-releasing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Slack Parsing Skip Example\nDESCRIPTION: Example showing how to bypass Slack compatibility parsing for ephemeral text handling.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-messages/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"update\": {\n    \"message\": \"Updated!\"\n  },\n  \"ephemeral_text\": \"You updated the post!\",\n  \"skip_slack_parsing\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Manifest Configuration\nDESCRIPTION: JSON manifest file defining the plugin's metadata and entry point\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/server/hello-world.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"com.mattermost.server-hello-world\",\n    \"name\": \"Hello World\",\n    \"server\": {\n        \"executable\": \"plugin.exe\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Promtail Integration with Mattermost\nDESCRIPTION: Environment variable configuration for enabling file logging in Mattermost with appropriate settings for Promtail to scrape logs and relay them to Loki for aggregation and visualization in Grafana.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/docker.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nMM_LOGSETTINGS_ENABLEFILE=true\nMM_LOGSETTINGS_FILELEVEL=debug\nMM_LOGSETTINGS_FILEJSON=true\nMM_LOGSETTINGS_FILELOCATION=logs\n```\n\n----------------------------------------\n\nTITLE: Installing Node Dependencies\nDESCRIPTION: Command to install required Node.js dependencies using npm. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/developer-setup.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Initial Git and Test Commands in Shell\nDESCRIPTION: Commands to clone the Mattermost repository, create a branch, and run Go tests with coverage analysis.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-27-advanced-git-tbilisi-free-university.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/mattermost/mattermost.git\ncd mattermost-server\n\ngit checkout -b test-git-rebase\ncd model\ngo test ./... -coverprofile=coverage.out && go tool cover -html=coverage.out -o coverage.html && open coverage.html\n```\n\n----------------------------------------\n\nTITLE: Finding Plugin Process ID on macOS\nDESCRIPTION: Commands to identify and attach Delve debugger to a running Mattermost plugin process on macOS. First finds the process ID using grep, then attaches the debugger to enable breakpoint setting and debugging.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/server/debugging.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nps aux | grep name.of.your.plugin\n```\n\nLANGUAGE: bash\nCODE:\n```\ndlv attach pid\n```\n\n----------------------------------------\n\nTITLE: Installing Core Dependencies via Homebrew\nDESCRIPTION: Installs Node Version Manager (nvm), Git version control system, and Python 3 using the Homebrew package manager on macOS. These are essential dependencies for Mattermost development.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/developer-setup/macos.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install nvm git python3\n```\n\n----------------------------------------\n\nTITLE: Executing make i18n-extract Command in Bash\nDESCRIPTION: This command is used to extract strings for localization from the source code. It updates the i18n/en.json file with new or removed strings.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/using-i18n-extract.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake i18n-extract\n```\n\n----------------------------------------\n\nTITLE: Installing development dependencies for Linux\nDESCRIPTION: This snippet installs necessary development libraries and tools for building native Node modules on Linux, including X11 development libraries and libpng.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/developer-setup/ubuntu.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install git python3 make g++ libx11-dev libxtst-dev libpng-dev\n```\n\n----------------------------------------\n\nTITLE: Problematic Timeout Test in Go\nDESCRIPTION: This code snippet demonstrates a flaky test that uses time.Sleep to verify HTTP timeout behavior. The test is unreliable due to the unpredictable nature of timer execution.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-09-29-avoiding-flaky-tests.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc TestHTTPTimeout(t *testing.T) {\n    expectedTimeout := 100 * time.Millisecond\n\n    server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        time.Sleep(101 * time.Millisecond)\n    }))\n    defer server.Close()\n\n    httpService := NewHttpService(HttpServiceOptions{RequestTimeout: expectedTimeout})\n    err := httpService.Do()\n    require.EqualError(t, err, \"timeout\")\n}\n```\n\n----------------------------------------\n\nTITLE: Token-based Plugin Deployment\nDESCRIPTION: Shell commands to deploy plugin using personal access token authentication.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/developer-setup.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport MM_SERVICESETTINGS_SITEURL=http://localhost:8065\nexport MM_ADMIN_TOKEN=j44acwd8obn78cdcx7koid4jkr\nmake deploy\n```\n\n----------------------------------------\n\nTITLE: Opening Product Menu with Item Selection in Cypress Tests\nDESCRIPTION: Opens the product menu and selects a specific menu item. Shows selecting the 'Integrations' option from the product menu.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-cheatsheets.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// # Open 'Integrations' section of 'Product Menu' modal\ncy.uiOpenProductMenu('Integrations');\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning for GolangCI-Lint Runner Issue in Go\nDESCRIPTION: This snippet shows a warning message from the GolangCI-Lint runner, indicating an issue with running the goanalysis_metalinter due to errors in the package. It highlights problems with type mismatches in function arguments.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-01-13-incorporating-golangci-lint.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nWARN [runner] Can't run linter goanalysis_metalinter: findcall: analysis skipped: errors in package: [/home/agniva/play/go/src/github.com/mattermost/mattermost-server/testlib/resources.go:64:58: cannot use (func(fileInfo os.FileInfo) bool literal) (value of type func(fileInfo os.FileInfo) bool) as func(os.FileInfo) bool value in argument to fileutils.FindPath /home/agniva/play/go/src/github.com/mattermost/mattermost-server/testlib/resources.go:49:57: cannot use (func(fileInfo os.FileInfo) bool literal) (value of type func(fileInfo os.FileInfo) bool) as func(os.FileInfo) bool value in argument to fileutils.FindPath]\n```\n\n----------------------------------------\n\nTITLE: Incorrect String Concatenation in React\nDESCRIPTION: Example of incorrectly concatenating translated strings in React, which can cause issues in languages with different sentence structures.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-12-04-common-i18n-mistakes.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nreturn (\n    <>\n        <a\n            href='https://mattermost.com'\n            rel='noreferrer'\n            target='_blank'\n        >\n            <FormattedMessage\n                id='popup.clickHere'\n                defaultMessage='Click here'\n            />\n        </a>\n        {' '}\n        <FormattedMessage\n            id='popup.forMoreInformation'\n            defaultMessage='for more information.'\n        />\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Mattermost Boards Plugin Dependencies\nDESCRIPTION: Commands to install the necessary dependencies for building the Mattermost Boards plugin. This involves navigating to the webapp directory within the mattermost-plugin folder, installing npm packages, and running the prebuild make target.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/focalboard/mattermost-boards-setup-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd mattermost-plugin/webapp\nnpm install --no-optional\ncd ../..\nmake prebuild\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Reference Log with ISO Date Format\nDESCRIPTION: Demonstrates using git reflog with the --date=iso flag to show the timestamp of each reference update in ISO format.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-27-advanced-git-tbilisi-free-university.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ngit reflog --date=iso\n```\n\n----------------------------------------\n\nTITLE: Installing React Native iOS Dependencies\nDESCRIPTION: Command for installing iOS native code dependencies after adding a React Native library.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/dependecies.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ npm run pod-install\n```\n\n----------------------------------------\n\nTITLE: Exposing Settings in System Console UI\nDESCRIPTION: Add new settings to the AdminDefinition object in the webapp to expose them in the System Console interface.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/system_console.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In admin_definition.jsx\nAdminDefinition = {\n    settings: {\n        newConfigField: {\n            // field definition\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building iOS Mobile App with npm\nDESCRIPTION: This command initiates the build process for the iOS mobile app using the configured environment variables. It produces an .ipa file in the project's root directory.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/build-your-own/ios.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ npm run build:ios\n```\n\n----------------------------------------\n\nTITLE: Flaky Time Delta Test in Go\nDESCRIPTION: This code snippet shows a flaky test that attempts to verify different creation timestamps for two user records. The test may fail if both records are created within the same millisecond.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-09-29-avoiding-flaky-tests.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc TestTimeDelta(t *testing.T) {\n    store := NewStore()\n\n    user1, err := store.CreateUserRecord(&model.User{Username: \"test1\"})\n    require.NoError(t, user)\n\n    user2, err := store.CreateUserRecord(&model.User{Username: \"test2\"})\n    require.NoError(t, user)\n\n    require.NotEqual(t, user1.CreateAt, user2.CreateAt)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS EKS Kubeconfig\nDESCRIPTION: Command to update kubectl configuration for accessing the Mattermost production Kubernetes cluster on AWS EKS.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/infrastructure/kubernetes/kubernetes-troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws eks update-kubeconfig --name mattermost-prod-k8s --region us-east-1\n```\n\n----------------------------------------\n\nTITLE: Slack Channel Mention Translation in JSON\nDESCRIPTION: Example demonstrating how Mattermost handles Slack-style channel mentions in JSON responses.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/slash-commands/slack/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"text\": \"<!channel> this is a notification.\"}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Certificate Using OpenSSL (PEM format)\nDESCRIPTION: This command is an alternative to the previous one, saving the server's SSL certificate in PEM format instead of DER. It provides flexibility in certificate format for different use cases in SSL pinning.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/build-your-own/ssl-pinning.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nopenssl s_client -connect yourserver.com:443 -showcerts < /dev/null | openssl x509 -outform PEM -out yourserver.crt\n```\n\n----------------------------------------\n\nTITLE: Incorrect Pluralization in React Intl\nDESCRIPTION: Example of incorrect pluralization handling in React Intl, using (s) which doesn't work for all languages.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-12-04-common-i18n-mistakes.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nreturn (\n    <FormattedMessage\n        id='email_sender.remaining'\n        defaultMessage='{remaining, number} email(s) remaining.'\n        values={{remaining}}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Applying OpenTracing to API Handler in Go\nDESCRIPTION: Example of how to wrap an API handler with OpenTracing code to measure and trace its execution time. This creates a span, updates the context, and ensures the span is properly finished after execution.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-10-25-instrumenting-go-code-via-ast.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc apiCall(c *Context, w http.ResponseWriter, r *http.Request) {\n    span, ctx := tracing.StartSpanWithParentByContext(c.App.Context, \"api4:apiCall\")\n    c.App.Context = ctx\n    defer span.Finish()\n\n    // perform actual request handling\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch for Manual Cherry-Pick in Git\nDESCRIPTION: Command to create a new branch based on the target release branch for performing a manual cherry-pick when the automated process fails.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/getting-started/branching.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b manual-cherry-pick-pr-[PR_NUMBER] origin/release-[VERSION]\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Development Dependencies with Chocolatey\nDESCRIPTION: Command to install essential development tools (Node Version Manager, Git, and Python3) using the Chocolatey package manager\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/developer-setup/windows.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nchoco install nvm git python3\n```\n\n----------------------------------------\n\nTITLE: Typical mmctl Command Function Signature in Go\nDESCRIPTION: Shows the standard function signature for an mmctl command that interacts with the Mattermost server using the Cobra library and client interface.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-11-04-unit-testing-mmctl-commands.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc userSearchCmdF(c client.Client, cmd *cobra.Command, args []string) error { }\n```\n\n----------------------------------------\n\nTITLE: Formatting Issues and Comments in Markdown\nDESCRIPTION: This snippet demonstrates the markdown format for issues and comments in Mattermost. It includes placeholders for title, hashtags, external services, authors, timestamps, and the body of the issue or comment.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/zapier-integration/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#### [Title of issue]\n\n#[searchable-hashtag] in [external service](link to service) by [author](link to author profile) on [time-stamp](link to specific issue or comment)\n\n[Body of issue or comment]\n```\n\n----------------------------------------\n\nTITLE: Continuing a Cherry-Pick After Resolving Conflicts\nDESCRIPTION: This snippet demonstrates how to continue the cherry-pick process after resolving merge conflicts.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-27-advanced-git-tbilisi-free-university.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngit cherry-pick --continue\n```\n\n----------------------------------------\n\nTITLE: Starting the Web App\nDESCRIPTION: Commands to navigate to the webapp directory and start the Mattermost web application.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncd webapp\nmake run\n```\n\n----------------------------------------\n\nTITLE: Incorrect Hard-Coded Possessive in React Intl\nDESCRIPTION: Example of incorrectly hard-coding English possessive grammar in a React Intl implementation.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-12-04-common-i18n-mistakes.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet username = '@' + rootPost.username;\nif (!username.endsWith('s')) {\n    username += '\\'s';\n}\n\nreturn (\n    <FormattedMessage\n        id='post.commentedOn'\n        defaultMessage='Commented on {username} message:'\n        values={{username}}\n    />\n)\n```\n\n----------------------------------------\n\nTITLE: Field-Specific Error Response\nDESCRIPTION: Example of returning field-specific validation errors in dialog submission response.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-dialogs/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\"errors\": {\"num_between_0_and_10\": \"Enter a number between 0 and 10.\"}}\n```\n\n----------------------------------------\n\nTITLE: Backing up and removing existing i18n files in Shell\nDESCRIPTION: These commands create a backup of existing i18n files and remove the current JSON files in preparation for new ones.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/customization/server-files.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/mattermost/i18n\ntar -cvf i18n-yyyy-MM-dd.tar *\nrm -f *.json\n```\n\n----------------------------------------\n\nTITLE: Querying Town Square Channel ID (SQL)\nDESCRIPTION: This SQL query retrieves the Channel ID for the Town Square channel, which is used in testing push notifications.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/push-notifications/service.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT Id FROM Channels WHERE DisplayName = 'Town Square';\n```\n\n----------------------------------------\n\nTITLE: Setting Gradle Properties for Android App Signing\nDESCRIPTION: Configures Gradle properties in the user's home directory to specify the keystore file path, key alias, and password for signing the Android app.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/build-your-own/android.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nMATTERMOST_RELEASE_STORE_FILE=/full/path/to/directory/containing/my-release-key.keystore\nMATTERMOST_RELEASE_KEY_ALIAS=my-key-alias\nMATTERMOST_RELEASE_PASSWORD=*****\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for Mattermost Desktop App on Arch Linux\nDESCRIPTION: Command to install required system dependencies for building the Mattermost Desktop App on Arch Linux, including npm, git, Python, gcc, make, and various libraries required for native Node modules.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/developer-setup/arch.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo pacman -S npm git python3 gcc make libx11 libxtst libpng libffi\n```\n\n----------------------------------------\n\nTITLE: Defining Helper Functions for Go Template\nDESCRIPTION: Helper functions for template generation that handle joining results, parameters and formatting method signatures.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-06-10-opentracing.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nhelperFuncs := template.FuncMap{\n\t\"joinResults\": func(results []string) string {\n\t\treturn strings.Join(results, \", \")\n\t},\n\t\"joinResultsForSignature\": func(results []string) string {\n\t\treturn fmt.Sprintf(\"(%s)\", strings.Join(results, \", \"))\n\t},\n\t\"joinParams\": func(params []methodParam) string {\n\t\tparamsNames := []string{}\n\t\tfor _, param := range params {\n\t\t\ts := param.Name\n\t\t\tif strings.HasPrefix(param.Type, \"...\") {\n\t\t\t\ts += \"...\"\n\t\t\t}\n\t\t\tparamsNames = append(paramsNames, s)\n\t\t}\n\t\treturn strings.Join(paramsNames, \", \")\n\t},\n\t\"joinParamsWithType\": func(params []methodParam) string {\n\t\tparamsWithType := []string{}\n\t\tfor _, param := range params {\n\t\t\tparamsWithType = append(paramsWithType, fmt.Sprintf(\"%s %s\", param.Name, param.Type))\n\t\t}\n\t\treturn strings.Join(paramsWithType, \", \")\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Using Git Mergetool for Conflict Resolution\nDESCRIPTION: This snippet shows how to invoke the configured mergetool in Git to resolve conflicts visually.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-27-advanced-git-tbilisi-free-university.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit mergetool\n```\n\n----------------------------------------\n\nTITLE: Specifying Migration Flag in ClusterInstallation Custom Resource in Kubernetes\nDESCRIPTION: YAML configuration demonstrating the new 'migrate' field added to the ClusterInstallation spec that signals the operator to begin migration to the new Mattermost custom resource. Setting this field to 'true' instructs the controller to convert the old resource to the new format.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2021-06-01-migrating-operator-custom-resource.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: mattermost.com/v1alpha1\nkind: ClusterInstallation\nmetadata:\n  name: my-mattermost\nspec:\n  ...\n  migrate: \"true\"  # New field added to ClusterInstallation. Setting it to 'true' instructs the controller to start the migration.\n```\n\n----------------------------------------\n\nTITLE: Successful Response from Mattermost Incoming Webhook\nDESCRIPTION: This snippet shows the HTTP response for a successful incoming webhook request to Mattermost. It includes headers and a simple 'ok' message in the body.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/webhooks/incoming/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: text/plain\nX-Request-Id: hoan6o9ws7rp5xj7wu9rmysrte\nX-Version-Id: 4.7.1.dev.12799cd77e172e8a2eba0f9091ec1471.false\nDate: Sun, 04 Mar 2018 17:19:09 GMT\nContent-Length: 2\n\nok\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Dependencies with NPM\nDESCRIPTION: Command for adding a new JavaScript dependency using npm with exact version specification to avoid future conflicts.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/dependecies.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm i --save-exact <package-name>\n```\n\n----------------------------------------\n\nTITLE: CLI Options Usage\nDESCRIPTION: Command line interface options for controlling the desktop app's behavior, including version display, data directory configuration, and development mode settings.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/build-commands.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--version, -v: Prints the application version\n--dataDir, -d: Set the path to where user data is stored\n--disableDevMode, -p: Disable development mode to allow for testing as if it was Production\n```\n\n----------------------------------------\n\nTITLE: Querying User Device ID (SQL)\nDESCRIPTION: This SQL query retrieves the Device ID for a specific user, which is required for testing push notifications to that device.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/push-notifications/service.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n   Email, DeviceId\nFROM\n   Sessions,\n   Users\nWHERE\n   Sessions.UserId = Users.Id\n      AND DeviceId != ''\n      AND Email = 'your_email@example.com';\n```\n\n----------------------------------------\n\nTITLE: Composing Store Layers and Testing in Go\nDESCRIPTION: Demonstrates how to compose multiple store layers together and test their functionality. This code initializes a MapStore with test data, wraps it with CacheLayer, CounterLayer, and TimerLayer, then performs operations to show how the layered approach works.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-02-26-layered-store-and-struct-embedding.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tmapStore := NewMapStore()\n\tmapStore.db[\"test1\"] = &User{Username: \"test1\", FullName: \"Test User 1\"}\n\tmapStore.db[\"test2\"] = &User{Username: \"test2\", FullName: \"Test User 2\"}\n\tAppStore :=\n\t\tNewTimerLayer(\n\t\t\tNewCounterLayer(\n\t\t\t\tNewCacheLayer(\n\t\t\t\t\tmapStore,\n\t\t\t\t),\n\t\t\t),\n\t\t)\n\n\t// Getting the user 1 from the map store (showing the time)\n\tAppStore.GetUser(\"test1\")\n\t// Getting the user 2 from the map store (showing the time)\n\tAppStore.GetUser(\"test2\")\n\t// Getting the user 1 from the cache store (showing the time)\n\tAppStore.GetUser(\"test1\")\n\n\t// Delete user 1 from the map store (showing the time)\n\tAppStore.DeleteUser(\"test1\")\n\n\t// Counting users\n\tAppStore.CountUsers()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Android Environment Variables on Linux\nDESCRIPTION: Shell commands to set up Android SDK environment variables in bash profile on Linux.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nexport ANDROID_HOME=/home/<username>/Android/Sdk\nexport PATH=$ANDROID_HOME/platform-tools:$PATH\nexport PATH=$ANDROID_HOME/tools:$PATH\n```\n\n----------------------------------------\n\nTITLE: Installing LTS NodeJS via nvm on Arch Linux\nDESCRIPTION: Command to install the latest Long-Term Support (LTS) version of NodeJS using the previously installed Node Version Manager (nvm).\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/developer-setup/arch.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnvm install --lts\n```\n\n----------------------------------------\n\nTITLE: Info Level Logging in Scheduler Start\nDESCRIPTION: Shows info level logging for normal operational events. Used to record expected application behavior and system state changes.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/style-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *Schedulers) Start(..) {\n\ts.startOnce.Do(func() {\n\t\tmlog.Info(\"Starting schedulers.\")\n\t\t..\n\t})\n\t..\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating Android Dependencies Lock File\nDESCRIPTION: Commands to regenerate the lock file from scratch. This is useful when you need to create a fresh lock file after deleting the existing buildscript-gradle.lockfile.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/build-your-own/android.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd android\n./gradlew app:dependencies --write-locks\n```\n\n----------------------------------------\n\nTITLE: Deployment Selector Configuration in v1alpha1 Mattermost Operator\nDESCRIPTION: YAML snippet showing the selector configuration used in v1alpha1 Mattermost Deployments. This illustrates the immutable fields that needed special handling during migration, as these labels containing version-specific references cannot be directly updated.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2021-06-01-migrating-operator-custom-resource.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\n...\nspec:\n  selector:\n    matchLabels:\n      app: mattermost\n      v1alpha1.mattermost.com/installation: my-mattermost\n      v1alpha1.mattermost.com/resource: my-mattermost\n...\n```\n\n----------------------------------------\n\nTITLE: GitHub Integration Context Example\nDESCRIPTION: Example showing how to structure context data for a GitHub integration with action identification.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-messages/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"user_id\": \"rd49ehbqyjytddasoownkuqrxe\",\n    \"post_id\": \"gqrnh3675jfxzftnjyjfe4udeh\",\n    \"channel_id\": \"j6j53p28k6urx15fpcgsr20psq\",\n    \"team_id\": \"5xxzt146eax4tul69409opqjlf\",\n    \"context\": {\n        \"repo\": \"mattermost/mattermost\",\n        \"pr\": 1234,\n        \"action\": \"merge\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ClusterInstallation Specification in Kubernetes\nDESCRIPTION: Example showing how to set the spec.migrate flag to true in the ClusterInstallation resource to initiate migration to the new Mattermost resource type. This is part of the migration process for updating Mattermost installations.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2021-06-01-migrating-operator-custom-resource.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec.migrate: true\n```\n\n----------------------------------------\n\nTITLE: Cloning Mattermost Repository from Fork\nDESCRIPTION: Git command to clone the Mattermost source code from a user's fork to their local machine.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/YOUR_GITHUB_USERNAME/mattermost.git\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools\nDESCRIPTION: Command to install the required Xcode command line tools, which are prerequisites for building the Mattermost iOS mobile app on macOS.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/build-your-own/ios.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ xcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Deleting Public Keys from Mattermost Server in Bash\nDESCRIPTION: Command to delete one or more public keys from the Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/using-and-managing-plugins.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmattermost plugin delete key my-pk-file1 my-pk-file2\n```\n\n----------------------------------------\n\nTITLE: Custom Socket Path Plugin Deployment\nDESCRIPTION: Shell commands to set custom Unix socket path and deploy plugin using environment variables.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/developer-setup.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport MM_LOCALSOCKETPATH=/var/tmp/alternate_local.socket\nmake deploy\n```\n\n----------------------------------------\n\nTITLE: Running Android App with Additional Options\nDESCRIPTION: This command runs the Android app and displays available options. It uses npm to execute the android script and passes additional parameters.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/run/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run android -- --help\n```\n\n----------------------------------------\n\nTITLE: Installing nvm via nvm-sh on Arch Linux\nDESCRIPTION: Command to install Node Version Manager (nvm) using the official install script from nvm-sh GitHub repository. This allows for managing multiple Node.js versions.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/developer-setup/arch.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Implementing Struct Embedding in Go\nDESCRIPTION: Demonstrates basic struct embedding in Go by creating an Animal struct and embedding it in a Cow struct. The Cow struct inherits the Name field from Animal and implements a Speak method.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-06-10-opentracing.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Animal struct{\n\tName string\n}\n\ntype Cow struct{\n\tAnimal\n}\n\nfunc (c Cow) Speak() {\n\tfmt.Printf(\"Moo, I am a %s\", c.Animal.Name)\n}\n\nfunc main() {\n\ta := Animal{Name:\"Cow\"}\n\tc := Cow{Animal:a}\n\tc.Speak()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Android SDK using Bash\nDESCRIPTION: Shows the commands to install the latest Android SDK for E2E testing setup.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/e2e.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsdkmanager \"system-images;android-30;google_apis;x86\"\nsdkmanager --licenses\n```\n\n----------------------------------------\n\nTITLE: Running TestUpdatePost in Mattermost Server\nDESCRIPTION: This command shows how to run a specific test named TestUpdatePost in the app package of the Mattermost server. It's an example of targeting a single test for quick iteration during development.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/developer-workflow.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test -v -run='TestUpdatePost' ./app\n```\n\n----------------------------------------\n\nTITLE: Updating Docker Containers for Monorepo Structure\nDESCRIPTION: Updates the Docker containers to work with the new monorepo structure and server location. This ensures that your development environment works correctly with the new file structure.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/monorepo-migration-notes.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd server\nmake update-docker\n```\n\n----------------------------------------\n\nTITLE: Repository Setup Commands\nDESCRIPTION: Commands for cloning the repository and setting up the development environment.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:<yourgithubname>/mattermost-developer-documentation.git\ncd mattermost-developer-documentation\n```\n\n----------------------------------------\n\nTITLE: GitLab Omnibus Build Setup\nDESCRIPTION: Commands for setting up the build environment in Docker and installing dependencies\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/gitlab-omnibus.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull registry.gitlab.com/gitlab-org/gitlab-omnibus-builder/ubuntu_18.04:${BUILDER_IMAGE_REVISION}\ndocker run -it registry.gitlab.com/gitlab-org/gitlab-omnibus-builder/ubuntu_18.04:${BUILDER_IMAGE_REVISION} bash\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://gitlab.com/mattermost/omnibus-gitlab.git ~/omnibus-gitlab\ncd ~/omnibus-gitlab\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport ALTERNATIVE_SOURCES=true\nexport ASSET_REGISTRY=registry.gitlab.com\nexport COMPILE_ASSETS=true\n```\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\nbundle binstubs --all\n```\n\nLANGUAGE: bash\nCODE:\n```\nbin/omnibus build gitlab\n```\n\n----------------------------------------\n\nTITLE: Examining git cherry-pick in Bash\nDESCRIPTION: This code snippet demonstrates how to examine the history of a Git repository to prepare for a cherry-pick operation. It clones the Mattermost repository and shows the combined history of a release branch and the master branch.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-27-advanced-git-tbilisi-free-university.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Checkout the mattermost-server repository (if not already done)\ngit clone https://github.com/mattermost/mattermost.git\ncd mattermost-server\n\n# Examine the combined history of release-5.20 and master\ngit log --graph --oneline origin/release-5.20 master\n```\n\n----------------------------------------\n\nTITLE: Interface Template Definition\nDESCRIPTION: Template for generating the interface file output using Go's template package.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-15-instrumenting-go-code-via-ast-2.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nconst outputTemplate = `\n// DO NOT EDIT, auto generated\n\npackage {{.Package}}\n\ntype {{.Name}} interface {\n\t{{.Content}}\n}\n`\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Mattermost plugin development\nDESCRIPTION: Webpack configuration file (webpack.config.js) for building a Mattermost web app plugin, including Babel presets and external React dependency.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/webapp/hello-world.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar path = require('path');\n\nmodule.exports = {\n    entry: [\n        './src/index.jsx',\n    ],\n    resolve: {\n        modules: [\n            'src',\n            'node_modules',\n        ],\n        extensions: ['*', '.js', '.jsx'],\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.(js|jsx)$/,\n                exclude: /node_modules/,\n                use: {\n                    loader: 'babel-loader',\n                    options: {\n                        presets: ['@babel/preset-react',\n                            [\n                                \"@babel/preset-env\",\n                                {\n                                    \"modules\": \"commonjs\",\n                                    \"targets\": {\n                                        \"node\": \"current\"\n                                    }\n                                }\n                            ]\n                        ],\n                    },\n                },\n            },\n        ],\n    },\n    externals: {\n        react: 'React',\n    },\n    output: {\n        path: path.join(__dirname, '/dist'),\n        publicPath: '/',\n        filename: 'main.js',\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Connected Android Devices\nDESCRIPTION: This command lists all Android devices connected to the development machine using ADB (Android Debug Bridge). It's useful for verifying device connectivity before deploying the app.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/run/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ adb devices\nList of devices attached\n42006fb3e4fb25b8    device\n```\n\n----------------------------------------\n\nTITLE: Installing GPG for RVM\nDESCRIPTION: Command to install GPG using Homebrew, required for Ruby Version Manager installation.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nbrew install gnupg\n```\n\n----------------------------------------\n\nTITLE: Defining Redux Action Types\nDESCRIPTION: Example of defining Redux action types for API operations using keyMirror. Shows both required and optional action types for request lifecycle.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/redux/actions.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default keyMirror({\n    SOMETHING_HAPPENED: null,\n\n    // The following actions are optional. They used to be added for every API request, but we found we were only\n    // rarely using their results, so we don't recommend adding them any more\n    SOMETHING_REQUEST: null,\n    SOMETHING_SUCCESS: null,\n    SOMETHING_FAILURE: null,\n});\n```\n\n----------------------------------------\n\nTITLE: Example Go File for Testing Custom Go vet Analyzer\nDESCRIPTION: This code snippet shows an example Go file that can be used to test the custom Go vet analyzer for forbidden words. It contains both a forbidden word and a regular string to demonstrate the analyzer's functionality.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-17-maintaining-consistency-in-codebases-with-go-vet.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"my candy is forbidden!\")\n\tfmt.Println(\"but other strings are not\")\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Mattermost Repository\nDESCRIPTION: Command to clone a forked version of the Mattermost repository to local environment.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/customization/webapp.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<yourgithubusername>/mattermost\n```\n\n----------------------------------------\n\nTITLE: Configuring Subpath for Development in Mattermost (Bash)\nDESCRIPTION: Commands to set up and run Mattermost with a subpath in a development environment. It uses environment variables to configure the Site URL with a subpath.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2018-06-25-subpath.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd mattermost-webapp/\nmake stop\nexport MM_SERVICESETTINGS_SITEURL='http://localhost:8065/company/mattermost'\nmake run\n```\n\n----------------------------------------\n\nTITLE: Resolving mattermost-redux Build Issues - Bash Commands\nDESCRIPTION: Commands to resolve the 'Unable to resolve module mattermost-redux/client' error by rebuilding the mattermost-redux package. This involves cleaning the npm cache, removing node_modules, and performing a fresh installation.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/mobile-build-process/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/workspace/mm/mattermost-mobile-prod-release/mattermost-mobile\nrm -rf node_modules\nnpm cache clean --force\nnpm i\nls node_modules/mattermost-redux/\n```\n\n----------------------------------------\n\nTITLE: Improved Timeout Test in Go\nDESCRIPTION: This code snippet shows an improved version of the HTTP timeout test. It uses a channel to control when the handler responds, ensuring the test consistently verifies the timeout behavior.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-09-29-avoiding-flaky-tests.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc TestHTTPTimeout(t *testing.T) {\n    expectedTimeout := 100 * time.Millisecond\n\n    releaseHandler := make(chan interface{})\n    server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        // Don't actually handle the response, allowing the service to timeout.\n        <-releaseHandler\n    }))\n    defer server.Close()\n    defer close(releaseHandler)\n\n    httpService := NewHttpService(HttpServiceOptions{RequestTimeout: expectedTimeout})\n    err := httpService.Do()\n    require.EqualError(t, err, \"timeout\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Android Environment Variables on macOS\nDESCRIPTION: Shell commands to set up Android SDK environment variables in bash profile on macOS.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nexport ANDROID_HOME=$HOME/Library/Android/sdk\nexport PATH=$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$PATH\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Proxying in Charles for Mattermost Community Servers\nDESCRIPTION: XML configuration for enabling SSL proxying in Charles to inspect traffic for Mattermost community servers. It sets up wildcards to match the three community server domains.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-10-21-debugging-using-charles.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<SSLProxyingSettings>\n  <enabled>true</enabled>\n  <locations>\n    <location>\n      <host>*.mattermost.com</host>\n      <port>443</port>\n    </location>\n  </locations>\n</SSLProxyingSettings>\n```\n\n----------------------------------------\n\nTITLE: Checking CSS Classes in React Components\nDESCRIPTION: Demonstrates how to use Jest DOM's toHaveClass matcher to verify CSS classes on rendered elements.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/unit-testing.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(screen.getByTestId('create_post')).toHaveClass('center');\n```\n\n----------------------------------------\n\nTITLE: Installing Watchman on macOS\nDESCRIPTION: Command to install Watchman file watching service using Homebrew on macOS.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbrew install watchman\n```\n\n----------------------------------------\n\nTITLE: Debug Level Logging in Worker Execution\nDESCRIPTION: Demonstrates debug level logging for diagnostic information. Used for detailed troubleshooting that isn't necessary for normal production monitoring.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/style-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (worker *Worker) Run() {\n\tmlog.Debug(\"Worker started\", mlog.String(\"worker\", worker.name))\n\t..\n```\n\n----------------------------------------\n\nTITLE: Analysis of Past Schema Migrations in Mattermost\nDESCRIPTION: A breakdown of the types and frequencies of schema migrations performed in Mattermost, including CREATE INDEX, ALTER TABLE, DROP INDEX, and others.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/schema-migration-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCREATE INDEX - 489\nALTER TABLE - 195\n  ADD COLUMN - 113\n  ALTER COLUMN - 51\n  DROP COLUMN - 25\n  ADD CONSTRAINT - 6\nDROP INDEX - 124\nCREATE TABLE - 60\nUPDATE - 19\nDELETE - 2\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Branch\nDESCRIPTION: Creates a new branch for customization work to keep changes separate from master.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/customization/webapp.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b custom_branch\n```\n\n----------------------------------------\n\nTITLE: Rewriting Static Assets for Subpath in Mattermost (Bash)\nDESCRIPTION: Command to manually rewrite static assets for a configured subpath in Mattermost. This may be necessary when deploying to a CDN.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2018-06-25-subpath.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmattermost config subpath --path /company/mattermost\n```\n\n----------------------------------------\n\nTITLE: Extracting Distribution Files\nDESCRIPTION: Extracts the customized web app files from the distribution package.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/customization/webapp.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntar -xvf mattermost-webapp.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the application in development mode with hot reloading enabled.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/developer-setup.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Installing NodeJS LTS via NVM\nDESCRIPTION: Command to install NodeJS v22 LTS (Jod) using Node Version Manager.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnvm install --lts=jod\n```\n\n----------------------------------------\n\nTITLE: Running Dejavu for Elasticsearch in Docker\nDESCRIPTION: Command to start Dejavu, a user interface for visualizing and modifying Elasticsearch data. It runs on http://localhost:1358 after execution.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/tooling.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d dejavu\n```\n\n----------------------------------------\n\nTITLE: Manually Adding Default Message in JSON\nDESCRIPTION: After tagging a string and re-running make i18n-extract, you need to manually add the default message in the i18n/en.json file. This example shows the format for adding the translation string.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/using-i18n-extract.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"new-text-id\": \"Default message\"\n```\n\n----------------------------------------\n\nTITLE: Assembling Essential Files for Mattermost Server\nDESCRIPTION: This command packages the essential files for the Mattermost server deployment.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/customization/server-build.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake package\n```\n\n----------------------------------------\n\nTITLE: Visualizing Mattermost Mobile App Folder Structure using GOAT Diagram\nDESCRIPTION: This GOAT diagram illustrates the hierarchical folder structure of the Mattermost Mobile app repository. It shows the main directories and their subdirectories, providing a clear overview of the project's organization.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/structure.md#2025-04-23_snippet_0\n\nLANGUAGE: goat\nCODE:\n```\n|\n+-- .circleci  # Circle CI workflow to build the apps\n+-- .github    # GitHub actions\n+-- .husky\n+-- android    # Android specific code\n+-- app        # React Native code\n|   | \n|   +-- actions\n|   +-- client\n|   +-- components\n|   +-- constants\n|   +-- context\n|   +-- database\n|   +-- helpers\n|   +-- hooks\n|   +-- i18n\n|   +-- init\n|   +-- managers\n|   +-- notifications\n|   +-- products\n|   +-- queries\n|   +-- screens\n|   +-- store\n|   +-- utils\n|\n+-- assets\n|   |\n|   +-- base\n|   |   |\n|   |   +-- i18n\n|   |   +-- images\n|   |   +-- release\n|   +-- fonts\n|\n+-- build\n|   |\n|   +-- notice-file\n|\n+-- detox\n+-- docs\n+-- eslint\n+-- fastlane         # Fastlane scripts to build the app\n+-- ios              # iOS specific code\n+-- patches          # Patches for various dependencies\n+-- scripts\n+-- share_extension  # Android's share extension app\n+-- test\n+-- types\n```\n\n----------------------------------------\n\nTITLE: Running CI Production Tests\nDESCRIPTION: Commands for running production tests in CI pipeline against master and release branches.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-testing.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnode run_tests.js --stage='@prod'\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Mattermost Mobile Version Bump\nDESCRIPTION: This bash script sets the necessary environment variables for bumping the version number in mattermost-mobile. It includes variables for Git operations and specifies the version number to be set.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/mobile-build-process/bump-version-number.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport LC_ALL=\"en_US.UTF-8\"\n\n############ MATTERMOST BUILD ############\nexport COMMIT_CHANGES_TO_GIT=true\nexport BRANCH_TO_BUILD=master\nexport GIT_LOCAL_BRANCH=version-number\nexport RESET_GIT_BRANCH=false\n\n\nexport INCREMENT_VERSION_NUMBER_MESSAGE=\"Bump app version number to\"\nexport VERSION_NUMBER=\n```\n\n----------------------------------------\n\nTITLE: Formatting Forum Posts, Jira Comments, and Social Media Mentions in Markdown\nDESCRIPTION: This snippet shows the markdown format for forum posts, Jira comments, Hacker News mentions, and tweets in Mattermost. It includes placeholders for the content, hashtags, external services, authors, and timestamps.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/zapier-integration/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n> [forum post, media mention, or tweet]\n\n#[searchable-hashtag] in [external service](link to service) by [author](link to author profile) on [time-stamp](link to specific forum post, media mention or tweet)\n```\n\n----------------------------------------\n\nTITLE: Testing Server Connectivity\nDESCRIPTION: curl command to test that the Mattermost server is running by pinging the API endpoint.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:8065/api/v4/system/ping\n```\n\n----------------------------------------\n\nTITLE: Resetting Subpath Configuration in Mattermost (Bash)\nDESCRIPTION: Commands to reset the subpath configuration and restart Mattermost in a development environment.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2018-06-25-subpath.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nunset MM_SERVICESETTINGS_SITEURL\nmake restart\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote\nDESCRIPTION: Adds the original Mattermost repository as an upstream remote for future updates.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/customization/webapp.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream https://github.com/mattermost/mattermost.git\n```\n\n----------------------------------------\n\nTITLE: Using FormattedHTMLMessage for HTML-based Translations in TypeScript\nDESCRIPTION: Shows a deprecated approach using FormattedHTMLMessage to include HTML directly in translation strings. This method was simpler but had security and maintenance drawbacks.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-12-04-common-i18n-mistakes.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nreturn (\n    <FormattedHTMLMessage\n        id='popup.moreInformation'\n        defaultMessage='<a href=\"https://mattermost.com\" rel=\"noreferrer\" target=\"_blank\">Click here</a> for more information.'\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: GitLab Configuration Settings\nDESCRIPTION: Ruby configuration settings for GitLab Omnibus external URLs and Mattermost enablement\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/gitlab-omnibus.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nexternal_url \"http://gitlab.dev.mm\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmattermost_external_url \"http://mattermost.dev.mm\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmattermost['enable'] = true\n```\n\n----------------------------------------\n\nTITLE: Simplified MySQL Query Causing Index Merge\nDESCRIPTION: A simplified version of the problematic query that consistently triggers the index_merge behavior in MySQL, used for debugging the issue.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-11-17-mysql-index-merge.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT Id FROM Posts WHERE ChannelId = 'x' AND DeleteAt = y AND CreateAt < z\n```\n\n----------------------------------------\n\nTITLE: Setting up the Mattermost plugin workspace with npm\nDESCRIPTION: Commands to create the plugin directory structure and install necessary npm dependencies for developing a Mattermost web app plugin.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/webapp/hello-world.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir webapp\ncd webapp\n\nnpm install --save-dev @babel/core @babel/preset-env @babel/preset-react babel-loader webpack webpack-cli\nnpm install --save react\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for sign-ios Script\nDESCRIPTION: Detailed usage instructions and options for the sign-ios script, used to sign the iOS app with custom provisioning profiles and certificates.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/unsigned/ios.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUsage: sign-ios <unsigned ipa file>\n\t\t[-a|--app provisioning]\n\t\t[-n|--notification provisioning]\n\t\t[-s|--share provisioning]\n\t\t[-c|--certificate certificateName]\n\t\t[-g|--app-group-id appGroupId]\n\t\t[-d|--display-name displayName]\n\t\toutputIpa\nUsage: sign-ios -h|--help\nOptions:\n\t-a, --app provisioning\t            Provisioning profile for the main application.\n\t\t\t\t\t\t                -a xxx.mobileprovision\n\n\t-n, --notification provisioning\t\tProvisioning profile for the notification extension.\n\t\t\t\t\t\t                -n xxx.mobileprovision\n\n\t-s, --share provisioning\t\t    Provisioning profile for the share extension.\n\t\t\t\t\t\t                -s xxx.mobileprovision\n\n\t-d, --display-name displayName\t\t(Optional) Specify new application display name.\n                                        By default \"Mattermost\" is used.\n\t\t\t\t\t\t                Warning: will apply for all nested apps and extensions.\n\n\t-g, --app-group-id appGroupId\t\tSpecify the app group identifier to use (AppGroupId).\n\t\t\t\t\t\t                Warning: will apply for all nested apps and extensions.\n\n\t-v, --verbose\t\t\t\t        Verbose output.\n\n\t-h, --help\t\t\t\t            Display help message.\n```\n\n----------------------------------------\n\nTITLE: Batch Updating with Offset in PostgreSQL\nDESCRIPTION: SQL query to update the channel_count column in the status table for a batch of users, using an offset to continue from where the previous batch left off.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/schema-migration-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE status s SET channel_count=(SELECT count(*) FROM channelmembers cm WHERE cm.userid=s.userid) WHERE channel_count IS NOT NULL AND s.userid in (SELECT userid FROM status WHERE userid > <offset> ORDER BY userid ASC limit 10);\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Search Index\nDESCRIPTION: YAML front matter block that configures a page to output JSON format search index data. Specifies the page type, layout template, and output format.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/search/searchindex.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: page\nlayout: searchindex\noutputs:\n  - json\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Data\nDESCRIPTION: Optional command to populate the Mattermost database with random sample data using mmctl.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nbin/mmctl sampledata\n```\n\n----------------------------------------\n\nTITLE: Building Android Mobile App with NPM\nDESCRIPTION: Command to build the Android mobile app using npm after configuring all environment variables and Google services. The build process will create APK files based on the specified configuration.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/build-your-own/android.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run build:android\n```\n\n----------------------------------------\n\nTITLE: Defining Mattermost API Documentation Page in Markdown\nDESCRIPTION: This snippet defines the frontmatter for a Markdown file that will be used to generate the Mattermost API documentation page. It specifies the title, description, and layout for the page.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/api-documentation/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"API Documentation\"\ndescription: \"Mattermost API documentation with interactive examples\"\nlayout: api-documentation\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Bundle\nDESCRIPTION: Command to bundle the plugin executable and manifest into a deployable tar file\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/server/hello-world.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntar -czvf plugin.tar.gz plugin.exe plugin.json\n```\n\n----------------------------------------\n\nTITLE: Installing NodeJS via nvm on Fedora/Red Hat/CentOS Linux\nDESCRIPTION: Commands to install Node Version Manager (nvm) and the latest LTS version of NodeJS. This is a prerequisite for building the Mattermost Desktop App.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/developer-setup/redhat.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash\nnvm install --lts\n```\n\n----------------------------------------\n\nTITLE: Installing NodeJS with NVM\nDESCRIPTION: Command to install the correct version of Node.js for the Mattermost web app using NVM (Node Version Manager).\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnvm install\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker Services for Prometheus and Grafana in Mattermost Development Environment\nDESCRIPTION: Environment variable configuration to enable Prometheus and Grafana Docker services alongside the default MySQL, PostgreSQL, and Inbucket services for Mattermost development. This setting allows developers to access performance monitoring tools during development.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2021-02-02-streamlining-developer-access-to-prometheus-and-grafana.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport ENABLED_DOCKER_SERVICES=\"mysql postgres inbucket prometheus grafana\"\n```\n\n----------------------------------------\n\nTITLE: Exposing Local Server with localhost.run\nDESCRIPTION: Command to expose local Mattermost server using localhost.run as an alternative to ngrok for webhook testing\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/developer-workflow.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nssh -R 80:localhost:8065 ssh.localhost.run\n```\n\n----------------------------------------\n\nTITLE: Running Release Scripts\nDESCRIPTION: Commands for running release scripts for different release types\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/desktop-release-process.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/release.sh rc\n```\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/release.sh patch\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Type Checker for Mattermost Desktop App\nDESCRIPTION: Command to execute the TypeScript type checker which helps reduce errors during development. Type checking is a mandatory step before code can be merged.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/style-and-code-quality.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run check-types\n```\n\n----------------------------------------\n\nTITLE: Running NPM Commands\nDESCRIPTION: Basic syntax for running npm commands in the desktop app project.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/build-commands.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run <command>\n```\n\n----------------------------------------\n\nTITLE: Copying Products Directory\nDESCRIPTION: Copies the products subdirectory from the original deployment to the customized one.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/customization/webapp.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncp -R client-original/products client/products\n```\n\n----------------------------------------\n\nTITLE: ENOSPC Error Fix Command\nDESCRIPTION: Shell command to resolve ENOSPC error when running Cypress specs on Ubuntu by increasing inotify watches limit.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-testing.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest Updates for Manual Cherry-Pick in Git\nDESCRIPTION: Command to fetch the latest updates from the origin repository before starting a manual cherry-pick process.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/getting-started/branching.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit fetch origin\n```\n\n----------------------------------------\n\nTITLE: Generated Timer Output\nDESCRIPTION: Example of the generated timer code showing method execution timing implementation.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-06-10-opentracing.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage animals\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\ntype AnimalTimer struct {\n\tSpeaker\n}\n\nfunc (a *AnimalTimer) Speak(x int) {\n\tfmt.Println(\"Timing Speak function...\")\n\t__t := time.Now()\n\ta.Speaker.Speak(x)\n\tfmt.Printf(\"Speak took %s\\n\", x, time.Since(__t))\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NodeJS via Homebrew on macOS\nDESCRIPTION: Command to install Node Version Manager (NVM) using Homebrew package manager on macOS.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install nvm\n```\n\n----------------------------------------\n\nTITLE: Creating Admin User with mmctl\nDESCRIPTION: Command to create an administrative user for Mattermost using the mmctl command-line tool.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nbin/mmctl user create --local --email ADMIN_EMAIL --username ADMIN_USERNAME --password ADMIN_PASSWORD --system_admin\n```\n\n----------------------------------------\n\nTITLE: Go-Plugin Patch Script for Debugging\nDESCRIPTION: Shell script to modify go-plugin package configuration for enabling proper plugin debugging by disabling keep-alive features\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/developer-workflow.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# patch_go_plugin.sh\n\nGO_PLUGIN_PACKAGE_VERSION=$1\n\nGO_PLUGIN_RPC_CLIENT_PATH=${GOPATH}/pkg/mod/github.com/hashicorp/go-plugin@${GO_PLUGIN_PACKAGE_VERSION}/rpc_client.go\n\necho \"Patching $GO_PLUGIN_RPC_CLIENT_PATH for debugging Mattermost plugins\"\n\nif ! grep -q 'mux, err := yamux.Client(conn, nil)' \"$GO_PLUGIN_RPC_CLIENT_PATH\"; then\n  echo \"The file has already been patched or the target line was not found.\"\n  exit 0\nfi\n\nsudo sudo sed -i '' '/import (/a\\\n    \"time\"\n' $GO_PLUGIN_RPC_CLIENT_PATH\n\nsudo sed -i '' '/mux, err := yamux.Client(conn, nil)/c\\\n    sessionConfig := yamux.DefaultConfig()\\\n    sessionConfig.EnableKeepAlive = false\\\n    sessionConfig.ConnectionWriteTimeout = time.Minute * 5\\\n    mux, err := yamux.Client(conn, sessionConfig)\n' $GO_PLUGIN_RPC_CLIENT_PATH\n\necho \"Patched go-plugin's rpc_client.go for debugging Mattermost plugins\"\n```\n\n----------------------------------------\n\nTITLE: Setting Version Number Environment Variable in Bash\nDESCRIPTION: This snippet shows how to set the environment variable for specifying the version number when bumping the version in the Mattermost mobile app build process.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/mobile-build-process/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nVERSION_NUMBER=X.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Linter for Mattermost Desktop App\nDESCRIPTION: Command to run eslint for enforcing good coding style in the Mattermost Desktop App. This helps maintain consistent code quality across the project.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/style-and-code-quality.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint:js\n```\n\n----------------------------------------\n\nTITLE: Running Fastlane to Increment Build Number\nDESCRIPTION: This snippet demonstrates the commands to navigate to the Fastlane directory and run the script to set the app build number.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/mobile-build-process/bump-build-number.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd fastlane\n$ fastlane set_app_build_number\n```\n\n----------------------------------------\n\nTITLE: Granting Database Creation Rights to PostgreSQL User\nDESCRIPTION: SQL command to give the mmuser role the ability to create databases in PostgreSQL.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nALTER ROLE mmuser CREATEDB;\n```\n\n----------------------------------------\n\nTITLE: Copying Developer Config Override in Monorepo Migration\nDESCRIPTION: Copies the config.override.mk file from the old mattermost-server location to the new server directory. This preserves your development environment customizations.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/monorepo-migration-notes.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd server\ncp ../../mattermost-server-old/config.override.mk ./\n```\n\n----------------------------------------\n\nTITLE: Cutting Final Release\nDESCRIPTION: Commands for generating the final release version\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/desktop-release-process.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b release-X.Y\n./scripts/release.sh final\ngit push --follow-tags upstream release-X.Y:release-X.Y\n```\n\n----------------------------------------\n\nTITLE: Displaying Go Vet Output for Syntax Error\nDESCRIPTION: This snippet shows the output of 'go vet' for the same syntax error as in the previous snippet. It demonstrates a more concise and readable error message, which is easier for developers to understand and act upon.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-01-13-incorporating-golangci-lint.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# github.com/mattermost/mattermost-server/v5/app\napp/channel.go:1889:64: syntax error: unexpected newline, expecting comma or )\n# github.com/mattermost/mattermost-server/v5/app\nvet: app/channel.go:1889:64: missing ',' before newline in argument list (and 10 more errors)\n```\n\n----------------------------------------\n\nTITLE: Installing RPM Build Tools for Mattermost Desktop App\nDESCRIPTION: Installs the rpm-build package which is required to build RPM packages of the Mattermost Desktop App for distribution on Fedora/Red Hat/CentOS systems.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/developer-setup/redhat.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf install rpm-build\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Containers\nDESCRIPTION: Command to stop all Docker containers started by the run-server command.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nmake stop-docker\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Server URL in Mattermost Mobile App Configuration (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to override the default server URL and enable auto-selection of the server URL in the Mattermost mobile app configuration. These settings are added to the assets/override/config.json file.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/build-your-own/white-label.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DefaultServerUrl\": \"http://192.168.0.13:8065\",\n  \"AutoSelectServerUrl\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Error Response\nDESCRIPTION: Example of returning a generic error message in dialog submission response.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-dialogs/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\"error\": \"Failed to fetch additional data. Please try again.\"}\n```\n\n----------------------------------------\n\nTITLE: Building Distribution Files\nDESCRIPTION: Generates the distribution package containing customized web app files.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/customization/webapp.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake dist\n```\n\n----------------------------------------\n\nTITLE: Updating Web App Plugin Registration (5.2+)\nDESCRIPTION: Changes required for registering a web app plugin in JavaScript when migrating from Mattermost 5.1 and earlier to 5.2 and later.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/migration.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.registerPlugin('my-plugin', new MyPlugin());\n```\n\n----------------------------------------\n\nTITLE: Initial Config Test Implementation in Go\nDESCRIPTION: First implementation of TestConfigEnableDeveloper to verify SiteURL initialization when EnableDeveloper is true.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-27-advanced-git-tbilisi-free-university.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc TestConfigEnableDeveloper(t *testing.T) {\n\tc1 := Config{\n\t\tServiceSettings: ServiceSettings{\n\t\t\tEnableDeveloper: NewBool(true),\n\t\t},\n\t}\n\tc1.SetDefaults()\n\n\trequire.Equal(t, SERVICE_SETTINGS_DEFAULT_SITE_URL, *c1.ServiceSettings.SiteURL)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mattermost Test Database\nDESCRIPTION: SQL command to create the Mattermost test database in PostgreSQL.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nCREATE DATABASE mattermost_test;\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL User Role Creation\nDESCRIPTION: SQL command to create a PostgreSQL user role for Mattermost in non-Docker setup.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nCREATE ROLE mmuser WITH LOGIN PASSWORD 'mostest';\n```\n\n----------------------------------------\n\nTITLE: Setting GOPATH Environment Variable\nDESCRIPTION: Shell command to explicitly set the GOPATH environment variable\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/server/hello-world.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport GOPATH=$HOME/go\n```\n\n----------------------------------------\n\nTITLE: Committing Work in Progress Changes in Git\nDESCRIPTION: This snippet demonstrates how to quickly commit work-in-progress changes during active development. It's used as an example of a development style that should be cleaned up before submitting a pull request.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-01-24-submitting-great-prs.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit commit -m wip\n```\n\n----------------------------------------\n\nTITLE: Installing Git on macOS\nDESCRIPTION: Command to install Git version control using Homebrew on macOS.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nbrew install git\n```\n\n----------------------------------------\n\nTITLE: Updating GitLab Omnibus Branch\nDESCRIPTION: Commands for syncing the fork with upstream and creating a new branch for Mattermost updates\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/gitlab-omnibus.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit fetch upstream\ngit pull upstream master\ngit push\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b mattermost-X.Y\n```\n\n----------------------------------------\n\nTITLE: Formatting Zapier Messages in Mattermost using Markdown\nDESCRIPTION: Example of how to format Zapier messages in Mattermost using Markdown syntax for things like headings, links, and timestamps. This snippet demonstrates structuring messages for services like GitHub, UserVoice, and GitLab.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/zapier-integration/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n##### [Title of issue]([Link to issue])\n\n#[group] [keywords]\n\n[Body text]\n\n[Name of person who created] - [Timestamp with link back to service](Link)\n```\n\n----------------------------------------\n\nTITLE: Force Pushing Updates\nDESCRIPTION: Pushes the rebased changes back to the remote repository using force push.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/customization/webapp.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngit push -f origin custom_branch\n```\n\n----------------------------------------\n\nTITLE: Deploying Infrastructure with Code\nDESCRIPTION: Examples of commands used for deploying infrastructure as code, including AWS CloudFormation, Serverless Framework, and Kubernetes. These commands represent the ideal scenario where all configuration is defined in code and deployment requires minimal manual intervention.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/infrastructure/guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation deploy\n```\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply\n```\n\n----------------------------------------\n\nTITLE: Checking Out Existing Release Branch\nDESCRIPTION: Command for checking out an existing release branch for patch releases\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/desktop-release-process.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout release-X.Y\n```\n\n----------------------------------------\n\nTITLE: Exporting GPG Public Key in Bash\nDESCRIPTION: Command to export a GPG public key to a file, using the hexadecimal key ID.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/using-and-managing-plugins.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngpg --export F3FACE45E0DE642C8BD6A8E64C7C6562C192CC1F > ./my-pub-key\n```\n\n----------------------------------------\n\nTITLE: Granting Database Privileges to PostgreSQL User\nDESCRIPTION: SQL command to grant all privileges on the Mattermost test database to the mmuser role.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nGRANT ALL PRIVILEGES ON DATABASE mattermost_test TO mmuser;\n```\n\n----------------------------------------\n\nTITLE: Listing GPG Secret Keys in Bash\nDESCRIPTION: Command to list GPG secret keys, used to find the hexadecimal ID of your private key.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/using-and-managing-plugins.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngpg --list-secret-keys\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Build Number Bump in Bash\nDESCRIPTION: This snippet demonstrates how to set environment variables for bumping the build number in the Mattermost mobile app build process. It includes variables for incrementing the build number, specifying the build number, committing changes to git, and setting the branch information.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/mobile-build-process/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport INCREMENT_BUILD_NUMBER=true\nexport BUILD_NUMBER=X\nexport COMMIT_CHANGES_TO_GIT=true\nexport BRANCH_TO_BUILD=main\nexport GIT_LOCAL_BRANCH=bump-build\n```\n\n----------------------------------------\n\nTITLE: Querying GitHub Organization Repositories and Collaborators using GraphQL\nDESCRIPTION: This GraphQL query retrieves information about Mattermost's GitHub organization, including members, repositories, and collaborators. It's used to check for any explicit repository access that needs to be revoked during offboarding.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/offboarding.md#2025-04-23_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  organization(login: \"mattermost\") {\n    members(first: 100) {\n      nodes {\n        login\n      }\n    }\n    repositories(first: 100) {\n      nodes {\n        name\n        collaborators(first: 100) {\n          edges {\n            node {\n              login\n            }\n            permission\n          }\n          pageInfo {\n            hasNextPage\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up GitLab Omnibus Repository\nDESCRIPTION: Commands for cloning and configuring the GitLab Omnibus repository for development\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/gitlab-omnibus.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://gitlab.com/mattermost/omnibus-gitlab.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://gitlab.com/gitlab-org/omnibus-gitlab.git\n```\n\n----------------------------------------\n\nTITLE: Creating AST Nodes for Code Instrumentation\nDESCRIPTION: Detailed implementation of creating AST nodes to represent the tracing code, including assignment statements and defer statement. This code constructs the AST structure programmatically.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-10-25-instrumenting-go-code-via-ast.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// first statement is the assignment:\n// span, ctx := tracing.StartSpanWithParentByContext(c.App.Context, \"api4:apiCall\")\na1 := ast.AssignStmt{\n    // token.DEFINE is := \n\tTok: token.DEFINE,\n\t// left hand side has two identifiers, span and ctx\n\tLhs: []ast.Expr{\n\t\t&ast.Ident{Name: \"span\"},\n\t\t&ast.Ident{Name: \"ctx\"},\n\t},\n\t// right hand is a call to function\n\tRhs: []ast.Expr{\n\t\t&ast.CallExpr{\n\t\t    // function is taken from a module 'tracing' by it's name\n\t\t\tFun: &ast.SelectorExpr{\n\t\t\t\tX:   &ast.Ident{Name: \"tracing\"},\n\t\t\t\tSel: &ast.Ident{Name: \"StartSpanWithParentByContext\"},\n\t\t\t},\n\t\t\t// function has two arguments\n\t\t\tArgs: []ast.Expr{\n\t\t\t    // c.App.Context\n\t\t\t\t&ast.SelectorExpr{\n\t\t\t\t\tX: &ast.SelectorExpr{\n\t\t\t\t\t\tX:   &ast.Ident{Name: \"c\"},\n\t\t\t\t\t\tSel: &ast.Ident{Name: \"App\"},\n\t\t\t\t\t},\n\t\t\t\t\tSel: &ast.Ident{Name: \"Context\"},\n\t\t\t\t},\n\t\t\t\t// handler identifier, a basic string which we prepare based on current moduleName and function name\n\t\t\t\t&ast.BasicLit{Kind: token.STRING, Value: fmt.Sprintf(\"\\\"api4:%s:%s\\\"\", moduleName, fn.Name.Name)},\n\t\t\t},\n\t\t},\n\t},\n}\n// second statement is a simple assignment\n// c.App.Context = ctx\t\t\t\t\t\t\t\na2 := ast.AssignStmt{\n    // token.ASSIGN is =\n\tTok: token.ASSIGN,\n\tLhs: []ast.Expr{\n\t\t&ast.SelectorExpr{\n\t\t\tX: &ast.SelectorExpr{\n\t\t\t\tX:   &ast.Ident{Name: \"c\"},\n\t\t\t\tSel: &ast.Ident{Name: \"App\"},\n\t\t\t},\n\t\t\tSel: &ast.Ident{Name: \"Context\"},\n\t\t},\n\t},\n\tRhs: []ast.Expr{\n\t\t&ast.Ident{Name: \"ctx\"},\n\t},\n}\n// last statement is 'defer'\t\t\t\t\t\t\t\na3 := ast.DeferStmt{\n\t// what function call should be deferred?\n\tCall: &ast.CallExpr{\n\t    // Finish from 'span' identifier\n\t\tFun: &ast.SelectorExpr{\n\t\t\tX:   &ast.Ident{Name: \"span\"},\n\t\t\tSel: &ast.Ident{Name: \"Finish\"},\n\t\t},\n\t},\n}\n// now we prepend the three statements before the rest of function body\t\t\t\t\t\t\t\nfn.Body.List = append([]ast.Stmt{&a1, &a2, &a3}, fn.Body.List...)\n```\n\n----------------------------------------\n\nTITLE: Generating Mac App Store Release\nDESCRIPTION: Commands for creating a special release for Mac App Store submission\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/desktop-release-process.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b release-X.Y\n./scripts/release.sh mas\ngit push --follow-tags upstream release-X.Y:release-X.Y\n```\n\n----------------------------------------\n\nTITLE: Adding License Section to README for Enterprise-only Plugin\nDESCRIPTION: This snippet shows how to add a license section to the README.md file for an enterprise-only plugin. It includes a description of the license and a link to learn more about the Mattermost Source Available License.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/source-available-license.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## License\n\nThis repository is licensed under the [Mattermost Source Available License](LICENSE) and requires a valid Enterprise E20 license. See {{< newtabref href=\"https://docs.mattermost.com/overview/faq.html#mattermost-source-available-license\" title=\"Mattermost Source Available License\" >}} to learn more.\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Dev Dependencies with NPM\nDESCRIPTION: Command for adding a new development-only JavaScript dependency using npm with exact version specification.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/dependecies.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ npm i --save-exact --save-dev <package-name>\n```\n\n----------------------------------------\n\nTITLE: Adding Public Key to Mattermost Server in Bash\nDESCRIPTION: Command to add a custom public key to the Mattermost server for plugin verification.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/using-and-managing-plugins.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmattermost plugin add key my-pub-key\n```\n\n----------------------------------------\n\nTITLE: Increasing Available File Descriptors in Shell Initialization\nDESCRIPTION: Command to increase the number of available file descriptors, which should be added to the shell initialization script (.bashrc or .zshrc).\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nulimit -n 8096\n```\n\n----------------------------------------\n\nTITLE: Importing GPG Public Key in Bash\nDESCRIPTION: Command to import a GPG public key from a file.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/using-and-managing-plugins.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngpg --import ./my-pub-gpg-key\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Mattermost Mobile Build\nDESCRIPTION: This snippet sets up environment variables required for bumping the build number in the Mattermost mobile app. It includes settings for Git operations and build number increment configuration.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/mobile-build-process/bump-build-number.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport LC_ALL=\"en_US.UTF-8\"\n\n############ MATTERMOST BUILD ############\nexport COMMIT_CHANGES_TO_GIT=true\nexport BRANCH_TO_BUILD=master\nexport GIT_LOCAL_BRANCH=build-number\nexport RESET_GIT_BRANCH=false\n\nexport INCREMENT_BUILD_NUMBER=true\nexport INCREMENT_BUILD_NUMBER_MESSAGE=\"Bump app build number to\"\n```\n\n----------------------------------------\n\nTITLE: Creating Blog Post Frontmatter in Markdown\nDESCRIPTION: This snippet shows the template for creating the frontmatter of a Mattermost blog post in Markdown. It includes fields for title, description, heading, slug, date, author, and GitHub/community usernames.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/writing-a-blog-post.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: <user readable title of your blog post, e.g. My Blog Post>\ndescription: \"<brief description of the post less than 160 characters in length>\"\nheading: \"<the heading that appears at the top of the page content>\"\nslug: <URL name of your blog post, e.g. my-blog-post>\ndate: YYYY-MM-DDT12:00:00-04:00\nauthor: <FirstName LastName>\ngithub: <your GitHub username>\ncommunity: <your community.mattermost.com username>\n---\n\n<intro to blog post>\n\n#### <some heading>\n<some content>\n\n#### <another heading>\n<some more content>\n```\n\n----------------------------------------\n\nTITLE: Creating New Release Branch\nDESCRIPTION: Commands for creating a new release branch for major/minor releases\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/desktop-release-process.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit checkout -b release-X.Y\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS EC2 Instance User Data with SSH CA Trust\nDESCRIPTION: Cloud-init configuration for setting up SSH Certificate Authority trust on AWS EC2 instances. This configuration adds the trusted CA public key and configures sshd to use it for user authentication.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/infrastructure/aws.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#cloud-config\nbootcmd:\n  - cloud-init-per once ssh-users-ca echo \"TrustedUserCAKeys /etc/ssh/trusted_ca_keys.pub\" >> /etc/ssh/sshd_config\nwrite_files:\n  - path: /etc/ssh/trusted_ca_keys.pub\n    content: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDHDwQhQ3eRiW4CV5RKAJb0n9P/07aHrku5hAVc+M59ejZHPVD/4sEfSaKvIXNTcY5TsrudzEhY3nVBsJDcJjb5qC5ayy+JNGFNnF05JoZ4E3tggJm5HQv3Znm/N6s65ZMA0HsZojCvEf+K8P0AKdJWiZbZGF095+N3WL9bUQIxBmCIBVPAOQSTCo8QKeorFfxhw/XcmH3s/KDV52/hEt6RWTxaDup03r7y8fbVo81F4QJ2ItmHgL3vGSpJk/nkLB2RWxT6zp4JIEo7PZ6S2Gm/2jaW+B5DftUd0gI8GKo9+vhtWjEEbOdu/mz92/GHLHW+s3TnftLeXVs7a8UYwdh/qJ4P64U3wlA//igo7ToXONsZ4TwmcKg6FD9JAq+LKTC0+prx/Gulx5esiPS+bgnkM/CMuoWMtucLoXaNz9ELBmeb6QSj1a7T/4LFzBiefT977OIhglORnEsKvY0HXvzX66a73Lm3bC9mUXxi1HSJNTDdLOmnVK+ipVjViy2/C9KJmKL3ePwBQSJ9d9IK76W4SGXTGT4mTVBSSF6j+/2a4tXq9c3NCuEWyXgPJRP1t6Iib42oAosxPoZ4zeBZM05BHbveD2b0G/bmeaZRgsEaZ3Qjnr50a6Wke7Vr9q3QGjn3+8QEdUdrnCTN8dlloLYhwY9pgh1JEYDaCdPHSP1ppw==\n```\n\n----------------------------------------\n\nTITLE: HTTP Login Response with Session Token\nDESCRIPTION: Example HTTP response containing the session token and user object after successful authentication. Shows headers and response format.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/faq/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nSet-Cookie: MMSID=hyr5dmb1mbb49c44qmx4whniso; Path=/; Max-Age=2592000; HttpOnly\nToken: hyr5dmb1mbb49c44qmx4whniso\nX-Ratelimit-Limit: 10\nX-Ratelimit-Remaining: 9\nX-Ratelimit-Reset: 1\nX-Request-Id: smda55ckcfy89b6tia58shk5fh\nX-Version-Id: developer\nDate: Fri, 11 Sep 2015 13:21:14 GMT\nContent-Length: 657\nContent-Type: application/json; charset=utf-8\n\n{{user object as json}}\n```\n\n----------------------------------------\n\nTITLE: Installing NodeJS using nvm\nDESCRIPTION: This snippet shows how to install nvm (Node Version Manager) and use it to install the latest LTS version of NodeJS.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/developer-setup/ubuntu.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash\nnvm install --lts\n```\n\n----------------------------------------\n\nTITLE: Navigating to Desktop Directory\nDESCRIPTION: Command to change into the cloned desktop directory.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/developer-setup.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd desktop\n```\n\n----------------------------------------\n\nTITLE: Loading RVM\nDESCRIPTION: Command to load Ruby Version Manager into current shell session.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsource ~/.rvm/scripts/rvm\n```\n\n----------------------------------------\n\nTITLE: Hugo Note Shortcode Example\nDESCRIPTION: Example of using the note shortcode to display a styled message box with mandatory values.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{<note \"Mandatory values\" \"icon-star\" \"Mandatory Value\">}} \n- The `app_id` and `homepage_url` values must be specified.\n- At least one deployment method - `aws_lambda`, `open_faas`, or `http` - must be specified.\n{{</note>}}\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Ruby Version\nDESCRIPTION: Command to install Ruby version 3.2.0 using RVM.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nrvm install 3.2.0\n```\n\n----------------------------------------\n\nTITLE: Renaming Client Directory\nDESCRIPTION: Renames the original client directory to prepare for custom deployment.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/customization/webapp.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/mattermost\nmv client client-original\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Mattermost R&D Handbook Page using HTML meta tag\nDESCRIPTION: This HTML snippet uses a meta refresh tag to automatically redirect the user to the Mattermost handbook page for Research and Development teams. The redirect occurs immediately (0 second delay).\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/rd-teams.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<meta http-equiv=\"refresh\" content=\"0; url=https://handbook.mattermost.com/operations/research-and-development\" />\n```\n\n----------------------------------------\n\nTITLE: Extracting Method Metadata from AST Nodes in Go\nDESCRIPTION: Implements functions to extract and format method metadata from AST nodes. It processes method parameters and return types, storing them in the previously defined structs.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-06-10-opentracing.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc formatNode(src []byte, node ast.Expr) string {\n\treturn string(src[node.Pos()-1 : node.End()-1])\n}\n\nfunc extractMethodMetadata(method *ast.Field, src []byte) methodData {\n\tparams := []methodParam{}\n\tresults := []string{}\n\te := method.Type.(*ast.FuncType)\n\tif e.Params != nil {\n\t\tfor _, param := range e.Params.List {\n\t\t\tfor _, paramName := range param.Names {\n\t\t\t\tparamType := formatNode(src, param.Type)\n\t\t\t\tparams = append(params, methodParam{Name: paramName.Name, Type: paramType})\n\t\t\t}\n\t\t}\n\t}\n\n\tif e.Results != nil {\n\t\tfor _, r := range e.Results.List {\n\t\t\ttypeStr := formatNode(src, r.Type)\n\t\t\tif len(r.Names) > 0 {\n\t\t\t\tfor _, k := range r.Names {\n\t\t\t\t\tresults = append(results, fmt.Sprintf(\"%s %s\", k.Name, typeStr))\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresults = append(results, typeStr)\n\t\t\t}\n\t\t}\n\t}\n\treturn methodData{Params: params, Results: results}\n}\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Kubernetes Pods\nDESCRIPTION: Commands for debugging pod issues using kubectl describe and logs commands, with placeholders for pod name and namespace variables.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/infrastructure/kubernetes/kubernetes-troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl describe pods ${POD_NAME} -n ${NAMESPACE}\n\n$ kubectl logs pods ${POD_NAME} -n ${NAMESPACE}\n```\n\n----------------------------------------\n\nTITLE: Slack User Mention Translation in JSON\nDESCRIPTION: Example showing how Mattermost translates Slack-style user mentions in JSON responses.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/slash-commands/slack/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"text\": \"<5fb5f7iw8tfrfcwssd1xmx3j7y> this is a notification.\"}\n```\n\n----------------------------------------\n\nTITLE: Installing NodeJS using NodeSource\nDESCRIPTION: This snippet demonstrates how to install NodeJS from NodeSource repositories on a Debian-based Linux system. It includes steps for adding the NodeSource repository and installing NodeJS.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/developer-setup/ubuntu.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get update\nsudo apt-get install -y ca-certificates curl gnupg\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg\necho \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_16.x nodistro main\" | sudo tee /etc/apt/sources.list.d/nodesource.list\nsudo apt-get update\nsudo apt-get install -y nodejs\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Mattermost Desktop App on Fedora/Red Hat/CentOS\nDESCRIPTION: Installs X11 development libraries, libpng, and other dependencies required to build native Node modules for the Mattermost Desktop App.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/developer-setup/redhat.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo yum install git python3 g++ libX11-devel libXtst-devel libpng-devel\n```\n\n----------------------------------------\n\nTITLE: Installing JQ JSON Parser\nDESCRIPTION: Commands for installing the JQ JSON parsing tool on different operating systems\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/desktop-release-process.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n// macOS\nbrew install jq\n\n// Linux (Ubuntu/Debian)\nsudo apt-get install jq\n\n// Windows\nchoco install jq\n```\n\n----------------------------------------\n\nTITLE: Installing Hugo Package Manager Commands\nDESCRIPTION: Commands for installing Hugo on different operating systems using package managers.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# For example, on macOS:\nbrew install hugo\n\n# Snapcraft on Linux:\nsnap install hugo\n\n# or using golang directly:\ngo install github.com/gohugoio/hugo@v0.101.0\n```\n\n----------------------------------------\n\nTITLE: Hugo Mermaid Diagram Shortcode Example\nDESCRIPTION: Example of using the mermaid shortcode to create a sequence diagram showing app installation flow.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{<mermaid>}}\nsequenceDiagram\n    actor System Admin\n    System Admin->>Mattermost server: install app\n    Mattermost server->>Apps framework: install app\n    Apps framework->>App: request manifest\n    App->>Apps framework: send manifest\n    Apps framework->>System Admin: request permissions\n    System Admin->>Apps framework: grant permissions\n    Apps framework->>Mattermost server: create bot\n    Apps framework->>Mattermost server: create OAuth app\n    Apps framework->>Apps framework: enable app\n    Apps framework->>App: call OnInstall if defined\n{{</mermaid>}}\n```\n\n----------------------------------------\n\nTITLE: Checking Ruby Version\nDESCRIPTION: Command to check the currently installed version of Ruby.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nruby --version\n```\n\n----------------------------------------\n\nTITLE: Installing rpmbuild for building RPMs\nDESCRIPTION: This snippet shows how to install rpmbuild, which is required for building RPM packages on Linux systems.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/developer-setup/ubuntu.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install rpm\n```\n\n----------------------------------------\n\nTITLE: Non-Internationalized Button in React\nDESCRIPTION: Example of a button implementation without internationalization, which is problematic for multi-language support.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-12-04-common-i18n-mistakes.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyButton() {\n    return <button>{'Click me!'}</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Spanish Translation Example for React Intl\nDESCRIPTION: Example of a Spanish translation file for React Intl, demonstrating how pluralization can affect multiple words in a sentence.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-12-04-common-i18n-mistakes.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"email_sender.remaining\": \"{remaining, number} {remaining, plural, one {correo pendiente} other {correos pendientes}}.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Slack Custom Link Text Translation in JSON\nDESCRIPTION: Example of how Mattermost handles Slack-style custom link text formatting in JSON responses.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/slash-commands/slack/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"text\": \"Click <https://mattermost.com/|here> for a link.\"}\n```\n\n----------------------------------------\n\nTITLE: Moving custom email template in Shell\nDESCRIPTION: This command moves a custom email template file into the Mattermost templates directory.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/customization/server-files.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmv ./post_body_full.html ~/mattermost/templates/\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Emoticon in Markdown\nDESCRIPTION: Shows how to represent a text-based emoticon using backticks in Markdown for inline code formatting.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-26-emojis.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n``<3`` or ``ಠ_ಠ``\n```\n\n----------------------------------------\n\nTITLE: Development Environment Setup Commands\nDESCRIPTION: Commands for generating plugin documentation and starting the Hugo development server.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake plugin-data\nmake run\n```\n\n----------------------------------------\n\nTITLE: Conversation Example in Markdown\nDESCRIPTION: A short dialogue example showing a conversation between conference attendees, demonstrating how people from different locations connected at the event.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-07-18-chain-react-2019.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Yes, yes...\n- for real?\n- Yes I come all the way from Taiwan... and you?\n- Oh I'm from here.. and what about you\n- me? hmm I flew 18 hours to get here (me)\n```\n\n----------------------------------------\n\nTITLE: Extracting custom i18n files in Shell\nDESCRIPTION: This snippet shows how to move and extract the custom i18n tarball in the Mattermost i18n directory.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/customization/server-files.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmv i18n.tar mattermost/i18n\ncd ~/mattermost/i18n\ntar -xvf i18n.tar\n```\n\n----------------------------------------\n\nTITLE: Installing curl\nDESCRIPTION: This snippet shows how to install the curl utility, which might be required for some of the installation steps.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/developer-setup/ubuntu.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install curl\n```\n\n----------------------------------------\n\nTITLE: Accessing SQLite Database\nDESCRIPTION: Command to view and edit the SQLite database directly using the sqlite3 command-line tool.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/focalboard/personal-server-setup-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsqlite3 focalboard.db\n```\n\n----------------------------------------\n\nTITLE: Building Focalboard Server via Command Line\nDESCRIPTION: Commands to build and run the Focalboard server from the terminal. This involves running make commands to prepare the build environment and start the server on port 8000.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/focalboard/personal-server-setup-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake prebuild\nmake\n```\n\nLANGUAGE: bash\nCODE:\n```\n./bin/focalboard-server\n```\n\n----------------------------------------\n\nTITLE: Finding a Specific Commit in Git\nDESCRIPTION: This snippet shows how to use git log to find a specific commit related to a ticket number in the master branch.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-27-advanced-git-tbilisi-free-university.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit log --grep MM-22619 master\n```\n\n----------------------------------------\n\nTITLE: Incorrect Pluralization in go-i18n\nDESCRIPTION: Example of incorrect pluralization handling in go-i18n, using (s) which doesn't work for all languages.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-12-04-common-i18n-mistakes.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n/*\n    The translation file contains:\n    {\n        \"id\": \"app.email_sender.remaining\",\n        \"translation\": \"{{.Remaining}} email(s) remaining\"\n    }\n*/\n\nfunc logEmailsRemaining(remaining int) {\n    log.Print(translateFunc(\"app.email_sender.remaining\", map[string]interface{}{\n        \"Remaining\": remaining,\n    }))\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Pod Status\nDESCRIPTION: Commands to verify pod status in community and community-daily namespaces, showing running instances of Mattermost and job servers.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/infrastructure/kubernetes/kubernetes-troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get po -n community\nNAME                                              READY   STATUS    RESTARTS   AGE\nmattermost-community-0                            1/1     Running   0          5h\nmattermost-community-1                            1/1     Running   0          23h\nmattermost-community-jobserver-65985bfc47-88qq9   1/1     Running   0          5h\n\n$ kubectl get po -n community-daily\nNAME                                                    READY   STATUS    RESTARTS   AGE\nmattermost-community-daily-0                            1/1     Running   0          3h\nmattermost-community-daily-1                            1/1     Running   0          3h\nmattermost-community-daily-jobserver-78f7cbf756-wls4f   1/1     Running   0          2h\n```\n\n----------------------------------------\n\nTITLE: Creating tarball for i18n files in Shell\nDESCRIPTION: This snippet shows how to create a tarball of the customized i18n files within the i18n directory.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/customization/server-files.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd i18n\ntar -cvf i18n.tar *\n```\n\n----------------------------------------\n\nTITLE: Listing Files in Working Directory using Bash\nDESCRIPTION: Command to list files in the working directory, showing the necessary files for signing the iOS app.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/unsigned/ios.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ls -la\ntotal 81472\ndrwxr-xr-x  7 user  staff       224 Oct 11 10:54 .\ndrwxr-xr-x  8 user  staff       256 Oct 11 10:49 ..\n-rw-r--r--@ 1 user  staff  75261811 Oct  2 12:44 Mattermost-unsigned.ipa\n-rw-r--r--@ 1 user  staff     10746 Oct  2 10:30 app.mobileprovision\n-rw-r--r--@ 1 user  staff      9963 Oct  2 10:30 noti.mobileprovision\n-rw-r--r--@ 1 user  staff     10763 Oct  2 10:30 share.mobileprovision\n-rwxr-xr-x  1 user  staff     38581 Oct 11 10:54 sign-ios\n```\n\n----------------------------------------\n\nTITLE: Updating ServeHTTP Hook in Go (5.2+)\nDESCRIPTION: Example of updating the ServeHTTP hook to include the new plugin.Context parameter in Mattermost 5.2 and later.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/migration.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (p *MyPlugin) ServeHTTP(c *plugin.Context, w http.ResponseWriter, r *http.Request) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Master Branch\nDESCRIPTION: Updates the local master branch with the latest changes from upstream.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/customization/webapp.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout master\ngit pull upstream master\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Blog Post\nDESCRIPTION: YAML metadata configuration for the blog post including title, description, categories, author information and other metadata.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-12-18-kubecon-na-2019.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: KubeCon NA 2019\nheading: \"KubeCon North American 2019\"\ndescription: \"Takeaways from our team's experience at KubeCon + CloudNativeCon North America 2019.\"\nslug: kubecon-na-2019\ndate: 2019-12-18T12:00:00-04:00\ncategories:\n    - \"kubernetes\"\nauthor: Gabe Jackson\ngithub: gabrieljackson\ncommunity: gabe.jackson\n```\n\n----------------------------------------\n\nTITLE: Hugo Tabbed Content Shortcode Example\nDESCRIPTION: Example of using the tabs and tab shortcodes to create tabbed content sections.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{<tabs \"tab_group_name\" \"tabid1,tabname1;tabid2,tabname2;...\" \"initial_tab_id\">}}\n{{<tab \"tabid1\" \"display: block;\">}}\n- Content for tab #1\n{{</tab>}}\n{{<tab \"tabid2\">}}\n- Content for tab #2\n{{</tab>}}\n```\n\n----------------------------------------\n\nTITLE: Attaching Secondary Network Interface in Ubuntu 18.04\nDESCRIPTION: Bash script referenced for attaching a second Elastic Network Interface (ENI) to Ubuntu 18.04 instances. This script is used in the Pritunl VPN infrastructure to maintain consistent IP addresses across instances in the AutoScaling Groups.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-05-04-pritunl.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Viewing Push Proxy Log (Bash)\nDESCRIPTION: This command displays the last 1000 lines of the Mattermost Push Proxy log file for troubleshooting purposes.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/push-notifications/service.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo tail -n 1000 /var/log/upstart/mattermost-push-proxy.log\n```\n\n----------------------------------------\n\nTITLE: Google Calendar URL\nDESCRIPTION: The URL for the R&D shared Google Calendar containing team meetings and events.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/onboarding/manager-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nhttps://calendar.google.com/calendar/embed?src=mattermost.com_u77qllr0v45a3vss7rqcutt7d4%40group.calendar.google.com&ctz=America%2FLos_Angeles\n```\n\n----------------------------------------\n\nTITLE: Installing Viscosity VPN Client on macOS\nDESCRIPTION: This command installs the Viscosity VPN client on macOS using Homebrew Cask. Viscosity is a VPN client that supports DNS settings, which is required for this VPN setup.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/infrastructure/vpn-cloud.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew cask install viscosity\n```\n\n----------------------------------------\n\nTITLE: Exporting GPG Private Key in Bash\nDESCRIPTION: Command to export a GPG private key to a file, using the hexadecimal key ID.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/using-and-managing-plugins.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngpg --export-secret-keys F3FACE45E0DE642C8BD6A8E64C7C6562C192CC1F > ./my-priv-key\n```\n\n----------------------------------------\n\nTITLE: Backing up email template in Shell\nDESCRIPTION: This command renames an existing email template file as a backup before replacing it with a custom version.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/customization/server-files.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/mattermost/templates\nmv post_body_full.html post_body_full_yyyy_MM_dd.html\n```\n\n----------------------------------------\n\nTITLE: Directory Structure of Mattermost Desktop App\nDESCRIPTION: A hierarchical representation of the Mattermost Desktop App's directory structure, showing the organization of documentation, tests, resources, scripts, and source code files.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/architecture/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMattermost Desktop\n├── docs/ - Documentation for working on the Desktop App\n├── e2e/ - E2E tests\n│   ├── modules/ - Setup code for the E2E tests\n│   └── specs/ - E2E tests themselves\n├── resources/ - Assets such as images or sound files that the Desktop App uses\n├── scripts/ - Automated scripts used for building or packaging the Desktop App\n└── src/ - Application source code\n    ├── assets/ - Assets such as images or sound files that the Desktop App uses\n    ├── common/ - Common objects and utility functions that aren't specifically tied to Electron\n    ├── main/ - The majority of the main process code, including setup for the Electron app\n    ├── renderer/ - The web code for all of the main application wrapper, modals. and server dropdown views that are used by the renderer process\n    └── types/ - Common types for use between all of the individual modules\n```\n\n----------------------------------------\n\nTITLE: Signing Mattermost iOS App using sign-ios Script\nDESCRIPTION: Command to sign the Mattermost iOS app using the sign-ios script with custom provisioning profiles, certificate, and display name.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/unsigned/ios.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./sign-ios Mattermost-unsigned.ipa -c \"Apple Distribution: XXXXXX. (XXXXXXXXXX)\" -a app.mobileprovision -n noti.mobileprovision -s share.mobileprovision -g group.com.mattermost -d \"My App Display Name\" MyApp-signed.ipa\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Results Page with YAML Front Matter\nDESCRIPTION: YAML front matter block that configures a search results page. Specifies the page type, layout template, title, and output format settings.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/search/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: page\nlayout: search\ntitle: Search results\noutputs:\n  - html\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Poor Syntax Error Output in GolangCI-Lint for Go\nDESCRIPTION: This snippet demonstrates the poor display of syntax errors in GolangCI-Lint output. It shows how a single missing parenthesis leads to a long, difficult-to-read line containing all the errors found, which is not developer-friendly.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-01-13-incorporating-golangci-lint.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nWARN [runner] Can't run linter unused: buildssa: analysis skipped: errors in package: [/home/agniva/play/go/src/github.com/mattermost/mattermost-server/app/channel.go:1889:64: missing ',' before newline in argument list /home/agniva/play/go/src/github.com/mattermost/mattermost-server/app/channel.go:1890:1: expected operand, found '}' /home/agniva/play/go/src/github.com/mattermost/mattermost-server/app/channel.go:1897:2: missing ',' in argument list /home/agniva/play/go/src/github.com/mattermost/mattermost-server/app/channel.go:1898:1: expected operand, found '}' /home/agniva/play/go/src/github.com/mattermost/mattermost-server/app/channel.go:1903:2: missing ',' in argument list /home/agniva/play/go/src/github.com/mattermost/mattermost-server/app/channel.go:1904:1: expected operand, found '}' /home/agniva/play/go/src/github.com/mattermost/mattermost-server/app/channel.go:1911:2: missing ',' in argument list /home/agniva/play/go/src/github.com/mattermost/mattermost-server/app/channel.go:1912:1: expected operand, found '}' /home/agniva/play/go/src/github.com/mattermost/mattermost-server/app/channel.go:1915:2: missing ',' in argument list /home/agniva/play/go/src/github.com/mattermost/mattermost-server/app/channel.go:1916:3: expected operand, found 'return' /home/agniva/play/go/src/github.com/mattermost/mattermost-server/app/channel.go:1917:2: expected operand, found '}'] \nWARN [runner] Can't run linter goanalysis_metalinter: structcheck: analysis skipped: errors in package: [/home/agniva/play/go/src/github.com/mattermost/mattermost-server/wsapi/api.go:7:2: could not import github.com/mattermost/mattermost-server/v5/app (/home/agniva/play/go/src/github.com/mattermost/mattermost-server/app/channel.go:1889:64: missing ',' before newline in argument list)]\n```\n\n----------------------------------------\n\nTITLE: Defining Translation String in JSON (go-i18n v1)\nDESCRIPTION: Example of how translation strings were defined in JSON files in go-i18n v1. This approach led to loose coupling between translation strings in files and code.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-10-21-localizing-matterpoll/index.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"settings_title\",\n  \"translation\": \"Settings\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Hugo Front Matter for New Documentation Pages\nDESCRIPTION: This Hugo template automatically generates the front matter for new documentation pages. It sets the title by replacing hyphens with spaces and capitalizing words, includes the current date, and marks the page as a draft.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/archetypes/default.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n---\ntitle: \"{{ replace .TranslationBaseName \"-\" \" \" | title }}\"\ndate: {{ .Date }}\ndraft: true\n---\n```\n\n----------------------------------------\n\nTITLE: Starting Mattermost service in Shell\nDESCRIPTION: This command starts the Mattermost instance after applying file changes.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/customization/server-files.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo service mattermost start\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt Directives for Mattermost Developer Site\nDESCRIPTION: Sets up crawler access rules to prevent indexing of specific URL patterns including CGI-bin and UTM tracking parameters. Also specifies the location of the sitemap for proper site indexing.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/static/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-Agent: *\nDisallow: /cgi-bin/\nDisallow: /&utm_source\nDisallow: /&utm_medium\nDisallow: /&utm_campaign\nDisallow: /?utm_\n\nSitemap: https://developers.mattermost.com/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Installing applesimutils for iOS Testing\nDESCRIPTION: Provides the Bash commands to install applesimutils, a requirement for iOS E2E testing.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/e2e.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap wix/brew\nbrew install applesimutils\n```\n\n----------------------------------------\n\nTITLE: Example Program Header for GNU AGPL\nDESCRIPTION: This snippet demonstrates how to apply the GNU AGPL terms to a new program by adding a notice at the start of each source file. It includes placeholders for the program name, copyright year, and author name.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/NOTICE.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Modifying Configuration Model in Go\nDESCRIPTION: Add fields to config.go by modifying structs like ServiceSettings and setting defaults. Must include telemetry definitions or add telemetry:none comment. Use struct tags for access level restrictions.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/server/system_console.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Example struct modification\ntype ServiceSettings struct {\n    // New field with telemetry comment\n    // telemetry: none\n    NewConfigField string\n}\n```\n\n----------------------------------------\n\nTITLE: Hugo New Tab Reference Shortcode Example\nDESCRIPTION: Example of using the newtabref shortcode to create links that open in a new browser tab.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: gotemplate\nCODE:\n```\nAll Apps should define a manifest ({{<newtabref title=\"godoc\" href=\"https://pkg.go.dev/github.com/mattermost/mattermost-plugin-apps/apps#Manifest\">}}) as a JSON object.\n```\n\n----------------------------------------\n\nTITLE: Running Fastlane Commands for Version and Build Number Bumps in Ruby\nDESCRIPTION: These commands demonstrate how to use Fastlane to bump the build number, version number, or both for the Mattermost mobile app. They utilize the previously set environment variables to perform the bumps.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/mobile-build-process/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nbundle exec fastlane set_app_build_number\nbundle exec fastlane set_app_version\nbundle exec fastlane set_app_version_build\n```\n\n----------------------------------------\n\nTITLE: Installing nvm via AUR on Arch Linux\nDESCRIPTION: Command to install Node Version Manager (nvm) using the Arch User Repository (AUR) with a helper like yay. This is an alternative method for Arch-specific installations.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/developer-setup/arch.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyay -S nvm\n```\n\n----------------------------------------\n\nTITLE: Avoiding Nested Test Blocks in Cypress\nDESCRIPTION: This example illustrates the problematic pattern of deeply nested test blocks with hooks. When a test fails inside one of the nested hooks, subsequent tests may be skipped or fail due to unexpected state, making debugging difficult.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-07-27-automated-ui-testing-with-cypress.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Parent', () => {\n    before(() => {/** Do test preparation */});\n\n    describe('Child', () => {\n        beforeEach(() => {\n            // Do test preparation for child\n            // Note: if the test failed here,\n            // succeeding tests are skipped or \n            // may fail too due to unexpected state.\n        });\n\n        it('test 1', () => {...});\n        it('test 2', () => {...});\n    });\n\n    describe('Another child', () => {\n        before(() => {/** Do test preparation for another child */});\n\n        it('test 1', () => {...});\n        it('test 2', () => {...});\n\n        describe('Grandchild', () => {\n            beforeEach(() => {/** Do test preparation for grandchild */});\n\n            it('test a', () => {...});\n            it('test b', () => {...});\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools in Bash\nDESCRIPTION: Command to install Xcode command line tools, which are required for signing iOS builds.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/unsigned/ios.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ xcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Updating Local Master Branch\nDESCRIPTION: Command to sync local master branch with upstream repository\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/desktop-release-process.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master && git fetch --all && git merge upstream/master\n```\n\n----------------------------------------\n\nTITLE: Opening Sections in Settings Modal with Cypress\nDESCRIPTION: Shows how to open a specific section within the Settings modal using Cypress commands.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/e2e-cheatsheets.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// # Open 'Notifications' of 'Settings' modal\ncy.uiOpenSettingsModal('Notifications').within(() => {\n  // # Open 'Words That Trigger Mentions' setting\n  cy.findByRole('heading', {name: 'Words That Trigger Mentions'}).should('be.visible').click();\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Mattermost Post Total with Installation Selection in Grafana\nDESCRIPTION: This PromQL query demonstrates how to use a variable for selecting specific Mattermost installations when querying the total number of posts. It calculates the sum of the rate of increase in posts over a 5-minute interval.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/infrastructure/grafana.md#2025-04-23_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\nsum(irate(mattermost_post_total{v1alpha1_mattermost_com_installation=~\"$mattermost\"}[5m]))\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Reference Log\nDESCRIPTION: Shows how to use the git reflog command to display the history of HEAD updates, including rebases and other operations.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-03-27-advanced-git-tbilisi-free-university.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ngit reflog\n```\n\n----------------------------------------\n\nTITLE: Configuring Map Remote Rules in Charles for Mattermost Webapp Debugging\nDESCRIPTION: XML configuration for Charles' Map Remote feature to redirect requests for static frontend assets to a local development server. It includes rules for login, static assets, and team pages.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2019-10-21-debugging-using-charles.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version='1.0' encoding='UTF-8' ?>\n<map>\n  <mapping>\n    <host>community*.mattermost.com</host>\n    <path>/login</path>\n    <query></query>\n    <dest>localhost:8065</dest>\n    <destPath>/login</destPath>\n  </mapping>\n  <mapping>\n    <host>community*.mattermost.com</host>\n    <path>/static/*</path>\n    <query></query>\n    <dest>localhost:8065</dest>\n  </mapping>\n  <mapping>\n    <host>community*.mattermost.com</host>\n    <path>/core/*</path>\n    <query></query>\n    <dest>localhost:8065</dest>\n  </mapping>\n  <mapping>\n    <host>community*.mattermost.com</host>\n    <path>/private-core/*</path>\n    <query></query>\n    <dest>localhost:8065</dest>\n    <destPath>/core/*</destPath>\n  </mapping>\n</map>\n```\n\n----------------------------------------\n\nTITLE: Signing Mattermost Plugin with GPG in Bash\nDESCRIPTION: Command to sign a Mattermost plugin file using GPG, specifying the private key ID and using SHA256 for digest.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/using-and-managing-plugins.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngpg -u F3FACE45E0DE642C8BD6A8E64C7C6562C192CC1F --verbose --personal-digest-preferences SHA256 --detach-sign com.mattermost.demo-plugin-0.1.0.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Listing GPG Public Keys in Bash\nDESCRIPTION: Command to list GPG public keys, used to find the hexadecimal ID of your public key.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/using-and-managing-plugins.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngpg --list-keys\n```\n\n----------------------------------------\n\nTITLE: Setting Urgent Message Priority in Mattermost\nDESCRIPTION: JSON configuration for setting a message priority to urgent level. This is used when creating posts to indicate high-priority messages to users.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/reference/message-priority/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"priority\": {\n        \"priority\": \"urgent\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing GPG Private Key in Bash\nDESCRIPTION: Command to import a GPG private key from a file.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/using-and-managing-plugins.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngpg --import ./my-priv-gpg-key\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Public Keys to Mattermost Server in Bash\nDESCRIPTION: Command to add multiple custom public keys to the Mattermost server for plugin verification.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/using-and-managing-plugins.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmattermost plugin add key my-pk-file1 my-pk-file2\n```\n\n----------------------------------------\n\nTITLE: GitLab Omnibus File Paths Configuration\nDESCRIPTION: Essential file paths and their purposes for managing Mattermost within GitLab Omnibus installation. Includes build scripts, configuration files, logs, and data directories.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/gitlab-omnibus.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nconfig/software/mattermost.rb\ndoc/gitlab-mattermost/README.md\nfiles/gitlab-cookbooks/mattermost/libraries/mattermost_helper.rb\nfiles/gitlab-cookbooks/mattermost/recipes/enable.rb\n/etc/gitlab/gitlab.rb\n/var/opt/gitlab/mattermost/config.json\n/var/log/gitlab/mattermost/logs/current\n/var/opt/gitlab/mattermost/data\n/opt/gitlab/embedded/service/mattermost\n```\n\n----------------------------------------\n\nTITLE: Installing rpmbuild for creating RPM packages on Arch Linux\nDESCRIPTION: Command to install rpmbuild, which is required for building RPM packages of the Mattermost Desktop App. This is an optional dependency needed only if you plan to create RPM packages.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/desktop/developer-setup/arch.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo pacman -S rpm\n```\n\n----------------------------------------\n\nTITLE: Go Callback Functions for io_uring Completions\nDESCRIPTION: Callback functions exported to C that handle completion queue events and execute user-provided callbacks.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2020-05-20-hands-on-iouring-go.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n//export read_callback\nfunc read_callback(iovecs *C.struct_iovec, length C.int, fd C.int) {\n\tvar buf bytes.Buffer\n\tcbMut.Lock()\n\tcbMap[uintptr(fd)].close()\n\tcbMap[uintptr(fd)].readCb(buf.Bytes())\n\tcbMut.Unlock()\n}\n\n//export write_callback\nfunc write_callback(written C.int, fd C.int) {\n\tcbMut.Lock()\n\tcbMap[uintptr(fd)].close()\n\tcbMap[uintptr(fd)].writeCb(int(written))\n\tcbMut.Unlock()\n}\n```\n\n----------------------------------------\n\nTITLE: Reviewing Git Diff Output for Successful Extraction\nDESCRIPTION: After running make i18n-extract, use git diff to verify if strings were correctly added or removed in the i18n/en.json file. This example shows a successful extraction.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/webapp/using-i18n-extract.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit diff\n```\n\n----------------------------------------\n\nTITLE: Implementing ServeMetrics Hook for Plugin Performance Metrics (Go)\nDESCRIPTION: This code implements the ServeMetrics hook to expose plugin performance metrics using the Prometheus HTTP client library. It sets up a registry and serves metrics through an HTTP handler.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/best-practices.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"net/http\"\n\n  \"github.com/mattermost/mattermost/server/public/plugin\"\n\n  \"github.com/prometheus/client_golang/prometheus\"\n  \"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nfunc (p *Plugin) initMetrics() {\n  p.registry = prometheus.NewRegistry()\n  // ... Registrations\n}\n\nfunc (p *Plugin) ServeMetrics(_ *plugin.Context, w http.ResponseWriter, r *http.Request) {\n\tpromhttp.HandlerFor(p.registry, promhttp.HandlerOpts{}).ServeHTTP(w, r)\n}\n```\n\n----------------------------------------\n\nTITLE: Slack URL Link Format Translation in JSON\nDESCRIPTION: Example of how Mattermost translates Slack-style URL links in JSON responses to Mattermost markdown format.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/slash-commands/slack/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"text\": \"<https://mattermost.com/>\"}\n```\n\n----------------------------------------\n\nTITLE: Server API Response for Successful Connection\nDESCRIPTION: Sample JSON response from the server ping API endpoint, indicating a successful connection.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"AndroidLatestVersion\":\"\",\"AndroidMinVersion\":\"\",\"DesktopLatestVersion\":\"\",\"DesktopMinVersion\":\"\",\"IosLatestVersion\":\"\",\"IosMinVersion\":\"\",\"status\":\"OK\"}\n```\n\n----------------------------------------\n\nTITLE: Performing Interactive Rebase\nDESCRIPTION: Executes an interactive rebase to update custom branch with latest changes.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/customization/webapp.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout custom_branch\ngit rebase -i master\n```\n\n----------------------------------------\n\nTITLE: Non-Idiomatic Error Handling in Mattermost\nDESCRIPTION: This snippet shows a non-idiomatic way of handling errors in Mattermost's codebase before the changes. It uses an unnecessary 'else' statement when the 'if' block ends in a 'return'.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2018-10-18-idiomatic-error-handling.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar profileMap map[string]*model.User\nif result := <-pchan; result.Err != nil {\n    return nil, result.Err\n} else {\n    profileMap = result.Data.(map[string]*model.User)\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Mattermost CLI Version\nDESCRIPTION: Command to verify that the Mattermost command line interface is functioning properly by checking its version\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/faq/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bin/mattermost -version\n```\n\n----------------------------------------\n\nTITLE: Defining PluginClass Interface in JavaScript\nDESCRIPTION: Defines the PluginClass interface with initialize and uninitialize methods used by the Mattermost web app to manage plugins.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/reference/webapp/webapp-reference.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass PluginClass {\n    /**\n    * initialize is called by the webapp when the plugin is first loaded.\n    * Receives the following:\n    * - registry - an instance of the registry tied to your plugin id\n    * - store - the Redux store of the web app.\n    */\n    initialize(registry, store)\n\n    /**\n    * uninitialize is called by the webapp if your plugin is uninstalled\n    */\n    uninitialize()\n}\n```\n\n----------------------------------------\n\nTITLE: Action ID Context Example\nDESCRIPTION: Example showing how to use a single unguessable action ID for both authentication and action identification.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/interactive-messages/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"user_id\": \"rd49ehbqyjytddasoownkuqrxe\",\n    \"post_id\": \"gqrnh3675jfxzftnjyjfe4udeh\",\n    \"channel_id\": \"j6j53p28k6urx15fpcgsr20psq\",\n    \"team_id\": \"5xxzt146eax4tul69409opqjlf\",\n    \"context\": {\n        \"action_id\": \"someunguessableactionid\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hugo Collapse Shortcode Example\nDESCRIPTION: Example of using the collapse shortcode to create a collapsible text box with client bindings request.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{<collapse id=\"client_bindings_request\" title=\"Client requests bindings from server\">}}\n`GET /plugins/com.mattermost.apps/api/v1/bindings?user_id=ws4o4macctyn5ko8uhkkxmgfur&channel_id=qphz13bzbf8c7j778tdnaw3huc&scope=webapp`\n{{</collapse>}}\n```\n\n----------------------------------------\n\nTITLE: Including API Documentation Shortcode in HTML\nDESCRIPTION: This snippet includes a custom Hugo shortcode named 'elements-api' which is likely responsible for rendering the interactive API documentation on the page.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/api-documentation/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{< elements-api >}}\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Translations for Internationalization\nDESCRIPTION: Command to extract internationalization strings from the web app to rebuild the English translation file used as a base for other language translations.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/focalboard/personal-server-setup-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run i18n-extract\n```\n\n----------------------------------------\n\nTITLE: Pushing a Manual Cherry-Pick Branch in Git\nDESCRIPTION: Command to push the new branch containing the manually cherry-picked changes to the remote repository for creating a PR against the release branch.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/getting-started/branching.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit push -u origin manual-cherry-pick-pr-[PR_NUMBER]\n```\n\n----------------------------------------\n\nTITLE: Installing RVM\nDESCRIPTION: Command to install Ruby Version Manager with stable Ruby version.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n\\curl -sSL https://get.rvm.io | bash -s stable --ruby\n```\n\n----------------------------------------\n\nTITLE: Updating Go Version on Jenkins Instances (Bash)\nDESCRIPTION: This script updates the Golang distribution on Jenkins master and slave instances. It downloads the specified Go version, removes the existing installation, extracts the new version, updates the PATH, and installs standard libraries for Windows and macOS cross-compilation.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/infrastructure/build.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://storage.googleapis.com/golang/go{{< goversion >}}.linux-amd64.tar.gz\nsudo su\nrm -r /usr/local/go/\ntar -C /usr/local -xzf go{{< goversion >}}.linux-amd64.tar.gz\nexport PATH=$PATH:/usr/local/go/bin\nenv GOOS=windows GOARCH=amd64 go install std\nenv GOOS=darwin GOARCH=amd64 go install std\n```\n\n----------------------------------------\n\nTITLE: Hugo Compass Icon Shortcode Example\nDESCRIPTION: Example of using the compass-icon shortcode to display an icon from the Compass Icon set.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{<compass-icon icon-star \"Mandatory Value\">}}\n```\n\n----------------------------------------\n\nTITLE: Stopping Mattermost service in Shell\nDESCRIPTION: This command stops the running Mattermost instance before applying file changes.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/customization/customization/server-files.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo service mattermost stop\n```\n\n----------------------------------------\n\nTITLE: Installing npm@6 Globally for Mattermost Development\nDESCRIPTION: Command to install npm version 6 globally on your development environment to ensure compatibility with Mattermost repositories. This upgrade resolves issues with package-lock.json changing unexpectedly during fresh installs.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/blog/2018-05-22-npm-v6.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g npm@6\n```\n\n----------------------------------------\n\nTITLE: Reloading Bash Configuration\nDESCRIPTION: Command to reload the bash configuration after updating environment variables.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/mobile/developer-setup/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nsource ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Building Plugin Executable\nDESCRIPTION: Command to build the Go plugin into an executable file\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/server/hello-world.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo build -o plugin.exe plugin.go\n```\n\n----------------------------------------\n\nTITLE: OneLogin User Account URL\nDESCRIPTION: The URL for accessing OneLogin admin interface for user management.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/internal/onboarding/manager-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://mattermost.onelogin.com/admin\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta for ARM-based Mac\nDESCRIPTION: Command to install Rosetta on ARM-based Mac systems, which is needed to make libpng work properly.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsoftwareupdate --install-rosetta\n```\n\n----------------------------------------\n\nTITLE: Stopping the Mattermost Server\nDESCRIPTION: Command to stop the Mattermost server using make.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/developer-setup/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nmake stop-server\n```\n\n----------------------------------------\n\nTITLE: Building Standalone Desktop Apps for Different Platforms\nDESCRIPTION: Platform-specific commands for building standalone Focalboard desktop applications that package the server to run locally against SQLite.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/contribute/more-info/focalboard/personal-server-setup-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake prebuild\nmake win-wpf-app\ncd win-wpf/msix && focalboard.exe\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake prebuild\nmake mac-app\nopen mac/dist/Focalboard.app\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libgtk-3-dev\nsudo apt-get install libwebkit2gtk-4.0-dev\nmake prebuild\nmake linux-app\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it -p 80:8000 mattermost/focalboard\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f docker/Dockerfile .\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f docker/Dockerfile --platform linux/arm64 .\n```\n\n----------------------------------------\n\nTITLE: Deploying Mattermost Plugin\nDESCRIPTION: Command to build and deploy the plugin to a local Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/developer-workflow.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmake deploy\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform Plugin Build\nDESCRIPTION: Command to build the plugin for Linux when developing on a different platform\nSOURCE: https://github.com/mattermost/mattermost-developer-documentation/blob/master/site/content/integrate/plugins/components/server/hello-world.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nGOOS=linux GOARCH=amd64 go build -o plugin.exe plugin.go\n```"
  }
]