[
  {
    "owner": "weserv",
    "repo": "images",
    "content": "TITLE: Installing Dependencies for weserv/images on RHEL 9\nDESCRIPTION: Installs all required dependencies for the weserv/images project, including repository configurations for EPEL, CodeReady Builder, Remi, and RPM Fusion. This script installs libvips 8.15 with heif and imagemagick support, along with essential build tools and development libraries.\nSOURCE: https://github.com/weserv/images/blob/5.x/INSTALL.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install the EPEL repository configuration package\ndnf install epel-release\n\n# Enable the CodeReady Builder repository since EPEL packages may depend on packages from it\ncrb enable\n\n# Install the Remi repository configuration package\ndnf install https://rpms.remirepo.net/enterprise/remi-release-9.rpm\n\n# Install the RPM Fusion repository configuration package (for libheif)\ndnf install --nogpgcheck https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-9.noarch.rpm\n\n# Enable Remi's RPM repository\ndnf config-manager --set-enabled remi\n\n# Install libvips 8.15 (full-fat version)\ndnf install vips-devel vips-heif vips-magick-im6\n\n# Install build requirements\ndnf install \\\n  autoconf \\\n  automake \\\n  cmake \\\n  make \\\n  gcc \\\n  gcc-c++ \\\n  git \\\n  glibc-devel \\\n  glibc-headers \\\n  openssl-devel \\\n  pcre2-devel \\\n  zlib-devel\n```\n\n----------------------------------------\n\nTITLE: Configuring AVIF Compression Effort in Weserv\nDESCRIPTION: Controls the CPU effort spent on improving AVIF compression. Acceptable values are 0-9 (fastest/largest to slowest/smallest). Default is 4.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_19\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_avif_effort <effort>\n```\n\n----------------------------------------\n\nTITLE: Setting PNG Compression Level in Nginx for Weserv Images\nDESCRIPTION: This directive sets the default zlib compression level for PNG images when the &l= parameter is not specified in requests. The level can range from 0 (fastest but largest file size) to 9 (slowest but smallest file size).\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_22\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_zlib_level <level>\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files in CMake for weserv/images\nDESCRIPTION: Sets up a list of header files for the project, organized into multiple categories including exceptions, I/O, parsers, processors, and utilities. These headers define the interface of the image processing library.\nSOURCE: https://github.com/weserv/images/blob/5.x/src/api/CMakeLists.txt#2025-04-12_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n        exceptions/invalid.h\n        exceptions/large.h\n        exceptions/unreadable.h\n        exceptions/unsupported.h\n        io/blob.h\n        io/source.h\n        io/target.h\n        parsers/color.h\n        parsers/coordinate.h\n        parsers/enumeration.h\n        parsers/numeric.h\n        parsers/query.h\n        processors/alignment.h\n        processors/background.h\n        processors/base.h\n        processors/blur.h\n        processors/brightness.h\n        processors/contrast.h\n        processors/crop.h\n        processors/embed.h\n        processors/filter.h\n        processors/gamma.h\n        processors/mask.h\n        processors/modulate.h\n        processors/orientation.h\n        processors/rotation.h\n        processors/sharpen.h\n        processors/stream.h\n        processors/thumbnail.h\n        processors/tint.h\n        processors/trim.h\n        utils/utility.h\n        api_manager_impl.h\n        enums.h\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files in CMake for weserv/images\nDESCRIPTION: Sets up a list of source files (.cpp) that implement the functionality defined in the headers. These sources cover parsers, I/O operations, and various image processors that form the core of the library.\nSOURCE: https://github.com/weserv/images/blob/5.x/src/api/CMakeLists.txt#2025-04-12_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES\n        parsers/color.cpp\n        parsers/coordinate.cpp\n        parsers/query.cpp\n        io/source.cpp\n        io/target.cpp\n        processors/alignment.cpp\n        processors/background.cpp\n        processors/blur.cpp\n        processors/brightness.cpp\n        processors/contrast.cpp\n        processors/crop.cpp\n        processors/embed.cpp\n        processors/filter.cpp\n        processors/gamma.cpp\n        processors/mask.cpp\n        processors/modulate.cpp\n        processors/orientation.cpp\n        processors/rotation.cpp\n        processors/sharpen.cpp\n        processors/stream.cpp\n        processors/thumbnail.cpp\n        processors/tint.cpp\n        processors/trim.cpp\n        utils/status.cpp\n        api_manager_impl.cpp\n        )\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Library in CMake for weserv/images\nDESCRIPTION: Creates a shared library target using the previously defined headers and source files. This command instructs CMake to build the project as a shared library that can be linked by other applications.\nSOURCE: https://github.com/weserv/images/blob/5.x/src/api/CMakeLists.txt#2025-04-12_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(${PROJECT_NAME} SHARED ${HEADERS} ${SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Building weserv/images from Source\nDESCRIPTION: Demonstrates how to clone the weserv/images repository with submodules and build it using CMake. The build uses Release configuration for optimal performance and leverages all available CPU cores for faster compilation.\nSOURCE: https://github.com/weserv/images/blob/5.x/INSTALL.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recurse-submodules https://github.com/weserv/images.git\ncd images\nmkdir build && cd build\ncmake .. \\\n  -DCMAKE_BUILD_TYPE=Release\nsudo cmake --build . -- -j$(nproc)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories in CMake for weserv/images\nDESCRIPTION: Sets up the include directories for the library, making a distinction between public (client-visible) and private (implementation-only) headers. Public headers are made available for both build-time and install-time usage.\nSOURCE: https://github.com/weserv/images/blob/5.x/src/api/CMakeLists.txt#2025-04-12_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(${PROJECT_NAME}\n        PUBLIC\n            $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>\n            $<INSTALL_INTERFACE:include>\n        PRIVATE\n            ${VIPS_INCLUDE_DIRS}\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies in CMake for weserv/images\nDESCRIPTION: Links the library against the VIPS image processing library dependencies. The PRIVATE visibility indicates these dependencies are only needed for the implementation, not for clients using the library.\nSOURCE: https://github.com/weserv/images/blob/5.x/src/api/CMakeLists.txt#2025-04-12_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${PROJECT_NAME}\n        PRIVATE\n            ${VIPS_LDFLAGS}\n        )\n```\n\n----------------------------------------\n\nTITLE: Enabling Weserv Module in Nginx\nDESCRIPTION: Enables the Weserv module for nginx requests. Supports 'proxy' mode for processing remote images and 'filter' mode for processing images from other nginx handlers.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nweserv proxy|filter\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Installation in CMake for weserv/images\nDESCRIPTION: Sets up installation rules for the public header files, copying them from the include directory to the standard include directory with the original directory structure preserved.\nSOURCE: https://github.com/weserv/images/blob/5.x/src/api/CMakeLists.txt#2025-04-12_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(DIRECTORY ${PROJECT_SOURCE_DIR}/include/\n        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n        FILES_MATCHING PATTERN \"*.h\"\n        )\n```\n\n----------------------------------------\n\nTITLE: Deploying Hosted weserv/images Container\nDESCRIPTION: Commands to pull and run the pre-built weserv/images container from GitHub Container Registry. Maps port 80 to 8080 and allocates 1GB shared memory.\nSOURCE: https://github.com/weserv/images/blob/5.x/docker/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8080:80 --shm-size=1gb --name=weserv ghcr.io/weserv/images:5.x\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Build Options\nDESCRIPTION: Sets up comprehensive configuration options for Nginx build including compiler settings, module paths, and feature flags.\nSOURCE: https://github.com/weserv/images/blob/5.x/third_party/nginx/CMakeLists.txt#2025-04-12_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(NGX_CONFIGURE_OPTS\n        ${CUSTOM_NGX_FLAGS}\n        #--with-debug\n        \"--with-cc=${CMAKE_C_COMPILER}\"\n        \"--with-cpp=${CMAKE_CXX_COMPILER}\"\n        \"--with-cc-opt=${CUSTOM_NGX_CC_OPT}\"\n        \"--with-ld-opt=-Wl,-rpath,${PROJECT_SOURCE_DIR}/lib ${CUSTOM_NGX_LD_OPT}\"\n        \"--add$<$<BOOL:${NGX_DYN_MODULE}>:-dynamic>-module=${PROJECT_SOURCE_DIR}\"\n        \"--add$<$<BOOL:${NGX_DYN_MODULE}>:-dynamic>-module=${RATE_LIMIT_MODULE_SOURCE}\"\n        --with-file-aio\n        --with-http_ssl_module\n        --with-http_v2_module\n        --with-http_realip_module\n        --with-http_stub_status_module\n        --with-http_secure_link_module\n        --with-pcre-jit\n        #--with-google_perftools_module\n        )\n```\n\n----------------------------------------\n\nTITLE: Building Custom weserv/images Container\nDESCRIPTION: Commands for building a custom Docker container with specified nginx version and running it with port mapping and shared memory allocation.\nSOURCE: https://github.com/weserv/images/blob/5.x/docker/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --build-arg NGINX_VERSION=1.27.4 -t weserv/images -f docker/Dockerfile .\ndocker run -d -p 8080:80 --shm-size=1gb --name=weserv weserv/images\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests Setup and Execution\nDESCRIPTION: Complete sequence of commands to clone the repository, configure CMake for unit testing without Nginx module installation, and run the tests.\nSOURCE: https://github.com/weserv/images/blob/5.x/test/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/weserv/images.git\ncd images\nmkdir build && cd build\ncmake .. \\\n  -DCMAKE_BUILD_TYPE=Debug \\\n  -DBUILD_TESTS=ON \\\n  -DINSTALL_NGX_MODULE=OFF\ncmake --build . -- -j$(nproc)\nctest -j $(nproc) --output-on-failure\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Project for weserv Image Service\nDESCRIPTION: Configures the CMake project with version information, description, and required languages. Sets minimum CMake version requirement to 3.14 to support FetchContent_MakeAvailable.\nSOURCE: https://github.com/weserv/images/blob/5.x/CMakeLists.txt#2025-04-12_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Note: FetchContent_MakeAvailable was added in CMake 3.14\ncmake_minimum_required(VERSION 3.14)\n\nproject(weserv\n        VERSION 5.0.0\n        DESCRIPTION \"Image cache and resize service\"\n        LANGUAGES\n            C\n            CXX\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring Valgrind Test Execution in CMake\nDESCRIPTION: Sets up Valgrind memory checking for test execution if enabled. Configures command line arguments for leak checking and suppression file usage.\nSOURCE: https://github.com/weserv/images/blob/5.x/test/api/CMakeLists.txt#2025-04-12_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (ENABLE_VALGRIND)\n    find_program(\n            VALGRIND_EXE\n            NAMES \"valgrind\"\n            DOC \"Path to valgrind executable\"\n    )\n    if (NOT VALGRIND_EXE)\n        message(STATUS \"valgrind not found\")\n        set(ENABLE_VALGRIND OFF CACHE BOOL \"\" FORCE)\n    else()\n        message(STATUS \"Executing test suite with valgrind (${VALGRIND_EXE})\")\n        set(MEMCHECK_COMMAND \"${VALGRIND_EXE} --error-exitcode=1 --leak-check=yes --suppressions=${PROJECT_SOURCE_DIR}/valgrind.suppress\")\n        separate_arguments(MEMCHECK_COMMAND)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Docker Container Management Commands\nDESCRIPTION: Collection of useful Docker commands for managing weserv containers, including configuration checks, logging, updates, and container/image management.\nSOURCE: https://github.com/weserv/images/blob/5.x/docker/README.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# bash commands\ndocker exec -it weserv bash\n\n# Check nginx configuration for correct syntax\ndocker exec weserv nginx -t\n\n# Reload the nginx configuration file\ndocker exec weserv nginx -s reload\n\n# Update RPM packages\ndocker exec weserv dnf update -y\n\n# Check jemalloc configuration\ndocker exec -e MALLOC_CONF=\"stats_print:true,stats_print_opts:mdablxeh\" weserv bash\n\n# Retrieve an IP Address\ndocker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -f name=weserv -q)\ndocker inspect $(docker ps -f name=weserv -q) | grep IPAddress\n\n# Access to logs\ndocker logs weserv\n\n# Check CPU consumption\ndocker stats\n\n# Stop all containers\ndocker stop $(docker ps -aq)\n\n# Delete all containers\ndocker rm $(docker ps -aq)\n\n# Delete all images\ndocker rmi $(docker images -q)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Code Coverage Analysis with LCOV\nDESCRIPTION: Configures code coverage analysis using GCOV and LCOV. Creates targets for generating coverage information and HTML reports.\nSOURCE: https://github.com/weserv/images/blob/5.x/test/api/CMakeLists.txt#2025-04-12_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (ENABLE_COVERAGE)\n    message(STATUS \"Building test suite with coverage information\")\n\n    get_filename_component(COMPILER_PATH \"${CMAKE_CXX_COMPILER}\" PATH)\n    string(REGEX MATCH \"^[0-9]+\" GCC_VERSION \"${CMAKE_CXX_COMPILER_VERSION}\")\n    find_program(GCOV_BIN NAMES gcov-${GCC_VERSION} gcov HINTS ${COMPILER_PATH})\n\n    find_program(LCOV lcov)\n    find_program(GENHTML genhtml)\n\n    add_custom_target(coverage\n            COMMAND ${LCOV} -d \"${CMAKE_BINARY_DIR}\" -b \"${PROJECT_SOURCE_DIR}\" -c -o coverage.info --gcov-tool ${GCOV_BIN} --no-external\n            COMMAND ${LCOV} -r coverage.info '*/_deps/*' '*/test/api/*' -o coverage.info\n            WORKING_DIRECTORY ${PROJECT_BINARY_DIR}\n            COMMENT \"Collect coverage information using LCOV\"\n            )\n\n    add_custom_target(coverage-html\n            DEPENDS coverage\n            COMMAND ${GENHTML} -t \"wsrv.nl\" -p \"${PROJECT_SOURCE_DIR}\" --legend --demangle-cpp -o lcov -s coverage.info\n            WORKING_DIRECTORY ${PROJECT_BINARY_DIR}\n            COMMENT \"Generating HTML coverage report lcov/index.html\"\n            )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Image Quality for Weserv\nDESCRIPTION: Sets the default quality for JPEG, WebP, TIFF and AVIF images when '&q=' is not specified. Acceptable values are 1-100. Default is 80.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_14\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_quality <quality>\n```\n\n----------------------------------------\n\nTITLE: Configuring Catch2 Test Library\nDESCRIPTION: Sets up the Catch2 test library with main function and configures include directories and linking based on CMake version.\nSOURCE: https://github.com/weserv/images/blob/5.x/test/api/CMakeLists.txt#2025-04-12_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(catch2_main OBJECT\n        base.cpp\n        max_color_distance.h\n        max_color_distance.cpp\n        similar_image.h\n        similar_image.cpp\n        test_environment.h\n        )\n\nif (${CMAKE_VERSION} VERSION_LESS \"3.12.0\")\n    target_include_directories(catch2_main\n            PUBLIC\n                ${PROJECT_SOURCE_DIR}/include\n                $<TARGET_PROPERTY:Catch2::Catch2,INTERFACE_INCLUDE_DIRECTORIES>\n            PRIVATE\n                ${VIPS_INCLUDE_DIRS}\n            )\nelse()\n    target_include_directories(catch2_main\n            PRIVATE\n                ${VIPS_INCLUDE_DIRS}\n            )\n    target_link_libraries(catch2_main\n            PUBLIC\n                ${PROJECT_NAME}\n                Catch2::Catch2\n            PRIVATE\n                ${VIPS_LDFLAGS}\n            )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Image Size for Weserv\nDESCRIPTION: Sets the maximum size of an image to be processed. Default is 100m. Set to 0 to remove the limit.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_max_size <size>\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Fixtures Generator\nDESCRIPTION: Sets up an optional executable for generating test fixtures, with appropriate include directories and library linkage.\nSOURCE: https://github.com/weserv/images/blob/5.x/test/api/CMakeLists.txt#2025-04-12_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_GENERATOR)\n    add_executable(fixtures-generator generate_expected_fixtures.cpp)\n    target_include_directories(fixtures-generator\n            PRIVATE\n                ${VIPS_INCLUDE_DIRS}\n            )\n    target_link_libraries(fixtures-generator\n            PUBLIC\n                ${PROJECT_NAME}\n            PRIVATE\n                ${VIPS_LDFLAGS}\n            )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Savers for Weserv\nDESCRIPTION: Enables or disables image savers to be used within the '&output=' query parameter. Accepts multiple parameters.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_9\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_savers [jpg] [png] [webp] [avif] [tiff] [gif] [json]\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Pages for Multi-page Input in Weserv\nDESCRIPTION: Sets the maximum number of pages to extract for multi-page input (GIF, TIFF, PDF, WebP). Default is 256. Set to 0 to remove the limit.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_11\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_max_pages <pages>\n```\n\n----------------------------------------\n\nTITLE: Defining Build Options for weserv Project\nDESCRIPTION: Defines configurable options for the build process including coverage mode, sanitizer support, code checking, and component building choices.\nSOURCE: https://github.com/weserv/images/blob/5.x/CMakeLists.txt#2025-04-12_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Options\noption(ENABLE_COVERAGE \"Compile in coverage mode\" OFF)\noption(ENABLE_SANITIZER \"Build with clang sanitizer\" OFF)\noption(ENABLE_CLANG_TIDY \"Enable source code checking using clang-tidy\" OFF)\noption(BUILD_TOOLS \"Whether or not to build the tools\" OFF)\noption(BUILD_TESTS \"Whether or not to build the tests\" OFF)\noption(INSTALL_NGX_MODULE \"Build and install nginx along with the weserv module\" ON)\n```\n\n----------------------------------------\n\nTITLE: Running Specific Integration Tests\nDESCRIPTION: Commands to run specific test files in the integration test suite using the prove utility.\nSOURCE: https://github.com/weserv/images/blob/5.x/test/README.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd images\nexport PATH=\"/usr/local/nginx/sbin:$PATH\"\nprove -I/path/to/test-nginx/lib test/nginx/file.t test/nginx/proxy.t\n```\n\n----------------------------------------\n\nTITLE: Setting Process Timeout for Weserv\nDESCRIPTION: Specifies a maximum allowed time for image processing. Default is 10 seconds. Set to 0 to remove the limit.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_10\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_process_timeout <time>\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Download Extract Policy\nDESCRIPTION: Sets CMake policy for download extract timestamp behavior on CMake version 3.24 and above.\nSOURCE: https://github.com/weserv/images/blob/5.x/third_party/nginx/CMakeLists.txt#2025-04-12_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_VERSION VERSION_GREATER_EQUAL 3.24.0)\n    cmake_policy(SET CMP0135 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Input Pixel Limit for Weserv\nDESCRIPTION: Sets the maximum number of pixels (width × height) of an input image to be processed. Default is 71000000. Set to 0 to remove the limit.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_12\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_limit_input_pixels <pixels>\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Pixel Limit for Weserv\nDESCRIPTION: Sets the maximum number of pixels (width × height) of an output image, after any upscaling. Default is 71000000. Set to 0 to remove the limit.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_13\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_limit_output_pixels <pixels>\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Components for Building\nDESCRIPTION: Sets up the core API library for building and conditionally adds tools, tests, and nginx module components based on build options.\nSOURCE: https://github.com/weserv/images/blob/5.x/CMakeLists.txt#2025-04-12_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# Create the shared API library\nadd_subdirectory(src/api)\n\nif (BUILD_TOOLS)\n    add_subdirectory(src/tools)\nendif()\n\nif (BUILD_TESTS)\n    enable_testing()\n\n    # Build Catch2 (a modern test framework), if necessary\n    if (NOT Catch2_FOUND)\n        add_subdirectory(third_party/catch2)\n    endif()\n\n    add_subdirectory(test/api)\nendif()\n\n# Install nginx along with the nginx weserv module, if necessary\nif (INSTALL_NGX_MODULE)\n    add_subdirectory(third_party/rate-limit-nginx-module)\n\n    add_subdirectory(third_party/nginx)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Standard Settings for weserv\nDESCRIPTION: Configures the project to use C++17 standard, requiring compliance and disabling compiler-specific extensions for better portability.\nSOURCE: https://github.com/weserv/images/blob/5.x/CMakeLists.txt#2025-04-12_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Let's enable C++17\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Timeout for Weserv\nDESCRIPTION: Defines a timeout for establishing a connection with a remote server. Default is 5 seconds.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_connect_timeout <timeout>\n```\n\n----------------------------------------\n\nTITLE: Configuring Send Timeout for Weserv\nDESCRIPTION: Sets a timeout for transmitting a request to a remote server. Applies between successive write operations. Default is 5 seconds.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_send_timeout <timeout>\n```\n\n----------------------------------------\n\nTITLE: Setting Read Timeout for Weserv\nDESCRIPTION: Defines a timeout for reading a response from a remote server. Applies between successive read operations. Default is 15 seconds.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_read_timeout <timeout>\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for Coverage and Performance\nDESCRIPTION: Configures compiler flags for both coverage mode (when enabled) and performance optimizations for release builds with GCC.\nSOURCE: https://github.com/weserv/images/blob/5.x/CMakeLists.txt#2025-04-12_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Coverage flags\nif (ENABLE_COVERAGE)\n    set(CMAKE_CXX_FLAGS_DEBUG \"-O0 -g --coverage\")\n    set(CMAKE_EXE_LINKER_FLAGS \"--coverage\")\nelseif (CMAKE_COMPILER_IS_GNUCXX)\n    # Compiler flags\n    set(CMAKE_CXX_FLAGS_RELEASE \"-O3 -ffast-math\") # Optimize for performance\n    set(CMAKE_EXE_LINKER_FLAGS \"-s\")   # Strip binary\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring AddressSanitizer Support\nDESCRIPTION: Sets up compiler and linker flags to enable AddressSanitizer for debug builds when the ENABLE_SANITIZER option is turned on.\nSOURCE: https://github.com/weserv/images/blob/5.x/CMakeLists.txt#2025-04-12_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# AddressSanitizer flags\nif (ENABLE_SANITIZER)\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address -fno-omit-frame-pointer -g -O1\")\n    set(CMAKE_LINKER_FLAGS_DEBUG \"${CMAKE_LINKER_FLAGS_DEBUG} -fsanitize=address -fno-omit-frame-pointer -g -O1\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Directories for Build Artifacts\nDESCRIPTION: Defines the output directories for different types of build artifacts (archives, libraries, and executables) within the project source directory.\nSOURCE: https://github.com/weserv/images/blob/5.x/CMakeLists.txt#2025-04-12_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Set output directories in which to build the target files\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/lib)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/lib)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type for weserv Project\nDESCRIPTION: Sets the default build type to 'Release' if not explicitly specified by the user, ensuring optimized builds by default.\nSOURCE: https://github.com/weserv/images/blob/5.x/CMakeLists.txt#2025-04-12_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Set a default build type if none was specified\nif (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    message(STATUS \"Setting build type to 'Release' as none was specified.\")\n    set(CMAKE_BUILD_TYPE Release CACHE STRING \"Choose the type of build.\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting JPEG Quality for Weserv\nDESCRIPTION: Sets the default quality for JPEG images when '&q=' is not specified. Acceptable values are 1-100. If not set, uses weserv_quality.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_16\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_jpeg_quality <quality>\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Canonical Header in Weserv\nDESCRIPTION: Determines whether the 'rel=\"canonical\"' response header should be set for proxied images. Default is on.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_8\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_canonical_header on|off\n```\n\n----------------------------------------\n\nTITLE: Setting WebP Quality for Weserv\nDESCRIPTION: Sets the default quality for WebP images when '&q=' is not specified. Acceptable values are 1-100. If not set, uses weserv_quality.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_18\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_webp_quality <quality>\n```\n\n----------------------------------------\n\nTITLE: Fetching and Configuring Rate Limit NGINX Module with CMake\nDESCRIPTION: This snippet configures CMake to download and include the rate-limit-nginx-module from GitHub. It specifies version v1.0.0 and makes the module's source directory available to the parent scope for further build integration.\nSOURCE: https://github.com/weserv/images/blob/5.x/third_party/rate-limit-nginx-module/CMakeLists.txt#2025-04-12_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nFetchContent_Declare(rate_limit_nginx_module\n        GIT_REPOSITORY https://github.com/weserv/rate-limit-nginx-module.git\n        GIT_TAG v1.0.0\n        )\n\nFetchContent_MakeAvailable(rate_limit_nginx_module)\n\nset(RATE_LIMIT_MODULE_SOURCE ${rate_limit_nginx_module_SOURCE_DIR} PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring User-Agent for Weserv\nDESCRIPTION: Sets the User-Agent header sent to remote servers. Default is 'Mozilla/5.0 (compatible; ImageFetcher/9.0; +http://wsrv.nl/)'.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_user_agent <user_agent>\n```\n\n----------------------------------------\n\nTITLE: Setting Make Executable Based on Generator\nDESCRIPTION: Determines the appropriate make executable command based on the CMake generator type to support parallel builds in Makefiles.\nSOURCE: https://github.com/weserv/images/blob/5.x/third_party/nginx/CMakeLists.txt#2025-04-12_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_GENERATOR MATCHES \"Make\")\n    # Use special command for Makefiles to support parallelism.\n    set(MAKE_EXE \"$(MAKE)\")\nelse()\n    set(MAKE_EXE \"make\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring AVIF Quality for Weserv\nDESCRIPTION: Sets the default quality for AVIF images when '&q=' is not specified. Acceptable values are 1-100. If not set, uses weserv_quality.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_15\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_avif_quality <quality>\n```\n\n----------------------------------------\n\nTITLE: Including CMake Modules for External Dependencies\nDESCRIPTION: Includes necessary CMake modules for handling external projects, content fetching, and standardized installation directories.\nSOURCE: https://github.com/weserv/images/blob/5.x/CMakeLists.txt#2025-04-12_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(ExternalProject)\ninclude(FetchContent)\n\n# Use GNUInstallDirs to install libraries into correct locations on all platforms\ninclude(GNUInstallDirs)\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Redirects for Weserv\nDESCRIPTION: Sets the maximum number of redirection-followings allowed. Default is 10.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_7\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_max_redirects <redirects>\n```\n\n----------------------------------------\n\nTITLE: Setting Up clang-tidy for Static Code Analysis\nDESCRIPTION: Configures clang-tidy integration when enabled, locating the executable and setting up appropriate formatting options.\nSOURCE: https://github.com/weserv/images/blob/5.x/CMakeLists.txt#2025-04-12_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif (ENABLE_CLANG_TIDY)\n    find_program(\n            CLANG_TIDY_EXE\n            NAMES \"clang-tidy\"\n            DOC \"Path to clang-tidy executable\"\n    )\n    if (NOT CLANG_TIDY_EXE)\n        message(STATUS \"clang-tidy not found\")\n        set(ENABLE_CLANG_TIDY OFF CACHE BOOL \"\" FORCE)\n    else()\n        set(CMAKE_CXX_CLANG_TIDY \"${CLANG_TIDY_EXE}\" \"-format-style=file\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Test Executables\nDESCRIPTION: Sets up individual test executables from source files, configuring compilation options, linking, and test execution including optional Valgrind testing.\nSOURCE: https://github.com/weserv/images/blob/5.x/test/api/CMakeLists.txt#2025-04-12_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB_RECURSE files \"${CMAKE_CURRENT_SOURCE_DIR}/unit-*.cpp\")\nforeach (file ${files})\n    get_filename_component(file_basename ${file} NAME_WE)\n    string(REGEX REPLACE \"unit-([^$]+)\" \"test-\\\\1\" testcase ${file_basename})\n\n    add_executable(${testcase} $<TARGET_OBJECTS:catch2_main> ${file})\n    target_compile_definitions(${testcase}\n            PRIVATE\n                CATCH_CONFIG_FAST_COMPILE\n            )\n    target_compile_options(${testcase}\n            PRIVATE\n                $<$<CXX_COMPILER_ID:GNU>:-Wno-deprecated-declarations>\n            )\n    target_include_directories(${testcase}\n            PRIVATE\n                ${VIPS_INCLUDE_DIRS}\n            )\n    target_link_libraries(${testcase}\n            PUBLIC\n                ${PROJECT_NAME}\n            PRIVATE\n                ${VIPS_LDFLAGS}\n                Catch2::Catch2\n            )\n    add_test(NAME \"${testcase}\"\n            COMMAND ${testcase}\n            WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n            )\n\n    if (ENABLE_VALGRIND)\n        add_test(NAME \"${testcase}_valgrind\"\n                COMMAND ${MEMCHECK_COMMAND} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${testcase}\n                WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n                )\n        set_tests_properties(\"${testcase}_valgrind\" PROPERTIES LABELS \"valgrind\")\n    endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Generating and Installing pkg-config File in CMake for weserv/images\nDESCRIPTION: Configures and installs a pkg-config file (.pc) to allow other projects to easily discover and use the library. The file is generated from a template with variables substituted at configure time.\nSOURCE: https://github.com/weserv/images/blob/5.x/src/api/CMakeLists.txt#2025-04-12_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Add a pkg-config file\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/weserv.pc.in\"\n        \"weserv.pc\" @ONLY\n        )\n\ninstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/weserv.pc\"\n        DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\"\n        )\n```\n\n----------------------------------------\n\nTITLE: Fetching Catch2 v3.8.0 Using CMake FetchContent\nDESCRIPTION: This snippet declares and fetches the Catch2 testing framework version 3.8.0 from its GitHub repository using CMake's FetchContent module. It then makes the fetched content available for use in the project.\nSOURCE: https://github.com/weserv/images/blob/5.x/third_party/catch2/CMakeLists.txt#2025-04-12_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nFetchContent_Declare(catch2\n        GIT_REPOSITORY https://github.com/catchorg/Catch2.git\n        GIT_TAG v3.8.0\n        )\n\nFetchContent_MakeAvailable(catch2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling for Invalid Images in Nginx for Weserv\nDESCRIPTION: This directive controls how the Weserv module handles invalid images. When set to 'off' (default), the module attempts to decode images even if they're corrupt. When set to 'on', processing halts with an error when invalid images are encountered.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_23\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_fail_on_error on|off\n```\n\n----------------------------------------\n\nTITLE: Setting GIF Compression Effort in Weserv\nDESCRIPTION: Controls the CPU effort spent on improving GIF compression. Acceptable values are 1-10 (fastest/largest to slowest/smallest). Default is 7.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_20\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_gif_effort <effort>\n```\n\n----------------------------------------\n\nTITLE: Creating and Installing weserv/images CLI Executable in CMake\nDESCRIPTION: This CMake snippet creates a CLI executable for the weserv/images project, links it with the main project library, and defines installation parameters. The executable is built from cli.cpp and cli_environment.h files and is installed as a separate component.\nSOURCE: https://github.com/weserv/images/blob/5.x/src/tools/CMakeLists.txt#2025-04-12_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${PROJECT_NAME}-cli cli.cpp cli_environment.h)\n\ntarget_link_libraries(${PROJECT_NAME}-cli\n        PRIVATE\n            ${PROJECT_NAME}\n        )\n\ninstall(TARGETS ${PROJECT_NAME}-cli\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n        COMPONENT ${PROJECT_NAME}-cli\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring WebP Compression Effort in Weserv\nDESCRIPTION: Controls the CPU effort spent on improving WebP compression. Acceptable values are 0-6 (fastest/largest to slowest/smallest). Default is 4.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_21\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_webp_effort <effort>\n```\n\n----------------------------------------\n\nTITLE: Setting Library Properties in CMake for weserv/images\nDESCRIPTION: Configures version information for the library, setting both the full version number and the ABI compatibility version (SOVERSION) based on the major version number.\nSOURCE: https://github.com/weserv/images/blob/5.x/src/api/CMakeLists.txt#2025-04-12_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(${PROJECT_NAME}\n        PROPERTIES\n            VERSION ${PROJECT_VERSION}\n            SOVERSION ${PROJECT_VERSION_MAJOR}\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring TIFF Quality for Weserv\nDESCRIPTION: Sets the default quality for TIFF images when '&q=' is not specified. Acceptable values are 1-100. If not set, uses weserv_quality.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_17\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_tiff_quality <quality>\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests Setup and Execution\nDESCRIPTION: Commands for setting up and running integration tests with Test::Nginx, including environment configuration and test execution.\nSOURCE: https://github.com/weserv/images/blob/5.x/test/README.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/weserv/images.git\ncd images\nmkdir build && cd build\ncmake .. \\\n  -DCMAKE_BUILD_TYPE=Debug\ncmake --build . -- -j$(nproc)\n\ncd ../\nexport PATH=\"/usr/local/nginx/sbin:$PATH\"\nTEST_NGINX_SERVROOT=\"$PWD/servroot\" prove -I/path/to/test-nginx/lib -r test/nginx\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Installation in CMake for weserv/images\nDESCRIPTION: Sets up installation rules for the compiled library, specifying that it should be installed to the standard library directory as defined by CMAKE_INSTALL_LIBDIR.\nSOURCE: https://github.com/weserv/images/blob/5.x/src/api/CMakeLists.txt#2025-04-12_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${PROJECT_NAME}\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        COMPONENT ${PROJECT_NAME}\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx External Project Build\nDESCRIPTION: Sets up the external project configuration for building Nginx with specified version, dependencies, and build options.\nSOURCE: https://github.com/weserv/images/blob/5.x/third_party/nginx/CMakeLists.txt#2025-04-12_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nExternalProject_Add(nginx\n        DEPENDS ${PROJECT_NAME}\n        PREFIX ${NGX_ROOT}\n        SOURCE_DIR ${NGX_ROOT}/nginx\n        URL https://nginx.org/download/nginx-${NGX_VERSION}.tar.gz\n        CONFIGURE_COMMAND ./configure ${NGX_CONFIGURE_OPTS}\n        BUILD_COMMAND ${MAKE_EXE}\n        BUILD_ALWAYS 1\n        BUILD_IN_SOURCE 1\n        )\n```\n\n----------------------------------------\n\nTITLE: Running Code Coverage Analysis with CMake\nDESCRIPTION: Commands to generate and view code coverage reports using LCOV. Generates browsable HTML reports for coverage analysis.\nSOURCE: https://github.com/weserv/images/blob/5.x/test/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmake --build . --target coverage-html\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmake --build . --target coverage\n```\n\n----------------------------------------\n\nTITLE: Setting Nginx Version and Root Directory\nDESCRIPTION: Defines the Nginx version if not already set and establishes the root directory for the build.\nSOURCE: https://github.com/weserv/images/blob/5.x/third_party/nginx/CMakeLists.txt#2025-04-12_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT NGX_VERSION)\n    set(NGX_VERSION 1.27.4)\nendif()\n\nset(NGX_ROOT ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Denying IP Access in Weserv\nDESCRIPTION: Denies access to specified IP address(es) for direct image requests. Only blocks IPs specified directly in the URL.\nSOURCE: https://github.com/weserv/images/blob/5.x/ngx_conf/README.md#2025-04-12_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nweserv_deny_ip <CIDR>\n```\n\n----------------------------------------\n\nTITLE: Finding Required Dependencies for weserv\nDESCRIPTION: Finds and configures dependencies for the project including optional Catch2 testing framework and required libvips package.\nSOURCE: https://github.com/weserv/images/blob/5.x/CMakeLists.txt#2025-04-12_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Find Catch2 (optional)\nfind_package(Catch2 3.0.1 QUIET)\n\n# Find libvips (required)\nfind_package(PkgConfig)\npkg_check_modules(VIPS vips-cpp>=8.12 REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Configuring Weserv Module in Nginx with Proxy and Filter Directives\nDESCRIPTION: A diff showing the changes required when migrating from older Weserv directive syntax to the new approach. The example demonstrates how to configure Weserv in proxy mode for the main location and filter mode for static content.\nSOURCE: https://github.com/weserv/images/blob/5.x/CHANGELOG.md#2025-04-12_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n@@ -1,12 +1,10 @@\n server {\n-    weserv on;\n-\n     location / {\n-        weserv_mode proxy;\n+        weserv proxy;\n     }\n \n     location /static {\n-        weserv_mode file;\n+        weserv filter;\n \n         alias /var/www/imagesweserv/public;\n     }\n```"
  }
]