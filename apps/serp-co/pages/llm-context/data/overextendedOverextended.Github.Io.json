[
  {
    "owner": "overextended",
    "repo": "overextended.github.io",
    "content": "TITLE: Implementing a Server Command Example with Parameter Validation in Lua\nDESCRIPTION: A comprehensive example showing how to implement the 'giveitem' command with player targeting, item specification, and optional parameters. The command is restricted to admin group access and includes detailed help text for each parameter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/AddCommand/Server.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlib.addCommand('giveitem', {\n    help = 'Gives an item to a player',\n    params = {\n        {\n            name = 'target',\n            type = 'playerId',\n            help = 'Target player\\'s server id',\n        },\n        {\n            name = 'item',\n            type = 'string',\n            help = 'Name of the item to give',\n        },\n        {\n            name = 'count',\n            type = 'number',\n            help = 'Amount of the item to give, or blank to give 1',\n            optional = true,\n        },\n        {\n            name = 'metatype',\n            help = 'Sets the item\\'s \"metadata.type\"',\n            optional = true,\n        },\n    },\n    restricted = 'group.admin'\n}, function(source, args, raw)\n    local item = Items(args.item)\n\n    if item then\n        Inventory.AddItem(args.target, item.name, args.count or 1, args.metatype)\n    end\nend)\n```\n\n----------------------------------------\n\nTITLE: Registering a Basic Custom Stash in Lua\nDESCRIPTION: This code demonstrates how to register a basic custom stash with a hardcoded owner. It shows both the server-side registration using the RegisterStash function and the client-side code to open the stash inventory.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Guides/stashes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Server\nlocal stash = {\n    id = '42wallabyway',\n    label = '42 Wallaby Way',\n    slots = 50,\n    weight = 100000,\n    owner = 'char1:license'\n}\n\nAddEventHandler('onServerResourceStart', function(resourceName)\n    if resourceName == 'ox_inventory' or resourceName == GetCurrentResourceName() then\n        exports.ox_inventory:RegisterStash(stash.id, stash.label, stash.slots, stash.weight, stash.owner)\n    end\nend)\n\n-- Client\nexports.ox_inventory:openInventory('stash', {id='42wallabyway', owner=property.owner})\n```\n\n----------------------------------------\n\nTITLE: Complete Menu Implementation Example in Lua\nDESCRIPTION: Full example showing how to register a menu with various option types and event handlers, and a command to display it in Lua.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/menu.mdx#2025-04-16_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlib.registerMenu({\n    id = 'some_menu_id',\n    title = 'Menu title',\n    position = 'top-right',\n    onSideScroll = function(selected, scrollIndex, args)\n        print(\"Scroll: \", selected, scrollIndex, args)\n    end,\n    onSelected = function(selected, secondary, args)\n        if not secondary then\n            print(\"Normal button\")\n        else\n            if args.isCheck then\n                print(\"Check button\")\n            end\n\n            if args.isScroll then\n                print(\"Scroll button\")\n            end\n        end\n        print(selected, secondary, json.encode(args, {indent=true}))\n    end,\n    onCheck = function(selected, checked, args)\n        print(\"Check: \", selected, checked, args)\n    end,\n    onClose = function(keyPressed)\n        print('Menu closed')\n        if keyPressed then\n            print(('Pressed %s to close the menu'):format(keyPressed))\n        end\n    end,\n    options = {\n        {label = 'Simple button', description = 'It has a description!'},\n        {label = 'Checkbox button', checked = true},\n        {label = 'Scroll button with icon', icon = 'arrows-up-down-left-right', values={'hello', 'there'}},\n        {label = 'Button with args', args = {someArg = 'nice_button'}},\n        {label = 'List button', values = {'You', 'can', 'side', 'scroll', 'this'}, description = 'It also has a description!'},\n        {label = 'List button with default index', values = {'You', 'can', 'side', 'scroll', 'this'}, defaultIndex = 5},\n        {label = 'List button with args', values = {'You', 'can', 'side', 'scroll', 'this'}, args = {someValue = 3, otherValue = 'value'}},\n    }\n}, function(selected, scrollIndex, args)\n    print(selected, scrollIndex, args)\nend)\n\nRegisterCommand('testmenu', function()\n    lib.showMenu('some_menu_id')\nend)\n```\n\n----------------------------------------\n\nTITLE: Defining Shop Configuration in ox_inventory\nDESCRIPTION: A comprehensive example of a shop definition in ox_inventory that includes blip settings, inventory items with prices, physical locations, and target configurations for both BoxZone and ped interactions.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Guides/shops.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n{\n    General = {\n        name = 'Shop',\n        blip = {\n          id = 59,\n          colour = 69,\n          scale = 0.8\n        },\n        inventory = {\n            { name = 'burger', price = 10 },\n            { name = 'water', price = 10 },\n            { name = 'cola', price = 10 },\n        },\n        locations = {\n            vec3(25.7, -1347.3, 29.49),\n        },\n        targets = {\n            -- Shop using a BoxZone\n            {\n                loc = vec3(25.06, -1347.32, 29.5),\n                length = 0.7,\n                width = 0.5,\n                heading = 0.0,\n                minZ = 29.5,\n                maxZ = 29.9,\n                distance = 1.5\n            },\n            -- Shop using a ped\n            {\n                ped = `mp_m_shopkeep_01`,\n                scenario = 'WORLD_HUMAN_AA_COFFEE',\n                loc = vec3(24.407, -1347.283, 28.497),\n                heading = 270.311,\n            },\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using an Item with UseItem Function in Lua\nDESCRIPTION: Uses the specified item and triggers a callback function once the item is used. Provides built-in methods including server checks and progress bars.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:useItem(data, cb)\n```\n\n----------------------------------------\n\nTITLE: Triggering Asynchronous Client Callback with lib.callback in Lua\nDESCRIPTION: This function allows server-side code to trigger a callback on a client and handle the response asynchronously in a separate coroutine. It takes a callback name, player ID, callback function, and any additional arguments to pass to the client callback.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Callback/Lua/Server.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.callback(name, playerId, cb, ...)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dui Usage Example\nDESCRIPTION: Complete example showing how to create a Dui instance, change URLs, send messages, and clean up resources. Demonstrates importing from ox_lib and using all main Dui functionality.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Dui/Javascript/Client.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dui, cache } from '@overextended/ox_lib/client'\n\nconst dui = new Dui({\n\turl: `nui://${cache.resource}/web/index.html`, \n\twidth: 1920, \n\theight: 1080,\n\tdebug: true\n})\n\n// Change url\ndui.setUrl(\"https://google.com\")\n\n// Send a message\ndui.sendMessage({\n\taction: \"display\",\n\tvalue: true\n})\n\n// Destroy\ndui.remove()\n```\n\n----------------------------------------\n\nTITLE: Adding Item to Inventory in Lua\nDESCRIPTION: Adds an item to the specified inventory. Should be used with CanCarryItem to prevent exceeding maximum weight.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:AddItem(inv, item, count, metadata, slot, cb)\n```\n\n----------------------------------------\n\nTITLE: Opening Inventory with OpenInventory Function in Lua\nDESCRIPTION: Opens an inventory using specified inventory type and data parameters. Supports various inventory types including player, shop, stash, crafting, container, drop, glovebox, trunk, and dumpster.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:openInventory(invType, data)\n```\n\n----------------------------------------\n\nTITLE: Finding All Slots with Specific Item in Lua\nDESCRIPTION: Returns all slot IDs in the player's inventory containing a specific item with optional metadata filtering.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_30\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetSlotIdsWithItem(itemName, metadata, strict)\n```\n\n----------------------------------------\n\nTITLE: Complete Radial Menu Implementation Example in TypeScript\nDESCRIPTION: A comprehensive TypeScript example showing how to create a police menu with sub-menus and handle menu item selections.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/radial.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client'\n\nexports('myMenuHandler', (menu, item) => {\n    console.log(menu, item)\n\n    if (menu === 'police_menu' and item === 1) {\n        console.log('Handcuffs')\n    }\n})\n\nlib.registerRadial({\n  id: 'police_menu',\n  items: [\n    {\n      label: 'Handcuff',\n      icon: 'handcuffs',\n      onSelect: 'myMenuHandler'\n    },\n    {\n      label: 'Frisk',\n      icon: 'hand'\n    },\n    {\n      label: 'Fingerprint',\n      icon: 'fingerprint'\n    },\n    {\n      label: 'Jail',\n      icon: 'bus'\n    },\n    {\n      label: 'Search',\n      icon: 'magnifying-glass',\n      onSelect: () => {\n        console.log('Search')\n      }\n    }\n  ]\n})\n\nlib.addRadialItem([\n  {\n    id: 'police',\n    label: 'Police',\n    icon: 'shield-halved',\n    menu: 'police_menu'\n  },\n  {\n    id: 'business_stuff',\n    label: 'Business',\n    icon: 'briefcase',\n    onSelect: () => {\n      console.log('Business')\n    }\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inventory Data in Lua\nDESCRIPTION: Returns the inventory associated with the ID (and owner if defined). Otherwise returns null.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_36\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetInventory(inv, owner)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal inventory = exports.ox_inventory:GetInventory('example_stash', false)\nprint(json.encode(inventory, {indent = true}))\n--[[\n    {\n        \"id\": \"example_stash,\n        \"label\": \"Police Stash\",\n        \"type\": \"stash,\n        \"slots\": 50,\n        \"weight\": 0,\n        \"maxWeight\": 100000,\n        \"owner\": false,\n        ...\n    }\n]]\n```\n\n----------------------------------------\n\nTITLE: Querying Inventory Slot With Item\nDESCRIPTION: Function to get data for a specific inventory slot matching an item name and optional metadata. Supports strict or partial metadata matching.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_31\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetSlotWithItem(itemName, metadata, strict)\n```\n\n----------------------------------------\n\nTITLE: Setting Door Lock State in Lua\nDESCRIPTION: Sets the lock state of a door with the given doorId. The door will be locked if state is true or 1, and unlocked otherwise.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_doorlock/Server/functions.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_doorlock:setDoorState(doorId, state)\n```\n\n----------------------------------------\n\nTITLE: Adding Server Commands with Validation in Lua\nDESCRIPTION: The lib.addCommand function registers server commands with structured argument validation. It accepts a command name (or array of names), a properties table for defining help text, permissions, and parameter requirements, and a callback function that runs when the command is executed.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/AddCommand/Server.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.addCommand(commandName, properties, cb)\n```\n\n----------------------------------------\n\nTITLE: Getting Current Weapon Data in Lua\nDESCRIPTION: Returns data for the player's currently equipped weapon, including properties like ammo, hash, metadata, name, slot, and weight.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:getCurrentWeapon()\n```\n\n----------------------------------------\n\nTITLE: Force Opening Inventory in Lua\nDESCRIPTION: Forces a player to open an inventory without usual security checks. Supports various inventory types like player, stash, container, etc.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:forceOpenInventory(playerId, invType, data)\n```\n\n----------------------------------------\n\nTITLE: Triggering Notification from Server in Lua\nDESCRIPTION: Server-side implementation for triggering notifications on a client. This allows server scripts to send notification events to specific clients.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/notify.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nTriggerClientEvent('ox_lib:notify', source, data)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Item Data in Lua\nDESCRIPTION: Returns registered items data either for all items or for a specific item if itemName is provided. Uses the format defined in the items.lua data file.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:Items(itemName)\n```\n\n----------------------------------------\n\nTITLE: Registering a Keybind with lib.addKeybind in Lua\nDESCRIPTION: This snippet shows the function signature for registering a new keybind using lib.addKeybind(). It takes a table of configuration options including name, description, default key mapping, and event handlers.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/AddKeybind/Client.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.addKeybind(data)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Point with Callbacks in Lua\nDESCRIPTION: Demonstrates how to create a new point with custom properties and define callback functions for entering, exiting, and being nearby the point. It also shows how to draw a marker and handle control input when near the point.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Points/Lua/Client.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal point = lib.points.new({\n    coords = GetEntityCoords(cache.ped),\n    distance = 5,\n    dunak = 'nerd',\n})\n\nfunction point:onEnter()\n    print('entered range of point', self.id)\nend\n\nfunction point:onExit()\n    print('left range of point', self.id)\nend\n\nfunction point:nearby()\n    DrawMarker(2, self.coords.x, self.coords.y, self.coords.z, 0.0, 0.0, 0.0, 0.0, 180.0, 0.0, 1.0, 1.0, 1.0, 200, 20, 20, 50, false, true, 2, false, nil, nil, false)\n\n    if self.currentDistance < 1 and IsControlJustReleased(0, 38) then\n        print('inside marker', self.id, 'dunak is a '.. self.dunak)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Item Metadata in Ox Inventory (Lua)\nDESCRIPTION: The SetMetadata function allows setting custom metadata on items in a specified inventory slot. It takes three parameters: the inventory reference, slot number, and a table containing the metadata to set.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_50\n\nLANGUAGE: lua\nCODE:\n```\nox_inventory:SetMetadata(inv, slot, metadata)\n```\n\n----------------------------------------\n\nTITLE: Searching for Multiple Item Counts Example in Lua\nDESCRIPTION: Example of searching the player's inventory to count multiple items (meat and skin) with specific metadata (grade=1).\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\nlocal inventory = exports.ox_inventory:Search('count', {'meat', 'skin'}, {grade=\"1\"})\n\nif inventory then\n    for name, count in pairs(inventory) do\n        print('You have '..count..' '..name)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Blocking Access to Specific Inventory Types\nDESCRIPTION: Example hook that prevents players from opening glovebox and trunk inventories. It uses the openInventory event and inventoryFilter to match inventory IDs with specific patterns.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server/Hooks.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal hookId = exports.ox_inventory:registerHook('openInventory', function(payload)\n    print(json.encode(payload, { indent = true }))\n    return false\nend, {\n    print = true,\n    inventoryFilter = {\n        '^glove[%w]+',\n        '^trunk[%w]+',\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Opening Shop Inventory Example in Lua\nDESCRIPTION: Example of how to open a specific shop inventory by providing the shop type and location ID as a table parameter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:openInventory('shop', { type = 'General', id = 4 })\n```\n\n----------------------------------------\n\nTITLE: Registering a Shop at Runtime with ox_inventory Export\nDESCRIPTION: Example of registering a shop during runtime using the ox_inventory:RegisterShop export. This method allows creating shops programmatically but lacks client-side features like blips, markers, and zones.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Guides/shops.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:RegisterShop('TestShop', {\n    name = 'Test shop',\n    inventory = {\n        { name = 'burger', price = 10 },\n        { name = 'water', price = 10 },\n        { name = 'cola', price = 10 },\n    },\n    locations = {\n        vec3(223.832962, -792.619751, 30.695190),\n    },\n    groups = {\n        police = 0\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Inspecting Player Inventory in Lua\nDESCRIPTION: Inspect the player their inventory. You will not be able to modify the inventory.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_38\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:InspectInventory(target, source)\n```\n\n----------------------------------------\n\nTITLE: Complete Radial Menu Implementation Example in Lua\nDESCRIPTION: A comprehensive example showing how to create a police menu with sub-menus and location-based menu items using points system.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/radial.mdx#2025-04-16_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nexports('myMenuHandler', function(menu, item)\n    print(menu, item)\n\n    if menu == 'police_menu' and item == 1 then\n        print('Handcuffs')\n    end\nend)\n\nlib.registerRadial({\n  id = 'police_menu',\n  items = {\n    {\n      label = 'Handcuff',\n      icon = 'handcuffs',\n      onSelect = 'myMenuHandler'\n    },\n    {\n      label = 'Frisk',\n      icon = 'hand'\n    },\n    {\n      label = 'Fingerprint',\n      icon = 'fingerprint'\n    },\n    {\n      label = 'Jail',\n      icon = 'bus'\n    },\n    {\n      label = 'Search',\n      icon = 'magnifying-glass',\n      onSelect = function()\n        print('Search')\n      end\n    }\n  }\n})\n\nlib.addRadialItem({\n  {\n    id = 'police',\n    label = 'Police',\n    icon = 'shield-halved',\n    menu = 'police_menu'\n  },\n  {\n    id = 'business_stuff',\n    label = 'Business',\n    icon = 'briefcase',\n    onSelect = function()\n      print(\"Business\")\n    end\n  }\n})\n\nlocal coords = GetEntityCoords(cache.ped)\nlocal point = lib.points.new(coords, 5)\n\nfunction point:onEnter()\n  lib.addRadialItem({\n    id = 'garage_access',\n    icon = 'warehouse',\n    label = 'Garage',\n    onSelect = function()\n      print('Garage')\n    end\n  })\nend\n\nfunction point:onExit()\n  lib.removeRadialItem('garage_access')\nend\n```\n\n----------------------------------------\n\nTITLE: Opening Nearby Player Inventory in Lua\nDESCRIPTION: Opens the inventory of a nearby player if conditions are met. The player must be able to open their own inventory, and the target player must be fatally injured or playing a death animation unless the player has a police job.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:openNearbyInventory()\n```\n\n----------------------------------------\n\nTITLE: Example Context Menu Implementation in Lua/JS\nDESCRIPTION: Complete example showing menu registration with various options, submenus, and event handling.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/context.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlib.registerContext({\n  id = 'some_menu',\n  title = 'Some context menu',\n  options = {\n    {\n      title = 'Empty button',\n    },\n    {\n      title = 'Disabled button',\n      description = 'This button is disabled',\n      icon = 'hand',\n      disabled = true\n    },\n    {\n      title = 'Example button',\n      description = 'Example button description',\n      icon = 'circle',\n      onSelect = function()\n        print(\"Pressed the button!\")\n      end,\n      metadata = {\n        {label = 'Value 1', value = 'Some value'},\n        {label = 'Value 2', value = 300}\n      },\n    },\n    {\n      title = 'Menu button',\n      description = 'Takes you to another menu!',\n      menu = 'other_menu',\n      icon = 'bars'\n    },\n    {\n      title = 'Event button',\n      description = 'Open a menu from the event and send event data',\n      icon = 'check',\n      event = 'test_event',\n      arrow = true,\n      args = {\n        someValue = 500\n      }\n    }\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.registerContext({\n  id: 'some_menu',\n  title: 'Some context menu',\n  options: [\n    {\n      title: 'Empty button',\n    },\n    {\n      title: 'Disabled button',\n      description: 'This button is disabled',\n      icon: 'hand',\n      disabled: true,\n    },\n    {\n      title: 'Example button',\n      description: 'Example button description',\n      icon: 'circle',\n      onSelect: () => {\n        console.log('Pressed the button!');\n      },\n      metadata: [\n        { label: 'Value 1', value: 'Some value' },\n        { label: 'Value 2', value: 300 },\n      ],\n    },\n    {\n      title: 'Menu button',\n      description: 'Takes you to another menu!',\n      menu: 'other_menu',\n      icon: 'bars',\n    },\n    {\n      title: 'Event button',\n      description: 'Open a menu from the event and send event data',\n      icon: 'check',\n      event: 'test_event',\n      arrow: true,\n      args: {\n        someValue: 500,\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Callback for Bandage Item in Lua\nDESCRIPTION: Defines a server-side callback function for a bandage item, handling different events like item usage and purchase.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Guides/creatingItems.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nexports('bandage', function(event, item, inventory, slot, data)\n    if event == 'usingItem' then\n        local playerPed = GetPlayerPed(inventory.id)\n        local maxHealth = GetEntityMaxHealth(playerPed)\n        local health = GetEntityHealth(playerPed)\n\n        if health >= maxHealth then\n            TriggerClientEvent('ox_lib:notify', inventory.id, {type = 'error', description = 'You don\\'t need a bandage right now'})\n            return false\n        end\n        return\n    end\n\n    if event == 'usedItem' then\n        return TriggerClientEvent('ox_lib:notify', inventory.id, {description = 'You feel better already'})\n    end\n\n    if event == 'buying' then\n        return TriggerClientEvent('ox_lib:notify', inventory.id, {type = 'success', description = 'You bought a bandage'})\n    end\nend)\n```\n\n----------------------------------------\n\nTITLE: Playing Animations in Lua with lib.playAnim\nDESCRIPTION: Function to play animations on a ped with automatic animation dictionary management. Supports customization of animation speed, duration, flags, and phase control. Can directly replace TaskPlayAnim functionality.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/PlayAnim/Client.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.playAnim(ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, animFlags, startPhase, phaseControlled, controlFlags, overrideCloneUpdate)\n```\n\n----------------------------------------\n\nTITLE: Finding Empty Slot in Lua\nDESCRIPTION: Get the first available empty slot in an inventory.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_33\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetEmptySlot(inv)\n```\n\n----------------------------------------\n\nTITLE: Example of SetMetadata Usage in Ox Inventory (Lua)\nDESCRIPTION: This example shows how to modify an item's metadata. It first searches for a water item in the player's inventory, then modifies its metadata to set the 'type' property to 'clean', and finally updates the item in the inventory with the new metadata.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_51\n\nLANGUAGE: lua\nCODE:\n```\nlocal ox_inventory = exports.ox_inventory\n\nlocal water = ox_inventory:Search(source, 1, 'water')\nfor k, v in pairs(water) do\n    print('\\n______________'..\"\\n- index \"..k)\n    print(v.name, 'slot: '..v.slot, 'metadata: '..json.encode(v.metadata))\n    water = v\n    break\nend\n\nwater.metadata.type = 'clean'\nox_inventory:SetMetadata(source, water.slot, water.metadata)\nprint(('modified %sx water in slot %s with new metadata'):format(water.count, water.slot))\n```\n\n----------------------------------------\n\nTITLE: Handling Item Usage Event in Lua\nDESCRIPTION: Event handler triggered when an item is used. Receives item name, slot ID, and optional metadata parameters.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Events/Client.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nAddEventHandler('ox_inventory:usedItem', function(name, slotId, metadata) end)\n```\n\n----------------------------------------\n\nTITLE: Searching Inventory for Items in Lua\nDESCRIPTION: Searches the player's inventory for specific items with optional metadata filtering. Can return slot data or item counts based on the search parameter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:Search(search, item, metadata)\n```\n\n----------------------------------------\n\nTITLE: Defining Crafting Configuration in Lua for Ox Inventory\nDESCRIPTION: This snippet demonstrates a complete crafting definition for ox_inventory, including craftable items with ingredients, interaction points, targeting zones, and display options. It shows how to configure recipe requirements, crafting duration, and metadata for crafted items.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Guides/crafting.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n{\n    items = {\n        {\n            name = 'lockpick',\n            ingredients = {\n              garbage = 3,\n              WEAPON_HAMMER = 0.1\n            },\n            duration = 5000,\n            count = 3,\n            metadata = { durability = 20 }\n        },\n        {\n            name = 'garbage',\n            ingredients = {\n              cola = 1\n            },\n            metadata = { description = 'An empty soda can.', weight = 20, image = 'trash_can' }\n        },\n    },\n    points = {\n      vec3(-1147.083008, -2002.662109, 13.180260),\n    },\n    zones = {\n        {\n          label = 'Open Crafting Bench',\n          icon = 'fa-solid fa-wrench',\n          coords = vec3(-1146.2, -2002.05, 13.2),\n          size = vec3(3.8, 1.05, 0.15),\n          distance = 1.5,\n          rotation = 315.0,\n        },\n    },\n    blip = { id = 566, colour = 31, scale = 0.8 },\n    name = 'crafting-bench',\n},\n```\n\n----------------------------------------\n\nTITLE: Adding Global Targeting Options in Lua\nDESCRIPTION: Creates new targetable options that are displayed at all times. Requires a table with targeting properties as an argument.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:addGlobalOption(options)\n```\n\n----------------------------------------\n\nTITLE: Bandage Item Usage Example in Lua\nDESCRIPTION: Example of using a bandage item to heal the player, demonstrating proper item usage flow with condition checking, using the item via useItem, and applying effects after confirmation.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nexports('bandage', function(data, slot)\n    local playerPed = PlayerPedId()\n    local maxHealth = GetEntityMaxHealth(playerPed)\n    local health = GetEntityHealth(playerPed)\n\n    -- Does the ped need to heal?\n    if health < maxHealth then\n        -- Use the bandage\n        exports.ox_inventory:useItem(data, function(data)\n            -- The item has been used, so trigger the effects\n            if data then\n                SetEntityHealth(playerPed, math.min(maxHealth, math.floor(health + maxHealth / 16)))\n                lib.notify({description = 'You feel better already'})\n            end\n        end)\n    else\n        -- Don't use the item\n        lib.notify({type = 'error', description = 'You don\\'t need a bandage right now'})\n    end\nend)\n```\n\n----------------------------------------\n\nTITLE: Using progressBar in TypeScript\nDESCRIPTION: TypeScript implementation for displaying a progress bar. Requires importing from ox_lib client and returns a promise that resolves to a boolean indicating completion.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/progress.mdx#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport lib from '@overextended/ox_lib/client'\n\nlib.progressBar(data)\n```\n\n----------------------------------------\n\nTITLE: Example of Using lib.callback to Get Nearby Vehicles\nDESCRIPTION: This example demonstrates using the asynchronous callback pattern to retrieve nearby vehicles from a client and delete them. The server requests vehicle information from the client with a specified radius and processes the response in the callback function.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Callback/Lua/Server.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlib.callback('ox:getNearbyVehicles', source, function(vehicles)\n    for i = 1, #vehicles do\n        DeleteEntity(entity)\n    end\nend, args.radius)\n```\n\n----------------------------------------\n\nTITLE: Clearing Inventory in Lua\nDESCRIPTION: Clears the specified inventory. The `keep` argument is either a string or an array of strings containing the name(s) of the item(s) to keep in the inventory after clearing.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_41\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:ClearInventory(inv, keep)\n```\n\n----------------------------------------\n\nTITLE: Showing TextUI Window in Lua and TypeScript\nDESCRIPTION: Shows a TextUI window with customizable text and options. Function accepts text content and optional configuration parameters including position, icon, and styling.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/textui.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.showTextUI(text, options)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.showTextUI(text, options);\n```\n\n----------------------------------------\n\nTITLE: Setting Stash Target in Lua\nDESCRIPTION: Forces the secondary inventory key to open a specific stash inventory. Useful for enabling inventory access while within markers or specific zones.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:setStashTarget(id, owner)\n```\n\n----------------------------------------\n\nTITLE: Creating New DUI Instance in Lua\nDESCRIPTION: Constructor function for creating a new DUI instance with configurable URL, dimensions, and debug settings. Returns a DUI object with various properties and methods for management.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Dui/Lua/Client.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.dui:new(data)\n```\n\n----------------------------------------\n\nTITLE: Calculating Carryable Amount in Lua\nDESCRIPTION: Returns the amount a player can hold based on available weight.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:CanCarryAmount(inv, item)\n```\n\n----------------------------------------\n\nTITLE: Handling Item Usage Events in Lua\nDESCRIPTION: Event handler that triggers when a player uses an item. It receives the player ID, item name, slot ID, and optional metadata table as parameters.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Events/Server.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nAddEventHandler('ox_inventory:usedItem', function(playerId, name, slotId, metadata) end)\n```\n\n----------------------------------------\n\nTITLE: Giving Item to Another Player in Lua\nDESCRIPTION: Transfers an item from the player's inventory to another player, with optional count parameter to specify amount.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:giveItemToTarget(serverId, slotId, count)\n```\n\n----------------------------------------\n\nTITLE: Getting Player Maximum Inventory Weight in Lua\nDESCRIPTION: Returns the maximum carry weight allowed for the player's inventory.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_28\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetPlayerMaxWeight()\n```\n\n----------------------------------------\n\nTITLE: Transferring Balance Between Accounts in Lua\nDESCRIPTION: Transfers funds from one account to another with various configuration options including messaging for both parties and overdraw capability. Requires a target account ID and amount.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxAccount.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\naccount.transferBalance(data)\n```\n\nLANGUAGE: lua\nCODE:\n```\naccount.transferBalance({\n  toId = 100000000,\n  amount = 20,\n  message = 'Impound charge for plate ABC123',\n  overdraw = false,\n  note = 'Impound payment',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Format MySQL Transactions in Lua\nDESCRIPTION: Demonstrates how to structure MySQL transactions using shared format where multiple queries share a common set of parameters using named placeholders.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/transaction.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal queries = {\n    'INSERT INTO `test` (id, name) VALUES (@someid, @somename)',\n    'SET `name` = @newname IN `test` WHERE `id` = @someid'\n}\n\nlocal values = {\n    someid = 2,\n    somename = 'John Doe',\n    newname = 'John Notdoe'\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for Single Item Slots Example in Lua\nDESCRIPTION: Example of searching the player's inventory for slots containing a specific item (water) and displaying detailed information about each slot.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nlocal water = exports.ox_inventory:Search('slots', 'water')\nlocal count = 0\n\nfor _, v in pairs(water) do\n    print(v.slot..' contains '..v.count..' water '..json.encode(v.metadata))\n    count = count + v.count\nend\n\nprint('You have '..count..' water')\n```\n\n----------------------------------------\n\nTITLE: Registering Paper Bag Container Item in Lua\nDESCRIPTION: Defines a paper bag item as a container with specific properties like weight and usage.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Guides/creatingItems.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n['paperbag'] = {\n    label = 'Paper Bag',\n    weight = 1,\n    stack = false,\n    close = false,\n    consume = 0\n},\n```\n\n----------------------------------------\n\nTITLE: progressBar Usage Example in Lua\nDESCRIPTION: Complete example of using progressBar to show a 'Drinking water' animation with prop and constraints. Demonstrates handling both completion and cancellation cases.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/progress.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nif lib.progressBar({\n    duration = 2000,\n    label = 'Drinking water',\n    useWhileDead = false,\n    canCancel = true,\n    disable = {\n        car = true,\n    },\n    anim = {\n        dict = 'mp_player_intdrink',\n        clip = 'loop_bottle'\n    },\n    prop = {\n        model = `prop_ld_flow_bottle`,\n        pos = vec3(0.03, 0.03, 0.02),\n        rot = vec3(0.0, 0.0, -1.5)\n    },\n}) then print('Do stuff when complete') else print('Do stuff when cancelled') end\n```\n\n----------------------------------------\n\nTITLE: Opening Stash with Specific Owner in Lua\nDESCRIPTION: Example of opening a stash with a specific owner using the forceOpenInventory function.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:forceOpenInventory(1, 'stash', { id = 'police_locker', owner = 'license:xxxxxxxx' })\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nearby Vehicles in Lua\nDESCRIPTION: This function gets the vehicle handle and coordinates of all vehicles within a specified range from a given set of coordinates. It allows customization of the search radius and whether to include the player's current vehicle.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/GetNearbyVehicles/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.getNearbyVehicles(coords, maxDistance, includePlayerVehicle)\n```\n\n----------------------------------------\n\nTITLE: Custom Styled TextUI Example in Lua and TypeScript\nDESCRIPTION: Advanced example demonstrating custom styling options including position, icon, and CSS properties.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/textui.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlib.showTextUI('[E] - Pick apple', {\n    position = \"top-center\",\n    icon = 'hand',\n    style = {\n        borderRadius = 0,\n        backgroundColor = '#48BB78',\n        color = 'white'\n    }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.showTextUI('[E] - Pick apple', {\n  position: 'top-center',\n  icon: 'hand',\n  style: {\n    borderRadius: 0,\n    backgroundColor: '#48BB78',\n    color: 'white',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Current Weapon in Lua\nDESCRIPTION: Returns the player's currently equipped weapon as a table.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_47\n\nLANGUAGE: lua\nCODE:\n```\n-- inv: string or number\nexports.ox_inventory:GetCurrentWeapon(inv)\n```\n\n----------------------------------------\n\nTITLE: Example of Registering a Server Callback for Inventory Item Count\nDESCRIPTION: This example demonstrates registering a server callback that retrieves an item count from an inventory. The callback handles requests from clients, processes inventory data on the server, and returns the requested item count or 0 if not found.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Callback/Lua/Server.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlib.callback.register('ox_inventory:getItemCount', function(source, item, metadata, target)\n    local inventory = target and Inventory(target) or Inventory(source)\n    return (inventory and Inventory.GetItem(inventory, item, metadata, true)) or 0\nend)\n```\n\n----------------------------------------\n\nTITLE: Checking if Inventory Can Carry Item in Lua\nDESCRIPTION: Returns true or false depending if the inventory can carry the specified item, checking for weight and available slots.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:CanCarryItem(inv, item, count, metadata)\n```\n\n----------------------------------------\n\nTITLE: Creating Vehicle in Lua\nDESCRIPTION: Creates a new vehicle, which will be saved to the database if it has an assigned owner or group. Returns an OxVehicle object.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nOx.CreateVehicle(data, coords, heading)\n```\n\n----------------------------------------\n\nTITLE: Adding Global Ped Options in Lua\nDESCRIPTION: Creates new targetable options for all Ped entity types (excluding players). Requires a table with targeting properties as an argument.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:addGlobalPed(options)\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Global Radial Menu in Lua\nDESCRIPTION: Adds one or more items to the global radial menu. Items can include icons, labels, and actions.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/radial.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.addRadialItem(items)\n```\n\n----------------------------------------\n\nTITLE: Registering Database-Driven Property Stashes in Lua\nDESCRIPTION: This example shows how to integrate ox_inventory stashes with a property system using database data. It queries properties from a database, sets up a server event to register stashes on demand, and demonstrates client-side fallback logic when opening a stash for the first time.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Guides/stashes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Server\nlocal properties\n\nMySQL.query('SELECT * FROM `properties`', {}, function(result)\n    properties = result\nend)\n\nRegisterNetEvent('ox:loadStashes', function(id)\nlocal stash = properties[id]\n    if stash then\n        -- id: 1, name: WhispymoundDrive, label: 2677 Whispymound Drive, coords: {\"x\":118.748,\"y\":566.573,\"z\":175.697}\n        ox_inventory:RegisterStash(stash.name, stash.label, 50, 100000, true, false, json.encode(stash.room_menu))\n    end\nend)\n\n-- Client\nlocal ox_inventory = exports.ox_inventory\n\nif ox_inventory:openInventory('stash', property.id) == false then\n    TriggerServerEvent('ox:loadStashes')\n    ox_inventory:openInventory('stash', property.id)\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Controls in FiveM using Lua\nDESCRIPTION: This function disables all stored controls when called on each frame. It should be executed continuously to maintain control restrictions.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/DisableControls/Client.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.disableControls()\n```\n\n----------------------------------------\n\nTITLE: Respawning a Vehicle with OxVehicle.respawn\nDESCRIPTION: Spawns a new entity for the vehicle, removing an existing entity if it exists. Reapplies stored vehicle properties and can be positioned at specific coordinates with a specific rotation.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxVehicle.mdx#2025-04-16_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nvehicle.respawn(coords, rotation)\n```\n\n----------------------------------------\n\nTITLE: Advanced Input Dialog Usage Example in Lua\nDESCRIPTION: Illustrates an advanced usage of the input dialog in Lua with various field types including text input, number input, checkbox, color picker, and date input.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/input.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal input = lib.inputDialog('Dialog title', {\n  {type = 'input', label = 'Text input', description = 'Some input description', required = true, min = 4, max = 16},\n  {type = 'number', label = 'Number input', description = 'Some number description', icon = 'hashtag'},\n  {type = 'checkbox', label = 'Simple checkbox'},\n  {type = 'color', label = 'Colour input', default = '#eb4034'},\n  {type = 'date', label = 'Date input', icon = {'far', 'calendar'}, default = true, format = \"DD/MM/YYYY\"}\n})\n\nprint(json.encode(input))\n\n-- Getting rgb values from colour picker\nlocal rgb = lib.math.torgba(input[4])\n\n-- Transforming date timestamp to a readable format with Lua's os library (server-only)\nlocal timestamp = math.floor(input[5] / 1000)\nlocal date = os.date('%Y-%m-%d %H:%M:%S', timestamp)\n```\n\n----------------------------------------\n\nTITLE: Setting Player Inventory in Lua\nDESCRIPTION: Creates and sets the player's inventory using the provided player data and optional inventory data.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:setPlayerInventory(player, data)\n```\n\n----------------------------------------\n\nTITLE: Setting Item Durability in Ox Inventory (Lua)\nDESCRIPTION: The SetDurability function allows setting durability on items in a specified inventory slot. This is particularly useful for repairing weapons or adjusting item condition. It takes three parameters: the inventory reference, slot number, and the durability value to set.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_48\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:SetDurability(inv, slot, durability)\n```\n\n----------------------------------------\n\nTITLE: Registering Event Hooks in Ox Inventory\nDESCRIPTION: The core function to register a hook in Ox Inventory. It requires an event name, a callback function to handle the event, and optional configuration parameters to filter when the hook should trigger.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server/Hooks.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:registerHook(eventName, function(payload) end, options)\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Marker with Text UI in FiveM\nDESCRIPTION: This example shows how to create an interactive marker that displays a text UI prompt when the player is nearby and triggers a notification when the player presses E. It combines lib.marker with lib.points for distance checking and lib.showTextUI for user interaction.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Marker/Client.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal center = vec3(430.452759, -1026.108032, 27.846140)\nlocal uiText = \"Press [E] to get notified\"\n\nlocal point = lib.points.new({\n  coords = center,\n  distance = 20,\n})\n\nlocal marker = lib.marker.new({\n  coords = center,\n  type = 1,\n})\n\nfunction point:nearby()\n  marker:draw()\n\n  if self.currentDistance < 1.5 then\n    if not lib.isTextUIOpen() then\n      lib.showTextUI(\"Press [E] to get notified\")\n    end\n\n    if IsControlJustPressed(0, 51) then\n      lib.notify({\n        description = \"Hello, World!\"\n      })\n    end\n  else\n  local isOpen, currentText = lib.isTextUIOpen()\n    if isOpen and currentText == uiText then\n      lib.hideTextUI()\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Notification Function in Lua (Client)\nDESCRIPTION: Client-side implementation of the notification function in Lua. This function displays customizable notifications on the client's screen with various styling options.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/notify.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.notify(data)\n```\n\n----------------------------------------\n\nTITLE: Using MySQL Placeholders in Lua\nDESCRIPTION: Demonstrates two methods of using placeholders in MySQL queries: array-style parameters using ? and named parameters using @ prefix. The named parameter approach is noted as deprecated. Both methods help prevent SQL injection by safely handling parameter values.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/placeholders.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal identifier = 'license:abc123'\nlocal group = 'admin'\n\nMySQL.scalar('SELECT `username` FROM `users` WHERE `identifier` = ? AND `group` = ?', { identifier, group })\n\n-- Named placeholders (deprecated)\nMySQL.scalar('SELECT `username` FROM `users` WHERE `identifier` = @identifier AND `group` = @group', {\n    group = group\n    identifier = identifier\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Closest Vehicle in Lua\nDESCRIPTION: Function to find the closest vehicle to specified coordinates within a maximum distance. Returns both the vehicle handle and its coordinates. Can optionally include or exclude the player's current vehicle.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/GetClosestVehicle/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.getClosestVehicle(coords, maxDistance, includePlayerVehicle)\n```\n\n----------------------------------------\n\nTITLE: Defining Burger Item with Notifications in Lua\nDESCRIPTION: Defines a burger item with add and remove callbacks that trigger notifications.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Guides/creatingItems.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n['burger'] = {\n    label = 'Burger',\n    weight = 220,\n    stack = true,\n    consume = 0,\n    client = {\n        add = function(total)\n            if total > 0 then\n                lib.notify({description = 'Nice burger you got there!'})\n            end\n        end,\n\n        remove = function(total)\n            if total < 1 then\n                lib.notify({description = 'You lost all of your burgers!'})\n            end\n        end\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Admin Command for Opening Player Inventory in Lua\nDESCRIPTION: Registers an admin command to open a player's inventory using the forceOpenInventory function.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nRegisterCommand('openplayerinv', function(source, args)\n    exports.ox_inventory:forceOpenInventory(source, 'player', tonumber(args[1]))\nend, true)\n```\n\n----------------------------------------\n\nTITLE: Example of Calculating and Adding Max Carryable Amount in Lua\nDESCRIPTION: Demonstrates checking how much of an item can be carried and then adding that amount.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\namountToAdd = exports.ox_inventory:CanCarryAmount(inv, 'stone')\nexports.ox_inventory:AddItem(inv, 'stone', amountToAdd)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Door Data by ID in Lua\nDESCRIPTION: Gets data for a door with the given ID, matching the ID for the database entry. Returns a table containing the door's configuration data.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_doorlock/Server/functions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_doorlock:getDoor(doorId)\n```\n\n----------------------------------------\n\nTITLE: Setting Active Group in Lua\nDESCRIPTION: Sets a group the player belongs to as their active or \"primary\" group, with an option for temporary status.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nplayer.setActiveGroup(groupName?: string, temporary?: boolean)\n```\n\n----------------------------------------\n\nTITLE: Player Loaded Event Handler - Lua\nDESCRIPTION: Event handler for when a character is loaded into the game. Receives the player ID and a boolean indicating if the character is new.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Events/client.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction(playerId: number, isNew: boolean)\n```\n\n----------------------------------------\n\nTITLE: Registering a Menu in Lua\nDESCRIPTION: Registers and caches a menu under a specified id in Lua. Accepts a data table with menu configuration and a callback function.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/menu.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.registerMenu(data, cb)\n```\n\n----------------------------------------\n\nTITLE: Getting Nearby Players in Lua using lib.getNearbyPlayers\nDESCRIPTION: A utility function that retrieves information about players within a specified range from given coordinates. Returns an array of objects containing player ID, ped handle, and coordinates for each nearby player. Supports optional maximum distance and player inclusion parameters.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/GetNearbyPlayers/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.getNearbyPlayers(coords, maxDistance, includePlayer)\n```\n\n----------------------------------------\n\nTITLE: Getting Item Count with Metadata Filtering in Lua\nDESCRIPTION: Gets the total count of a specific item in the player's inventory, with optional metadata filtering and strict matching option.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_25\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetItemCount(itemName, metadata, strict)\n```\n\n----------------------------------------\n\nTITLE: Closing Player Inventory in Lua\nDESCRIPTION: Closes the currently open inventory for the player.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:closeInventory()\n```\n\n----------------------------------------\n\nTITLE: Registering Client Callback Example in TypeScript\nDESCRIPTION: Example of registering a client callback for the 'test:client' event, which logs the received arguments and returns an object.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Callback/JavaScript/Client.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonServerCallback('test:client', (...args: [number, number, string]) => {\n  console.log(args);\n  return {\n    clientValue: 'Value from the client',\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Specific Format MySQL Transactions in Lua\nDESCRIPTION: Shows how to structure MySQL transactions using specific format where each query has its own parameters. Supports two syntax styles - using named keys or arrays.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/transaction.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal queries = {\n    { query = 'INSERT INTO `test` (id) VALUES (?)', values = { 1 }},\n    { query = 'INSERT INTO `test` (id, name) VALUES (?, ?)', values = { 2, 'bob' }},\n}\n\n-- You can also pass an array of arrays.\nlocal queries = {\n  { 'INSERT INTO `test` (id) VALUES (?)', { 1 } },\n  { 'INSERT INTO `test` (id, name) VALUES (?, ?)', { 2, 'bob' } },\n}\n```\n\n----------------------------------------\n\nTITLE: Confiscating Player Inventory in Lua\nDESCRIPTION: Clears a player's inventory and saves it to a stash.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_39\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:ConfiscateInventory(source)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Character in Lua\nDESCRIPTION: Registers a new character for a player that hasn't selected a character yet. Returns the index of the new character in the player's characters array.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nplayer.createCharacter(data)\n```\n\n----------------------------------------\n\nTITLE: Searching Inventory in Lua\nDESCRIPTION: Searches an inventory for a specified item.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_42\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:Search(inv, search, item, metadata)\n```\n\n----------------------------------------\n\nTITLE: Finding Closest Object with Lua Function in Overextended Library\nDESCRIPTION: A utility function that returns the handle and coordinates of the closest object to a specified location. It takes coordinates as a vector3 and an optional maximum distance parameter which defaults to 2.0 if not provided.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/GetClosestObject/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.getClosestObject(coords, maxDistance)\n```\n\n----------------------------------------\n\nTITLE: Deep Cloning Tables in Lua\nDESCRIPTION: Recursively clones a table to ensure no table references remain, creating a completely independent copy.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Table/Shared.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlib.table.deepclone(tbl)\n```\n\n----------------------------------------\n\nTITLE: Adding Global Player Options in Lua\nDESCRIPTION: Creates new targetable options for all Player entities. Requires a table with targeting properties as an argument.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:addGlobalPlayer(options)\n```\n\n----------------------------------------\n\nTITLE: Getting the Closest Player Using lib.getClosestPlayer in Lua\nDESCRIPTION: A utility function that finds the closest player to a given set of coordinates. It returns the player ID, ped handle, and coordinates of the closest player found within the specified maximum distance.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/GetClosestPlayer/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.getClosestPlayer(coords, maxDistance, includePlayer)\n```\n\n----------------------------------------\n\nTITLE: Opening Player Inventory Example in Lua\nDESCRIPTION: Example of how to open a target player's inventory by providing the player's server ID as the data parameter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:openInventory('player', 3)\n```\n\n----------------------------------------\n\nTITLE: Awaiting Server Callback Response\nDESCRIPTION: Yields the current coroutine until a response is received from the server. Takes a callback name, delay duration, and additional arguments.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Callback/Lua/Client.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlib.callback.await(name, delay, ...)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal count = lib.callback.await('ox_inventory:getItemCount', false, 'water', {type = 'fresh'})\nprint(count)\n```\n\n----------------------------------------\n\nTITLE: Opening Stash Inventory Examples in Lua\nDESCRIPTION: Multiple examples of opening different types of stash inventories, including predefined stashes, custom stashes, and stashes with specific owners.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:openInventory('stash', 1)\n```\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:openInventory('stash', 'society_police')\n```\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:openInventory('stash', { id = 'police_locker', owner = 'license:xxxxxxxx' })\n```\n\n----------------------------------------\n\nTITLE: Target Option Properties Structure\nDESCRIPTION: Defines the structure and properties available for configuring target options in FiveM. Includes visual properties, interaction constraints, permission settings, and action handlers.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/TargetOptions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TargetOption {\n  label: string;\n  name?: string;\n  icon?: string;\n  iconColor?: string;\n  distance?: number;\n  bones?: string | string[];\n  offset?: vector3;\n  offsetAbsolute?: vector3;\n  offsetSize?: number;\n  groups?: string | string[] | Record<string, number>;\n  items?: string | string[] | Record<string, number>;\n  anyItem?: boolean;\n  canInteract?: (entity: number, distance: number, coords: any, name: string, bone: string) => boolean;\n  menuName?: string;\n  openMenu?: string;\n  onSelect?: (data: any) => void;\n  export?: string;\n  event?: string;\n  serverEvent?: string;\n  command?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using lib.getNearbyPeds to Find Nearby Peds in Lua\nDESCRIPTION: This function retrieves all ped handles and their coordinates within a specified distance from a given position. It takes the source coordinates and an optional maximum distance parameter, defaulting to 2.0 units if not specified.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/GetNearbyPeds/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.getNearbyPeds(coords, maxDistance)\n```\n\n----------------------------------------\n\nTITLE: Creating Box Zone in Lua\nDESCRIPTION: Creates a box-shaped zone with specified coordinates, size, and rotation. Includes options for callback functions and debug mode.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Zones/Shared.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlib.zones.box(data)\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Stash in Lua\nDESCRIPTION: Creates a temporary stash which will be removed after some time.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_44\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:CreateTemporaryStash(properties)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal mystash = exports.ox_inventory:CreateTemporaryStash({\n    label = 'mystash',\n    slots = 5,\n    maxWeight = 5000,\n    items = {\n        { 'WEAPON_MINISMG', 1 },\n        { 'ammo-9', 69 },\n        { 'water', 2, { label = 'Mineral water' } }\n    }\n})\n\nTriggerClientEvent('ox_inventory:openInventory', 1, 'stash', mystash)\n```\n\n----------------------------------------\n\nTITLE: Checking Inventory Open State\nDESCRIPTION: Example of checking whether the player's inventory is currently open or closed.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_36\n\nLANGUAGE: lua\nCODE:\n```\nlocal invOpen = LocalPlayer.state.invOpen\n\nif invOpen then\n    -- Do stuff when open\nelse\n    -- Do stuff when closed\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Opened Inventory Events in Lua\nDESCRIPTION: Event handler that triggers after a player opens an inventory. It receives the player ID and inventory ID as parameters.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Events/Server.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nAddEventHandler('ox_inventory:openedInventory', function(playerId, inventoryId) end)\n```\n\n----------------------------------------\n\nTITLE: Skill Check Usage Example in Lua\nDESCRIPTION: Example showing how to run a sequence of skill checks with varying difficulty levels and custom key bindings. Returns a success boolean indicating if all checks were passed.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/skillcheck.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal success = lib.skillCheck({'easy', 'easy', {areaSize = 60, speedMultiplier = 2}, 'hard'}, {'w', 'a', 's', 'd'})\n```\n\n----------------------------------------\n\nTITLE: Example of Adding Item to Inventory in Lua\nDESCRIPTION: Demonstrates adding bread to a glovebox inventory and handling the response.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal success, response = exports.ox_inventory:AddItem('gloveVGH283', 'bread', 4)\n\nif not success then\n    return print(response)\nend\n\nprint(json.encode(response, {indent=true}))\n```\n\n----------------------------------------\n\nTITLE: Picking the Lock of the Closest Door in ox_doorlock (Lua)\nDESCRIPTION: Attempts to pick the lock of the closest door. This function relies on server-side checks to determine if the action succeeds or fails, based on factors like player permissions or item requirements.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_doorlock/Client/functions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_doorlock:pickClosestDoor()\n```\n\n----------------------------------------\n\nTITLE: Searching for Multiple Item Slots Example in Lua\nDESCRIPTION: Example of searching the player's inventory for slots containing multiple items (meat and skin) with specific metadata (deer) and displaying detailed information about each slot.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nlocal items = exports.ox_inventory:Search('slots', {'meat', 'skin'}, 'deer')\n\nif items then\n    for name, data in pairs(items) do\n        local count = 0\n\n        for _, v in pairs(data) do\n            if v.slot then\n                print(v.slot..' contains '..v.count..' '..name..' '..json.encode(v.metadata))\n                count = count + v.count\n            end\n        end\n\n        print('You have '..count..' '..name)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Local Entity Options in Lua\nDESCRIPTION: Creates new targetable options for specific entity handles. Accepts entity handles and a table with targeting properties.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:addLocalEntity(entities, options)\n```\n\n----------------------------------------\n\nTITLE: Getting All Player Groups in Lua\nDESCRIPTION: Returns an object of all groups the player is currently in, using the group name as a key.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nplayer.getGroups()\n```\n\n----------------------------------------\n\nTITLE: Example of Removing Item from Inventory in Lua\nDESCRIPTION: Demonstrates removing water from a glovebox inventory.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal success = exports.ox_inventory:RemoveItem('gloveVGH283', 'water', 2)\n```\n\n----------------------------------------\n\nTITLE: Using progressCircle in Lua\nDESCRIPTION: Displays a circular progress indicator with customizable position. Similar to progressBar but with a different visual presentation.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/progress.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlib.progressCircle(data)\n```\n\n----------------------------------------\n\nTITLE: Using progressCircle in TypeScript\nDESCRIPTION: TypeScript implementation for displaying a circular progress indicator. Requires importing from ox_lib client and returns a promise.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/progress.mdx#2025-04-16_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport lib from '@overextended/ox_lib/client'\n\nlib.progressCircle(data)\n```\n\n----------------------------------------\n\nTITLE: Finding the Closest Point in Lua\nDESCRIPTION: Illustrates the function to get the data for the closest point to the player. Returns a single CPoint object or nil if no points are in range.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Points/Lua/Client.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlib.points.getClosestPoint()\n```\n\n----------------------------------------\n\nTITLE: Creating Timer Instance in Lua\nDESCRIPTION: Creates a new timer instance with specified duration, callback function, and optional async behavior. The timer executes the callback after the specified time has elapsed.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Timer/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal timer = lib.timer(5000, function()\n   print(\"timer ended\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Disabling Radial Menu Access in TypeScript\nDESCRIPTION: TypeScript implementation for enabling or disabling player access to the radial menu.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/radial.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.disableRadial(state);\n```\n\n----------------------------------------\n\nTITLE: Preventing Item Purchases from Shops\nDESCRIPTION: Example hook that prevents players from purchasing water items from any shop. The hook returns false to cancel the transaction when a player attempts to buy the specified item.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server/Hooks.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal hookId = exports.ox_inventory:registerHook('buyItem', function(payload)\n    print(json.encode(payload, { indent = true, sort_keys = true }))\n    return false\nend, {\n    print = true,\n    itemFilter = {\n        water = true\n\t  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using progressBar in Lua\nDESCRIPTION: Displays a running progress bar with customizable duration, label, animations, and other options. Returns true when completed or false when cancelled.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/progress.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.progressBar(data)\n```\n\n----------------------------------------\n\nTITLE: Getting Player Inventory Weight in Lua\nDESCRIPTION: Returns the total weight of all items in the player's inventory.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_27\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetPlayerWeight()\n```\n\n----------------------------------------\n\nTITLE: Spawning Vehicle in Lua\nDESCRIPTION: Spawns an OxVehicle with the given dbId, if it hasn't already been spawned. Returns an OxVehicle object.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nOx.SpawnVehicle(dbId, coords, heading)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Callback in JavaScript\nDESCRIPTION: Demonstrates how to insert a new entry into the 'users' table using a Callback-based approach in JavaScript. The insert id is passed to the callback function.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/insert.mdx#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nMySQL.insert('INSERT INTO `users` (identifier, firstname, lastname) VALUES (?, ?, ?)', [\n  identifier, firstName, lastName\n], (id) => {\n  console.log(id)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Payment Method in OX Fuel - Lua\nDESCRIPTION: Demonstrates how to override the default payment method using exports.ox_fuel:setPaymentMethod. The method takes a function parameter that handles payment logic and returns a boolean indicating success.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_fuel/Server/functions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_fuel:setPaymentMethod(method)\n```\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_fuel:setPaymentMethod(function(playerId, amount)\n    local xPlayer = ESX.GetPlayerFromId(playerId)\n    local bankAmount = xPlayer.getAccount('bank').money\n\n    if bankAmount >= amount then\n        xPlayer.removeAccountMoney('bank', amount)\n        return true\n    end\n\n    TriggerClientEvent('ox_lib:notify', source, {\n        type = 'error',\n        description = locale('not_enough_money', amount - bankAmount)\n    })\nend)\n```\n\n----------------------------------------\n\nTITLE: Creating a Keybind with Press and Release Handlers in Lua\nDESCRIPTION: A complete example showing how to create a keybind with both press and release event handlers. The example registers an 'F' key to 'pay respects' and prints messages when the key is pressed and released.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/AddKeybind/Client.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal keybind = lib.addKeybind({\n    name = 'respects',\n    description = 'press F to pay respects',\n    defaultKey = 'F',\n    onPressed = function(self)\n        print(('pressed %s (%s)'):format(self.currentKey, self.name))\n    end,\n    onReleased = function(self)\n        print(('released %s (%s)'):format(self.currentKey, self.name))\n    end\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Model-Specific Options in Lua\nDESCRIPTION: Creates new targetable options for specific models. Accepts a model or list of models and a table with targeting properties.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:addModel(models, options)\n```\n\n----------------------------------------\n\nTITLE: Executing Prepared MySQL Query with Callback in Lua\nDESCRIPTION: This snippet demonstrates how to use the MySQL.prepare method with a callback function to execute a prepared query and retrieve user data in Lua. It prints the response as JSON within the callback.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/prepare.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nMySQL.prepare('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', {\n    identifier\n}, function(response)\n    print(json.encode(response, { indent = true, sort_keys = true }))\nend)\n```\n\n----------------------------------------\n\nTITLE: Example of Checking and Adjusting Carryable Weight in Lua\nDESCRIPTION: Demonstrates checking if a player can carry a certain weight and adjusting if necessary.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nlocal fillAmount = 1000\nlocal canCarryWeight, freeWeight = ox_inventory:CanCarryWeight(playerId, fillAmount)\n\nif freeWeight == 0 then\n  return\nelseif not canCarryWeight then\n  fillAmount = freeWeight\nend\n\n-- Do something\n```\n\n----------------------------------------\n\nTITLE: Getting Multiple Slot IDs with Item in Lua\nDESCRIPTION: Get all slot ids in an inventory matching the given name and metadata.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_30\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetSlotIdsWithItem(inv, itemName, metadata, strict)\n```\n\n----------------------------------------\n\nTITLE: Running a Skill Check in JavaScript\nDESCRIPTION: Function to run a skill check with defined difficulty in JavaScript. Takes a difficulty parameter (preset string or custom object) and an optional inputs array for key bindings.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/skillcheck.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.skillCheck(difficulty, inputs);\n```\n\n----------------------------------------\n\nTITLE: Opening Player Inventory Example in Lua\nDESCRIPTION: Example of opening a target player's inventory using the forceOpenInventory function.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:forceOpenInventory(1, 'player', 3)\n```\n\n----------------------------------------\n\nTITLE: Loading Modules with require in Lua\nDESCRIPTION: Demonstrates how to use the require function to load modules in Lua. It shows the syntax and explains that module names are paths relative to the resource, must point to .lua files, and can use '.' to separate directories.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Require/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nrequire 'modname'\n```\n\n----------------------------------------\n\nTITLE: Adding Controls to Disabled List in FiveM\nDESCRIPTION: This method adds specified control(s) to the tracking list. When a control is already being tracked, its counter will be incremented rather than adding it again.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/DisableControls/Client.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlib.disableControls:Add(...)\n```\n\n----------------------------------------\n\nTITLE: Preventing Specific Items from Being Crafted\nDESCRIPTION: Example hook that prevents lockpicks from being crafted by players. It uses the craftItem event with an itemFilter to target only the specified item.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server/Hooks.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal hookId = exports.ox_inventory:registerHook('craftItem', function(payload)\n    print(json.encode(payload, { indent = true, sort_keys = true }))\n    return false\nend, {\n    print = true,\n\titemFilter = {\n\t\tlockpick = true\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Global Vehicle Options in Lua\nDESCRIPTION: Creates new targetable options for all Vehicle entity types. Requires a table with targeting properties as an argument.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:addGlobalVehicle(options)\n```\n\n----------------------------------------\n\nTITLE: Checking if Progress is Active in Lua\nDESCRIPTION: Utility function that returns true if a progress bar is currently active. Used to prevent overlapping progress indicators.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/progress.mdx#2025-04-16_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlib.progressActive()\n```\n\n----------------------------------------\n\nTITLE: Setting Vehicle Properties - Usage Examples\nDESCRIPTION: Examples of setting vehicle properties using network events in both Lua and TypeScript.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/VehicleProperties/Client.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nRegisterNetEvent('ox_lib:setVehicleProperties', function(netid, data)\n    lib.setVehicleProperties(NetToVeh(netid), data)\nend)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setVehicleProperties } from '@overextended/ox_lib/client'\n\nonNet('ox_lib:setVehicleProperties', (netid, data) => {\n  setVehicleProperties(NetToVeh(netid), data)\n})\n```\n\n----------------------------------------\n\nTITLE: DUI Usage Example in Lua\nDESCRIPTION: Comprehensive example showing the creation of a DUI instance, URL modification, message sending, and cleanup. Demonstrates all major functionality of the DUI system.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Dui/Lua/Client.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal dui = lib.dui:new({\n\turl = (\"nui://%s/web/index.html\"):format(cache.resource), \n\twidth = 1920, \n\theight = 1080,\n\tdebug = true\n})\n\n-- Change url\ndui:setUrl(\"https://google.com\")\n\n-- Send a message\ndui:sendMessage({\n\taction = \"display\",\n\tvalue = true\n})\n\n-- Destroy\ndui:remove()\n```\n\n----------------------------------------\n\nTITLE: Opening Custom Stash in Lua\nDESCRIPTION: Example of opening a custom stash (created on the server with RegisterStash) using the forceOpenInventory function.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:forceOpenInventory(1, 'stash', 'society_police')\n```\n\n----------------------------------------\n\nTITLE: Complete Class System Implementation Example in Lua\nDESCRIPTION: This example demonstrates creating a Person base class and two derived classes (Professor and Student) using the lib.class function. It showcases inheritance, the super constructor call, encapsulation with private fields, and method implementation.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Class/Shared.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n---@class Person : OxClass\n---@field name string\nlocal Person = lib.class('Person')\n\nfunction Person:constructor(name)\n    print('calling Person constructor for', name)\n    self.name = name\nend\n\n-- Professor Class (extends Person)\n\n---@class Professor : Person\n---@field teaches string\nlocal Professor = lib.class('Professor', Person)\n\nfunction Professor:constructor(name, teaches)\n    print('calling Professor constructor for', name)\n    self:super(name)\n    self.teaches = teaches\nend\n\nfunction Professor:introduceSelf()\n    print((\"My name is %s, and I will be your %s professor.\"):format(self.name, self.teaches))\nend\n\nfunction Professor:grade(paper)\n    local grade = math.random(1, 4)\n    print(grade)\nend\n\nCreateThread(function()\n    local walter = Professor:new('Walter', 'Chemistry')\n\n    walter:introduceSelf()\n    walter:grade('my paper')\nend)\n\n\n-- Student Class (extends Person)\n\n---@class Student : Person\n---@field private private { year: number }\nlocal Student = lib.class('Student', Person)\n\n---@param name string\n---@param year number\nfunction Student:constructor(name, year)\n    print('calling Student constructor for', name)\n    self:super(name)\n    self.private.year = year\nend\n\nfunction Student:introduceSelf()\n    print((\"Hi! I'm %s, and I'm in year %s.\"):format(self.name, self.private.year))\nend\n\n---@param year number\nfunction Student:setYear(year)\n    self.private.year = year\nend\n\nCreateThread(function()\n    local jesse = Student:new('Jesse', 2)\n\n    jesse:introduceSelf() -- Hi! I'm Jesse, and I'm in year 2.\n    jesse:setYear(3)\n    jesse:introduceSelf() -- Hi! I'm Jesse, and I'm in year 3.\n    print(jesse.private.year) -- nil\n    print(getmetatable(jesse.private)) -- private\n    jesse.private.year = 4 -- error\nend)\n```\n\n----------------------------------------\n\nTITLE: Registering Server Callback Handler with lib.callback.register in Lua\nDESCRIPTION: This function registers an event handler on the server side to respond to client requests. It takes a callback name and a callback function that will be invoked when the client makes a request.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Callback/Lua/Server.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlib.callback.register(name, cb)\n```\n\n----------------------------------------\n\nTITLE: Adding Entity-Specific Options in Lua\nDESCRIPTION: Creates new targetable options for specific network IDs. Accepts network IDs and a table with targeting properties.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:addEntity(netIds, options)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vehicle by Entity ID in Lua\nDESCRIPTION: Gets an OxVehicle from its entity id. Returns an OxVehicle object.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nOx.GetVehicle(entityId)\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Keybinds in Lua\nDESCRIPTION: Demonstrates how to enable or disable a registered keybind using the disable method. Setting the parameter to true disables the keybind, while false enables it.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/AddKeybind/Client.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nkeybind:disable(true) -- disables the keybind\nkeybind:disable(false) -- enables the keybind\n```\n\n----------------------------------------\n\nTITLE: Registering Server Callback in TypeScript\nDESCRIPTION: Function to register a callback handler on the server side that responds to client events.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Callback/JavaScript/Server.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonClientCallback(eventName, cb)\n```\n\n----------------------------------------\n\nTITLE: Adding a License to a Player in Lua\nDESCRIPTION: Grants a license to the player and returns a boolean indicating success.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nplayer.addLicense(licenseName)\n```\n\n----------------------------------------\n\nTITLE: Preventing Items from Being Moved To/From Specific Inventories\nDESCRIPTION: Example hook that blacklists 'water' from being moved into or from gloveboxes and trunks. It uses both itemFilter and inventoryFilter options to control when the hook triggers.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server/Hooks.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal hookId = exports.ox_inventory:registerHook('swapItems', function(payload)\n    print(json.encode(payload, { indent = true }))\n    return false\nend, {\n    print = true,\n    itemFilter = {\n        water = true,\n    },\n    inventoryFilter = {\n        '^glove[%w]+',\n        '^trunk[%w]+',\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Item Data in Lua\nDESCRIPTION: Returns a table of all registered items or data for a specific item if itemName is provided.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:Items(itemName)\n```\n\n----------------------------------------\n\nTITLE: Modifying Item Metadata on Creation\nDESCRIPTION: Example hook that changes the label for 'water' items to 'Mineral Water' when they are created. It demonstrates returning a modified metadata table to alter the item's properties.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server/Hooks.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal hookId = exports.ox_inventory:registerHook('createItem', function(payload)\n    print(json.encode(payload, { indent = true }))\n    local metadata = payload.metadata\n    metadata.label = 'Mineral Water'\n    return metadata\nend, {\n    print = true,\n    itemFilter = {\n        water = true\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Styled Notification Example in Lua\nDESCRIPTION: Example of a highly customized notification in Lua with custom identifier, position, styling, icon, and colors. Demonstrates advanced customization options.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/notify.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlib.notify({\n    id = 'some_identifier',\n    title = 'Notification title',\n    description = 'Notification description',\n    showDuration = false,\n    position = 'top',\n    style = {\n        backgroundColor = '#141517',\n        color = '#C1C2C5',\n        ['.description'] = {\n          color = '#909296'\n        }\n    },\n    icon = 'ban',\n    iconColor = '#C53030'\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Current Weapon Event in Lua\nDESCRIPTION: Event handler triggered when a weapon is equipped or its metadata changes. Receives weapon data as a table parameter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Events/Client.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nAddEventHandler('ox_inventory:currentWeapon', function(weapon) end)\n```\n\n----------------------------------------\n\nTITLE: Querying Single Row with Promise in Lua\nDESCRIPTION: Executes a MySQL query to fetch a single row using promises in Lua. The example demonstrates selecting firstname and lastname from users table with an identifier filter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/single.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal row = MySQL.single.await('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ? LIMIT 1', {\n    identifier\n})\n\nif not row then return end\n\nprint(row.firstname, row.lastname)\n```\n\n----------------------------------------\n\nTITLE: Setting Player Metadata in Lua\nDESCRIPTION: Stores a value in the player's metadata, with an option to sync it with the client for frontend use.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\nplayer.set(key, value, replicated)\n```\n\n----------------------------------------\n\nTITLE: Getting Player Group in Lua\nDESCRIPTION: Returns the player's grade of a given group name, or the first matched name and grade in a filter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nplayer.getGroup(filter)\n```\n\n----------------------------------------\n\nTITLE: Getting Inventory Items in Lua\nDESCRIPTION: Returns all slots with items in a inventory.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_37\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetInventoryItems(inv, owner)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal playerItems = exports.ox_inventory:GetInventoryItems(source)\n```\n\n----------------------------------------\n\nTITLE: Adding Box Zone in Lua\nDESCRIPTION: Creates a new targetable box zone. Requires parameters including coordinates, size, rotation, and targeting options.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:addBoxZone(parameters)\n```\n\n----------------------------------------\n\nTITLE: Triggering Client Callback in TypeScript\nDESCRIPTION: Function to trigger a callback on the client side with specified event name, player ID, and variable arguments.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Callback/JavaScript/Server.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntriggerClientCallback(eventName, playerId, ...args)\n```\n\n----------------------------------------\n\nTITLE: Getting Metadata with OxVehicle.get\nDESCRIPTION: Gets the value of a specific key from the vehicle's metadata. Returns the value associated with the provided key.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxVehicle.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nvehicle.get(key)\n```\n\n----------------------------------------\n\nTITLE: Registering Client Callback Handler\nDESCRIPTION: Registers a callback handler on the client side to respond to server requests. Takes a callback name and handler function.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Callback/Lua/Client.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlib.callback.register(name, cb)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlib.callback.register('ox:getNearbyVehicles', function(radius)\n    local nearbyVehicles = lib.getNearbyVehicles(GetEntityCoords(cache.ped), radius, true)\n    return nearbyVehicles\nend)\n```\n\n----------------------------------------\n\nTITLE: Checking Player Permissions in Lua\nDESCRIPTION: Verifies if a player has a specific permission through their group membership.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Client/OxPlayer.mdx#2025-04-16_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- Adding a permission to a group (server side)\nOx.SetGroupPermission('police', 1, 'handcuff', 'allow')\n\n-- Checking if a player has the 'handcuff' permission\nif player.hasPermission('group.police.handcuff') then\n    -- Do something\nend\n```\n\n----------------------------------------\n\nTITLE: Advanced Input Dialog Usage Example in JavaScript\nDESCRIPTION: Demonstrates an advanced implementation of the input dialog in JavaScript with various field types and shows how to handle color and date inputs.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/input.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst input = await lib.inputDialog('Police locker', [\n  { type: 'input', label: 'Text input', description: 'Some input description', required: true, min: 3, max: 16 },\n  { type: 'number', label: 'Number input', description: 'Some number description', icon: 'hashtag' },\n  { type: 'checkbox', label: 'Simple checkbox' },\n  { type: 'color', label: 'Colour input', default: '#eb4034' },\n  { type: 'date', label: 'Date input', icon: ['far', 'calendar'], default: true, format: 'DD/MM/YYYY' },\n]);\n\nconsole.log(JSON.stringify(input, null, 2));\n\n// Getting r, g and b values from colour picker\nconst regExp = /rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/;\nconst colourInput = input[3];\n\nconst color = regExp.exec(colourInput);\n\nif (!color) return;\n\nconsole.log(+color[1], +color[2], +color[3]);\n```\n\n----------------------------------------\n\nTITLE: Triggering Server Callback with lib.callback\nDESCRIPTION: Triggers a server callback with optional delay and handles the response in a separate coroutine. Accepts a callback name, delay duration, callback function, and additional arguments.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Callback/Lua/Client.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.callback(name, delay, cb, ...)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlib.callback('ox_inventory:getItemCount', false, function(count)\n    print(count)\nend, 'water', {type = 'fresh'})\n```\n\n----------------------------------------\n\nTITLE: Alert Dialog Example in Lua\nDESCRIPTION: Example usage of the alert dialog in Lua, showing how to create a dialog with a header, content, centered positioning, and a cancel button. The result (confirm or cancel) is printed to the console.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/alert.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal alert = lib.alertDialog({\n    header = 'Hello there',\n    content = 'General Kenobi  \\n Markdown support!',\n    centered = true,\n    cancel = true\n})\n\nprint(alert)\n```\n\n----------------------------------------\n\nTITLE: Removing Balance from Account in Lua\nDESCRIPTION: Removes funds from an account with options for messaging and overdrawing. The overdraw parameter allows balance to go negative if set to true.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxAccount.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\naccount.removeBalance(data)\n```\n\nLANGUAGE: lua\nCODE:\n```\naccount.removeBalance({ amount = 1000, message = 'Impound', overdraw = true })\n```\n\n----------------------------------------\n\nTITLE: Getting Total Item Count in Lua\nDESCRIPTION: Get the total item count for all items in an inventory with the given name and metadata.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_25\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetItemCount(inv, itemName, metadata, strict)\n```\n\n----------------------------------------\n\nTITLE: Standard Notification Example in Lua\nDESCRIPTION: Example of a standard notification with title, description, and type parameters in Lua. This creates a success notification with basic formatting.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/notify.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlib.notify({\n    title = 'Notification title',\n    description = 'Notification description',\n    type = 'success'\n})\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Callback in Lua\nDESCRIPTION: Illustrates how to insert a new entry into the 'users' table using a Callback-based approach in Lua. The insert id is passed to the callback function.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/insert.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nMySQL.insert('INSERT INTO `users` (identifier, firstname, lastname) VALUES (?, ?, ?)', {\n    identifier, firstName, lastName\n}, function(id)\n    print(id)\nend)\n```\n\n----------------------------------------\n\nTITLE: Setting Menu Options in Lua\nDESCRIPTION: Updates the options of a registered menu in Lua. Can replace all options or update a specific option by index.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/menu.mdx#2025-04-16_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlib.setMenuOptions(id, options, index)\n```\n\n----------------------------------------\n\nTITLE: Toggling Inventory Hotkeys\nDESCRIPTION: Example of disabling access to inventory hotkeys for a player.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_35\n\nLANGUAGE: lua\nCODE:\n```\nLocalPlayer.state.invHotkeys = false\n```\n\n----------------------------------------\n\nTITLE: Creating and Drawing a Basic Marker in FiveM using lib.marker\nDESCRIPTION: This example demonstrates how to create a simple red marker at the player's current position and continuously draw it. It uses the lib.marker.new function to initialize the marker with type 1, coordinates, and color properties.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Marker/Client.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal marker = lib.marker.new({\n\ttype = 1,\n\tcoords = GetEntityCoords(cache.ped),\n\tcolor = { r = 255, g = 0, b = 0, a = 200 },\n})\n\nCitizen.CreateThread(function()\n\twhile true do\n\t\tmarker:draw()\n\n\t\tCitizen.Wait(1)\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Setting Storage Status with OxVehicle.setStored\nDESCRIPTION: Sets the vehicle as \"stored\" at the given location value (e.g., impound, garage, null). Optionally despawns and saves the vehicle if the despawn parameter is true.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxVehicle.mdx#2025-04-16_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nvehicle.setStored(value, despawn)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vehicle Data with Ox.GetVehicleData in Lua\nDESCRIPTION: Returns VehicleData for all vehicles, or optionally a specific model or array of models. The data includes vehicle class, doors, make, name, price, seats, type, and weapons information.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/common.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nOx.GetVehicleData(filter?)\n```\n\n----------------------------------------\n\nTITLE: Getting Active Context Menu in Lua/JS\nDESCRIPTION: Function to retrieve the ID of the currently open context menu.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/context.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlib.getOpenContextMenu()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.getOpenContextMenu();\n```\n\n----------------------------------------\n\nTITLE: Using Callback-based MySQL Transactions\nDESCRIPTION: Examples of executing MySQL transactions using Callback pattern in both Lua and JavaScript, showing both specific and shared format implementations.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/transaction.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- specific\nMySQL.transaction(queries, values, function(success)\n    print(success)\nend)\n\n-- shared\nMySQL.transaction(queries, function(success)\n    print(success)\nend)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// specific\nMySQL.transaction(queries, (success) => {\n  console.log(success)\n})\n\n// shared\nMySQL.transaction(queries, values, (success) => {\n  console.log(success)\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vehicle Network Type with Ox.GetVehicleNetworkType in Lua\nDESCRIPTION: Returns the network object type of a vehicle model, which may differ from the vehicle type (e.g. blimp is networked as heli). Takes a model name and returns the corresponding network type as a string.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/common.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nOx.GetVehicleNetworkType(modelName)\n```\n\n----------------------------------------\n\nTITLE: Running a Skill Check in Lua\nDESCRIPTION: Function to run a skill check with defined difficulty. Takes a difficulty parameter (preset string or custom table) and an optional inputs array for key bindings.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/skillcheck.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.skillCheck(difficulty, inputs)\n```\n\n----------------------------------------\n\nTITLE: Getting Multiple Slot Data with Item in Lua\nDESCRIPTION: Get data all slots in an inventory matching the given name and metadata.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_32\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetSlotsWithItem(inv, itemName, metadata, strict)\n```\n\n----------------------------------------\n\nTITLE: Basic Input Dialog Usage Example in Lua\nDESCRIPTION: Demonstrates a basic usage of the input dialog in Lua, creating a dialog with two input rows and handling the returned data.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/input.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal input = lib.inputDialog('Basic dialog', {'First row', 'Second row'})\n\nif not input then return end\nprint(json.encode(input), input[1], input[2])\n```\n\n----------------------------------------\n\nTITLE: Setting Container Properties for Paper Bag in Lua\nDESCRIPTION: Sets container properties for a paper bag item, including slots, max weight, and item blacklist.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Guides/creatingItems.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nsetContainerProperties('paperbag', {\n\tslots = 5,\n\tmaxWeight = 1000,\n\tblacklist = { 'testburger' }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Entry to Grid in Lua\nDESCRIPTION: Adds an entry to the grid. It takes a GridEntry object as input and adds it to the appropriate cell in the grid system.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Grid/Shared.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlib.grid.addEntry(entry)\n```\n\n----------------------------------------\n\nTITLE: Displaying Metadata Properties in Tooltips in Lua\nDESCRIPTION: Sets metadata properties to be displayed in item tooltips, supporting string properties or tables of key-value pairs. Allows customization of metadata display labels.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:displayMetadata(metadata, value)\n```\n\n----------------------------------------\n\nTITLE: Callback Data Structure\nDESCRIPTION: Defines the data structure returned to registered callbacks or events when a target option is selected. Includes entity information, coordinates, and distance data.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/TargetOptions.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CallbackData {\n  entity: number;  // Entity ID or network ID for server events\n  coords: vector3; // Coordinates of shape test collision\n  distance: number; // Player's distance from coords\n  zone?: number;   // Selected zone ID if applicable\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Item Data from Inventory in Lua\nDESCRIPTION: Returns generic item data from the specified inventory, with the total count.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetItem(inv, item, metadata, returnsCount)\n```\n\n----------------------------------------\n\nTITLE: MySQL Update with Promise - Lua Implementation\nDESCRIPTION: Executes an UPDATE query using Promise pattern in Lua. Returns the number of affected rows from the update operation. Uses parameterized queries for safe value insertion.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal affectedRows = MySQL.update.await('UPDATE users SET firstname = ? WHERE identifier = ?', {\n    newName, identifier\n})\n\nprint(affectedRows)\n```\n\n----------------------------------------\n\nTITLE: Adding Poly Zone in Lua\nDESCRIPTION: Creates a new targetable poly zone. Requires parameters including points, thickness, and targeting options.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:addPolyZone(parameters)\n```\n\n----------------------------------------\n\nTITLE: Getting Group by Type in Lua\nDESCRIPTION: Returns the name and grade of a player's group matching the specified type.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Client/OxPlayer.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nplayer.getGroupByType(type)\n```\n\n----------------------------------------\n\nTITLE: Registering Radial Sub-Menus in Lua\nDESCRIPTION: Creates a radial sub-menu with predefined options that can be accessed from the main menu.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/radial.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlib.registerRadial(radial)\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Inventory Slots With Item\nDESCRIPTION: Function to get data for all inventory slots matching an item name and optional metadata. Returns an array of slot data.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_32\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetSlotsWithItem(itemName, metadata, strict)\n```\n\n----------------------------------------\n\nTITLE: Getting Closest Ped in Lua\nDESCRIPTION: A utility function that finds the closest ped to a given set of coordinates within a specified maximum distance. Returns both the ped handle and its coordinates if found.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/GetClosestPed/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.getClosestPed(coords, maxDistance)\n```\n\n----------------------------------------\n\nTITLE: Submenu Registration Example in Lua/JS\nDESCRIPTION: Example of registering a submenu with back functionality and basic options.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/context.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlib.registerContext({\n  id = 'other_menu',\n  title = 'Other context menu',\n  menu = 'some_menu',\n  onBack = function()\n    print('Went back!')\n  end,\n  options = {\n    {\n      title = 'Nothing here'\n    }\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlib.registerContext({\n  id: 'other_menu',\n  title: 'Other context menu',\n  menu: 'some_menu',\n  onBack: () => {\n    console.log('Went back!');\n  },\n  options: [\n    {\n      title: 'Nothing here',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Depositing Money into Account in Lua\nDESCRIPTION: Allows a player to deposit money into an account. Requires player ID and amount parameters, with optional message and note parameters for record-keeping.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxAccount.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\naccount.depositMoney(playerId, amount, message, note)\n```\n\n----------------------------------------\n\nTITLE: Example of Getting Item Data in Lua\nDESCRIPTION: Demonstrates retrieving data for the 'water' item from a player's inventory.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal item = ox_inventory:GetItem(source, 'water', nil, false)\n\nprint(json.encode(item, {indent=true}))\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Event Handler in TypeScript\nDESCRIPTION: Shows how to import and use the cache event handler in TypeScript, including type-safe event registration and value access.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Cache/Client.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onCache } from '@overextended/ox_lib/client';\n\nonCache(key, (value) => {});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cache, onCache } from '@overextended/ox_lib/client';\n\nlib.onCache('vehicle', (value) => {\n  console.log('old vehicle:', cache.vehicle);\n  console.log('new vehicle:', value);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Player Group Information in Lua\nDESCRIPTION: Returns the player's grade for a given group name or matches against a filter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Client/OxPlayer.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nplayer.getGroup(filter)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Player by User ID in Lua\nDESCRIPTION: Gets an OxPlayer from its user id. Returns an OxPlayer object.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nOx.GetPlayerFromUserId(userId)\n```\n\n----------------------------------------\n\nTITLE: Creating Sphere Zone in Lua\nDESCRIPTION: Creates a spherical zone with specified coordinates and radius. Includes options for callback functions and debug mode.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Zones/Shared.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlib.zones.sphere(data)\n```\n\n----------------------------------------\n\nTITLE: Listening for Current Weapon Changes in Lua\nDESCRIPTION: Example of setting up an event handler to listen for changes to the player's currently equipped weapon.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nAddEventHandler('ox_inventory:currentWeapon', function(currentWeapon)\n\tCurrentWeapon = currentWeapon\nend)\n```\n\n----------------------------------------\n\nTITLE: Getting Player Coordinates in Lua\nDESCRIPTION: Returns the player's current coordinates as a vector3.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nplayer.getCoords()\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Money from Account in Lua\nDESCRIPTION: Allows a player to withdraw money from an account. Requires player ID and amount parameters, with optional message and note parameters for record-keeping.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxAccount.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\naccount.withdrawMoney(playerId, amount, message, note)\n```\n\n----------------------------------------\n\nTITLE: Complete Zone Usage Example in Lua\nDESCRIPTION: Comprehensive example showing creation of poly, sphere, and box zones with callback functions and debug options.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Zones/Shared.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction onEnter(self)\n    print('entered zone', self.id)\nend\n\nfunction onExit(self)\n    print('exited zone', self.id)\nend\n\nfunction inside(self)\n    print('you are inside zone ' .. self.id)\nend\n\nlocal poly = lib.zones.poly({\n    points = {\n        vec(413.8, -1026.1, 29),\n        vec(411.6, -1023.1, 29),\n        vec(412.2, -1018.0, 29),\n        vec(417.2, -1016.3, 29),\n        vec(422.3, -1020.0, 29),\n        vec(426.8, -1015.9, 29),\n        vec(431.8, -1013.0, 29),\n        vec(437.3, -1018.4, 29),\n        vec(432.4, -1027.2, 29),\n        vec(424.7, -1023.5, 29),\n        vec(420.0, -1030.2, 29),\n        vec(409.8, -1028.4, 29),\n    },\n    thickness = 2,\n    debug = true,\n    inside = inside,\n    onEnter = onEnter,\n    onExit = onExit\n})\n```\n\n----------------------------------------\n\nTITLE: Zone Creation Function Format in Lua\nDESCRIPTION: Example of creating a polygon zone using the function format.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Zones/Shared.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal poly = lib.zones.poly({\n    name = poly,\n    points = {\n        vec(447.9, -998.8, 25.8),\n        vec(450.3, -998.2, 25.8),\n        vec(449.9, -995.5, 25.8),\n        vec(447.2, -995.6, 25.8),\n        vec(446.3, -997.9, 25.8),\n    },\n    thickness = 2,\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Player by Entity ID in Lua\nDESCRIPTION: Gets an OxPlayer from its entity id. Returns an OxPlayer object.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nOx.GetPlayer(entityId)\n```\n\n----------------------------------------\n\nTITLE: Executing Prepared MySQL Query with Promise in JavaScript\nDESCRIPTION: This snippet shows how to use the MySQL.prepare method to execute a prepared query and retrieve user data in JavaScript. It uses a promise-based approach with async/await and logs the response as JSON.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/prepare.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await MySQL.prepare('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', [\n  identifier\n])\n\nconsole.log(JSON.stringify(response))\n```\n\n----------------------------------------\n\nTITLE: Querying Single Row with Callback in JavaScript\nDESCRIPTION: Executes a MySQL query to fetch a single row using a callback function in JavaScript. The example demonstrates selecting firstname and lastname from users table with an identifier filter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/single.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMySQL.single('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ? LIMIT 1', [\n  identifier\n], (row) => {\n  if (!row) return;\n\n  console.log(row.firstname, row.lastname)\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Balance to Account in Lua\nDESCRIPTION: Adds funds to an account with an optional message for record-keeping. Requires an amount parameter and returns a success status with relevant error messages if the operation fails.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxAccount.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\naccount.addBalance(data)\n```\n\nLANGUAGE: lua\nCODE:\n```\naccount.addBalance({ amount = 1000, message = 'Paycheck' })\n```\n\n----------------------------------------\n\nTITLE: Example of Setting Menu Option by Index in TypeScript\nDESCRIPTION: Shows how to replace the third menu option of a specified menu in TypeScript.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/menu.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.setMenuOptions('some_menu_id', { label: 'New option', icon: 'plus' }, 3);\n```\n\n----------------------------------------\n\nTITLE: Getting Item Slots and Counts in Lua\nDESCRIPTION: Returns the number of slots the specified item is in, the item's total count and the remaining empty slots.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_26\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetItemSlots(inv, item, metadata)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Player Groups in Lua\nDESCRIPTION: Returns an object containing all groups the player belongs to with their corresponding grades.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Client/OxPlayer.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nplayer.getGroups()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vehicle by VIN in Lua\nDESCRIPTION: Gets an OxVehicle from its VIN. Returns an OxVehicle object.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nOx.GetVehicleFromVin(vin)\n```\n\n----------------------------------------\n\nTITLE: Getting Vehicle State with OxVehicle.getState\nDESCRIPTION: Returns the vehicle's statebag interface, which provides access to synchronized state variables across the network.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxVehicle.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nvehicle.getState()\n```\n\n----------------------------------------\n\nTITLE: Getting Nearby Objects in Lua\nDESCRIPTION: Function to retrieve object handles and coordinates for all objects within a specified range from a given position. Takes vector3 coordinates and an optional maximum distance parameter (defaults to 2.0) as inputs. Returns an array of objects containing handle numbers and vector3 coordinates.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/GetNearbyObjects/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.getNearbyObjects(coords, maxDistance)\n```\n\n----------------------------------------\n\nTITLE: progressCircle Usage Example in Lua\nDESCRIPTION: Complete example of using progressCircle to show a 'Drinking water' animation with the indicator at the bottom position.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/progress.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nif lib.progressCircle({\n    duration = 2000,\n    position = 'bottom',\n    useWhileDead = false,\n    canCancel = true,\n    disable = {\n        car = true,\n    },\n    anim = {\n        dict = 'mp_player_intdrink',\n        clip = 'loop_bottle'\n    },\n    prop = {\n        model = `prop_ld_flow_bottle`,\n        pos = vec3(0.03, 0.03, 0.02),\n        rot = vec3(0.0, 0.0, -1.5)\n    },\n}) then print('Do stuff when complete') else print('Do stuff when cancelled') end\n```\n\n----------------------------------------\n\nTITLE: Creating Base Item Definition in Lua\nDESCRIPTION: Defines a base pokemon card item with basic properties including label, weight, and server export configuration.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Guides/metadata.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n['pokemon_card'] = {\n    label = 'Pokemon card',\n    weight = 10,\n    consume = 0,\n    server = {\n        export = 'pokemon.pokemon_card'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Styled Notification Example in JavaScript\nDESCRIPTION: Example of a highly customized notification in JavaScript with custom identifier, position, styling, icon, and colors. Demonstrates advanced customization options.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/notify.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.notify({\n  id: 'some_identifier',\n  title: 'Notification title',\n  description: 'Notification description',\n  showDuration: false,\n  position: 'top',\n  style: {\n    backgroundColor: '#141517',\n    color: '#C1C2C5',\n    '.decription': {\n      color: '#909296',\n    },\n  },\n  icon: 'ban',\n  iconColor: '#C53030',\n});\n```\n\n----------------------------------------\n\nTITLE: Adding ACE Permissions in Lua/TypeScript\nDESCRIPTION: Assigns an ace permission to a principal. The allow parameter defaults to true for granting permissions, while false denies them.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/ACL/Server.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.addAce(principal, ace, allow)\n\nlib.addAce('group.admin', 'command.say')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/server'\n\nlib.addAce(principal, ace, allow)\n\nlib.addAce('group.admin', 'command.say')\n```\n\n----------------------------------------\n\nTITLE: Zone Creation ox_target Format in Lua\nDESCRIPTION: Example of creating a polygon zone using the ox_target format.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Zones/Shared.mdx#2025-04-16_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:addPolyZone({\n    name = poly,\n    points = {\n        vec(447.9, -998.8, 25.8),\n        vec(450.3, -998.2, 25.8),\n        vec(449.9, -995.5, 25.8),\n        vec(447.2, -995.6, 25.8),\n        vec(446.3, -997.9, 25.8),\n    },\n    thickness = 2,\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Reference to the Closest Door in ox_doorlock (Lua)\nDESCRIPTION: Returns a reference to the closest door as a numeric identifier. This function can be used to get information about a door before attempting to interact with it.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_doorlock/Client/functions.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_doorlock:getClosestDoor()\n```\n\n----------------------------------------\n\nTITLE: Implementing lib.waitFor Function Definition in Lua\nDESCRIPTION: Function signature and parameter declaration for lib.waitFor, which takes a callback function, optional error message, and optional timeout duration.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/WaitFor/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.waitFor(cb, errMessage, timeout)\n```\n\n----------------------------------------\n\nTITLE: Saving Vehicle Data with OxVehicle.save\nDESCRIPTION: Saves the vehicle to the database, including all its current properties and metadata. Returns a number, likely representing the database ID or operation result.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxVehicle.mdx#2025-04-16_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nvehicle.save()\n```\n\n----------------------------------------\n\nTITLE: Using Alert Dialog Function in Lua\nDESCRIPTION: Implementation of the lib.alertDialog function in Lua for client-side, which displays a simple alert dialog to the player and returns their response.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/alert.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.alertDialog(data)\n```\n\n----------------------------------------\n\nTITLE: Implementing Metadata Hook System\nDESCRIPTION: Sets up a hook system for creating items with predefined metadata templates for different Pokemon cards.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Guides/metadata.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal pokemonMetadata = {\n    charizard = {\n        label = 'Charizard',\n        description = 'It is said that Charizard's fire burns hotter if it has experienced harsh battles.',\n        image = 'panties',\n        type = 'Fire',\n        hp = 78,\n        attack = 84,\n        defense = 78\n    }\n}\n\nlocal hookId = exports.ox_inventory:registerHook('createItem', function(payload)\n    local pokemon = pokemonMetadata[payload.metadata.type]\n    if not pokemon then return end\n    return pokemon\nend, {\n    itemFilter = {\n        pokemon_card = true\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Radial Menu Items in TypeScript\nDESCRIPTION: TypeScript implementation for removing items from the global radial menu by ID.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/radial.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.removeRadialItem(item);\n```\n\n----------------------------------------\n\nTITLE: Creating Item Name Dictionary Example in Lua\nDESCRIPTION: Example of creating a dictionary of item names and labels from all registered items, useful for integration with crafting resources.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal itemNames = {}\n\nfor item, data in pairs(exports.ox_inventory:Items()) do\n    itemNames[item] = data.label\nend\n```\n\n----------------------------------------\n\nTITLE: Removing Group Permission in Lua\nDESCRIPTION: Removes a permission from a specified group and minimum grade.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nOx.RemoveGroupPermission(groupName, grade, permission)\n```\n\n----------------------------------------\n\nTITLE: progressCircle Usage Example in TypeScript\nDESCRIPTION: TypeScript version of the drinking water example with progressCircle, showing async/await usage and proper promise handling.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/progress.mdx#2025-04-16_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport lib from '@overextended/ox_lib/client'\n\nif (await lib.progressCircle({\n  duration: 2000,\n  position: 'bottom',\n  useWhileDead: false,\n  canCancel: true,\n  disable: {\n    car: true,\n  },\n  anim: {\n    dict: 'mp_player_intdrink',\n    clip: 'loop_bottle'\n  },\n  prop: {\n    model: `prop_ld_flow_bottle`,\n    pos: {x: 0.03, y: 0.03, z: 0.02},\n    rot: {x: 0.0, y: 0.0, z: -1.5}\n  },\n})) console.log('Do stuff when complete')\nelse console.log('Do stuff when cancelled')\n```\n\n----------------------------------------\n\nTITLE: MySQL Update with Promise - JavaScript Implementation\nDESCRIPTION: Executes an UPDATE query using async/await pattern in JavaScript. Returns the number of affected rows from the update operation. Uses parameterized queries with array parameters.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/update.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst affectedRows = await MySQL.update('UPDATE users SET firstname = ? WHERE identifier = ?', [\n  newName, identifier\n])\n\nconsole.log(affectedRows)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Drop in Lua\nDESCRIPTION: Drops can be created from other resources, containing a variety of items and utilising a custom label (instead of 'Drop 32648').\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_45\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:CustomDrop(prefix, items, coords, slots, maxWeight, instance, model)\n```\n\nLANGUAGE: lua\nCODE:\n```\n-- Create a generic drop with a marker\nexports.ox_inventory:CustomDrop('Carcass', {\n    {'meat', 5, { grade = 2, type = 'deer' }},\n    {'hide', 5, { grade = 2, type = 'deer' }}\n}, coords)\n\n-- Create a drop with an entity\nexports.ox_inventory:CustomDrop('SMG', {\n    { 'WEAPON_MINISMG', 1 },\n    { 'ammo-9', 69 },\n}, GetEntityCoords(GetPlayerPed(1)), 5, 10000, nil, `w_sb_minismg`)\n```\n\n----------------------------------------\n\nTITLE: Performing Raycast from Camera in Lua\nDESCRIPTION: This function starts a shapetest from the camera, extending to a specified distance (default 10m). It returns information about the hit entity, end coordinates, surface normal, and material hash.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Raycast/Client.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlib.raycast.fromCamera(flags, ignore, distance)\n```\n\n----------------------------------------\n\nTITLE: Checking if Item Swap is Possible in Lua\nDESCRIPTION: Returns true if the item swap is possible based on inventory weight.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:CanSwapItem(inv, firstItem, firstItemCount, testItem, testItemCount)\n```\n\n----------------------------------------\n\nTITLE: Getting All Player Items in Lua\nDESCRIPTION: Returns all items in the player's inventory as a table.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_26\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetPlayerItems()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Player by Filter in Lua\nDESCRIPTION: Gets the first OxPlayer matching a filter. Filter can compare player fields and metadata against given key-value pairs.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nOx.GetPlayerFromFilter(filter)\n```\n\n----------------------------------------\n\nTITLE: Basic TextUI Usage Example in Lua and TypeScript\nDESCRIPTION: Simple example showing how to display a basic TextUI message for vehicle fueling.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/textui.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlib.showTextUI('[E] - Fuel vehicle')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.showTextUI('[E] - Fuel vehicle');\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Burger Item in Lua\nDESCRIPTION: Defines a basic burger item with properties like weight, stack, and usage animations.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Guides/creatingItems.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n['burger'] = {\n    label = 'Burger',\n    weight = 220,\n    stack = true,\n    close = true,\n    client = {\n        status = { hunger = 200000 },\n        anim = { dict = 'mp_player_inteat@burger', clip = 'mp_player_int_eat_burger_fp' },\n        prop = {\n            model = 'prop_cs_burger_01',\n            pos = { x = 0.02, y = 0.02, y = -0.02},\n            rot = { x = 0.0, y = 0.0, y = 0.0}\n        },\n        usetime = 2500,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Invoice on an Account in Lua\nDESCRIPTION: Creates an unpaid invoice on a target account with specified amount, message, and due date. Optional actorId parameter identifies the invoice creator.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxAccount.mdx#2025-04-16_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\naccount.createInvoice(invoice)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Promise in JavaScript\nDESCRIPTION: Shows how to insert a new entry into the 'users' table using a Promise-based approach in JavaScript. It returns the insert id for the new row.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/insert.mdx#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst id = await MySQL.insert('INSERT INTO `users` (identifier, firstname, lastname) VALUES (?, ?, ?)', [\n  identifier, firstName, lastName\n])\n\nconsole.log(id)\n```\n\n----------------------------------------\n\nTITLE: Closing Input Dialog in Lua and JavaScript\nDESCRIPTION: Shows how to forcefully close an active input dialog using the lib.closeInputDialog function in both Lua and JavaScript.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/input.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlib.closeInputDialog()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.closeInputDialog();\n```\n\n----------------------------------------\n\nTITLE: Finding a Slot with Specific Item in Lua\nDESCRIPTION: Returns the first slot ID in the player's inventory containing a specific item with optional metadata filtering.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_29\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetSlotIdWithItem(itemName, metadata, strict)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Slot Data in Lua\nDESCRIPTION: Returns the specified slot data as a table.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_27\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetSlot(inv, slot)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal slot = exports.ox_inventory:GetSlot(source, 1)\n\nprint(json.encode(slot, {indent=true}))\n--[[\n    {\n        \"weight\": 2000,\n        \"name\": \"water\",\n        \"metadata\": [],\n        \"slot\": 1,\n        \"label\": \"Water\",\n        \"close\": true,\n        \"stack\": true,\n        \"count: 4\n    }\n]]\n```\n\n----------------------------------------\n\nTITLE: progressBar Usage Example in TypeScript\nDESCRIPTION: TypeScript version of the drinking water example showing async/await usage with the progressBar function. Handles the promise resolution for both completion and cancellation.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/progress.mdx#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport lib from '@overextended/ox_lib/client'\n\nif (await lib.progressBar({\n  duration: 2000,\n  label: 'Drinking water',\n  useWhileDead: false,\n  canCancel: true,\n  disable: {\n    car: true,\n  },\n  anim: {\n    dict: 'mp_player_intdrink',\n    clip: 'loop_bottle'\n  },\n  prop: {\n    model: `prop_ld_flow_bottle`,\n    pos: {x: 0.03, y: 0.03, z: 0.02},\n    rot: {x: 0.0, y: 0.0, z: -1.5}\n  },\n})) console.log('Do stuff when complete');\nelse console.log('Do stuff when cancelled')\n```\n\n----------------------------------------\n\nTITLE: Using Promise-based MySQL Transactions\nDESCRIPTION: Examples of executing MySQL transactions using Promise pattern in both Lua and JavaScript, demonstrating await syntax.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/transaction.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal success = MySQL.transaction.await(queries, values --[[leave nil for specific format]])\nprint(success)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst success = await MySQL.transaction(queries, values /*leave nil for specific format*/)\nconsole.log(success)\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Callback for Bandage Item in Lua\nDESCRIPTION: Defines a client-side callback function for a bandage item, including health checks and usage logic.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Guides/creatingItems.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nexports('bandage', function(data, slot)\n    local playerPed = PlayerPedId()\n    local maxHealth = GetEntityMaxHealth(playerPed)\n    local health = GetEntityHealth(playerPed)\n\n    if health < maxHealth then\n        exports.ox_inventory:useItem(data, function(data)\n            if data then\n                SetEntityHealth(playerPed, math.min(maxHealth, math.floor(health + maxHealth / 16)))\n                lib.notify({description = 'You feel better already'})\n            end\n        end)\n    else\n        lib.notify({type = 'error', description = 'You don\\'t need a bandage right now'})\n    end\nend)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Character in Lua\nDESCRIPTION: Deletes a character with the given charId if owned by the player and they haven't selected a character yet.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nplayer.deleteCharacter(charId)\n```\n\n----------------------------------------\n\nTITLE: Triggering Alert Dialog from Server in Lua\nDESCRIPTION: Implementation of triggering an alert dialog from the server side in Lua, which sends an event to the client to display the dialog.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/alert.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nTriggerClientEvent('ox_lib:alertDialog', source, data)\n```\n\n----------------------------------------\n\nTITLE: Querying Single Row with Promise in JavaScript\nDESCRIPTION: Executes a MySQL query to fetch a single row using promises in JavaScript. The example demonstrates selecting firstname and lastname from users table with an identifier filter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/single.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst row = await MySQL.single('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ? LIMIT 1', [\n  identifier\n])\n\nif (!row) return;\n\nconsole.log(row.firstname, row.lastname)\n```\n\n----------------------------------------\n\nTITLE: Example of Checking Item Carry Capacity in Lua\nDESCRIPTION: Demonstrates checking if a player can carry 3 water items.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nif exports.ox_inventory:CanCarryItem(source, 'water', 3) then\n    -- Do stuff if can carry\nelse\n    -- Do stuff if can't carry\nend\n```\n\n----------------------------------------\n\nTITLE: Caching Function Results in Lua\nDESCRIPTION: This snippet demonstrates how to use the cache function to store and retrieve cached values. It takes a key, a function to generate the value, and an optional timeout. The example shows caching a counter value that updates every 5 seconds.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Cache/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal i = 0\n\nwhile true do\n    Wait(1000)\n    i += 1\n\n    print(cache('test', function() return i end, 5000))\nend\n\n-- output:\n> 1\n> 1\n> 1\n> 1\n> 1\n> 6\n> 6\n> 6\n```\n\n----------------------------------------\n\nTITLE: Checking Carryable Weight in Lua\nDESCRIPTION: Returns if inventory can carry specified weight and free inventory weight.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:CanCarryWeight(inv, weight)\n```\n\n----------------------------------------\n\nTITLE: Removing Registered Hooks in Ox Inventory\nDESCRIPTION: Function to remove hooks created by the calling resource. It can remove a specific hook by ID or all hooks registered by the resource if no ID is provided.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server/Hooks.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:removeHooks(id)\n```\n\n----------------------------------------\n\nTITLE: Triggering Synchronous Client Callback with lib.callback.await in Lua\nDESCRIPTION: This function provides a synchronous approach to client callbacks, yielding the current coroutine until a response is received. It takes a callback name, player ID, and any additional arguments to pass to the client callback.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Callback/Lua/Server.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlib.callback.await(name, playerId, ...)\n```\n\n----------------------------------------\n\nTITLE: Setting Stash Target Example in Lua\nDESCRIPTION: Example of setting a specific motel stash as the target for the secondary inventory key with an owner specified.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:setStashTarget('motel5', 'bobsmith')\n```\n\n----------------------------------------\n\nTITLE: Finding Slot for Item in Lua\nDESCRIPTION: Get the slot id of an existing item matching the given data, or an empty slot.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_28\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetSlotForItem(inv, itemName, metadata)\n```\n\n----------------------------------------\n\nTITLE: Removing Model-Specific Options in Lua\nDESCRIPTION: Removes options from the models list with the specified option names. Accepts models and option names as arguments.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:removeModel(models, optionNames)\n```\n\n----------------------------------------\n\nTITLE: Configuring Shop Inventory with Metadata\nDESCRIPTION: Defines shop inventory entry for a pokemon card with detailed metadata including stats and description.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Guides/metadata.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\ninventory = {\n    {name = 'pokemon_card', price = 300, metadata = {\n        label = 'Charizard',\n        description = 'It is said that Charizard's fire burns hotter if it has experienced harsh battles.',\n        image = 'panties',\n        type = 'Fire',\n        hp = 78,\n        attack = 84,\n        defense = 78\n    }}\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Single Metadata Property Example in Lua\nDESCRIPTION: Example of displaying a single metadata property (mustard) with a custom label in item tooltips.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:displayMetadata('mustard', 'Mustard')\n```\n\n----------------------------------------\n\nTITLE: Getting Character's Account Role in Lua\nDESCRIPTION: Retrieves the access role of a character for an account using either character ID or state ID. Returns the role as a string.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxAccount.mdx#2025-04-16_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\naccount.getCharacterRole(id)\n```\n\n----------------------------------------\n\nTITLE: Hiding the Radial Menu in TypeScript\nDESCRIPTION: TypeScript implementation for hiding the currently open radial menu.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/radial.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.hideRadial();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Top Vehicle Statistics with Ox.GetTopVehicleStats in Lua\nDESCRIPTION: Returns an object containing the top vehicle statistics, either overall or for a specific category (land, air, sea). The optional category parameter filters results to a specific vehicle type.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/common.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nOx.GetTopVehicleStats(category?)\n```\n\n----------------------------------------\n\nTITLE: Removing Entry from Grid in Lua\nDESCRIPTION: Removes an entry that was previously added to the grid. It takes a GridEntry object as input, removes it from the grid, and returns a boolean indicating success.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Grid/Shared.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlib.grid.removeEntry(entry)\n```\n\n----------------------------------------\n\nTITLE: Triggering Server Callback Example in TypeScript\nDESCRIPTION: Example of triggering a server callback after a timeout, passing arguments and handling the response. It demonstrates the use of async/await and type assertion for the response.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Callback/JavaScript/Client.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsetTimeout(async () => {\n  const args = [1, null, 3, null, null, 6];\n  const response = await triggerServerCallback<{ serverValue: number }>('test:server', 1, args);\n  if (!response) return;\n  console.log('Response from server', response);\n}, 100);\n```\n\n----------------------------------------\n\nTITLE: Checking Player's Account Permissions in Lua\nDESCRIPTION: Determines if a player's active character has a specific permission for an account. Returns a boolean indicating whether permission is granted.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxAccount.mdx#2025-04-16_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\naccount.playerHasPermission(playerId, permission)\n```\n\n----------------------------------------\n\nTITLE: Example of Permission Checking in Lua\nDESCRIPTION: Demonstrates how to add a permission to a group and check if a player has that permission.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\n-- Adding a permission to a group\nOx.SetGroupPermission('police', 1, 'handcuff', 'allow')\n\n-- Checking if a player has the 'handcuff' permission\nif player.hasPermission('group.police.handcuff') then\n    -- Do something\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Global Object Options in Lua\nDESCRIPTION: Creates new targetable options for all Object entity types. Requires a table with targeting properties as an argument.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:addGlobalObject(options)\n```\n\n----------------------------------------\n\nTITLE: Initializing Input Dialog in Lua and JavaScript\nDESCRIPTION: Demonstrates how to call the lib.inputDialog function in both Lua and JavaScript. The function takes a heading, rows, and optional parameters to create an input dialog.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/input.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.inputDialog(heading, rows, options)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.inputDialog(heading, rows, options);\n```\n\n----------------------------------------\n\nTITLE: Getting Player License in Lua\nDESCRIPTION: Returns an object containing information for the specified license including issue date and suspension details.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nplayer.getLicense(licenseName: string): object\n```\n\n----------------------------------------\n\nTITLE: Recommended Server Usage\nDESCRIPTION: Example of triggering vehicle property updates from the server side.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/VehicleProperties/Client.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nTriggerClientEvent('ox_lib:setVehicleProperties', entityOwner, vehNetId, data)\n```\n\n----------------------------------------\n\nTITLE: Creating Polygon Zone in Lua\nDESCRIPTION: Creates a polygon zone with specified points and properties. Accepts parameters for points array, thickness, and callback functions.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Zones/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.zones.poly(data)\n```\n\n----------------------------------------\n\nTITLE: Getting Cell Entries in Lua\nDESCRIPTION: Returns all entries in the cell that belongs to the given point. It takes a vector point as input and returns an array of GridEntry objects.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Grid/Shared.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlib.grid.getCell(point)\n```\n\n----------------------------------------\n\nTITLE: Status Tick Event Handler - Lua\nDESCRIPTION: Event handler triggered on each status tick, providing a record of changed status values.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Events/client.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction(statuses: Record<string, number>)\n```\n\n----------------------------------------\n\nTITLE: Removing Zone in Lua\nDESCRIPTION: Removes a targetable zone with the given id or name. Accepts a number id or string name as an argument.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:removeZone(id)\n```\n\n----------------------------------------\n\nTITLE: Defining Point Class Structure in TypeScript\nDESCRIPTION: Defines the structure of the Point class with its parameters including coordinates, distance, and callback functions.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Points/JavaScript/Client.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nPoint<T>({coords, distance, onEnter, onExit, nearby, args})\n```\n\n----------------------------------------\n\nTITLE: Saving Player Data in Lua\nDESCRIPTION: Saves the active character to the database. Essential for persisting player progress.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nplayer.save()\n```\n\n----------------------------------------\n\nTITLE: Triggering Server Callback in TypeScript\nDESCRIPTION: Function to trigger a server callback with optional delay and arguments. It takes an event name, delay time, and variable arguments.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Callback/JavaScript/Client.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntriggerServerCallback(eventName, delay, ...args)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group Permissions with Ox.GetGroupPermissions in Lua\nDESCRIPTION: Returns the OxGroupPermissions object for a specified group. This function takes a group name as a string parameter and returns the corresponding permissions object.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/common.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nOx.GetGroupPermissions(groupName)\n```\n\n----------------------------------------\n\nTITLE: Creating Group in Lua\nDESCRIPTION: Creates a new group from the given data, handling all database interactions internally.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nOx.CreateGroup(data)\n```\n\n----------------------------------------\n\nTITLE: Triggering Player Disarm Event in Lua\nDESCRIPTION: Triggers a client event to force a player to disarm their weapon. Includes optional animation skip parameter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Events/Client.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nTriggerClientEvent('ox_inventory:disarm', playerId, noAnim)\n```\n\n----------------------------------------\n\nTITLE: Setting Character's Account Role in Lua\nDESCRIPTION: Sets the access role of a character for an account using either character ID or state ID. Optional role parameter can be omitted to remove all access.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxAccount.mdx#2025-04-16_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\naccount.setCharacterRole(id, role)\n```\n\n----------------------------------------\n\nTITLE: Showing Context Menu in Lua/JS\nDESCRIPTION: Function to display a previously registered context menu by its ID.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/context.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlib.showContext(id)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.showContext(id);\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Metadata Properties Example in Lua\nDESCRIPTION: Example of displaying multiple metadata properties (mustard and ketchup) with custom labels in item tooltips using a table parameter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:displayMetadata({\n    mustard = 'Mustard',\n    ketchup = 'Ketchup'\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Sphere Zone in Lua\nDESCRIPTION: Creates a new targetable sphere zone. Requires parameters including coordinates, radius, and targeting options.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:addSphereZone(parameters)\n```\n\n----------------------------------------\n\nTITLE: Getting Status Value in Lua\nDESCRIPTION: Returns the current value of a specified status for the player.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Client/OxPlayer.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nplayer.getStatus(statusName)\n```\n\n----------------------------------------\n\nTITLE: Ox Inventory ConVars Configuration\nDESCRIPTION: Complete set of server and client configuration options for Ox Inventory using ConVars, including inventory settings, UI options, webhooks, and loot tables.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n### Shared\n\n# Activate specific event handlers and functions (supported: ox, esx, qbx, nd)\nsetr inventory:framework \"esx\"\n\n# Number of slots for player inventories\nsetr inventory:slots 50\n\n# Maximum carry capacity for players, in grams (frameworks may override this)\nsetr inventory:weight 30000\n\n# Number of slots for drop inventories\nsetr inventory:dropslots 50\n\n# Maximum drop capacity, in grams\nsetr inventory:dropweight 30000\n\n# Integrated support for qtarget/ox_target stashes, shops, etc\n# Note: qtarget is deprecated, a future update may drop support (ox_target only, or gated features)\nsetr inventory:target false\n\n# Jobs with access to police armoury, evidence lockers, etc\nsetr inventory:police [\"police\", \"sheriff\"]\n\n# Set dumpsters as networked entities. Not recommended due to CNetObj limits and entity lockdown.\nsetr inventory:networkdumpsters 0\n\n### Client\n\n# The URL to load item images from\nsetr inventory:imagepath \"nui://ox_inventory/web/images\"\n\n# Weapons will reload after reaching 0 ammo\nsetr inventory:autoreload false\n\n# Blur the screen while accessing the inventory\nsetr inventory:screenblur true\n\n# Default hotkeys to access primary and secondary inventories, and hotbar\nsetr inventory:keys [\"F2\", \"K\", \"TAB\"]\n\n# Enable control action when inventory is open\nsetr inventory:enablekeys [249]\n\n# Weapons must be aimed before shooting\nsetr inventory:aimedfiring false\n\n# Show a list of all nearby players when giving items\nsetr inventory:giveplayerlist false\n\n# Toggle weapon draw/holster animations\nsetr inventory:weaponanims true\n\n# Toggle item notifications (add/remove)\nsetr inventory:itemnotify true\n\n# Toggle weapon item notifications (equip/holster)\nsetr inventory:weaponnotify true\n\n# Disable drop markers and spawn a prop instead\nsetr inventory:dropprops true\n\n# Set the default model used for drop props\nsetr inventory:dropmodel \"prop_med_bag_01b\"\n\n# Disarm the player if an unexpected weapon is in use (i.e. did not use the weapon item)\nsetr inventory:weaponmismatch true\n\n# Ignore weapon mismatch checks for the given weapon type (e.g. ['WEAPON_SHOVEL', 'WEAPON_HANDCUFFS'])\nsetr inventory:ignoreweapons []\n\n# Suppress weapon and ammo pickups\nsetr inventory:suppresspickups 1\n\n# Disables weapons for all players \nsetr inventory:disableweapons 0\n\n### Server\n\n# Compare current version to latest release on GitHub\nset inventory:versioncheck true\n\n# Stashes will be wiped after remaining unchanged for the given time\nset inventory:clearstashes \"6 MONTH\"\n\n# Stashes will be saved in groups and not individually per query\nset inventory:bulkstashsave 1\n\n# Discord webhook url, used for imageurl metadata content moderation (image embeds)\nset inventory:webhook \"\"\n\n# Logging via ox_lib (0: Disable, 1: Standard, 2: Include AddItem/RemoveItem, and all shop purchases)\nset inventory:loglevel 1\n\n# Item prices fluctuate in shops\nset inventory:randomprices true\n\n# Loot will randomly generate inside unowned vehicles and dumpsters\nset inventory:randomloot true\n\n# Minimum job grade to remove items from evidence lockers\nset inventory:evidencegrade 2\n\n# Trim whitespace from vehicle plates when checking owned vehicles\nsetr inventory:trimplate true\n\n# Set the contents of randomly generated inventories\n# [item name, minimum, maximum, loot chance]\nset inventory:vehicleloot [\n    [\"cola\", 1, 1],\n    [\"water\", 1, 1],\n    [\"garbage\", 1, 2, 50],\n    [\"panties\", 1, 1, 5],\n    [\"money\", 1, 50],\n    [\"money\", 200, 400, 5],\n    [\"bandage\", 1, 1]\n]\n\nset inventory:dumpsterloot [\n    [\"mustard\", 1, 1],\n    [\"garbage\", 1, 3],\n    [\"money\", 1, 10],\n    [\"burger\", 1, 1]\n]\n\n# Set the markers for the various drops, stashes, shops\n# These all follow the same strucutre, if the json strings are invalid it will fallback to a generic marker\nsetr inventory:dropmarker {\n    \"type\": 2,\n    \"colour\": [150, 30, 30],\n    \"scale\": [0.3, 0.2, 0.15]\n}\n\nsetr inventory:shopmarker {\n    \"type\": 29,\n    \"colour\": [30, 150, 30],\n    \"scale\": [0.5, 0.5, 0.5]\n}\n\nsetr inventory:evidencemarker {\n    \"type\": 2,\n    \"colour\": [30, 30, 150],\n    \"scale\": [0.3, 0.2, 0.15]\n}\n\nsetr inventory:craftingmarker {\n    \"type\": 2,\n    \"colour\": [150, 150, 30],\n    \"scale\": [0.3, 0.2, 0.15]\n}\n\n# Set items to sync with framework accounts\nset inventory:accounts [\"money\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Group Permission in Lua\nDESCRIPTION: Assigns a permission to a specified group and minimum grade, which will be inherited by higher grades.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nOx.SetGroupPermission(groupName, grade, permission, value)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Promise in Lua\nDESCRIPTION: Demonstrates how to insert a new entry into the 'users' table using a Promise-based approach in Lua. It returns the insert id for the new row.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/insert.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal id = MySQL.insert.await('INSERT INTO `users` (identifier, firstname, lastname) VALUES (?, ?, ?)', {\n    identifier, firstName, lastName\n})\n\nprint(id)\n```\n\n----------------------------------------\n\nTITLE: Removing Item from Inventory in Lua\nDESCRIPTION: Removes the specified item from the specified inventory.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:RemoveItem(inv, item, count, metadata, slot, ignoreTotal)\n```\n\n----------------------------------------\n\nTITLE: Registering Client Callback in TypeScript\nDESCRIPTION: Function to register a client callback for a specific event. It takes an event name and a callback function as parameters.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Callback/JavaScript/Client.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonServerCallback(eventName, cb)\n```\n\n----------------------------------------\n\nTITLE: Implementing Point System with Callbacks in TypeScript\nDESCRIPTION: Demonstrates how to use the Point class to create a point with coordinates, distance checking, and various callback functions for entering, exiting, and being near the point.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Points/JavaScript/Client.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Point, cache } from '@overextended/ox_lib/client'\n\nfunction nearby(this: Point<{dunak: string}>) {\n  // @ts-ignore\n  DrawMarker(2, this.coords.x, this.coords.y, this.coords.z, 0, 0, 0, 0, 180, 0, 1, 1, 1, 200, 20, 20, 50, false, true, 2, false, null, null, false)\n\n  if (this.currentDistance && this.currentDistance < 1 && IsControlJustReleased(0, 38)) {\n    console.log('Inside marker', this.id)\n    console.log(this.args?.dunak)\n  }\n}\n\nconst point = new Point({\n  coords: GetEntityCoords(cache.ped, false),\n  distance: 5,\n  nearby: nearby,\n  args: {\n    dunak: 'nerd'\n  }\n})\n\npoint.onEnter = () => {\n  console.log('Entered range of point', point.id)\n}\n\npoint.onExit = () => {\n  console.log('Left range of point', point.id)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Input Dialog Usage Example in JavaScript\nDESCRIPTION: Shows a basic implementation of the input dialog in JavaScript, creating a dialog with two input rows and handling the returned data asynchronously.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/input.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst input = await lib.inputDialog('Basic dialog', ['First row', 'Second row']);\n\nif (!input) return;\nconsole.log(input, input[0], input[1]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group by Name in Lua\nDESCRIPTION: Gets an OxGroup from its name. Returns an OxGroup object.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nOx.GetGroup(name)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Players in Lua\nDESCRIPTION: Gets an array containing OxPlayer for all players matching a filter, if given. Filter can compare player fields and metadata.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nOx.GetPlayers(filter)\n```\n\n----------------------------------------\n\nTITLE: Setting Vehicle Fuel Amount in Lua\nDESCRIPTION: Sets the fuel amount for a vehicle entity's state. Requires a valid vehicle entity ID and a fuel amount value to be passed in. This updates the 'fuel' property in the vehicle's state bag.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_fuel/Shared.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nEntity(vehicleId).state.fuel = fuelAmount\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account by ID in Lua\nDESCRIPTION: Gets the OxAccount with the given accountId. Returns an OxAccount object.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nOx.GetAccount(accountId)\n```\n\n----------------------------------------\n\nTITLE: Executing Scalar Query with Promise in JavaScript\nDESCRIPTION: Shows how to perform a scalar query using a promise-based approach in JavaScript. It retrieves the first name from the users table using an identifier.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/scalar.mdx#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst firstName = await MySQL.scalar('SELECT `firstname` FROM `users` WHERE `identifier` = ? LIMIT 1', [\n  identifier\n])\n\nconsole.log(firstName)\n```\n\n----------------------------------------\n\nTITLE: Querying Single Row with Callback in Lua\nDESCRIPTION: Executes a MySQL query to fetch a single row using a callback function in Lua. The example demonstrates selecting firstname and lastname from users table with an identifier filter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/single.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nMySQL.single('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ? LIMIT 1', {\n    identifier\n}, function(row)\n    if not row then return end\n\n    print(row.firstname, row.lastname)\nend)\n```\n\n----------------------------------------\n\nTITLE: Handling Inventory Updates Event in Lua\nDESCRIPTION: Event handler for inventory slot updates. Receives a table of changes indexed by slot ID where empty slots are marked as false.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Events/Client.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nAddEventHandler('ox_inventory:updateInventory', function(changes) end)\n```\n\n----------------------------------------\n\nTITLE: Module Import Example in Lua\nDESCRIPTION: Demonstrates a complete example of module importing in Lua, including the structure of the resource directories and the content of import.lua, events.lua, and server.lua files.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Require/Shared.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal mylib = {\n  events = require 'data.events'\n}\n\nprint('Loaded mylib')\n\nreturn mylib\n```\n\nLANGUAGE: lua\nCODE:\n```\nreturn {\n  disconnect = 'onPlayerDropped',\n}\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal mylib = require '@mylib.import'\nprint(mylib.events.disconnect)\n```\n\n----------------------------------------\n\nTITLE: Getting Remaining Timer Time in Lua\nDESCRIPTION: Demonstrates retrieving remaining timer duration in various time formats.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Timer/Shared.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal timer = lib.timer(5000, function()\n    print(\"timer ended\")\nend, true)\n\nprint(timer:getTimeLeft('ms')) -- 5000 miliseconds\nprint(timer:getTimeLeft('s'))  -- 5.00 seconds\nprint(timer:getTimeLeft('m'))  -- 0.08 minutes\nprint(timer:getTimeLeft('h'))  -- 0.00 hours\nprint(timer:getTimeLeft())     -- {ms = 5000, s = 5.00, m = 0.08, h = 0.00 }\n```\n\n----------------------------------------\n\nTITLE: Getting Player Account in Lua\nDESCRIPTION: Returns the player's default OxAccount object for handling financial transactions.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nplayer.getAccount()\n```\n\n----------------------------------------\n\nTITLE: Deleting a Vehicle with OxVehicle.delete\nDESCRIPTION: Despawns the vehicle and removes it from the database. This operation is permanent and cannot be undone.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxVehicle.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nvehicle.delete()\n```\n\n----------------------------------------\n\nTITLE: Server Callback Implementation Example\nDESCRIPTION: Example of implementing a server callback handler with typed arguments and return value.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Callback/JavaScript/Server.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonClientCallback('test:server', (playerId, ...args: [number, null, number, null, null, number]) => {\n  console.log('onClientCallback', playerId, ...args);\n  return {\n    serverValue: 3000,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Executing MySQL Query with Promise\nDESCRIPTION: Demonstrates how to execute a MySQL query using Promise-based syntax to select user data. The query returns firstname and lastname fields filtered by identifier. Includes error handling and result processing.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/query.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal response = MySQL.query.await('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', {\n    identifier\n})\n\nif response then\n    for i = 1, #response do\n        local row = response[i]\n        print(row.firstname, row.lastname)\n    end\nend\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await MySQL.query('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', [\n  identifier\n])\n\nif (response) {\n  response.forEach((row) => {\n    console.log(row.identifier, row.firstname, row.lastname)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Saving All Vehicles in Lua\nDESCRIPTION: Saves all vehicles to the database.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\nOx.SaveAllVehicles()\n```\n\n----------------------------------------\n\nTITLE: Standard Notification Example in JavaScript\nDESCRIPTION: Example of a standard notification with title, description, and type parameters in JavaScript. This creates a success notification with basic formatting.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/notify.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.notify({\n  title: 'Notification title',\n  description: 'Notification description',\n  type: 'success',\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Vehicle Fuel Amount in Lua\nDESCRIPTION: Retrieves the current fuel amount from a vehicle entity's state. This requires a valid vehicle entity ID as input and returns the current fuel value stored in the state bag.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_fuel/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal fuel = Entity(vehicleId).state.fuel\n```\n\n----------------------------------------\n\nTITLE: Editing Door Configuration in Lua\nDESCRIPTION: Edits the configuration for a door with the specified doorId. The data parameter should be a table containing the configuration properties to be updated.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_doorlock/Server/functions.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_doorlock:editDoor(doorId, data)\n```\n\n----------------------------------------\n\nTITLE: Using lib.logger Function in Lua\nDESCRIPTION: Demonstrates the usage of the lib.logger function for logging events in Lua. It shows how to log the creation of a vehicle with various parameters.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Logger/Server.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.logger(source, event, message, ...)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal vehicle = Ox.CreateVehicle(false, `sultanrs`, vector4(-56.479122, -1116.870362, 26.432250, 0.000030517578))\nlib.logger(-1, 'CreateVehicle', json.encode(vehicle))\n```\n\n----------------------------------------\n\nTITLE: Creating a New Cronjob in Lua\nDESCRIPTION: The lib.cron.new function creates a new cronjob that schedules a task to run at fixed times or intervals based on a cron expression. It returns an OxTask object that can be used to manage the scheduled task.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Cron/Server.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.cron.new(expression, job, options)\n```\n\n----------------------------------------\n\nTITLE: Comparing Tables in Lua\nDESCRIPTION: Compares two tables for equality, iterating over their contents and matching both keys and values.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Table/Shared.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlib.table.matches(tableOne, tableTwo)\n```\n\n----------------------------------------\n\nTITLE: Array Merge - Lua\nDESCRIPTION: Combines multiple arrays into a new array.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.merge(...)\n```\n\n----------------------------------------\n\nTITLE: Returning Confiscated Inventory in Lua\nDESCRIPTION: Returns the confiscated inventory back to the player.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_40\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:ReturnInventory(source)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Points in Lua\nDESCRIPTION: Demonstrates the function to get all points created in the resource. It returns an array of CPoint objects.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Points/Lua/Client.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlib.points.getAllPoints()\n```\n\n----------------------------------------\n\nTITLE: Setting Vehicle Properties with OxVehicle.setProperties\nDESCRIPTION: Saves the properties (mods, extras, etc.) stored on the vehicle and optionally applies them to the entity if the apply parameter is true.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxVehicle.mdx#2025-04-16_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nvehicle.setProperties(properties, apply)\n```\n\n----------------------------------------\n\nTITLE: Example of Using lib.callback.await to Get Nearby Vehicles\nDESCRIPTION: This example shows the synchronous approach to retrieving vehicle information from a client. It awaits the response from the client before continuing execution, which makes the code more linear and potentially easier to follow.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Callback/Lua/Server.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal vehicles = lib.callback.await('ox:getNearbyVehicles', source, args.radius)\n\nfor i = 1, #vehicles do\n    DeleteEntity(entity)\nend\n```\n\n----------------------------------------\n\nTITLE: Complete Menu Implementation Example in TypeScript\nDESCRIPTION: Full example showing how to register a menu with various option types and event handlers, and a command to display it in TypeScript.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/menu.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.registerMenu(\n  {\n    id: 'some_menu_id',\n    title: 'Menu title',\n    position: 'top-right',\n    onSideScroll: (selected, scrollIndex, args) => {\n      console.log('Scroll: ', selected, scrollIndex, args);\n    },\n    onSelected: (selected, secondary, args) => {\n      if (!secondary) {\n        console.log('Normal button');\n      } else {\n        if (args.isCheck) {\n          console.log('Check button');\n        }\n\n        if (args.isScroll) {\n          console.log('Scroll button');\n        }\n      }\n      console.log(selected, secondary, JSON.stringify(args, null, 2));\n    },\n    onCheck: (selected, checked, args) => {\n      console.log('Check: ', selected, checked, args);\n    },\n    onClose: (keyPressed) => {\n      console.log('Menu closed');\n      if (keyPressed) {\n        console.log(`Pressed ${keyPressed} to close the menu`);\n      }\n    },\n    options: [\n      { label: 'Simple button', description: 'It has a description!' },\n      { label: 'Checkbox button', checked: true },\n      { label: 'Scroll button with icon', icon: 'arrows-up-down-left-right', values: ['hello', 'there'] },\n      { label: 'Button with args', args: { someArg: 'nice_button' } },\n      {\n        label: 'List button',\n        values: ['You', 'can', 'side', 'scroll', 'this'],\n        description: 'It also has a description!',\n      },\n      { label: 'List button with default index', values: ['You', 'can', 'side', 'scroll', 'this'], defaultIndex: 5 },\n      {\n        label: 'List button with args',\n        values: ['You', 'can', 'side', 'scroll', 'this'],\n        args: { someValue: 3, otherValue: 'value' },\n      },\n    ],\n  },\n  (selected, scrollIndex, args) => {\n    console.log(selected, scrollIndex, args);\n  }\n);\n\nRegisterCommand(\n  'testmenu',\n  () => {\n    lib.showMenu('some_menu_id');\n  },\n  false\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Active Character in Lua\nDESCRIPTION: Loads and sets a character as the player's active character. Takes a charId or an object with new character data.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nplayer.setActiveCharacter(data)\n```\n\n----------------------------------------\n\nTITLE: Paying Invoice in Lua\nDESCRIPTION: Pays an account invoice with the given invoiceId and returns an object with the result of the operation.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nplayer.payInvoice(invoiceId)\n```\n\n----------------------------------------\n\nTITLE: Requesting Model in Lua and TypeScript\nDESCRIPTION: Loads a model into memory. Requires calling SetModelAsNoLongerNeeded(model) after use. Accepts a model name or hash and an optional timeout parameter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Streaming/Client.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlib.requestModel(model, timeout)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client'\n\nlib.requestModel(model, timeout)\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Stash in Lua\nDESCRIPTION: Creates a new custom stash.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_43\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:RegisterStash(id, label, slots, maxWeight, owner, groups, coords)\n```\n\n----------------------------------------\n\nTITLE: Creating Drop from Player Inventory in Lua\nDESCRIPTION: Creates a new drop with the contents of a player's inventory.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_46\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:CreateDropFromPlayer(playerId)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal dropId = exports.ox_inventory:CreateDropFromPlayer(1)\n```\n\n----------------------------------------\n\nTITLE: Setting Player Group in Lua\nDESCRIPTION: Sets the player's grade within a group. If grade is undefined or 0, they will be removed from the group.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_25\n\nLANGUAGE: lua\nCODE:\n```\nplayer.setGroup(groupName, grade)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Door Data by Name in Lua\nDESCRIPTION: Gets data for a door with the given name, matching the name in the database entry. Returns a table containing the door's configuration data.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_doorlock/Server/functions.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_doorlock:getDoorFromName(name)\n```\n\n----------------------------------------\n\nTITLE: Creating New Array - Lua\nDESCRIPTION: Constructs a new instance of Array containing the given elements.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.array:new(...)\n```\n\n----------------------------------------\n\nTITLE: Handling Closed Inventory Events in Lua\nDESCRIPTION: Event handler that triggers after a player closes an inventory. It receives the player ID and inventory ID as parameters.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Events/Server.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nAddEventHandler('ox_inventory:closedInventory', function(playerId, inventoryId) end)\n```\n\n----------------------------------------\n\nTITLE: Retrieving License Data in Lua\nDESCRIPTION: Gets license data from its name. Returns an OxLicense object.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_25\n\nLANGUAGE: lua\nCODE:\n```\nOx.GetLicense(name)\n```\n\n----------------------------------------\n\nTITLE: Getting Storage Status with OxVehicle.getStored\nDESCRIPTION: Returns the vehicle's \"stored\" state as a string or nil. This indicates if the vehicle is in a garage, impounded, or otherwise stored.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxVehicle.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nvehicle.getStored()\n```\n\n----------------------------------------\n\nTITLE: Removing Local Entity Options in Lua\nDESCRIPTION: Removes options from the entities list with the specified option names. Accepts entity handles and option names as arguments.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:removeLocalEntity(entities, optionNames)\n```\n\n----------------------------------------\n\nTITLE: Registering a Menu in TypeScript\nDESCRIPTION: Registers and caches a menu under a specified id in TypeScript. Requires importing the lib from ox_lib and accepts menu configuration data and a callback function.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/menu.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.registerMenu(data, cb);\n```\n\n----------------------------------------\n\nTITLE: Removing Principal Hierarchies in Lua/TypeScript\nDESCRIPTION: Removes a principal from its parent principal, breaking the inheritance chain of permissions.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/ACL/Server.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlib.removePrincipal(child, parent)\n\nlib.removePrincipal('player.1', 'group.moderator')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/server'\n\nlib.removePrincipal(child, parent)\n\nlib.removePrincipal('player.1', 'group.moderator')\n```\n\n----------------------------------------\n\nTITLE: Setting Group Ownership with OxVehicle.setGroup\nDESCRIPTION: Sets the vehicle as a group vehicle \"owned\" by the given group name, or removes the group association if groupName is omitted.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxVehicle.mdx#2025-04-16_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nvehicle.setGroup(groupName)\n```\n\n----------------------------------------\n\nTITLE: Requesting Weapon Asset in Lua and TypeScript\nDESCRIPTION: Loads a weapon asset into memory. Requires calling RemoveWeaponAsset(weaponType) after use. Accepts weapon type, timeout, and optional flag parameters for weapon resources and components.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Streaming/Client.mdx#2025-04-16_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlib.requestWeaponAsset(weaponType, timeout, weaponResourceFlags, extraWeaponComponentFlags)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client'\n\nlib.requestWeaponAsset(weaponType, timeout, weaponResourceFlags, extraWeaponComponentFlags)\n```\n\n----------------------------------------\n\nTITLE: Cancelling Progress in Lua\nDESCRIPTION: Utility function that cancels an active progress bar if it's configured to be cancellable.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/progress.mdx#2025-04-16_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlib.cancelProgress()\n```\n\n----------------------------------------\n\nTITLE: MySQL Raw Execute Promise Implementation\nDESCRIPTION: Demonstrates how to use rawExecute with Promise-based syntax to query user data from a database. The example shows selecting firstname and lastname fields from users table using an identifier parameter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/rawExecute.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal response = MySQL.rawExecute.await('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', {\n    identifier\n})\n\nprint(json.encode(response, { indent = true, sort_keys = true }))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await MySQL.rawExecute('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', [\n  identifier\n])\n\nconsole.log(JSON.stringify(response))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Slot ID with Item in Lua\nDESCRIPTION: Get a slot id in an inventory matching the given item name and metadata.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_29\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetSlotIdWithItem(inv, itemName, metadata, strict)\n```\n\n----------------------------------------\n\nTITLE: Creating Account for Character in Lua\nDESCRIPTION: Creates a new account for a character with the given charId or stateId. Returns an OxAccount object.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nOx.CreateAccount(ownerId, label)\n```\n\n----------------------------------------\n\nTITLE: Array Test Elements - Lua\nDESCRIPTION: Tests if all elements pass a given test function.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.every(arr, testFn)\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Item Usage Handler\nDESCRIPTION: Exports a function to handle pokemon card usage events, demonstrating metadata access and logging.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Guides/metadata.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nexports('pokemon_card', function(event, item, inventory, slot, data)\n    if event == 'usingItem' then\n        local itemSlot = exports.ox_inventory:GetSlot(inventory.id, slot)\n        print(json.encode(itemSlot.metadata, {indent=true}))\n    end\nend)\n```\n\n----------------------------------------\n\nTITLE: Getting All Player Statuses in Lua\nDESCRIPTION: Returns an object containing all statuses, using the status name as the key.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nplayer.getStatuses()\n```\n\n----------------------------------------\n\nTITLE: Setting Vehicle Owner with OxVehicle.setOwner\nDESCRIPTION: Sets the owner of a vehicle to the given character ID, or removes the owner if charId is omitted.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxVehicle.mdx#2025-04-16_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nvehicle.setOwner(charId)\n```\n\n----------------------------------------\n\nTITLE: Removing Global Object Options in Lua\nDESCRIPTION: Removes all options from the global Object list with the specified option names. Accepts a string or an array of strings.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:removeGlobalObject(optionNames)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Player Statuses in Lua\nDESCRIPTION: Returns an object containing all status values for the player.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Client/OxPlayer.mdx#2025-04-16_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nplayer.getStatuses()\n```\n\n----------------------------------------\n\nTITLE: Handling Player Logout Events in Lua\nDESCRIPTION: Event triggered when a player logs out, crashes, or disconnects from the server, providing player ID, user ID, and character ID.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Events/server.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction(playerId: number, userId: number, charId: number)\n```\n\n----------------------------------------\n\nTITLE: Searching for Single Item Count Example in Lua\nDESCRIPTION: Example of searching the player's inventory to count how many of a specific item (water) they have.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nlocal count = exports.ox_inventory:Search('count', 'water')\nprint('You have '..count.. ' water')\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Event Handler in Lua\nDESCRIPTION: Demonstrates how to register and handle cache update events in Lua. The handler receives both the new and old values when a cached property changes.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Cache/Client.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.onCache('vehicle', function(value, oldValue)\n    print('old vehicle:', cache.vehicle)\n    print('new vehicle:', value)\nend)\n```\n\n----------------------------------------\n\nTITLE: Checking Table Contents in Lua\nDESCRIPTION: Checks if a table contains a given value. This function is intended for simple values and unnested tables.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Table/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.table.contains(tbl, value)\n```\n\n----------------------------------------\n\nTITLE: Ox Inventory Optimized Item Management\nDESCRIPTION: Optimized approach for checking and removing items using Ox Inventory's search and remove functions.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Frameworks/esx.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal items = ox_inventory:Search(source, 'count', {'acetone', 'antifreeze', 'sudo'})\nif items and items.acetone > 2 and items.antifreeze > 4 and items.sudo > 9 then\n    ox_inventory:RemoveItem(source, 'acetone', 3)\n    ox_inventory:RemoveItem(source, 'antifreeze', 5)\n    ox_inventory:RemoveItem(source, 'sudo', 10)\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Slot Data with Item in Lua\nDESCRIPTION: Get data for a slot in an inventory matching the given name and metadata.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_31\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetSlotWithItem(inv, itemName, metadata, strict)\n```\n\n----------------------------------------\n\nTITLE: Generating Unique Vehicle Plate in Lua\nDESCRIPTION: Generates a unique vehicle plate that doesn't exist in the database. Returns a string.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nOx.GenerateVehiclePlate()\n```\n\n----------------------------------------\n\nTITLE: Using lib.waitFor with Random Return Value in Lua\nDESCRIPTION: Example usage of lib.waitFor that demonstrates polling until a random condition is met, returning 'abc' when successful.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/WaitFor/Shared.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal value --[['abc']] = lib.waitFor(function()\n    if math.random(0, 1) == 1 then return 'abc' end\nend)\n```\n\n----------------------------------------\n\nTITLE: Using Phrases in TypeScript\nDESCRIPTION: Demonstrates how to import the locale function and use the constructed phrase locale in TypeScript, passing multiple arguments for formatting.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Locale/Shared.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { locale } from '@overextended/ox_lib/shared'\n\nconsole.log(locale('hello_my_name_is', 'doka', 'linden'))\n```\n\n----------------------------------------\n\nTITLE: Getting Player Metadata in Lua\nDESCRIPTION: Gets the value of a specific key from the player's metadata.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nplayer.get(key)\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata with OxVehicle.set\nDESCRIPTION: Stores a value in the vehicle's metadata, which will be saved to the database. Note that this behavior is likely to be removed in future updates.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxVehicle.mdx#2025-04-16_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nplayer.set(key, value)\n```\n\n----------------------------------------\n\nTITLE: Checking Player Permission in Lua\nDESCRIPTION: Checks if a user has been granted a specific permission by one of their groups.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nplayer.hasPermission(permission)\n```\n\n----------------------------------------\n\nTITLE: Performing Raycast from Coordinates in Lua\nDESCRIPTION: This function starts a shapetest from given starting coordinates to destination coordinates. It returns information about the hit entity, end coordinates, surface normal, and material hash.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Raycast/Client.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.raycast.fromCoords(coords, destination, flags, ignore)\n```\n\n----------------------------------------\n\nTITLE: Adding Status Value to a Player in Lua\nDESCRIPTION: Increases the value of a status for the player and returns a boolean indicating success.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nplayer.addStatus(statusName, value)\n```\n\n----------------------------------------\n\nTITLE: Array Type Check - Lua\nDESCRIPTION: Determines if table is Array instance or array-like.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.isArray(tbl)\n```\n\n----------------------------------------\n\nTITLE: Getting All Player Licenses in Lua\nDESCRIPTION: Returns an object containing information for all licenses that the player has.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nplayer.getLicenses()\n```\n\n----------------------------------------\n\nTITLE: Set Active Character Event Handler - Lua\nDESCRIPTION: Event handler triggered when a player selects their active character, providing character data and group information.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Events/client.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfunction(character: Character, groups: Record<string, number>)\n```\n\n----------------------------------------\n\nTITLE: Requesting Scaleform Movie in Lua and TypeScript\nDESCRIPTION: Loads a scaleform movie into memory. Requires calling SetScaleformMovieAsNoLongerNeeded(scaleformName) after use. Accepts a scaleform name and an optional timeout parameter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Streaming/Client.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlib.requestScaleformMovie(scaleformName, timeout)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client'\n\nlib.requestScaleformMovie(scaleformName, timeout)\n```\n\n----------------------------------------\n\nTITLE: Using Icons in Ox Lib Interface (Lua and TypeScript)\nDESCRIPTION: Examples of how to use Font Awesome icons in Ox Lib interface functions for both Lua and TypeScript.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nicon = {'fab', 'apple'}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nicon: ['fab', 'apple'];\n```\n\n----------------------------------------\n\nTITLE: Despawning a Vehicle with OxVehicle.despawn\nDESCRIPTION: Despawns the vehicle, removing it from the world. Optionally saves the vehicle data to the database if the save parameter is true.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxVehicle.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nvehicle.despawn(save)\n```\n\n----------------------------------------\n\nTITLE: Clearing All Radial Menu Items in TypeScript\nDESCRIPTION: TypeScript implementation for clearing all items from the radial menu.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/radial.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.clearRadialItems();\n```\n\n----------------------------------------\n\nTITLE: Hex to RGB Conversion\nDESCRIPTION: Converts a hexadecimal color string to RGB integer values.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Math/Shared.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nmath.hextorgb(input)\n```\n\n----------------------------------------\n\nTITLE: Array Fill - Lua\nDESCRIPTION: Sets elements within a range to a specified value.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.fill(arr, value, start, endIndex)\n```\n\n----------------------------------------\n\nTITLE: Emitting Client Event in Lua\nDESCRIPTION: Triggers a client event for the player with optional arguments.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nplayer.emit(eventName, ...args)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Groups by Type in Lua\nDESCRIPTION: Returns an array of group names which have the given group type.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nOx.GetGroupsByType(groupType)\n```\n\n----------------------------------------\n\nTITLE: Removing a License in Lua\nDESCRIPTION: Removes a license from the player and returns a boolean indicating success.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nplayer.removeLicense(licenseName)\n```\n\n----------------------------------------\n\nTITLE: Executing Scalar Query with Promise in Lua\nDESCRIPTION: Demonstrates how to execute a scalar query using a promise-based approach in Lua. It selects the first name from the users table based on an identifier.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/scalar.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal firstName = MySQL.scalar.await('SELECT `firstname` FROM `users` WHERE `identifier` = ? LIMIT 1', {\n    identifier\n})\n\nprint(firstName)\n```\n\n----------------------------------------\n\nTITLE: Array Join - Lua\nDESCRIPTION: Concatenates array elements into string with separator.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.join(arr, seperator)\n```\n\n----------------------------------------\n\nTITLE: ESX Traditional Inventory Management\nDESCRIPTION: Example of traditional ESX inventory item management using xPlayer methods for checking and removing items.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Frameworks/esx.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nif xPlayer.getInventoryItem('acetone').count > 2 and xPlayer.getInventoryItem('antifreeze').count > 4 and xPlayer.getInventoryItem('sudo').count > 9 then\n    xPlayer.removeInventoryItem(\"acetone\", 3)\n    xPlayer.removeInventoryItem(\"antifreeze\", 5)\n    xPlayer.removeInventoryItem(\"sudo\", 10)\nend\n```\n\n----------------------------------------\n\nTITLE: Deleting an Account in Lua\nDESCRIPTION: Marks an account as deleted so it can no longer be accessed, though the data remains in the database. Returns a success status and error message if applicable.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxAccount.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\naccount.deleteAccount()\n```\n\n----------------------------------------\n\nTITLE: Convert to RGBA Values\nDESCRIPTION: Converts string or table input to vector values in RGBA format (0-255 range).\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Math/Shared.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nmath.torgba(input)\n```\n\n----------------------------------------\n\nTITLE: Hiding a Menu in Lua\nDESCRIPTION: Hides the currently displayed menu in Lua, with an optional parameter to trigger the onClose function.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/menu.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlib.hideMenu(onExit)\n```\n\n----------------------------------------\n\nTITLE: Getting Vehicle Properties with OxVehicle.getProperties\nDESCRIPTION: Returns the vehicle's properties object containing information about modifications, extras, and other customizations.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxVehicle.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nvehicle.getProperties()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vehicle by Network ID in Lua\nDESCRIPTION: Gets an OxVehicle from its network id. Returns an OxVehicle object.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nOx.GetVehicleFromNetId(netId)\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Resource Load Order in YAML\nDESCRIPTION: Server configuration file (server.cfg) setup showing the correct load order for Ox Inventory and its dependencies with ESX.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Frameworks/esx.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstart oxmysql\nstart ox_lib\nstart es_extended\nstart qtarget\nstart ox_inventory\n```\n\n----------------------------------------\n\nTITLE: Version Checking Example in JavaScript\nDESCRIPTION: Shows how to import the ox_lib server module and use the versionCheck function in JavaScript, checking the version of the 'overextended/ox_lib' repository.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Version/Server.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/server'\n\nlib.versionCheck('overextended/ox_lib')\n```\n\n----------------------------------------\n\nTITLE: Listening for Metadata Changes in Lua\nDESCRIPTION: Sets up a callback to monitor changes to specific player metadata keys.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Client/OxPlayer.mdx#2025-04-16_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nplayer.on(key, cb(data))\n```\n\n----------------------------------------\n\nTITLE: Deleting Group in Lua\nDESCRIPTION: Deletes all data associated with the given group name, such as group grades, vehicles, etc.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nOx.DeleteGroup(groupName)\n```\n\n----------------------------------------\n\nTITLE: Removing Status Value in Lua\nDESCRIPTION: Reduces the value of a specified status for the player by the given amount.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Client/OxPlayer.mdx#2025-04-16_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nplayer.removeStatus(statusName, value)\n```\n\n----------------------------------------\n\nTITLE: Requesting Streamed Texture Dictionary in Lua and TypeScript\nDESCRIPTION: Loads a streamed texture dictionary into memory. Requires calling SetStreamedTextureDictAsNoLongerNeeded(dict) after use. Accepts a dictionary name and an optional timeout parameter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Streaming/Client.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlib.requestStreamedTextureDict(dict, timeout)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client'\n\nlib.requestStreamedTextureDict(dict, timeout)\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Manifest in Lua\nDESCRIPTION: Adds locale files to the resource manifest to ensure they are included in the resource.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Locale/Shared.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nfiles {\n  'locales/*.json'\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Named Particle Effect Asset in Lua and TypeScript\nDESCRIPTION: Loads a named particle effect asset into memory. Requires calling RemoveNamedPtfxAsset(dict) after use. Accepts a particle effect name and an optional timeout parameter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Streaming/Client.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlib.requestNamedPtfxAsset(ptFxName, timeout)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client'\n\nlib.requestNamedPtfxAsset(ptFxName, timeout)\n```\n\n----------------------------------------\n\nTITLE: Toggling Weapon Wheel in Lua\nDESCRIPTION: Enables or disables the weapon wheel while disabling the use of inventory weapons. Useful for weaponized vehicles or minigames.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nlocal exports.ox_inventory:weaponWheel(state)\n```\n\n----------------------------------------\n\nTITLE: Setting Vehicle Plate with OxVehicle.setPlate\nDESCRIPTION: Sets the registered plate of a vehicle to the given value. The plate will be padded or stripped to exactly 8 characters. Note that this plate is not necessarily the displayed plate on vehicle properties.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxVehicle.mdx#2025-04-16_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nvehicle.setPlate(plate: string)\n```\n\n----------------------------------------\n\nTITLE: Hiding the Radial Menu in Lua\nDESCRIPTION: Hides the currently open radial menu programmatically.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/radial.mdx#2025-04-16_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlib.hideRadial()\n```\n\n----------------------------------------\n\nTITLE: Player Logout in Lua\nDESCRIPTION: Clears data for the active character and transitions the player to character selection. Can optionally save data and handle disconnections.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nplayer.logout(save, dropped)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Container from Slot in Lua\nDESCRIPTION: Returns the inventory associated with the container linked in the slot of the given inventory.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_34\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:GetContainerFromSlot(inv, slotId)\n```\n\n----------------------------------------\n\nTITLE: Number Clamping\nDESCRIPTION: Clamps a number between specified lower and upper bounds.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Math/Shared.mdx#2025-04-16_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nmath.clamp(number, lower, upper)\n```\n\n----------------------------------------\n\nTITLE: Importing Ox Lib in JavaScript (TypeScript)\nDESCRIPTION: Examples of importing Ox Lib in JavaScript/TypeScript, either as a whole or individual functions.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/server';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { versionCheck } from '@overextended/ox_lib/server';\n```\n\n----------------------------------------\n\nTITLE: Setting Vehicle Properties - Function Definition\nDESCRIPTION: Function signature for setting vehicle properties. Takes vehicle entity and properties table as parameters.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/VehicleProperties/Client.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlib.setVehicleProperties(vehicle, props)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Character ID from State ID in Lua\nDESCRIPTION: Gets a character's charId from their stateId. Note: This queries the database and shouldn't be used excessively.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nOx.GetCharIdFromStateId(stateId)\n```\n\n----------------------------------------\n\nTITLE: Getting Vehicle Properties - Usage Examples\nDESCRIPTION: Examples of getting vehicle properties for the current player's vehicle in both Lua and TypeScript.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/VehicleProperties/Client.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlib.getVehicleProperties(GetVehiclePedIsUsing(PlayerPedId()))\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client'\n\nlib.getVehicleProperties(GetVehiclePedIsUsing(PlayerPedId()))\n```\n\n----------------------------------------\n\nTITLE: Handling Character Creation Events in Lua\nDESCRIPTION: Event triggered when a player creates a new character, providing player ID, user ID, and character ID.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Events/server.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfunction(playerId: number, userId: number, charId: number)\n```\n\n----------------------------------------\n\nTITLE: Generating Unique Vehicle VIN in Lua\nDESCRIPTION: Generates a unique vehicle identification number that doesn't exist in the database. Uses vehicle model information as part of the VIN.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nOx.GenerateVehicleVin(modelName)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Character Account in Lua\nDESCRIPTION: Gets the default OxAccount for a character by their charId or stateId. Returns an OxAccount object.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nOx.GetCharacterAccount(id)\n```\n\n----------------------------------------\n\nTITLE: Async Client Callback Trigger Example\nDESCRIPTION: Example of triggering a client callback asynchronously with timeout and response handling.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Callback/JavaScript/Server.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsetTimeout(async () => {\n  const response = await triggerClientCallback<{ clientValue: string }>('test:client', 1, [1, null, 3, null, null, 6])\n  if (!response) return;\n  console.log(response.clientValue);\n  console.log('Response from client', response);\n}, 100);\n```\n\n----------------------------------------\n\nTITLE: Handling Door State Changes in Lua for ox_doorlock\nDESCRIPTION: This event handler is triggered when a door's state is updated in the ox_doorlock system. It provides information about the source of the change, the door ID, the new state, and whether an item was used to trigger the change.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_doorlock/Server/events.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nAddEventHandler('ox_doorlock:stateChanged', function(source, doorId, state, usedItem) end)\n```\n\n----------------------------------------\n\nTITLE: Removing Global Player Options in Lua\nDESCRIPTION: Removes all options from the global Player list with the specified option names. Accepts a string or an array of strings.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:removeGlobalPlayer(optionNames)\n```\n\n----------------------------------------\n\nTITLE: Printing Functions in Lua for Overextended\nDESCRIPTION: Defines a set of printing functions with different severity levels. These functions print to the console conditionally based on convars set. The resource name is always included in the output.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Print/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.print.error(...)\nlib.print.warn(...)\nlib.print.info(...)\nlib.print.verbose(...)\nlib.print.debug(...)\n```\n\n----------------------------------------\n\nTITLE: Number to Hex Conversion\nDESCRIPTION: Formats a number or string as a hexadecimal string with optional uppercase formatting.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Math/Shared.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nmath.tohex(n, upper)\n```\n\n----------------------------------------\n\nTITLE: Granting Ace Permissions for Ox Lib (Bash)\nDESCRIPTION: Commands to grant necessary ace permissions to the Ox Lib resource.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nadd_ace resource.ox_lib command.add_ace allow\nadd_ace resource.ox_lib command.remove_ace allow\nadd_ace resource.ox_lib command.add_principal allow\nadd_ace resource.ox_lib command.remove_principal allow\n```\n\n----------------------------------------\n\nTITLE: Array ForEach - Lua\nDESCRIPTION: Executes function for each array element.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.forEach(arr, cb, reverse)\n```\n\n----------------------------------------\n\nTITLE: Handling Character Deletion Events in Lua\nDESCRIPTION: Event triggered when a character is deleted, providing player ID, user ID, and character ID.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Events/server.mdx#2025-04-16_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nfunction(playerId: number, userId: number, charId: number)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Point in Lua\nDESCRIPTION: Shows the function signature for creating a new point using lib.points.new. It takes a table with coords and distance properties and returns a CPoint object.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Points/Lua/Client.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlib.points.new(data)\n```\n\n----------------------------------------\n\nTITLE: Merging Tables in Lua\nDESCRIPTION: Merges two tables together. Duplicate keys will be added if they are numbers, otherwise the value from the second table will be used. The behavior for numeric keys can be controlled with a boolean parameter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Table/Shared.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlib.table.merge(tableOne, tableTwo)\n```\n\n----------------------------------------\n\nTITLE: Removing Global Ped Options in Lua\nDESCRIPTION: Removes all options from the global Ped list with the specified option names. Accepts a string or an array of strings.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:removeGlobalPed(optionNames)\n```\n\n----------------------------------------\n\nTITLE: Disabling Radial Menu Access in Lua\nDESCRIPTION: Controls whether players can open the radial menu, allowing for conditional access.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/radial.mdx#2025-04-16_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlib.disableRadial(state)\n```\n\n----------------------------------------\n\nTITLE: Getting Player Status in Lua\nDESCRIPTION: Returns the numerical value of a specified status for the player.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nplayer.getStatus(statusName)\n```\n\n----------------------------------------\n\nTITLE: Updating License Information in Lua\nDESCRIPTION: Sets specific information on a player license by updating a key-value pair and returns a boolean indicating success.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_27\n\nLANGUAGE: lua\nCODE:\n```\nplayer.updateLicense(licenseName, key, value)\n```\n\n----------------------------------------\n\nTITLE: Handling Player Character Loading Events in Lua\nDESCRIPTION: Event triggered when a player selects and loads a character, providing player ID, user ID, and character ID.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Events/server.mdx#2025-04-16_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nfunction(playerId: number, userId: number, charId: number)\n```\n\n----------------------------------------\n\nTITLE: Lua Implementation of Dependency Check\nDESCRIPTION: Example of checking ox_lib dependency version in Lua, with error handling if version requirement is not met.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Version/Shared.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nif not lib.checkDependency('ox_lib', '1.5.0') then error() end\n```\n\n----------------------------------------\n\nTITLE: Defining a New Class Using lib.class in Lua\nDESCRIPTION: The lib.class function allows you to define a new class, optionally inheriting from a parent class. It returns a table representing the newly created class, which can then be extended with methods and properties.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Class/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal MyClass = lib.class(name, super)\n```\n\n----------------------------------------\n\nTITLE: Group Digits Formatting\nDESCRIPTION: Formats a number with grouped digits using a specified separator (defaults to comma).\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Math/Shared.mdx#2025-04-16_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nmath.groupdigits(number, seperator)\n```\n\n----------------------------------------\n\nTITLE: Installing Ox Core NPM Package\nDESCRIPTION: Command to install Ox Core NPM package for JavaScript/TypeScript development\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @overextended/ox_core\n```\n\n----------------------------------------\n\nTITLE: Resource Start Order Configuration for Ox Inventory\nDESCRIPTION: Recommended start order for resources to ensure proper dependency loading before Ox Inventory.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstart oxmysql   # this should be one of the first resources\nstart ox_lib\nstart framework # the name of your framework (i.e. ox_core, es_extended, qbx_core)\nstart ox_target\nstart ox_inventory\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Inventory Weight in Lua\nDESCRIPTION: Sets the maximum weight available for an inventory.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:SetMaxWeight(inv, maxWeight)\n```\n\n----------------------------------------\n\nTITLE: Getting Nearby Points in Lua\nDESCRIPTION: Shows the function to retrieve an array of all points within range of the player. Returns an array of CPoint objects.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Points/Lua/Client.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlib.points.getNearbyPoints()\n```\n\n----------------------------------------\n\nTITLE: Event Handler Implementation in Lua/JS\nDESCRIPTION: Example of handling events and creating dynamic menus based on event data.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/context.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nRegisterNetEvent('test_event', function(args)\n  lib.registerContext({\n    id = 'event_menu',\n    title = 'Event menu',\n    menu = 'some_menu',\n    options = {\n      {\n        title = 'Event value: '..args.someValue,\n      }\n    }\n  })\n\n  lib.showContext('event_menu')\nend)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nonNet('test_event', (args: { someValue: number }) => {\n  lib.registerContext({\n    id: 'event_menu',\n    title: 'Event menu',\n    menu: 'some_menu',\n    options: [\n      {\n        title: `Event value: ${args.someValue}`,\n      },\n    ],\n  });\n\n  lib.showContext('event_menu');\n});\n```\n\n----------------------------------------\n\nTITLE: Command Registration Example in Lua/JS\nDESCRIPTION: Example of registering a command to show the context menu.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/context.mdx#2025-04-16_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nRegisterCommand('testcontext', function()\n  lib.showContext('some_menu')\nend)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nRegisterCommand('testcontext', () => {\n  lib.showContext('some_menu');\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Radial Menu Items in Lua\nDESCRIPTION: Removes a specific item from the global radial menu using its ID.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/radial.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlib.removeRadialItem(item)\n```\n\n----------------------------------------\n\nTITLE: Adding Status Values in Lua\nDESCRIPTION: Increases the value of a specified status for a player. Takes a status name and numeric value as parameters.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Client/OxPlayer.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nplayer.addStatus(statusName, value)\n```\n\n----------------------------------------\n\nTITLE: Cancelling Progress in TypeScript\nDESCRIPTION: TypeScript implementation to cancel an active progress bar if it supports cancellation.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/progress.mdx#2025-04-16_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport lib from '@overextended/ox_lib/client'\n\nlib.cancelProgress()\n```\n\n----------------------------------------\n\nTITLE: MySQL Raw Execute Callback Implementation\nDESCRIPTION: Shows how to use rawExecute with callback-based syntax for database queries. The example demonstrates querying user data and handling the response through a callback function.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/rawExecute.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nMySQL.rawExecute('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', {\n    identifier\n}, function(response)\n    print(json.encode(response, { indent = true, sort_keys = true }))\nend)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nMySQL.rawExecute('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', [\n  identifier\n], (response) => {\n  console.log(JSON.stringify(response))\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Player Group by Type in Lua\nDESCRIPTION: Returns the player's name and grade of a group with a matching type.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nplayer.getGroupByType(type)\n```\n\n----------------------------------------\n\nTITLE: Resuming Paused Timer in Lua\nDESCRIPTION: Shows how to resume a previously paused timer, with timing adjusted for the pause duration.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Timer/Shared.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal timer = lib.timer(5000, function()\n    print(\"timer ended\")\nend, true)\n\ntimer:pause()\n\nWait(1000)\n\ntimer:play()\n```\n\n----------------------------------------\n\nTITLE: Array Index Of - Lua\nDESCRIPTION: Returns index of first matching element.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.indexOf(arr, value, reverse)\n```\n\n----------------------------------------\n\nTITLE: Example of Setting Menu Option by Index in Lua\nDESCRIPTION: Shows how to replace the third menu option of a specified menu in Lua.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/menu.mdx#2025-04-16_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlib.setMenuOptions('some_menu_id', {label = 'New option', icon = 'plus'}, 3)\n```\n\n----------------------------------------\n\nTITLE: Closing Alert Dialog in Lua\nDESCRIPTION: Implementation of lib.closeAlertDialog in Lua for force closing an active alert dialog and setting its return data as nil.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/alert.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlib.closeAlertDialog()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nearby Entries with Optional Filter in Lua\nDESCRIPTION: Returns all entries near the given point with an optional filter function. It takes a vector point and a filter function as input, and returns an array of GridEntry objects that match the filter criteria.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Grid/Shared.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlib.grid.getNearbyEntries(point, filter)\n```\n\n----------------------------------------\n\nTITLE: Requesting Animation Dictionary in Lua and TypeScript\nDESCRIPTION: Loads an animation dictionary into memory. Requires calling RemoveAnimDict(dict) after use. Accepts a dictionary name and an optional timeout parameter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Streaming/Client.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.requestAnimDict(dict, timeout)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client'\n\nlib.requestAnimDict(dict, timeout)\n```\n\n----------------------------------------\n\nTITLE: Removing Controls from Disabled List in FiveM\nDESCRIPTION: This method removes specified control(s) from the tracking list. If a control's counter is greater than one, it will be decremented rather than completely removed.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/DisableControls/Client.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlib.disableControls:Remove(...)\n```\n\n----------------------------------------\n\nTITLE: Checking Inventory Busy State\nDESCRIPTION: Example of checking whether the player's inventory is currently performing an action.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_33\n\nLANGUAGE: lua\nCODE:\n```\nlocal invBusy = LocalPlayer.state.invBusy\n\nif invBusy then\n    -- Do stuff when busy\nelse\n    -- Do stuff when not busy\nend\n```\n\n----------------------------------------\n\nTITLE: Using Locale Function in TypeScript\nDESCRIPTION: Demonstrates how to import and use the locale function in TypeScript to format localized strings with additional arguments.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Locale/Shared.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { locale } from '@overextended/ox_lib/shared'\n\nlocale(str, ...)\n```\n\n----------------------------------------\n\nTITLE: Handling License Addition Events in Lua\nDESCRIPTION: Event triggered when a character receives a new license, providing player ID and license name.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Events/server.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nfunction(playerId: number, licenseName: string)\n```\n\n----------------------------------------\n\nTITLE: Handling Active Group Change Events in Lua\nDESCRIPTION: Event triggered when a character's active group is changed, providing player ID and the new group name.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Events/server.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction(playerId: number, groupName: string)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group Account in Lua\nDESCRIPTION: Gets the OxAccount for a group. Returns an OxAccount object.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nOx.GetGroupAccount(groupName)\n```\n\n----------------------------------------\n\nTITLE: Array Shift - Lua\nDESCRIPTION: Removes and returns first element from array.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.shift(arr)\n```\n\n----------------------------------------\n\nTITLE: Setting Inventory Busy State\nDESCRIPTION: Example of setting the inventory busy state to prevent opening the inventory.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_34\n\nLANGUAGE: lua\nCODE:\n```\nLocalPlayer.state.invBusy = true\n```\n\n----------------------------------------\n\nTITLE: Canceling a Skill Check in JavaScript\nDESCRIPTION: Function to cancel the currently ongoing skill check in JavaScript. Useful for interrupting skill checks when needed in JS applications.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/skillcheck.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client'\n\nlib.cancelSkillCheck()\n```\n\n----------------------------------------\n\nTITLE: Zone Creation Array Format in Lua\nDESCRIPTION: Example of creating a polygon zone using the array format.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Zones/Shared.mdx#2025-04-16_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n{\n    name = poly,\n    points = {\n        vec(447.9, -998.8, 25.8),\n        vec(450.3, -998.2, 25.8),\n        vec(449.9, -995.5, 25.8),\n        vec(447.2, -995.6, 25.8),\n        vec(446.3, -997.9, 25.8),\n    },\n    thickness = 2,\n},\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Global Radial Menu in TypeScript\nDESCRIPTION: TypeScript implementation for adding items to the global radial menu, requiring an import from the ox_lib library.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/radial.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.addRadialItem(items);\n```\n\n----------------------------------------\n\nTITLE: Defining Client Modules in fxmanifest.lua\nDESCRIPTION: Shows how to define client modules in the resource manifest file (fxmanifest.lua) using the 'file' or 'files' section. This is necessary for client-side module loading.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Require/Shared.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfile 'modname.lua'\n-- or\nfiles {\n  'modname.lua'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Burger Item with Description in Lua\nDESCRIPTION: Defines a burger item with an added description field for additional information.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Guides/creatingItems.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n['burger'] = {\n    label = 'Burger',\n    description = 'Just what is the secret formula?'\n    weight = 220,\n    stack = true,\n    close = true,\n    client = {\n        status = { hunger = 200000 },\n        anim = { dict = 'mp_player_inteat@burger', clip = 'mp_player_int_eat_burger_fp' },\n        prop = {\n            model = 'prop_cs_burger_01',\n            pos = { x = 0.02, y = 0.02, y = -0.02},\n            rot = { x = 0.0, y = 0.0, y = 0.0}\n        },\n        usetime = 2500,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Function Signature in Lua\nDESCRIPTION: This snippet shows the function signature for the cache function. It takes a key string, a function to generate the value, and an optional timeout in milliseconds.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Cache/Shared.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\ncache(key, func, timeout)\n```\n\n----------------------------------------\n\nTITLE: Normal to Rotation Conversion\nDESCRIPTION: Converts a surface normal vector3 into a rotation vector3.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Math/Shared.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nmath.normaltorotation(input)\n```\n\n----------------------------------------\n\nTITLE: License Added Event Handler - Lua\nDESCRIPTION: Event handler triggered when a character receives a new license.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Events/client.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nfunction(licenseName: string)\n```\n\n----------------------------------------\n\nTITLE: Setting Player Status in Lua\nDESCRIPTION: Sets the value of a status to a specific value and returns a boolean indicating success.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_26\n\nLANGUAGE: lua\nCODE:\n```\nplayer.setStatus(statusName, value)\n```\n\n----------------------------------------\n\nTITLE: Executing Prepared MySQL Query with Promise in Lua\nDESCRIPTION: This snippet demonstrates how to use the MySQL.prepare.await method to execute a prepared query and retrieve user data in Lua. It uses a promise-based approach and prints the response as JSON.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/prepare.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal response = MySQL.prepare.await('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', {\n    identifier\n})\n\nprint(json.encode(response, { indent = true, sort_keys = true }))\n```\n\n----------------------------------------\n\nTITLE: Array Unshift - Lua\nDESCRIPTION: Inserts elements at start of array.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.unshift(arr, ...)\n```\n\n----------------------------------------\n\nTITLE: Ox Inventory Export Caching\nDESCRIPTION: Caching the Ox Inventory exports metatable for efficient access to inventory functions.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Frameworks/esx.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ox_inventory = exports.ox_inventory\n```\n\n----------------------------------------\n\nTITLE: Checking if Skill Check is Active in JavaScript\nDESCRIPTION: Function that returns true if a skill check is currently active, false otherwise. Used to determine the state of skill checks in JS applications.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/skillcheck.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client'\n\nlib.skillCheckActive()\n```\n\n----------------------------------------\n\nTITLE: Zone Contains Check in Lua\nDESCRIPTION: Shows how to check if a point exists inside a zone using the contains method.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Zones/Shared.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal zone = lib.zones.box({...})\n\nif zone:contains(vec3(1, 1, 1)) then\n    print('point is inside zone!')\nend\n```\n\n----------------------------------------\n\nTITLE: Example of Setting Maximum Inventory Weight in Lua\nDESCRIPTION: Demonstrates setting the max weight for a player's inventory to 20kg.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nlocal ox_inventory = exports.ox_inventory\n\nox_inventory:SetMaxWeight(1, 20000)\n```\n\n----------------------------------------\n\nTITLE: Zone Removal Example in Lua\nDESCRIPTION: Demonstrates how to remove a zone and recreate it later using the stored data.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Zones/Shared.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal zone = lib.zones.box({...})\n\nzone:remove()\n\nSetTimeout(500, function()\n    lib.zones.poly(zone)\nend)\n```\n\n----------------------------------------\n\nTITLE: Using an Item in a Specific Slot in Lua\nDESCRIPTION: Uses the item located in the specified inventory slot.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:useSlot(slot)\n```\n\n----------------------------------------\n\nTITLE: Example of SetDurability Usage in Ox Inventory (Lua)\nDESCRIPTION: This example demonstrates two common uses of the SetDurability function: setting durability on a specific inventory slot and repairing the player's current weapon by setting its durability to 100.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_49\n\nLANGUAGE: lua\nCODE:\n```\nlocal ox_inventory = exports.ox_inventory\n\n-- Set the durability of the item in slot 3 of source player's inventory to 100\nox_inventory:SetDurability(source, 3, 100)\n\n-- Set the durability of the source player's current weapon to 100\nlocal weapon = ox_inventory:GetCurrentWeapon(source)\n\nif weapon then\n    ox_inventory:SetDurability(source, weapon.slot, 100)\nend\n```\n\n----------------------------------------\n\nTITLE: License Removed Event Handler - Lua\nDESCRIPTION: Event handler triggered when a license is removed from a character.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Events/client.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfunction(licenseName: string)\n```\n\n----------------------------------------\n\nTITLE: Version Checking Example in Lua\nDESCRIPTION: Demonstrates how to use the versionCheck function in Lua, checking the version of the 'overextended/ox_lib' repository.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Version/Server.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlib.versionCheck('overextended/ox_lib')\n```\n\n----------------------------------------\n\nTITLE: Array Reverse - Lua\nDESCRIPTION: Reverses order of elements in array.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.reverse(arr)\n```\n\n----------------------------------------\n\nTITLE: Using Alert Dialog Function in JavaScript\nDESCRIPTION: Implementation of the lib.alertDialog function in TypeScript for client-side, which is asynchronous and requires handling the promise.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/alert.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.alertDialog(data);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Locale in Lua\nDESCRIPTION: Provides an example of loading the locale module and using it to print localized strings at regular intervals in Lua.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Locale/Shared.mdx#2025-04-16_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n-- Load the locale module\nlib.locale()\n\nSetInterval(function()\n    print(locale('grand_theft_auto'))\n    print(locale('suspect_sex', locale('male')))\nend, 5000)\n```\n\n----------------------------------------\n\nTITLE: Array Find Element - Lua\nDESCRIPTION: Returns first element that passes a test function.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.find(arr, testFn, reverse)\n```\n\n----------------------------------------\n\nTITLE: Removing Entity-Specific Options in Lua\nDESCRIPTION: Removes options from the networked entities list with the specified option names. Accepts network IDs and option names as arguments.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:removeEntity(netIds, optionNames)\n```\n\n----------------------------------------\n\nTITLE: Alert Dialog Example in JavaScript\nDESCRIPTION: Example usage of the alert dialog in TypeScript, demonstrating the async/await pattern to handle the promise. Creates a dialog with the same options as the Lua example and logs the result to the console.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/alert.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nconst alert = await lib.alertDialog({\n  header: 'Hello there',\n  content: 'General Kenobi  \\n Markdown support!',\n  centered: true,\n  cancel: true,\n});\n\nconsole.log(alert);\n```\n\n----------------------------------------\n\nTITLE: Handling Group Membership Events in Lua\nDESCRIPTION: Event triggered when a character is added to or removed from a group, providing player ID, group name, and optional grade.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Events/server.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfunction(playerId: number, groupName: string, grade?: number)\n```\n\n----------------------------------------\n\nTITLE: Interacting with the Closest Door in ox_doorlock (Lua)\nDESCRIPTION: Interacts with the closest door, which could mean locking, unlocking, or other door-specific actions. The success of this function depends on server-side checks such as player permissions or key ownership.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_doorlock/Client/functions.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_doorlock:useClosestDoor()\n```\n\n----------------------------------------\n\nTITLE: Checking Keybind Pressed State in Lua\nDESCRIPTION: Shows how to check if a keybind is currently pressed using the isControlPressed method, which returns a boolean state indicating if the key is being held down.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/AddKeybind/Client.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal state = keybind:isControlPressed()\n```\n\n----------------------------------------\n\nTITLE: Updating Vehicle Stash Reference in Lua\nDESCRIPTION: Updates the internal reference to vehicle stashes without triggering a save or updating the database.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:UpdateVehicle(oldPlate, newPlate)\n```\n\n----------------------------------------\n\nTITLE: Creating English Locale File in JSON\nDESCRIPTION: Defines an English locale file with translations for various phrases. The file should be saved as 'locales/en.json'.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Locale/Shared.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"grand_theft_auto\": \"grand theft auto\",\n  \"male\": \"male\",\n  \"female\": \"female\",\n  \"suspect_sex\": \"suspect is %s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dependency Check Function Declaration\nDESCRIPTION: Function signature for checking resource dependency versions.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Version/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.checkDependency(resource, version)\n```\n\n----------------------------------------\n\nTITLE: Checking Table Frozen State in Lua\nDESCRIPTION: Returns true if the given table is set as read-only (frozen), false otherwise.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Table/Shared.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlib.table.isFrozen(tbl)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Locale from Another Resource in Lua\nDESCRIPTION: Demonstrates how to use lib.getLocale to retrieve a locale string from another resource and add it to the current dictionary in Lua.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Locale/Shared.mdx#2025-04-16_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlib.getLocale(resource, key)\n```\n\n----------------------------------------\n\nTITLE: Array Map - Lua\nDESCRIPTION: Creates new array with results of calling function on each element.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.map(arr, fn)\n```\n\n----------------------------------------\n\nTITLE: Disabling Targeting in Lua\nDESCRIPTION: Toggles the availability of the targeting menu. Setting state to true disables targeting, while false enables it.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:disableTargeting(state)\n```\n\n----------------------------------------\n\nTITLE: Getting Current Radial Menu ID in Lua\nDESCRIPTION: Retrieves the ID of the currently open radial menu, useful for conditional operations.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/radial.mdx#2025-04-16_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal id = lib.getCurrentRadialId()\n```\n\n----------------------------------------\n\nTITLE: Handling Vehicle Save Events in Lua\nDESCRIPTION: Event triggered when vehicles are saved to the database, providing the number of vehicles saved.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Events/server.mdx#2025-04-16_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nfunction(vehiclesSaved: number)\n```\n\n----------------------------------------\n\nTITLE: Installing Ox Core via Git\nDESCRIPTION: Commands to clone and build Ox Core from source using Git and pnpm\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/overextended/ox_core.git\ncd ox_core\npnpm i\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Array Filter - Lua\nDESCRIPTION: Creates new array with elements that pass a test function.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.filter(arr, testFn)\n```\n\n----------------------------------------\n\nTITLE: Checking TextUI Status in Lua and TypeScript\nDESCRIPTION: Returns whether TextUI is currently open and the displayed text content.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/textui.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal isOpen, text = lib.isTextUIOpen()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nconst [isOpen, text] = lib.isTextUIOpen();\n```\n\n----------------------------------------\n\nTITLE: Upserting Data with OxMySQL in Lua\nDESCRIPTION: Demonstrates how to use OxMySQL to insert or update data in a single query, avoiding separate existence checks.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql.mdx#2025-04-16_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nMySQL.prepare('INSERT INTO ox_inventory (owner, name, data) VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE data = VALUES(data)', { owner, dbId, inventory })\n```\n\n----------------------------------------\n\nTITLE: Importing Ox Core in Lua via Manifest\nDESCRIPTION: Adding Ox Core definitions to a FiveM resource via the manifest file\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nshared_script '@ox_core/lib/init.lua'\n```\n\n----------------------------------------\n\nTITLE: Initializing Locale Module in TypeScript\nDESCRIPTION: Imports and initializes the locale module in a TypeScript resource. This should be called once in the resource.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Locale/Shared.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {initLocale} from '@overextended/ox_lib/shared'\n\ninitLocale()\n```\n\n----------------------------------------\n\nTITLE: Loading and Running Lua Files with lib.load\nDESCRIPTION: Explains the usage of lib.load function to load and run Lua files. It describes the function parameters and provides an example of its usage.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Require/Shared.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlib.load(filePath, env)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal events = lib.load('data.events')\n\nprint('Loaded events')\n```\n\nLANGUAGE: lua\nCODE:\n```\nreturn {\n  disconnect = 'onPlayerDropped',\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Marker Object in FiveM with lib.marker.new\nDESCRIPTION: This snippet shows the basic syntax for creating a new marker object using the lib.marker.new function. It returns a Marker object that can be used with methods such as draw() to render the marker in-game.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Marker/Client.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlib.marker.new(options)\n```\n\n----------------------------------------\n\nTITLE: Handling Vehicle Spawn Events in Lua\nDESCRIPTION: Event triggered when an OxVehicle has spawned, providing the entity ID and vehicle ID.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Events/server.mdx#2025-04-16_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nfunction(entityId: number, id: number)\n```\n\n----------------------------------------\n\nTITLE: Getting Vehicle Coordinates with OxVehicle.getCoords\nDESCRIPTION: Returns the vehicle's current coordinates as a vector3 object. Useful for tracking vehicle position.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxVehicle.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nvehicle.getCoords()\n```\n\n----------------------------------------\n\nTITLE: Requesting Animation Set in Lua and TypeScript\nDESCRIPTION: Loads an animation set into memory. Requires calling RemoveAnimSet(set) after use. Accepts an animation set name and an optional timeout parameter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Streaming/Client.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlib.requestAnimSet(set, timeout)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client'\n\nlib.requestAnimSet(set, timeout)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Money Check Function in Ox Fuel\nDESCRIPTION: Demonstrates how to override the built-in money check in the Ox Fuel resource. This function allows developers to customize how the fuel system determines a player's available funds.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_fuel/Client/functions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_fuel:setMoneyCheck(method)\n```\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_fuel:setMoneyCheck(function()\n    local accounts = ESX.GetPlayerData().accounts\n\n    for i = 1, #accounts do\n        if accounts[i].name == 'bank' then\n            return accounts[i].money\n        end\n    end\n\n    return 0\nend)\n```\n\n----------------------------------------\n\nTITLE: Array Find Index - Lua\nDESCRIPTION: Returns index of first element passing a test function.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.findIndex(arr, testFn, reverse)\n```\n\n----------------------------------------\n\nTITLE: Canceling a Skill Check in Lua\nDESCRIPTION: Function to cancel the currently ongoing skill check. Useful for interrupting skill checks when needed.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/skillcheck.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlib.cancelSkillCheck()\n```\n\n----------------------------------------\n\nTITLE: Importing Ox Lib in Lua (Lua)\nDESCRIPTION: Examples of how to import Ox Lib in a Lua script using shared_scripts in fxmanifest.lua.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nshared_scripts {\n    '@ox_lib/init.lua',\n}\n```\n\nLANGUAGE: lua\nCODE:\n```\nshared_script '@ox_lib/init.lua'\n```\n\n----------------------------------------\n\nTITLE: Random String Generation Function\nDESCRIPTION: Function to generate random strings based on a pattern. Supports numeric (0-9), uppercase (A-Z), lowercase (a-z), and alphanumeric characters. Allows escaping with '^' and custom length specification.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/String/Shared.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nstring.random(pattern, length)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Player Metadata in Lua\nDESCRIPTION: Returns a value from the player's metadata using a specified key.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Client/OxPlayer.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nplayer.get(key)\n```\n\n----------------------------------------\n\nTITLE: MySQL Update with Callback - JavaScript Implementation\nDESCRIPTION: Executes an UPDATE query using callback pattern in JavaScript. Processes the number of affected rows through a callback function. Supports array-based parameter passing.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/update.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMySQL.update('UPDATE users SET firstname = ? WHERE identifier = ?', [\n  newName, identifier\n], (affectedRows) => {\n  console.log(affectedRows)\n})\n```\n\n----------------------------------------\n\nTITLE: Requesting Audio Bank in Lua\nDESCRIPTION: Loads an audio bank into memory. Requires calling ReleaseScriptAudioBank(set) after use. Accepts an audio bank name and an optional timeout parameter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Streaming/Client.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlib.requestAudioBank(audioBank, timeout)\n```\n\n----------------------------------------\n\nTITLE: Getting Vehicle Properties - Function Definition\nDESCRIPTION: Function signature for retrieving vehicle properties. Takes a vehicle handle number as parameter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/VehicleProperties/Client.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlib.getVehicleProperties(vehicle)\n```\n\n----------------------------------------\n\nTITLE: Importing Ox_lib Client Functions in TypeScript\nDESCRIPTION: Example of importing the necessary functions from the ox_lib library for client-side use.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Callback/JavaScript/Client.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onServerCallback, triggerServerCallback } from '@overextended/ox_lib/client'\n```\n\n----------------------------------------\n\nTITLE: Removing Global Targeting Options in Lua\nDESCRIPTION: Removes all options from the global options list with the specified option names. Accepts a string or an array of strings.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:removeGlobalOption(optionNames)\n```\n\n----------------------------------------\n\nTITLE: Custom Framework Bridge Configuration for MySQL\nDESCRIPTION: Lua code snippet for configuring database references when implementing Ox Inventory with an unsupported framework.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nelseif shared.framework == 'custom' then\n    playerTable = 'characters' -- table storing player / character data\n    playerColumn = 'charid'    -- primary key for identifying the character (i.e. identifier, citizenid, id)\n    vehicleTable = 'vehicles'  -- table storing owned vehicle data\n    vehicleColumn = 'id'       -- primary key for identifying the vehicle (i.e. plate, vin, id)\nend\n```\n\n----------------------------------------\n\nTITLE: Array Pop - Lua\nDESCRIPTION: Removes and returns last element from array.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.pop(arr)\n```\n\n----------------------------------------\n\nTITLE: Convert String to Scalar Values\nDESCRIPTION: Converts a string input into scalar numeric values with optional min/max bounds and rounding.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Math/Shared.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nmath.toscalars(input, min, max, round)\n```\n\n----------------------------------------\n\nTITLE: Checking if Skill Check is Active in Lua\nDESCRIPTION: Function that returns true if a skill check is currently active, false otherwise.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/skillcheck.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlib.skillCheckActive()\n```\n\n----------------------------------------\n\nTITLE: Linear Interpolation Iterator\nDESCRIPTION: Creates an iterator that linearly interpolates between values over specified duration.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Math/Shared.mdx#2025-04-16_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nmath.lerp(start, finish, duration)\n```\n\n----------------------------------------\n\nTITLE: Handling Item Count Changes Event in Lua\nDESCRIPTION: Event handler for tracking changes in item quantities. Receives item name and total count parameters.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Events/Client.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nAddEventHandler('ox_inventory:itemCount', function(itemName, totalCount) end)\n```\n\n----------------------------------------\n\nTITLE: Setting Clipboard Content in JavaScript using ox_lib\nDESCRIPTION: Sets the player's clipboard to the specified string value using the lib.setClipboard function in JavaScript. This requires importing the lib object from '@overextended/ox_lib/client'. The same limitations apply regarding NUI focus and newline characters.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/clipboard.mdx#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.setClipboard(value);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cell Position in Lua\nDESCRIPTION: Returns the position of the cell at the given point. It takes a vector point as input and returns the x and y coordinates of the cell.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Grid/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.grid.getCellPosition(point)\n```\n\n----------------------------------------\n\nTITLE: Restarting Timer in Lua\nDESCRIPTION: Shows how to create a self-restarting timer that continues indefinitely.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Timer/Shared.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal timer\n\ntimer = lib.timer(5000, function()\n    print(\"timer ended\")\n    timer:restart()\nend, true)\n```\n\n----------------------------------------\n\nTITLE: Getting the Open Menu ID in Lua\nDESCRIPTION: Returns the id of the currently open menu in Lua.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/menu.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlib.getOpenMenu()\n```\n\n----------------------------------------\n\nTITLE: Value Interpolation\nDESCRIPTION: Calculates intermediate value between start and finish based on interpolation factor.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Math/Shared.mdx#2025-04-16_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nmath.interp(start, finish, factor)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Warn Print Function in Lua\nDESCRIPTION: Demonstrates how to use the warn level print function to output a message with a variable. This example prints a warning about high query latency.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Print/Shared.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlib.print.warn(\"query latency high: \", latency)\n```\n\n----------------------------------------\n\nTITLE: Using Phrases in Lua\nDESCRIPTION: Shows how to use the constructed phrase locale in Lua, passing multiple arguments for formatting.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Locale/Shared.mdx#2025-04-16_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nprint(locale('hello_my_name_is', 'doka', 'linden'))\n```\n\n----------------------------------------\n\nTITLE: Pausing Timer Operation in Lua\nDESCRIPTION: Demonstrates how to pause a timer's execution. The timer remains inactive until explicitly resumed.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Timer/Shared.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal timer = lib.timer(5000, function()\n    print(\"timer ended\")\nend, true)\n\ntimer:pause()\n```\n\n----------------------------------------\n\nTITLE: Start Character Select Event Handler - Lua\nDESCRIPTION: Event handler triggered when a player spawns, providing user ID and available characters.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Events/client.mdx#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction(userId: number, characters: Character[])\n```\n\n----------------------------------------\n\nTITLE: MySQL Update with Callback - Lua Implementation\nDESCRIPTION: Executes an UPDATE query using callback pattern in Lua. Processes the number of affected rows through a callback function. Supports legacy implementations through various aliases.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/update.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nMySQL.update('UPDATE users SET firstname = ? WHERE identifier = ?', {\n    newName, identifier\n}, function(affectedRows)\n    print(affectedRows)\nend)\n```\n\n----------------------------------------\n\nTITLE: Handling Vehicle Despawn Events in Lua\nDESCRIPTION: Event triggered before an OxVehicle gets despawned, providing the entity ID and vehicle ID.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Events/server.mdx#2025-04-16_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nfunction(entityId: number, id: number)\n```\n\n----------------------------------------\n\nTITLE: Version Checking in ox_lib Server\nDESCRIPTION: Compares the resource version to the latest published release on GitHub using GitHub's release API. Takes a repository string as an argument.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Version/Server.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.versionCheck(repository)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Licenses Data in Lua\nDESCRIPTION: Gets all licenses' data. Returns an array of OxLicense objects.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_26\n\nLANGUAGE: lua\nCODE:\n```\nOx.GetLicenses()\n```\n\n----------------------------------------\n\nTITLE: Creating French Locale File in JSON\nDESCRIPTION: Defines a French locale file with translations for various phrases. The file should be saved as 'locales/fr.json'.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Locale/Shared.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"grand_theft_auto\": \"vol de voiture\",\n  \"male\": \"homme\",\n  \"female\": \"femme\",\n  \"suspect_sex\": \"le suspect est %s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Global Vehicle Options in Lua\nDESCRIPTION: Removes all options from the global Vehicle list with the specified option names. Accepts a string or an array of strings.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target/Functions/Client.mdx#2025-04-16_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_target:removeGlobalVehicle(optionNames)\n```\n\n----------------------------------------\n\nTITLE: Using Locale Function in Lua\nDESCRIPTION: Demonstrates how to use the locale function in Lua to format localized strings with additional arguments.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Locale/Shared.mdx#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocale(str, ...)\n```\n\n----------------------------------------\n\nTITLE: Hiding Context Menu in Lua/JS\nDESCRIPTION: Function to hide the currently visible context menu with optional onExit callback execution.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/context.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlib.hideContext(onExit)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.hideContext(onExit);\n```\n\n----------------------------------------\n\nTITLE: Array Element Access - Lua\nDESCRIPTION: Returns the element at the specified index, supporting negative indices.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.at(index)\n```\n\n----------------------------------------\n\nTITLE: Freezing Tables in Lua\nDESCRIPTION: Makes a table read-only, preventing further modification. Note that unfrozen tables stored within the frozen table are still mutable.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Table/Shared.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlib.table.freeze(tbl)\n```\n\n----------------------------------------\n\nTITLE: Getting Values from Account Metadata in Lua\nDESCRIPTION: Retrieves specific key values from an account's metadata. Can accept either a single string key or an array of string keys, returning the corresponding values.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxAccount.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\naccount.get(key)\n```\n\n----------------------------------------\n\nTITLE: Adding Principal Hierarchies in Lua/TypeScript\nDESCRIPTION: Assigns a principal to a parent principal, allowing inheritance of permissions from parent to child.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/ACL/Server.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlib.addPrincipal(child, parent)\n\nlib.addPrincipal('player.1', 'group.moderator')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/server'\n\nlib.addPrincipal(child, parent)\n\nlib.addPrincipal('player.1', 'group.moderator')\n```\n\n----------------------------------------\n\nTITLE: Getting the Open Menu ID in TypeScript\nDESCRIPTION: Returns the id of the currently open menu in TypeScript.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/menu.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.getOpenMenu();\n```\n\n----------------------------------------\n\nTITLE: Checking Timer Pause Status in Lua\nDESCRIPTION: Shows how to check if a timer is currently in a paused state.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Timer/Shared.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal timer = lib.timer(5000, function()\n    print(\"timer ended\")\nend, true)\n\nprint(timer:isPaused()) -- false\n\ntimer:pause()\n\nprint(timer:isPaused()) -- true\n```\n\n----------------------------------------\n\nTITLE: Toggling Weapon Usage\nDESCRIPTION: Example of disabling weapon usage for a player using state management.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Client.mdx#2025-04-16_snippet_37\n\nLANGUAGE: lua\nCODE:\n```\nLocalPlayer.state.canUseWeapons = false\n```\n\n----------------------------------------\n\nTITLE: Deleting Account Invoice in Lua\nDESCRIPTION: Deletes the account invoice with the given invoiceId. Returns an object with success status and optional message.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nOx.DeleteAccountInvoice(invoiceId)\n```\n\n----------------------------------------\n\nTITLE: Force Ending Timer in Lua\nDESCRIPTION: Demonstrates immediate timer termination with optional callback execution control.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Timer/Shared.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal timer = lib.timer(5000, function()\n    print(\"timer ended\")\nend, true)\n\ntimer:pause()\n\nWait(1000)\n\ntimer:forceEnd(false)\n```\n\n----------------------------------------\n\nTITLE: Array Reduce - Lua\nDESCRIPTION: Applies reducer function to array elements with accumulator.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.reduce(arr, reducer)\n```\n\n----------------------------------------\n\nTITLE: Registering Radial Sub-Menus in TypeScript\nDESCRIPTION: TypeScript implementation for creating radial sub-menus with predefined options.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/radial.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.registerRadial(radial);\n```\n\n----------------------------------------\n\nTITLE: Closing Alert Dialog in JavaScript\nDESCRIPTION: Implementation of lib.closeAlertDialog in TypeScript for force closing an active alert dialog and setting its return data as nil.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/alert.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.closeAlertDialog();\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in Server Configuration\nDESCRIPTION: Configures debug mode to print all queries or queries from specific resources in the server console.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nset mysql_debug true\nset mysql_debug [\n  \"ox_core\",\n  \"ox_inventory\"\n]\n```\n\n----------------------------------------\n\nTITLE: Convert to Vector\nDESCRIPTION: Converts string or table input into a vector value or single number, with optional bounds and rounding.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Math/Shared.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nmath.tovector(input, min, max, round)\n```\n\n----------------------------------------\n\nTITLE: Array Reverse Copy - Lua\nDESCRIPTION: Creates new array with reversed elements.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.toReversed(arr)\n```\n\n----------------------------------------\n\nTITLE: Set Group Event Handler - Lua\nDESCRIPTION: Event handler for when a character is added to or removed from a group, including optional grade parameter.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Events/client.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfunction(groupName: string, grade?: number)\n```\n\n----------------------------------------\n\nTITLE: Notification Function in JavaScript\nDESCRIPTION: JavaScript implementation of the notification function using the ox_lib library. This requires importing the lib from the ox_lib package first.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/notify.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.notify(data);\n```\n\n----------------------------------------\n\nTITLE: Removing ACE Permissions in Lua/TypeScript\nDESCRIPTION: Removes an ace permission from a principal. The allow parameter defaults to true for removing granted permissions, while false removes denied permissions.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/ACL/Server.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlib.removeAce(principal, ace, allow)\n\nlib.removeAce('group.admin', 'command.say')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/server'\n\nlib.removeAce(principal, ace, allow)\n\nlib.removeAce('group.admin', 'command.say')\n```\n\n----------------------------------------\n\nTITLE: Getting Player Coordinates in Lua\nDESCRIPTION: Returns the current coordinates of the player as a vector3 value.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Client/OxPlayer.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nplayer.getCoords()\n```\n\n----------------------------------------\n\nTITLE: Array Slice - Lua\nDESCRIPTION: Creates shallow copy of array portion.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.slice(arr, start, finish)\n```\n\n----------------------------------------\n\nTITLE: String Library Import\nDESCRIPTION: Imports the extended string library functionality into the standard Lua string table.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/String/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nstring = lib.string\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Files with lib.loadJson in Lua\nDESCRIPTION: Demonstrates how to use the lib.loadJson function to load and decode JSON files as Lua tables. It includes the function syntax and a usage example.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Require/Shared.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlib.loadJson(filePath)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal events = lib.loadJson('data.events')\n\nprint('Loaded events')\n```\n\n----------------------------------------\n\nTITLE: Enabling MySQL UI Configuration\nDESCRIPTION: Command to enable the MySQL UI interface through server convars. This must be set before the UI can be accessed, and users need appropriate ace permissions.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/ui.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nset mysql_ui true\n```\n\n----------------------------------------\n\nTITLE: Setting Clipboard Content in Lua using ox_lib\nDESCRIPTION: Sets the player's clipboard to the specified string value using the lib.setClipboard function in Lua. Note that this will not work if focus is already taken by an NUI component, and to create a new line, '\\t\\n' should be used instead of just '\\n'.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/clipboard.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.setClipboard(value)\n```\n\n----------------------------------------\n\nTITLE: Handling License Removal Events in Lua\nDESCRIPTION: Event triggered when a character's license is removed, providing player ID and license name.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Events/server.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfunction(playerId: number, licenseName: string)\n```\n\n----------------------------------------\n\nTITLE: Caching Item Names for Crafting in Lua\nDESCRIPTION: Example of caching item names for use in crafting resources, avoiding repeated database queries.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal itemNames\n\nESX.RegisterServerCallback('crafting:itemNames', function(source, cb)\n    if not itemNames then\n        itemNames = {}\n        for item, data in pairs(exports.ox_inventory:Items()) do\n            itemNames[item] = data.label\n        end\n    end\n    cb(itemNames)\nend)\n```\n\n----------------------------------------\n\nTITLE: Setting Slot Count in Lua\nDESCRIPTION: Sets the number of slots available for an inventory.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_35\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:SetSlotCount(inv, slots)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal ox_inventory = exports.ox_inventory\n\n-- Set the slot count for player 1's inventory to 10.\nox_inventory:SetSlotCount(1, 10)\n```\n\n----------------------------------------\n\nTITLE: Array From Iterable - Lua\nDESCRIPTION: Creates a new array from an iterable value like functions or tables.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.from(iter)\n```\n\n----------------------------------------\n\nTITLE: Showing a Menu in TypeScript\nDESCRIPTION: Displays a previously registered menu by its id in TypeScript.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/menu.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.showMenu(id);\n```\n\n----------------------------------------\n\nTITLE: Specifying Ox Lib Modules in Lua (Lua)\nDESCRIPTION: Example of specifying Ox Lib modules to import in fxmanifest.lua.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nox_libs {\n    'locale',\n    'math',\n    'table',\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ox Target Server Convars\nDESCRIPTION: Server configuration options for Ox Target using FiveM convars. Controls targeting behavior, hotkeys, visual elements, and debug features.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Toggle targeting when pressing the hotkey, instead of holding it down.\nsetr ox_target:toggleHotkey 0\n\n# Change the key to enable targeting (https://docs.fivem.net/docs/game-references/input-mapper-parameter-ids/keyboard)\nsetr ox_target:defaultHotkey LMENU\n\n# Draw a sprite (circle) at the centroid of a zone.\nsetr ox_target:drawSprite 1\n\n# Enable built-in targeting options, e.g. toggling vehicle doors.\nsetr ox_target:defaults 1\n\n# Enable debugging / testing options, entity outlines, and a raycast indicator.\nsetr ox_target:debug 0\n\n# Enable / Disable leftclick to select options\nsetr ox_target:leftClick 1\n```\n\n----------------------------------------\n\nTITLE: Array Push - Lua\nDESCRIPTION: Adds elements to end of array.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Array/Shared.mdx#2025-04-16_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlib.array.push(arr, ...)\n```\n\n----------------------------------------\n\nTITLE: Saving All Players in Lua\nDESCRIPTION: Saves all players to the database.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Functions/server.mdx#2025-04-16_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nOx.SaveAllPlayers()\n```\n\n----------------------------------------\n\nTITLE: Importing Ox Core in Lua via Require\nDESCRIPTION: Importing Ox Core using ox_lib's require function\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal Ox = require '@ox_core.lib.init'\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install project dependencies using pnpm package manager. This should be run first before starting local development.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Initializing Dui Constructor\nDESCRIPTION: Constructor function for creating a new Dui instance. Takes configuration parameters including URL, dimensions, and debug mode.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Dui/Javascript/Client.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nDui(data)\n```\n\n----------------------------------------\n\nTITLE: Clearing All Radial Menu Items in Lua\nDESCRIPTION: Removes all items from the radial menu, effectively resetting it.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/radial.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlib.clearRadialItems()\n```\n\n----------------------------------------\n\nTITLE: Getting Current Radial Menu ID in TypeScript\nDESCRIPTION: TypeScript implementation for retrieving the ID of the currently open radial menu.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/radial.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlet id = lib.getCurrentRadialId();\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Locale in TypeScript\nDESCRIPTION: Provides an example of importing the locale module, initializing it, and using it to log localized strings at regular intervals in TypeScript.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Locale/Shared.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initLocale, locale } from '@overextended/ox_lib/shared\n\n// Load the locale module\ninitLocale()\n\nsetInterval(() => {\n  console.log(locale('grand_theft_auto'))\n  console.log(locale('suspect_sex', locale('male')))\n}, 5000)\n```\n\n----------------------------------------\n\nTITLE: Hiding TextUI Window in Lua and TypeScript\nDESCRIPTION: Hides the currently visible TextUI window from the screen.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/textui.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlib.hideTextUI()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.hideTextUI();\n```\n\n----------------------------------------\n\nTITLE: Math Library Initialization\nDESCRIPTION: Extends the standard Lua math table with additional functions.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Math/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nmath = lib.math\n```\n\n----------------------------------------\n\nTITLE: Clearing Controls from Disabled List in FiveM\nDESCRIPTION: This method completely removes the specified control(s) from being tracked, regardless of their counter value. It effectively resets the tracking state for the given controls.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/DisableControls/Client.mdx#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlib.disableControls:Clear(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Print Levels Using Convars in Bash\nDESCRIPTION: Shows how to set print levels using convars. These settings determine which severity levels of messages will be printed. Levels can be set globally or per resource, with resource-specific settings overriding the global setting.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Print/Shared.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nset ox:printlevel \"info\"\nset ox:printlevel:ox_inventory \"warn\"\nset ox:printlevel:<resourceName> \"<level>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Connection String in Server Configuration\nDESCRIPTION: Examples of setting the MySQL connection string in the server configuration file. Two formats are provided for flexibility.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Use your preferred format. Make sure you only ever use set.\nset mysql_connection_string \"mysql://root:12345@localhost:3306/fivem\"\nset mysql_connection_string \"user=root;password=12345;host=localhost;port=3306;database=fivem\"\n```\n\n----------------------------------------\n\nTITLE: Setting Account as Shared in Lua\nDESCRIPTION: Converts an account to a shared type, enabling permission assignment to other characters. Returns success status and error message if applicable.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxAccount.mdx#2025-04-16_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\naccount.setShared()\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation of Dependency Check\nDESCRIPTION: Example of checking ox_lib dependency version in TypeScript, including import statement and error handling.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Version/Shared.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/shared'\n// import { checkDependency } from '@overextended/ox_lib/shared'\n\nif (!lib.checkDependency('ox_lib', '1.5.0')) error()\n```\n\n----------------------------------------\n\nTITLE: Creating Phrases with References in JSON\nDESCRIPTION: Demonstrates how to create locale strings that reference other locales to construct phrases in the JSON locale file.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Locale/Shared.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hello\": \"hello %s\",\n  \"my_name_is\": \"my name is %s\",\n  \"hello_my_name_is\": \"${hello}! ${my_name_is}.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding a Menu in TypeScript\nDESCRIPTION: Hides the currently displayed menu in TypeScript, with an optional parameter to trigger the onClose function.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/menu.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.hideMenu(onExit);\n```\n\n----------------------------------------\n\nTITLE: JSON File Structure Example\nDESCRIPTION: Shows an example of a JSON file structure that can be loaded using the lib.loadJson function in Lua.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Require/Shared.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"disconnect\": \"onPlayerDropped\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Locale Module in Lua\nDESCRIPTION: Initializes the locale module in a Lua resource. This should be called once in the resource.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Locale/Shared.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlib.locale()\n```\n\n----------------------------------------\n\nTITLE: Setting Preferred Language in YAML\nDESCRIPTION: Sets the preferred language for the server using a YAML configuration in server.cfg. The language code can be changed to the desired ISO Language Code.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Locale/Shared.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsetr ox:locale en\n```\n\n----------------------------------------\n\nTITLE: Executing MySQL Query with Callback\nDESCRIPTION: Shows how to execute a MySQL query using callback-based syntax to select user data. The query returns firstname and lastname fields filtered by identifier, with results handled in a callback function.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/query.mdx#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nMySQL.query('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', {\n    identifier\n}, function(response)\n    if response then\n        for i = 1, #response do\n            local row = response[i]\n            print(row.firstname, row.lastname)\n        end\n    end\nend)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nMySQL.query('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', [\n  identifier\n], (response) => {\n  if (response) {\n    response.forEach((row) => {\n      console.log(row.firstname, row.lastname)\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing OxMySQL in JavaScript\nDESCRIPTION: Imports the OxMySQL object into a JavaScript resource for use.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql.mdx#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { oxmysql as MySQL } from '@overextended/oxmysql';\n```\n\n----------------------------------------\n\nTITLE: MySQL Performance Testing Script in Lua\nDESCRIPTION: A comprehensive benchmarking script that tests various MySQL query types including transactions, inserts, updates, and selects. The script measures execution time for different query patterns and database operations using the Lua 5.4 runtime with lib/MySQL.lua syntax.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/benchmark.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal function execQuery(msg, fn, query, parameters)\n    local start = os.nanotime()\n    local result = fn(query, parameters)\n    local finish = os.nanotime()\n\n    print()\n    print(msg)\n    print('Executed ' .. (type(query) == 'string' and 1 or #query) .. ' queries in ' .. (finish - start) / 1e6 .. 'ms')\n\n    return result\nend\n\nCreateThread(function()\n    local initTable = {\n        'DROP TABLE `test_table`',\n        [[CREATE TABLE `test_table` (\n        `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,\n        `username` VARCHAR(50) NOT NULL DEFAULT '0',\n        `identifier` VARCHAR(50) NOT NULL DEFAULT '0',\n        PRIMARY KEY (`id`)\n        )]],\n        'TRUNCATE `test_table`',\n        'ALTER TABLE `test_table` AUTO_INCREMENT = 1',\n    }\n\n    execQuery('initialise test_table', MySQL.transaction.await, initTable)\n\n    -- You might rename \"values\" as \"parameters\" for mysql-async compatibility.\n    local queries = {\n        { query = 'INSERT INTO `test_table` (identifier) VALUES (?)', values = { 'abcdef1' }},\n        { query = 'UPDATE `test_table` SET `username` = ? WHERE `id` = LAST_INSERT_ID()', values = { 'bob1' }},\n    }\n\n    execQuery('{ query: string, values: string }[] transaction', MySQL.transaction.await, queries)\n\n    -- You can pass an array of arrays.\n    queries = {\n        { 'INSERT INTO `test_table` (identifier) VALUES (?)', { 'abcdef2' } },\n        { 'UPDATE `test_table` SET `username` = ? WHERE `id` = LAST_INSERT_ID()', { 'bob2' } },\n    }\n\n    execQuery('[string, any[]][] transaction', MySQL.transaction.await, queries)\n\n    -- You can pass an array of queries.\n    queries = {\n        'INSERT INTO `test_table` (identifier) VALUES (\"abcdef3\")',\n        'UPDATE `test_table` SET `username` = \"bob3\" WHERE `id` = LAST_INSERT_ID()',\n    }\n\n    execQuery('string[] transaction', MySQL.transaction.await, queries)\n\n    local insertUsers = {}\n\n    for i = 1, 10000 do\n        insertUsers[i] = { 'INSERT INTO `test_table` (username, identifier) VALUES (?, ?)',\n            { 'Testuser_' .. i, 'abcdef' .. i } }\n    end\n\n    execQuery('insert ' .. #insertUsers .. ' test users', MySQL.transaction.await, insertUsers)\n\n    local selectUserIds = {}\n\n    for i = 1, 10000 do\n        if i % 4 == 0 then\n            selectUserIds[math.tointeger(i / 4)] = { 'abcdef' .. i }\n        end\n    end\n\n    execQuery('select every 4th userid', MySQL.prepare.await, 'SELECT `id` FROM `test_table` WHERE `identifier` = ? LIMIT 1', selectUserIds)\n\n    local insertid = execQuery('insert', MySQL.insert.await, 'INSERT INTO `test_table` (identifier) VALUES (?)', { 'abcdef' })\n    local update = execQuery('update', MySQL.update.await, 'UPDATE `test_table` SET `username` = ? WHERE `id` = ?', { 'bobby', insertid })\n    local scalar = execQuery('scalar', MySQL.scalar.await, 'SELECT `username` FROM `test_table` WHERE `id` = ?', { insertid })\n    local single = execQuery('single', MySQL.single.await, 'SELECT * FROM `test_table` WHERE `id` = ?', { insertid })\n\n    print(json.encode(execQuery('prepare', MySQL.prepare.await, 'SELECT `username` FROM `test_table` WHERE `id` = ?', { insertid })))\n    print(insertid, update, scalar, json.encode(single))\n\n    execQuery('query', MySQL.query.await, 'SELECT `username` FROM `test_table` WHERE `id` = ? LIMIT 1', { 419 })\nend)\n```\n\n----------------------------------------\n\nTITLE: Importing Callback Functions in TypeScript\nDESCRIPTION: Example showing how to import the necessary callback functions from the ox_lib server module.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Callback/JavaScript/Server.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onClientCallback, triggerClientCallback } from '@overextended/ox_lib/server';\n```\n\n----------------------------------------\n\nTITLE: Installing Ox Inventory via Git and Building Source Code\nDESCRIPTION: Commands for cloning the Ox Inventory repository from GitHub and building the web interface using pnpm.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/overextended/ox_inventory.git\ncd ox_inventory/web\npnpm i\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Reducing Player Status in Lua\nDESCRIPTION: Reduces the value of a status by the specified amount and returns a boolean indicating success.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Classes/Server/OxPlayer.mdx#2025-04-16_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nplayer.removeStatus(statusName, value)\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Workspace Library Settings\nDESCRIPTION: This JSON snippet shows how to update the VSCode settings to include the cloned Lua type definitions and ox_lib in the workspace library. This configuration enables proper IntelliSense and type checking for Overextended projects.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/guides/types.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"Lua.workspace.library\": [\n    \"F:/GitHub/ox_types/types\",\n    \"F:/GitHub/ox_lib\"\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Loki Logging in Bash\nDESCRIPTION: Demonstrates the configuration of Grafana Loki logging service by setting the logger type, user credentials, and endpoint using server convars in a bash environment.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Logger/Server.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nset ox:logger \"loki\"\nset loki:user \"<insert your user>\"\nset loki:password \"<insert the api key or password>\"\nset loki:endpoint \"<insert loki url without http:// or https://>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Fivemanage Logging in Bash\nDESCRIPTION: Shows how to set up Fivemanage logging service by configuring the logger type and API key using server convars in a bash environment.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Logger/Server.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nset ox:logger \"fivemanage\"\nset fivemanage:key \"YOUR_API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Executing Scalar Query with Callback in JavaScript\nDESCRIPTION: Demonstrates how to perform a scalar query using a callback-based approach in JavaScript. It retrieves the first name from the users table using an identifier.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/scalar.mdx#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nMySQL.scalar('SELECT `firstname` FROM `users` WHERE `identifier` = ? LIMIT 1', [\n  identifier\n], (firstName) => {\n  console.log(firstName)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Player Save Events in Lua\nDESCRIPTION: Event triggered when players are saved to the database, providing the number of players saved.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_core/Events/server.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction(playersSaved: number)\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Ox Lib (Bash)\nDESCRIPTION: Commands to clone the Ox Lib repository, install dependencies, and build the project using pnpm.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/overextended/ox_lib.git\ncd ox_lib/web\npnpm i\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Ox Doorlock from Source\nDESCRIPTION: Commands to clone the Ox Doorlock repository and build the web interface using pnpm package manager. Requires Git and Node.js to be installed.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_doorlock.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/overextended/ox_doorlock.git\ncd ox_doorlock/web\npnpm i\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Setting Primary UI Colors with Convars in YAML\nDESCRIPTION: These convars allow you to change the primary color and shade of the UI interface without rebuilding it. The changes affect elements like progress bars, skill checks, radial menus, dialog buttons, input fields, and more.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsetr ox:primaryColor blue\nsetr ox:primaryShade 8\n```\n\n----------------------------------------\n\nTITLE: Executing Prepared MySQL Query with Callback in JavaScript\nDESCRIPTION: This snippet shows how to use the MySQL.prepare method with a callback function to execute a prepared query and retrieve user data in JavaScript. It logs the response as JSON within the callback.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/prepare.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMySQL.prepare('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', [\n  identifier\n], (response) => {\n  console.log(JSON.stringify(response))\n})\n```\n\n----------------------------------------\n\nTITLE: Converting Item Data Format in Lua\nDESCRIPTION: Converts traditional item data to support ox_inventory format.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Functions/Server.mdx#2025-04-16_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:ConvertItems(playerId, items)\n```\n\n----------------------------------------\n\nTITLE: Number Rounding\nDESCRIPTION: Rounds a number to specified decimal places or to whole number if places not specified.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Math/Shared.mdx#2025-04-16_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nmath.round(value, places)\n```\n\n----------------------------------------\n\nTITLE: Rendering Team Members Component in JSX\nDESCRIPTION: A simple component call to display team members. The DisplayMembers component likely fetches and renders information about Overextended team members.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DisplayMembers/>\n```\n\n----------------------------------------\n\nTITLE: Handling Weapon Component Updates Event in Lua\nDESCRIPTION: Event handler for weapon component changes. Receives action type, component hash, and component item identifier.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Events/Client.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nAddEventHandler('ox_inventory:updateWeaponComponent', function(action, componentHash, componentItem) end)\n```\n\n----------------------------------------\n\nTITLE: Cloning Ox Target Repository\nDESCRIPTION: Git command to clone the Ox Target resource repository to your local machine.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_target.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/overextended/ox_target.git\n```\n\n----------------------------------------\n\nTITLE: Modifying Debug Resource List with Commands\nDESCRIPTION: Commands to temporarily modify the list of resources for which debug queries are printed.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\noxmysql_debug remove ox_core\noxmysql_debug add ox_core\n```\n\n----------------------------------------\n\nTITLE: Rendering Creator Codes Component with Array Data in JSX\nDESCRIPTION: This component renders a list of creator codes with their associated information. Each entry includes creator name, store URL, discount code, percentage discount, and an image path.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{CreatorCodes([\n  [\"Andyyy\", \"https://andyyy.tebex.io/\", \"ox20\", 20 , \"/static/creators/andy.png\"],\n  [\"Berkie's Workshop\", \"https://berkie.tebex.io/\", \"ox10\", 10 , \"/static/creators/berkie.png\"],\n  [\"Dolu Mods\", \"https://dolu.tebex.io/\", \"overextended\", 25 , \"/static/creators/dolu.png\"],\n  [\"Electus Scripts\", \"https://store.electus-scripts.com/\", \"ox10\", 10 , \"/static/creators/electus.png\"],\n  [\"Loaf Scripts\", \"https://store.loaf-scripts.com/\", \"ox10\", 10 , \"/static/creators/loaf.png\"],\n  [\"OT Studios\", \"https://store.otstudios.net/ox\", \"ox10\", 10 , \"/static/creators/otstudios.png\"],\n  [\"Randolio Scripts\", \"https://randolio.tebex.io/\", \"OVEREXTENDED\", 20 , \"/static/creators/randolio.png\"],\n  [\"rcore\", \"https://store.rcore.cz/\", \"ox10\", 10 , \"/static/creators/rcore.png\"],\n  [\"Artwork Inventory\", \"https://artwork-inventory.tebex.io/\", \"ox10\", 10 , \"/static/creators/artworkInventory.gif\"],\n  [\"Renewed Scripts\", \"https://renewed.tebex.io/ox\", \"ox15\", 15 , \"/static/creators/renewed.png\"],\n  [\"Wasabi Scripts\", \"https://store.wasabiscripts.com/ox\", \"OX20\", 20 , \"/static/creators/wasabi.png\"],\n  [\"Three Amigos Modding\", \"https://threeamigos.shop/\", \"overextended\", 10, \"/static/creators/tam.png\"],\n  [\"RAHE Development\", \"https://rahe.tebex.io/\", \"ox10\", 10, \"/static/creators/rahe.png\"],\n  [\"Qwaly Scripts\", \"https://qwaly.dev/\", \"ox10\", 10, \"/static/creators/qwaly.png\"],\n  [\"Ehbw Scripts\", \"https://ehbw.tebex.io/\", \"ox10\", 10, \"/static/creators/ehbw.png\"],\n  [\"Lation Scripts\", \"https://lationscripts.com/\", \"ox10\", 10, \"/static/creators/lation.png\"],\n  [\"Fuksus\", \"https://resources.fuksus.com/\", \"OX15\", 15, \"/static/creators/fuksus.png\"],\n  [\"TeamsGG\", \"https://teamsgg.dev/\", \"ox10\", 10, \"/static/creators/teamsgg.png\"],\n  [\"MadCap Scripts\", \"https://madcap-scripts.tebex.io/\", \"ox10\", 10, \"/static/creators/madcap.png\"],\n  [\"Stevo Scripts\", \"https://store.stevoscripts.com/\", \"overextended\", 10, \"/static/creators/steve.png\"],\n  [\"Inferno Collection\", \"https://store.inferno-collection.com/\", \"ox7\", 7, \"/static/creators/inferno.png\"]\n])}\n```\n\n----------------------------------------\n\nTITLE: Skill Check Usage Example in JavaScript\nDESCRIPTION: Example showing how to run a sequence of skill checks with varying difficulty levels and custom key bindings in JavaScript. Returns a promise that resolves to a success boolean.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/skillcheck.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nconst success = await lib.skillCheck(\n  ['easy', 'easy', { areaSize: 60, speedMultiplier: 2 }, 'hard'],\n  ['w', 'a', 's', 'd']\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Scripts in package.json for pnpm Usage\nDESCRIPTION: This JSON snippet shows a typical 'scripts' section in a package.json file, defining various commands that can be executed using pnpm. It includes scripts for starting a development server, watching for changes, building the project, previewing the build, and formatting code.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/guides/pnpm.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"start\": \"vite\",\n  \"watch\": \"vite build --watch\",\n  \"build\": \"tsc && vite build\",\n  \"preview\": \"vite preview\",\n  \"format\": \"prettier --write \\\"./src/**/*.{ts,tsx,css}\\\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Lua Type Definitions Repository\nDESCRIPTION: This command clones the ox_types repository containing Lua type definitions for Overextended projects. It's essential for proper code completion and type checking in the development environment.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/guides/types.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/overextended/ox_types.git`\n```\n\n----------------------------------------\n\nTITLE: Cloning Ox Fuel Repository Using Git\nDESCRIPTION: Command to clone the Ox Fuel resource repository from GitHub to your local environment.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_fuel.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/overextended/ox_fuel.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog Logging in Bash\nDESCRIPTION: Shows how to set up Datadog logging by configuring the API key and Datadog site using server convars in a bash environment.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Logger/Server.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nset datadog:key \"yourapikey\"\nset datadog:site \"datadoghq.com\"\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Team Member Display and Creator Codes\nDESCRIPTION: This snippet imports React components used to display team members and creator codes. The components handle the rendering of team information and creator code details on the introduction page.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DisplayMembers from '@components/DisplayMembers';\nimport CreatorCode from '@components/CreatorCode';\nimport CreatorCodes from '@components/CreatorCodes';\n```\n\n----------------------------------------\n\nTITLE: React Component Import Statement\nDESCRIPTION: Import statement for custom button components used in the documentation interface.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/guides/vscode.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DownloadButton, GhButton, DocButton } from '@components/button';\n```\n\n----------------------------------------\n\nTITLE: Configuring Slow Query Warnings in Server Configuration\nDESCRIPTION: Sets a threshold for slow query warnings. Queries exceeding this time (in milliseconds) will trigger a warning.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nset mysql_slow_query_warning 150\n```\n\n----------------------------------------\n\nTITLE: Including OxMySQL Library in Lua Resource\nDESCRIPTION: Modifies the fxmanifest.lua file to include the OxMySQL library for Lua resources.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nserver_script '@oxmysql/lib/MySQL.lua'\n```\n\n----------------------------------------\n\nTITLE: Installing OxMySQL NPM Package for JavaScript\nDESCRIPTION: Commands to install the OxMySQL NPM package for JavaScript resources using different package managers.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# With pnpm\npnpm add @overextended/oxmysql\n\n# With Yarn\nyarn add @overextended/oxmysql\n\n# With npm\nnpm install @overextended/oxmysql\n```\n\n----------------------------------------\n\nTITLE: Configuring Ox Lib Server Convars (Bash)\nDESCRIPTION: Server configuration using convars to set primary color, shade, and user locale options.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsetr ox:primaryColor blue\nsetr ox:primaryShade 8\nsetr ox:userLocales 1 # Allow users to select their locales using /ox_lib\n```\n\n----------------------------------------\n\nTITLE: MySQL Benchmark Results Output\nDESCRIPTION: Results showing execution times for various MySQL operations including table initialization, transactions, bulk inserts, and individual queries. Times are measured in milliseconds.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/benchmark.mdx#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n[script:test] initialise test_table\n[script:test] Executed 4 queries in 42.7789ms\n[script:test]\n[script:test] { query: string, values: string }[] transaction\n[script:test] Executed 2 queries in 8.0145ms\n[script:test]\n[script:test] [string, any[]][] transaction\n[script:test] Executed 2 queries in 4.0278ms\n[script:test]\n[script:test] string[] transaction\n[script:test] Executed 2 queries in 3.4743ms\n[script:test]\n[script:test] insert 10000 test users\n[script:test] Executed 10000 queries in 2064.211ms\n[script:test]\n[script:test] select every 4th userid\n[script:test] Executed 1 queries in 2803.7134ms\n[script:test]\n[script:test] insert\n[script:test] Executed 1 queries in 2.8743ms\n[script:test]\n[script:test] update\n[script:test] Executed 1 queries in 2.8675ms\n[script:test]\n[script:test] scalar\n[script:test] Executed 1 queries in 1.5387ms\n[script:test]\n[script:test] single\n[script:test] Executed 1 queries in 1.3389ms\n[script:test]\n[script:test] prepare\n[script:test] Executed 1 queries in 1.6577ms\n[script:test] \"bobby\"\n[script:test] 10004    1       bobby   {\"identifier\":\"abcdef\",\"username\":\"bobby\",\"id\":10004}\n[script:test]\n[script:test] query\n[script:test] Executed 1 queries in 1.1588ms\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Metadata Display\nDESCRIPTION: Sets up custom metadata display configuration for showing Pokemon card statistics in the inventory.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Guides/metadata.mdx#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nexports.ox_inventory:displayMetadata({\n    hp = 'HP',\n    attack = 'ATK',\n    defense = 'DEF'\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Custom App Component\nDESCRIPTION: Custom App component that wraps all pages in Next.js application and imports global CSS styles. This component enables shared layouts and global state management across pages.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/_app.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport '../index.css';\n\nexport default function MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring server.cfg for Qbox and ox_inventory\nDESCRIPTION: Instructions for setting up the server configuration file to use Qbox with ox_inventory. This includes setting the inventory framework and specifying the load order for resources.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_inventory/Frameworks/qbx.mdx#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsetr inventory:framework \"qbx\"\n# Start ox_inventory immediately after qbx_core\n```\n\n----------------------------------------\n\nTITLE: Executing Scalar Query with Callback in Lua\nDESCRIPTION: Illustrates how to execute a scalar query using a callback-based approach in Lua. It fetches the first name from the users table based on an identifier.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/oxmysql/Functions/scalar.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nMySQL.scalar('SELECT `firstname` FROM `users` WHERE `identifier` = ? LIMIT 1', {\n    identifier\n}, function(firstName)\n    print(firstName)\nend)\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js Installation via Command Line\nDESCRIPTION: Command to verify that Node.js has been successfully installed by checking the installed version. This should be run in a command-line terminal after installation is complete.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/guides/nodejs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start the local development server using pnpm. After running this command, the documentation will be available at localhost:3000.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Registering Context Menu in Lua/JS\nDESCRIPTION: Core function for registering a context menu with various configuration options including title, options, events and metadata.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/context.mdx#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlib.registerContext(context)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.registerContext(context);\n```\n\n----------------------------------------\n\nTITLE: Setting Menu Options in TypeScript\nDESCRIPTION: Updates the options of a registered menu in TypeScript. Can replace all options or update a specific option by index.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/menu.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport lib from '@overextended/ox_lib/client';\n\nlib.setMenuOptions(id, options, index);\n```\n\n----------------------------------------\n\nTITLE: Checking if Progress is Active in TypeScript\nDESCRIPTION: TypeScript implementation to check if a progress bar is currently active. Returns a boolean indicating active state.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/progress.mdx#2025-04-16_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport lib from '@overextended/ox_lib/client'\n\nlib.progressActive()\n```\n\n----------------------------------------\n\nTITLE: Showing a Menu in Lua\nDESCRIPTION: Displays a previously registered menu by its id in Lua.\nSOURCE: https://github.com/overextended/overextended.github.io/blob/main/pages/ox_lib/Modules/Interface/Client/menu.mdx#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlib.showMenu(id)\n```"
  }
]