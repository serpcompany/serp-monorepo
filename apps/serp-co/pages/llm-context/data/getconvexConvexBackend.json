[
  {
    "owner": "get-convex",
    "repo": "convex-backend",
    "content": "TITLE: Constructing a Mutation with Handler Function\nDESCRIPTION: This example shows how to use the mutation constructor to create a mutation with a handler function. The handler function performs the actual mutation logic.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/mutation-functions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\n\nconst myMutation = mutation({\n  handler: async (ctx) => {\n    // Perform mutation logic here\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Mutation Arguments without Validation in JavaScript\nDESCRIPTION: This snippet shows how to define a mutation with named arguments without validation in JavaScript. The arguments are accessed as fields of the second parameter in the handler function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/mutation-functions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\n\nexport const addMessage = mutation({\n  handler: async (ctx, { body, author }) => {\n    const messageId = await ctx.db.insert(\"messages\", { body, author });\n    return messageId;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React\nDESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/dall-e-storage-action/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a Query with the query Function\nDESCRIPTION: This example shows how to use the query constructor function to declare a query in Convex, passing an object with a handler function that returns the query result.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/query-functions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { query } from \"./_generated/server\";\n\nexport const myQuery = query({\n  // The query's implementation is defined in the `handler` function.\n  handler: async (ctx) => {\n    // Implement your query here!\n    return \"Hello from Convex!\";\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function\nDESCRIPTION: Example of creating a Convex query function that retrieves tasks from a task list, demonstrating database querying and type safety.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/workflow.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\n// Return the last 100 tasks in a given task list.\nexport const getTaskList = query({\n  args: { taskListId: v.id(\"taskLists\") },\n  handler: async (ctx, args) => {\n    const tasks = await ctx.db\n      .query(\"tasks\")\n      .withIndex(\"taskListId\", (q) => q.eq(\"taskListId\", args.taskListId))\n      .order(\"desc\")\n      .take(100);\n    return tasks;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex (TypeScript)\nDESCRIPTION: Demonstrates how to create a mutation function that modifies data in the database. The function validates input parameters, inserts a new document into a collection, and optionally returns the created document.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/snippets/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex that takes two arguments. It shows the structure including argument validation, database querying, and result processing.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/tanstack-start/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function in Convex that takes number and string arguments. The function collects documents from a database table and returns them, while showing how to access arguments and perform database operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/empty/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Action Constructor\nDESCRIPTION: Shows how to declare a basic action using the action constructor function with a handler.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/actions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const myAction = action({\n  handler: async (ctx) => {\n    // Perform the action\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing AI Agents and Workflows with Convex in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define an AI agent, create and continue threads, and implement a workflow using Convex components. It showcases the integration of OpenAI models, custom tools, and Convex's action and workflow systems.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/agents.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Define an agent similarly to the AI SDK\nconst supportAgent = new Agent(components.agent, {\n  chat: openai.chat(\"gpt-4o-mini\"),\n  textEmbedding: openai.embedding(\"text-embedding-3-small\"),\n  instructions: \"You are a helpful assistant.\",\n  tools: { accountLookup, fileTicket, sendEmail },\n});\n\n// Use the agent from within a normal action:\nexport const createThread = action({\n  args: { prompt: v.string() },\n  handler: async (ctx, { prompt }) => {\n    const { threadId, thread } = await supportAgent.createThread(ctx);\n    const result = await thread.generateText({ prompt });\n    return { threadId, text: result.text };\n  },\n});\n\n// Pick up where you left off, with the same or a different agent:\nexport const continueThread = action({\n  args: { prompt: v.string(), threadId: v.string() },\n  handler: async (ctx, { prompt, threadId }) => {\n    // This includes previous message history from the thread automatically.\n    const { thread } = await anotherAgent.continueThread(ctx, { threadId });\n    const result = await thread.generateText({ prompt });\n    return result.text;\n  },\n});\n\n// Or use it within a workflow, specific to a user:\nexport const supportAgentStep = supportAgent.asAction({ maxSteps: 10 });\n\nconst workflow = new WorkflowManager(components.workflow);\nconst s = internal.example; // where steps are defined\n\nexport const supportAgentWorkflow = workflow.define({\n  args: { prompt: v.string(), userId: v.string(), threadId: v.string() },\n  handler: async (step, { prompt, userId, threadId }) => {\n    const suggestion = await step.runAction(s.supportAgentStep, {\n      threadId,\n      generateText: { prompt },\n    });\n    const polished = await step.runAction(s.adaptSuggestionForUser, {\n      suggestion,\n      userId,\n    });\n    await step.runMutation(s.sendUserMessage, {\n      userId,\n      message: polished.message,\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Management with Convex Query and Mutation Functions\nDESCRIPTION: Example of Convex server functions that handle task management, including a query to fetch open tasks and a mutation to update task completion status. Demonstrates database querying and updates using TypeScript.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// A Convex query function\nexport const getAllOpenTasks = query({\n  args: {},\n  handler: async (ctx, args) => {\n    // Query the database to get all items that are not completed\n    const tasks = await ctx.db\n      .query(\"tasks\")\n      .withIndex(\"by_completed\", (q) => q.eq(\"completed\", false))\n      .collect();\n    return tasks;\n  },\n});\n\n// A Convex mutation function\nexport const setTaskCompleted = mutation({\n  args: { taskId: v.id(\"tasks\"), completed: v.boolean() },\n  handler: async (ctx, { taskId, completed }) => {\n    // Update the database using TypeScript\n    await ctx.db.patch(taskId, { completed });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting React App to Convex Backend (TypeScript)\nDESCRIPTION: TypeScript code to set up the Convex client and provider in a React application's main file.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { ConvexProvider, ConvexReactClient } from \"convex/react\";\n\nconst convex = new ConvexReactClient(import.meta.env.VITE_CONVEX_URL);\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <ConvexProvider client={convex}>\n      <App />\n    </ConvexProvider>\n  </React.StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Database in Convex Query\nDESCRIPTION: This example demonstrates how to use the db field of the query context to fetch data from the database, making the handler function asynchronous to await the promise returned by db.get().\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/query-functions.mdx#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const getMessage = query({\n  args: { id: v.id(\"messages\") },\n  handler: async (ctx, args) => {\n    return await ctx.db.get(args.id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation of Conversation API Functions (TypeScript)\nDESCRIPTION: This snippet shows how to implement the public API for conversations using the helper functions from the model. It demonstrates a clean separation of concerns and improved code organization.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Conversations from './model/conversations';\n\nexport const createConversation = mutation(\n  async ({ auth, ...ctx }, args: { name: string }) => {\n    const identity = await auth.getUserIdentity();\n    if (!identity) {\n      throw new Error(\"Unauthenticated\");\n    }\n    return Conversations.createConversation(ctx, {\n      name: args.name,\n      tokenIdentifier: identity.tokenIdentifier,\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Calling Queries from React Client\nDESCRIPTION: This snippet demonstrates how to call a Convex query from a React client using the useQuery hook along with the generated api object, showcasing client-side integration.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/query-functions.mdx#2025-04-21_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useQuery } from \"convex/react\";\nimport { api } from \"../convex/_generated/api\";\n\nexport default function App() {\n  const result = useQuery(api.myFunctions.myQuery, { arg1: \"hello\", arg2: 123 });\n  if (result === undefined) {\n    return <p>Loading...</p>;\n  }\n  return <p>The result is {result}!</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex that takes two arguments. It includes argument validation, database querying, and data processing.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/convex-tour-chat-tutorial/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Convex Version\nDESCRIPTION: Command to update Convex to the latest version using npm.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/bundling.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install convex@latest\n```\n\n----------------------------------------\n\nTITLE: Handling Mutation Responses and Errors in React\nDESCRIPTION: Shows how to handle responses and errors from mutations using async/await or Promises in a React component.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport function App() {\n  const doSomething = useMutation(api.functions.doSomething);\n  const onClick = () => {\n    async function callBackend() {\n      try {\n        const result = await doSomething();\n      } catch (error) {\n        console.error(error);\n      }\n      console.log(result);\n    }\n    void callBackend();\n  };\n  return <button onClick={onClick}>Click me</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Action with Arguments and Validation\nDESCRIPTION: Demonstrates how to define an action with validated arguments using TypeScript.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/actions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const myAction = action({\n  args: {\n    name: v.string(),\n    age: v.number(),\n  },\n  handler: async (ctx, args) => {\n    // Use args.name and args.age\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Sending Mutation - TypeScript\nDESCRIPTION: Backend mutation function for sending chat messages, implementing database insertion with type checking and error handling\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/tutorial/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const sendMessage = mutation({\n  args: {\n    user: v.string(),\n    body: v.string(),\n  },\n  handler: async (ctx, args) => {\n    console.log(\"This TypeScript function is running on the server.\");\n    await ctx.db.insert(\"messages\", {\n      user: args.user,\n      body: args.body,\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function that takes two arguments and reads from the database. The function includes argument validation using Convex's validation utilities and shows how to access the database context to query data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-old/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook with typed arguments.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/relational-data-modeling/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Router with Convex Authentication\nDESCRIPTION: Router configuration file that sets up the context for Convex authentication with Clerk tokens. Includes type definitions and router creation with authentication context.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/tanstack-start/clerk.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConvexReactClient } from \"convex/react\";\nimport { QueryClient } from \"@tanstack/react-query\";\nimport { ConvexQueryClient } from \"convex/browser/sync\";\nimport { ReactRouter, createReactRouter } from \"@tanstack/react-router\";\n\ndeclare module \"@tanstack/react-router\" {\n  interface Register {\n    router: ReturnType<typeof createRouter>;\n  }\n}\n\nexport const convex = new ConvexReactClient(import.meta.env.VITE_CONVEX_URL);\nexport const convexQueryClient = new ConvexQueryClient(convex);\nexport const queryClient = new QueryClient();\n\nexport const router = createReactRouter({\n  context: {\n    auth: null as any,\n    queryClient,\n    convexQueryClient,\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React Component (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use a Convex mutation function within a React component. It shows both fire-and-forget usage and handling the result of the mutation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/components-poc/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Convex System Tables using db.system Methods\nDESCRIPTION: This snippet demonstrates how to use db.system.get and db.system.query methods to read data from Convex system tables. These methods work similarly to standard db.get and db.query methods, providing reactive and realtime queries with pagination support.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/advanced/system-tables.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndb.system.get(\"_scheduled_functions\", id);\ndb.system.query(\"_storage\", q => q.withIndex(\"by_creation_time\"));\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Various Data Types in TypeScript\nDESCRIPTION: Example of defining a schema with different data types using the validator builder 'v' from Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/schemas.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSchema, defineTable } from \"convex/server\";\nimport { v } from \"convex/values\";\n\nexport default defineSchema({\n  documents: defineTable({\n    id: v.id(\"documents\"),\n    string: v.string(),\n    number: v.number(),\n    boolean: v.boolean(),\n    nestedObject: v.object({\n      property: v.string(),\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with useQuery Hook in React\nDESCRIPTION: Demonstrates how to use the useQuery hook to fetch data from a Convex backend in a React component.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery } from \"convex/react\";\nimport { api } from \"../convex/_generated/api\";\n\nexport function App() {\n  const data = useQuery(api.functions.myQuery);\n  return data ?? \"Loading...\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Tables in TypeScript\nDESCRIPTION: Example of defining a schema with 'messages' and 'users' tables using the defineSchema and defineTable functions from Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/schemas.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSchema, defineTable } from \"convex/server\";\nimport { v } from \"convex/values\";\n\nexport default defineSchema({\n  messages: defineTable({\n    body: v.string(),\n    user: v.id(\"users\"),\n  }),\n  users: defineTable({\n    name: v.string(),\n    tokenIdentifier: v.string(),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function\nDESCRIPTION: Example of a mutation function that handles data modifications, showing how to insert records and return the result. Includes argument validation for two string parameters.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/2-likes/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Top Scoring Players Using Index in TypeScript\nDESCRIPTION: This code snippet shows how to use the previously defined index to efficiently query the top 10 highest scoring players. It uses the 'withIndex' method along with 'order' and 'take' to limit the result set.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst topScoringPlayers = await ctx.db\n  .query(\"users\")\n  .withIndex(\"by_highest_score\")\n  .order(\"desc\")\n  .take(10);\n```\n\n----------------------------------------\n\nTITLE: User Storage Mutation Implementation\nDESCRIPTION: Mutation function for storing user data including name and tokenIdentifier, with authentication checks.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/database-auth.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\n\nexport const store = mutation(async ({ db, auth }) => {\n  const identity = await auth.getUserIdentity();\n  if (!identity) {\n    throw new Error(\"Called storeUser without authentication present\");\n  }\n  \n  // Check if we've already stored this identity before.\n  const user = await db\n    .query(\"users\")\n    .withIndex(\"by_token\", q =>\n      q.eq(\"tokenIdentifier\", identity.tokenIdentifier)\n    )\n    .unique();\n  if (user !== null) {\n    // If we've seen this identity before but the name has changed, patch the value.\n    if (user.name !== identity.name) {\n      await db.patch(user._id, { name: identity.name });\n    }\n    return user._id;\n  }\n  // If it's a new identity, create a new document.\n  return await db.insert(\"users\", {\n    name: identity.name!,\n    tokenIdentifier: identity.tokenIdentifier,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Action Context Usage\nDESCRIPTION: Shows how to use the ActionCtx object to access various Convex features within an action.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/actions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const myAction = action({\n  handler: async (ctx) => {\n    // Access various fields on ctx\n    ctx.runQuery();\n    ctx.runMutation();\n    ctx.storage;\n    ctx.auth;\n    ctx.scheduler;\n    ctx.vectorSearch;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Convex React Client and Provider\nDESCRIPTION: Creates a new ConvexReactClient instance and wraps the app with a ConvexProvider to make the client available throughout the component tree.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ConvexProvider, ConvexReactClient } from \"convex/react\";\n\nconst convex = new ConvexReactClient(\"https://<your domain here>.convex.cloud\");\n\nreactDOMRoot.render(\n  <React.StrictMode>\n    <ConvexProvider client={convex}>\n      <App />\n    </ConvexProvider>\n  </React.StrictMode>,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Mutation in Convex\nDESCRIPTION: This snippet demonstrates how to define a basic mutation in Convex using the mutation constructor. It includes a handler function that takes arguments and performs database operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/mutation-functions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\n\nexport const addMessage = mutation({\n  handler: async (ctx, { body, author }) => {\n    const messageId = await ctx.db.insert(\"messages\", { body, author });\n    return messageId;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Wikipedia Summary Action in TypeScript\nDESCRIPTION: Creates an internal action function that fetches and parses Wikipedia article summaries using the Wikipedia API. Includes helper function to extract summary from response JSON.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/tutorial/actions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query, mutation, internalAction } from \"./_generated/server\";\n\nexport const getWikipediaSummary = internalAction({\n  args: { topic: v.string() },\n  handler: async (ctx, args) => {\n    const response = await fetch(\n      \"https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=\" +\n        args.topic,\n    );\n\n    return getSummaryFromJSON(await response.json());\n  },\n});\n\nfunction getSummaryFromJSON(data: any) {\n  const firstPageId = Object.keys(data.query.pages)[0];\n  return data.query.pages[firstPageId].extract;\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Convex Query in TypeScript\nDESCRIPTION: TypeScript code to define a query function that retrieves tasks from the Convex database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\n\nexport const get = query(async ({ db }) => {\n  return await db.query(\"tasks\").collect();\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Query Function in a React Component (TypeScript)\nDESCRIPTION: This snippet shows how to use a Convex query function within a React component. It demonstrates passing arguments to the query function using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-facepile/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Editing Data with useMutation Hook in React\nDESCRIPTION: Demonstrates how to use the useMutation hook to edit data in a Convex backend from a React component.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMutation } from \"convex/react\";\nimport { api } from \"../convex/_generated/api\";\n\nexport function App() {\n  const doSomething = useMutation(api.functions.doSomething);\n  return <button onClick={() => doSomething()}>Click me</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation Functions in React\nDESCRIPTION: Example of how to use a Convex mutation function within a React component using the useMutation hook. Demonstrates both fire-and-forget usage and handling the returned promise with results.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir-14/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Example of a Convex mutation function that handles data modifications. Shows argument validation and database insertion operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/nextjs-app-router/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Action with Query Execution\nDESCRIPTION: Demonstrates how to run a query from within an action using context.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/actions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const readData = internalQuery({\n  handler: async (ctx) => {\n    // Read from database\n    return null;\n  },\n});\n\nexport const myAction = action({\n  handler: async (ctx) => {\n    const result = await ctx.runQuery(readData);\n    // Use result\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook with typed arguments.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/bundle-size/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination for Large Dataset Queries in Convex\nDESCRIPTION: Demonstrates how to use pagination to efficiently query large datasets in Convex. This approach allows for loading data in manageable chunks, improving performance and user experience.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const paginateMovies = query(async ({ db }, { cursor }) => {\n  const { page, continueCursor } = await db\n    .query(\"movies\")\n    .paginate({ numItems: 100, cursor });\n  return { movies: page, continueCursor };\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Convex Query with TanStack Query in React\nDESCRIPTION: This snippet demonstrates how to use the TanStack Query useQuery hook with Convex to subscribe to a query function. It provides real-time updates without manual polling.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/tanstack-query.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, isPending, error } = useQuery(convexQuery(api.messages.list, {}));\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex (TypeScript)\nDESCRIPTION: Illustrates the creation of a mutation function in Convex, including argument validation and database writing operations. The function inserts a new message into the database and returns the inserted document.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/react-vite/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Router for Exposing Actions in TypeScript\nDESCRIPTION: This snippet shows how to create an HttpRouter instance and expose HTTP actions using the route method. It demonstrates the setup required in the convex/http.ts file to make actions accessible via HTTP endpoints.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/http-actions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { httpRouter } from \"convex/server\";\nimport { postMessage } from \"./messages\";\n\nconst http = httpRouter();\n\nhttp.route({\n  path: \"/postMessage\",\n  method: \"POST\",\n  handler: postMessage,\n});\n\nexport default http;\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation of Batched Mutation (TypeScript)\nDESCRIPTION: This example demonstrates the correct way to implement a batched mutation for adding multiple users to a team. It improves consistency and performance by using a single runMutation call.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Users from './model/users';\n\nexport const addUsersToTeam = action(\n  async (\n    { runMutation },\n    { teamId, userIds }: { teamId: Id<\"teams\">; userIds: Id<\"users\">[] }\n  ) => {\n    await runMutation(async (ctx) => {\n      for (const userId of userIds) {\n        await Users.addToTeam(ctx, { userId, teamId });\n      }\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Validating Query Arguments with v Validators\nDESCRIPTION: This example demonstrates how to declare and validate the types of arguments in a query using the args object with v validators, ensuring type safety and runtime validation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/query-functions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQuery = query({\n  args: {\n    firstName: v.string(),\n    lastName: v.string(),\n  },\n  handler: async (ctx, args) => {\n    // Now TypeScript knows the types of `args.firstName` and `args.lastName`\n    // and Convex will validate the arguments at runtime.\n    return `Hello ${args.firstName} ${args.lastName}!`;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting Frontend to Convex Backend - React TypeScript\nDESCRIPTION: React component implementation showing how to integrate Convex mutations with the frontend UI\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/tutorial/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMutation } from \"convex/react\";\nimport { api } from \"../convex/_generated/api\";\n\nexport default function App() {\n  const sendMessage = useMutation(api.chat.sendMessage);\n\n  return (\n    <main className=\"chat\">\n      {/* ... */}\n      <form\n        onSubmit={async (e) => {\n          e.preventDefault();\n          await sendMessage({ user: NAME, body: newMessageText });\n          setNewMessageText(\"\");\n        }}\n      >\n        {/* ... */}\n      </form>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query in React Native Component\nDESCRIPTION: Use the useQuery hook to fetch tasks from the Convex backend and display them in a React Native component.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react-native.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport index from \"!!raw-loader!@site/../private-demos/quickstarts/expo/app/index.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Defining Mutation Arguments with Validation\nDESCRIPTION: This example demonstrates how to define and validate mutation arguments using the 'v' validators in Convex. It ensures that the input types are correct before executing the mutation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/mutation-functions.mdx#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const addMessage = mutation({\n  args: {\n    body: v.string(),\n    author: v.string(),\n  },\n  handler: async (ctx, { body, author }) => {\n    const messageId = await ctx.db.insert(\"messages\", { body, author });\n    return messageId;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Mutation Context\nDESCRIPTION: This snippet shows how to access and use the mutation context in a Convex mutation. The context provides access to various Convex features like database operations and authentication.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/mutation-functions.mdx#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\n\nexport const myMutation = mutation({\n  handler: async (ctx) => {\n    // Use ctx to access Convex features\n    const result = await ctx.db.insert(\"myTable\", { field: \"value\" });\n    return result;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Convex Query Function in TypeScript\nDESCRIPTION: Create a TypeScript file in the convex/ folder to define a query function that retrieves tasks from the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/remix.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\n\nexport const get = query(async ({ db }) => {\n  return await db.query(\"tasks\").collect();\n});\n```\n\n----------------------------------------\n\nTITLE: Storing Generated Image in Convex Action (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to fetch an image from an external API, store it in Convex storage, and save its metadata in the database. It uses the storage.store() method to save the image and a mutation to store the metadata.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/file-storage/store-files.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v } from \"convex/values\";\nimport { action } from \"./_generated/server\";\n\nexport const store = action(async (ctx, args) => {\n  const { prompt } = args;\n\n  // Fetch image from third-party API\n  const response = await fetch(\"https://example.com/generate-image\", {\n    method: \"POST\",\n    body: JSON.stringify({ prompt }),\n  });\n  if (!response.ok) {\n    throw new Error(`Failed to generate image: ${response.statusText}`);\n  }\n  const image = await response.arrayBuffer();\n\n  // Store image in Convex File Storage\n  const storageId = await ctx.storage.store(image);\n\n  // Save metadata about image to database\n  const documentId = await ctx.runMutation(async ({ insert }) => {\n    return insert(\"images\", {\n      storageId,\n      prompt,\n    });\n  });\n\n  return { documentId, storageId };\n});\n\nstore.args = {\n  prompt: v.string(),\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Documents by Reference in Convex\nDESCRIPTION: Shows how to query for documents based on reference fields using the filter method.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/document-ids.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst myBooks = await ctx.db\n  .query(\"books\")\n  .filter((q) => q.eq(q.field(\"ownerId\"), user._id))\n  .collect();\n```\n\n----------------------------------------\n\nTITLE: Defining Cron Jobs in Convex TypeScript\nDESCRIPTION: This snippet demonstrates how to define cron jobs in a Convex project using the crons.ts file. It shows various scheduling options including interval-based, traditional cron syntax, and named schedules for common intervals.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/scheduling/cron-jobs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cronJobs } from \"convex/server\";\n\nconst crons = cronJobs();\n\ncrons.interval(\n  \"every-minute\",\n  { minutes: 1 },\n  \"backend:cleanUpExpiredSessions\"\n);\n\ncrons.cron(\n  \"every-hour-on-the-half-hour\",\n  \"30 * * * *\",\n  \"backend:generateHourlyReport\"\n);\n\ncrons.daily(\n  \"daily-at-midnight-utc\",\n  { hour: 0 },\n  \"backend:runDailyBackup\"\n);\n\ncrons.weekly(\n  \"weekly-on-sunday\",\n  { dayOfWeek: 0, hour: 2 },\n  \"backend:generateWeeklyNewsletter\"\n);\n\nexport default crons;\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React\nDESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/nextjs-app-router/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex. It includes argument validation, database querying, and data processing. The function takes two arguments: a number and a string.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/demo/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Convex Query with React Frontend\nDESCRIPTION: This code demonstrates how to update a React component to use Convex's useQuery hook. The component subscribes to the getMessages query function, which automatically refreshes data and re-renders the UI whenever new messages are added to the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/tutorial/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Update your convex/react import like this:\nimport { useQuery, useMutation } from \"convex/react\";\n\n//...\n\nexport default function App() {\n  // Replace the `const messages = ...` line with the following\n  const messages = useQuery(api.chat.getMessages);\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex\nDESCRIPTION: This snippet demonstrates how to create a mutation function that accepts two string arguments. The function shows how to validate arguments, write to the database by inserting a new document, and return data to the client.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/tanstack-start-clerk/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component\nDESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/custom-errors/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Example of how to use a Convex query function within a React component using the useQuery hook. It shows passing the required arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/text-importer/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Convex Client in JavaScript/TypeScript\nDESCRIPTION: Demonstrates setting up a reactive Convex client using WebSockets for real-time data subscriptions. Shows how to initialize the client, establish connections, and handle query subscriptions.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/javascript.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConvexClient } from \"convex/browser\";\n\nconst client = new ConvexClient(process.env.CONVEX_URL!);\n\n// Optional: Wait for the client to connect before running queries\nawait client.sync();\n\n// Subscribe to query results\nconst unsubscribe = client.onUpdate(\"listMessages\", {}, (messages) => {\n  console.log(messages);\n});\n\n// Later: clean up subscription\nunsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Example of a query function that accepts numeric and string arguments, demonstrates database querying, and includes argument validation. Shows how to read from the database and process the results.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/1-smileys/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a mutation function in Convex. It includes argument validation, database insertion, and optional return value.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tutorial/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function in TypeScript\nDESCRIPTION: Demonstrates how to create a mutation function that modifies the database. Includes argument validation and shows how to insert data and return the modified record.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/bundle-size/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing .filter with .withIndex in Convex Database Queries\nDESCRIPTION: Demonstrates how to replace .filter with .withIndex for more efficient database queries in Convex. This approach improves performance by utilizing indexes instead of filtering in code.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Instead of:\nexport const listMessages = query(async ({ db }) => {\n  const messages = await db\n    .query(\"messages\")\n    .filter((q) => q.eq(q.field(\"channelId\"), \"abc123\"))\n    .collect();\n  return messages;\n});\n\n// Do:\nexport const listMessages = query(async ({ db }) => {\n  const messages = await db\n    .query(\"messages\")\n    .withIndex(\"by_channelId\")\n    .eq(\"channelId\", \"abc123\")\n    .collect();\n  return messages;\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use a Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget and promise-based usage patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/convex-tour-chat-tutorial/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Fetch Calls in Convex AI Tests with Vitest\nDESCRIPTION: This snippet demonstrates how to mock fetch calls in a Convex AI test using Vitest's vi.stubGlobal method. It sets up a test environment, stubs the global fetch function, and tests the sendAIMessage action.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/testing/convex-test.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect, test, vi } from \"vitest\";\nimport { convexTest } from \"../index\";\nimport { api } from \"./_generated/api\";\nimport schema from \"./schema\";\n\ntest(\"ai\", async () => {\n  const t = convexTest(schema);\n\n  vi.stubGlobal(\n    \"fetch\",\n    vi.fn(async () => ({ text: async () => \"I am the overlord\" }) as Response),\n  );\n\n  const reply = await t.action(api.messages.sendAIMessage, { prompt: \"hello\" });\n  expect(reply).toEqual(\"I am the overlord\");\n\n  vi.unstubAllGlobals();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Database Schema with Index in Convex\nDESCRIPTION: Demonstrates how to define a messages table with an index for channel-based filtering in the schema configuration.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/reading-data.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSchema, defineTable } from \"convex/server\";\nimport { v } from \"convex/values\";\n\nexport default defineSchema({\n  messages: defineTable({\n    channel: v.id(\"channels\"),\n    body: v.string(),\n    user: v.id(\"users\"),\n  }).index(\"by_channel\", [\"channel\"]),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Function for Messages in Convex\nDESCRIPTION: This code updates a Convex backend file to add a getMessages query function that retrieves the 50 most recent messages in chronological order. The function queries the database, orders messages in descending order, and then reverses the array to display them chronologically.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/tutorial/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Update your server import like this:\nimport { query, mutation } from \"./_generated/server\";\n\n// ...\n\n// Add the following function to the file:\nexport const getMessages = query({\n  args: {},\n  handler: async (ctx) => {\n    // Get most recent messages first\n    const messages = await ctx.db.query(\"messages\").order(\"desc\").take(50);\n    // Reverse the list so that it's in a chronological order.\n    return messages.reverse();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function in Convex that accepts arguments, validates them, and reads data from the database. This pattern should be used for read-only operations that retrieve data without making modifications.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex-chat-speculative/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Database Operations in Mutation Context\nDESCRIPTION: This example demonstrates how to use the 'db' field of the mutation context to perform database operations. It shows an asynchronous insert operation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/mutation-functions.mdx#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\n\nexport const addUser = mutation({\n  handler: async (ctx) => {\n    const userId = await ctx.db.insert(\"users\", { name: \"Alice\" });\n    return userId;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Indexes for Efficient Data Collection in Convex\nDESCRIPTION: Shows how to use indexes to efficiently collect a small number of results from a potentially large dataset in Convex. This approach avoids loading unnecessary data and improves query performance.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const listMoviesForUser = query(async ({ db }, { userId }) => {\n  const movies = await db\n    .query(\"movies\")\n    .withIndex(\"by_userId\")\n    .eq(\"userId\", userId)\n    .collect();\n  return movies;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Operations in Convex Actions\nDESCRIPTION: Example demonstrating incorrect and correct patterns for running multiple queries in Convex actions. Shows why multiple separate queries should be combined into a single query for consistency and performance.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/actions.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌\nconst foo = await ctx.runQuery(...)\nconst bar = await ctx.runQuery(...)\n\n// ✅\nconst fooAndBar = await ctx.runQuery(...)\n```\n\n----------------------------------------\n\nTITLE: Generating File URLs in Convex Query\nDESCRIPTION: Query function that retrieves messages and generates URLs for associated files using storage.getUrl\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/file-storage/serve-files.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { storage } from \"./_generated/server\";\n\nquery(async (ctx) => {\n  const messages = await ctx.db.query(\"messages\").collect();\n  return Promise.all(\n    messages.map(async (message) => ({\n      ...message,\n      url: message.file ? await ctx.storage.getUrl(message.file) : null,\n    }))\n  );\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Search Index in Convex Schema (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define a search index on a 'messages' table in the Convex schema. It indexes the 'body' field for full text search and allows filtering by the 'channel' field.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/search/search.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSchema, defineTable } from \"convex/server\";\nimport { v } from \"convex/values\";\n\nexport default defineSchema({\n  messages: defineTable({\n    body: v.string(),\n    channel: v.string(),\n  }).searchIndex(\"search_body\", {\n    searchField: \"body\",\n    filterFields: [\"channel\"],\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Mutation in Convex\nDESCRIPTION: Example of defining an internal mutation function for marking a plan as professional. Includes argument validation using v.object() and v.string().\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/internal-functions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const markPlanAsProfessional = internalMutation({\\n  args: {\\n    planId: v.id(\"plans\"),\\n    userId: v.string(),\\n  },\\n  handler: async (ctx, { planId, userId }) => {\\n    await ctx.db.patch(planId, { tier: \"professional\" });\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Example of a Convex mutation function that accepts string arguments and modifies the database. Shows how to define argument validators and implement a handler that inserts data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/basic/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using the usePresence Hook for User Presence Tracking in JavaScript\nDESCRIPTION: Example of initializing the usePresence hook to track a user's presence in a chat room. The hook returns the current user's presence data, others' presence data, and a function to update the current user's presence.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-facepile/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst [myPresence, othersPresence, updateMyPresence] = usePresence(\n  \"chat-room\",\n  name,\n  {\n    name,\n    emoji: initialEmoji,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React Component (TypeScript)\nDESCRIPTION: Illustrates how to use the previously defined mutation function in a React component using the useMutation hook. It shows both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/pagination/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation Function in Convex\nDESCRIPTION: This snippet demonstrates how to define a mutation function in Convex with argument validation. It shows how to insert data into the database and return the inserted record. The function creates a message document with body and author fields.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/vue/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component\nDESCRIPTION: Demonstrates how to use a Convex mutation function in a React component, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/node/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Mutation Function in React Component\nDESCRIPTION: Shows how to use the previously defined mutation function in a React component using the useMutation hook. Includes examples of both fire-and-forget mutation calls and handling the mutation result.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-old/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Convex Schema with TypeScript\nDESCRIPTION: This code defines a database schema for a Convex application using TypeScript. It creates a 'messages' table with fields for text content, creation timestamp, and author information.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-old/tmp.txt#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSchema, defineTable } from \"convex/server\";\nimport { v } from \"convex/values\";\n\nexport default defineSchema({\n  messages: defineTable({\n    text: v.string(),\n    creationTime: v.number(),\n    author: v.string(),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function\nDESCRIPTION: Example of a Convex query function that accepts numeric and string arguments. The function demonstrates database querying and argument validation using Convex's query API.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/cjs-typescript/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    console.log(args.first, args.second);\n\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing SwiftUI View with Convex Integration\nDESCRIPTION: SwiftUI view implementation that uses Convex to fetch and display a list of tasks. It subscribes to real-time updates from the Convex backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/swift.mdx#2025-04-21_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @State private var todos: [Todo] = []\n\n  var body: some View {\n    List {\n      ForEach(todos, id: \\._id) { todo in\n        Text(todo.text)\n      }\n    }.task {\n      for await todos: [Todo] in convex.subscribe(to: \"tasks:get\")\n        .replaceError(with: []).values\n      {\n        self.todos = todos\n      }\n    }.padding()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex\nDESCRIPTION: Demonstrates how to create a mutation function for modifying data in the database. The example shows argument validation, inserting a document into the database, and returning the newly created document.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-15-app/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation Function in Convex\nDESCRIPTION: Shows how to create a mutation function that modifies data in the database. This example demonstrates inserting a new document into a 'messages' table and returning the newly created object, with string argument validation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/tanstack-start/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Schema in TypeScript\nDESCRIPTION: Example of defining a schema for a chat application using Convex's schema definition system. Shows how to specify table structure with typed fields.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSchema, defineTable } from \"convex/server\";\nimport { v } from \"convex/values\";\n\n// @snippet start schema\nexport default defineSchema({\n  messages: defineTable({\n    author: v.id(\"users\"),\n    body: v.string(),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Calling Mutations from React Client\nDESCRIPTION: This example shows how to call a Convex mutation from a React client using the useMutation hook and the generated api object.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/mutation-functions.mdx#2025-04-21_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useMutation } from \"convex/react\";\nimport { api } from \"../convex/_generated/api\";\n\nexport default function MyComponent() {\n  const addMessage = useMutation(api.myFunctions.addMessage);\n\n  return (\n    <button\n      onClick={() =>\n        addMessage({ body: \"Hello!\", author: \"React Client\" })\n      }\n    >\n      Add Message\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Shows how to create a mutation function that modifies the database. Includes argument validation and database insertion operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/system-udfs/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Query in Convex\nDESCRIPTION: This snippet demonstrates how to define a basic query in Convex that takes named arguments, reads data from the database, and returns a result.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/query-functions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { query } from \"./_generated/server\";\n\nexport const listMessages = query({\n  args: {\n    roomId: v.string(),\n  },\n  handler: async (ctx, args) => {\n    return await ctx.db\n      .query(\"messages\")\n      .filter(q => q.eq(q.field(\"roomId\"), args.roomId))\n      .collect();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Convex Query Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a basic query function in Convex that takes two arguments. The function includes argument validators and shows how to read data from the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/@convex-dev/react-query/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Convex with Typed HTML and Separate JavaScript File\nDESCRIPTION: This snippet demonstrates how to use Convex in an HTML file with a separate JavaScript file for better TypeScript support and autocompletion in VSCode.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/javascript/script-tag.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <script src=\"https://unpkg.com/convex@1.0.3/dist/browser.bundle.js\"></script>\n  </head>\n  <body>\n    <h1>Messages</h1>\n    <ul id=\"messages\"></ul>\n    <input id=\"name\" type=\"text\" placeholder=\"Your name\" />\n    <input id=\"body\" type=\"text\" placeholder=\"Your message\" />\n    <button onclick=\"handleSend()\">Send</button>\n    <script src=\"script.js\"></script>\n  </body>\n</html>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ConvexClient } = window.convex;\nconst client = new ConvexClient(\"CONVEX_URL_GOES_HERE\");\n\nasync function handleSend() {\n  const name = document.getElementById(\"name\").value;\n  const body = document.getElementById(\"body\").value;\n  await client.mutation(\"sendMessage\", { body, author: name });\n  document.getElementById(\"body\").value = \"\";\n}\n\nclient\n  .query(\"listMessages\")\n  .then((messages) => {\n    const messagesEl = document.getElementById(\"messages\");\n    messagesEl.innerHTML = messages\n      .map((message) => `<li>${message.author}: ${message.body}</li>`)\n      .join(\"\");\n  })\n  .catch((error) => {\n    console.error(\"Error fetching messages:\", error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Calling Internal Functions from Action\nDESCRIPTION: Shows how to call an internal function from a public action using the internal object, demonstrating proper function composition.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/internal-functions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const upgrade = action({\\n  args: {},\\n  handler: async (ctx) => {\\n    const { planId, userId } = await somePaymentProvider.createSubscription();\\n    await ctx.runMutation(internal.plans.markPlanAsProfessional, {\\n      planId,\\n      userId,\\n    });\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation Function in Convex\nDESCRIPTION: An example of a Convex mutation function that modifies data in the database. This function validates two string arguments, inserts a document into the 'messages' table, and returns the newly created document.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/http/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Preloading Convex Query in Next.js Server Component\nDESCRIPTION: Demonstrates how to use preloadQuery in a Next.js Server Component to fetch data from Convex before initial render.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/nextjs/nextjs-server-rendering.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { preloadQuery } from \"convex/nextjs\";\nimport { api } from \"../../convex/_generated/api\";\nimport { Tasks } from \"./Tasks\";\n\nexport default async function TasksWrapper() {\n  const preloaded = await preloadQuery(api.tasks.get);\n  return <Tasks preloaded={preloaded} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Table Schema in Convex\nDESCRIPTION: Schema definition for the users table including an index on tokenIdentifier for efficient lookups.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/database-auth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSchema, defineTable } from \"convex/schema\";\nimport { v } from \"convex/values\";\n\nexport default defineSchema({\n  users: defineTable({\n    name: v.string(),\n    tokenIdentifier: v.string(),\n  }).index(\"by_token\", [\"tokenIdentifier\"]),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Convex Query Function in JavaScript\nDESCRIPTION: Creates a query function in JavaScript to fetch tasks from the Convex database. This function is exposed as an API endpoint.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/script-tag.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { query } from \"./_generated/server\";\n\nexport default query(async ({ db }) => {\n  return await db.query(\"tasks\").collect();\n});\n```\n\n----------------------------------------\n\nTITLE: Logging Auth0 Authentication Token in React (TSX)\nDESCRIPTION: This code snippet demonstrates how to log the authentication token from Auth0 in a React component. It uses the useAuth0 hook to get the access token silently and log the ID token.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/debug.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nconst { getAccessTokenSilently } = useAuth0();\nconst response = await getAccessTokenSilently({\n  detailedResponse: true,\n});\nconst token = response.id_token;\nconsole.log(token);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex\nDESCRIPTION: An example of a mutation function that inserts data into a Convex database. Includes argument validation, database operations, and returning the result.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/react-query/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex (TypeScript)\nDESCRIPTION: This snippet illustrates how to create a mutation function in Convex. It includes argument validation, database insertion, and optional return value. The function demonstrates inserting a message into the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/tanstack-start/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function that accepts numeric and string parameters. Shows database querying and argument validation using Convex's query helper.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/node/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component\nDESCRIPTION: Shows how to use a Convex mutation function within a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/bundle-size/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex\nDESCRIPTION: A complete example of a query function that takes number and string arguments, retrieves data from a Convex database, and returns documents. Includes argument validation and the handler implementation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/react-query/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Illustrating a Potential Data Race in Concurrent Transactions\nDESCRIPTION: This snippet demonstrates how concurrent transactions can lead to data races. It shows two transactions: a $5 transfer and a $3 debit card charge, potentially resulting in an incorrect balance for Alice.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/advanced/occ.md#2025-04-21_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\n$5 Transfer                           $3 Debit Card Charge\n----------------------------------------------------------\n$14 <- READ Alice\n$11 <- READ Bob\n                                        $14 <- READ Alice\n                                        WRITE Alice $11\nWRITE Alice $9 // Free coke!\nWRITE Bob $16\n```\n\n----------------------------------------\n\nTITLE: Bulk Inserting Products in Convex Database\nDESCRIPTION: Demonstrates how to perform bulk insert operations in Convex by inserting multiple products in a single transaction. The function accepts an array of product objects and inserts them sequentially within a mutation function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/writing-data.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const bulkInsertProducts = mutation({\n  args: {\n    products: v.array(\n      v.object({\n        product_name: v.string(),\n        category: v.string(),\n        price: v.number(),\n        in_stock: v.boolean(),\n      }),\n    ),\n  },\n  handler: async (ctx, args) => {\n    const { products } = args;\n\n    // Insert in a loop. This is efficient because Convex queues all the changes\n    // to be executed in a single transaction when the mutation ends.\n    for (const product of products) {\n      const id = await ctx.db.insert(\"products\", {\n        product_name: product.product_name,\n        category: product.category,\n        price: product.price,\n        in_stock: product.in_stock,\n      });\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Union Types in Convex Mutation\nDESCRIPTION: Example showing how to use v.union to validate fields that could be one of multiple types in a Convex mutation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/validation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport default mutation({\n  args: {\n    stringOrNumber: v.union(v.string(), v.number()),\n  },\n  handler: async ({ db }, { stringOrNumber }) => {\n    //...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Function in Convex\nDESCRIPTION: Shows how to create a query function that accepts numbered and string arguments. This function demonstrates reading from the database using ctx.db.query() and collecting results, with proper argument validation using Convex's value validators.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/tanstack-start/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function\nDESCRIPTION: Example of a query function that accepts numeric and string arguments, demonstrating database querying and argument validation. Shows how to read from the database and process the results.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/2-likes/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    console.log(args.first, args.second);\n\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Optimized Filtering with Iterator in TypeScript\nDESCRIPTION: Shows how to use for await...of to efficiently find the first matching document without loading the entire table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/filters.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const firstPostWithTag = query({\n  args: { tag: v.string() },\n  handler: (ctx, args) => {\n    for await (const post of db.query(\"posts\")) {\n      if (post.tags.includes(args.tag)) {\n        return post;\n      }\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Index in Convex\nDESCRIPTION: Shows how to define a table schema with an index on the author field to optimize queries.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes-and-query-perf.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSchema, defineTable } from \"convex/server\";\nimport { v } from \"convex/values\";\n\nexport default defineSchema({\n  books: defineTable({\n    author: v.string(),\n    title: v.string(),\n    text: v.string(),\n  }).index(\"by_author\", [\"author\"]),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Argument Validation for Public Functions in Convex\nDESCRIPTION: Demonstrates how to use argument validators for public functions in Convex. This practice helps ensure that the function receives expected input and enhances security.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const sendMessage = mutation(\n  async ({ db }, { channelId, text }: { channelId: Id<\"channels\">; text: string }) => {\n    const message = { channelId, text, author: \"Alice\" };\n    await db.insert(\"messages\", message);\n  },\n  {\n    args: {\n      channelId: v.id(\"channels\"),\n      text: v.string(),\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Example of using a Convex query function in a React component with the useQuery hook. This snippet shows how to pass arguments to the query function and access the returned data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-modern/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function - TypeScript\nDESCRIPTION: Example of a Convex mutation function that handles data modifications. Shows how to validate arguments, insert data into the database, and return modified records.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/search/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation of Combined Query (TypeScript)\nDESCRIPTION: This example shows the correct way to implement multiple queries in a single runQuery call. It ensures consistency and improves performance.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Teams from './model/teams';\nimport * as Users from './model/users';\n\nexport const getTeamMembers = action(\n  async ({ runQuery }, { teamId }: { teamId: Id<\"teams\"> }) => {\n    return await runQuery(async (ctx) => {\n      const team = await Teams.get(ctx, teamId);\n      const users = await Users.list(ctx);\n      return { team, users };\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing TanStack Start Loader with Convex Query in TypeScript\nDESCRIPTION: This code shows how to create a TanStack Start route with a loader that prefetches Convex query data for faster client-side navigation. It also demonstrates rendering the fetched data in the component.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/tanstack-start/tanstack-start.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Route = createFileRoute('/posts')({\n  loader: async (opts) => {\n    await opts.context.queryClient.ensureQueryData(\n      convexQuery(api.messages.list, {}),\n    );\n  };\n  component: () => {\n    const { data } = useSuspenseQuery(convexQuery(api.messages.list, {}));\n    return (\n      <div>\n\t{data.map((message) => (\n\t  <Message key={message.id} post={message} />\n\t))}\n      </div>\n    );\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Record Objects in Mutation Arguments in TypeScript\nDESCRIPTION: Example of using record objects in mutation arguments with Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/schemas.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport default mutation({\n  args: {\n    userIdToValue: v.record(v.id(\"users\"), v.boolean()),\n  },\n  handler: async ({ db }, { userIdToValue }) => {\n    //...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Example of a Convex mutation function that handles data modifications. The function demonstrates database insertion and returning modified data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex-ai-chat/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: React Component Integration with Convex Query\nDESCRIPTION: Example showing how to use Convex's React client library to fetch and subscribe to query results in a React component. Demonstrates the useQuery hook for automatic updates.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// In your React component\nimport { useQuery } from \"convex/react\";\nimport { api } from \"../convex/_generated/api\";\n\nexport function TaskList() {\n  const data = useQuery(api.tasks.getAllOpenTasks);\n  return data ?? \"Loading...\";\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Demonstrates creating a mutation function in Convex for modifying database data. Shows how to validate arguments, insert data into the database, and return the modified data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/dall-e-storage-action/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Example of how to use a Convex query function within a React component. This snippet demonstrates the useQuery hook for fetching data from the backend with typed arguments.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React (TypeScript)\nDESCRIPTION: This snippet shows how to use a Convex query function in a React component. It uses the useQuery hook to fetch data with specified arguments.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-typing-indicator/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Helper Functions in Convex Queries\nDESCRIPTION: This snippet illustrates how to define and use helper functions to split up query code or reuse logic across multiple Convex functions, improving code organization and reusability.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/query-functions.mdx#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nconst helper = (name: string) => {\n  return `Hello ${name}!`;\n};\n\nexport const myQuery = query({\n  args: { name: v.string() },\n  handler: async (ctx, args) => {\n    return helper(args.name);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Compound Index in Convex Schema\nDESCRIPTION: This snippet demonstrates how to define a compound index on both 'author' and 'title' fields in the Convex schema. It uses the 'defineSchema' and 'defineTable' functions to create the index.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes-and-query-perf.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSchema, defineTable } from \"convex/server\";\nimport { v } from \"convex/values\";\n\nexport default defineSchema({\n  books: defineTable({\n    author: v.string(),\n    title: v.string(),\n    text: v.string(),\n  }).index(\"by_author_title\", [\"author\", \"title\"]),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function in TypeScript\nDESCRIPTION: Example of a Convex query function that accepts numeric and string arguments. The function demonstrates database querying and argument validation using Convex's built-in validators.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/actions/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    console.log(args.first, args.second);\n\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ConvexClientProvider with Auth0 in Next.js\nDESCRIPTION: Implementation of ConvexClientProvider.tsx file that sets up Auth0 authentication in a Next.js application using Convex. This code demonstrates how to configure the authentication provider and handle authentication states.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/nextjs/nextjs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"use strict\";\n\nimport { Auth0Provider } from \"@auth0/auth0-react\";\nimport { ConvexProviderWithAuth0 } from \"convex/react-auth0\";\nimport { ReactNode } from \"react\";\nimport { ConvexReactClient } from \"convex/react\";\n\nconst convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);\n\nexport default function ConvexClientProvider({\n  children,\n}: {\n  children: ReactNode;\n}) {\n  return (\n    <Auth0Provider\n      domain={process.env.NEXT_PUBLIC_AUTH0_DOMAIN!}\n      clientId={process.env.NEXT_PUBLIC_AUTH0_CLIENT_ID!}\n      authorizationParams={{\n        redirect_uri:\n          typeof window === \"undefined\"\n            ? process.env.NEXT_PUBLIC_AUTH0_REDIRECT_URI\n            : window.location.origin,\n      }}\n    >\n      <ConvexProviderWithAuth0 client={convex}>\n        {children}\n      </ConvexProviderWithAuth0>\n    </Auth0Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Compound Index in TypeScript\nDESCRIPTION: This snippet shows how to use a compound index on 'author' and 'title' for efficient querying. It demonstrates the use of 'withIndex' to specify both fields in the query.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes-and-query-perf.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst foundation = await ctx.db\n  .query(\"books\")\n  .withIndex(\"by_author_title\", (q) =>\n    q.eq(\"author\", \"Isaac Asimov\").eq(\"title\", \"Foundation\"),\n  )\n  .unique();\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function in TypeScript\nDESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. The function includes argument validation and shows how to query the database and process results.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/bundle-size/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Example of how to use a Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget usage and handling the returned result with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/text-importer/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Using Index in Convex\nDESCRIPTION: Demonstrates how to use a defined index to efficiently query documents by author.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes-and-query-perf.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst austenBooks = await ctx.db\n  .query(\"books\")\n  .withIndex(\"by_author\", (q) => q.eq(\"author\", \"Jane Austen\"))\n  .collect();\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Functions in Convex\nDESCRIPTION: Example of a Convex mutation function that takes arguments, validates them, and performs a write operation to the database. This demonstrates proper structure for data modification operations including inserting records and returning results.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir-14/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Paginated Query in Convex\nDESCRIPTION: Implementation of a basic paginated query function that returns messages with cursor-based pagination using the .paginate() method.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/pagination.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const list = query({\n  args: {\n    paginationOpts: paginationOptsValidator,\n  },\n  handler: async (ctx, args) => {\n    return await ctx.db\n      .query(\"messages\")\n      .order(\"desc\")\n      .paginate(args.paginationOpts);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating HTTP Requests with JWT Token in TypeScript\nDESCRIPTION: This example shows how to make an authenticated HTTP request to a Convex endpoint using a JWT token. It demonstrates setting the Authorization header and handling the response.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/http-actions.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = \"...\"; // Your JWT token\nconst response = await fetch(\"https://<your-project>.convex.cloud/postMessage\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${token}`,\n  },\n  body: JSON.stringify({ message: \"Hello, world!\" }),\n});\nconst result = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Querying System Table for File Metadata\nDESCRIPTION: Examples showing how to access file metadata using db.system.get and db.system.query methods from queries and mutations. This is the current recommended approach for accessing file metadata.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/file-storage/file-metadata.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\n\nexport const listStorageIds = query(async (ctx) => {\n  const files = await ctx.db.system\n    .query(\"_storage\")\n    .collect();\n  return files.map((doc) => doc._id);\n});\n\nexport const getFileMetadata = query(async (ctx, { storageId }) => {\n  return await ctx.db.system.get(storageId);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Function in Convex\nDESCRIPTION: Example of defining a Convex query function that accepts numeric and string arguments. The function demonstrates how to query the database and return data to the client, with proper argument validation using Convex's validation system.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-modern/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation Function in Convex\nDESCRIPTION: Demonstrates how to create a mutation function that modifies database data. The function includes argument validation, database operations for inserting data, and returning the created record.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-old/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Query Using Index in Convex\nDESCRIPTION: Shows how to query messages filtered by channel using a defined index.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/reading-data.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = await ctx.db\n  .query(\"messages\")\n  .withIndex(\"by_channel\", (q) => q.eq(\"channel\", channel))\n  .collect();\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation in Next.js Route Handler\nDESCRIPTION: Shows how to use fetchMutation in a Next.js Route Handler to modify data in Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/nextjs/nextjs-server-rendering.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetchMutation } from \"convex/nextjs\";\nimport { api } from \"../../../convex/_generated/api\";\n\nexport async function POST(request: Request) {\n  const { text } = await request.json();\n  await fetchMutation(api.tasks.create, { text });\n  return Response.json({ success: true });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex (TypeScript)\nDESCRIPTION: This snippet illustrates how to create a mutation function in Convex. It includes argument validation, database insertion, and optional return of the inserted data. The function takes two string arguments and inserts a message into the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-facepile/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: This snippet demonstrates how to use a Convex mutation function within a React component. It shows two ways to call the mutation: fire-and-forget and handling the result with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/zod-validation-ts/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExpressionOrValue Type in TypeScript\nDESCRIPTION: A TypeScript type representing either a database expression or a literal value. Used in query building to accept both expressions and constant values.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type ExpressionOrValue<T extends Value | undefined> = Expression<T> | T;\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query Function in React (TypeScript)\nDESCRIPTION: This snippet shows how to use a Convex query function in a React component. It uses the useQuery hook to fetch data from the server, passing the required arguments.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/system-tables/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Relational Schema for Channels and Messages in Convex\nDESCRIPTION: This snippet defines a schema for a multi-channel messaging app using Convex. It creates two tables: 'channels' with a name field, and 'messages' with author, body, and a reference to the channel ID.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/relational-data-modeling/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSchema, defineTable } from \"convex/server\";\nimport { v } from \"convex/values\";\n\nexport default defineSchema({\n  channels: defineTable({\n    name: v.string(),\n  }),\n  messages: defineTable({\n    author: v.string(),\n    body: v.string(),\n    channel: v.id(\"channels\"),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component\nDESCRIPTION: Example of using the mutation function in a React component with the useMutation hook, showing both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/vector-search/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Search Query in Convex (JavaScript)\nDESCRIPTION: This snippet shows how to run a search query using the previously defined search index. It searches for messages containing 'hello hi' in the '#general' channel, limiting the results to 10 messages.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/search/search.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = await ctx.db\n  .query(\"messages\")\n  .withSearchIndex(\"search_body\", (q) =>\n    q.search(\"body\", \"hello hi\").eq(\"channel\", \"#general\"),\n  )\n  .take(10);\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation of User Model Functions (TypeScript)\nDESCRIPTION: This snippet shows the correct way to implement user-related functions using helper functions in a separate model file. It demonstrates better code organization and reusability.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueryCtx } from '../_generated/server';\n\nexport async function getUser(ctx: QueryCtx, tokenIdentifier: string) {\n  return await ctx.db\n    .query(\"users\")\n    .filter((q) => q.eq(q.field(\"tokenIdentifier\"), tokenIdentifier))\n    .first();\n}\n\nexport async function createUser(\n  ctx: QueryCtx,\n  args: { name: string; tokenIdentifier: string }\n) {\n  return await ctx.db.insert(\"users\", args);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mutation Functions in Convex\nDESCRIPTION: This snippet demonstrates how to create a mutation function in Convex for writing data to the database. It shows argument validation, inserting new records, and returning data after the operation is complete.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/python-quickstart/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Books by Author and Title in TypeScript\nDESCRIPTION: This snippet demonstrates how to query books by author and filter by title using a single field index on 'author'. It uses the 'withIndex' method for indexed querying and 'filter' for additional filtering.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes-and-query-perf.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst foundation = await ctx.db\n  .query(\"books\")\n  .withIndex(\"by_author\", (q) => q.eq(\"author\", \"Isaac Asimov\"))\n  .filter((q) => q.eq(q.field(\"title\"), \"Foundation\"))\n  .unique();\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Function in Convex\nDESCRIPTION: Example of creating a query function that takes two arguments (number and string), accesses the database, and returns documents. The function includes argument validation and demonstrates how to handle the query context.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/file-storage-with-http/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex (TypeScript)\nDESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It includes argument validation and shows how to use the database context.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/giphy-action/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Demonstrates how to create a mutation function that accepts string arguments and modifies the database. Includes argument validation and database insertion operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/relational-data-modeling/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex\nDESCRIPTION: Example of a query function that takes two arguments (number and string) and retrieves data from the database. It demonstrates argument validation, context handling, and database querying with the Convex API.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/args-validation/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Example of how to use a Convex mutation function within a React component. This snippet shows both fire-and-forget usage and handling mutation results with promises.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function that takes numeric and string arguments, validates them, and queries the database. Shows the server-side implementation including argument validation and database access.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/relational-data-modeling/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function\nDESCRIPTION: Example of a Convex query function that demonstrates argument validation, database querying, and data processing. The function accepts numeric and string parameters and returns database documents.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Convex Query Function in TypeScript\nDESCRIPTION: TypeScript code defining a Convex query function to fetch tasks from the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/svelte.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\n\nexport const get = query(async ({ db }) => {\n  return await db.query(\"tasks\").collect();\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Name Equality in TypeScript\nDESCRIPTION: Demonstrates how to filter documents in the users table by checking if the name field equals 'Alex' using the FilterBuilder eq operator.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/filters.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst usersNamedAlex = await ctx.db\n  .query(\"users\")\n  .filter((q) => q.eq(q.field(\"name\"), \"Alex\"))\n  .collect();\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function in TypeScript\nDESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments, performs database queries, and returns documents. Includes argument validation and database interaction patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/scheduling/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Shows how to create a mutation function that modifies the database, including argument validation and database operations. Demonstrates inserting data and returning the inserted record.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-15-app-clerk/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Mutation Errors with Promise Catch in JavaScript\nDESCRIPTION: This code snippet shows how to handle errors in Convex mutations using a Promise catch block. It allows for custom error handling and UI rendering in response to mutation failures.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/error-handling/error-handling.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsendMessage(newMessageText).catch((error) => {\n  // Do something with `error` here\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex. It includes argument validation, database querying, and data processing. The function takes two arguments and returns documents from a database table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/middleware/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query with TanStack Start in TypeScript\nDESCRIPTION: This snippet demonstrates how to use a Convex query with TanStack Start's useSuspenseQuery hook for server-side rendering and live updates.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/tanstack-start/tanstack-start.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data } = useSuspenseQuery(convexQuery(api.messages.list, {}));\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation Function in React Component (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use a Convex mutation function in a React component. It shows two ways to call the mutation: fire-and-forget and handling the result with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/middleware/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex\nDESCRIPTION: Example of a mutation function that takes two string arguments and inserts a new document into a database. The function demonstrates argument validation, database writing operations, and returning the newly created document.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/nextjs-pages-router/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Demonstrates how to use a mutation function from a React component using the useMutation hook. Shows both fire-and-forget usage and handling the result with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-15-app/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Function in Convex\nDESCRIPTION: This snippet demonstrates how to define a query function in Convex with argument validation. It shows how to read from the database, handle arguments passed from the client, and return data. The function collects documents from a specified table and returns them.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/vue/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Shows how to use the defined mutation function in a React component using the useMutation hook. Includes examples of both fire-and-forget usage and handling the returned Promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex-chat-speculative/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Arguments in Convex Mutation Function (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use console.log to debug a Convex mutation function by logging the received arguments. It shows the basic structure of a Convex mutation with type-safe arguments.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/debugging.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const mutateSomething = mutation({\n  args: { a: v.number(), b: v.number() },\n  handler: (_, args) => {\n    console.log(\"Received args\", args);\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React\nDESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/js-integration-tests/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex TypeScript\nDESCRIPTION: Example of a Convex query function that takes two arguments (a number and a string), reads from the database, and returns documents. The function demonstrates argument validation, database querying, and logging.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/react-native/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: User Helper Functions Implementation\nDESCRIPTION: Utility functions for user management, demonstrating patterns for code reuse and authorization in Convex applications.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/other-recommendations.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getUserId(ctx: QueryCtx | MutationCtx | ActionCtx) {\n  const identity = ctx.auth.getUserIdentity();\n  if (!identity) {\n    throw new Error(\"Unauthenticated call to function requiring authentication\");\n  }\n  return identity.subject;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function that takes two arguments and returns database documents. The function validates arguments using Convex's validation system and shows how to access the database context to read data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-15-app/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function in TypeScript\nDESCRIPTION: Example of a Convex mutation function that handles database writes, taking two string arguments and inserting a document into the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/remix/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Shows how to use the useMutation hook to call a Convex mutation function from a React component. It demonstrates both fire-and-forget and promise-based patterns for handling the mutation results.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-app-router-snippets/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React\nDESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/2-likes/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Circular References in TypeScript\nDESCRIPTION: Example of defining a schema with circular references between tables in Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/schemas.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSchema, defineTable } from \"convex/server\";\nimport { v } from \"convex/values\";\n\nexport default defineSchema({\n  users: defineTable({\n    preferencesId: v.id(\"preferences\"),\n  }),\n  preferences: defineTable({\n    userId: v.union(v.id(\"users\"), v.null()),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query Functions in React\nDESCRIPTION: Example of how to use a Convex query function within a React component using the useQuery hook. This shows how to pass arguments to the query function from the client side.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir-14/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Convex Mutation Function in TypeScript\nDESCRIPTION: This example demonstrates how to create a mutation function in Convex that can modify the database. It shows how to define argument validators and insert data into a collection.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/@convex-dev/react-query/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ConvexProviderWithClerk in React\nDESCRIPTION: This snippet demonstrates how to set up the Clerk provider and Convex provider in a React application. It shows the configuration for both TypeScript and JavaScript versions.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/clerk.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ClerkProvider, useAuth } from \"@clerk/clerk-react\";\nimport { ConvexProviderWithClerk } from \"convex/react-clerk\";\nimport { ConvexReactClient } from \"convex/react\";\n\nconst convex = new ConvexReactClient(import.meta.env.VITE_CONVEX_URL);\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <ClerkProvider publishableKey={import.meta.env.VITE_CLERK_PUBLISHABLE_KEY}>\n      <ConvexProviderWithClerk client={convex} useAuth={useAuth}>\n        <App />\n      </ConvexProviderWithClerk>\n    </ClerkProvider>\n  </React.StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex\nDESCRIPTION: A TypeScript example of a Convex query function with argument validation. The function demonstrates how to define validators for arguments, read from the database, and process the results before returning them to the client.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/javascript/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex (TypeScript)\nDESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It includes argument validation and allows for arbitrary JavaScript processing of the data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/shared-cursors/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex (TypeScript)\nDESCRIPTION: This snippet illustrates how to create a mutation function in Convex. It includes argument validation and demonstrates inserting data into the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/components-poc/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Record Object Validation in Convex Mutation\nDESCRIPTION: Shows how to validate objects that map arbitrary keys to values using v.record in a Convex mutation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/validation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport default mutation({\n  args: {\n    simpleMapping: v.record(v.string(), v.boolean()),\n  },\n  handler: async ({ db }, { simpleMapping }) => {\n    //...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex (TypeScript)\nDESCRIPTION: This snippet illustrates how to create a mutation function in Convex using TypeScript. It includes argument validation, database insertion, and optional return value.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-clerk-webhooks/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Server-side Upload URL Generation\nDESCRIPTION: Shows how to generate upload URLs on the server side using the Convex storage API. This mutation controls who can upload files and generates a temporary upload URL.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/file-storage/upload-files.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const generateUploadUrl = mutation(async (ctx) => {\n  return await ctx.storage.generateUploadUrl();\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing User Identity Fields in Convex Functions (JavaScript)\nDESCRIPTION: Demonstrates how to access various fields of the UserIdentity object returned by getUserIdentity() in a Convex function using JavaScript.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/functions-auth.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { query } from \"./_generated/server\";\n\nexport const getUser = query(async (ctx) => {\n  const identity = await ctx.auth.getUserIdentity();\n  if (!identity) {\n    throw new Error(\"Called getUser without authentication present\");\n  }\n  console.log(identity.tokenIdentifier);\n  console.log(identity.subject);\n  console.log(identity.issuer);\n  console.log(identity.email);\n  console.log(identity.emailVerified);\n  console.log(identity.name);\n  console.log(identity.familyName);\n  console.log(identity.givenName);\n  console.log(identity.nickname);\n  console.log(identity.pictureUrl);\n  console.log(identity.updatedAt);\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Convex Mutation with Arguments\nDESCRIPTION: This code demonstrates how to call a Convex mutation function with arguments and handle the returned value.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/android.md#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval recordsDeleted = convex.mutation<@ConvexNum Int>(\n  \"messages:cleanup\",\n  args = mapOf(\"keepLatest\" to 100)\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function\nDESCRIPTION: Example of a Convex mutation function that demonstrates argument validation and database write operations. The function accepts string parameters and performs database insertions.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Union Types in TypeScript\nDESCRIPTION: Example of defining a schema with union types using v.union() in Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/schemas.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndefineTable({\n  stringOrNumber: v.union(v.string(), v.number()),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex\nDESCRIPTION: Defines a query function that takes number and string arguments, reads data from the database and returns it. This example demonstrates argument validation, database querying, and logging functionality.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/sveltekit/src/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex (TypeScript)\nDESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It shows the structure for argument validation and function implementation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/udf-tests/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Query Function in React Component\nDESCRIPTION: Shows how to use the previously defined query function in a React component using the useQuery hook. This snippet demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-old/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Convex Query Function in TypeScript\nDESCRIPTION: Example of creating a query function that accepts numeric and string arguments. It demonstrates how to validate arguments, read from the database, and process the results before returning them to the client.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-app-router-snippets/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query in React Component\nDESCRIPTION: React component code using useQuery hook to fetch and display tasks from Convex backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/quickstart-react-cra.mdx#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { useQuery } from \"convex/react\";\nimport { api } from \"./convex/_generated/api\";\n\nfunction App() {\n  const tasks = useQuery(api.tasks.get);\n  return (\n    <div className=\"App\">\n      {JSON.stringify(tasks, null, 2)}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex with TypeScript\nDESCRIPTION: Example of a mutation function that modifies the database. Shows argument validation, database operations, and return value handling.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/cron-jobs/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex (TypeScript)\nDESCRIPTION: Illustrates the creation of a mutation function in Convex that takes two string arguments, inserts data into the database, and optionally returns the inserted data. It includes argument validation and database operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/giphy-action/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex. It includes argument validation, database querying, and data processing. The function takes two arguments and returns documents from a database table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-facepile/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Indexes in Convex Schema\nDESCRIPTION: Example showing how to define a messages table with two indexes - by_channel and by_channel_user. Demonstrates index definition using defineSchema and defineTable.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSchema, defineTable } from \"convex/server\";\nimport { v } from \"convex/values\";\n\n// Define a messages table with two indexes.\nexport default defineSchema({\n  messages: defineTable({\n    channel: v.id(\"channels\"),\n    body: v.string(),\n    user: v.id(\"users\"),\n  })\n    .index(\"by_channel\", [\"channel\"])\n    .index(\"by_channel_user\", [\"channel\", \"user\"]),\n});\n```\n\n----------------------------------------\n\nTITLE: Using runAction for Different Runtime in Convex (TypeScript)\nDESCRIPTION: This example demonstrates how to use runAction when calling code that requires a different runtime (e.g., Node.js) from a Convex function. It shows the proper use case for runAction.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport const scrapeWebsite = action(\n  async ({ runAction }, { url }: { url: string }) => {\n    const result = await runAction(\n      async (ctx) => {\n        const cheerio = await import(\"cheerio\");\n        const response = await fetch(url);\n        const html = await response.text();\n        const $ = cheerio.load(html);\n        return $(\"title\").text();\n      },\n      { runtime: \"node\" }\n    );\n    return result;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation in a React Component (TypeScript)\nDESCRIPTION: Shows how to use the useMutation hook to call a Convex mutation function from a React component. The example demonstrates both fire-and-forget and promise-based approaches to handling the mutation result.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/snippets/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React Component\nDESCRIPTION: Demonstrates how to use a Convex mutation function within a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/0-start/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: A React code snippet showing how to use the Convex query function in a component with the useQuery hook. This demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/http/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex with TypeScript\nDESCRIPTION: Example of a query function implementation that takes numeric and string arguments. Shows how to validate arguments, read from the database, and process data before returning.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/cron-jobs/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/retention-tester/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Mutation Wrapper Example in TypeScript\nDESCRIPTION: This code demonstrates a complex way of wrapping a mutation function with multiple middleware layers, including session, user, and custom context handling.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/middleware/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nconst myMutWrapper = withSession(withUser(withCustomerCtx(mutation)))\nexport myMut = myMutWrapper({\n  input: { a: v.string() },\n  openAPIexample: \"Run the function like this.\"\n  customContext: { foo: 123 },\n  handler: ({ user, session, foo }, { a, addedByAWrapper }) => { ... }\n}]\n```\n\n----------------------------------------\n\nTITLE: Defining Vector Index for Food Table in Convex Schema\nDESCRIPTION: This snippet demonstrates how to define a vector index for a 'foods' table in the Convex schema. It includes a vector field for embeddings and a filter field for cuisine.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/search/vector-search.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineSchema({\n  foods: defineTable({\n    name: v.string(),\n    cuisine: v.string(),\n    embedding: v.array(v.number()),\n  }).vectorIndex(\"by_embedding\", {\n    vectorField: \"embedding\",\n    dimensions: 1536,\n    filterFields: [\"cuisine\"],\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation in a React Component\nDESCRIPTION: Example showing how to use a Convex mutation function in a React component using the useMutation hook. It demonstrates both fire-and-forget and promise-based approaches to handling mutations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/args-validation/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex (TypeScript)\nDESCRIPTION: This snippet illustrates how to create a mutation function in Convex. It includes argument validation, database insertion, and optional return value. The function takes two string arguments and inserts a message into the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/demo/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Backend Authentication\nDESCRIPTION: Server-side configuration for validating Auth0 access tokens in Convex backend\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/auth0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  providers: [\n    {\n      domain: \"your-domain.us.auth0.com\",\n      applicationID: \"yourclientid\",\n    },\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Server-side Storage ID Persistence\nDESCRIPTION: Demonstrates how to save a storage ID to the database after a successful file upload. This mutation handles storing the file reference in the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/file-storage/upload-files.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const saveStorageId = mutation(async (ctx, storageId) => {\n  const message = { file: storageId };\n  return await ctx.db.insert(\"messages\", message);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function - TypeScript\nDESCRIPTION: Example of a Convex query function that accepts numeric and string arguments. The function demonstrates database querying, argument validation, and data processing capabilities.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/search/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Field Name Conversion with CodingKeys in Swift\nDESCRIPTION: Example of using CodingKeys enum to map field names from a backend function to Swift struct properties, handling reserved keywords like 'in'.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/swift/data-types.md#2025-04-21_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct Log: Decodable {\n  let name: String\n  let inTime: String\n  let outTime: String\n\n  enum CodingKeys: String, CodingKey {\n    case name\n    case inTime = \"in\"\n    case outTime = \"out\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function with TypeScript\nDESCRIPTION: Example of a mutation function that accepts string arguments and demonstrates database writing operations. Shows how to insert data and return the inserted record.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir-js/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex (TypeScript)\nDESCRIPTION: Illustrates the creation of a mutation function in Convex that takes two string arguments, inserts data into the database, and returns the inserted document. It shows argument validation and database operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/udf-tests/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Exposing Convex Query in JavaScript\nDESCRIPTION: JavaScript code to define a query function that retrieves tasks from the Convex database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { query } from \"./_generated/server\";\n\nexport const get = query(async ({ db }) => {\n  return await db.query(\"tasks\").collect();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function that accepts parameters, retrieves data from the database, and returns results. This example includes argument validation with Convex's validation utilities and shows the pattern for database access.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/html/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex\nDESCRIPTION: A template for creating a query function that takes two arguments (number and string). It demonstrates argument validation, database querying, and returning documents. The function collects all documents from a specified table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/npm-showcase/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Optimistic Update for Counter in TypeScript/JavaScript\nDESCRIPTION: This snippet demonstrates how to add an optimistic update to an 'increment' mutation in a simple counter app. It updates the 'api.counter.get' query locally before the server responds.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/optimistic-updates.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMutation } from \"convex/react\";\nimport { api } from \"../convex/_generated/api\";\n\nexport default function IncrementCounter() {\n  const increment = useMutation(api.counter.increment).withOptimisticUpdate(\n    (localStore, increment) => {\n      const current = localStore.getQuery(api.counter.get);\n      if (current !== undefined) {\n        localStore.setQuery(api.counter.get, current + increment);\n      }\n    }\n  );\n  return <button onClick={() => increment(1)}>+1</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/vector-importer/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: React Hook for User Storage Effect\nDESCRIPTION: Custom React hook that handles user storage in the database when authentication state changes.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/database-auth.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEffect, useState } from \"react\";\nimport { useConvexAuth } from \"convex/react\";\nimport { useAction } from \"../convex/_generated/react\";\n\nexport default function useStoreUserEffect() {\n  const { isAuthenticated } = useConvexAuth();\n  const [isStored, setIsStored] = useState(false);\n  const storeUser = useAction(\"users:store\");\n\n  useEffect(() => {\n    if (isAuthenticated && !isStored) {\n      storeUser()\n        .then(() => setIsStored(true))\n        .catch(console.error);\n    } else if (!isAuthenticated && isStored) {\n      setIsStored(false);\n    }\n  }, [isAuthenticated, isStored, storeUser]);\n\n  return isStored;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Convex Data in Svelte Component\nDESCRIPTION: Svelte component code that uses the Convex useQuery hook to fetch and display tasks from the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/svelte.mdx#2025-04-21_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useQuery } from \"convex-svelte\";\n  import { api } from \"../convex/_generated/api\";\n\n  const tasks = useQuery(api.tasks.get);\n</script>\n\n<h1>Convex + Svelte</h1>\n\n{#if $tasks.isLoading}\n  <p>Loading...</p>\n{:else if $tasks.error}\n  <p>Error: {$tasks.error.message}</p>\n{:else}\n  <ul>\n    {#each $tasks.value as task}\n      <li>{task.text}</li>\n    {/each}\n  </ul>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex\nDESCRIPTION: A TypeScript example of a Convex mutation function that writes data to the database. This function demonstrates argument validation, database insertion operations, and returning the newly created record.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/javascript/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React Component (TypeScript)\nDESCRIPTION: This snippet shows how to use a Convex query function within a React component. It demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/components-poc/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React\nDESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/react-vite-ts/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React Component (TypeScript)\nDESCRIPTION: Demonstrates how to use the previously defined Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget usage and handling the mutation result with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/shared-cursors/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments, queries a database table, and returns the results. Includes argument validation and database querying.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/file-storage/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Shows how to create a mutation function that writes data to the database. Includes argument validation and database insertion example.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/retention-tester/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex\nDESCRIPTION: Demonstrates how to create a mutation function that accepts validated arguments and modifies data in the database. It shows inserting a new document and returning the created document to the client.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/bun/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining DataModel Type in TypeScript for Convex Project Structure\nDESCRIPTION: Creates a type alias DataModel representing the entire Convex data model, including tables, document types, and indexes. Used for type-safe queries and mutations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/generated-api/data-model.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **DataModel**: `Object`\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth0 Authentication in Next.js _app Component\nDESCRIPTION: Example of setting up client-side authentication in Next.js Pages Router using Auth0 and Convex. Shows how to conditionally render content based on authentication state using ConvexProviderWithAuth0.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/nextjs-pages-router/nextjs-pages-router.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n_simpleAuthedApp.tsx content not provided in the input\n```\n\n----------------------------------------\n\nTITLE: Setting up Convex HTTP Client\nDESCRIPTION: Shows how to implement a Convex HTTP client for single-point-in-time queries, commonly used in server-side rendering and administrative scripts.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/javascript.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConvexHttpClient } from \"convex/browser\";\n\nconst client = new ConvexHttpClient(process.env.CONVEX_URL!);\n\n// Run a mutation\nawait client.mutation(\"sendMessage\", { body: \"Hello!\" });\n\n// Execute a query\nconst messages = await client.query(\"listMessages\", {});\n```\n\n----------------------------------------\n\nTITLE: Implementing MVVM Pattern with Convex in SwiftUI\nDESCRIPTION: Demonstrates how to structure a SwiftUI application using MVVM pattern with Convex integration. The example shows a ViewModel that manages Convex subscription for color data and a View that displays the data using SwiftUI List.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/swift.md#2025-04-21_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\n\nclass ViewModel: ObservableObject {\n  @Published var colors: [String] = []\n\n  init() {\n    convex.subscribe(to: \"colors:get\")\n      .replaceError(with: [])\n      .receive(on: DispatchQueue.main)\n      .assign(to: &$colors)\n  }\n}\n\nstruct ContentView: View {\n  @StateObject var viewModel = ViewModel()\n\n  var body: some View {\n    List {\n      ForEach(viewModel.colors, id: \\.self) { color in\n        Text(color)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React Component\nDESCRIPTION: Demonstrates how to use the mutation function in a React component, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/clerk/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Action Constructor in TypeScript\nDESCRIPTION: This snippet demonstrates how to define an HTTP action handler using the httpAction constructor in Convex. It shows the basic structure and parameters of the handler function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/http-actions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { httpAction } from \"./_generated/server\";\n\nconst myHttpAction = httpAction(async ({ runMutation }, request) => {\n  // Access request data\n  const body = await request.json();\n  // Run a mutation\n  await runMutation(\"myMutation\", body);\n  // Return a response\n  return new Response(\"Success!\", { status: 200 });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Example of a Convex query function that accepts numeric and string arguments. Shows how to define argument validators and implement a handler that queries the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/react-vite-ts/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Client-Side Database Types\nDESCRIPTION: Example of using generated Doc and Id types in client-side TypeScript code.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/typescript.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<Snippet title=\"src/App.tsx\" source={ClientDatabaseTypes} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Example of a mutation function that accepts string arguments and demonstrates database writing operations. Shows how to insert data and return the inserted record.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/1-smileys/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component - TypeScript\nDESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component, including both fire-and-forget and promise-based patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/search/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex\nDESCRIPTION: Illustrates the creation of a mutation function in Convex that takes two arguments, inserts data into the database, and optionally returns the inserted data. It includes argument validation and database operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/typescript/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Root Component with Clerk Authentication\nDESCRIPTION: Root component implementation that handles Clerk authentication integration with Convex. Includes token fetching, context setup, and provider configuration.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/tanstack-start/clerk.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ClerkProvider, useAuth } from \"@clerk/clerk-react\";\nimport { ConvexProviderWithClerk } from \"convex/react-clerk\";\nimport { convex } from \"./router\";\n\nexport const Route = createFileRoute('/__root')(() => {\n  const { getAuth, getToken } = useAuth();\n\n  return {\n    beforeLoad: async ({ context: ctx }) => {\n      const { userId, getToken } = await getAuth(getToken);\n      const token = await getToken({ template: \"convex\" });\n      if (token) {\n        ctx.context.convexQueryClient.serverHttpClient?.setAuth(token);\n      }\n      return { userId, token };\n    },\n    component: () => (\n      <ClerkProvider publishableKey={import.meta.env.VITE_CLERK_PUBLISHABLE_KEY}>\n        <ConvexProviderWithClerk client={convex}>\n          <Outlet />\n        </ConvexProviderWithClerk>\n      </ClerkProvider>\n    ),\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Shows how to create a query function that accepts numeric and string arguments. The function demonstrates database querying with input validation and data processing capabilities.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/0-start/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: This example shows how to use a Convex mutation function in a React component using the useMutation hook. It demonstrates both fire-and-forget usage and how to handle the returned result.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/@convex-dev/react-query/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component\nDESCRIPTION: Example of how to use a Convex mutation function within a React component using the useMutation hook, showing both fire-and-forget and promise-based patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/actions/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function with TypeScript\nDESCRIPTION: Demonstrates how to create a mutation function that accepts string arguments and performs database operations. Includes argument validation and database insertion example.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-clerk/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using OR Operator in Filters in TypeScript\nDESCRIPTION: Demonstrates using the OR operator to filter users named either 'Alex' or 'Emma'.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/filters.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst usersNamedAlexOrEmma = await ctx.db\n  .query(\"users\")\n  .filter((q) =>\n    q.or(q.eq(q.field(\"name\"), \"Alex\"), q.eq(q.field(\"name\"), \"Emma\")),\n  )\n  .collect();\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function in TypeScript\nDESCRIPTION: Shows how to create a mutation function that accepts string arguments and performs database write operations. Includes argument validation and demonstrates database insertion with return values.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/scheduling/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Pagination Implementation\nDESCRIPTION: Utility function demonstrating manual pagination implementation by making successive API calls with cursors.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/pagination.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function downloadAllMessages(client: ConvexClient) {\n  const messages = [];\n  let cursor = null;\n  while (true) {\n    const response = await client.query(\"messages:list\", {\n      paginationOpts: { numItems: 100, cursor },\n    });\n    messages.push(...response.page);\n    if (!response.isDone) {\n      cursor = response.continueCursor;\n    } else {\n      break;\n    }\n  }\n  return messages;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Convex Mutation Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a mutation function for inserting or modifying data in the database. It shows argument validation, writing data to the database, and returning results from the operation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/vector-search/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Action with NPM Package Usage\nDESCRIPTION: Shows how to use fetch and NPM packages in an action within Convex's environment.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/actions.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const myAction = action({\n  handler: async (ctx) => {\n    const response = await fetch(\"https://api.example.com\");\n    const data = await response.json();\n    // Use data\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Authentication in Convex Functions\nDESCRIPTION: This snippet demonstrates how to use authentication state in Convex functions. It shows how to access user identity information and use it in queries and mutations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/clerk.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation, query } from \"./_generated/server\";\n\nexport const send = mutation(\n  async ({ db, auth }, { text }: { text: string }) => {\n    const identity = await auth.getUserIdentity();\n    if (!identity) {\n      throw new Error(\"Unauthenticated call to mutation\");\n    }\n    const message = { text, author: identity.name };\n    await db.insert(\"messages\", message);\n  }\n);\n\nexport const list = query(async ({ db, auth }) => {\n  const identity = await auth.getUserIdentity();\n  if (!identity) {\n    return [];\n  }\n  return await db.query(\"messages\").collect();\n});\n```\n\n----------------------------------------\n\nTITLE: HTTP Action File Upload Handler\nDESCRIPTION: Implementation of an HTTP action that handles file uploads directly. Includes CORS configuration and storage handling using the Convex storage API.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/file-storage/upload-files.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default internalAction(async (ctx, request) => {\n  if (request.method === \"POST\") {\n    const blob = await request.blob();\n    const storageId = await ctx.storage.store(blob);\n    await ctx.runMutation(internal.messages.save, { storageId });\n    return new Response(JSON.stringify({ storageId }), {\n      headers: corsHeaders,\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component\nDESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/cron-jobs/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Convex Provider\nDESCRIPTION: Setup code to initialize Convex client and wrap the React application with ConvexProvider.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/quickstart-react-cra.mdx#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { ConvexProvider, ConvexReactClient } from \"convex/react\";\n\nconst convex = new ConvexReactClient(process.env.REACT_APP_CONVEX_URL);\nroot.render(\n  <React.StrictMode>\n    <ConvexProvider client={convex}>\n      <App />\n    </ConvexProvider>\n  </React.StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex\nDESCRIPTION: Demonstrates how to create a mutation function that modifies data in the database. The function validates input arguments, inserts a new document into the 'messages' table, and returns the created document.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/test-data/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Calling Actions with useAction Hook in React\nDESCRIPTION: Demonstrates how to use the useAction hook to call third-party APIs or perform complex operations from a React component.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAction } from \"convex/react\";\nimport { api } from \"../convex/_generated/api\";\n\nexport function App() {\n  const doSomeAction = useAction(api.functions.doSomeAction);\n  return <button onClick={() => doSomeAction()}>Click me</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing usePresence Hook for Typing Indicator\nDESCRIPTION: Using the usePresence hook to initialize presence tracking in a chat room. The hook takes a room identifier, user name, and initial presence state, returning the current user's presence, others' presence, and an update function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-typing-indicator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst [myPresence, othersPresence, updateMyPresence] = usePresence(\n  \"chat-room\",\n  name,\n  { typing: false },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Convex Query Function\nDESCRIPTION: Backend query function to fetch all tasks from the Convex database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/quickstart-react-cra.mdx#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { query } from \"./_generated/server\";\n\nexport const get = query({\n  args: {},\n  handler: async (ctx) => {\n    return await ctx.db.query(\"tasks\").collect();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Helper Functions for Mutations in JavaScript\nDESCRIPTION: This example demonstrates how to create and use helper functions to split up mutation code or reuse logic across multiple Convex functions in JavaScript.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/mutation-functions.mdx#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\n\nasync function performComplexLogic(ctx, input) {\n  // Complex logic here\n  return input.toUpperCase();\n}\n\nexport const myMutation = mutation({\n  handler: async (ctx, { input }) => {\n    const result = await performComplexLogic(ctx, input);\n    return result;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in a React Component\nDESCRIPTION: This snippet demonstrates how to use a Convex mutation function in a React component using the useMutation hook. It shows both fire-and-forget and promise-based usage patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/pagination-adversarial/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex with CommonJS in Node.js\nDESCRIPTION: This example shows how to use Convex with CommonJS syntax in Node.js, utilizing the generated CommonJS-compatible API file.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/javascript/node.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ConvexHttpClient, ConvexClient } = require(\"convex/browser\");\nconst { api } = require(\"./convex/_generated/api_cjs.cjs\");\nconst httpClient = new ConvexHttpClient(CONVEX_URL_GOES_HERE);\n```\n\n----------------------------------------\n\nTITLE: Running Specific Convex Function via NodeJS\nDESCRIPTION: Example of making a POST request to Convex run API endpoint using JavaScript fetch API to execute a specific function by its identifier.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/http-api/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = \"https://acoustic-panther-728.convex.cloud/api/run/messages/list\";\nconst request = { args: {}, format: \"json\" };\n\nconst response = fetch(url, {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify(request),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function in TypeScript\nDESCRIPTION: Example of a mutation function that accepts string arguments and performs database operations. Includes argument validation and async database insertion.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/vector-search/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for Convex\nDESCRIPTION: Adds necessary Gradle dependencies including Convex Mobile SDK and Kotlin serialization support.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/android.mdx#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    // ... existing plugins\n    kotlin(\"plugin.serialization\") version \"1.9.0\"\n}\n\ndependencies {\n    // ... existing dependencies\n    implementation(\"dev.convex:android-convexmobile:0.4.1@aar\") {\n        isTransitive = true\n    }\n    implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/typescript/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Query Functions in Convex\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex that reads data from the database. It shows how to define argument validators, handle asynchronous database operations, and process data before returning it to the client.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/python-quickstart/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Shows how to use the defined query function in a React component using the useQuery hook. This demonstrates proper passing of arguments to the backend function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex-chat-speculative/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Example of implementing a Convex query in a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/workflow.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQuery } from \"convex/react\";\nimport { api } from \"../convex/_generated/api\";\n\nexport function App() {\n  const data = useQuery(api.tasks.getTaskList);\n  return data ?? \"Loading...\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Example of how to use a Convex mutation function in a React component using the useMutation hook. Shows both fire-and-forget usage and handling the mutation result with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/npm-showcase/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Example of a Convex mutation function that handles data modifications. Shows argument validation and database insertion operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/react-vite-ts/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Function in Convex\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex. It includes argument validation, database querying, and data processing. The function takes two arguments: a number and a string.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/3-ai/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing User Identity in Convex Functions (TypeScript)\nDESCRIPTION: Demonstrates how to retrieve user identity information within Convex query, mutation, and action functions using the `auth` property.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/functions-auth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query, mutation, action } from \"./_generated/server\";\n\nexport const myQuery = query(async (ctx) => {\n  const identity = await ctx.auth.getUserIdentity();\n  if (identity === null) {\n    throw new Error(\"Unauthenticated call to mutation\");\n  }\n  // Your code here\n});\n\nexport const myMutation = mutation(async (ctx) => {\n  const identity = await ctx.auth.getUserIdentity();\n  if (identity === null) {\n    throw new Error(\"Unauthenticated call to mutation\");\n  }\n  // Your code here\n});\n\nexport const myAction = action(async (ctx) => {\n  const identity = await ctx.auth.getUserIdentity();\n  if (identity === null) {\n    throw new Error(\"Unauthenticated call to action\");\n  }\n  // Your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Convex Client in Swift\nDESCRIPTION: Creates a new instance of ConvexClient by providing the deployment URL. This client should be maintained for the lifetime of the application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/swift.md#2025-04-21_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ConvexMobile\n\nlet convex = ConvexClient(deploymentUrl: \"https://<your domain here>.convex.cloud\")\n```\n\n----------------------------------------\n\nTITLE: Updating Message Sending Mutation with Wiki Command\nDESCRIPTION: Enhances the existing sendMessage mutation to handle Wikipedia lookup commands and schedule Wikipedia summary retrieval when messages start with '/wiki'.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/tutorial/actions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { api, internal } from \"./_generated/api\";\n\nexport const sendMessage = mutation({\n  args: {\n    user: v.string(),\n    body: v.string(),\n  },\n  handler: async (ctx, args) => {\n    console.log(\"This TypeScript function is running on the server.\");\n    await ctx.db.insert(\"messages\", {\n      user: args.user,\n      body: args.body,\n    });\n\n    if (args.body.startsWith(\"/wiki\")) {\n      const topic = args.body.slice(args.body.indexOf(\" \") + 1);\n      await ctx.scheduler.runAfter(0, internal.chat.getWikipediaSummary, {\n        topic,\n      });\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Index for Player Scores in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a schema for a 'players' table with an index on the 'highestScore' field. This index allows for efficient querying of players based on their scores.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineSchema({\n  players: defineTable({\n    username: v.string(),\n    highestScore: v.number(),\n  }).index(\"by_highest_score\", [\"highestScore\"]),\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Pre-flight OPTIONS Request for CORS\nDESCRIPTION: This snippet demonstrates how to handle a pre-flight OPTIONS request for CORS in a Convex HTTP action. It shows the setup of appropriate headers for allowing cross-origin requests.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/http-actions.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nif (request.method === \"OPTIONS\") {\n  const headers = new Headers();\n  headers.set(\"Access-Control-Allow-Origin\", \"*\");\n  headers.set(\"Access-Control-Request-Method\", \"*\");\n  headers.set(\"Access-Control-Allow-Methods\", \"OPTIONS, GET, POST\");\n  headers.set(\"Access-Control-Allow-Headers\", \"*\");\n  return new Response(null, {\n    status: 204,\n    headers,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document by ID in Convex\nDESCRIPTION: Shows how to fetch a single document using its ID with the get method.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/document-ids.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst retrievedUser = await ctx.db.get(userId);\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React\nDESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex-ai-chat/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React\nDESCRIPTION: Shows how to use a Convex mutation function within a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/basic/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Convex Provider in React Native Layout\nDESCRIPTION: Set up the ConvexProvider in the app's layout file to connect the React Native app to the Convex backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react-native.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport layout from \"!!raw-loader!@site/../private-demos/quickstarts/expo/app/_layout.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Querying Messages Using by_channel_user Index\nDESCRIPTION: Examples of different query patterns using the by_channel_user index, showing ordering by user and filtering by channel.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = await ctx.db\n  .query(\"messages\")\n  .withIndex(\"by_channel_user\", (q) => q.eq(\"channel\", channel))\n  .collect();\n```\n\n----------------------------------------\n\nTITLE: Storing Generated Image in Convex Action (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to fetch an image from an external API, store it in Convex storage, and save its metadata in the database. It uses the storage.store() method to save the image and a mutation to store the metadata.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/file-storage/store-files.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { v } from \"convex/values\";\nimport { action } from \"./_generated/server\";\n\nexport const store = action(async (ctx, args) => {\n  const { prompt } = args;\n\n  // Fetch image from third-party API\n  const response = await fetch(\"https://example.com/generate-image\", {\n    method: \"POST\",\n    body: JSON.stringify({ prompt }),\n  });\n  if (!response.ok) {\n    throw new Error(`Failed to generate image: ${response.statusText}`);\n  }\n  const image = await response.arrayBuffer();\n\n  // Store image in Convex File Storage\n  const storageId = await ctx.storage.store(image);\n\n  // Save metadata about image to database\n  const documentId = await ctx.runMutation(async ({ insert }) => {\n    return insert(\"images\", {\n      storageId,\n      prompt,\n    });\n  });\n\n  return { documentId, storageId };\n});\n\nstore.args = {\n  prompt: v.string(),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Optional Fields in TypeScript\nDESCRIPTION: Example of defining a schema with optional fields using v.optional() in Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/schemas.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndefineTable({\n  optionalString: v.optional(v.string()),\n  optionalNumber: v.optional(v.number()),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function in TypeScript\nDESCRIPTION: Example of a query function that accepts numeric and string arguments, reads from the database, and returns documents. Includes argument validation and async database operation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/vector-search/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Schema Implementation in TypeScript Convex Functions\nDESCRIPTION: Example showing how to use TypeScript with schema definitions in Convex, including Doc types and Document IDs.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/typescript.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<Snippet title=\"convex/messages.ts\" source={WithSchema} />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a mutation function in Convex. It includes argument validation, database insertion, and optional return value. The function takes two string arguments and inserts a new message into the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-typing-indicator/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex\nDESCRIPTION: A Convex mutation function example that modifies data in the database. The function takes two string arguments, inserts a document into a 'messages' table, and optionally returns the created document.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React\nDESCRIPTION: Example of how to use a Convex mutation function within a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/1-smileys/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React\nDESCRIPTION: Example showing how to use a Convex mutation function within a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex-ai-chat/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex. It includes argument validation, database querying, and data processing. The function takes two arguments (a number and a string) and returns documents from the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/zod-validation-ts/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation Functions in React Components\nDESCRIPTION: Example of how to use a Convex mutation function within a React component using the useMutation hook. It demonstrates both fire-and-forget usage and handling the returned result with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/waitlist/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Convex Mutation Function in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a mutation function in Convex that accepts string arguments. The function illustrates database write operations and returning the created document.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/expo/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Auth Provider with ConvexProviderWithAuth\nDESCRIPTION: This React code demonstrates how to integrate a custom auth provider (ProviderX) with Convex using ConvexProviderWithAuth. It wraps the ConvexProviderWithAuth component with the custom auth provider's component.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/advanced/custom-auth.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AuthProviderXReactProvider } from \"providerX\";\nimport { ConvexProviderWithAuth } from \"convex/react\";\n\nroot.render(\n  <StrictMode>\n    <AuthProviderXReactProvider>\n      <ConvexProviderWithAuth client={convex} useAuth={useAuthFromProviderX}>\n        <App />\n      </ConvexProviderWithAuth>\n    </AuthProviderXReactProvider>\n  </StrictMode>,\n);\n```\n\n----------------------------------------\n\nTITLE: Authenticated Convex Query Preloading in Next.js\nDESCRIPTION: Demonstrates how to make authenticated requests to Convex during server rendering using preloadQuery with a JWT token.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/nextjs/nextjs-server-rendering.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { preloadQuery } from \"convex/nextjs\";\nimport { api } from \"../../convex/_generated/api\";\nimport { Tasks } from \"./Tasks\";\nimport { getAuthToken } from \"./auth\";\n\nexport default async function AuthedTasksWrapper() {\n  const token = await getAuthToken();\n  const preloaded = await preloadQuery(api.tasks.get, {}, { token });\n  return <Tasks preloaded={preloaded} />;\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Action for File Serving\nDESCRIPTION: HTTP action that serves files directly from Convex storage with access control\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/file-storage/serve-files.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nhttp.get(\"/image/:storageId\", httpAction(async (ctx, request) => {\n  const { storageId } = ctx.params;\n  try {\n    const blob = await ctx.storage.get(storageId as Id<\"_storage\">);\n    if (blob === null) {\n      return new Response(\"Image not found\", {\n        status: 404,\n      });\n    }\n    return new Response(blob);\n  } catch (error) {\n    return new Response(\"Error retrieving image\", {\n      status: 500,\n    });\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Shows how to create a mutation function for modifying database data, including argument validation and database operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/node/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React with TypeScript\nDESCRIPTION: An example of how to use a Convex mutation function in a React component using the useMutation hook. The example shows both fire-and-forget usage and handling the mutation result with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/mounted/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Vector Search Query for Similar Foods in Convex Action\nDESCRIPTION: This code snippet shows how to perform a vector search query in a Convex action to find similar French foods based on a description. It uses ctx.vectorSearch to fetch IDs of similar documents.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/search/vector-search.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst embedding = await generateEmbedding(description);\nconst results = await ctx.vectorSearch(\"foods\", \"by_embedding\", {\n  vector: embedding,\n  filter: q.eq(\"cuisine\", \"French\"),\n  limit: 5,\n});\n```\n\n----------------------------------------\n\nTITLE: Following Document References in Convex\nDESCRIPTION: Demonstrates how to follow document references to retrieve related documents.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/document-ids.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await ctx.db.get(book.ownerId);\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments, validates them, and queries the database. Shows the basic structure of a Convex query function including argument validation and database access.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-15-app-clerk/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation Function in React (TypeScript)\nDESCRIPTION: This snippet shows how to use a Convex mutation function in a React component. It demonstrates two ways to call the mutation: fire-and-forget and handling the result with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/system-tables/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React\nDESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. Shows both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-15-app-clerk/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function in TypeScript\nDESCRIPTION: Shows how to create a Convex mutation function that handles database writes. Includes argument validation and demonstrates database insertion patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/custom-errors/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Object Syntax Example for Registered Functions\nDESCRIPTION: Example demonstrating the preferred object syntax for Convex registered functions using queries\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/eslint.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Allowed by this rule:\nexport const list = query({\n  handler: async (ctx) => {\n    const data = await ctx.db.query(\"messages\").collect();\n    ...\n  },\n});\n\n// Not allowed by this rule:\nexport const list = query(async (ctx) => {\n  const data = await ctx.db.query(\"messages\").collect();\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Example of using a Convex mutation function in a React component with the useMutation hook. This snippet demonstrates both fire-and-forget usage and handling the returned promise to process the result.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-modern/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Discriminated Union in TypeScript\nDESCRIPTION: Example of defining a schema with a discriminated union for different document types in Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/schemas.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndefineTable(\n  v.union(\n    v.object({\n      kind: v.literal(\"StringDocument\"),\n      value: v.string(),\n    }),\n    v.object({\n      kind: v.literal(\"NumberDocument\"),\n      value: v.number(),\n    }),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating Convex with Simple HTML Script Tag\nDESCRIPTION: This snippet shows how to include Convex in an HTML file using a script tag. It sets up a basic structure to display and update messages from a Convex backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/javascript/script-tag.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <script src=\"https://unpkg.com/convex@1.0.3/dist/browser.bundle.js\"></script>\n  </head>\n  <body>\n    <h1>Messages</h1>\n    <ul id=\"messages\"></ul>\n    <input id=\"name\" type=\"text\" placeholder=\"Your name\" />\n    <input id=\"body\" type=\"text\" placeholder=\"Your message\" />\n    <button onclick=\"handleSend()\">Send</button>\n    <script>\n      const { ConvexClient } = window.convex;\n      const client = new ConvexClient(\"CONVEX_URL_GOES_HERE\");\n\n      async function handleSend() {\n        const name = document.getElementById(\"name\").value;\n        const body = document.getElementById(\"body\").value;\n        await client.mutation(\"sendMessage\", { body, author: name });\n        document.getElementById(\"body\").value = \"\";\n      }\n\n      client\n        .query(\"listMessages\")\n        .then((messages) => {\n          const messagesEl = document.getElementById(\"messages\");\n          messagesEl.innerHTML = messages\n            .map((message) => `<li>${message.author}: ${message.body}</li>`)\n            .join(\"\");\n        })\n        .catch((error) => {\n          console.error(\"Error fetching messages:\", error);\n        });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Optimistic Update for Chat App in TypeScript\nDESCRIPTION: This snippet shows a more complex optimistic update for a multi-channel chat app. It updates the 'api.messages.list' query to include a new message locally before the server responds, handling temporary IDs and timestamps.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/optimistic-updates.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMutation, useQuery } from \"convex/react\";\nimport { api } from \"../convex/_generated/api\";\nimport { Id } from \"../convex/_generated/dataModel\";\n\nexport default function MessageSender({ channel }: { channel: string }) {\n  const sendMessage = useMutation(api.messages.send).withOptimisticUpdate(\n    (localStore, { channel, body, author }) => {\n      const existingMessages = localStore.getQuery(api.messages.list, { channel });\n      if (existingMessages === undefined) return;\n      const newMessage = {\n        _id: new Id(\"messages\", crypto.randomUUID()),\n        _creationTime: Date.now(),\n        channel,\n        body,\n        author,\n      };\n      localStore.setQuery(\n        api.messages.list,\n        { channel },\n        [...existingMessages, newMessage]\n      );\n    }\n  );\n  const [body, setBody] = useState(\"\");\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        sendMessage({ channel, body, author: \"Me\" });\n        setBody(\"\");\n      }}\n    >\n      <input value={body} onChange={(e) => setBody(e.target.value)} />\n      <input type=\"submit\" />\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: This snippet shows how to use a Convex query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function that match the validation requirements defined on the server.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/cron/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Convex Query Function for Tasks\nDESCRIPTION: Define a Convex query function to fetch tasks from the database. This function is exposed as 'api.tasks.get'.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react-native.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport tasks from \"!!raw-loader!@site/../private-demos/quickstarts/expo/convex/tasks.ts\";\n```\n\n----------------------------------------\n\nTITLE: Using NPM Packages in Convex Mutations\nDESCRIPTION: This snippet demonstrates how to import and use NPM packages in Convex mutations. It uses the @faker-js/faker package as an example to generate fake data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/mutation-functions.mdx#2025-04-21_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { faker } from \"@faker-js/faker\";\n\nexport const addRandomUser = mutation({\n  handler: async (ctx) => {\n    const userId = await ctx.db.insert(\"users\", {\n      name: faker.person.fullName(),\n      email: faker.internet.email(),\n    });\n    return userId;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex. It includes argument validation, database querying, and data processing. The function takes two arguments and returns documents from a database table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-typing-indicator/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex (TypeScript)\nDESCRIPTION: This snippet illustrates how to create a mutation function in Convex. It includes argument validation, database insertion, and optional return value. The function inserts a message into the database and returns the inserted document.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/middleware/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function that takes numeric and string arguments. Shows database querying and argument validation using Convex's query API.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/system-udfs/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation Functions in React\nDESCRIPTION: Example showing how to use a Convex mutation function in a React component with the useMutation hook. It demonstrates both fire-and-forget usage and handling the mutation result with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/react-native/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: This snippet shows how to use a Convex query function in a React component using the useQuery hook. It demonstrates passing arguments to the query that match the validators defined in the backend function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/vue/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Convex Data in React App (JavaScript)\nDESCRIPTION: JavaScript React component that uses the useQuery hook to fetch and display tasks from the Convex backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useQuery } from \"convex/react\";\nimport { api } from \"../convex/_generated/api\";\n\nexport default function App() {\n  const tasks = useQuery(api.tasks.get);\n  return (\n    <ul>\n      {tasks?.map(({ _id, text }) => (\n        <li key={_id}>{text}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Optimistic Update for Chat App in JavaScript\nDESCRIPTION: This snippet is the JavaScript version of the complex optimistic update for a multi-channel chat app. It updates the 'api.messages.list' query locally before the server responds, handling temporary IDs and timestamps.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/optimistic-updates.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMutation, useQuery } from \"convex/react\";\nimport { api } from \"../convex/_generated/api\";\nimport { Id } from \"../convex/_generated/dataModel\";\nimport { useState } from \"react\";\n\nexport default function MessageSender({ channel }) {\n  const sendMessage = useMutation(api.messages.send).withOptimisticUpdate(\n    (localStore, { channel, body, author }) => {\n      const existingMessages = localStore.getQuery(api.messages.list, { channel });\n      if (existingMessages === undefined) return;\n      const newMessage = {\n        _id: new Id(\"messages\", crypto.randomUUID()),\n        _creationTime: Date.now(),\n        channel,\n        body,\n        author,\n      };\n      localStore.setQuery(\n        api.messages.list,\n        { channel },\n        [...existingMessages, newMessage]\n      );\n    }\n  );\n  const [body, setBody] = useState(\"\");\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        sendMessage({ channel, body, author: \"Me\" });\n        setBody(\"\");\n      }}\n    >\n      <input value={body} onChange={(e) => setBody(e.target.value)} />\n      <input type=\"submit\" />\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React\nDESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based usage patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/relational-data-modeling/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React\nDESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/react-native/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation of Scrape Model Functions (TypeScript)\nDESCRIPTION: This snippet shows the correct implementation of a scrape function in the model layer. It demonstrates how to structure code that requires a different runtime.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ActionCtx } from '../_generated/server';\n\nexport async function scrapeWebsite(ctx: ActionCtx, url: string) {\n  const cheerio = await import(\"cheerio\");\n  const response = await fetch(url);\n  const html = await response.text();\n  const $ = cheerio.load(html);\n  return $(\"title\").text();\n}\n```\n\n----------------------------------------\n\nTITLE: Task Query Implementation in Convex\nDESCRIPTION: Detailed example of a Convex query function that retrieves all open tasks from the database using an index on the completed field.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getAllOpenTasks = query({\n  args: {},\n  handler: async (ctx, args) => {\n    // Query the database to get all items that are not completed\n    const tasks = await ctx.db\n      .query(\"tasks\")\n      .withIndex(\"by_completed\", (q) => q.eq(\"completed\", false))\n      .collect();\n    return tasks;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Messages Using by_channel Index\nDESCRIPTION: Example of querying messages in a specific channel within a time range using the by_channel index.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = await ctx.db\n  .query(\"messages\")\n  .withIndex(\"by_channel\", (q) =>\n    q\n      .eq(\"channel\", channel)\n      .gt(\"_creationTime\", Date.now() - 2 * 60000)\n      .lt(\"_creationTime\", Date.now() - 60000),\n  )\n  .collect();\n```\n\n----------------------------------------\n\nTITLE: Querying Top Scoring Players by Country Using Index in TypeScript\nDESCRIPTION: This example demonstrates a more targeted query using both an index and a range expression. It queries the top 10 highest scoring players specifically from Canada, showcasing how to combine 'withIndex', a range expression, 'order', and 'take'.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst topScoringPlayers = await ctx.db\n  .query(\"users\")\n  .withIndex(\"by_country_highest_score\", (q) => q.eq(\"country\", \"CA\"))\n  .order(\"desc\")\n  .take(10);\n```\n\n----------------------------------------\n\nTITLE: Creating a Convex Query Function to Fetch Messages\nDESCRIPTION: This code implements a query function that retrieves messages from the database in descending order of creation time. It demonstrates how to access the database and query a table with Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-old/tmp.txt#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"_generated/server\";\n\nexport const list = query(async ({ db }) => {\n  return await db.query(\"messages\").order(\"desc\").collect();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex that takes two arguments. It shows the structure of a query function including argument validation and database interaction.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/components-poc/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React Component (TypeScript)\nDESCRIPTION: Illustrates how to use the previously defined mutation function in a React component using the useMutation hook. It shows both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/with-schema/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Paginated Query with Additional Arguments\nDESCRIPTION: Example of a paginated query that accepts additional arguments besides pagination options, filtering messages by author.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/pagination.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const listWithExtraArg = query({\n  args: {\n    paginationOpts: paginationOptsValidator,\n    author: v.string(),\n  },\n  handler: async (ctx, args) => {\n    return await ctx.db\n      .query(\"messages\")\n      .filter(q => q.eq(q.field(\"author\"), args.author))\n      .order(\"desc\")\n      .paginate(args.paginationOpts);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Example of how to use a Convex query function in a React component with the useQuery hook. Shows how to pass arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/react-query/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex (TypeScript)\nDESCRIPTION: Demonstrates how to create a mutation function in Convex. It includes argument validation and shows how to insert data into the database and return the result.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/with-schema/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Convex Client in HTML with Script Tags\nDESCRIPTION: Demonstrates how to include the Convex client in an HTML file using script tags, create a client instance, and query data from the Convex backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/script-tag.mdx#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Convex Client Example</title>\n    <script src=\"https://unpkg.com/convex@0.9.0/dist/browser.bundle.js\"></script>\n  </head>\n  <body>\n    <h1>Convex Client Example</h1>\n    <pre id=\"content\"></pre>\n    <script>\n      const address = \"CONVEX_URL_GOES_HERE\";\n      const client = new ConvexClient(address);\n      const content = document.getElementById(\"content\");\n\n      client.onUpdate(\"tasks:get\", (tasks) => {\n        content.textContent = JSON.stringify(\n          tasks.map((task) => task.text),\n          null,\n          2\n        );\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing ConvexClient and QueryClient for React Query Integration\nDESCRIPTION: Sets up ConvexClient, ConvexQueryClient, and QueryClient with default options for Convex integration. This configuration enables reactive queries and automatic updates.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/@convex-dev/react-query/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst convexClient = new ConvexReactClient(import.meta.env.VITE_CONVEX_URL);\nconst convexQueryClient = new ConvexQueryClient(convexClient);\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryKeyHashFn: convexQueryClient.hashFn(),\n      queryFn: convexQueryClient.queryFn(),\n    },\n  },\n});\nconvexQueryClient.connect(queryClient);\n```\n\n----------------------------------------\n\nTITLE: Performing Mutations with Convex and TanStack Query in React\nDESCRIPTION: This code snippet shows how to use Convex mutations with TanStack Query's useMutation hook in a React component. It demonstrates setting up the mutation function and triggering it on a button click.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/tanstack-query.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useConvexMutation } from \"@convex-dev/react-query\";\nimport { api } from \"../convex/_generated/api\";\n\nexport function App() {\n  const { mutate, isPending } = useMutation({\n    mutationFn: useConvexMutation(api.functions.doSomething),\n  });\n  return <button onClick={() => mutate({a: \"Hello\"})}>Click me</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Demonstrates how to create a mutation function in Convex that modifies the database. Shows argument validation and database insertion patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/vector-importer/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React Component (TypeScript)\nDESCRIPTION: Demonstrates how to use the previously defined mutation function within a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/sessions/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function\nDESCRIPTION: Example of a Convex mutation function that accepts two string arguments and demonstrates database operations within the handler.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/js-integration-tests/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Demonstrates how to use a Convex mutation function in a React component with the useMutation hook. Shows both fire-and-forget and promise-based usage patterns for handling the mutation results.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nodejs/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Convex Query Function in TypeScript\nDESCRIPTION: This code snippet shows how to create a query function in Convex that accepts number and string arguments. The function demonstrates database reading operations and returning data to the client.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/expo/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex using TypeScript. It includes argument validation, database querying, and data processing.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-clerk-webhooks/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Age Comparison in TypeScript\nDESCRIPTION: Shows how to filter documents using comparison operators, specifically finding users aged 18 or older using the gte operator.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/filters.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst adults = await ctx.db\n  .query(\"users\")\n  .filter((q) => q.gte(q.field(\"age\"), 18))\n  .collect();\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Function in Convex\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex that accepts two arguments (a number and a string), reads data from a database table, and returns the collected documents. It includes argument validation and database querying.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/javascript-old-syntax/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Convex Data in React App (TypeScript)\nDESCRIPTION: TypeScript React component that uses the useQuery hook to fetch and display tasks from the Convex backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery } from \"convex/react\";\nimport { api } from \"../convex/_generated/api\";\n\nexport default function App() {\n  const tasks = useQuery(api.tasks.get);\n  return (\n    <ul>\n      {tasks?.map(({ _id, text }) => (\n        <li key={_id}>{text}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Auth0 Components in React\nDESCRIPTION: Example of using Convex authentication components for handling different auth states\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/auth0.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Authenticated, Unauthenticated, AuthLoading } from \"convex/react\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Authenticated>Logged in</Authenticated>\n      <Unauthenticated>Logged out</Unauthenticated>\n      <AuthLoading>Still loading</AuthLoading>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Validator Types Implementation\nDESCRIPTION: Example of using the Infer type to generate TypeScript types from validators for both argument and schema validation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/typescript.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<Snippet title=\"convex/helpers.ts\" source={ValidatorTypes} />\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: This snippet shows how to use a Convex query function within a React component. It demonstrates passing arguments to the query function using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/3-ai/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation Function in Convex\nDESCRIPTION: Example of creating a mutation function that takes two string arguments and inserts data into a database. The function demonstrates validation, database operations, and returning values from mutations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/file-storage-with-http/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React Component (TypeScript)\nDESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. It shows both fire-and-forget and promise-based usage patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/react-vite/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Action from Mutation\nDESCRIPTION: Shows how to properly schedule an action from within a mutation instead of calling it directly from the client.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/actions.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const triggerAction = mutation({\n  handler: async (ctx) => {\n    // Write to database to track the action\n    await ctx.db.insert(\"actionRequests\", { status: \"pending\" });\n    // Schedule the action\n    await ctx.scheduler.runAfter(0, \"myAction\");\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Vector Search Results in Convex\nDESCRIPTION: These snippets show different ways to filter vector search results in Convex, including single value filters, multiple value filters, and filtering across multiple fields.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/search/vector-search.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfilter: q.eq(\"cuisine\", \"French\"),\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfilter: q.or(q.eq(\"cuisine\", \"French\"), q.eq(\"cuisine\", \"Indonesian\")),\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfilter: q.or(q.eq(\"cuisine\", \"French\"), q.eq(\"mainIngredient\", \"butter\")),\n```\n\n----------------------------------------\n\nTITLE: Defining a Convex Query Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a query function in Convex using TypeScript. It includes argument validation, database querying, and data processing.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/pagination-adversarial/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation Function in React Component (TypeScript)\nDESCRIPTION: This snippet illustrates how to use a Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget and promise-based usage.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tutorial/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Convex Deployment URL in Android Code\nDESCRIPTION: This code shows how to access the Convex deployment URL from Android resources to initialize the ConvexClient.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/android.md#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval convex = ConvexClient(context.getString(R.string.convex_url))\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Shows how to use the query function in a React component with the useQuery hook. The example passes the required arguments to the function to fetch data from the Convex backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/test-data/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk Provider with Environment Variables in React\nDESCRIPTION: This snippet shows how to configure the ClerkProvider component to use an environment variable for the publishable key in a React application. It's typically used in the main entry point of the app.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/clerk.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<TSAndJSSnippet\n  title=\"src/main.tsx\"\n  sourceTS={ConfigEnvTS}\n  sourceJS={ConfigEnvJS}\n  highlightPatterns={[\"publishableKey\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Example of how to use a Convex mutation function within a React component using the useMutation hook. Shows both fire-and-forget usage and handling the result with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/http/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex with TypeScript\nDESCRIPTION: A sample mutation function that takes two string arguments, inserts a document into the database, and returns the created record. It demonstrates argument validation, database insertion, and retrieval operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/waitlist/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component\nDESCRIPTION: Shows how to use a Convex mutation function within a React component using the useMutation hook, including both fire-and-forget and promise-based patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/vector-importer/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating NPM Packages in Convex Queries\nDESCRIPTION: This example shows how to import and use NPM packages in Convex queries, demonstrating the integration with the faker library for generating fake data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/query-functions.mdx#2025-04-21_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { faker } from \"@faker-js/faker\";\n\nexport const randomName = query({\n  handler: async () => {\n    return faker.person.fullName();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Example of a Convex query function that accepts numeric and string arguments. Shows how to define argument validators and implement a handler that queries the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/basic/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation with React Query\nDESCRIPTION: Demonstrates how to use a Convex mutation function with React Query's useMutation hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/@convex-dev/react-query/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutationFn = useConvexMutation(api.board.createColumn);\nconst { mutate } = useMutation({ mutationFn });\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React Component (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the previously defined mutation function in a React component using the useMutation hook. It shows two ways to call the mutation: fire-and-forget and handling the result with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/tanstack-start/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Demonstrates how to use a Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget usage and handling the mutation result.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/typescript/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React\nDESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/cjs-typescript/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation Function in Convex\nDESCRIPTION: Example of a mutation function that takes two string arguments and inserts data into the database. The function demonstrates argument validation, creating a new record, and returning the inserted document.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/text-importer/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Convex Query for Tasks\nDESCRIPTION: TypeScript code defining a Convex query to retrieve all tasks from the database. This query will be used by the Swift app to fetch task data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/swift.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\n\nexport const get = query({\n  args: {},\n  handler: async (ctx) => {\n    return await ctx.db.query(\"tasks\").collect();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in Next.js Server Action\nDESCRIPTION: Demonstrates how to use fetchMutation in a Next.js Server Action to modify data in Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/nextjs/nextjs-server-rendering.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetchMutation } from \"convex/nextjs\";\nimport { api } from \"../../../convex/_generated/api\";\n\nexport default function Page() {\n  async function createTask(formData: FormData) {\n    \"use server\";\n    const text = formData.get(\"text\");\n    if (typeof text !== \"string\") throw new Error(\"Invalid form data\");\n    await fetchMutation(api.tasks.create, { text });\n  }\n\n  return (\n    <form action={createTask}>\n      <input name=\"text\" />\n      <button type=\"submit\">Create</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Function in Convex\nDESCRIPTION: Example of a query function that takes two arguments (a number and a string) and reads data from the database. The function includes argument validation using Convex's validation system and demonstrates how to collect documents from a database table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/text-importer/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Actions in Convex\nDESCRIPTION: Function signature for defining HTTP action handlers in Convex that can process web requests and return responses, with access to the action context.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/generated-api/server.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nhttpAction(func: (ctx: ActionCtx, request: Request) => Promise<Response>): PublicHttpAction\n```\n\n----------------------------------------\n\nTITLE: User Identity Attributes Schema\nDESCRIPTION: Schema showing the valid attributes that can be used when assuming a user identity in the Convex dashboard. Includes required and optional fields with their corresponding data types.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/dashboard/deployments/functions.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"subject\": \"string\",         // required\n  \"issuer\": \"string\",         // required\n  \"name\": \"string\",\n  \"givenName\": \"string\",\n  \"familyName\": \"string\",\n  \"nickname\": \"string\",\n  \"preferredUsername\": \"string\",\n  \"profileUrl\": \"string\",\n  \"email\": \"string\",\n  \"emailVerified\": \"boolean\",\n  \"gender\": \"string\",\n  \"birthday\": \"string\",\n  \"timezone\": \"string\",\n  \"language\": \"string\",\n  \"phoneNumber\": \"string\",\n  \"phoneNumberVerified\": \"boolean\",\n  \"address\": \"string\",\n  \"updatedAt\": \"string\",      // RFC 3339 date format\n  \"customClaims\": \"object\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function\nDESCRIPTION: Example of a Convex query function that accepts numeric and string arguments. Shows how to define argument validators and implement a handler that queries the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/js-integration-tests/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: This snippet demonstrates how to use a Convex mutation function in a React component. It shows two patterns: fire-and-forget mutations and handling the mutation result with promises.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/javascript/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Range Query with Compound Index in TypeScript\nDESCRIPTION: This snippet demonstrates a range query using a compound index. It shows how to find all books by an author with titles starting with a specific letter, utilizing the 'gte' and 'lt' operators.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes-and-query-perf.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst asimovBooksStartingWithF = await ctx.db\n  .query(\"books\")\n  .withIndex(\"by_author_title\", (q) =>\n    q.eq(\"author\", \"Isaac Asimov\").gte(\"title\", \"F\").lt(\"title\", \"G\"),\n  )\n  .collect();\n```\n\n----------------------------------------\n\nTITLE: Creating Helper Functions for Mutations in TypeScript\nDESCRIPTION: This snippet shows how to create and use helper functions to split up mutation code or reuse logic across multiple Convex functions in TypeScript.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/mutation-functions.mdx#2025-04-21_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { mutation, MutationCtx } from \"./_generated/server\";\n\nasync function performComplexLogic(ctx: MutationCtx, input: string) {\n  // Complex logic here\n  return input.toUpperCase();\n}\n\nexport const myMutation = mutation({\n  handler: async (ctx, { input }) => {\n    const result = await performComplexLogic(ctx, input);\n    return result;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling undefined Fields in TypeScript Patch Operations\nDESCRIPTION: Demonstrates how to handle undefined fields when using ctx.db.patch operations, showing different approaches for field removal and preservation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/types.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nif (args.a === null) {\n  args.a = undefined;\n}\nawait ctx.db.patch(id, args);\n```\n\n----------------------------------------\n\nTITLE: Rendering Users Presence with FacePile Component in React\nDESCRIPTION: Shows how to display other users' presence data using the FacePile component. The othersPresence array contains presence data for all users except the current one and is initially undefined.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-facepile/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<FacePile othersPresence={othersPresence ?? []} />\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation Function in Convex\nDESCRIPTION: Example of defining a Convex mutation function that inserts data into the database. The function accepts string arguments, creates a document in the 'messages' collection, and optionally returns the newly created document.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-modern/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Convex Development Environment\nDESCRIPTION: Command to start Convex development environment and sync functions with cloud deployment.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/nextjs-pages-router/quickstart-nextjs-pages-router.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a mutation function in Convex that takes two arguments. It includes argument validation, database insertion, and optional return value.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/convex-tour-chat-tutorial/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: This snippet shows how to use a Convex mutation function in a React component using the useMutation hook. It demonstrates both fire-and-forget usage and handling the returned promise to access the result.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/cron/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Specific Convex Function via Python\nDESCRIPTION: Example of making a POST request to Convex run API endpoint using Python requests library to execute a specific function by its identifier.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/http-api/index.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nurl = \"https://acoustic-panther-728.convex.cloud/api/run/messages/list\"\nheaders = {\"accept\": \"application/json\"}\nbody = {\"args\": {}, \"format\": \"json\"}\n\nresponse = requests.get(url, headers=headers, body=json)\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation Function in React\nDESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. Shows both fire-and-forget and promise-based usage patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/scheduling/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Doc Type in React Components with TypeScript\nDESCRIPTION: Demonstrates how to use the Doc type from Convex's data model to provide type safety for document references in React components. The example shows typing a message document from the messages table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/schemas.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Doc } from \"../convex/_generated/dataModel\";\n\nfunction MessageView(props: { message: Doc<\"messages\"> }) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Convex Client in Android Application\nDESCRIPTION: This code demonstrates how to create an instance of ConvexClient and initialize it in a custom Android Application class.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/android.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.convexapp\n\nimport android.app.Application\nimport dev.convex.android.ConvexClient\n\nclass MyApplication : Application() {\n    lateinit var convex: ConvexClient\n\n    override fun onCreate() {\n        super.onCreate()\n        convex = ConvexClient(\"https://<your domain here>.convex.cloud\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Convex Query in Jetpack Compose\nDESCRIPTION: This snippet shows how to subscribe to a Convex query and update UI state in a Jetpack Compose @Composable function using LaunchedEffect.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/android.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nvar workouts: List<String> by remember { mutableStateOf(listOf()) }\nLaunchedEffect(\"onLaunch\") {\n    client.subscribe<List<String>>(\"workouts:get\").collect { result ->\n        result.onSuccess { receivedWorkouts ->\n            workouts = receivedWorkouts\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex. It includes argument validation, database querying, and data processing. The function takes two arguments: a number and a string.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/system-tables/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Shows how to use a Convex mutation function in a React component with the useMutation hook. This example demonstrates both fire-and-forget usage and handling the result with promises.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/html/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Example of how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/actions/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component\nDESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/retention-tester/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React Component (TypeScript)\nDESCRIPTION: This snippet shows how to use a Convex query function within a React component. It demonstrates passing arguments to the query function using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/demo/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Example of how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir-js/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component\nDESCRIPTION: Example of how to use a Convex mutation function within a React component using the useMutation hook, including both fire-and-forget and promise-based patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir-js/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Authentication State in React Components\nDESCRIPTION: This snippet shows how to use authentication state to control UI rendering in a React component. It demonstrates the use of Clerk and Convex components for handling authenticated and unauthenticated states.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/clerk.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignInButton, SignOutButton } from \"@clerk/clerk-react\";\nimport { Authenticated, Unauthenticated } from \"convex/react\";\n\nexport default function App() {\n  return (\n    <main>\n      <h1>Convex + Clerk + React</h1>\n      <Authenticated>\n        <p>You're logged in!</p>\n        <SignOutButton>\n          <button>Sign out</button>\n        </SignOutButton>\n        <Content />\n      </Authenticated>\n      <Unauthenticated>\n        <p>You're not logged in!</p>\n        <SignInButton mode=\"modal\">\n          <button>Sign in</button>\n        </SignInButton>\n      </Unauthenticated>\n    </main>\n  );\n}\n\nfunction Content() {\n  return (\n    <div>\n      <h2>Authenticated Content</h2>\n      <p>You can only see this if you're signed in.</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Document Examples in JSON\nDESCRIPTION: Examples of valid document structures that can be stored in Convex database, showing different levels of complexity from empty objects to nested structures.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{}\n{\"name\": \"Jamie\"}\n{\"name\": {\"first\": \"Ari\", \"second\": \"Cole\"}, \"age\": 60}\n```\n\n----------------------------------------\n\nTITLE: Defining Convex Function in TypeScript\nDESCRIPTION: Example of a Convex function definition in the messages.ts file within the Convex project.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/multiple-repos.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { v } from \"convex/values\";\nimport { mutation } from \"./_generated/server\";\n\nexport const send = mutation({\n  args: { body: v.string() },\n  handler: async (ctx, args) => {\n    const identity = await ctx.auth.getUserIdentity();\n    if (!identity) {\n      throw new Error(\"Unauthenticated call to mutation\");\n    }\n    const message = { body: args.body, author: identity.name };\n    await ctx.db.insert(\"messages\", message);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex\nDESCRIPTION: Demonstrates how to create a mutation function that modifies data in the database. This example shows argument validation, inserting data into a collection, and returning the result of the operation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/html/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React with TypeScript\nDESCRIPTION: An example of how to use a Convex query function in a React component using the useQuery hook. This code shows how to pass arguments to the query function and access the returned data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/mounted/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex (TypeScript)\nDESCRIPTION: Demonstrates how to create a query function in Convex with argument validation and database interaction. The function takes two arguments, queries a database table, and returns the results.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/react-vite/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Convex Mutation Function in TypeScript\nDESCRIPTION: This snippet illustrates how to define a mutation function in Convex using TypeScript. It includes argument validation, database insertion, and optional return value.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/pagination-adversarial/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Sorting in JavaScript\nDESCRIPTION: Example of custom sorting messages by likes count in JavaScript.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/reading-data.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = await ctx.db.query(\"messages\").collect();\nconst topTenMostLikedMessages = recentMessages\n  .sort((a, b) => b.likes - a.likes)\n  .slice(0, 10);\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: This example demonstrates how to use a Convex mutation function in a React component with the useMutation hook. It shows both fire-and-forget usage and handling the returned promise to access the result.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/javascript-old-syntax/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook with typed arguments.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/custom-errors/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Shows how to consume a Convex query function in a React component using the useQuery hook. The example demonstrates passing required arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/bun/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Convex Data to a File using CLI\nDESCRIPTION: This command uses the Convex CLI to export data from a Convex deployment to a local file. It generates a ZIP file containing all documents from all tables in the deployment, along with file storage data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/backup-restore.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex export --path ~/Downloads\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React Component (TypeScript)\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/react-vite/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation Function in React\nDESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/remix/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Convex Data in Remix Route Component\nDESCRIPTION: Use the useQuery hook in the index route component to fetch and display tasks from the Convex database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/remix.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQuery } from \"convex/react\";\nimport { api } from \"../../convex/_generated/api\";\n\nexport default function Index() {\n  const tasks = useQuery(api.tasks.get);\n  return (\n    <div style={{ fontFamily: \"system-ui, sans-serif\", lineHeight: \"1.8\" }}>\n      <h1>Welcome to Remix with Convex</h1>\n      <ul>\n        {tasks?.map(({ _id, text }) => (\n          <li key={_id}>{text}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Authentication\nDESCRIPTION: Example showing how to test functions with authenticated user identities\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/testing/convex-test.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convexTest } from \"convex-test\";\nimport { expect, test } from \"vitest\";\nimport { api } from \"./_generated/api\";\nimport schema from \"./schema\";\n\ntest(\"authenticated functions\", async () => {\n  const t = convexTest(schema);\n\n  const asSarah = t.withIdentity({ name: \"Sarah\" });\n  await asSarah.mutation(api.tasks.create, { text: \"Add tests\" });\n\n  const sarahsTasks = await asSarah.query(api.tasks.list);\n  expect(sarahsTasks).toMatchObject([{ text: \"Add tests\" }]);\n\n  const asLee = t.withIdentity({ name: \"Lee\" });\n  const leesTasks = await asLee.query(api.tasks.list);\n  expect(leesTasks).toEqual([]);\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Demonstrates how to use the previously defined mutation function in a React component with the useMutation hook. Shows two patterns: fire-and-forget and handling the result with a promise chain.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/tanstack-start/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Filter Conditions in TypeScript\nDESCRIPTION: Shows how to combine multiple conditions using logical operators to find users named 'Alex' who are 18 or older.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/filters.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst adultAlexes = await ctx.db\n  .query(\"users\")\n  .filter((q) =>\n    q.and(q.eq(q.field(\"name\"), \"Alex\"), q.gte(q.field(\"age\"), 18)),\n  )\n  .collect();\n```\n\n----------------------------------------\n\nTITLE: Executing Mutations with Error Handling in Swift\nDESCRIPTION: Shows how to call a Convex mutation with arguments and handle potential ConvexError responses.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/swift.md#2025-04-21_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet isColorAdded: Bool = try await convex.mutation(\"colors:put\", with: [\"color\": newColor])\n```\n\nLANGUAGE: swift\nCODE:\n```\ndo {\n  try await convex.mutation(\"colors:put\", with: [\"color\": newColor])\n} catch ClientError.ConvexError(let data) {\n  errorMessage = try! JSONDecoder().decode(String.self, from: Data(data.utf8))\n  colorNotAdded = true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Example of a Convex query function that accepts numeric and string arguments. The function demonstrates database querying and argument validation using Convex's type system.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex-ai-chat/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const documents = await ctx.db.query(\"tablename\").collect();\n    console.log(args.first, args.second);\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Client-side File Upload Implementation with Upload URLs\nDESCRIPTION: Demonstrates how to handle file uploads on the client side using generated upload URLs. The code shows form submission handling and making the necessary fetch requests to upload files.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/file-storage/upload-files.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst handleSubmit = async (e: React.FormEvent) => {\n  e.preventDefault();\n  const target = e.target as HTMLFormElement;\n  const formData = new FormData(target);\n  const file = formData.get(\"image\") as File;\n\n  const postUrl = await generateUploadUrl();\n  const result = await fetch(postUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": file.type,\n    },\n    body: file,\n  });\n  const { storageId } = await result.json();\n  await sendImage(storageId);\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Sample Data to Convex Database\nDESCRIPTION: Use the Convex import command to add sample data from a JSONL file to the 'tasks' table in the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/remix.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx convex import --table tasks sampleData.jsonl\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation Function in Convex\nDESCRIPTION: This snippet demonstrates creating a mutation function in Convex that accepts two string arguments, inserts a new document into the database, and returns the inserted document. It shows argument validation and database insertion operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/javascript-old-syntax/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal Functions in Convex Backend (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use internal functions instead of public API functions in a Convex backend. It shows the correct way to implement a createTeam mutation using internal functions.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MutationCtx } from './_generated/server';\n\nexport const createTeam = async (\n  ctx: MutationCtx,\n  args: { name: string }\n) => {\n  const user = await ctx.auth.getUserIdentity();\n  if (!user) throw new Error(\"Unauthenticated\");\n  return await ctx.runMutation(internal.teams.createTeam, args);\n};\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Shows how to use the useQuery hook to call a Convex query function from a React component. It demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-app-router-snippets/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. Demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-15-app-clerk/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating OCC Conflict Resolution with Version Tracking\nDESCRIPTION: This snippet shows how Optimistic Concurrency Control (OCC) prevents data races by using version tracking. It illustrates how conflicting transactions are detected and resolved based on version numbers.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/advanced/occ.md#2025-04-21_snippet_2\n\nLANGUAGE: pseudocode\nCODE:\n```\n$5 Transfer                           $3 Debit Card Charge\n----------------------------------------------------------\n(v1, $14) <- READ Alice\n(v7, $11) <- READ Bob\n                                        (v1, $14) <- READ Alice\n                                        WRITE Alice $11\n                                        IF Alice.v = v1\n\nWRITE Alice = $9, Bob = $16\n    IF Alice.v = v1, Bob.v = v7 // Fails! Alice is = v2\n```\n\n----------------------------------------\n\nTITLE: Connecting React App to Convex Backend (JavaScript)\nDESCRIPTION: JavaScript code to set up the Convex client and provider in a React application's main file.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { ConvexProvider, ConvexReactClient } from \"convex/react\";\n\nconst convex = new ConvexReactClient(import.meta.env.VITE_CONVEX_URL);\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <React.StrictMode>\n    <ConvexProvider client={convex}>\n      <App />\n    </ConvexProvider>\n  </React.StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Action for Posting Messages in TypeScript\nDESCRIPTION: This example shows a complete HTTP action implementation for posting messages. It demonstrates how to handle JSON input, run a mutation, and return a response with appropriate status codes and error handling.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/http-actions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { httpAction } from \"./_generated/server\";\n\nexport const postMessage = httpAction(async ({ runMutation }, request) => {\n  if (request.method !== \"POST\") {\n    return new Response(\"Method not allowed\", { status: 405 });\n  }\n  const { author, body } = await request.json();\n  if (typeof author !== \"string\" || typeof body !== \"string\") {\n    return new Response(\"Invalid request body\", { status: 400 });\n  }\n  const messageId = await runMutation(\"messages:send\", { author, body });\n  return new Response(JSON.stringify({ messageId }), {\n    status: 200,\n    headers: { \"Content-Type\": \"application/json\" },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Limits and Denormalization for Efficient Data Retrieval in Convex\nDESCRIPTION: Shows how to use limits or denormalization techniques to efficiently retrieve data in Convex. This approach helps in avoiding loading large datasets unnecessarily.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getMovieCount = query(async ({ db }) => {\n  const count = await db\n    .query(\"movies\")\n    .collect();\n  return count.length;\n});\n\n// Instead, consider:\nexport const getMovieCount = query(async ({ db }) => {\n  return await db.query(\"stats\").filter(q => q.eq(q.field(\"name\"), \"movieCount\")).unique();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React\nDESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/cjs-typescript/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Movie Results from Separate Tables in Convex\nDESCRIPTION: This snippet demonstrates how to fetch movie documents after performing a vector search when using separate tables for movies and their embeddings. It uses the 'by_embedding' index to efficiently retrieve the movie data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/search/vector-search.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst movies = await Promise.all(\n  results.map((result) =>\n    db\n      .query(\"movies\")\n      .withIndex(\"by_embedding\", (q) => q.eq(\"embedding\", result._id))\n      .unique()\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in a React Component\nDESCRIPTION: This example demonstrates how to use a Convex query function within a React component using the useQuery hook. It shows how to pass arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/expo/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Shows how to use a Convex mutation function in a React component with the useMutation hook. It demonstrates both fire-and-forget usage and handling the result of a mutation with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/bun/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Convex Development Deployment\nDESCRIPTION: Initializes a Convex development deployment, creating necessary project files and syncing functions with the cloud.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/script-tag.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React\nDESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/file-storage/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Convex Query with Custom Swift Type\nDESCRIPTION: Example of using the custom Swift struct when subscribing to a Convex query, demonstrating type inference in the yielding argument.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/swift/data-types.md#2025-04-21_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nconvex.subscribe(to: \"mlb:first_place_team\",\n               with: [\"division\": \"AL Central\"],\n           yielding: BaseballTeam.self)\n```\n\n----------------------------------------\n\nTITLE: Logging User Identity in Convex Backend Function (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to log the user identity at the beginning of a Convex backend function for debugging purposes. It uses the ctx.auth.getUserIdentity() method to retrieve the user's identity.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/debug.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(\"server identity\", await ctx.auth.getUserIdentity());\n```\n\n----------------------------------------\n\nTITLE: Testing Various Function Types\nDESCRIPTION: Example showing how to test different types of Convex functions including queries, mutations, and actions\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/testing/convex-test.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convexTest } from \"convex-test\";\nimport { test } from \"vitest\";\nimport { api, internal } from \"./_generated/api\";\n\ntest(\"functions\", async () => {\n  const t = convexTest();\n  const x = await t.query(api.myFunctions.myQuery, { a: 1, b: 2 });\n  const y = await t.query(internal.myFunctions.internalQuery, { a: 1, b: 2 });\n  const z = await t.mutation(api.myFunctions.mutateSomething, { a: 1, b: 2 });\n  const w = await t.mutation(internal.myFunctions.mutateSomething, { a: 1 });\n  const u = await t.action(api.myFunctions.doSomething, { a: 1, b: 2 });\n  const v = await t.action(internal.myFunctions.internalAction, { a: 1, b: 2 });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS Headers in HTTP Action Response\nDESCRIPTION: This example shows how to add Cross-Origin Resource Sharing (CORS) headers to an HTTP action response in Convex. It demonstrates setting up headers for allowing cross-origin requests.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/http-actions.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst headers = new Headers();\nheaders.set(\"Access-Control-Allow-Origin\", \"*\");\nheaders.set(\"Access-Control-Request-Method\", \"*\");\nheaders.set(\"Access-Control-Allow-Methods\", \"OPTIONS, GET, POST\");\nheaders.set(\"Access-Control-Allow-Headers\", \"*\");\n\nreturn new Response(body, {\n  status: 200,\n  headers\n});\n```\n\n----------------------------------------\n\nTITLE: Rate Limiter Component Usage Example\nDESCRIPTION: Example of using the Rate Limiter component with error handling for rate limit checks.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/components/using.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Automatically throw an error if the rate limit is hit.\nawait rateLimiter.limit(ctx, \"failedLogins\", { key: userId, throws: true });\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex\nDESCRIPTION: Defines a Convex query function that takes numeric and string arguments, reads database documents, and returns them. The function demonstrates argument validation using Convex's validation system and shows how to query a database table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nodejs/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated HTTP Requests to Convex Actions (TypeScript)\nDESCRIPTION: Illustrates how to make an authenticated HTTP request to a Convex action endpoint using fetch with an Authorization header containing a JWT token.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/functions-auth.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = \"MY_JWT_TOKEN\";\nconst response = await fetch(\n  \"https://happy-animal-123.convex.cloud/api/myHttpAction\",\n  {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Project with CLI\nDESCRIPTION: Command to create a new Vue project with TypeScript support using the Vue CLI.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/vue.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create vue@latest my-vue-app\n```\n\n----------------------------------------\n\nTITLE: Canceling Scheduled Functions in TypeScript\nDESCRIPTION: Demonstrates how to cancel a previously scheduled function using the scheduler.cancel() method.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/scheduling/scheduled-functions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const cancelScheduledMessage = mutation(\n  async ({ scheduler }, { scheduledId }: { scheduledId: Id }) => {\n    await scheduler.cancel(scheduledId);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React\nDESCRIPTION: Example of how to use a Convex mutation function within a React component using the useMutation hook, showing both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex (TypeScript)\nDESCRIPTION: Illustrates the creation of a mutation function in Convex that takes two string arguments, inserts data into the database, and optionally returns the inserted data. It includes argument validation and demonstrates database write operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/shared-cursors/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex\nDESCRIPTION: This snippet illustrates how to create a mutation function in Convex. It includes argument validation, database insertion, and optional result returning. The function takes two string arguments and inserts a message into the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/zod-validation-ts/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Vector Index for Separate Movie and Embedding Tables in Convex Schema\nDESCRIPTION: This snippet shows how to define vector indexes for separate movie and embedding tables in the Convex schema, allowing for more efficient data management and querying.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/search/vector-search.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineSchema({\n  movies: defineTable({\n    title: v.string(),\n    genre: v.optional(v.string()),\n  }).index(\"by_embedding\", [\"embedding\"]),\n  movieEmbeddings: defineTable({\n    embedding: v.array(v.number()),\n  }).vectorIndex(\"by_embedding\", {\n    vectorField: \"embedding\",\n    dimensions: 1536,\n    filterFields: [\"genre\"],\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Demonstrates creating a query function that accepts numeric and string arguments. Shows how to read from the database and process the results. Includes argument validation and async database operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-auth/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex (TypeScript)\nDESCRIPTION: Demonstrates how to create a query function that accepts typed arguments and retrieves data from the database. The function validates input parameters using Convex's validation system and returns documents from a specified table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/snippets/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query Function in React\nDESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/remix/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React (TypeScript)\nDESCRIPTION: This snippet illustrates how to use a Convex mutation function in a React component. It demonstrates both fire-and-forget usage and handling the mutation result with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-typing-indicator/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Various Approaches to Wrapping Convex Functions in TypeScript\nDESCRIPTION: This snippet presents different methods for wrapping Convex functions, showcasing the variety of approaches available for implementing middleware.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/middleware/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwrapTheImpl = mutation(modifyTheFunction((ctx, { a: number }) => {}));\nwrapTheImpl2 = mutation({\n  args: { a: v.number() },\n  handler: modifyTheFunction((ctx, { a: number }) => {})\n}\nwrapTheMutation = modifyTheMutation(mutation((ctx, { a: number }) => {}));\nwrapTheMutation2 = modifyTheMutation(mutation({\n  args: { a: v.number() },\n  handler: (ctx, { a: number }) => {}\n}\nwrapTheWrapper = modifyTheMutation(mutation)((ctx, { a: number }) => {});\n```\n\n----------------------------------------\n\nTITLE: Querying First Document in Convex Database\nDESCRIPTION: Demonstrates how to retrieve the first document from a collection using the default insertion order.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes-and-query-perf.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst firstBook = await ctx.db.query(\"books\").first();\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: This snippet shows how to use the previously defined query function in a React component using the useQuery hook. It demonstrates passing the required arguments to the function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/vector-search/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Package\nDESCRIPTION: Command to install the Convex npm package as a dependency in a React application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/workflow.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i convex\n```\n\n----------------------------------------\n\nTITLE: Implementing Tasks Composable UI\nDESCRIPTION: Creates a Composable function that displays tasks and subscribes to real-time updates from Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/android.mdx#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\nfun Tasks(client: ConvexClient, modifier: Modifier = Modifier) {\n    var tasks: List<Task> by remember { mutableStateOf(listOf()) }\n    LaunchedEffect(key1 = \"launch\") {\n        client.subscribe<List<Task>>(\"tasks:get\").collect { result ->\n            result.onSuccess { remoteTasks ->\n                tasks = remoteTasks\n            }\n        }\n    }\n    LazyColumn(\n        modifier = modifier\n    ) {\n        items(tasks) { task ->\n            Text(text = \"Text: ${task.text}, Completed?: ${task.isCompleted}\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Convex Functions\nDESCRIPTION: Shows how to access an environment variable (GIPHY_KEY) within a Convex function. The function constructs a URL for the Giphy API using the environment variable as the API key.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/environment-variables.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction giphyUrl(query) {\n  return (\n    \"https://api.giphy.com/v1/gifs/translate?api_key=\" +\n    process.env.GIPHY_KEY +\n    \"&s=\" +\n    encodeURIComponent(query)\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: This example shows how to consume a Convex query function in a React component using the useQuery hook, passing the required arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/javascript-old-syntax/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using ctx.runMutation for Partial Rollback (TypeScript)\nDESCRIPTION: This snippet demonstrates a valid use case for ctx.runMutation within a mutation to achieve partial rollback on error. It shows how to handle errors while preserving some operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport const sendMessage = mutation(\n  async (ctx, { conversationId, text }) => {\n    const messageId = await ctx.db.insert(\"messages\", {\n      conversationId,\n      text,\n    });\n\n    try {\n      await ctx.runMutation(async (txCtx) => {\n        await sendPushNotification(txCtx, { conversationId, text });\n      });\n    } catch (error) {\n      console.error(\"Failed to send push notification\", error);\n      // The message is still inserted even if the notification fails\n    }\n\n    return messageId;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Example of how to use a Convex query function in a React component using the useQuery hook. The example passes arguments matching the validator types defined in the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/npm-showcase/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Mutation Function in Convex\nDESCRIPTION: Demonstrates how to create a mutation function in Convex for modifying data. This example shows inserting a new message into a database and returning the inserted document, with string argument validation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/empty/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation of Multiple runMutation Calls (TypeScript)\nDESCRIPTION: This snippet shows an incorrect implementation with multiple runMutation calls in a loop. This approach may lead to inconsistencies and performance issues.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Users from './model/users';\n\nexport const addUsersToTeam = action(\n  async (\n    { runMutation },\n    { teamId, userIds }: { teamId: Id<\"teams\">; userIds: Id<\"users\">[] }\n  ) => {\n    for (const userId of userIds) {\n      await runMutation(Users.addToTeam, { userId, teamId });\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex with TypeScript\nDESCRIPTION: A sample query function that takes two arguments (a number and a string), queries the database, and returns documents. It demonstrates argument validation, database querying, and basic logging functionality.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/waitlist/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Clear Tables Request Format\nDESCRIPTION: JSON request format for clearing all documents from specified tables.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/http-api/index.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tableNames\": [\"<table_1>\", \"<table_2>\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Shows how to create a mutation function that writes data to the database. Includes argument validation, database insertion, and optional return value handling.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/file-storage/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Schema Testing Setup\nDESCRIPTION: Basic test setup showing how to initialize convexTest with a schema\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/testing/convex-test.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convexTest } from \"convex-test\";\nimport { test } from \"vitest\";\nimport schema from \"./schema\";\n\ntest(\"some behavior\", async () => {\n  const t = convexTest(schema);\n  // use `t`...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function that accepts two validated arguments and retrieves data from the database. It includes argument validation using Convex's validation system and shows how to access the database using the context object.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/bun/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex (TypeScript)\nDESCRIPTION: Demonstrates how to create a mutation function in Convex. It includes argument validation, database insertion, and optional return value.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/pagination/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Ordering Query Results in Convex\nDESCRIPTION: Examples of ordering query results in ascending and descending order by creation time.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/reading-data.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = await ctx.db.query(\"messages\").order(\"asc\").collect();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = await ctx.db.query(\"messages\").order(\"desc\").collect();\n```\n\n----------------------------------------\n\nTITLE: Clearing a Table Efficiently in Convex\nDESCRIPTION: Commands to clear a table efficiently by importing an empty file, effectively replacing all existing data in the table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/import-export/import.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ntouch empty_file.jsonl\nnpx convex import --replace --table <tableNameToClear> empty_file.jsonl\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Shows how to use the Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/node/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using React Query with Convex Query\nDESCRIPTION: Demonstrates how to use the useQuery hook with Convex integration. It sets up a reactive query with infinite stale time and custom garbage collection time.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/@convex-dev/react-query/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { isPending, error, data } = useQuery({\n  ...convexQuery(api.repos.get, { repo: \"made/up\" }),\n  gcTime: 10000, // unsubscribe after 10s of no use\n});\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React\nDESCRIPTION: Demonstrates how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/nextjs-app-router/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Example Task Data Structure in JSON\nDESCRIPTION: Sample JSON response showing the structure of task data returned by the getAllOpenTasks query.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"_id\": \"e4g\", \"title\": \"Grocery shopping\", \"complete\": false },\n  { \"_id\": \"u9v\", \"title\": \"Plant new flowers\", \"complete\": false }\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Books by Title and Author in TypeScript\nDESCRIPTION: This snippet shows an alternative approach to querying books, using a 'by_title' index and filtering by author. It demonstrates the flexibility of combining indexed queries with filters.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes-and-query-perf.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst foundation = await ctx.db\n  .query(\"books\")\n  .withIndex(\"by_title\", (q) => q.eq(\"title\", \"Foundation\"))\n  .filter((q) => q.eq(q.field(\"author\"), \"Isaac Asimov\"))\n  .unique();\n```\n\n----------------------------------------\n\nTITLE: Seeding Preview Deployments in Convex (Vercel Example)\nDESCRIPTION: Script to seed preview deployments with sample data from a ZIP file, specifically for Vercel environments.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/import-export/import.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex deploy --cmd 'npm run build' &&\nif [ \"$VERCEL_ENV\" == \"preview\" ]; then\nnpx convex import --preview-name \"$VERCEL_GIT_COMMIT_REF\" seed_data.zip;\nfi\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Action URLs in React\nDESCRIPTION: React component demonstrating how to use HTTP action URLs for displaying images\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/file-storage/serve-files.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MessageList() {\n  const messages = useQuery(api.messages.list);\n  return (\n    <div>\n      {messages?.map((message) => (\n        <div key={message._id}>\n          {message.fileId && (\n            <img src={api.http.getImage.url({ storageId: message.fileId })} />\n          )}\n          <span>{message.body}</span>\n        </div>\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining defineSchema Function in TypeScript\nDESCRIPTION: A function for defining a schema in Convex. Takes a schema definition and optional configuration options including schema validation and table name type strictness.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function defineSchema<Schema extends GenericSchema, StrictTableNameTypes extends boolean = true>(schema: Schema, options?: DefineSchemaOptions<StrictTableNameTypes>): SchemaDefinition<Schema, StrictTableNameTypes>;\n```\n\n----------------------------------------\n\nTITLE: Defining Query Functions in Convex\nDESCRIPTION: Type definition for QueryCtx object that provides read-only services within Convex query functions including database access, authentication, and storage operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/generated-api/server.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype QueryCtx = {\n  db: DatabaseReader,\n  auth: Auth,\n  storage: StorageReader\n}\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React Component (TypeScript)\nDESCRIPTION: Shows how to use the previously defined query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/udf-tests/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React\nDESCRIPTION: Shows how to consume a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/system-udfs/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React\nDESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/2-likes/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React Component (TypeScript)\nDESCRIPTION: Shows how to use the previously defined query function in a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/pagination/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Mutation Arguments without Validation in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a mutation that accepts named arguments without validation in TypeScript. The arguments are accessible as fields of the second parameter in the handler function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/mutation-functions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\n\nexport const addMessage = mutation({\n  handler: async (ctx, { body, author }) => {\n    const messageId = await ctx.db.insert(\"messages\", { body, author });\n    return messageId;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex (TypeScript)\nDESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments. It shows the structure for argument validation, database querying, and result processing.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/pagination/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining CronJob Interface in TypeScript\nDESCRIPTION: Interface representing a scheduled cron job in Convex. Contains the job name, arguments to pass to the function, and the schedule information defining when the job should run.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface CronJob {\n    // Warning: (ae-forgotten-export) The symbol \"JSONValue\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    args: JSONValue;\n    // (undocumented)\n    name: string;\n    // Warning: (ae-forgotten-export) The symbol \"Schedule\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    schedule: Schedule;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Functions in Convex\nDESCRIPTION: Example of a Convex query function that takes two arguments, validates them using the Convex validation system, and retrieves data from the database. This demonstrates proper structure for read operations including argument validation and database querying.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir-14/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Convex Schema for Fivetran Integration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a Convex schema for integration with Fivetran. It includes a sample table 'email_cars' with various fields and indexes. The schema is set up to handle Fivetran-specific data structures and synchronization.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/fivetran_destination/docs/setup-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSchema, defineTable } from \"convex/server\";\nimport { v } from \"convex/values\";\n\nconst fivetranTables = {\n  email_cars: defineTable({\n    description: v.union(v.string(), v.null()),\n    fivetran: v.object({\n      columns: v.object({\n        directory: v.union(v.string(), v.null()),\n        file: v.union(v.string(), v.null()),\n        line: v.union(v.int64(), v.null()),\n        modified: v.union(v.float64(), v.null()),\n      }),\n      synced: v.float64(),\n    }),\n    make: v.union(v.string(), v.null()),\n    model: v.union(v.string(), v.null()),\n    price: v.union(v.float64(), v.null()),\n    year: v.union(v.int64(), v.null()),\n  })\n    .index(\"by_fivetran_synced\", [\"fivetran.synced\"])\n    .index(\"by_primary_key\", [\n      \"fivetran.columns.directory\",\n      \"fivetran.columns.file\",\n      \"fivetran.columns.line\",\n      \"fivetran.columns.modified\",\n    ]),\n};\n\nexport default defineSchema({\n  ...fivetranTables,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex (TypeScript)\nDESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments. It shows the structure including argument validation, database querying, and result processing.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/sessions/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Node.js Action Implementation\nDESCRIPTION: Demonstrates how to create an action that runs in Node.js environment using the 'use node' directive.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/actions.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"use node\";\n\nimport { action } from \"_generated/server\";\nimport fs from \"fs\";\n\nexport const myAction = action({\n  handler: async (ctx) => {\n    // Use Node.js APIs\n    const files = fs.readdirSync(\".\");\n    // Process files\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Auth Provider in Convex\nDESCRIPTION: This snippet shows how to configure a custom authentication provider in the Convex auth.config.js file. It specifies the domain of the issuer and the application ID for the identity provider.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/advanced/custom-auth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  providers: [\n    {\n      domain: \"your.issuer.url.com\",\n      applicationID: \"your-application-id\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Single Table Import in Convex\nDESCRIPTION: Command to import data from a CSV, JSON, or JSONLines file into a specific Convex table. Supports --append and --replace options for existing data handling.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/import-export/import.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex import --table <tableName> <path>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex\nDESCRIPTION: A Convex query function example that takes two typed arguments, reads from the database, and returns data. The function validates input arguments, queries a database table, and processes the results before returning them.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React\nDESCRIPTION: Shows how to consume a Convex query function within a React component using the useQuery hook. Demonstrates passing arguments to the query.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/file-storage/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Function Return Types in Frontend Components\nDESCRIPTION: Implementation of FunctionReturnType and UsePaginatedQueryReturnType for typing backend function returns in frontend code.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/typescript.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<Snippet title=\"src/Components.tsx\" source={FunctionReturnTypes} />\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React Component (TypeScript)\nDESCRIPTION: Shows how to use the previously defined Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/shared-cursors/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Counter with Potential Write Conflict in TypeScript\nDESCRIPTION: This snippet demonstrates a mutation that updates a counter value, which can lead to write conflicts if called frequently. It shows how parallel executions can cause optimistic concurrency control errors.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/error.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const updateCounter = mutation({\n  args: {},\n  handler: async (ctx) => {\n    const doc = await ctx.db.get(process.env.COUNTER_ID);\n    await ctx.db.patch(doc._id, { value: doc.value + 1 });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: CORS Preflight Handler for HTTP Upload\nDESCRIPTION: Handles CORS preflight requests for the HTTP file upload endpoint. Sets up necessary CORS headers for browser security compliance.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/file-storage/upload-files.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nif (request.method === \"OPTIONS\") {\n  return new Response(null, {\n    headers: corsHeaders,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Convex Schema\nDESCRIPTION: TypeScript code to define the schema for the 'tasks' table in Convex, including field types.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSchema, defineTable } from \"convex/server\";\nimport { v } from \"convex/values\";\n\nexport default defineSchema({\n  tasks: defineTable({\n    text: v.string(),\n    isCompleted: v.boolean(),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ArgsAndOptions Type in TypeScript\nDESCRIPTION: A TypeScript type that represents the arguments and options for function references. It handles both functions with required arguments and those with optional or empty arguments.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-forgotten-export) The symbol \"AnyFunctionReference\" needs to be exported by the entry point index.d.ts\n// Warning: (ae-forgotten-export) The symbol \"EmptyObject\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport type ArgsAndOptions<FuncRef extends AnyFunctionReference, Options> = FuncRef[\"_args\"] extends EmptyObject ? [args?: EmptyObject, options?: Options] : [args: FuncRef[\"_args\"], options?: Options];\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Convex Folder for Testing with Vitest\nDESCRIPTION: These snippets show how to set up testing for a custom convex folder location. The first snippet defines a glob pattern to match all relevant files, and the second snippet demonstrates how to use this setup in a test file.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/testing/convex-test.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"vite/client\" />\nexport const modules = import.meta.glob(\"./**/!(*.*.*)*.*s\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convexTest } from \"convex-test\";\nimport { test } from \"vitest\";\nimport schema from \"./schema\";\nimport { modules } from \"./test.setup\";\n\ntest(\"some behavior\", async () => {\n  const t = convexTest(schema, modules);\n  // use `t`...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ConvexProvider in Remix Root Component\nDESCRIPTION: Modify the root.tsx file to set up the Convex client and make it available throughout the app using ConvexProvider.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/remix.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConvexProvider, ConvexReactClient } from \"convex/react\";\nimport { cssBundleHref } from \"@remix-run/css-bundle\";\nimport type { LinksFunction } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\n\nexport const links: LinksFunction = () => [\n  ...(cssBundleHref ? [{ rel: \"stylesheet\", href: cssBundleHref }] : []),\n];\n\nconst convex = new ConvexReactClient(process.env.CONVEX_URL!);\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <ConvexProvider client={convex}>\n          <Outlet />\n        </ConvexProvider>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Convex Deployment URLs for Different Build Types\nDESCRIPTION: This snippet shows how to set up different Convex deployment URLs for release and debug builds in the Gradle build file.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/android.md#2025-04-21_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the android section of build.gradle.kts:\nbuildTypes {\n    release {\n        // Snip various other config like ProGuard ...\n        resValue(\"string\", \"convex_url\", \"YOUR_PROD.convex.cloud\")\n    }\n\n    debug {\n        resValue(\"string\", \"convex_url\", \"YOUR_DEV.convex.cloud\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Convex Functions Directory\nDESCRIPTION: JSON configuration to customize the Convex functions directory for SvelteKit compatibility.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/svelte.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"functions\": \"src/convex/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. The example demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/empty/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth0 Login Button\nDESCRIPTION: React component for implementing Auth0 login functionality using the useAuth0 hook\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/auth0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nexport default function LoginButton() {\n  const { loginWithRedirect } = useAuth0();\n  return <button onClick={loginWithRedirect}>Log in</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Food Results from Vector Search in Convex\nDESCRIPTION: These snippets demonstrate how to fetch the actual food documents after performing a vector search. It uses a query function to load the documents based on the search results.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/search/vector-search.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const fetchFoods = query(async ({ db }, ids: Id<\"foods\">[]) => {\n  return await Promise.all(ids.map((id) => db.get(id)));\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst foods = await ctx.runQuery(internal.foods.fetchFoods, results.map((r) => r._id));\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: This snippet demonstrates how to use the mutation function in a React component using the useMutation hook. It shows both fire-and-forget usage and handling the result with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/vector-search/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function with TypeScript\nDESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. The function includes argument validation and shows how to query the database and process results.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-clerk/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex + Next.js Demo\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex and Next.js SSR integration demo.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-app-router-snippets/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Calling HTTP Action via cURL Command\nDESCRIPTION: This bash snippet demonstrates how to call a Convex HTTP action using cURL. It shows the format for sending a POST request with JSON data to the specified endpoint.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/http-actions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport DEPLOYMENT_NAME=... # example: \"happy-animal-123\"\ncurl -d '{ \"author\": \"User 123\", \"body\": \"Hello world\" }' \\\n    -H 'content-type: application/json' \"https://$DEPLOYMENT_NAME.convex.site/postMessage\"\n```\n\n----------------------------------------\n\nTITLE: UserIdentity Interface Definition in TypeScript\nDESCRIPTION: Defines the structure of user identity information in Convex, including standard profile fields and authentication data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UserIdentity {\n    readonly issuer: string;\n    readonly subject: string;\n    readonly tokenIdentifier: string;\n    readonly address?: string;\n    readonly birthday?: string;\n    readonly email?: string;\n    readonly emailVerified?: boolean;\n    readonly familyName?: string;\n    readonly gender?: string;\n    readonly givenName?: string;\n    readonly language?: string;\n    readonly name?: string;\n    readonly nickname?: string;\n    readonly phoneNumber?: string;\n    readonly phoneNumberVerified?: boolean;\n    readonly pictureUrl?: string;\n    readonly preferredUsername?: string;\n    readonly profileUrl?: string;\n    readonly timezone?: string;\n    readonly updatedAt?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Data Subscription in SwiftUI View\nDESCRIPTION: Example of subscribing to a Convex query in a SwiftUI View using @State and task modifier to handle real-time updates of a string array.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/swift.md#2025-04-21_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct ColorList: View {\n  @State private var colors: [String] = []\n\n  var body: some View {\n    List {\n      ForEach(colors, id: \\.self) { color in\n        Text(color)\n      }\n    }.task {\n      let latestColors = convex.subscribe(to: \"colors:get\", yielding: [String].self)\n        .replaceError(with: [])\n        .values\n      for await colors in latestColors {\n        self.colors = colors\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Shows how to use a Convex mutation function within a React component using the useMutation hook. The example demonstrates both fire-and-forget usage and handling the returned result with promises.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/empty/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Convex Auth for Clerk in TypeScript\nDESCRIPTION: This snippet shows how to set up the server-side configuration for validating Clerk access tokens in Convex. It exports an object with provider details including the Clerk issuer URL and application ID.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/clerk.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  providers: [\n    {\n      domain: \"https://your-issuer-url.clerk.accounts.dev/\",\n      applicationID: \"convex\",\n    },\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Helpers Package\nDESCRIPTION: Command to install the convex-helpers npm package which provides OpenAPI specification generation capabilities.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/open-api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install convex-helpers\n```\n\n----------------------------------------\n\nTITLE: Manual Type Annotation in TypeScript Convex Functions\nDESCRIPTION: Demonstration of manually annotating argument types in Convex functions without using argument validation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/typescript.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<Snippet title=\"convex/sendMessage.ts\" source={WithoutArgValidation} highlightPatterns={[\"body: string\"]} />\n```\n\n----------------------------------------\n\nTITLE: Using Query Arguments with useQuery Hook\nDESCRIPTION: Shows how to pass arguments to a query when using the useQuery hook in a React component.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport function App() {\n  const a = \"Hello world\";\n  const b = 4;\n  const data = useQuery(api.functions.myQuery, { a, b });\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FilterApi Type and Function in TypeScript\nDESCRIPTION: A type utility and function for filtering an API object to only include entries matching a predicate. Useful for extracting specific function types from an API.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type FilterApi<API, Predicate> = Expand<{\n    [mod in keyof API as API[mod] extends Predicate ? mod : API[mod] extends FunctionReference<any, any, any, any> ? never : FilterApi<API[mod], Predicate> extends Record<string, never> ? never : mod]: API[mod] extends Predicate ? API[mod] : FilterApi<API[mod], Predicate>;\n}>;\n\n// @public\nexport function filterApi<API, Predicate>(api: API): FilterApi<API, Predicate>;\n```\n\n----------------------------------------\n\nTITLE: Querying Convex API using NodeJS\nDESCRIPTION: Example of making a POST request to Convex query API endpoint using JavaScript fetch API to execute a messages:list function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/http-api/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = \"https://acoustic-panther-728.convex.cloud/api/query\";\nconst request = { path: \"messages:list\", args: {}, format: \"json\" };\n\nconst response = fetch(url, {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify(request),\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation of Conversation Model Functions (TypeScript)\nDESCRIPTION: This example demonstrates the correct way to implement conversation-related functions using helper functions in a separate model file. It shows how to structure code for better maintainability.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueryCtx, MutationCtx } from '../_generated/server';\nimport * as Users from './users';\n\nexport async function createConversation(\n  ctx: MutationCtx,\n  args: { name: string; tokenIdentifier: string }\n) {\n  const user = await Users.getUser(ctx, args.tokenIdentifier);\n  if (!user) {\n    throw new Error(\"User not found\");\n  }\n  return await ctx.db.insert(\"conversations\", {\n    name: args.name,\n    userId: user._id,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Dependencies with Rush\nDESCRIPTION: This snippet provides commands for upgrading dependencies using Rush, including upgrading within semver specs and interactively upgrading beyond current semver specs.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/dep-upgrade-notes.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nRun `just rush update --full` to upgrade withing semver specs. If this doesn't\nwork we need to narrow our semver requirement spec for that library.\n\nRun `just rush upgrade-interactive` to upgrade libraries beyond their current\nsemver spec. See notes below for these libraries.\n```\n\n----------------------------------------\n\nTITLE: Deleting Files with storage.delete() in Convex TypeScript\nDESCRIPTION: Demonstrates how to delete a file from Convex storage using storage.delete() function. The function accepts a storage ID which corresponds to documents in the '_storage' system table and can be validated using v.id('_storage').\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/file-storage/delete-files.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { v } from \"convex/values\";\nimport { mutation } from \"./_generated/server\";\n\nexport const deleteImage = mutation({\n  args: { storageId: v.id(\"_storage\") },\n  handler: async (ctx, args) => {\n    await ctx.storage.delete(args.storageId);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Viewing CLI Commands\nDESCRIPTION: Command to display all available Convex CLI commands\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/cli.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Example of how to use a Convex mutation function in a React component with the useMutation hook. Shows both fire-and-forget and promise-based approaches for handling the result.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/react-query/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Query Arguments without Validation\nDESCRIPTION: This snippet illustrates how to define a query that accepts named arguments without explicit validation, accessing the argument values as fields of the second parameter of the handler function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/query-functions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { query } from \"./_generated/server\";\n\nexport const myQuery = query({\n  handler: async (ctx, args) => {\n    // Use `args.firstName` and `args.lastName` here.\n    return `Hello ${args.firstName} ${args.lastName}!`;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Delta Sync Implementation in Python\nDESCRIPTION: Functions to perform delta synchronization of documents. Retrieves changes since last sync point and maintains cursor state for subsequent syncs.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/http-api/index.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef delta_sync(delta_cursor):\n    delta_values = []\n    while True:\n        result = api.document_deltas(cursor)\n        delta_values.extend(result.values)\n        cursor = result.cursor\n        if !hasMore:\n            break\n    return (delta_values, delta_cursor)\n\n(snapshot_values, delta_cursor) = list_full_snapshot()\n(delta_values, delta_cursor) = delta_sync(delta_cursor)\n# Save delta_cursor for the next sync\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation Function in React\nDESCRIPTION: Example of how to use a Convex mutation function within a React component using the useMutation hook. The snippet shows both fire-and-forget and promise-based approaches to handling mutations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/file-storage-with-http/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Strict Table Name Types in TypeScript\nDESCRIPTION: Example of disabling strict table name types when defining a schema in Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/schemas.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ndefineSchema(\n  {\n    // Define tables here.\n  },\n  {\n    strictTableNameTypes: false,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scheduled Function Status in TypeScript\nDESCRIPTION: Shows how to query the system table to check the status of scheduled functions using db.system.get method.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/scheduling/scheduled-functions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getScheduledFunctionStatus = query(\n  async ({ db }, { scheduledFunctionId }: { scheduledFunctionId: Id }) => {\n    return await db.system.get(scheduledFunctionId);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation Functions in React\nDESCRIPTION: This snippet shows how to use a Convex mutation function in a React component using the useMutation hook. It demonstrates both fire-and-forget usage and handling the promise result after the mutation completes.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/python-quickstart/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Function Without Validation\nDESCRIPTION: Demonstrates how to define an internal function without argument validation, useful when passing complex objects.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/internal-functions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const markPlanAsProfessional = internalMutation({\\n  handler: async (\\n    ctx,\\n    args: {\\n      planId: Id<\"plans\">;\\n      userId: string;\\n    }\\n  ) => {\\n    await ctx.db.patch(args.planId, { tier: \"professional\" });\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Svelte Project with npm\nDESCRIPTION: Commands to create a new Svelte project using npm. It shows how to create a project in the current directory or in a new directory.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/sveltekit/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm create svelte@latest\n\n# create a new project in my-app\nnpm create svelte@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query in a React Component\nDESCRIPTION: Example showing how to use a Convex query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/args-validation/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a mutation function in Convex. It includes argument validation and database insertion. The function takes two string arguments and inserts a new message into the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/system-tables/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Generated Convex API in Frontend TypeScript\nDESCRIPTION: Example of using the generated API file in a frontend React component to call Convex functions with type safety.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/multiple-repos.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAction } from \"convex/react\";\nimport { api } from \"./api\";\n\nexport default function App() {\n  const send = useAction(api.messages.send);\n  return (\n    <button\n      onClick={() => {\n        send({ body: \"Hello!\" });\n      }}\n    >\n      Send message\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Public API in React Component\nDESCRIPTION: Demonstrates how to use the generated public API object with Convex React hooks to query data from a messages list function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/generated-api/api.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { api } from \"../convex/_generated/api\";\nimport { useQuery } from \"convex/react\";\n\nconst data = useQuery(api.messages.list);\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex Vector Search Example App\nDESCRIPTION: This snippet shows the commands to install dependencies and start the development server for the Convex vector search example app. It uses npm for package management and running scripts.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/vector-search/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Index-based Sorting in Convex\nDESCRIPTION: Demonstrates efficient sorting using an index for large datasets.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/reading-data.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = await ctx.db\n  .query(\"messages\")\n  .withIndex(\"by_likes\")\n  .order(\"desc\")\n  .take(20);\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function in Convex that accepts numeric and string arguments. The function shows database querying patterns and argument validation using Convex's type system.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/vector-importer/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    console.log(args.first, args.second);\n\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining defineTable Function for Validator Schema in TypeScript\nDESCRIPTION: A function for defining a table with a document validator schema. The validator defines the structure and validation rules for documents in the table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-forgotten-export) The symbol \"Validator\" needs to be exported by the entry point index.d.ts\n// Warning: (ae-forgotten-export) The symbol \"ExtractDocument\" needs to be exported by the entry point index.d.ts\n// Warning: (ae-forgotten-export) The symbol \"ExtractFieldPaths\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport function defineTable<DocumentSchema extends Validator<Record<string, any>, false, any>>(documentSchema: DocumentSchema): TableDefinition<ExtractDocument<DocumentSchema>, ExtractFieldPaths<DocumentSchema>>;\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React Component (TypeScript)\nDESCRIPTION: Shows how to use the previously defined query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/sessions/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Swift Struct for Convex Data with Type Conversion\nDESCRIPTION: Comprehensive example of a Swift struct that handles field name conversion, custom properties, and type conversion from Double to Int for wins and losses.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/swift/data-types.md#2025-04-21_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nstruct BaseballTeam: Decodable {\n  let name: String\n  let uniformColors: [String]\n  @ConvexFloat\n  private var internalWins: Double\n  @ConvexFloat\n  private var internalLosses: Double\n\n  enum CodingKeys: String, CodingKey {\n    case name\n    case uniformColors\n    case internalWins = \"wins\"\n    case internalLosses = \"losses\"\n  }\n\n  // Expose the Double values as Ints\n  var wins: Int { Int(internalWins) }\n  var losses: Int { Int(internalLosses) }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Convex API using cURL\nDESCRIPTION: Example of making a POST request to Convex query API endpoint using cURL to execute a messages:list function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/http-api/index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl https://acoustic-panther-728.convex.cloud/api/query \\\n   -d '{\"path\": \"messages:list\", \"args\": {}, \"format\": \"json\"}' \\\n   -X POST -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Random and Time Usage in Convex Functions\nDESCRIPTION: Example showing how Math.random() and Date.now() behave in Convex functions, illustrating the deterministic nature of queries and mutations. Global values are frozen at deploy time while function-level values are consistent within a single execution.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/runtimes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst globalRand = Math.random(); // `globalRand` does not change between runs.\nconst globalNow = Date.now(); // `globalNow` is the time when Convex functions were deployed.\n\nexport const updateSomething = mutation({\n  args: {},\n  handler: () => {\n    const now1 = Date.now(); // `now1` is the time when the function execution started.\n    const rand1 = Math.random(); // `rand1` has a new value for each function run.\n    // implementation\n    const now2 = Date.now(); // `now2` === `now1`\n    const rand2 = Math.random(); // `rand1` !== `rand2`\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook for Dashboard Component Documentation\nDESCRIPTION: This command starts Storybook, which is used for documenting the behavior and visual aspects of the dashboard design system components.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/dashboard/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/src/convex/npm-packages/dashboard\nnpm run storybook\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Pagination Example App\nDESCRIPTION: Commands for setting up and running the pagination example application. The first command installs all necessary dependencies, and the second command starts the development server.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/pagination-adversarial/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining ApiFromModules Type in TypeScript\nDESCRIPTION: A TypeScript type that constructs a Convex API type from module definitions. It filters the API to only include valid function references, ensuring type safety when accessing API functions.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-forgotten-export) The symbol \"ApiFromModulesAllowEmptyNodes\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport type ApiFromModules<AllModules extends Record<string, object>> = FilterApi<ApiFromModulesAllowEmptyNodes<AllModules>, FunctionReference<any, any, any, any>>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment URLs in Swift\nDESCRIPTION: Example of environment-specific deployment URL configuration for development and production builds.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/swift.md#2025-04-21_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet deploymentUrl = \"https://$DEV_OR_PROD.convex.cloud\"\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information\nDESCRIPTION: React component for displaying authenticated user information using Auth0\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/auth0.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nexport default function Badge() {\n  const { user } = useAuth0();\n  return <span>Logged in as {user.name}</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Functions with Arguments\nDESCRIPTION: Example of running a Convex function with JSON arguments\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/cli.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex run messages:send '{\"body\": \"hello\", \"author\": \"me\"}'\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Struct for Task Data\nDESCRIPTION: Swift struct definition for representing task data in the iOS app. This struct matches the structure of the data stored in the Convex database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/swift.mdx#2025-04-21_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nstruct Todo: Decodable {\n  let _id: String\n  let text: String\n  let isCompleted: Bool\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Redundant Indexes in Convex Schema Definition\nDESCRIPTION: Illustrates how to avoid defining redundant indexes in Convex schema. This practice helps in reducing database storage and write overhead.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineSchema({\n  teams: defineTable({\n    name: v.string(),\n    ownerId: v.id(\"users\"),\n  }).index(\"by_ownerId\", [\"ownerId\"])\n    .index(\"by_name\", [\"name\"])\n    .index(\"by_ownerId_and_name\", [\"ownerId\", \"name\"]),\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering File URLs in React Component\nDESCRIPTION: React component that displays images using URLs generated from Convex storage\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/file-storage/serve-files.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MessageList() {\n  const messages = useQuery(api.messages.list);\n  return (\n    <div>\n      {messages?.map((message) => (\n        <div key={message._id}>\n          {message.url && <img src={message.url} />}\n          <span>{message.body}</span>\n        </div>\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: This snippet shows how to use a Convex mutation function in a React component using the useMutation hook. It demonstrates two patterns: fire-and-forget mutations and handling the result with a promise chain.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/vue/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function in Convex that accepts numeric and string arguments. The function shows database querying patterns and argument validation using Convex's built-in validators.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/dall-e-storage-action/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex Scheduling Demo\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex scheduling example application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/cron/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Example of how to use a Convex query function within a React component using the useQuery hook. This demonstrates passing arguments to the query function to fetch data from the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/http/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Component Card List Implementation in React/JSX\nDESCRIPTION: JSX implementation of a component card list displaying different scheduling-related features including Workpool, Workflow, Action Retrier, and Crons. Each card contains a title, description, and href link.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/scheduling.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentCardList\n  items={[\n    {\n      title: \"Workpool\",\n      description:\n        \"Workpool give critical tasks priority by organizing async operations into separate, customizable queues.\",\n      href: \"https://www.convex.dev/components/workpool\",\n    },\n    {\n      title: \"Workflow\",\n      description:\n        \"Simplify programming long running code flows. Workflows execute durably with configurable retries and delays.\",\n      href: \"https://www.convex.dev/components/workflow\",\n    },\n    {\n      title: \"Action Retrier\",\n      description:\n        \"Add reliability to an unreliable external service. Retry idempotent calls a set number of times.\",\n      href: \"https://www.convex.dev/components/retrier\",\n    },\n    {\n      title: \"Crons\",\n      description:\n        \"Use cronspec to run functions on a repeated schedule at runtime.\",\n      href: \"https://www.convex.dev/components/crons\",\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Example of a Convex query function that accepts numeric and string parameters. Shows how to define argument validators and implement a handler that queries the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/nextjs-app-router/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex\nDESCRIPTION: A template for creating a mutation function that modifies data in the database. This example shows how to insert a new document into a collection and optionally return the created document.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/http/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filter Query with First Result in TypeScript\nDESCRIPTION: Shows how to filter for completed tasks and retrieve only the first matching document.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/filters.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst tasks = await ctx.db\n  .query(\"tasks\")\n  .filter((q) => q.eq(q.field(\"isCompleted\"), true))\n  .first();\n```\n\n----------------------------------------\n\nTITLE: Initializing Convex Project with npm\nDESCRIPTION: Creates a new directory for the Convex project and initializes an npm project.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/script-tag.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir my-project && cd my-project && npm init -y\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component\nDESCRIPTION: Demonstrates how to use the mutation function in a React component using the useMutation hook. Shows both fire-and-forget and promise-based usage patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-auth/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Argument Validation in TypeScript Convex Functions\nDESCRIPTION: Example of a Convex function using TypeScript with built-in argument validation that automatically infers types.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/typescript.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<Snippet title=\"convex/sendMessage.ts\" source={ArgValidation} />\n```\n\n----------------------------------------\n\nTITLE: Using Convex HTTP Client with ESM in Node.js\nDESCRIPTION: Example of using Convex HTTP client with ESM import syntax in Node.js to query data from a Convex backend. This approach works well for JavaScript code that uses modern import/export syntax.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/node/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ConvexHttpClient } from \"convex/browser\";\nimport { api } from \"./convex/_generated/api.js\";\n\nconst client = new ConvexHttpClient(CONVEX_URL_GOES_HERE);\nclient.query(api.messages.list).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Kotlin Serializable Class Definition\nDESCRIPTION: Definition of a Kotlin data class with Serializable annotation to handle baseball team data from Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/android/data-types.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable\ndata class BaseballTeam(\n    val name: String,\n    val uniformColors: List<String>,\n    val wins: @ConvexNum Int,\n    val losses: @ConvexNum Int)\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Package in Remix Project\nDESCRIPTION: Navigate to the project directory and install the Convex package using npm.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/remix.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd my-remix-app && npm install convex\n```\n\n----------------------------------------\n\nTITLE: Defining AnyApi Type in TypeScript\nDESCRIPTION: A TypeScript type representing any valid Convex API structure. It defines a nested record of module directories and functions that can be used with the Convex framework.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-forgotten-export) The symbol \"AnyModuleDirOrFunc\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport type AnyApi = Record<string, Record<string, AnyModuleDirOrFunc>>;\n```\n\n----------------------------------------\n\nTITLE: Adding Convex Swift Package in Xcode\nDESCRIPTION: Instructions for adding the Convex Swift package as a dependency in an Xcode project. This step is crucial for integrating Convex functionality into the iOS app.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/swift.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/get-convex/convex-swift\n```\n\n----------------------------------------\n\nTITLE: Linking and Running React Native Tests\nDESCRIPTION: Commands to link the local Convex version and run React Native tests from the react-native directory.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/react-native/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython3 link_with_local.py <absolute path to monorepo root>\npython3 run_tests.py <absolute path to monorepo root>\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation Function in Convex\nDESCRIPTION: This snippet demonstrates how to create a mutation function in Convex to modify data in the database. It shows argument validation, inserting a document into a collection, and returning the inserted document.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/cron/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: List Full Snapshot Implementation in Python\nDESCRIPTION: Function to retrieve a complete snapshot of documents using pagination. Continuously fetches pages of snapshot data until all documents are retrieved.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/http-api/index.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef list_full_snapshot()\n    snapshot_values = []\n    snapshot = None\n    cursor = None\n    while True:\n        result = api.list_snapshot(cursor, snapshot)\n        snapshot_values.extend(result.values)\n        (cursor, snapshot) = (result.cursor, result.snapshot)\n        if !result.hasMore:\n            break\n    return (snapshot_values, result.snapshot)\n```\n\n----------------------------------------\n\nTITLE: Importing Sample Data to Convex Database\nDESCRIPTION: Imports sample data from a JSONL file into the Convex database, creating a 'tasks' table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/script-tag.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex import --table tasks sampleData.jsonl\n```\n\n----------------------------------------\n\nTITLE: Accessing Document ID Field in Convex\nDESCRIPTION: Demonstrates how to access the automatically generated ID field of a document.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/document-ids.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst userId = retrievedUser._id;\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query Function in React\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook with typed arguments.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-clerk/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Querying with Arguments in Swift\nDESCRIPTION: Demonstrates how to pass arguments to a Convex query subscription using a dictionary with primitive types.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/swift.md#2025-04-21_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet publisher = convex.subscribe(to: \"colors:get\",\n                               with:[\"onlyFavorites\": true],\n                           yielding:[String].self)\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Illustrates the creation of a mutation function in Convex, including argument validation, database insertion, and optional return value.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/clerk/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Action with React Query\nDESCRIPTION: Shows how to use a Convex action with React Query's useMutation hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/@convex-dev/react-query/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { mutate } = useMutation({\n  mutationFn: useConvexAction(api.time.getTotal),\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Document by ID with Patch in Convex\nDESCRIPTION: Shows how to update an existing document using its ID with the patch method.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/document-ids.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait ctx.db.patch(userId, { name: \"Steph Curry\" });\n```\n\n----------------------------------------\n\nTITLE: Building Remix Application for Production\nDESCRIPTION: Command to build the Remix application for production deployment, generating optimized assets.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/remix/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting up Authentication with Clerk and Convex\nDESCRIPTION: Demonstrates the setup for authentication using Clerk with Convex and React Query. It includes providers for Clerk, Convex, and QueryClient.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/@convex-dev/react-query/README.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ClerkProvider publishableKey=\"pk_test_...\">\n  <ConvexProviderWithClerk client={convex} useAuth={useAuth}>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </ConvexProviderWithClerk>\n</ClerkProvider>\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification Example\nDESCRIPTION: Sample YAML configuration showing the structure of the generated OpenAPI specification file.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/open-api.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# convex-spec.yaml\nopenapi: 3.0.3\ninfo:\n  title: Convex App - OpenAPI 3.0\n  version: 0.0.0\n  servers:\n    - url: \"{hostUrl}\"\n  description: Convex App API\n  ...\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React Component\nDESCRIPTION: Shows how to use the previously defined query function in a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/clerk/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Query Context in Convex\nDESCRIPTION: This snippet shows how to use the QueryCtx object passed to the handler function, which enables fetching data and accessing other Convex features within the query.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/query-functions.mdx#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { query } from \"./_generated/server\";\n\nexport const myQuery = query({\n  handler: async (ctx) => {\n    // Use `ctx` to access Convex features\n    const user = await ctx.auth.getUserIdentity();\n    if (user === null) {\n      throw new Error(\"Unauthenticated call to mutation\");\n    }\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React Component (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use a Convex mutation function within a React component. It shows two ways to call the mutation: fire-and-forget and handling the result with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/demo/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React Component (TypeScript)\nDESCRIPTION: Demonstrates how to use the previously defined mutation function in a React component using the useMutation hook. It shows both fire-and-forget usage and handling the result of the mutation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/udf-tests/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex (TypeScript)\nDESCRIPTION: Illustrates the creation of a mutation function in Convex, including argument validation, database insertion, and optional return value.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/sessions/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function in TypeScript\nDESCRIPTION: Demonstrates how to create a Convex query function that accepts numeric and string arguments. The function includes argument validation and shows database querying patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/custom-errors/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: File Metadata Structure Example\nDESCRIPTION: Example JSON structure showing the format of file metadata as stored in the system table, including creation time, ID, content type, SHA256 hash, and file size.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/file-storage/file-metadata.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_creationTime\": 1700697415295.742,\n  \"_id\": \"3k7ty84apk2zy00ay4st1n5p9kh7tf8\",\n  \"contentType\": \"image/jpeg\",\n  \"sha256\": \"cb58f529b2ed5a1b8b6681d91126265e919ac61fff6a367b8341c0f46b06a5bd\",\n  \"size\": 125338\n}\n```\n\n----------------------------------------\n\nTITLE: Repository Structure Documentation\nDESCRIPTION: Overview of the main components in the repository showing the organization of Rust crates and TypeScript packages\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- crates/\n  - local_backend/ - application server on top of Runtime\n\n- npm-packages/\n  - udf-runtime/ - sets up user-defined functions JS environment\n  - udf-tests/ - collection of functions for testing isolate layer\n  - system-udfs/ - functions used by Convex system and CLI\n```\n\n----------------------------------------\n\nTITLE: Querying Convex from Node.js using JavaScript\nDESCRIPTION: This snippet demonstrates how to use both the ConvexHttpClient for point-in-time queries and the ConvexClient for query subscriptions in a Node.js environment using import/export syntax.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/javascript/node.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ConvexHttpClient, ConvexClient } from \"convex/browser\";\nimport { api } from \"./convex/_generated/api.js\";\n\n// HTTP client\nconst httpClient = new ConvexHttpClient(CONVEX_URL_GOES_HERE);\nhttpClient.query(api.messages.list).then(console.log);\n\n// Subscription client\nconst client = new ConvexClient(CONVEX_URL_GOES_HERE);\nclient.onUpdate(api.messages.list, {}, (messages) => console.log(messages));\n```\n\n----------------------------------------\n\nTITLE: Argument and Return Value Serialization Flow Diagram\nDESCRIPTION: Detailed ASCII diagram showing the serialization and deserialization flow for arguments and return values between Browser, Rust, and V8 environments. The diagram illustrates how Convex values are transformed through JSON serialization/deserialization and custom replacers/revivers.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/isolate/README.md#2025-04-21_snippet_0\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n                             Arguments                     Return value\n\n                       ┌───────────────────┐           ┌───────────────────┐\n                       │ Convex Value (JS) │           │ Convex Value (JS) │\n                       └───────────────────┘           └───────────────────┘\n                                 │                               ▲\n                          convexReplacer                         │\n                                 │                         convexReviver\n Browser                         ▼                               │\n                   ┌──────────────────────────┐    ┌──────────────────────────┐\n                   │ JSON-serializable object │    │ JSON-serializable object │\n                   └──────────────────────────┘    └──────────────────────────┘\n                                 │                               ▲\n                          JSON.serialize                         │\n                                 │                          JSON.parse\n                                 ▼                               │\n                          ┌─────────────┐                 ┌─────────────┐\n─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤   String    ├ ─ ─ ─ ─ ─ ─ ─ ─ ┤   String    ├ ─ ─ ─ ─ ─ ─ ─ ─ ─\n                          └─────────────┘                 └─────────────┘\n                                 │                               ▲\n                        serde::Deserialize                       │\n                                 │                       serde::Serialize\n                                 ▼                               │\n                     ┌──────────────────────┐        ┌──────────────────────┐\n Rust                │ Convex Value (Rust)  │        │ Convex Value (Rust)  │\n                     └──────────────────────┘        └──────────────────────┘\n                                 │                               ▲\n                         serde::Serialize                        │\n                                 │                      serde::Deserialize\n                                 ▼                               │\n                        ┌────────────────┐              ┌────────────────┐\n─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤     String     │─ ─ ─ ─ ─ ─ ─ ┤     String     │─ ─ ─ ─ ─ ─ ─ ─ ─\n                        └────────────────┘              └────────────────┘\n                                 │                               ▲\n                            JSON.parse                           │\n                                 │                        JSON.serialize\n                                 ▼                               │\n                   ┌──────────────────────────┐    ┌──────────────────────────┐\n                   │ JSON-serializable object │    │ JSON-serializable object │\n                   └──────────────────────────┘    └──────────────────────────┘\n                                 │                               ▲\n                           convexReviver                         │\n V8                              │                        convexReplacer\n                                 ▼                               │\n                       ┌───────────────────┐           ┌───────────────────┐\n                       │ Convex Value (JS) │           │ Convex Value (JS) │\n                       └───────────────────┘           └───────────────────┘\n                                 │                               ▲\n                                 │                               │\n                                 │    ┌─────────────────────┐    │\n                                 │    │                     │    │\n                                 └───▶│    User UDF code    │────┘\n                                      │                     │\n                                      └─────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Functions Directory in Convex\nDESCRIPTION: Configuration example for specifying a custom directory for Convex functions, particularly useful for Create React App projects that require files to be within the src directory.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/project-configuration.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"functions\": \"src/convex/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function\nDESCRIPTION: Example of a Convex mutation function that handles data modification operations. Shows how to insert data into the database and return the created record.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/cjs-typescript/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for Convex Android Library\nDESCRIPTION: This snippet shows the necessary changes to the app's build.gradle file to include the Convex Android library and Kotlin serialization plugin.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/android.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    // ... existing plugins\n    kotlin(\"plugin.serialization\") version \"1.9.0\"\n}\n\ndependencies {\n    // ... existing dependencies\n    implementation(\"dev.convex:android-convexmobile:0.4.1@aar\") {\n        isTransitive = true\n    }\n    implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3\")\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Data from Backup ZIP in Convex\nDESCRIPTION: Command to import data from a backup ZIP file into a Convex deployment. Preserves _id and _creationTime fields to maintain references between tables.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/import-export/import.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex import <path>.zip\n```\n\n----------------------------------------\n\nTITLE: Defining Mutation Functions in Convex\nDESCRIPTION: Type definition for MutationCtx object that provides read-write services within Convex mutation functions including database access, authentication, storage operations, and task scheduling.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/generated-api/server.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype MutationCtx = {\n  db: DatabaseWriter,\n  auth: Auth,\n  storage: StorageWriter,\n  scheduler: Scheduler\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Shows how to create a mutation function that modifies the database. The function accepts string arguments and demonstrates database insertion with return values.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/0-start/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Convex Client in Swift\nDESCRIPTION: Swift code to create a ConvexClient instance, which establishes a connection to the Convex backend using the deployment URL.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/swift.mdx#2025-04-21_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\nimport ConvexMobile\n\nlet convex = ConvexClient(deploymentUrl: \"YOUR_CONVEX_URL\")\n\nstruct ContentView: View {\n...\n```\n\n----------------------------------------\n\nTITLE: Filtering with Arithmetic Operations in TypeScript\nDESCRIPTION: Demonstrates using arithmetic operators in filters to find carpets with area greater than 100 square units.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/filters.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst largeCarpets = await ctx.db\n  .query(\"carpets\")\n  .filter((q) => q.gt(q.mul(q.field(\"height\"), q.field(\"width\")), 100))\n  .collect();\n```\n\n----------------------------------------\n\nTITLE: Copying Convex Fly.io Configuration Files\nDESCRIPTION: Uses degit to copy the necessary Fly.io configuration files from the Convex backend repository to your local machine and navigate to the directory.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/fly/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx degit get-convex/convex-backend/self-hosted/fly fly\ncd fly\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function in TypeScript\nDESCRIPTION: Example of a Convex query function that takes numeric and string arguments, demonstrating database querying and argument validation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/remix/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex\nDESCRIPTION: Example of a mutation function that takes two string arguments and inserts data into the database. It demonstrates argument validation, context handling, and database insertion with the Convex API.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/args-validation/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication Check in Convex Mutation\nDESCRIPTION: A TypeScript mutation function that demonstrates authentication checking by verifying the user ID before allowing removal of a user's image. The function includes authorization logic to ensure users can only modify their own data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const removeUserImage = mutation({\n  args: {},\n  handler: async (ctx) => {\n    // highlight-next-line\n    const userId = await getAuthUserId(ctx);\n    // highlight-next-line\n    if (!userId) {\n      // highlight-next-line\n      return;\n      // highlight-next-line\n    }\n    ctx.db.patch(userId, { imageId: undefined, image: undefined });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex\nDESCRIPTION: A template for creating a mutation function that modifies data in the database. This example takes two string arguments, creates a message object, inserts it into the 'messages' table, and returns the inserted document.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/npm-showcase/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Example showing how to use a Convex mutation function within a React component using the useMutation hook. Demonstrates both fire-and-forget usage and handling the returned result with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/nextjs-pages-router/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: This snippet demonstrates how to use a Convex mutation function within a React component. It shows two ways to call the mutation: fire-and-forget and handling the result with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/3-ai/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Convex for CommonJS in Node.js\nDESCRIPTION: This JSON configuration enables the generation of a CommonJS-compatible API file for use with require() syntax in Node.js projects that don't use ES modules.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/javascript/node.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"generateCommonJSApi\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring BigInt in Convex\nDESCRIPTION: Example of declaring a 64-bit integer using BigInt notation\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/_convexValues.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n3n\n```\n\n----------------------------------------\n\nTITLE: Advanced Filtering with Array Processing in TypeScript\nDESCRIPTION: Demonstrates filtering posts by tag using JavaScript array methods after collecting all documents.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/filters.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const postsWithTag = query({\n  args: { tag: v.string() },\n  handler: async (ctx, args) => {\n    const allPosts = await ctx.db.query(\"posts\").collect();\n    return allPosts.filter((post) => post.tags.includes(args.tag));\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Any Type in TypeScript\nDESCRIPTION: Example of defining a schema with the 'any' type using v.any() in Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/schemas.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndefineTable({\n  anyValue: v.any(),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query with TanStack Query and Additional Options\nDESCRIPTION: This snippet demonstrates how to use convexQuery with TanStack Query's useQuery hook, including additional options like initialData and gcTime.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/tanstack-query.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, isPending, error } = useQuery({\n  ...convexQuery(api.functions.myQuery, { id: 123 }),\n  initialData: [], // use an empty list if no data is available yet\n  gcTime: 10000, // stay subscribed for 10 seconds after this component unmounts\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Convex React Client with Vite\nDESCRIPTION: Example of creating a Convex React client using the deployment URL from an environment variable in a Vite project.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/project-setup.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ConvexProvider, ConvexReactClient } from \"convex/react\";\n\nconst deploymentURL = import.meta.env.VITE_CONVEX_URL;\n\nconst convex = new ConvexReactClient(deploymentURL);\n```\n\n----------------------------------------\n\nTITLE: Running Python Script with Convex Integration\nDESCRIPTION: Executes the Python script that fetches and displays the list of tasks from the Convex database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/python.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nvenv/bin/python -m main\n```\n\n----------------------------------------\n\nTITLE: Any Type Validation in Convex Mutation\nDESCRIPTION: Example of using v.any() to validate fields that can accept any value type in a Convex mutation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/validation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport default mutation({\n  args: {\n    anyValue: v.any(),\n  },\n  handler: async ({ db }, { anyValue }) => {\n    //...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Shows how to use a Convex query function in a React component with the useQuery hook. This example demonstrates how to pass arguments to the query function from the client side.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/html/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function with TypeScript\nDESCRIPTION: Example of a query function that accepts numeric and string arguments, demonstrates database querying, and includes input validation. Shows how to read from the database and process results.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir-js/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Time-Based Updates in React with useState and useEffect\nDESCRIPTION: Code that updates the current time periodically using useState and useEffect hooks. This is used to determine which users are considered \"old\" or inactive based on their last update time.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-facepile/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst [now, setNow] = useState(Date.now());\nuseEffect(() => {\n  const intervalId = setInterval(() => setNow(Date.now()), UPDATE_MS);\n  return () => clearInterval(intervalId);\n}, [setNow]);\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Demonstrates how to use the previously defined query function in a React component with the useQuery hook. Shows passing arguments that match the validators defined in the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/tanstack-start/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Documents with Circular References in TypeScript\nDESCRIPTION: Example of creating documents with circular references using the defined schema in Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/schemas.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\n\nexport const createUserWithPreferences = mutation(async ({ db }) => {\n  // Create a preferences document\n  const preferencesId = await db.insert(\"preferences\", {\n    userId: null,\n  });\n\n  // Create a user document\n  const userId = await db.insert(\"users\", {\n    preferencesId,\n  });\n\n  // Update the preferences document with the user ID\n  await db.patch(preferencesId, {\n    userId,\n  });\n\n  return { userId, preferencesId };\n});\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React Component (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use a Convex mutation function within a React component using TypeScript. It shows both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-clerk-webhooks/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: A React code snippet showing how to use the useMutation hook to execute the mutation function. This demonstrates both fire-and-forget mutations and handling the mutation result with a Promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/http/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: System Fields Type Handling\nDESCRIPTION: Demonstration of using WithoutSystemFields to handle document types excluding system fields when creating or updating documents.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/typescript.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<Snippet title=\"convex/helpers.ts\" source={SystemFieldsTypes} />\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Record Objects in TypeScript\nDESCRIPTION: Example of defining a schema with record objects using v.record() in Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/schemas.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndefineTable({\n  simpleMapping: v.record(v.string(), v.boolean()),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex\nDESCRIPTION: Defines a mutation function that takes string arguments and inserts data into the database. The example demonstrates argument validation, database insertion operations, and returning the created record.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/sveltekit/src/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ConvexProvider with SessionProvider in React\nDESCRIPTION: Setup for wrapping the main app component with ConvexProvider and SessionProvider to enable session management functionality.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/sessions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConvexProvider client={convex}>\n  <SessionProvider>\n    <App />\n  </SessionProvider>\n</ConvexProvider>\n```\n\n----------------------------------------\n\nTITLE: Running Convex Dev Locally\nDESCRIPTION: Command to start a local Convex deployment for development. This runs the Convex backend as a subprocess and allows for faster code sync and development without using cloud resources.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/cli/local-deployments-for-dev.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex dev --local --once\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex TypeScript\nDESCRIPTION: Example of a Convex mutation function that takes two string arguments and inserts a document into the database. The function demonstrates argument validation, database writing, and returning the created document.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/react-native/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Array Field in TypeScript\nDESCRIPTION: Shows how to define a table schema with an array field for storing post tags.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/filters.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineSchema({\n  posts: defineTable({\n    body: v.string(),\n    tags: v.array(v.string()),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Sample Data to Convex Database\nDESCRIPTION: Command to import sample data into the Convex database's 'tasks' table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex import --table tasks sampleData.jsonl\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Handler\nDESCRIPTION: Creates a TypeScript query handler to fetch tasks from the Convex database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/android.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\n\nexport const get = query({\n  args: {},\n  handler: async (ctx) => {\n    return await ctx.db.query(\"tasks\").collect();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query Function in React Component (TypeScript)\nDESCRIPTION: This snippet shows how to use a Convex query function in a React component. It demonstrates the usage of the useQuery hook to fetch data from the server.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/middleware/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Write Count Mutation with Table-wide Dependency in TypeScript\nDESCRIPTION: This code snippet shows two mutations: 'writeCount' which depends on the entire 'tasks' table, and 'addTask' which inserts a new task. These mutations can conflict if executed simultaneously, demonstrating potential write conflicts across different operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/error.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const writeCount = mutation({\n  args: {\n    target: v.id(\"counts\"),\n  },\n  handler: async (ctx, args) => {\n    const tasks = await ctx.db.query(\"tasks\").collect();\n    await ctx.db.patch(args.target, { value: tasks });\n  },\n});\n\nexport const addTask = mutation({\n  args: {\n    text: v.string(),\n  },\n  handler: async (ctx, args) => {\n    await ctx.db.insert(\"tasks\", { text: args.text });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Convex Backend with Docker Compose\nDESCRIPTION: Command to start the Convex backend and dashboard services using Docker Compose. This is the recommended way to begin self-hosting Convex with a local SQLite database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Using Convex with Untyped API\nDESCRIPTION: Example of using Convex without generated type definitions, useful when the Convex function source code is in a different project or monorepo.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/javascript.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConvexClient, anyApi } from \"convex/browser\";\n\nconst client = new ConvexClient(process.env.CONVEX_URL!);\n\n// Use string literals to reference functions\nclient.mutation(\"sendMessage\", { body: \"Hello!\" });\nclient.query(\"listMessages\", {});\n\n// Or use the untyped `anyApi`\nclient.mutation(anyApi.sendMessage, { body: \"Hello!\" });\nclient.query(anyApi.listMessages, {});\n```\n\n----------------------------------------\n\nTITLE: Installing Convex with Auth using NPM\nDESCRIPTION: Command to create a new project with Convex and Convex Auth. It prompts the user to choose 'React (Vite)' and 'Convex Auth' options during setup.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/convex-auth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create convex@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex\nDESCRIPTION: Demonstrates how to create a mutation function in Convex for writing data to the database. This example validates input arguments and inserts a new document into a 'messages' table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex-chat-speculative/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Data Types in TypeScript for Convex Backend\nDESCRIPTION: Example of a JavaScript object returned by a Convex query function, representing a baseball team with various properties including BigInt for wins and losses.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/swift/data-types.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"Guardians\",\n  uniformColors: [\"blue\", \"white\", \"red\"],\n  wins: 80n,\n  losses: 60n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React Component\nDESCRIPTION: Demonstrates how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/0-start/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Context Types in Server-Side Helpers\nDESCRIPTION: Implementation of helper functions using TypeScript context types for database access and authentication.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/typescript.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<Snippet title=\"convex/helpers.ts\" source={ContextTypes} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for GitHub Pages Deployment with Convex\nDESCRIPTION: This code snippet demonstrates how to configure Vite for building a React application that will be hosted on GitHub Pages and use Convex as a backend. It sets the output directory to 'docs' for GitHub Pages compatibility and specifies the base URL path.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/hosting/custom.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  build: {\n    outDir: \"docs\",\n  },\n  base: \"/some-repo-name/\",\n});\n```\n\n----------------------------------------\n\nTITLE: Scheduling Self-Destructing Messages with runAfter in TypeScript\nDESCRIPTION: Example demonstrating how to schedule a function to run after a delay using the scheduler.runAfter() method. The code shows scheduling a message to self-destruct after 5 seconds.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/scheduling/scheduled-functions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const sendMessage = mutation(\n  async ({ db, scheduler }, { text }: { text: string }) => {\n    const message = await db.insert(\"messages\", { text });\n    await scheduler.runAfter(5000, \"messages:destruct\", { messageId: message });\n    return message;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Running the Self-Hosted Convex Dashboard\nDESCRIPTION: Command to run the self-hosted Convex dashboard. It requires providing your deployment URL as a parameter, which can point to a local, remote, or Convex Cloud deployment.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/dashboard-self-hosted/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njust run-dashboard \"YOUR_DEPLOYMENT_URL\"\n```\n\n----------------------------------------\n\nTITLE: Defining Id Type in TypeScript for Convex Document Identifiers\nDESCRIPTION: Establishes a type for Convex document identifiers, which are unique strings used to identify documents within tables. It's parameterized by the table name.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/generated-api/data-model.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nAn identifier for a document in Convex.\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React Component (TypeScript)\nDESCRIPTION: Shows how to use the previously defined query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/giphy-action/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex with TypeScript\nDESCRIPTION: A template for creating a query function that takes two arguments, validates them, and retrieves data from the database. This function demonstrates how to read from the database and process the results before returning them to the client.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/mounted/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Package\nDESCRIPTION: Command to navigate to the app directory and install the Convex package.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app && npm install convex\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React Component (TypeScript)\nDESCRIPTION: This snippet shows how to use a Convex query function within a React component using TypeScript. It demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-clerk-webhooks/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript API File for Convex Functions\nDESCRIPTION: Example of the generated api.ts file containing type definitions for Convex functions, to be used in a separate repository.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/multiple-repos.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConvexClient } from \"convex/browser\";\n\nexport type APISpec = {\n  messages: {\n    send: {\n      arguments: { body: string };\n      return: void;\n    };\n  };\n};\n\nexport type API = ConvexClient<APISpec>;\nexport const api = { messages: { send: \"messages:send\" } } as const;\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in a React Component\nDESCRIPTION: This snippet shows how to use a Convex query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/pagination-adversarial/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex with TypeScript\nDESCRIPTION: A template for creating a mutation function that writes data to the database. This function takes two string arguments, inserts a document into the 'messages' collection, and returns the inserted document.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/mounted/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Data to Convex Database\nDESCRIPTION: Command to import sample data into the Convex tasks table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/quickstart-react-cra.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex import --table tasks sampleData.jsonl\n```\n\n----------------------------------------\n\nTITLE: Convex Subscription Call\nDESCRIPTION: Example of subscribing to Convex data using the custom Team type with parameters.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/android/data-types.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nconvex.subscribe<Team>(\"mlb:first_place_team\", args = mapOf(\"division\" to \"AL Central\"))\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Example of using the query function in a React component with the useQuery hook and passing arguments.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/vector-search/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TableNames Type in TypeScript for Convex\nDESCRIPTION: Defines a type alias for TableNames as a string, representing the names of all Convex tables in the project.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/generated-api/data-model.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **TableNames**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Function in Convex\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex that takes validated arguments, reads from the database, and returns documents. It includes argument validation using Convex's validation library and shows how to use the database query API.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/cron/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React Component (TypeScript)\nDESCRIPTION: This snippet shows how to use the previously defined query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/tanstack-start/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Rust Client Application\nDESCRIPTION: Main Rust application code using ConvexClient to fetch tasks from the backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/rust.mdx#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse convex::ConvexClient;\nuse dotenvy::dotenv;\nuse std::env;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    dotenv()?;\n    let deployment_url = env::var(\"CONVEX_URL\")?;\n    let client = ConvexClient::new(&deployment_url)?;\n    let tasks = client.query(\"tasks:get\", ()).await?;\n    println!(\"{:#?}\", tasks);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Triggers in Convex Backend (TypeScript)\nDESCRIPTION: This snippet demonstrates how to implement triggers in a Convex backend project. It shows the usage of `mutationWithTriggers` instead of `mutation` to enable trigger functionality. The triggers are called with arguments matching `triggerArgsValidator`, providing information about the type of operation and document changes.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/components/triggers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nctx.scheduler.runAfter(0, ...);\n```\n\n----------------------------------------\n\nTITLE: Inserting Document with Auto-generated ID in Convex\nDESCRIPTION: Demonstrates how to insert a new document into the users table, which automatically generates a unique document ID.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/document-ids.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst userId = await ctx.db.insert(\"users\", { name: \"Michael Jordan\" });\n```\n\n----------------------------------------\n\nTITLE: Creating Object in Convex\nDESCRIPTION: Example of creating a plain JavaScript object\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/_convexValues.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{a: \"abc\"}\n```\n\n----------------------------------------\n\nTITLE: React Component Using Simple Paginated Query\nDESCRIPTION: React component implementation using usePaginatedQuery hook to fetch and display paginated data with load more functionality.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/pagination.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function SimpleListing() {\n  const { results, status, loadMore } = usePaginatedQuery(\n    \"messages:list\",\n    {},\n    { initialNumItems: 10 }\n  );\n  return (\n    <div>\n      {results.map((message) => (\n        <div key={message._id}>{message.body}</div>\n      ))}\n      {status === \"CanLoadMore\" && (\n        <button onClick={() => loadMore(10)}>Load More</button>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Team Management Helpers in Convex\nDESCRIPTION: Helper functions for managing teams, including team membership validation and access control. Shows how to structure shared business logic across Convex functions.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/other-recommendations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function ensureTeamMember(teamId: Id<\"teams\">, memberId: Id<\"users\">) {\n  const membership = db\n    .query(\"memberships\")\n    .withIndex(\"by_team_user\", q =>\n      q.eq(\"teamId\", teamId).eq(\"userId\", memberId)\n    )\n    .unique();\n  if (membership === null) {\n    throw new Error(\"User is not a member of this team\");\n  }\n  return membership;\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Bundle with Source Map Explorer\nDESCRIPTION: Command to analyze and visualize the bundle using source-map-explorer tool.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/bundling.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx source-map-explorer /tmp/myBundle/**/*.js\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It includes argument validation and database querying.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/typescript/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Link Structure in Go\nDESCRIPTION: Defines a Link struct that represents a shortened URL with fields for the short path, long URL, timestamps, and owner information.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/snippets/goExample.txt#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Link struct {\n\tShort    string // the \"foo\" part of http://go/foo\n\tLong     string // the target URL or text/template pattern to run\n\tCreated  time.Time\n\tLastEdit time.Time // when the link was last edited\n\tOwner    string    // user@domain\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Convex Dev Deployment\nDESCRIPTION: Initialize a Convex dev deployment, which creates a 'convex/' folder and syncs functions with the cloud.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react-native.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Updating Typing Status with useEffect\nDESCRIPTION: A useEffect hook that updates the user's typing status based on message text changes. It sets typing to true when text is present, and reverts to false after 1 second of inactivity or immediately when text is empty.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-typing-indicator/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  if (newMessageText.length === 0) {\n    updateMyPresence({ typing: false });\n    return;\n  }\n  updateMyPresence({ typing: true });\n  const timer = setTimeout(() => updateMyPresence({ typing: false }), 1000);\n  return () => clearTimeout(timer);\n}, [updateMyPresence, newMessageText]);\n```\n\n----------------------------------------\n\nTITLE: Creating Local Environment File for Convex Client\nDESCRIPTION: Example .env.local file content for configuring a Convex client to connect to the self-hosted backend with authentication.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/fly/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nCONVEX_SELF_HOSTED_URL='<fly-backend-url>'\nCONVEX_SELF_HOSTED_ADMIN_KEY='<your-admin-key>'\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React Component (TypeScript)\nDESCRIPTION: Shows how to use the previously defined query function in a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/with-schema/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining DefineSchemaOptions Interface in TypeScript\nDESCRIPTION: Interface for options used with defineSchema function. Allows configuring schema validation and table name type strictness.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface DefineSchemaOptions<StrictTableNameTypes extends boolean> {\n    schemaValidation?: boolean;\n    strictTableNameTypes?: StrictTableNameTypes;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AnyDataModel Type in TypeScript\nDESCRIPTION: A TypeScript type representing any valid Convex data model structure. It defines tables with documents, field paths, and various index types that can be used in a Convex application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type AnyDataModel = {\n    [tableName: string]: {\n        document: any;\n        fieldPaths: GenericFieldPaths;\n        indexes: {};\n        searchIndexes: {};\n        vectorIndexes: {};\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Dependencies\nDESCRIPTION: Installing required npm packages for Convex integration and environment configuration.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/nodejs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install convex dotenv\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React (TypeScript)\nDESCRIPTION: This snippet shows how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/convex-tour-chat-tutorial/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React\nDESCRIPTION: Demonstrates how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/react-vite-ts/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Argument Validator Examples\nDESCRIPTION: Examples showing correct and incorrect usage of argument validators in Convex functions\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/eslint.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Allowed by this rule:\nexport const list = query({\n  args: {},\n  handler: async (ctx) => {\n    ...\n  },\n});\n\n// Allowed by this rule:\nexport const list = query({\n  args: { channel: v.id('channel') },\n  handler: async (ctx, { channel }) => {\n    ...\n  },\n});\n\n// Not allowed by this rule:\nexport const list = query({\n  handler: async (ctx, { channel }: { channel: Id<\"channel\">}) => {\n    ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Convex Backend Type Declarations\nDESCRIPTION: Core type declarations for Convex backend operations including methods for running queries, mutations, actions, and accessing various services like auth, scheduler, storage, and vector search.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/generated-api/server.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  runQuery: (name: string, args?: Record<string, Value>) => Promise<Value>,\n  runMutation: (name: string, args?: Record<string, Value>) => Promise<Value>,\n  runAction: (name: string, args?: Record<string, Value>) => Promise<Value>,\n  auth: Auth,\n  scheduler: Scheduler,\n  storage: StorageActionWriter,\n  vectorSearch: (tableName: string, indexName: string, query: VectorSearchQuery) => Promise<Array<{ _id: Id, _score: number }>>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Doc Type in TypeScript for Convex Documents\nDESCRIPTION: Creates a generic type Doc representing the structure of documents stored in Convex tables. It's parameterized by the table name.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/generated-api/data-model.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **Doc**`<TableName>`: `Object`\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React\nDESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/js-integration-tests/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments. It includes argument validation, database querying, and data processing.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/clerk/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint 8 for Custom Convex Directory\nDESCRIPTION: Configuration for .eslintrc.js to use the Convex ESLint plugin with a custom Convex directory location in ESLint 8.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/@convex-dev/eslint-plugin/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extends: [\"plugin:@convex-dev/recommendedRulesCustomConvexDirectoryLocation\"],\n\n  overrides: [\n    {\n      files: [\"**/myCustomConvexDirectoryName/**/*.ts\"],\n      extends: [\n        \"plugin:@convex-dev/eslint-plugin/recommendedRulesCustomConvexDirectoryLocation\",\n      ],\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Convex Dev Deployment\nDESCRIPTION: Initialize a Convex dev deployment, which creates a convex/ folder and syncs functions with the cloud.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/remix.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Using v.record Validator (TypeScript)\nDESCRIPTION: This snippet demonstrates the usage of the new 'v.record' validator in Convex. It's used to define a typed key-value object in TypeScript, providing more precise validation for record-like structures.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nv.record\n```\n\n----------------------------------------\n\nTITLE: Running Deploy Speed Test with Python Script and Convex CLI\nDESCRIPTION: Command to generate a test project with specified node and v8 files of a certain size, check the disk usage, and time how long the Convex deployment takes using the dev command with --once flag.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/deploy-speed-test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython generate-project.py --node-files 10 --v8-files 10 --file-size 10000; du -sh convex; time npx convex dev --once\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React\nDESCRIPTION: Example of how to use a Convex query function within a React component using the useQuery hook with typed arguments.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Specification\nDESCRIPTION: Command to generate an OpenAPI specification file (convex-spec.yaml) from your Convex deployment.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/open-api.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex-helpers open-api-spec\n```\n\n----------------------------------------\n\nTITLE: Defining defineTable Function for Object Schema in TypeScript\nDESCRIPTION: An alternative function for defining a table with an object-based schema. The schema is defined as a record of field validators that specify the structure and validation rules for documents.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-forgotten-export) The symbol \"ObjectValidator\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport function defineTable<DocumentSchema extends Record<string, Validator<any, any, any>>>(documentSchema: DocumentSchema): TableDefinition<ExtractDocument<ObjectValidator<DocumentSchema>>, ExtractFieldPaths<ObjectValidator<DocumentSchema>>>;\n```\n\n----------------------------------------\n\nTITLE: Disabling Schema Validation in TypeScript\nDESCRIPTION: Example of disabling schema validation when defining a schema in Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/schemas.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndefineSchema(\n  {\n    // Define tables here.\n  },\n  {\n    schemaValidation: false,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query Function in React\nDESCRIPTION: Example of how to use a Convex query function within a React component using the useQuery hook. The snippet shows passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/file-storage-with-http/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting cronJobs Function in TypeScript\nDESCRIPTION: A function that returns a new Crons instance for defining scheduled cron jobs in a Convex application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const cronJobs: () => Crons;\n```\n\n----------------------------------------\n\nTITLE: Initializing Convex Development Environment\nDESCRIPTION: Command to start Convex development server and create initial project setup.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/nextjs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook. The example demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/nextjs-pages-router/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: This snippet shows how to use a Convex query function within a React component. It demonstrates passing arguments to the query function using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/zod-validation-ts/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in a React Component\nDESCRIPTION: This example shows how to use a Convex mutation function in a React component using the useMutation hook. It demonstrates both fire-and-forget and promise-based approaches for handling mutation results.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/expo/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Convex-enabled API Route in Next.js\nDESCRIPTION: Implementation of a Next.js API route that interacts with Convex data using fetchQuery. Demonstrates how to handle HTTP requests and access Convex data from server-side endpoints.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/nextjs-pages-router/nextjs-pages-router.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclicks.ts content not provided in the input\n```\n\n----------------------------------------\n\nTITLE: Accessing Document ID in Convex\nDESCRIPTION: Example of accessing a document's ID field in Convex\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/_convexValues.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndoc._id\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth State Management\nDESCRIPTION: React component showing how to manage authentication state using Convex hooks\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/auth0.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConvexAuth } from \"convex/react\";\n\nfunction App() {\n  const { isLoading, isAuthenticated } = useConvexAuth();\n\n  return (\n    <div className=\"App\">\n      {isAuthenticated ? \"Logged in\" : \"Logged out or still loading\"}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents by Field Value\nDESCRIPTION: Demonstrates how to filter documents by a specific field value, which may result in a full table scan without proper indexing.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes-and-query-perf.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst books = await ctx.db\n  .query(\"books\")\n  .filter((q) => q.eq(q.field(\"author\"), \"Jane Austen\"))\n  .collect();\n```\n\n----------------------------------------\n\nTITLE: Accessing User Identity Fields in Convex Functions (TypeScript)\nDESCRIPTION: Shows how to access various fields of the UserIdentity object returned by getUserIdentity() in a Convex function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/functions-auth.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\n\nexport const getUser = query(async (ctx) => {\n  const identity = await ctx.auth.getUserIdentity();\n  if (!identity) {\n    throw new Error(\"Called getUser without authentication present\");\n  }\n  console.log(identity.tokenIdentifier);\n  console.log(identity.subject);\n  console.log(identity.issuer);\n  console.log(identity.email);\n  console.log(identity.emailVerified);\n  console.log(identity.name);\n  console.log(identity.familyName);\n  console.log(identity.givenName);\n  console.log(identity.nickname);\n  console.log(identity.pictureUrl);\n  console.log(identity.updatedAt);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Task Data Class\nDESCRIPTION: Creates a Kotlin data class for task representation with serialization support.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/android.mdx#2025-04-21_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable\ndata class Task(val text: String, val isCompleted: Boolean)\n```\n\n----------------------------------------\n\nTITLE: Using Typed IDs in Convex\nDESCRIPTION: Demonstrates TypeScript type safety for document IDs using the Id type from the generated data model.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/document-ids.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Id } from \"./_generated/dataModel\";\n\nconst userId: Id<\"users\"> = user._id;\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/react-native/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating New npm Project with Node.js\nDESCRIPTION: Shell commands to create a new Node.js project directory, initialize npm, and set the package type to module.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/nodejs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir my-project && cd my-project && npm init -y && npm pkg set type=\"module\"\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: This snippet shows how to use the previously defined mutation function in a React component using the useMutation hook. It demonstrates both a fire-and-forget approach and handling the returned result with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/tanstack-start-clerk/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React\nDESCRIPTION: Demonstrates how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/basic/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Convex Storage Interfaces in TypeScript\nDESCRIPTION: Interfaces defining storage operations for reading, writing and managing files in Convex Storage.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StorageReader {\n    getMetadata(storageId: StorageId): Promise<FileMetadata | null>;\n    getUrl(storageId: StorageId): Promise<string | null>;\n}\n\nexport interface StorageWriter extends StorageReader {\n    delete(storageId: StorageId): Promise<void>;\n    generateUploadUrl(): Promise<string>;\n}\n\nexport interface StorageActionWriter extends StorageWriter {\n    get(storageId: StorageId): Promise<Blob | null>;\n    store(blob: Blob, options?: {\n        sha256?: string;\n    }): Promise<StorageId>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Convex Project with JSON Schema\nDESCRIPTION: Example of a convex.json configuration file with JSON schema validation reference and functions directory specification.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/project-configuration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://raw.githubusercontent.com/get-convex/convex-backend/refs/heads/main/npm-packages/convex/schemas/convex.schema.json\",\n  \"functions\": \"src/convex/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting actionGeneric Constant in TypeScript\nDESCRIPTION: A constant that provides the implementation of the ActionBuilder type with public visibility. This is used to create action functions in a Convex application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const actionGeneric: ActionBuilder<any, \"public\">;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Convex Dev Deployment\nDESCRIPTION: Command to initialize Convex development deployment and create necessary folders.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/svelte.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React\nDESCRIPTION: Example of how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/1-smileys/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query Function in React Component (TypeScript)\nDESCRIPTION: This snippet shows how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tutorial/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Validator Fields in TypeScript\nDESCRIPTION: Demonstrates how to access and use validator fields in Convex. The message validator creates an object schema with user and body fields, and then shows how these fields can be accessed and extended to create a new validator for image messages.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst message = v.object({ user: v.string(), body: v.string() });\nconst imageMessage = v.object({ ...message.fields, })\n```\n\n----------------------------------------\n\nTITLE: Implementing useAuthFromProviderX Hook for Custom Auth Integration\nDESCRIPTION: This JavaScript code defines the useAuthFromProviderX hook, which translates the custom auth provider's API to the ConvexReactClient API. It handles authentication state and token fetching for the custom provider.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/advanced/custom-auth.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useAuthFromProviderX() {\n  const { isLoading, isAuthenticated, getToken } = useProviderXAuth();\n  const fetchAccessToken = useCallback(\n    async ({ forceRefreshToken }) => {\n      // Here you can do whatever transformation to get the ID Token\n      // or null\n      // Make sure to fetch a new token when `forceRefreshToken` is true\n      return await getToken({ ignoreCache: forceRefreshToken });\n    },\n    // If `getToken` isn't correctly memoized\n    // remove it from this dependency array\n    [getToken],\n  );\n  return useMemo(\n    () => ({\n      // Whether the auth provider is in a loading state\n      isLoading: isLoading,\n      // Whether the auth provider has the user signed in\n      isAuthenticated: isAuthenticated ?? false,\n      // The async function to fetch the ID token\n      fetchAccessToken,\n    }),\n    [isLoading, isAuthenticated, fetchAccessToken],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Convex Functions as Strings in JavaScript\nDESCRIPTION: Examples of how to reference Convex functions as strings when not using API objects. This approach is used when connecting to Convex deployments from JavaScript without a bundler.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/html/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"filename:myQuery\"\n\"directory/filename:myMutation\"\n\"directory/action:default\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Messages with Index and Additional Conditions\nDESCRIPTION: Example showing how to combine index-based querying with additional filtering using the filter method.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = await ctx.db\n  .query(\"messages\")\n  .withIndex(\"by_channel\", q => q.eq(\"channel\", channel))\n  .filter(q => q.neq(q.field(\"user\"), myUserId)\n  .collect();\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables via CLI in Convex\nDESCRIPTION: Demonstrates how to list and set environment variables using the Convex CLI. The commands show how to view all variables and set a specific API key.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/environment-variables.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex env list\nnpx convex env set API_KEY secret-api-key\n```\n\n----------------------------------------\n\nTITLE: Referencing JavaScript/TypeScript Auth Config File in Convex\nDESCRIPTION: This snippet demonstrates how to reference the auth configuration file in a Convex project. It supports both TypeScript and JavaScript file extensions.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/debug.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<JSDialectFileName name=\"auth.config.ts\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Dependencies\nDESCRIPTION: Command to install the Convex client library in the React application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/quickstart-react-cra.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app && npm install convex\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Task Data\nDESCRIPTION: Defines sample task data in JSONL format for initial database population.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/android.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"text\": \"Buy groceries\", \"isCompleted\": true}\n{\"text\": \"Go for a swim\", \"isCompleted\": true}\n{\"text\": \"Integrate Convex\", \"isCompleted\": false}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: This snippet shows how to use the previously defined query function in a React component using the useQuery hook. It demonstrates passing the required arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/tanstack-start-clerk/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Internal API in Convex Action\nDESCRIPTION: Shows how to use the internal API object within a Convex action to call internal mutations, specifically in a payment processing scenario.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/generated-api/api.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { action } from \"../_generated/server\";\nimport { internal } from \"../_generated/api\";\n\nexport default action({\n  handler: async ({ runMutation }, { planId, ... }) => {\n    // Call out to payment provider (e.g. Stripe) to charge customer\n    const response = await fetch(...);\n    if (response.ok) {\n      // Mark the plan as \"professional\" in the Convex DB\n      await runMutation(internal.plans.markPlanAsProfessional, { planId });\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function in TypeScript\nDESCRIPTION: Example of a Convex mutation function that handles database writes. It demonstrates argument validation and database insertion operations with return values.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/actions/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining FilterBuilder Interface in TypeScript\nDESCRIPTION: Interface for building database query filters in Convex. Used to construct type-safe filter conditions for database queries.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface FilterBuilder<TableInfo extends GenericTableInfo> {\n\n\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query Functions in React\nDESCRIPTION: This snippet shows how to use a Convex query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function to fetch data from the server.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/python-quickstart/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: File-Level Serializer Configuration\nDESCRIPTION: Configuration for custom type serializers at the file level to handle various numerical type conversions.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/android/data-types.md#2025-04-21_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@file:UseSerializers(\n    Int64ToIntDecoder::class,\n    Int64ToLongDecoder::class,\n    Float64ToFloatDecoder::class,\n    Float64ToDoubleDecoder::class\n)\n\npackage com.example.convexapp\n\nimport kotlinx.serialization.UseSerializers\n\n// @Serializable classes and things.\n```\n\n----------------------------------------\n\nTITLE: Creating Table in Convex Database\nDESCRIPTION: Demonstrates how tables are automatically created when the first document is inserted. No explicit table creation is required.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// `friends` table doesn't exist.\nawait ctx.db.insert(\"friends\", { name: \"Jamie\" });\n// Now it does, and it has one document.\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. The example demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/sveltekit/src/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query Function in React\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. Demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/scheduling/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Convex Table Definition Class in TypeScript\nDESCRIPTION: Class for defining Convex database tables with support for indexes, search indexes, and vector indexes.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TableDefinition<Document extends GenericDocument = GenericDocument, FieldPaths extends string = string, Indexes extends GenericTableIndexes = {}, SearchIndexes extends GenericTableSearchIndexes = {}, VectorIndexes extends GenericTableVectorIndexes = {}> {\n    index<IndexName extends string, FirstFieldPath extends FieldPaths, RestFieldPaths extends FieldPaths[]>(name: IndexName, fields: [FirstFieldPath, ...RestFieldPaths]): TableDefinition<Document, FieldPaths, Expand<Indexes & Record<IndexName, [\n    FirstFieldPath,\n    ...RestFieldPaths,\n    IndexTiebreakerField\n    ]>>, SearchIndexes, VectorIndexes>;\n    searchIndex<IndexName extends string, SearchField extends FieldPaths, FilterFields extends FieldPaths = never>(name: IndexName, indexConfig: Expand<SearchIndexConfig<SearchField, FilterFields>>): TableDefinition<Document, FieldPaths, Indexes, Expand<SearchIndexes & Record<IndexName, {\n        searchField: SearchField;\n        filterFields: FilterFields;\n    }>>, VectorIndexes>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Convex React Client with Next.js\nDESCRIPTION: Example of creating a Convex React client using the deployment URL from an environment variable in a Next.js project.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/project-setup.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ConvexProvider, ConvexReactClient } from \"convex/react\";\n\nconst convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL);\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint 9\nDESCRIPTION: Configuration setup for ESLint 9 using flat config in eslint.config.js\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/eslint.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nimport convexPlugin from \"@convex-dev/eslint-plugin\";\n\nexport default [\n  // Other configurations\n  ...convexPlugin.configs.recommended\n];\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Extraction from Validators\nDESCRIPTION: Shows how to extract TypeScript types from validators using the Infer type to maintain consistency between validation and types.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/validation.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { Infer, v } from \"convex/values\";\n\nconst nestedObject = v.object({\n  property: v.string(),\n});\n\n// Resolves to `{property: string}`.\nexport type NestedObject = Infer<typeof nestedObject>;\n\nexport default mutation({\n  args: {\n    nested: nestedObject,\n  },\n  handler: async ({ db }, { nested }) => {\n    //...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enhanced Wikipedia Summary Action with Chat Integration\nDESCRIPTION: Updates the Wikipedia summary action to automatically post retrieved summaries back to the chat using the scheduler and sendMessage mutation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/tutorial/actions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getWikipediaSummary = internalAction({\n  args: { topic: v.string() },\n  handler: async (ctx, args) => {\n    const response = await fetch(\n      \"https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=\" +\n        args.topic,\n    );\n\n    const summary = getSummaryFromJSON(await response.json());\n    await ctx.scheduler.runAfter(0, api.chat.sendMessage, {\n      user: \"Wikipedia\",\n      body: summary,\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting CONVEX_DEPLOY_KEY for Staging Deployment in Bash\nDESCRIPTION: This snippet demonstrates how to set the CONVEX_DEPLOY_KEY environment variable when running the npx convex deploy command. This is used to deploy to a separate Convex project for staging purposes.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCONVEX_DEPLOY_KEY=your_deploy_key npx convex deploy\n```\n\n----------------------------------------\n\nTITLE: Advanced Search Query with Time Filter (JavaScript)\nDESCRIPTION: This snippet demonstrates a more complex search query that combines full text search with a time-based filter. It searches for messages containing 'hi' that were sent in the last 10 minutes.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/search/search.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = await ctx.db\n  .query(\"messages\")\n  .withSearchIndex(\"search_body\", (q) => q.search(\"body\", \"hi\"))\n  .filter((q) => q.gt(q.field(\"_creationTime\", Date.now() - 10 * 60000)))\n  .take(10);\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: This snippet shows how to use a Convex query function in a React component. It demonstrates the useQuery hook with proper argument passing to fetch data from the backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/javascript/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Convex Client in Svelte Layout\nDESCRIPTION: Svelte code to set up the Convex client in the app's layout file, making it available throughout the app.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/svelte.mdx#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { ConvexClient, ConvexProvider } from \"convex-svelte\";\n  import { PUBLIC_CONVEX_URL } from \"$env/static/public\";\n\n  const client = new ConvexClient(PUBLIC_CONVEX_URL);\n</script>\n\n<ConvexProvider client={client}>\n  <slot />\n</ConvexProvider>\n```\n\n----------------------------------------\n\nTITLE: Asserting Errors in Convex Message Tests with Vitest\nDESCRIPTION: This snippet shows how to assert that a function throws an error in a Convex message test. It uses the expect().rejects.toThrowError() method to check for a specific error message when sending an empty message.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/testing/convex-test.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convexTest } from \"convex-test\";\nimport { expect, test } from \"vitest\";\nimport { api } from \"./_generated/api\";\nimport schema from \"./schema\";\n\ntest(\"messages validation\", async () => {\n  const t = convexTest(schema);\n  expect(async () => {\n    await t.mutation(api.messages.send, { body: \"\", author: \"James\" });\n  }).rejects.toThrowError(\"Empty message body is not allowed\");\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query in a React Component (TypeScript)\nDESCRIPTION: Shows how to use the useQuery hook to call a Convex query function from a React component. The example passes typed arguments to the query function and retrieves data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/snippets/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Running Specific Convex Function via cURL\nDESCRIPTION: Example of making a POST request to Convex run API endpoint using cURL to execute a specific function by its identifier.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/http-api/index.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl https://acoustic-panther-728.convex.cloud/api/run/messages/list \\\n   -d '{\"args\": {}, \"format\": \"json\"}' \\\n   -X POST -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Starting Convex Development Server\nDESCRIPTION: Initializes Convex development environment and syncs functions with cloud deployment\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/bun.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbunx convex dev\n```\n\n----------------------------------------\n\nTITLE: Environment-Based Auth0 Configuration\nDESCRIPTION: Backend configuration for Auth0 using environment variables\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/auth0.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  providers: [\n    {\n      domain: process.env.AUTH0_DOMAIN,\n      applicationID: process.env.AUTH0_CLIENT_ID,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk with Environment Variables\nDESCRIPTION: This snippet shows how to use environment variables to configure different Clerk instances for development and production in the Convex backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/clerk.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  providers: [\n    {\n      domain: process.env.CLERK_JWT_ISSUER_DOMAIN,\n      applicationID: \"convex\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Creates a folder for the Python script with a virtual environment.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/python.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m venv my-app/venv\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation of User and Conversation Functions (TypeScript)\nDESCRIPTION: This example shows an incorrect implementation of user and conversation functions that overuses ctx.runQuery and ctx.runMutation. It demonstrates what not to do in a Convex backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const createUser = mutation(\n  async ({ db, auth }, { name }: { name: string }) => {\n    const identity = await auth.getUserIdentity();\n    if (!identity) {\n      throw new Error(\"Unauthenticated\");\n    }\n    await db.insert(\"users\", {\n      name,\n      tokenIdentifier: identity.tokenIdentifier,\n    });\n  }\n);\n\nexport const getUser = query(async ({ db, auth }) => {\n  const identity = await auth.getUserIdentity();\n  if (!identity) {\n    return null;\n  }\n  return await db\n    .query(\"users\")\n    .filter((q) =>\n      q.eq(q.field(\"tokenIdentifier\"), identity.tokenIdentifier)\n    )\n    .first();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query Functions in React\nDESCRIPTION: Example showing how to use a Convex query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function to fetch data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/react-native/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining DataModelFromSchemaDefinition Type in TypeScript\nDESCRIPTION: A TypeScript type that creates a data model from a schema definition. It transforms table definitions into a structured data model with documents, field paths, and index information.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-forgotten-export) The symbol \"MaybeMakeLooseDataModel\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport type DataModelFromSchemaDefinition<SchemaDef extends SchemaDefinition<any, boolean>> = MaybeMakeLooseDataModel<{\n    [TableName in keyof SchemaDef[\"tables\"] & string]: SchemaDef[\"tables\"][TableName] extends TableDefinition<infer Document, infer FieldPaths, infer Indexes, infer SearchIndexes, infer VectorIndexes> ? {\n        document: Expand<IdField<TableName> & Document>;\n        fieldPaths: keyof IdField<TableName> | FieldPaths;\n        indexes: Expand<Indexes & SystemIndexes>;\n        searchIndexes: SearchIndexes;\n        vectorIndexes: VectorIndexes;\n    } : never;\n}, SchemaDef[\"strictTableNameTypes\"]>;\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint 8 for Convex\nDESCRIPTION: Configuration for .eslintrc.js to use the Convex ESLint plugin with ESLint 8. It extends the recommended configurations and sets ignore patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/@convex-dev/eslint-plugin/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extends: [\n    \"plugin:@typescript-eslint/recommended\",\n    \"plugin:@convex-dev/recommended\",\n  ],\n  ignorePatterns: [\"node_modules/\", \"dist/\", \"build/\"],\n};\n```\n\n----------------------------------------\n\nTITLE: System Table Document Structure Example\nDESCRIPTION: Example JSON structure showing the format of a scheduled function document in the system table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/scheduling/scheduled-functions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_creationTime\": 1699931054642.111,\n  \"_id\": \"3ep33196167235462543626ss0scq09aj4gqn9kdxrdr\",\n  \"args\": [{}],\n  \"completedTime\": 1699931054690.366,\n  \"name\": \"messages.js:destruct\",\n  \"scheduledTime\": 1699931054657,\n  \"state\": { \"kind\": \"success\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Application Start - Development Server Launch\nDESCRIPTION: Command to start the development server and run the application locally.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/tanstack-start.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Literal Type Validation in Convex Mutation\nDESCRIPTION: Demonstrates how to use v.literal combined with unions to validate constant field values in a Convex mutation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/validation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport default mutation({\n  args: {\n    oneTwoOrThree: v.union(\n      v.literal(\"one\"),\n      v.literal(\"two\"),\n      v.literal(\"three\"),\n    ),\n  },\n  handler: async ({ db }, { oneTwoOrThree }) => {\n    //...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Message Testing Implementation\nDESCRIPTION: Example test file showing how to test message sending and listing functionality\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/testing/convex-test.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convexTest } from \"convex-test\";\nimport { expect, test } from \"vitest\";\nimport { api } from \"./_generated/api\";\nimport schema from \"./schema\";\n\ntest(\"sending messages\", async () => {\n  const t = convexTest(schema);\n  await t.mutation(api.messages.send, { body: \"Hi!\", author: \"Sarah\" });\n  await t.mutation(api.messages.send, { body: \"Hey!\", author: \"Tom\" });\n  const messages = await t.query(api.messages.list);\n  expect(messages).toMatchObject([\n    { body: \"Hi!\", author: \"Sarah\" },\n    { body: \"Hey!\", author: \"Tom\" }\n  ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Corresponding Swift Struct for Convex Data\nDESCRIPTION: Swift struct definition that corresponds to the Convex query result, using property wrappers for BigInt conversion and conforming to Decodable protocol.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/swift/data-types.md#2025-04-21_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct BaseballTeam: Decodable {\n  let name: String\n  let uniformColors: [String]\n  @ConvexInt\n  var wins: Int\n  @ConvexInt\n  var losses: Int\n}\n```\n\n----------------------------------------\n\nTITLE: Project Structure Setup - TanStack Start Directory Layout\nDESCRIPTION: Shows the expected directory structure for a basic TanStack Start application after initial setup.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/tanstack-start.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── app/\n│   ├── routes/\n│   │   ├── `index.tsx`\n│   │   └── `__root.tsx`\n│   ├── `client.tsx`\n│   ├── `router.tsx`\n│   ├── `routeTree.gen.ts`\n│   └── `ssr.tsx`\n├── `.gitignore`\n├── `app.config.ts`\n├── `package.json`\n└── `tsconfig.json`\n```\n\n----------------------------------------\n\nTITLE: Deploying Scenario Runner Functions\nDESCRIPTION: Commands to deploy scenario-runner functions to a self-hosted Convex backend for testing purposes.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/load_generator/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd npm-packages/scenario-runner\nnpx convex deploy --admin-key=<your-admin-key> --url=<your-backend-url>\n```\n\n----------------------------------------\n\nTITLE: Example Console Log Event in JSON\nDESCRIPTION: This snippet shows the JSON structure of a console log event from a Convex mutation function. It includes fields like topic, timestamp, function details, log level, and the logged message.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/integrations/log-streams/log-streams.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"topic\": \"console\"\n    \"timestamp\": 1715879172882,\n    \"function\": {\n      \"path\": \"messages:send\",\n      \"request_id\": \"d064ef901f7ec0b7\",\n      \"type\": \"mutation\"\n    },\n    \"log_level\": \"LOG\",\n    \"message\": \"'Sent message!'\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Storage Metadata Access\nDESCRIPTION: Deprecated method for accessing file metadata using storage.getMetadata() in actions and HTTP actions. Returns a FileMetadata object with a different structure than db.system.get.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/file-storage/file-metadata.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { action } from \"./_generated/server\";\n\nexport const getFileMetadata = action(async (ctx, { storageId }) => {\n  return await ctx.storage.getMetadata(storageId);\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing SnapshotManager Structure in ASCII\nDESCRIPTION: An ASCII diagram representing the structure of the SnapshotManager in the Convex backend. It shows the relationship between Database, SnapshotManager, Snapshots, and their subcomponents including DatabaseIndex, DatabaseTableMetadata, and in-memory indexes.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/database/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\n                                              ┌───────────────────────────┐\n                                              │                           │\n                                              │                           │\n                                              │         Database          │\n                                              │                           │\n                                              │                           │\n                                              └───────────────────────────┘\n                                                            │\n                                                            │\n                                                            │\n                                                            │\n                                                            ▼\n┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐\n│SnapshotManager                                                                                                        │\n│                                                           .                                                           │\n│                                                           .                                                           │\n│                                                           .                                                           │\n│                                                                                                                       │\n│ ┌───────────────┬───────────────────────────────────────────────────────────────────────────────────────────────────┐ │\n│ │   Timestamp   │                                             Snapshot                                              │ │\n│ └───────────────┴───────────────────────────────────────────────────────────────────────────────────────────────────┘ │\n│ ┌───────────────┬───────────────────────────────────────────────────────────────────────────────────────────────────┐ │\n│ │   Timestamp   │                                             Snapshot                                              │ │\n│ └───────────────┴───────────────────────────────────────────────────────────────────────────────────────────────────┘ │\n│ ┌───────────────┬───────────────────────────────────────────────────────────────────────────────────────────────────┐ │\n│ │               │Snapshot◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟┌──────────────────────────────────────────────────┐◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│DatabaseIndex                                     │◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ ┌──────────────────────────────────────────────┐ │◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │DatabaseIndexMetadata                         │ │◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ ┌──────────────────────────────────────────┐ │ │◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │indexes: OrdMap                           │ │ │◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │ ┌────────────┬─────────────────────────┐ │ │ │◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │ │            │Index                    │ │ │ │◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │ │            │  ┌────────────────────┐ │ │ │ │◟◟│ │\n│ │               │◟◟┌───────────────────────────────────────┐◟◟│ │ │ │            │  │      IndexId       │ │ │ │ │◟◟│ │\n│ │               │◟◟│DatabaseTableMetadata                  │◟◟│ │ │ │            │  └────────────────────┘ │ │ │ │◟◟│ │\n│ │               │◟◟│ ┌───────────────────────────────────┐ │◟◟│ │ │ │            │  ┌────────────────────┐ │ │ │ │◟◟│ │\n│ │               │◟◟│ │tables: OrdMap                     │ │◟◟│ │ │ │            │  │IndexMetadata       │ │ │ │ │◟◟│ │\n│ │               │◟◟│ │ ┌───────────┬───────────────────┐ │ │◟◟│ │ │ │            │  │ ┌────────────────┐ │ │ │ │ │◟◟│ │\n│ │               │◟◟│ │ │           │TableSummary       │ │ │◟◟│ │ │ │ IndexName  │  │ │   IndexName    │ │ │ │ │ │◟◟│ │\n│ │               │◟◟│ │ │           │ ┌───────────────┐ │ │ │◟◟│ │ │ │            │  │ └────────────────┘ │ │ │ │ │◟◟│ │\n│ │               │◟◟│ │ │           │ │     Shape     │ │ │ │◟◟│ │ │ │            │  │ ┌────────────────┐ │ │ │ │ │◟◟│ │\n│ │               │◟◟│ │ │ TableName │ └───────────────┘ │ │ │◟◟│ │ │ │            │  │ │ IndexedFields  │ │ │ │ │ │◟◟│ │\n│ │               │◟◟│ │ │           │ ┌───────────────┐ │ │ │◟◟│ │ │ │            │  │ └────────────────┘ │ │ │ │ │◟◟│ │\n│ │               │◟◟│ │ │           │ │  total_size   │ │ │ │◟◟│ │ │ │            │  │ ┌────────────────┐ │ │ │ │ │◟◟│ │\n│ │               │◟◟│ │ │           │ └───────────────┘ │ │ │◟◟│ │ │ │            │  │ │   IndexState   │ │ │ │ │ │◟◟│ │\n│ │               │◟◟│ │ └───────────┴───────────────────┘ │ │◟◟│ │ │ │            │  │ └────────────────┘ │ │ │ │ │◟◟│ │\n│ │   Timestamp   │◟◟│ └───────────────────────────────────┘ │◟◟│ │ │ │            │  └────────────────────┘ │ │ │ │◟◟│ │\n│ │               │◟◟│ ┌───────────────────────────────────┐ │◟◟│ │ │ └────────────┴─────────────────────────┘ │ │ │◟◟│ │\n│ │               │◟◟│ │           num_documents           │ │◟◟│ │ └──────────────────────────────────────────┘ │ │◟◟│ │\n│ │               │◟◟│ └───────────────────────────────────┘ │◟◟│ │ ┌──────────────────────────────────────────┐ │ │◟◟│ │\n│ │               │◟◟│ ┌───────────────────────────────────┐ │◟◟│ │ │             indexes_by_table             │ │ │◟◟│ │\n│ │               │◟◟│ │             user_size             │ │◟◟│ │ └──────────────────────────────────────────┘ │ │◟◟│ │\n│ │               │◟◟│ └───────────────────────────────────┘ │◟◟│ │ ┌──────────────────────────────────────────┐ │ │◟◟│ │\n│ │               │◟◟│ ┌───────────────────────────────────┐ │◟◟│ │ │             num_user_indexes             │ │ │◟◟│ │\n│ │               │◟◟│ │            system_size            │ │◟◟│ │ └──────────────────────────────────────────┘ │ │◟◟│ │\n│ │               │◟◟│ └───────────────────────────────────┘ │◟◟│ └──────────────────────────────────────────────┘ │◟◟│ │\n│ │               │◟◟└───────────────────────────────────────┘◟◟│ ┌──────────────────────────────────────────────┐ │◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │in_memory_indexes: OrdMap                     │ │◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ ┌─────────┬────────────────────────────────┐ │ │◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │         │IndexMap: OrdMap                │ │ │◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │         │ ┌───────────┬────────────────┐ │ │ │◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │         │ │           │   Timestamp    │ │ │ │◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │ IndexId │ │  Vec<u8>  ├────────────────┤ │ │ │◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │         │ │           │ PackedDocument │ │ │ │◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │         │ └───────────┴────────────────┘ │ │ │◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │         │                                │ │ │◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ └─────────┴────────────────────────────────┘ │ │◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ └──────────────────────────────────────────────┘ │◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟└──────────────────────────────────────────────────┘◟◟│ │\n│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │\n│ └───────────────┴───────────────────────────────────────────────────────────────────────────────────────────────────┘ │\n│ ┌───────────────┬───────────────────────────────────────────────────────────────────────────────────────────────────┐ │\n│ │   Timestamp   │                                             Snapshot                                              │ │\n│ └───────────────┴───────────────────────────────────────────────────────────────────────────────────────────────────┘ │\n│ ┌───────────────┬───────────────────────────────────────────────────────────────────────────────────────────────────┐ │\n│ │   Timestamp   │                                             Snapshot                                              │ │\n│ └───────────────┴───────────────────────────────────────────────────────────────────────────────────────────────────┘ │\n│                                                                                                                       │\n│                                                           .                                                           │\n│                                                           .                                                           │\n│                                                           .                                                           │\n│                                                                                                                       │\n└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘\n\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Package\nDESCRIPTION: Command to install the Convex package as a project dependency\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/nextjs-pages-router/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install convex\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/nextjs.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using Preloaded Convex Query in Next.js Client Component\nDESCRIPTION: Shows how to use usePreloadedQuery in a Next.js Client Component to access data preloaded by the Server Component.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/nextjs/nextjs-server-rendering.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"use client\";\n\nimport { usePreloadedQuery } from \"convex/react\";\nimport { api } from \"../../convex/_generated/api\";\nimport { Preloaded } from \"convex/nextjs\";\n\nexport function Tasks({ preloaded }: { preloaded: Preloaded<typeof api.tasks.get> }) {\n  const tasks = usePreloadedQuery(preloaded);\n  return (\n    <ul>\n      {tasks.map((task) => (\n        <li key={task._id}>{task.text}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Executing HTTP Requests to Convex Endpoints\nDESCRIPTION: Examples of making HTTP requests to Convex endpoints using curl. Shows both GET request for retrieving messages by author and POST request for creating new messages.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/http/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v 'http://127.0.0.1:8001/getMessagesByAuthor?authorNumber=123'\ncurl -v -d '{ \"author\": \"User 123\", \"body\": \"Hello world\" }' \\\n    -H 'content-type: application/json' 'http://127.0.0.1:8001/postMessage'\n```\n\n----------------------------------------\n\nTITLE: Sample Data Definition\nDESCRIPTION: JSONL format sample data for tasks table containing todo items with completion status.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/quickstart-react-cra.mdx#2025-04-21_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\n{\"text\": \"Buy groceries\", \"isCompleted\": true}\n{\"text\": \"Go for a swim\", \"isCompleted\": true}\n{\"text\": \"Integrate Convex\", \"isCompleted\": false}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration in .env File\nDESCRIPTION: Example of a .env.local file showing how to configure the Convex deployment URL and other environment variables for a Next.js project.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/project-setup.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nNEXT_PUBLIC_CONVEX_URL=https://guiltless-dog-960.convex.cloud\n\n# examples of other environment variables that might be passed to the frontend\nNEXT_PUBLIC_SENTRY_DSN=https://123abc@o123.ingest.sentry.io/1234\nNEXT_PUBLIC_LAUNCHDARKLY_SDK_CLIENT_SIDE_ID=01234567890abcdef\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Shows how to use the query function within a React component using the useQuery hook. Demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-auth/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Function Type Definitions\nDESCRIPTION: Type definitions for function references, arguments and return types\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FunctionArgs<FuncRef extends AnyFunctionReference> = FuncRef[\"_args\"];\n\nexport type FunctionReference<Type extends FunctionType, Visibility extends FunctionVisibility = \"public\", Args extends DefaultFunctionArgs = any, ReturnType = any> = {\n    _type: Type;\n    _visibility: Visibility;\n    _args: Args;\n    _returnType: ReturnType;\n};\n\nexport type FunctionReturnType<FuncRef extends AnyFunctionReference> = FuncRef[\"_returnType\"];\n\nexport type FunctionType = \"query\" | \"mutation\" | \"action\";\n\nexport type FunctionVisibility = \"public\" | \"internal\";\n```\n\n----------------------------------------\n\nTITLE: Creating Zen Header Component in React\nDESCRIPTION: This snippet defines a React component 'ZenHeader' that renders a header with a title and an associated CategoryIcon. It's used to create section headers in the Zen of Convex guide.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/zen.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function ZenHeader({ title }) {\n  return (\n    <h2 className=\"zen-header\">\n      {title} <CategoryIcon title={title} />\n    </h2>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Local Development Server for Convex Docs\nDESCRIPTION: This command installs project dependencies using Rush and starts a local development server, opening a browser window. Most changes are reflected live without server restart.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\njust rush install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Optional Fields Validation in Convex Mutation\nDESCRIPTION: Demonstrates how to validate optional fields using v.optional in a Convex mutation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/validation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport default mutation({\n  args: {\n    optionalString: v.optional(v.string()),\n    optionalNumber: v.optional(v.number()),\n  },\n  handler: async ({ db }, { optionalString, optionalNumber }) => {\n    //...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing WebAssembly as an ES Module in JavaScript\nDESCRIPTION: Demonstrates the proposed ESM integration for WebAssembly, where a .wasm file can be directly imported as a module with pre-instantiated exports.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/rust-wasm/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as foo from \"./foo.wasm\";\nfoo.bar();\n```\n\n----------------------------------------\n\nTITLE: Implementing Session-Aware Query in Convex\nDESCRIPTION: Definition of a query function using queryWithSession wrapper to access session context within the handler.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/sessions/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const myQuery = queryWithSession({\n  args: {},\n  handler: async (ctx, args) => {\n   console.log(ctx.session._id);\n    ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Data for Convex Database\nDESCRIPTION: JSON Lines (JSONL) formatted sample data for initializing the Convex database with task entries. Each line represents a task with text and completion status.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/swift.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"text\": \"Buy groceries\", \"isCompleted\": true}\n{\"text\": \"Go for a swim\", \"isCompleted\": true}\n{\"text\": \"Integrate Convex\", \"isCompleted\": false}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook to fetch data with specified parameters.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/dall-e-storage-action/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Building Vue 3 Project for Production\nDESCRIPTION: This command performs type-checking, compilation, and minification of the Vue 3 project for production deployment.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/vue/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running LoadGenerator Against Self-hosted Backend\nDESCRIPTION: Commands to execute LoadGenerator against a self-hosted Convex backend using specific workload configurations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/load_generator/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd ../../crates/load_generator\njust self-hosted crates/load_generator/workloads/<your-workload>.json  --existing-instance-url <your-backend-url> --existing-instance-admin-key <your-admin-key>\n```\n\n----------------------------------------\n\nTITLE: Convex Scheduler Interface in TypeScript\nDESCRIPTION: Interface for scheduling delayed execution of Convex functions using timestamps or intervals.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Scheduler {\n    runAfter<FuncRef extends SchedulableFunctionReference>(delayMs: number, functionReference: FuncRef, ...args: OptionalRestArgs<FuncRef>): Promise<void>;\n    runAt<FuncRef extends SchedulableFunctionReference>(timestamp: number | Date, functionReference: FuncRef, ...args: OptionalRestArgs<FuncRef>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ComponentCardList in TypeScript\nDESCRIPTION: This code snippet imports the ComponentCardList component from a local file. It is used to render lists of component cards in the documentation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/components.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ComponentCardList } from \"@site/src/ComponentCardList.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint 8\nDESCRIPTION: Configuration setup for ESLint 8 in .eslintrc.js including typescript and convex plugins\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/eslint.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extends: [\n    // Other configurations\n    \"plugin:@typescript-eslint/recommended\",\n    \"plugin:@convex-dev/recommended\",\n  ],\n  ignorePatterns: [\"node_modules/\", \"dist/\", \"build/\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server on localhost:3000.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/nextjs-pages-router/quickstart-nextjs-pages-router.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Verifying Backward Compatibility of Convex Query String References\nDESCRIPTION: This code demonstrates that the older syntax pattern `useQuery('listMessages')` still functions correctly in Convex applications, even though modern TypeScript types may not support this string-based query reference approach.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/javascript-old-syntax/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseQuery('listMessages')\n```\n\n----------------------------------------\n\nTITLE: Importing Sample Data to Convex\nDESCRIPTION: Imports sample data from a JSONL file into the Convex tasks table\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/bun.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbunx convex import --table tasks sampleData.jsonl\n```\n\n----------------------------------------\n\nTITLE: Configuring CommonJS API Generation in Convex\nDESCRIPTION: JSON configuration to enable CommonJS API file generation. This configuration should be added to convex.json in the project root when working with Node.js code that uses require() syntax.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/node/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"generateCommonJSApi\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: This snippet shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates how to pass the required arguments to the function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/@convex-dev/react-query/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Database Operation Types\nDESCRIPTION: Type definitions for numeric and boolean operations on database fields\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nadd<T extends NumericValue>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<T>;\nand(...exprs: Array<ExpressionOrValue<boolean>>): Expression<boolean>;\ndiv<T extends NumericValue>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<T>;\neq<T extends Value | undefined>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<boolean>;\nfield<FieldPath extends FieldPaths<TableInfo>>(fieldPath: FieldPath): Expression<FieldTypeFromFieldPath<DocumentByInfo<TableInfo>, FieldPath>>;\ngt<T extends Value>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<boolean>;\ngte<T extends Value>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<boolean>;\nlt<T extends Value>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<boolean>;\nlte<T extends Value>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<boolean>;\nmod<T extends NumericValue>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<T>;\nmul<T extends NumericValue>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<T>;\nneg<T extends NumericValue>(x: ExpressionOrValue<T>): Expression<T>;\nneq<T extends Value | undefined>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<boolean>;\nnot(x: ExpressionOrValue<boolean>): Expression<boolean>;\nor(...exprs: Array<ExpressionOrValue<boolean>>): Expression<boolean>;\nsub<T extends NumericValue>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<T>;\n```\n\n----------------------------------------\n\nTITLE: Setting Clerk Publishable Key in Environment File\nDESCRIPTION: This snippet demonstrates how to set the Clerk publishable key as an environment variable in a .env.local file. This configuration is typically used for local development.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/clerk.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nVITE_CLERK_PUBLISHABLE_KEY=\"pk_test_...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Convex MCP Server in Cursor JSON\nDESCRIPTION: This JSON configuration adds a Convex MCP server to Cursor's settings. It specifies the command and arguments needed to start the Convex MCP server using npx.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/ai/using-cursor.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"convex\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"convex@latest\", \"mcp\", \"start\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for Convex Docs\nDESCRIPTION: This command generates static content into the 'build' directory, which can be served using any static content hosting service.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex File Storage Chat Example\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex file storage chat example app.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/file-storage/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Updating Session Data in Database\nDESCRIPTION: Example of updating session data in the database table using db.patch operation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/sessions/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndb.patch(session._id, { userId });\n```\n\n----------------------------------------\n\nTITLE: Running Convex Code Generation\nDESCRIPTION: Command to execute Convex's code generation process, which creates app-specific JavaScript and TypeScript files in the convex/_generated directory.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/generated-api/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Environments for Vitest in Convex Projects\nDESCRIPTION: This snippet demonstrates how to configure Vitest to use different environments for testing Convex functions and React frontend. It uses the environmentMatchGlobs option to specify edge-runtime for convex/ tests and jsdom for other tests.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/testing/convex-test.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"vitest/config\";\n\nexport default defineConfig({\n  test: {\n    environmentMatchGlobs: [\n      // all tests in convex/ will run in edge-runtime\n      [\"convex/**\", \"edge-runtime\"],\n      // all other tests use jsdom\n      [\"**\", \"jsdom\"],\n    ],\n    server: { deps: { inline: [\"convex-test\"] } },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Convex Data via CLI\nDESCRIPTION: Command line instruction to export Convex data to a local directory using the Convex CLI tool. The exported data will be saved to the specified path.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/import-export/export.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex export --path ~/Downloads\n```\n\n----------------------------------------\n\nTITLE: Importing Sample Data to Convex Database\nDESCRIPTION: Command to import sample data from a JSONL file into the Convex tasks table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/nodejs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx convex import --table tasks sampleData.jsonl\n```\n\n----------------------------------------\n\nTITLE: Importing Sample Data to Convex Database\nDESCRIPTION: Adds sample data from a JSONL file to the 'tasks' table in the Convex database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/python.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex import --table tasks sampleData.jsonl\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Rust Client via Cargo\nDESCRIPTION: Instructions for adding the Convex Rust client to a project's dependencies in the Cargo.toml file.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nconvex = \"*\"\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation of Scrape Action (TypeScript)\nDESCRIPTION: This example shows how to correctly implement a scrape action using the model function. It demonstrates the proper use of runAction for different runtime requirements.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Scrape from './model/scrape';\n\nexport const scrapeWebsite = action(\n  async ({ runAction }, { url }: { url: string }) => {\n    return await runAction(\n      async (ctx) => Scrape.scrapeWebsite(ctx, url),\n      { runtime: \"node\" }\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating ArrayBuffer in Convex\nDESCRIPTION: Example of creating a new ArrayBuffer for byte storage\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/_convexValues.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew ArrayBuffer(8)\n```\n\n----------------------------------------\n\nTITLE: Creating Float Value in Convex\nDESCRIPTION: Example of declaring a floating-point number\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/_convexValues.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n3.1\n```\n\n----------------------------------------\n\nTITLE: Starting Convex Development Server\nDESCRIPTION: Command to initialize and start the Convex development environment.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/workflow.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Setting up ConvexProvider for Mutations and Actions\nDESCRIPTION: Wraps the application with ConvexProvider and QueryClientProvider to enable Convex hooks like useConvexMutation and useConvexAction.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/@convex-dev/react-query/README.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ConvexProvider client={convex}>\n  <QueryClientProvider client={queryClient}>\n    <App />\n  </QueryClientProvider>\n</ConvexProvider>\n```\n\n----------------------------------------\n\nTITLE: Defining DatabaseReader Interface in TypeScript\nDESCRIPTION: A deprecated interface for reading data from a Convex database. Provides methods for fetching documents by ID and initializing queries on specific tables.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// @public @deprecated (undocumented)\nexport interface DatabaseReader<DataModel extends GenericDataModel> {\n    // Warning: (ae-forgotten-export) The symbol \"Id\" needs to be exported by the entry point index.d.ts\n    get<TableName extends TableNamesInDataModel<DataModel>>(id: Id<TableName>): Promise<DocumentByName<DataModel, TableName> | null>;\n    normalizeId<TableName extends TableNamesInDataModel<DataModel>>(tableName: TableName, id: string): Id<TableName> | null;\n    query<TableName extends TableNamesInDataModel<DataModel>>(tableName: TableName): QueryInitializer<NamedTableInfo<DataModel, TableName>>;\n}\n```\n\n----------------------------------------\n\nTITLE: External Packages Configuration (Wildcard)\nDESCRIPTION: JSON configuration to mark all dependencies as external in Node actions.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/bundling.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"node\": {\n    \"externalPackages\": [\"*\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Convex Commands with Self-Hosted Backend\nDESCRIPTION: Commands to interact with the self-hosted Convex backend, such as pushing code with the development server or viewing available commands.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex dev\nnpx convex --help  # see all available commands\n```\n\n----------------------------------------\n\nTITLE: Managing Environment Variables\nDESCRIPTION: Commands for listing, getting, setting, and removing environment variables\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/cli.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex env list\nnpx convex env get <name>\nnpx convex env set <name> <value>\nnpx convex env remove <name>\n```\n\n----------------------------------------\n\nTITLE: Project Setup Commands\nDESCRIPTION: Commands to install dependencies and start the development server\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/nextjs-pages-router/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using Convex HTTP Client with CommonJS in Node.js\nDESCRIPTION: Example of using Convex HTTP client with CommonJS require() syntax in Node.js. This approach is necessary when the project doesn't use ESM modules and requires the generated CommonJS API file.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/node/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ConvexHttpClient, ConvexClient } = require(\"convex/browser\");\nconst { api } = require(\"./convex/_generated/api_cjs.cjs\");\nconst httpClient = new ConvexHttpClient(CONVEX_URL_GOES_HERE);\n```\n\n----------------------------------------\n\nTITLE: Importing Sample Data to Convex Database\nDESCRIPTION: Import sample data from 'sampleData.jsonl' into the 'tasks' table in the Convex database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react-native.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex import --table tasks sampleData.jsonl\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Shows how to consume a Convex query function in a React component using the useQuery hook. The example demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-15-app/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Data for Convex Database\nDESCRIPTION: Sample data in JSONL format to be imported into the Convex database 'tasks' table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react-native.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsonl\nCODE:\n```\nimport sampleData from \"!!raw-loader!@site/../private-demos/quickstarts/expo/sampleData.jsonl\";\n```\n\n----------------------------------------\n\nTITLE: JSX LargeCardList Component Usage\nDESCRIPTION: Implementation of a card list component displaying tutorial and documentation links\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/home.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<LargeCardList\n  items={[\n    {\n      title: \"Tutorial: Build a chat app\",\n      description:\n        \"Follow a step-by-step tutorial to build your first Convex app - a real-time chat application.\",\n      href: \"/tutorial\",\n    },\n    {\n      title: \"Understanding Convex\",\n      description:\n        \"Learn about the core concepts and architecture that make Convex unique and powerful.\",\n      href: \"/understanding\",\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Context Interface Definitions\nDESCRIPTION: Interface definitions for action, mutation and query contexts\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GenericActionCtx<DataModel extends GenericDataModel> {\n    auth: Auth;\n    runAction<Action extends FunctionReference<\"action\", \"public\" | \"internal\">>(action: Action, ...args: OptionalRestArgs<Action>): Promise<FunctionReturnType<Action>>;\n    runMutation<Mutation extends FunctionReference<\"mutation\", \"public\" | \"internal\">>(mutation: Mutation, ...args: OptionalRestArgs<Mutation>): Promise<FunctionReturnType<Mutation>>;\n    runQuery<Query extends FunctionReference<\"query\", \"public\" | \"internal\">>(query: Query, ...args: OptionalRestArgs<Query>): Promise<FunctionReturnType<Query>>;\n    scheduler: Scheduler;\n    storage: StorageActionWriter;\n}\n\nexport interface GenericMutationCtx<DataModel extends GenericDataModel> {\n    auth: Auth;\n    db: GenericDatabaseWriter<DataModel>;\n    scheduler: Scheduler;\n    storage: StorageWriter;\n}\n\nexport interface GenericQueryCtx<DataModel extends GenericDataModel> {\n    auth: Auth;\n    db: GenericDatabaseReader<DataModel>;\n    storage: StorageReader;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Table Data via CLI\nDESCRIPTION: Command line interface command to view table data in a readonly format using the Convex CLI tool.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/dashboard/deployments/data.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex data [table]\n```\n\n----------------------------------------\n\nTITLE: Loading Link from ConvexDB in Go\nDESCRIPTION: Implements a Load method for the ConvexDB struct that retrieves a Link from the database by its short code. It makes an API request to Convex and converts the returned document to a Link structure.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/snippets/goExample.txt#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *ConvexDB) Load(short string) (*Link, error) { \n  request := *convex.NewRequestLoadLoadOne(*convex.NewRequestLoadLoadOneArgs(short, c.token))\n  resp, httpRes, err := c.client.QueryAPI.ApiRunLoadLoadOnePost(context.Background()).RequestLoadLoadOne(request).Execute()\n  validationErr := validateResponse(httpRes.StatusCode, err, resp.Status) if\n  validationErr != nil { return nil, validationErr }\n\n  linkDoc := resp.Value.Get()\n  if linkDoc == nil {\n    err := fs.ErrNotExist\n    return nil, err\n  }\n  link := Link{\n    Short:    linkDoc.Short,\n    Long:     linkDoc.Long,\n    Created:  time.Unix(int64(linkDoc.Created), 0),\n    LastEdit: time.Unix(int64(linkDoc.LastEdit), 0),\n    Owner:    linkDoc.Owner,\n  }\n\n  return &link, nil\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Shows how to use the Convex query function in a React component using the useQuery hook. This snippet demonstrates passing typed arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nodejs/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying with Custom Commands\nDESCRIPTION: Examples of deployment commands with custom build steps and environment variables\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/cli.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex deploy --cmd \"npm run build\"\nnpx convex deploy --cmd 'npm run build' --cmd-url-env-var-name CUSTOM_CONVEX_URL\n```\n\n----------------------------------------\n\nTITLE: Setting Up Convex Dev Deployment\nDESCRIPTION: Initializes a Convex development deployment, creating necessary project structures and syncing functions with the cloud.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/python.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Running Detox Build Command for iOS Simulator\nDESCRIPTION: Command to run the Detox build for iOS simulator configuration, useful for debugging build failures.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/react-native/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx detox build --configuration ios.sim.release\n```\n\n----------------------------------------\n\nTITLE: Deploying to Production\nDESCRIPTION: Command to deploy Convex backend code to the production environment.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/workflow.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Convex Component in TypeScript\nDESCRIPTION: Configuration code to add a component to the Convex application by updating the convex.config.ts file.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/components/using.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// convex/convex.config.ts\nimport { defineApp } from \"convex/server\";\nimport shardedCounter from \"@convex-dev/sharded-counter/convex.config\";\n\nconst app = defineApp();\n\n// highlight-next-line\napp.use(shardedCounter);\n//... Add other components here\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Defining ActionBuilder Type in TypeScript\nDESCRIPTION: TypeScript type definition for ActionBuilder, which is used to create Convex action functions with either validated or unvalidated arguments. It supports different visibility settings and provides type safety for function arguments and outputs.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type ActionBuilder<DataModel extends GenericDataModel, Visibility extends FunctionVisibility> = {\n    <Output, ArgsValidator extends PropertyValidators>(func: ValidatedFunction<GenericActionCtx<DataModel>, ArgsValidator, Output>): RegisteredAction<Visibility, ObjectType<ArgsValidator>, Output>;\n    <Output, Args extends ArgsArray = OneArgArray>(func: UnvalidatedFunction<GenericActionCtx<DataModel>, Args, Output>): RegisteredAction<Visibility, ArgsArrayToObject<Args>, Output>;\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Convex Admin Key\nDESCRIPTION: Command to connect to the Fly.io instance and generate an admin key for managing the Convex backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/fly/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh console --command \"./generate_admin_key.sh\"\n```\n\n----------------------------------------\n\nTITLE: Example Function Execution Event in JSON\nDESCRIPTION: This snippet illustrates the JSON structure of a function execution event for a Convex query. It includes details such as execution time, function information, status, and usage metrics for database and storage operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/integrations/log-streams/log-streams.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"execution_time_ms\": 294,\n    \"function\": {\n      \"cached\": false,\n      \"path\": \"message:list\",\n      \"request_id\": \"892104e63bd39d9a\",\n      \"type\": \"query\"\n    },\n    \"status\": \"success\",\n    \"timestamp\": 1715973841548,\n    \"topic\": \"function_execution\",\n    \"usage\": {\n      \"database_read_bytes\": 1077,\n      \"database_write_bytes\": 0,\n      \"file_storage_read_bytes\": 0,\n      \"file_storage_write_bytes\": 0,\n      \"vector_storage_read_bytes\": 0,\n      \"vector_storage_write_bytes\": 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Application with TypeScript\nDESCRIPTION: Command to create a new Next.js application using the default TypeScript template.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/nextjs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-next-app@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Starting Svelte Development Server\nDESCRIPTION: Commands to start a development server for a Svelte project. It includes an option to open the app in a new browser tab.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/sveltekit/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Querying Last Document with Descending Order\nDESCRIPTION: Shows how to retrieve the last inserted document by changing the query order to descending.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes-and-query-perf.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst lastBook = await ctx.db.query(\"books\").order(\"desc\").first();\n```\n\n----------------------------------------\n\nTITLE: JSX Component Import Declarations\nDESCRIPTION: Import statements for React components and utilities used in the documentation page layout\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/home.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport TutorialGraphic from \"@site/static/img/tutorial-graphic.svg\";\nimport { QuickstartsList } from \"@site/src/QuickstartsList.tsx\";\nimport { LargeCardList } from \"@site/src/QuickstartsList.tsx\";\nimport { YouTubeList } from \"@site/src/YouTubeLink.tsx\";\nimport Link from \"@docusaurus/Link\";\n```\n\n----------------------------------------\n\nTITLE: Defining DatabaseWriter Interface in TypeScript\nDESCRIPTION: A deprecated interface for reading and writing data to a Convex database. Extends DatabaseReader with methods for inserting, updating, patching, and deleting documents.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// @public @deprecated (undocumented)\nexport interface DatabaseWriter<DataModel extends GenericDataModel> extends GenericDatabaseReader<DataModel> {\n    delete(id: Id<TableNamesInDataModel<DataModel>>): Promise<void>;\n    insert<TableName extends TableNamesInDataModel<DataModel>>(table: TableName, value: WithoutSystemFields<DocumentByName<DataModel, TableName>>): Promise<Id<TableName>>;\n    patch<TableName extends TableNamesInDataModel<DataModel>>(id: Id<TableName>, value: Partial<DocumentByName<DataModel, TableName>>): Promise<void>;\n    // Warning: (ae-forgotten-export) The symbol \"WithOptionalSystemFields\" needs to be exported by the entry point index.d.ts\n    replace<TableName extends TableNamesInDataModel<DataModel>>(id: Id<TableName>, value: WithOptionalSystemFields<DocumentByName<DataModel, TableName>>): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for TanStack Projects\nDESCRIPTION: Command to create a new directory called 'tanstack' for hosting TanStack projects.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/tanstack-start-clerk/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir tanstack\n```\n\n----------------------------------------\n\nTITLE: Defining Convex Query Function in JavaScript\nDESCRIPTION: Creates a JavaScript file with a query function that loads data from the Convex database. This function is exposed as an API endpoint named 'tasks:get'.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/python.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { query } from \"./_generated/server\";\n\nexport const get = query(async ({ db }) => {\n  return await db.query(\"tasks\").collect();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Client and Server Library\nDESCRIPTION: Installs the Convex package using npm, providing an interface for working with Convex from JavaScript.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/script-tag.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install convex\n```\n\n----------------------------------------\n\nTITLE: Creating React App with Vite (JavaScript)\nDESCRIPTION: Command to create a new React application using Vite with JavaScript template.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm create vite@latest my-app -- --template react\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex\nDESCRIPTION: Example of a query function that takes numeric and string arguments and retrieves documents from a database table. The function demonstrates argument validation, database querying, and returning results to the client.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/nextjs-pages-router/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up TanStack.com for Local Development\nDESCRIPTION: Commands to navigate to the TanStack.com directory, install dependencies, and run the development server.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/tanstack-start-clerk/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack.com\npnpm i\n# The app will run on https://localhost:3000 by default\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: One-time Deployment of Convex Functions\nDESCRIPTION: Command to deploy Convex functions once, specifying an environment file with the self-hosted backend configuration.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/fly/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex deploy --env-file <path to env file>\n```\n\n----------------------------------------\n\nTITLE: Creating SvelteKit App with Convex Integration\nDESCRIPTION: Command to create a new SvelteKit app using the Svelte 5 preview and TypeScript.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/svelte.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create svelte@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Importing Airbyte Records Request Schema\nDESCRIPTION: JSON schema for the request body when importing Airbyte records into Convex. Defines the structure for specifying tables with their schemas, primary keys for deduplication, and the actual data messages to be imported.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/http-api/index.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"tables\": {\n      \"<stream_name>\": {\n         \"primaryKey\": [[\"<field1>\"], [\"<field2>\", \"<nested_field>\"]], \n         \"jsonSchema\": // see https://json-schema.org/ for examples\n      }\n   },\n   \"messages\": [{\n      \"tableName\": \"<table_name>\",\n      \"data\": {} // JSON object conforming to the `json_schema` for that stream\n   }]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Production Convex Development\nDESCRIPTION: Command to run Convex development environment against production backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Deploying Convex Functions with Preview Run in Bash\nDESCRIPTION: This command deploys Convex functions, builds the frontend, and runs a specified function for preview deployments. It's used in the Netlify build process to set up initial data for preview environments.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/hosting/netlify.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex deploy --cmd 'npm run build' --preview-run 'functionName'\n```\n\n----------------------------------------\n\nTITLE: Installing Convex and Python Dependencies\nDESCRIPTION: Installs the Convex npm package, Python client library, and python-dotenv for environment variable management.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/python.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app && npm init -y && npm install convex && venv/bin/pip install convex python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint 8 Dependencies\nDESCRIPTION: Command to install required ESLint plugins for ESLint 8 configuration\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/eslint.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @typescript-eslint/eslint-plugin @convex-dev/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Custom Number Type Handling\nDESCRIPTION: Example of handling JavaScript number types in Kotlin with custom field mapping and type conversion.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/android/data-types.md#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable\ndata class BaseballTeam(\n    val name: String,\n    val uniformColors: List<String>,\n    @SerialName(\"wins\") private val internalWins: Double,\n    @SerialName(\"losses\") private val internalLosses: Double) {\n\n    // Expose the JavaScript number values as Ints.\n    val wins get() = internalWins.toInt()\n    val losses get() = internalLosses.toInt()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Session Query Hook in React Component\nDESCRIPTION: Implementation of useSessionQuery hook in React components to execute session-aware queries.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/sessions/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = useSessionQuery(api.myModule.myQuery);\n...\n```\n\n----------------------------------------\n\nTITLE: Starting Remix Production Server\nDESCRIPTION: Command to start the Remix application in production mode after building.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/remix/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Implementing Category Icon Component in React\nDESCRIPTION: This snippet defines a React component 'CategoryIcon' that renders different SVG icons based on the provided title prop. It's used to display visual indicators for different categories in the Zen of Convex guide.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/zen.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function CategoryIcon(props) {\n  switch (props.title) {\n    case \"Performance\":\n      return (\n        <svg\n          fill=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          aria-hidden=\"true\"\n          {...props}\n        >\n          <path\n            clipRule=\"evenodd\"\n            fillRule=\"evenodd\"\n            d=\"M14.615 1.595a.75.75 0 01.359.852L12.982 9.75h7.268a.75.75 0 01.548 1.262l-10.5 11.25a.75.75 0 01-1.272-.71l1.992-7.302H3.75a.75.75 0 01-.548-1.262l10.5-11.25a.75.75 0 01.913-.143z\"\n          />\n        </svg>\n      );\n    case \"Architecture\":\n      return (\n        <svg\n          fill=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          aria-hidden=\"true\"\n        >\n          <path d=\"M11.584 2.376a.75.75 0 01.832 0l9 6a.75.75 0 11-.832 1.248L12 3.901 3.416 9.624a.75.75 0 01-.832-1.248l9-6z\" />\n          <path\n            clipRule=\"evenodd\"\n            fillRule=\"evenodd\"\n            d=\"M20.25 10.332v9.918H21a.75.75 0 010 1.5H3a.75.75 0 010-1.5h.75v-9.918a.75.75 0 01.634-.74A49.109 49.109 0 0112 9c2.59 0 5.134.202 7.616.592a.75.75 0 01.634.74zm-7.5 2.418a.75.75 0 00-1.5 0v6.75a.75.75 0 001.5 0v-6.75zm3-.75a.75.75 0 01.75.75v6.75a.75.75 0 01-1.5 0v-6.75a.75.75 0 01.75-.75zM9 12.75a.75.75 0 00-1.5 0v6.75a.75.75 0 001.5 0v-6.75z\"\n          />\n          <path d=\"M12 7.875a1.125 1.125 0 100-2.25 1.125 1.125 0 000 2.25z\" />\n          //{\" \"}\n        </svg>\n      );\n    case \"Development workflow\":\n      return (\n        <svg\n          fill=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          aria-hidden=\"true\"\n          {...props}\n        >\n          <path\n            clipRule=\"evenodd\"\n            fillRule=\"evenodd\"\n            d=\"M2.25 6a3 3 0 013-3h13.5a3 3 0 013 3v12a3 3 0 01-3 3H5.25a3 3 0 01-3-3V6zm3.97.97a.75.75 0 011.06 0l2.25 2.25a.75.75 0 010 1.06l-2.25 2.25a.75.75 0 01-1.06-1.06l1.72-1.72-1.72-1.72a.75.75 0 010-1.06zm4.28 4.28a.75.75 0 000 1.5h3a.75.75 0 000-1.5h-3z\"\n          />\n        </svg>\n      );\n    default:\n      return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Remix Development Server\nDESCRIPTION: Use the npm run dev command to start the Remix development server and view the app at http://localhost:5173.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/remix.mdx#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining Document Type Utilities in TypeScript\nDESCRIPTION: Type utilities for accessing document types from table information. These help extract the correct document type based on table info or table name.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type DocumentByInfo<TableInfo extends GenericTableInfo> = TableInfo[\"document\"];\n\n// @public\nexport type DocumentByName<DataModel extends GenericDataModel, TableName extends TableNamesInDataModel<DataModel>> = DataModel[TableName][\"document\"];\n```\n\n----------------------------------------\n\nTITLE: Disabling Local Deployments\nDESCRIPTION: Command to disable local deployments for a Convex project. This is useful when switching back to cloud deployments or preparing for production deployment.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/cli/local-deployments-for-dev.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex disable-local-deployments\n```\n\n----------------------------------------\n\nTITLE: Starting Convex Development Server\nDESCRIPTION: Command to initialize and start the Convex development environment.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/rust.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Defining a Convex Mutation Function in TypeScript\nDESCRIPTION: Example of creating a mutation function that accepts string arguments. It demonstrates how to validate arguments, write to the database by inserting a new document, and return the created document.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-app-router-snippets/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Sample Data to Convex\nDESCRIPTION: Command to import sample data into the Convex tasks table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/nextjs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx convex import --table tasks sampleData.jsonl\n```\n\n----------------------------------------\n\nTITLE: Calculating User Activity Status Based on Timestamp\nDESCRIPTION: Code that processes presence data to determine which users are considered inactive (\"old\") based on their last update time compared to the current time.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-facepile/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nothersPresence.map((presence) => ({\n  ...presence,\n  old: presence.updated < now - OLD_MS,\n}));\n```\n\n----------------------------------------\n\nTITLE: Function Execution Record Example - JSON\nDESCRIPTION: Example of a function execution record log showing failure case for an HTTP action. Includes execution metrics and error details.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/integrations/log-streams/legacy-event-schema.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_topic\": \"_execution_record\",\n  \"_timestamp\": 1695066350531,\n  \"_functionType\": \"httpAction\",\n  \"_functionPath\": \"POST /sendImage\",\n  \"status\": \"failure\",\n  \"reason\": \"Unexpected Error: Some error message\\n\\n  at ....\",\n  \"executionTimeMs\": 73\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Start Push Request for Convex Projects\nDESCRIPTION: Command used in the isolate/build.rs script to simulate a push operation by generating a StartPushRequest for convex projects in the component tests.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex deploy --start-push-request\n```\n\n----------------------------------------\n\nTITLE: Linking WebAssembly Modules with JavaScript Imports\nDESCRIPTION: Shows how to provide JavaScript functions as imports when instantiating a WebAssembly module, demonstrating the linking process between JavaScript and WebAssembly.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/rust-wasm/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst imports = {\n  dep1: (a) => a + 1,\n  dep2: () => Date.now(),\n};\nconst instance = await WebAssembly.instantiate(module, imports);\ninstance.exports.foo(1, 2, 3);\n```\n\n----------------------------------------\n\nTITLE: Starting the React Native App\nDESCRIPTION: Start the React Native app and scan the QR code to view it on a mobile device.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react-native.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running the Convex Chat App with Clerk Authentication\nDESCRIPTION: Command to start the development server for the chat application. This will initiate the app but may require additional environment variable setup.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-clerk-webhooks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: ConvexError Data Payload Examples\nDESCRIPTION: Demonstrates different ways to create ConvexError instances with various data payloads, from simple strings to structured objects.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/error-handling/application-errors.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// error.data === \"My fancy error message\"\nthrow new ConvexError(\"My fancy error message\");\n\n// error.data === {message: \"My fancy error message\", code: 123, severity: \"high\"}\nthrow new ConvexError({\n  message: \"My fancy error message\",\n  code: 123,\n  severity: \"high\",\n});\n\n// error.data === {code: 123, severity: \"high\"}\nthrow new ConvexError({\n  code: 123,\n  severity: \"high\",\n});\n```\n\n----------------------------------------\n\nTITLE: Running Local Big Brain Test Command\nDESCRIPTION: Example command output showing how to test with a local big-brain instance, including environment variables and auth configuration.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nCONVEX_PROVISION_HOST=http://0.0.0.0:8050 npx convex dev --override-auth-url \"https://convexdev-test.us.auth0.com/\" --override-auth-client \"XXXXXXXXX\"\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun. The server will run on localhost:3000 by default.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-15-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables as Fly.io Secrets\nDESCRIPTION: Alternative method to set environment variables using Fly.io secrets for scenarios where the fly.toml file shouldn't be modified.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/fly/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nfly secrets set CONVEX_CLOUD_ORIGIN=\"<fly-backend-url>\" CONVEX_SITE_ORIGIN=\"<fly-backend-url>/http\"\n```\n\n----------------------------------------\n\nTITLE: Creating React App with Vite (TypeScript)\nDESCRIPTION: Command to create a new React application using Vite with TypeScript template.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create vite@latest my-app -- --template react-ts\n```\n\n----------------------------------------\n\nTITLE: Defining Field Type Utilities in TypeScript\nDESCRIPTION: Type utilities for working with field paths and extracting field types. These help maintain type safety when accessing nested fields in documents.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type FieldPaths<TableInfo extends GenericTableInfo> = TableInfo[\"fieldPaths\"];\n\n// @public\nexport type FieldTypeFromFieldPath<Document extends GenericDocument, FieldPath extends string> = FieldPath extends `${infer First}.${infer Second}` ? First extends keyof Document ? Document[First] extends GenericDocument ? FieldTypeFromFieldPath<Document[First], Second> : undefined : undefined : FieldPath extends keyof Document ? Document[FieldPath] : undefined;\n```\n\n----------------------------------------\n\nTITLE: Generating Debug Bundle\nDESCRIPTION: Command to generate a bundle for debugging purposes without pushing code.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/bundling.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex dev --once --debug-bundle-path /tmp/myBundle\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex that takes two arguments. It includes argument validation, database querying, and data processing.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tutorial/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Auth0 Environment Configuration\nDESCRIPTION: Environment variables configuration for Auth0 authentication, including domain and client ID settings\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/nextjs-pages-router/README.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nNEXT_PUBLIC_AUTH0_DOMAIN = \"<your domain>.us.auth0.com\"\nNEXT_PUBLIC_AUTH0_CLIENT_ID = \"<your client id>\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the TypeScript Convex Example App\nDESCRIPTION: Commands to install dependencies and start the development server for the TypeScript and Schemas Example App.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-modern/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Deploying Convex App with Preview Function\nDESCRIPTION: Vercel build command for deploying a Convex app with a preview function. This function is run only for preview deployments to set up initial data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/hosting/vercel.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex deploy --cmd 'npm run build' --preview-run 'functionName'\n```\n\n----------------------------------------\n\nTITLE: Importing Sample Data to Convex Database\nDESCRIPTION: Command to import sample data into the Convex 'tasks' table from a JSONL file.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/svelte.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx convex import --table tasks sampleData.jsonl\n```\n\n----------------------------------------\n\nTITLE: Setting Up Debug Logging for Convex Client in Rust\nDESCRIPTION: Instructions for configuring tracing_subscriber to enable debug logging for the Convex client, which can be activated through the RUST_LOG environment variable.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ntracing_subscriber::fmt()\n    .with_env_filter(tracing_subscriber::EnvFilter::from_default_env())\n    .init();\n```\n\n----------------------------------------\n\nTITLE: Resetting Expo Project\nDESCRIPTION: Reset the Expo project to get a fresh 'app' directory.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react-native.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run reset-project\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Convex HTTP Example App\nDESCRIPTION: Commands to install dependencies and start the development server for the HTTP action example application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/http/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing Data into Convex using Command Line\nDESCRIPTION: Basic command to initiate data import in Convex. Use --help flag to see all available options.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/import-export/import.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex import\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Function in Convex\nDESCRIPTION: An example of a Convex query function that takes two arguments, validates them using the Convex validation system, and retrieves data from the database. This function demonstrates how to access arguments and execute database queries.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/http/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Frontend React Component from Subpath\nDESCRIPTION: Example of how to import frontend code from a Convex component. Frontend components are typically published at a subpath of the main package.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/components/ratelimiter/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FrontendReactComponent } from \"my-convex-component/react\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Self-Hosted Convex\nDESCRIPTION: Environment variables that need to be added to a .env.local file in your Convex project to connect to a self-hosted backend. These variables specify the backend URL and admin key.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nCONVEX_SELF_HOSTED_URL='http://127.0.0.1:3210'\nCONVEX_SELF_HOSTED_ADMIN_KEY='<your admin key>'\n```\n\n----------------------------------------\n\nTITLE: Starting the React Application\nDESCRIPTION: Command to start the React development server.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/quickstart-react-cra.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Custom Scenario Workload Configuration\nDESCRIPTION: Example JSON configuration for defining custom workload scenarios in LoadGenerator, including function type and execution rate settings.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/load_generator/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"your_new_workload\",\n  \"scenarios\": [\n    {\n      \"name\": \"RunFunction\",\n      \"path\": \"<your-new-module>:<your-function-name>\",\n      \"fn_type\": \"mutation\",\n      \"rate\": 5\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Quickstarts List Component in JSX\nDESCRIPTION: This code snippet imports and renders a custom React component called QuickstartsList. The component is likely responsible for displaying a list of quickstart guides for different frontend technologies and languages that can be used with Convex backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstarts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<QuickstartsList />\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with Pages Router\nDESCRIPTION: Command to create a new Next.js application without the App Router, using JavaScript configuration.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/nextjs-pages-router/quickstart-nextjs-pages-router.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-next-app@latest my-app --no-app --js\n```\n\n----------------------------------------\n\nTITLE: Logging Out\nDESCRIPTION: Command to remove existing Convex credentials from the device\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/cli.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex logout\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the GIPHY Action Example App\nDESCRIPTION: Commands to install dependencies and start the development server for the GIPHY Action example app. After running these commands, the app will be available at localhost:3000.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/giphy-action/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Local Postgres Setup\nDESCRIPTION: Commands for setting up Postgres locally with Docker Compose.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\npsql postgres -c \"CREATE DATABASE convex_self_hosted\"\nexport POSTGRES_URL='postgresql://<your-username>@host.docker.internal:5432'\nexport DO_NOT_REQUIRE_SSL=1\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Installing Convex React Client Library\nDESCRIPTION: Command to install the Convex React client library using npm.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install convex\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Package\nDESCRIPTION: Adds the Convex package as a dependency to the Bun project\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/bun.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbun add convex\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint 9 for Custom Convex Directory\nDESCRIPTION: Configuration for eslint.config.js to use the Convex ESLint plugin with a custom Convex directory location in ESLint 9.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/@convex-dev/eslint-plugin/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport convexPlugin from \"@convex-dev/eslint-plugin\";\n\nconst recommendedConfig = convexPlugin.configs.recommended[0];\nconst recommendedRules = recommendedConfig.rules;\n\nexport default [\n  // Other configurations go here...\n\n  // Custom configuration with modified directory pattern\n  {\n    files: [\"**/myconvex/**/*.ts\"],\n    plugins: {\n      \"@convex-dev\": convexPlugin,\n    },\n    rules: recommendedRules,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Rendering Beta Feature Admonition in React JSX\nDESCRIPTION: This React component creates an admonition for beta features. It uses props to dynamically set the feature name and verb, and includes links for accessing beta features via Discord or email.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/_betaContactUsAdmonition.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Admonition type=\"caution\" title={`${props.feature} ${props.verb} in beta`}>\n  {props.feature} {props.verb} currently in an early access\n  [beta](/production/state/#beta-features). For access, contact us [on\n  Discord](https://convex.dev/community) or by email at\n  [support@convex.dev](mailto:support@convex.dev)!\n</Admonition>\n```\n\n----------------------------------------\n\nTITLE: Seeding Dev Deployments with Sample Data in Convex\nDESCRIPTION: Commands to seed development deployments with sample data, either using a full backup or importing a single table from JSONL/CSV.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/import-export/import.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# full backup - exported from prod or another dev deployment.\nnpx convex import seed_data.zip\n\n# Import single table from jsonl/csv\nnpx convex import --table <table name> data.jsonl\n```\n\n----------------------------------------\n\nTITLE: Running Auth0 Authentication Setup for Convex Chat App\nDESCRIPTION: Instructions for setting up Auth0 authentication with Convex for the chat application. Users need to follow the provided link to configure Auth0 and update client and server files.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Running the App\n\nBecause this app uses authentication, it requires a bit of an additional setup.\n\nFollow these instructions https://docs.convex.dev/auth/auth0 to set up Auth0\nwith Convex. You will have to update the client in `main.tsx` and the server in\n`auth.config.js`.\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Convex Package\nDESCRIPTION: Command to install the latest version of the Convex npm package, which is required to use the self-hosted backend with your Convex project.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm install convex@latest\n```\n\n----------------------------------------\n\nTITLE: Deploying Updated Fly.io Configuration\nDESCRIPTION: Command to deploy the updated Fly.io configuration with the new environment variables.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/fly/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Zen Tip Component in React\nDESCRIPTION: This snippet defines a React component 'ZenTip' that renders a tip with a title, icon, and content. It's used to display best practices and guidelines in the Zen of Convex guide.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/zen.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function ZenTip({ type, title, children }) {\n  return (\n    <div className={`zen-tip zen-${type}`}>\n      <h3>\n        <TipIcon type={type} /> {title}\n      </h3>\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Crons Class in TypeScript\nDESCRIPTION: A class for defining and managing scheduled cron jobs in Convex. Provides methods for different scheduling patterns such as interval, hourly, daily, weekly, and monthly jobs.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class Crons {\n    constructor();\n    // Warning: (ae-forgotten-export) The symbol \"CronString\" needs to be exported by the entry point index.d.ts\n    cron<FuncRef extends SchedulableFunctionReference>(cronIdentifier: string, cron: CronString, functionReference: FuncRef, ...args: OptionalRestArgs<FuncRef>): void;\n    // (undocumented)\n    crons: Record<string, CronJob>;\n    // Warning: (ae-forgotten-export) The symbol \"Daily\" needs to be exported by the entry point index.d.ts\n    daily<FuncRef extends SchedulableFunctionReference>(cronIdentifier: string, schedule: Daily, functionReference: FuncRef, ...args: OptionalRestArgs<FuncRef>): void;\n    // Warning: (ae-forgotten-export) The symbol \"Hourly\" needs to be exported by the entry point index.d.ts\n    hourly<FuncRef extends SchedulableFunctionReference>(cronIdentifier: string, schedule: Hourly, functionReference: FuncRef, ...args: OptionalRestArgs<FuncRef>): void;\n    // Warning: (ae-forgotten-export) The symbol \"Interval\" needs to be exported by the entry point index.d.ts\n    interval<FuncRef extends SchedulableFunctionReference>(cronIdentifier: string, schedule: Interval, functionReference: FuncRef, ...args: OptionalRestArgs<FuncRef>): void;\n    // (undocumented)\n    isCrons: true;\n    // Warning: (ae-forgotten-export) The symbol \"Monthly\" needs to be exported by the entry point index.d.ts\n    monthly<FuncRef extends SchedulableFunctionReference>(cronIdentifier: string, schedule: Monthly, functionReference: FuncRef, ...args: OptionalRestArgs<FuncRef>): void;\n    // Warning: (ae-forgotten-export) The symbol \"Weekly\" needs to be exported by the entry point index.d.ts\n    weekly<FuncRef extends SchedulableFunctionReference>(cronIdentifier: string, schedule: Weekly, functionReference: FuncRef, ...args: OptionalRestArgs<FuncRef>): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Literal Values in TypeScript\nDESCRIPTION: Example of defining a schema with literal values using v.literal() in Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/schemas.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndefineTable({\n  oneTwoOrThree: v.union(\n    v.literal(\"one\"),\n    v.literal(\"two\"),\n    v.literal(\"three\"),\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Record in Convex\nDESCRIPTION: Example of creating a Record type with string key-value pairs\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/_convexValues.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\"a\": \"1\", \"b\": \"2\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in fly.toml\nDESCRIPTION: Configures the required environment variables in the fly.toml configuration file for the Convex backend, including temporary directory path and origins for the Convex API endpoints.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/fly/README.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[env]\nTMPDIR = '/convex/data/tmp'\nCONVEX_CLOUD_ORIGIN = '<fly-backend-url>'\nCONVEX_SITE_ORIGIN = '<fly-backend-url>/http'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating useQuery Hook Usage in TypeScript\nDESCRIPTION: This snippet shows various ways of using the useQuery hook, highlighting the challenges with type preservation for variadic arguments.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/middleware/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet x = useQuery(\"listMessages\");\nlet x = useQuery(\"listMessages\", {}); // allowed\nlet x = useQuery(\"listMessages\", undefined); // allowed\nlet x = useQuery(\"listMessagesForChannel\", { channel: 17 });\nlet x = useQuery(\"listMessagesForChannel\"); // type error\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex\nDESCRIPTION: A template for creating a query function that takes two arguments and reads from the database. The function includes argument validation using Convex validators and demonstrates how to collect documents from a database table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/http/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js TypeScript Project\nDESCRIPTION: Command to bootstrap a new Next.js project with TypeScript support using create-next-app\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/nextjs-pages-router/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest --ts\n```\n\n----------------------------------------\n\nTITLE: Package Installation - Convex and React Query Dependencies\nDESCRIPTION: Command to install required Convex and React Query packages for the project.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/tanstack-start.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install convex @convex-dev/react-query @tanstack/react-router-with-query @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Helpers Package\nDESCRIPTION: Install the convex-helpers package using npm to access the CLI command for generating the API file.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/multiple-repos.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install convex-helpers\n```\n\n----------------------------------------\n\nTITLE: Linking Vercel Project for Dashboard Development\nDESCRIPTION: This snippet shows the process of linking the local dashboard instance to the Vercel project using the Vercel CLI. It includes logging in with GitHub authentication and selecting the appropriate project scope.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/dashboard/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx vercel link\nVercel CLI 30.2.3\n> > No existing credentials found. Please log in:\n? Log in to Vercel github\n> Success! GitHub authentication complete for nicolas@convex.dev\n? Set up \"~/Documents/convex-alt/npm-packages/dashboard\"? [Y/n] y\n? Which scope should contain your project? Convex\n? Found project \"convex-dev/dashboard\". Link to it? [Y/n] y\n✅  Linked to convex-dev/dashboard (created .vercel)\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to initialize a new Convex project and start the development server\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/cli.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Running Convex Backend Binary Directly\nDESCRIPTION: Command to run the Convex backend binary directly with an instance name and secret. This allows you to start the backend without using Docker.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n./convex-local-backend --instance-name convex-self-hosted --instance-secret 4361726e697461732c206c69746572616c6c79206d65616e696e6720226c6974\n```\n\n----------------------------------------\n\nTITLE: Importing Sample Data to Convex\nDESCRIPTION: Command to import sample data into the Convex tasks table from a JSONL file.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/nextjs-pages-router/quickstart-nextjs-pages-router.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx convex import --table tasks sampleData.jsonl\n```\n\n----------------------------------------\n\nTITLE: Initializing Bun Project\nDESCRIPTION: Creates a new directory and initializes a Bun project with default settings\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/bun.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir my-project && cd my-project && bun init -y\n```\n\n----------------------------------------\n\nTITLE: Creating a Convex Project with CLI\nDESCRIPTION: Command to create a new Convex project using the Convex CLI. This initializes two deployments: production and development.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/project-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/cron-jobs/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Exploring Fly.io Volume Contents\nDESCRIPTION: Commands to connect to the Fly.io instance via SSH and list the contents of the data volume directory.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/fly/README.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh console\nls\n```\n\n----------------------------------------\n\nTITLE: Rendering Beta Feature Warning Admonition in JSX\nDESCRIPTION: This JSX code snippet defines an Admonition component that displays a warning message for beta features. It uses props to customize the feature name and verb, and includes a link to beta feature documentation and a Discord community for feedback.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/_betaAdmonition.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Admonition type=\"caution\" title={`${props.feature} ${props.verb} in beta`}>\n  {props.feature} {props.verb} currently a [beta\n  feature](/production/state/#beta-features). If you have feedback or feature\n  requests, [let us know on Discord](https://convex.dev/community)!\n</Admonition>\n```\n\n----------------------------------------\n\nTITLE: Creating Array in Convex\nDESCRIPTION: Example of creating an array with mixed types\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/_convexValues.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n[1, 3.2, \"abc\"]\n```\n\n----------------------------------------\n\nTITLE: Defining ArgsArray Type in TypeScript\nDESCRIPTION: A TypeScript type representing function argument arrays. It can either be an array with one argument (OneArgArray) or an array with no arguments (NoArgsArray).\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-forgotten-export) The symbol \"NoArgsArray\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport type ArgsArray = OneArgArray | NoArgsArray;\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint 9 for Convex\nDESCRIPTION: Configuration for eslint.config.js to use the Convex ESLint plugin with ESLint 9. It imports the plugin and spreads its recommended configuration.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/@convex-dev/eslint-plugin/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport convexPlugin from \"@convex-dev/eslint-plugin\";\n\nexport default [\n  // Other configurations\n  ...convexPlugin.configs.recommended,\n];\n```\n\n----------------------------------------\n\nTITLE: Disabling Retention Testing with yield:convexYields Function\nDESCRIPTION: Instructions for disabling the retention testing process by ensuring a specific row exists in the yield table with doYouYield set to true.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/retention-tester/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTo turn this off: Ensure there is a single row in the `yield` table with\n`doYouYield` set to `true`. You can do this by running the `yield:convexYields`\nfunction.\n```\n\n----------------------------------------\n\nTITLE: Running Local Backend with Components\nDESCRIPTION: Command to start a local backend server with components functionality enabled\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/components-poc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njust run-backend\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for ESLint 8\nDESCRIPTION: Command to install the necessary dependencies for using the Convex ESLint plugin with ESLint 8.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/@convex-dev/eslint-plugin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @typescript-eslint/eslint-plugin @convex-dev/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Starting Fivetran Destination Connector (Default Port)\nDESCRIPTION: Command to start the Fivetran destination connector using default port 50052. Shows the expected output indicating successful startup.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/fivetran_destination/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ./convex_fivetran_destination\n{\"level\":\"INFO\",\"message\":\"Starting the destination on 0.0.0.0:50052\",\"message-origin\":\"sdk_destination\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing Convex Development Environment\nDESCRIPTION: Command to start the Convex development environment and sync functions with cloud deployment.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/nodejs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Running Vue 3 Development Server with Hot-Reload\nDESCRIPTION: This command starts the development server for the Vue 3 project, enabling hot-reload for a smooth development experience.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/vue/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Convex ESLint\nDESCRIPTION: Configuration for next.config.ts to include the Convex directory in ESLint checks for Next.js projects.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/@convex-dev/eslint-plugin/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst nextConfig: NextConfig = {\n  /* other options here */\n\n  eslint: {\n    dirs: [\"pages\", \"app\", \"components\", \"lib\", \"src\", \"convex\"],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Console Log Event Example - JSON\nDESCRIPTION: Example of a console log event structure showing the format for query function logs using the console API. Includes system fields and message payload.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/integrations/log-streams/legacy-event-schema.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_topic\": \"_console\",\n  \"_timestamp\": 1695066350531,\n  \"_functionType\": \"query\",\n  \"_functionPath\": \"myDir/myFile\",\n  \"_functionCached\": true,\n  \"message\": \"[LOG] 'My log message'\"\n}\n```\n\n----------------------------------------\n\nTITLE: Data Import - Adding Sample Data to Convex Database\nDESCRIPTION: Command to import sample data into the Convex database tasks table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/tanstack-start.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex import --table tasks sampleData.jsonl\n```\n\n----------------------------------------\n\nTITLE: Running Bun Script\nDESCRIPTION: Executes the TypeScript script to query and display tasks from Convex\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/bun.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nbun index.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Custom Infrastructure\nDESCRIPTION: Environment variables to set in a .env file beside the docker-compose.yml when self-hosting on custom infrastructure. These variables configure the URLs for the Convex API, HTTP actions, and dashboard.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n# URL of the Convex API as accessed by the client/frontend.\nCONVEX_CLOUD_ORIGIN='https://api.my-domain.com'\n# URL of Convex HTTP actions as accessed by the client/frontend.\nCONVEX_SITE_ORIGIN='https://my-domain.com'\n# URL of the Convex API as accessed by the dashboard (browser).\nNEXT_PUBLIC_DEPLOYMENT_URL='https://api.my-domain.com'\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Test Scripts\nDESCRIPTION: Package.json configuration for various test commands including run, debug, and coverage options\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/testing/convex-test.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"test\": \"vitest\",\n  \"test:once\": \"vitest run\",\n  \"test:debug\": \"vitest --inspect-brk --no-file-parallelism\",\n  \"test:coverage\": \"vitest run --coverage --coverage.reporter=text\"\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown\nDESCRIPTION: Detailed changelog entries documenting changes across multiple versions of the Convex Backend Rust library, including feature additions, dependency updates, and bug fixes.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/convex/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Upcoming\n\n- Bump rust-version minimum from 1.71.1 to 1.80.1\n\n# 0.9.0\n\n- Add `ConvexClientBuilder` pattern for constructing `ConvexClient`\n- Add support for `on_state_change` for handling reconnects.\n- Bump rust-version minimum from 1.65.0 to 1.71.1\n- Update `url` dependency.\n\n# 0.8.1\n\nRemove native-tls-vendored dependency for tokio-tungstenite. Rely on requested\nfeatures instead.\n\n# 0.8.0\n\n- Support for passing through a client_id to ConvexClient\n- Dependency upgrades\n\n# 0.7.0\n\n- Several dependency upgrades\n\n# 0.6.0\n\n- Remove support for Set and Map Convex types. These types are deprecated.\n- Add comprehensive support for ConvexError with `data` payload as part of the\n  `FunctionResult` enum.\n- Better support for emitting loglines\n\n# 0.5.0\n\n- Prelim support for ConvexError, encoded into an anyhow::Error. Eventual plan\n  is to expose a separate catchable type, but just getting something out\n  quickly. PRs accepted!\n\n# 0.4.0\n\n- Expose an alternate cleaner JSON export format on Value. The clean format is\n  lossy in some cases (eg both integers and strings are encoded as JSON\n  strings).\n- Expose native-tls-vendored feature\n\n# 0.3.1\n\n- Fix compilation with `--features=testing`\n- Minor syntactic changes to quickstart\n\n# 0.3.0\n\n- Remove `Value::Id` since document IDs are `Value::String`s for Convex\n  functions starting from NPM version 0.17\n- Minor improvements to convex_chat_client example\n- Minor improvements in convex_sync_types\n\n# 0.2.0\n\n- BUGFIX: Client occasionally used to get stuck in a hot loop after network\n  disconnect.\n- Tweak backoff params for better performance across network disconnect.\n- Minor improvements to convex_chat_client example\n- Minor fix to running tests\n- Bump tokio-tungstenite to 0.18\n- Minor improvements in convex_sync_types\n\n# 0.1.2\n\nYanked and re-released as 0.2.0\n\n# 0.1.1\n\n- Fix race between mutation result and dropping a subscription.\n- Minor logging/error message improvements.\n\n# 0.1.0\n\n- Initial release.\n- Support for queries, subscriptions, mutations, actions\n```\n\n----------------------------------------\n\nTITLE: Basic Query with Take Limit in TypeScript\nDESCRIPTION: Demonstrates a simple query that limits the result set to 5 documents.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/filters.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst tasks = await ctx.db.query(\"tasks\").take(5);\n```\n\n----------------------------------------\n\nTITLE: Running Convex Dashboard Locally with Docker\nDESCRIPTION: Docker command to run the Convex dashboard locally, connecting to a remote backend. Requires specifying the backend URL as an environment variable and exposing port 6791.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/railway/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -e 'NEXT_PUBLIC_DEPLOYMENT_URL=<backend-url>' -p '6791:6791' 'ghcr.io/get-convex/convex-dashboard:latest'\n```\n\n----------------------------------------\n\nTITLE: Defining Cursor Type in TypeScript\nDESCRIPTION: A TypeScript type alias representing a pagination cursor in Convex, used for paginating through query results.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type Cursor = string;\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex (TypeScript)\nDESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments. It shows the structure of a query function including argument validation and database interaction.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/with-schema/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Sharded Counter Component via NPM\nDESCRIPTION: Command to install the Sharded Counter component package from npm registry.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/components/using.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @convex-dev/sharded-counter\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest Environment\nDESCRIPTION: Vitest configuration setup to match Convex runtime environment and handle dependencies\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/testing/convex-test.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"vitest/config\";\n\nexport default defineConfig({\n  test: {\n    environment: \"edge-runtime\",\n    server: { deps: { inline: [\"convex-test\"] } },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Convex Backend for React Native Testing\nDESCRIPTION: Command to run the Convex backend from the monorepo root for React Native testing.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/react-native/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njust run-backend\n```\n\n----------------------------------------\n\nTITLE: Running Convex Dashboard Locally with Docker\nDESCRIPTION: Docker command to run the Convex dashboard container locally, connecting it to the remote Fly.io-hosted backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/fly/README.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -e 'NEXT_PUBLIC_DEPLOYMENT_URL=<fly-backend-url>' -p '6791:6791' 'ghcr.io/get-convex/convex-dashboard:latest'\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Package\nDESCRIPTION: Shell commands to navigate to the app directory and install the Convex client library.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/nextjs-pages-router/quickstart-nextjs-pages-router.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd my-app && npm install convex\n```\n\n----------------------------------------\n\nTITLE: Querying Convex API using Python\nDESCRIPTION: Example of making a POST request to Convex query API endpoint using Python requests library to execute a messages:list function.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/http-api/index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nurl = \"https://acoustic-panther-728.convex.cloud/api/query\"\nheaders = {\"accept\": \"application/json\"}\nbody = {\"path\": \"messages:list\", \"args\": {}, \"format\": \"json\"}\n\nresponse = requests.post(url, headers=headers, json=body)\n```\n\n----------------------------------------\n\nTITLE: Restoring Deployment from Backup in Convex\nDESCRIPTION: Command to programmatically restore a production deployment from a backup ZIP file, replacing existing data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/import-export/import.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex import --prod --replace backup.zip\n```\n\n----------------------------------------\n\nTITLE: Importing Sample Data to Convex Database\nDESCRIPTION: Command to import the sample data into a 'tasks' table in the Convex database. This populates the database with initial data for the application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/swift.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex import --table tasks sampleData.jsonl\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Script\nDESCRIPTION: Command to execute the Node.js script that queries the Convex database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/nodejs.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnode script.js\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Clients in Bun\nDESCRIPTION: Demonstrates how to use both ConvexHttpClient for point-in-time operations and ConvexClient for subscriptions in Bun. Shows initialization, querying, subscription handling, and mutation execution with proper timing using Bun.sleep().\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/javascript/bun.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ConvexHttpClient, ConvexClient } from \"convex/browser\";\nimport { api } from \"./convex/_generated/api.js\";\n\n// HTTP client\nconst httpClient = new ConvexHttpClient(process.env.CONVEX_URL);\nhttpClient.query(api.messages.list).then((messages) => {\n  console.log(messages);\n});\n\n// Subscription client\nconst client = new ConvexClient(process.env.CONVEX_URL);\nconst unsubscribe = client.onUpdate(api.messages.list, {}, (messages) =>\n  console.log(messages),\n);\nawait Bun.sleep(1000);\nclient.mutate(api.messages.send, {}, { body: \"hello!\", author: \"me\" });\nawait Bun.sleep(1000);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Component Testing in Convex Backend\nDESCRIPTION: Command to update project dependencies using Rush after adding a new test project to the component tests structure.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njust rush update\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose Configuration for Self-Hosting\nDESCRIPTION: Command to download the docker-compose.yml file needed for self-hosting Convex on your own infrastructure. This file contains the configuration for the Convex backend and dashboard services.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/get-convex/convex-backend/main/self-hosted/docker/docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Client in Frontend App\nDESCRIPTION: Commands to navigate to the frontend application directory and install the latest version of the Convex client library.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/fly/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncd <your-frontend-app-directory>\nnpm install convex@latest\n```\n\n----------------------------------------\n\nTITLE: Creating a New Project for Dashboard Testing\nDESCRIPTION: These commands navigate to the tutorial demo directory and start a new Convex project for testing with the dashboard.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/dashboard/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ../demos/tutorial\njust convex-bb dev\n```\n\n----------------------------------------\n\nTITLE: Starting Convex MCP Server with NPX\nDESCRIPTION: Command to start the Convex MCP server using NPX. This is typically added to the MCP server's configuration.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/ai/convex-mcp-server.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx -y convex@latest mcp start\n```\n\n----------------------------------------\n\nTITLE: Starting Convex Fivetran Connector (Default Port)\nDESCRIPTION: Command to start the Fivetran connector using default port 50051.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/fivetran_source/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ./convex_fivetran_source\nStarting the connector on [::]:50051\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Convex Backend Project\nDESCRIPTION: Instructions for installing project dependencies using npm instead of Rush. This approach is intended to more closely resemble a typical developer workflow.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nThese projects are not in rush.json to better approximate the way developers\\nwould use them. Just `npm install` them.\n```\n\n----------------------------------------\n\nTITLE: Setup and Import Commands for Convex Database\nDESCRIPTION: Series of commands to set up the project environment, update dependencies, start Convex development server, and run the Python import script.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/text-importer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n1. poetry install\n2. just rush update\n3. npx convex dev --once\n4. poetry run python main.py <path_to_jsonl>\n```\n\n----------------------------------------\n\nTITLE: Instantiating WebAssembly Modules in JavaScript\nDESCRIPTION: Demonstrates two methods for loading and instantiating WebAssembly modules: a simple approach using fetch and arrayBuffer, and a streaming approach recommended for browsers.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/rust-wasm/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// simple, not streaming, not encouraged in browsers\nconst resp = await fetch(\"simple.wasm\");\nconst bytes = await resp.arrayBuffer();\nconst module = WebAssembly.compile(bytes))\nconst instance = await WebAssembly.instantiate(module, imports)\ninstance.exports.foo(1, 2, 3);\n\n// fancier, recommended in browsers\nconst resp = await fetch(\"simple.wasm\");\nconst instance = WebAssembly.instantiateStreaming(resp, imports);\ninstance.exports.foo(1, 2, 3);\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Fivetran Source Connector\nDESCRIPTION: Commands to clone the repository and build the Fivetran source connector using Cargo. Requires Git and Cargo (preferably installed via rustup) as prerequisites.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/fivetran_source/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/get-convex/convex-backend.git\ncd convex-backend\ncargo build --release -p convex_fivetran_source\n```\n\n----------------------------------------\n\nTITLE: Installing Test Dependencies with NPM\nDESCRIPTION: Commands to install required testing dependencies including Vitest, convex-test, and edge-runtime/vm\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/testing/convex-test.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev convex-test vitest @edge-runtime/vm\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex Example App\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex argument validation example application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/args-validation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running Demo Project with Local Backend\nDESCRIPTION: These commands navigate to the demo project directory, install dependencies, and start the Convex development server. The 'just convex dev' command is used to run the CLI with appropriate flags for the local backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/BUILD.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd npm-packages/demos/tutorial\nnpm i\njust convex dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres with Neon\nDESCRIPTION: Commands for setting up a Postgres database on Neon and configuring the connection string for the Convex backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nexport DATABASE_CONNECTION='<connection string>'\npsql $DATABASE_CONNECTION -c \"CREATE DATABASE convex_self_hosted\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Tip Icon Component in React\nDESCRIPTION: This snippet defines a React component 'TipIcon' that renders different SVG icons based on the provided type prop. It's used to display visual indicators for different types of tips in the Zen of Convex guide.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/zen.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function TipIcon({ type }) {\n  switch (type) {\n    case \"do\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 24 24\"\n          fill=\"currentColor\"\n          className=\"w-6 h-6\"\n        >\n          <path\n            fillRule=\"evenodd\"\n            d=\"M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zm13.36-1.814a.75.75 0 10-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 00-1.06 1.06l2.25 2.25a.75.75 0 001.14-.094l3.75-5.25z\"\n            clipRule=\"evenodd\"\n          />\n        </svg>\n      );\n    case \"do-not\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 24 24\"\n          fill=\"currentColor\"\n          className=\"w-6 h-6\"\n        >\n          <path\n            fillRule=\"evenodd\"\n            d=\"M9.401 3.003c1.155-2 4.043-2 5.197 0l7.355 12.748c1.154 2-.29 4.5-2.599 4.5H4.645c-2.309 0-3.752-2.5-2.598-4.5L9.4 3.003zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z\"\n            clipRule=\"evenodd\"\n          />\n        </svg>\n      );\n    default:\n      return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Convex Development Server\nDESCRIPTION: Command to start a Convex development deployment. This initializes the Convex backend for local development and testing.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/swift.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Version history from 0.6.0 to 0.2.0 documenting feature additions, API changes, dependency updates, and bug fixes for the convex-backend project. Includes changes to Rust nightly version, gzip support, sync behavior, and API endpoint usage.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/fivetran_source/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Upcoming\n\n# 0.6.0\n\n- Update rust nightly version in .rust-toolchain\n- Remove deprecated set/map support\n- Add gzip support to connector\n\n# 0.5.0\n\n- Emit a TRUNCATE op before the first write to any given table (in case it's a\n  resync)\n- Skip emitting an initial sync snapshot before the first page.\n\n# 0.4.0\n\n- Revert the `_convex_cursor` changes.\n- Few updates to loglines\n- docs updates\n\n# 0.3.0\n\n- Support a `_convex_cursor` table with a single column `cursor` which holds the\n  `document_deltas` cursor representing the most recent sync.\n- Add documentation to docs/\n\n# 0.2.0\n\n- Bump `convex` dep to 0.5.0\n- Use /test_streaming_export_connection and /get_tables_and_columns endpoints\n  rather than json_schemas json_schemas has stricter requirements around nested\n  schemas than what fivetran requires.\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for Internet Permission\nDESCRIPTION: Adds internet permission to the Android manifest file to enable network communication with Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/android.mdx#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\">\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    <application>\n        <!-- ... existing application contents -->\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Configuring Convex MCP Server in Windsurf Settings\nDESCRIPTION: This JSON configuration adds the Convex Model Context Protocol (MCP) server to Windsurf. It specifies the command and arguments needed to start the Convex MCP server using npx.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/ai/using-windsurf.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"convex\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"convex@latest\", \"mcp\", \"start\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Example App with npm Commands\nDESCRIPTION: Terminal commands for installing dependencies and starting the development server for the presence facepile example application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-facepile/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Cleaning Big Brain Database for Dashboard Reset\nDESCRIPTION: This command cleans the big brain database, resetting it to an empty state with no login.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/dashboard/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njust bb-clean-db\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Shows how to create a mutation function that modifies database data. The function accepts string arguments and demonstrates database insertion operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/react-native/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Shows how to use a Convex mutation function within a React component using the useMutation hook. The example demonstrates both fire-and-forget and promise-based approaches to handling mutation results.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/sveltekit/src/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex System Tables Demo\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex system tables example application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/system-tables/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: PlanetScale MySQL Configuration\nDESCRIPTION: Commands for connecting to a MySQL database on PlanetScale.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nexport MYSQL_URL=mysql://<your-username>:<your-password>@aws.connect.psdb.cloud\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex Chat Application\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex chat application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/3-ai/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Convex Docs Project\nDESCRIPTION: These commands run tests and build the project, checking for errors like broken links that aren't caught during development.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm run test\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building Convex Dashboard Docker Image\nDESCRIPTION: This command builds the Docker image for the Convex dashboard using the specified Dockerfile. It tags the image as 'convex-dashboard'.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/docker-build/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t convex-dashboard -f self-hosted/docker-build/Dockerfile.dashboard .\n```\n\n----------------------------------------\n\nTITLE: Deploying Convex Dashboard to Fly.io with URL in Config\nDESCRIPTION: Commands to navigate to the dashboard directory and launch a Fly.io application for the dashboard with the backend URL in the configuration.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/fly/README.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncd dashboard\nfly launch -e NEXT_PUBLIC_DEPLOYMENT_URL=\"<fly-backend-url>\"\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server\nDESCRIPTION: Command to start the development server for the authentication example app\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-clerk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex Vector Search App\nDESCRIPTION: Commands to install dependencies and start the development server for the vector search application. Requires npm package manager.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/vector-search/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Convex Development Environment\nDESCRIPTION: Command to start Convex development environment and create necessary project structure.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/quickstart-react-cra.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React\nDESCRIPTION: Demonstrates how to use a Convex mutation function in a React component, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/system-udfs/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex + Next.js SSR Demo\nDESCRIPTION: These commands install the necessary dependencies and start the development server for the Convex + Next.js SSR demo application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/nextjs-app-router/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using a Mutation Function in a React Component (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use a Convex mutation function within a React component. It shows two ways to call the mutation: fire-and-forget and handling the result with a promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-facepile/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing WebAssembly as a Module Object in JavaScript\nDESCRIPTION: Shows an alternative approach where importing a .wasm file returns a WebAssembly.Module object, which must be manually instantiated. This is the current behavior in some environments like Cloudflare Workers.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/rust-wasm/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport module from \"./foo.wasm\";\nconst instance = WebAssembly.instantiate(module);\ninstance.exports.bar();\n```\n\n----------------------------------------\n\nTITLE: Running Convex Backend Commands\nDESCRIPTION: Collection of just commands for running and deploying the Convex backend service locally and on AWS Lambda\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/node-executor/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njust run-backend\n```\n\nLANGUAGE: bash\nCODE:\n```\njust convex deploy\n```\n\nLANGUAGE: bash\nCODE:\n```\njust convex run\n```\n\nLANGUAGE: bash\nCODE:\n```\njust run-backend-aws-wasteland\n```\n\n----------------------------------------\n\nTITLE: Installing Fivetran Destination Connector\nDESCRIPTION: Commands to clone the repository and build the Fivetran destination connector using Cargo. Requires Git and Cargo (preferably installed via rustup) as prerequisites.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/fivetran_destination/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/get-convex/convex-backend.git\ncd convex-backend\ncargo build --release -p convex_fivetran_destination\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex Chat Application\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex chat application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/1-smileys/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Presence App\nDESCRIPTION: Command-line instructions for installing dependencies and running the application in development mode.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-typing-indicator/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Svelte App with Convex Integration\nDESCRIPTION: Command to start the Svelte development server with Convex integration.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/svelte.mdx#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Dependencies for Self-Hosted Convex Dashboard\nDESCRIPTION: Commands for installing dependencies and building the project. This includes installing packages with Rush and building project dependencies specifically targeting the dashboard-self-hosted package.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/dashboard-self-hosted/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\njust rush install\n\n# Build the project's dependencies\njust rush build -T dashboard-self-hosted\n```\n\n----------------------------------------\n\nTITLE: Running Railway SSH Commands for Exploring Files\nDESCRIPTION: Commands to connect to the Railway deployment via SSH and list contents for exploring the data folder where SQLite database and files are stored.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/railway/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nrailway ssh\nls\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint 9 Dependencies\nDESCRIPTION: Command to install Convex ESLint plugin for ESLint 9 configuration\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/eslint.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @convex-dev/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Convex Pagination Example App\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex pagination example application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/pagination/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Convex Development Environment\nDESCRIPTION: Command to start Convex development environment and create necessary project structure.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/vue.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex Scheduling Demo\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex scheduling example application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/scheduling/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Convex Development Server\nDESCRIPTION: Command to run the Convex development server against the local backend, with a note about building dependencies if needed\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/components-poc/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njust convex dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments and reads from the database. Shows argument validation and database querying patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/retention-tester/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    console.log(args.first, args.second);\n\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation of Multiple runQuery Calls (TypeScript)\nDESCRIPTION: This snippet demonstrates an incorrect implementation with multiple sequential runQuery calls in an action. This approach may lead to inconsistent results.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getTeamMembers = action(\n  async ({ runQuery }, { teamId }: { teamId: Id<\"teams\"> }) => {\n    const team = await runQuery(api.teams.get, { teamId });\n    const users = await runQuery(api.users.list);\n    return { team, users };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex\nDESCRIPTION: Defines a Convex mutation function that takes two string arguments, inserts a document into a database, and returns the newly created document. This demonstrates database write operations and return values from mutations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nodejs/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Alternative Dependency Versions in Rush\nDESCRIPTION: This snippet shows how to configure Rush to allow multiple versions of a dependency by adding less common versions to the allowedAlternativeVersions in the common-versions.json file.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/dep-upgrade-notes.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nWe can use multiple versions by adding the less common one to\nallowedAlternativeVersions in\nnpm-packages/common/config/rush/common-versions.json\n```\n\n----------------------------------------\n\nTITLE: Deploying Convex Dashboard to Fly.io with URL as Secret\nDESCRIPTION: Alternative commands to deploy the dashboard to Fly.io and set the backend URL as a secret instead of in the configuration file.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/fly/README.md#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nfly launch\nfly secrets set NEXT_PUBLIC_DEPLOYMENT_URL=\"<fly-backend-url>\"\n```\n\n----------------------------------------\n\nTITLE: Running Component Test Function\nDESCRIPTION: Command to execute a demo function for testing components functionality\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/components-poc/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njust convex run messages:componentTest\n```\n\n----------------------------------------\n\nTITLE: Starting Fivetran Destination Connector (Custom Port)\nDESCRIPTION: Command to start the Fivetran destination connector with a custom port specified using the --port parameter. Shows how to override the default port configuration.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/fivetran_destination/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ ./convex_fivetran_destination --port 1337\n{\"level\":\"INFO\",\"message\":\"Starting the destination on 0.0.0.0:1337\",\"message-origin\":\"sdk_destination\"}\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests to Convex Endpoints with curl\nDESCRIPTION: Example curl commands for interacting with Convex HTTP endpoints. It shows how to make a GET request to retrieve messages and a POST request to create a new message.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/http/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport DEPLOYMENT_NAME=\"tall-sheep-123\"\ncurl \"https://$DEPLOYMENT_NAME.convex.site/getMessagesByAuthor?authorNumber=123\"\ncurl -d '{ \"author\": \"User 123\", \"body\": \"Hello world\" }' \\\n    -H 'content-type: application/json' \"https://$DEPLOYMENT_NAME.convex.site/postMessage\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex TypeScript App\nDESCRIPTION: Commands to install dependencies and start the development server for a Convex TypeScript application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/react-query/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting Up Convex Dev Deployment\nDESCRIPTION: Command to initiate Convex development deployment setup.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React Component (TypeScript)\nDESCRIPTION: Demonstrates how to use the previously defined mutation function in a React component using the useMutation hook. It shows both fire-and-forget usage and handling the result of the mutation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/giphy-action/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex TypeScript Example App\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex TypeScript and Schemas example app.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/typescript/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting the React Native Convex App\nDESCRIPTION: Commands for setting up and launching the React Native example application. First installs all dependencies with npm install, then starts the application using npm start.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/react-native/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Convex ESLint Plugin for ESLint 9\nDESCRIPTION: Command to install the Convex ESLint plugin for use with ESLint 9.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/@convex-dev/eslint-plugin/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @convex-dev/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing Convex CLI\nDESCRIPTION: Command to install the Convex CLI package via npm\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/cli.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install convex\n```\n\n----------------------------------------\n\nTITLE: Importing Component Client from Root Package\nDESCRIPTION: Example of how to import a component client from the root package of a Convex component. Components typically expose a client class that wraps communication with the component for use in the Convex environment.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/components/ratelimiter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyComponentClient } from \"my-convex-component\";\n```\n\n----------------------------------------\n\nTITLE: Running Individual Test Files with Just Command\nDESCRIPTION: Commands for executing specific test files using the 'just' command runner. Demonstrates both standard and conductor-debug test execution modes. Test files must use the .test.ts or .test.tsx extension.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/js-integration-tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njust test someFile.test.ts\njust _test conductor-debug someFile.test.ts\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex Chat Application\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex tutorial chat application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/convex-tour-chat-tutorial/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Convex Fivetran Connector (Custom Port)\nDESCRIPTION: Command to start the Fivetran connector with a custom port specified using the --port parameter.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/fivetran_source/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ ./convex_fivetran_source --port 1337\nStarting the connector on [::]:1337\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Dall-E Example App\nDESCRIPTION: Commands for installing dependencies and starting the development server for the Dall-E Storage & Action Example App. This requires setting up an OpenAI API key as an environment variable in the Convex dashboard.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/dall-e-storage-action/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Dependencies\nDESCRIPTION: Commands to install necessary NPM and Cargo dependencies including Convex client, Tokio runtime, and dotenvy.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/rust.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm init -y && npm install convex && cargo add convex tokio dotenvy\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Dependencies\nDESCRIPTION: Command to install the Convex package in the Next.js application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/nextjs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd my-app && npm install convex\n```\n\n----------------------------------------\n\nTITLE: Setting Up Convex Project - Shell Commands\nDESCRIPTION: Initial setup commands for cloning the tutorial repository and installing dependencies\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/tutorial/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/get-convex/convex-tutorial.git\ncd convex-tutorial\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Demo Frontend with Vite\nDESCRIPTION: This command starts the Vite development server for the demo frontend application. It's used in conjunction with the local backend to run the complete demo setup.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/BUILD.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev:frontend\n```\n\n----------------------------------------\n\nTITLE: Using tsc --stripInternal for TypeScript Declaration Files\nDESCRIPTION: A compilation command using TypeScript compiler (tsc) with the --stripInternal flag to generate declaration files without internal declarations. This is needed as a workaround because api-extractor's .d.ts rollups don't support declaration maps.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsc --stripInternal\n```\n\n----------------------------------------\n\nTITLE: Implementing a Convex Mutation to Add Messages\nDESCRIPTION: This code creates a mutation function that adds a new message to the database. It validates input parameters and inserts a record with the current timestamp and the provided text and author information.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-old/tmp.txt#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const send = mutation({\n  args: { text: v.string(), author: v.string() },\n  handler: async ({ db }, { text, author }) => {\n    const message = { text, author, creationTime: Date.now() };\n    await db.insert(\"messages\", message);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Continuously Deploying Convex Functions for Development\nDESCRIPTION: Command to start the Convex development mode for continuous deployment of functions as they are edited.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/fly/README.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Building React Frontend Continuously\nDESCRIPTION: Command to continuously build the React entrypoint, enabling live updates during development.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex-ai-chat/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Pulling Environment Configuration for Dashboard\nDESCRIPTION: This command pulls the environment configuration from Vercel for the dashboard project.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/dashboard/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run pullEnv\n```\n\n----------------------------------------\n\nTITLE: Local Dashboard Setup\nDESCRIPTION: Commands for building and running the Convex dashboard locally.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\njust rush install\nnpm run build\nNEXT_PUBLIC_DEPLOYMENT_URL=\"<your-backend-url>\" npm run start\n```\n\n----------------------------------------\n\nTITLE: Running the Rust Application\nDESCRIPTION: Command to execute the Rust application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/rust.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Shows how to create a mutation function for modifying database data. Includes argument validation, database insertion, and return value handling.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-auth/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating New React Application with Create React App\nDESCRIPTION: Command to initialize a new React application using create-react-app.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/quickstart-react-cra.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-react-app my-app\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Protobuf Structs in Rust\nDESCRIPTION: Example showing how to import and use a generated protobuf struct from a module. The code demonstrates importing a 'Bar' struct that was defined in 'foo.proto' file.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/pb/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse pb::foo::Bar;\n```\n\n----------------------------------------\n\nTITLE: Required Kotlin Imports\nDESCRIPTION: Lists all necessary imports for the Android application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/android.mdx#2025-04-21_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.activity.enableEdgeToEdge\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport dev.convex.android.ConvexClient\nimport kotlinx.serialization.Serializable\n```\n\n----------------------------------------\n\nTITLE: Local MySQL Setup\nDESCRIPTION: Commands for setting up MySQL locally with Docker Compose.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nmysql -e \"CREATE DATABASE convex_self_hosted;\"\nexport MYSQL_URL=mysql://<your-username>@host.docker.internal:3306\nexport DO_NOT_REQUIRE_SSL=1\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Convex Backend Crates\nDESCRIPTION: Command for running tests for a specific crate within the Convex backend. The command uses cargo test with the -p flag to specify which package to test.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/convex/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo test -p {crate}\n```\n\n----------------------------------------\n\nTITLE: Starting the React App\nDESCRIPTION: Command to start the React application in development mode.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Exporting anyApi Constant in TypeScript\nDESCRIPTION: A constant representing any valid Convex API. This provides a way to work with Convex APIs in a type-safe manner without knowing the specific structure.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const anyApi: AnyApi;\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Client Library\nDESCRIPTION: Navigate to the app directory and install the Convex client library using npm.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react-native.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app && npm install convex\n```\n\n----------------------------------------\n\nTITLE: Generating Instance Secret for Direct Binary Setup\nDESCRIPTION: Command to generate a new random instance secret for the Convex backend when running the binary directly. This secret is used to secure the backend instance.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -p keybroker --bin generate_secret\n```\n\n----------------------------------------\n\nTITLE: Creating Document References in Convex\nDESCRIPTION: Shows how to create relationships between documents by storing references using document IDs.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/document-ids.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait ctx.db.insert(\"books\", {\n  title,\n  ownerId: user._id,\n});\n```\n\n----------------------------------------\n\nTITLE: Running the Example Chat App with npm\nDESCRIPTION: Command to start the development server for the example chat application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/clerk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. The function shows how to query the database and process the results using Convex's query API.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/react-native/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Linking Local Convex Version for React Native Testing\nDESCRIPTION: Command to link the local version of Convex in the monorepo to a React Native demo app for testing purposes.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/react-native/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 link_with_local.py <absolute path to monorepo root> --demo-relative-path <relative path to your app from the monorepo root>\n```\n\n----------------------------------------\n\nTITLE: Creating String Value in Convex\nDESCRIPTION: Example of declaring a string value\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/_convexValues.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"abc\"\n```\n\n----------------------------------------\n\nTITLE: Running CORS Anywhere Proxy for Production Testing\nDESCRIPTION: This command runs the CORS Anywhere proxy locally, which is necessary for the local dashboard to communicate with the production big brain and backends.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/dashboard/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run corsAnywhere\n```\n\n----------------------------------------\n\nTITLE: Importing Sample Data to Convex\nDESCRIPTION: Command to import sample data into the Convex tasks table from a JSONL file.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/vue.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx convex import --table tasks sampleData.jsonl\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Convex Crons Example App\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex crons example application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/cron-jobs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Adding New Scenarios in TypeScript\nDESCRIPTION: Steps to add a new scenario to the ScenarioRunner system. This includes updating enums, implementing a new scenario class, and modifying the LoadGenerator.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/scenario-runner/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Name the scenario and add it to `ScenarioName` and the `main` control flow in\n   `index.ts`.\n2. Write a class that implements the `IScenario` interface and extends the\n   `Scenario` class and drop the class in the `scenarios` folder. Run this new\n   scenario from the `main` control flow.\n3. In LoadGenerator, add a new scenario to the `Scenario` struct.\n```\n\n----------------------------------------\n\nTITLE: Defining Expression Class in TypeScript\nDESCRIPTION: An abstract class representing a database expression in Convex. Used for building type-safe query expressions that can be evaluated against the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-forgotten-export) The symbol \"Value\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport abstract class Expression<T extends Value | undefined> {\n}\n```\n\n----------------------------------------\n\nTITLE: Building Svelte Project for Production\nDESCRIPTION: Command to create a production version of the Svelte app. It also mentions how to preview the production build.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/sveltekit/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Logging Clerk Authentication Token in React (TSX)\nDESCRIPTION: This code snippet shows how to log the authentication token from Clerk in a React component. It uses the useAuth hook from Clerk to get the token with the 'convex' template.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/debug.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// import { useAuth } from \"@clerk/nextjs\"; // for Next.js\nimport { useAuth } from \"@clerk/clerk-react\";\n\nconst { getToken } = useAuth();\nconsole.log(getToken({ template: \"convex\" }));\n```\n\n----------------------------------------\n\nTITLE: Describing Server Entry Point Structure in Markdown\nDESCRIPTION: This markdown snippet outlines the organization of the server code, explaining the interface-impl pattern used and the rationale behind it. It describes how interfaces in the main directory are strictly typed, while implementations in the impl/ subdirectory are more loosely typed for simplicity.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/src/server/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Server\n\nThis is the entry point for all of the code for use within query and mutation\nfunctions.\n\nThis directory uses an \"interface-impl\" pattern where:\n\n- The main directory has all interfaces to define the types of the various\n  abstractions. These are parameterized of the developers `DataModel` type and\n  carefully written to only allow valid usage.\n- The `impl/` subdirectory has implementations of all of these interfaces. These\n  implementations are sloppier about their types and **not parameterized over\n  `DataModel`**. This simplifies their implementation and only gives up a bit of\n  type safety. The `DataModel` type is built to help developers write correct\n  code, not to check that our internal structures are correct.\n```\n\n----------------------------------------\n\nTITLE: Running the Convex Relational Data Modeling Example App\nDESCRIPTION: This snippet provides the commands to install dependencies and start the development server for the Convex relational data modeling example app.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/relational-data-modeling/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment for Production Dashboard Testing\nDESCRIPTION: This snippet shows the environment variables that need to be set in .env.local for running the local dashboard against production. Some values need to be copied from the production Vercel environment variables.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/dashboard/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nNEXT_PUBLIC_BIG_BRAIN_URL=http://localhost:8080/https://api.convex.dev\nAUTH0_CLIENT_ID=nANKpAFe4scUPxW77869QHVKYAgrPwy7\nAUTH0_ISSUER_BASE_URL=https://auth.convex.dev\nDISABLE_BIG_BRAIN_SSR=1\n\nAUTH0_SECRET={copy from production env vars}\nAUTH0_CLIENT_SECRET={copy from production env vars}\n```\n\n----------------------------------------\n\nTITLE: Starting Remix Development Server with Vite\nDESCRIPTION: Command to run the Vite development server for local development of the Remix application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/remix/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Interface in TypeScript\nDESCRIPTION: Interface for authentication operations in Convex. Provides methods to retrieve user identity information for the current request context.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface Auth {\n    getUserIdentity(): Promise<UserIdentity | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscription with Convex Client in Rust\nDESCRIPTION: Example showing how to create a ConvexClient instance, subscribe to changes on a counter value, and process updates as they arrive.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet mut client = ConvexClient::new(DEPLOYMENT_URL).await?;\nlet mut subscription = client.subscribe(\"getCounter\", vec![]).await?;\nwhile let Some(new_val) = subscription.next().await {\n    println!(\"Counter updated to {new_val:?}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating React Native App with Expo CLI\nDESCRIPTION: Use the Expo CLI to create a new React Native app named 'my-app'.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react-native.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-expo-app my-app\n```\n\n----------------------------------------\n\nTITLE: Updating User Presence Data with React JSX\nDESCRIPTION: Code snippet showing how to update a user's emoji presence information when they select a new emoji from a dropdown. The updateMyPresence function merges the new data with existing presence data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-facepile/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<select\n    defaultValue={myPresence.emoji}\n    onChange={e => updateMyPresence({ emoji: e.target.value })}\n>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Application\nDESCRIPTION: Commands for installing dependencies and starting the development server.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/sessions/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Building Tailwind CSS Continuously\nDESCRIPTION: Command to continuously build the Tailwind CSS entrypoint for styling the application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex-ai-chat/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch-css-docs\n```\n\n----------------------------------------\n\nTITLE: Importing Sample Data to Convex\nDESCRIPTION: Command to import sample data into the Convex tasks table.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/rust.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex import --table tasks sampleData.jsonl\n```\n\n----------------------------------------\n\nTITLE: Running LoadGenerator CLI Help Command\nDESCRIPTION: Command to display LoadGenerator usage instructions from the root Convex directory.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/load_generator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p load_generator --bin load-generator -- --help\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex\nDESCRIPTION: This snippet demonstrates how to create a query function that accepts two arguments (a number and a string). The function shows how to validate arguments, read from the database, and return data to the client. It includes the complete structure with imports and exports.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/tanstack-start-clerk/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Database Operations\nDESCRIPTION: Example of direct database operations using t.run method\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/testing/convex-test.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convexTest } from \"convex-test\";\nimport { expect, test } from \"vitest\";\n\ntest(\"functions\", async () => {\n  const t = convexTest();\n  const firstTask = await t.run(async (ctx) => {\n    await ctx.db.insert(\"tasks\", { text: \"Eat breakfast\" });\n    return await ctx.db.query(\"tasks\").first();\n  });\n  expect(firstTask).toMatchObject({ text: \"Eat breakfast\" });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Convex Query Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a query function that takes two arguments, validates them, reads from the database, and returns data. It shows the structure including argument validation and the handler implementation for reading data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/vector-search/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Server\nDESCRIPTION: Command to run the documentation server after configuring environment variables. This allows for testing changes with live reloading.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex-ai-chat/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njust run-docs\n```\n\n----------------------------------------\n\nTITLE: Rendering Convex Pro Plan Feature Admonition in JSX\nDESCRIPTION: This code snippet creates an Admonition component to display information about Convex Pro plan features. It uses props to dynamically insert the feature name and verb, and includes links for learning more about plans and upgrading.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/_proFeatureUpsell.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Admonition\n  type=\"info\"\n  title={`${props.feature} ${props.verb} a Convex Pro plan.`}\n>\n  {props.feature} {props.verb} a Convex Pro plan. [Learn\n  more](https://convex.dev/pricing) about our plans or\n  [upgrade](https://dashboard.convex.dev/team/settings/billing).\n</Admonition>\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Test Workflow in YAML\nDESCRIPTION: GitHub Actions workflow configuration that sets up automated testing on pull requests and pushes. The workflow runs on Ubuntu, sets up Node.js, installs dependencies, and executes the test suite.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/testing/ci.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Run Tests\n\non: [pull_request, push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n      - run: npm ci\n      - run: npm run test\n```\n\n----------------------------------------\n\nTITLE: Configuring MainActivity\nDESCRIPTION: Updates MainActivity to initialize Convex client and set up the UI.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/android.mdx#2025-04-21_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    enableEdgeToEdge()\n    setContent {\n        ConvexQuickstartTheme {\n            Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->\n                Tasks(\n                    client = ConvexClient($YOUR_CONVEX_URL),\n                    modifier = Modifier.padding(innerPadding)\n                )\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Fly.io Environment Secret\nDESCRIPTION: Command to set the Postgres URL as a secret in Fly.io environment.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nfly secrets set POSTGRES_URL=$POSTGRES_URL\n```\n\n----------------------------------------\n\nTITLE: Creating New Cargo Project\nDESCRIPTION: Terminal commands to create a new Rust project using Cargo.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/rust.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo new my_app\ncd my_app\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function that takes two arguments and fetches data from the database. The function validates input arguments using Convex's validation system and returns documents from the database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/test-data/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Primary Key Indexes Ready Response Format\nDESCRIPTION: JSON response format for the primary_key_indexes_ready endpoint indicating index readiness status.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/http-api/index.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"indexesReady\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Postgres URL\nDESCRIPTION: Command to extract the base Postgres URL from the connection string, removing database name and query parameters.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nexport POSTGRES_URL=$(echo $DATABASE_CONNECTION | sed -E 's/\\/[^/]+(\\?.*)?$//')\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Zod Example App\nDESCRIPTION: Commands to install dependencies and start the development server for the Zod validation example application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/zod-validation-ts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Add Primary Key Indexes Request Format\nDESCRIPTION: JSON request format for adding primary key indexes to tables, supporting nested field paths.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/http-api/index.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"indexes\": {\n    \"<table_name>\": [[\"<field1>\"], [\"<field2>\", \"<nested_field>\"]]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Control for Public Functions in Convex\nDESCRIPTION: Shows how to implement access control checks for public functions in Convex. This practice ensures that only authorized users can access certain functionalities.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const setTeamOwner = mutation(\n  async ({ db, auth }, { teamId, newOwnerId }) => {\n    const identity = await auth.getUserIdentity();\n    if (!identity) {\n      throw new Error(\"Unauthenticated call to mutation\");\n    }\n    const userId = identity.subject;\n\n    const team = await db.get(teamId);\n    if (!team) {\n      throw new Error(\"Team not found\");\n    }\n    if (team.ownerId !== userId) {\n      throw new Error(\"Only the team owner can change ownership\");\n    }\n\n    await db.patch(teamId, { ownerId: newOwnerId });\n  },\n  {\n    args: {\n      teamId: v.id(\"teams\"),\n      newOwnerId: v.id(\"users\"),\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Building WASM Tests for V8 Runtime in Bash\nDESCRIPTION: Commands for setting up and building the WASM test files. First runs 'go mod tidy' to ensure dependencies are correct, then executes a Python build script to compile the tests.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/udf-tests/wasm/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo mod tidy\npython build.py\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server - Shell Command\nDESCRIPTION: Command to start the Convex development server\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/tutorial/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Rendering Typing Indicators for Other Users\nDESCRIPTION: JSX code that filters and displays typing indicators for other active users. It filters out users who aren't typing or haven't updated their status within a certain time period, then renders a list item for each typing user.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-typing-indicator/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n(othersPresence ?? [])\n  .filter(({ data, updated }) => data.typing && Date.now() - updated < OLD_MS)\n  .map(({ user }) => (\n    <li key={user}>\n      <span>{user}</span>\n      <span>\n        <i>typing...</i>\n      </span>\n    </li>\n  ));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Direct Convex Function Call (TypeScript)\nDESCRIPTION: This snippet illustrates a pattern of directly calling a Convex function, which is now deprecated and generates a warning. It shows how a mutation function 'foo' is called directly within another mutation 'bar', which can lead to issues with validation, isolation, and atomicity.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const foo = mutation(...);\n\nexport const bar = mutation({\n  args: v.any(),\n  returns: v.any(),\n  handler: (ctx, args) => {\n    const result = await foo();\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying Convex App with Custom URL Environment Variable\nDESCRIPTION: Command to deploy a Convex app with a custom environment variable name for the Convex URL. This is used when the default variable name cannot be inferred.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/hosting/vercel.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex deploy --cmd-url-env-var-name CUSTOM_CONVEX_URL --cmd 'npm run build'\n```\n\n----------------------------------------\n\nTITLE: S3 Storage Configuration\nDESCRIPTION: Environment variables setup for configuring S3 storage with AWS or compatible services.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nexport AWS_REGION=\"your-region\"\nexport AWS_ACCESS_KEY_ID=\"your-access-key-id\"\nexport AWS_SECRET_ACCESS_KEY=\"your-secret-access-key\"\nexport S3_STORAGE_EXPORTS_BUCKET=\"convex-snapshot-exports\"\nexport S3_STORAGE_SNAPSHOT_IMPORTS_BUCKET=\"convex-snapshot-imports\"\nexport S3_STORAGE_MODULES_BUCKET=\"convex-modules\"\nexport S3_STORAGE_FILES_BUCKET=\"convex-user-files\"\nexport S3_STORAGE_SEARCH_BUCKET=\"convex-search-indexes\"\n```\n\n----------------------------------------\n\nTITLE: Cloning TanStack Repositories\nDESCRIPTION: Commands to navigate to the 'tanstack' directory and clone the TanStack.com and TanStack Form repositories.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/tanstack-start-clerk/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack\ngit clone git@github.com:TanStack/tanstack.com.git\ngit clone git@github.com:TanStack/form.git\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript API File for Convex\nDESCRIPTION: Run the convex-helpers CLI command to generate an api.ts file based on your Convex deployment configuration.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/multiple-repos.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx convex-helpers ts-api-spec\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Custom Domain\nDESCRIPTION: Environment variables to set in a .env.local file in your Convex project when connecting to a self-hosted backend on a custom domain. These variables specify the backend URL and admin key.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nCONVEX_SELF_HOSTED_URL='https://api.my-domain.com'\nCONVEX_SELF_HOSTED_ADMIN_KEY='<your admin key>'\n```\n\n----------------------------------------\n\nTITLE: Installing Alpha Release of Convex for React Native\nDESCRIPTION: Command to install an alpha release of Convex for testing in a React Native app.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/react-native/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install convex@alpha\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Custom Errors Example App\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex custom errors example app. This will set up the necessary environment to test the custom error handling functionality.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/custom-errors/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Boundary in React with Convex Provider\nDESCRIPTION: This snippet demonstrates how to wrap the entire application in an error boundary component, which catches errors thrown in child components and Convex query functions. It uses StrictMode and ConvexProvider to set up the Convex client.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/error-handling/error-handling.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<StrictMode>\n  <ErrorBoundary>\n    <ConvexProvider client={convex}>\n      <App />\n    </ConvexProvider>\n  </ErrorBoundary>\n</StrictMode>,\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Dependencies\nDESCRIPTION: Installing required Convex packages for Vue integration including the core library and Vue-specific bindings.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/vue.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd my-vue-app && npm install @convex-vue/core @vueuse/core convex\n```\n\n----------------------------------------\n\nTITLE: Generating Admin Key with Instance Secret\nDESCRIPTION: Command to generate an admin key using the instance name and instance secret. This admin key is required for administrative operations on the backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -p keybroker --bin generate_key -- convex-self-hosted 4361726e697461732c206c69746572616c6c79206d65616e696e6720226c6974\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Shows how to use the mutation function in a React component with the useMutation hook. The example demonstrates both fire-and-forget usage and handling the mutation result with a Promise.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/test-data/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Expo App\nDESCRIPTION: Command to launch the Expo development server and start the application for development.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/expo/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo start\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation Function in React\nDESCRIPTION: Shows how to use a Convex mutation function within a React component using the useMutation hook, including both fire-and-forget and promise-based usage patterns.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-clerk/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Convex Query Function\nDESCRIPTION: JavaScript query function to fetch tasks from the Convex database.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/rust.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { query } from \"./_generated/server\";\n\nexport const get = query(async (ctx) => {\n  return await ctx.db.query(\"tasks\").collect();\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Admin Key for Convex Dashboard\nDESCRIPTION: Command to generate an admin key for accessing the Convex dashboard and CLI. This key is required for administrative operations like pushing code to the backend.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose exec backend ./generate_admin_key.sh\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using npm, yarn, or pnpm. This allows developers to run the application locally for development and testing purposes.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running Backend Development Server\nDESCRIPTION: Command to start the backend development server against a development deployment. Uses team:convex project:ai-bot to set up environment variables, particularly OPENAI_API_KEY.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex-ai-chat/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Vue Development Server\nDESCRIPTION: Command to start the Vue development server on localhost:5173.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/vue.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Environment Variables in Convex Function Exports\nDESCRIPTION: Demonstrates an incorrect way of using environment variables to condition Convex function exports. This approach will not work as expected because function exports are determined at deployment time.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/environment-variables.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// THIS WILL NOT WORK!\nexport const myFunc = process.env.DEBUG ? mutation(...) : internalMutation(...);\n```\n\n----------------------------------------\n\nTITLE: Defining FileMetadata Type in TypeScript\nDESCRIPTION: A TypeScript type representing metadata for files stored in Convex storage. Contains information about the file's storage ID, hash, size, and content type.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type FileMetadata = {\n    storageId: StorageId;\n    sha256: string;\n    size: number;\n    contentType: string | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Running Local Convex Backend from Source\nDESCRIPTION: This command builds and runs the local Convex backend using the source code in the repository. It utilizes the 'just' command runner to execute the appropriate build and run scripts.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/BUILD.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\njust run-local-backend\n```\n\n----------------------------------------\n\nTITLE: Running Client Tests for convex-js\nDESCRIPTION: Command to run client tests for the convex-js project. Note that this only runs local tests as integration tests, end-to-end tests, and proptests are located in separate repositories.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Creating Python Script to Fetch Data from Convex\nDESCRIPTION: Implements a Python script that creates a ConvexClient and uses it to fetch data from the 'tasks:get' API endpoint.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/python.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom dotenv import load_dotenv\nfrom convex import ConvexClient\n\nload_dotenv()\nDEPLOYMENT_URL = os.environ[\"CONVEX_URL\"]\n\ndef main():\n    client = ConvexClient(DEPLOYMENT_URL)\n    tasks = client.query(\"tasks:get\")\n    print(tasks)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Proposed Source Phase Import for WebAssembly Modules in JavaScript\nDESCRIPTION: Demonstrates a new proposal for explicitly importing WebAssembly as a module object using the 'source' keyword, which would disambiguate from standard import syntax.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/rust-wasm/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport source FooModule from \"./foo.wasm\";\nFooModule instanceof WebAssembly.Module; // true\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack.com in Development Mode\nDESCRIPTION: Commands to install dependencies and start the development server for the TanStack.com project.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/tanstack-start-clerk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Deploying Convex Functions with Custom Environment Variable in Bash\nDESCRIPTION: This command deploys Convex functions and builds the frontend, using a custom environment variable name for the Convex URL. It's used in the Netlify build process to ensure the frontend is built with the correct Convex URL.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/hosting/netlify.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex deploy --cmd-url-env-var-name CUSTOM_CONVEX_URL --cmd 'npm run build'\n```\n\n----------------------------------------\n\nTITLE: Fetching Convex Query in Next.js Server Component\nDESCRIPTION: Illustrates how to use fetchQuery in a Next.js Server Component to load non-reactive data from Convex.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/nextjs/nextjs-server-rendering.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetchQuery } from \"convex/nextjs\";\nimport { api } from \"../../convex/_generated/api\";\n\nexport default async function StaticTasks() {\n  const tasks = await fetchQuery(api.tasks.get);\n  return (\n    <ul>\n      {tasks.map((task) => (\n        <li key={task._id}>{task.text}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Mutation Errors with Try-Catch in Async JavaScript\nDESCRIPTION: This example demonstrates how to use a try-catch block in an async function to handle errors in Convex mutations. It provides an alternative approach to error handling for async operations.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/error-handling/error-handling.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  await sendMessage(newMessageText);\n} catch (error) {\n  // Do something with `error` here\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query Functions in React Components\nDESCRIPTION: Example of how to consume a Convex query function within a React component using the useQuery hook. It shows how to pass arguments to the query function when making the request.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/waitlist/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Running Elle Tests with Visualization in Convex Backend\nDESCRIPTION: This command sets environment variables for Elle testing, executes the test with full error backtrace, and converts the resulting dot file to SVG format. It specifies the output path for the Elle dot file, enables full Rust backtraces, sets the log level for the simulation module to error, and uses the dot utility to generate an SVG visualization.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/simulation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nELLE_DOT_PATH=/tmp/elle.dot RUST_BACKTRACE=1 RUST_LOG=simulation=error cargo test test_elle -- --nocapture; dot -Tsvg /tmp/elle.dot > /tmp/elle.svg\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Expo App\nDESCRIPTION: Command to install all required dependencies for the Expo application using npm.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/expo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting up Convex with TanStack Query in React\nDESCRIPTION: This code snippet shows how to set up Convex with TanStack Query in a React application. It creates a ConvexQueryClient and connects it to the TanStack Query QueryClient.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/tanstack-query.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Setup from \"!!raw-loader!@site/../demos/react-query/src/main.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Convex Development Setup - Initialize Development Environment\nDESCRIPTION: Command to set up a Convex development deployment and create necessary project structure.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/tanstack-start.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultFunctionArgs Type in TypeScript\nDESCRIPTION: A TypeScript type alias representing default function arguments as a record of string keys to unknown values. Used when no specific argument type is provided.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type DefaultFunctionArgs = Record<string, unknown>;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Object Structure Example\nDESCRIPTION: Example of a JavaScript object structure returned from a Convex query function representing baseball team data.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/android/data-types.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tname: \"Guardians\",\n\tuniformColors: [\"blue\", \"white\", \"red\"],\n\twins: 80n,\n\tlosses: 60n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting the Convex Chat Application\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex chat application with file storage capabilities.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/file-storage-with-http/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Backend with npm\nDESCRIPTION: Bash commands to initialize a new npm project and install the Convex client and server library. This sets up the backend infrastructure for the Convex application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/swift.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\nnpm install convex\n```\n\n----------------------------------------\n\nTITLE: Returning Typed Error Values in TypeScript\nDESCRIPTION: Example showing how to return typed error values in TypeScript for handling error scenarios, specifically for a createUser mutation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/error-handling/application-errors.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nId<\"users\"> | { error: \"EMAIL_ADDRESS_IN_USE\" };\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component - TypeScript\nDESCRIPTION: Example showing how to consume a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/search/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Module Import Fix for External Packages\nDESCRIPTION: Example showing how to properly import external CommonJS modules.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/bundling.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ old\nimport { Foo } from \"some-module\";\n\n// ✅ new\nimport SomeModule from \"some-module\";\nconst { Foo } = SomeModule;\n```\n\n----------------------------------------\n\nTITLE: Building Convex Backend Docker Image\nDESCRIPTION: This command builds the Docker image for the Convex self-hosted backend using the specified Dockerfile. It tags the image as 'convex-backend'.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/docker-build/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t convex-backend -f self-hosted/docker-build/Dockerfile.backend .\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Client and Server Libraries\nDESCRIPTION: Command to install the required Convex packages for the Svelte project.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/svelte.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd my-app && npm install convex convex-svelte\n```\n\n----------------------------------------\n\nTITLE: Launching Convex Backend on Fly.io\nDESCRIPTION: Commands to navigate to the backend directory and launch a new Fly.io application using the existing configuration.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/fly/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd backend\nfly launch\n```\n\n----------------------------------------\n\nTITLE: Starting Convex Development Server\nDESCRIPTION: Command to start the Convex development CLI to register and generate component code.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/components/using.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex Search Example\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex search example application\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/search/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Remix Site with NPX\nDESCRIPTION: Use the npx command to create a new Remix application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/remix.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-remix@latest my-remix-app\n```\n\n----------------------------------------\n\nTITLE: External Packages Configuration (Specific)\nDESCRIPTION: JSON configuration to mark specific packages as external in Node actions.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/bundling.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"node\": {\n    \"externalPackages\": [\"aws-sdk\", \"sharp\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Storage Migration Commands\nDESCRIPTION: Commands for exporting and importing data when migrating between storage providers.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/self-hosted/README.md#2025-04-21_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex export --path <path-to-export-file>\nnpx convex import --replace-all <path-to-export-file>\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation Function in Convex\nDESCRIPTION: This snippet illustrates how to create a mutation function in Convex. It includes argument validation, database insertion, and optional return of the inserted data. The function takes two string arguments.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/3-ai/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using npm, yarn, or pnpm. This allows developers to run the project locally for development and testing.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir-js/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Convex Document ID Mapping\nDESCRIPTION: Example of mapping Convex document ID field to a Kotlin-friendly name using SerialName annotation.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/android/data-types.md#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable\ndata class ConvexDocument(@SerialName(\"_id\") val id: String)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex Chat Application\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex chat application.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/2-likes/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining ActionCtx Interface in TypeScript\nDESCRIPTION: A deprecated interface extending GenericActionCtx to provide context for Convex action functions. This interface provides access to services and utilities needed within action functions.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/api-extractor-configs/reports/server.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public @deprecated\nexport interface ActionCtx<DataModel extends GenericDataModel = GenericDataModel> extends GenericActionCtx<DataModel> {\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex Chat Application\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex chat application\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/0-start/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Resetting Expo Project\nDESCRIPTION: Command to reset the project by moving starter code to app-example directory and creating a blank app directory for fresh development.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/expo/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run reset-project\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Convex Document Structure in JSON\nDESCRIPTION: Example showing how Convex documents are structured with nested data types including strings, numbers, arrays and objects. This illustrates the format before transformation by the Fivetran connector.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/crates/fivetran_source/docs/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"street\"  : \"Main St.\"\n\"city\"     : \"New York\"\n\"country\"  : \"US\"\n\"phone\"    : \"(555) 123-5555\"\n\"zip code\" : 12345\n\"people\"   : [\"John\", \"Jane\", \"Adam\"]\n\"car\"      : {\"make\" : \"Honda\",\n              \"year\" : 2014,\n              \"type\" : \"AWD\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Convex URLs\nDESCRIPTION: Example of how to set up the VITE_CONVEX_SITE_URL environment variable by modifying the domain from 'cloud' to 'site' in the Convex URL.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/file-storage-with-http/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nVITE_CONVEX_URL=\"https://happy-animal-123.convex.cloud\"\nVITE_CONVEX_SITE_URL=\"https://happy-animal-123.convex.site\"\n```\n\n----------------------------------------\n\nTITLE: Audit Trail Log Example - JSON\nDESCRIPTION: Example of an audit log event for configuration push operation. Shows tracking of module changes in the system.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/integrations/log-streams/legacy-event-schema.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_topic\": \"_audit_log\",\n  \"_timestamp\": 1695066350531,\n  \"action\": \"push_config\",\n  \"actionMetadata\": {\n    \"modules\": {\n      \"added\": [\"ffmpeg.js\", \"fetch.js\", \"test.js\"],\n      \"removed\": [\"removed.js\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating a Basic Fund Transfer Transaction in Pseudocode\nDESCRIPTION: This snippet illustrates a simple fund transfer transaction between two accounts, Alice and Bob. It shows the read and write operations involved in transferring $5 from Alice to Bob.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/advanced/occ.md#2025-04-21_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\n$14 <- READ Alice\n$11 <- READ Bob\nWRITE Alice $9\nWRITE Bob $16\n```\n\n----------------------------------------\n\nTITLE: Example Audit Log Event in JSON\nDESCRIPTION: This snippet shows the JSON structure of an audit log event for a configuration push in Convex. It includes the topic, timestamp, audit log action, and metadata about the event.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production/integrations/log-streams/log-streams.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"audit_log\",\n  \"timestamp\": 1714421999886,\n  \"audit_log_action\": \"push_config\",\n  \"audit_log_metadata\": \"{\\\"auth\\\":{\\\"added\\\":[],\\\"removed\\\":[]},\\\"crons\\\":{\\\"added\\\":[],\\\"deleted\\\":[],\\\"updated\\\":[]},...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers (npm, yarn, pnpm, or bun). The server will run on localhost:3000 by default.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Vue 3 Project\nDESCRIPTION: This command installs all the necessary dependencies for the Vue 3 project as specified in the package.json file.\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/vue/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Replace Tables Request Format\nDESCRIPTION: Legacy JSON request format for renaming temporary tables to their final names (deprecated).\nSOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/http-api/index.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tableNames\": { \"<table_1_temp>\": \"<table_1>\", \"<table_2_temp>\": \"<table_2>\" }\n}\n```"
  }
]