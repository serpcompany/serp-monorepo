[
  {
    "owner": "androidx",
    "repo": "media",
    "content": "TITLE: Adding ExoPlayer Dependencies in Kotlin DSL\nDESCRIPTION: Configuration for adding ExoPlayer modules in Kotlin DSL build.gradle.kts file. This snippet shows how to add dependencies for the ExoPlayer core, DASH playback support, and UI components.\nSOURCE: https://github.com/androidx/media/blob/release/README.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"androidx.media3:media3-exoplayer:1.X.X\")\nimplementation(\"androidx.media3:media3-exoplayer-dash:1.X.X\")\nimplementation(\"androidx.media3:media3-ui:1.X.X\")\n```\n\n----------------------------------------\n\nTITLE: Adding ExoPlayer Dependencies in Groovy DSL\nDESCRIPTION: Configuration for adding ExoPlayer modules in Groovy DSL build.gradle file. This snippet shows how to add dependencies for the ExoPlayer core, DASH playback support, and UI components.\nSOURCE: https://github.com/androidx/media/blob/release/README.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'androidx.media3:media3-exoplayer:1.X.X'\nimplementation 'androidx.media3:media3-exoplayer-dash:1.X.X'\nimplementation 'androidx.media3:media3-ui:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Adding ExoPlayer Module as Gradle Dependency\nDESCRIPTION: This snippet demonstrates how to include the ExoPlayer module in an Android project using Gradle. The implementation should use the same version (1.X.X) as other media modules in the project.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/exoplayer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-exoplayer:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Installing Media3 Transformer Module with Gradle\nDESCRIPTION: Gradle dependency configuration for adding the androidx.media3 transformer module to an Android project. The version (1.X.X) must match other media modules being used.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/transformer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-transformer:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Installing Media3 Session Module with Gradle\nDESCRIPTION: Demonstrates how to add the media3-session dependency to an Android project using Gradle. The version number (1.X.X) must match other media3 module versions being used in the project.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/session/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-session:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Installing ExoPlayer HLS Module with Gradle\nDESCRIPTION: This snippet shows how to add the ExoPlayer HLS module as a Gradle dependency in an Android project. The version number (1.X.X) must match the version of other media modules being used.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/exoplayer_hls/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-exoplayer-hls:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Adding Media3 Effect Module as Gradle Dependency\nDESCRIPTION: Shows how to add the AndroidX Media3 Effect module as a Gradle dependency in an Android project. The version (1.X.X) must match the version of other media modules being used.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/effect/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-effect:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Adding Media3 UI Compose Dependency in Gradle\nDESCRIPTION: Instructions for adding the Media3 UI Compose module as a Gradle dependency. The version (1.X.X) must match the version of other Media3 modules being used in the project.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/ui_compose/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-ui-compose:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Adding Media3 Cast Module Dependency in Gradle\nDESCRIPTION: This snippet shows how to add the Media3 Cast module as a dependency in a Gradle build file. The version number should match other Media3 modules being used in the project.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/cast/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-cast:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Adding ExoPlayer SmoothStreaming Module Dependency in Gradle\nDESCRIPTION: Shows how to add the ExoPlayer SmoothStreaming module as a Gradle dependency to an Android project. The version number (1.X.X) should match the version of other media modules being used.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/exoplayer_smoothstreaming/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-exoplayer-smoothstreaming:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Adding ExoPlayer RTSP Module Dependency in Gradle\nDESCRIPTION: This code snippet shows how to add the ExoPlayer RTSP module as a gradle dependency. The version '1.X.X' should match the version of other media modules being used.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/exoplayer_rtsp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-exoplayer-rtsp:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Installing Media Muxer Module via Gradle\nDESCRIPTION: Gradle dependency configuration to add the media3-muxer module to an Android project. The version (1.X.X) must match other media modules being used.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/muxer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-muxer:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Creating DefaultDataSourceFactory with OkHttpDataSource in Java\nDESCRIPTION: This code demonstrates how to create a DefaultDataSourceFactory using OkHttpDataSource.Factory for handling both HTTP and non-HTTP content in an Android media application.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/datasource_okhttp/README.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nnew DefaultDataSourceFactory(\n    ...\n    /* baseDataSourceFactory= */ new OkHttpDataSource.Factory(...));\n```\n\n----------------------------------------\n\nTITLE: Adding Media3 UI Module Dependency in Gradle\nDESCRIPTION: This snippet shows how to add the androidx.media3:media3-ui module as a dependency in a Gradle build file. The version number should match other media modules being used in the project.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-ui:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Installing Media Container Module via Gradle\nDESCRIPTION: Gradle dependency configuration to add the androidx.media3 container module to an Android project. The version (1.X.X) must match other media module versions being used.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/container/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-container:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Options Provider for Google Cast\nDESCRIPTION: Java implementation of a custom OptionsProvider class that configures a Cast application to use a specific receiver app ID. This allows the demo app to work with custom Cast receivers.\nSOURCE: https://github.com/androidx/media/blob/release/demos/cast/README.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class MyOptionsProvider implements OptionsProvider {\n  @NonNull\n  @Override\n  public CastOptions getCastOptions(Context context) {\n    return new CastOptions.Builder()\n        .setReceiverApplicationId(YOUR_RECEIVER_APP_ID)\n        // other options\n        .build();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing RTMP DataSource Module with Gradle\nDESCRIPTION: Gradle dependency configuration to add the RTMP DataSource module to an Android project. The version (1.X.X) must match other media modules being used.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/datasource_rtmp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-datasource-rtmp:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Preserving Audio Renderer Constructors for Reflection in DefaultRenderersFactory\nDESCRIPTION: ProGuard rules to keep constructors of audio renderer classes that are accessed via reflection in DefaultRenderersFactory. These rules ensure that audio decoders like Opus, FLAC, IAMF, FFmpeg, MIDI, and MPEG-H remain accessible.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/exoplayer/proguard-rules.txt#2025-04-23_snippet_1\n\nLANGUAGE: proguard\nCODE:\n```\n-dontnote androidx.media3.decoder.opus.LibopusAudioRenderer\n-keepclassmembers class androidx.media3.decoder.opus.LibopusAudioRenderer {\n  <init>(android.os.Handler, androidx.media3.exoplayer.audio.AudioRendererEventListener, androidx.media3.exoplayer.audio.AudioSink);\n}\n-dontnote androidx.media3.decoder.flac.LibflacAudioRenderer\n-keepclassmembers class androidx.media3.decoder.flac.LibflacAudioRenderer {\n  <init>(android.os.Handler, androidx.media3.exoplayer.audio.AudioRendererEventListener, androidx.media3.exoplayer.audio.AudioSink);\n}\n-dontnote androidx.media3.decoder.iamf.LibiamfAudioRenderer\n-keepclassmembers class androidx.media3.decoder.iamf.LibiamfAudioRenderer {\n  <init>(android.content.Context, android.os.Handler, androidx.media3.exoplayer.audio.AudioRendererEventListener, androidx.media3.exoplayer.audio.AudioSink);\n}\n-dontnote androidx.media3.decoder.ffmpeg.FfmpegAudioRenderer\n-keepclassmembers class androidx.media3.decoder.ffmpeg.FfmpegAudioRenderer {\n  <init>(android.os.Handler, androidx.media3.exoplayer.audio.AudioRendererEventListener, androidx.media3.exoplayer.audio.AudioSink);\n}\n-dontnote androidx.media3.decoder.midi.MidiRenderer\n-keepclassmembers class androidx.media3.decoder.midi.MidiRenderer {\n  <init>(android.content.Context, android.os.Handler, androidx.media3.exoplayer.audio.AudioRendererEventListener, androidx.media3.exoplayer.audio.AudioSink);\n}\n-dontnote androidx.media3.decoder.mpegh.MpeghAudioRenderer\n-keepclassmembers class androidx.media3.decoder.mpegh.MpeghAudioRenderer {\n  <init>(android.os.Handler, androidx.media3.exoplayer.audio.AudioRendererEventListener, androidx.media3.exoplayer.audio.AudioSink);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExoPlayer DASH Module with Gradle\nDESCRIPTION: Adds the ExoPlayer DASH module as a dependency in a Gradle build file. This dependency enables support for Dynamic Adaptive Streaming over HTTP (DASH) content in ExoPlayer applications.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/exoplayer_dash/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-exoplayer-dash:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Installing Media3 Cronet DataSource Dependency\nDESCRIPTION: Gradle dependency configuration to add the Cronet DataSource module to an Android project. The version number should match other media modules being used.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/datasource_cronet/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-datasource-cronet:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Preserving MediaSource Factory Constructors for Reflection in DefaultMediaSourceFactory\nDESCRIPTION: ProGuard rules to keep constructors of MediaSource factory classes that are accessed via reflection in DefaultMediaSourceFactory. These rules ensure support for various streaming protocols like DASH, HLS, SmoothStreaming, and RTSP.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/exoplayer/proguard-rules.txt#2025-04-23_snippet_3\n\nLANGUAGE: proguard\nCODE:\n```\n# Constructors accessed via reflection in DefaultMediaSourceFactory\n-dontnote androidx.media3.exoplayer.dash.DashMediaSource$Factory\n-keepclasseswithmembers class androidx.media3.exoplayer.dash.DashMediaSource$Factory {\n  <init>(androidx.media3.datasource.DataSource$Factory);\n}\n-dontnote androidx.media3.exoplayer.hls.HlsMediaSource$Factory\n-keepclasseswithmembers class androidx.media3.exoplayer.hls.HlsMediaSource$Factory {\n  <init>(androidx.media3.datasource.DataSource$Factory);\n}\n-dontnote androidx.media3.exoplayer.smoothstreaming.SsMediaSource$Factory\n-keepclasseswithmembers class androidx.media3.exoplayer.smoothstreaming.SsMediaSource$Factory {\n  <init>(androidx.media3.datasource.DataSource$Factory);\n}\n-dontnote androidx.media3.exoplayer.rtsp.RtspMediaSource$Factory\n-keepclasseswithmembers class androidx.media3.exoplayer.rtsp.RtspMediaSource$Factory {\n  <init>();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DefaultDataSource with Cronet\nDESCRIPTION: Code snippet showing how to configure a DefaultDataSource.Factory using CronetDataSource.Factory as the base data source factory for handling both HTTP and non-HTTP content.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/datasource_cronet/README.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nnew DefaultDataSource.Factory(\n    ...\n    /* baseDataSourceFactory= */ new CronetDataSource.Factory(...) );\n```\n\n----------------------------------------\n\nTITLE: Describing ExoPlayer Demo App in Markdown\nDESCRIPTION: This Markdown snippet introduces the main ExoPlayer demo app, explaining its purpose, functionality, and potential use as a reference for developers. It also directs readers to the demos README for build and run instructions.\nSOURCE: https://github.com/androidx/media/blob/release/demos/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ExoPlayer main demo\n\nThis is the main ExoPlayer demo app. It uses ExoPlayer to play a number of test\nstreams. It can be used as a starting point or reference project when developing\nother applications that make use of the ExoPlayer library.\n\nSee the [demos README](../README.md) for instructions on how to build and run\nthis demo.\n```\n\n----------------------------------------\n\nTITLE: Preserving Video Processing Classes for Reflection in PlaybackVideoGraphWrapper\nDESCRIPTION: ProGuard rules to keep constructors and methods of video processing classes that are accessed via reflection in PlaybackVideoGraphWrapper. This ensures video effects and frame processing functionality remains available.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/exoplayer/proguard-rules.txt#2025-04-23_snippet_4\n\nLANGUAGE: proguard\nCODE:\n```\n# Constructors and methods accessed via reflection in PlaybackVideoGraphWrapper\n-dontnote androidx.media3.effect.PreviewingSingleInputVideoGraph$Factory\n-keepclasseswithmembers class androidx.media3.effect.PreviewingSingleInputVideoGraph$Factory {\n  <init>(androidx.media3.common.VideoFrameProcessor$Factory);\n}\n-dontnote androidx.media3.effect.DefaultVideoFrameProcessor$Factory$Builder\n-keepclasseswithmembers class androidx.media3.effect.DefaultVideoFrameProcessor$Factory$Builder {\n  androidx.media3.effect.DefaultVideoFrameProcessor$Factory build();\n}\n```\n\n----------------------------------------\n\nTITLE: Local Module Dependencies in Kotlin DSL\nDESCRIPTION: Configuration for adding local AndroidX Media module dependencies in Kotlin DSL build.gradle.kts file after setting up the local repository.\nSOURCE: https://github.com/androidx/media/blob/release/README.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(project(\":media3-lib-exoplayer\"))\nimplementation(project(\":media3-lib-exoplayer-dash\"))\nimplementation(project(\":media3-lib-ui\"))\n```\n\n----------------------------------------\n\nTITLE: Defining Robolectric Test Utils Module in Markdown\nDESCRIPTION: This snippet outlines the purpose of the Robolectric test utils module for media tests in Android. It includes a brief description and a link to the Javadoc documentation.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/test_utils_robolectric/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Robolectric test utils module\n\nProvides test infrastructure for Robolectric-based media tests.\n\n## Links\n\n*   [Javadoc][]\n\n[Javadoc]: https://developer.android.com/reference/androidx/media3/test/utils/robolectric/package-summary\n```\n\n----------------------------------------\n\nTITLE: Enabling Java 8 Support in Kotlin DSL\nDESCRIPTION: Configuration for enabling Java 8 support in Kotlin DSL build.gradle.kts file, which is required for AndroidX Media libraries.\nSOURCE: https://github.com/androidx/media/blob/release/README.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncompileOptions {\n  targetCompatibility = JavaVersion.VERSION_1_8\n}\n```\n\n----------------------------------------\n\nTITLE: Local Module Dependencies in Groovy DSL\nDESCRIPTION: Configuration for adding local AndroidX Media module dependencies in Groovy DSL build.gradle file after setting up the local repository.\nSOURCE: https://github.com/androidx/media/blob/release/README.md#2025-04-23_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation project(':media3-lib-exoplayer')\nimplementation project(':media3-lib-exoplayer-dash')\nimplementation project(':media3-lib-ui')\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Test for Android Media Session Module\nDESCRIPTION: This command executes the connected Android Test (cAT) for the test-session-current module using Gradle. It's used to run tests on the cross-process functionality of the session module.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/test_session_current/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :test-session-current:cAT\n```\n\n----------------------------------------\n\nTITLE: Enabling Java 8 Support in Groovy DSL\nDESCRIPTION: Configuration for enabling Java 8 support in Groovy DSL build.gradle file, which is required for AndroidX Media libraries.\nSOURCE: https://github.com/androidx/media/blob/release/README.md#2025-04-23_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ncompileOptions {\n  targetCompatibility JavaVersion.VERSION_1_8\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ExoPlayer WorkManager Dependency in Gradle\nDESCRIPTION: Shows how to add the ExoPlayer WorkManager module as a gradle dependency to an Android project. The version number (1.X.X) must match other media modules being used.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/exoplayer_workmanager/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-exoplayer-workmanager:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Basic Gradle Project Commands\nDESCRIPTION: Essential Gradle commands for listing projects and viewing available tasks for demo applications.\nSOURCE: https://github.com/androidx/media/blob/release/demos/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew projects\n```\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :<demo name>:tasks\n```\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :<demo name>:<install task>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating setVideoEffects Method Usage with ExoPlayer in Markdown\nDESCRIPTION: This snippet is a markdown description of a demo application that shows how to use the Effect API with ExoPlayer. It explains that the app demonstrates the `setVideoEffects` method to apply different visual effects to videos played through ExoPlayer.\nSOURCE: https://github.com/androidx/media/blob/release/demos/effect/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Effect demo\n\nThis app demonstrates how to use the [Effect][] API to modify videos. It uses\n`setVideoEffects` method to add different effects to [ExoPlayer][].\n\nSee the [demos README](../README.md) for instructions on how to build and run\nthis demo.\n\n[Effect]: https://github.com/androidx/media/tree/release/libraries/effect\n[ExoPlayer]: https://github.com/androidx/media/tree/release/libraries/exoplayer\n```\n\n----------------------------------------\n\nTITLE: Installing ExoPlayer IMA Module with Gradle\nDESCRIPTION: Gradle dependency configuration to add the ExoPlayer IMA module to an Android project. The version (1.X.X) must match other media modules being used.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/exoplayer_ima/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-exoplayer-ima:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Referencing README File in Markdown\nDESCRIPTION: This snippet demonstrates how to create a relative link in Markdown, pointing to the README file in the parent directory. It's used to guide users to build and run instructions for the demo app.\nSOURCE: https://github.com/androidx/media/blob/release/demos/composition/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n[demos README](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Adding OkHttp DataSource Dependency in Gradle\nDESCRIPTION: This snippet shows how to add the OkHttp DataSource module as a dependency in a Gradle build file. The version number should match other media modules being used.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/datasource_okhttp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-datasource-okhttp:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Referencing MediaLibraryService in Android Automotive\nDESCRIPTION: Code snippet showing the reference to the MediaLibraryService class for Android Automotive platforms.\nSOURCE: https://github.com/androidx/media/blob/release/demos/session_automotive/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`MediaLibraryService`\n```\n\n----------------------------------------\n\nTITLE: Adding Leanback UI Module Dependency in Gradle\nDESCRIPTION: This snippet shows how to add the Leanback UI module as a gradle dependency in an Android project. The version number should match the version of other media modules being used.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/ui_leanback/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-ui-leanback:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Formatting Java Code with google-java-format-diff.py in Shell\nDESCRIPTION: This command uses google-java-format-diff.py to automatically format Java code changes made on top of the main branch. It applies the Google Java Style Guide to ensure consistent code formatting across the project.\nSOURCE: https://github.com/androidx/media/blob/release/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git diff -U0 main... | google-java-format-diff.py -p1 -i\n```\n\n----------------------------------------\n\nTITLE: Adding MIDI Module Dependency in Gradle\nDESCRIPTION: This snippet shows how to add the MIDI module as a gradle dependency in an Android project. It specifies the implementation of the androidx.media3:media3-exoplayer-midi library.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_midi/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'androidx.media3:media3-exoplayer-midi:1.X.X'\n```\n\n----------------------------------------\n\nTITLE: Enabling MIDI Module in Kotlin settings.gradle.kts\nDESCRIPTION: Configuration in Kotlin DSL settings.gradle.kts file for enabling the optional MIDI module when using local dependencies.\nSOURCE: https://github.com/androidx/media/blob/release/README.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ngradle.extra.apply {\n  set(\"androidxMediaEnableMidiModule\", true)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for libgav1JNI Android Library\nDESCRIPTION: Sets up the CMake build environment for the libgav1JNI library, configuring C++ standard, project name, and architecture-specific compiler flags. Special handling is provided for armeabi-v7a to enable Neon instructions, and optimization flags are added for release builds.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_av1/src/main/jni/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# LINT.IfChange\ncmake_minimum_required(VERSION 3.21.0 FATAL_ERROR)\n# LINT.ThenChange(../../../build.gradle)\n\nset(CMAKE_CXX_STANDARD 11)\n\nproject(libgav1JNI C CXX)\n\n# Devices using armeabi-v7a are not required to support\n# Neon which is why Neon is disabled by default for\n# armeabi-v7a build. This flag enables it.\nif(${ANDROID_ABI} MATCHES \"armeabi-v7a\")\n    add_compile_options(\"-mfpu=neon\")\n    add_compile_options(\"-marm\")\n    add_compile_options(\"-fPIC\")\nendif()\n\nstring(TOLOWER \"${CMAKE_BUILD_TYPE}\" build_type)\nif(build_type MATCHES \"^rel\")\n    add_compile_options(\"-O2\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling MIDI Module in Groovy settings.gradle\nDESCRIPTION: Configuration in Groovy DSL settings.gradle file for enabling the optional MIDI module when using local dependencies.\nSOURCE: https://github.com/androidx/media/blob/release/README.md#2025-04-23_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\ngradle.ext.androidxMediaEnableMidiModule = true\n```\n\n----------------------------------------\n\nTITLE: Configuring FFmpeg JNI Library Build with CMake\nDESCRIPTION: Configures CMake build settings for FFmpeg JNI library including version requirements, C++ standard, library paths, and linking options. Sets up FFmpeg static libraries (avutil, swresample, avcodec) and configures platform-specific linking options for ARM64 architecture.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_ffmpeg/src/main/jni/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.21.0 FATAL_ERROR)\n\nset(CMAKE_CXX_STANDARD 11)\n\nproject(libffmpegJNI C CXX)\n\nset(ffmpeg_location \"${CMAKE_CURRENT_SOURCE_DIR}/ffmpeg\")\nset(ffmpeg_binaries \"${ffmpeg_location}/android-libs/${ANDROID_ABI}\")\n\nforeach(ffmpeg_lib avutil swresample avcodec)\n    set(ffmpeg_lib_filename lib${ffmpeg_lib}.a)\n    set(ffmpeg_lib_file_path ${ffmpeg_binaries}/${ffmpeg_lib_filename})\n    add_library(\n            ${ffmpeg_lib}\n            STATIC\n            IMPORTED)\n    set_target_properties(\n            ${ffmpeg_lib} PROPERTIES\n            IMPORTED_LOCATION\n            ${ffmpeg_lib_file_path})\nendforeach()\n\ninclude_directories(${ffmpeg_location})\nfind_library(android_log_lib log)\n\nadd_library(ffmpegJNI\n            SHARED\n            ffmpeg_jni.cc)\n\ntarget_link_libraries(ffmpegJNI\n                      PRIVATE android\n                      PRIVATE swresample\n                      PRIVATE avcodec\n                      PRIVATE avutil\n                      PRIVATE ${android_log_lib})\n\nif(ANDROID_ABI STREQUAL \"arm64-v8a\")\n    target_link_options(ffmpegJNI PRIVATE \"-Wl,-Bsymbolic\")\nendif()\n\ntarget_link_options(ffmpegJNI\n                    PRIVATE \"-Wl,-z,max-page-size=16384\")\n```\n\n----------------------------------------\n\nTITLE: Cloning Libgav1 Repository\nDESCRIPTION: Command to clone the libgav1 codec repository from Google's chromium source.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_av1/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd \"${AV1_MODULE_PATH}/jni\" && \\\ngit clone https://chromium.googlesource.com/codecs/libgav1\n```\n\n----------------------------------------\n\nTITLE: Disabling Media Session and Notifications in Cast SDK\nDESCRIPTION: Java implementation of an OptionsProvider that disables the built-in media session and notifications of the Cast SDK. This is useful when the app already integrates with a MediaSession to prevent duplicate notifications.\nSOURCE: https://github.com/androidx/media/blob/release/demos/cast/README.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class MyOptionsProvider implements OptionsProvider {\n  @NonNull\n  @Override\n  public CastOptions getCastOptions(Context context) {\n    return new CastOptions.Builder()\n        .setCastMediaOptions(\n            new CastMediaOptions.Builder()\n                .setMediaSessionEnabled(false)\n                .setNotificationOptions(null)\n                .build())\n        // other options\n        .build();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Abseil Library\nDESCRIPTION: Command to clone the Abseil C++ library into the libgav1 third party directory.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_av1/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd \"${AV1_MODULE_PATH}/jni/libgav1\" && \\\ngit clone https://github.com/abseil/abseil-cpp.git third_party/abseil-cpp\n```\n\n----------------------------------------\n\nTITLE: Preserving Native Methods in ProGuard Configuration\nDESCRIPTION: This rule prevents the names of native methods from being obfuscated by ProGuard, ensuring that Java-to-native method calls continue to work after optimization.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_vp9/proguard-rules.txt#2025-04-23_snippet_0\n\nLANGUAGE: proguard\nCODE:\n```\n-keepclasseswithmembernames class * {\n    native <methods>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for libopusJNI\nDESCRIPTION: Sets up the CMake project for libopusJNI, including the minimum CMake version, C++ standard, and project name. It also defines the root directory for the project.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_opus/src/main/jni/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.21.0 FATAL_ERROR)\n\n# Enable C++11 features.\nset(CMAKE_CXX_STANDARD 11)\n\n# Define project name for your JNI module\nproject(libopusJNI C CXX)\n\nset(libopus_jni_root \"${CMAKE_CURRENT_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for VP9 Module Build\nDESCRIPTION: Sets the essential environment variables for building the VP9 module, pointing to the project checkout location and the module path.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_vp9/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd \"<path to project checkout>\"\nVP9_MODULE_PATH=\"$(pwd)/libraries/decoder_vp9/src/main\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ProGuard Rules for androidx media common module\nDESCRIPTION: A complete set of ProGuard rules for the common module in the androidx media project. These rules suppress warnings for checkerframework and Kotlin annotations, configure Guava-specific rules, and add workarounds for known issues.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/common/proguard-rules.txt#2025-04-23_snippet_0\n\nLANGUAGE: proguard\nCODE:\n```\n# Proguard rules specific to the common module.\n\n# Don't warn about checkerframework and Kotlin annotations\n-dontwarn org.checkerframework.**\n-dontwarn kotlin.annotations.jvm.**\n-dontwarn javax.annotation.**\n\n# From https://github.com/google/guava/wiki/UsingProGuardWithGuava\n-dontwarn java.lang.ClassValue\n-dontwarn java.lang.SafeVarargs\n-dontwarn javax.lang.model.element.Modifier\n-dontwarn sun.misc.Unsafe\n\n# Don't warn about Guava's compile-only dependencies.\n# These lines are needed for ProGuard but not R8.\n-dontwarn com.google.errorprone.annotations.**\n-dontwarn com.google.j2objc.annotations.**\n-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement\n\n# Workaround for https://issuetracker.google.com/issues/112297269\n# This is needed for ProGuard but not R8.\n-keepclassmembernames class com.google.common.base.Function { *; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Linking Libraries for libflacJNI\nDESCRIPTION: Sets up include directories, finds the Android log library, and links the necessary libraries to the flacJNI target. It also configures link options for 16 KB ELF alignment.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_flac/src/main/jni/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Add the include directory from libflac.\ninclude_directories(\"${libflac_jni_root}/libflac/include\")\n\n# Locate NDK log library.\nfind_library(android_log_lib log)\n\n# Link libflacJNI against used libraries.\ntarget_link_libraries(flacJNI\n                      PRIVATE android\n                      PRIVATE FLAC\n                      PRIVATE ${android_log_lib})\n\n# Enable 16 KB ELF alignment.\ntarget_link_options(flacJNI\n                    PRIVATE \"-Wl,-z,max-page-size=16384\")\n```\n\n----------------------------------------\n\nTITLE: Fetching and Checking Out libvpx for VP9 Decoder\nDESCRIPTION: Clones the libvpx repository and checks out version 1.8.0, which is recommended for compatibility with the VP9 module. Sets the libvpx path in an environment variable.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_vp9/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd \"<preferred location for libvpx>\" && \\\ngit clone https://chromium.googlesource.com/webm/libvpx && \\\ncd libvpx && \\\ngit checkout tags/v1.8.0 -b v1.8.0 && \\\nLIBVPX_PATH=\"$(pwd)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for libflacJNI Android Library\nDESCRIPTION: Sets up the CMake project for libflacJNI, including C++ standard, project name, and subdirectory for libflac. It also defines the shared library target and its source files.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_flac/src/main/jni/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.21.0 FATAL_ERROR)\n\n# Enable C++11 features.\nset(CMAKE_CXX_STANDARD 11)\n\n# Define project name for your JNI module\nproject(libflacJNI C CXX)\n\nset(libflac_jni_root \"${CMAKE_CURRENT_SOURCE_DIR}\")\n\n# Build libflac.\nadd_subdirectory(\"${libflac_jni_root}/libflac\"\n                 EXCLUDE_FROM_ALL)\n\n# Build libflacJNI.\nadd_library(flacJNI\n            SHARED\n            flac_jni.cc\n            flac_parser.cc)\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for FFmpeg build (Bash)\nDESCRIPTION: Sets up necessary environment variables for building the FFmpeg library, including paths to the project, NDK, and host platform information.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_ffmpeg/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd \"<path to project checkout>\"\nFFMPEG_MODULE_PATH=\"$(pwd)/libraries/decoder_ffmpeg/src/main\"\nNDK_PATH=\"<path to Android NDK>\"\nHOST_PLATFORM=\"linux-x86_64\"\nANDROID_ABI=21\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for MPEG-H JNI Module\nDESCRIPTION: Sets up the CMake project with minimum required version, C++11 support, and project name for the MPEG-H audio JNI module.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_mpegh/src/main/jni/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.21.0 FATAL_ERROR)\n\n# Enable C++11 features.\nset(CMAKE_CXX_STANDARD 11)\n\n# Define project name for your JNI module\nproject(libmpeghJNI C CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Flac Module Build\nDESCRIPTION: Commands to set environment variables needed for building the Flac module. Sets the FLAC_MODULE_PATH variable to point to the module's main directory.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_flac/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd \"<path to project checkout>\"\nFLAC_MODULE_PATH=\"$(pwd)/libraries/decoder_flac/src/main\"\n```\n\n----------------------------------------\n\nTITLE: Local Dependency Configuration in Groovy settings.gradle\nDESCRIPTION: Configuration in Groovy DSL settings.gradle file for using AndroidX Media modules from a local repository clone.\nSOURCE: https://github.com/androidx/media/blob/release/README.md#2025-04-23_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\ngradle.ext.androidxMediaModulePrefix = 'media3-'\napply from: file(\"path/to/media/core_settings.gradle\")\n```\n\n----------------------------------------\n\nTITLE: Local Dependency Configuration in Kotlin settings.gradle.kts\nDESCRIPTION: Configuration in Kotlin DSL settings.gradle.kts file for using AndroidX Media modules from a local repository clone.\nSOURCE: https://github.com/androidx/media/blob/release/README.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n(gradle as ExtensionAware).extra[\"androidxMediaModulePrefix\"] = \"media3-\"\napply(from = file(\"path/to/media/core_settings.gradle\"))\n```\n\n----------------------------------------\n\nTITLE: Building MediaPipe AAR and binary proto for Transformer demo (Shell)\nDESCRIPTION: This shell script builds the Android Archive (AAR) and binary protocol buffer for the MediaPipe graph used in the Transformer demo. It includes various build optimizations and copies the resulting files to the appropriate locations.\nSOURCE: https://github.com/androidx/media/blob/release/demos/transformer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd ${MEDIAPIPE_ROOT}\nbazel build -c opt --strip=ALWAYS \\\n  --host_crosstool_top=@bazel_tools//tools/cpp:toolchain \\\n  --fat_apk_cpu=arm64-v8a,armeabi-v7a \\\n  --legacy_whole_archive=0 \\\n  --features=-legacy_whole_archive \\\n  --copt=-fvisibility=hidden \\\n  --copt=-ffunction-sections \\\n  --copt=-fdata-sections \\\n  --copt=-fstack-protector \\\n  --copt=-Oz \\\n  --copt=-fomit-frame-pointer \\\n  --copt=-DABSL_MIN_LOG_LEVEL=2 \\\n  --linkopt=-Wl,--gc-sections,--strip-all \\\n  mediapipe/java/com/google/mediapipe/transformer:edge_detector_mediapipe_aar.aar\ncp bazel-bin/mediapipe/java/com/google/mediapipe/transformer/edge_detector_mediapipe_aar.aar \\\n  ${TRANSFORMER_DEMO_ROOT}/libs\nbazel build mediapipe/java/com/google/mediapipe/transformer:edge_detector_binary_graph\ncp bazel-bin/mediapipe/java/com/google/mediapipe/transformer/edge_detector_mediapipe_graph.binarypb \\\n  ${TRANSFORMER_DEMO_ROOT}/src/withMediaPipe/assets\n```\n\n----------------------------------------\n\nTITLE: Adding libiamf Subdirectory and Include Path in CMake\nDESCRIPTION: This snippet adds the libiamf subdirectory to the build and sets up the include directory for the libiamf headers. It ensures that the necessary components of libiamf are built and can be used in the main project.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_iamf/src/main/jni/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Build libiamf.\nadd_subdirectory(\"${libiamf_jni_root}/libiamf/code\"\n                 EXCLUDE_FROM_ALL)\n\n# Add the include directory from libiamf.\ninclude_directories (\"${libiamf_jni_root}/libiamf/code/include\")\n```\n\n----------------------------------------\n\nTITLE: Configuring libopusJNI Shared Library\nDESCRIPTION: Defines the opusV2JNI shared library target, specifies its source file, and sets up linking against required libraries including Android, opus, and the NDK log library.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_opus/src/main/jni/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Build libopusJNI.\nadd_library(opusV2JNI\n            SHARED\n            opus_jni.cc)\n\n# Locate NDK log library.\nfind_library(android_log_lib log)\n\n# Link libopusJNI against used libraries.\ntarget_link_libraries(opusV2JNI\n                      PRIVATE android\n                      PRIVATE opus\n                      PRIVATE ${android_log_lib})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dependencies and Building libgav1JNI\nDESCRIPTION: Configures the project root, adds the required dependencies (cpu_features and libgav1), and defines the libgav1JNI shared library. Links the required libraries and sets up special linking options including 16 KB ELF alignment.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_av1/src/main/jni/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(libgav1_jni_root \"${CMAKE_CURRENT_SOURCE_DIR}\")\n\n# Build cpu_features library.\nadd_subdirectory(\"${libgav1_jni_root}/cpu_features\"\n                 EXCLUDE_FROM_ALL)\n\n# Build libgav1.\nadd_subdirectory(\"${libgav1_jni_root}/libgav1\"\n                 EXCLUDE_FROM_ALL)\n\n# Build libgav1JNI.\nadd_library(gav1JNI\n            SHARED\n            gav1_jni.cc\n            cpu_info.cc\n            cpu_info.h)\n\n# Locate NDK log library.\nfind_library(android_log_lib log)\n\n# Link libgav1JNI against used libraries.\ntarget_link_libraries(gav1JNI\n                      PRIVATE android\n                      PRIVATE cpu_features\n                      PRIVATE libgav1_static\n                      PRIVATE ${android_log_lib})\n\n# Enable 16 KB ELF alignment.\ntarget_link_options(gav1JNI\n                    PRIVATE \"-Wl,-z,max-page-size=16384\")\n```\n\n----------------------------------------\n\nTITLE: Including and Building libopus Library\nDESCRIPTION: Adds the libopus subdirectory to the build process and includes its header files. This step is necessary for integrating the Opus audio codec into the project.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_opus/src/main/jni/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Build libopus.\nadd_subdirectory(\"${libopus_jni_root}/libopus\"\n                 EXCLUDE_FROM_ALL)\n\n# Add the include directory from libopus.\ninclude_directories (\"${libopus_jni_root}/libopus/include\")\n```\n\n----------------------------------------\n\nTITLE: Preserving FlacLibrary Method for Reflection Access\nDESCRIPTION: Keeps the isAvailable() static method in FlacLibrary class to allow access via reflection from DefaultExtractorsFactory.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/extractor/proguard-rules.txt#2025-04-23_snippet_1\n\nLANGUAGE: proguard\nCODE:\n```\n-dontnote androidx.media3.decoder.flac.FlacLibrary\n-keepclassmembers class androidx.media3.decoder.flac.FlacLibrary {\n  public static boolean isAvailable();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ELF Alignment for libopusJNI\nDESCRIPTION: Configures the linker options for the opusV2JNI target to enable 16 KB ELF alignment. This setting can be important for optimizing memory usage and load times on certain Android devices.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_opus/src/main/jni/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Enable 16 KB ELF alignment.\ntarget_link_options(opusV2JNI\n                    PRIVATE \"-Wl,-z,max-page-size=16384\")\n```\n\n----------------------------------------\n\nTITLE: Configuring FFmpeg decoders (Bash)\nDESCRIPTION: Sets up an array of enabled decoders for FFmpeg compilation.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_ffmpeg/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nENABLED_DECODERS=(vorbis opus flac)\n```\n\n----------------------------------------\n\nTITLE: Preserving Video Decoder Output Buffer Class in ProGuard\nDESCRIPTION: This rule keeps the VideoDecoderOutputBuffer class and all its members unobfuscated since they are accessed from native methods in the VP9 extension.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_vp9/proguard-rules.txt#2025-04-23_snippet_1\n\nLANGUAGE: proguard\nCODE:\n```\n-keep class androidx.media3.decoder.VideoDecoderOutputBuffer {\n    *;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up MPEG-H Library Dependencies\nDESCRIPTION: Sets the root directory for the JNI module, adds the libmpegh subdirectory to the build, and includes the libmpegh headers for compilation.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_mpegh/src/main/jni/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(libmpegh_jni_root \"${CMAKE_CURRENT_SOURCE_DIR}\")\n\n# Build libmpegh.\nadd_subdirectory(\"${libmpegh_jni_root}/libmpegh\"\n                 EXCLUDE_FROM_ALL)\n\n# Add the include directory from libmpegh.\ninclude_directories (\"${libmpegh_jni_root}/libmpegh/include\")\n```\n\n----------------------------------------\n\nTITLE: Preserving Flac-related Classes for Native Access\nDESCRIPTION: Keeps specific Flac-related classes unobfuscated including all their members. These classes are accessed from native code, so their structure and member names must be preserved.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_flac/proguard-rules.txt#2025-04-23_snippet_1\n\nLANGUAGE: proguard\nCODE:\n```\n-keep class androidx.media3.decoder.flac.FlacDecoderJni {\n    *;\n}\n-keep class androidx.media3.extractor.FlacStreamMetadata {\n    *;\n}\n-keep class androidx.media3.extractor.metadata.flac.PictureFrame {\n    *;\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Linking MPEG-H JNI Library\nDESCRIPTION: Defines the mpeghJNI shared library target, locates the Android log library, and specifies the libraries to link against.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_mpegh/src/main/jni/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Build libmpeghJNI.\nadd_library(mpeghJNI\n            SHARED\n            mpegh_jni.cpp)\n\n# Locate NDK log library.\nfind_library(android_log_lib log)\n\n# Link libmpeghJNI against used libraries.\ntarget_link_libraries(mpeghJNI\n                      PRIVATE android\n                      PRIVATE mpeghdec\n                      PRIVATE ${android_log_lib})\n```\n\n----------------------------------------\n\nTITLE: Setting Opus Module Path Environment Variables in Bash\nDESCRIPTION: Sets up environment variables for the Opus module path. This is required before fetching and building the libopus library for the decoder module.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_opus/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd \"<path to project checkout>\"\nOPUS_MODULE_PATH=\"$(pwd)/libraries/decoder_opus/src/main\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Linking libiamfJNI Shared Library in CMake\nDESCRIPTION: This section defines the libiamfJNI shared library target, locates the Android NDK log library, and links the library against required dependencies including Android, iamf, and the log library.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_iamf/src/main/jni/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Build libiamfJNI.\nadd_library(iamfJNI\n            SHARED\n            iamf_jni.cc)\n\n# Locate NDK log library.\nfind_library(android_log_lib log)\n\n# Link libiamfJNI against used libraries.\ntarget_link_libraries(iamfJNI\n                      PRIVATE android\n                      PRIVATE iamf\n                      PRIVATE ${android_log_lib})\n```\n\n----------------------------------------\n\nTITLE: Fetching Libopus Repository with Git\nDESCRIPTION: Clones the libopus repository from GitLab to the appropriate JNI directory for building the native components of the Opus decoder module.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_opus/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd \"${OPUS_MODULE_PATH}/jni\" && \\\ngit clone https://gitlab.xiph.org/xiph/opus.git libopus\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for libiamfJNI Android Media Module\nDESCRIPTION: This CMake snippet sets up the project configuration for building the libiamfJNI module. It defines the project name, sets C++11 as the standard, and configures the build environment.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_iamf/src/main/jni/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.21.0 FATAL_ERROR)\n\n# Enable C++11 features.\nset(CMAKE_CXX_STANDARD 11)\n\n# Define project name for your JNI module\nproject(libiamfJNI C CXX)\n\nset(libiamf_jni_root \"${CMAKE_CURRENT_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Cloning and configuring FFmpeg repository (Bash)\nDESCRIPTION: Clones the FFmpeg repository, checks out a specific version (6.0), and sets up the FFMPEG_PATH variable.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_ffmpeg/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd \"<preferred location for ffmpeg>\" && \\\ngit clone git://source.ffmpeg.org/ffmpeg && \\\ncd ffmpeg && \\\ngit checkout release/6.0 && \\\nFFMPEG_PATH=\"$(pwd)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for MPEG-H Module Build\nDESCRIPTION: These commands set up the necessary environment variables for building the MPEG-H module. They change the current directory to the project checkout path and set the MPEGH_MODULE_PATH variable.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_mpegh/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd \"<path to project checkout>\"\nMPEGH_MODULE_PATH=\"$(pwd)/libraries/decoder_mpegh/src/main\"\n```\n\n----------------------------------------\n\nTITLE: Preserving Video Renderer Constructors for Reflection in DefaultRenderersFactory\nDESCRIPTION: ProGuard rules to keep constructors of video renderer classes that are accessed via reflection in DefaultRenderersFactory. This prevents these constructors from being removed or obfuscated during the build process.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/exoplayer/proguard-rules.txt#2025-04-23_snippet_0\n\nLANGUAGE: proguard\nCODE:\n```\n# Constructors accessed via reflection in DefaultRenderersFactory\n-dontnote androidx.media3.decoder.vp9.LibvpxVideoRenderer\n-keepclassmembers class androidx.media3.decoder.vp9.LibvpxVideoRenderer {\n  <init>(long, android.os.Handler, androidx.media3.exoplayer.video.VideoRendererEventListener, int);\n}\n-dontnote androidx.media3.decoder.av1.Libgav1VideoRenderer\n-keepclassmembers class androidx.media3.decoder.av1.Libgav1VideoRenderer {\n  <init>(long, android.os.Handler, androidx.media3.exoplayer.video.VideoRendererEventListener, int);\n}\n-dontnote androidx.media3.decoder.ffmpeg.ExperimentalFfmpegVideoRenderer\n-keepclassmembers class androidx.media3.decoder.ffmpeg.ExperimentalFfmpegVideoRenderer {\n  <init>(long, android.os.Handler, androidx.media3.exoplayer.video.VideoRendererEventListener, int);\n}\n```\n\n----------------------------------------\n\nTITLE: Building JNI Native Libraries for VP9 Decoder\nDESCRIPTION: Builds the JNI native libraries for all ABIs using the Android NDK build system. This compiles the native components required for the VP9 decoder module.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_vp9/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd \"${VP9_MODULE_PATH}\"/jni && \\\n${NDK_PATH}/ndk-build APP_ABI=all -j4\n```\n\n----------------------------------------\n\nTITLE: Preserving SphericalGLSurfaceView and VideoDecoderGLSurfaceView Constructors in Proguard\nDESCRIPTION: Keeps the constructor methods for SphericalGLSurfaceView and VideoDecoderGLSurfaceView classes, which are accessed via reflection in PlayerView.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/ui/proguard-rules.txt#2025-04-23_snippet_0\n\nLANGUAGE: proguard\nCODE:\n```\n-dontnote androidx.media3.exoplayer.video.spherical.SphericalGLSurfaceView\n-keepclassmembers class androidx.media3.exoplayer.video.spherical.SphericalGLSurfaceView {\n  <init>(android.content.Context);\n}\n-dontnote androidx.media3.exoplayer.video.VideoDecoderGLSurfaceView\n-keepclassmembers class androidx.media3.exoplayer.video.VideoDecoderGLSurfaceView {\n  <init>(android.content.Context);\n}\n```\n\n----------------------------------------\n\nTITLE: Linking libvpx to VP9 Module and Generating Configs\nDESCRIPTION: Creates a symbolic link to the libvpx source code in the VP9 module's jni directory and runs a script to generate necessary configuration files for libvpx.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_vp9/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ${VP9_MODULE_PATH}/jni && \\\nln -s \"$LIBVPX_PATH\" libvpx && \\\n./generate_libvpx_android_configs.sh\n```\n\n----------------------------------------\n\nTITLE: Preserving ExoPlayer and ImageOutput Classes in Proguard\nDESCRIPTION: Keeps the ExoPlayer class name and specific methods, as well as the ImageOutput interface methods, which are used for image processing in ExoPlayer.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/ui/proguard-rules.txt#2025-04-23_snippet_1\n\nLANGUAGE: proguard\nCODE:\n```\n-keepnames class androidx.media3.exoplayer.ExoPlayer {}\n-keepclassmembers class androidx.media3.exoplayer.ExoPlayer {\n  void setImageOutput(androidx.media3.exoplayer.image.ImageOutput);\n}\n-keepclasseswithmembers class androidx.media3.exoplayer.image.ImageOutput {\n  void onImageAvailable(long, android.graphics.Bitmap);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting NDK Path for VP9 Module Build\nDESCRIPTION: Sets the Android NDK path in an environment variable. The build configuration has been tested with NDK r21.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_vp9/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNDK_PATH=\"<path to Android NDK>\"\n```\n\n----------------------------------------\n\nTITLE: Preserving AlertDialog.Builder Methods for TrackSelectionDialogBuilder in Proguard\nDESCRIPTION: Keeps specific methods of AlertDialog.Builder class used via reflection in TrackSelectionDialogBuilder. Includes rules for both androidx and support library versions to handle de-jetification.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/ui/proguard-rules.txt#2025-04-23_snippet_2\n\nLANGUAGE: proguard\nCODE:\n```\n-dontnote androidx.appcompat.app.AlertDialog.Builder\n-keepclassmembers class androidx.appcompat.app.AlertDialog$Builder {\n  <init>(android.content.Context, int);\n  public android.content.Context getContext();\n  public androidx.appcompat.app.AlertDialog$Builder setTitle(java.lang.CharSequence);\n  public androidx.appcompat.app.AlertDialog$Builder setView(android.view.View);\n  public androidx.appcompat.app.AlertDialog$Builder setPositiveButton(int, android.content.DialogInterface$OnClickListener);\n  public androidx.appcompat.app.AlertDialog$Builder setNegativeButton(int, android.content.DialogInterface$OnClickListener);\n  public androidx.appcompat.app.AlertDialog create();\n}\n-dontnote android.support.v7.app.AlertDialog.Builder\n-keepclassmembers class android.support.v7.app.AlertDialog$Builder {\n  <init>(android.content.Context, int);\n  public android.content.Context getContext();\n  public android.support.v7.app.AlertDialog$Builder setTitle(java.lang.CharSequence);\n  public android.support.v7.app.AlertDialog$Builder setView(android.view.View);\n  public android.support.v7.app.AlertDialog$Builder setPositiveButton(int, android.content.DialogInterface$OnClickListener);\n  public android.support.v7.app.AlertDialog$Builder setNegativeButton(int, android.content.DialogInterface$OnClickListener);\n  public android.support.v7.app.AlertDialog create();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ARM-specific Compilation Options\nDESCRIPTION: Adds specific compilation flags for the armeabi-v7a ABI to enable NEON instruction set, ARM mode, and position-independent code.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_mpegh/src/main/jni/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(${ANDROID_ABI} MATCHES \"armeabi-v7a\")\n  add_compile_options(\"-mfpu=neon\")\n  add_compile_options(\"-marm\")\n  add_compile_options(\"-fPIC\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building FFmpeg for Android (Bash)\nDESCRIPTION: Executes the build_ffmpeg.sh script to compile FFmpeg for various Android architectures.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_ffmpeg/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd \"${FFMPEG_MODULE_PATH}/jni\" && \\\n./build_ffmpeg.sh \\\n  \"${FFMPEG_MODULE_PATH}\" \"${NDK_PATH}\" \"${HOST_PLATFORM}\" \"${ANDROID_ABI}\" \"${ENABLED_DECODERS[@]}\"\n```\n\n----------------------------------------\n\nTITLE: Preserving FlacExtractor Constructor for Reflection Access\nDESCRIPTION: Keeps the constructor with int parameter in FlacExtractor class to allow access via reflection from DefaultExtractorsFactory.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/extractor/proguard-rules.txt#2025-04-23_snippet_0\n\nLANGUAGE: proguard\nCODE:\n```\n-dontnote androidx.media3.decoder.flac.FlacExtractor\n-keepclassmembers class androidx.media3.decoder.flac.FlacExtractor {\n  <init>(int);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ELF Alignment for Android Compatibility\nDESCRIPTION: Sets linker options to enable 16 KB ELF alignment, which is important for compatibility with certain Android versions and devices.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_mpegh/src/main/jni/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Enable 16 KB ELF alignment.\ntarget_link_options(mpeghJNI\n                    PRIVATE \"-Wl,-z,max-page-size=16384\")\n```\n\n----------------------------------------\n\nTITLE: Linking FFmpeg source code (Bash)\nDESCRIPTION: Creates a symbolic link to the FFmpeg source code in the module's jni directory.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_ffmpeg/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd \"${FFMPEG_MODULE_PATH}/jni\" && \\\nln -s \"$FFMPEG_PATH\" ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Preserving MidiExtractor Constructor for Reflection Access\nDESCRIPTION: Keeps the default constructor in MidiExtractor class to allow access via reflection from DefaultExtractorsFactory.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/extractor/proguard-rules.txt#2025-04-23_snippet_2\n\nLANGUAGE: proguard\nCODE:\n```\n-dontnote androidx.media3.decoder.midi.MidiExtractor\n-keepclassmembers class androidx.media3.decoder.midi.MidiExtractor {\n  <init>();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Link Options for 16 KB ELF Alignment in CMake\nDESCRIPTION: This CMake command sets a specific link option for the iamfJNI target to enable 16 KB ELF alignment. This is likely a requirement for compatibility or performance reasons in the Android environment.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_iamf/src/main/jni/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Enable 16 KB ELF alignment.\ntarget_link_options(iamfJNI\n                    PRIVATE \"-Wl,-z,max-page-size=16384\")\n```\n\n----------------------------------------\n\nTITLE: Fetching libflac Repository for Module Build\nDESCRIPTION: Commands to clone the libflac repository from GitHub into the module's JNI directory. This is a prerequisite for building the Flac module.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_flac/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd \"${FLAC_MODULE_PATH}/jni\" && \\\ngit clone https://github.com/xiph/flac.git libflac\n```\n\n----------------------------------------\n\nTITLE: Preserving RawResourceDataSource.buildRawResourceUri Method in ProGuard\nDESCRIPTION: Prevents ProGuard from removing the buildRawResourceUri method that might appear unused due to constant folding of resource integers. This rule ensures the method is kept in the compiled code.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/datasource/proguard-rules.txt#2025-04-23_snippet_0\n\nLANGUAGE: proguard\nCODE:\n```\n-keepclassmembers class androidx.media3.datasource.RawResourceDataSource {\n  public static android.net.Uri buildRawResourceUri(int);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Demo Installation Command\nDESCRIPTION: Command line example showing how to install an ExoPlayer demo app in debug mode without optional modules using Gradle.\nSOURCE: https://github.com/androidx/media/blob/release/demos/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :demo:installNoDecoderExtensionsDebug\n```\n\n----------------------------------------\n\nTITLE: Preserving RtmpDataSource Constructor in ProGuard\nDESCRIPTION: Prevents ProGuard from removing the default constructor of RtmpDataSource class which is accessed via reflection in DefaultDataSource. Also suppresses notes about this class during ProGuard processing.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/datasource/proguard-rules.txt#2025-04-23_snippet_1\n\nLANGUAGE: proguard\nCODE:\n```\n-dontnote androidx.media3.datasource.rtmp.RtmpDataSource\n-keepclassmembers class androidx.media3.datasource.rtmp.RtmpDataSource {\n  <init>();\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching the libiamf Library from GitHub\nDESCRIPTION: Clones the libiamf repository from GitHub into the JNI directory of the IAMF module, which is required for the module to function.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_iamf/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd \"${IAMF_MODULE_PATH}/jni\" && \\\ngit clone https://github.com/AOMediaCodec/libiamf.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Proguard Rules for OkHttp Extension\nDESCRIPTION: These Proguard rules are specified according to OkHttp's official documentation to prevent warnings from dependencies. The rules instruct Proguard to ignore warnings from okio, javax.annotation and org.conscrypt packages.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/datasource_okhttp/proguard-rules.txt#2025-04-23_snippet_0\n\nLANGUAGE: proguard\nCODE:\n```\n-dontwarn okio.**\n-dontwarn javax.annotation.**\n-dontwarn org.conscrypt.**\n```\n\n----------------------------------------\n\nTITLE: Configuring Proguard Rules for IMA Extension\nDESCRIPTION: These Proguard rules prevent warnings and keep necessary classes and interfaces for the Google Interactive Media Ads (IMA) SDK. They ensure that the IMA extension functions correctly after code obfuscation.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/exoplayer_ima/proguard-rules.txt#2025-04-23_snippet_0\n\nLANGUAGE: ProGuard\nCODE:\n```\n-dontwarn com.google.ads.interactivemedia.**\n-keep class com.google.ads.interactivemedia.** { *; }\n-keep interface com.google.ads.interactivemedia.** { *; }\n-keep class com.google.obf.** { *; }\n-keep interface com.google.obf.** { *; }\n```\n\n----------------------------------------\n\nTITLE: Preserving Native Method Names from Obfuscation in Proguard\nDESCRIPTION: This rule prevents the names of native methods from being obfuscated by Proguard, ensuring that JNI (Java Native Interface) calls continue to work correctly after optimization.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_opus/proguard-rules.txt#2025-04-23_snippet_0\n\nLANGUAGE: proguard\nCODE:\n```\n-keepclasseswithmembernames class * {\n    native <methods>;\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Native Method Names in ProGuard for FFmpeg Extension\nDESCRIPTION: This rule prevents the names of native methods from being obfuscated in all classes. It's essential for maintaining the correct linking between Java and native code in the FFmpeg extension.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_ffmpeg/proguard-rules.txt#2025-04-23_snippet_0\n\nLANGUAGE: ProGuard\nCODE:\n```\n-keepclasseswithmembernames class * {\n    native <methods>;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching libmpegh Library for MPEG-H Module\nDESCRIPTION: This command clones the Fraunhofer MPEG-H decoder repository into the JNI directory of the module. It specifies the branch r2.0.0 for the clone operation.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_mpegh/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd \"${MPEGH_MODULE_PATH}/jni\" && \\\ngit clone https://github.com/Fraunhofer-IIS/mpeghdec.git --branch r2.0.0 libmpegh\n```\n\n----------------------------------------\n\nTITLE: Preserving Native Method Names in ProGuard for Android Media Library\nDESCRIPTION: This rule prevents the names of native methods from being obfuscated by ProGuard. It applies to all classes that contain native methods, ensuring that the native method names remain intact for proper JNI linking.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_av1/proguard-rules.txt#2025-04-23_snippet_0\n\nLANGUAGE: ProGuard\nCODE:\n```\n-keepclasseswithmembernames class * {\n    native <methods>;\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving SimpleDecoderOutputBuffer Class in Proguard\nDESCRIPTION: This rule keeps all members of the SimpleDecoderOutputBuffer class unobfuscated as they are accessed from native methods. This ensures proper functioning of the JNI interface after Proguard optimization.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_opus/proguard-rules.txt#2025-04-23_snippet_1\n\nLANGUAGE: proguard\nCODE:\n```\n-keep class androidx.media3.decoder.SimpleDecoderOutputBuffer {\n    *;\n}\n```\n\n----------------------------------------\n\nTITLE: Keeping Specific Method in FfmpegAudioDecoder Class\nDESCRIPTION: This rule keeps a specific private method in the FfmpegAudioDecoder class from being removed or obfuscated. The method is called from native code, so it needs to be preserved with its original name and signature.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_ffmpeg/proguard-rules.txt#2025-04-23_snippet_1\n\nLANGUAGE: ProGuard\nCODE:\n```\n-keep, includedescriptorclasses class androidx.media3.decoder.ffmpeg.FfmpegAudioDecoder {\n  private java.nio.ByteBuffer growOutputBuffer(androidx.media3.decoder.SimpleDecoderOutputBuffer, int);\n}\n```\n\n----------------------------------------\n\nTITLE: Native Methods Preservation Rule\nDESCRIPTION: Prevents obfuscation of native method names across all classes\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_mpegh/proguard-rules.txt#2025-04-23_snippet_0\n\nLANGUAGE: proguard\nCODE:\n```\n-keepclasseswithmembernames class * {\n    native <methods>;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching CPU Features Library\nDESCRIPTION: Command to clone the Google CPU features library required for the AV1 decoder module.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_av1/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd \"${AV1_MODULE_PATH}/jni\" && \\\ngit clone https://github.com/google/cpu_features\n```\n\n----------------------------------------\n\nTITLE: MPEG-H Decoder Package Preservation\nDESCRIPTION: Preserves all classes and members in the MPEG-H decoder package\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_mpegh/proguard-rules.txt#2025-04-23_snippet_2\n\nLANGUAGE: proguard\nCODE:\n```\n-keep class androidx.media3.decoder.mpegh** { *; }\n```\n\n----------------------------------------\n\nTITLE: SimpleDecoderOutputBuffer Preservation\nDESCRIPTION: Keeps all members of SimpleDecoderOutputBuffer class unobfuscated due to native method access\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_mpegh/proguard-rules.txt#2025-04-23_snippet_1\n\nLANGUAGE: proguard\nCODE:\n```\n-keep class androidx.media3.decoder.SimpleDecoderOutputBuffer {\n    *;\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Downloader Constructors for Reflection in DefaultDownloaderFactory\nDESCRIPTION: ProGuard rules to keep constructors of downloader classes that are accessed via reflection in DefaultDownloaderFactory. These rules enable offline content downloading for DASH, HLS, and SmoothStreaming formats.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/exoplayer/proguard-rules.txt#2025-04-23_snippet_2\n\nLANGUAGE: proguard\nCODE:\n```\n# Constructors accessed via reflection in DefaultDownloaderFactory\n-dontnote androidx.media3.exoplayer.dash.offline.DashDownloader\n-keepclassmembers class androidx.media3.exoplayer.dash.offline.DashDownloader {\n  <init>(androidx.media3.common.MediaItem, androidx.media3.datasource.cache.CacheDataSource$Factory, java.util.concurrent.Executor);\n}\n-dontnote androidx.media3.exoplayer.hls.offline.HlsDownloader\n-keepclassmembers class androidx.media3.exoplayer.hls.offline.HlsDownloader {\n  <init>(androidx.media3.common.MediaItem, androidx.media3.datasource.cache.CacheDataSource$Factory, java.util.concurrent.Executor);\n}\n-dontnote androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader\n-keepclassmembers class androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader {\n  <init>(androidx.media3.common.MediaItem, androidx.media3.datasource.cache.CacheDataSource$Factory, java.util.concurrent.Executor);\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Native Method Names in IAMF Extension using Proguard\nDESCRIPTION: This Proguard rule prevents the names of native methods from being obfuscated in all classes. It ensures that native method names remain intact during the obfuscation process, which is crucial for proper functioning of native code interactions.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_iamf/proguard-rules.txt#2025-04-23_snippet_0\n\nLANGUAGE: Proguard\nCODE:\n```\n-keepclasseswithmembernames class * {\n    native <methods>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for IAMF Module Setup\nDESCRIPTION: Sets up environment variables needed for the IAMF module build process, including changing to the project directory and defining the IAMF module path.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_iamf/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd \"<path to project checkout>\"\nIAMF_MODULE_PATH=\"$(pwd)/libraries/decoder_iamf/src/main\"\n```\n\n----------------------------------------\n\nTITLE: Suppressing Annotation Warnings in Proguard\nDESCRIPTION: Suppresses warnings related to checkerframework, Kotlin, and javax annotations to reduce noise in the Proguard output.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/ui/proguard-rules.txt#2025-04-23_snippet_3\n\nLANGUAGE: proguard\nCODE:\n```\n-dontwarn org.checkerframework.**\n-dontwarn kotlin.annotations.jvm.**\n-dontwarn javax.annotation.**\n```\n\n----------------------------------------\n\nTITLE: Preserving Native Methods in ProGuard Configuration\nDESCRIPTION: Prevents obfuscation of native method names across all classes. This is essential for maintaining the functionality of JNI (Java Native Interface) calls.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_flac/proguard-rules.txt#2025-04-23_snippet_0\n\nLANGUAGE: proguard\nCODE:\n```\n-keepclasseswithmembernames class * {\n    native <methods>;\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Annotation Warnings\nDESCRIPTION: Prevents ProGuard from generating warnings about checkerframework, Kotlin, and javax annotations that are used in the codebase but not required at runtime.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/extractor/proguard-rules.txt#2025-04-23_snippet_3\n\nLANGUAGE: proguard\nCODE:\n```\n-dontwarn org.checkerframework.**\n-dontwarn kotlin.annotations.jvm.**\n-dontwarn javax.annotation.**\n```\n\n----------------------------------------\n\nTITLE: Preserving VideoDecoderOutputBuffer Class in ProGuard for Android Media Library\nDESCRIPTION: This rule keeps all members of the androidx.media3.decoder.VideoDecoderOutputBuffer class unobfuscated. It's necessary because some members of this class are accessed from native methods, and obfuscating them would break the native code interactions.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_av1/proguard-rules.txt#2025-04-23_snippet_1\n\nLANGUAGE: ProGuard\nCODE:\n```\n-keep class androidx.media3.decoder.VideoDecoderOutputBuffer {\n  *;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for AV1 Module\nDESCRIPTION: Commands to set up environment variables needed for the AV1 module build process. Sets the path to the project checkout location.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_av1/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd \"<path to project checkout>\"\nAV1_MODULE_PATH=\"$(pwd)/libraries/decoder_av1/src/main\"\n```\n\n----------------------------------------\n\nTITLE: Keeping MediaRouteActionProvider Class for Cast Demo App\nDESCRIPTION: Proguard rule to retain the androidx.mediarouter.app.MediaRouteActionProvider class and all its members during code obfuscation. This rule is necessary because the class is accessed via menu.xml rather than through direct code references.\nSOURCE: https://github.com/androidx/media/blob/release/demos/cast/proguard-rules.txt#2025-04-23_snippet_0\n\nLANGUAGE: proguard\nCODE:\n```\n-keep class androidx.mediarouter.app.MediaRouteActionProvider {\n  *;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Cast Options Provider in Android Manifest\nDESCRIPTION: XML configuration to replace the default Cast options provider in the AndroidManifest.xml with a custom implementation. This allows for customization of Cast SDK behavior.\nSOURCE: https://github.com/androidx/media/blob/release/demos/cast/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data\n    android:name=\"com.google.android.gms.cast.framework.OPTIONS_PROVIDER_CLASS_NAME\"\n    android:value=\"com.example.cast.MyOptionsProvider\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding JitPack Repository in Gradle\nDESCRIPTION: This snippet demonstrates how to add the JitPack repository to the project's build script. This is necessary because the MIDI module depends on JSyn, which is hosted on JitPack.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/decoder_midi/README.md#2025-04-23_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\nrepositories {\n    maven { url 'https://jitpack.io' }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Release Notes in Markdown\nDESCRIPTION: This snippet shows how to create a hyperlink in Markdown, specifically linking to the Release Notes page on GitHub. It's used to direct users to where they can find future announcements about API integration.\nSOURCE: https://github.com/androidx/media/blob/release/demos/composition/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[Release Notes](https://github.com/androidx/media/releases)\n```\n\n----------------------------------------\n\nTITLE: Referencing Composition and CompositionPlayer APIs in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the Composition and CompositionPlayer APIs using inline code formatting in Markdown. It highlights the experimental nature of these APIs and advises users about their current status.\nSOURCE: https://github.com/androidx/media/blob/release/demos/composition/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`Composition` and `CompositionPlayer`\n```\n\n----------------------------------------\n\nTITLE: Setting up MediaPipe integration for Transformer demo (Shell)\nDESCRIPTION: This shell script sets up the necessary directory structure and copies build configuration files for integrating MediaPipe with the Transformer demo.\nSOURCE: https://github.com/androidx/media/blob/release/demos/transformer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd \"<path to MediaPipe checkout>\"\nMEDIAPIPE_ROOT=\"$(pwd)\"\nMEDIAPIPE_TRANSFORMER_ROOT=\"${MEDIAPIPE_ROOT}/mediapipe/java/com/google/mediapipe/transformer\"\ncd \"<path to the transformer demo (containing this readme)>\"\nTRANSFORMER_DEMO_ROOT=\"$(pwd)\"\nmkdir -p \"${MEDIAPIPE_TRANSFORMER_ROOT}\"\nmkdir -p \"${TRANSFORMER_DEMO_ROOT}/libs\"\ncp ${TRANSFORMER_DEMO_ROOT}/BUILD.bazel ${MEDIAPIPE_TRANSFORMER_ROOT}/BUILD\ncp ${TRANSFORMER_DEMO_ROOT}/src/withMediaPipe/assets/edge_detector_mediapipe_graph.pbtxt \\\n  ${MEDIAPIPE_TRANSFORMER_ROOT}\n```\n\n----------------------------------------\n\nTITLE: Regenerating DVB Binary Test Files Using TSDuck's tstabcomp\nDESCRIPTION: Command for regenerating all .bin files from XML sources in the DVB test data directory using the tstabcomp utility from TSDuck. This operation converts the human-readable XML test definitions into the binary format needed for testing.\nSOURCE: https://github.com/androidx/media/blob/release/libraries/test_data/src/test/assets/media/dvbsi/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$  tstabcomp -c testdata/src/test/assets/dvbsi/*.xml\n```\n\n----------------------------------------\n\nTITLE: ExoPlayer Test Module Title\nDESCRIPTION: Markdown header and description for ExoPlayer playback test module\nSOURCE: https://github.com/androidx/media/blob/release/libraries/test_exoplayer_playback/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ExoPlayer playback test module\\n\\nTests playback using ExoPlayer.\n```"
  }
]