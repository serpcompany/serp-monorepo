[
  {
    "owner": "soldair",
    "repo": "node-qrcode",
    "content": "TITLE: ES6/ES7 QR Code Generation\nDESCRIPTION: Modern JavaScript implementation using Promises and Async/Await syntax\nSOURCE: https://github.com/soldair/node-qrcode/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport QRCode from 'qrcode'\n\n// With promises\nQRCode.toDataURL('I am a pony!')\n  .then(url => {\n    console.log(url)\n  })\n  .catch(err => {\n    console.error(err)\n  })\n\n// With async/await\nconst generateQR = async text => {\n  try {\n    console.log(await QRCode.toDataURL(text))\n  } catch (err) {\n    console.error(err)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Node.js QR Code Generation\nDESCRIPTION: Examples of generating QR codes in Node.js environment using callbacks\nSOURCE: https://github.com/soldair/node-qrcode/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar QRCode = require('qrcode')\n\nQRCode.toDataURL('I am a pony!', function (err, url) {\n  console.log(url)\n})\n\nQRCode.toString('I am a pony!',{type:'terminal'}, function (err, url) {\n  console.log(url)\n})\n```\n\n----------------------------------------\n\nTITLE: Generating QR code as Data URL with custom rendering options\nDESCRIPTION: Shows how to create a QR code as a Data URL with custom options including error correction level, image type, quality, margin, and custom colors for light and dark modules.\nSOURCE: https://github.com/soldair/node-qrcode/blob/master/README.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar opts = {\n  errorCorrectionLevel: 'H',\n  type: 'image/jpeg',\n  quality: 0.3,\n  margin: 1,\n  color: {\n    dark:\"#010599FF\",\n    light:\"#FFBF60FF\"\n  }\n}\n\nQRCode.toDataURL('text', opts, function (err, url) {\n  if (err) throw err\n\n  var img = document.getElementById('image')\n  img.src = url\n})\n```\n\n----------------------------------------\n\nTITLE: Creating QR Code File with Custom Colors in JavaScript\nDESCRIPTION: This example demonstrates how to generate a QR code image file with custom colors using the QRCode.toFile method. It creates a QR code with blue dots and a transparent background, saving it to a specified file path.\nSOURCE: https://github.com/soldair/node-qrcode/blob/master/README.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nQRCode.toFile('path/to/filename.png', 'Some text', {\n  color: {\n    dark: '#00F',  // Blue dots\n    light: '#0000' // Transparent background\n  }\n}, function (err) {\n  if (err) throw err\n  console.log('done')\n})\n```\n\n----------------------------------------\n\nTITLE: Browser Implementation with Precompiled Bundle\nDESCRIPTION: Example of using QR code generator in browser with precompiled bundle\nSOURCE: https://github.com/soldair/node-qrcode/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<canvas id=\"canvas\"></canvas>\n\n<script src=\"/build/qrcode.js\"></script>\n<script>\n  QRCode.toCanvas(document.getElementById('canvas'), 'sample text', function (error) {\n    if (error) console.error(error)\n    console.log('success!');\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Browser Implementation with Module Bundlers\nDESCRIPTION: Example of using QR code generator in browser with module bundlers like Browserify or Webpack\nSOURCE: https://github.com/soldair/node-qrcode/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- index.html -->\n<html>\n  <body>\n    <canvas id=\"canvas\"></canvas>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js -> bundle.js\nvar QRCode = require('qrcode')\nvar canvas = document.getElementById('canvas')\n\nQRCode.toCanvas(canvas, 'sample text', function (error) {\n  if (error) console.error(error)\n  console.log('success!');\n})\n```\n\n----------------------------------------\n\nTITLE: Creating QR code and rendering to canvas in browser environment\nDESCRIPTION: Example of generating a QR code and drawing it on a canvas element with error correction level H. This is a browser-specific implementation that appends the canvas to a container element.\nSOURCE: https://github.com/soldair/node-qrcode/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nQRCode.toCanvas('text', { errorCorrectionLevel: 'H' }, function (err, canvas) {\n  if (err) throw err\n\n  var container = document.getElementById('container')\n  container.appendChild(canvas)\n})\n```\n\n----------------------------------------\n\nTITLE: Encoding binary data in QR code using Node Buffer\nDESCRIPTION: Demonstrates how to encode binary data in a QR code using a Node Buffer. Element values will be clamped to 0-255 even if the data contains higher values.\nSOURCE: https://github.com/soldair/node-qrcode/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Node Buffer example\n// WARNING: Element values will be clamped to 0-255 even if your data contains higher values.\nconst QRCode = require('qrcode')\n\nQRCode.toFile(\n  'foo.png',\n  [{ data: Buffer.from([253,254,255]), mode: 'byte' }],\n  ...options...,\n  ...callback...\n)\n```\n\n----------------------------------------\n\nTITLE: Converting QR code to string representation\nDESCRIPTION: Example of generating a QR code and converting it to a string representation which can be displayed in a terminal or console output.\nSOURCE: https://github.com/soldair/node-qrcode/blob/master/README.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nQRCode.toString('http://www.google.com', function (err, string) {\n  if (err) throw err\n  console.log(string)\n})\n```\n\n----------------------------------------\n\nTITLE: Encoding binary data in QR code using Uint8ClampedArray\nDESCRIPTION: Shows how to encode binary data in a QR code using a Uint8ClampedArray, which properly handles byte values for binary QR code data.\nSOURCE: https://github.com/soldair/node-qrcode/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Uint8ClampedArray example\nconst QRCode = require('qrcode')\n\nQRCode.toFile(\n  'foo.png',\n  [{ data: new Uint8ClampedArray([253,254,255]), mode: 'byte' }],\n  ...options...,\n  ...callback...\n)\n```\n\n----------------------------------------\n\nTITLE: Encoding binary data in QR code using regular array\nDESCRIPTION: Demonstrates how to encode binary data in a QR code using a regular array. Element values will be clamped to 0-255 even if the data contains higher values.\nSOURCE: https://github.com/soldair/node-qrcode/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Regular array example\n// WARNING: Element values will be clamped to 0-255 even if your data contains higher values.\nconst QRCode = require('qrcode')\nQRCode.toFile(\n  'foo.png',\n  [{ data: [253,254,255], mode: 'byte' }],\n  ...options...,\n  ...callback...\n)\n```\n\n----------------------------------------\n\nTITLE: Manually specifying QR code segments with alphanumeric and numeric modes in JavaScript\nDESCRIPTION: Demonstrates how to manually specify QR code segments with different encoding modes. This approach bypasses automatic segment optimization and allows explicit control over how data is encoded.\nSOURCE: https://github.com/soldair/node-qrcode/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n  var QRCode = require('qrcode')\n\n  var segs = [\n    { data: 'ABCDEFG', mode: 'alphanumeric' },\n    { data: '0123456', mode: 'numeric' }\n  ]\n\n  QRCode.toDataURL(segs, function (err, url) {\n    console.log(url)\n  })\n```\n\n----------------------------------------\n\nTITLE: Installing QR Code Generator via NPM\nDESCRIPTION: Commands to install the QR code generator either as a project dependency or globally for CLI usage\nSOURCE: https://github.com/soldair/node-qrcode/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save qrcode\n\nnpm install -g qrcode\n```\n\n----------------------------------------\n\nTITLE: Using Kanji mode with QR code generation in Node.js\nDESCRIPTION: Shows how to use Kanji mode for optimized encoding of Shift JIS characters by importing the optional to-sjis helper function. This allows for efficient compression of Japanese characters in QR codes.\nSOURCE: https://github.com/soldair/node-qrcode/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n  var QRCode = require('qrcode')\n  var toSJIS = require('qrcode/helper/to-sjis')\n\n  QRCode.toDataURL(kanjiString, { toSJISFunc: toSJIS }, function (err, url) {\n    console.log(url)\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing Kanji mode support with QR code in browser environment\nDESCRIPTION: Example of using Kanji mode in a browser environment with the precompiled QR code bundle. This requires loading both the main QRCode library and the tosjis helper script.\nSOURCE: https://github.com/soldair/node-qrcode/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<canvas id=\"canvas\"></canvas>\n\n<script src=\"/build/qrcode.min.js\"></script>\n<script src=\"/build/qrcode.tosjis.min.js\"></script>\n<script>\n  QRCode.toCanvas(document.getElementById('canvas'),\n    'sample text', { toSJISFunc: QRCode.toSJIS }, function (error) {\n    if (error) console.error(error)\n    console.log('success!')\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Node.js for qrcode Project\nDESCRIPTION: This command runs the test suite for the qrcode project. Contributors should execute this locally before submitting a pull request to catch any style or testing issues.\nSOURCE: https://github.com/soldair/node-qrcode/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```"
  }
]