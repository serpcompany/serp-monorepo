[
  {
    "owner": "scrapinghub",
    "repo": "extruct",
    "content": "TITLE: Extracting All Metadata Types from HTML with Extruct\nDESCRIPTION: A complete example showing how to extract all supported metadata types from a webpage using extruct. The code fetches HTML with requests, determines the base URL, and extracts metadata using extruct.extract().\nSOURCE: https://github.com/scrapinghub/extruct/blob/master/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import extruct\n>>> import requests\n>>> import pprint\n>>> from w3lib.html import get_base_url\n>>>\n>>> pp = pprint.PrettyPrinter(indent=2)\n>>> r = requests.get('https://www.optimizesmart.com/how-to-use-open-graph-protocol/')\n>>> base_url = get_base_url(r.text, r.url)\n>>> data = extruct.extract(r.text, base_url=base_url)\n>>>\n>>> pp.pprint(data)\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Metadata Syntaxes with Extruct in Python\nDESCRIPTION: Demonstrates how to extract only specific metadata syntaxes from a web page using extruct. The example shows extracting microdata, opengraph, and rdfa data from a Songkick artist page.\nSOURCE: https://github.com/scrapinghub/extruct/blob/master/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> r = requests.get('http://www.songkick.com/artists/236156-elysian-fields')\n>>> base_url = get_base_url(r.text, r.url)\n>>> data = extruct.extract(r.text, base_url, syntaxes=['microdata', 'opengraph', 'rdfa'])\n>>>\n>>> pp.pprint(data)\n{ 'microdata': [],\n  'opengraph': [ { 'namespace': { 'concerts': 'http://ogp.me/ns/fb/songkick-concerts#',\n                                  'fb': 'http://www.facebook.com/2008/fbml',\n                                  'og': 'http://ogp.me/ns#'},\n                   'properties': [ ('fb:app_id', '308540029359'),\n                                   ('og:site_name', 'Songkick'),\n                                   ('og:type', 'songkick-concerts:artist'),\n                                   ('og:title', 'Elysian Fields'),\n                                   ( 'og:description',\n                                     'Find out when Elysian Fields is next '\n                                     'playing live near you. List of all '\n                                     'Elysian Fields tour dates and concerts.'),\n                                   ( 'og:url',\n                                     'https://www.songkick.com/artists/236156-elysian-fields'),\n                                   ( 'og:image',\n                                     'http://images.sk-static.com/images/media/img/col4/20100330-103600-169450.jpg')]}],\n  'rdfa': [ { '@id': 'https://www.songkick.com/artists/236156-elysian-fields',\n              'al:ios:app_name': [{'@value': 'Songkick Concerts'}],\n              'al:ios:app_store_id': [{'@value': '438690886'}],\n              'al:ios:url': [ { '@value': 'songkick://artists/236156-elysian-fields'}],\n              'http://ogp.me/ns#description': [ { '@value': 'Find out when '\n                                                            'Elysian Fields is '\n                                                            'next playing live '\n                                                            'near you. List of '\n                                                            'all Elysian '\n                                                            'Fields tour dates '\n                                                            'and concerts.'}],\n              'http://ogp.me/ns#image': [ { '@value': 'http://images.sk-static.com/images/media/img/col4/20100330-103600-169450.jpg'}],\n              'http://ogp.me/ns#site_name': [{'@value': 'Songkick'}],\n              'http://ogp.me/ns#title': [{'@value': 'Elysian Fields'}],\n              'http://ogp.me/ns#type': [{'@value': 'songkick-concerts:artist'}],\n              'http://ogp.me/ns#url': [ { '@value': 'https://www.songkick.com/artists/236156-elysian-fields'}],\n              'http://www.facebook.com/2008/fbmlapp_id': [ { '@value': '308540029359'}]}]}\n```\n\n----------------------------------------\n\nTITLE: Uniforming Metadata Output with Extruct in Python\nDESCRIPTION: Demonstrates how to normalize different metadata formats to a consistent structure using the uniform parameter. This makes working with different metadata syntaxes easier by providing a common structure.\nSOURCE: https://github.com/scrapinghub/extruct/blob/master/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> r = requests.get('http://www.songkick.com/artists/236156-elysian-fields')\n>>> base_url = get_base_url(r.text, r.url)\n>>> data = extruct.extract(r.text, base_url, syntaxes=['microdata', 'opengraph', 'rdfa'], uniform=True)\n>>>\n>>> pp.pprint(data)\n{ 'microdata': [],\n  'opengraph': [ { '@context': { 'concerts': 'http://ogp.me/ns/fb/songkick-concerts#',\n                               'fb': 'http://www.facebook.com/2008/fbml',\n                               'og': 'http://ogp.me/ns#'},\n                 '@type': 'songkick-concerts:artist',\n                 'fb:app_id': '308540029359',\n                 'og:description': 'Find out when Elysian Fields is next '\n                                   'playing live near you. List of all '\n                                   'Elysian Fields tour dates and concerts.',\n                 'og:image': 'http://images.sk-static.com/images/media/img/col4/20100330-103600-169450.jpg',\n                 'og:site_name': 'Songkick',\n                 'og:title': 'Elysian Fields',\n                 'og:url': 'https://www.songkick.com/artists/236156-elysian-fields'}],\n  'rdfa': [ { '@id': 'https://www.songkick.com/artists/236156-elysian-fields',\n              'al:ios:app_name': [{'@value': 'Songkick Concerts'}],\n              'al:ios:app_store_id': [{'@value': '438690886'}],\n              'al:ios:url': [ { '@value': 'songkick://artists/236156-elysian-fields'}],\n              'http://ogp.me/ns#description': [ { '@value': 'Find out when '\n                                                            'Elysian Fields is '\n                                                            'next playing live '\n                                                            'near you. List of '\n                                                            'all Elysian '\n                                                            'Fields tour dates '\n                                                            'and concerts.'}],\n              'http://ogp.me/ns#image': [ { '@value': 'http://images.sk-static.com/images/media/img/col4/20100330-103600-169450.jpg'}],\n              'http://ogp.me/ns#site_name': [{'@value': 'Songkick'}],\n              'http://ogp.me/ns#title': [{'@value': 'Elysian Fields'}],\n              'http://ogp.me/ns#type': [{'@value': 'songkick-concerts:artist'}],\n              'http://ogp.me/ns#url': [ { '@value': 'https://www.songkick.com/artists/236156-elysian-fields'}],\n              'http://www.facebook.com/2008/fbmlapp_id': [ { '@value': '308540029359'}]}]}\n```\n\n----------------------------------------\n\nTITLE: Using HTML Tree Instead of String with Extruct in Python\nDESCRIPTION: Shows how to use a parsed HTML tree instead of an HTML string when calling extruct. This approach can be more efficient when the HTML is already parsed for other purposes.\nSOURCE: https://github.com/scrapinghub/extruct/blob/master/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> # using the request from the previous example\n>>> base_url = get_base_url(r.text, r.url)\n>>> from extruct.utils import parse_html\n>>> tree = parse_html(r.text)\n>>> data = extruct.extract(tree, base_url, syntaxes=['microdata', 'opengraph', 'rdfa'])\n```\n\n----------------------------------------\n\nTITLE: Retrieving HTML Node References with Extruct in Python\nDESCRIPTION: Shows how to get references to the original HTML nodes for extracted microdata items. This feature allows for further processing of the HTML elements containing the structured data.\nSOURCE: https://github.com/scrapinghub/extruct/blob/master/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> r = requests.get('http://www.rugpadcorner.com/shop/no-muv/')\n>>> base_url = get_base_url(r.text, r.url)\n>>> data = extruct.extract(r.text, base_url, syntaxes=['microdata'], return_html_node=True)\n>>>\n>>> pp.pprint(data)\n{ 'microdata': [ { 'htmlNode': <Element div at 0x7f10f8e6d3b8>,\n                   'properties': { 'description': 'KEEP RUGS FLAT ON CARPET!\\n'\n                                                  'Not your thin sticky pad, '\n                                                  'No-Muv is truly the best!',\n                                   'image': ['', ''],\n                                   'name': ['No-Muv', 'No-Muv'],\n                                   'offers': [ { 'htmlNode': <Element div at 0x7f10f8e6d138>,\n                                                 'properties': { 'availability': 'http://schema.org/InStock',\n                                                                 'price': 'Price:  '\n                                                                          '$45'},\n                                                 'type': 'http://schema.org/Offer'},\n                                               { 'htmlNode': <Element div at 0x7f10f8e60f48>,\n                                                 'properties': { 'availability': 'http://schema.org/InStock',\n                                                                 'price': '(Select '\n                                                                          'Size/Shape '\n                                                                          'for '\n                                                                          'Pricing)'},\n                                                 'type': 'http://schema.org/Offer'}],\n                                   'ratingValue': ['5.00', '5.00']},\n                   'type': 'http://schema.org/Product'}]}\n```\n\n----------------------------------------\n\nTITLE: Extracting Microdata with MicrodataExtractor in Python\nDESCRIPTION: This snippet demonstrates how to use the MicrodataExtractor class from the Extruct library to extract Microdata from HTML. It shows the extraction of work-related information from HTML markup.\nSOURCE: https://github.com/scrapinghub/extruct/blob/master/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> mde = MicrodataExtractor()\n>>> data = mde.extract(html)\n>>> pp.pprint(data)\n[{'properties': {'license': 'http://www.opensource.org/licenses/mit-license.php',\n                'title': 'The house I found.',\n                'work': 'http://www.example.com/images/house.jpeg'},\n  'type': 'http://n.whatwg.org/work'},\n {'properties': {'license': 'http://www.opensource.org/licenses/mit-license.php',\n                'title': 'The mailbox.',\n                'work': 'http://www.example.com/images/mailbox.jpeg'},\n  'type': 'http://n.whatwg.org/work'}]\n```\n\n----------------------------------------\n\nTITLE: Extracting JSON-LD with JsonLdExtractor in Python\nDESCRIPTION: This snippet shows how to use the JsonLdExtractor class from the Extruct library to extract JSON-LD data from HTML. It extracts person-related information embedded in a script tag.\nSOURCE: https://github.com/scrapinghub/extruct/blob/master/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> jslde = JsonLdExtractor()\n\n>>> data = jslde.extract(html)\n>>> pp.pprint(data)\n[{'@context': 'http://schema.org',\n  '@type': 'Person',\n  'additionalName': 'Johnny',\n  'address': {'@type': 'PostalAddress',\n              'addressLocality': 'Wonderland',\n              'addressRegion': 'Georgia',\n              'streetAddress': '1234 Peach Drive'},\n  'affiliation': 'University of Dreams',\n  'jobTitle': 'Graduate research assistant',\n  'name': 'John Doe',\n  'url': 'http://www.example.com'}]\n```\n\n----------------------------------------\n\nTITLE: Extracting RDFa with RDFaExtractor in Python\nDESCRIPTION: This snippet demonstrates the use of the RDFaExtractor class from the Extruct library to extract RDFa data from HTML. It extracts blog post information using RDFa markup.\nSOURCE: https://github.com/scrapinghub/extruct/blob/master/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> rdfae = RDFaExtractor()\n>>> pp.pprint(rdfae.extract(html, base_url='http://www.example.com/index.html'))\n[{'@id': 'http://www.example.com/alice/posts/trouble_with_bob',\n  '@type': ['http://schema.org/BlogPosting'],\n  'http://purl.org/dc/terms/creator': [{'@id': 'http://www.example.com/index.html#me'}],\n  'http://purl.org/dc/terms/title': [{'@value': 'The trouble with Bob'}],\n  'http://schema.org/articleBody': [{'@value': '\\n'\n                                               '        The trouble with Bob '\n                                               'is that he takes much better '\n                                               'photos than I do:\\n'\n                                               '      '}],\n  'http://schema.org/creator': [{'@id': 'http://www.example.com/index.html#me'}]}]\n```\n\n----------------------------------------\n\nTITLE: Extracting Open Graph Data with OpenGraphExtractor in Python\nDESCRIPTION: This snippet shows how to use the OpenGraphExtractor class from the Extruct library to extract Open Graph metadata from HTML. It extracts various Open Graph properties from meta tags.\nSOURCE: https://github.com/scrapinghub/extruct/blob/master/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> opengraphe = OpenGraphExtractor()\n>>> pp.pprint(opengraphe.extract(html))\n[{\"namespace\": {\n      \"og\": \"http://ogp.me/ns#\"\n  },\n  \"properties\": [\n      [\n          \"og:title\",\n          \"Himanshu's Open Graph Protocol\"\n      ],\n      [\n          \"og:type\",\n          \"article\"\n      ],\n      [\n          \"og:url\",\n          \"https://www.eventeducation.com/test.php\"\n      ],\n      [\n          \"og:image\",\n          \"https://www.eventeducation.com/images/982336_wedding_dayandouan_th.jpg\"\n      ],\n      [\n          \"og:site_name\",\n          \"Event Education\"\n      ],\n      [\n          \"og:description\",\n          \"Event Education provides free courses on event planning and management to event professionals worldwide.\"\n      ]\n    ]\n }]\n```\n\n----------------------------------------\n\nTITLE: Extracting Microformats with MicroformatExtractor in Python\nDESCRIPTION: This snippet demonstrates the use of the MicroformatExtractor class from the Extruct library to extract Microformat data from HTML. It extracts h-entry and h-card information from the HTML markup.\nSOURCE: https://github.com/scrapinghub/extruct/blob/master/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> microformate = MicroformatExtractor()\n>>> data = microformate.extract(html)\n>>> pp.pprint(data)\n[{\"type\": [\n      \"h-entry\"\n  ],\n  \"properties\": {\n      \"name\": [\n          \"Microformats are amazing\"\n      ],\n      \"author\": [\n          {\n              \"type\": [\n                  \"h-card\"\n              ],\n              \"properties\": {\n                  \"name\": [\n                      \"W. Developer\"\n                  ],\n                  \"url\": [\n                      \"http://example.com\"\n                  ]\n              },\n              \"value\": \"W. Developer\"\n          }\n      ],\n      \"published\": [\n          \"2013-06-13 12:00:00\"\n      ],\n      \"summary\": [\n          \"In which I extoll the virtues of using microformats.\"\n      ],\n      \"content\": [\n\n\n```\n\n----------------------------------------\n\nTITLE: Extracting Dublin Core Metadata with Python Extruct\nDESCRIPTION: Demonstrates how to use the DublinCoreExtractor class to extract Dublin Core metadata from HTML content. The example shows initialization, extraction, and pretty printing of Dublin Core elements including title, creator, identifiers and other metadata fields.\nSOURCE: https://github.com/scrapinghub/extruct/blob/master/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> import pprint\n>>> pp = pprint.PrettyPrinter(indent=2)\n>>> from extruct.dublincore import DublinCoreExtractor\n>>> html = '''<head profile=\"http://dublincore.org/documents/dcq-html/\">\n... <title>Expressing Dublin Core in HTML/XHTML meta and link elements</title>\n... <link rel=\"schema.DC\" href=\"http://purl.org/dc/elements/1.1/\" />\n... <link rel=\"schema.DCTERMS\" href=\"http://purl.org/dc/terms/\" />\n...\n...\n... <meta name=\"DC.title\" lang=\"en\" content=\"Expressing Dublin Core\n... in HTML/XHTML meta and link elements\" />\n... <meta name=\"DC.creator\" content=\"Andy Powell, UKOLN, University of Bath\" />\n... <meta name=\"DCTERMS.issued\" scheme=\"DCTERMS.W3CDTF\" content=\"2003-11-01\" />\n... <meta name=\"DC.identifier\" scheme=\"DCTERMS.URI\"\n... content=\"http://dublincore.org/documents/dcq-html/\" />\n... <link rel=\"DCTERMS.replaces\" hreflang=\"en\"\n... href=\"http://dublincore.org/documents/2000/08/15/dcq-html/\" />\n... <meta name=\"DCTERMS.abstract\" content=\"This document describes how\n... qualified Dublin Core metadata can be encoded\n... in HTML/XHTML &lt;meta&gt; elements\" />\n... <meta name=\"DC.format\" scheme=\"DCTERMS.IMT\" content=\"text/html\" />\n... <meta name=\"DC.type\" scheme=\"DCTERMS.DCMIType\" content=\"Text\" />\n... <meta name=\"DC.Date.modified\" content=\"2001-07-18\" />\n... <meta name=\"DCTERMS.modified\" content=\"2001-07-18\" />'''\n>>> dublinlde = DublinCoreExtractor()\n>>> data = dublinlde.extract(html)\n>>> pp.pprint(data)\n```\n\n----------------------------------------\n\nTITLE: Using MicrodataExtractor Directly in Python\nDESCRIPTION: Demonstrates how to use the MicrodataExtractor directly without the main extruct interface. This example shows the beginning of initializing the extractor for W3C microdata.\nSOURCE: https://github.com/scrapinghub/extruct/blob/master/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> import pprint\n>>> pp = pprint.PrettyPrinter(indent=2)\n>>>\n>>> from extruct.w3cmicrodata import MicrodataExtractor\n>>>\n>>> # example from http://www.w3.org/TR/microdata/#associating-names-with-items\n>>> html = \"\"\"<!DOCTYPE HTML>\n... <html>\n...  <head>\n...   <title>Photo gallery</title>\n...  </head>\n...  <body>\n...   <h1>My photos</h1>\n```\n\n----------------------------------------\n\nTITLE: Command Line Tool Usage Examples\nDESCRIPTION: Demonstrates usage of the Extruct command line tool to extract metadata from web pages. Shows basic usage and how to specify particular syntax types for extraction.\nSOURCE: https://github.com/scrapinghub/extruct/blob/master/README.rst#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nextruct \"http://example.com\"\nextruct \"http://example.com\" --syntaxes microdata json-ld\n```\n\n----------------------------------------\n\nTITLE: Installing Extruct via pip\nDESCRIPTION: Simple pip command to install the extruct package from PyPI. This is the recommended way to install the library.\nSOURCE: https://github.com/scrapinghub/extruct/blob/master/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install extruct\n```\n\n----------------------------------------\n\nTITLE: Installing Command Line Tool Dependencies\nDESCRIPTION: Shows how to install the Extruct library with CLI dependencies using pip. The command line tool requires the requests library which is installed via the cli extra requirements.\nSOURCE: https://github.com/scrapinghub/extruct/blob/master/README.rst#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npip install 'extruct[cli]'\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Extruct Project Using pip\nDESCRIPTION: A list of Python package dependencies required for the Extruct project. These packages support HTML/XML processing (lxml), HTTP requests, RDF processing (rdflib, pyrdfa3), microformat parsing (mf2py), web utilities (w3lib), HTML text extraction, and JSON handling (jstyleson).\nSOURCE: https://github.com/scrapinghub/extruct/blob/master/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# project requirements, install them using following command:\n# pip install -r requirements.txt\nlxml\nlxml-html-clean\nrequests\nrdflib>=6.0.0\npyrdfa3\nmf2py>=1.1.0\nw3lib\nhtml-text\njstyleson\n```\n\n----------------------------------------\n\nTITLE: Development Environment Setup\nDESCRIPTION: Instructions for setting up a development environment using virtualenv and installing development dependencies.\nSOURCE: https://github.com/scrapinghub/extruct/blob/master/README.rst#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmkvirtualenv extruct\npip install -r requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Python Development Dependencies\nDESCRIPTION: A pip requirements file that extends the base requirements.txt and adds development-specific packages like tox for testing, bumpversion for version management, pytest for unit testing, black for code formatting, and pre-commit for git hooks.\nSOURCE: https://github.com/scrapinghub/extruct/blob/master/requirements-dev.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-r requirements.txt\n\ntox\nbumpversion\n\npytest\npytest-cov\nreadme_renderer\nmock\nblack\npre-commit\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Commands for running the test suite both in the current Python environment and across multiple Python versions using tox.\nSOURCE: https://github.com/scrapinghub/extruct/blob/master/README.rst#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npy.test tests\ntox\n```"
  }
]