[
  {
    "owner": "joke2k",
    "repo": "faker",
    "content": "TITLE: Creating and Managing Locale-Specific Faker Instances in Python\nDESCRIPTION: This snippet demonstrates how to instantiate a Faker object with multiple locales, access internal generators for specific locales, set seeds for reproducibility, and generate locale-specific fake data such as names and zip codes. It also shows how to handle missing locales and invoke locale-specific methods, with attention to potential exceptions.\nSOURCE: https://github.com/joke2k/faker/blob/master/docs/fakerclass.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom collections import OrderedDict\nfrom faker import Faker\nlocales = OrderedDict([\n    ('en-US', 1),\n    ('en-PH', 2),\n    ('ja_JP', 3),\n])\nfake = Faker(locales)\n\n# Get the list of locales specified during instantiation\nfake.locales\n\n# Get the list of internal generators of this `Faker` instance\nfake.factories\n\n# Get the internal generator for 'en_US' locale\nfake['en_US']\n\n# Get the internal generator for 'en_PH' locale\nfake['en_PH']\n\n# Get the internal generator for 'ja_JP' locale\nfake['ja_JP']\n\n# Will raise a KeyError as 'en_GB' was not included\nfake['en_GB']\n\n# Set the seed value of the shared `random.Random` object\n# across all internal generators that will ever be created\nFaker.seed(0)\n\n# Creates and seeds a unique `random.Random` object for\n# each internal generator of this `Faker` instance\nfake.seed_instance(0)\n\n# Creates and seeds a unique `random.Random` object for\n# the en_US internal generator of this `Faker` instance\nfake.seed_locale('en_US', 0)\n\n# Generate a name based on the provided weights\n# en_US - 16.67% of the time (1 / (1 + 2 + 3))\n# en_PH - 33.33% of the time (2 / (1 + 2 + 3))\n# ja_JP - 50.00% of the time (3 / (1 + 2 + 3))\nfake.name()\n\n# Generate a name under the en_US locale\nfake['en-US'].name()\n\n# Generate a zipcode based on the provided weights\n# Note: en_PH does not support the zipcode provider method\n# en_US - 25% of the time (1 / (1 + 3))\n# ja_JP - 75% of the time (3 / (1 + 3))\nfake.zipcode()\n\n# Generate a zipcode under the ja_JP locale\nfake['ja_JP'].zipcode()\n\n# Will raise an AttributeError\nfake['en_PH'].zipcode()\n\n# Generate a Luzon province name\n# Note: only en_PH out of the three supports this provider method\nfake.luzon_province()\n\n# Generate a Luzon province name\nfake['en_PH'].luzon_province()\n\n# Will raise an AttributeError\nfake['ja_JP'].luzon_province()\n```\n\n----------------------------------------\n\nTITLE: Corrected Faker.seed() Usage\nDESCRIPTION: This snippet illustrates the correct way to call the seed() method after the changes introduced in Faker 2.0.4. The seed() method must be called from the Faker class itself, not from a Faker instance.\nSOURCE: https://github.com/joke2k/faker/blob/master/docs/fakerclass.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom faker import Faker\nfake = Faker()\nFaker.seed(0)\n```\n\n----------------------------------------\n\nTITLE: Using the Unique Attribute in Faker for Generating Unique Data\nDESCRIPTION: This snippet explains how to utilize the `.unique` attribute of the Faker instance to ensure generated values are unique throughout the lifetime of the object. It includes examples of generating large numbers of unique integers, clearing the uniqueness cache, and underscores limitations such as the requirement for hashable arguments and return values. Additionally, it highlights the potential for exceptions if uniqueness constraints cannot be met.\nSOURCE: https://github.com/joke2k/faker/blob/master/docs/fakerclass.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport faker\n\nfake = faker.Faker()\n\n# Generate 1000 unique random integers\nnumbers = set(fake.unique.random_int() for i in range(1000))\nassert len(numbers) == 1000\n\n# Clear the cache to allow repeated values\nfake.unique.clear()\n\n# Generate unique integers with specific range arguments\nnumbers = set(fake.unique.random_int(min=1, max=10) for i in range(10))\nother_numbers = set(fake.unique.random_int(min=1, max=5) for i in range(5))\nassert other_numbers.issubset(numbers)\n\n# Handling exhaustion of unique values causing an exception\nfor i in range(3):\n    fake.unique.boolean()  # May raise UniquenessException if no unique values available\n\n# Note: Only hashable arguments and return values can be used with `.unique`\nfake.unique.profile()  # TypeError: unhashable type: 'dict'\n```\n\n----------------------------------------\n\nTITLE: Faker with Multiple Locales (List)\nDESCRIPTION: This demonstrates how to initialize Faker with a list of locales to enable multiple locale mode. Duplicates are removed during normalization. The `locales` attribute displays the unique locales.\nSOURCE: https://github.com/joke2k/faker/blob/master/docs/fakerclass.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom faker import Faker\nfake = Faker(['en-US', 'en_US', 'en_US', 'en-US'])\n\n# Will return ['en_US']\nfake.locales\n\n# Get reference to en_US generator\nus1 = fake['en_US']\n\n# Get reference to en-US generator\nus2 = fake['en-US']\n\n# Will return True\nus1 == us2\n```\n\n----------------------------------------\n\nTITLE: Checking for None Using 'is' Operator in Python\nDESCRIPTION: This Python code snippet demonstrates the correct usage of the 'is' operator to check if a variable is None, in line with flake8 rule E711. It assumes the presence of a variable named my_var and conditionally executes code when my_var is None. Dependencies include Python 3 syntax, and inputs/outputs depend on the encapsulated operation within the conditional block. It prevents issues that can arise when comparing objects to None using '==' instead of 'is'.\nSOURCE: https://github.com/joke2k/faker/blob/master/docs/coding_style.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nif my_var is None:\n    ...  # do something\n```\n\n----------------------------------------\n\nTITLE: Faker with Multiple Locales (OrderedDict)\nDESCRIPTION: This shows how to use an OrderedDict to initialize Faker with multiple locales, providing weights for each locale. Duplicates are removed during the normalization process, and the `locales` attribute reflects the unique locales.\nSOURCE: https://github.com/joke2k/faker/blob/master/docs/fakerclass.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import OrderedDict\nfrom faker import Faker\n\nlocale_list = ['en-US', 'ja-JP', 'en_US']\nfake1 = Faker(locale_list)\n\n# Will return ['en_US', 'ja_JP']\nfake1.locales\n\nlocale_odict = OrderedDict([\n    ('en-US', 1),\n    ('ja-JP', 2),\n    ('en_US', 2),\n])\nfake2 = Faker(locale_odict)\n\n# Will return ['en_US', 'ja_JP']\nfake2.locales\n```\n\n----------------------------------------\n\nTITLE: Formatting Code Using Black - Shell\nDESCRIPTION: This shell command formats the Python code in accordance with the black code style, specifying a maximum line length of 120 characters. It requires the black formatter to be installed in the working environment. Running this command ensures automatic application of line length and trailing comma preferences across the project, improving code readability and uniformity. No input parameters are required; it is executed directly from the command line.\nSOURCE: https://github.com/joke2k/faker/blob/master/docs/coding_style.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nblack --line-length 120\n```\n\n----------------------------------------\n\nTITLE: Running All Tests in Faker Project (bash)\nDESCRIPTION: This snippet demonstrates how to execute all tests within the Faker project using the Tox testing framework. The command runs all tests, including those newly added to make sure all tests pass. Before running this command, you should install tox using the command mentioned in previous example. The output indicates which tests have failed, which passed, or which have been skipped.\nSOURCE: https://github.com/joke2k/faker/blob/master/CONTRIBUTING.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tox\n```\n\n----------------------------------------\n\nTITLE: Installing Tox for Testing in Faker Project (bash)\nDESCRIPTION: This snippet installs the Tox package using pip. Tox is a tool for automating and standardizing tests in Python projects. The command installs Tox, which is necessary to run tests in the Faker project, ensuring code quality and preventing regressions.  Requires Python and pip to be installed.\nSOURCE: https://github.com/joke2k/faker/blob/master/CONTRIBUTING.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install tox\n```\n\n----------------------------------------\n\nTITLE: Reverting to Old Faker Shortcut\nDESCRIPTION: This code snippet shows how to revert to using the old Faker shortcut (Factory.create) to avoid the changes introduced with the new Faker proxy class. This approach sacrifices multiple locale support and subclassing.\nSOURCE: https://github.com/joke2k/faker/blob/master/docs/fakerclass.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom faker.factory import Factory\nFaker = Factory.create\nfake = Faker()\nfake.seed(0)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Faker.seed() Usage\nDESCRIPTION: This example shows the incorrect way to call the seed() method on a Faker instance, which will result in a TypeError. This usage is deprecated.\nSOURCE: https://github.com/joke2k/faker/blob/master/docs/fakerclass.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom faker import Faker\nfake = Faker()\nfake.seed(0)  # This will raise a TypeError\n```\n\n----------------------------------------\n\nTITLE: TypeError on Faker Instance Seed Call\nDESCRIPTION: This code snippet demonstrates the TypeError that is raised when attempting to call the seed() method on a Faker object instance in versions after 2.0.4. The seed() method should be called directly from the Faker class instead.\nSOURCE: https://github.com/joke2k/faker/blob/master/docs/fakerclass.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTypeError: Calling `.seed()` on instances is deprecated. Use the class method `Faker.seed()` instead.\n```\n\n----------------------------------------\n\nTITLE: Resulting Processed Docstring After Sample Generation (Python)\nDESCRIPTION: Shows how the previous source docstring (with multiple `:sample:` lines) is transformed by the Sphinx preprocessing step during documentation build. The original `:sample:` lines are removed, and the generated sample code blocks (one for each valid `:sample:` line found) are collected and appended to the end of the docstring under a new `:examples:` heading.\nSOURCE: https://github.com/joke2k/faker/blob/master/docs/writing-docs.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Resulting docstring (more or less) after preprocessing\ndef foo():\n    \"\"\"Summary line\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n    Fusce auctor faucibus condimentum.\n\n\n    Duis posuere lacinia porta.\n    Quisque mauris nisl, mattis sed ornare eget, accumsan sit amet mauris.\n\n    :examples:\n\n    >>> Faker.seed(0)\n    >>> for _ in range(5):\n    ...     fake.foo()\n    ...\n    1\n    1\n    1\n    1\n    1\n\n    >>> Faker.seed(1000)\n    >>> for _ in range(10):\n    ...     fake.foo()\n    ...\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    \"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Example Source Docstring with Multiple `:sample:` Directives (Python)\nDESCRIPTION: Provides an example of a Python function's source docstring containing standard documentation text along with multiple `:sample:` directives interspersed within it. This shows how the directives might appear in the original source code before Sphinx processing.\nSOURCE: https://github.com/joke2k/faker/blob/master/docs/writing-docs.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Source code docstring\ndef foo():\n    \"\"\"Summary line\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n    Fusce auctor faucibus condimentum.\n\n    :sample:\n\n    Duis posuere lacinia porta.\n    Quisque mauris nisl, mattis sed ornare eget, accumsan sit amet mauris.\n\n    :sample size=10 seed=1000:\n    \"\"\"\n    return 1\n```\n\n----------------------------------------\n\nTITLE: Generating Default Sample Usage with `:sample:` (Python)\nDESCRIPTION: Shows the Python code block automatically generated by Sphinx's docstring preprocessor when a simple `:sample:` directive (without parameters) is encountered in a provider method's docstring. It demonstrates seeding Faker with 0 and calling the `method1` 5 times (the default).\nSOURCE: https://github.com/joke2k/faker/blob/master/docs/writing-docs.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> Faker.seed(0)\n>>> for _ in range(5):\n...     fake.method1()\n...\n# Output 1\n# Output 2\n# Output 3\n# Output 4\n# Output 5\n```\n\n----------------------------------------\n\nTITLE: Generating Customized Sample Usage with `:sample:` (Python)\nDESCRIPTION: Illustrates the Python code generated when the `:sample:` directive includes `size` and keyword arguments (`KWARGS`). This example shows generating 10 samples by calling `method1` with specific keyword arguments `a=1, b=2, c=3` after seeding with the default value 0.\nSOURCE: https://github.com/joke2k/faker/blob/master/docs/writing-docs.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> Faker.seed(0)\n>>> for _ in range(10):\n...     fake.method1(a=1, b=2, c=3)\n...\n# Output 1\n# Output 2\n# Output 3\n# Output 4\n# Output 5\n# Output 6\n# Output 7\n# Output 8\n# Output 9\n# Output 10\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Usage with Multi-line Arguments (Python)\nDESCRIPTION: Displays the resulting Python code generated by Sphinx for a `:sample:` directive with multi-line keyword arguments (as shown in the previous text snippet). It demonstrates how the arguments are correctly passed to the `method1` call within the loop for 25 iterations.\nSOURCE: https://github.com/joke2k/faker/blob/master/docs/writing-docs.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> Faker.seed(12345)\n>>> for _ in range(25):\n...     fake.method1(arg1='very long value, unfortunately', arg2='yet another long value')\n...\n# Output 1\n# Output 2\n# ...\n# Output 24\n# Output 25\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Usage with a Specific Seed (Python)\nDESCRIPTION: Demonstrates the Python code generated when the `:sample:` directive includes the `seed` parameter (e.g., `seed=12345`). This allows for reproducible output, useful for showcasing specific results that might be rare under the default seed. The example also includes passing keyword arguments (`a=2`).\nSOURCE: https://github.com/joke2k/faker/blob/master/docs/writing-docs.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> Faker.seed(12345)\n>>> for _ in range(5):\n...     fake.method1(a=2)\n...\n# Output 1\n# Output 2\n# Output 3\n# Output 4\n# Output 5\n```\n\n----------------------------------------\n\nTITLE: Defining `:sample:` with Multi-line Keyword Arguments (Text)\nDESCRIPTION: Shows how to format the `:sample:` directive in a docstring when the keyword arguments (`KWARGS`) list is long and needs to span multiple lines, mimicking Python's syntax for multi-line argument lists. This example sets size, seed, and two string arguments.\nSOURCE: https://github.com/joke2k/faker/blob/master/docs/writing-docs.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n:sample size=25 seed=12345: arg1='very long value, unfortunately',\n                              arg2='yet another long value'\n```\n\n----------------------------------------\n\nTITLE: Defining the `:sample:` Pseudo-Role Syntax (Text)\nDESCRIPTION: Explains the syntax for the custom `:sample:` pseudo-role used within docstrings to trigger automatic sample usage generation. It details the optional `size` (number of samples, default 5), `seed` (initial RNG seed, default 0), and `KWARGS` (keyword arguments passed to the provider method) parameters.\nSOURCE: https://github.com/joke2k/faker/blob/master/docs/writing-docs.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n:sample[ size=SIZE][ seed=SEED]:[ KWARGS]\n```"
  }
]