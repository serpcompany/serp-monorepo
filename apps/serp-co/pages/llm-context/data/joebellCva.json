[
  {
    "owner": "joe-bell",
    "repo": "cva",
    "content": "TITLE: Implementing Compound Variants with CVA in TypeScript\nDESCRIPTION: This snippet shows how to create compound variants that apply when multiple other variant conditions are met. It includes an example of a button component with intent and size variants.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/getting-started/variants.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cva } from \"cva\";\n\nconst button = cva({\n  base: \"…\",\n  variants: {\n    intent: { primary: \"…\", secondary: \"…\" },\n    size: { small: \"…\", medium: \"…\" },\n  },\n  compoundVariants: [\n    // Applied via:\n    //   `button({ intent: \"primary\", size: \"medium\" })`\n    {\n      intent: \"primary\",\n      size: \"medium\",\n      class: \"…\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Button Component with CVA in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a basic button component using CVA to handle variant classes. It includes defining base styles, variants for intent, size, and disabled states, compound variants for combined states, and default variants.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/getting-started/variants.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// components/button.ts\nimport { cva } from \"class-variance-authority\";\n\nconst button = cva([\"font-semibold\", \"border\", \"rounded\"], {\n  variants: {\n    intent: {\n      primary: [\"bg-blue-500\", \"text-white\", \"border-transparent\"],\n      // **or**\n      // primary: \"bg-blue-500 text-white border-transparent hover:bg-blue-600\",\n      secondary: [\"bg-white\", \"text-gray-800\", \"border-gray-400\"],\n    },\n    size: {\n      small: [\"text-sm\", \"py-1\", \"px-2\"],\n      medium: [\"text-base\", \"py-2\", \"px-4\"],\n    },\n    // `boolean` variants are also supported!\n    disabled: {\n      false: null,\n      true: [\"opacity-50\", \"cursor-not-allowed\"],\n    },\n  },\n  compoundVariants: [\n    {\n      intent: \"primary\",\n      disabled: false,\n      class: \"hover:bg-blue-600\",\n    },\n    {\n      intent: \"secondary\",\n      disabled: false,\n      class: \"hover:bg-gray-100\",\n    },\n    {\n      intent: \"primary\",\n      size: \"medium\",\n      // **or** if you're a React.js user, `className` may feel more consistent:\n      // className: \"uppercase\"\n      class: \"uppercase\",\n    },\n  ],\n  defaultVariants: {\n    intent: \"primary\",\n    size: \"medium\",\n    disabled: false,\n  },\n});\n\nbutton();\n// => \"font-semibold border rounded bg-blue-500 text-white border-transparent text-base py-2 px-4 hover:bg-blue-600 uppercase\"\n\nbutton({ disabled: true });\n// => \"font-semibold border rounded bg-blue-500 text-white border-transparent text-base py-2 px-4 opacity-50 cursor-not-allowed uppercase\"\n\nbutton({ intent: \"secondary\", size: \"small\" });\n// => \"font-semibold border rounded bg-white text-gray-800 border-gray-400 text-sm py-1 px-2 hover:bg-gray-100\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Component with CVA and 11ty\nDESCRIPTION: This snippet demonstrates how to create a button component in 11ty using Class Variance Authority (CVA) with Tailwind CSS. It defines a button with different variants for intent (primary/secondary) and size (small/medium), allowing for flexible styling through props. The component also includes compound variants and default variant values.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/examples/11ty.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// button.11ty.js\nconst { cva } = require(\"class-variance-authority\");\n\n// ⚠️ Disclaimer: Use of Tailwind CSS is optional\nconst button = cva(\"button\", {\n  variants: {\n    intent: {\n      primary: [\n        \"bg-blue-500\",\n        \"text-white\",\n        \"border-transparent\",\n        \"hover:bg-blue-600\",\n      ],\n      secondary: [\n        \"bg-white\",\n        \"text-gray-800\",\n        \"border-gray-400\",\n        \"hover:bg-gray-100\",\n      ],\n    },\n    size: {\n      small: [\"text-sm\", \"py-1\", \"px-2\"],\n      medium: [\"text-base\", \"py-2\", \"px-4\"],\n    },\n  },\n  compoundVariants: [{ intent: \"primary\", size: \"medium\", class: \"uppercase\" }],\n  defaultVariants: {\n    intent: \"primary\",\n    size: \"medium\",\n  },\n});\n\nmodule.exports = function ({ label, intent, size }) {\n  return `<button class=\"${button({ intent, size })}\">${label}</button>`;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Button Variants with CVA in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a basic button component using CVA to handle variant classes. It includes variants for intent and size, as well as compound variants and default variants.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/getting-started/variants.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cva } from \"cva\";\n\nconst button = cva({\n  base: \"rounded border font-semibold\",\n  // **or**\n  // base: [\"font-semibold\", \"border\", \"rounded\"],\n  variants: {\n    intent: {\n      primary: \"border-transparent bg-blue-500 text-white hover:bg-blue-600\",\n      // **or**\n      // primary: [\n      //   \"bg-blue-500\",\n      //   \"text-white\",\n      //   \"border-transparent\",\n      //   \"hover:bg-blue-600\",\n      // ],\n      secondary: \"border-gray-400 bg-white text-gray-800 hover:bg-gray-100\",\n    },\n    size: {\n      small: \"px-2 py-1 text-sm\",\n      medium: \"px-4 py-2 text-base\",\n    },\n  },\n  compoundVariants: [\n    {\n      intent: \"primary\",\n      size: \"medium\",\n      class: \"uppercase\",\n      // **or** if you're a React.js user, `className` may feel more consistent:\n      // className: \"uppercase\"\n    },\n  ],\n  defaultVariants: {\n    intent: \"primary\",\n    size: \"medium\",\n  },\n});\n\nbutton();\n// => \"font-semibold border rounded bg-blue-500 text-white border-transparent hover:bg-blue-600 text-base py-2 px-4 uppercase\"\n\nbutton({ intent: \"secondary\", size: \"small\" });\n// => \"font-semibold border rounded bg-white text-gray-800 border-gray-400 hover:bg-gray-100 text-sm py-1 px-2\"\n```\n\n----------------------------------------\n\nTITLE: Composing Box and Card Components with CVA and cx in TypeScript\nDESCRIPTION: This code defines two components using CVA - a Box component with margin and padding variants, and a Card component that extends Box and adds shadow variants. The components are composed together using the cx utility to concatenate their class names, demonstrating a pattern for component composition with CVA.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/getting-started/composing-components.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// components/card.ts\nimport type { VariantProps } from \"class-variance-authority\";\nimport { cva, cx } from \"class-variance-authority\";\n\n/**\n * Box\n */\nexport type BoxProps = VariantProps<typeof box>;\nexport const box = cva([\"box\", \"box-border\"], {\n  variants: {\n    margin: { 0: \"m-0\", 2: \"m-2\", 4: \"m-4\", 8: \"m-8\" },\n    padding: { 0: \"p-0\", 2: \"p-2\", 4: \"p-4\", 8: \"p-8\" },\n  },\n  defaultVariants: {\n    margin: 0,\n    padding: 0,\n  },\n});\n\n/**\n * Card\n */\ntype CardBaseProps = VariantProps<typeof cardBase>;\nconst cardBase = cva([\"card\", \"border-solid\", \"border-slate-300\", \"rounded\"], {\n  variants: {\n    shadow: {\n      md: \"drop-shadow-md\",\n      lg: \"drop-shadow-lg\",\n      xl: \"drop-shadow-xl\",\n    },\n  },\n});\n\nexport interface CardProps extends BoxProps, CardBaseProps {}\nexport const card = ({ margin, padding, shadow }: CardProps = {}) =>\n  cx(box({ margin, padding }), cardBase({ shadow }));\n```\n\n----------------------------------------\n\nTITLE: Creating a Configurable Button Component with CVA in 11ty and Tailwind CSS\nDESCRIPTION: This snippet demonstrates how to use Class Variance Authority (CVA) to create a configurable button component in 11ty with Tailwind CSS. It defines variants for intent (primary/secondary) and size (small/medium), includes compound variants, and exports a function that renders the button with appropriate classes.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/examples/11ty.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// button.11ty.js\nconst { cva } = require(\"class-variance-authority\");\n\n// ⚠️ Disclaimer: Use of Tailwind CSS is optional\nconst button = cva(\"button\", {\n  variants: {\n    intent: {\n      primary: [\n        \"bg-blue-500\",\n        \"text-white\",\n        \"border-transparent\",\n        \"hover:bg-blue-600\",\n      ],\n      secondary: [\n        \"bg-white\",\n        \"text-gray-800\",\n        \"border-gray-400\",\n        \"hover:bg-gray-100\",\n      ],\n    },\n    size: {\n      small: [\"text-sm\", \"py-1\", \"px-2\"],\n      medium: [\"text-base\", \"py-2\", \"px-4\"],\n    },\n  },\n  compoundVariants: [{ intent: \"primary\", size: \"medium\", class: \"uppercase\" }],\n  defaultVariants: {\n    intent: \"primary\",\n    size: \"medium\",\n  },\n});\n\nmodule.exports = function ({ label, intent, size }) {\n  return `<button class=\"${button({ intent, size })}\">${label}</button>`;\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating CVA with tailwind-merge for Style Conflict Resolution\nDESCRIPTION: TypeScript implementation that combines CVA with tailwind-merge to handle style conflicts by automatically merging Tailwind classes without conflicts. It defines a custom configuration and demonstrates class conflict resolution.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/getting-started/installation.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// cva.config.ts\nimport { defineConfig } from \"cva\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport const { cva, cx, compose } = defineConfig({\n  hooks: {\n    onComplete: (className) => twMerge(className),\n  },\n});\n```\n\nLANGUAGE: ts\nCODE:\n```\n// components/button.ts\nimport { cx, cva } from \"../cva.config\";\n\nexport const button = cva({\n  // 1. `twMerge` strips out `bg-gray-200`…\n  base: \"font-semibold bg-gray-200 border rounded\",\n  variants: {\n    intent: {\n      // 2. …as variant `bg-*` values take precedence\n      primary: \"bg-blue-500 text-white border-transparent hover:bg-blue-600\",\n      secondary: \"bg-white text-gray-800 border-gray-400 hover:bg-gray-100\",\n    },\n  }\n  defaultVariants: {\n    intent: \"primary\",\n  },\n});\n\nbutton();\n// => \"font-semibold border rounded bg-blue-500 text-white border-transparent hover:bg-blue-600 text-base py-2 px-4 uppercase\"\n\ncx(\"bg-gray-200\", \"bg-blue-500\");\n// => \"bg-blue-500\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic React Component with CVA and Tailwind CSS\nDESCRIPTION: This snippet demonstrates a basic button component implementation using CVA with React and Tailwind CSS. It showcases how to define variants and compose classes using CVA.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/examples/react/tailwindcss.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<StackBlitz\n  dir=\"examples/beta/react-with-tailwindcss\"\n  file=\"src/components/button/button.tsx\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Compound React Components with CVA and Tailwind CSS\nDESCRIPTION: This example illustrates the implementation of compound components using CVA with React and Tailwind CSS. It focuses on a navigation component, demonstrating more complex component composition.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/examples/react/tailwindcss.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<StackBlitz\n  dir=\"examples/beta/react-with-tailwindcss-compound\"\n  file=\"src/components/nav/nav.tsx\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Composing CVA Components for a Card in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a card component by composing two CVA components: 'box' and 'root'. It defines variants for margin, padding, and shadow, and shows how to use the composed component.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/getting-started/composing-components.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// components/card.ts\nimport { cva, compose } from \"cva\";\n\nconst box = cva({\n  base: \"box box-border\",\n  variants: {\n    margin: { 0: \"m-0\", 2: \"m-2\", 4: \"m-4\", 8: \"m-8\" },\n    padding: { 0: \"p-0\", 2: \"p-2\", 4: \"p-4\", 8: \"p-8\" },\n  },\n  defaultVariants: {\n    margin: 0,\n    padding: 0,\n  },\n});\n\nconst root = cva({\n  base: \"card rounded border-solid border-slate-300\",\n  variants: {\n    shadow: {\n      md: \"drop-shadow-md\",\n      lg: \"drop-shadow-lg\",\n      xl: \"drop-shadow-xl\",\n    },\n  },\n});\n\nexport interface CardProps extends VariantProps<typeof card> {}\nexport const card = compose(box, root);\n\ncard({ margin: 2, shadow: \"md\" });\n// => \"box box-border m-2 card border-solid border-slate-300 rounded drop-shadow-md\"\ncard({ margin: 2, shadow: \"md\", class: \"adhoc-class\" });\n// => \"box box-border m-2 card border-solid border-slate-300 rounded drop-shadow-md adhoc-class\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive UI Elements with Tailwind and CVA in React\nDESCRIPTION: This example demonstrates a pattern for handling responsive UI by showing/hiding elements with different variants based on breakpoints using Tailwind's responsive utility classes combined with CVA button variants.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/faqs.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Example = () => (\n  <>\n    <div className=\"hidden sm:inline-flex\">\n      <button className={button({ intent: \"primary\" })}>Hidden until sm</button>\n    </div>\n    <div className=\"inline-flex sm:hidden\">\n      <button className={button({ intent: \"secondary\" })}>\n        Hidden after sm\n      </button>\n    </div>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Building CVA Component with TypeScript\nDESCRIPTION: Creates a CVA component with optional variants, compound variants and default variants. The function accepts a base class name and options object for configuration.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/api-reference.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst component = cva(\"base\", options);\n```\n\n----------------------------------------\n\nTITLE: Integrating class-variance-authority with tailwind-merge\nDESCRIPTION: TypeScript example demonstrating how to use class-variance-authority with tailwind-merge for handling style conflicts in Tailwind CSS.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/getting-started/installation.mdx#2025-04-12_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { twMerge } from \"tailwind-merge\";\n\nconst buttonVariants = cva([\"your\", \"base\", \"classes\"], {\n  variants: {\n    intent: {\n      primary: [\"your\", \"primary\", \"classes\"],\n    },\n  },\n  defaultVariants: {\n    intent: \"primary\",\n  },\n});\n\nexport interface ButtonVariants extends VariantProps<typeof buttonVariants> {}\n\nexport const button = (variants: ButtonVariants) =>\n  twMerge(buttonVariants(variants));\n```\n\n----------------------------------------\n\nTITLE: Importing and Using cva Function in TypeScript\nDESCRIPTION: Demonstrates how to import and use the cva function to build a component. The function takes an options object as a parameter and returns a cva component function.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/api-reference.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cva } from \"cva\";\n\nconst component = cva(options);\n```\n\n----------------------------------------\n\nTITLE: Extracting Variant Types with CVA in TypeScript\nDESCRIPTION: Shows how to use the VariantProps helper from CVA to extract variant types from a button component.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/getting-started/typescript.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// components/button.ts\nimport type { VariantProps } from \"class-variance-authority\";\nimport { cva, cx } from \"class-variance-authority\";\n\n/**\n * Button\n */\nexport type ButtonProps = VariantProps<typeof button>;\nexport const button = cva(/* … */);\n```\n\n----------------------------------------\n\nTITLE: Configuring cva Library with defineConfig in TypeScript\nDESCRIPTION: Demonstrates how to use the defineConfig function to generate custom cva, cx, and compose functions based on preferred configuration. This configuration is typically stored in a cva.config.ts file and imported across the project.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/api-reference.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// cva.config.ts\nimport { defineConfig } from \"cva\";\n\nexport const { cva, cx, compose } = defineConfig(options);\n```\n\n----------------------------------------\n\nTITLE: Targeting Multiple Variant Conditions with CVA in TypeScript\nDESCRIPTION: This snippet demonstrates how to target multiple variant conditions in compound variants. It shows how to specify arrays of variant values to apply the same compound variant classes to multiple combinations.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/getting-started/variants.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// components/button.ts\nimport { cva } from \"class-variance-authority\";\n\nconst button = cva(\"…\", {\n  variants: {\n    intent: { primary: \"…\", secondary: \"…\" },\n    size: { small: \"…\", medium: \"…\" },\n  },\n  compoundVariants: [\n    // Applied via:\n    //   `button({ intent: \"primary\", size: \"medium\" })`\n    //     or\n    //   `button({ intent: \"secondary\", size: \"medium\" })`\n    {\n      intent: [\"primary\", \"secondary\"],\n      size: \"medium\",\n      class: \"…\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Text Greeter with CVA in TypeScript\nDESCRIPTION: Example showing how to use CVA to create a dynamic text greeter that changes based on user login status. The function combines a base text with conditional content determined by the isLoggedIn variant.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/examples/other-use-cases.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst greeter = cva(\"Good morning!\", {\n  variants: {\n    isLoggedIn: {\n      true: \"Here's a secret only logged in users can see\",\n      false: \"Log in to find out more…\",\n    },\n  },\n  defaultVariants: {\n    isLoggedIn: \"false\",\n  },\n});\n\ngreeter();\n// => \"Good morning! Log in to find out more…\"\n\ngreeter({ isLoggedIn: \"true\" });\n// => \"Good morning! Here's a secret only logged in users can see\"\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Text Content with CVA in TypeScript\nDESCRIPTION: Demonstrates how to use CVA to create dynamic text content based on user login status. The greeter function combines a base message with conditional text determined by the isLoggedIn variant.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/examples/other-use-cases.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst greeter = cva(\"Good morning!\", {\n  variants: {\n    isLoggedIn: {\n      true: \"Here's a secret only logged in users can see\",\n      false: \"Log in to find out more…\",\n    },\n  },\n  defaultVariants: {\n    isLoggedIn: \"false\",\n  },\n});\n\ngreeter();\n// => \"Good morning! Log in to find out more…\"\n\ngreeter({ isLoggedIn: \"true\" });\n// => \"Good morning! Here's a secret only logged in users can see\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Variants with CVA in TypeScript\nDESCRIPTION: This snippet shows how to disable a variant completely by providing an option with a value of null. It demonstrates setting an explicit 'unset' option for the intent variant of a button component.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/getting-started/variants.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cva } from \"cva\";\n\nconst button = cva({\n  base: \"button\",\n  variants: {\n    intent: {\n      unset: null,\n      primary: \"button--primary\",\n      secondary: \"button--secondary\",\n    },\n  },\n});\n\nbutton({ intent: \"unset\" });\n// => \"button\"\n```\n\n----------------------------------------\n\nTITLE: Extending CVA Components with Additional Classes in TypeScript\nDESCRIPTION: This snippet demonstrates how to extend CVA components by passing additional classes through either the 'class' or 'className' prop. Both approaches achieve the same result, appending custom classes to the component's default classes.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/getting-started/extending-components.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// components/button.ts\nimport { cva } from \"cva\";\n\nconst button = cva(/* … */);\n\nbutton({ class: \"m-4\" });\n// => \"…buttonClasses m-4\"\n\nbutton({ className: \"m-4\" });\n// => \"…buttonClasses m-4\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Classes to CVA Components in TypeScript\nDESCRIPTION: Demonstrates how to extend a CVA button component by passing additional CSS classes using either the 'class' or 'className' prop. Both approaches result in the same output where custom classes are appended to the component's base classes.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/getting-started/extending-components.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// components/button.ts\nimport { cva } from \"class-variance-authority\";\n\nconst button = cva(/* … */);\n\nbutton({ class: \"m-4\" });\n// => \"…buttonClasses m-4\"\n\nbutton({ className: \"m-4\" });\n// => \"…buttonClasses m-4\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Base Styles Configuration in CVA\nDESCRIPTION: Demonstrates the migration from the old class-variance-authority syntax to the new cva syntax, showing how base styles are now applied using the named 'base' property in a single parameter object.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/getting-started/whats-new.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  import { cva } from \"class-variance-authority\";\n  import { cva } from \"cva\";\n\n  const component = cva({ base: \"your-base-class\" });\n```\n\n----------------------------------------\n\nTITLE: Creating a Polymorphic Button Component with CVA and Radix UI Slot\nDESCRIPTION: Implements a polymorphic Button component using CVA for styling and Radix UI's Slot component for the asChild prop functionality. This approach allows for flexible rendering of different HTML elements while maintaining consistent styling.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/getting-started/polymorphism.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// components/button.tsx\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"cva\";\n\nconst button = cva({\n  base: \"button\",\n  variants: {\n    intent: {\n      primary: \"bg-blue-500 text-white border-transparent hover:bg-blue-600\",\n      secondary: \"bg-white text-gray-800 border-gray-400 hover:bg-gray-100\",\n    },\n  },\n  defaultVariants: {\n    intent: \"primary\",\n  },\n});\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof button> {\n  asChild?: boolean;\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n  asChild,\n  className,\n  intent,\n  ...props\n}) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return <Comp className={button({ intent, className })} {...props} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Using the Polymorphic Button Component in React\nDESCRIPTION: Demonstrates how to use the custom polymorphic Button component, rendering it as an anchor element while maintaining the button styling.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/getting-started/polymorphism.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"./components/button\";\n\n// Renders:\n//   <a href=\"/sign-up\" class=\"bg-blue-500 text-white border-transparent hover:bg-blue-600\">\n//     Sign up\n//   </a>\nexport default () => (\n  <Button asChild>\n    <a href=\"/sign-up\">Sign up</a>\n  </Button>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Compound Components with React and CVA\nDESCRIPTION: Example demonstrating how to structure compound components using an Accordion component with its subcomponents (Root, Item, Header, Content) in a composable pattern.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/getting-started/compound-components.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Accordion from \"./Accordion\";\n\nfunction Example() {\n  return (\n    <Accordion.Root>\n      <Accordion.Item>\n        <Accordion.Header>Section 1</Accordion.Header>\n        <Accordion.Content>Content 1</Accordion.Content>\n      </Accordion.Item>\n    </Accordion.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Polymorphic Usage of CVA in React\nDESCRIPTION: Demonstrates how to use a CVA-generated button class on an anchor element, showcasing the polymorphic nature of CVA components.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/getting-started/polymorphism.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { button } from \"./components/button\";\n\nexport default () => (\n  <a className={button()} href=\"/sign-up\">\n    Sign up\n  </a>\n);\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple cva Components with compose Function in TypeScript\nDESCRIPTION: Illustrates the usage of the compose function to shallow merge multiple cva components into a single component. It takes an array of cva components as input and returns a new cva component function.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/api-reference.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compose } from \"cva\";\n\nconst composedComponent = compose(options);\n```\n\n----------------------------------------\n\nTITLE: BEM CSS Class Definitions\nDESCRIPTION: CSS class definitions following BEM naming convention for button variants including primary/secondary styles and size modifiers\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/examples/bem.mdx#2025-04-12_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.button {\n  /* */\n}\n\n.button--primary {\n  /* */\n}\n.button--secondary {\n  /* */\n}\n\n.button--small {\n  /* */\n}\n.button--medium {\n  /* */\n}\n\n.button--primary-small {\n  /* */\n}\n```\n\n----------------------------------------\n\nTITLE: Class Name Concatenation with cx Function\nDESCRIPTION: Utility function that concatenates class names using clsx under the hood. Takes an array of classes and returns a combined string of class names.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/api-reference.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst className = cx(classes);\n```\n\n----------------------------------------\n\nTITLE: Using cx Function for Class Name Concatenation in TypeScript\nDESCRIPTION: Shows how to import and use the cx function, which is an alias of clsx, to concatenate class names. It takes an array of classes as input and returns a concatenated string.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/api-reference.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cx } from \"cva\";\n\nconst className = cx(classes);\n```\n\n----------------------------------------\n\nTITLE: CVA Button Component Configuration\nDESCRIPTION: TypeScript implementation using CVA to compose BEM classes with variants for intent and size, including compound variants and default options\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/examples/bem.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cva } from \"class-variance-authority\";\n\nconst button = cva(\"button\", {\n  variants: {\n    intent: {\n      primary: \"button--primary\",\n      secondary: \"button--secondary\",\n    },\n    size: {\n      small: \"button--small\",\n      medium: \"button--medium\",\n    },\n  },\n  compoundVariants: [\n    { intent: \"primary\", size: \"medium\", class: \"button--primary-small\" },\n  ],\n  defaultVariants: {\n    intent: \"primary\",\n    size: \"medium\",\n  },\n});\n\nbutton();\n// => \"button button--primary button--medium\"\n\nbutton({ intent: \"secondary\", size: \"small\" });\n// => \"button button--secondary button--small\"\n```\n\n----------------------------------------\n\nTITLE: CVA Button Component Configuration\nDESCRIPTION: Configures class-variance-authority for dynamic class composition using BEM classes. Defines variants for intent and size, includes compound variants and default settings.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/examples/bem.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cva } from \"class-variance-authority\";\n\nconst button = cva(\"button\", {\n  variants: {\n    intent: {\n      primary: \"button--primary\",\n      secondary: \"button--secondary\",\n    },\n    size: {\n      small: \"button--small\",\n      medium: \"button--medium\",\n    },\n  },\n  compoundVariants: [\n    { intent: \"primary\", size: \"medium\", class: \"button--primary-small\" },\n  ],\n  defaultVariants: {\n    intent: \"primary\",\n    size: \"medium\",\n  },\n});\n\nbutton();\n// => \"button button--primary button--medium\"\n\nbutton({ intent: \"secondary\", size: \"small\" });\n// => \"button button--secondary button--small\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Variants with Tailwind and CVA in React\nDESCRIPTION: Demonstrates how to implement responsive variants in CVA using Tailwind's responsive utility classes to show/hide different button variants based on breakpoints.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/faqs.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Example = () => (\n  <>\n    <div className=\"hidden sm:inline-flex\">\n      <button className={button({ intent: \"primary\" })}>Hidden until sm</button>\n    </div>\n    <div className=\"inline-flex sm:hidden\">\n      <button className={button({ intent: \"secondary\" })}>\n        Hidden after sm\n      </button>\n    </div>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Variants in CVA with TypeScript\nDESCRIPTION: Demonstrates how to implement required variants using TypeScript utility types with CVA, including proper type checking for required properties.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/getting-started/typescript.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// components/button.ts\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nexport type ButtonVariantProps = VariantProps<typeof buttonVariants>;\nexport const buttonVariants = cva(\"…\", {\n  variants: {\n    optional: { a: \"…\", b: \"…\" },\n    required: { a: \"…\", b: \"…\" },\n  },\n});\n\n/**\n * Button\n */\nexport interface ButtonProps\n  extends Omit<ButtonVariantProps, \"required\">,\n    Required<Pick<ButtonVariantProps, \"required\">> {}\n\nexport const button = (props: ButtonProps) => buttonVariants(props);\n\n// ❌ TypeScript Error:\n// Argument of type \"{}\": is not assignable to parameter of type \"ButtonProps\".\n//   Property \"required\" is missing in type \"{}\" but required in type\n//   \"ButtonProps\".\nbutton({});\n\n// ✅\nbutton({ required: \"a\" });\n```\n\n----------------------------------------\n\nTITLE: Targeting Multiple Variant Conditions with CVA in TypeScript\nDESCRIPTION: This snippet demonstrates how to target multiple variant conditions in a compound variant. It shows an example where the compound variant applies to both primary and secondary intents with a medium size.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/getting-started/variants.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cva } from \"cva\";\n\nconst button = cva({\n  base: \"…\",\n  variants: {\n    intent: { primary: \"…\", secondary: \"…\" },\n    size: { small: \"…\", medium: \"…\" },\n  },\n  compoundVariants: [\n    // Applied via:\n    //   `button({ intent: \"primary\", size: \"medium\" })`\n    //     or\n    //   `button({ intent: \"secondary\", size: \"medium\" })`\n    {\n      intent: [\"primary\", \"secondary\"],\n      size: \"medium\",\n      class: \"…\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Compound Variants with CVA in TypeScript\nDESCRIPTION: This snippet shows how to implement compound variants that apply when multiple other variant conditions are met. It demonstrates the basic structure of compound variants in the CVA configuration.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/getting-started/variants.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// components/button.ts\nimport { cva } from \"class-variance-authority\";\n\nconst button = cva(\"…\", {\n  variants: {\n    intent: { primary: \"…\", secondary: \"…\" },\n    size: { small: \"…\", medium: \"…\" },\n  },\n  compoundVariants: [\n    // Applied via:\n    //   `button({ intent: \"primary\", size: \"medium\" })`\n    {\n      intent: \"primary\",\n      size: \"medium\",\n      class: \"…\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing CVA with Package Managers\nDESCRIPTION: Commands for installing the CVA beta package using different package managers including pnpm, npm, yarn, and bun.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/getting-started/installation.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm i cva@beta\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm i cva@beta\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add cva@beta\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add cva@beta\n```\n\n----------------------------------------\n\nTITLE: Configuring WebStorm for Tailwind IntelliSense with CVA\nDESCRIPTION: JSON configuration for WebStorm 2023.1+ to enable Tailwind CSS IntelliSense within CVA function calls for class name autocompletion.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/getting-started/installation.mdx#2025-04-12_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"experimental\": {\n    \"classRegex\": [\n      [\"cva\\\\(((?:[^()]|\\\\([^()]*\\\\))*)\\\\)\", \"[\\\"'`]?([^\\\"'`]+)[\\\"'`]?\"],\n      [\"cx\\\\(((?:[^()]|\\\\([^()]*\\\\))*)\\\\)\", \"(?:'|\\\"|`)([^']*)(?:'|\\\"|`)\"] \n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BEM CSS Class Structure\nDESCRIPTION: Defines base button styles and modifiers using BEM naming convention. Includes primary/secondary variants and size modifiers.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/examples/bem.mdx#2025-04-12_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.button {\n  /* */\n}\n\n.button--primary {\n  /* */\n}\n.button--secondary {\n  /* */\n}\n\n.button--small {\n  /* */\n}\n.button--medium {\n  /* */\n}\n\n.button--primary-small {\n  /* */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an External Store in Svelte with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a simple external store in Svelte using TypeScript. External stores are useful for retaining state that should persist across hot module replacement (HMR) updates.\nSOURCE: https://github.com/joe-bell/cva/blob/main/examples/beta/svelte/README.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// store.ts\n// An extremely simple external store\nimport { writable } from \"svelte/store\";\nexport default writable(0);\n```\n\n----------------------------------------\n\nTITLE: Creating External Svelte Store with TypeScript\nDESCRIPTION: Demonstrates how to create a simple external store in Svelte to preserve component state during Hot Module Replacement (HMR). Uses the writable store from Svelte's store module to create a persistent state container.\nSOURCE: https://github.com/joe-bell/cva/blob/main/examples/latest/svelte/README.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// store.ts\n// An extremely simple external store\nimport { writable } from \"svelte/store\";\nexport default writable(0);\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS IntelliSense for Zed\nDESCRIPTION: JSON configuration to enable Tailwind CSS IntelliSense for class-variance-authority in Zed editor settings.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/getting-started/installation.mdx#2025-04-12_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"tailwindcss-language-server\": {\n      \"settings\": {\n        \"experimental\": {\n          \"classRegex\": [\n            [\"cva\\\\(((?:[^()]|\\\\([^()]*\\\\))*)\\\\)\", \"[\\\"'`]([^\\\"'`]*).*?[\\\"'`]\"],\n            [\"cx\\\\(((?:[^()]|\\\\([^()]*\\\\))*)\\\\)\", \"(?:'|\\\"|`)([^']*)(?:'|\\\"|`)\"]\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS IntelliSense for VS Code\nDESCRIPTION: JSON configuration to enable Tailwind CSS IntelliSense for class-variance-authority in Visual Studio Code settings.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/getting-started/installation.mdx#2025-04-12_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwindCSS.experimental.classRegex\": [\n    [\"cva\\\\(((?:[^()]|\\\\([^()]*\\\\))*)\\\\)\", \"[\\\"'`]([^\\\"'`]*).*?[\\\"'`]\"],\n    [\"cx\\\\(((?:[^()]|\\\\([^()]*\\\\))*)\\\\)\", \"(?:'|\\\"|`)([^']*)(?:'|\\\"|`)\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode for Tailwind IntelliSense with CVA\nDESCRIPTION: JSON configuration for Visual Studio Code to enable Tailwind CSS IntelliSense within CVA function calls, allowing for autocompletion of Tailwind classes.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/getting-started/installation.mdx#2025-04-12_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// .vscode/settings.json\n{\n  \"tailwindCSS.experimental.classRegex\": [\n    [\"cva\\\\(((?:[^()]|\\\\([^()]*\\\\))*)\\\\)\", \"[\\\"'`]?([^\\\"'`]+)[\\\"'`]?\"],\n    [\"cx\\\\(((?:[^()]|\\\\([^()]*\\\\))*)\\\\)\", \"(?:'|\\\"|`)([^']*)(?:'|\\\"|`)\"] \n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Neovim for Tailwind IntelliSense with CVA\nDESCRIPTION: Lua configuration for Neovim LSP to enable Tailwind CSS IntelliSense within CVA function calls for autocompletion of class names.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/getting-started/installation.mdx#2025-04-12_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nrequire 'lspconfig'.tailwindcss.setup({\n  settings = {\n    tailwindCSS = {\n      experimental = {\n        classRegex = {\n          { \"cva\\\\(((?:[^()]|\\\\([^()]*\\\\))*)\\\\)\", \"[\\\"'`]([^\\\"'`]*).*?[\\\"'`]\" },\n          { \"cx\\\\(((?:[^()]|\\\\([^()]*\\\\))*)\\\\)\", \"(?:'|\\\"|`)([^']*)(?:'|\\\"|`)\" }\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS IntelliSense for Neovim\nDESCRIPTION: Lua configuration to enable Tailwind CSS IntelliSense for class-variance-authority in Neovim.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/getting-started/installation.mdx#2025-04-12_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nrequire 'lspconfig'.tailwindcss.setup({\n  settings = {\n    tailwindCSS = {\n      experimental = {\n        classRegex = {\n          { \"cva\\\\(((?:[^()]|\\\\([^()]*\\\\))*)\\\\)\", \"[\\\"'`]([^\\\"'`]*).*?[\\\"'`]\" },\n          { \"cx\\\\(((?:[^()]|\\\\([^()]*\\\\))*)\\\\)\", \"(?:'|\\\"|`)([^']*)(?:'|\\\"|`)\" }\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Zed Editor for Tailwind IntelliSense with CVA\nDESCRIPTION: JSON configuration for Zed editor to enable Tailwind CSS IntelliSense within CVA function calls, providing class autocompletion.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/getting-started/installation.mdx#2025-04-12_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// .zed/settings.json\n{\n  \"lsp\": {\n    \"tailwindcss-language-server\": {\n      \"settings\": {\n        \"experimental\": {\n          \"classRegex\": [\n            [\"cva\\\\(((?:[^()]|\\\\([^()]*\\\\))*)\\\\)\", \"[\\\"'`]?([^\\\"'`]+)[\\\"'`]?\"],\n            [\"cx\\\\(((?:[^()]|\\\\([^()]*\\\\))*)\\\\)\", \"(?:'|\\\"|`)([^']*)(?:'|\\\"|`)\"] \n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS IntelliSense for WebStorm\nDESCRIPTION: JSON configuration to enable Tailwind CSS IntelliSense for class-variance-authority in WebStorm settings.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/getting-started/installation.mdx#2025-04-12_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"experimental\": {\n    \"classRegex\": [\n      [\"cva\\\\(((?:[^()]|\\\\([^()]*\\\\))*)\\\\)\", \"[\\\"'`]([^\\\"'`]*).*?[\\\"'`]\"],\n      [\"cx\\\\(((?:[^()]|\\\\([^()]*\\\\))*)\\\\)\", \"(?:'|\\\"|`)([^']*)(?:'|\\\"|`)\"]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing class-variance-authority with pnpm\nDESCRIPTION: Command to install the class-variance-authority package using pnpm package manager.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/getting-started/installation.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm i class-variance-authority\n```\n\n----------------------------------------\n\nTITLE: Installing class-variance-authority with bun\nDESCRIPTION: Command to install the class-variance-authority package using bun package manager.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/getting-started/installation.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add class-variance-authority\n```\n\n----------------------------------------\n\nTITLE: Aliasing class-variance-authority package with npm\nDESCRIPTION: Command to install and alias the class-variance-authority package as 'cva' using npm.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/getting-started/installation.mdx#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm i cva@npm:class-variance-authority\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Videos with iframes in JSX/React\nDESCRIPTION: Creates an iframe element to embed a YouTube video with specific attributes for video player configuration and permissions.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/tutorials.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://www.youtube.com/embed/T-Zv73yZ_QI\"\n  title=\"YouTube video player\"\n  frameBorder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n  allowFullScreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for React and Tailwind CSS Example\nDESCRIPTION: This snippet imports the StackBlitz and Carbon components from relative paths. These components are likely used to display code examples and carbon ads in the documentation.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/examples/react/tailwind-css.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StackBlitz } from \"../../../../components/StackBlitz\";\nimport { Carbon } from \"../../../../components/Carbon\";\n```\n\n----------------------------------------\n\nTITLE: Rendering StackBlitz Component for React with Tailwind CSS Example\nDESCRIPTION: This JSX snippet renders the StackBlitz component with specific props to display a React with Tailwind CSS example. It points to a specific directory and file within the project.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/examples/react/tailwind-css.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<StackBlitz\n  dir=\"examples/latest/react-with-tailwindcss\"\n  file=\"src/components/button/button.tsx\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Embedding StackBlitz Example for React Button Component with CSS Modules\nDESCRIPTION: Embeds a StackBlitz component to showcase a React button implementation using CSS Modules. The example is located in the 'examples/latest/react-with-css-modules' directory and focuses on the 'button.tsx' file.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/examples/react/css-modules.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<StackBlitz\n  dir=\"examples/latest/react-with-css-modules\"\n  file=\"src/components/button/button.tsx\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering StackBlitz Component with Props in Astro\nDESCRIPTION: Renders the StackBlitz component in an Astro file, specifying the directory and file to display.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/examples/vue.mdx#2025-04-12_snippet_3\n\nLANGUAGE: astro\nCODE:\n```\n<StackBlitz dir=\"examples/latest/vue\" file=\"src/components/Button.vue\" />\n```\n\n----------------------------------------\n\nTITLE: Embedding Vue Code Examples with Component Viewers\nDESCRIPTION: Demonstrates how to embed interactive Vue component examples using the Carbon code display and StackBlitz editor components focused on a Vue Button component.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/examples/vue.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Carbon />\n\n<StackBlitz dir=\"examples/latest/vue\" file=\"src/components/Button.vue\" />\n```\n\n----------------------------------------\n\nTITLE: Importing StackBlitz Component in Astro\nDESCRIPTION: Imports the StackBlitz component from a relative path in an Astro file.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/examples/vue.mdx#2025-04-12_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\nimport StackBlitz from \"../../../components/stackblitz.astro\";\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Component in Astro\nDESCRIPTION: Imports the Carbon component from a relative path in an Astro file.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/examples/vue.mdx#2025-04-12_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nimport Carbon from \"../../../components/carbon.astro\";\n```\n\n----------------------------------------\n\nTITLE: Importing Astro Components in CVA Documentation\nDESCRIPTION: This snippet shows the import statements for Astro components used in the CVA tutorials page, including Carbon and TutorialList components.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/tutorials.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Carbon from \"../../components/carbon.astro\";\nimport TutorialList from \"../../components/tutorial-list.astro\";\n```\n\n----------------------------------------\n\nTITLE: Rendering YouTube Tutorials Section with TutorialList Component\nDESCRIPTION: This code renders the YouTube tutorials section using the TutorialList component with format set to 'YouTube'.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/tutorials.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<TutorialList format=\"YouTube\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Starlight Tailwind Starter Kit with npm\nDESCRIPTION: Command to create a new Astro project using the Starlight Tailwind template. This sets up a documentation site with Tailwind CSS integration.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest -- --template starlight/tailwind\n```\n\n----------------------------------------\n\nTITLE: Creating a new Astro minimal project with npm\nDESCRIPTION: Command to initialize a new Astro project using the minimal template. This creates a basic Astro setup with minimal configuration and dependencies.\nSOURCE: https://github.com/joe-bell/cva/blob/main/examples/latest/astro-with-tailwindcss/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest -- --template minimal\n```\n\n----------------------------------------\n\nTITLE: Importing Components in Astro Documentation\nDESCRIPTION: Imports StackBlitz and Carbon components for use in the Astro documentation page. These components are used to demonstrate CVA integration with Astro.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/examples/astro.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StackBlitz } from \"../../../components/StackBlitz\";\nimport { Carbon } from \"../../../components/Carbon\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vue Documentation\nDESCRIPTION: Imports the StackBlitz and Carbon components used to display Vue code examples in the documentation.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/examples/vue.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StackBlitz } from \"../../../components/StackBlitz\";\nimport { Carbon } from \"../../../components/Carbon\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Component in Astro\nDESCRIPTION: Renders the Carbon component in an Astro file without any props.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/examples/vue.mdx#2025-04-12_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n<Carbon />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for React with CSS Modules Example\nDESCRIPTION: Imports the StackBlitz and Carbon components from relative paths. These components are likely used to display code examples and interactive demos.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/examples/react/css-modules.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StackBlitz } from \"../../../../components/StackBlitz\";\nimport { Carbon } from \"../../../../components/Carbon\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components in JSX/React\nDESCRIPTION: Imports StackBlitz and Carbon components from a relative path for use in a Svelte documentation page\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/examples/svelte.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StackBlitz } from \"../../../components/StackBlitz\";\nimport { Carbon } from \"../../../components/Carbon\";\n```\n\n----------------------------------------\n\nTITLE: Installing class-variance-authority with npm\nDESCRIPTION: Command to install the class-variance-authority package using npm package manager.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/getting-started/installation.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i class-variance-authority\n```\n\n----------------------------------------\n\nTITLE: Importing aliased class-variance-authority package\nDESCRIPTION: Example of importing the aliased 'cva' package in TypeScript code.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/getting-started/installation.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { cva } from \"cva\";\n\n// …\n```\n\n----------------------------------------\n\nTITLE: Installing class-variance-authority with yarn\nDESCRIPTION: Command to install the class-variance-authority package using yarn package manager.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/getting-started/installation.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add class-variance-authority\n```\n\n----------------------------------------\n\nTITLE: Rendering Audio Tutorials Section with TutorialList Component\nDESCRIPTION: This code renders the Audio tutorials section using the TutorialList component with format set to 'Audio'.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/tutorials.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<TutorialList format=\"Audio\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Component in JSX/React\nDESCRIPTION: Imports the Carbon component from a relative path for use in the tutorials page.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/tutorials.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Carbon } from \"../../components/Carbon\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Articles Section with TutorialList Component\nDESCRIPTION: This code renders the Articles section using the TutorialList component with format set to 'Article'.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/src/content/docs/tutorials.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<TutorialList format=\"Article\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Component in JSX/React\nDESCRIPTION: Renders the Carbon component as a self-closing tag in the React/JSX markup.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/latest/pages/docs/tutorials.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Carbon />\n```\n\n----------------------------------------\n\nTITLE: Enabling Corepack in CVA Project Setup\nDESCRIPTION: Enables corepack which is required before any other installation steps in the CVA repository. This command must be run prior to installing dependencies.\nSOURCE: https://github.com/joe-bell/cva/blob/main/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncorepack enable\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Installs all project dependencies using PNPM package manager. This should be run after enabling corepack and before starting development work.\nSOURCE: https://github.com/joe-bell/cva/blob/main/CONTRIBUTING.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Creating Astro Project from Minimal Template\nDESCRIPTION: Command to create a new Astro project using the minimal template. This uses npm to run the Astro creation script with the minimal template option.\nSOURCE: https://github.com/joe-bell/cva/blob/main/examples/beta/astro-with-tailwindcss/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest -- --template minimal\n```\n\n----------------------------------------\n\nTITLE: Astro minimal project directory structure\nDESCRIPTION: Overview of the default directory structure for a minimal Astro project, showing the main folders and files. This structure includes public assets, source files, and configuration.\nSOURCE: https://github.com/joe-bell/cva/blob/main/examples/latest/astro-with-tailwindcss/README.md#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/\n├── public/\n├── src/\n│   └── pages/\n│       └── index.astro\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Displaying Astro Project Structure\nDESCRIPTION: Shows the basic folder and file structure of an Astro project created from the minimal template. This includes the public directory, src directory with pages, and package.json file.\nSOURCE: https://github.com/joe-bell/cva/blob/main/examples/beta/astro-with-tailwindcss/README.md#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/\n├── public/\n├── src/\n│   └── pages/\n│       └── index.astro\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Displaying Starlight Project Structure\nDESCRIPTION: File structure of a typical Starlight project with Tailwind integration. Shows the organization of directories and files including content, configuration, and assets.\nSOURCE: https://github.com/joe-bell/cva/blob/main/docs/beta/README.md#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── public/\n├── src/\n│   ├── assets/\n│   ├── content/\n│   │   ├── docs/\n│   │   └── config.ts\n│   └── env.d.ts\n├── astro.config.mjs\n├── package.json\n├── tailwind.config.cjs\n└── tsconfig.json\n```"
  }
]