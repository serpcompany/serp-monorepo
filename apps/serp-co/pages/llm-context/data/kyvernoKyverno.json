[
  {
    "owner": "kyverno",
    "repo": "kyverno",
    "content": "TITLE: Counting Total Reports in Kubernetes Cluster\nDESCRIPTION: Script to count the total number of reports by type in a Kubernetes cluster, including namespace-specific counts. Helpful for determining if reports are accumulating incorrectly in the cluster.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/troubleshooting/reports.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nCOUNT=$(kubectl get cadmr --no-headers 2> /dev/null | wc -l)\necho \"number of cluster admission reports: $COUNT\"\n\nCOUNT=$(kubectl get cbgscanr --no-headers 2> /dev/null | wc -l)\necho \"number of cluster background scan reports: $COUNT\"\n\nCOUNT=$(kubectl get admr -A --no-headers 2> /dev/null | wc -l)\necho \"number of admission reports: $COUNT\"\n\nCOUNT=$(kubectl get bgscanr -A --no-headers 2> /dev/null | wc -l)\necho \"number of background scan reports: $COUNT\"\n\nNS_LIST=$(kubectl get ns -o jsonpath='{.items[*].metadata.name}')\nfor ns in $NS_LIST\ndo\n    COUNT=$(kubectl get -n $ns admr --no-headers 2> /dev/null | wc -l)\n    echo \"number of admission reports in $ns: $COUNT\"\n\n    COUNT=$(kubectl get -n $ns bgscanr --no-headers 2> /dev/null | wc -l)\n    echo \"number of background scan reports in $ns: $COUNT\"\ndone\n```\n\n----------------------------------------\n\nTITLE: Kyverno Apply Command Examples\nDESCRIPTION: Examples of how to use the 'kyverno apply' command in different scenarios, including applying to specific resources, folders of resources, clusters, and with variables.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_apply.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Apply on a resource\nkyverno apply /path/to/policy.yaml /path/to/folderOfPolicies --resource=/path/to/resource1 --resource=/path/to/resource2\n\n# Apply on a folder of resources\nkyverno apply /path/to/policy.yaml /path/to/folderOfPolicies --resource=/path/to/resources/\n\n# Apply on a cluster\nkyverno apply /path/to/policy.yaml /path/to/folderOfPolicies --cluster\n\n# Apply policies from a gitSourceURL on a cluster\nkyverno apply https://github.com/kyverno/policies/openshift/ --git-branch main --cluster\n\n# Apply single policy with variable on single resource\nkyverno apply /path/to/policy.yaml --resource /path/to/resource.yaml --set <variable1>=<value1>,<variable2>=<value2>\n\n# Apply multiple policy with variable on multiple resource\nkyverno apply /path/to/policy1.yaml /path/to/policy2.yaml --resource /path/to/resource1.yaml --resource /path/to/resource2.yaml -f /path/to/value.yaml\n```\n\n----------------------------------------\n\nTITLE: Controller Components Table\nDESCRIPTION: Table listing all controllers in the project with their leader election status and descriptions. Shows key components like certmanager, config, openapi, policycache, webhook controllers and various report controllers.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/controllers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                             | Leader             | Description                                                   |\n|----------------------------------|--------------------|---------------------------------------------------------------|\n| `certmanager-controller`         | :heavy_check_mark: | Manages TLS certificates                                      |\n| `config-controller`              |                    | Watches config map and reloads config on changes              |\n| `openapi-controller`             |                    | Polls discovery API and maintains APIs schemas                |\n| [`policycache-controller`]       |                    | Maintains an up to date policy cache                          |\n| `webhook-controller`             | :heavy_check_mark: | Configures webhooks                                           |\n| `admission-report-controller`    | :heavy_check_mark: | Cleans up admission reports                                   |\n| `aggregate-report-controller`    | :heavy_check_mark: | Aggregates reports                                            |\n| `background-scan-controller`     | :heavy_check_mark: | Manages background scans reports                              |\n| `resource-report-controller`     | :heavy_check_mark: | Watches resources that participate in reports                 |\n| `cleanup-controller`             | :heavy_check_mark: | Reconciles cleanup policies and associated cron jobs          |\n| `policy-controller`              | :heavy_check_mark: | Manages mutation of existing resources                        |\n| `update-request-controller`      |                    | Manages generate policy and its generated resources lifecycle |\n```\n\n----------------------------------------\n\nTITLE: Adding Kyverno Helm Repository\nDESCRIPTION: Command to add the Kyverno Helm repository to your local Helm configuration. This is the first step in installing Kyverno using Helm.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ helm repo add kyverno https://kyverno.github.io/kyverno/\n```\n\n----------------------------------------\n\nTITLE: Kyverno CLI Options and Flags\nDESCRIPTION: Complete list of command-line options and flags available for the Kyverno CLI. These flags control logging behavior, configuration paths, and verbosity levels.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n  -h, --help                             help for kyverno\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Creating Kyverno Namespace\nDESCRIPTION: Command to create a dedicated Kubernetes namespace for Kyverno. While Kyverno can be installed in any namespace, the examples use 'kyverno' as the default.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl create namespace kyverno\n```\n\n----------------------------------------\n\nTITLE: Watching Report Changes in Real-time\nDESCRIPTION: Commands to monitor Kyverno report changes in real-time using the --watch-only flag, which shows only newly created, updated, or deleted reports without listing existing ones. Useful for identifying resources creating excessive reports.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/troubleshooting/reports.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# watch changing cluster admission reports\nkubectl get cadmr -o wide -w --watch-only\n\n# watch changing cluster background scan reports\nkubectl get cbgscanr -o wide -w --watch-only\n\n# watch changing admission reports\nkubectl get admr -A -o wide -w --watch-only\n\n# watch changing background scan reports\nkubectl get bgscanr -A -o wide -w --watch-only\n```\n\n----------------------------------------\n\nTITLE: Installing Kyverno with Helm\nDESCRIPTION: Command to install Kyverno in the specified namespace using Helm. This deploys Kyverno on the Kubernetes cluster with the default configuration.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install kyverno --namespace kyverno kyverno/kyverno\n```\n\n----------------------------------------\n\nTITLE: Installing Kyverno Development Tools\nDESCRIPTION: This snippet shows how to install and remove the development tools required for working with Kyverno using make commands.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake install-tools\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake clean-tools\n```\n\n----------------------------------------\n\nTITLE: Using the Kyverno CLI Base Command with Flags\nDESCRIPTION: The base command for Kyverno CLI with its syntax. This is the entry point for all Kyverno CLI functionality.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno [flags]\n```\n\n----------------------------------------\n\nTITLE: Using Kyverno CLI Help Command\nDESCRIPTION: Shows the output of the 'kyverno --help' command, displaying all available commands and flags for the Kyverno CLI. Also notes that experimental commands can be enabled via the KYVERNO_EXPERIMENTAL environment variable.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/cmd/cli/kubectl-kyverno/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nTo enable experimental commands, KYVERNO_EXPERIMENTAL should be configured with true or 1.\n\nUsage:\n  kyverno [command]\n\nAvailable Commands:\n  apply       Applies policies on resources.\n  completion  Generate the autocompletion script for the specified shell\n  create      Provides a command-line interface to help with the creation of various Kyverno resources.\n  docs        Generates documentation.\n  help        Help about any command\n  jp          Provides a command-line interface to JMESPath, enhanced with Kyverno specific custom functions.\n  test        Run tests from directory.\n  version     Shows current version of kyverno.\n\nFlags:\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n  -h, --help                             help for kyverno\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=false) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Building Kyverno Binaries Locally\nDESCRIPTION: These commands demonstrate how to build the kyvernopre, kyverno, and cli binaries locally using make.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake build-kyverno-init\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake build-kyverno\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake build-cli\n```\n\n----------------------------------------\n\nTITLE: Kyverno Apply Command Options\nDESCRIPTION: Available flags and options for the 'kyverno apply' command, including options for cluster access, resource selection, policy evaluation, and output formatting.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_apply.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --audit-warn                         If set to true, will flag audit policies as warnings instead of failures\n  -c, --cluster                            Checks if policies should be applied to cluster in the current context\n      --cluster-wide-resources             If set to true, will apply policies to cluster-wide resources\n      --context string                     The name of the kubeconfig context to use\n      --context-file string                File containing context data for CEL policies\n      --continue-on-fail                   If set to true, will continue to apply policies on the next resource upon failure to apply to the current resource instead of exiting out\n      --detailed-results                   If set to true, display detailed results\n  -e, --exception strings                  Policy exception to be considered when evaluating policies against resources\n      --exceptions strings                 Policy exception to be considered when evaluating policies against resources\n      --exceptions-with-resources          Evaluate policy exceptions from the resources path\n      --generate-exceptions                Generate policy exceptions for each violation\n      --generated-exception-ttl duration   Default TTL for generated exceptions (default 720h0m0s)\n  -b, --git-branch string                  test git repository branch\n  -h, --help                               help for apply\n      --json strings                       Path to JSON payload files\n      --kubeconfig string                  path to kubeconfig file with authorization and master location information\n  -n, --namespace string                   Optional Policy parameter passed with cluster flag\n  -o, --output string                      Prints the mutated/generated resources in provided file/directory\n      --output-format string               Specifies the policy report format (json or yaml). Default: yaml. (default \"yaml\")\n  -p, --policy-report                      Generates policy report when passed (default policyviolation)\n      --registry                           If set to true, access the image registry using local docker credentials to populate external data\n      --remove-color                       Remove any color from output\n  -r, --resource strings                   Path to resource files\n      --resources strings                  Path to resource files\n  -s, --set strings                        Variables that are required\n  -i, --stdin                              Optional mutate policy parameter to pipe directly through to kubectl\n  -t, --table                              Show results in table format\n      --target-resource strings            Path to individual files containing target resources files for policies that have mutate existing\n      --target-resources strings           Path to a directory containing target resources files for policies that have mutate existing\n  -u, --userinfo string                    Admission Info including Roles, Cluster Roles and Subjects\n  -f, --values-file string                 File containing values for policy variables\n      --warn-exit-code int                 Set the exit code for warnings; if failures or errors are found, will exit 1\n      --warn-no-pass                       Specify if warning exit code should be raised if no objects satisfied a policy; can be used together with --warn-exit-code flag\n```\n\n----------------------------------------\n\nTITLE: Generating Kyverno CRD Documentation\nDESCRIPTION: Command to generate the API documentation for Kyverno's Custom Resource Definitions. This step is crucial for maintaining up-to-date documentation on the Kyverno website.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake codegen-api-docs\n```\n\n----------------------------------------\n\nTITLE: Building Kyverno Docker Images Locally\nDESCRIPTION: These commands show how to build Docker images for kyvernopre, kyverno, and cli components using ko.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake ko-build-kyverno-init\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake ko-build-kyverno\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake ko-build-cli\n```\n\n----------------------------------------\n\nTITLE: Example Output of Detailed Report Listing\nDESCRIPTION: Sample output from the kubectl get cadmr -o wide command, displaying detailed information about cluster admission reports including the API version, kind, subject, status counts, age, and hash value of the associated resources.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/troubleshooting/reports.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl get cadmr -o wide\nNAME                                   APIVERSION                     KIND                       SUBJECT                                            PASS   FAIL   WARN   ERROR   SKIP   AGE     HASH\n06aa537a-e81d-4253-8eb2-cd72f366a000   rbac.authorization.k8s.io/v1   ClusterRole                view                                               0      0      0      0       1      8h      5c71e236747d42e7b2a0cedd3f36434d\n076d70b7-64c4-41b0-957e-07122680f930   apiextensions.k8s.io/v1        CustomResourceDefinition   generaterequests.kyverno.io                        0      0      0      0       1      7h48m   b82b99dd89e7ed7ec064d2f96d4b690a\n```\n\n----------------------------------------\n\nTITLE: Example ArgoCD Application Manifest for Kyverno\nDESCRIPTION: YAML configuration for an ArgoCD Application that works with the Kyverno chart. It includes necessary settings like Replace=true to handle the chart's requirements.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: kyverno\n  namespace: argocd\nspec:\n  destination:\n    namespace: kyverno\n    server: https://kubernetes.default.svc\n  project: default\n  source:\n    chart: kyverno\n    repoURL: https://kyverno.github.io/kyverno\n    targetRevision: 2.6.0\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true\n      - Replace=true\n```\n\n----------------------------------------\n\nTITLE: Executing Kyverno Docs Command\nDESCRIPTION: Examples of how to use the 'kyverno docs' command to generate documentation. The first example generates simple markdown documentation, while the second generates website documentation.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_docs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  # Generate simple markdown documentation\n  KYVERNO_EXPERIMENTAL=true kyverno docs -o . --autogenTag=false\n\n  # Generate website documentation\n  KYVERNO_EXPERIMENTAL=true kyverno docs -o . --website\n```\n\n----------------------------------------\n\nTITLE: Defining Policies for Namespace Label Enforcement in Kyverno\nDESCRIPTION: This snippet outlines the policies to enforce the presence of specific labels on Kubernetes namespaces in Kyverno. The first rule mandates the `purpose` label as required, while the second rule checks for the `environment` label in an audit mode. These policies are essential for ensuring compliance with organizational standards regarding namespace labeling.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/reports/background/two-rules-with-different-modes/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: ns-labels-policy\nspec:\n  validationFailureAction: enforce\n  rules:\n  - name: require-ns-purpose-label\n    match:\n      resources:\n        kinds:\n        - Namespace\n    validate:\n      message: \"Namespace must have a purpose label.\"\n      pattern:\n        metadata:\n          labels:\n            purpose: ?\n  - name: require-ns-env-label\n    match:\n      resources:\n        kinds:\n        - Namespace\n    validate:\n      message: \"Namespace must have an environment label.\"\n      pattern:\n        metadata:\n          labels:\n            environment: ?\n```\n\n----------------------------------------\n\nTITLE: Deploying Kyverno with Helm on KinD\nDESCRIPTION: Commands to build local Kyverno images, load them into a KinD cluster, and deploy using helm charts. Options include deploying just Kyverno, just policies, or both components together.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n# build images, load them in KinD cluster and deploy kyverno helm chart\nmake kind-deploy-kyverno\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Controller RBAC in Kyverno (YAML)\nDESCRIPTION: YAML configuration for setting up RBAC (Role-Based Access Control) for the Kyverno background controller. Includes options for creating service accounts, role bindings, and specifying cluster role permissions.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nbackgroundController:\n  rbac:\n    create: true\n    createViewRoleBinding: true\n    viewRoleName: \"view\"\n    serviceAccount:\n      name: null\n      annotations: {}\n    coreClusterRole:\n      extraResources: []\n    clusterRole:\n      extraResources: []\n```\n\n----------------------------------------\n\nTITLE: Deploying Kyverno Policies with Helm\nDESCRIPTION: Command to deploy the kyverno-policies helm chart on a KinD cluster.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n# deploy kyverno-policies helm chart\nmake kind-deploy-kyverno-policies\n```\n\n----------------------------------------\n\nTITLE: Kyverno Create Command Examples\nDESCRIPTION: Examples of using the 'kyverno create' command for different purposes, including creating metrics config, test files, user info, and values files.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create metrics config file\nkyverno create metrics-config -i ns-included-1 -i ns-included-2 -e ns-excluded\n\n# Create test file\nkyverno create test -p policy.yaml -r resource.yaml -f values.yaml --pass policy-name,rule-name,resource-name,resource-namespace,resource-kind\n\n# Create user info file\nkyverno create user-info -u molybdenum@somecorp.com -g basic-user -c admin\n\n# Create values file\nkyverno create values -g request.mode=dev -n prod,env=prod --rule policy,rule,env=demo --resource policy,resource,env=demo\n```\n\n----------------------------------------\n\nTITLE: Kyverno OCI Command Examples\nDESCRIPTION: Examples of using the Kyverno OCI command to push policies to an OCI image and pull policies from an OCI image. These examples demonstrate the basic workflow for managing policies with OCI registries.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_oci.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Push policy to an OCI image from a given policy file\nkyverno oci push -p policy.yaml -i <imgref>\n\n# Pull policy from an OCI image and save it to the specific directory\nkyverno oci pull -i <imgref> -d policies\n```\n\n----------------------------------------\n\nTITLE: Basic Kyverno Test Command Syntax\nDESCRIPTION: The basic syntax for running the Kyverno test command, which accepts local folder paths or git repository URLs as input.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_test.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno test [local folder or git repository]... [flags]\n```\n\n----------------------------------------\n\nTITLE: Running Kyverno Locally for Debugging\nDESCRIPTION: Command to run Kyverno locally against a remote Kubernetes cluster for debugging purposes, specifying the required parameters for proper connection.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_22\n\nLANGUAGE: console\nCODE:\n```\ngo run ./cmd/kyverno/ --kubeconfig ~/.kube/config --serverIP=<local-ip>:9443 --backgroundServiceAccountName=system:serviceaccount:kyverno:kyverno-background-controller --caSecretName=kyverno-svc.kyverno.svc.kyverno-tls-ca  --tlsSecretName=kyverno-svc.kyverno.svc.kyverno-tls-pair\n```\n\n----------------------------------------\n\nTITLE: Kyverno JP Command Examples\nDESCRIPTION: Examples demonstrating how to use the 'kyverno jp' command, including listing functions, evaluating queries, and parsing expressions. These examples showcase the command's capabilities in working with JMESPath and Kyverno functions.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_jp.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List functions\nkyverno jp function\n\n# Evaluate query\nkyverno jp query -i object.yaml 'request.object.metadata.name | truncate(@, `9`)'\n\n# Parse expression\nkyverno jp parse 'request.object.metadata.name | truncate(@, `9`)'\n```\n\n----------------------------------------\n\nTITLE: Creating Deny Policy for Deployment Scaling in Audit Mode\nDESCRIPTION: Defines a Kyverno policy that prevents scaling of Deployments in audit mode, allowing observation of potential violations without blocking actions\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/validate/clusterpolicy/standard/subresource/README.md#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Deploying Custom Kyverno Policies with Helm Values\nDESCRIPTION: Example YAML configuration for adding custom Kyverno policies through the Helm chart's customPolicies value. This allows users to deploy their own policy definitions alongside the standard Pod Security policies.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno-policies/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncustomPolicies:\n  - apiVersion: kyverno.io/v1\n    kind: ClusterPolicy\n    metadata: # metadata\n    spec: # spec\n```\n\n----------------------------------------\n\nTITLE: Sample BackgroundScanReport YAML for PSS Policies\nDESCRIPTION: Example of a BackgroundScanReport resource generated by Kyverno when using Pod Security Standards (PSS) policies with the restricted profile. This shows the structure and size of policy reports.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/reports/README.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kyverno.io/v1alpha2\nkind: BackgroundScanReport\nmetadata:\n  annotations:\n    audit.kyverno.io/last-scan-time: \"2023-04-16T15:37:53Z\"\n  creationTimestamp: \"2023-04-16T15:37:53Z\"\n  generation: 2\n  labels:\n    app.kubernetes.io/managed-by: kyverno\n    audit.kyverno.io/resource.hash: dae620c229e01ae80bf829cfd8325920\n    audit.kyverno.io/resource.uid: bb228314-0e3e-42c2-b945-63efe9279ad4\n    cpol.kyverno.io/disallow-capabilities: \"226174\"\n    cpol.kyverno.io/disallow-capabilities-strict: \"226697\"\n    cpol.kyverno.io/disallow-host-namespaces: \"226184\"\n    cpol.kyverno.io/disallow-host-path: \"226191\"\n    cpol.kyverno.io/disallow-host-ports: \"226145\"\n    cpol.kyverno.io/disallow-host-process: \"226185\"\n    cpol.kyverno.io/disallow-privilege-escalation: \"226708\"\n    cpol.kyverno.io/disallow-privileged-containers: \"226180\"\n    cpol.kyverno.io/disallow-proc-mount: \"226172\"\n    cpol.kyverno.io/disallow-selinux: \"226187\"\n    cpol.kyverno.io/require-run-as-non-root-user: \"226717\"\n    cpol.kyverno.io/require-run-as-nonroot: \"226729\"\n    cpol.kyverno.io/restrict-apparmor-profiles: \"226181\"\n    cpol.kyverno.io/restrict-seccomp: \"226167\"\n    cpol.kyverno.io/restrict-seccomp-strict: \"226746\"\n    cpol.kyverno.io/restrict-sysctls: \"226169\"\n    cpol.kyverno.io/restrict-volume-types: \"226761\"\n  name: bb228314-0e3e-42c2-b945-63efe9279ad4\n  namespace: kyverno\n  ownerReferences:\n  - apiVersion: v1\n    kind: Pod\n    name: kyverno-admission-controller-7d998c79c4-rj7th\n    uid: bb228314-0e3e-42c2-b945-63efe9279ad4\n  resourceVersion: \"226964\"\n  uid: d4721704-e188-4dcd-ad39-be7e8cc92707\nspec:\n  results:\n  - category: Pod Security Standards (Baseline)\n    message: validation rule 'adding-capabilities' passed.\n    policy: disallow-capabilities\n    result: pass\n    rule: adding-capabilities\n    scored: true\n    severity: medium\n    source: kyverno\n    timestamp:\n      nanos: 0\n      seconds: 1681659473\n  - category: Pod Security Standards (Restricted)\n    message: rule passed\n    policy: disallow-capabilities-strict\n    result: pass\n    rule: adding-capabilities-strict\n    scored: true\n    severity: medium\n    source: kyverno\n    timestamp:\n      nanos: 0\n      seconds: 1681659534\n  - category: Pod Security Standards (Restricted)\n    message: rule passed\n    policy: disallow-capabilities-strict\n    result: pass\n    rule: require-drop-all\n    scored: true\n    severity: medium\n    source: kyverno\n    timestamp:\n      nanos: 0\n      seconds: 1681659534\n  - category: Pod Security Standards (Baseline)\n    message: validation rule 'host-namespaces' passed.\n    policy: disallow-host-namespaces\n    result: pass\n    rule: host-namespaces\n    scored: true\n    severity: medium\n    source: kyverno\n    timestamp:\n      nanos: 0\n      seconds: 1681659473\n  - category: Pod Security Standards (Baseline)\n    message: validation rule 'host-path' passed.\n    policy: disallow-host-path\n    result: pass\n    rule: host-path\n    scored: true\n    severity: medium\n    source: kyverno\n    timestamp:\n      nanos: 0\n      seconds: 1681659473\n  - category: Pod Security Standards (Baseline)\n    message: validation rule 'host-ports-none' passed.\n    policy: disallow-host-ports\n    result: pass\n    rule: host-ports-none\n    scored: true\n    severity: medium\n    source: kyverno\n    timestamp:\n      nanos: 0\n      seconds: 1681659473\n  - category: Pod Security Standards (Baseline)\n    message: validation rule 'host-process-containers' passed.\n    policy: disallow-host-process\n    result: pass\n    rule: host-process-containers\n    scored: true\n    severity: medium\n    source: kyverno\n    timestamp:\n      nanos: 0\n      seconds: 1681659473\n  - category: Pod Security Standards (Restricted)\n    message: validation rule 'privilege-escalation' passed.\n    policy: disallow-privilege-escalation\n    result: pass\n    rule: privilege-escalation\n    scored: true\n    severity: medium\n    source: kyverno\n    timestamp:\n      nanos: 0\n      seconds: 1681659534\n  - category: Pod Security Standards (Baseline)\n    message: validation rule 'privileged-containers' passed.\n    policy: disallow-privileged-containers\n    result: pass\n    rule: privileged-containers\n    scored: true\n    severity: medium\n    source: kyverno\n    timestamp:\n      nanos: 0\n      seconds: 1681659473\n  - category: Pod Security Standards (Baseline)\n    message: validation rule 'check-proc-mount' passed.\n    policy: disallow-proc-mount\n    result: pass\n    rule: check-proc-mount\n    scored: true\n    severity: medium\n    source: kyverno\n    timestamp:\n      nanos: 0\n      seconds: 1681659473\n  - category: Pod Security Standards (Baseline)\n    message: validation rule 'selinux-type' passed.\n    policy: disallow-selinux\n    result: pass\n    rule: selinux-type\n    scored: true\n    severity: medium\n    source: kyverno\n    timestamp:\n      nanos: 0\n      seconds: 1681659473\n  - category: Pod Security Standards (Baseline)\n    message: validation rule 'selinux-user-role' passed.\n    policy: disallow-selinux\n    result: pass\n    rule: selinux-user-role\n    scored: true\n    severity: medium\n    source: kyverno\n    timestamp:\n      nanos: 0\n      seconds: 1681659473\n  - category: Pod Security Standards (Restricted)\n    message: validation rule 'run-as-non-root-user' passed.\n    policy: require-run-as-non-root-user\n    result: pass\n    rule: run-as-non-root-user\n    scored: true\n    severity: medium\n    source: kyverno\n    timestamp:\n      nanos: 0\n      seconds: 1681659534\n  - category: Pod Security Standards (Restricted)\n    message: validation rule 'run-as-non-root' anyPattern[1] passed.\n    policy: require-run-as-nonroot\n    result: pass\n    rule: run-as-non-root\n    scored: true\n    severity: medium\n    source: kyverno\n    timestamp:\n      nanos: 0\n      seconds: 1681659534\n  - category: Pod Security Standards (Baseline)\n    message: validation rule 'app-armor' passed.\n    policy: restrict-apparmor-profiles\n    result: pass\n    rule: app-armor\n    scored: true\n    severity: medium\n    source: kyverno\n    timestamp:\n      nanos: 0\n      seconds: 1681659473\n  - category: Pod Security Standards (Baseline)\n    message: validation rule 'check-seccomp' passed.\n    policy: restrict-seccomp\n    result: pass\n    rule: check-seccomp\n    scored: true\n    severity: medium\n    source: kyverno\n    timestamp:\n      nanos: 0\n      seconds: 1681659473\n  - category: Pod Security Standards (Restricted)\n    message: validation rule 'check-seccomp-strict' anyPattern[1] passed.\n    policy: restrict-seccomp-strict\n    result: pass\n    rule: check-seccomp-strict\n    scored: true\n    severity: medium\n    source: kyverno\n    timestamp:\n      nanos: 0\n      seconds: 1681659534\n  - category: Pod Security Standards (Baseline)\n    message: validation rule 'check-sysctls' passed.\n    policy: restrict-sysctls\n    result: pass\n    rule: check-sysctls\n    scored: true\n    severity: medium\n    source: kyverno\n    timestamp:\n      nanos: 0\n      seconds: 1681659473\n  - category: Pod Security Standards (Restricted)\n    message: validation rule 'restricted-volumes' passed.\n    policy: restrict-volume-types\n    result: pass\n    rule: restricted-volumes\n    scored: true\n    severity: medium\n    source: kyverno\n    timestamp:\n      nanos: 0\n      seconds: 1681659534\n  summary:\n    error: 0\n    fail: 0\n    pass: 19\n    skip: 0\n    warn: 0\n```\n\n----------------------------------------\n\nTITLE: Installing Kyverno PSS Policies\nDESCRIPTION: Helm command to install Kyverno pod security standard policies with specific validation settings.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/perf-testing/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nhelm upgrade --install kyverno kyverno/kyverno-policies --set=podSecurityStandard=restricted --set=background=true --set=validationFailureAction=Audit --devel\n```\n\n----------------------------------------\n\nTITLE: Kyverno Test Command Usage Examples\nDESCRIPTION: Examples demonstrating how to run tests from a git repository, local folder, and with test case selectors.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_test.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  # Test a git repository containing Kyverno test cases\n  kyverno test https://github.com/kyverno/policies/pod-security --git-branch main\n\n  # Test a local folder containing test cases\n  kyverno test .\n\n  # Test some specific test cases out of many test cases in a local folder\n  kyverno test . --test-case-selector \"policy=disallow-latest-tag, rule=require-image-tag, resource=test-require-image-tag-pass\"\n```\n\n----------------------------------------\n\nTITLE: Installing Kyverno Policies Helm Chart\nDESCRIPTION: Console commands for adding the Kyverno Helm repository and installing the Kyverno Policies chart. These commands set up the Pod Security Standard policies in the kyverno namespace.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno-policies/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n## Add the Kyverno Helm repository\n$ helm repo add kyverno https://kyverno.github.io/kyverno/\n\n## Install the Kyverno Policies Helm chart\n$ helm install kyverno-policies --namespace kyverno kyverno/kyverno-policies\n```\n\n----------------------------------------\n\nTITLE: Fixing Kyverno Test Files Example in Bash\nDESCRIPTION: This example demonstrates how to use the 'kyverno fix' command to fix Kyverno test files. The command is run with the 'test' subcommand, specifying the current directory ('.') and the '--save' flag to save the changes.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_fix.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nKYVERNO_EXPERIMENTAL=true kyverno fix test . --save\n```\n\n----------------------------------------\n\nTITLE: Generating Helm Chart Documentation\nDESCRIPTION: Command to generate documentation for Kyverno's helm charts based on their default values.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n# generate helm docs\nmake codegen-helm-docs\n```\n\n----------------------------------------\n\nTITLE: High Availability Warning for Admission Controller in Go Template\nDESCRIPTION: This snippet checks the replica count for the admission controller and displays a warning if it's not set or less than 2, indicating that Kyverno is not running in high availability mode.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/templates/NOTES.txt#2025-04-21_snippet_2\n\nLANGUAGE: go-template\nCODE:\n```\n{{ if not .Values.admissionController.replicas }}\n⚠️  WARNING: Setting the admission controller replica count below 2 means Kyverno is not running in high availability mode.\n{{- else if lt (int .Values.admissionController.replicas) 2 }}\n⚠️  WARNING: Setting the admission controller replica count below 2 means Kyverno is not running in high availability mode.\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Kyverno OCI Pull Command in Bash\nDESCRIPTION: This example demonstrates how to pull a policy from an OCI image and save it to the current directory. The -i flag is used to specify the image reference.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_oci_pull.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkyverno oci pull . -i <imgref>\n```\n\n----------------------------------------\n\nTITLE: Counting Reports by Resource Kind in Kubernetes\nDESCRIPTION: Script to count Kyverno reports by resource kind, helping to identify if a particular resource type is generating too many reports. The script iterates through all API resources and counts associated reports.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/troubleshooting/reports.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nAPI_LIST=$(kubectl api-resources --namespaced=false --no-headers | awk '{print $NF}')\nfor api in $API_LIST\ndo\n    COUNT=$(kubectl get cadmr --no-headers -o jsonpath=\"{range .items[?(@.metadata.ownerReferences[0].kind=='$api')]}{.metadata.name}{'\\n'}{end}\" 2> /dev/null | wc -l)\n    echo \"number of cluster admission reports for $api: $COUNT\"\n\n    COUNT=$(kubectl get cbgscanr --no-headers -o jsonpath=\"{range .items[?(@.metadata.ownerReferences[0].kind=='$api')]}{.metadata.name}{'\\n'}{end}\" 2> /dev/null | wc -l)\n    echo \"number of cluster background scan reports for $api: $COUNT\"\ndone\n\nAPI_LIST=$(kubectl api-resources --namespaced=true --no-headers | awk '{print $NF}')\nfor api in $API_LIST\ndo\n    COUNT=$(kubectl get admr -A --no-headers -o jsonpath=\"{range .items[?(@.metadata.ownerReferences[0].kind=='$api')]}{.metadata.name}{'\\n'}{end}\" 2> /dev/null | wc -l)\n    echo \"number of admission reports for $api: $COUNT\"\n\n    COUNT=$(kubectl get bgscanr --no-headers -o jsonpath=\"{range .items[?(@.metadata.ownerReferences[0].kind=='$api')]}{.metadata.name}{'\\n'}{end}\" 2> /dev/null | wc -l)\n    echo \"number of background scan reports for $api: $COUNT\"\ndone\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation\nDESCRIPTION: Command to generate API reference documentation based on the Kyverno API definitions.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n# generate API docs\nmake codegen-api-docs\n```\n\n----------------------------------------\n\nTITLE: Kyverno JP Query Command Examples\nDESCRIPTION: Demonstrates various usage examples of the kyverno jp query command, including evaluating a single query, using query files, multiple queries, and input/output piping.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_jp_query.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  # Evaluate query\n  kyverno jp query -i object.yaml 'request.object.metadata.name | truncate(@, `9`)'\n\n  # Evaluate query\n  kyverno jp query -i object.yaml -q query-file\n\n  # Evaluate multiple queries\n  kyverno jp query -i object.yaml -q query-file-1 -q query-file-2 'request.object.metadata.name | truncate(@, `9`)'\n\n  # Cat query into\n  cat query-file | kyverno jp query -i object.yaml\n\n  # Cat object into\n  cat object.yaml | kyverno jp query -q query-file\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Flag Constants in Go\nDESCRIPTION: This snippet demonstrates how to define constants for a new feature flag, including the flag name, description, environment variable, and default value.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/feature-flags/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nEnableDeferredLoadingFlagName    = \"enableDeferredLoading\"\nEnableDeferredLoadingDescription = \"enable deferred loading of context variables\"\nenableDeferredLoadingEnvVar      = \"FLAG_ENABLE_DEFERRED_LOADING\"\ndefaultEnableDeferredLoading     = true\n```\n\n----------------------------------------\n\nTITLE: Identifying Orphaned Reports in Kubernetes\nDESCRIPTION: Script to count orphaned reports (reports without owner references) in a Kubernetes cluster. A high number of orphaned reports may indicate issues with the report controller. The script calculates orphans by subtracting reports with owner references from the total count.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/troubleshooting/reports.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nALL=$(kubectl get cadmr --no-headers | wc -l)\nNOT_ORPHANS=$(kubectl get cadmr --no-headers -o jsonpath=\"{range .items[?(@.metadata.ownerReferences[0].uid)]}{.metadata.name}{'\\n'}{end}\" 2> /dev/null | wc -l)\necho \"number of orphan cluster admission reports: $((ALL-NOT_ORPHANS)) ($ALL - $NOT_ORPHANS)\"\n\nALL=$(kubectl get cadmr --no-headers 2> /dev/null | wc -l)\nNOT_ORPHANS=$(kubectl get cadmr --no-headers -o jsonpath=\"{range .items[?(@.metadata.ownerReferences[0].uid)]}{.metadata.name}{'\\n'}{end}\" 2> /dev/null | wc -l)\necho \"number of orphan cluster background scan reports: $((ALL-NOT_ORPHANS)) ($ALL - $NOT_ORPHANS)\"\n\nALL=$(kubectl get admr -A --no-headers 2> /dev/null | wc -l)\nNOT_ORPHANS=$(kubectl get admr -A --no-headers -o jsonpath=\"{range .items[?(@.metadata.ownerReferences[0].uid)]}{.metadata.name}{'\\n'}{end}\" 2> /dev/null | wc -l)\necho \"number of orphan admission reports: $((ALL-NOT_ORPHANS)) ($ALL - $NOT_ORPHANS)\"\n\nALL=$(kubectl get bgscanr -A --no-headers 2> /dev/null | wc -l)\nNOT_ORPHANS=$(kubectl get bgscanr -A --no-headers -o jsonpath=\"{range .items[?(@.metadata.ownerReferences[0].uid)]}{.metadata.name}{'\\n'}{end}\" 2> /dev/null | wc -l)\necho \"number of orphan background scan reports: $((ALL-NOT_ORPHANS)) ($ALL - $NOT_ORPHANS)\"\n```\n\n----------------------------------------\n\nTITLE: Basic Kyverno Apply Command Syntax\nDESCRIPTION: The basic syntax for the 'kyverno apply' command that applies policies on resources.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_apply.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno apply [flags]\n```\n\n----------------------------------------\n\nTITLE: Generating Policy Reports CRD Definitions\nDESCRIPTION: Command to generate Custom Resource Definition manifests specifically for Policy Reports resources.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n# generate policy reports CRDs\nmake codegen-crds-report\n```\n\n----------------------------------------\n\nTITLE: Examples of kyverno fix policy Usage\nDESCRIPTION: Examples demonstrating how to use the kyverno fix policy command to fix Kyverno policy files, including an option to save the fixed files back to disk.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_fix_policy.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  # Fix Kyverno policy files\n  KYVERNO_EXPERIMENTAL=true kyverno fix policy .\n\n  # Fix Kyverno policy files and save them back\n  KYVERNO_EXPERIMENTAL=true kyverno fix policy . --save\n```\n\n----------------------------------------\n\nTITLE: Examples of Using kyverno jp parse Command\nDESCRIPTION: Various examples demonstrating how to use the kyverno jp parse command with different input methods including direct expressions, files, stdin, multiple expressions, and piping.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_jp_parse.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  # Parse expression\n  kyverno jp parse 'request.object.metadata.name | truncate(@, `9`)'\n\n  # Parse expression from a file\n  kyverno jp parse -f my-file\n\n  # Parse expression from stdin\n  kyverno jp parse\n\n  # Parse multiple expressionxs\n  kyverno jp parse -f my-file1 -f my-file-2 'request.object.metadata.name | truncate(@, `9`)'\n\n  # Cat into\n  cat my-file | kyverno jp parse\n```\n\n----------------------------------------\n\nTITLE: Listing Functions and Getting Function Info in Kyverno CLI\nDESCRIPTION: Examples of using the 'kyverno jp function' command to list all available functions and to get information about a specific function (in this case, 'truncate').\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_jp_function.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List functions\nkyverno jp function\n\n# Get function infos\nkyverno jp function truncate\n```\n\n----------------------------------------\n\nTITLE: Configuring Kyverno CRD Groups in YAML\nDESCRIPTION: This YAML snippet defines the configuration for various Kyverno CRD groups, including kyverno, policies, reports, and wgpolicyk8s. It specifies which CRDs should be installed for each group.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/charts/crds/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n  kyverno:\n    cleanuppolicies: true\n    clustercleanuppolicies: true\n    clusterpolicies: true\n    globalcontextentries: true\n    policies: true\n    policyexceptions: true\n    updaterequests: true\n  policies:\n    imagevalidatingpolicies: true\n    policyexceptions: true\n    validatingpolicies: true\n  reports:\n    clusterephemeralreports: true\n    ephemeralreports: true\n  wgpolicyk8s:\n    clusterpolicyreports: true\n    policyreports: true\n```\n\n----------------------------------------\n\nTITLE: Generating Kyverno API Deep Copy Functions\nDESCRIPTION: Command to generate deep copy functions specifically for Kyverno API types.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n# generate kyverno deep copy functions\nmake codegen-deepcopy-kyverno\n```\n\n----------------------------------------\n\nTITLE: Kyverno Test Creation Example\nDESCRIPTION: Example showing how to create a test file with policy, resource, and values files while specifying pass conditions\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_test.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkyverno create test -p policy.yaml -r resource.yaml -f values.yaml --pass policy-name,rule-name,resource-name,resource-namespace,resource-kind\n```\n\n----------------------------------------\n\nTITLE: Notary Image Signature Test Requirements\nDESCRIPTION: Test specification defining the verification of container images using notary signatures. The test validates that pods with matching signatures are successfully created.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/verifyImages/clusterpolicy/standard/notary-image-verification/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Description\n\nThis test verifies images using notary signatures\n\n## Expected Behavior\n\nThis test creates a cluster policy.\nWhen a pod is created with the image reference and the signature matches, the pod creation is successful\n\n## Reference Issue(s)\n\n6142\n```\n\n----------------------------------------\n\nTITLE: Example of Creating Metrics Config with Namespace Specifications\nDESCRIPTION: An example showing how to create a metrics configuration file with specific included and excluded namespaces.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_metrics-config.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  # Create metrics config file\n  kyverno create metrics-config -i ns-included-1 -i ns-included-2 -e ns-excluded\n```\n\n----------------------------------------\n\nTITLE: Defining Kyverno Mutation Policy with AuditWarning in YAML\nDESCRIPTION: This YAML snippet defines a Kyverno policy that mutates resources and sets auditWarning. It demonstrates how to configure a policy to emit warnings during audit checks while still applying mutations.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/mutate/e2e/emit-warning/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Title\n\nThis test verifies that a warning is emitted when auditWarning is set in mutate policies\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes API Informers\nDESCRIPTION: Command to generate just the Kubernetes API informers for Kyverno.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n# generate informers\nmake codegen-client-informers\n```\n\n----------------------------------------\n\nTITLE: Kyverno Policy Exception Test Steps\nDESCRIPTION: Step-by-step test procedure for verifying policy exception behavior in Kyverno's background scanning. The test creates a pod, applies a cluster policy, creates a policy exception, and validates the policy report shows the resource as skipped.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/reports/background/exception-with-conditions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1.  - Create a pod named `apps`\n2.  - Create a cluster policy\n    - Assert the policy becomes ready\n3.  - Create a policy exception for the cluster policy created above, configured to apply to pod named `apps`\n4.  - Assert that a policy report exists with a skipped result\n```\n\n----------------------------------------\n\nTITLE: Running Kyverno JSON Scan Command\nDESCRIPTION: Basic command syntax for running tests against JSON compatible payloads and policies. This is an experimental command that requires the KYVERNO_EXPERIMENTAL environment variable to be set to true.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_json_scan.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno json scan [flags]\n```\n\n----------------------------------------\n\nTITLE: Kyverno OCI Push Command Examples\nDESCRIPTION: Examples showing how to push single policy files or multiple policies from a directory to an OCI registry as an image.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_oci_push.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  # Push policy to an OCI image from a given policy file\n  kyverno oci push ./policy.yaml -i <imgref>\n\n  # Push multiple policies to an OCI image from a given directory that includes policies\n  kyverno oci push . -i <imgref>\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes API Listers\nDESCRIPTION: Command to generate just the Kubernetes API listers for Kyverno.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n# generate listers\nmake codegen-client-listers\n```\n\n----------------------------------------\n\nTITLE: Creating K3d Cluster Configurations\nDESCRIPTION: Various commands for creating K3d clusters with different configurations including basic setup, embedded etcd, and custom storage limits.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/perf-testing/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nk3d cluster create --agents=3  --k3s-arg \"--disable=metrics-server@server:*\" --k3s-node-label \"ingress-ready=true@agent:*\"\n\nk3d cluster create scaling --servers 3 --agents=15 --k3s-arg \"--disable=metrics-server@server:*\" --k3s-node-label \"ingress-ready=true@agent:*\" \n\nk3d cluster create scaling --servers 3 --agents=15 --k3s-arg \"--disable=metrics-server@server:*\" --k3s-node-label \"ingress-ready=true@agent:*\" --k3s-arg \"--etcd-arg=quota-backend-bytes=8589934592@server:*\"\n```\n\n----------------------------------------\n\nTITLE: Using Kyverno JP Query Command Syntax\nDESCRIPTION: Shows the basic syntax for using the kyverno jp query command with input files and queries.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_jp_query.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno jp query [-i input] [-q query|query]... [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating a Kyverno Policy Exception File using CLI\nDESCRIPTION: This command creates a Kyverno policy exception file named 'my-exception' in the 'my-ns' namespace, specifying policy rules and resource filters.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_exception.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno create exception my-exception --namespace my-ns --policy-rules \"policy,rule-1,rule-2\" --any \"kind=Pod,kind=Deployment,name=test-*\"\n```\n\n----------------------------------------\n\nTITLE: Restoring Kyverno Policies\nDESCRIPTION: Command to restore previously backed up Kyverno policies. This is used after upgrading to v3 of the Helm chart to reapply your existing policies.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f kyvernobackup.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes API Clientset\nDESCRIPTION: Command to generate just the Kubernetes API clientset for Kyverno.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n# generate clientset\nmake codegen-client-clientset\n```\n\n----------------------------------------\n\nTITLE: Installing Kyverno with Helm\nDESCRIPTION: Helm commands to install Kyverno with specific configurations for monitoring and resource limits.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/perf-testing/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nhelm repo add kyverno https://kyverno.github.io/kyverno/\nhelm repo update\nhelm upgrade --install kyverno kyverno/kyverno -n kyverno \\\n  --create-namespace \\\n  --set admissionController.serviceMonitor.enabled=true \\\n  --set admissionController.replicas=3 \\\n  --set reportsController.serviceMonitor.enabled=true \\\n  --set reportsController.resources.limits.memory=10Gi \\\n  --set \"features.omitEvents.eventTypes={PolicyApplied,PolicySkipped,PolicyViolation,PolicyError}\"\n```\n\n----------------------------------------\n\nTITLE: Kyverno Docs Command Options\nDESCRIPTION: Lists the available options for the 'kyverno docs' command, including autogenTag, help, markdownLinks, noDate, output, and website options. These options allow customization of the documentation generation process.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_docs.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --autogenTag      Determines if the generated docs should contain a timestamp (default true)\n  -h, --help            help for docs\n      --markdownLinks   Determines if the generated docs should contain links to markdown files\n      --noDate          Determines if the generated docs should contain a date\n  -o, --output string   Output path (default \".\")\n      --website         Website version\n```\n\n----------------------------------------\n\nTITLE: Creating Cluster Role Command Syntax\nDESCRIPTION: Basic command syntax for creating a ClusterRole using Kyverno CLI with name parameter and flags.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_cluster-role.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno create cluster-role [name]  [flags]\n```\n\n----------------------------------------\n\nTITLE: Generating All Kubernetes API Client Components\nDESCRIPTION: Command to generate all Kubernetes API client components (clientset, listers, and informers) based on the Kyverno API definitions.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n# generate clientset, listers and informers\nmake codegen-client-all\n```\n\n----------------------------------------\n\nTITLE: Querying Reports with Detailed Information in Kubernetes\nDESCRIPTION: Commands to list different types of Kyverno reports with detailed information using the -o wide flag. This provides additional context about the resources associated with reports, helping to identify responsible resource kinds and orphaned reports.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/troubleshooting/reports.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# list cluster admission reports\nkubectl get cadmr -o wide\n\n# list cluster background scan reports\nkubectl get cbgscanr -o wide\n\n# list admission reports\nkubectl get admr -A -o wide\n\n# list background scan reports\nkubectl get bgscanr -A -o wide\n```\n\n----------------------------------------\n\nTITLE: Creating Kyverno Cleanup Policy with Valid Schedule in YAML\nDESCRIPTION: This YAML snippet defines a Kyverno CleanupPolicy with a valid schedule. The policy is set to run every 10 minutes and targets resources labeled with 'cleanup=yes'. It's expected to be successfully created.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/cleanup/v2beta1/validation/cron-format/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kyverno.io/v2alpha1\nkind: CleanupPolicy\nmetadata:\n  name: cleanup-policy-valid\nspec:\n  schedule: \"*/10 * * * *\"\n  match:\n    any:\n    - resources:\n        kinds:\n        - \"*\"\n        selector:\n          matchLabels:\n            cleanup: \"yes\"\n  conditions:\n    all:\n    - key: \"{{creation_timestamp}}\"\n      operator: LessThan\n      value: \"{{request.object.spec.ttl}}\"\n  action: delete\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Version Compatibility Check in Go Template\nDESCRIPTION: This code checks the Kubernetes version and displays a warning if it's below 1.21.0, which is the minimum version officially supported by Kyverno.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/templates/NOTES.txt#2025-04-21_snippet_3\n\nLANGUAGE: go-template\nCODE:\n```\n{{- if semverCompare \"<1.21.0\" .Capabilities.KubeVersion.Version }}\n⚠️  WARNING: The minimal Kubernetes version officially supported by Kyverno is 1.21. Earlier versions are untested and Kyverno is not guaranteed to work with Kubernetes {{ .Capabilities.KubeVersion.Version }}.\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Running Kyverno JP Command\nDESCRIPTION: Basic syntax for running the 'kyverno jp' command with flags. This command provides access to JMESPath functionality enhanced with Kyverno-specific custom functions.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_jp.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno jp [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Policy for Container Image Repository\nDESCRIPTION: A Kyverno policy that enforces container image repository matching with namespace environment labels, with exemption capabilities\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/validate/clusterpolicy/standard/cel/cel-variables/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n## Policy Definition Snippet\n# Validates container images match namespace environment or are exempt\n```\n\n----------------------------------------\n\nTITLE: Executing Kyverno Fix Command in Bash\nDESCRIPTION: This snippet shows the basic syntax for running the 'kyverno fix' command. It is used to fix inconsistencies and deprecated usage of Kyverno resources. The command requires the KYVERNO_EXPERIMENTAL environment variable to be set to true.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_fix.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno fix [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining Kyverno Policy with Namespace Exclusion\nDESCRIPTION: Creates a Kyverno policy that requires a 'foo: bar' label on resources, with a specific namespace excluded from validation\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/validate/clusterpolicy/standard/exclude/exclude-namespace/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: require-foo-bar-label\nspec:\n  validationFailureAction: Enforce\n  rules:\n  - name: require-foo-bar-label\n    match:\n      resources:\n        kinds:\n        - '*'\n    exclude:\n      clusterRoles:\n      - cluster-admin\n      namespaces:\n      - excluded-namespace\n    validate:\n      message: \"All resources must have a foo: bar label\"\n      pattern:\n        metadata:\n          labels:\n            foo: bar\n```\n\n----------------------------------------\n\nTITLE: Kyverno Version Example Usage\nDESCRIPTION: Example showing how to print the Kyverno CLI version.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_version.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkyverno version\n```\n\n----------------------------------------\n\nTITLE: Kyverno User Info Creation Example\nDESCRIPTION: Example showing how to create a user info file with a username, group, and cluster role.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_user-info.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkyverno create user-info -u molybdenum@somecorp.com -g basic-user -c admin\n```\n\n----------------------------------------\n\nTITLE: Visualizing Background Scan Report Generation Process in Kyverno\nDESCRIPTION: This flowchart shows how background scan reports are created and updated based on resource changes, policy changes, or at regular intervals. The controller evaluates policies against existing resources and updates the corresponding background scan report.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/reports/README.md#2025-04-21_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\nR(Resource changes) --> B(Background scan controller)\nP(Policy changes) --> B(Background scan controller)\nT(At regular intervals) --> B(Background scan controller)\nB(Background scan controller) --> E(Evaluates policies against existing resource)\nE(Evaluates policies against existing resource) -->|create/update| REPORT(Background scan report)\n```\n\n----------------------------------------\n\nTITLE: Kyverno Test Command Options\nDESCRIPTION: Available command-line options specific to the test command, including flags for detailed results, test case selection, and registry access.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_test.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --detailed-results            If set to true, display detailed results\n      --fail-only                   If set to true, display all the failing test only as output for the test command\n  -f, --file-name string            Test filename (default \"kyverno-test.yaml\")\n  -b, --git-branch string           Test github repository branch\n  -h, --help                        help for test\n      --registry                    If set to true, access the image registry using local docker credentials to populate external data\n      --remove-color                Remove any color from output\n      --require-tests               If set to true, return an error if no tests are found\n  -t, --test-case-selector string   Filter test cases to run (default \"policy=*,rule=*,resource=*\")\n```\n\n----------------------------------------\n\nTITLE: Backing Up Kyverno Policy Resources\nDESCRIPTION: Command to export all Kyverno policy resources to a YAML file for backup. This is a critical step when migrating from v2 to v3 of the Helm chart.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pol,cpol,cleanpol,ccleanpol,polex -A -o yaml > kyvernobackup.yaml\n```\n\n----------------------------------------\n\nTITLE: Basic Kyverno Migrate Command\nDESCRIPTION: The basic syntax for the Kyverno migrate command used to migrate resources to stored versions.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_migrate.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno migrate [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Reports Controller Deployment\nDESCRIPTION: Provides configuration options for Kyverno reports controller, including image, replicas, resource allocation, and networking settings\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nreportsController:\n  enabled: true\n  replicas: null\n  image:\n    registry: null\n    repository: \"kyverno/reports-controller\"\n    pullPolicy: \"IfNotPresent\"\n  resources:\n    limits:\n      memory: \"128Mi\"\n    requests:\n      cpu: \"100m\"\n      memory: \"64Mi\"\n```\n\n----------------------------------------\n\nTITLE: Kyverno JP Query Command Options\nDESCRIPTION: Lists the specific command-line options available for the kyverno jp query command, including input specification, query file selection, and output formatting options.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_jp_query.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --compact         Produce compact JSON output that omits non essential whitespace\n  -h, --help            help for query\n  -i, --input string    Read input from a JSON or YAML file instead of stdin\n  -q, --query strings   Read JMESPath expression from the specified file\n  -u, --unquoted        If the final result is a string, it will be printed without quotes\n```\n\n----------------------------------------\n\nTITLE: Kyverno Fix Test Command Options\nDESCRIPTION: Available options for the 'kyverno fix test' command. These options allow users to customize the behavior of the command, such as compressing test results, specifying a file name, and saving the fixed file.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_fix_test.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --compress           Compress test results\n  -f, --file-name string   Test filename (default \"kyverno-test.yaml\")\n      --force              Force save file\n  -h, --help               help for test\n      --save               Save fixed file\n```\n\n----------------------------------------\n\nTITLE: Checking Kyverno and Litmus Installation Status in Bash\nDESCRIPTION: Commands to verify that Kyverno and Litmus Chaos Operator are running in their respective namespaces. These commands should be executed as part of the prerequisites check.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/litmuschaos/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods\n```\n\n----------------------------------------\n\nTITLE: Configuring Cleanup Controller Monitoring and Tracing\nDESCRIPTION: Provides configuration options for enabling and configuring service monitoring, tracing, and metrics export\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ncleanupController:\n  serviceMonitor:\n    enabled: false\n    interval: \"30s\"\n    scrapeTimeout: \"25s\"\n  tracing:\n    enabled: false\n    address: nil\n    port: nil\n  metering:\n    disabled: false\n    config: \"prometheus\"\n    port: 8000\n```\n\n----------------------------------------\n\nTITLE: Executing Kyverno JP Function Command\nDESCRIPTION: The 'kyverno jp function' command is used to list available functions or get information about specific functions. It can be run with or without function names as arguments.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_jp_function.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno jp function [function_name]... [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Controller Monitoring in Kyverno (YAML)\nDESCRIPTION: YAML configuration for monitoring-related settings of the Kyverno background controller. Includes options for metrics service, ServiceMonitor, and tracing.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nbackgroundController:\n  metricsService:\n    create: true\n    port: 8000\n    type: \"ClusterIP\"\n    nodePort: null\n    annotations: {}\n  serviceMonitor:\n    enabled: false\n    additionalLabels: {}\n    namespace: null\n    interval: \"30s\"\n    scrapeTimeout: \"25s\"\n    secure: false\n    tlsConfig: {}\n    relabelings: []\n    metricRelabelings: []\n  tracing:\n    enabled: false\n    address: null\n    port: null\n    creds: \"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Cleanup Policy with User Info in YAML\nDESCRIPTION: This snippet attempts to create a cleanup policy that includes user information in the match statement. The policy is expected to fail creation due to restrictions on including user info in cleanup policies.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/cleanup/v2beta1/validation/no-user-info-in-match/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kyverno.io/v1\nkind: CleanupPolicy\nmetadata:\n  name: cleanup-user-info\nspec:\n  match:\n    any:\n    - resources:\n        kinds:\n        - Pod\n        namespaces:\n        - \"default\"\n        selector:\n          matchLabels:\n            \"user\": \"{{request.userInfo.username}}\"\n  background: false\n  rules:\n    - name: cleanup-old-pods\n      clean:\n        resource:\n          kind: Pod\n          namespaces:\n          - \"default\"\n      condition:\n        all:\n        - key: \"{{request.object.metadata.creationTimestamp}}\"\n          operator: LessThan\n          value: \"{{request.object.metadata.creationTimestamp | ago '7d'}}\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Kyverno Fix Test Command\nDESCRIPTION: Options inherited from parent commands for the 'kyverno fix test' command. These options provide additional configuration for logging, Kubernetes configuration, and output formatting.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_fix_test.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Using kyverno fix policy Command\nDESCRIPTION: Basic syntax for using the kyverno fix policy command to fix inconsistencies in Kyverno policy files. The command requires the KYVERNO_EXPERIMENTAL environment variable to be set to true.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_fix_policy.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno fix policy [dir]... [flags]\n```\n\n----------------------------------------\n\nTITLE: Verifying PolicyApplied Event in Bash\nDESCRIPTION: This bash script checks for the existence of a PolicyApplied event with a specific message, indicating successful policy application.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/configs/emit-success-events-upon-generateSuccessEvents-set-true/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get events --field-selector type=PolicyApplied | grep \"ConfigMap default/foo: pass\"\nif [ $? -ne 0 ]; then\n  echo \"PolicyApplied event not found\"\n  exit 1\nfi\n```\n\n----------------------------------------\n\nTITLE: Running Kyverno Fix Test Command in Bash\nDESCRIPTION: Examples of how to use the 'kyverno fix test' command with various options. This command is experimental and requires setting the KYVERNO_EXPERIMENTAL environment variable.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_fix_test.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Fix Kyverno test files\nKYVERNO_EXPERIMENTAL=true kyverno fix test .\n\n# Fix Kyverno test files and save them back\nKYVERNO_EXPERIMENTAL=true kyverno fix test . --save\n\n# Fix Kyverno test files with a specific file name\nKYVERNO_EXPERIMENTAL=true kyverno fix test . --file-name test.yaml --save\n```\n\n----------------------------------------\n\nTITLE: Testing Mutation Webhook Configuration\nDESCRIPTION: Test plan outlining steps to verify correct configuration of mutation webhook operations with multiple policies. Verifies both policy creation and webhook configuration validation.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/webhooks/dyn-op-mutate-multiple/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Description\n\nThis test verifies that operations configured dynamically are correct in mutatingwebhookconfiguration with multiple policies\n## Steps\n\n1.  - Create 2 policies with mutate\n    - Assert policy gets ready\n2.  - Assert that the resource mutation webhook is configured correctly\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Kyverno Create Exception Command\nDESCRIPTION: List of options inherited from parent commands, including logging configurations, kubeconfig path, and verbosity levels.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_exception.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Basic Kyverno Version Command\nDESCRIPTION: Basic command syntax for displaying Kyverno CLI version information.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_version.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno version [flags]\n```\n\n----------------------------------------\n\nTITLE: Displaying Kyverno Installation Message in Helm Template\nDESCRIPTION: A Helm template message that confirms successful installation of Kyverno, including the chart version and pod security profile configuration. The message includes version information, selected pod security standard profile, and validation failure action settings.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno-policies/templates/NOTES.txt#2025-04-21_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\nThank you for installing {{ .Chart.Name }} {{ .Chart.Version }} 😀\n\nWe have installed the \"{{ .Values.podSecurityStandard }}\" profile of Pod Security Standards and set them in {{ .Values.validationFailureAction }} mode.\n\nVisit https://kyverno.io/policies/ to find more sample policies.\n```\n\n----------------------------------------\n\nTITLE: Configure Kyverno Policy Exception Test Steps\nDESCRIPTION: Step-by-step instructions for testing Kyverno policy exceptions. The test validates that policy exceptions properly modify background scan results from failed to skipped status for specified resources.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/reports/background/exception/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1.  - Create a confimap named `emergency`\n2.  - Create a cluster policy\n    - Assert the policy becomes ready\n3.  - Create a policy exception for the cluster policy created above, configured to apply to configmap named `emergency`\n4.  - Assert that a policy report exists with a skipped result\n```\n\n----------------------------------------\n\nTITLE: Creating Validating Admission Policy\nDESCRIPTION: This snippet demonstrates how to define a ValidatingAdmissionPolicy that enforces a constraint on the number of replicas for Deployments, ensuring compliance with organizational policies.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/validating-admission-policy-reports/background/with-validating-admission-policy-binding-pass/README.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: policy.kyverno.io/v1\nkind: ValidatingAdmissionPolicy\nmetadata:\n  name: check-replicas\nspec:\n  rules:\n  - name: check-replicas\n    match:\n      resources:\n        kinds:\n        - Deployment\n    validate:\n      message: \"Deployment replicas must be less than or equal to 5.\"\n      pattern:\n        spec:\n          replicas: \"<= 5\"\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for Kyverno Metrics Config Creation\nDESCRIPTION: The basic syntax for creating a Kyverno metrics configuration file using the CLI command.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_metrics-config.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno create metrics-config [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Kyverno Test Creation Command\nDESCRIPTION: The basic command syntax for creating a Kyverno test file\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_test.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno create test [flags]\n```\n\n----------------------------------------\n\nTITLE: Illustrating Policy Reports Aggregation Process in Kyverno\nDESCRIPTION: This flowchart demonstrates how admission reports and background scan reports are aggregated per policy and namespace. The controller collects reports, aggregates them, and creates or updates the corresponding policy reports.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/reports/README.md#2025-04-21_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\nA1(Admission report - aggregated) --> C(Policy report controller)\nA2(Admission report - aggregated) --> C(Policy report controller)\nA3(Admission report - aggregated) --> C(Policy report controller)\nB1(Background scan report) --> C(Policy report controller)\nB2(Background scan report) --> C(Policy report controller)\nB3(Background scan report) --> C(Policy report controller)\nC(Policy report controller) --> AGG(Aggregates per policy/namespace)\nAGG(Aggregates per policy/namespace) -->|create/update| R1(Policy report)\nAGG(Aggregates per policy/namespace) -->|create/update| R2(Policy report)\nAGG(Aggregates per policy/namespace) -->|create/update| R3(Policy report)\nAGG(Aggregates per policy/namespace) -->|create/update| R4(Policy report)\n```\n\n----------------------------------------\n\nTITLE: CEL Validation Rule for Image Repository Matching\nDESCRIPTION: Implements complex validation logic using Common Expression Language (CEL) to check image repository against namespace labels\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/validate/clusterpolicy/standard/cel/cel-variables/README.md#2025-04-21_snippet_1\n\nLANGUAGE: cel\nCODE:\n```\n## CEL Validation Rule\n# Checks if container image matches namespace environment or meets exemption criteria\n```\n\n----------------------------------------\n\nTITLE: Kyverno Create Exception Command Options\nDESCRIPTION: List of available options specific to the 'create exception' command, including filters, background scanning, namespace, output path, and policy rule specification.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_exception.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --all stringArray                                        List of resource filters\n      --any stringArray                                        List of resource filters\n  -b, --background                                             Set to false when policy shouldn't be considered in background scans (default true)\n  -h, --help                                                   help for exception\n      --namespace string                                       Policy exception namespace\n  -o, --output string                                          Output path (uses standard console output if not set)\n      --policy-rules --policy-rules=policy,rule-1,rule-2,...   Policy name, followed by rule names (--policy-rules=policy,rule-1,rule-2,...)\n```\n\n----------------------------------------\n\nTITLE: Kyverno Values Command Options\nDESCRIPTION: Available command-line options specific to the 'create values' command for customizing the values file generation.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_values.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -g, --global strings            Global value\n  -h, --help                      help for values\n  -n, --ns-selector stringArray   Namespace selector\n  -o, --output string             Output path (uses standard console output if not set)\n      --resource stringArray      Policy resource values\n      --rule stringArray          Policy rule values\n```\n\n----------------------------------------\n\nTITLE: Creating Kyverno Values Command Syntax\nDESCRIPTION: Basic command syntax for creating a Kyverno values file using the create values command.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_values.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno create values [flags]\n```\n\n----------------------------------------\n\nTITLE: Using Kyverno OCI Push Command\nDESCRIPTION: The basic syntax for the kyverno oci push command that allows pushing policies to OCI registries.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_oci_push.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno oci push [dir or file] [flags]\n```\n\n----------------------------------------\n\nTITLE: Kyverno Global Command Options\nDESCRIPTION: The global options that are inherited from the parent Kyverno command. These options control various aspects of logging, configuration, and output formatting for all Kyverno commands.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_oci.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Test Steps for Kyverno Generate Policy\nDESCRIPTION: A structured list of test steps that describe the creation of namespaces and policy rules with different generateExisting values to verify selective resource generation.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/generate/clusterpolicy/standard/existing/different-generate-existing-values-reorder/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Create two Namespaces named `red-ns` and `green-ns`.\n\n2. Create a policy with two generate rules:\n    - The first rule named `generate-network-policy` matches Namespaces sets the `generateExisting` to `true`.\n    - The second rule named `generate-config-map` matches Namespaces sets the `generateExisting` to `false`.\n\n3. It is expected that a NetworkPolicy will be generated for each Namespace whereas ConfigMaps will not be generated.\n```\n\n----------------------------------------\n\nTITLE: Executing Kyverno OCI Pull Command in Bash\nDESCRIPTION: This command pulls policies from an OCI image and saves them to a specified directory. It requires setting the KYVERNO_EXPERIMENTAL environment variable to true.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_oci_pull.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno oci pull [dir] [flags]\n```\n\n----------------------------------------\n\nTITLE: Kyverno Values Creation Example\nDESCRIPTION: Example showing how to create a values file with global mode, namespace selectors, rule values, and resource values.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_values.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkyverno create values -g request.mode=dev -n prod,env=prod --rule policy,rule,env=demo --resource policy,resource,env=demo\n```\n\n----------------------------------------\n\nTITLE: Basic Kyverno JSON Command Usage\nDESCRIPTION: Basic syntax for running the kyverno json command with optional flags.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_json.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno json [flags]\n```\n\n----------------------------------------\n\nTITLE: Kyverno JSON Scan Command Options\nDESCRIPTION: Available command-line options specific to the 'scan' command including help flag, label selectors, output format configuration, payload path, policy path, and pre-processing options.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_json_scan.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                  help for scan\n      --labels strings        Labels selectors for policies\n      --output string         Output format (text or json) (default \"text\")\n      --payload string        Path to payload (json or yaml file)\n      --policy strings        Path to kyverno-json policies\n      --pre-process strings   JMESPath expression used to pre process payload\n```\n\n----------------------------------------\n\nTITLE: Testing Policy Exception Steps in Kyverno\nDESCRIPTION: Step-by-step test procedure for validating policy exception behavior in Kyverno. The test involves creating a pod, applying a cluster policy, creating a policy exception, and verifying the policy report shows a skipped status.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/reports/background/exception-with-podsecurity/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1.  - Create a pod named `nginx`\n2.  - Create a cluster policy\n    - Assert the policy becomes ready\n3.  - Create a policy exception for the cluster policy created above, configured to apply to pod named `nginx`\n4.  - Assert that a policy report exists with a skipped result\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Controller Resources and Scheduling in Kyverno (YAML)\nDESCRIPTION: YAML configuration for resource allocation and scheduling of the Kyverno background controller. Includes CPU and memory limits, node selector, tolerations, and affinity settings.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nbackgroundController:\n  resources:\n    limits:\n      memory: \"128Mi\"\n    requests:\n      cpu: \"100m\"\n      memory: \"64Mi\"\n  nodeSelector: {}\n  tolerations: []\n  antiAffinity:\n    enabled: true\n  podAntiAffinity:\n    preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 1\n        podAffinityTerm:\n          labelSelector:\n            matchExpressions:\n              - key: app.kubernetes.io/name\n                operator: In\n                values:\n                  - kyverno\n              - key: app.kubernetes.io/component\n                operator: In\n                values:\n                  - background-controller\n          topologyKey: kubernetes.io/hostname\n  podAffinity: {}\n  nodeAffinity: {}\n  topologySpreadConstraints: []\n```\n\n----------------------------------------\n\nTITLE: Kyverno User Info Command Options\nDESCRIPTION: Available flags and options for customizing the user-info creation command.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_user-info.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-c, --cluster-role strings   Cluster role\n  -g, --group strings          Group\n  -h, --help                   help for user-info\n  -o, --output string          Output path (uses standard console output if not set)\n  -r, --role strings           Role\n  -u, --username string        User name\n```\n\n----------------------------------------\n\nTITLE: Using Kyverno PowerShell Completion Command\nDESCRIPTION: Command to generate PowerShell autocompletion script for Kyverno CLI with basic syntax and available flags.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_completion_powershell.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno completion powershell [flags]\n```\n\n----------------------------------------\n\nTITLE: Validating Kubernetes Policy Precondition for Update Operation\nDESCRIPTION: A Kubernetes policy test that validates precondition matching specifically for update operations on ingress resources, ensuring precise validation trigger conditions\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/validate/clusterpolicy/standard/enforce/validate-existing-with-precondition/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n## Description\n\nThis test verifies that preconditions are respected when validating old object\n```\n\n----------------------------------------\n\nTITLE: Available Options for Metrics Config Creation\nDESCRIPTION: Lists all the specific options available for the 'metrics-config' command, including namespace inclusion/exclusion, naming, and output configuration.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_metrics-config.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -e, --exclude strings    Excluded namespaces\n  -h, --help               help for metrics-config\n  -i, --include strings    Included namespaces\n  -n, --name string        Name (default \"kyverno-metrics\")\n      --namespace string   Namespace (default \"kyverno\")\n  -o, --output string      Output path (uses standard console output if not set)\n```\n\n----------------------------------------\n\nTITLE: Kyverno Migrate Example Usage\nDESCRIPTION: Example showing how to migrate policy exceptions using the Kyverno migrate command.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_migrate.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Migrate policy exceptions\nkyverno migrate --resource policyexceptions.kyverno.io\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options for Kyverno Completion\nDESCRIPTION: Options inherited from parent commands that control logging behavior, Kubernetes configuration, and verbosity levels for the Kyverno CLI.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_completion_bash.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Using kyverno jp parse Command Syntax\nDESCRIPTION: The basic command syntax for the kyverno jp parse command showing the available parameters and flags.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_jp_parse.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno jp parse [-f file|expression]... [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Controller Deployment Settings in Kyverno (YAML)\nDESCRIPTION: YAML configuration for deployment-related settings of the Kyverno background controller. Includes replica count, revision history limit, resync period, and update strategy.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nbackgroundController:\n  replicas: null\n  revisionHistoryLimit: 10\n  resyncPeriod: \"15m\"\n  podLabels: {}\n  podAnnotations: {}\n  annotations: {}\n  updateStrategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Kyverno Test Creation Options\nDESCRIPTION: Available command-line options for customizing test creation\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_test.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --fail fail          Expected fail results\n  -h, --help               help for test\n  -n, --name string        Test name (default \"test-name\")\n  -o, --output string      Output path (uses standard console output if not set)\n      --pass pass          Expected pass results\n  -p, --policy strings     List of policy files\n  -r, --resource strings   List of resource files\n      --skip skip          Expected skip results\n  -f, --values string      Values file\n```\n\n----------------------------------------\n\nTITLE: Error Logging Examples in Kyverno (L0)\nDESCRIPTION: Examples of error logging in Kyverno at level 0, which prints stack traces where errors are defined for deeper debugging. Note that fatal logs don't exist and os.Exit() must be used explicitly.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/logging/logging.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlogging.Error(err, \"failed due to this error\", \"key\", \"value\")\nlogging.Info(\"failed due to this error\", err)\n\n```\n\n----------------------------------------\n\nTITLE: Kyverno Global Command Options\nDESCRIPTION: Inherited global flags for Kyverno CLI affecting logging, output, and Kubernetes configuration.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_completion_fish.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Displaying Kyverno and Chart Versions in Go Template\nDESCRIPTION: This snippet shows how to display the Chart version and Kyverno version using Go template syntax. It uses default values and nested template expressions to handle different scenarios.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/templates/NOTES.txt#2025-04-21_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\nChart version: {{ .Chart.Version }}\nKyverno version: {{ default .Chart.AppVersion (default .Values.admissionController.container.image.tag .Values.admissionController.initContainer.image.tag) }}\n```\n\n----------------------------------------\n\nTITLE: Kyverno Inherited Command Options\nDESCRIPTION: Additional command-line options inherited from parent commands, including logging configuration options.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_migrate.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Kyverno Apply Inherited Command Options\nDESCRIPTION: Options inherited from parent commands that affect logging and output behavior for the 'kyverno apply' command.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_apply.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Expected ConfigMap Structure after Mutation in Kyverno Test\nDESCRIPTION: This YAML snippet shows the expected structure of the target ConfigMap after the ClusterPolicy with mutate existing rule has been applied. The ConfigMap should have data.content set to 'trigger' from the trigger resource and data.targetContent set to 'target' from the target resource itself.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/mutate/clusterpolicy/standard/existing/target-context/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  content: trigger\n  targetContent: target\n```\n\n----------------------------------------\n\nTITLE: Creating Cluster Policy in Kyverno\nDESCRIPTION: This snippet creates a cluster policy and checks if it becomes ready. It is essential for establishing policy rules governing the ConfigMap creations.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/exceptions/allows-rejects-creation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: example-policy\nspec:\n  validationFailureAction: enforce\n  rules:\n    - name: disallow-foo\n      match:\n        resources:\n          kinds:\n            - ConfigMap\n      validate:\n        message: \"ConfigMap creation for 'foo' is disallowed.\"\n        pattern:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: \"!foo\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Port Forwarding for Profiling\nDESCRIPTION: Command to set up port forwarding from a local port to the Kyverno pod for accessing profiling endpoints.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl -n kyverno port-forward kyverno-admission-controller-57df6c565f-pxpnh 6060:9443\nForwarding from 127.0.0.1:6060 -> 9443\nForwarding from [::1]:6060 -> 9443\n```\n\n----------------------------------------\n\nTITLE: PolicyExceptions Feature Warning in Go Template\nDESCRIPTION: This code checks if PolicyExceptions are disabled and displays a warning along with instructions on how to enable them.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/templates/NOTES.txt#2025-04-21_snippet_5\n\nLANGUAGE: go-template\nCODE:\n```\n{{ if not .Values.features.policyExceptions.enabled }}\n⚠️  WARNING: PolicyExceptions are disabled by default. To enable them, set '--enablePolicyException' to true.\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Feature Toggle in Go\nDESCRIPTION: This code shows how to create a new toggle for a feature using the 'newToggle' method, which takes a default value and an environment variable as arguments.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/feature-flags/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nEnableDeferredLoading    = newToggle(defaultEnableDeferredLoading, enableDeferredLoadingEnvVar)\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Kyverno Commands in Bash\nDESCRIPTION: This code block lists all the options inherited from parent commands. These options are available for various logging configurations, Kubernetes cluster access, and verbosity levels.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_fix.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Testing ConfigMap Creation in Kyverno\nDESCRIPTION: This snippet tests the creation of the 'emergency' ConfigMap, which is expected to succeed, while attempting to create a ConfigMap named 'foo', which should fail according to the defined policies.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/exceptions/allows-rejects-creation/README.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: emergency\ndata:\n  key: value\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: foo\ndata:\n  key: value\n```\n\n----------------------------------------\n\nTITLE: LoadBalancer Service for Profiling\nDESCRIPTION: YAML definition for a Kubernetes LoadBalancer Service to expose Kyverno's profiling endpoint as an alternative to port forwarding.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: pproc-service\n  namespace: kyverno\nspec:\n  selector:\n    app: kyverno\n  ports:\n    - protocol: TCP\n      port: 6060\n      targetPort: 6060\n  type: LoadBalancer\n```\n\n----------------------------------------\n\nTITLE: Creating Validating Admission Policy Binding\nDESCRIPTION: This snippet illustrates how to bind a ValidatingAdmissionPolicy to specific resources based on the label of their namespace, facilitating targeted enforcement of policies.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/validating-admission-policy-reports/background/with-validating-admission-policy-binding-pass/README.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: policy.kyverno.io/v1\nkind: ValidatingAdmissionPolicyBinding\nmetadata:\n  name: bind-check-replicas\nspec:\n  policyName: check-replicas\n  resourceSelector:\n    matchLabels:\n      environment: staging\n```\n\n----------------------------------------\n\nTITLE: Cluster Role Command Options\nDESCRIPTION: Available command-specific flags for customizing the ClusterRole creation, including required API groups, resources, and verbs specifications.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_cluster-role.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -g, --api-groups string         API group for the resource (required)\n      --controllers stringArray   List of controllers for the ClusterRole (default = background-controller) (default [background-controller])\n  -h, --help                      help for cluster-role\n  -o, --output string             Output file path (prints to console if not set)\n      --resources stringArray     A comma separated list of resources (required)\n      --verbs stringArray         A comma separated list of verbs or 'all' for all verbs\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Additional command-line options inherited from parent commands, including logging configuration and Kubernetes settings.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_test.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Creating Deployment in Kubernetes\nDESCRIPTION: This snippet describes how to create a Deployment resource in Kubernetes with 3 replicas within the specified namespace, facilitating the management and scaling of an application.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/validating-admission-policy-reports/background/with-validating-admission-policy-binding-pass/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: deployment-4\n  namespace: staging-ns-1\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: deployment-4\n  template:\n    metadata:\n      labels:\n        app: deployment-4\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:latest\n```\n\n----------------------------------------\n\nTITLE: Generating CPU Profile Data\nDESCRIPTION: Command to generate a 60-second CPU profile from Kyverno's profiling endpoint and save it to a file.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\ncurl \"http://localhost:6060/debug/pprof/profile?seconds=60\" > cpu.pprof\n```\n\n----------------------------------------\n\nTITLE: Kyverno Fix Command Options in Bash\nDESCRIPTION: This snippet lists the options available for the 'kyverno fix' command. Currently, it only shows the help option (-h or --help) which displays help information for the command.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_fix.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for fix\n```\n\n----------------------------------------\n\nTITLE: Kyverno Migrate Command Options\nDESCRIPTION: Available command-line options specific to the migrate command including context, help, kubeconfig and resource flags.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_migrate.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --context string      The name of the kubeconfig context to use\n  -h, --help                help for migrate\n      --kubeconfig string   path to kubeconfig file with authorization and master location information\n      --resource strings    The resource to migrate\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Global options that apply to all Kyverno commands including logging configuration options, Kubernetes configuration, and verbosity settings.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_fix_policy.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Controller Image Settings in Kyverno (YAML)\nDESCRIPTION: YAML configuration for specifying the container image settings for the Kyverno background controller. Includes registry, repository, tag, and pull policy options.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nbackgroundController:\n  image:\n    registry: null\n    defaultRegistry: \"reg.kyverno.io\"\n    repository: \"kyverno/background-controller\"\n    tag: null\n    pullPolicy: \"IfNotPresent\"\n  imagePullSecrets: []\n```\n\n----------------------------------------\n\nTITLE: Getting Pod Information for Profiling\nDESCRIPTION: Commands to retrieve pod information and port details for setting up profiling of Kyverno components running in a Kubernetes cluster.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl -n kyverno get pod\nNAME                                             READY   STATUS      RESTARTS       AGE\nkyverno-admission-controller-57df6c565f-pxpnh    1/1     Running     0              20s\nkyverno-background-controller-766589695-dhj9m    1/1     Running     0              20s\nkyverno-cleanup-controller-54466dfbc6-5mlrc      1/1     Running     0              19s\nkyverno-cleanup-update-requests-28695530-ft975   1/1     Running     0              19s\nkyverno-reports-controller-76c49549f4-tljwm      1/1     Running     0              20s\n```\n\n----------------------------------------\n\nTITLE: Kyverno OCI Pull Command Options in Bash\nDESCRIPTION: These are the specific options available for the 'kyverno oci pull' command. They include help and image reference options.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_oci_pull.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help           help for pull\n  -i, --image string   image reference to push to or pull from\n```\n\n----------------------------------------\n\nTITLE: Inherited Kyverno Command Options\nDESCRIPTION: Options inherited from parent commands including logging configuration, Kubernetes configuration, and verbosity settings.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_json.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Command Options for kyverno jp parse\nDESCRIPTION: Available command-specific options for the kyverno jp parse command. These flags control how the command processes input files and provides help information.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_jp_parse.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -f, --file strings   Read input from a JSON or YAML file instead of stdin\n  -h, --help           help for parse\n```\n\n----------------------------------------\n\nTITLE: Global Options Inherited from Parent Commands\nDESCRIPTION: Lists all the global options inherited from parent commands, primarily focused on logging configuration and Kubernetes connection settings.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_metrics-config.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Variable Evaluation Logging in Kyverno (L3)\nDESCRIPTION: Examples of level 3 logging in Kyverno for variable evaluation and intermediate processing. These logs track dynamic evaluations, variable processing, and fallback scenarios.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/logging/logging.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlogging.V(3).Info(\"evaluating variable\", \"value\", someVariable)\nlogging.V(3).Info(\"failed to fetch UR, falling back\", \"reason\", err.Error())\n```\n\n----------------------------------------\n\nTITLE: Configuring Cleanup Controller Security Context\nDESCRIPTION: Defines security context settings for pods and containers, including privilege restrictions and runtime security profiles\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ncleanupController:\n  podSecurityContext: {}\n  securityContext:\n    allowPrivilegeEscalation: false\n    capabilities:\n      drop: [\"ALL\"]\n    privileged: false\n    readOnlyRootFilesystem: true\n    runAsNonRoot: true\n    seccompProfile:\n      type: \"RuntimeDefault\"\n```\n\n----------------------------------------\n\nTITLE: Kyverno OCI Command Options\nDESCRIPTION: The available options specific to the OCI command. Currently, it only includes the help flag which displays information about the command.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_oci.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help   help for oci\n```\n\n----------------------------------------\n\nTITLE: Loading Kyverno Completions in PowerShell Session\nDESCRIPTION: Example command to load Kyverno autocompletions in the current PowerShell session by piping the output through Out-String and Invoke-Expression.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_completion_powershell.md#2025-04-21_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nkyverno completion powershell | Out-String | Invoke-Expression\n```\n\n----------------------------------------\n\nTITLE: Kyverno OCI Push Command Options\nDESCRIPTION: The specific command-line options available for the 'oci push' command, including help flag and image reference specification.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_oci_push.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n  -h, --help           help for push\n  -i, --image string   image reference to push to or pull from\n```\n\n----------------------------------------\n\nTITLE: Documenting Expected Policy Validation Behavior\nDESCRIPTION: Lists the expected validation outcomes for different policy types in Kyverno. Tests include a valid policy that should be accepted and two invalid policies (foreach and bad-context-name) that should be rejected by the system.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/policy-validation/cluster-policy/assert/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `ok` policy should be accepted\n- `foreach` policy should be rejected\n- `bad-context-name` policy should be rejected\n```\n\n----------------------------------------\n\nTITLE: Webhooks Cleanup Configuration\nDESCRIPTION: Helm chart settings for managing webhook cleanup operations, including image settings, security contexts, and resource allocation for cleanup hooks\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nwebhooksCleanup:\n  enabled: true\n  autoDeleteWebhooks:\n    enabled: false\n  image:\n    registry: nil\n    repository: \"bitnami/kubectl\"\n    tag: \"1.32.3\"\n    pullPolicy: nil\n  securityContext:\n    allowPrivilegeEscalation: false\n    capabilities:\n      drop: [\"ALL\"]\n    privileged: false\n    readOnlyRootFilesystem: true\n    runAsUser: 65534\n```\n\n----------------------------------------\n\nTITLE: kyverno fix policy Command Options\nDESCRIPTION: Available flags specific to the 'fix policy' command, including the help option and an option to save fixed files.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_fix_policy.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for policy\n      --save   Save fixed file\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Dashboard in Kyverno\nDESCRIPTION: Helm chart configuration for enabling and customizing Grafana dashboard integration with Kyverno, including options for dashboard creation, namespace, and labeling\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ngrafana:\n  enabled: false\n  configMapName: \"{{ include \\\"kyverno.fullname\\\" . }}-grafana\"\n  namespace: nil\n  annotations: {}\n  labels:\n    grafana_dashboard: \"1\"\n  grafanaDashboard:\n    allowCrossNamespaceImport: true\n    create: false\n    folder: \"kyverno\"\n    matchLabels:\n      dashboards: \"grafana\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Kyverno Commands\nDESCRIPTION: Lists the options inherited from parent commands, including various logging and configuration options. These options apply to all Kyverno commands, including the 'docs' command.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_docs.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Deploying All Kyverno Components with Helm\nDESCRIPTION: Command to build Kyverno images, load them in a KinD cluster, and deploy all Kyverno helm charts together.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n# build images, load them in KinD cluster and deploy helm charts\nmake kind-deploy-all\n```\n\n----------------------------------------\n\nTITLE: Configuring Reports Controller RBAC\nDESCRIPTION: Defines RBAC settings for the Kyverno reports controller, including service account, role bindings, and additional resource permissions\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nreportsController:\n  rbac:\n    create: true\n    createViewRoleBinding: true\n    viewRoleName: \"view\"\n    serviceAccount:\n      name: null\n      annotations: {}\n    clusterRole:\n      extraResources: []\n```\n\n----------------------------------------\n\nTITLE: Kyverno Fish Completion Options\nDESCRIPTION: Available command-specific flags for customizing the fish completion script generation.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_completion_fish.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help              help for fish\n      --no-descriptions   disable completion descriptions\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for Kyverno JP Function\nDESCRIPTION: Options specific to the 'kyverno jp function' command. Currently, only the help flag is available.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_jp_function.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help   help for function\n```\n\n----------------------------------------\n\nTITLE: Using Feature Toggle in Controller in Go\nDESCRIPTION: This code shows how to use the feature toggle in a controller by registering it with the flag package.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/feature-flags/README.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nflag.Func(toggle.EnableDeferredLoadingFlagName, toggle.EnableDeferredLoadingDescription, toggle.EnableDeferredLoading.Parse)\n```\n\n----------------------------------------\n\nTITLE: Executing Kyverno Create Command\nDESCRIPTION: The basic syntax for running the 'kyverno create' command. This command helps with the creation of various Kyverno resources.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno create [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Reports Controller Monitoring and Tracing\nDESCRIPTION: Provides configuration options for metrics, service monitoring, tracing, and observability features of the reports controller\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nreportsController:\n  metricsService:\n    create: true\n    port: 8000\n    type: \"ClusterIP\"\n  serviceMonitor:\n    enabled: false\n    interval: \"30s\"\n  tracing:\n    enabled: false\n    address: null\n    port: null\n  metering:\n    disabled: false\n    config: \"prometheus\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Additional options inherited from parent commands, including logging and Kubernetes configuration options.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_values.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Global options inherited from parent commands that apply to all Kyverno CLI commands including logging configuration, Kubernetes connections, and verbosity settings.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_jp_parse.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Declaring Container Argument Variable in Go\nDESCRIPTION: This snippet demonstrates how to declare a variable for a new container argument flag.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/feature-flags/README.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar(\n    enableFeature bool\n)\n```\n\n----------------------------------------\n\nTITLE: Describing Kyverno Policy Exception Test Steps in Markdown\nDESCRIPTION: Markdown content outlining the steps for testing Kyverno policy exceptions. It includes creating a cluster policy, setting up a policy exception for a specific configmap, and testing configmap creation with expected outcomes.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/exceptions/with-wildcard/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Description\n\nThis test creates a policy, a policy exception and tries to create a couple configmaps.\nThe policy exception is configured to apply only to the `emergency` configmap and has wildcard in the rule name.\nThe `emergency` configmap is expected to create fine while other configmaps creations should fail.\n\n## Steps\n\n1.  - Create a cluster policy\n    - Assert the policy becomes ready\n1.  - Create a policy exception for the cluster policy created above, configured to apply to configmap named `emergency`\n1.  - Try to create a confimap named `emergency`, expecting the creation to succeed\n    - Try to create a confimap named `foo`, expecting the creation to fail\n```\n\n----------------------------------------\n\nTITLE: Conditional Component Installation Display in Go Template\nDESCRIPTION: This code block uses Go template conditionals to display which components have been installed in the cluster. It checks various configuration values to determine which components to list.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/templates/NOTES.txt#2025-04-21_snippet_1\n\nLANGUAGE: go-template\nCODE:\n```\nThe following components have been installed in your cluster:\n{{- if .Values.crds.install }}\n- CRDs\n{{- end }}\n- Admission controller\n{{- if .Values.reportsController.enabled }}\n- Reports controller\n{{- end }}\n{{- if .Values.cleanupController.enabled }}\n- Cleanup controller\n{{- end }}\n{{- if .Values.backgroundController.enabled }}\n- Background controller\n{{- end }}\n{{- if .Values.grafana.enabled }}\n- Grafana dashboard\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Kyverno Inherited Command Options\nDESCRIPTION: Additional options inherited from parent commands including logging and configuration settings.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_user-info.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Controller Security Context in Kyverno (YAML)\nDESCRIPTION: YAML configuration for security context settings of the Kyverno background controller. Includes pod and container level security options.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nbackgroundController:\n  podSecurityContext: {}\n  securityContext:\n    allowPrivilegeEscalation: false\n    capabilities:\n      drop: [\"ALL\"]\n    privileged: false\n    readOnlyRootFilesystem: true\n    runAsNonRoot: true\n    seccompProfile:\n      type: RuntimeDefault\n```\n\n----------------------------------------\n\nTITLE: Issue Reference for Kyverno Generate Policy Test\nDESCRIPTION: GitHub issue reference link documenting the test case requirements for generateExisting behavior in Kyverno policies.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/generate/foreach/existing/cpol-clone-list-sync-create/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/kyverno/kyverno/issues/3542\n```\n\n----------------------------------------\n\nTITLE: Expected ConfigMap Output with Variable Scope Isolation in Kyverno\nDESCRIPTION: The expected YAML output of a ConfigMap after applying Kyverno rules with variable scope isolation. The first data field 'one' contains a value while the second field 'two' displays 'null', indicating the variable from the first rule was not accessible in the second rule.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/deferred/two-rules/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n    one: test\n    two: \"null\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating Admission Report Generation Process in Kyverno\nDESCRIPTION: This diagram shows the sequence of operations during resource admission, where the webhook looks up matching policies, evaluates them against the resource, and creates an admission report with the results.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/reports/README.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\nWebhook->>Policy cache: Lookup policies for admitted resource\nloop Evaluation\n    Webhook->>Engine: Evaluate policies against admitted resource\n    Engine-->>Webhook: Collect and aggregate results\nend\nWebhook->>Report: Create admission report\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options from Parent Commands\nDESCRIPTION: Command-line options inherited from parent commands, including logging configuration, Kubernetes configuration, and verbosity settings that apply to all Kyverno commands.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_json_scan.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Kyverno Version Command Options\nDESCRIPTION: Available command-specific options for the version command.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_version.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for version\n```\n\n----------------------------------------\n\nTITLE: Invalid Kyverno Policy with Wildcard Match\nDESCRIPTION: Demonstrates a Kyverno policy that should be rejected due to using wildcard (*) in resource matching, which is not allowed for image verification policies\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/validate/clusterpolicy/standard/wildcard/block-verifyimage/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: verify-image\nspec:\n  validationFailureAction: Enforce\n  background: false\n  rules:\n  - name: verify-image\n    match:\n      any:\n      - resources:\n          kinds:\n          - '*'\n    verifyImages:\n    - imageReferences:\n      - 'docker.io/myimage:*'\n      attestors:\n      - count: 1\n        entries:\n        - keys:\n            publicKeys: |-\n              -----BEGIN PUBLIC KEY-----\n              ...\n              -----END PUBLIC KEY-----\n```\n\n----------------------------------------\n\nTITLE: Basic Kyverno OCI Command Syntax\nDESCRIPTION: The basic command syntax for using the Kyverno OCI functionality. This is an experimental command that requires the KYVERNO_EXPERIMENTAL environment variable to be set to true.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_oci.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno oci [flags]\n```\n\n----------------------------------------\n\nTITLE: Complete Kyverno Reports System Workflow\nDESCRIPTION: This comprehensive flowchart shows the entire Kyverno reports system, from ephemeral admission reports through aggregation to policy reports. It illustrates the flow of data between different controllers and the various report types they manage.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/reports/README.md#2025-04-21_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nA1(Admission report - ephemeral) -->|watch| AC(Admission reports controller)\nA2(Admission report - ephemeral) -->|watch| AC(Admission reports controller)\nA3(Admission report - ephemeral) -->|watch| AC(Admission reports controller)\nAC(Admission reports controller) -->|create/update| A(Admission report - aggregated)\nAC(Admission reports controller) -->|delete| D1(Admission report - ephemeral)\nAC(Admission reports controller) -->|delete| D2(Admission report - ephemeral)\nAC(Admission reports controller) -->|delete| D3(Admission report - ephemeral)\nA(Admission report - aggregated) -->|watch| C(Policy report controller)\nB1(Background scan report) -->|watch| C(Policy report controller)\nB2(Background scan report) -->|watch| C(Policy report controller)\nB3(Background scan report) -->|watch| C(Policy report controller)\nC(Policy report controller) -->|create/update| R1(Policy report)\nC(Policy report controller) -->|create/update| R2(Policy report)\nC(Policy report controller) -->|create/update| R3(Policy report)\nC(Policy report controller) -->|create/update| R4(Policy report)\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Kyverno JP Function Command\nDESCRIPTION: Options inherited from parent commands, including logging configurations, kubeconfig path, and verbosity settings.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_jp_function.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Kyverno Bash Completion Command Options\nDESCRIPTION: Available options for the bash completion command, including help flag and the option to disable completion descriptions.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_completion_bash.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help              help for bash\n      --no-descriptions   disable completion descriptions\n```\n\n----------------------------------------\n\nTITLE: Creating Policy Exception in Kyverno\nDESCRIPTION: This snippet creates a policy exception specifically for the 'emergency' ConfigMap, allowing its creation while blocking others. It is key for applying exceptions to policies.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/exceptions/allows-rejects-creation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: exception-for-emergency\nspec:\n  validationFailureAction: audit\n  rules:\n    - name: allow-emergency\n      match:\n        resources:\n          kinds:\n            - ConfigMap\n        request:\n          resource: ConfigMap\n      validate:\n        message: \"Creation of 'emergency' ConfigMap is allowed.\"\n        pattern:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: \"emergency\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cleanup Controller Service Parameters\nDESCRIPTION: Specifies service type, port, and additional annotations for the Cleanup Controller service\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ncleanupController.service:\n  port: 443\n  type: \"ClusterIP\"\n  nodePort: nil\n  annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Defining Container Argument Flag in Go\nDESCRIPTION: This code shows how to define a boolean flag for a container argument, specifying its name, default value, and usage description.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/feature-flags/README.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nflagset.BoolVar(&enableFeature, \"enable-feature\", true, \"Set this flag to 'false' to ....\")\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Global flags inherited from parent commands that can be used with the ZSH completion command, including logging options and Kubernetes configuration.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_completion_zsh.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Installing ArgoCD Lab Environment\nDESCRIPTION: Shell command to execute the kind-argo.sh script which sets up the entire lab environment including the kind cluster, ArgoCD, and all associated components\nSOURCE: https://github.com/kyverno/kyverno/blob/main/scripts/labs/argocd/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n./kind-argo.sh\n```\n\n----------------------------------------\n\nTITLE: Feature-Specific Warnings in Go Template\nDESCRIPTION: These snippets display warnings for specific Kyverno features that require certain Kubernetes versions or feature gates to be enabled. It includes checks for match conditions, ValidatingAdmissionPolicy generation, and ValidatingAdmissionPolicy reports.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/templates/NOTES.txt#2025-04-21_snippet_4\n\nLANGUAGE: go-template\nCODE:\n```\n{{- with .Values.config.matchConditions }}\n⚠️  WARNING: Match conditions require a Kubernetes 1.27+ cluster with `AdmissionWebhookMatchConditions` feature gate enabled.\n{{- end }}\n\n{{- with .Values.features.generateValidatingAdmissionPolicy.enabled }}\n⚠️  WARNING: Generating ValidatingAdmissionPolicy requires a Kubernetes 1.27+ cluster with `ValidatingAdmissionPolicy` feature gate and `admissionregistration.k8s.io` API group enabled.\n{{- end }}\n\n{{- with .Values.features.validatingAdmissionPolicyReports.enabled }}\n⚠️  WARNING: Generating reports from ValidatingAdmissionPolicies requires a Kubernetes 1.27+ cluster with `ValidatingAdmissionPolicy` feature gate and `admissionregistration.k8s.io` API group enabled.\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Preventing Autogen Rule Generation in Kyverno Policy\nDESCRIPTION: Validates that Kyverno policies do not include automatically generated rules which are not intended for the specific policy context\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/autogen/should-not-autogen/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n## Example Policy without Autogen Rules\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Toggle Interface in Go\nDESCRIPTION: This snippet demonstrates how to add a new method to the 'Toggles' interface and implement it for the 'defaultToggles' type to enable checking the status of a feature flag.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/feature-flags/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Toggles interface {\n    EnableDeferredLoading() bool\n}\n\nfunc (defaultToggles) EnableDeferredLoading() bool {\n    return EnableDeferredLoading.enabled()\n}\n```\n\n----------------------------------------\n\nTITLE: Kyverno OCI Push Command Inherited Options\nDESCRIPTION: The command-line options inherited from parent commands, including logging configuration and Kubernetes connection options.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_oci_push.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Test Configuration in Kyverno Helm Chart\nDESCRIPTION: Configuration options for test containers in the Kyverno Helm chart, including image settings, resource limits, and security contexts\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\ntest:\n  sleep: 20\n  image:\n    registry: nil\n    repository: \"busybox\"\n    tag: \"1.35\"\n    pullPolicy: nil\n  resources:\n    limits:\n      cpu: \"100m\"\n      memory: \"256Mi\"\n    requests:\n      cpu: \"10m\"\n      memory: \"64Mi\"\n  securityContext:\n    allowPrivilegeEscalation: false\n    capabilities:\n      drop: [\"ALL\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Kyverno CloneSecret Policy in YAML\nDESCRIPTION: This YAML configuration defines a Kyverno policy to clone a secret from one namespace to another. It specifies the source and target namespaces, as well as the secret to be cloned.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/generate/clusterpolicy/standard/clone/nosync/cpol-clone-nosync-create/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: clone-secret\nspec:\n  rules:\n  - name: clone-secret\n    match:\n      resources:\n        kinds:\n        - Namespace\n    generate:\n      kind: Secret\n      name: regcred\n      namespace: \"{{request.object.metadata.name}}\"\n      synchronize: true\n      clone:\n        namespace: default\n        name: regcred\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: test\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: regcred\n  namespace: default\ntype: kubernetes.io/dockerconfigjson\ndata:\n  .dockerconfigjson: eyJhdXRocyI6eyJodHRwczovL2luZGV4LmRvY2tlci5pby92MS8iOnsidXNlcm5hbWUiOiJ0ZXN0IiwicGFzc3dvcmQiOiJ0ZXN0In19fQ==\n```\n\n----------------------------------------\n\nTITLE: Kyverno JP Inherited Command Options\nDESCRIPTION: Options inherited from parent commands that can be used with 'kyverno jp'. These include various logging and configuration options that affect the behavior of the Kyverno CLI.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_jp.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Defining Approvers and Reviewers for Kyverno Project in YAML\nDESCRIPTION: This YAML configuration specifies two groups: approvers and reviewers for the Kyverno project. Approvers have the authority to approve changes, while reviewers are responsible for code review. The lists contain GitHub usernames of project contributors.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/OWNERS.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napprovers:\n- JimBugwadia\n- realshuting\n- chipzoller\n- vyankyGH\n- MarcelMue\n- treydock\n- prateekpandey14\n- eddycharly\n\nreviewers:\n- JimBugwadia\n- realshuting\n- chipzoller\n- vyankyGH\n- MarcelMue\n- treydock\n- anushkamittal20\n- ojhaarjun1\n- samj1912\n- prateekpandey14\n- eddycharly\n```\n\n----------------------------------------\n\nTITLE: Test Scenario Expectation Definition\nDESCRIPTION: Defines the specific pass/fail conditions for the policy deletion test, where successful deletion of the generated resource indicates test success.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/generate/policy/standard/data/sync/pol-data-sync-delete-policy/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Expected Behavior\n\nIf the resource is deleted after the Policy is deleted, the test passes. If it remains, the test fails.\n```\n\n----------------------------------------\n\nTITLE: Displaying Kyverno Completion Command Options\nDESCRIPTION: This code snippet shows the available options for the 'kyverno completion' command. It includes the help option for displaying command information.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_completion.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for completion\n```\n\n----------------------------------------\n\nTITLE: Markdown Description of Kyverno Admin Role Test\nDESCRIPTION: Documentation describing a test case that validates the existence and correct labeling of Kyverno admin cluster roles for proper aggregation to the admin cluster role.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/rbac/aggregate-to-admin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Description\n\nThis test verifies that kyverno admin cluster roles exist in the cluster and are labelled correctly to be aggregated to the `admin` cluster role.\n```\n\n----------------------------------------\n\nTITLE: Describing Kyverno Cluster Cleanup Policy Test in Markdown\nDESCRIPTION: This markdown snippet outlines a test case for a Kyverno cluster cleanup policy. It specifies the test description, expected behavior, and uses placeholder variables for the pod name and namespace.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/cleanup/v2beta1/clusterpolicy/context-cleanup-pod/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ## Description\n\nThis test cleans up pods via a cluster cleanup policy.\n\n## Expected Behavior\n\nThe pod `{{ varname }}` in the namespace `{{ varNamespace }}` set by context variable is cleaned up successfully.\n\n## Reference Issue(s)\n```\n\n----------------------------------------\n\nTITLE: PSS Host Ports Compliance Test Scenario\nDESCRIPTION: Test configuration demonstrating Pod Security Standard checks for host ports, including scenarios for compliant and non-compliant pod deployments with exclusion support\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/validate/clusterpolicy/standard/psa/test-exclusion-host-ports/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Description\n\nThis test ensures the PSS checks with the new advanced support on exclusions are applied to the resources successfully.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n## Expected Behavior\n\nTwo pods (`good-pod` & `excluded-pod`) should be created as it follows the baseline:latest `Host Ports` PSS check and one pod (`bad-pod`) should not be created as it violate the baseline:latest `Host Ports` PSS check.\n```\n\n----------------------------------------\n\nTITLE: Creating Kyverno Cleanup Policy with Invalid Schedule in YAML\nDESCRIPTION: This YAML snippet defines a Kyverno CleanupPolicy with an invalid schedule. The policy uses an incorrect cron expression '*/61 * * * *'. It's expected to fail during creation due to the invalid schedule.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/cleanup/v2beta1/validation/cron-format/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kyverno.io/v2alpha1\nkind: CleanupPolicy\nmetadata:\n  name: cleanup-policy-invalid\nspec:\n  schedule: \"*/61 * * * *\"\n  match:\n    any:\n    - resources:\n        kinds:\n        - \"*\"\n        selector:\n          matchLabels:\n            cleanup: \"yes\"\n  conditions:\n    all:\n    - key: \"{{creation_timestamp}}\"\n      operator: LessThan\n      value: \"{{request.object.spec.ttl}}\"\n  action: delete\n```\n\n----------------------------------------\n\nTITLE: Kyverno Global Command Options\nDESCRIPTION: Options inherited from parent commands, including logging configurations and kubeconfig path.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Controller Networking in Kyverno (YAML)\nDESCRIPTION: YAML configuration for network-related settings of the Kyverno background controller. Includes options for host network, DNS policy, and DNS configuration.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nbackgroundController:\n  hostNetwork: false\n  dnsPolicy: \"ClusterFirst\"\n  dnsConfig: {}\n```\n\n----------------------------------------\n\nTITLE: Setting '--omitEvents=PolicyApplied' flag in Kyverno admission controller\nDESCRIPTION: This code snippet shows the flag to be added to the Kyverno admission controller configuration to omit PolicyApplied events.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/flags/standard/emit-events/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--omitEvents=PolicyApplied\n```\n\n----------------------------------------\n\nTITLE: Kyverno Pod Image Update Test Configuration\nDESCRIPTION: Test configuration that defines a trigger Pod and target Pod setup to validate Kyverno's image update functionality. The test verifies that when the trigger Pod is created, it automatically updates the image of the third container in the target Pod.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/mutate/clusterpolicy/standard/existing/descending-patchJson6902/README.md#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Apache 2.0 License Header for Kubernetes\nDESCRIPTION: Standard copyright and Apache 2.0 license header text used to declare licensing terms for Kubernetes-related software. Includes copyright notice and reference to the full license text.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/scripts/boilerplate.go.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/*\nCopyright The Kubernetes Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n```\n\n----------------------------------------\n\nTITLE: Running Kyverno ZSH Completion Command\nDESCRIPTION: Command syntax for generating ZSH autocompletion scripts for Kyverno CLI.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_completion_zsh.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno completion zsh [flags]\n```\n\n----------------------------------------\n\nTITLE: Patching Kyverno ConfigMap in YAML\nDESCRIPTION: This snippet shows the YAML configuration for patching the Kyverno ConfigMap to set generateSuccessEvents to true.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/configs/emit-success-events-upon-generateSuccessEvents-set-true/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: kyverno\n  namespace: kyverno\ndata:\n  generateSuccessEvents: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Kyverno Images to Remote Registry\nDESCRIPTION: These commands demonstrate how to push Kyverno images to a remote registry using ko, for both stable and dev versions.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake ko-publish-kyverno-init\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake ko-publish-kyverno-init-dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake ko-publish-kyverno\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake ko-publish-kyverno-dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake ko-publish-cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake ko-publish-cli-dev\n```\n\n----------------------------------------\n\nTITLE: Expected Test Behavior Specification\nDESCRIPTION: Defines the expected actions and outcomes for the policy synchronization test, including secret cloning and reversion mechanisms\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/generate/foreach/clusterpolicy/clone/sync/cpol-clone-sync-update-target/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Expected Behavior\n\n1. trigger the standard policy, expect a secret `foreach-ns-1/cloned-secret-0-foreach-ns-1` to be cloned.\n2. update the cloned secret, expect changes to be reverted to the cloned secret `foreach-ns-1/cloned-secret-0-foreach-ns-1`.\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Kyverno Helm Chart in Console\nDESCRIPTION: Command to uninstall/delete the Kyverno deployment using Helm. This removes all Kubernetes components associated with the chart and deletes the release.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ helm delete -n kyverno kyverno\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Kyverno Policies Helm Chart\nDESCRIPTION: Console command for removing the Kyverno Policies Helm chart from a Kubernetes cluster. This command deletes all the policy resources associated with the release.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno-policies/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ helm delete -n kyverno kyverno-policies\n```\n\n----------------------------------------\n\nTITLE: Kyverno Inherited Command Options\nDESCRIPTION: Global options inherited from parent commands affecting logging and configuration\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_test.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Local Kubernetes Cluster\nDESCRIPTION: These commands show how to create a local Kubernetes cluster using KinD and load Kyverno images into it.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake kind-create-cluster\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake kind-load-kyverno-init\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake kind-load-kyverno\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake kind-load-all\n```\n\n----------------------------------------\n\nTITLE: Defining Policy for ConfigMap Key Restrictions\nDESCRIPTION: Creates a Kubernetes policy that restricts specific key combinations in ConfigMaps, preventing unauthorized modifications\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/validate/e2e/adding-key-to-config-map/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n## Example Policy Definition\nkind: Policy\nmetadata:\n  name: configmap-key-restriction\nspec:\n  validationFailureAction: Enforce\n  rules:\n  - name: restrict-key-combination\n    match:\n      resources:\n        kinds:\n        - ConfigMap\n    validate:\n      # Policy logic to restrict specific key combinations\n      message: \"Restricted key combination not allowed\"\n```\n\n----------------------------------------\n\nTITLE: Creating Namespace in Kubernetes with Label\nDESCRIPTION: This snippet outlines the process of creating a Kubernetes namespace with a specific label, which helps in organizing and managing resources within the Kubernetes cluster.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/validating-admission-policy-reports/background/with-validating-admission-policy-binding-pass/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: staging-ns-1\n  labels:\n    environment: staging-ns-1\n```\n\n----------------------------------------\n\nTITLE: Executing Kyverno Fish Completion Command\nDESCRIPTION: Basic command syntax for generating fish shell autocompletion script with optional flags.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_completion_fish.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno completion fish [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Cleanup Controller Image Settings\nDESCRIPTION: Defines image registry, repository, tag, and pull policy for the Kyverno Cleanup Controller deployment\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ncleanupController.image:\n  registry: nil\n  defaultRegistry: \"reg.kyverno.io\"\n  repository: \"kyverno/cleanup-controller\"\n  tag: nil\n  pullPolicy: \"IfNotPresent\"\n```\n\n----------------------------------------\n\nTITLE: Basic Kyverno Bash Completion Command\nDESCRIPTION: The basic command to generate bash completion for Kyverno CLI.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_completion_bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno completion bash\n```\n\n----------------------------------------\n\nTITLE: Creating Deny Policy for StatefulSet Scaling in Enforce Mode\nDESCRIPTION: Establishes a Kyverno policy that strictly prevents scaling of StatefulSets in enforce mode, actively blocking unauthorized scaling attempts\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/validate/clusterpolicy/standard/subresource/README.md#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Creating Namespaces with Specific Labels in Kubernetes\nDESCRIPTION: This snippet details the creation of namespaces with specific labels for testing the enforcement of policies in Kyverno. The purpose is to set up the environment for policy enforcement checks for namespaces that should contain certain labels. The expected inputs are the namespace names and their associated labels. The output will be the created namespaces in the Kubernetes cluster.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/reports/background/two-rules-with-different-modes/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: good-ns-1\n  labels:\n    purpose: test\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: good-ns-2\n  labels:\n    purpose: test\n    environment: production\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: bad-ns-1\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: bad-ns-2\n```\n\n----------------------------------------\n\nTITLE: ZSH Completion Command Options\nDESCRIPTION: Available flags specific to the ZSH completion command, including help and the option to disable completion descriptions.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_completion_zsh.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help              help for zsh\n      --no-descriptions   disable completion descriptions\n```\n\n----------------------------------------\n\nTITLE: Listing Inherited Options for Kyverno Commands\nDESCRIPTION: This code snippet displays the options inherited from parent commands in Kyverno. It includes various logging and configuration options that can be used across different Kyverno commands.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_completion.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Kyverno JP Query Inherited Command Options\nDESCRIPTION: Lists the command-line options inherited from parent commands, including logging configuration, Kubernetes configuration, and verbosity settings.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_jp_query.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Configuring etcd Access\nDESCRIPTION: Script to set up etcd access credentials and environment variables for cluster communication.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/perf-testing/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport KUBECONFIG=/etc/rancher/k3s/k3s.yaml\ndocker cp k3d-scaling-server-0:/var/lib/rancher/k3s/server/tls/etcd/server-ca.crt ./server-ca.crt\ndocker cp k3d-scaling-server-0:/var/lib/rancher/k3s/server/tls/etcd/server-client.crt ./server-client.crt\ndocker cp k3d-scaling-server-0:/var/lib/rancher/k3s/server/tls/etcd/server-client.key ./server-client.key\netcd=https://$(kubectl get node -o wide | grep k3d-scaling-server-0 | awk '{print $6}'):2379\netcd_ep=$etcd/version\ncurl -L --cacert ./server-ca.crt --cert ./server-client.crt --key ./server-client.key $etcd_ep\nexport ETCDCTL_ENDPOINTS=$etcd\nexport ETCDCTL_CACERT='./server-ca.crt'\nexport ETCDCTL_CERT='./server-client.crt'\nexport ETCDCTL_KEY='./server-client.key'\nexport ETCDCTL_API=3\n\netcdctl endpoint status -w table\n```\n\n----------------------------------------\n\nTITLE: Depicting Admission Reports Aggregation Workflow in Kyverno\nDESCRIPTION: This flowchart illustrates how ephemeral admission reports are aggregated into a single report per resource. The controller collects ephemeral reports, aggregates them, creates or updates an aggregated report, and deletes the original ephemeral reports.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/reports/README.md#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\nA1(Admission report - ephemeral) --> B(Admission reports controller)\nA2(Admission report - ephemeral) --> B(Admission reports controller)\nA3(Admission report - ephemeral) --> B(Admission reports controller)\nA4(Admission report - ephemeral) --> B(Admission reports controller)\nB(Admission reports controller) --> AGG1(Aggregate ephemeral admission reports)\nAGG1(Aggregate ephemeral reports) -->|create/update| AGG2(Admission report - aggregated)\nB(Admission reports controller) -->|delete| D1(Admission report - ephemeral)\nB(Admission reports controller) -->|delete| D2(Admission report - ephemeral)\nB(Admission reports controller) -->|delete| D3(Admission report - ephemeral)\nB(Admission reports controller) -->|delete| D4(Admission report - ephemeral)\n```\n\n----------------------------------------\n\nTITLE: Creating Kyverno User Info Command Syntax\nDESCRIPTION: Basic command syntax for creating a Kyverno user-info file.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_user-info.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkyverno create user-info [flags]\n```\n\n----------------------------------------\n\nTITLE: Generating All CRD Definitions\nDESCRIPTION: Command to generate all Custom Resource Definition manifests for Kyverno.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n# generate all CRDs\nmake codegen-crds-all\n```\n\n----------------------------------------\n\nTITLE: Generating Kyverno CRD Definitions\nDESCRIPTION: Command to generate Custom Resource Definition manifests specifically for Kyverno resources.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n# generate Kyverno CRDs\nmake codegen-crds-kyverno\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Labels and Annotations for Kyverno CRDs in YAML\nDESCRIPTION: This YAML snippet shows the configuration for custom labels and annotations that can be applied to Kyverno CRDs. These fields can be overwritten by settings in the parent chart.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/charts/crds/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nannotations: {}\ncustomLabels: {}\n```\n\n----------------------------------------\n\nTITLE: Installing k3d\nDESCRIPTION: Command to download and install k3d using the official installation script.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/perf-testing/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: PowerShell Completion Command Options\nDESCRIPTION: Available flags specific to the 'kyverno completion powershell' command, including help flag and option to disable completion descriptions.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_completion_powershell.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help              help for powershell\n      --no-descriptions   disable completion descriptions\n```\n\n----------------------------------------\n\nTITLE: Analyzing Profile Data\nDESCRIPTION: Command to analyze the collected profiling data using Go's pprof tool.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\ngo tool pprof heap.pprof\n```\n\n----------------------------------------\n\nTITLE: Finding Pod Port for Port Forwarding\nDESCRIPTION: Command to query the exposed port of a Kyverno pod for use in port forwarding during profiling.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl get pod kyverno-admission-controller-57df6c565f-pxpnh -n kyverno  --template='{{(index (index .spec.containers 0).ports 0).containerPort}}{{\"\\n\"}}'\n9443\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Kyverno OCI Pull Command in Bash\nDESCRIPTION: These options are inherited from parent commands and provide various logging and configuration settings for the Kyverno CLI.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_oci_pull.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Generating Memory Profile Data\nDESCRIPTION: Command to generate a memory profile from Kyverno's profiling endpoint and save it to a file.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\n$ curl http://localhost:6060/debug/pprof/heap  > heap.pprof\n```\n\n----------------------------------------\n\nTITLE: ArgoCD Resource Exclusions for Kyverno Reports\nDESCRIPTION: YAML configuration to exclude Kyverno report resources from ArgoCD UI. This helps prevent UI pollution as these reports are dynamically managed by Kyverno.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/README.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nresource.exclusions: |\n  - apiGroups:\n      - kyverno.io\n    kinds:\n      - AdmissionReport\n      - BackgroundScanReport\n      - ClusterAdmissionReport\n      - ClusterBackgroundScanReport\n    clusters:\n      - '*'\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Global command options inherited from parent commands, including logging configurations and Kubernetes connection settings.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_cluster-role.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Debugging Logs in Kyverno (L4 & Above)\nDESCRIPTION: Examples of level 4+ logging in Kyverno for detailed debugging. These logs provide execution path details and shutdown messages.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/logging/logging.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nlogging.V(4).Info(\"fetching downstream resource\", \"APIVersion\", generatePattern.GetAPIVersion())\nlogging.V(4).Info(\"ForceFailurePolicyIgnore is enabled, all policies with failures will be set to Ignore\")\n```\n\n----------------------------------------\n\nTITLE: Running LitmusChaos Environment Setup in Bash\nDESCRIPTION: Commands to set up the environment variable and run the Pod CPU Hog experiment with Kyverno. First exports the E2E environment variable, then runs the Go test for the Pod CPU Hog experiment.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/litmuschaos/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\neval export E2E=\"ok\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./litmuschaos/pod_cpu_hog -v\n```\n\n----------------------------------------\n\nTITLE: Kyverno Version Inherited Options\nDESCRIPTION: Global options inherited from parent commands including logging and configuration settings.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_version.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Retrieving ArgoCD Admin Password\nDESCRIPTION: Kubernetes command to retrieve the base64 decoded initial admin password from the ArgoCD secret\nSOURCE: https://github.com/kyverno/kyverno/blob/main/scripts/labs/argocd/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Global flags and options that apply to all Kyverno CLI commands, including logging configuration, Kubernetes configuration, and verbosity settings.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_completion_powershell.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --add_dir_header                   If true, adds the file directory to the header of the log messages\n      --alsologtostderr                  log to standard error as well as files (no effect when -logtostderr=true)\n      --kubeconfig string                Paths to a kubeconfig. Only required if out-of-cluster.\n      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                   If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                  If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint           Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                      log to standard error instead of files (default true)\n      --one_output                       If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --skip_headers                     If true, avoid header prefixes in the log messages\n      --skip_log_headers                 If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity         logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true) (default 2)\n  -v, --v Level                          number for the log level verbosity\n      --vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging\n```\n\n----------------------------------------\n\nTITLE: Generating All API Deep Copy Functions\nDESCRIPTION: Command to generate all deep copy functions for Kyverno's API types.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n# generate all deep copy functions\nmake codegen-deepcopy-all\n```\n\n----------------------------------------\n\nTITLE: Fetching Upstream Tags for Image Building\nDESCRIPTION: These Git commands are used to fetch repository tags from the upstream Kyverno repository, which are needed for image building.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream  https://github.com/kyverno/kyverno\ngit fetch upstream --tags\n```\n\n----------------------------------------\n\nTITLE: Generating Policy Reports Deep Copy Functions\nDESCRIPTION: Command to generate deep copy functions specifically for Policy Reports API types.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n# generate policy reports deep copy functions\nmake codegen-deepcopy-report\n```\n\n----------------------------------------\n\nTITLE: Policy Synchronization Test Description\nDESCRIPTION: Test case for checking generate foreach clone policy synchronization and secret reversion mechanisms\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/generate/foreach/clusterpolicy/clone/sync/cpol-clone-sync-update-target/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Description\n\nThis test checks the synchronize behavior for a \"generate foreach clone\" policy upon target changes.\n```\n\n----------------------------------------\n\nTITLE: Kyverno Create Command Options\nDESCRIPTION: Options specific to the 'kyverno create' command. It only includes the help flag.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help   help for create\n```\n\n----------------------------------------\n\nTITLE: Kyverno JP Command Options\nDESCRIPTION: Available options specific to the 'kyverno jp' command. Currently, it only includes the help flag for displaying command usage information.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_jp.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help   help for jp\n```\n\n----------------------------------------\n\nTITLE: Generating Helm Chart CRDs\nDESCRIPTION: Command to generate CRD templates for Kyverno's helm charts based on the API definitions.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/DEVELOPMENT.md#2025-04-21_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n# generate helm CRDs\nmake codegen-helm-crds\n```\n\n----------------------------------------\n\nTITLE: Installing etcdctl for Linux\nDESCRIPTION: Script to download and install etcdctl v3.4.13 from Google Storage or GitHub.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/perf-testing/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nETCD_VER=v3.4.13\n\n# choose either URL\nGOOGLE_URL=https://storage.googleapis.com/etcd\nGITHUB_URL=https://github.com/etcd-io/etcd/releases/download\nDOWNLOAD_URL=${GOOGLE_URL}\n\nrm -f /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz\nrm -rf /tmp/etcd-download-test && mkdir -p /tmp/etcd-download-test\n\ncurl -L ${DOWNLOAD_URL}/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz\ntar xzvf /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz -C /usr/local/bin --strip-components=1\nrm -f /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz\n\netcd --version\netcdctl version\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table of Kyverno Adopters\nDESCRIPTION: This code snippet creates a markdown table listing organizations that use Kyverno, including their names, links, and brief descriptions of how they utilize the tool.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/ADOPTERS.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Organization                                                                                                  | Success Story                                                                                                                                                                                                                |\n|:--------------------------------------------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Amazon EKS Best Practice Guides](https://github.com/aws/aws-eks-best-practices/tree/master/policies/kyverno) | Policies for security and best practices                                                                                                                                                                                     |\n| [Arrikto Inc.](https://www.arrikto.com)                                                                       | Kubeflow policies                                                                                                                                                                                                            |\n| [Flux2](https://github.com/fluxcd/flux2-multi-tenancy#enforce-tenant-isolation)                               | Manage multi-tenancy and tenant isolation with GitOps                                                                                                                                                                        |\n| [Nirmata](https://nirmata.com)                                                                                | Kubernetes Policy and Governance                                                                                                                                                                                             |\n| [Ohio Supercomputer Center](https://www.osc.edu/)                                                             | Support Kubernetes multi-user workflows through [Open OnDemand](http://openondemand.org/)                                                                                                                                    |\n| [Coinbase](https://www.coinbase.com/)                                                                         | Use Kyverno for mutation, to replace hand-written Webhooks, and generation to project common Kubernetes objects into many similar namespaces.                                                                                |\n| [Mandiant](https://www.mandiant.com/)                                                                         | Use Kyverno for policy enforcement in all clusters, as well as part of our onboarding systems, populating new namespaces with requisite resources and secrets.                                                               |\n| [Giant Swarm](https://www.giantswarm.io/)                                                                     | Use Kyverno extensively to handle defaulting logic on resources (primarily cluster-api resources) and some scenarios to replace PSPs to enforce certain restrictions.                                                        |\n| [Vodafone Group Plc](https://www.vodafone.com/)                                                               | Policy enforcement and automation on an internal k8s service offering.                                                                                                                                                       |\n| [Deutsche Telekom](https://www.telekom.com/en)                                                                | Use Kyverno to enforce Policies on managed clusters to prevent right escalation of internal customers and to enforce security rules.                                                                                         |\n| [VSHN AG - APPUiO Cloud](https://www.vshn.ch/)                                                                | OpenShift Multi-Tenancy Self-Service for [APPUiO Cloud](https://www.appuio.ch), managed with [Project Syn](https://syn.tools). Kyverno policies are available on [GitHub](https://github.com/appuio/component-appuio-cloud). |\n| [Bloomberg](https://www.techatbloomberg.com/)                                                                 | Use Kyverno for replacing custom validation and mutation webhooks in their internal Kubernetes based platforms                                                                                                               |\n| [Techcombank](https://www.techcombank.com.vn/trang-chu)                                                       | Use Kyverno to enforce security policies rules, Kubernetes best practices for their internal container based workload on Kubernetes                                                                                          |\n| [Trendyol](https://www.trendyol.com)                                                                          | In adoption planning to roll out to hundreds of production clusters using GitOps                                                                                                                                             |\n| [Rafay Systems](https://rafay.co/)                                                                            | Platform supports centralized deployment of Kyverno across clusters                                                                                                                                                          |\n| [Wayfair](https://wayfair.com)                                                                                | Policy enforcement on managed clusters. Replacement of some in-house mutating webhooks.                                                                                                                                      |\n| [Yahoo](https://www.yahoo.com/)                                                                               | Use Kyverno for mutation, to replace image tags to digest and also for validation for checking freshness of images.                                                                                                          |\n| [T-Systems](https://www.t-systems.com)                                                                        |                                                                                                                                                                                                                              |\n| [Red Hat](https://www.redhat.com)                                                                             | Learn more about Red Hat Advanced Cluster Management for Kubernetes for [Generating Governance Policies Using Kustomize and GitOps](https://cloud.redhat.com/blog/generating-governance-policies-using-kustomize-and-gitops).|\n| [DE-CIX](https://www.de-cix.net)                                                                              | Kyvernos policy enforcement is used to enforce the company's security guidelines. This is done using validation, mutation and generation techniques.                                                                        |\n| [Saxo Bank](https://www.home.saxo/)                                                                           | We use Kyverno to enforce security and best practises.                                                                                                                                                                      |\n| [Velux](https://www.velux.com/)                                                                               | We successfully use Kyverno in our clusters for security, best practice enforcement, resource mutation, secret copying and more!                                                                                             |\n| [HCS Company](https://www.hcs-company.com/)                                                                   | Policy enforcement and enabling selfservice for DevOps teams.                                                                                                                                                                |\n| [Hexagon](https://hexagon.com/)                                                                               | We leverage Kyverno to robustly enforce security policies. Additionally, as a Kubernetes swiss-knife, Kyverno fills our gap in our GitOps workflow by allowing us to apply complex configurations and customizations which are beyond the native capabilities of Kubernetes operators. |\n| [Grover Group GmbH](https://www.grover.com)                                                                   | We have been using Kyverno to streamline our K8s security standards and also follow industry best practices for running workloads in K8s using policy enforcements.                                                          |\n```\n\n----------------------------------------\n\nTITLE: Kyverno JSON Command Options\nDESCRIPTION: Available command-specific options for the kyverno json command.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_json.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for json\n```\n\n----------------------------------------\n\nTITLE: Policy Deletion Test Specification\nDESCRIPTION: Describes the test scenario for verifying resource cleanup behavior when a policy with generate rule is deleted. Focuses on ensuring downstream resources are properly removed upon policy deletion.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/generate/policy/standard/data/sync/pol-data-sync-delete-policy/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Description\n\nThis test makes sure that a Policy (Namespaced) with a generate rule, data type, and sync enabled, when the policy is deleted causes the downstream (generated) resource to also be deleted.\n```\n\n----------------------------------------\n\nTITLE: Startup Info & Policy Application Results Logging in Kyverno (L2)\nDESCRIPTION: Examples of level 2 logging in Kyverno for startup processes and policy application results. These provide information about controller initialization and metrics setup.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/logging/logging.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlogging.V(2).Info(\"starting controller\", \"workers\", c.workers)\nlogging.V(2).Info(\"setup metrics\", \"otel\", otel, \"port\", metricsPort)\n```\n\n----------------------------------------\n\nTITLE: Calculating Disk Budget for Policy Reports\nDESCRIPTION: Formula for calculating the estimated disk space needed for policy reports based on the number of resources and average report size.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/dev/reports/README.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nIf a report for a Pod is 1KB and there's 100 pods.\n\nDisk budget = 100 * 1KB * 3\n```\n\n----------------------------------------\n\nTITLE: Kyverno Create Exception Command Syntax\nDESCRIPTION: The basic syntax for the 'kyverno create exception' command. It requires a name parameter and can include various flags for customization.\nSOURCE: https://github.com/kyverno/kyverno/blob/main/docs/user/cli/commands/kyverno_create_exception.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkyverno create exception [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Validating Policy Creation Constraints\nDESCRIPTION: Checks policy creation restrictions for cluster roles in background mode, ensuring specific error conditions are met\nSOURCE: https://github.com/kyverno/kyverno/blob/main/test/conformance/chainsaw/validate/clusterpolicy/standard/audit/background-vars-userInfo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Policy creation test case\n# Validates that clusterRoles cannot be created in background mode\n```"
  }
]