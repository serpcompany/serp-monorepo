[
  {
    "owner": "pylons",
    "repo": "pyramid",
    "content": "TITLE: Creating a Basic \"Hello World\" App with Pyramid (Python)\nDESCRIPTION: This code snippet demonstrates how to create a simple \"Hello World\" web application using the Pyramid framework. It imports necessary modules, defines a view that returns a 'Hello World!' response, configures a route and view, and starts a WSGI server to serve the application. It requires the `pyramid` package to be installed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/README.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom wsgiref.simple_server import make_server\nfrom pyramid.config import Configurator\nfrom pyramid.response import Response\n\n\ndef hello_world(request):\n    return Response('Hello World!')\n\nif __name__ == '__main__':\n    with Configurator() as config:\n        config.add_route('hello', '/')\n        config.add_view(hello_world, route_name='hello')\n        app = config.make_wsgi_app()\n    server = make_server('0.0.0.0', 6543, app)\n    server.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Declarative Pyramid Configuration with Decorators in Python\nDESCRIPTION: This snippet shows how to use decorators for declarative configuration in Pyramid. The @view_config decorator associates the hello_world view function with the 'hello' route and the GET request method. Dependencies include pyramid.response and pyramid.view. The view function returns 'Hello World!' as the response.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/configuration.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\nfrom pyramid.view import view_config\n\n@view_config(route_name='hello', request_method='GET')\ndef hello_world(request):\n    return Response('Hello World!')\n```\n\n----------------------------------------\n\nTITLE: Implement a View (Python)\nDESCRIPTION: This snippet represents the implementation of a view. It captures the URL and a 'name' parameter, and includes the name in the response body. The response content type and body are then set before the response is returned.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/request_response.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n   .. literalinclude:: request_response/tutorial/views.py\n       :linenos:\n```\n\n----------------------------------------\n\nTITLE: Install Project in Editable Mode\nDESCRIPTION: Installs the project in editable mode along with its testing dependencies. The -e flag allows you to modify the project's source code without having to reinstall it.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/myproject/README.txt#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nenv/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Returning a Response Object from a View Callable in Pyramid\nDESCRIPTION: This snippet shows how to return a `Response` object directly from a view callable function in Pyramid. The `view` function accepts a `request` object and returns a `Response` object with the text 'OK'. It demonstrates the simplest way to generate a response.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/views.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyramid.response import Response\n\ndef view(request):\n    return Response('OK')\n```\n\n----------------------------------------\n\nTITLE: Imperative Pyramid Configuration in Python\nDESCRIPTION: This snippet demonstrates how to configure a basic Pyramid application using imperative configuration. It defines a simple view and adds a route and view using the Configurator object. Dependencies include wsgiref, pyramid.config, and pyramid.response. The application responds with 'Hello world!' when accessed via the root route.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/configuration.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wsgiref.simple_server import make_server\nfrom pyramid.config import Configurator\nfrom pyramid.response import Response\n\n\ndef hello_world(request):\n    return Response('Hello world!')\n\nif __name__ == '__main__':\n    with Configurator() as config:\n        config.add_route('hello', '/')\n        config.add_view(hello_world, route_name='hello')\n        app = config.make_wsgi_app()\n    server = make_server('0.0.0.0', 6543, app)\n    server.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Application Execution\nDESCRIPTION: This command executes the app.py module within the tutorial package using the Python interpreter. It directly runs the application, which is not the standard deployment method but is used here for demonstration purposes.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/package.rst#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$VENV/bin/python tutorial/app.py\n```\n\n----------------------------------------\n\nTITLE: Simple Pyramid Route and View Configuration (Imperative)\nDESCRIPTION: This snippet demonstrates basic route and view configuration in Pyramid without decorators. It defines routes for URLs with and without trailing slashes and associates them with corresponding view functions.  It also includes a not found view that appends a slash.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ndef has_slash(request):\n    return Response('Has slash')\n\ndef main(g, **settings):\n    config = Configurator()\n    config.add_route('noslash', 'no_slash')\n    config.add_route('hasslash', 'has_slash/')\n    config.add_view(no_slash, route_name='noslash')\n    config.add_view(has_slash, route_name='hasslash')\n    config.add_notfound_view(notfound, append_slash=True)\n```\n\n----------------------------------------\n\nTITLE: Running a Pyramid Application with pserve\nDESCRIPTION: This command uses `pserve`, Pyramid's application runner, to start the web application using the configuration file `development.ini`.  `pserve` separates operational details (like HTTP server and port) from the application code.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Adding pyramid_chameleon Dependency\nDESCRIPTION: Adds 'pyramid_chameleon' as a dependency in the setup.py file. This is essential for using Chameleon as the template engine in the Pyramid application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/templating.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom setuptools import setup\n\nrequires = [\n    'pyramid',\n    'pyramid_jinja2',\n    'pyramid_debugtoolbar',\n    'waitress',\n    'pyramid_chameleon',\n    ]\n\nsetup(name='tutorial',\n      install_requires=requires,\n      entry_points=\"\"\"\\\n      [paste.app_factory]\n      main = tutorial:main\n      \"\"\")\n```\n\n----------------------------------------\n\nTITLE: Pyramid Route and View Configuration with Decorators\nDESCRIPTION: This snippet shows how to configure routes and views in Pyramid using the `@view_config` and `@notfound_view_config` decorators. It simplifies the configuration process and makes the code more readable by associating views directly with their corresponding routes.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.httpexceptions import HTTPNotFound\nfrom pyramid.view import notfound_view_config, view_config\n\n@notfound_view_config(append_slash=True)\ndef notfound(request):\n    return HTTPNotFound()\n\n@view_config(route_name='noslash')\ndef no_slash(request):\n    return Response('No slash')\n\n@view_config(route_name='hasslash')\ndef has_slash(request):\n    return Response('Has slash')\n\ndef main(g, **settings):\n    config = Configurator()\n    config.add_route('noslash', 'no_slash')\n    config.add_route('hasslash', 'has_slash/')\n    config.scan()\n```\n\n----------------------------------------\n\nTITLE: Dynamic ACL with Callable in Pyramid\nDESCRIPTION: This example shows how to implement a dynamic ACL by defining __acl__ as a callable on the resource.  This allows the ACL to generate rules based on properties of the instance, such as the owner. The ACL allows everyone to 'view', the owner to 'edit', and members of 'group:editors' to 'edit'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.authorization import Allow\nfrom pyramid.authorization import Everyone\n\nclass Blog(object):\n    def __acl__(self):\n        return [\n            (Allow, Everyone, 'view'),\n            (Allow, self.owner, 'edit'),\n            (Allow, 'group:editors', 'edit'),\n        ]\n\n    def __init__(self, owner):\n        self.owner = owner\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic CSRF Checking in Pyramid (Python)\nDESCRIPTION: This code snippet shows how to enable automatic CSRF token checking globally for a Pyramid application using the `set_default_csrf_options` directive.  It requires the `pyramid.config` module. This configuration will automatically check CSRF tokens for requests with unsafe HTTP methods, enhancing security against CSRF attacks.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\nconfig = Configurator()\nconfig.set_default_csrf_options(require_csrf=True)\n```\n\n----------------------------------------\n\nTITLE: Modify __init__.py to include security policy (Python)\nDESCRIPTION: This snippet shows how to modify the __init__.py file to include the newly created security policy. This is done by setting the authentication and authorization policies in the Configurator.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/authorization.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\nfrom pyramid.response import Response\n\nfrom sqlalchemy import engine_from_config\n\nfrom .models import (\n    DBSession,\n    Base,\n    )\n\nfrom .security import MySecurityPolicy\n\ndef main(global_config, **settings):\n    engine = engine_from_config(settings, 'sqlalchemy.')\n    DBSession.configure(bind=engine)\n    Base.metadata.bind = engine\n\n    # security policy\n    auth_secret = settings['auth.secret']\n    security_policy = MySecurityPolicy(auth_secret)\n\n    config = Configurator(settings=settings, root_factory='.models.RootFactory',\n                          authentication_policy=security_policy,\n                          authorization_policy=security_policy)\n    config.include('pyramid_jinja2')\n    config.add_static_view('static', 'static', cache_max_age=3600)\n    config.add_route('wiki', '/')\n    config.add_route('view_page', '/{pagename}')\n    config.add_route('add_page', '/add_page/{pagename}')\n    config.add_route('edit_page', '/edit_page/{pagename}')\n    config.add_route('login', '/login')\n    config.add_route('logout', '/logout')\n    config.scan()\n    return config.make_wsgi_app()\n```\n\n----------------------------------------\n\nTITLE: Session Factory Configuration in __init__.py\nDESCRIPTION: This code snippet sets up a session factory using `UnencryptedCookieSessionFactoryConfig`. This is then passed to the configurator, enabling session management within the Pyramid application. The secret value should be unique and kept secret for production environments.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n    session_factory = UnencryptedCookieSessionFactoryConfig('itsaseekreet')\n    config = Configurator(settings=settings, session_factory=session_factory)\n```\n\n----------------------------------------\n\nTITLE: Initializing Signed Cookie Session Factory in Pyramid\nDESCRIPTION: This code snippet demonstrates how to initialize and configure a `SignedCookieSessionFactory` for session management in a Pyramid application. It imports the necessary modules, creates a session factory instance with a secret key, and then registers the session factory with the Pyramid configurator.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/sessions.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.session import SignedCookieSessionFactory\nmy_session_factory = SignedCookieSessionFactory('itsaseekreet')\n\nfrom pyramid.config import Configurator\nconfig = Configurator()\nconfig.set_session_factory(my_session_factory)\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Control with Security Policies in Pyramid\nDESCRIPTION: This code snippet demonstrates a simple security policy implementation in Pyramid that grants access based on a user's role. It checks if the user is signed in and then checks their role to determine which permissions are allowed. It returns an Allowed or Denied object with a message indicating whether access was granted or denied.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.security import Allowed, Denied\n\nclass SecurityPolicy:\n    def permits(self, request, context, permission):\n        identity = self.identity(request)\n\n        if identity is None:\n            return Denied('User is not signed in.')\n        if identity.role == 'admin':\n            allowed = ['read', 'write', 'delete']\n        elif identity.role == 'editor':\n            allowed = ['read', 'write']\n        else:\n            allowed = ['read']\n\n        if permission in allowed:\n            return Allowed(\n                'Access granted for user %s with role %s.',\n                identity,\n                identity.role,\n            )\n        else:\n            return Denied(\n                'Access denied for user %s with role %s.',\n                identity,\n                identity.role,\n            )\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Security Policy in Pyramid (Python)\nDESCRIPTION: This code snippet demonstrates how to implement a custom security policy in Pyramid by creating a class that implements the `pyramid.interfaces.ISecurityPolicy` interface. It defines methods for retrieving user identity, authenticating users, checking permissions, and managing user sessions.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.security import Allowed, Denied\n\nclass SessionSecurityPolicy:\n    def identity(self, request):\n        \"\"\" Return app-specific user object. \"\"\"\n        userid = request.session.get('userid')\n        if userid is None:\n            return None\n        return load_identity_from_db(request, userid)\n\n    def authenticated_userid(self, request):\n        \"\"\" Return a string ID for the user. \"\"\"\n        identity = self.identity(request)\n        if identity is None:\n            return None\n        return string(identity.id)\n\n    def permits(self, request, context, permission):\n        \"\"\" Allow access to everything if signed in. \"\"\"\n        identity = self.identity(request)\n        if identity is not None:\n            return Allowed('User is signed in.')\n        else:\n            return Denied('User is not signed in.')\n\n    def remember(request, userid, **kw):\n        request.session['userid'] = userid\n        return []\n\n    def forget(request, **kw):\n        del request.session['userid']\n        return []\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON body in Pyramid view\nDESCRIPTION: This Python code defines a Pyramid view that accesses the JSON body of the request via the request.json_body attribute. It prints the JSON body to the console and returns a simple string response. The view is configured to render a string.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/webob.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@view_config(renderer='string')\ndef aview(request):\n    print(request.json_body)\n    return 'OK'\n```\n\n----------------------------------------\n\nTITLE: Add Route with Replacement Pattern (Python)\nDESCRIPTION: This configuration adds a route named 'hello' with a URL pattern that includes replacement patterns '{first}' and '{last}'.  This enables extracting parts of the URL into a dictionary accessible via the request object.  The URL will extract values for 'first' and 'last' from the URL path.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/routing.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('hello', '/howdy/{first}/{last}')\n```\n\n----------------------------------------\n\nTITLE: Defining a View Callable as a Function in Pyramid\nDESCRIPTION: This code snippet demonstrates how to define a simple view callable as a Python function in Pyramid. The function accepts a `request` object as input and returns a `Response` object with a 'Hello world!' message. It imports the `Response` class from `pyramid.response`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/views.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyramid.response import Response\n\ndef hello_world(request):\n    return Response('Hello world!')\n```\n\n----------------------------------------\n\nTITLE: Protecting Views with Permissions via Decorator in Pyramid (Python)\nDESCRIPTION: This example demonstrates how to protect views using the `@view_config` decorator, associating a specific permission with the view function. This approach provides a concise and declarative way to define view configurations, including security permissions, directly within the view function definition.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\nfrom resources import Blog\n\n@view_config(context=Blog, name='add_entry.html', permission='add')\ndef blog_entry_add_view(request):\n    \"\"\" Add blog entry code goes here \"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Disabling CSRF Checking on a Specific Pyramid View (Python)\nDESCRIPTION: This example demonstrates how to disable CSRF checking for a specific Pyramid view using the `require_csrf` view option. It requires the `pyramid.view` module (imported implicitly via `@view_config`). Setting `require_csrf=False` on a view will override the global CSRF settings and skip CSRF checks for that specific view.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n@view_config(route_name='hello', require_csrf=False)\ndef myview(request):\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Initializing Configurator and Including Views (Extensible)\nDESCRIPTION: This code snippet demonstrates an extensible way of initializing a Pyramid Configurator and adding views by moving the view registration logic into a separate function (`add_views`) and including it using `config.include`. This approach allows integrators to selectively include or exclude the configuration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/extending.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\nif __name__ == '__main__':\n    config = Configurator()\n    config.include(add_views)\n\ndef add_views(config):\n    config.add_view('myapp.views.view1', name='view1')\n    config.add_view('myapp.views.view2', name='view2')\n```\n\n----------------------------------------\n\nTITLE: Pyramid Application Configuration (INI)\nDESCRIPTION: This INI configuration file snippet defines the settings for a Pyramid application, including template reloading, debugging options, default locale, inclusion of the pyramid_debugtoolbar, and registration of tweens.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:starter\nreload_templates = true\ndebug_authorization = false\ndebug_notfound = false\ndebug_routematch = false\ndebug_templates = true\ndefault_locale_name = en\npyramid.include = pyramid_debugtoolbar\npyramid.tweens = starter.tween_factory2\n                     starter.tween_factory1\n                     pyramid.tweens.excview_tween_factory\n```\n\n----------------------------------------\n\nTITLE: Imperatively Configuring an Event Listener in Python\nDESCRIPTION: This snippet demonstrates how to imperatively configure a subscriber function to be called when a specific event occurs using the `config.add_subscriber` method. It requires importing `NewRequest` from `pyramid.events` and the subscriber function from its module.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/events.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.events import NewRequest\n\nfrom subscribers import mysubscriber\n\n# \"config\" below is assumed to be an instance of a\n# pyramid.config.Configurator object\n\nconfig.add_subscriber(mysubscriber, NewRequest)\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Directive in Pyramid\nDESCRIPTION: This snippet shows how to use a custom directive that has been added to the Pyramid Configurator using `add_directive`. The custom directive `add_newrequest_subscriber` is called with a subscriber function `mysubscriber`. This will register `mysubscriber` to be called on every new request.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/extconfig.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef mysubscriber(event):\n    print(event.request)\n\nconfig.add_newrequest_subscriber(mysubscriber)\n```\n\n----------------------------------------\n\nTITLE: Adding a Response Adapter for Custom Response Objects\nDESCRIPTION: This code demonstrates how to add a response adapter for a custom response object (`SimpleResponse`). This allows view callables to return a simplified response, which is then adapted to a full `pyramid.response.Response` object using the adapter.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\n\n    class SimpleResponse(object):\n        def __init__(self, body):\n            self.body = body\n\n    def simple_response_adapter(simple_response):\n        response = Response(simple_response.body)\n        return response\n\n    # config is an instance of pyramid.config.Configurator\n\n    config.add_response_adapter(simple_response_adapter, SimpleResponse)\n```\n\n----------------------------------------\n\nTITLE: Running Pyramid Application (Bash)\nDESCRIPTION: This bash command starts the Pyramid application using `pserve` with the `development.ini` configuration file. The `--reload` flag enables automatic reloading of the application when changes are made to the code.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/logging.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Protecting Views with Permissions in Pyramid (Python)\nDESCRIPTION: This code shows how to protect views in Pyramid by associating a permission with the view configuration. This ensures that only users with the required permission can access the view.  It uses the `config.add_view` method of `pyramid.config.Configurator` to specify a permission string.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# config is an instance of pyramid.config.Configurator\n\nconfig.add_view('mypackage.views.blog_entry_add_view',\n                name='add_entry.html',\n                context='mypackage.resources.Blog',\n                permission='add')\n```\n\n----------------------------------------\n\nTITLE: View Defaults with @view_defaults Class Decorator (Python)\nDESCRIPTION: This code shows how to use the @view_defaults class decorator to provide default configuration options to all @view_config decorators applied to methods within the class.  It reduces repetition when multiple views within the class share common configurations.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\nfrom pyramid.response import Response\n\nclass RESTView(object):\n    def __init__(self, request):\n        self.request = request\n\n    @view_config(route_name='rest', request_method='GET')\n    def get(self):\n        return Response('get')\n\n    @view_config(route_name='rest', request_method='POST')\n    def post(self):\n        return Response('post')\n\n    @view_config(route_name='rest', request_method='DELETE')\n    def delete(self):\n        return Response('delete')\n```\n\n----------------------------------------\n\nTITLE: Configuration file example (INI)\nDESCRIPTION: This snippet shows an example of a development.ini configuration file. This file is used by pserve to configure and bootstrap the Pyramid application. It includes sections for the application, the server (Waitress), and logging.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/ini.rst#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:tutorial\n\n[server:main]\nhost = localhost\nport = 6543\n\n[logger_root]\nlevel = INFO\nhandlers = console\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s\n```\n\n----------------------------------------\n\nTITLE: Accessing and Using a Session Object in a Pyramid View\nDESCRIPTION: This code snippet illustrates how to access a session object from a Pyramid request and use it like a Python dictionary to store and retrieve data. It checks for the existence of a key, sets new key-value pairs, and returns a response based on the session's content.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/sessions.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\n\ndef myview(request):\n    session = request.session\n    if 'abc' in session:\n        session['fred'] = 'yes'\n    session['abc'] = '123'\n    if 'fred' in session:\n        return Response('Fred was in the session')\n    else:\n        return Response('Fred was not in the session')\n```\n\n----------------------------------------\n\nTITLE: Create security.py with security policy\nDESCRIPTION: This snippet instructs the user to create a `security.py` module that defines a security policy for the application. This policy is responsible for authenticating users and determining their permissions.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/authentication.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: authentication/tutorial/security.py\n    :linenos:\n```\n\n----------------------------------------\n\nTITLE: Pyramid Route Configuration (Python)\nDESCRIPTION: This python code snippet shows how to add a route to the Pyramid configuration using config.add_route. The route is named 'verify' and matches the path '/verify/{code}'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('verify', '/verify/{code}')\n```\n\n----------------------------------------\n\nTITLE: Pyramid View Configuration using @view_config Decorator\nDESCRIPTION: This example shows how to use the `@view_config` decorator in Pyramid to associate view configuration information with a function acting as a view callable.  The decorator is used to define the route name, request method, and permission required for the view.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom resources import MyResource\nfrom pyramid.view import view_config\nfrom pyramid.response import Response\n\n@view_config(route_name='ok', request_method='POST', permission='read')\ndef my_view(request):\n    return Response('OK')\n```\n\n----------------------------------------\n\nTITLE: Registering a Not Found View with a Decorator in Pyramid (Python)\nDESCRIPTION: This snippet shows how to register a custom Not Found View using the `@notfound_view_config` decorator in Pyramid. It defines a view that returns a 404 response and associates it with the Not Found View using the decorator.  A `config.scan()` is required to register views defined with decorators.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import notfound_view_config\n\n@notfound_view_config()\ndef notfound(request):\n    return Response('Not Found', status='404 Not Found')\n\ndef main(globals, **settings):\n    config = Configurator()\n    config.scan()\n```\n\n----------------------------------------\n\nTITLE: Adding Route and View Configuration\nDESCRIPTION: This code snippet adds a route and a view to the Pyramid application. The `add_route` method registers a route to the root ('/') URL path, and the `add_view` method registers the `hello_world` function as the view callable for the specified route.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/firstapp.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nconfig.add_route('hello', '/')\nconfig.add_view(hello_world, route_name='hello')\n```\n\n----------------------------------------\n\nTITLE: Using the CSRF Token in a jQuery AJAX Request\nDESCRIPTION: This JavaScript snippet demonstrates how to include the CSRF token as a header in a jQuery AJAX request. The token is obtained via the `get_csrf_token()` method in the template and included in the request headers. This prevents CSRF attacks for AJAX-based actions.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar csrfToken = \"${get_csrf_token()}\";\n$.ajax({\n  type: \"POST\",\n\n```\n\n----------------------------------------\n\nTITLE: Attaching ACL to a Resource Instance in Pyramid\nDESCRIPTION: This snippet demonstrates attaching an ACL to a specific instance of a resource by setting the __acl__ attribute directly on the instance. This is useful for fine-grained access control on an object-by-object basis. The ACL allows everyone to 'view' and members of 'group:editors' to 'add' and 'edit'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.authorization import Allow\nfrom pyramid.authorization import Everyone\n\nclass Blog(object):\n    pass\n\nblog = Blog()\n\nblog.__acl__ = [\n    (Allow, Everyone, 'view'),\n    (Allow, 'group:editors', 'add'),\n    (Allow, 'group:editors', 'edit'),\n]\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom View Predicate in Pyramid (Python)\nDESCRIPTION: This code snippet demonstrates how to add a custom view predicate named `content_type` to the list of available predicates for views.  The `ContentTypePredicate` class will handle the logic for determining if the predicate matches.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_41\n\nLANGUAGE: Python\nCODE:\n```\nconfig.add_view_predicate('content_type', ContentTypePredicate)\n```\n\n----------------------------------------\n\nTITLE: View Callable Class Definition with __init__ and __call__ in Pyramid (Python)\nDESCRIPTION: Defines a view callable as a class with an __init__ method that accepts a context and a request object, and a __call__ method that returns a response. It imports the Response object from pyramid.response and stores the context and request in instance attributes.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/views.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\n\nclass view(object):\n    def __init__(self, context, request):\n        self.context = context\n        self.request = request\n\n    def __call__(self):\n        return Response('OK')\n```\n\n----------------------------------------\n\nTITLE: Adding Request Methods in Pyramid (Property Caching)\nDESCRIPTION: This code demonstrates adding request methods to a Pyramid application using `config.add_request_method`. The `prop` function is added as a property with caching enabled using `reify=True`, which means it will only be executed once per request.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\ndef total(request, *args):\n    return sum(args)\n\ndef prop(request):\n    print(\"getting the property\")\n    return \"the property\"\n\nconfig = Configurator()\nconfig.add_request_method(total)\nconfig.add_request_method(prop, reify=True)\n```\n\n----------------------------------------\n\nTITLE: Add permission to add_page and edit_page views (Python)\nDESCRIPTION: This snippet shows how to add the 'edit' permission to the @view_config decorators for the add_page() and edit_page() functions in tutorial/views/default.py. This restricts access to these functions to only users with the 'edit' permission.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/authorization.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@view_config(route_name='add_page', renderer='templates/edit.pt', permission='edit')\ndef add_page(request):\n    name = request.matchdict['pagename']\n    return dict(name=name, pagename=name, logged_in=request.authenticated_userid())\n\n```\n\nLANGUAGE: python\nCODE:\n```\n@view_config(route_name='edit_page', renderer='templates/edit.pt', permission='edit')\ndef edit_page(request):\n    name = request.matchdict['pagename']\n    page = DBSession.query(Page).filter_by(name=name).one()\n    content = page.data\n    return dict(name=name, content=content, pagename=name, logged_in=request.authenticated_userid())\n\n```\n\n----------------------------------------\n\nTITLE: Generating a New CSRF Token in Pyramid (Python)\nDESCRIPTION: This snippet demonstrates how to generate a new CSRF token using the `new_csrf_token` function from the `pyramid.csrf` module. It takes a Pyramid request object as input and returns a new CSRF token string. It also clears any existing CSRF token, creates a new token, and sets the token in the user's session.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.csrf import new_csrf_token\ntoken = new_csrf_token(request)\n```\n\n----------------------------------------\n\nTITLE: Adding a Response Adapter for Strings in Pyramid\nDESCRIPTION: This code shows how to add a response adapter that allows view callables to return bare string objects, automatically converting them to Response objects without requiring a renderer. This is done using `config.add_response_adapter`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\n\n    def string_response_adapter(s):\n        response = Response(s)\n        return response\n\n    # config is an instance of pyramid.config.Configurator\n\n    config.add_response_adapter(string_response_adapter, str)\n```\n\n----------------------------------------\n\nTITLE: View Configuration with @view_config on a Function (Python)\nDESCRIPTION: This code demonstrates how to use the @view_config decorator on a function to associate a view with a specific route name. When a request matches the 'edit' route, the edit function will be executed, returning a response.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\nfrom pyramid.response import Response\n\n@view_config(route_name='edit')\ndef edit(request):\n    return Response('edited!')\n```\n\n----------------------------------------\n\nTITLE: Getting the CSRF Token in Python\nDESCRIPTION: This code snippet demonstrates how to obtain the CSRF token using the `get_csrf_token` function from `pyramid.csrf`. It takes the request object as an argument and returns the CSRF token string. A new token is generated if one doesn't exist.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.csrf import get_csrf_token\ntoken = get_csrf_token(request)\n```\n\n----------------------------------------\n\nTITLE: Accessing Context Resource in Pyramid View\nDESCRIPTION: This example shows how to access the context resource within a Pyramid view. The `request.context` attribute provides access to the resource object created by the route's factory. This avoids the need to query for the resource directly within the view callable.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\n@view_config(route_name='idea')\ndef idea_view(request):\n    idea = request.context\n    return Response(idea)\n```\n\n----------------------------------------\n\nTITLE: Including Packages via Settings Dictionary - Pyramid\nDESCRIPTION: Shows how to include packages in a plain-Python Pyramid application by setting the `pyramid.includes` key in the settings dictionary passed to Configurator. This method is useful when not using PasteDeploy.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/environment.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\nif __name__ == '__main__':\n    settings = {'pyramid.includes':'pyramid_debugtoolbar pyramid_tm'}\n    config = Configurator(settings=settings)\n```\n\n----------------------------------------\n\nTITLE: Including Configuration Function (Python)\nDESCRIPTION: This shows how to include configuration from another function using config.include(). This allows for automatic conflict resolution where configuration statements in the including code override those of the included function.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advconfig.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nconfig.include(add_routes)\n```\n\n----------------------------------------\n\nTITLE: Rendering a Response in Pyramid (Python)\nDESCRIPTION: This snippet presents an example of rendering a response using the `render_to_response` function. It demonstrates how to specify a template file and a dictionary of values to be passed to the template for rendering within a Pyramid view. It returns a `Response` object.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/introduction.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.renderers import render_to_response\n\ndef myview(request):\n    return render_to_response('myapp:templates/mytemplate.pt', {'a':1},\n                                  request=request)\n```\n\n----------------------------------------\n\nTITLE: Custom Route Predicate: IntegersPredicate with regex (Python)\nDESCRIPTION: This code snippet defines a custom route predicate similar to the previous one but relies on regular expressions in the route pattern to ensure valid integer input. The `IntegersPredicate` converts segment values to integers, but the route definition now includes regular expressions to pre-validate the segments as digits, eliminating the need for a `try-except` block. The `add_route` registers and uses the predicate with regex in the route pattern.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nclass IntegersPredicate:\n    def __init__(self, val, info):\n        self.segment_names = val\n\n    def text(self):\n        return 'integers = %s' % (self.segment_names,)\n\n    phash = text\n\n    def __call__(self, info, request):\n        match = info['match']\n        for segment_name in self.segment_names:\n            match[segment_name] = int(match[segment_name])\n        return True\n\n\nconfig.add_route_predicate('integers', IntegersPredicate)\nconfig.add_route('ymd', r'/{year:\\d+}/{month:\\d+}/{day:\\d+}',\n                 integers=('year', 'month', 'day'))\n```\n\n----------------------------------------\n\nTITLE: Declaring docutils dependency in pyproject.toml\nDESCRIPTION: This code snippet shows how to declare a dependency on the `docutils` package in the `pyproject.toml` file for the tutorial application.  It's required because the view code will depend on this package. The dependency is added to the `dependencies` section.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/definingviews.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n[project]\nname = \"tutorial\"\nversion = \"0.0\"\ndescription = \"\"\nauthors = [ ]\nkeywords = [\"web\", \"pyramid\"]\nreadme = \"README.rst\"\nrequires-python = \">=3.8\"\nclassifiers = [\n    \"Programming Language :: Python :: 3.8\",\n    \"Framework :: Pyramid\",\n    \"Topic :: Internet :: WWW/HTTP\",\n    \"Topic :: Internet :: WWW/HTTP :: WSGI :: Application\",\n]\ndependencies = [\n    \"pyramid\",\n    \"pyramid_debugtoolbar\",\n    \"waitress\",\n    \"docutils\",\n]\n[options]\npackages = find:.\n```\n\n----------------------------------------\n\nTITLE: Define Security Policy (MySecurityPolicy) Python\nDESCRIPTION: Defines a custom security policy, `MySecurityPolicy`, that uses `AuthTktCookieHelper` to track user identity via a signed cookie.  It loads the user's identity from the cookie and translates it into a `tutorial.models.User` object. It also provides methods for remembering and forgetting users, and implements a `load_identity` function.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/authentication.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.authentication import AuthTktCookieHelper\nfrom pyramid.interfaces import ISecurityPolicy\nfrom pyramid.request import RequestLocalCache\nfrom zope.interface import implementer\n\n@implementer(ISecurityPolicy)\nclass MySecurityPolicy:\n    def __init__(self, secret):\n        self.auth_cookie = AuthTktCookieHelper(secret, cookie_name='wiki2',\n                                                 secure=False, include_ip=False, timeout=60 * 60 * 1)\n\n    def identity(self, request):\n        return request.identity\n\n    def authenticated_userid(self, request):\n        identity = self.identity(request)\n        if identity:\n            return identity.id\n        return None\n\n    def permits(self, request, context, permission):\n        return False # implemented in next chapter\n\n    def remember(self, request, userid, **kw):\n        return self.auth_cookie.get_headers(userid, request=request, **kw)\n\n    def forget(self, request, **kw):\n        return self.auth_cookie.forget(request=request, **kw)\n\n    def load_identity(self, request):\n        identity = self.auth_cookie.identify(request)\n        if identity:\n            userid = identity['userid']\n            user = request.dbsession.query(User).filter_by(id=userid).first()\n            return user\n        return None\n\n    def get_identity(self, request):\n        # This method is called by Pyramid to retrieve the identity.\n        identity_cache = RequestLocalCache(self.load_identity)\n        return identity_cache.get_or_create(request)\n```\n\n----------------------------------------\n\nTITLE: URL Dispatch Route and View Configuration in Pyramid\nDESCRIPTION: This code snippet demonstrates how to configure routes and associate them with view callables in a Pyramid application using URL dispatch.  It uses `config.add_route` to define routes and `config.add_view` to link views to routes by `route_name`. The routes `foobar` and `bazbuz` are defined with URL patterns.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hybrid.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# config is an instance of pyramid.config.Configurator\n\nconfig.add_route('foobar', '{foo}/{bar}')\nconfig.add_route('bazbuz', '{baz}/{buz}')\n\nconfig.add_view('myproject.views.foobar', route_name='foobar')\nconfig.add_view('myproject.views.bazbuz', route_name='bazbuz')\n```\n\n----------------------------------------\n\nTITLE: Define view functions in views/default.py (Python)\nDESCRIPTION: This snippet provides the content for the 'tutorial/views/default.py' file, which defines the view functions for the wiki application. These functions handle requests for viewing the wiki, viewing individual pages, editing pages, and adding new pages.  It requires several imports and implements the core logic of the wiki application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/definingviews.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport re\n\nfrom pyramid.view import view_config\nfrom pyramid.response import Response\nfrom pyramid.httpexceptions import HTTPFound\n\nfrom sqlalchemy.exc import DBAPIError\n\nfrom .models import (\n    DBSession,\n    Page,\n)\n\n\nwikiwords = re.compile(r\"[\\w]+\")\n\n@view_config(route_name='view_wiki')\ndef view_wiki(request):\n    return HTTPFound(location = request.route_url('view_page', pagename='FrontPage'))\n\n@view_config(route_name='view_page', renderer='templates/view.jinja2')\ndef view_page(request):\n    pagename = request.matchdict['pagename']\n    try:\n        page = DBSession.query(Page).filter_by(name=pagename).one()\n    except DBAPIError:\n        return Response(db_err_msg, content_type='text/plain', status=500)\n    except Exception:\n        return HTTPFound(location = request.route_url('add_page', pagename=pagename))\n\n    def add_link(match):\n        name = match.group(0)\n        exists = DBSession.query(Page).filter_by(name=name).first()\n        if exists:\n            return '<a href=\"{}\">{}</a>'.format(request.route_url('view_page', pagename=name), name)\n        else:\n            return '<a href=\"{}\">{}</a>'.format(request.route_url('add_page', pagename=name), name)\n\n    content = page.data\n    content = wikiwords.sub(add_link, content)\n    edit_url = request.route_url('edit_page', pagename=pagename)\n    return dict(page=page, content=content, edit_url=edit_url)\n\n\n@view_config(route_name='add_page', renderer='templates/edit.jinja2')\ndef add_page(request):\n    pagename = request.matchdict['pagename']\n    if 'form.submitted' in request.params:\n        body = request.params['body']\n        session = DBSession()\n        page = Page(name=pagename, data=body)\n        session.add(page)\n        return HTTPFound(location = request.route_url('view_page', pagename=pagename))\n    return dict(pagename=pagename, body='')\n\n@view_config(route_name='edit_page', renderer='templates/edit.jinja2')\ndef edit_page(request):\n    pagename = request.matchdict['pagename']\n    try:\n        page = DBSession.query(Page).filter_by(name=pagename).one()\n    except DBAPIError:\n        return Response(db_err_msg, content_type='text/plain', status=500)\n    if 'form.submitted' in request.params:\n        body = request.params['body']\n        page.data = body\n        return HTTPFound(location = request.route_url('view_page', pagename=pagename))\n    return dict(pagename=pagename, body=page.data)\n\n\ndb_err_msg = \"\"\"\\nA database error occurred.\\nPlease refer to the \\n'Pyramid diagnostics' documentation for more information.\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: View Configuration with @view_config on a Method (Python)\nDESCRIPTION: This code demonstrates how to use @view_config on a method of a class. It registers the method as a view for the class. The class constructor must accept either a single 'request' argument or 'context, request' arguments.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\nfrom pyramid.view import view_config\n\nclass MyView(object):\n    def __init__(self, request):\n        self.request = request\n\n    @view_config(route_name='hello')\n    def amethod(self):\n        return Response('hello')\n```\n\n----------------------------------------\n\nTITLE: Add secret to development.ini\nDESCRIPTION: This snippet refers to adding a `tutorial.secret` configuration option to the `development.ini` file. This secret is likely used for signing authentication tokens or other security-related purposes and should not be hardcoded in the application code.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/authentication.rst#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n.. literalinclude:: authentication/development.ini\n    :language: ini\n    :linenos:\n```\n\n----------------------------------------\n\nTITLE: Accessing Settings via Request Registry in Pyramid (Python)\nDESCRIPTION: This code snippet demonstrates how to access application settings via the request object's registry. It retrieves the 'debug_frobnosticator' setting from the application configuration. This method is used when the code has access to the request object.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/environment.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsettings = request.registry.settings\ndebug_frobnosticator = settings['debug_frobnosticator']\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Setting to .ini file\nDESCRIPTION: This example shows how to add a custom setting to the application's .ini file. The `debug_frobnosticator` setting is added to the `[app:main]` section and set to `True`. This allows developers to customize application behavior using configuration files.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/environment.rst#_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\n# .. other settings\ndebug_frobnosticator = True\n```\n\n----------------------------------------\n\nTITLE: View Returning Tuple\nDESCRIPTION: This snippet demonstrates a Pyramid view that returns a tuple. A response adapter is used to convert the tuple (status code, content type, body) to a proper HTTP response. The `request` object is passed to the view function.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advanced-features.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef anotherview(request):\n    return (403, 'text/plain', \"Forbidden\")\n```\n\n----------------------------------------\n\nTITLE: development.ini Configuration File\nDESCRIPTION: This .ini file configures the Pyramid WSGI app, server settings, and Python logging system. It specifies the WSGI application package, enables automatic template reloading, selects the waitress server, and sets the listening interface.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:hello_world\n\n[server:main]\nuse = egg:waitress#main\nlisten = localhost:6543\n```\n\n----------------------------------------\n\nTITLE: Raising an HTTPUnauthorized Exception in a Pyramid View\nDESCRIPTION: This code shows how to raise an `HTTPUnauthorized` exception within a Pyramid view callable. When this exception is raised, Pyramid automatically generates a 401 Unauthorized response. It imports `HTTPUnauthorized` from `pyramid.httpexceptions`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/views.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyramid.httpexceptions import HTTPUnauthorized\n\ndef aview(request):\n    raise HTTPUnauthorized()\n```\n\n----------------------------------------\n\nTITLE: Modifying Response Content Type with render()\nDESCRIPTION: This snippet renders a template to a string using `render` and creates a `Response` object. The example demonstrates how to set the `content_type` attribute of the `Response` object to 'text/plain'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/templates.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.renderers import render\nfrom pyramid.response import Response\n\ndef sample_view(request):\n    result = render('mypackage:templates/foo.pt',\n                    {'foo':1, 'bar':2},\n                    request=request)\n    response = Response(result)\n    response.content_type = 'text/plain'\n    return response\n```\n\n----------------------------------------\n\nTITLE: Bootstrap with Custom Request (Python)\nDESCRIPTION: This python code snippet shows how to use pyramid.paster.bootstrap to initialize a Pyramid environment with a custom request.  This allows simulating requests from specific base URLs and is important for generating correct URLs when the application is mounted under a prefix.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.paster import bootstrap\nfrom pyramid.request import Request\n\nrequest = Request.blank('/', base_url='https://example.com/prefix')\nwith bootstrap('/path/to/my/development.ini#another', request=request) as env:\n    print(env['request'].application_url)\n    # will print 'https://example.com/prefix'\n```\n\n----------------------------------------\n\nTITLE: Defining the view_page function\nDESCRIPTION: This code defines the `view_page` view function, which handles displaying individual pages. It's configured to respond as the default view of a `Page` resource.  It retrieves the page content, processes WikiWords, and generates edit URLs. The `@view_config` decorator associates it with the `Page` resource and specifies the `templates/view.pt` template as the renderer.  It returns a dictionary containing page data for the template.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/definingviews.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@view_config(context=\".models.Page\", renderer=\"templates/view.pt\")\ndef view_page(context, request):\n    wiki = context.__parent__\n    page = context\n    content = page.data\n    page_text = render(content, None)\n\n    def check(match):\n        word = match.group(0)\n        if word in wiki:\n            view_url = request.route_url('view_page', pagename=word)\n            return '<a href=\"%s\">%s</a>' % (view_url, word)\n        else:\n            add_url = request.route_url('add_page', pagename=word)\n            return '<a href=\"%s\">%s</a>' % (add_url, word + '?')\n\n    page_text = wikiwords.sub(check, page_text)\n    edit_url = request.route_url('edit_page', pagename=page.name)\n    return dict(page=page, page_text=page_text, edit_url=edit_url)\n```\n\n----------------------------------------\n\nTITLE: Adding static view configuration (Python)\nDESCRIPTION: This python code demonstrates how to add a static view configuration using `config.add_static_view` within a Pyramid application's initialization file (`__init__.py`). It maps requests under a specified URL (e.g., /static/) to a directory within the package.  The `cache_max_age` parameter controls browser caching behavior.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/static_assets.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef includeme(config):\n    config.add_route('home', '/')\n    config.add_view('tutorial.views.home_view', route_name='home',\n                      renderer='tutorial:home.pt')\n    config.add_static_view(name='static', path='tutorial:static',\n                            cache_max_age=3600)\n```\n\n----------------------------------------\n\nTITLE: Registering a Forbidden View with a Decorator in Pyramid (Python)\nDESCRIPTION: This snippet demonstrates how to register a custom Forbidden View using the `@forbidden_view_config` decorator in Pyramid. It defines a view that returns a 'forbidden' response and associates it with the Forbidden View using the decorator.  A `config.scan()` is required to register views defined with decorators.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import forbidden_view_config\n\n@forbidden_view_config()\ndef forbidden(request):\n    return Response('forbidden')\n\ndef main(globals, **settings):\n    config = Configurator()\n    config.scan()\n```\n\n----------------------------------------\n\nTITLE: Generating Static Asset URLs - Python\nDESCRIPTION: This snippet shows how to generate URLs for static assets using `request.static_url`.  It retrieves URLs for CSS and JavaScript files located in the configured static asset directories. The `render_to_response` function is used to pass these URLs to a template.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.renderers import render_to_response\n\ndef my_view(request):\n    css_url = request.static_url('mypackage:assets/1/foo.css')\n    js_url = request.static_url('mypackage:assets/2/foo.js')\n    return render_to_response('templates/my_template.pt',\n                              dict(css_url=css_url, js_url=js_url),\n                              request=request)\n```\n\n----------------------------------------\n\nTITLE: Accessing Settings via Threadlocal Registry in Pyramid (Python)\nDESCRIPTION: This code snippet demonstrates how to access application settings when the code does not have direct access to the request object. It uses `pyramid.threadlocal.get_current_registry()` to obtain the current registry and then retrieves the 'debug_frobnosticator' setting. This is useful for accessing settings in utility functions or other places where the request object is not directly available.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/environment.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nregistry = pyramid.threadlocal.get_current_registry()\nsettings = registry.settings\ndebug_frobnosticator = settings['debug_frobnosticator']\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Assets in Pyramid\nDESCRIPTION: This code snippet configures the serving of static assets in a Pyramid application. It maps requests under `/static/` to files and directories inside a `static` directory located alongside the Python module. The `route_prefix` argument specifies the URL prefix for serving static assets.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_static_view(name='static', path='static', route_prefix='/static')\n```\n\n----------------------------------------\n\nTITLE: Displaying Matching Views with pviews for URL Dispatch in Bash\nDESCRIPTION: This command utilizes pviews to display the matching views for the /about URL using the 'shootout' configuration.  It's useful for debugging URL dispatch configurations and understanding which views are associated with specific routes and URLs.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pviews development.ini#shootout /about\n```\n\n----------------------------------------\n\nTITLE: Using config.action in a Custom Directive in Pyramid\nDESCRIPTION: This code demonstrates how to use `config.action` within a custom directive in Pyramid. The `add_jammyjam` directive registers a callable (`register`) with the configuration system that will set `config.registry.jammyjam` to the value passed to the directive. `config.action` is used to defer the action until the configuration is committed, allowing for conflict detection.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/extconfig.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef add_jammyjam(config, jammyjam):\n    def register():\n        config.registry.jammyjam = jammyjam\n    config.action('jammyjam', register)\n\nif __name__ == '__main__':\n    config = Configurator()\n    config.add_directive('add_jammyjam', add_jammyjam)\n```\n\n----------------------------------------\n\nTITLE: View Configuration with Custom Content Type Predicate in Pyramid (Python)\nDESCRIPTION: This code snippet shows how to configure a view using a custom predicate named `content_type`. The `aview` function will only be invoked if the `content_type` predicate matches based on the request.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_42\n\nLANGUAGE: Python\nCODE:\n```\n@view_config(content_type='File')\ndef aview(request): ...\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Pyramid Environment (Python)\nDESCRIPTION: This python code snippet shows how to use pyramid.paster.bootstrap to initialize a Pyramid environment within a script, allowing access to request, root, registry and other application-related objects. It opens a configuration file, bootstraps the environment, then prints route URL. The \"with\" statement handles cleanup automatically.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.paster import bootstrap\n\nwith bootstrap('/path/to/my/development.ini') as env:\n    print(env['request'].route_url('home'))\n```\n\n----------------------------------------\n\nTITLE: Adding a Flash Message to a Session in Pyramid\nDESCRIPTION: This code snippet shows how to add a flash message to a Pyramid session using the `flash()` method.  The `flash()` method appends a message to a flash queue, creating the queue if necessary.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/sessions.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrequest.session.flash('mymessage')\n```\n\n----------------------------------------\n\nTITLE: Configuring a Route and View\nDESCRIPTION: This code snippet demonstrates how to configure a route using `config.add_route` and associate it with a view callable using `config.add_view`. The `myview` function is assumed to be a view callable.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# \"config\" below is presumed to be an instance of the\n# pyramid.config.Configurator class; \"myview\" is assumed\n# to be a \"view callable\" function\nfrom views import myview\nconfig.add_route('myroute', '/prefix/{one}/{two}')\nconfig.add_view(myview, route_name='myroute')\n```\n\n----------------------------------------\n\nTITLE: Pyramid Route Naming Convention Example\nDESCRIPTION: This snippet demonstrates the use of dotted names for routes to avoid conflicts when composing applications from multiple sources.  It adds `timing.show_times` and `users.show_users` routes.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\ndef timing_include(config):\n    config.add_route('timing.show_times', '/times')\n\ndef users_include(config):\n    config.add_route('users.show_users', '/show')\n    config.include(timing_include, route_prefix='/timing')\n\ndef main(global_config, **settings):\n    config = Configurator()\n    config.include(users_include, route_prefix='/users')\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Addon in Pyramid\nDESCRIPTION: This code demonstrates how to use the custom addon defined in the previous snippet. It creates a `Configurator` instance, includes the 'auto_route_addon', and then calls the `add_auto_route` directive to register a route named 'foo' and a view function `my_view`. It sets up a basic Pyramid application with a custom route.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/extconfig.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\ndef main(global_config, **settings):\n    config = Configurator()\n    config.include('auto_route_addon')\n    config.add_auto_route('foo', my_view)\n\ndef my_view(request):\n    return request.response\n```\n\n----------------------------------------\n\nTITLE: View returning a dictionary rendered as JSON in Pyramid\nDESCRIPTION: This code snippet demonstrates a simple Pyramid view that returns a dictionary.  Because the view is configured with the 'json' renderer, the dictionary is automatically serialized into a JSON response.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\n\n@view_config(renderer='json')\ndef hello_world(request):\n    return {'content':'Hello!'}\n```\n\n----------------------------------------\n\nTITLE: Create Directory for Pyramid App (Bash)\nDESCRIPTION: Creates a directory called `hello_world` within the `quick_tutorial` project directory and navigates into it using bash commands.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/hello_world.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/projects/quick_tutorial; mkdir hello_world; cd hello_world\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Directive via add_directive in Pyramid\nDESCRIPTION: This code snippet demonstrates how to add a custom directive to a Pyramid Configurator using the `add_directive` method. The directive adds a new request subscriber. It defines a function `add_newrequest_subscriber` which takes a Configurator instance and a subscriber function as arguments, then uses `config.add_subscriber` to register the subscriber for the `NewRequest` event.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/extconfig.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.events import NewRequest\nfrom pyramid.config import Configurator\n\ndef add_newrequest_subscriber(config, subscriber):\n    config.add_subscriber(subscriber, NewRequest)\n\nif __name__ == '__main__':\n    config = Configurator()\n    config.add_directive('add_newrequest_subscriber',\n                         add_newrequest_subscriber)\n```\n\n----------------------------------------\n\nTITLE: Registering a Not Found View Imperatively in Pyramid (Python)\nDESCRIPTION: This code snippet demonstrates how to register a custom Not Found View in Pyramid using imperative configuration. It defines a simple view that returns a 404 response and registers it using `config.add_notfound_view`. This overrides the default Not Found View.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef notfound(request):\n    return Response('Not Found', status='404 Not Found')\n\ndef main(globals, **settings):\n    config = Configurator()\n    config.add_notfound_view(notfound)\n```\n\n----------------------------------------\n\nTITLE: Update views.py with login/logout logic\nDESCRIPTION: This snippet instructs the user to update the `views.py` module with the logic for handling login and logout requests. This will likely involve creating new views for rendering the login form and processing user credentials.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/authentication.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: authentication/tutorial/views.py\n    :linenos:\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Views - Python\nDESCRIPTION: This code snippet demonstrates how to configure static views in Pyramid using `config.add_static_view`. It maps URL prefixes ('static1', 'static2') to directories containing static assets ('mypackage:assets/1', 'mypackage:assets/2').\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_static_view(name='static1', path='mypackage:assets/1')\nconfig.add_static_view(name='static2', path='mypackage:assets/2')\n```\n\n----------------------------------------\n\nTITLE: Using the BeforeRender Event in Pyramid\nDESCRIPTION: This code demonstrates how to use the `BeforeRender` event in Pyramid to add global variables to the renderer.  A subscriber function `add_global` is defined and decorated with `@subscriber(BeforeRender)`. This function adds a key-value pair ('mykey', 'foo') to the event's dictionary, making it available to the renderer.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.events import subscriber\nfrom pyramid.events import BeforeRender\n\n@subscriber(BeforeRender)\ndef add_global(event):\n    event['mykey'] = 'foo'\n```\n\n----------------------------------------\n\nTITLE: Peeking at a Flash Message - Python\nDESCRIPTION: This doctest demonstrates how to peek at a flash message using `request.session.peek_flash()`. Unlike `pop_flash()`, `peek_flash()` allows you to view the flash message without removing it from the session. The example adds a message, peeks at it twice, then pops it, and finally peeks again to show that the queue is empty after the pop.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/sessions.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> request.session.flash('info message')\n>>> request.session.peek_flash()\n['info message']\n>>> request.session.peek_flash()\n['info message']\n>>> request.session.pop_flash()\n['info message']\n>>> request.session.peek_flash()\n[]\n```\n\n----------------------------------------\n\nTITLE: Decoding JSON Request Body in Pyramid (Python)\nDESCRIPTION: Demonstrates how to decode a JSON-encoded request body using the standard `json` library, which is equivalent to using the `request.json_body` attribute in Pyramid. It uses `loads` to parse the body of the request using the request's charset.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/webob.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom json import loads\nloads(request.body, encoding=request.charset)\n```\n\n----------------------------------------\n\nTITLE: Adding Request Methods from a Class in Pyramid\nDESCRIPTION: This snippet demonstrates how to add request methods from a class in Pyramid. The `ExtraStuff` class is instantiated per request, and its methods (`total` and `prop`) are added to the request object as attributes under the 'extra' namespace with caching enabled on `prop` using the `@reify` decorator. This caches the result of `prop` for the duration of the request.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\nfrom pyramid.decorator import reify\n\nclass ExtraStuff(object):\n\n    def __init__(self, request):\n        self.request = request\n\n    def total(self, *args):\n        return sum(args)\n\n    # use @property if you don't want to cache the result\n    @reify\n    def prop(self):\n        print(\"getting the property\")\n        return \"the property\"\n\nconfig = Configurator()\nconfig.add_request_method(ExtraStuff, 'extra', reify=True)\n```\n\n----------------------------------------\n\nTITLE: Accessing Settings in Includeme Function\nDESCRIPTION: This example shows how to access settings within an includeme function. The settings are accessed through the config.registry.settings dictionary.  This allows for configurable behavior within included components.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/environment.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef includeme(config):\n    settings = config.registry.settings\n    debug_frobnosticator = settings['debug_frobnosticator']\n```\n\n----------------------------------------\n\nTITLE: Unit Test with Pyramid Testing API in Python\nDESCRIPTION: This snippet demonstrates how to use the Pyramid testing API within a unittest.TestCase. It shows how to set up a dummy configuration using testing.setUp(), use testing_securitypolicy() to simulate security policies, create DummyRequest and DummyResource objects, and assert expected outcomes, such as HTTPForbidden exceptions or returned values.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/testing.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\nfrom pyramid import testing\n\nclass MyTest(unittest.TestCase):\n    def setUp(self):\n        self.config = testing.setUp()\n\n    def tearDown(self):\n        testing.tearDown()\n\n    def test_view_fn_forbidden(self):\n        from pyramid.httpexceptions import HTTPForbidden\n        from my.package import view_fn\n        self.config.testing_securitypolicy(userid='hank',\n                                           permissive=False)\n        request = testing.DummyRequest()\n        request.context = testing.DummyResource()\n        self.assertRaises(HTTPForbidden, view_fn, request)\n\n    def test_view_fn_allowed(self):\n        from my.package import view_fn\n        self.config.testing_securitypolicy(userid='hank',\n                                           permissive=True)\n        request = testing.DummyRequest()\n        request.context = testing.DummyResource()\n        response = view_fn(request)\n        self.assertEqual(response, {'greeting':'hello'})\n```\n\n----------------------------------------\n\nTITLE: Pyramid Configuration with Code Scanning in Python\nDESCRIPTION: This snippet demonstrates how to use code scanning to register views decorated with @view_config in a Pyramid application. It imports necessary modules, defines a view with a decorator, and then uses config.scan() to find and register the view. Dependencies include wsgiref, pyramid.config, pyramid.response, and pyramid.view. The application responds with 'Hello World!' when accessed via the 'hello' route.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/configuration.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom wsgiref.simple_server import make_server\nfrom pyramid.config import Configurator\nfrom pyramid.response import Response\nfrom pyramid.view import view_config\n\n\n@view_config(route_name='hello', request_method='GET')\ndef hello_world(request):\n    return Response('Hello World!')\n\n\nif __name__ == '__main__':\n    with Configurator() as config:\n        config.add_route('hello', '/')\n        config.scan()\n        app = config.make_wsgi_app()\n    server = make_server('0.0.0.0', 6543, app)\n    server.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Combining Permissions in a Single ACE in Pyramid\nDESCRIPTION: This code demonstrates how to combine multiple permissions into a single ACE using a tuple. Instead of creating separate ACEs for each permission granted to the 'group:editors' group, the permissions 'add' and 'edit' are grouped into one ACE.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.authorization import Allow\nfrom pyramid.authorization import Everyone\n\n__acl__ = [\n    (Allow, Everyone, 'view'),\n    (Allow, 'group:editors', ('add', 'edit')),\n]\n```\n\n----------------------------------------\n\nTITLE: Correct Response Mutation (Python)\nDESCRIPTION: This code shows the correct way to modify response headers when using a renderer in Pyramid. You must return the `request.response` object after modification for the changes to take effect.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef view(request):\n    request.response.set_cookie('abc', '123')\n    return request.response\n```\n\n----------------------------------------\n\nTITLE: Add Login/Logout Routes Python\nDESCRIPTION: Adds two new routes, `/login` and `/logout`, to the `tutorial/routes.py` file. These routes are associated with the login and logout views, enabling users to authenticate and deauthenticate from the wiki application. They must be defined before the catch-all `view_page` route.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/authentication.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef includeme(config):\n    config.add_route('login', '/login')\n    config.add_route('logout', '/logout')\n    config.add_route('view_page', '/{pagename}')\n    config.add_route('add_page', '/add_page')\n    config.add_route('edit_page', '/{pagename}/edit_page')\n```\n\n----------------------------------------\n\nTITLE: Pdistreport Utility Invocation (Bash)\nDESCRIPTION: This bash command invokes the pdistreport utility to display installed Python distributions and their versions, useful for debugging dependency issues.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pdistreport\n```\n\n----------------------------------------\n\nTITLE: Defining a View Callable as a Class in Pyramid\nDESCRIPTION: This example illustrates how to define a view callable using a Python class in Pyramid. The class, `MyView`, has an `__init__` method that accepts a `request` object and a `__call__` method that returns a `Response` object. The `__call__` method is invoked when the view is called.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/views.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyramid.response import Response\n\nclass MyView(object):\n    def __init__(self, request):\n        self.request = request\n\n    def __call__(self):\n        return Response('hello')\n```\n\n----------------------------------------\n\nTITLE: Update Tests (Python)\nDESCRIPTION: This snippet shows how to update the tests in `tests.py` to prove that the code does redirection, handles sending, and not sending the '/plain?name' parameter. It ensures the application behaves as expected with different inputs.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/request_response.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n   .. literalinclude:: request_response/tutorial/tests.py\n       :linenos:\n```\n\n----------------------------------------\n\nTITLE: Create SQLAlchemy Engine\nDESCRIPTION: The `get_engine` function creates a SQLAlchemy database engine using settings from the application's configuration file. It retrieves the database URI (e.g., `sqlite://`) from the `development.ini` file's `[app:main]` section using `sqlalchemy.engine_from_config`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/basiclayout.rst#_snippet_1\n\nLANGUAGE: py\nCODE:\n```\ndef get_engine(settings, prefix='sqlalchemy.'):\n    return sqlalchemy.engine_from_config(settings, prefix)\n```\n\n----------------------------------------\n\nTITLE: Pyramid Session Factory Initialization\nDESCRIPTION: Configures the Pyramid application with a session factory. The session factory is registered with the configurator, enabling session management in the application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/sessions.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n   .. literalinclude:: sessions/tutorial/__init__.py\n       :linenos:\n```\n\n----------------------------------------\n\nTITLE: Debugging Route Matching with Environment Variable\nDESCRIPTION: This snippet shows how to enable debugging of route matching in a Pyramid application by setting the `PYRAMID_DEBUG_ROUTEMATCH` environment variable to `true`. This will print details of the route matching process to the standard error stream.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_38\n\nLANGUAGE: text\nCODE:\n```\nPYRAMID_DEBUG_ROUTEMATCH=true $VENV/bin/pserve development.ini\nStarting server in PID 13586.\nserving on 0.0.0.0:6543 view at http://127.0.0.1:6543\n2010-12-16 14:45:19,956 no route matched for url \\\n                                        http://localhost:6543/wontmatch\n2010-12-16 14:45:20,010 no route matched for url \\\n                                http://localhost:6543/favicon.ico\n2010-12-16 14:41:52,084 route matched for url \\\n                                http://localhost:6543/static/logo.png; \\\n                                route_name: 'static/', ....\n```\n\n----------------------------------------\n\nTITLE: View Configuration with Decorator\nDESCRIPTION: This code snippet demonstrates how to use the `@view_config` decorator to associate a view callable with a route based on its `route_name`. The `myview` function returns a simple HTTP response.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\nfrom pyramid.response import Response\n\n@view_config(route_name='myroute')\ndef myview(request):\n    return Response('OK')\n```\n\n----------------------------------------\n\nTITLE: Application startup code in __init__.py (Python)\nDESCRIPTION: This snippet demonstrates moving the startup code from app.py to the __init__.py file. It defines the 'main' function, which serves as the WSGI application factory. This function takes settings from the .ini file and configures the Pyramid application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/ini.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\n\ndef main(global_config, **settings):\n    \"\"\" This function returns a Pyramid WSGI application. \"\"\"\n    with Configurator(settings=settings) as config:\n        config.include('pyramid_jinja2')\n        config.include('.routes')\n        config.scan()\n    return config.make_wsgi_app()\n```\n\n----------------------------------------\n\nTITLE: Configuring Jinja2 Template Bindings in Pyramid\nDESCRIPTION: This code snippet demonstrates how to include Jinja2 template bindings into a Pyramid application's configuration using the `config.include` method. This allows the application to use Jinja2 templates for rendering responses. The `config` object represents the Pyramid configurator.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconfig.include('pyramid_jinja2')\n```\n\n----------------------------------------\n\nTITLE: Content Negotiation with Accept Header in Pyramid (Python)\nDESCRIPTION: This code snippet shows how to configure views to dispatch based on the HTTP Accept request header. It uses view_config decorators to associate specific media types with different views and renderers, and includes a fallback view that raises HTTPNotAcceptable.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.httpexceptions import HTTPNotAcceptable\nfrom pyramid.view import view_config\n\n@view_config(accept='application/json', renderer='json')\n@view_config(accept='text/html', renderer='templates/hello.jinja2')\ndef myview(request):\n    return {\n        'name': request.GET.get('name', 'bob'),\n    }\n\n@view_config()\ndef myview_unacceptable(request):\n    raise HTTPNotAcceptable\n```\n\n----------------------------------------\n\nTITLE: Add Login/Logout Links to Layout HTML\nDESCRIPTION: This HTML code adds login and logout links to the application's layout. It uses TAL's `tal:condition` attribute to conditionally display the appropriate link based on the user's authentication status (`logged_in`).\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/authorization.rst#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n          <div id=\"view-menu\">\n            <span tal:condition=\"not: logged_in\">\n              <a href=\"${request.route_url('login')}\">Login</a>\n            </span>\n            <span tal:condition=\"logged_in\">\n              <span tal:content=\"logged_in\"/>\n              (<a href=\"${request.route_url('logout')}\">Logout</a>)\n            </span>\n          </div>\n```\n\n----------------------------------------\n\nTITLE: Configure Routes with Factories and ACLs\nDESCRIPTION: This code snippet configures the routes in `routes.py` to use the `NewPage` and `PageResource` classes as factories. It also sets up the ACLs for each route, ensuring that only authorized users can access the corresponding views.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/authorization.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom .resources import NewPage\nfrom .resources import PageResource\n\ndef includeme(config):\n    config.add_route('view_wiki', '/')\n    config.add_route('login', '/login')\n    config.add_route('logout', '/logout')\n    config.add_route('add_page', '/add_page/{pagename}', factory=NewPage)\n    config.add_route('view_page', '/{pagename}',\n                     factory=lambda request: PageResource(\n                         request.dbsession.query(Page).\n                         filter_by(name=request.matchdict['pagename']).\n                         first()))\n    config.add_route('edit_page', '/{pagename}/edit_page',\n                     factory=lambda request: PageResource(\n                         request.dbsession.query(Page).\n                         filter_by(name=request.matchdict['pagename']).\n                         first()))\n```\n\n----------------------------------------\n\nTITLE: Defining an ACL with Allow and Deny in Python\nDESCRIPTION: This code snippet demonstrates how to define an Access Control List (ACL) in Pyramid using the `Allow` and `DENY_ALL` special ACE from `pyramid.authorization`. It allows user 'fred' the 'view' permission and denies all other permissions, effectively stopping ACL inheritance.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.authorization import Allow\nfrom pyramid.authorization import DENY_ALL\n\n__acl__ = [ (Allow, 'fred', 'view'), DENY_ALL ]\n```\n\n----------------------------------------\n\nTITLE: Custom Accept Header Ordering (Python)\nDESCRIPTION: This example sorts text/plain higher than text/html and prefers charset=utf8 over charset=latin-1 within the text/plain media type. It shows the usage of add_accept_view_order to control the preference of media types during view lookup.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_accept_view_order('text/html')\nconfig.add_accept_view_order('text/plain;charset=latin-1')\nconfig.add_accept_view_order('text/plain', weighs_more_than='text/html')\nconfig.add_accept_view_order('text/plain;charset=utf8', weighs_more_than='text/plain;charset=latin-1')\n```\n\n----------------------------------------\n\nTITLE: Recursive Pyramid Route Prefixes\nDESCRIPTION: This code illustrates how route prefixes are recursive.  When an included configuration includes another configuration, the prefixes are combined.  This example shows how `/users` and `/timing` are combined to create `/users/timing/times`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\ndef timing_include(config):\n    config.add_route('show_times', '/times')\n\ndef users_include(config):\n    config.add_route('show_users', '/show')\n    config.include(timing_include, route_prefix='/timing')\n\ndef main(global_config, **settings):\n    config = Configurator()\n    config.include(users_include, route_prefix='/users')\n```\n\n----------------------------------------\n\nTITLE: Setting Up a New Pyramid Project\nDESCRIPTION: This series of commands sets up a newly created Pyramid project after using cookiecutter. It changes the directory into the project folder, creates a virtual environment, upgrades packaging tools, installs the project with testing requirements, and sets the `VENV` environment variable.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# Change directory into your newly created project.\ncd hello_world\n# Create a new virtual environment...\npython3 -m venv env\n# ...where we upgrade packaging tools...\nenv/bin/pip install --upgrade pip setuptools\n# ...and into which we install our project and its testing requirements.\nenv/bin/pip install -e \".[testing]\"\n# Reset our environment variable for a new virtual environment.\nexport VENV=~/hello_world/env\n```\n\n----------------------------------------\n\nTITLE: Generating URLs with request.route_url in Pyramid\nDESCRIPTION: This code shows how to generate a full URL based on a route using `request.route_url`. It takes the route name and replacement values for the route pattern as arguments. The function returns a fully qualified URL.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nurl = request.route_url('foo', a='1', b='2', c='3')\n```\n\n----------------------------------------\n\nTITLE: Adding a View with Permission in Pyramid (Python)\nDESCRIPTION: This code snippet demonstrates how to add a view with a specified permission using Pyramid's Configurator. The view will only be called if the user possesses the required permission relative to the current context.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# config is an instance of pyramid.config.Configurator\n\nconfig.add_route('add', '/add.html', factory='mypackage.Blog')\nconfig.add_view('myproject.views.add_entry', route_name='add',\n                    permission='add')\n```\n\n----------------------------------------\n\nTITLE: Register static view in __init__.py\nDESCRIPTION: Registers a static view for Deform's CSS and JavaScript assets, as well as the wiki page's views. This makes the static assets accessible via a URL.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/forms.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# This is a placeholder for the __init__.py content.\n# Assuming the relevant part is adding static views using config.add_static_view.\n# Example:\nfrom pyramid.config import Configurator\n\ndef main(global_config, **settings):\n    with Configurator(settings=settings) as config:\n        config.include('pyramid_chameleon')\n        config.add_route('wiki', '/')\n        config.add_route('view_page', '/{pagename}')\n        config.add_route('add_page', '/add/{pagename}')\n        config.add_route('edit_page', '/edit/{pagename}')\n        config.add_static_view(name='deform_static', path='deform:static/')\n        config.scan('.views')\n    return config.make_wsgi_app()\n```\n\n----------------------------------------\n\nTITLE: Enabling Authorization Debugging in .ini File\nDESCRIPTION: This configuration snippet demonstrates how to enable authorization debugging in the application's `.ini` file by setting the `pyramid.debug_authorization` key to `true` within the application's configuration section.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:MyProject\npyramid.debug_authorization = true\n```\n\n----------------------------------------\n\nTITLE: Cache Busting Configuration - Python\nDESCRIPTION: This snippet configures cache busting for static assets using `config.add_cache_buster`.  It uses `QueryStringConstantCacheBuster` to append a timestamp to the asset URL, ensuring that clients fetch the latest version when the server restarts.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport time\nfrom pyramid.static import QueryStringConstantCacheBuster\n\n# config is an instance of pyramid.config.Configurator\nconfig.add_static_view(name='static', path='mypackage:folder/static/')\nconfig.add_cache_buster(\n    'mypackage:folder/static/',\n    QueryStringConstantCacheBuster(str(int(time.time()))))\n```\n\n----------------------------------------\n\nTITLE: Changing an Existing Renderer in Pyramid\nDESCRIPTION: This code snippet shows how to override an existing renderer. It first creates an instance of the new renderer, then uses `config.add_renderer` to associate the new renderer with the existing renderer name (e.g., 'json'). After this, any views configured to use the 'json' renderer will utilize the newly registered renderer.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\njson_renderer = pyramid.renderers.JSON()\nconfig.add_renderer('json', json_renderer)\n```\n\n----------------------------------------\n\nTITLE: Correct Route Pattern with Decoded Characters\nDESCRIPTION: This example shows the *correct* way to define a route pattern, by using the decoded, human-readable form of literal characters.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n/Foo Bar/{baz}\n```\n\n----------------------------------------\n\nTITLE: Timing Tween Factory in Pyramid (Python)\nDESCRIPTION: This code defines a tween factory that logs the time spent processing each request. It checks a 'do_timing' setting in the registry to determine if timing support is enabled. If enabled, it wraps the handler with a timing tween that records the start and end times and logs the duration. Otherwise, it returns the original handler.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n# in a module named myapp.tweens\n\nimport time\nfrom pyramid.settings import asbool\nimport logging\n\nlog = logging.getLogger(__name__)\n\ndef timing_tween_factory(handler, registry):\n    if asbool(registry.settings.get('do_timing')):\n        # if timing support is enabled, return a wrapper\n        def timing_tween(request):\n            start = time.time()\n            try:\n                response = handler(request)\n            finally:\n                end = time.time()\n                log.debug('The request took %s seconds' %\n                          (end - start))\n            return response\n        return timing_tween\n    # if timing support is not enabled, return the original\n    # handler\n    return handler\n```\n\n----------------------------------------\n\nTITLE: Configure logging to access.log with PasteDeploy INI\nDESCRIPTION: This PasteDeploy configuration snippet defines a logger named `wsgi`, a file handler named `accesslog`, and configures the `wsgi` logger to use the `accesslog` handler. The `propagate` option is set to `0` to prevent the `wsgi` logger from propagating log records to the root logger.  This ensures that the access logs are only written to the specified file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/logging.rst#_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n# Begin logging configuration\n\n[loggers]\nkeys = root, myproject, wsgi\n\n[handlers]\nkeys = console, accesslog\n\n[logger_wsgi]\nlevel = INFO\nhandlers = accesslog\nqualname = wsgi\npropagate = 0\n\n[handler_accesslog]\nclass = FileHandler\nargs = ('%(here)s/access.log','a')\nlevel = INFO\nformatter = generic\n```\n\n----------------------------------------\n\nTITLE: View Declaration (Python)\nDESCRIPTION: This snippet demonstrates how to declare a view using the @view_config decorator. The view is associated with the MyModel context and renders the mytemplate.pt template.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/basiclayout.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\n\n\n@view_config(context='tutorial.models.MyModel', renderer='tutorial:templates/mytemplate.pt')\ndef my_view(request):\n    return {'project': 'tutorial'}\n```\n\n----------------------------------------\n\nTITLE: Add Authentication Secret to development.ini INI\nDESCRIPTION: Adds a new setting, `auth.secret`, to the `development.ini` file.  This secret is used by the authentication policy for signing cookies. It's crucial for security and should be unique in each environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/authentication.rst#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:tutorial\npyramid.reload_templates = true\npyramid.debug_authorization = false\npyramid.debug_notfound = false\npyramid.debug_routematch = false\npyramid.default_locale_name = en\n\nsqlalchemy.url = sqlite:///%(here)s/tutorial.sqlite\n\n# By default, the toolbar only appears for clients from\n# localhost.\ndebugtoolbar.hosts = 127.0.0.1\n\n[server:main]\nuse = egg:pyramid#wsgiref\nhost = 0.0.0.0\nport = 6543\n\n[pipeline:main]\npaster = config:development.ini\ntray = egg:WebError#evalerror\nmain = egg:pyramid#static\n\n[filter:static]\nuse = egg:pyramid#static\n\n[app:static]\nuse = egg:pyramid#static\ndocument_root = %(here)s/public\n\nauth.secret = VERY_SECRET\n```\n\n----------------------------------------\n\nTITLE: Timing View Deriver in Pyramid\nDESCRIPTION: This code defines a custom view deriver that adds timing information to the response headers. It registers a callable that wraps the view, measures the execution time, and adds an 'X-View-Performance' header to the response, but only if the view config includes timed=True. It showcases how view derivers can modify the response based on the view's configuration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\ndef timing_view(view, info):\n    if info.options.get('timed'):\n        def wrapper_view(context, request):\n            start = time.time()\n            response = view(context, request)\n            end = time.time()\n            response.headers['X-View-Performance'] = '%.3f' % (end - start,)\n            return response\n        return wrapper_view\n    return view\n\ntiming_view.options = ('timed',)\n\nconfig.add_view_deriver(timing_view)\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Listeners in Pyramid in Python\nDESCRIPTION: This code demonstrates how to configure event listeners in a Pyramid application by calling `config.add_subscriber` for each event listener. It registers the functions `handle_new_request` and `handle_new_response` to listen for the `NewRequest` and `NewResponse` events, respectively.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/events.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# config is an instance of pyramid.config.Configurator\n\nconfig.add_subscriber('myproject.subscribers.handle_new_request',\n                          'pyramid.events.NewRequest')\nconfig.add_subscriber('myproject.subscribers.handle_new_response',\n                          'pyramid.events.NewResponse')\n```\n\n----------------------------------------\n\nTITLE: Run Project\nDESCRIPTION: Starts the Pyramid application using the pserve command, which reads the configuration from development.ini. This initiates the web server and makes the application accessible.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/installation/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Removing app.py (Bash)\nDESCRIPTION: This command removes the app.py file, as the application startup logic has been moved to __init__.py.  This step is part of refactoring the application structure.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/ini.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrm tutorial/app.py\n```\n\n----------------------------------------\n\nTITLE: Setup.py Configuration - Python\nDESCRIPTION: Example setup.py file for a Pyramid project. This includes project metadata, dependencies, and entry points for PasteDeploy.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom setuptools import setup, find_packages\n\nhere = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(here, 'README.txt')) as f:\n    README = f.read()\nwith open(os.path.join(here, 'CHANGES.txt')) as f:\n    CHANGES = f.read()\n\nrequires = ['pyramid', 'pyramid_debugtoolbar']\n\ntests_require = [\n    'WebTest',\n    'pytest',\n    'pytest-cov',\n]\n\nsetup(name='MyProject',\n    version='0.0',\n    description='My project',\n    long_description=README + '\\n\\n' +  CHANGES,\n    classifiers=[\n        \"Programming Language :: Python\",\n        \"Framework :: Pyramid\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Internet :: WWW/HTTP :: WSGI :: Application\",\n    ],\n    author='',\n    author_email='',\n    url='',\n    keywords='web pyramid pylons',\n    packages=find_packages(exclude=['tests']),\n    include_package_data=True,\n    zip_safe=False,\n    install_requires=requires,\n    extras_require={\n        'testing': tests_require,\n    },\n    entry_points = \"\"\"\\\n    [paste.app_factory]\n    main = myproject:main\n    \"\"\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Directive with Introspectable Relationships\nDESCRIPTION: This code demonstrates how to create relationships between introspectables within a custom directive in Pyramid. The `add_jammyjam` directive registers two introspectables, one for the `value` and one for the `template`. The `intr.relate` method is used to establish a relationship between the two introspectables, allowing introspection tools to visualize the connection between them. It sets up two introspectables and relates them to each other.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/extconfig.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef add_jammyjam(config, value, template):\n    def register():\n        config.registry.jammyjam = (value, template)\n    intr = config.introspectable(category_name='jammyjams',\n                                 discriminator='jammyjam',\n                                 title='a jammyjam',\n                                 type_name=None)\n    intr['value'] = value\n    tmpl_intr = config.introspectable(category_name='jammyjam templates',\n                                      discriminator=template,\n                                      title=template,\n                                      type_name=None)\n    tmpl_intr['value'] = template\n    intr.relate('jammyjam templates', template)\n    config.action('jammyjam', register, introspectables=(intr, tmpl_intr))\n\nif __name__ == '__main__':\n    config = Configurator()\n    config.add_directive('add_jammyjam', add_jammyjam)\n```\n\n----------------------------------------\n\nTITLE: Stack decorator on hello view\nDESCRIPTION: Adds another decorator to the ``hello`` view in ``views.py``. This configuration will override the view defaults to use the JSON renderer instead of the template renderer when the ``hello_json`` route is matched.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/json.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n   .. literalinclude:: json/tutorial/views.py\n       :linenos:\n```\n\n----------------------------------------\n\nTITLE: Define Resources and ACLs in Routes\nDESCRIPTION: This code snippet defines the `NewPage` and `PageResource` classes, which represent the resources in the wiki application. It also defines the ACLs for each resource, specifying which principals have which permissions.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/authorization.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.security import Allow\nfrom pyramid.security import Everyone\n\n\nclass NewPage:\n    __acl__ = [\n        (Allow, 'role:editor', 'create'),\n        (Allow, 'role:basic', 'create'),\n    ]\n\n    def __init__(self, request):\n        pass\n\n\nclass PageResource:\n    def __init__(self, page):\n        self.page = page\n\n    def __acl__(self):\n        acl = [\n            (Allow, Everyone, 'view'),\n        ]\n        owner = 'user:%s' % self.page.creator.id\n        acl.append((Allow, owner, 'edit'))\n        acl.append((Allow, 'role:editor', 'edit'))\n        return acl\n```\n\n----------------------------------------\n\nTITLE: Elements of ACL Example in Pyramid\nDESCRIPTION: This code snippet showcases a basic ACL structure containing access control entries (ACEs). The ACL defines permissions for different principals. It allows everyone to 'view' and the 'group:editors' to 'add' and 'edit'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.authorization import Allow\nfrom pyramid.authorization import Everyone\n\n__acl__ = [\n    (Allow, Everyone, 'view'),\n    (Allow, 'group:editors', 'add'),\n    (Allow, 'group:editors', 'edit'),\n]\n```\n\n----------------------------------------\n\nTITLE: Database Initialization Script (Python)\nDESCRIPTION: This Python script initializes the SQLite database. It creates the database schema and adds a root page to the database. It uses the SQLAlchemy session and transaction manager to perform database operations within a transaction context.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/databases.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport os\nimport sys\nimport transaction\n\nfrom sqlalchemy import engine_from_config\n\nfrom pyramid.paster import (\n    get_appsettings,\n    setup_logging,\n    )\n\nfrom pyramid.scripts.common import parse_vars\n\nfrom ..models import (\n    DBSession,\n    Base,\n    Page,\n    )\n\n\ndef usage(argv):\n    cmd = os.path.basename(argv[0])\n    print('usage: %s <config_uri> [var=value]...\\n'\n          '(example: \"%s development.ini\")' % (cmd, cmd))\n    sys.exit(1)\n\n\ndef main(argv=sys.argv):\n    if len(argv) < 2:\n        usage(argv)\n    config_uri = argv[1]\n    options = parse_vars(argv[2:])\n    setup_logging(config_uri)\n    settings = get_appsettings(config_uri, options=options)\n    settings['sqlalchemy.url'] = settings['sqlalchemy.url'].replace('%(here)s', os.getcwd())\n    engine = engine_from_config(settings, 'sqlalchemy.')\n    DBSession.configure(bind=engine)\n    Base.metadata.create_all(engine)\n\n    with transaction.manager:\n        model = Page(title='Root', body='<p>Root</p>')\n        DBSession.add(model)\n```\n\n----------------------------------------\n\nTITLE: Generate Alembic Revision\nDESCRIPTION: Generates an Alembic revision based on the current database schema, configured in `development.ini`. The `--autogenerate` flag automatically detects changes to the models.  The `-m \"init\"` provides a commit message for the revision.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/models/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nenv/bin/alembic -c development.ini revision --autogenerate -m \"init\"\n```\n\n----------------------------------------\n\nTITLE: Configuration Function Example (Python)\nDESCRIPTION: This is an example of a configuration function. Instead of calling it directly, it should be included using config.include() to allow automatic conflict resolution.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advconfig.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef add_routes(config):\n    config.add_route(...)\n```\n\n----------------------------------------\n\nTITLE: Add Authentication Secret to production.ini INI\nDESCRIPTION: Adds a new setting, `auth.secret`, to the `production.ini` file.  This secret is used by the authentication policy for signing cookies.  This setting is essential for security and its value must be different from other environments.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/authentication.rst#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:tutorial\npyramid.reload_templates = false\npyramid.debug_authorization = false\npyramid.debug_notfound = false\npyramid.debug_routematch = false\npyramid.default_locale_name = en\n\nsqlalchemy.url = sqlite:///%(here)s/tutorial.sqlite\n\nauth.secret = A_COMPLETELY_DIFFERENT_SECRET\n```\n\n----------------------------------------\n\nTITLE: Initializing Pyramid Application (Python)\nDESCRIPTION: This Python code initializes the Pyramid application. It configures the SQLAlchemy engine, sets up the transaction manager, and includes the models for use in the application. It connects SQLAlchemy to the Pyramid request lifecycle.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/databases.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport os\n\nfrom pyramid.config import Configurator\nfrom sqlalchemy import engine_from_config\n\nfrom .models import (\n    DBSession,\n    Base,\n    )\n\n\ndef main(global_config, **settings):\n    \"\"\" This function returns a Pyramid WSGI application. \"\"\"\n    engine = engine_from_config(settings, 'sqlalchemy.')\n    DBSession.configure(bind=engine)\n    Base.metadata.bind = engine\n\n    config = Configurator(settings=settings)\n    config.include('pyramid_jinja2')\n    config.add_static_view('static', 'static', cache_max_age=3600)\n    config.add_route('home', '/')\n    config.add_route('add', '/add')\n    config.add_route('view', '/{title}')\n    config.add_route('edit', '/{title}/edit')\n    config.add_route('delete', '/{title}/delete')\n    config.scan()\n    return config.make_wsgi_app()\n```\n\n----------------------------------------\n\nTITLE: Enable Template Auto-Reload via INI File - INI\nDESCRIPTION: This snippet demonstrates how to configure automatic reloading of templates by setting the `pyramid.reload_templates` key to `true` within the application's configuration section in the `.ini` file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/templates.rst#_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:MyProject\npyramid.reload_templates = true\n```\n\n----------------------------------------\n\nTITLE: Creating AJAX Request with jQuery (JavaScript)\nDESCRIPTION: Demonstrates constructing an AJAX request in JavaScript using jQuery to send a JSON-encoded body to a Pyramid application. This allows using the `request.json_body` attribute on the server side to easily access the decoded JSON data.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/webob.rst#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Routing URL Parameters\nDESCRIPTION: This snippet demonstrates how to declare a route with URL parameters using the add_route method. It defines a route named 'hello' with two parameters, 'first' and 'last', which can be accessed in the view via request.matchdict.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('hello', '/howdy/{first}/{last}')\n```\n\n----------------------------------------\n\nTITLE: Create Python Virtual Environment\nDESCRIPTION: Creates a virtual environment named 'env' using Python 3. This isolates the project's dependencies from the system-wide Python installation.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/authorization/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: Conflicting View Configuration (Python)\nDESCRIPTION: This code snippet demonstrates a configuration conflict in Pyramid. Two views are added with the same name, which leads to a ConfigurationConflictError when the application is started. This illustrates Pyramid's default conflict detection mechanism.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advconfig.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom wsgiref.simple_server import make_server\nfrom pyramid.config import Configurator\nfrom pyramid.response import Response\n\ndef hello_world(request):\n    return Response('Hello world!')\n\ndef goodbye_world(request):\n    return Response('Goodbye world!')\n\nif __name__ == '__main__':\n    config = Configurator()\n\n    config.add_view(hello_world, name='hello')\n\n    # conflicting view configuration\n    config.add_view(goodbye_world, name='hello')\n\n    app = config.make_wsgi_app()\n    server = make_server('0.0.0.0', 8080, app)\n    server.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Imperative View Configuration in Pyramid\nDESCRIPTION: This code snippet demonstrates the imperative configuration method using `config.add_view` in Pyramid. It achieves the same result as the previous example using the `@view_config` decorator, but through explicit configuration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nconfig.add_view('mypackage.views.my_view', route_name='ok',\n                    request_method='POST', permission='read')\n```\n\n----------------------------------------\n\nTITLE: Adding a View Configuration (Original)\nDESCRIPTION: This code snippet demonstrates how to add a view configuration in a Pyramid application using the `add_view` method.  It shows the basic syntax for associating a view callable with a name.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/extending.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef configure_views(config):\n    config.add_view('theoriginalapp.views.theview', name='theview')\n```\n\n----------------------------------------\n\nTITLE: Custom Route Predicate: IntegersPredicate (Python)\nDESCRIPTION: This code snippet defines a custom route predicate called `IntegersPredicate`. It attempts to convert the values associated with specified segment names in the route's match dictionary to integers. The `__call__` method iterates through the segment names, attempts the conversion, and returns `True`.  The `add_route` example shows how to register and use this predicate with segment conversion for a route.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nclass IntegersPredicate:\n    def __init__(self, val, info):\n        self.segment_names = val\n\n    def text(self):\n        return 'integers = %s' % (self.segment_names,)\n\n    phash = text\n\n    def __call__(self, info, request):\n        match = info['match']\n        for segment_name in self.segment_names:\n            try:\n                match[segment_name] = int(match[segment_name])\n            except (TypeError, ValueError):\n                pass\n        return True\n\n\nconfig.add_route_predicate('integers', IntegersPredicate)\nconfig.add_route('ymd', '/{year}/{month}/{day}',\n                 integers=('year', 'month', 'day'))\n```\n\n----------------------------------------\n\nTITLE: Example Pyramid Application __init__.py (Python)\nDESCRIPTION: Shows an example of the `__init__.py` file, which contains the `main` function that serves as the application's constructor. It demonstrates how the configurator is used to set up the application and return a WSGI router instance.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/startup.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\ndef main(global_config, **settings):\n    \"\"\" This function returns a Pyramid WSGI application. \n    \"\"\"\n    with Configurator(settings=settings) as config:\n        config.include('pyramid_chameleon')\n        config.add_route('home', '/')\n        config.add_view('myproject.views.my_view, route_name='home')\n        config.scan('.views')\n    return config.make_wsgi_app()\n```\n\n----------------------------------------\n\nTITLE: Adding bcrypt dependency to pyproject.toml (Python)\nDESCRIPTION: This snippet shows how to add the bcrypt package as a dependency to the pyproject.toml file. Bcrypt is used for securely hashing passwords.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/authorization.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n[project]\n...\ndependencies = [\n    \"pyramid\",\n    \"pyramid_jinja2\",\n    \"pyramid_debugtoolbar\",\n    \"waitress\",\n    \"deform\",\n    \"pyramid_deform\",\n    \"sqlalchemy\",\n    \"zope.sqlalchemy\",\n    \"psycopg2\",\n    \"bcrypt\",\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Pyramid Application Section in INI File\nDESCRIPTION: This configuration defines the 'main' application section in the .ini file for a Pyramid project. It sets various Pyramid settings, such as template reloading, debugging options, and the default locale.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:MyProject\npyramid.reload_templates = true\npyramid.debug_authorization = false\npyramid.debug_notfound = false\npyramid.debug_templates = true\npyramid.default_locale_name = en\n```\n\n----------------------------------------\n\nTITLE: Overriding a Renderer at Runtime Using a NewRequest Subscriber in Pyramid\nDESCRIPTION: This code snippet demonstrates how to override a renderer at runtime using a `NewRequest` subscriber. The subscriber checks the request content type and headers to determine if an XML-RPC request is being made. If so, it sets the `request.override_renderer` attribute to 'xmlrpc', effectively replacing the statically configured renderer with the 'xmlrpc' renderer for that specific request.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.events import subscriber\nfrom pyramid.events import NewRequest\n\n@subscriber(NewRequest)\ndef set_xmlrpc_params(event):\n    request = event.request\n    if (request.content_type == 'text/xml'\n            and request.method == 'POST'\n            and not 'soapaction' in request.headers\n            and not 'x-pyramid-avoid-xmlrpc' in request.headers):\n        params, method = parse_xmlrpc_request(request)\n        request.xmlrpc_params, request.xmlrpc_method = params, method\n        request.is_xmlrpc = True\n        request.override_renderer = 'xmlrpc'\n        return True\n```\n\n----------------------------------------\n\nTITLE: Add Page View Function and Decorator (Pyramid, Python)\nDESCRIPTION: This snippet defines the `add_page` view function, responsible for adding new wiki pages. It handles both form rendering and submission processing. It retrieves the page name from the request's `matchdict` and creates a new `Page` object. It checks if the page already exists before proceeding. It uses `request.dbsession` for database interactions and `pyramid.view.view_config` for route and renderer configuration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/definingviews.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@view_config(\n    route_name='add_page',\n    renderer='templates/edit.jinja2'\n)\ndef add_page(request):\n    pagename = request.matchdict['pagename']\n    if request.dbsession.query(Page).filter_by(name=pagename).first():\n        url = request.route_url('edit_page', pagename=pagename)\n        return HTTPFound(url)\n\n    if request.method == 'POST':\n        body = request.params['body']\n        page = Page(name=pagename, data=body)\n        editor = request.dbsession.query(User).filter_by(name='editor').first()\n        page.creator = editor\n        request.dbsession.add(page)\n        url = request.route_url('view_page', pagename=pagename)\n        return HTTPFound(url)\n\n    save_url = request.route_url('add_page', pagename=pagename)\n    page = Page(name=pagename, data='')\n    return dict(\n        page=page,\n        save_url=save_url\n    )\n```\n\n----------------------------------------\n\nTITLE: Changing the Response Factory in Pyramid\nDESCRIPTION: This code demonstrates how to change the default response factory in Pyramid.  A custom response class `MyResponse` is defined and used as the factory for creating response objects. The `Configurator` is initialized with the `response_factory` argument set to a lambda function that returns an instance of `MyResponse`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\n\nclass MyResponse(Response):\n    pass\n\nconfig = Configurator(response_factory=lambda r: MyResponse())\n```\n\n----------------------------------------\n\nTITLE: Overriding a Package Directory in Pyramid\nDESCRIPTION: This example shows how to override an entire package directory with another directory using the override_asset API in Pyramid. It replaces all lookups to assets inside 'some.package' with lookups inside 'another.package'. No colon is present in asset specification when overriding a package directory.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nconfig.override_asset(to_override='some.package',\n                      override_with='another.package')\n```\n\n----------------------------------------\n\nTITLE: Logging Messages to a Package-Specific Logger (Python)\nDESCRIPTION: This snippet demonstrates how to log messages to the package-specific logger configured in a .ini file. It imports the logging module, creates a logger object using the __name__ builtin variable, and then calls methods on it (e.g., log.debug) to send log messages. The __name__ variable refers to the current module's fully qualified name.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/logging.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlog = logging.getLogger(__name__)\n\ndef myview(request):\n    content_type = 'text/plain'\n    content = 'Hello World!'\n    log.debug('Returning: %s (content-type: %s)', content, content_type)\n    request.response.content_type = content_type\n    return request.response\n```\n\n----------------------------------------\n\nTITLE: Update views tests - Python\nDESCRIPTION: This snippet showcases integration tests for the application's views. It uses dummy requests and configuration to simulate different scenarios and test the view logic. The snippet also sets up a dummy security policy for authentication purposes.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/tests.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsrc/tests/tests/test_views.py\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Pyramid Request Response\nDESCRIPTION: This code demonstrates how to access the response object from a Pyramid request and modify its attributes, such as setting a cookie. It shows how renderers use request.response to obtain the response object and how views can set up the response before rendering. The mutations will be preserved in the response sent to the client after rendering.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/api/request.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresponse = request.response\nresponse.set_cookie('mycookie', 'mine, all mine!')\nreturn {'text':'Value that will be used by the renderer'}\n```\n\n----------------------------------------\n\nTITLE: Defining Groups and Permissions\nDESCRIPTION: Defines a data store for groups and the `permits` method of a SecurityPolicy class. This controls how permissions are verified against users and their assigned groups.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/authorization.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nauthorization/tutorial/security.py\n```\n\n----------------------------------------\n\nTITLE: Direct Decorator Application in Pyramid\nDESCRIPTION: This example demonstrates how to apply multiple decorators to a view callable in Pyramid directly using the `@` syntax. This is equivalent to using the `decorator` argument in `view_config` with the decorators listed in reverse order.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@view_config(...)\n@decorator2\n@decorator1\ndef myview(request):\n  ...\n```\n\n----------------------------------------\n\nTITLE: Add login and logout views (Python)\nDESCRIPTION: This snippet shows how to add the login and logout views to the application. These views handle user authentication and session management.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/authorization.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\nfrom pyramid.security import remember\nfrom pyramid.security import forget\nfrom pyramid.httpexceptions import HTTPFound\n\nfrom .security import USERS\nfrom .security import check_password\n\n@view_config(route_name='login', renderer='templates/login.pt')\ndef login_view(request):\n    login_url = request.route_url('login')\n    referrer = request.referrer\n    if referrer == login_url:\n        referrer = '/'\n    came_from = request.params.get('came_from', referrer)\n    message = ''\n    login = ''\n    password = ''\n    if 'form.submitted' in request.params:\n        login = request.params['login']\n        password = request.params['password']\n        if login in USERS and check_password(password, USERS[login]['password']):\n            headers = remember(request, login)\n            return HTTPFound(location=came_from, headers=headers)\n        message = 'Failed login'\n\n    return dict(message=message, url=request.application_url + '/login',\n                came_from=came_from, login=login, password=password)\n\n@view_config(route_name='logout')\ndef logout_view(request):\n    headers = forget(request)\n    url = request.route_url('wiki')\n    return HTTPFound(location=url, headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Pyramid Traversal Example\nDESCRIPTION: This snippet demonstrates a Pyramid application using traversal to map URLs to resources. It defines a simple resource class (Resource), a root factory (get_root) that creates a resource tree, and a view callable (hello_world_of_resources) that renders the context. The view is configured to be invoked when traversal reaches a Resource instance.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hellotraversal.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wsgiref.simple_server import make_server\nfrom pyramid.config import Configurator\nfrom pyramid.response import Response\n\nclass Resource(dict):\n    pass\n\ndef get_root(request):\n    return Resource({\n        'a': Resource({\n            'b': Resource()\n        })\n    })\n\ndef hello_world_of_resources(context, request):\n    return Response('Hello World!')\n\nif __name__ == '__main__':\n    with Configurator() as config:\n        config.set_root_factory(get_root)\n        config.add_view(hello_world_of_resources, context=Resource)\n        app = config.make_wsgi_app()\n    server = make_server('0.0.0.0', 6543, app)\n    server.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Tuple Response Adapter (Python)\nDESCRIPTION: Defines a response adapter that allows views to return tuples containing a status code, content type, and body, which are then used to construct a `Response` object. This allows for custom status codes and content types directly from the view.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advanced-features.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\ndef tuple_response_adapter(val):\n    status_int, content_type, body = val\n    response = Response(body)\n    response.content_type = content_type\n    response.status_int = status_int\n    return response\n\ndef string_response_adapter(body):\n    response = Response(body)\n    response.content_type = 'text/html'\n    response.status_int = 200\n    return response\n\nif __name__ == '__main__':\n    config = Configurator()\n```\n\n----------------------------------------\n\nTITLE: Generating Path with route_name in Pyramid\nDESCRIPTION: This code snippet shows how to generate a path using `request.resource_path` with the `route_name` parameter. It uses the 'mysection' route to generate a path for a resource `a`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hybrid.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nrequest.resource_path(a, route_name='mysection')\n```\n\n----------------------------------------\n\nTITLE: Wrapping Pyramid app with TransLogger in Python\nDESCRIPTION: This snippet demonstrates how to wrap a Pyramid WSGI application with the `TransLogger` middleware from `paste.translogger`. It manually instantiates `TransLogger` and applies it to the application instance returned by `config.make_wsgi_app()`. The `setup_console_handler` parameter is set to `False` to prevent TransLogger from automatically configuring a console handler, as logging is already configured.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/logging.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# ...\napp = config.make_wsgi_app()\nfrom paste.translogger import TransLogger\napp = TransLogger(app, setup_console_handler=False)\nreturn app\n```\n\n----------------------------------------\n\nTITLE: Setuptools Entry Point Configuration in setup.py\nDESCRIPTION: This snippet demonstrates the entry_points configuration in a setup.py file for a Pyramid project. It defines the paste.app_factory entry point, linking the 'main' entry point to the myproject:main function, which is the application factory.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/paste.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nentry_points='''\n    [paste.app_factory]\n    main = myproject:main\n'''\n```\n\n----------------------------------------\n\nTITLE: Route Factory with ACL Configuration (Python)\nDESCRIPTION: This code snippet demonstrates using a route factory to attach a custom ACL to a resource. The `Article` class serves as a factory. When the 'article' argument in the matchdict is equal to '1', the factory attaches an ACL that allows the 'editor' principal the 'view' permission. This allows you to define security policies based on the matched route parameters.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nclass Article(object):\n    def __init__(self, request):\n        matchdict = request.matchdict\n        article = matchdict.get('article', None)\n        if article == '1':\n            self.__acl__ = [ (Allow, 'editor', 'view') ]\n```\n\n----------------------------------------\n\nTITLE: Run Project Tests with pytest\nDESCRIPTION: Executes the project's test suite using pytest. This verifies the correctness and functionality of the codebase.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/authorization/README.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pytest\n```\n\n----------------------------------------\n\nTITLE: Functional test for static file (Python)\nDESCRIPTION: This Python code provides a functional test that asserts that the newly added static CSS file is successfully delivered by the Pyramid application.  It checks that the response body contains the CSS content.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/static_assets.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n    def test_css(self):\n        response = self.testapp.get('/static/app.css', status=200)\n        self.assertEqual(response.content_type, 'text/css')\n        self.assertIn(b'font-family: sans-serif;', response.body)\n```\n\n----------------------------------------\n\nTITLE: Load Default Data\nDESCRIPTION: Executes a script to load default data into the database, configured in `development.ini`. This populates the database with initial data required for the tutorial.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/models/README.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nenv/bin/initialize_tutorial_db development.ini\n```\n\n----------------------------------------\n\nTITLE: Log Output Example (Text)\nDESCRIPTION: This text shows an example of the logging output generated in the console when the home view is accessed. It displays the timestamp, logging level, logger name, thread name, and the log message.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/logging.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n2013-08-09 10:42:42,968 DEBUG [tutorial.views][MainThread] In home view\n```\n\n----------------------------------------\n\nTITLE: Configurator Construction\nDESCRIPTION: This code creates an instance of the Pyramid Configurator class using a context manager. The resulting `config` object provides an API for configuring the Pyramid application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/firstapp.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nif __name__ == '__main__':\n    with Configurator() as config:\n```\n\n----------------------------------------\n\nTITLE: Generating Cache Busting URLs - Python\nDESCRIPTION: This snippet demonstrates how to generate a cache-busted URL using `request.static_url`. The resulting URL includes a query parameter that changes when the cache buster is updated, forcing clients to download the latest version of the asset.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\njs_url = request.static_url('mypackage:folder/static/js/myapp.js')\n# Returns: 'http://www.example.com/static/js/myapp.js?x=1445318121'\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission in View (Python)\nDESCRIPTION: Shows how to access form parameters using `request.params`. Pyramid automatically decodes form submission values into Unicode from UTF-8, so the view code should expect string values.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/views.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef myview(request):\n    firstname = request.params['firstname']\n    lastname = request.params['lastname']\n```\n\n----------------------------------------\n\nTITLE: Returning JSON from a Pyramid View\nDESCRIPTION: This code snippet demonstrates how to return data from a Pyramid view using the JSON renderer. The `renderer='json'` argument in `@view_config` specifies that the view's return value should be serialized as JSON. The function returns a dictionary, which will be automatically converted to JSON.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@view_config(route_name='hello', renderer='json')\ndef hello_view(request):\n    return {\"message\": \"Hello, World!\"}\n```\n\n----------------------------------------\n\nTITLE: Manually Checking a CSRF Token in a Pyramid View (Python)\nDESCRIPTION: This snippet illustrates how to manually check the validity of a CSRF token in a Pyramid view function using the `check_csrf_token` function. It requires the `pyramid.csrf` module. The function checks for the presence and validity of the CSRF token in the request's POST parameters or headers, raising an `HTTPBadRequest` exception if the token is invalid, or returning `True` if it is valid.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.csrf import check_csrf_token\n\ndef myview(request):\n    # Require CSRF Token\n    check_csrf_token(request)\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Finding a Resource by Absolute Path\nDESCRIPTION: Shows how to find a resource in the resource tree by its absolute path using `pyramid.traversal.find_resource`. The path argument is a string prefixed with a '/'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/resources.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.traversal import find_resource\nurl = find_resource(anyresource, '/path')\n```\n\n----------------------------------------\n\nTITLE: Create Python Virtual Environment\nDESCRIPTION: Creates an isolated Python environment using the venv module. This isolates project dependencies from the system-wide Python installation.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/installation/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: Including Configuration with Route Prefix (Python)\nDESCRIPTION: Illustrates how to include the configuration of another Pyramid package into your application, prefixing its routes to avoid conflicts and enable reuse of existing functionality. Demonstrates using `config.include` with a `route_prefix`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advanced-features.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\nif __name__ == '__main__':\n    config = Configurator()\n    config.include('pyramid_jinja2')\n    config.include('pyramid_exclog')\n    config.include('some.other.package', route_prefix='/somethingelse')\n```\n\n----------------------------------------\n\nTITLE: Update add_page View with Permission Declaration\nDESCRIPTION: This code snippet updates the `add_page` view to declare the `create` permission. It retrieves the `pagename` from the context instead of `request.matchdict`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/authorization.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@view_config(route_name='add_page', renderer='templates/edit.pt', permission='create')\ndef add_page(request):\n    name = request.context.pagename\n    page = Page(name=name, body='')\n    form = WikiPageForm(request.POST, page)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Setting in Python\nDESCRIPTION: This Python code snippet demonstrates how to retrieve and use a custom setting from the application's configuration. It retrieves the `debug_frobnosticator` setting from the `settings` dictionary, converts it to a boolean value using `asbool`, and then updates the `settings` dictionary with the converted value before passing it to the Configurator.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/environment.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef main(global_config, **settings):\n    # ...\n    from pyramid.settings import asbool\n    debug_frobnosticator = asbool(settings.get(\n        'debug_frobnosticator', 'false'))\n    settings['debug_frobnosticator'] = debug_frobnosticator\n    config = Configurator(settings=settings)\n```\n\n----------------------------------------\n\nTITLE: Configuring Static View with Custom Setting - Python\nDESCRIPTION: This snippet shows how to define a custom setting 'media_location' to control where static assets are served from, defaulting to 'static' if the setting is not defined.  It uses `config.add_static_view` to serve assets either from a local directory or an external URL based on the setting's value.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmedia_location = settings.get('media_location', 'static')\n\nconfig = Configurator(settings=settings)\nconfig.add_static_view(path='myapp:static', name=media_location)\n```\n\n----------------------------------------\n\nTITLE: Accessing View Return Values in BeforeRender Event\nDESCRIPTION: This code shows how to access the dictionary returned by a view callable within a `BeforeRender` event subscriber using the `event.rendering_val` attribute.  The example demonstrates accessing a specific key ('mykey') from the dictionary and printing its value.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.events import subscriber\nfrom pyramid.events import BeforeRender\n\n@subscriber(BeforeRender)\ndef read_return(event):\n    # {'mykey': 'somevalue'} is returned from the view\n    print(event.rendering_val['mykey'])\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Attributes in Pyramid\nDESCRIPTION: Demonstrates accessing request attributes like 'scheme', transaction manager ('tm'), and database session ('dbsession') within a Pyramid application setup. These components are typically used within the view code to interact with the request and application state.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nrequest.scheme = 'https'\n\nenv['testapp'] = TestApp(env['app'])\n\n# start a transaction which can be used in the shell\nrequest.tm.begin()\n\n# if using the SQLAlchemy backend from our cookiecutter, the dbsession is\n# connected to the transaction manager above\nenv['tm'] = request.tm\nenv['dbsession'] = request.dbsession\ntry:\n    yield\n\nfinally:\n    with suppress(NoTransaction):\n        request.tm.abort()\n```\n\n----------------------------------------\n\nTITLE: Flashing a Message with a Queue Name - Python\nDESCRIPTION: This code snippet demonstrates how to add a message to a specific flash queue named 'myappsqueue' using the `request.session.flash()` method. This allows for organizing different types of messages into separate queues within the session. The message 'msg' is added to the queue.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/sessions.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrequest.session.flash(msg, 'myappsqueue')\n```\n\n----------------------------------------\n\nTITLE: Non-Conflicting Action Example in Pyramid\nDESCRIPTION: This example demonstrates a simple use of the `add_jammyjam` directive that does not result in a configuration conflict.  A single call to the directive will result in the `jammyjam` attribute of the registry being set to the provided value.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/extconfig.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_jammyjam('first')\n```\n\n----------------------------------------\n\nTITLE: Modify Appmaker Function - Python\nDESCRIPTION: This code snippet shows how to modify the appmaker function to create a Wiki instance as the root resource and add a default 'FrontPage' to it. This provides an initial resource tree for traversal.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/definingmodels.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef appmaker(zodb_root):\n    if not 'app_root' in zodb_root:\n        root = Wiki()\n        root['FrontPage'] = Page('Welcome to the FrontPage')\n        zodb_root['app_root'] = root\n        transaction.commit()\n    return zodb_root['app_root']\n```\n\n----------------------------------------\n\nTITLE: Resolving Conflicts with commit() (Python)\nDESCRIPTION: This example demonstrates how to resolve configuration conflicts by using config.commit() between configuration calls. Committing the configuration executes pending actions and prevents conflicts between subsequent actions.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advconfig.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom wsgiref.simple_server import make_server\nfrom pyramid.config import Configurator\nfrom pyramid.response import Response\n\ndef hello_world(request):\n    return Response('Hello world!')\n\ndef goodbye_world(request):\n    return Response('Goodbye world!')\n\nif __name__ == '__main__':\n    config = Configurator()\n\n    config.add_view(hello_world, name='hello')\n\n    config.commit() # commit any pending configuration actions\n\n    # no-longer-conflicting view configuration\n    config.add_view(goodbye_world, name='hello')\n\n    app = config.make_wsgi_app()\n    server = make_server('0.0.0.0', 8080, app)\n    server.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Basic Pyramid View Configuration\nDESCRIPTION: This code snippet demonstrates how to configure simple views in Pyramid using the `@view_config` decorator. It associates view callables with specific routes and extracts data from the request's `matchdict`. The return value is a Pyramid Response object containing the extracted data.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyramid.view import view_config\nfrom pyramid.response import Response\n\n@view_config(route_name='idea')\ndef idea_view(request):\n    return Response(request.matchdict['idea'])\n\n@view_config(route_name='user')\ndef user_view(request):\n    user = request.matchdict['user']\n    return Response('The user is {}.'.format(user))\n\n@view_config(route_name='tag')\ndef tag_view(request):\n    tag = request.matchdict['tag']\n    return Response('The tag is {}.'.format(tag))\n```\n\n----------------------------------------\n\nTITLE: Hybrid Route Configuration with *traverse in Pyramid\nDESCRIPTION: This snippet demonstrates a hybrid route configuration in Pyramid using the `*traverse` token. The `*traverse` token captures the remaining path segments of the URL after `{foo}/{bar}`. These captured segments are then used for traversal, allowing resource location and view lookup based on the traversal path. No explicit `root_factory` is provided, so either the global or default root factory will be used.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hybrid.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('home', '{foo}/{bar}/*traverse')\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Pattern from Introspector\nDESCRIPTION: This code snippet demonstrates how to retrieve the route pattern for a specific route using the introspector. It first gets the route introspectable using the route name as the discriminator, then accesses the 'pattern' attribute of the introspectable. This allows accessing route configuration details at runtime.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/introspector.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nroute_intr = introspector.get('routes', 'edit_user')\npattern = route_intr['pattern']\n```\n\n----------------------------------------\n\nTITLE: Install Project Dependencies (Shell)\nDESCRIPTION: This command installs the project in editable mode along with testing dependencies. The `-e` flag installs the project in editable mode, and `.[testing]` specifies the 'testing' extra, installing test-related packages. Requires pip and a `pyproject.toml` file defining the project and its dependencies.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/authentication/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nenv/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Subscriber with a Custom Predicate in Pyramid (Python)\nDESCRIPTION: This code snippet demonstrates how to add a subscriber that uses a custom predicate. The `yosubscriber` function will only be called if the `request_path_startswith` predicate matches (i.e., the request path starts with '/add_yo').\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_46\n\nLANGUAGE: Python\nCODE:\n```\n# define a subscriber in your code\n\ndef yosubscriber(event):\n    event.request.yo = 'YO!'\n\n# and at configuration time\n\nconfig.add_subscriber(yosubscriber, NewRequest,\n                      request_path_startswith='/add_yo')\n```\n\n----------------------------------------\n\nTITLE: Pyramid Route Prefix Context Manager\nDESCRIPTION: This code demonstrates using the `route_prefix_context` context manager to set a route prefix for multiple `add_route` and `include` calls within a `with` statement. This simplifies the configuration of routes under a common prefix.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\ndef timing_include(config):\n    config.add_route('timing.show_times', '/times')\n\ndef main(global_config, **settings)\n    config = Configurator()\n    with config.route_prefix_context('/timing'):\n        config.include(timing_include)\n        config.add_route('timing.average', '/average')\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Trailing Slash Inheritance in Pyramid (Python)\nDESCRIPTION: This code snippet demonstrates how to define a route pattern that inherits the trailing slash from the route prefix using `config.route_prefix_context` and `config.add_route` with the `inherit_slash=True` option in Pyramid 2.0. This allows for dynamic route pattern generation based on the prefix.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-2.0.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith config.route_prefix_context('/users'):\n    config.add_route('users', '', inherit_slash=True)\n```\n\n----------------------------------------\n\nTITLE: Accessing Session in Pyramid Views\nDESCRIPTION: Demonstrates how to access and use the session object within a Pyramid view function. The session is accessed via the request.session attribute and can be used to store and retrieve data.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/sessions.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n   .. literalinclude:: sessions/tutorial/views.py\n       :linenos:\n```\n\n----------------------------------------\n\nTITLE: Requiring Edit Permission and Handling Forbidden Views\nDESCRIPTION: Modifies the `views.py` file to require the `edit` permission on a specific view (`hello`). It also implements a forbidden view to handle scenarios where a user lacks the necessary permissions.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/authorization.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nauthorization/tutorial/views.py\n```\n\n----------------------------------------\n\nTITLE: Resource URL Generation with Query String\nDESCRIPTION: Shows how to include a query string in a resource URL using the `query` parameter of `request.resource_url`. The query parameter accepts a dictionary representing the key-value pairs for the query string.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/resources.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nurl = request.resource_url(resource, query={'a':'1'})\n```\n\n----------------------------------------\n\nTITLE: Install Project in Editable Mode\nDESCRIPTION: Installs the project in editable mode along with its testing dependencies. The '-e' flag allows changes to the source code to be reflected immediately without re-installation.  '[testing]' installs the dependencies listed under the 'testing' extra in the pyproject.toml file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/installation/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Implement CSRF Security in security.py (Python)\nDESCRIPTION: This snippet defines functions related to CSRF (Cross-Site Request Forgery) protection. It includes a function to generate a CSRF token using secrets, and another function to check the validity of a CSRF token submitted with a request. The token is stored in a cookie for later verification.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/definingviews.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport secrets\nfrom pyramid.view import view_config\nfrom pyramid.security import remember, forget\n\n\ndef includeme(config):\n    settings = config.get_settings()\n    config.add_view(add_csrf_token_view, route_name='add_page', renderer='templates/add_page.jinja2')\n\ndef add_csrf_token_view(request):\n    \"\"\"Return a view with a CSRF token.\n\n    This view is called when the user attempts to add a page.\n    \"\"\"\n    csrf_token = request.session.get_csrf_token()\n    return {'csrf_token': csrf_token}\n```\n\n----------------------------------------\n\nTITLE: Building a distribution on Unix\nDESCRIPTION: This bash script demonstrates how to build a distributable package (sdist and wheel) for a Python application using the `build` tool. It first installs the `build` package using `pip` and then executes the `build` command.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/distributing.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install build\n$VENV/bin/python -m build\n```\n\n----------------------------------------\n\nTITLE: Edit edit_page View Function Python\nDESCRIPTION: This snippet modifies the `edit_page` view function in `tutorial/views/default.py` to enforce permission checks. It raises `HTTPForbidden` if the user is not logged in, or if the user is not the creator of the page and doesn't have `editor` permissions. It retrieves the user from `request.identity`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/authentication.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n    @view_config(route_name='edit_page', renderer='templates/edit.jinja2')\n    def edit_page(self):\n        request = self.request\n        name = request.matchdict['pagename']\n        page = self.dbsession.query(Page).filter_by(name=name).first()\n        if page is None:\n            raise HTTPNotFound\n\n        if request.identity is None or \\\n           (request.identity.id != page.creator_id and \\\n           'editor' not in request.identity.roles):  # new lines\n            raise HTTPForbidden                               # new lines\n\n        form = EditForm(request.POST, page)\n        if request.method == 'POST' and form.validate():\n            form.populate_obj(page)\n            next_url = request.route_url('view_page', pagename=page.name)\n            return HTTPFound(location=next_url)\n        return {'form': form, 'page': page, 'action': request.route_url('edit_page', pagename=name)}\n```\n\n----------------------------------------\n\nTITLE: Including Packages via Configurator - Pyramid\nDESCRIPTION: Demonstrates how to include packages in a Pyramid application using the Configurator.include() method within Python code. This is equivalent to using pyramid.includes in the .ini file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/environment.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\ndef main(global_config, **settings):\n    config = Configurator(settings=settings)\n    # ...\n    config.include('pyramid_debugtoolbar')\n    config.include('pyramid_tm')\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Provide login/logout box in home.pt\nDESCRIPTION: This snippet refers to adding a login/logout box to the `home.pt` template file. This box will dynamically display either a login link or a logout link, depending on whether the user is currently authenticated.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/authentication.rst#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n.. literalinclude:: authentication/tutorial/home.pt\n    :language: html\n    :linenos:\n```\n\n----------------------------------------\n\nTITLE: Adding pytest as a Setuptools Extra\nDESCRIPTION: This configures the 'setup.py' file to include 'pytest' as a development dependency using Setuptools' 'extras'. This makes 'pytest' available when installing the project with the '[dev]' extra.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/unit_testing.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom setuptools import setup\n\nrequires = [\n    'pyramid',\n    'pyramid_jinja2',\n    'pyramid_debugtoolbar',\n    'pyramid_tm',\n    'SQLAlchemy',\n    'transaction',\n    'zope.sqlalchemy',\n    'waitress',\n]\n\ndev_requires = [\n    'pytest',\n]\n\nsetup(name='tutorial',\n      install_requires=requires,\n      extras_require={\n          'dev': dev_requires,\n      },\n      entry_points={\n          'paste.app_factory': [\n              'main = tutorial:main'\n          ],\n          'console_scripts': [\n              'initialize_tutorial_db = tutorial:initialize_sql'\n          ],\n      },\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Addon with add_route and add_view\nDESCRIPTION: This code defines a custom addon for Pyramid that adds a route and a view. The `includeme` function registers a custom directive `add_auto_route`, which then registers the route and view using `config.add_route` and `config.add_view` within a `register` function, ensuring that the actions are executed in the correct order and conflict detection is enabled. It also leverages the configurator action mechanism.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/extconfig.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import PHASE0_CONFIG\n\ndef includeme(config):\n    config.add_directive('add_auto_route', add_auto_route)\n\ndef add_auto_route(config, name, view):\n    def register():\n        config.add_view(route_name=name, view=view)\n        config.add_route(name, '/' + name)\n    config.action(('auto route', name), register, order=PHASE0_CONFIG)\n```\n\n----------------------------------------\n\nTITLE: Upgrade Database with Alembic (Bash)\nDESCRIPTION: Upgrades the database to the latest revision using Alembic. This command applies all pending database migrations, bringing the database schema up-to-date with the current application code. `-c development.ini` specifies the configuration file, and `upgrade head` applies all migrations up to the latest version.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/installation/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/alembic -c development.ini upgrade head\n```\n\n----------------------------------------\n\nTITLE: Custom Root Factory for Hybrid Application in Pyramid\nDESCRIPTION: This code defines a custom root factory for a hybrid Pyramid application. The `Resource` class represents a resource with subobjects, implementing the `__getitem__` method for traversal. The `root` instance is a hierarchical structure of `Resource` objects, serving as the starting point for traversal within the application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hybrid.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Resource(object):\n    def __init__(self, subobjects):\n       self.subobjects = subobjects\n\n    def __getitem__(self, name):\n       return self.subobjects[name]\n\nroot = Resource(\n           {'a': Resource({'b': Resource({'c': Resource({})})})}\n       )\n```\n\n----------------------------------------\n\nTITLE: Using Response Callbacks in Pyramid\nDESCRIPTION: This code demonstrates how to use response callbacks in Pyramid to modify the response object after it has been created by the view callable. The `cache_callback` function sets the `cache_control.max_age` attribute of the response to 360 if an exception occurred during the request. The callback is registered using `request.add_response_callback`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef cache_callback(request, response):\n    \"\"\"Set the cache_control max_age for the response\"\"\"\n    if request.exception is not None:\n        response.cache_control.max_age = 360\nrequest.add_response_callback(cache_callback)\n```\n\n----------------------------------------\n\nTITLE: Install Project Dependencies (Editable Mode)\nDESCRIPTION: This command installs the project in editable mode along with its testing dependencies using pip. The -e flag allows changes in the project directory to be immediately reflected without reinstalling.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/tests/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Registering a Tween Factory (Python)\nDESCRIPTION: This snippet demonstrates how to register a tween factory as an \"implicit\" tween in a Pyramid application using the `add_tween` method. It requires a dotted Python name pointing to the tween factory to be registered.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\nconfig = Configurator()\nconfig.add_tween('myapp.tweens.timing_tween_factory')\n```\n\n----------------------------------------\n\nTITLE: Setting up and Scanning the Utility\nDESCRIPTION: This code shows how to set up the Zope Component Architecture utility in the Pyramid application registry and then perform a scan to activate the custom decorator and register the decorated function.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom zope.interface import implementer\n\nfrom wsgiref.simple_server import make_server\nfrom pyramid.config import Configurator\nfrom mypackage.interfaces import IMyUtility\n\n@implementer(IMyUtility)\nclass UtilityImplementation:\n\n    def __init__(self):\n        self.registrations = {}\n\n    def register(self, path, callable_):\n        self.registrations[path] = callable_\n\nif __name__ == '__main__':\n    config = Configurator()\n    config.registry.registerUtility(UtilityImplementation())\n    config.scan()\n    app = config.make_wsgi_app()\n    server = make_server('0.0.0.0', 8080, app)\n    server.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Specifying Alternative Shells for pshell\nDESCRIPTION: Shows how to specify an alternative REPL (Read-Eval-Print Loop) such as IPython for use with the pshell command using the '-p' or '--python-shell' option. This requires the appropriate Pyramid binding package like 'pyramid_ipython' to be installed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pshell -p ipython development.ini#MyProject\n```\n\n----------------------------------------\n\nTITLE: Include SQLAlchemy Configuration in Pyramid\nDESCRIPTION: The `includeme` function is a hook used with `pyramid.config.Configurator.include` to activate database configuration in a Pyramid application. It retrieves settings, creates an engine, and defines a `request.dbsession` property, enabling database access within requests.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/basiclayout.rst#_snippet_4\n\nLANGUAGE: py\nCODE:\n```\ndef includeme(config):\n    \"\"\"\n    Initialize the model for a Pyramid app.\n\n    Activate this setup using ``config.include('tutorial.models')``.\n\n    \"\"\"\n    settings = config.get_settings()\n    settings['tm.manager_hook'] = 'pyramid_tm.explicit_tm()\n'\n\n    # use pyramid_tm to hook the transaction lifecycle to the request\n    config.include('pyramid_tm')\n\n    session_factory = get_session_factory(get_engine(settings))\n    config.registry['dbsession_factory'] = session_factory\n\n    # make request.dbsession available for use in Pyramid\n    config.add_request_method(\n        # r.tm is the transaction manager used by pyramid_tm\n        lambda r: get_tm_session(session_factory, r.tm),\n        'dbsession',\n        reify=True\n    )\n```\n\n----------------------------------------\n\nTITLE: Tween Configuration in .ini File\nDESCRIPTION: This configuration snippet shows how to define a sequence of tweens in a PasteDeploy .ini file. The `pyramid.tweens` setting is used to specify the order in which tween factories are executed. The example includes the debug toolbar tween, exception view tween, and transaction manager tween.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/environment.rst#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\npyramid.tweens = pyramid_debugtoolbar.toolbar.tween_factory\n                 pyramid.tweens.excview_tween_factory\n                 pyramid_tm.tm_tween_factory\n```\n\n----------------------------------------\n\nTITLE: Pyramid Test Setup with Dummy Request in Python\nDESCRIPTION: This snippet extends the basic setup by including a dummy request object using pyramid.testing.DummyRequest. This allows tests to simulate request-related operations and access request attributes during testing.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/testing.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\nfrom pyramid import testing\n\nclass MyTest(unittest.TestCase):\n    def setUp(self):\n        request = testing.DummyRequest()\n        self.config = testing.setUp(request=request)\n\n    def tearDown(self):\n        testing.tearDown()\n```\n\n----------------------------------------\n\nTITLE: Creating a Response Directly Using Pyramid Request\nDESCRIPTION: This snippet showcases how to use the request.response attribute to create a response directly within a view function in Pyramid, without relying on a renderer. It demonstrates setting the body and content type of the response object.  The response must be explicitly returned from the view code if a renderer is not used.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/api/request.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresponse = request.response\nresponse.body = 'Hello!'\nresponse.content_type = 'text/plain'\nreturn response\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Renderer Factory (Python)\nDESCRIPTION: This code shows how to register a custom renderer factory via `config.add_renderer`.  It associates the renderer name 'amf' with a dotted Python name referring to the renderer factory implementation.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_renderer(name='amf', factory='my.package.MyAMFRenderer')\n```\n\n----------------------------------------\n\nTITLE: Generate Alembic Revision (Bash)\nDESCRIPTION: Generates an Alembic migration revision file. Alembic is a database migration tool. This command automatically detects changes to the database schema and generates a new migration file to apply those changes. `-c development.ini` specifies the configuration file, `--autogenerate` automatically detects schema changes, and `-m \"init\"` adds a message to the revision.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/installation/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/alembic -c development.ini revision --autogenerate -m \"init\"\n```\n\n----------------------------------------\n\nTITLE: Denying Permission with ACL Order in Pyramid\nDESCRIPTION: This snippet shows how to deny a permission. Because the 'Deny' ACE comes before the 'Allow' ACE, everyone is denied the 'view' permission, even though a later ACE would allow it. This highlights the importance of ACL order.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.authorization import Everyone\nfrom pyramid.authorization import Allow\nfrom pyramid.authorization import Deny\n\n__acl__ = [\n    (Deny, Everyone, 'view'),\n    (Allow, Everyone, 'view'),\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Views for SQLAlchemy (Python)\nDESCRIPTION: This Python code updates the views to use SQLAlchemy for data access. It replaces the dummy dictionary-of-dictionaries data with proper database support, including listing, adding, viewing, editing, and deleting rows from the database.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/databases.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyramid.view import view_config\n\nfrom pyramid.httpexceptions import ( \n    HTTPFound,\n    HTTPNotFound,\n    )\n\nfrom pyramid.security import ( \n    remember,\n    forget,\n    authenticated_userid,\n    )\n\nfrom sqlalchemy.exc import DBAPIError\n\nfrom .forms import WikiPageForm, WikiPageEditForm, LoginForm\nfrom .models import (\n    DBSession,\n    Page,\n    )\n\n\n@view_config(route_name='home', renderer='templates/wiki.jinja2')\ndef home(request):\n    #import pdb; pdb.set_trace()\n    username = authenticated_userid(request)\n    pages = DBSession.query(Page).order_by(Page.title)\n    return dict(username=username, pages=pages)\n\n\n@view_config(route_name='add', renderer='templates/add.jinja2')\ndef add_page(request):\n    form = WikiPageForm(request.POST)\n    if request.method == 'POST' and form.validate():\n        new_page = Page(title=form.data['title'], body=form.data['body'])\n        DBSession.add(new_page)\n        return HTTPFound(location=request.route_url('home'))\n    return dict(form=form)\n\n\n@view_config(route_name='view', renderer='templates/view.jinja2')\ndef view_page(request):\n    title = request.matchdict['title']\n    page = DBSession.query(Page).filter_by(title=title).first()\n    if page is None:\n        return HTTPNotFound('No such page')\n    return dict(page=page)\n\n\n@view_config(route_name='edit', renderer='templates/edit.jinja2')\ndef edit_page(request):\n    title = request.matchdict['title']\n    page = DBSession.query(Page).filter_by(title=title).first()\n    if page is None:\n        return HTTPNotFound('No such page')\n    form = WikiPageEditForm(request.POST, page)\n    if request.method == 'POST' and form.validate():\n        form.populate_obj(page)\n        return HTTPFound(location=request.route_url('view', title=title))\n    return dict(page=page, form=form)\n\n@view_config(route_name='delete')\ndef delete_page(request):\n    title = request.matchdict['title']\n    page = DBSession.query(Page).filter_by(title=title).first()\n    if page is None:\n        return HTTPNotFound('No such page')\n    DBSession.delete(page)\n    return HTTPFound(location=request.route_url('home'))\n\n```\n\n----------------------------------------\n\nTITLE: Creating virtual environment on Windows\nDESCRIPTION: Command to create a virtual environment using venv on Windows.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/requirements.rst#_snippet_6\n\nLANGUAGE: doscon\nCODE:\n```\n# Windows\npython -m venv %VENV%\n```\n\n----------------------------------------\n\nTITLE: Returning a Python Dictionary from a Pyramid View (Python)\nDESCRIPTION: This snippet shows how to return a simple Python dictionary from a Pyramid view function when a renderer is configured. Instead of returning a `Response` object directly, the view returns data in a dictionary format. Pyramid automatically renders this dictionary using the specified template.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/introduction.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\n\n@view_config(renderer='myapp:templates/mytemplate.pt')\ndef myview(request):\n    return {'a':1}\n```\n\n----------------------------------------\n\nTITLE: Generating URL with route_kw in Pyramid\nDESCRIPTION: This code snippet demonstrates how to generate a URL using `request.resource_url` with both `route_name` and `route_kw` parameters. It fills in the dynamic part `{id}` of the 'mysection' route with the value '1'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hybrid.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nrequest.resource_url(a, route_name='mysection', route_kw={'id':'1'})\n```\n\n----------------------------------------\n\nTITLE: Installing Project in Editable Mode with Testing Dependencies (Bash)\nDESCRIPTION: This command installs the project in editable mode, along with its testing dependencies, using pip. The '-e' flag allows changes to the project's source code to be immediately reflected without requiring reinstallation. The '[testing]' extra installs dependencies required for running tests.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/basiclayout/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Arbitrary View Callable with __call__ Method in Pyramid (Python)\nDESCRIPTION: Defines a view callable as an instance of a class that has a __call__ method accepting context and request. It imports Response from pyramid.response and instantiates the class to be used as the view.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/views.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\n\nclass View(object):\n    def __call__(self, context, request):\n        return Response('OK')\nview = View() # this is the view callable\n```\n\n----------------------------------------\n\nTITLE: Adding a Default Renderer in Pyramid\nDESCRIPTION: This code snippet demonstrates how to register a default renderer using `config.add_renderer` with `None` as the name. This ensures that all view configurations, even those without an explicit `renderer` attribute, will use the specified renderer factory. This approach is useful for applying consistent rendering across the application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_renderer(None, 'mypackage.json_renderer_factory')\n```\n\n----------------------------------------\n\nTITLE: Defining a View Class in Pyramid\nDESCRIPTION: This code defines a view class in Pyramid with multiple methods as views. The `@view_defaults` decorator sets common configurations for all views in the class, like the route name. Individual views are then defined with `@view_config`, which can override or extend the defaults with predicates like `request_param`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@view_defaults(route_name='hello')\nclass MyView:\n    def __init__(self, request):\n        self.request = request\n        self.name = 'Amy'\n\n    @view_config(renderer='form.pt')\n    def hello(self):\n        return {'name': self.name}\n\n    @view_config(request_param='form.edit', renderer='form.pt')\n    def edit(self):\n        return {'name': self.name}\n\n    @view_config(request_param='form.delete', renderer='form.pt')\n    def delete(self):\n        return {'name': self.name}\n```\n\n----------------------------------------\n\nTITLE: Run Pyramid Tests\nDESCRIPTION: Runs the Pyramid tests using pytest. This ensures that the changes made to incorporate sessions do not break existing functionality.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/sessions.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest tutorial/tests.py -q\n....\n4 passed in 0.42 seconds\n```\n\n----------------------------------------\n\nTITLE: Upgrade Packaging Tools\nDESCRIPTION: Upgrades the pip and setuptools packages within the virtual environment. This ensures that the latest versions of these tools are used for dependency management.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/sessions/README.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pip install --upgrade pip setuptools\n```\n\n----------------------------------------\n\nTITLE: Rendering Template to Response (Asset Specification)\nDESCRIPTION: This snippet demonstrates using an asset specification to point to a template file within a Python package. The `render_to_response` function is used to render the template located at `mypackage:templates/foo.pt`. Using asset specifications is recommended for better code maintainability.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/templates.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.renderers import render_to_response\n\ndef sample_view(request):\n    return render_to_response('mypackage:templates/foo.pt',\n                              {'foo':1, 'bar':2},\n                              request=request)\n```\n\n----------------------------------------\n\nTITLE: Using ManifestCacheBuster (Python)\nDESCRIPTION: This code demonstrates how to use ManifestCacheBuster with pyramid's configuration.  It adds a static view and then adds a cache buster that uses a manifest file. It requires pyramid's config object.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.static import ManifestCacheBuster\n\nconfig.add_static_view(\n    name='http://mycdn.example.com/',\n    path='mypackage:static')\n\nconfig.add_cache_buster(\n    'mypackage:static/',\n    ManifestCacheBuster('myapp:static/manifest.json'))\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Caching for a Pyramid View (Python)\nDESCRIPTION: This snippet illustrates how to configure HTTP caching for a Pyramid view using the `@view_config` decorator. It sets the `http_cache` parameter to 3600 seconds (1 hour), which instructs Pyramid to add appropriate Cache-Control and Expires headers to the response.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/introduction.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@view_config(http_cache=3600) # 60 minutes\ndef myview(request):\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Resource URL Adapter Class\nDESCRIPTION: This code defines the API required for a custom resource URL adapter class.  The adapter must implement `__init__`, accepting the resource and request, and set the `virtual_path`, `virtual_path_tuple`, `physical_path`, and `physical_path_tuple` attributes based on the resource and request.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass MyResourceURL(object):\n    \"\"\" An adapter which provides the virtual and physical paths of a\n        resource\n    \"\"\"\n    def __init__(self, resource, request):\n        \"\"\" Accept the resource and request and set self.physical_path and\n        self.virtual_path \"\"\"\n        self.virtual_path =  some_function_of(resource, request)\n        self.virtual_path_tuple =  some_function_of(resource, request)\n        self.physical_path =  some_other_function_of(resource, request)\n        self.physical_path_tuple =  some_function_of(resource, request)\n```\n\n----------------------------------------\n\nTITLE: Equivalent Imperative Configuration for add_view in Python\nDESCRIPTION: This snippet shows the equivalent imperative configuration call that would be made by the scanner when it finds the @view_config decorator. It demonstrates how the arguments passed to @view_config are translated into a call to config.add_view. It relies on a 'hello_world' function being defined elsewhere in the application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/configuration.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_view(hello_world, route_name='hello',\n                    request_method='GET')\n```\n\n----------------------------------------\n\nTITLE: Including Route Configuration in Python\nDESCRIPTION: This Python snippet shows how to include a route configuration function using `config.include`. This enables automatic conflict resolution during Pyramid application setup.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advconfig.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nconfig.include(add_routes)\n```\n\n----------------------------------------\n\nTITLE: Defining a Setuptools Entry Point (Python)\nDESCRIPTION: This snippet shows how to define a Setuptools entry point in the setup() function within setup.py. This entry point tells Pyramid where to find the WSGI application. The 'paste.app_factory' entry point is used to define the main application factory.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/ini.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsetup(\n    # ... other setup parameters ...\n    entry_points={\n        'paste.app_factory': [\n            'main = tutorial:main',\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: view_wiki view function (Python)\nDESCRIPTION: This snippet showcases the 'view_wiki' view function, which is the default view called when a request is made to the root URL. It redirects the user to the 'FrontPage' of the wiki. This function utilizes the 'HTTPFound' exception to perform the redirection.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/definingviews.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@view_config(route_name='view_wiki')\ndef view_wiki(request):\n    return HTTPFound(location = request.route_url('view_page', pagename='FrontPage'))\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Decorators in Pyramid\nDESCRIPTION: This example illustrates how to apply multiple decorators to a view in Pyramid using the `decorator` argument in `view_config`. The decorators are applied in reverse order, similar to decorating the view callable directly using the `@` syntax.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@view_config(..., decorator=(decorator2, decorator1))\ndef myview(request):\n  ...\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Bash\nDESCRIPTION: This command changes the current directory to the 'tutorial' project directory. This is necessary to execute subsequent commands within the context of the project.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/basiclayout/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd tutorial\n```\n\n----------------------------------------\n\nTITLE: Defining a Location-Aware Root Resource in Pyramid\nDESCRIPTION: This code shows how to create a location-aware root resource by defining the `__name__` and `__parent__` attributes. The `__name__` attribute is set to an empty string for the root, and `__parent__` is set to `None`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/resources.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nclass MyRootResource(object):\n    __name__ = ''\n    __parent__ = None\n```\n\n----------------------------------------\n\nTITLE: Exception View with Route Predicate (Python)\nDESCRIPTION: Registers an exception view that is only invoked when the matched route has a `route_name` of 'home'. It uses the `exception_view_config` decorator with an additional `route_name` argument. This allows for more specific exception handling based on the current route.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/views.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\nfrom helloworld.exceptions import ValidationFailure\n\n@exception_view_config(ValidationFailure, route_name='home')\ndef failed_validation(exc, request):\n    response =  Response('Failed validation: %s' % exc.msg)\n    response.status_int = 500\n    return response\n```\n\n----------------------------------------\n\nTITLE: Installing Project with pytest Dependency\nDESCRIPTION: This bash command installs the project in editable mode ('-e') along with the 'dev' extra, which includes 'pytest' as specified in 'setup.py'. The quotes are used to handle the square brackets in the extra specifier.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/unit_testing.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Application Configuration with __init__.py (Python)\nDESCRIPTION: This code snippet represents the application configuration found within the __init__.py file. It configures routes, includes support for Chameleon templates, pyramid_tm, pyramid_retry, pyramid_zodbconn, sets a root factory, and performs a scan for configuration decorations.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/basiclayout.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef main(global_config, **settings):\n    \"\"\" This function returns a Pyramid WSGI application. \n    \"\"\"\n    with Configurator(settings=settings) as config:\n        config.include('pyramid_chameleon')\n        config.include('pyramid_tm')\n        config.include('pyramid_retry')\n        config.include('pyramid_zodbconn')\n        config.include('.routes')\n        config.set_root_factory(root_factory)\n        config.scan()\n        return config.make_wsgi_app()\n```\n\n----------------------------------------\n\nTITLE: Defining the view_wiki function\nDESCRIPTION: This code defines the `view_wiki` view function, which is the default view for the root URL of the wiki. It redirects to the `FrontPage` using an HTTPSeeOther response. It's decorated with `@view_config` to associate it with the `Wiki` resource as its context. The view does not require a renderer, as it returns a response object directly.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/definingviews.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@view_config(context=\".models.Wiki\")\ndef view_wiki(context, request):\n    return HTTPSeeOther(request.route_url('view_page', pagename='FrontPage'))\n```\n\n----------------------------------------\n\nTITLE: Configure routes in routes.py (Python)\nDESCRIPTION: This snippet shows how to define routes in the 'tutorial/routes.py' file using the 'add_route' method. It defines routes for viewing the wiki, viewing a specific page, adding a new page, and editing an existing page. The order of the routes is crucial for correct URL matching. It configures routes for the wiki application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/definingviews.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\n\ndef main(global_config, **settings):\n    \"\"\" This function returns a Pyramid WSGI application. \"\"\"\n    with Configurator(settings=settings) as config:\n        config.include('pyramid_jinja2')\n        config.include('.models')\n        config.include('.routes')\n        config.scan()\n    return config.make_wsgi_app()\n\n\ndef includeme(config):\n    config.add_route('view_wiki', '/')\n    config.add_route('view_page', '/{pagename}')\n    config.add_route('add_page', '/add_page/{pagename}')\n    config.add_route('edit_page', '/{pagename}/edit_page')\n    config.add_static_view(name='static', path='tutorial:static')\n\n```\n\n----------------------------------------\n\nTITLE: Configurator: Adding Static View with Cache Busting - Python\nDESCRIPTION: Demonstrates how to add a static view with cache busting enabled using the `pyramid.config.Configurator.add_static_view` method. The `cachebust` argument is used to enable cache busting via query strings or path segments. This feature allows for better management of static resources by ensuring that clients always fetch the latest version when updates are deployed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Installs the project in editable mode along with testing dependencies. The '-e' flag allows for live updates during development, and '[testing]' installs testing-related packages.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/views/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Install Project in Editable Mode with Testing\nDESCRIPTION: Installs the project and its testing dependencies in editable mode. The `-e` flag allows changes to the project source to be immediately reflected without reinstallation. The `[testing]` extra installs dependencies needed for running tests.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/authorization/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Using an Add-on Package with a Custom Directive in Pyramid\nDESCRIPTION: This example demonstrates how to use an add-on package that provides a custom directive in a Pyramid application. The application includes the `pyramid_subscriberhelpers` package using `config.include()`, which makes the `add_newrequest_subscriber` directive available. The application then uses the directive to add a subscriber function.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/extconfig.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef mysubscriber(event):\n    print(event.request)\n\nfrom pyramid.config import Configurator\nconfig = Configurator()\nconfig.include('pyramid_subscriberhelpers')\nconfig.add_newrequest_subscriber(mysubscriber)\n```\n\n----------------------------------------\n\nTITLE: Add auth.secret setting to ini files (INI)\nDESCRIPTION: This snippet shows how to add the auth.secret setting to the development.ini, production.ini and testing.ini files. This secret is used by the authentication policy.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/authorization.rst#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\n...\nsession.secret = secretkey\nauth.secret = verysecret\n```\n\n----------------------------------------\n\nTITLE: Extend Configurator with Custom Directive\nDESCRIPTION: This snippet extends the Pyramid configurator with a custom directive to simplify adding multiple views with common parameters (xhr, permission, route_name).  It iterates through HTTP methods and adds views if a corresponding function exists.  Requires `pyramid.config`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advanced-features.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\ndef add_protected_xhr_views(config, module):\n    module = config.maybe_dotted(module)\n    for method in ('GET', 'POST', 'HEAD'):\n        view = getattr(module, 'xhr_%s_view' % method, None)\n        if view is not None:\n            config.add_view(view, route_name='xhr_route', xhr=True,\n                            permission='view', request_method=method)\n\nconfig = Configurator()\nconfig.add_directive('add_protected_xhr_views', add_protected_xhr_views)\n```\n\n----------------------------------------\n\nTITLE: Pyramid Route with Factory Configuration\nDESCRIPTION: This code snippet shows how to configure a route with a factory in Pyramid. The `factory` argument to `add_route` specifies a callable that will be used to generate the context resource for the view. This allows you to customize the resource object available via `request.context`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nconfig.add_route('idea', 'ideas/{idea}', factory='myproject.resources.Idea')\nconfig.scan()\n```\n\n----------------------------------------\n\nTITLE: Copying the package directory (Bash)\nDESCRIPTION: This command copies the previous step's package directory to a new directory named 'ini' and navigates into the newly created directory. It prepares the environment for subsequent configuration steps.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/ini.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ..; cp -r package ini; cd ini\n```\n\n----------------------------------------\n\nTITLE: Custom __json__ method for JSON serialization in Pyramid\nDESCRIPTION: This code snippet demonstrates how to define a ``__json__`` method on a custom object to control how it is serialized to JSON when used with the JSON renderer. The method accepts the request object as an argument.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\n\nclass MyObject(object):\n    def __init__(self, x):\n        self.x = x\n\n    def __json__(self, request):\n        return {'x':self.x}\n\n@view_config(renderer='json')\ndef objects(request):\n    return [MyObject(1), MyObject(2)]\n\n# the JSON value returned by ``objects`` will be:\n#    [{\"x\": 1}, {\"x\": 2}]\n```\n\n----------------------------------------\n\nTITLE: Configuring an Event Listener Using a Decorator in Python\nDESCRIPTION: This snippet demonstrates how to configure a subscriber function to be called when a specific event occurs using the `@subscriber` decorator. It imports `NewRequest` and `subscriber` from `pyramid.events` and decorates the `mysubscriber` function.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/events.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.events import NewRequest\nfrom pyramid.events import subscriber\n\n@subscriber(NewRequest)\ndef mysubscriber(event):\n    event.request.foo = 1\n```\n\n----------------------------------------\n\nTITLE: Serving Static Assets with add_static_view (Python)\nDESCRIPTION: This snippet showcases how to use the add_static_view method in Pyramid to serve static files from a specified directory. It maps a URL prefix ('static') to a directory path ('/var/www/static'), allowing access to files within that directory via the prefix.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# config is an instance of pyramid.config.Configurator\nconfig.add_static_view(name='static', path='/var/www/static')\n```\n\n----------------------------------------\n\nTITLE: Setup Chameleon Dependency in setup.py\nDESCRIPTION: This snippet shows how to add `pyramid_chameleon` as a dependency in the `install_requires` section of your package's `setup.py` file. This ensures that the Chameleon templating engine is installed when your project is set up.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.5.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsetup(\n    #...\n    install_requires=[\n        'pyramid_chameleon',         # new dependency\n        'pyramid',\n        #...\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Run Pyramid Application\nDESCRIPTION: Runs the Pyramid application with the development configuration file and enables the reload option for automatic updates.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/authorization.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Custom Route Predicate: AnyOfPredicate (Python)\nDESCRIPTION: This code snippet defines a custom route predicate named `AnyOfPredicate`. It checks if the value associated with a specified segment name in the route's match dictionary is present in a list of allowed values. The `__call__` method performs this check, returning `True` if the value is allowed, and `False` otherwise. The `add_route` example registers and uses this predicate to match routes based on segment values.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nclass AnyOfPredicate:\n    def __init__(self, val, info):\n        self.segment_name = val[0]\n        self.allowed = val[1:]\n\n    def text(self):\n        args = (self.segment_name,) + self.allowed\n        return 'any_of = %s' % (args,)\n\n    phash = text\n\n    def __call__(self, info, request):\n        return info['match'][self.segment_name] in self.allowed\n\n\nconfig.add_route_predicate('any_of', AnyOfPredicate)\nconfig.add_route('route_to_num', '/{num}', any_of=('num', 'one', 'two', 'three'))\n```\n\n----------------------------------------\n\nTITLE: Shim Security Policy for Legacy Policies (Pyramid, Python)\nDESCRIPTION: This code shows how to create a 'shim' security policy that works with existing authentication and authorization policies. This enables a smoother transition to the new security policy model. This class implements methods to retrieve the authenticated userid, permits, remember, and forget using authn_policy and authz_policy.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-2.0.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass ShimSecurityPolicy:\n    def __init__(self, authn_policy, authz_policy):\n        self.authn_policy = authn_policy\n        self.authz_policy = authz_policy\n\n    def authenticated_userid(self, request):\n        return self.authn_policy.authenticated_userid(request)\n\n    def permits(self, request, context, permission):\n        principals = self.authn_policy.effective_principals(request)\n        return self.authz_policy.permits(context, principals, permission)\n\n    def remember(self, request, userid, **kw):\n        return self.authn_policy.remember(request, userid, **kw)\n\n    def forget(self, request, **kw):\n        return self.authz_policy.forget(request, **kw)\n```\n\n----------------------------------------\n\nTITLE: Defining View Callables as Class Methods in Pyramid (Python)\nDESCRIPTION: This snippet illustrates how to define view callables as methods within a class in Pyramid. It defines a class `AView` with an `__init__` method and two view methods (`view_one`, `view_two`), each decorated with `@view_config` to associate them with specific routes.  Each method returns a Response object.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/introduction.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\nfrom pyramid.view import view_config\n\nclass AView(object):\n    def __init__(self, request):\n        self.request = request\n\n    @view_config(route_name='view_one')\n    def view_one(self):\n        return Response('one')\n\n    @view_config(route_name='view_two')\n    def view_two(self):\n        return Response('two')\n```\n\n----------------------------------------\n\nTITLE: Mod_wsgi Configuration for URL Prefix\nDESCRIPTION: This Apache configuration snippet shows how to use `WSGIScriptAlias` in `mod_wsgi` to root a Pyramid application at a specific URL prefix. It maps the `/pyramidapp` prefix to the WSGI file of the Pyramid application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/vhosting.rst#_snippet_1\n\nLANGUAGE: apache\nCODE:\n```\nWSGIScriptAlias /pyramidapp /Users/chrism/projects/modwsgi/env/pyramid.wsgi\n```\n\n----------------------------------------\n\nTITLE: Defining an includeme Function for a Pyramid Add-on\nDESCRIPTION: This code snippet illustrates how to define an `includeme` function within a Pyramid add-on package. The `includeme` function is automatically called when the add-on is included in a Pyramid application using `config.include()`.  It adds the custom directive `add_newrequest_subscriber` to the Configurator.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/extconfig.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef includeme(config):\n    config.add_directive('add_newrequest_subscriber',\n                         add_newrequest_subscriber)\n```\n\n----------------------------------------\n\nTITLE: Generating Static Asset URLs with request.static_url\nDESCRIPTION: This snippet demonstrates the use of `request.static_url` in a Jinja2 template to generate the full URL to a static asset. Using `request.static_url` ensures that the link remains in sync with the application's configuration and provides refactoring flexibility.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_12\n\nLANGUAGE: jinja\nCODE:\n```\n<link rel=\"stylesheet\" href=\"${request.static_url('static:app.css')}\" />\n```\n\n----------------------------------------\n\nTITLE: Upgrade Packaging Tools (Bash)\nDESCRIPTION: Upgrades pip, the Python package installer, within the virtual environment. Keeping pip up-to-date ensures access to the latest package versions and features, mitigating potential installation issues.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/installation/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: development.ini Includes Configuration\nDESCRIPTION: This ini snippet shows how to include pyramid_debugtoolbar in development.ini, allowing it to be used in the Pyramid application.  This enables the debugging toolbar when the application is run with this configuration file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:hello_world\npyramid.includes = pyramid_debugtoolbar\n```\n\n----------------------------------------\n\nTITLE: Installing Pyramid Jinja2\nDESCRIPTION: This command installs the `pyramid_jinja2` add-on, which enables Jinja2 as a renderer in Pyramid applications. It utilizes `pip`, the Python package installer, within the virtual environment to install the package.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install pyramid_jinja2\n```\n\n----------------------------------------\n\nTITLE: Install and Build Package - Unix\nDESCRIPTION: These commands install the `build` package using pip and then use it to build the source and binary distributions of the Pyramid application. The application's `pyproject.toml` file must be in the current working directory. `$VENV/bin/` refers to the virtual environment's executable path.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/distributing.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install build\n$VENV/bin/python -m build\n```\n\n----------------------------------------\n\nTITLE: Run Pyramid Application\nDESCRIPTION: This bash command starts the Pyramid application using `pserve`.  `development.ini` is the configuration file used, and `--reload` enables automatic reloading of the server when code changes are detected, which is helpful during development.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/authentication.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Installing Project with Testing Requirements\nDESCRIPTION: Installs the project in editable mode using pip, along with its testing dependencies. The '-e' flag allows changes to the project source code to be immediately reflected without re-installation. The '[testing]' extra installs dependencies required for running tests.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/logging/README.txt#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Registering a Renderer Factory with a Filename Extension in Pyramid\nDESCRIPTION: This code snippet demonstrates how to register a renderer factory using `config.add_renderer`. The `name` parameter specifies the file extension that triggers the use of the factory. This setup allows view configurations to use the registered renderer by specifying a renderer name that ends with the given file extension.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_renderer(name='.jinja2', factory='my.package.MyJinja2Renderer')\n```\n\n----------------------------------------\n\nTITLE: Add permission to view_wiki and view_page views (Python)\nDESCRIPTION: This snippet shows how to add the 'view' permission to the @view_config decorators for the view_wiki() and view_page() functions in tutorial/views/default.py.  This allows anyone to view the wiki and individual pages.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/authorization.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@view_config(route_name='wiki', renderer='templates/view.pt', permission='view')\ndef view_wiki(request):\n    return dict(logged_in=request.authenticated_userid())\n\n```\n\nLANGUAGE: python\nCODE:\n```\n@view_config(route_name='view_page', renderer='templates/view.pt', permission='view')\ndef view_page(request):\n    pagename = request.matchdict['pagename']\n    return dict(pagename=pagename, logged_in=request.authenticated_userid())\n\n```\n\n----------------------------------------\n\nTITLE: Pyramid Route Prefix with inherit_slash\nDESCRIPTION: This example demonstrates how to configure a route prefix that matches requests to the prefix itself, without a trailing slash, using `inherit_slash=True` in the `add_route` call.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\ndef users_include(config):\n    config.add_route('show_users', '', inherit_slash=True)\n\ndef main(global_config, **settings):\n    config = Configurator()\n    config.include(users_include, route_prefix='/users')\n```\n\n----------------------------------------\n\nTITLE: Project Setup via pip\nDESCRIPTION: This command installs the current project (represented by '.') in editable or development mode using pip. It enables changes in the source code to be immediately reflected without needing to reinstall the package.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/package.rst#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$VENV/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Configuring debugtoolbar.hosts in development.ini\nDESCRIPTION: This configuration snippet shows how to enable the Pyramid debug toolbar for a specific remote host by adding the `debugtoolbar.hosts` setting to the `[app:main]` section of the `development.ini` file.  Replace `192.168.1.1` with the IP address of the client machine.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\n# ... other settings ...\ndebugtoolbar.hosts = 192.168.1.1\n```\n\n----------------------------------------\n\nTITLE: Run Pyramid Application (Shell)\nDESCRIPTION: This command starts the Pyramid application using `pserve` and the 'development.ini' configuration file. Requires `pserve` to be installed, typically as part of the Pyramid framework installation.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/authentication/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nenv/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests (Shell)\nDESCRIPTION: This command executes the project's tests using the pytest testing framework. Requires pytest to be installed as a project dependency.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/authorization/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pytest\n```\n\n----------------------------------------\n\nTITLE: Implicit Tween Chaining (Python)\nDESCRIPTION: This example shows how multiple calls to `add_tween` create a tween chain.  The first added tween factory receives the exception view tween factory as its handler. Subsequent tween factories receive the result of the previous factory as their handler, forming a chain.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\nconfig = Configurator()\nconfig.add_tween('myapp.tween_factory1')\nconfig.add_tween('myapp.tween_factory2')\n```\n\n----------------------------------------\n\nTITLE: Adding a Traverser for a Specific Root Type\nDESCRIPTION: This code snippet demonstrates how to add a custom traverser that is only used when the root factory returns a specific type of object (`MyRoot`). This allows for different traversal algorithms based on the root object type.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom myapp.traversal import Traverser\nfrom myapp.resources import MyRoot\nfrom pyramid.config import Configurator\nconfig = Configurator()\nconfig.add_traverser(Traverser, MyRoot)\n```\n\n----------------------------------------\n\nTITLE: Response Adapter Decorator in Pyramid\nDESCRIPTION: This code snippet demonstrates how to use the `response_adapter` decorator in Pyramid to adapt a string to a Response object. The decorator registers a function that takes a string and returns a `pyramid.response.Response` object.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\nfrom pyramid.response import response_adapter\n\n@response_adapter(str)\ndef string_response_adapter(s):\n    response = Response(s)\n    return response\n```\n\n----------------------------------------\n\nTITLE: Adding a Static Route in Pyramid\nDESCRIPTION: This code snippet demonstrates how to add a static route in Pyramid using the `static=True` argument to `config.add_route`. Static routes are used for URL generation only and are not considered for matching at request time. They are primarily useful when you need to generate URLs based on a pattern but don't need to handle incoming requests that match the pattern.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nconfig = Configurator()\nconfig.add_route('page', '/page/{action}', static=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment (Shell)\nDESCRIPTION: This command creates a new Python virtual environment named 'env'. A virtual environment isolates project dependencies, preventing conflicts with other Python projects. It uses the `venv` module, which is part of the Python standard library.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/authorization/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: Register SecurityPolicy with configurator\nDESCRIPTION: This snippet refers to registering the previously created `SecurityPolicy` with the Pyramid configurator in the `__init__.py` file. This makes the security policy available to the application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/authentication.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: authentication/tutorial/__init__.py\n    :linenos:\n```\n\n----------------------------------------\n\nTITLE: Update Security Policy for Principals\nDESCRIPTION: This code snippet updates the security policy in `security.py` to break down the identity into a list of principals. It includes adding the role and user ID as principals for authorization checks.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/authorization.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.authentication import CallbackAuthenticationPolicy\nfrom pyramid.authorization import ACLHelper\nfrom pyramid.security import Everyone\nfrom pyramid.security import Authenticated\nfrom pyramid.security import Allow\n\nclass RootACLHelper(ACLHelper):\n    def __init__(self, request):\n        self.request = request\n\n    def get_principals(self):\n        principals = [Everyone]\n        user = self.request.user\n        if user:\n            principals += [Authenticated, 'role:%s' % user.role, 'user:%s' % user.id]\n        return principals\n\ndef groupfinder(userid, request):\n    user = request.dbsession.query(User).filter_by(id=userid).first()\n    if user:\n        return ['role:%s' % user.role]\n\nclass SecurityPolicy:\n    def __init__(self, callback=groupfinder):\n        self.callback = callback\n\n    def identity(self, request):\n        user = request.dbsession.query(User).filter_by(email=request.authenticated_userid).first()\n        return user\n\n    def authenticated_userid(self, request):\n        user = self.identity(request)\n        if user:\n            return user.email\n\n    def permits(self, request, context, permission):\n        principals = context.get_principals()\n        acl = getattr(context, '__acl__', None)\n        if acl is None:\n            return False\n        return request.has_permission(permission, context, acl)\n```\n\n----------------------------------------\n\nTITLE: Configuring append_slash in Pyramid\nDESCRIPTION: This code snippet demonstrates using `append_slash=True` with `add_notfound_view` to automatically redirect requests that are missing a trailing slash but require one to match a route. This provides behavior similar to Django's `APPEND_SLASH=True`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyramid.httpexceptions import HTTPNotFound\n\ndef notfound(request):\n    return HTTPNotFound()\n\ndef no_slash(request):\n    return Response('No slash')\n```\n\n----------------------------------------\n\nTITLE: Creating the Pyramid WSGI Script\nDESCRIPTION: This Python script configures the Pyramid application for deployment with mod_wsgi. It imports necessary modules, sets up logging, and retrieves the application instance using pyramid.paster.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/modwsgi/index.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.paster import get_app, setup_logging\nini_path = '/Users/chrism/myproject/production.ini'\nsetup_logging(ini_path)\napplication = get_app(ini_path, 'main')\n```\n\n----------------------------------------\n\nTITLE: Include pyramid_jinja2 in __init__.py (Python)\nDESCRIPTION: Includes the pyramid_jinja2 add-on in the application's __init__.py file. This step registers pyramid_jinja2 as a renderer within the Pyramid application. Requires the Pyramid framework to be installed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/jinja2.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Omitted for brevity, see tutorial/__init__.py file\n# The important part is config.include('pyramid_jinja2')\n```\n\n----------------------------------------\n\nTITLE: Autocommitting Configurator (Python)\nDESCRIPTION: This code shows how to use an autocommitting Configurator by setting autocommit=True. With autocommit enabled, configuration statements are executed immediately, and conflicts are resolved by overriding previous statements.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advconfig.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyramid.config import Configurator\n\nif __name__ == '__main__':\n    config = Configurator(autocommit=True)\n```\n\n----------------------------------------\n\nTITLE: Defining a View with Jinja2 Renderer\nDESCRIPTION: This code snippet shows how to define a view that uses a Jinja2 template for rendering.  The `renderer` parameter in `@view_config` specifies the `.jinja2` file to be used for rendering the view's response. The function returns a dictionary containing data that will be passed to the Jinja2 template.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@view_config(route_name='home', renderer='hello_world.jinja2')\ndef my_view(request):\n    return {'name': request.matchdict['name']}\n```\n\n----------------------------------------\n\nTITLE: Traversal-Only View Configuration in Pyramid\nDESCRIPTION: This snippet shows how to configure views in a Pyramid application using traversal only. `config.add_view` is used to associate view callables directly with names, without defining explicit routes. This means that accessing `/foobar` will invoke `mypackage.views.foobar` and accessing `/bazbuz` will invoke `mypackage.views.bazbuz`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hybrid.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# config is an instance of pyramid.config.Configurator\n\nconfig.add_view('mypackage.views.foobar', name='foobar')\nconfig.add_view('mypackage.views.bazbuz', name='bazbuz')\n```\n\n----------------------------------------\n\nTITLE: Initialize Database with Default Data (Shell)\nDESCRIPTION: This command runs a script to load default data into the database, using the 'development.ini' configuration. Requires the `initialize_tutorial_db` script to exist and be executable.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/authentication/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nenv/bin/initialize_tutorial_db development.ini\n```\n\n----------------------------------------\n\nTITLE: Restarting Apache\nDESCRIPTION: This command restarts the Apache web server, applying any configuration changes. It typically requires sudo privileges.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/modwsgi/index.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo /usr/sbin/apachectl restart\n```\n\n----------------------------------------\n\nTITLE: Run Pyramid App with pserve and Reload (Bash)\nDESCRIPTION: This bash snippet executes the Pyramid WSGI application using pserve with the specified development.ini configuration file. The --reload option enables automatic reloading of the application whenever code changes are detected, facilitating rapid development and testing.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/debugtoolbar.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Overriding Resource URL Generation\nDESCRIPTION: Example implementation of the `__resource_url__` method in a resource class. This method allows overriding the default URL generation logic for a resource. The method receives the request and an info dictionary as arguments and returns a URL string.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/resources.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Resource(object):\n    def __resource_url__(self, request, info):\n        return info['app_url'] + info['virtual_path']\n```\n\n----------------------------------------\n\nTITLE: Upgrade Database to Head Revision\nDESCRIPTION: This command upgrades the database to the latest revision using Alembic, based on the configuration specified in 'development.ini'. This ensures the database schema matches the application's requirements. Requires a database and Alembic configuration to be set up.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/basiclayout/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/alembic -c development.ini upgrade head\n```\n\n----------------------------------------\n\nTITLE: View Template (Jinja2, HTML)\nDESCRIPTION: This snippet shows the `view.jinja2` template used to display a single wiki page. It extends the `layout.jinja2` template and overrides the `subtitle` and `content` blocks. It displays the page content and provides a link to edit the page. The `|safe` filter is used to prevent HTML escaping of the content.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/definingviews.rst#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"layout.jinja2\" %}\n\n{% block subtitle %}{{ pagename }}{% endblock %}\n\n{% block content %}\n    {{ content|safe }}\n\n    <p>\n        <a href=\"{{ request.route_url('edit_page', pagename=pagename) }}\">\n            Edit this Page\n        </a>\n    </p>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Registering Not Found Views with Predicates in Pyramid (Python)\nDESCRIPTION: This snippet demonstrates how to register multiple Not Found Views with different predicates (request methods) using the `@notfound_view_config` decorator. It defines two views, one for GET requests and one for POST requests, and associates them with the Not Found View based on the request method.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import notfound_view_config\n\n@notfound_view_config(request_method='GET')\ndef notfound_get(request):\n    return Response('Not Found during GET', status='404 Not Found')\n\n@notfound_view_config(request_method='POST')\ndef notfound_post(request):\n    return Response('Not Found during POST', status='404 Not Found')\n\ndef main(globals, **settings):\n    config = Configurator()\n    config.scan()\n```\n\n----------------------------------------\n\nTITLE: Configuring TransLogger Middleware (INI)\nDESCRIPTION: This snippet demonstrates how to configure Paste's TransLogger middleware for request logging in a Pyramid application. It involves renaming the [app:main] section, adding a [filter:translogger] section, and using a [pipeline:main] section to form a WSGI pipeline.  This enables logging of web traffic in the Apache Combined Log Format.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/logging.rst#_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[app:mypyramidapp]\nuse = egg:myproject\n```\n\nLANGUAGE: ini\nCODE:\n```\n[filter:translogger]\nuse = egg:Paste#translogger\nsetup_console_handler = False\n```\n\nLANGUAGE: ini\nCODE:\n```\n[pipeline:main]\n```\n\n----------------------------------------\n\nTITLE: Adding a reified property to the Pyramid request object in Python\nDESCRIPTION: This code demonstrates how to add a lazily evaluated, reified property to the Pyramid request object using the `set_property` method. The `_connect` function establishes a database connection and sets up a finished callback to handle transaction commit/rollback and connection closing. The `@subscriber` decorator associates the `new_request` function with the `NewRequest` event, allowing it to augment the request object with a database connection accessible via `request.db`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/api/request.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef _connect(request):\n    conn = request.registry.dbsession()\n    def cleanup(request):\n        # since version 1.5, request.exception is no\n        # longer eagerly cleared\n        if request.exception is not None:\n            conn.rollback()\n        else:\n            conn.commit()\n        conn.close()\n    request.add_finished_callback(cleanup)\n    return conn\n\n@subscriber(NewRequest)\ndef new_request(event):\n    request = event.request\n    request.set_property(_connect, 'db', reify=True)\n```\n\n----------------------------------------\n\nTITLE: Add pyramid_jinja2 Dependency (Python)\nDESCRIPTION: Adds 'pyramid_jinja2' to the project's dependencies in the setup.py file. This ensures that the Jinja2 templating engine is available for use in the Pyramid application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/jinja2.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Omitted for brevity, see setup.py file\n# The important part is adding pyramid_jinja2 to the install_requires list\n```\n\n----------------------------------------\n\nTITLE: Edit add_page View Function Python\nDESCRIPTION: This snippet modifies the `add_page` view function in `tutorial/views/default.py` to implement authentication. It verifies that the user is logged in and has either `basic` or `editor` roles. If the user doesn't meet these criteria, it raises an `HTTPForbidden` exception. It uses `request.identity` to fetch the current user.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/authentication.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n    @view_config(route_name='add_page', renderer='templates/edit.jinja2')\n    def add_page(self):\n        if request.identity is None or \\\n           'basic' not in request.identity.roles and \\\n           'editor' not in request.identity.roles:  # new lines\n            raise HTTPForbidden\n\n        request = self.request\n        form = EditForm(request.POST)\n        if request.method == 'POST' and form.validate():\n            name = form.data['name']\n            body = form.data['body']\n            page = Page(name=name, body=body, creator=request.identity)\n            self.dbsession.add(page)\n            next_url = request.route_url('view_page', pagename=name)\n            return HTTPFound(location=next_url)\n        return {'form': form, 'page': None, 'action': request.route_url('add_page')}\n```\n\n----------------------------------------\n\nTITLE: Run Pyramid Application (Bash)\nDESCRIPTION: This snippet shows how to run the Pyramid application using `pserve`. The `development.ini` file provides the configuration, and the `--reload` flag enables automatic reloading upon code changes.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/request_response.rst#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$VENV/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Including Debug Toolbar and Pyramid TM with Configurator in Python\nDESCRIPTION: This code snippet demonstrates how to include the pyramid_debugtoolbar and pyramid_tm extensions within a Pyramid application using the Configurator class. It initializes a Configurator object with empty settings and then includes the specified extensions.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/environment.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\nif __name__ == '__main__':\n    settings = {}\n    config = Configurator(settings=settings)\n    config.include('pyramid_debugtoolbar')\n    config.include('pyramid_tm')\n```\n\n----------------------------------------\n\nTITLE: Including Packages via INI File - Pyramid\nDESCRIPTION: Illustrates how to include packages in a Pyramid application using the pyramid.includes setting within a PasteDeploy .ini file. This is an alternative to using config.include() in Python code.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/environment.rst#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\npyramid.includes = pyramid_debugtoolbar\n                   pyramid_tm\n```\n\n----------------------------------------\n\nTITLE: Set Virtual Environment Variable (Unix)\nDESCRIPTION: Sets the environment variable 'VENV' to the absolute path of the virtual environment directory, which is assumed to be named 'tutorial' located in the user's home directory. This makes it easier to refer to the virtual environment later.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport VENV=~/tutorial\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Reloading\nDESCRIPTION: Configures Pyramid to automatically reload templates when they are changed. This is useful during development as it eliminates the need to restart the server after modifying a template.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/templating.rst#_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:tutorial\n\npyramid.reload_templates = true\n\n[server:main]\nuse = egg:waitress#main\nhost = 0.0.0.0\nport = 6543\n```\n\n----------------------------------------\n\nTITLE: Tween Ordering with 'over' (Python)\nDESCRIPTION: This snippet demonstrates how to use the `over` argument in `add_tween` to influence the tween order. It places `myapp.tween_factory` directly above the main Pyramid request handler.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nimport pyramid.tweens\n\nconfig.add_tween('myapp.tween_factory', over=pyramid.tweens.MAIN)\n```\n\n----------------------------------------\n\nTITLE: Pyramid Add Route (Python)\nDESCRIPTION: Configures a route that directly results in a particular view callable being invoked using `config.add_route`. This configures a route match to directly result in a particular view callable being invoked.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('idea', 'site/{id}')\nconfig.scan()\n```\n\n----------------------------------------\n\nTITLE: Finding a Resource by Relative Path\nDESCRIPTION: Demonstrates how to find a resource in the resource tree by a path relative to a given resource using `pyramid.traversal.find_resource`. The path argument is a string without a leading '/'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/resources.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.traversal import find_resource\nurl = find_resource(anyresource, 'path')\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Renderer (Python)\nDESCRIPTION: This code snippet shows how to add a custom renderer to Pyramid using `config.add_renderer`. It registers a renderer factory for files ending with '.jinja2'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_renderer('.jinja2', 'mypackage.MyJinja2Renderer')\n```\n\n----------------------------------------\n\nTITLE: Configurator: Root Package Attribute - Python\nDESCRIPTION: Explains the use of the `pyramid.config.Configurator.root_package` attribute and initialization parameter.  This feature assists with includeable packages that need to resolve resources relative to the package where the `Configurator` was created, which simplifies asset loading and configuration for addons.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Configure Chameleon Template Bindings\nDESCRIPTION: This snippet shows how to include Chameleon template bindings into the Pyramid application configuration within the app.py file using the config.include() method. It's necessary to have pyramid_chameleon installed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconfig.include('pyramid_chameleon')\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Locale Negotiator During Configuration\nDESCRIPTION: This snippet shows how to set a custom locale negotiator during Pyramid application configuration using the Configurator constructor. The `locale_negotiator` argument is set to the custom negotiator function.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyramid.config import Configurator\nconfig = Configurator(locale_negotiator=my_locale_negotiator)\n```\n\n----------------------------------------\n\nTITLE: Run Cookiecutter to generate Pyramid Project\nDESCRIPTION: Executes the cookiecutter command to generate a Pyramid project from the 'pyramid-cookiecutter-starter' template hosted on GitHub, checking out the 'main' branch. Requires cookiecutter to be installed. User will be prompted for project configuration options.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncookiecutter gh:Pylons/pyramid-cookiecutter-starter --checkout main\n```\n\n----------------------------------------\n\nTITLE: Generate Alembic Revision\nDESCRIPTION: This command generates a new Alembic database migration revision.  The '--autogenerate' flag automatically detects schema changes, and '-m \"init\"' adds a message describing the revision. Requires Alembic to be installed and configured.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/basiclayout/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/alembic -c development.ini revision --autogenerate -m \"init\"\n```\n\n----------------------------------------\n\nTITLE: TranslationString with Domain - Python\nDESCRIPTION: This code snippet shows how to create a TranslationString with a domain.  The domain categorizes the translation to avoid conflicts. The translator function uses the domain to find the correct translator file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.i18n import TranslationString\nts = TranslationString('Add ${number}', mapping={'number':1},\n                           domain='form')\n```\n\n----------------------------------------\n\nTITLE: Adding Custom View Predicate in Pyramid\nDESCRIPTION: This code snippet demonstrates how to add a custom view predicate using `config.add_view_predicate` in Pyramid.  It allows developers to define custom logic for determining whether a view should be executed based on specific conditions. The `ABCPredicate` class (defined elsewhere) determines if `abc=1` should invoke the view.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_view_predicate('abc', my.package.ABCPredicate)\n\n@view_config(abc=1)\n```\n\n----------------------------------------\n\nTITLE: Enable Template Auto-Reload via Environment Variable - Bash\nDESCRIPTION: This snippet shows how to enable automatic reloading of templates by setting the `PYRAMID_RELOAD_TEMPLATES` environment variable to `1` when starting the application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/templates.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nPYRAMID_RELOAD_TEMPLATES=1 $VENV/bin/pserve myproject.ini\n```\n\n----------------------------------------\n\nTITLE: Generate Alembic Revision (Shell)\nDESCRIPTION: This command generates an Alembic revision file using the 'development.ini' configuration. The `--autogenerate` flag automatically detects changes to the database model, and `-m \"init\"` adds a commit message.  Requires Alembic to be installed and configured.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/authentication/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nenv/bin/alembic -c development.ini revision --autogenerate -m \"init\"\n```\n\n----------------------------------------\n\nTITLE: Generating a Pyramid Project with Cookiecutter (Bash)\nDESCRIPTION: This command uses the cookiecutter tool to generate a new Pyramid project based on the pyramid-cookiecutter-starter template from GitHub. The --checkout main option specifies that the 'main' branch of the template should be used.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncookiecutter gh:Pylons/pyramid-cookiecutter-starter --checkout main\n```\n\n----------------------------------------\n\nTITLE: Inverting Predicate Value with not_ in Pyramid\nDESCRIPTION: This example demonstrates how to use the `not_` function from `pyramid.config` to invert the meaning of a predicate value. In this case, the view is only called if the request method is *not* `POST`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyramid.config import not_\n\nconfig.add_view(\n    'mypackage.views.my_view',\n    route_name='ok',\n    request_method=not_('POST')\n    )\n```\n\n----------------------------------------\n\nTITLE: Rendering Template with Asset Specification in Pyramid (Python)\nDESCRIPTION: This code snippet demonstrates how to render a Chameleon ZPT template using the render_to_response API in Pyramid, utilizing an asset specification to locate the template file. The asset specification consists of the package name and the asset name, separated by a colon.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.renderers import render_to_response\nrender_to_response('myapp:templates/some_template.pt', {}, request)\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Factory\nDESCRIPTION: Specifies a root factory in the Pyramid configurator.  This is done within the __init__.py file and determines how the root resource is created for the application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/authorization.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nauthorization/tutorial/__init__.py\n```\n\n----------------------------------------\n\nTITLE: Update edit_page View with Permission Declaration\nDESCRIPTION: This code snippet updates the `edit_page` view to declare the `edit` permission, simplifying the view logic by relying on ACLs.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/authorization.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@view_config(route_name='edit_page', renderer='templates/edit.pt', permission='edit')\ndef edit_page(request):\n    page = request.context.page\n    form = WikiPageForm(request.POST, page)\n    if request.method == 'POST' and form.validate():\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Traverser in Pyramid\nDESCRIPTION: This code snippet demonstrates how to add a custom traverser to a Pyramid application. It uses the `add_traverser` method of the Configurator to register a custom traversal class, allowing developers to override the default traversal algorithm.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\nfrom myapp.traversal import Traverser\nconfig = Configurator()\nconfig.add_traverser(Traverser)\n```\n\n----------------------------------------\n\nTITLE: Installing the Application (Bash)\nDESCRIPTION: This bash command installs the application with pip in editable mode. This ensures that any changes to the code are immediately reflected without needing to reinstall the package.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/databases.rst#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n$VENV/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Generate Alembic Revision\nDESCRIPTION: Generates a new Alembic revision script. The '--autogenerate' flag automatically detects changes in the database models. The '-m' flag provides a message for the revision. It uses the development.ini for database configuration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/views/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/alembic -c development.ini revision --autogenerate -m \"init\"\n```\n\n----------------------------------------\n\nTITLE: Setup.py Dependencies and Entry Point (Python)\nDESCRIPTION: This setup.py file configures dependencies and defines a console script entry point for initializing the database. It includes dependencies like SQLAlchemy, pyramid_tm, and zope.sqlalchemy. The console script allows initializing the database from the command line.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/databases.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom setuptools import setup\n\nrequires = [\n    'pyramid',\n    'pyramid_jinja2',\n    'pyramid_debugtoolbar',\n    'pyramid_tm',\n    'SQLAlchemy',\n    'transaction',\n    'zope.sqlalchemy',\n    'waitress',\n]\n\nsetup(\n    name='tutorial',\n    install_requires=requires,\n    entry_points={\n        'console_scripts': [\n            'initialize_tutorial_db = tutorial.initialize_db:main',\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Variables in pshell\nDESCRIPTION: Illustrates how to access custom variables defined in the application's .ini file within the pshell environment, such as 'dbsession', 'model', and 'tm'. These variables allow interaction with the application's data layer and transaction management.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> testapp.get('/')\n<200 OK text/html body='<!DOCTYPE...l>\\n'/3337>\n>>> request.route_url('home')\n'https://www.example.com/'\n>>> user = dbsession.query(models.User).get(1)\n>>> user.name = 'Joe'\n>>> tm.commit()\n>>> tm.begin()\n>>> user = dbsession.query(models.User).get(1)\n>>> user.name == 'Joe'\n'Joe'\n```\n\n----------------------------------------\n\nTITLE: Using a Custom View Predicate in a Pyramid View (Python)\nDESCRIPTION: This snippet shows how to use a custom view predicate, registered earlier, in a Pyramid view configuration.  The `abc=1` argument means that the view will only be invoked if the registered ABCPredicate returns `True` when passed the request and the configuration value of `1`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.4.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@view_config(abc=1)\n```\n\n----------------------------------------\n\nTITLE: Install Project in Editable Mode\nDESCRIPTION: This command installs the project in editable mode along with its testing dependencies. Editable mode allows changes to the project's source code to be immediately reflected without requiring reinstallation. It uses pip within the virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/basiclayout/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Attaching ACL to a Resource Class in Pyramid\nDESCRIPTION: This example shows how to associate an ACL with a resource by defining the __acl__ attribute on the resource class.  This provides type-level security, applying the same ACL to all instances of the Blog class. The ACL allows everyone to 'view' and members of 'group:editors' to 'add' and 'edit'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.authorization import Allow\nfrom pyramid.authorization import Everyone\n\nclass Blog(object):\n    __acl__ = [\n        (Allow, Everyone, 'view'),\n        (Allow, 'group:editors', 'add'),\n        (Allow, 'group:editors', 'edit'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Custom Response Adapter (Python)\nDESCRIPTION: Defines a custom response adapter that allows views to return strings directly, which are then automatically converted to `Response` objects with a default content type of 'text/html'. This custom adapter simplifies view code.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advanced-features.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\nfrom pyramid.response import Response\n\ndef string_response_adapter(s):\n    response = Response(s)\n    response.content_type = 'text/html'\n    return response\n```\n\n----------------------------------------\n\nTITLE: Pyramid Route Configuration\nDESCRIPTION: Registers a static view to serve files from the 'myproject:static' asset specification (the static directory of the myproject package). Additionally, it adds a route to the configuration, which can later be used by views in the views module to handle specific URL patterns.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef includeme(config):\n    config.add_static_view('static', 'myproject:static')\n    config.add_route('home', '/')\n\n```\n\n----------------------------------------\n\nTITLE: Run Pyramid application\nDESCRIPTION: Starts the Pyramid application using pserve with the development.ini configuration file. The --reload option enables automatic reloading of the application upon code changes.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/forms.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Firing a Custom Event in Python\nDESCRIPTION: This code shows how to fire a custom event using `request.registry.notify`. It creates an instance of the `DocCreated` event class, passing the document and request objects. The `request.registry.notify` method is then used to notify all subscribers of the event.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/events.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom .events import DocCreated\n\ndef new_doc_view(request):\n    doc = MyDoc()\n    event = DocCreated(doc, request)\n    request.registry.notify(event)\n    return {'document': doc}\n```\n\n----------------------------------------\n\nTITLE: Database Models Definition (Python)\nDESCRIPTION: This Python code defines the SQLAlchemy models for the wiki pages. It includes the Page class, which represents a row in the wikipages table. The class defines the table structure and sets up SQLAlchemy integration with the Pyramid transaction manager.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/databases.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport sqlalchemy as sa\n\nfrom sqlalchemy.orm import ( \n    scoped_session,\n    sessionmaker,\n    )\n\nfrom sqlalchemy.ext.declarative import declarative_base\n\nfrom zope.sqlalchemy import ZopeTransactionExtension\n\nDBSession = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))\nBase = declarative_base()\n\n\nclass Page(Base):\n    __tablename__ = 'wikipages'\n    uid = sa.Column(sa.Integer, primary_key=True)\n    title = sa.Column(sa.Unicode(255), unique=True, nullable=False)\n    body = sa.Column(sa.UnicodeText, default='')\n```\n\n----------------------------------------\n\nTITLE: Overriding an Asset in Pyramid using override_asset\nDESCRIPTION: This code demonstrates how to override an asset in a Pyramid application using the override_asset API. It replaces 'some.package:templates/mytemplate.pt' with 'another.package:othertemplates/anothertemplate.pt'. The 'to_override' and 'override_with' parameters specify the asset specification, which includes the package name and asset name separated by a colon.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nconfig.override_asset(\n    to_override='some.package:templates/mytemplate.pt',\n    override_with='another.package:othertemplates/anothertemplate.pt')\n```\n\n----------------------------------------\n\nTITLE: Not Found View Configuration in Pyramid (Python)\nDESCRIPTION: This code snippet defines a Not Found view in Pyramid using the `@notfound_view_config` decorator. It registers a view that will be invoked when a route is not found, setting the HTTP response status code to 404 and rendering the `404.pt` template with an empty dictionary. It depends on `pyramid.view` and `pyramid.view.notfound_view_config`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/basiclayout.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\n\n@view_config(context='pyramid.exceptions.NotFound',\n             renderer='tutorial:templates/404.pt')\ndef notfound_view(request):\n    request.response.status = 404\n    return {}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSRF Token Check for a Pyramid View (Python)\nDESCRIPTION: This snippet demonstrates how to configure a view to check for a valid CSRF token using the `check_csrf` view predicate.  If the `csrf_token` in the request parameters matches the token in the session, the view is allowed to execute; otherwise, it is not.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.4.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nconfig.add_view(someview, check_csrf=True)\n```\n\n----------------------------------------\n\nTITLE: REST View Class (Without @view_defaults)\nDESCRIPTION: This code demonstrates a REST view class implementation without using the `@view_defaults` decorator. Each method representing a REST action is decorated with `@view_config`, specifying the `route_name` and `request_method` explicitly.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.3.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyramid.view import view_config\nfrom pyramid.response import Response\n\nclass RESTView(object):\n    def __init__(self, request):\n        self.request = request\n\n    @view_config(route_name='rest', request_method='GET')\n    def get(self):\n        return Response('get')\n\n    @view_config(route_name='rest', request_method='POST')\n    def post(self):\n        return Response('post')\n\n    @view_config(route_name='rest', request_method='DELETE')\n    def delete(self):\n        return Response('delete')\n```\n\n----------------------------------------\n\nTITLE: Default Logging Configuration in development.ini\nDESCRIPTION: This snippet shows the default logging configuration provided in the development.ini file of a Pyramid project generated using the cookiecutter. It configures loggers, handlers, and formatters for development purposes. The configuration specifies a root logger and an application-specific logger (myproject) to stderr.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/logging.rst#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Begin logging configuration\n\n[loggers]\nkeys = root, myproject\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = INFO\nhandlers = console\n\n[logger_myproject]\nlevel = DEBUG\nhandlers =\nqualname = myproject\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(asctime)s %(levelname)-5.5s [%(name)s] %(message)s\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom CSRF Policy\nDESCRIPTION: This code shows how to set a custom CSRF storage policy using `config.set_csrf_storage_policy()` in Pyramid. This allows for customization of how CSRF tokens are stored and validated.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\nconfig = Configurator()\nconfig.set_csrf_storage_policy(MyCustomCSRFPolicy())\n```\n\n----------------------------------------\n\nTITLE: Install project in development mode\nDESCRIPTION: This bash command installs the current project in development mode using pip and a virtual environment. The `-e .` flag allows for editable installs, meaning changes to the source code will be immediately reflected without reinstalling.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/authentication.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Popping a Flash Message - Python\nDESCRIPTION: This doctest demonstrates how to add a message to the default flash queue and then retrieve it using the `request.session.pop_flash()` method. The `pop_flash()` method returns a list containing the message, and it empties the queue after retrieval. The code shows how subsequent calls to `pop_flash()` without adding a new message will return an empty list.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/sessions.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> request.session.flash('info message')\n>>> request.session.pop_flash()\n['info message']\n```\n\n----------------------------------------\n\nTITLE: Running pytest (bash)\nDESCRIPTION: This bash command executes the pytest test runner against the `tutorial/tests.py` file. The `-q` flag reduces the verbosity of the output, showing only the final summary.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/static_assets.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest tutorial/tests.py -q\n```\n\n----------------------------------------\n\nTITLE: View Defaults with @view_defaults (Refactored) (Python)\nDESCRIPTION: This is a refactored version of the previous example, demonstrating the use of @view_defaults to reduce code duplication. The `route_name` is specified in `@view_defaults` and therefore can be omitted from individual `@view_config` decorators on methods.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_defaults\nfrom pyramid.view import view_config\nfrom pyramid.response import Response\n\n@view_defaults(route_name='rest')\nclass RESTView(object):\n    def __init__(self, request):\n        self.request = request\n\n    @view_config(request_method='GET')\n    def get(self):\n        return Response('get')\n\n    @view_config(request_method='POST')\n    def post(self):\n        return Response('post')\n\n    @view_config(request_method='DELETE')\n    def delete(self):\n        return Response('delete')\n```\n\n----------------------------------------\n\nTITLE: Obtaining the Locale Name from a Request\nDESCRIPTION: This Python code demonstrates how to obtain the locale name associated with a Pyramid request using the request.locale_name attribute. This attribute returns the locale name negotiated by the active locale negotiator.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef aview(request):\n    locale_name = request.locale_name\n```\n\n----------------------------------------\n\nTITLE: Start Application on Unix with pserve (Pyramid)\nDESCRIPTION: This command starts the Pyramid application on Unix-like systems using `pserve` with the `development.ini` configuration file and enables reloading on code changes. It requires a virtual environment (`$VENV`) to be set up and activated.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Load Default Data to DB\nDESCRIPTION: Loads default data into the database using a script. This populates the database with initial data for the application to use.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/sqla_demo/README.txt#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/initialize_sqla_demo_db development.ini\n```\n\n----------------------------------------\n\nTITLE: Include Pyramid Chameleon Includeme\nDESCRIPTION: This snippet demonstrates how to include the `pyramid_chameleon` includeme within your application's configuration. This step is necessary to register the renderer factories for `.pt` files, enabling Chameleon template rendering in your Pyramid application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.5.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconfig = Configurator(.....)\nconfig.include('pyramid_chameleon')\n```\n\n----------------------------------------\n\nTITLE: Running pserve with Reload Option in Bash\nDESCRIPTION: This command starts the Pyramid application using `pserve` with the `--reload` option.  This causes the server to restart automatically whenever changes are made to Python modules or `.ini` files within the project.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n$VENV/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Wire Static View with Route (Python)\nDESCRIPTION: This code wires the custom static view to a route that catches all requests.  Every other add_route declaration should come before this one, as it will, by default, catch all requests.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# .. every other add_route declaration should come\n# before this one, as it will, by default, catch all requests\n\nconfig.add_route('catchall_static', '/*subpath')\nconfig.add_view('myapp.static.static_view', route_name='catchall_static')\n```\n\n----------------------------------------\n\nTITLE: Upgrade Alembic to Head (Unix)\nDESCRIPTION: Upgrades the database to the latest revision using the alembic upgrade head command. This applies all pending migrations to the database, bringing it up to date with the current schema.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/alembic -c development.ini upgrade head\n```\n\n----------------------------------------\n\nTITLE: Wire Access Log Formatter to FileHandler\nDESCRIPTION: This snippet configures the `accesslog` file handler to use the newly defined `accesslog` formatter. This ensures that the log messages written to the `access.log` file are not modified by a generic formatter and contain the raw output from TransLogger.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/logging.rst#_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n[handler_accesslog]\nclass = FileHandler\nargs = ('%(here)s/access.log','a')\nlevel = INFO\nformatter = accesslog\n```\n\n----------------------------------------\n\nTITLE: Copy view_classes to sessions and install\nDESCRIPTION: Copies the 'view_classes' directory to 'sessions' and installs the 'sessions' directory as a package using pip. This sets up the initial project structure for working with sessions.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/sessions.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ..; cp -r view_classes sessions; cd sessions\n$VENV/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Serve Pyramid Application (Bash)\nDESCRIPTION: This command starts the Pyramid application using pserve, loading the configuration from 'development.ini'. The '--reload' flag enables automatic reloading of the application when code changes are detected. The application is served based on settings defined in the development.ini file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/routing.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Adding CSS link to template (HTML)\nDESCRIPTION: This HTML snippet shows how to add a CSS link to the `<head>` section of a template file. It uses Pyramid's `request.static_url` helper to generate the correct URL to the CSS file, which dynamically creates links based on static view settings.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/static_assets.rst#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Pyramid Tutorial</title>\n    <link rel=\"stylesheet\" href=\"${request.static_url('tutorial:static/app.css')}\">\n</head>\n<body>\n    <h1>Welcome to Pyramid!</h1>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Migrating from Built-in Auth Policies (Pyramid, Python)\nDESCRIPTION: This code snippet demonstrates how to replace the built-in AuthTktAuthenticationPolicy and ACLAuthorizationPolicy with a custom ISecurityPolicy implementation. It defines a groupfinder function and then sets the authentication and authorization policies using the config object.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-2.0.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef groupfinder(userid, request):\n    # do some db lookups to verify userid, then return\n    # None if not recognized, or a list of principals\n    if userid == 'editor':\n        return ['group:editor']\n\nauthn_policy = AuthTktAuthenticationPolicy('seekrit', callback=groupfinder)\nauthz_policy = ACLAuthorizationPolicy()\nconfig.set_authentication_policy(authn_policy)\nconfig.set_authorization_policy(authz_policy)\n```\n\n----------------------------------------\n\nTITLE: Mako Template Setup in Pyramid (Python)\nDESCRIPTION: Demonstrates how to re-add Mako template support to a Pyramid project after upgrading to version 1.5a2, by installing the `pyramid_mako` package and including it in the Configurator.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsetup(\n    #...\n    install_requires=[\n        'pyramid_mako',         # new dependency\n        'pyramid',\n        #...\n    ],\n)\n\nconfig = Configurator(.....)\nconfig.include('pyramid_mako')\n```\n\n----------------------------------------\n\nTITLE: Run Pyramid Application\nDESCRIPTION: Starts the Pyramid application using pserve. The --reload option enables automatic reloading of the application on code changes.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/sessions.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Simple Tween Factory (Closure Style)\nDESCRIPTION: This code defines a simple tween factory using a closure. The factory takes a handler and registry, and returns a tween that executes code before and after the handler is called.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ndef simple_tween_factory(handler, registry):\n    # one-time configuration code goes here\n\n    def simple_tween(request):\n        # code to be executed for each request before\n        # the actual application code goes here\n\n        response = handler(request)\n\n        # code to be executed for each request after\n        # the actual application code goes here\n\n        return response\n\n    return simple_tween\n```\n\n----------------------------------------\n\nTITLE: Custom Static View (Python)\nDESCRIPTION: This code defines a static view callable that serves static assets from a specified directory using pyramid.static.static_view. It can be used as a fallback if no other route matches.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.static import static_view\nstatic_view = static_view('/path/to/static/dir', use_subpath=True)\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Executes the unit tests using pytest. This command runs the tests and provides a summary of the test results, indicating whether the tests passed or failed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/templating.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest tutorial/tests.py -q\n```\n\n----------------------------------------\n\nTITLE: Update functional tests - Python\nDESCRIPTION: This snippet provides an example of functional tests for the Pyramid application. These tests cover the entire application, including security aspects such as login, logout, and permission checks. The tests use WebTest to simulate user interactions and verify the application's behavior.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/tests.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsrc/tests/tests/test_functional.py\n```\n\n----------------------------------------\n\nTITLE: Create Virtual Environment (Python/Bash)\nDESCRIPTION: Creates a Python virtual environment named 'env'. A virtual environment isolates project dependencies, preventing conflicts with other Python projects. This is a standard practice for managing project dependencies.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/installation/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: Chameleon Template Translation String Example\nDESCRIPTION: Demonstrates how to use translation strings within Chameleon ZPT templates for automatic translation. When Chameleon renders these templates, it will automatically translate the strings according to the user's selected locale, provided a suitable translation exists.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<span tal:content=\"some_translation_string\"/>\n```\n\n----------------------------------------\n\nTITLE: View Configuration with Request Method Predicate in Pyramid (Python)\nDESCRIPTION: This code snippet demonstrates how to configure a view to be invoked only when the request method is 'POST' using the `request_method` view predicate. It uses the `@view_config` decorator to associate the `someview` function with the specified predicate.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_39\n\nLANGUAGE: Python\nCODE:\n```\n@view_config(request_method='POST')\ndef someview(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: setup.py Configuration\nDESCRIPTION: This snippet demonstrates how to include `pyramid_debugtoolbar` as an add-on in `setup.py`. This is done via the `install_requires` and `entry_points` configurations which declares a dependency and makes `pyramid_debugtoolbar` available as a Pyramid add-on.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ninstall_requires=[\n    'pyramid',\n    'pyramid_jinja2',\n    'pyramid_debugtoolbar',\n    'waitress',\n],\nentry_points={\n    'paste.app_factory': [\n        'main = hello_world:main',\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Root Resource Example - Pyramid Traversal\nDESCRIPTION: Demonstrates how to use `pyramid.traversal.find_root` to find the root resource in a Pyramid resource tree. It defines a simple resource structure and shows how the function identifies the root.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/resources.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass Thing(object): pass\n\na = Thing()\nb = Thing()\nb.__parent__ = a\n\n```\n\n----------------------------------------\n\nTITLE: Logging a Message in views/default.py\nDESCRIPTION: This snippet demonstrates how to log a message at the DEBUG level using the logger instance. This will log 'Some Message' to the application-configured logger, as defined in development.ini.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ndef my_view(request):\n    log.debug('Some Message')\n    return {}\n```\n\n----------------------------------------\n\nTITLE: Installing Pyramid and Waitress on Windows\nDESCRIPTION: Command to install Pyramid and Waitress using pip within the virtual environment on Windows.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/requirements.rst#_snippet_10\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pip install \"pyramid==\\ |release|\\ \" waitress\n```\n\n----------------------------------------\n\nTITLE: Upgrade Alembic to Head (Windows)\nDESCRIPTION: Upgrades the database to the latest revision using the alembic upgrade head command. This applies all pending migrations to the database, bringing it up to date with the current schema.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_14\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\alembic -c development.ini upgrade head\n```\n\n----------------------------------------\n\nTITLE: Pyramid Multiple Routes (Python)\nDESCRIPTION: Defines multiple routes for 'idea', 'user', and 'tag'. Each route maps a URL pattern to a specific route name.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('idea', 'ideas/{idea}')\nconfig.add_route('user', 'users/{user}')\nconfig.add_route('tag', 'tags/{tag}')\nconfig.scan()\n```\n\n----------------------------------------\n\nTITLE: Updating layout.pt Template in Pyramid\nDESCRIPTION: This snippet displays changes to the layout.pt template, emphasizing lines that modify the title tag and add a link back to the front page. It uses Chameleon METAL macros and slots for templating.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/definingviews.rst#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n.. literalinclude:: src/views/tutorial/templates/layout.pt\n   :linenos:\n   :emphasize-lines: 11, 36-40\n   :language: html\n```\n\n----------------------------------------\n\nTITLE: Load Default Data (Bash)\nDESCRIPTION: Loads default data into the database using the `initialize_tutorial_db` script. This script populates the database with initial data required for the application to function correctly. `development.ini` is the configuration file used by the script.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/installation/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/initialize_tutorial_db development.ini\n```\n\n----------------------------------------\n\nTITLE: Extending Application with Configurator Scan and Add View\nDESCRIPTION: This snippet shows how to extend an existing Pyramid application using `config.scan` to find configuration decorations and then adding a new view. It assumes the original application uses configuration decorators like `@view_config`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/extending.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == '__main__':\n    config.scan('someotherpackage')\n    config.add_view('mypackage.views.myview', name='myview')\n```\n\n----------------------------------------\n\nTITLE: Creating a virtual environment on Unix\nDESCRIPTION: These commands create a virtual environment for a Pyramid project on Unix-like systems. The first command sets an environment variable VENV to the desired virtual environment directory. The second command creates the virtual environment using python3's venv module.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/install.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VENV=~/env\npython3 -m venv $VENV\n```\n\n----------------------------------------\n\nTITLE: Modifying the notfound_view in Pyramid\nDESCRIPTION: This code snippet demonstrates how to modify the notfound_view function in notfound.py.  It shows the necessary import of the Page model and the modification required to return a Page object for display in the template.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/definingviews.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: src/views/tutorial/views/notfound.py\n    :linenos:\n    :language: python\n    :emphasize-lines: 3, 9-12\n```\n\n----------------------------------------\n\nTITLE: Matching the Root URL in Pyramid\nDESCRIPTION: This code demonstrates two ways to match the root URL (\"/\") using a route pattern in Pyramid. You can either use an empty string or the literal string \"/\" as the pattern when calling `config.add_route`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nconfig.add_route('root', '')\n```\n\nLANGUAGE: Python\nCODE:\n```\nconfig.add_route('root', '/')\n```\n\n----------------------------------------\n\nTITLE: Callable Object View accepting only Request in __call__ (Python)\nDESCRIPTION: This example shows a class with a '__call__' method, used as a Pyramid view, which accepts only the 'request' object. This provides a flexible way to define view logic and maintain state within the object instance.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ndef AView(object):\n    def __call__(self, request):\n       pass\nview = AView()\n```\n\n----------------------------------------\n\nTITLE: Run Pyramid Project\nDESCRIPTION: This command starts the Pyramid project using 'pserve' and the 'development.ini' configuration file. 'pserve' is a utility that runs a WSGI application. Requires the Pyramid framework to be installed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/basiclayout/README.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Locale Negotiator using set_locale_negotiator\nDESCRIPTION: This example demonstrates setting a custom locale negotiator using the `set_locale_negotiator` method of the Configurator object. This allows changing the locale negotiator after the Configurator object has been initialized.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_38\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyramid.config import Configurator\nconfig = Configurator()\nconfig.set_locale_negotiator(my_locale_negotiator)\n```\n\n----------------------------------------\n\nTITLE: Add Permission Configuration in Pyramid\nDESCRIPTION: This code snippet shows how to add a permission using the `config.add_permission` directive in Pyramid. This allows you to register a permission for introspection without associating it with a specific view, making it easier to build comprehensive lists of permissions in a system.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nconfig = Configurator()\nconfig.add_permission('view')\n```\n\n----------------------------------------\n\nTITLE: Create Virtual Environment (Unix)\nDESCRIPTION: Creates a virtual environment using the 'venv' module. The virtual environment will be created at the path specified by the 'VENV' environment variable.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv $VENV\n```\n\n----------------------------------------\n\nTITLE: Get Transaction Managed Session\nDESCRIPTION: The `get_tm_session` function registers a database session with a transaction manager and returns a `dbsession` object. This ensures that transactions are automatically committed after each request, unless an exception occurs, in which case the transaction is aborted.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/basiclayout.rst#_snippet_3\n\nLANGUAGE: py\nCODE:\n```\ndef get_tm_session(session_factory, transaction_manager):\n    \"\"\"\n    Get the sqlalchemy session, and hook it into the transaction manager.\n\n    \"\"\"\n    dbsession = session_factory()\n    zope.sqlalchemy.register(dbsession, transaction_manager=transaction_manager)\n    return dbsession\n```\n\n----------------------------------------\n\nTITLE: Generate Alembic Revision\nDESCRIPTION: This command generates an Alembic revision using the 'development.ini' configuration file.  The '--autogenerate' flag automatically detects changes in the database models, and the '-m \"init\"' flag adds a message to the revision.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/tests/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/alembic -c development.ini revision --autogenerate -m \"init\"\n```\n\n----------------------------------------\n\nTITLE: Routes Configuration (Python)\nDESCRIPTION: This snippet registers a static view using the add_static_view method. It serves static assets such as CSS and image files from the /static URL path prefix.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/basiclayout.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef includeme(config):\n    config.add_static_view('static', 'tutorial:static', cache_max_age=3600)\n    config.add_route('home', '/')\n\n```\n\n----------------------------------------\n\nTITLE: Implement Custom Locale Negotiator with Available Languages\nDESCRIPTION: Shows how to implement a custom locale negotiator that uses a list of available languages defined in the application's settings. The `aslist` function is used to convert a string of comma/space separated language codes into a Python list.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.settings import aslist\n\ndef my_locale_negotiator(request):\n    languages = aslist(request.registry.settings['available_languages'])\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Installing Pyramid Application in Virtual Environment\nDESCRIPTION: This command installs the Pyramid application and its dependencies in editable mode using pip. The '-e .' flag allows for live changes to the project to be reflected without reinstalling.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/modwsgi/index.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Define Page Class - Python\nDESCRIPTION: This code snippet defines the Page class, which inherits from persistent.Persistent.  It accepts a 'data' parameter in its constructor to store the reStructuredText content of the wiki page.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/definingmodels.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Page(Persistent):\n    def __init__(self, data):\n        self.data = data\n```\n\n----------------------------------------\n\nTITLE: JSON Renderer Adapter Definition (Python)\nDESCRIPTION: This code defines a custom adapter for the datetime.datetime object to serialize it to ISO format for JSON rendering. It then registers the adapter with the JSON renderer.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nreturn obj.isoformat()\njson_renderer.add_adapter(datetime.datetime, datetime_adapter)\nconfig.add_renderer('json', json_renderer)\n```\n\n----------------------------------------\n\nTITLE: Using Pyramid's pshell Command in Bash\nDESCRIPTION: Shows how to use the pshell command to start an interactive Python shell with the Pyramid application context loaded.  The command requires the path to the application's .ini file as an argument and exposes variables like 'app', 'registry', 'request', 'root', 'testapp', 'dbsession', and 'tm'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pshell starter/development.ini\n```\n\n----------------------------------------\n\nTITLE: Upgrade Database to Head Revision\nDESCRIPTION: Upgrades the database to the latest revision using Alembic, based on the configuration in `development.ini`. This ensures that the database schema matches the application's model definitions.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/models/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nenv/bin/alembic -c development.ini upgrade head\n```\n\n----------------------------------------\n\nTITLE: Upgrade Database to Latest Revision\nDESCRIPTION: Upgrades the database to the latest revision specified by `head` using Alembic. This applies all pending database schema changes.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/authorization/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/alembic -c development.ini upgrade head\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Debugging\nDESCRIPTION: This command-line example shows how to use environment variables to set configuration options for a Pyramid application. The variables `PYRAMID_DEBUG_AUTHORIZATION` and `PYRAMID_RELOAD_TEMPLATES` are set to enable debug authorization and template reloading, respectively. This approach overrides settings defined in the .ini file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/environment.rst#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nPYRAMID_DEBUG_AUTHORIZATION=1 PYRAMID_RELOAD_TEMPLATES=1 \\\n    $VENV/bin/pserve MyProject.ini\n```\n\n----------------------------------------\n\nTITLE: Change Directory to Project\nDESCRIPTION: This command changes the current directory to the tutorial project directory, which contains the README.md file and pyproject.toml.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/tests/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd tutorial\n```\n\n----------------------------------------\n\nTITLE: Using `*subpath` in a Pyramid Route Pattern\nDESCRIPTION: This example uses the `*subpath` pattern in a route to influence the traversal subpath without performing actual traversal.  This is useful in situations such as serving static files, where the subpath is used to compute the file path.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hybrid.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.static import static_view\n\n    www = static_view('mypackage:static', use_subpath=True)\n\n    config.add_route('static', '/static/*subpath')\n    config.add_view(www, route_name='static')\n```\n\n----------------------------------------\n\nTITLE: Run Pyramid Application (Bash)\nDESCRIPTION: Starts the Pyramid application using pserve. The development.ini configuration file is used, and the --reload flag enables automatic reloading of the application when changes are detected.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/jinja2.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Writing Simple Unit Test with pytest\nDESCRIPTION: This Python code defines a simple unit test using the 'unittest' framework. It imports the view, creates a dummy request, and asserts that the view returns the expected result. It makes use of Pyramid's testing helpers for setup and teardown.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/unit_testing.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\n\nfrom pyramid import testing\n\n\nclass TutorialViewTests(unittest.TestCase):\n    def setUp(self):\n        self.config = testing.setUp()\n\n    def tearDown(self):\n        testing.tearDown()\n\n    def test_hello_world(self):\n        from .views import hello_world\n        request = testing.DummyRequest()\n        response = hello_world(request)\n        self.assertEqual(response.status_code, 200)\n\n```\n\n----------------------------------------\n\nTITLE: Predicate Inversion Example in Pyramid\nDESCRIPTION: This snippet demonstrates how to use the `not_` class from `pyramid.config` to invert the result of a view predicate. In this example, the view will only be called if the request method is not POST. The `not_` class can be used against any predicate value passed to `add_view`, `add_route`, `add_subscriber`, `view_config`, or `subscriber`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import not_\n\n@view_config(route_name='myroute', request_method=not_('POST'))\ndef myview(request): ...\n```\n\n----------------------------------------\n\nTITLE: Create Virtual Environment (Windows)\nDESCRIPTION: Creates a virtual environment using the 'venv' module. The virtual environment will be created at the path specified by the 'VENV' environment variable.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_10\n\nLANGUAGE: doscon\nCODE:\n```\npython -m venv %VENV%\n```\n\n----------------------------------------\n\nTITLE: Running the Console Script - Bash\nDESCRIPTION: Example of how to run a console script after installing the distribution. It shows how to pass arguments and options to the script, and the output that is produced.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/show_settings development.ini --omit=pyramid --omit=debugtoolbar\ndebug_routematch                             False\ndebug_templates                              True\nreload_templates                             True\nmako.directories                             []\ndebug_notfound                               False\ndefault_locale_name                          en\nreload_resources                             False\ndebug_authorization                          False\nreload_assets                                False\nprevent_http_cache                           False\n```\n\n----------------------------------------\n\nTITLE: Overriding Assets with Absolute Path - Python\nDESCRIPTION: This example uses `config.override_asset` to serve static assets from an absolute path on the filesystem, overriding the default asset location. This enables serving assets from outside the package directory.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_static_view(path='myapp:static_images', name='static')\nconfig.override_asset(to_override='myapp:static_images/',\n                          override_with='/abs/path/to/images/')\n```\n\n----------------------------------------\n\nTITLE: Simplified Event Subscriber\nDESCRIPTION: This example demonstrates the new feature allowing subscribers and subscriber predicates to accept only a single `event` argument even if subscribed for notifications involving multiple interfaces.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@subscriber([SomeEvent, SomeContextType])\ndef asubscriber(event):\n    # this will work!\n```\n\n----------------------------------------\n\nTITLE: Generating Resource Path\nDESCRIPTION: Demonstrates how to generate the absolute physical path of a resource using `pyramid.traversal.resource_path`. The function returns a string representing the path of the resource within the resource tree.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/resources.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.traversal import resource_path\nurl = resource_path(resource)\n```\n\n----------------------------------------\n\nTITLE: Using Finished Callbacks in Pyramid\nDESCRIPTION: This code demonstrates how to use finished callbacks in Pyramid. A finished callback is a function that is called unconditionally at the very end of request processing, even if an exception occurs. The `log_callback` function logs a debug message indicating that the request is finished. The callback is registered using `request.add_finished_callback`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlog = logging.getLogger(__name__)\n\ndef log_callback(request):\n    \"\"\"Log information at the end of request\"\"\"\n    log.debug('Request is finished.')\nrequest.add_finished_callback(log_callback)\n```\n\n----------------------------------------\n\nTITLE: PasteDeploy Configuration: development.ini\nDESCRIPTION: This snippet shows the structure of the development.ini file, a PasteDeploy configuration file used for development. It defines settings for the Pyramid application, WSGI server, and logging. Key configurations include application settings, server configuration (port and address), and logging setup.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:myproject\npyramid.reload_templates = true\npyramid.includes = pyramid_debugtoolbar\n\n[server:main]\nhost = 127.0.0.1\nport = 6543\n\n# logging configuration\n[loggers]\nkeys = root, myproject\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = INFO\nhandlers = console\n\n[logger_myproject]\nlevel = DEBUG\nhandlers = console\nqualname = myproject\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s\n```\n\n----------------------------------------\n\nTITLE: Create SQLAlchemy Session Factory\nDESCRIPTION: The `get_session_factory` function accepts a SQLAlchemy database engine and creates a session factory using `sqlalchemy.orm.session.sessionmaker`. This factory is then used to create sessions bound to the provided database engine.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/basiclayout.rst#_snippet_2\n\nLANGUAGE: py\nCODE:\n```\ndef get_session_factory(engine):\n    factory = sessionmaker()\n    factory.configure(bind=engine)\n    return factory\n```\n\n----------------------------------------\n\nTITLE: Run Cookiecutter to generate Pyramid Project (DOS)\nDESCRIPTION: Executes the cookiecutter command to generate a Pyramid project from the 'pyramid-cookiecutter-starter' template hosted on GitHub, checking out the 'main' branch. Requires cookiecutter to be installed. User will be prompted for project configuration options.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_3\n\nLANGUAGE: doscon\nCODE:\n```\ncookiecutter gh:Pylons/pyramid-cookiecutter-starter --checkout main\n```\n\n----------------------------------------\n\nTITLE: Enable Pyramid Application Logging (INI)\nDESCRIPTION: This code snippet shows how to edit the `development.ini` configuration file to enable logging for a Pyramid application. The logger and level can be set in this file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/logging.rst#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n   .. literalinclude:: logging/development.ini\n       :language: ini\n```\n\n----------------------------------------\n\nTITLE: Modify Views to Use Jinja2 Renderer (Python)\nDESCRIPTION: Modifies the view definitions in views.py to use the Jinja2 renderer.  Changes the renderer argument to point to a .jinja2 template file. Requires the application to be configured with pyramid_jinja2.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/jinja2.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Omitted for brevity, see tutorial/views.py file\n# The important part is changing the renderer argument to '.jinja2'\n```\n\n----------------------------------------\n\nTITLE: Install Project Dependencies (Bash)\nDESCRIPTION: Installs the project and its dependencies using pip. The -e flag installs the project in editable mode, allowing changes to be reflected immediately.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/jinja2.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Template for the wiki top section (wiki_view.pt)\nDESCRIPTION: A Chameleon template for rendering the top section of the wiki page, displaying a list of available pages.  It iterates over the 'pages' variable passed from the view.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/forms.rst#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<p>\n    <a href=\"${request.route_url('add_page', pagename='FrontPage')}\">\n        Add Page\n    </a>\n</p>\n\n<ul>\n    <li tal:repeat=\"page pages\">\n        <a tal:attributes=\"href request.route_url('view_page', pagename=page)\"\n           tal:content=\"page\">Page</a>\n    </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Run Project Tests\nDESCRIPTION: This command executes the project's tests using the pytest testing framework.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/tests/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pytest\n```\n\n----------------------------------------\n\nTITLE: Running Pyramid console scripts directly in Python\nDESCRIPTION: Allows the execution of Pyramid's console scripts (pserve, pviews, etc.) directly using the Python interpreter. This enables passing custom arguments to the Python interpreter at runtime, providing more flexibility in how these scripts are executed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npython -3 -m pyramid.scripts.pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Install Project in Editable Mode with Testing Requirements\nDESCRIPTION: Installs the Pyramid project in editable mode along with its testing dependencies. Editable mode allows changes to the project source code to be immediately reflected without requiring re-installation.  The `.[testing]` extra installs testing-related dependencies defined in the project's setup.py or pyproject.toml file. It uses the pip executable within the 'env' virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/package/README.txt#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Pattern via Introspection in Pyramid View\nDESCRIPTION: This code demonstrates how to use Pyramid's introspection feature within a view callable to retrieve the pattern associated with a matched route. It accesses the introspector via the request object, retrieves the route introspectable based on the matched route name, and extracts the 'pattern' attribute. The view returns a response containing the route pattern.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/introspector.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\nfrom pyramid.response import Response\n\n@view_config(route_name='bar')\ndef show_current_route_pattern(request):\n    introspector = request.registry.introspector\n    route_name = request.matched_route.name\n    route_intr = introspector.get('routes', route_name)\n    return Response(str(route_intr['pattern']))\n```\n\n----------------------------------------\n\nTITLE: Running Pyramid App on Unix\nDESCRIPTION: This bash command is used to execute the helloworld.py script using the Python interpreter within a virtual environment ($VENV). It starts the Pyramid application, making it accessible through a web browser.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/firstapp.rst#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$VENV/bin/python helloworld.py\n```\n\n----------------------------------------\n\nTITLE: Run Project with pserve\nDESCRIPTION: Starts the Pyramid application using pserve, which is part of the PasteDeploy package. The `development.ini` file specifies the application configuration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/authorization/README.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Custom Event in Python\nDESCRIPTION: This code demonstrates how to subscribe to a custom event using the `@subscriber` decorator. It imports `subscriber` from `pyramid.events`, `DocCreated` from the application's events module, and `index_doc` from the index module. The `index_doc` function is then decorated to be a subscriber for the `DocCreated` event.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/events.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.events import subscriber\nfrom .events import DocCreated\nfrom .index import index_doc\n\n@subscriber(DocCreated)\ndef index_doc(event):\n    # index the document using our application's index_doc function\n    index_doc(event.doc, event.request)\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies in Editable Mode (Shell)\nDESCRIPTION: Installs the project in editable mode, along with its testing dependencies. Editable mode allows changes to the project source code to be immediately reflected without re-installation. Uses the 'testing' extra to include testing related packages.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/tests/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Route with Dynamic Parts in Pyramid\nDESCRIPTION: This code snippet demonstrates adding a route with a dynamic part (`{id}`) in Pyramid. The route is named 'mysection' and maps to the path '/{id}/mysection*traverse'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hybrid.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('mysection', '/{id}/mysection*traverse')\n```\n\n----------------------------------------\n\nTITLE: Tween Ordering with 'over' and 'under' (Python)\nDESCRIPTION: This example demonstrates the usage of both `over` and `under` arguments in `add_tween` to control the placement of a tween factory within the tween chain. It positions `myapp.tween_factory2` above `pyramid.tweens.MAIN` but below `myapp.tween_factory1`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nimport pyramid.tweens\n\nconfig.add_tween('myapp.tween_factory1',\n                     over=pyramid.tweens.MAIN)\nconfig.add_tween('myapp.tween_factory2',\n                     over=pyramid.tweens.MAIN,\n                     under='myapp.tween_factory1')\n```\n\n----------------------------------------\n\nTITLE: Extending pshell with Custom Variables and Setup Routine in INI\nDESCRIPTION: This INI snippet configures the `pshell` section to extend the interactive shell with custom variables and a setup routine.  It specifies the `setup` callable and exposes the `models` module to the shell.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[pshell]\nsetup = myapp.lib.pshell.setup\nmodels = myapp.models\n```\n\n----------------------------------------\n\nTITLE: Minimal Forbidden View Implementation in Pyramid (Python)\nDESCRIPTION: This snippet shows a minimal implementation of a Forbidden View in Pyramid. It defines a simple view that returns a 'forbidden' response.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\nfrom pyramid.response import Response\n\ndef forbidden_view(request):\n    return Response('forbidden')\n```\n\n----------------------------------------\n\nTITLE: Development Configuration (INI)\nDESCRIPTION: This snippet shows the configuration for the Pyramid application within the `development.ini` file. It defines the WSGI application in the `[app:main]` section and specifies the ZODB database connection URI using the `zodbconn.uri` setting. These settings are passed as `**settings` to the `main` function during server startup.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/basiclayout.rst#_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:pyramid_zodbconn\ntransaction.manager_parameters = \\\n    retry_attempts=3\nzodbconn.uri = %IMPORT[zodb_uri]%\nreload_templates = true\ndebug_authorization = false\ndebug_templates = false\ndebug_routematch = false\ndebug_notfound = false\ndebug_templates = false\ndebug_tween_factory = false\nverbose_static = true\npyramid.includes = \\\n    pyramid_debugtoolbar\n    pyramid_tm\n\n[server:main]\nhost = 0.0.0.0\nport = 6543\n```\n\n----------------------------------------\n\nTITLE: Copy and Install Dependencies (Bash)\nDESCRIPTION: This snippet copies the 'view_classes' directory, renames it to 'request_response', navigates into it, and installs the project's dependencies using pip. This ensures the project has the necessary packages to run.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/request_response.rst#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncd ..; cp -r view_classes request_response; cd request_response\n$VENV/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Setup Mako Dependency in setup.py\nDESCRIPTION: This snippet shows how to add `pyramid_mako` as a dependency in the `install_requires` section of your package's `setup.py` file. This ensures that the Mako templating engine is installed when your project is set up.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.5.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsetup(\n    #...\n    install_requires=[\n        'pyramid_mako',         # new dependency\n        'pyramid',\n        #...\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up virtual environment (Windows)\nDESCRIPTION: These commands set up a virtual environment for a new Pyramid project on Windows systems. It includes resetting the VENV environment variable, navigating to the project directory, creating a virtual environment, and upgrading packaging tools.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_3\n\nLANGUAGE: doscon\nCODE:\n```\n# Reset our environment variable for a new virtual environment.\nset VENV=c:\\env\\myproject\\env\n# Change directory into your newly created project.\ncd myproject\n# Create a new virtual environment...\npython -m venv %VENV%\n# ...where we upgrade packaging tools.\n%VENV%\\Scripts\\pip install --upgrade pip setuptools\n```\n\n----------------------------------------\n\nTITLE: Import Persistent Class - Python\nDESCRIPTION: This code snippet shows how to import the Persistent class from the persistent package, which is required for defining persistent objects in ZODB.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/definingmodels.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom persistent import Persistent\n```\n\n----------------------------------------\n\nTITLE: Add Jinja2 Template (HTML)\nDESCRIPTION: Creates a Jinja2 template file (home.jinja2) containing HTML markup and Jinja2-specific syntax for variable insertion. This template will be rendered by the view and sent to the client. Requires the Jinja2 templating engine to be configured.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/jinja2.rst#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n# Omitted for brevity, see tutorial/home.jinja2 file\n# Contains basic HTML and Jinja2 variable insertion syntax, like {{value}}\n```\n\n----------------------------------------\n\nTITLE: Install Project in Development Mode (Unix)\nDESCRIPTION: Installs the project in development mode using 'pip install -e', which creates a link to the project in the virtual environment. The '.[testing]' option installs the testing requirements defined in the pyproject.toml file. The VENV variable is used to locate the pip executable.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Generating Paths with request.route_path in Pyramid\nDESCRIPTION: This example shows how to generate only the path portion of a URL using `request.route_path`. It takes the route name and replacement values for the route pattern as arguments. The function returns the path part of the URL, without the protocol or hostname.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\nurl = request.route_path('foo', a='1', b='2', c='3')\n```\n\n----------------------------------------\n\nTITLE: Edit Template (Jinja2, HTML)\nDESCRIPTION: This snippet describes the `edit.jinja2` template, used by both `add_page` and `edit_page`. It extends the `layout.jinja2` template and provides a form with a textarea for editing the page content. It includes a CSRF token for security and a submit button.  The form posts back to the `save_url` provided by the view.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/definingviews.rst#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"layout.jinja2\" %}\n\n{% block subtitle %}Edit {{ page.name }}{% endblock %}\n\n{% block content %}\n    <form action=\"{{ save_url }}\" method=\"POST\">\n        <input type=\"hidden\" name=\"_csrftoken\" value=\"{{ csrf_token }}\">\n        <p>\n            <textarea name=\"body\" rows=\"10\" cols=\"60\">{{ page.data }}</textarea>\n        </p>\n        <input type=\"submit\" value=\"Save Changes\">\n    </form>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Run Pyramid Project\nDESCRIPTION: This command starts the Pyramid project using the pserve command and the 'development.ini' configuration file. This runs the application server.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/tests/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: View returning request.response bypassing the renderer\nDESCRIPTION: This code snippet shows how a Pyramid view can modify the `request.response` object directly and return it, bypassing the configured renderer (in this case, 'json').\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\n\n@view_config(renderer='json')\ndef view(request):\n    request.response.body = 'OK'\n    return request.response # json renderer avoided\n```\n\n----------------------------------------\n\nTITLE: Bootstrap with Specific INI Section (Python)\nDESCRIPTION: This python code snippet shows how to use pyramid.paster.bootstrap to initialize a Pyramid environment within a script, explicitly specifying the section of the INI file to load. It opens a configuration file, bootstraps the environment, then prints route URL. The \"with\" statement handles cleanup automatically.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.paster import bootstrap\n\nwith bootstrap('/path/to/my/development.ini#another') as env:\n    print(env['request'].route_url('home'))\n```\n\n----------------------------------------\n\nTITLE: Generating static URL in template (HTML)\nDESCRIPTION: This HTML code demonstrates how to use Pyramid's `request.static_url` function within a template to generate the URL for a static asset. It accepts a path that matches the configured static view, providing flexibility and ensuring correct URL generation even if the site is moved or the directory structure changes.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/static_assets.rst#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n${request.static_url('tutorial:static/app.css')}\n```\n\n----------------------------------------\n\nTITLE: Using Views with Custom Response Adapter (Python)\nDESCRIPTION: Demonstrates views that return strings directly after a custom string response adapter has been registered, showcasing the simplified view code enabled by the adapter. No explicit `Response` object creation is needed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advanced-features.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef helloview(request):\n    return \"Hello world!\"\n\ndef goodbyeview(request):\n    return \"Goodbye world!\"\n```\n\n----------------------------------------\n\nTITLE: Copy Authentication Setup\nDESCRIPTION: Copies the authentication setup and installs the package. This is the initial step to build upon the authentication setup to include authorization.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/authorization.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ..; cp -r authentication authorization; cd authorization\n$VENV/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Integrating Asset Overrides with Cache Busting in Pyramid\nDESCRIPTION: This code shows how to manage cache busting when overriding static assets in Pyramid, especially when using asset-aware cache busters like ManifestCacheBuster. It demonstrates how to define static views, set up cache busters for specific assets, override assets, and then apply an explicit cache buster to the overridden assets to maintain cache integrity.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.static import ManifestCacheBuster\n\n# define a static view for myapp:static assets\nconfig.add_static_view('static', 'myapp:static')\n\n# setup a cache buster for your app based on the myapp:static assets\nmy_cb = ManifestCacheBuster('myapp:static/manifest.json')\nconfig.add_cache_buster('myapp:static', my_cb)\n\n# override an asset\nconfig.override_asset(\n    to_override='myapp:static/background.png',\n    override_with='theme:static/background.png')\n\n# override the cache buster for theme:static assets\ntheme_cb = ManifestCacheBuster('theme:static/manifest.json')\nconfig.add_cache_buster('theme:static', theme_cb, explicit=True)\n```\n\n----------------------------------------\n\nTITLE: Update conftest.py for CSRF Token and Login - Python\nDESCRIPTION: This snippet shows how to modify the conftest.py file to initialize the cookiejar with a CSRF token and add helper methods for retrieving the CSRF token and logging in users during testing. It emphasizes the lines that need to be added or modified in the original conftest.py file. It requires the pyramid and webtest packages.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/tests.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsrc/tests/tests/conftest.py\n```\n\n----------------------------------------\n\nTITLE: Explicit Tween Ordering (INI)\nDESCRIPTION: This INI configuration shows how to explicitly define the tween order using the `pyramid.tweens` setting.  The order defined here overrides any implicit tween ordering specified using `add_tween` in the application configuration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_38\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:MyApp\npyramid.reload_templates = true\npyramid.debug_authorization = false\npyramid.debug_notfound = false\npyramid.debug_routematch = false\npyramid.debug_templates = true\npyramid.tweens = myapp.my_cool_tween_factory\n                     pyramid.tweens.excview_tween_factory\n```\n\n----------------------------------------\n\nTITLE: Editing edit.pt Template in Pyramid\nDESCRIPTION: This code snippet shows the edited edit.pt template, used for adding and editing wiki pages. The emphasized lines display the form structure, including a textarea for the page body and a submit button.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/definingviews.rst#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n.. literalinclude:: src/views/tutorial/templates/edit.pt\n    :linenos:\n    :language: html\n    :emphasize-lines: 5-20\n```\n\n----------------------------------------\n\nTITLE: Generating URLs in Bootstrapped Environment (Python)\nDESCRIPTION: This python code snippet shows how to use Pyramid's URL generation APIs within a bootstrapped environment. Requires prior bootstrapping using pyramid.paster.bootstrap. Uses env['request'].route_url to generate URL.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nenv['request'].route_url('verify', code='1337')\n```\n\n----------------------------------------\n\nTITLE: View Without HTML\nDESCRIPTION: Defines view functions that return data to be rendered by a template. The '@view_config' decorator specifies the route and the renderer (template) to be used.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/templating.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\n\n@view_config(route_name='home', renderer='home.pt')\ndef home(request):\n    return {\n        'name': 'Home',\n        'values': [1, 2, 3]\n    }\n\n@view_config(route_name='howdy', renderer='home.pt')\ndef howdy(request):\n    return {\n        'name': 'Howdy',\n        'values': [4, 5, 6]\n    }\n```\n\n----------------------------------------\n\nTITLE: Install Project in Editable Mode\nDESCRIPTION: Installs the Pyramid project in editable mode using pip within the 'env' virtual environment, along with testing dependencies. Requires a virtual environment and a pyproject.toml file defining the project and its testing dependencies.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/models/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Custom pshell Setup Routine in Python\nDESCRIPTION: This Python code defines a custom setup routine for the `pshell` interactive shell.  It modifies the environment's request object and adds a new value containing a WebTest version of the application for easy request submission.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# myapp/lib/pshell.py\nfrom contextlib import suppress\nfrom transaction.interfaces import NoTransaction\nfrom webtest import TestApp\n\ndef setup(env):\n    request = env['request']\n    request.host = 'www.example.com'\n```\n\n----------------------------------------\n\nTITLE: Modifying Response Status in a View (Python)\nDESCRIPTION: This code snippet shows how to modify the response status code within a Pyramid view callable that uses a renderer by setting the `request.response.status` attribute. It is important to modify `request.response` before returning the result.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\n\n@view_config(name='gone', renderer='templates/gone.pt')\ndef myview(request):\n    request.response.status = '404 Not Found'\n    return {'URL':request.URL}\n```\n\n----------------------------------------\n\nTITLE: Finding Resource by Interface - Pyramid Traversal\nDESCRIPTION: Shows how to use `pyramid.traversal.find_interface` to locate a parent resource that is of a particular class or implements a specific interface. The example creates a simple resource hierarchy with `Thing1` and `Thing2` classes.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/resources.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass Thing1(object): pass\nclass Thing2(object): pass\n\na = Thing1()\nb = Thing2()\nb.__parent__ = a\n\n```\n\n----------------------------------------\n\nTITLE: Create Pyramid project using cookiecutter\nDESCRIPTION: Uses the pyramid-cookiecutter-starter template to create a new Pyramid project. The --checkout main option specifies the main branch.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/cookiecutters.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/cookiecutter gh:Pylons/pyramid-cookiecutter-starter --checkout main\n```\n\n----------------------------------------\n\nTITLE: Cloning Pyramid Cookiecutter Template in Bash\nDESCRIPTION: This command clones the Pyramid starter template using Cookiecutter. The `--checkout main` option specifies the main branch. It assumes Cookiecutter is installed and configured correctly.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/modwsgi/index.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ~\ncookiecutter gh:Pylons/pyramid-cookiecutter-starter --checkout main\n```\n\n----------------------------------------\n\nTITLE: Prequest Utility Invocation (Bash)\nDESCRIPTION: This bash command invokes the prequest utility to send a request to a Pyramid application and print the response body. It requires the path to the application's .ini file and the URL path as arguments.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/prequest development.ini /\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests (Shell)\nDESCRIPTION: Executes the project's test suite using pytest. Assumes pytest is installed within the virtual environment, which is typically done through the '.[testing]' extra.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/tests/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pytest\n```\n\n----------------------------------------\n\nTITLE: PasteDeploy INI Configuration Example\nDESCRIPTION: This snippet shows an example of a PasteDeploy configuration file (development.ini) used in a Pyramid project. It defines application settings, including the 'use' directive which specifies the application factory entry point.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/paste.rst#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:myproject\n\n[server:main]\nhost = 0.0.0.0\nport = 6543\n\n[pipeline:main]\npaster = egg:Paste#translogger\n\n[loggers]\nkeys = root, myproject\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = INFO\nhandlers = console\n\n[logger_myproject]\nlevel = DEBUG\nhandlers = console\nqualname = myproject\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s\n```\n\n----------------------------------------\n\nTITLE: Registering Exception View\nDESCRIPTION: Demonstrates how to register an exception view using the `@bfg_view` decorator. When the `NotFound` exception is raised, the `notfound_view` function will be executed, returning an `HTTPNotFound` response.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom repoze.bfg.view import bfg_view\nfrom repoze.bfg.exceptions import NotFound\nfrom webob.exc import HTTPNotFound\n\n@bfg_view(context=NotFound)\ndef notfound_view(request):\n    return HTTPNotFound()\n```\n\n----------------------------------------\n\nTITLE: Create Virtual Environment (Python/Shell)\nDESCRIPTION: This command creates a Python virtual environment named 'env' within the current directory. This isolates project dependencies.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/authentication/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: Adding SQLAlchemy Pool Logger to Loggers List (INI)\nDESCRIPTION: This snippet adds the sqlalchemy.pool logger to the list of loggers in the .ini file. This ensures that the logger is properly initialized and its configuration is applied during application startup.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/logging.rst#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[loggers]\nkeys = root, myproject, sqlalchemy.pool\n```\n\n----------------------------------------\n\nTITLE: Editing view.pt Template in Pyramid\nDESCRIPTION: This snippet shows the edited view.pt template used for displaying a single wiki page. It highlights the use of a macro to load the layout.pt template, filling the content slot, and including a link to edit the page.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/definingviews.rst#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n.. literalinclude:: src/views/tutorial/templates/view.pt\n    :linenos:\n    :language: html\n    :emphasize-lines: 5-16\n```\n\n----------------------------------------\n\nTITLE: Add new functional test\nDESCRIPTION: Adds a new functional test to the end of the ``tests.py`` file. This test verifies that the JSON endpoint is functioning correctly.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/json.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n   .. literalinclude:: json/tutorial/tests.py\n       :linenos:\n```\n\n----------------------------------------\n\nTITLE: Install Project in Editable Mode\nDESCRIPTION: Installs the project in editable mode along with its testing requirements.  The '-e' flag allows changes to the project's source code to be immediately reflected without requiring reinstallation. '[testing]' installs the dependencies needed for running tests.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/sqla_demo/README.txt#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Adding Login/Logout Links to Layout (layout.jinja2) HTML\nDESCRIPTION: Modifies the base layout template to dynamically display \"Login\" or \"Logout\" links based on the user's authentication status. The ``request.identity`` is checked to determine if a user is logged in. Jinja2 templating engine is required.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/authentication.rst#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n      <div id=\"links\">\n        % if request.identity:\n          <a href=\"${request.route_url('logout')}\">Logout</a>\n        % else:\n          <a href=\"${request.route_url('login')}\"\n             title=\"Login\">Login</a>\n        % endif\n      </div>\n```\n\n----------------------------------------\n\nTITLE: Install Project in Development Mode (Unix)\nDESCRIPTION: Installs the project in development mode using pip install -e. This allows for easy development and testing of the project. The \"[testing]\" extra installs testing dependencies.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Running Pyramid Application with pserve via Python\nDESCRIPTION: This command runs the Pyramid application using the Python interpreter and the pyramid.scripts.pserve module.  It passes the development.ini configuration file and the --reload option to the script. This method allows custom arguments to be passed to the Python interpreter.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pyramid.scripts.pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Install project in development mode\nDESCRIPTION: Installs the project in development mode using pip. This command makes the project's code available to the Python interpreter without copying it into the site-packages directory.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/forms.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Including a Module for Configuration in Python\nDESCRIPTION: This Python snippet illustrates how to include a module using `config.include`.  The module must contain a callable named `includeme` that performs the actual configuration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advconfig.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport myapp\n\nconfig.include(myapp)\n```\n\n----------------------------------------\n\nTITLE: view_page view function (Python)\nDESCRIPTION: This snippet showcases the 'view_page' view function, used to display a single page of the wiki. It retrieves the page content from the database, renders it as HTML (handling WikiWords), and prepares the data for the template. Regular expressions are used to dynamically generate view and add links for WikiWords.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/definingviews.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@view_config(route_name='view_page', renderer='templates/view.jinja2')\ndef view_page(request):\n    pagename = request.matchdict['pagename']\n    try:\n        page = DBSession.query(Page).filter_by(name=pagename).one()\n    except DBAPIError:\n        return Response(db_err_msg, content_type='text/plain', status=500)\n    except Exception:\n        return HTTPFound(location = request.route_url('add_page', pagename=pagename))\n\n    def add_link(match):\n        name = match.group(0)\n        exists = DBSession.query(Page).filter_by(name=name).first()\n        if exists:\n            return '<a href=\"{}\">{}</a>'.format(request.route_url('view_page', pagename=name), name)\n        else:\n            return '<a href=\"{}\">{}</a>'.format(request.route_url('add_page', pagename=name), name)\n\n    content = page.data\n    content = wikiwords.sub(add_link, content)\n    edit_url = request.route_url('edit_page', pagename=pagename)\n    return dict(page=page, content=content, edit_url=edit_url)\n```\n\n----------------------------------------\n\nTITLE: Setting up Logging with Paster - Python\nDESCRIPTION: Shows how to configure logging parameters present in the configuration file using pyramid.paster.setup_logging. This will configure logging based on the [logger] sections in the INI file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nimport pyramid.paster\npyramid.paster.setup_logging('/path/to/my/development.ini')\n```\n\n----------------------------------------\n\nTITLE: Preventing HTTP Caching in Pyramid View (Python)\nDESCRIPTION: This code shows how to prevent HTTP caching for a specific view even when http_cache is configured. By setting response.cache_control.prevent_auto to True, the view overrides the default caching behavior based on a condition in the request parameters.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\nfrom pyramid.response import Response\n\n@view_config(http_cache=3600)\ndef view(request):\n    response = Response()\n    if 'should_cache' not in request.params:\n        response.cache_control.prevent_auto = True\n    return response\n```\n\n----------------------------------------\n\nTITLE: Creating a Pyramid Project with Cookiecutter\nDESCRIPTION: This command uses `cookiecutter` to create a new Pyramid project from the `pyramid-cookiecutter-starter` template. The `--checkout main` option specifies that the `main` branch of the repository should be used. The user will be prompted to provide values for various project settings.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/cookiecutter gh:Pylons/pyramid-cookiecutter-starter --checkout main\n```\n\n----------------------------------------\n\nTITLE: Modify imports in views/default.py Python\nDESCRIPTION: This snippet updates the imports in `tutorial/views/default.py` to include `HTTPForbidden` from `pyramid.httpexceptions`. This exception is raised when a user attempts to access a resource without the necessary permissions.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/authentication.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\nfrom pyramid.view import view_config\nfrom pyramid.httpexceptions import HTTPFound\nfrom pyramid.httpexceptions import HTTPForbidden # add this import\n\nfrom sqlalchemy.exc import DBAPIError\n\nfrom .models import (\n```\n\n----------------------------------------\n\nTITLE: TranslationStringFactory Usage - Python\nDESCRIPTION: This code snippet shows how to use the TranslationStringFactory to preset the domain of a TranslationString. The factory is assigned to '_' by convention.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.i18n import TranslationStringFactory\n_ = TranslationStringFactory('pyramid')\nts = _('add-number', default='Add ${number}', mapping={'number':1})\n```\n\n----------------------------------------\n\nTITLE: Running pytest on Unix\nDESCRIPTION: This bash command executes the pytest test runner in quiet mode (-q) within a virtual environment. It assumes that the virtual environment is activated and the pytest package is installed within it.  It shows how to run tests with pytest in a Unix environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/tests.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest -q\n```\n\n----------------------------------------\n\nTITLE: Run Tests (Bash)\nDESCRIPTION: Executes the project's tests using pytest. The -q flag reduces the verbosity of the output, showing only the summary.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/jinja2.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest tutorial/tests.py -q\n```\n\n----------------------------------------\n\nTITLE: Route Configuration with Request Method Predicate in Pyramid (Python)\nDESCRIPTION: This code snippet demonstrates how to add a route that only matches when the request method is 'POST' using the `request_method` route predicate. It uses `config.add_route` to define a route named 'name' that only matches requests with the 'POST' method.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_40\n\nLANGUAGE: Python\nCODE:\n```\nconfig.add_route('name', '/foo', request_method='POST')\n```\n\n----------------------------------------\n\nTITLE: Generate Alembic Revision (Unix)\nDESCRIPTION: Generates an Alembic revision using the alembic revision command. This command creates a new migration script that can be used to update the database schema. The --autogenerate flag automatically detects changes to the database model, and the -m flag specifies a message for the revision.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/alembic -c development.ini revision --autogenerate -m \"init\"\n```\n\n----------------------------------------\n\nTITLE: Using args and kwargs with config.action in Pyramid\nDESCRIPTION: This snippet demonstrates the use of `args` and `kw` parameters with `config.action` in a Pyramid directive. When the registered action is committed, the callable function `register` will be invoked with the specified `args` and `kw`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/extconfig.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef add_jammyjam(config, jammyjam):\n    def register(*arg, **kw):\n        config.registry.jammyjam_args = arg\n        config.registry.jammyjam_kw = kw\n        config.registry.jammyjam = jammyjam\n    config.action('jammyjam', register, args=('one',), kw={'two':'two'})\n```\n\n----------------------------------------\n\nTITLE: Pyramid View Callable Definition\nDESCRIPTION: Defines and registers a view callable named 'my_view' which is associated with the route named 'home'. When this route is matched, the 'my_view' function will be invoked, rendering the 'mytemplate.jinja2' template. The view function returns a dictionary containing data that will be used in the template for rendering.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\n\n\n@view_config(route_name='home', renderer='myproject:templates/mytemplate.jinja2')\ndef my_view(request):\n    return {'project': 'MyProject'}\n\n```\n\n----------------------------------------\n\nTITLE: Run Tests with Coverage (Unix)\nDESCRIPTION: Runs the project tests using pytest, collecting coverage information and reporting it in the terminal, displaying missing lines. This requires the 'pytest-cov' package to be installed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest --cov --cov-report=term-missing\n```\n\n----------------------------------------\n\nTITLE: View Configuration with Predicates (Python)\nDESCRIPTION: Demonstrates the use of view predicates in Pyramid to associate different views with a single route based on request parameters, simplifying view code and improving testability. This shows how to define separate views for authenticated and anonymous users.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advanced-features.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@view_config(route_name=\"items\", is_authenticated=True)\ndef auth_view(request):\n    # do one thing\n\n@view_config(route_name=\"items\")\ndef anon_view(request):\n    # do something else\n```\n\n----------------------------------------\n\nTITLE: Start Pyramid Application (Unix)\nDESCRIPTION: Starts the Pyramid application using 'pserve' within the virtual environment, using the 'development.ini' configuration file and enabling automatic reloading on code changes.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Copying view_classes and installing package (bash)\nDESCRIPTION: This bash command copies the 'view_classes' directory to 'static_assets' and installs the package using pip. It ensures the project is set up correctly for further steps.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/static_assets.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ..; cp -r view_classes static_assets; cd static_assets\n$VENV/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Update view_page View with Permission Declaration\nDESCRIPTION: This code snippet updates the `view_page` view to declare the `view` permission, removing explicit permission checks within the view. The page object is pulled from the request context.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/authorization.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@view_config(route_name='view_page', renderer='templates/view.pt', permission='view')\ndef view_page(request):\n    page = request.context.page\n    return dict(page=page, logged_in=request.unauthenticated_userid)\n```\n\n----------------------------------------\n\nTITLE: Deprecating Configurator Class in Pyramid\nDESCRIPTION: This snippet shows the deprecation of the `pyramid.configuration.Configurator` class and the suggestion to use `pyramid.config.Configurator` instead with `autocommit=True`. It highlights a change in the configuration API.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_38\n\nLANGUAGE: Python\nCODE:\n```\n``pyramid.configuration.Configurator`` is now deprecated.  Use\n``pyramid.config.Configurator``, passing its constructor\n``autocommit=True`` instead.\n```\n\n----------------------------------------\n\nTITLE: HTML Form with UTF-8 Encoding (XML)\nDESCRIPTION: Example of an HTML form that specifies UTF-8 encoding using the `accept-charset` attribute. This is crucial for ensuring that form data is properly encoded when submitted to the server.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/views.rst#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  <form method=\"POST\" action=\"myview\" accept-charset=\"UTF-8\">\n    <div>\n      <input type=\"text\" name=\"firstname\"/>\n    </div>\n    <div>\n      <input type=\"text\" name=\"lastname\"/>\n    </div>\n    <input type=\"submit\" value=\"Submit\"/>\n  </form>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Locale Negotiator in Pyramid\nDESCRIPTION: This code defines a custom locale negotiator function that retrieves the locale name from the request parameters using the key 'my_locale'. If the parameter exists, its value is returned as the locale name.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_36\n\nLANGUAGE: Python\nCODE:\n```\ndef my_locale_negotiator(request):\n    locale_name = request.params.get('my_locale')\n    return locale_name\n```\n\n----------------------------------------\n\nTITLE: Serving Static Assets from External URLs - Python\nDESCRIPTION: This example shows how to configure a static view to serve assets from an external URL. The `config.add_static_view` function is used with a URL as the `name` argument, and the `path` points to a location within the package.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_static_view(name='http://example.com/images',\n                          path='mypackage:images')\n```\n\n----------------------------------------\n\nTITLE: Run Project Tests\nDESCRIPTION: Runs the project's tests using pytest. This verifies that the application is functioning correctly and that all tests pass.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/models/README.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nenv/bin/pytest\n```\n\n----------------------------------------\n\nTITLE: Setting Response Factory Imperatively in Pyramid\nDESCRIPTION: This code demonstrates how to set the response factory after the `Configurator` has already been instantiated, using `config.set_response_factory`. This provides an alternative method for configuring the response factory if imperative configuration is preferred.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\nfrom pyramid.response import Response\n\nclass MyResponse(Response):\n    pass\n\nconfig = Configurator()\nconfig.set_response_factory(lambda r: MyResponse())\n```\n\n----------------------------------------\n\nTITLE: Set up project environment\nDESCRIPTION: Commands to set up a virtual environment for the new Pyramid project, upgrade packaging tools, and install the project itself using pip.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/cookiecutters.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Change directory into your newly created project.\ncd cc_starter\n# Create a new virtual environment...\npython3 -m venv env\n# ...where we upgrade packaging tools...\nenv/bin/pip install --upgrade pip setuptools\n# ...and into which we install our project.\nenv/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Load Default Data (Windows)\nDESCRIPTION: Loads default data into the database using the initialize_tutorial_db console script. This script populates the database with initial data.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_16\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\initialize_tutorial_db development.ini\n```\n\n----------------------------------------\n\nTITLE: Modifying Response Content Type and Status\nDESCRIPTION: This code shows how to modify the content type and status code of a Pyramid `Response` object returned by `render_to_response`.  The `content_type` attribute is set to 'text/plain', and the `status_int` attribute is set to 204.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/templates.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.renderers import render_to_response\n\ndef sample_view(request):\n    response = render_to_response('templates/foo.pt',\n                                  {'foo':1, 'bar':2},\n                                  request=request)\n    response.content_type = 'text/plain'\n    response.status_int = 204\n    return response\n```\n\n----------------------------------------\n\nTITLE: Building a distribution on Windows\nDESCRIPTION: This batch script demonstrates how to build a distributable package (sdist and wheel) for a Python application on Windows using the `build` tool.  It installs the `build` package using `pip` and then executes the `build` command.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/distributing.rst#_snippet_1\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pip install build\n%VENV%\\Scripts\\python -m build\n```\n\n----------------------------------------\n\nTITLE: View Configuration with Configurator.add_view (Python)\nDESCRIPTION: This code demonstrates how to configure a view imperatively using the `config.add_view` method.  It associates the `hello_world` function with the 'hello' route name. The first argument to `add_view` is the view callable.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\n\ndef hello_world(request):\n    return Response('hello!')\n\n    # config is assumed to be an instance of the\n    # pyramid.config.Configurator class\nconfig.add_view(hello_world, route_name='hello')\n```\n\n----------------------------------------\n\nTITLE: Install Project Dependencies with Dev Extra (Bash)\nDESCRIPTION: This bash snippet uses pip to install the current project in editable mode (-e) along with the dependencies specified in the '[dev]' extra within the setup.py file. This ensures that the pyramid_debugtoolbar and other development dependencies are installed into the virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/debugtoolbar.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Pcreate Command (Pyramid 1.3+)\nDESCRIPTION: This command demonstrates the replacement for `paster create` in Pyramid 1.3 and later. It uses the `pcreate` command with the `-s starter` option for scaffolding.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.3.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n$ $VENV/bin/pcreate -s starter foo\n```\n\n----------------------------------------\n\nTITLE: Rendering Template to String and Creating Response\nDESCRIPTION: This snippet shows how to render a template to a string using the `render` function and then create a Pyramid `Response` object with that string as the body. The `request` object is passed to the render function to provide context for rendering. This is useful when you need to manipulate the response before sending it.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/templates.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.renderers import render\nfrom pyramid.response import Response\n\ndef sample_view(request):\n    result = render('mypackage:templates/foo.pt',\n                    {'foo':1, 'bar':2},\n                    request=request)\n    response = Response(result)\n    return response\n```\n\n----------------------------------------\n\nTITLE: Pylons-Style View Mapper in Pyramid\nDESCRIPTION: This snippet shows how to create a custom view mapper in Pyramid that emulates the Pylons controller pattern.  The `PylonsControllerViewMapper` class takes an attribute name, then calls a method on the controller instance with parameters from the `request.matchdict`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# framework\n\nclass PylonsControllerViewMapper(object):\n    def __init__(self, **kw):\n        self.kw = kw\n\n    def __call__(self, view):\n        attr = self.kw['attr']\n        def wrapper(context, request):\n            matchdict = request.matchdict.copy()\n            matchdict.pop('action', None)\n            inst = view(request)\n            meth = getattr(inst, attr)\n            return meth(**matchdict)\n        return wrapper\n\nclass BaseController(object):\n    __view_mapper__ = PylonsControllerViewMapper\n```\n\n----------------------------------------\n\nTITLE: Setup.py with Console Script - Python\nDESCRIPTION: Example setup.py file with console script entry point added.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom setuptools import setup, find_packages\n\nhere = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(here, 'README.txt')) as f:\n    README = f.read()\nwith open(os.path.join(here, 'CHANGES.txt')) as f:\n    CHANGES = f.read()\n\nrequires = ['pyramid', 'pyramid_debugtoolbar']\n\ntests_require = [\n    'WebTest',\n    'pytest',\n    'pytest-cov',\n]\n\nsetup(name='MyProject',\n    version='0.0',\n    description='My project',\n    long_description=README + '\\n\\n' +  CHANGES,\n    classifiers=[\n        \"Programming Language :: Python\",\n        \"Framework :: Pyramid\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Internet :: WWW/HTTP :: WSGI :: Application\",\n    ],\n    author='',\n    author_email='',\n    url='',\n    keywords='web pyramid pylons',\n    packages=find_packages(),\n    include_package_data=True,\n    zip_safe=False,\n    install_requires=requires,\n    extras_require={\n        'testing': tests_require,\n    },\n    entry_points = \"\"\"\\\n    [paste.app_factory]\n    main = myproject:main\n    [console_scripts]\n    show_settings = myproject.scripts:settings_show\n    \"\"\",\n)\n```\n\n----------------------------------------\n\nTITLE: Change directory to home directory (Unix)\nDESCRIPTION: Changes the current directory to the user's home directory on a Unix-like system. This command is a prerequisite for generating a Pyramid project from a cookiecutter template.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ~\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple View Configurations with @bfg_view (Python)\nDESCRIPTION: This snippet demonstrates how to register multiple view configurations for a single view callable using stacked ``@bfg_view`` decorators. Each decorator invocation registers a separate view configuration without requiring ZCML.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom repoze.bfg.view import bfg_view\n\n@bfg_view(name='edit')\n@bfg_view(name='change')\ndef edit(context, request):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Custom JSON renderer adapter for serialization in Pyramid\nDESCRIPTION: This code snippet illustrates how to create a custom JSON renderer and add an adapter to handle the serialization of custom types (e.g., datetime objects). The adapter function converts the object to a serializable format.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.renderers import JSON\n\nif __name__ == '__main__':\n    config = Configurator()\n    json_renderer = JSON()\n    def datetime_adapter(obj, request):\n```\n\n----------------------------------------\n\nTITLE: Performing a Translation with the Localizer\nDESCRIPTION: This Python code demonstrates how to perform a translation using the localizer object. It creates a TranslationString, retrieves the localizer from the request, and translates the string using localizer.translate().\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.i18n import TranslationString\n\nts = TranslationString('Add ${number}', mapping={'number':1},\n                       domain='pyramid')\n\ndef aview(request):\n    localizer = request.localizer\n    translated = localizer.translate(ts) # translation string\n    # ... use translated ...\n```\n\n----------------------------------------\n\nTITLE: Subscribing to IBeforeRender Event in Pyramid\nDESCRIPTION: This code snippet demonstrates how to subscribe to the IBeforeRender event in Pyramid. The event is triggered before a renderer is invoked, allowing applications to modify renderer globals. The subscriber function, add_global, adds a key-value pair ('mykey': 'foo') to the event's dictionary-like interface, making it available to the renderer.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.0.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom repoze.events import subscriber\nfrom pyramid.interfaces import IRendererGlobalsEvent\n\n@subscriber(IRendererGlobalsEvent)\ndef add_global(event):\n    event['mykey'] = 'foo'\n```\n\n----------------------------------------\n\nTITLE: Serving Static Assets from a Package Directory (Python)\nDESCRIPTION: This example demonstrates using add_static_view with an asset specification as the path argument.  It serves static files from the 'a/b/c/static' directory within the 'some_package' Python package, making them accessible under the '/static' URL prefix.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# config is an instance of pyramid.config.Configurator\nconfig.add_static_view(name='static', path='some_package:a/b/c/static')\n```\n\n----------------------------------------\n\nTITLE: Use Custom Configurator Directive\nDESCRIPTION: This snippet demonstrates how to use the custom configurator directive defined in the previous snippet. It calls the `add_protected_xhr_views` directive to automatically add views for GET, POST, and HEAD requests.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advanced-features.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('xhr_route', '/xhr/{id}')\nconfig.add_protected_xhr_views('my.package')\n```\n\n----------------------------------------\n\nTITLE: Console Script Example - Python\nDESCRIPTION: Example script that prints the deployment settings for a Pyramid application.  It uses optparse to handle command-line arguments and pyramid.paster.bootstrap to access the application's settings.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n# myproject.scripts module\n\nimport optparse\nimport sys\nimport textwrap\n\nfrom pyramid.paster import bootstrap\n\ndef settings_show():\n    description = \"\"\"\\\n    Print the deployment settings for a Pyramid application.  Example:\n    'show_settings deployment.ini'\n    \"\"\"\n    usage = \"usage: %prog config_uri\"\n    parser = optparse.OptionParser(\n        usage=usage,\n        description=textwrap.dedent(description)\n        )\n    parser.add_option(\n        '-o', '--omit',\n        dest='omit',\n        metavar='PREFIX',\n        type='string',\n        action='append',\n        help=(\"Omit settings which start with PREFIX (you can use this \"\n              \"option multiple times\")\n        )\n\n    options, args = parser.parse_args(sys.argv[1:])\n    if not len(args) >= 1:\n        print('You must provide at least one argument')\n        return 2\n    config_uri = args[0]\n    omit = options.omit\n    if omit is None:\n        omit = []\n    with bootstrap(config_uri) as env:\n        settings = env['registry'].settings\n        for k, v in settings.items():\n            if any([k.startswith(x) for x in omit]):\n                continue\n            print('%-40s     %-20s' % (k, v))\n```\n\n----------------------------------------\n\nTITLE: Add Translation Directory Programmatically\nDESCRIPTION: Shows how to add a translation directory programmatically during application startup using `config.add_translation_dirs`. This registers the message catalogs within the directory to be used for translations.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n```\n\n----------------------------------------\n\nTITLE: Hello World View Callable\nDESCRIPTION: This function defines a view callable named `hello_world` that accepts a request object and returns a Response object containing the text 'Hello world!'. This view will be associated with a specific route in the Pyramid application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/firstapp.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef hello_world(request):\n    return Response('Hello world!')\n```\n\n----------------------------------------\n\nTITLE: TranslationString with Default - Python\nDESCRIPTION: This code snippet demonstrates how to create a TranslationString with a default value. If a translation is not found, the default value will be used. The default value can also contain replacement values.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.i18n import TranslationString\nts = TranslationString('add-number', default='Add ${number}',\n                           domain='form', mapping={'number':1})\n```\n\n----------------------------------------\n\nTITLE: Run Project Tests (Shell)\nDESCRIPTION: Executes the project's test suite using `pytest`. This verifies the correctness of the project's code and ensures that it meets the specified requirements. Assumes `pytest` is installed as part of the 'testing' dependencies.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/cookiecutters/README.txt#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pytest\n```\n\n----------------------------------------\n\nTITLE: Run Project (Bash)\nDESCRIPTION: Starts the Pyramid web application server using `pserve`. `pserve` is a command-line tool for serving WSGI applications. `development.ini` is the configuration file that specifies the server settings and application configuration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/installation/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: View Returning String\nDESCRIPTION: This snippet demonstrates a simple Pyramid view that returns a string.  A response adapter is used to automatically convert the string to a proper HTTP response.  The `request` object is passed to the view function.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advanced-features.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef aview(request):\n    return \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Login Template HTML\nDESCRIPTION: This HTML template defines the structure of the login form. It includes fields for username and password. It uses TAL (Template Attribute Language) to conditionally display the login form and error messages.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/authorization.rst#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\n      xmlns:tal=\"http://xml.zope.org/namespaces/tal\"\n      xmlns:i18n=\"http://xml.zope.org/namespaces/i18n\">\n<head>\n  <meta http-equiv=\"content-type\"\n        content=\"text/html; charset=UTF-8\"/>\n  <title tal:content=\"message\">Login</title>\n</head>\n<body>\n  <h1 tal:content=\"message\">Login</h1>\n  <p tal:condition=\"not: login_url\">\n    You must <a href=\"${came_from}\">login</a>.\n  </p>\n\n  <p tal:condition=\"failure\">\n    <strong>Login failed</strong>\n  </p>\n\n  <form action=\"${login_url}\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">\n    <label>Username:\n      <input type=\"text\" name=\"login\" size=\"30\"\n             tal:attributes=\"value username\"/>\n    </label><br/>\n    <label>Password:\n      <input type=\"password\" name=\"password\" size=\"30\"/>\n    </label><br/>\n    <input type=\"submit\" value=\"Login\"/>\n  </form>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: ACL-based Authorization with ACLHelper in Pyramid\nDESCRIPTION: This snippet showcases how to use ACLHelper for ACL-based authorization in Pyramid.  It constructs a list of principals, including Everyone, Authenticated, the user's ID, and the user's group.  It then uses ACLHelper to check if the user's principals have the required permission on the context.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.authorization import ACLHelper, Everyone, Authenticated\n\nclass SecurityPolicy:\n    def permits(self, request, context, permission):\n        principals = [Everyone]\n        if identity is not None:\n            principals.append(Authenticated)\n            principals.append('user:' + identity.id)\n            principals.append('group:' + identity.group)\n        return ACLHelper().permits(context, principals, permission)\n```\n\n----------------------------------------\n\nTITLE: Associating View with Interface in Python\nDESCRIPTION: This snippet demonstrates how to associate a view callable with resources that implement or provide a specific interface using `config.add_view`. The `context` parameter is set to the fully qualified name of the interface.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/traversal.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# config is an instance of pyramid.config.Configurator\n\nconfig.add_view('mypackage.views.hello_world', name='hello.html',\n                    context='mypackage.resources.IHello')\n```\n\n----------------------------------------\n\nTITLE: Start Pyramid Application (Windows)\nDESCRIPTION: Starts the Pyramid application using 'pserve' within the virtual environment, using the 'development.ini' configuration file and enabling automatic reloading on code changes.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_23\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Upgrade Database with Alembic (Shell)\nDESCRIPTION: This command upgrades the database to the latest revision using Alembic and the 'development.ini' configuration. Requires Alembic to be installed and configured, and a database connection defined in 'development.ini'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/authentication/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nenv/bin/alembic -c development.ini upgrade head\n```\n\n----------------------------------------\n\nTITLE: Upgrade Alembic to Head\nDESCRIPTION: Upgrades the database schema to the latest revision using Alembic. Uses the development.ini for configuration. `head` means the latest available revision.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/views/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/alembic -c development.ini upgrade head\n```\n\n----------------------------------------\n\nTITLE: Using @bfg_view Decorator with Class Methods (Python)\nDESCRIPTION: This snippet illustrates the use of the ``@bfg_view`` decorator with a class method.  The view is registered for the class itself, and the class must have a constructor that accepts either ``context, request`` or just ``request``.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom webob import Response\nfrom repoze.bfg.view import bfg_view\n\nclass MyView(object):\n    def __init__(self, context, request):\n        self.context = context\n        self.request = request\n\n    @bfg_view(name='hello')\n    def amethod(self):\n        return Response('hello from %s!' % self.context)\n```\n\n----------------------------------------\n\nTITLE: Running pip install -e . on Windows\nDESCRIPTION: This code snippet shows the command to run `pip install -e .` on a Windows system. This command installs the package in editable mode, which means that changes to the source code are immediately reflected in the installed package. %VENV% represents the path to the virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/definingviews.rst#_snippet_2\n\nLANGUAGE: doscon\nCODE:\n```\ncd tutorial\n%VENV%\\Scripts\\pip install -e .\n```\n\n----------------------------------------\n\nTITLE: HTTP Redirect View (Raising HTTPFound) - Python\nDESCRIPTION: Demonstrates how to issue an HTTP redirect by raising an `HTTPFound` exception. This exception is caught by the default exception handler and turned into a redirect response. The `location` parameter specifies the URL to redirect to.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/views.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.httpexceptions import HTTPFound\n\ndef myview(request):\n    raise HTTPFound(location='http://example.com')\n```\n\n----------------------------------------\n\nTITLE: Renaming Pyramid Models to Resources API Changes\nDESCRIPTION: This snippet documents the API changes related to the renaming of the concept 'model' to 'resource' in the Pyramid framework.  It outlines the old API calls and their new equivalents. It shows the evolution of the framework and adaptation to better semantics.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_36\n\nLANGUAGE: text\nCODE:\n```\npyramid.url.model_url -> \n                        pyramid.url.resource_url\n\n      pyramid.traversal.find_model -> \n                        pyramid.url.find_resource\n\n      pyramid.traversal.model_path ->\n                        pyramid.traversal.resource_path\n\n      pyramid.traversal.model_path_tuple ->\n                        pyramid.traversal.resource_path_tuple\n\n      pyramid.traversal.ModelGraphTraverser -> \n                        pyramid.traversal.ResourceTreeTraverser\n\n      pyramid.config.Configurator.testing_models ->\n                        pyramid.config.Configurator.testing_resources\n\n      pyramid.testing.registerModels ->\n                        pyramid.testing.registerResources\n\n      pyramid.testing.DummyModel ->\n                        pyramid.testing.DummyResource\n```\n\n----------------------------------------\n\nTITLE: Introspect Route Pattern\nDESCRIPTION: This snippet shows how to use Pyramid's introspector to retrieve the route pattern associated with the current route.  It accesses the introspector via `request.registry.introspector` and retrieves the route pattern using the route name.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advanced-features.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\nfrom pyramid.response import Response\n\n@view_config(route_name='bar')\ndef show_current_route_pattern(request):\n    introspector = request.registry.introspector\n    route_name = request.matched_route.name\n    route_intr = introspector.get('routes', route_name)\n    return Response(str(route_intr['pattern']))\n```\n\n----------------------------------------\n\nTITLE: Using logging config substitutions\nDESCRIPTION: This example shows how to use variable substitutions in the logging sections of a Pyramid .ini file. The variables are populated from the pserve command line, allowing for dynamic configuration of logging levels.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\npserve development.ini LOGGING_LOGGER_ROOT_LEVEL=DEBUG\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pip in Virtual Environment\nDESCRIPTION: Upgrades the pip package installer within the created virtual environment. This ensures you have the latest version of pip.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/views/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Initializing a Pyramid application with Configurator in Python\nDESCRIPTION: This snippet demonstrates the simplest possible Pyramid application using imperative configuration. It imports necessary modules, defines a view callable that returns a 'Hello world!' response, and then uses the Configurator to add this view and create a WSGI application, which is served using a simple server. Requires the webob, wsgiref, and repoze.bfg libraries.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom webob import Response\nfrom wsgiref import simple_server\nfrom repoze.bfg.configuration import Configurator\n\n\ndef hello_world(request):\n    return Response('Hello world!')\n\n\nif __name__ == '__main__':\n    config = Configurator()\n    config.add_view(hello_world)\n    app = config.make_wsgi_app()\n    simple_server.make_server('', 8080, app).serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Run tests\nDESCRIPTION: Executes the pytest command to run the tests defined in the tutorial/tests.py file. The -q option instructs pytest to run in quiet mode, providing a minimal output.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/forms.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest tutorial/tests.py -q\n```\n\n----------------------------------------\n\nTITLE: Run Pytest with Coverage (Unix)\nDESCRIPTION: Runs the tests for the project using pytest with coverage reporting. The --cov flag enables coverage reporting, and the --cov-report=term-missing flag specifies that the report should be displayed in the terminal and should show missing lines.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest --cov --cov-report=term-missing\n```\n\n----------------------------------------\n\nTITLE: Basic Pyramid Test Setup and Teardown in Python\nDESCRIPTION: This snippet demonstrates how to set up and tear down a basic unit test environment in Pyramid using pyramid.testing.setUp and pyramid.testing.tearDown.  It initializes a Configurator and isolates the registry for each test case method.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/testing.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\nfrom pyramid import testing\n\nclass MyTest(unittest.TestCase):\n    def setUp(self):\n        self.config = testing.setUp()\n\n    def tearDown(self):\n        testing.tearDown()\n```\n\n----------------------------------------\n\nTITLE: Editing a Page View Function in Pyramid\nDESCRIPTION: This code snippet shows the implementation of the edit_page view function and its associated decorator. It configures the view to respond when the context is a Page resource and the view name is edit_page, using the templates/edit.pt template for rendering.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/definingviews.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: src/views/tutorial/views/default.py\n    :lines: 55-\n    :lineno-match:\n    :language: python\n```\n\n----------------------------------------\n\nTITLE: Tween Configuration using Configurator in Python\nDESCRIPTION: This Python code snippet shows how to configure Pyramid tweens programmatically using the Configurator. It sets the `pyramid.tweens` setting in the configuration's settings dictionary to a list of dotted Python names representing the tween factories. This approach is equivalent to configuring tweens in a PasteDeploy .ini file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/environment.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n \ndef main(global_config, **settings):\n    settings['pyramid.tweens'] = [\n        'pyramid_debugtoolbar.toolbar.tween_factory',\n        'pyramid.tweebs.excview_tween_factory',\n        'pyramid_tm.tm_tween_factory',\n    ]\n    config = Configurator(settings=settings)\n```\n\n----------------------------------------\n\nTITLE: Initialize Database with Default Data\nDESCRIPTION: Loads default data into the database using a script. Uses the development.ini file for database connection details.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/views/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/initialize_tutorial_db development.ini\n```\n\n----------------------------------------\n\nTITLE: Install Project with Testing Requirements\nDESCRIPTION: Installs the project in editable mode along with its testing dependencies. The editable mode allows changes to the project's source code to be reflected immediately without requiring reinstallation. The `[testing]` extra installs packages needed for testing the application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/models/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nenv/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Simplify Routes in __init__.py (Python)\nDESCRIPTION: This snippet shows how to simplify the routes configuration in the `__init__.py` file. It demonstrates how to define a route using `config.add_route` for both the root and the 'plain' views.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/request_response.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n   .. literalinclude:: request_response/tutorial/__init__.py\n       :linenos:\n```\n\n----------------------------------------\n\nTITLE: Change Directory (Shell)\nDESCRIPTION: This command navigates the current working directory to the 'tutorial' directory. This assumes that you are starting from the project root and want to move into the tutorial directory.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/authentication/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd tutorial\n```\n\n----------------------------------------\n\nTITLE: Successful pip install output\nDESCRIPTION: This code snippet shows the expected output after successfully running `pip install -e .`. It indicates that the `docutils` package and the `tutorial` package have been successfully installed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/definingviews.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nSuccessfully installed docutils-0.16 tutorial\n```\n\n----------------------------------------\n\nTITLE: View Lookup with Inheritance Hierarchy\nDESCRIPTION: This example illustrates view lookup searching valid views based on the inheritance hierarchy of the context. It demonstrates how views registered on super-types are now found even if there are predicate mismatches on more specific types.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.5.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass IResource(Interface):\n\n    ...\n\n@view_config(context=IResource)\ndef get(context, request):\n\n    ...\n\n@view_config(context=IResource, request_method='POST')\ndef post(context, request):\n\n    ...\n\n@view_config(context=IResource, request_method='DELETE')\ndef delete(context, request):\n\n    ...\n\n@implementer(IResource)\nclass MyResource:\n\n    ...\n\n@view_config(context=MyResource, request_method='POST')\ndef override_post(context, request):\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Authentication Helpers in a Pyramid Security Policy (Python)\nDESCRIPTION: This example demonstrates how to use authentication helpers provided by Pyramid, such as `SessionAuthenticationHelper`, within a custom security policy.  This simplifies the process of managing user authentication and session management by leveraging pre-built functionalities.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.security import Allowed, Denied\nfrom pyramid.authentication import SessionAuthenticationHelper\n\nclass SessionSecurityPolicy:\n    def __init__(self):\n        self.helper = SessionAuthenticationHelper()\n\n    def identity(self, request):\n        \"\"\" Return app-specific user object. \"\"\"\n        userid = self.helper.authenticated_userid(request)\n        if userid is None:\n            return None\n        return load_identity_from_db(request, userid)\n\n    def authenticated_userid(self, request):\n        \"\"\" Return a string ID for the user. \"\"\"\n        identity = self.identity(request)\n        if identity is None:\n            return None\n        return str(identity.id)\n\n    def permits(self, request, context, permission):\n        \"\"\" Allow access to everything if signed in. \"\"\"\n        identity = self.identity(request)\n        if identity is not None:\n            return Allowed('User is signed in.')\n        else:\n            return Denied('User is not signed in.')\n\n    def remember(self, request, userid, **kw):\n        return self.helper.remember(request, userid, **kw)\n\n    def forget(self, request, **kw):\n        return self.helper.forget(request, **kw)\n```\n\n----------------------------------------\n\nTITLE: Scanning for View Configurations in Pyramid\nDESCRIPTION: This code snippet demonstrates how to use the `config.scan()` method in Pyramid to find and process view configuration declarations resulting from the use of decorators like `@view_config`.  The `scan` method enables declarative configuration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# config is assumed to be an instance of the\n# pyramid.config.Configurator class\nconfig.scan()\n```\n\n----------------------------------------\n\nTITLE: Moving model_url API\nDESCRIPTION: The ``model_url`` function has been moved from ``repoze.bfg.traversal`` into ``repoze.bfg.url``. It now accepts a `query` keyword argument for composing a query string.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_47\n\nLANGUAGE: Python\nCODE:\n```\nrepoze.bfg.traversal.model_url\nrepoze.bfg.url.model_url\n```\n\nLANGUAGE: Python\nCODE:\n```\nrepoze.bfg.url.model_url(..., query={'param1': 'value1'})\n```\n\n----------------------------------------\n\nTITLE: Route Configuration with Scan\nDESCRIPTION: This code snippet shows how to configure a route using `config.add_route` and then use `config.scan` to automatically associate view callables with routes based on configuration decorators within a package.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('myroute', '/prefix/{one}/{two}')\nconfig.scan('mypackage')\n```\n\n----------------------------------------\n\nTITLE: Instantiating Pyramid Response Object\nDESCRIPTION: This Python code shows how to create a Pyramid Response object.  It imports the Response class and creates an instance with a body and a content type. It sets the response body to 'hello world!' and the content type to 'text/plain'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/webob.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\nresponse = Response(body='hello world!', content_type='text/plain')\n```\n\n----------------------------------------\n\nTITLE: Decorator Example in Pyramid\nDESCRIPTION: This example demonstrates how to use a decorator in Pyramid to measure the execution time of a view and add a custom header to the response. It also logs the execution time using the `log` module. The decorator receives a response object implementing `pyramid.interfaces.IResponse`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef log_timer(wrapped):\n    def wrapper(context, request):\n        start = time.time()\n        response = wrapped(context, request)\n        duration = time.time() - start\n        response.headers['X-View-Time'] = '%.3f' % (duration,)\n        log.info('view took %.3f seconds', duration)\n        return response\n    return wrapper\n```\n\n----------------------------------------\n\nTITLE: Running Pyramid Application with pserve\nDESCRIPTION: This command starts the Pyramid application using the `pserve` command, specifying the configuration file (`development.ini`) and enabling automatic reloading on code changes. The `$VENV/bin/` prefix indicates the command is run within a virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Accessing Authenticated User ID in Pyramid (Simplified)\nDESCRIPTION: This code snippet shows how an application developer can retrieve the authenticated user ID in Pyramid using the `request.authenticated_userid` attribute.  It demonstrates the simplified API exposed to application developers, hiding the underlying ZCA interaction.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nuserid = request.authenticated_userid\n```\n\n----------------------------------------\n\nTITLE: Install Project in Development Mode (Windows)\nDESCRIPTION: Installs the project in development mode using 'pip install -e', which creates a link to the project in the virtual environment. The '.[testing]' option installs the testing requirements defined in the pyproject.toml file. The VENV variable is used to locate the pip executable.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_14\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Modified Hello World Response with Error (Python)\nDESCRIPTION: This Python code snippet shows an intentionally modified function with an error.  `xResponse` is undefined. This code demonstrates how the `pyramid_debugtoolbar` will display a traceback for easy debugging of the issue.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/debugtoolbar.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef hello_world(request):\n    return xResponse('<body><h1>Hello World!</h1></body>')\n```\n\n----------------------------------------\n\nTITLE: Run Pytest with Coverage (Windows)\nDESCRIPTION: Runs the tests for the project using pytest with coverage reporting. The --cov flag enables coverage reporting, and the --cov-report=term-missing flag specifies that the report should be displayed in the terminal and should show missing lines.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_20\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pytest --cov --cov-report=term-missing\n```\n\n----------------------------------------\n\nTITLE: Install Project in Development Mode (Windows)\nDESCRIPTION: Installs the project in development mode using pip install -e. This allows for easy development and testing of the project. The \"[testing]\" extra installs testing dependencies.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_10\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Testing Data Output\nDESCRIPTION: Defines unit tests that focus on verifying the data returned by the view functions. The tests assert that the view functions return the expected data structures.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/templating.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom unittest import mock\n\nfrom pyramid import testing\n\n\ndef test_home_view():\n    request = testing.DummyRequest()\n    info = home(request)\n    assert info['name'] == 'Home'\n    assert info['values'] == [1, 2, 3]\n\n\ndef test_howdy_view():\n    request = testing.DummyRequest()\n    info = howdy(request)\n    assert info['name'] == 'Howdy'\n    assert info['values'] == [4, 5, 6]\n```\n\n----------------------------------------\n\nTITLE: setup.py Packages to Include\nDESCRIPTION: This snippet configures the packages to include in the setup.py file. It specifies the necessary modules required for pytest to run the tests for the package.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\npackages=find_packages(),\ninclude_package_data=True,\nzip_safe=False,\n\n```\n\n----------------------------------------\n\nTITLE: ACL Order Matters in Pyramid\nDESCRIPTION: This snippet demonstrates that the order of ACEs in an ACL matters. In this example, even though everyone is denied 'view' later in the ACL, the first ACE allows everyone to 'view', so the permission is granted.  ACLs are evaluated sequentially.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.authorization import Allow\nfrom pyramid.authorization import Deny\nfrom pyramid.authorization import Everyone\n\n__acl__ = [\n    (Allow, Everyone, 'view'),\n    (Deny, Everyone, 'view'),\n]\n```\n\n----------------------------------------\n\nTITLE: Add Views with Configurator\nDESCRIPTION: This snippet demonstrates adding multiple views using the `config.add_view` method, which can become tedious. It sets up routes and views for GET, POST, and HEAD requests on an xhr endpoint.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advanced-features.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\nconfig = Configurator()\nconfig.add_route('xhr_route', '/xhr/{id}')\nconfig.add_view('my.package.GET_view', route_name='xhr_route', xhr=True,\n    permission='view', request_method='GET')\nconfig.add_view('my.package.POST_view', route_name='xhr_route', xhr=True,\n    permission='view', request_method='POST')\nconfig.add_view('my.package.HEAD_view', route_name='xhr_route', xhr=True,\n    permission='view', request_method='HEAD')\n```\n\n----------------------------------------\n\nTITLE: WSGI Application Serving\nDESCRIPTION: This code serves the Pyramid application using the wsgiref server. It creates a server instance and then calls `serve_forever` to start listening for requests.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/firstapp.rst#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nserver = make_server('0.0.0.0', 6543, app)\nserver.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Load Default Data (Unix)\nDESCRIPTION: Loads default data into the database using the initialize_tutorial_db console script. This script populates the database with initial data.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/initialize_tutorial_db development.ini\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Traverser Class in Pyramid\nDESCRIPTION: This code snippet defines the interface that a custom traverser class must implement. The `__init__` method accepts the root object from the root factory, and the `__call__` method must return a dictionary containing traversal-related information, which will be available as attributes on the request object.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass Traverser(object):\n    def __init__(self, root):\n        \"\"\" Accept the root object returned from the root factory \"\"\"\n\n    def __call__(self, request):\n        \"\"\" Return a dictionary with (at least) the keys ``root``,\n        ``context``, ``view_name``, ``subpath``, ``traversed``,\n        ``virtual_root``, and ``virtual_root_path``.  These values are\n        typically the result of a resource tree traversal.  ``root``\n        is the physical root object, ``context`` will be a resource\n        object, ``view_name`` will be the view name used (a string),\n        ``subpath`` will be a sequence of strings that\n        followed the view name but were not traversed, ``traversed``\n        will be a sequence of strings that were traversed\n        (including the virtual root path, if any) ``virtual_root``\n        will be a resource object representing the virtual root (or the\n        physical root if traversal was not performed), and\n        ``virtual_root_path`` will be a sequence representing the\n        virtual root path (a sequence of strings) or ``None`` if\n        traversal was not performed.\n\n        Extra keys for special purpose functionality can be added as\n        necessary.\n\n        All values returned in the dictionary will be made available\n        as attributes of the ``request`` object.\n        \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Translation Directories in Pyramid\nDESCRIPTION: This snippet demonstrates how to add translation directories using the `add_translation_dirs` method of the Configurator object. This allows Pyramid to locate and merge translation catalogs from different locations.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\nconfig.add_translation_dirs('my.application:locale/',\n                                'another.application:locale/')\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Shell in Pyramid configuration\nDESCRIPTION: Shows how to specify a preferred list of REPL shells to use with the pshell command by using the 'default_shell' option in the '[pshell]' section of the application's .ini file.  The shells are tried in the order specified.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\n[pshell]\ndefault_shell = ptpython ipython bpython\n```\n\n----------------------------------------\n\nTITLE: Providing Interface for Resource Instance - Zope Interface\nDESCRIPTION: Demonstrates how to declare that a specific resource instance provides an interface, using `zope.interface.directlyProvides`. It defines an interface `IBlogEntry` and a class `BlogEntry`, then makes an instance of `BlogEntry` implement `IBlogEntry` directly.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/resources.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nfrom zope.interface import directlyProvides\nfrom zope.interface import Interface\n\nclass IBlogEntry(Interface):\n    pass\n\nclass BlogEntry(object):\n    def __init__(self, title, body, author):\n        self.title = title\n        self.body = body\n        self.author = author\n        self.created = datetime.datetime.now()\n\nentry = BlogEntry('title', 'body', 'author')\ndirectlyProvides(entry, IBlogEntry)\n\n```\n\n----------------------------------------\n\nTITLE: Create Python Virtual Environment\nDESCRIPTION: Creates a Python virtual environment named 'env' using the python3 interpreter.  This isolates project dependencies.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/models/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: ZCA Utility Lookup in Pyramid (Python)\nDESCRIPTION: This code snippet demonstrates how to look up a utility (settings) using the Zope Component Architecture (ZCA) in a Pyramid application. It retrieves settings by using the `getUtility` function from `zope.component` with the `ISettings` interface from `pyramid.interfaces`. The resulting `settings` variable will be a Python dictionary containing the application settings.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyramid.interfaces import ISettings\nfrom zope.component import getUtility\nsettings = getUtility(ISettings)\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Interfaces - Zope Interface\nDESCRIPTION: Shows how to implement an interface for a resource class using `zope.interface`. It defines an interface `IBlogEntry` and a class `BlogEntry` implementing that interface using the `@implementer` decorator. It requires the `zope.interface` package.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/resources.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nfrom zope.interface import implementer\nfrom zope.interface import Interface\n\nclass IBlogEntry(Interface):\n    pass\n\n@implementer(IBlogEntry)\nclass BlogEntry(object):\n    def __init__(self, title, body, author):\n        self.title = title\n        self.body = body\n        self.author = author\n        self.created = datetime.datetime.now()\n\n```\n\n----------------------------------------\n\nTITLE: Run Pyramid Project\nDESCRIPTION: Starts the Pyramid project using pserve within the 'env' virtual environment, using the 'development.ini' configuration file. Requires the pyramid framework to be installed and a 'development.ini' file to be present.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/models/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Create Python Virtual Environment\nDESCRIPTION: Creates a Python virtual environment named 'env'. This isolates project dependencies from the system-wide Python installation.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/myproject/README.txt#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: Run Tests (Windows)\nDESCRIPTION: Executes the pytest command with the '-q' option (quiet mode) within the virtual environment to run the project's tests. This requires the project to be installed in development mode and the testing requirements to be installed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_17\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pytest -q\n```\n\n----------------------------------------\n\nTITLE: Configuration file monitoring in pserve\nDESCRIPTION: This configuration snippet shows how to configure `pserve` to monitor additional files for changes during development, using the `watch_files` directive.  This allows the server to automatically restart when specified static assets, such as a favicon, are modified.  The paths can be absolute, relative, or asset specifications.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\n[pserve]\nwatch_files =\n    myproject/static/favicon.ico\n```\n\n----------------------------------------\n\nTITLE: Running Pyramid App\nDESCRIPTION: Starts the Pyramid application using pserve and enables automatic reloading. This command starts the server and monitors the project files for changes, automatically restarting the server when changes are detected.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/templating.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Running Pyramid Project\nDESCRIPTION: Starts the Pyramid project using the 'pserve' command, configured with the 'development.ini' file. This launches the web application for local development.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/views/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Accessing Registry Methods Instead of Global ZCA API - Python\nDESCRIPTION: Shows how to directly access ZCA registry methods as an alternative to the global API functions like `zope.component.getUtility`. This approach involves obtaining the Pyramid component registry using methods like `request.registry` or `pyramid.threadlocal.get_current_registry`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/zca.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nregistry.getUtility(IFoo)\n```\n\n----------------------------------------\n\nTITLE: Add new route for hello_json\nDESCRIPTION: Adds a new route named ``hello_json`` to the Pyramid application in the ``__init__.py`` file. This route will be used to serve JSON data.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/json.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n   .. literalinclude:: json/tutorial/__init__.py\n       :linenos:\n```\n\n----------------------------------------\n\nTITLE: Defining a Context Resource Class in Pyramid\nDESCRIPTION: This snippet defines a simple context resource class that accepts a request in its `__init__` method.  This is a basic example, and in a real application, this class would typically perform some initialization logic based on the request.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nclass Idea(object):\n    def __init__(self, request):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Copy view_classes step\nDESCRIPTION: Copies the results of the 'view_classes' step to a new directory named 'forms'. This sets up the initial project structure for the forms tutorial.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/forms.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ..; cp -r view_classes forms; cd forms\n```\n\n----------------------------------------\n\nTITLE: Cookiecutter Input Prompts (Text)\nDESCRIPTION: This shows example input prompts and responses when running the Pyramid cookiecutter. It demonstrates how to accept the default re-clone option and set project and repo names.  It also showcases how to choose options for template language and backend.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nYou've cloned ~/.cookiecutters/pyramid-cookiecutter-starter before.\nIs it okay to delete and re-clone it? [yes]: yes\nproject_name [Pyramid Scaffold]: myproject\nrepo_name [myproject]: myproject\nSelect template_language:\n1 - jinja2\n2 - chameleon\n3 - mako\nChoose from 1, 2, 3 [1]: 1\nSelect backend:\n1 - none\n2 - sqlalchemy\n3 - zodb\nChoose from 1, 2, 3 [1]: 1\n```\n\n----------------------------------------\n\nTITLE: Negotiate Locale Name with Pyramid\nDESCRIPTION: Demonstrates how to use the `negotiate_locale_name` function to determine the locale name for a request. This function interacts with the locale negotiator to determine the appropriate locale. It avoids caching behavior associated with the `request.locale_name` property.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.i18n import negotiate_locale_name\n\ndef aview(request):\n    locale_name = negotiate_locale_name(request)\n```\n\n----------------------------------------\n\nTITLE: Run Project\nDESCRIPTION: Starts the Pyramid application server using the pserve command. The development.ini file is used to configure the server.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/myproject/README.txt#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nenv/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration in development.ini\nDESCRIPTION: This snippet configures Python's logging system in `development.ini`.  It sets up the application as a logger (`hello_world`) and configures it to log messages at DEBUG or higher, using a standard logging format and handler.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\n[loggers]\nkeys = root, hello_world\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = INFO\nhandlers = console\n\n[logger_hello_world]\nlevel = DEBUG\nhandlers = console\nqualname = hello_world\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(asctime)s %(levelname)-5.5s [%(name)s:%(lineno)s][%(clientip)s] %(message)s\n```\n\n----------------------------------------\n\nTITLE: Copy and Install Project (bash)\nDESCRIPTION: Demonstrates how to copy the previous step's directory to a new directory and install the project. This ensures each step is isolated and provides a clean environment for development. `$VENV` represents the virtual environment path.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/tutorial_approach.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ..; cp -r package ini; cd ini\n$VENV/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Create Python Virtual Environment\nDESCRIPTION: Creates a Python virtual environment named 'env'.  Virtual environments isolate project dependencies, preventing conflicts with other Python projects. This is considered best practice for Python development.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/package/README.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: Configuring proutes Output Format\nDESCRIPTION: Demonstrates how to configure the columns displayed by the proutes command by specifying a 'format' option in the '[proutes]' section of the application's .ini file. Available formats are 'name', 'pattern', 'view', and 'method'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\n[proutes]\nformat = view\n         name\n         pattern\n```\n\nLANGUAGE: ini\nCODE:\n```\n[proutes]\nformat = view name pattern\n```\n\nLANGUAGE: ini\nCODE:\n```\n[proutes]\nformat = view, name, pattern\n```\n\n----------------------------------------\n\nTITLE: Using HTTP verb interfaces in views (GET/PUT/POST/DELETE/HEAD)\nDESCRIPTION: Interfaces specific to HTTP verbs (``IGETRequest``, ``IPOSTRequest``, ``IPUTRequest``, ``IDELETERequest``, ``IHEADRequest``) are attached to each request. These interfaces can be specified as the ``request_type`` attribute of a bfg view declaration. The more general ``IRequest`` interface can be used to catch all requests.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_40\n\nLANGUAGE: Python\nCODE:\n```\nrepoze.bfg.interfaces.IGETRequest\nrepoze.bfg.interfaces.IPOSTRequest\nrepoze.bfg.interfaces.IPUTRequest\nrepoze.bfg.interfaces.IDELETERequest\nrepoze.bfg.interfaces.IHEADRequest\nrepoze.bfg.interfaces.IRequest\n```\n\n----------------------------------------\n\nTITLE: Create login.pt for login form\nDESCRIPTION: This snippet involves creating a `login.pt` template file which contains the HTML markup for the login form.  This form will typically include fields for username and password.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/authentication.rst#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n.. literalinclude:: authentication/tutorial/login.pt\n    :language: html\n    :linenos:\n```\n\n----------------------------------------\n\nTITLE: Install Project in Editable Mode\nDESCRIPTION: Installs the project in editable mode along with its testing requirements. The '-e' flag allows for modifications to the project code without reinstalling. The '.[testing]' specifies the 'testing' extra dependencies defined in pyproject.toml.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/views/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a view with the JSON renderer in Pyramid\nDESCRIPTION: This code snippet shows how to configure a Pyramid view to use the 'json' renderer using the Configurator's add_view method. This configuration ensures that the view's return value is serialized to JSON.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_view('myproject.views.my_view', renderer='json')\n```\n\n----------------------------------------\n\nTITLE: Copy View Classes Directory (Bash)\nDESCRIPTION: Copies the 'view_classes' directory to 'jinja2' to start a new step in the tutorial. Changes the current directory to the newly created 'jinja2' directory.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/jinja2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ..; cp -r view_classes jinja2; cd jinja2\n```\n\n----------------------------------------\n\nTITLE: Cleaning up bootstrap environment - Python\nDESCRIPTION: Demonstrates how to properly close the bootstrap environment after using it, specifically when not using the 'with' statement. Calls the 'closer' callback to release resources.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.paster import bootstrap\nenv = bootstrap('/path/to/my/development.ini')\n\n# .. do stuff ...\n\nenv['closer']()\n```\n\n----------------------------------------\n\nTITLE: Resource URL Generation\nDESCRIPTION: Demonstrates the basic usage of `request.resource_url` to generate a URL for a given resource. The `resource` argument represents the resource object for which the URL is being generated. `request` is an instance of a Pyramid request object.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/resources.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nurl = request.resource_url(resource)\n```\n\n----------------------------------------\n\nTITLE: Running the Pyramid Project (Shell)\nDESCRIPTION: Starts the Pyramid project using the pserve command, configured by the 'development.ini' configuration file. This will start a development web server to serve the application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/tests/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Simple View Returning a Response Object (Python)\nDESCRIPTION: Illustrates a standard Pyramid view that returns a `Response` object, which is the explicit and preferred way to return content from a view. The import from `pyramid.response` is necessary.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advanced-features.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\n\ndef aview(request):\n    return Response(\"Hello world!\")\n```\n\n----------------------------------------\n\nTITLE: Upgrading Packaging Tools (Shell)\nDESCRIPTION: This command upgrades the pip package installer within the virtual environment. Upgrading pip ensures that the latest features and bug fixes are available for managing project dependencies. Requires an active virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/authorization/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Custom Route Predicate: TwentyTenPredicate (Python)\nDESCRIPTION: This code defines a custom route predicate `TwentyTenPredicate` that checks if the 'year' match argument is equal to '2010' when the route name is one of 'ymd', 'ym', or 'y'. It demonstrates accessing the route object and match dictionary within a predicate. The `add_route` examples register and use this predicate to conditionally match routes based on the year and route name.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nclass TwentyTenPredicate:\n    def __init__(self, val, info):\n        pass\n\n    def text(self):\n        return \"twenty_ten = True\"\n\n    phash = text\n\n    def __call__(self, info, request):\n        if info['route'].name in ('ymd', 'ym', 'y'):\n            return info['match']['year'] == '2010'\n\nconfig.add_route_predicate('twenty_ten', TwentyTenPredicate)\nconfig.add_route('y', '/{year}', twenty_ten=True)\nconfig.add_route('ym', '/{year}/{month}', twenty_ten=True)\nconfig.add_route('ymd', '/{year}/{month}/{day}', twenty_ten=True)\n```\n\n----------------------------------------\n\nTITLE: Rendering Template to Response (Chameleon ZPT)\nDESCRIPTION: This code snippet shows how to render a Chameleon ZPT template directly from a Pyramid view callable using `render_to_response`. It takes a template path, a dictionary of values to be passed to the template, and the request object as arguments. The function returns a response object containing the rendered template.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/templates.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.renderers import render_to_response\n\ndef sample_view(request):\n    return render_to_response('templates/foo.pt',\n                              {'foo':1, 'bar':2},\n                              request=request)\n```\n\n----------------------------------------\n\nTITLE: Using Pyramid's proutes Command in Bash\nDESCRIPTION: Illustrates how to use the proutes command to print a summary of the application's routes to the terminal.  The command requires the path to the application's .ini file as an argument.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/proutes development.ini\n```\n\n----------------------------------------\n\nTITLE: setup.py Test Requirements\nDESCRIPTION: This snippet demonstrates how to configure test requirements in `setup.py`.  It specifies `pytest` as the test runner, `WebTest` for functional testing, and `pytest-cov` for code coverage reporting. These are installed with `pip install -e \".[testing]\"`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nsetup_requires=[\n    'pytest-runner',\n],\ntests_require=[\n    'pytest',\n    'pytest-cov',\n    'webtest', # functional testing\n],\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Creates a Python virtual environment named 'env' within the project directory. This isolates project dependencies.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/views/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: Modify tests.py\nDESCRIPTION: Placeholder for the updated tests.py.  It would include tests for the views and functionality added by Deform.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/forms.rst#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n# This is a placeholder for the updated tests.py content.\n# It includes test cases for the views created using Deform.\nimport unittest\nfrom pyramid import testing\n\n\nclass ViewTests(unittest.TestCase):\n    def setUp(self):\n        self.config = testing.setUp()\n\n    def tearDown(self):\n        testing.tearDown()\n\n    def test_wiki_view(self):\n        from .views import wiki_view\n        request = testing.DummyRequest()\n        info = wiki_view(request)\n        self.assertIn('pages', info)\n\n    def test_wikipage_view(self):\n        from .views import wikipage_view, WikiPage\n        request = testing.DummyRequest()\n        request.matchdict['pagename'] = 'FrontPage'\n        from .views import PAGES\n        PAGES['FrontPage'] = WikiPage('FrontPage', 'This is the front page')\n        info = wikipage_view(request)\n        self.assertEqual(info['page'].title, 'FrontPage')\n\n    def test_wikipage_add(self):\n        from .views import wikipage_add\n        request = testing.DummyRequest()\n        info = wikipage_add(request)\n        self.assertIn('form', info)\n\n    def test_wikipage_edit(self):\n        from .views import wikipage_edit, WikiPage\n        request = testing.DummyRequest()\n        request.matchdict['pagename'] = 'FrontPage'\n        from .views import PAGES\n        PAGES['FrontPage'] = WikiPage('FrontPage', 'This is the front page')\n        info = wikipage_edit(request)\n        self.assertIn('form', info)\n\n```\n\n----------------------------------------\n\nTITLE: Initializing a Message Catalog with msginit\nDESCRIPTION: This command initializes a message catalog (.po) file for a specific locale (e.g., Spanish 'es') from a pre-generated .pot template. It uses the msginit command from Gettext and creates a directory structure for the locale.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncd /file/path/to/myapplication_setup.py\ncd myapplication/locale\nmkdir -p es/LC_MESSAGES\nmsginit -l es -o es/LC_MESSAGES/myapplication.po\n```\n\n----------------------------------------\n\nTITLE: Start Application on Windows with pserve (Pyramid)\nDESCRIPTION: This command starts the Pyramid application on Windows systems using `pserve` with the `development.ini` configuration file and enables reloading on code changes. It requires a virtual environment (`%VENV%`) to be set up and activated.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_22\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Change Directory in Bash\nDESCRIPTION: Changes the current working directory to the 'tutorial' directory. Assumes the current directory contains the 'tutorial' directory.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/models/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd tutorial\n```\n\n----------------------------------------\n\nTITLE: Remove Unnecessary Imports from Views\nDESCRIPTION: This code snippet removes imports from `views/default.py` that are no longer needed after implementing authorization.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/authorization.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\n\n```\n\n----------------------------------------\n\nTITLE: Installing the project with pip (Bash)\nDESCRIPTION: This command installs the project in editable mode using pip. The -e flag installs the project as a symbolic link, so changes to the source code are immediately reflected without needing to reinstall. It also generates/re-generates an egg at `ini/tutorial.egg-info`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/ini.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Upgrade Packaging Tools (Unix)\nDESCRIPTION: Upgrades pip and setuptools in the virtual environment using the pip install command. This ensures that the latest versions of these tools are used.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install --upgrade pip setuptools\n```\n\n----------------------------------------\n\nTITLE: Adding a View to a Hybrid Route in Pyramid\nDESCRIPTION: This code demonstrates associating a view with a specific route using the `route_name` argument. The view `mypackage.views.myview` will only be invoked when the route named 'home' is matched and the traversal results in an empty view name.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hybrid.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('home', '{foo}/{bar}/*traverse',\n                     factory='mypackage.routes.root_factory')\n    config.add_view('mypackage.views.myview', route_name='home')\n```\n\n----------------------------------------\n\nTITLE: Accessing the Localizer in a Pyramid view\nDESCRIPTION: This Python code shows how to access the localizer object from a Pyramid request. The localizer is used for performing translations and pluralizations within the application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef aview(request):\n    localizer = request.localizer\n```\n\n----------------------------------------\n\nTITLE: Upgrade Packaging Tools (pip)\nDESCRIPTION: This command upgrades the pip package installer within the created virtual environment to the latest version.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/tests/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Defining a Forbidden View (XML)\nDESCRIPTION: This code demonstrates how to define a 'forbidden' view using a ZCML directive. This specifies a view callable to be invoked when a view callable matches but the user is not authorized to access it. The 'view' attribute defines the name of the view callable.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<forbidden\n       view=\"helloworld.views.forbidden_view\"/>\n```\n\n----------------------------------------\n\nTITLE: Running Database Initialization Script (Bash)\nDESCRIPTION: This bash command executes the database initialization script. This script creates the database schema and populates it with initial data.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/databases.rst#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\n$VENV/bin/initialize_tutorial_db development.ini\n```\n\n----------------------------------------\n\nTITLE: Running Tests on Windows - DOSCON\nDESCRIPTION: This snippet provides the command to run tests on a Windows system using pytest. It assumes that a virtual environment has been created and activated.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/tests.rst#_snippet_5\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pytest -q\n```\n\n----------------------------------------\n\nTITLE: Root Factory Class Definition Python\nDESCRIPTION: This snippet defines a simple root factory class named `Root`.  It inherits from the `dict` class and its `__init__` method accepts a request object but does nothing. This serves as a basic example for creating custom root factories in Pyramid applications using traversal.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/traversal.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Root(dict):\n    def __init__(self, request):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Adding a Route with a Factory in Pyramid\nDESCRIPTION: This config.add_route example sets up a route named 'home' with a pattern that includes a traverse segment. The `factory` argument specifies the `root_factory` function, which will be used to generate the root object for traversal.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hybrid.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('home', '{foo}/{bar}/*traverse',\n                     factory='mypackage.routes.root_factory')\n```\n\n----------------------------------------\n\nTITLE: View Defaults with @view_defaults and Configurator.add_view (Python)\nDESCRIPTION: This code demonstrates how @view_defaults can be used with `config.add_view` to set default configurations when a class is passed as the `view` argument.  This reduces repetition in `config.add_view` calls.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\nfrom pyramid.config import Configurator\n\nclass RESTView(object):\n    def __init__(self, request):\n        self.request = request\n\n    def get(self):\n        return Response('get')\n\n    def post(self):\n        return Response('post')\n\n    def delete(self):\n        return Response('delete')\n\n    def main(global_config, **settings):\n        config = Configurator()\n        config.add_route('rest', '/rest')\n        config.add_view(\n            RESTView, route_name='rest', attr='get', request_method='GET')\n        config.add_view(\n            RESTView, route_name='rest', attr='post', request_method='POST')\n        config.add_view(\n            RESTView, route_name='rest', attr='delete', request_method='DELETE')\n        return config.make_wsgi_app()\n```\n\n----------------------------------------\n\nTITLE: Add Authentication Secret to testing.ini INI\nDESCRIPTION: Adds a new setting, `auth.secret`, to the `testing.ini` file.  This secret is used by the authentication policy for signing cookies.  A distinct secret value is needed to ensure the testing environment is isolated.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/authentication.rst#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:tutorial\npyramid.reload_templates = true\npyramid.debug_authorization = false\npyramid.debug_notfound = false\npyramid.debug_routematch = false\npyramid.default_locale_name = en\n\nsqlalchemy.url = sqlite:///%(here)s/tutorial.sqlite\n\nauth.secret = SECRET_FOR_TESTING\n```\n\n----------------------------------------\n\nTITLE: Run Project\nDESCRIPTION: Starts the Pyramid application using pserve. The 'development.ini' file provides configuration settings for the application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/sqla_demo/README.txt#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Listing Available Shells for pshell\nDESCRIPTION: Demonstrates how to list the available REPL shells that can be used with the pshell command using the '--list-shells' option. This displays the names of the supported shells, such as bpython, ipython, and python.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pshell --list-shells\n```\n\n----------------------------------------\n\nTITLE: Updating Tests for SQLAlchemy (Python)\nDESCRIPTION: This Python code updates the tests to include SQLAlchemy bootstrapping. It initializes the database and sets up the test environment to interact with the database using SQLAlchemy.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/databases.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport unittest\nimport transaction\n\nfrom pyramid import testing\n\nfrom ..models import (\n    DBSession,\n    Page,\n    Base,\n    )\n\n\nclass TestMyView(unittest.TestCase):\n    def setUp(self):\n        self.config = testing.setUp()\n        from sqlalchemy import create_engine\n        engine = create_engine('sqlite://')\n        DBSession.configure(bind=engine)\n        Base.metadata.create_all(engine)\n        with transaction.manager:\n            model = Page(title='Root', body='<p>Root</p>')\n            DBSession.add(model)\n\n    def tearDown(self):\n        DBSession.remove()\n        testing.tearDown()\n\n    def test_home(self):\n        from ..views import home\n        request = testing.DummyRequest()\n        info = home(request)\n        self.assertEqual(info['pages'][0].title, 'Root')\n        self.assertEqual(info['username'], None)\n\n    def test_add_page(self):\n        from ..views import add_page\n        from ..forms import WikiPageForm\n\n        # Simulate a POST request with valid data\n        request = testing.DummyRequest(post={'title': 'New Page', 'body': '<p>New Page Content</p>'})\n        request.method = 'POST'\n        form = WikiPageForm(request.POST)\n        \n        response = add_page(request)\n        \n        # Assert that the view returns a redirect to the homepage after successful form submission\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(response.location, '/')\n\n        # Verify that the new page has been added to the database\n        page = DBSession.query(Page).filter_by(title='New Page').first()\n        self.assertIsNotNone(page)\n        self.assertEqual(page.body, '<p>New Page Content</p>')\n\n```\n\n----------------------------------------\n\nTITLE: Changing Directory in Shell\nDESCRIPTION: Changes the current directory to the 'tutorial' directory. This step assumes you are at the root directory of the Pyramid project.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/views/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd tutorial\n```\n\n----------------------------------------\n\nTITLE: Resource Tree Structure\nDESCRIPTION: Example showing a resource tree structure for traversal examples.  This depicts the hierarchy of resources under the root ('/') with 'foo' and 'bar' as child resources.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/traversal.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/--\n   |\n   |-- foo\n        |\n        ----bar\n```\n\n----------------------------------------\n\nTITLE: Basic Pyramid App Startup Code - Python\nDESCRIPTION: Illustrates the basic structure of Pyramid startup code, including the creation of a Configurator instance and the inclusion of other packages. It highlights the automatic creation of a new application registry by the Configurator.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/zca.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\ndef app(global_settings, **settings):\n    config = Configurator(settings=settings)\n    config.include('some.other.package')\n    return config.make_wsgi_app()\n```\n\n----------------------------------------\n\nTITLE: Run Tests (Bash)\nDESCRIPTION: Runs the project's tests using pytest. Pytest is a popular Python testing framework. This command executes the test suite to ensure the application code is working as expected. Tests are essential for maintaining code quality and preventing regressions.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/installation/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pytest\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Shell for pshell\nDESCRIPTION: Illustrates how to register a custom REPL shell for use with pshell by defining an entry point in the application's setup.py file under the 'pyramid.pshell_runner' group.  This allows integration with custom REPL environments.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsetup(\n    entry_points={\n        'pyramid.pshell_runner': [\n            'myshell=my_app:ptpython_shell_factory',\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: ImportError Example\nDESCRIPTION: This code demonstrates the ImportError that occurs if the MyModel is not removed before running the application, as it references a deleted class.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/definingmodels.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nImportError: cannot import name MyModel\n```\n\n----------------------------------------\n\nTITLE: Overriding Application with Configurator Scan, Commit, and Add View\nDESCRIPTION: This snippet demonstrates how to override configuration in an existing Pyramid application using `config.scan` to find configuration decorations, followed by `config.commit` to apply the original configuration, and then adding a new view to override the existing one. This is necessary when you want to replace existing behavior.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/extending.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == '__main__':\n    config.scan('someotherpackage')\n    config.commit()\n    config.add_view('mypackage.views.myview', name='myview')\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests in Bash\nDESCRIPTION: This command executes the project's tests using pytest, a popular Python testing framework. The tests are run within the context of the activated virtual environment to ensure proper isolation.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/basiclayout/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pytest\n```\n\n----------------------------------------\n\nTITLE: Run Project Tests\nDESCRIPTION: This command executes the project's tests using pytest. Pytest needs to be installed in the virtual environment.  It runs all tests defined in the project.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/basiclayout/README.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pytest\n```\n\n----------------------------------------\n\nTITLE: Resource URL Generation with Extra Path Elements\nDESCRIPTION: Illustrates how to append extra path elements to a resource URL using `request.resource_url`. The extra positional arguments, 'foo' and 'bar', will be appended to the base URL of the resource.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/resources.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nurl = request.resource_url(resource, 'foo', 'bar')\n```\n\n----------------------------------------\n\nTITLE: DummyTemplateRenderer.assert_ method in view tests\nDESCRIPTION: The ``DummyTemplateRenderer.assert_`` method accepts keyword arguments and performs assertions that the renderer received these keys with values equal to the asserted values. This simplifies view testing by asserting specific parameters passed to the renderer.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_41\n\nLANGUAGE: Python\nCODE:\n```\nDummyTemplateRenderer.assert_(key1=value1, key2=value2)\n```\n\n----------------------------------------\n\nTITLE: Cloning Pyramid Repository via HTTPS\nDESCRIPTION: This code snippet demonstrates how to clone the Pyramid repository from GitHub using HTTPS. It requires the user to authenticate with their GitHub login credentials.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/index.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngit clone https://github.com/Pylons/pyramid.git\n```\n\n----------------------------------------\n\nTITLE: View Defaults with @view_defaults and Configurator.add_view (Refactored) (Python)\nDESCRIPTION: This is a refactored version of the previous example, using @view_defaults to set the 'route_name' and therefore simplifying the calls to `config.add_view`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_defaults\nfrom pyramid.response import Response\nfrom pyramid.config import Configurator\n\n@view_defaults(route_name='rest')\nclass RESTView(object):\n    def __init__(self, request):\n        self.request = request\n\n    def get(self):\n        return Response('get')\n\n    def post(self):\n        return Response('post')\n\n    def delete(self):\n        return Response('delete')\n\n    def main(global_config, **settings):\n        config = Configurator()\n        config.add_route('rest', '/rest')\n        config.add_view(RESTView, attr='get', request_method='GET')\n        config.add_view(RESTView, attr='post', request_method='POST')\n        config.add_view(RESTView, attr='delete', request_method='DELETE')\n        return config.make_wsgi_app()\n```\n\n----------------------------------------\n\nTITLE: Copy and Install Project Dependencies (Bash)\nDESCRIPTION: This command sequence copies the 'view_classes' project directory to 'routing', navigates into it, and installs the project dependencies using pip.  It sets up the environment for the routing tutorial.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/routing.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ..; cp -r view_classes routing; cd routing\n$VENV/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Run Pyramid App (Bash)\nDESCRIPTION: Executes the Pyramid application using the Python interpreter within a virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/hello_world.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/python app.py\n```\n\n----------------------------------------\n\nTITLE: Updating a Message Catalog with msgmerge\nDESCRIPTION: This command updates an existing message catalog (.po) file based on changes to the .pot file. It uses the msgmerge command from Gettext. The --update flag ensures that existing translations are preserved while new or changed messages are added.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncd /file/path/to/myapplication_setup.py\ncd myapplication/locale\nmsgmerge --update es/LC_MESSAGES/myapplication.po myapplication.pot\n```\n\n----------------------------------------\n\nTITLE: Generating Resource Path with Extra Segments\nDESCRIPTION: Illustrates how to append extra path segments to a resource path using `pyramid.traversal.resource_path`. The extra positional arguments, 'foo' and 'bar', will be appended to the base path of the resource.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/resources.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.traversal import resource_path\nurl = resource_path(resource, 'foo', 'bar')\n```\n\n----------------------------------------\n\nTITLE: Accessing ZCA Registry in Pyramid Core (Preferred)\nDESCRIPTION: This code demonstrates the preferred way to access the ZCA registry within Pyramid's core code: by retrieving the current registry from `pyramid.threadlocal` and using it to query for utilities.  This makes the registry access more explicit.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.interfaces import ISecurityPolicy\nfrom pyramid.threadlocal import get_current_registry\nregistry = get_current_registry()\npolicy = registry.getUtility(ISecurityPolicy)\n```\n\n----------------------------------------\n\nTITLE: Run Project Tests (Shell)\nDESCRIPTION: This command executes the project's tests using pytest. Requires pytest to be installed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/authentication/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nenv/bin/pytest\n```\n\n----------------------------------------\n\nTITLE: Equivalent Route Patterns\nDESCRIPTION: This example illustrates that route patterns can start with or without a leading slash, and they are treated equivalently.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n{foo}/bar/baz\n```\n\nLANGUAGE: text\nCODE:\n```\n/{foo}/bar/baz\n```\n\n----------------------------------------\n\nTITLE: Define Available Languages in INI file\nDESCRIPTION: Demonstrates how to configure the list of available languages within a Pyramid application's `.ini` file. This list is used by a custom locale negotiator to determine the supported languages for the application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_33\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:MyProject\n# ...\navailable_languages = fr de en ru\n```\n\n----------------------------------------\n\nTITLE: Set VENV Environment Variable (Unix)\nDESCRIPTION: Sets the VENV environment variable to the absolute path of the virtual environment directory. This variable is used in subsequent commands to reference the virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport VENV=~/tutorial\n```\n\n----------------------------------------\n\nTITLE: Configuring Accept View Order in Pyramid (Python)\nDESCRIPTION: This code snippet demonstrates how to configure the preferred order of views based on the Accept header using add_accept_view_order. It shows how to specify a relative ordering between media types to control view selection when the client's Accept header is ambiguous.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\ndef main(global_config, **settings):\n    config = Configurator(settings=settings)\n    config.add_accept_view_order('text/html')\n    config.add_accept_view_order(\n        'application/json',\n        weighs_more_than='text/html',\n    )\n    config.scan()\n    return config.make_wsgi_app()\n```\n\n----------------------------------------\n\nTITLE: Install Testing Dependencies using pip in Bash\nDESCRIPTION: This snippet demonstrates how to install testing dependencies for a Pyramid project using pip and a virtual environment. It uses the -e flag for editable installs and specifies the 'testing' extra requirements defined in the setup.py file. It assumes a virtual environment is already set up.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/testing.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Package Resources (XML)\nDESCRIPTION: This snippet shows how to override an entire package's resources using the ``resource`` ZCML directive. This can be used to replace default templates or assets within a package with custom versions.  The 'to_override' attribute specifies the package to replace and 'override_with' is the replacing package.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<resource\n  to_override=\"some.package\"\n  override_with=\"another.package\"\n />\n```\n\n----------------------------------------\n\nTITLE: Running Pyramid App on Windows\nDESCRIPTION: This DOS command is used to execute the helloworld.py script using the Python interpreter within a virtual environment (%VENV%). It starts the Pyramid application, making it accessible through a web browser.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/firstapp.rst#_snippet_2\n\nLANGUAGE: Doscon\nCODE:\n```\n%VENV%\\Scripts\\python helloworld.py\n```\n\n----------------------------------------\n\nTITLE: Renaming Pyramid Resource to Asset API Changes\nDESCRIPTION: This snippet documents the API changes associated with renaming the concept 'resource' to 'asset' within the Pyramid framework.  It presents the original API calls alongside their updated counterparts, reflecting the change in terminology.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_37\n\nLANGUAGE: text\nCODE:\n```\npyramid.config.Configurator.absolute_resource_spec ->\n                        pyramid.config.Configurator.absolute_asset_spec\n\n      pyramid.config.Configurator.override_resource ->\n                        pyramid.config.Configurator.override_asset\n```\n\n----------------------------------------\n\nTITLE: Installing Project in Editable Mode (Shell)\nDESCRIPTION: This command installs the Pyramid project in editable mode using pip. The '-e' flag allows changes to the project's source code to be immediately reflected without requiring reinstallation. '[testing]' installs additional dependencies for running tests. Requires an active virtual environment and a setup.py or pyproject.toml file in the project root.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/authorization/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Starting Pyramid with pserve (Bash)\nDESCRIPTION: Illustrates the command used to start a Pyramid application using pserve and a development configuration file. This command invokes the Pyramid application using settings in the development.ini file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/startup.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Popping an Empty Flash Message - Python\nDESCRIPTION: This doctest demonstrates popping flash messages from an empty queue. First, a message is added to the queue and popped. Then, popping from the now empty queue returns an empty list.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/sessions.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> request.session.flash('info message')\n>>> request.session.pop_flash()\n['info message']\n>>> request.session.pop_flash()\n[]\n```\n\n----------------------------------------\n\nTITLE: Add docutils dependency to pyproject.toml (Python)\nDESCRIPTION: This snippet demonstrates how to add the 'docutils' package as a dependency to the 'pyproject.toml' file of a Pyramid project. This ensures that the application can use the docutils library for reStructuredText processing. It requires editing the pyproject.toml file and rerunning pip install.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/definingviews.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n[project]\nname = \"tutorial\"\nversion = \"0.0\"\ndescription = \"\"\nauthors = [\"Alan Bellows <alan@sockpuppet.org>\"]\ndependencies = [\n    \"pyramid\",\n    \"pyramid_debugtoolbar\",\n    \"waitress\",\n    \"sqlalchemy\",\n    \"zope.sqlalchemy\",\n    \"psycopg2\",\n    \"bcrypt\",\n    \"docutils\",\n]\n[project.optional-dependencies]\ndev = [\"pyramid_tm\",]\n\n[options]\ninclude_package_data = true\npackages = find:\n\n[options.entry_points]\npylon.pyramid_factories =\n    tutorial = tutorial:main\n```\n\n----------------------------------------\n\nTITLE: Run Tests (Bash)\nDESCRIPTION: This command executes the tests located in the 'tutorial/tests.py' file using pytest. The '-q' flag indicates a quiet mode, reducing the verbosity of the output. It verifies the correctness of the routing configuration and associated views.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/routing.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest tutorial/tests.py -q\n```\n\n----------------------------------------\n\nTITLE: Obtain Locale Name from Localizer\nDESCRIPTION: Shows how to obtain the locale name using the `localizer` attribute of the request object.  The `localizer` provides access to localization-related functions and properties. This method is equivalent to accessing `request.locale_name`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndef aview(request):\n    localizer = request.localizer\n    locale_name = localizer.locale_name\n```\n\n----------------------------------------\n\nTITLE: Creating Login Template (login.jinja2) HTML\nDESCRIPTION: Defines the structure and content of the login form using Jinja2 templating. This template will be used to render the login page, allowing users to enter their credentials. No dependencies are listed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/authentication.rst#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"${request.route_url('login')}\" method=\"POST\">\n  <label for=\"login\">Login</label>\n  <input type=\"text\" name=\"login\" id=\"login\" size=\"30\"\n         value=\"${request.params.get('login', '')}\">\n  <br>\n  <label for=\"password\">Password</label>\n  <input type=\"password\" name=\"password\" id=\"password\" size=\"30\">\n  <br>\n  <input type=\"submit\" value=\"Login\">\n  <input type=\"hidden\" name=\"came_from\" value=\"${came_from}\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Define Wiki Class - Python\nDESCRIPTION: This code snippet defines the Wiki class, which inherits from persistent.mapping.PersistentMapping. This class serves as the root resource for the Pyramid application and holds Page objects.  It includes setting __parent__ and __name__ attributes to None.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/definingmodels.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Wiki(PersistentMapping):\n    __parent__ = None\n    __name__ = None\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom View Predicate in Pyramid (Python)\nDESCRIPTION: This snippet demonstrates how to register a custom view predicate using `config.add_view_predicate` in Pyramid. It allows view authors to use the custom predicate in view configurations. Requires a callable `my.package.ABCPredicate` that determines the predicate's truthiness based on the request and view configuration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.4.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nconfig.add_view_predicate('abc', my.package.ABCPredicate)\n```\n\n----------------------------------------\n\nTITLE: Defining a simple event subscriber in Python\nDESCRIPTION: This code defines a simple subscriber function that accepts an event object as input and prints it to the console. It serves as a basic example of an event listener in the Pyramid framework.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/events.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef mysubscriber(event):\n    print(event)\n```\n\n----------------------------------------\n\nTITLE: Directive with Configuration Introspection\nDESCRIPTION: This code snippet demonstrates how to create a custom directive with configuration introspection in Pyramid. It defines an `add_jammyjam` directive that registers a value in the registry and creates an introspectable object using `config.introspectable`. The introspectable is then associated with the action using the `introspectables` keyword argument of `config.action`, allowing introspection tools to display information about this directive.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/extconfig.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef add_jammyjam(config, value):\n    def register():\n        config.registry.jammyjam = value\n    intr = config.introspectable(category_name='jammyjams',\n                                 discriminator='jammyjam',\n                                 title='a jammyjam',\n                                 type_name=None)\n    intr['value'] = value\n    config.action('jammyjam', register, introspectables=(intr,))\n\nif __name__ == '__main__':\n    config = Configurator()\n    config.add_directive('add_jammyjam', add_jammyjam)\n```\n\n----------------------------------------\n\nTITLE: Using Recommended Static View\nDESCRIPTION: This code snippet shows the recommended way of using the `static_view` class from `pyramid.static`. It replaces the deprecated `static` class and includes the `use_subpath=True` argument.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/upgrading.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\n\nfrom pyramid.static import static_view\nmyview = static_view('static', 'static', use_subpath=True)\n```\n\n----------------------------------------\n\nTITLE: Cookiecutter Template Configuration Text\nDESCRIPTION: This text shows example configurations for the Pyramid project scaffold. It prompts the user for project details such as project name, repository name, template language, and backend.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/modwsgi/index.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nYou've cloned ~/.cookiecutters/pyramid-cookiecutter-starter before.\nIs it okay to delete and re-clone it? [yes]: yes\nproject_name [Pyramid Scaffold]: myproject\nrepo_name [myproject]: myproject\nSelect template_language:\n1 - jinja2\n2 - chameleon\n3 - mako\nChoose from 1, 2, 3 [1]: 1\nSelect backend:\n1 - none\n2 - sqlalchemy\n3 - zodb\nChoose from 1, 2, 3 [1]: 1\n```\n\n----------------------------------------\n\nTITLE: Upgrade pip\nDESCRIPTION: Upgrades the pip package installer within the virtual environment. Uses the pip executable located in the virtual environment's 'bin' directory.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/views/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Creating CSS file (CSS)\nDESCRIPTION: This CSS code defines a simple style for the body element, setting the font family to sans-serif. This file is served as a static asset and linked to in the HTML template to style the page.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/static_assets.rst#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nbody {\n    font-family: sans-serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Hello World Pyramid App\nDESCRIPTION: This is the simplest Pyramid application, which defines a view that returns 'Hello world!' when the root URL is visited. It imports necessary modules from Pyramid and wsgiref, configures a route and view, and serves the application using the wsgiref server.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/firstapp.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom wsgiref.simple_server import make_server\nfrom pyramid.config import Configurator\nfrom pyramid.response import Response\n\ndef hello_world(request):\n    return Response('Hello world!')\n\nif __name__ == '__main__':\n    with Configurator() as config:\n        config.add_route('hello', '/')\n        config.add_view(hello_world, route_name='hello')\n        app = config.make_wsgi_app()\n    server = make_server('0.0.0.0', 6543, app)\n    server.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Running pytest\nDESCRIPTION: This bash command runs the tests defined in 'tutorial/tests.py' using 'pytest'. The '-q' option makes the output less verbose.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/unit_testing.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest tutorial/tests.py -q\n.\n1 passed in 0.14 seconds\n```\n\n----------------------------------------\n\nTITLE: Subrequest Example with Literal Response Object in Pyramid\nDESCRIPTION: This code demonstrates a basic Pyramid application that uses `request.invoke_subrequest` to call `view_two` from `view_one`.  `view_one` constructs a new request for `/view_two`, invokes it as a subrequest, and returns the resulting response. `view_two` sets the response body and returns the response object.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/subrequest.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wsgiref.simple_server import make_server\nfrom pyramid.config import Configurator\nfrom pyramid.request import Request\n\ndef view_one(request):\n    subreq = Request.blank('/view_two')\n    response = request.invoke_subrequest(subreq)\n    return response\n\ndef view_two(request):\n    request.response.body = 'This came from view_two'\n    return request.response\n\nif __name__ == '__main__':\n    config = Configurator()\n    config.add_route('one', '/view_one')\n    config.add_route('two', '/view_two')\n    config.add_view(view_one, route_name='one')\n    config.add_view(view_two, route_name='two')\n    app = config.make_wsgi_app()\n    server = make_server('0.0.0.0', 8080, app)\n    server.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: View returning a dictionary rendered as JSON in Pyramid (repetition)\nDESCRIPTION: This is a repeated example of a Pyramid view that returns a dictionary.  Because the view is configured with the 'json' renderer, the dictionary is automatically serialized into a JSON response.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\n\n@view_config(renderer='json')\ndef hello_world(request):\n    return {'content':'Hello!'}\n```\n\n----------------------------------------\n\nTITLE: Upgrade Packaging Tools\nDESCRIPTION: Upgrades the pip package installer within the virtual environment. This ensures that the latest version of pip is used for installing dependencies.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/models/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nenv/bin/pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Run All Tests in a Class with tox\nDESCRIPTION: Runs all tests in a specific class using tox. This command allows for targeted testing of a particular class. The class is specified using pytest's node ID syntax. `$VENV` must be an environment variable set to the path to your virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HACKING.txt#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\n$ $TOX -e py -- tests/test_httpexceptions.py::TestHTTPMethodNotAllowed\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic in View Code (Python)\nDESCRIPTION: Illustrates a common pattern in view code where conditional logic is used to handle different user authentication states, which can become complex and harder to test.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advanced-features.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif request.user.is_authenticated:\n    # do one thing\nelse:\n    # do something else\n```\n\n----------------------------------------\n\nTITLE: Making AJAX request to Pyramid server\nDESCRIPTION: This JavaScript code snippet demonstrates how to make an AJAX request to a Pyramid server using jQuery. It sends a POST request with JSON data and specifies the content type as application/json. The URL points to the Pyramid server.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/webob.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\njQuery.ajax({type:'POST',\n                 url: 'http://localhost:6543/', // the pyramid server\n                 data: JSON.stringify({'a':1}),\n                 contentType: 'application/json'});\n```\n\n----------------------------------------\n\nTITLE: Pyramid Test Configuration Context Manager\nDESCRIPTION: This code demonstrates how to use the `pyramid.testing.testConfig` context manager to generate a Pyramid configurator within a test environment. This simplifies the process of setting up configurations for testing purposes.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nwith testing.testConfig(...):\n```\n\n----------------------------------------\n\nTITLE: Example Cookiecutter Prompt and Input\nDESCRIPTION: Shows an example interaction with the cookiecutter tool, demonstrating the prompts and user inputs required to configure the Pyramid project.  It includes accepting the default deletion of previous downloads, setting the project name, repository name, template language and backend.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nYou've downloaded ~/.cookiecutters/pyramid-cookiecutter-starter before.\nIs it okay to delete and re-download it? [yes]: yes\nproject_name [Pyramid Scaffold]: myproj\nrepo_name [myproj]: tutorial\nSelect template_language:\n1 - jinja2\n2 - chameleon\n3 - mako\nChoose from 1, 2, 3 [1]: 2\nSelect backend:\n1 - none\n2 - sqlalchemy\n3 - zodb\nChoose from 1, 2, 3 [1]: 3\n```\n\n----------------------------------------\n\nTITLE: Change directory to root directory (Windows)\nDESCRIPTION: Changes the current directory to the root directory on a Windows system. This command is a prerequisite for generating a Pyramid project from a cookiecutter template.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_1\n\nLANGUAGE: doscon\nCODE:\n```\ncd \\\n```\n\n----------------------------------------\n\nTITLE: Creating a Request Object with pyramid.scripting\nDESCRIPTION: This snippet demonstrates how to create a request object using the `pyramid.scripting.make_request` function. The resulting request will have a `registry` attribute. It's designed for use with `pyramid.scripting.prepare` and `pyramid.paster.bootstrap` to set up a test environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.scripting import make_request\nrequest = make_request('/')\n```\n\n----------------------------------------\n\nTITLE: Registering Configuration Decorators\nDESCRIPTION: This code demonstrates how to create a custom decorator using Venusian that registers a function with a Zope Component Architecture utility within the Pyramid application registry. The utility lookup is deferred until the scan is performed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nimport venusian\nfrom mypackage.interfaces import IMyUtility\n\nclass registerFunction(object):\n\n    def __init__(self, path):\n        self.path = path\n\n    def register(self, scanner, name, wrapped):\n        registry = scanner.config.registry\n        registry.getUtility(IMyUtility).register(\n            self.path, wrapped)\n\n    def __call__(self, wrapped):\n        venusian.attach(wrapped, self.register)\n        return wrapped\n```\n\n----------------------------------------\n\nTITLE: Adding view functions to default.py\nDESCRIPTION: This code adds imports and a regular expression to `tutorial/views/default.py`.  It removes the default `my_view` function and adds four new view functions: `view_wiki`, `view_page`, `add_page`, and `edit_page`. These functions handle different aspects of the wiki application, such as displaying the wiki, displaying a page, adding a page, and editing a page.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/definingviews.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport re\n\nfrom pyramid.response import Response\nfrom pyramid.view import view_config\n\nfrom pyramid.httpexceptions import (HTTPOk, HTTPFound, HTTPSeeOther,\n                                HTTPError, HTTPNotFound,\n                                HTTPForbidden)\n\n\n\n\nwikiwords = re.compile(r\"[A-Z][a-z]+[A-Z][a-z]+\")\n\n\n@view_config(context=\".models.Wiki\", renderer=\"templates/view.pt\")\ndef view_wiki(context, request):\n    return {}\n\n\n```\n\n----------------------------------------\n\nTITLE: Create Pyramid Development Directory\nDESCRIPTION: Creates a new directory for Pyramid development and navigates into it. This is the first step in setting up the development environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HACKING.txt#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ mkdir ~/hack-on-pyramid\n$ cd ~/hack-on-pyramid\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Pytest (Bash)\nDESCRIPTION: This bash command executes the tests in the `tutorial/tests.py` file using pytest. The `-q` flag is used for quiet mode, which reduces the verbosity of the output.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/logging.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest tutorial/tests.py -q\n....\n```\n\n----------------------------------------\n\nTITLE: Logging Setup in views/default.py\nDESCRIPTION: This snippet shows how to import and set up logging in a Python module. It imports the `logging` module and gets a logger instance, typically within a Pyramid view.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlog = logging.getLogger(__name__)\n```\n\n----------------------------------------\n\nTITLE: Determining if a Resource is in the Lineage of Another\nDESCRIPTION: Demonstrates how to check if one resource is in the lineage of another resource using `pyramid.location.inside`. Returns `True` if resource1 is an ancestor of resource2; otherwise, returns `False`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/resources.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass Thing(object): pass\n\na = Thing()\nb = Thing()\nb.__parent__ = a\n```\n\n----------------------------------------\n\nTITLE: Upgrading Packaging Tools\nDESCRIPTION: Upgrades the pip and setuptools packages within the created virtual environment. This ensures that the latest versions of these tools are used for installing project dependencies.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/logging/README.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pip install --upgrade pip setuptools\n```\n\n----------------------------------------\n\nTITLE: Creating project directory on macOS/Linux\nDESCRIPTION: Commands to create the required project directory structure on macOS and Linux systems using standard Unix commands.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/requirements.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# macOS and Linux\ncd ~\nmkdir -p projects/quick_tutorial\ncd projects/quick_tutorial\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pip in Virtual Environment (Bash)\nDESCRIPTION: This command upgrades the pip package installer within the 'env' virtual environment to the latest version. This ensures that you have the most up-to-date tools for managing project dependencies.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/basiclayout/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Access URL Data in View (Python)\nDESCRIPTION: This snippet demonstrates how to access values extracted from the URL using replacement patterns within a Pyramid view.  The 'request.matchdict' attribute provides a dictionary containing the values associated with each replacement pattern. 'first' and 'last' are expected to be keys in the dictionary, based on the route configuration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/routing.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nself.request.matchdict['first']\nself.request.matchdict['last']\n```\n\n----------------------------------------\n\nTITLE: Disabling Introspection in Pyramid (Python)\nDESCRIPTION: This code snippet demonstrates how to disable Pyramid's introspection feature when creating a Configurator instance. Setting `introspection=False` will prevent the generation and storage of introspectables during configuration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/introspector.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\nconfig = Configurator(..., introspection=False)\n```\n\n----------------------------------------\n\nTITLE: Displaying Session Value in Template\nDESCRIPTION: Shows how to display a value stored in the session within a Pyramid template. The template uses the session data to render dynamic content.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/sessions.rst#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n   .. literalinclude:: sessions/tutorial/home.pt\n       :language: html\n       :linenos:\n```\n\n----------------------------------------\n\nTITLE: Run Pytest (Unix)\nDESCRIPTION: Runs the tests for the project using pytest. The -q flag specifies quiet mode, which reduces the amount of output.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest -q\n```\n\n----------------------------------------\n\nTITLE: Subscriber Decorator with Custom Predicate in Pyramid (Python)\nDESCRIPTION: This code demonstrates how to use the `@subscriber` decorator with a custom predicate. The `yosubscriber` function will only be called if the `request_path_startswith` predicate matches (i.e., the request path starts with '/add_yo').\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_47\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyramid.events import subscriber\n\n@subscriber(NewRequest, request_path_startswith='/add_yo')\ndef yosubscriber(event):\n    event.request.yo = 'YO!'\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory (Shell)\nDESCRIPTION: Changes the current working directory to the project directory named 'tutorial'. This assumes that the user is not already in the correct directory and that the project directory is named 'tutorial'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/tests/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd tutorial\n```\n\n----------------------------------------\n\nTITLE: Upgrade Packaging Tools\nDESCRIPTION: Upgrades the pip package installer within the virtual environment. This ensures you have the latest version of pip for installing project dependencies.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/installation/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Running Tests with pytest (Bash)\nDESCRIPTION: This bash command runs the tests using pytest. The -q flag suppresses verbose output.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/databases.rst#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\n$VENV/bin/pytest tutorial/tests.py -q\n```\n\n----------------------------------------\n\nTITLE: Preparing a Pyramid Environment with pyramid.scripting\nDESCRIPTION: This snippet demonstrates how to prepare a Pyramid environment using the `pyramid.scripting.prepare` function. It accepts a registry and returns information including the request object, similar to `pyramid.paster.bootstrap` but at a lower level. This is useful when you already have a request and registry available.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.scripting import prepare\ninfo = prepare(registry=myregistry)\nrequest = info['request']\nprint request.route_url('myroute')\n```\n\n----------------------------------------\n\nTITLE: Commenting out pyramid_debugtoolbar in development.ini\nDESCRIPTION: This configuration snippet shows how to disable the pyramid_debugtoolbar by commenting out the `pyramid_debugtoolbar` line in the `pyramid.includes` setting within `development.ini`. The `#` character *must* be in the first column.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\n# ... elided configuration\npyramid.includes =\n#    pyramid_debugtoolbar\n```\n\n----------------------------------------\n\nTITLE: Route Ordering Example (Text)\nDESCRIPTION: Shows an example of route ordering, where the order in which routes are defined affects which route is matched. In this case, the `members/abc` route will never be matched.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_22\n\nLANGUAGE: text\nCODE:\n```\nmembers/{def}\n```\n\nLANGUAGE: text\nCODE:\n```\nmembers/abc\n```\n\n----------------------------------------\n\nTITLE: Installing Pyramid and Waitress on macOS/Linux\nDESCRIPTION: Command to install Pyramid and Waitress using pip within the virtual environment on macOS and Linux.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/requirements.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install \"pyramid==\\ |release|\\ \" waitress\n```\n\n----------------------------------------\n\nTITLE: Development.ini Configuration (INI)\nDESCRIPTION: This INI file configures the Pyramid application settings, including the database engine URL, transaction manager, and other application-specific settings. It specifies the location of the SQLite database file and configures the pyramid_tm tween for transaction management.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/databases.rst#_snippet_1\n\nLANGUAGE: INI\nCODE:\n```\n[app:main]\nsqlalchemy.url = sqlite:///%(here)s/tutorial.sqlite\ntransaction.manager = pyramid_tm.tm_tween_factory\n\n[server:main]\nhost = 0.0.0.0\nport = 6543\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment\nDESCRIPTION: This command creates a virtual environment named 'env' for a Python project. It's essential for isolating project dependencies. This is a standard venv command.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/modwsgi/index.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd myproject\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: Run Project Tests\nDESCRIPTION: Executes the project's test suite using pytest. This verifies that the project's code is functioning as expected.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/installation/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pytest\n```\n\n----------------------------------------\n\nTITLE: Defining a Root Factory Function in Pyramid\nDESCRIPTION: This code snippet defines a simple `root_factory` function that returns a `root` object. This factory can then be used in a route configuration to provide the root of the resource tree for traversal.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hybrid.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef root_factory(request):\n    return root\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Path Segments Environment Variable\nDESCRIPTION: This example demonstrates how to set the BFG_UNICODE_PATH_SEGMENT environment variable to a false value. This disables the default behavior of decoding URL path segments to Unicode before passing them to the __getitem__ method of a model object, reverting to the older behavior of passing raw byte strings.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\nBFG_UNICODE_PATH_SEGMENTS=0\n```\n\n----------------------------------------\n\nTITLE: Route Path Remainder URL Quoting\nDESCRIPTION: Illustrates the change in URL quoting behavior for remainder matches in route paths. Previously, string values were tacked on untouched, but now they are URL-quoted (except for embedded slashes). This snippet shows how to create a route with a remainder and then generate a URL using route_path.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.3.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('remain', '/foo*remainder')\nrequest.route_path('remain', remainder='abc / def')\n# -> '/foo/abc%20/%20def'\n```\n\n----------------------------------------\n\nTITLE: Defining a Not Found View (XML)\nDESCRIPTION: This code demonstrates how to define a 'notfound' view using a ZCML directive.  This specifies a view callable to be invoked when no other view matches the incoming request. The 'view' attribute specifies the fully qualified name of the view callable.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<notfound \n        view=\"helloworld.views.notfound_view\"/>\n```\n\n----------------------------------------\n\nTITLE: Overriding Templates with ZCML Resource Directive (XML)\nDESCRIPTION: This code demonstrates how to use the ``resource`` ZCML directive to override Chameleon templates. It allows replacing templates within a package with others, enabling customization and theming. The 'to_override' attribute specifies the template to replace, and 'override_with' points to the replacement template.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<resource\n  to_override=\"some.package:templates/mytemplate.pt\"\n  override_with=\"another.package:othertemplates/anothertemplate.pt\"\n />\n```\n\n----------------------------------------\n\nTITLE: Setuptools setup file\nDESCRIPTION: Defines dependencies, testing requirements, and distribution settings for the Pyramid application using Setuptools. It contains metadata like name, version, description, classifiers, author information, URL, keywords, and package details. Includes options for finding packages, including non-Python files, zip safety, and required packages (install_requires).\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom setuptools import setup, find_packages\n\nrequires = [\n    'pyramid',\n    'pyramid_jinja2',\n    'pyramid_debugtoolbar',\n    'waitress',\n]\n\nsetup(name='myproject',\n      version='0.0',\n      description='myproject',\n      long_description='''\\nLong description here\\n''',\n      classifiers=[\n          \"Programming Language :: Python\",\n          \"Framework :: Pyramid\",\n          \"Topic :: Internet :: WWW/HTTP\",\n          \"Topic :: Internet :: WWW/HTTP :: WSGI :: Application\",\n      ],\n      author='',\n      author_email='',\n      url='',\n      keywords='web pyramid pylons',\n      packages=find_packages(),\n      include_package_data=True,\n      zip_safe=False,\n      install_requires=requires,\n      entry_points={\n          'paste.app_factory': [\n              'main = myproject:main',\n          ],\n      },\n)\n\n```\n\n----------------------------------------\n\nTITLE: Upgrading pip in Virtual Environment (Shell)\nDESCRIPTION: Upgrades the pip package installer within the created virtual environment. This ensures the latest version of pip is used for installing project dependencies. Assumes a virtual environment named 'env' has been created.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/tests/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Load Default Data into Database\nDESCRIPTION: This command runs a script to load default data into the database. The script is named 'initialize_tutorial_db' and uses the 'development.ini' configuration file to connect to the database.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/basiclayout/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/initialize_tutorial_db development.ini\n```\n\n----------------------------------------\n\nTITLE: Upgrade Packaging Tools (Unix)\nDESCRIPTION: Upgrades the 'pip' and 'setuptools' packages within the virtual environment using pip.  This ensures that the latest versions of these tools are used for managing project dependencies.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install --upgrade pip setuptools\n```\n\n----------------------------------------\n\nTITLE: Upgrade Pip (Shell)\nDESCRIPTION: This command upgrades the pip package installer within the created virtual environment. It ensures you have the latest version of pip for package management.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/authentication/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nenv/bin/pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Using the Pylons Controller View Mapper\nDESCRIPTION: This example shows how to use the custom `PylonsControllerViewMapper` and `BaseController` to define a controller with an action method. The configuration sets up routes that map URLs to the controller's methods using the view mapper.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n# user application\n\nfrom pyramid.response import Response\nfrom pyramid.config import Configurator\nimport pyramid_handlers\nfrom wsgiref.simple_server import make_server\n\nclass MyController(BaseController):\n    def index(self, id):\n        return Response(id)\n\nif __name__ == '__main__':\n    config = Configurator()\n    config.include(pyramid_handlers)\n    config.add_handler('one', '/{id}', MyController, action='index')\n    config.add_handler('two', '/{action}/{id}', MyController)\n    server = make_server('0.0.0.0', 8080, config.make_wsgi_app())\n    server.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Registering Exception View with Route\nDESCRIPTION: Shows how to combine an exception view with route predicates. The `notfound_view` will only be called when the `NotFound` exception is raised and the matched route has the name `home`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom repoze.bfg.view import bfg_view\nfrom repoze.bfg.exceptions import NotFound\nfrom webob.exc import HTTPNotFound\n\n@bfg_view(context=NotFound, route_name='home')\ndef notfound_view(request):\n    return HTTPNotFound()\n```\n\n----------------------------------------\n\nTITLE: BeforeRender Update Method Documentation\nDESCRIPTION: This documentation describes the `update` method of the `BeforeRender` event.  It explains how to update a dictionary (D) from a dictionary/iterable (E) and keyword arguments (F). If E has a .keys() method, it iterates through E; otherwise, it iterates through E as (k, v) pairs. Then it iterates through the keyword arguments F.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/api/events.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef update(E, **F):\n    \"\"\"Update D from dict/iterable E and F. If E has a .keys() method, does:\n    for k in E: D[k] = E[k] If E lacks .keys() method, does: for (k, v) in\n    E: D[k] = v.  In either case, this is followed by: for k in F: D[k] = F[k].\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests on Unix - Bash\nDESCRIPTION: This snippet provides the command to run tests on a Unix-based system using pytest. It assumes that a virtual environment has been created and activated.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/tests.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest -q\n```\n\n----------------------------------------\n\nTITLE: Moving Settings class and get_options function\nDESCRIPTION: The ``repoze.bfg.registry.Settings`` class and ``repoze.bfg.registry.get_options`` function have been moved to ``repoze.bfg.settings.Settings`` and ``repoze.bfg.settings.get_options`` respectively. The old locations are deprecated.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_45\n\nLANGUAGE: Python\nCODE:\n```\nrepoze.bfg.registry.Settings\nrepoze.bfg.settings.Settings\nrepoze.bfg.registry.get_options\nrepoze.bfg.settings.get_options\n```\n\n----------------------------------------\n\nTITLE: Preparing Pyramid Environment\nDESCRIPTION: This code snippet demonstrates the usage of `pyramid.scripting.prepare` to prepare a Pyramid environment for scripting. It takes a registry as input and returns a dictionary containing the request object, which can then be used to generate URLs.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.1.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.scripting import prepare\ninfo = prepare(registry=myregistry)\nrequest = info['request']\nprint request.route_url('myroute')\n```\n\n----------------------------------------\n\nTITLE: Plural Forms Example in Message Catalog\nDESCRIPTION: This text block shows an example of plural form definitions within a message catalog. It defines the pluralization rules (nplurals and plural) and provides translations for different plural forms of 'item_plural'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n\"Plural-Forms: nplurals=3; plural=n==0 ? 0 : n==1 ? 1 : 2;\"\n\nmsgid \"item_plural\"\nmsgid_plural \"\"\nmsgstr[0] \"No items\"\nmsgstr[1] \"${number} item\"\nmsgstr[2] \"${number} items\"\n```\n\n----------------------------------------\n\nTITLE: Virtual Environment Setup (Windows)\nDESCRIPTION: This snippet sets up a virtual environment for Python development on Windows. It defines an environment variable, creates the virtual environment, and installs the Pyramid framework using pip. The VENV variable specifies the location of the virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# set an environment variable to where you want your virtual environment\nc:\\> set VENV=c:\\env\n# create the virtual environment\nc:\\> python -m venv %VENV%\n# install pyramid\nc:\\> %VENV%\\Scripts\\pip install pyramid\n# or for a specific released version\nc:\\> %VENV%\\Scripts\\pip install \"pyramid==\\ |release|\\ \"\n```\n\n----------------------------------------\n\nTITLE: Example .ini Configuration for Pyramid App\nDESCRIPTION: This .ini file excerpt shows a typical configuration section for a Pyramid application. It includes settings such as `use` (which specifies the application entry point), `pyramid.reload_templates`, and `pyramid.debug_authorization`. These settings control the application's behavior and debugging features.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/environment.rst#_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:MyProject\npyramid.reload_templates = true\npyramid.debug_authorization = true\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a NewRequest Event in Pyramid (Python)\nDESCRIPTION: This code demonstrates how to subscribe to the `NewRequest` event in Pyramid using the `@subscriber` decorator. It imports the `NewRequest` event and `subscriber` decorator from `pyramid.events`, defines a function `my_job` decorated as a subscriber to `NewRequest`, and then executes some code when the event is triggered.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/introduction.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.events import NewRequest\nfrom pyramid.events import subscriber\n\n@subscriber(NewRequest)\ndef my_job(event):\n    do_something(event.request)\n```\n\n----------------------------------------\n\nTITLE: Subrequest Exception Handling Without Tweens in Pyramid\nDESCRIPTION: This code shows the default behavior of `invoke_subrequest` when an exception is raised in the subrequest view and `use_tweens` is `False`. The exception will be propagated to the caller, even if an exception view is defined.  The `emphasize-lines: 11-16` directive highlights key parts of the code.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/subrequest.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom wsgiref.simple_server import make_server\nfrom pyramid.config import Configurator\nfrom pyramid.request import Request\n\ndef view_one(request):\n    subreq = Request.blank('/view_two')\n    response = request.invoke_subrequest(subreq)\n    return response\n\ndef view_two(request):\n    raise ValueError('foo')\n\ndef excview(request):\n    request.response.body = b'An exception was raised'\n    request.response.status_int = 500\n    return request.response\n\nif __name__ == '__main__':\n    config = Configurator()\n    config.add_route('one', '/view_one')\n    config.add_route('two', '/view_two')\n    config.add_view(view_one, route_name='one')\n    config.add_view(view_two, route_name='two', renderer='string')\n    config.add_view(excview, context=Exception)\n    app = config.make_wsgi_app()\n    server = make_server('0.0.0.0', 8080, app)\n    server.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Generate Pyramid Project with Cookiecutter (Unix)\nDESCRIPTION: Generates a Pyramid project from the pyramid-cookiecutter-starter template using cookiecutter. This command is executed in the user's home directory on Unix-like systems.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ~\\ncookiecutter gh:Pylons/pyramid-cookiecutter-starter --checkout main\n```\n\n----------------------------------------\n\nTITLE: Pyramid Application Configuration\nDESCRIPTION: Configures the Pyramid application by importing the Configurator class and defining a 'main' function. This function sets up the application, adds support for Jinja2 templating, includes the routes.py module for routing, and scans for view registrations in the views.py module. The configuration returns a WSGI application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\n\ndef main(global_config, **settings):\n    \"\"\" This function returns a Pyramid WSGI application.\n    \"\"\"\n    with Configurator(settings=settings) as config:\n        config.include('pyramid_jinja2')\n        config.include('.routes')\n        config.scan()\n        return config.make_wsgi_app()\n\n```\n\n----------------------------------------\n\nTITLE: Mod_wsgi Configuration for Virtual Root\nDESCRIPTION: This Apache configuration snippet demonstrates how to set a virtual root for a Pyramid application using `mod_wsgi` and the `SetEnv` directive. It sets the `HTTP_X_VHM_ROOT` environment variable to `/cms`, indicating the root resource for traversal.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/vhosting.rst#_snippet_3\n\nLANGUAGE: apache\nCODE:\n```\n<Location />\n  SetEnv HTTP_X_VHM_ROOT /cms\n</Location>\n```\n\n----------------------------------------\n\nTITLE: Long Bash Command\nDESCRIPTION: Illustrates how long bash commands are split into multiple lines using the backslash character for readability. The example shows a pytest command with coverage reporting.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/typographical-conventions.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest tutorial/tests.py --cov-report term-missing \\\n    --cov=tutorial -q\n```\n\n----------------------------------------\n\nTITLE: Setup Mako Test Configuration\nDESCRIPTION: This code demonstrates how to set up a Pyramid test configuration to include Mako support for testing renderers. It includes `pyramid_mako` to ensure that Mako templates can be rendered during unit tests.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.5.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass ATest(unittest.TestCase):\n    def setUp(self):\n        self.config = pyramid.testing.setUp()\n        self.config.include('pyramid_mako')\n\n    def test_it(self):\n        result = pyramid.renderers.render('mypkg:templates/home.mako', {})\n```\n\n----------------------------------------\n\nTITLE: Running initialize_tutorial_db on Unix\nDESCRIPTION: This bash command executes the initialize_tutorial_db script, which is responsible for setting up the database based on the Alembic migrations and the logic defined in the initialize_db.py file. It uses the development.ini configuration file for database connection details. The $VENV variable represents the virtual environment path.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/definingmodels.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/initialize_tutorial_db development.ini\n```\n\n----------------------------------------\n\nTITLE: Run Project\nDESCRIPTION: Starts the Pyramid web application server using `pserve` and the `development.ini` configuration file. This makes the application accessible through a web browser.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/models/README.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nenv/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Set VENV Environment Variable (Windows)\nDESCRIPTION: Sets the VENV environment variable to the absolute path of the virtual environment directory. This variable is used in subsequent commands to reference the virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_4\n\nLANGUAGE: doscon\nCODE:\n```\nset VENV=c:\\\\tutorial\n```\n\n----------------------------------------\n\nTITLE: Run Tests (Bash)\nDESCRIPTION: This snippet shows how to run the tests in the `tutorial/tests.py` file using pytest. The `-q` flag is used to suppress output and only show the summary.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/request_response.rst#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$VENV/bin/pytest tutorial/tests.py -q\n.....\n5 passed in 0.30 seconds\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes and Views with Autocommit (Error Case) - Python\nDESCRIPTION: This snippet demonstrates the error that occurs when adding a view before its associated route in an autocommitting Configurator. The view attempts to add itself before the route exists, leading to an exception.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.2.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconfig = Configurator(autocommit=True)\nconfig.add_view('my.pkg.someview', route_name='foo')\nconfig.add_route('foo', '/foo')\n```\n\n----------------------------------------\n\nTITLE: Scripting with Pyramid using pyramid.paster.bootstrap Python\nDESCRIPTION: The code snippet demonstrates how to bootstrap a Pyramid environment using `pyramid.paster.bootstrap` for easier scripting. It loads the environment configuration from a development.ini file and retrieves a request object to generate a route URL.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.1.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.paster import bootstrap\ninfo = bootstrap('/path/to/my/development.ini')\nrequest = info['request']\nprint request.route_url('myroute')\n```\n\n----------------------------------------\n\nTITLE: Upgrade Packaging Tools in Virtual Environment\nDESCRIPTION: Upgrades the pip package installer within the 'env' virtual environment.  Requires a virtual environment to be set up.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/models/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Copy view_classes to json directory\nDESCRIPTION: Copies the results of the ``view_classes`` step to a new directory named ``json`` and installs the package in the virtual environment. This sets up the environment for working with JSON renderers.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/json.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ..; cp -r view_classes json; cd json\n$VENV/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: TranslationString with Replacement Markers - Python\nDESCRIPTION: This code snippet shows how to create a TranslationString with replacement markers. The ${number} marker will be replaced by a value from the 'mapping' dictionary.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.i18n import TranslationString\nts = TranslationString('Add ${number}')\n```\n\n----------------------------------------\n\nTITLE: Example Test Coverage Output\nDESCRIPTION: Demonstrates the kind of output generated when running tests with coverage. The output shows the coverage percentage for each module, along with missing lines.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n======================== test session starts =========================\nplatform darwin -- Python 3.9.0, pytest-6.2.1, py-1.10.0, pluggy-0.13.1\nrootdir: /filepath/tutorial, inifile: pytest.ini, testpaths: tutorial\nplugins: cov-2.10.1\ncollected 4 items\n\ntests/test_functional.py ..                                     [ 50%]\ntests/test_views.py ..                                          [100%]\n\n---------- coverage: platform darwin, python 3.7.3-final-0 -----------\nName                          Stmts   Miss  Cover   Missing\n-----------------------------------------------------------\ntutorial/__init__.py             16      0   100%\ntutorial/models/__init__.py       8      0   100%\ntutorial/pshell.py                6      4    33%   5-12\ntutorial/routes.py                2      0   100%\ntutorial/views/__init__.py        0      0   100%\ntutorial/views/default.py         4      0   100%\ntutorial/views/notfound.py        4      0   100%\n-----------------------------------------------------------\nTOTAL                            40      4    90%\n\n===================== 4 passed in 0.85 seconds =======================\n```\n\n----------------------------------------\n\nTITLE: Run Project Tests\nDESCRIPTION: Executes the project's test suite using pytest. This command assumes that pytest is installed as a testing dependency.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/myproject/README.txt#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nenv/bin/pytest\n```\n\n----------------------------------------\n\nTITLE: Build Distribution Packages\nDESCRIPTION: This command uses tox to build source distribution (sdist) and wheel packages for the release. These packages are then uploaded to PyPI.\nSOURCE: https://github.com/pylons/pyramid/blob/main/RELEASING.txt#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ tox -e build\n```\n\n----------------------------------------\n\nTITLE: Waitress Server Configuration\nDESCRIPTION: This configuration snippet shows how to configure the `waitress` WSGI server in a `development.ini` or `production.ini` file. It specifies that the `waitress` server should be used.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.3.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nuse = egg:waitress#main\n```\n\n----------------------------------------\n\nTITLE: Subscriber Predicate Example (Workaround)\nDESCRIPTION: This example shows a workaround for the previous limitation, where the predicate expects either a single `event` argument or a pair of `event` and `context` arguments, to avoid the TypeError.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass MyPredicate(object):\n    # portions elided...\n    def __call__(self, event, context=None):\n        return self.val == event.context.foo\n```\n\n----------------------------------------\n\nTITLE: Create Python Virtual Environment\nDESCRIPTION: Creates a Python virtual environment named 'env'.  This isolates the project's dependencies from the system's global Python installation, ensuring a consistent and reproducible environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/sqla_demo/README.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: Using ZCA Global Registry Directly - Python\nDESCRIPTION: Shows how to configure a Pyramid application to use the ZCA global registry directly instead of creating a new one. This involves retrieving the global registry and passing it to the Configurator constructor.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/zca.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom zope.component import getGlobalSiteManager\nfrom pyramid.config import Configurator\n\ndef app(global_settings, **settings):\n    globalreg = getGlobalSiteManager()\n    config = Configurator(registry=globalreg)\n    config.setup_registry(settings=settings)\n    config.include('some.other.application')\n    return config.make_wsgi_app()\n```\n\n----------------------------------------\n\nTITLE: Template for adding/editing (wikipage_addedit.pt)\nDESCRIPTION: A Chameleon template used for both adding and editing wiki pages. It renders the Deform form passed from the view and iterates over the form resources.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/forms.rst#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\n      xmlns:tal=\"http://xml.zope.org/namespaces/tal\"\n      xmlns:i18n=\"http://xml.zope.org/namespaces/i18n\">\n<head>\n  <meta http-equiv=\"content-type\"\n        content=\"text/html; charset=UTF-8\"/>\n  <title>Wiki Add/Edit</title>\n  <tal:comment condition=\"not: form/resources\">\n    This code is here to prevent Chameleon from complaining when no\n    resources are in the form.\n  </tal:comment>\n  <tal:repeat repeat=\"resource form/resources\">\n    <link tal:condition=\"resource/startswith('css:')\"\n          tal:attributes=\"href resource/split(':')[1]\"\n          rel=\"stylesheet\" type=\"text/css\" />\n    <script tal:condition=\"resource/startswith('js:')\"\n            tal:attributes=\"src resource/split(':')[1]\"\n            type=\"text/javascript\"></script>\n  </tal:repeat>\n</head>\n<body>\n\n<h1>Add/Edit Wiki Page</h1>\n<tal:content replace=\"structure form\" />\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Underlying Mechanism of hook_zca - Python\nDESCRIPTION: Illustrates the underlying code that `hook_zca` effectively executes. This code sets the hook for `getSiteManager` to use the `get_current_registry` function to retrieve the Pyramid application registry.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/zca.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom zope.component import getSiteManager\nfrom pyramid.threadlocal import get_current_registry\ngetSiteManager.sethook(get_current_registry)\n```\n\n----------------------------------------\n\nTITLE: Clone Pyramid Source Code\nDESCRIPTION: Clones the Pyramid source code from the GitHub repository.  Users can clone the read-only version or a writable fork. This command downloads the entire codebase to the local development directory.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HACKING.txt#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ git clone git://github.com/Pylons/pyramid.git .\n```\n\n----------------------------------------\n\nTITLE: Implement views, schemas, and dummy data in views.py\nDESCRIPTION: Implements the new views, form schemas using Colander, and sets up dummy data for the wiki application. This includes the logic for handling form submissions and rendering the wiki pages.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/forms.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# This is a placeholder for the views.py content.\n# It includes form schemas using Colander and view functions using Deform.\n\nimport colander\nimport deform\nfrom pyramid.view import view_config\nfrom pyramid.response import Response\nfrom pyramid.httpexceptions import HTTPFound\n\n\nclass WikiPage(\n    object\n):\n    def __init__(self, title, body, creation_date=None):\n        self.title = title\n        self.body = body\n\n\nPAGES = {\n    'FrontPage': WikiPage('FrontPage', 'This is the front page')\n}\n\n\nclass WikiPageForm(colander.Schema):\n    title = colander.SchemaNode(colander.String(),\n                                title='Page Title',\n                                validator=colander.Length(max=200))\n    body = colander.SchemaNode(colander.String(),\n                                title='Page Content',\n                                validator=colander.Length(min=1))\n\n\n@view_config(route_name='wiki', renderer='tutorial:templates/wiki_view.pt')\ndef wiki_view(request):\n    return {'pages': PAGES}\n\n\n@view_config(route_name='view_page', renderer='tutorial:templates/wikipage_view.pt')\ndef wikipage_view(request):\n    pagename = request.matchdict['pagename']\n    page = PAGES.get(pagename)\n    if page is None:\n        return HTTPFound(location=request.route_url('wiki'))\n    return {'page': page, 'pagename': pagename}\n\n\n@view_config(route_name='add_page', renderer='tutorial:templates/wikipage_addedit.pt')\ndef wikipage_add(request):\n    form = deform.Form(WikiPageForm(), buttons=('submit',))\n    if 'submit' in request.params:\n        controls = request.POST.items()\n        try:\n            appstruct = form.validate(controls)\n        except deform.ValidationFailure as e:\n            return {'form': e.render()}\n        title = appstruct['title']\n        body = appstruct['body']\n        PAGES[title] = WikiPage(title, body)\n        url = request.route_url('view_page', pagename=title)\n        return HTTPFound(location=url)\n    return {'form': form.render()}\n\n\n@view_config(route_name='edit_page', renderer='tutorial:templates/wikipage_addedit.pt')\ndef wikipage_edit(request):\n    pagename = request.matchdict['pagename']\n    page = PAGES.get(pagename)\n    if page is None:\n        return HTTPFound(location=request.route_url('wiki'))\n\n    form = deform.Form(WikiPageForm(), buttons=('submit',))\n\n    if 'submit' in request.params:\n        controls = request.POST.items()\n        try:\n            appstruct = form.validate(controls)\n        except deform.ValidationFailure as e:\n            return {'form': e.render()}\n\n        page.title = appstruct['title']\n        page.body = appstruct['body']\n        url = request.route_url('view_page', pagename=pagename)\n        return HTTPFound(location=url)\n\n    appstruct = {'title': page.title, 'body': page.body}\n    return {'form': form.render(appstruct)}\n\n```\n\n----------------------------------------\n\nTITLE: Import Statements in __init__.py (Python)\nDESCRIPTION: This snippet shows the initial import statements required for the Pyramid application. These imports are necessary to support various functionalities such as configuration, database connections, and exception handling.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/basiclayout.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport os\n\nfrom pyramid.config import Configurator\nfrom pyramid.response import Response\n\nfrom sqlalchemy import engine_from_config\n\nfrom .models import (\n    DBSession,\n    Base,\n    Root,\n    )\n\n```\n\n----------------------------------------\n\nTITLE: Predicate __call__ Example\nDESCRIPTION: Illustrates the usage of a predicate's __call__ method in relation to the ordering of interfaces. Demonstrates the scenario when the registration for the subscription uses [SomeContext, SomeEvent], and the predicate's __call__ method needs to reflect that ordering in its parameters.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef __call__(self, context, event):\n    return event.request.path.startswith(self.val)\n```\n\n----------------------------------------\n\nTITLE: Generating URLs for External Static Assets - Python\nDESCRIPTION: This snippet demonstrates how to generate a URL for a static asset served from an external URL using `request.static_url`. It constructs a URL that points to an image hosted on 'http://example.com'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nrequest.static_url('mypackage:images/logo.png')\n    # -> http://example.com/images/logo.png\n```\n\n----------------------------------------\n\nTITLE: Create Virtual Environment (Unix)\nDESCRIPTION: Creates a virtual environment using the python3 -m venv command. The virtual environment is created in the directory specified by the VENV environment variable.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv $VENV\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Deprecation\nDESCRIPTION: Deprecates importing `Unauthorized` from `repoze.bfg.security` in favor of `repoze.bfg.exceptions.Forbidden`. The old location still functions but emits a deprecation warning. This change also aligns the exception name with the system view it invokes.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n- The import of ``repoze.bfg.security.Unauthorized`` is deprecated in\n  favor of ``repoze.bfg.exceptions.Forbidden``.  The old location\n  still functions but emits a deprecation warning.  The rename from\n  ``Unauthorized`` to ``Forbidden`` brings parity to the name of\n  the exception and the system view it invokes when raised.\n```\n\n----------------------------------------\n\nTITLE: Paster Create Command (Pyramid < 1.3)\nDESCRIPTION: This command shows how to create a Pyramid application using paster in versions prior to 1.3. It uses the `paster create` command with the `pyramid_starter` template.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.3.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n$ $VENV/bin/paster create -t pyramid_starter foo\n```\n\n----------------------------------------\n\nTITLE: Run Project Tests\nDESCRIPTION: Executes the project's tests using pytest within the 'env' virtual environment. Requires pytest to be installed and configured.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/models/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pytest\n```\n\n----------------------------------------\n\nTITLE: Virtual Environment Setup (Linux)\nDESCRIPTION: This snippet sets up a virtual environment for Python development on Linux. It defines an environment variable, creates the virtual environment, and installs the Pyramid framework using pip.  The VENV variable specifies the location of the virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# set an environment variable to where you want your virtual environment\n$ export VENV=~/env\n# create the virtual environment\n$ python3 -m venv $VENV\n# install pyramid\n$ $VENV/bin/pip install pyramid\n# or for a specific released version\n$ $VENV/bin/pip install \"pyramid==\\ |release|\\ \"\n```\n\n----------------------------------------\n\nTITLE: Running Pyramid console scripts directly\nDESCRIPTION: This example demonstrates how to run Pyramid console scripts (pserve) directly using the python interpreter, allowing custom arguments to be passed at runtime. This is useful for specifying different Python versions or adding debugging flags.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.5.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npython -3 -m pyramid.scripts.pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Add import to models/__init__.py (Python)\nDESCRIPTION: This snippet shows how to add the necessary imports for authorization in the models/__init__.py file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/authorization.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import (\n    Column,\n    Integer,\n    String,\n    Unicode,\n    )\nfrom pyramid.authorization import Everyone\nfrom pyramid.authorization import Authenticated\nfrom pyramid.authorization import Allow\n```\n\n----------------------------------------\n\nTITLE: Start Pyramid application\nDESCRIPTION: Starts the Pyramid application using pserve, pointing it to the development.ini configuration file with the --reload option for automatic reloading on code changes.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/cookiecutters.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Registering an Exception View with Decorator (Python)\nDESCRIPTION: Registers a view callable to be executed when a `ValidationFailure` exception is raised. It uses the `exception_view_config` decorator from `pyramid.view` and imports the `ValidationFailure` exception from the `helloworld.exceptions` module. The view returns a response with a 500 status code.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/views.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import exception_view_config\nfrom helloworld.exceptions import ValidationFailure\n\n@exception_view_config(ValidationFailure)\ndef failed_validation(exc, request):\n    response =  Response('Failed validation: %s' % exc.msg)\n    response.status_int = 500\n    return response\n```\n\n----------------------------------------\n\nTITLE: Creating Forbidden Template (403.jinja2) HTML\nDESCRIPTION: Defines a simple template for displaying a \"403 Forbidden\" error message when a user attempts to access a resource they are not authorized to view. No dependencies are listed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/authentication.rst#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<p>\n  403 Forbidden\n</p>\n```\n\n----------------------------------------\n\nTITLE: Updating packaging tools on Windows\nDESCRIPTION: Command to upgrade pip and setuptools within the virtual environment on Windows.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/requirements.rst#_snippet_8\n\nLANGUAGE: doscon\nCODE:\n```\n# Windows\n%VENV%\\Scripts\\pip install --upgrade pip setuptools\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure\nDESCRIPTION: Demonstrates a simple directory structure with three Python files: app.py, app2.py, and config.py. Used to illustrate the problem of module-scope code execution and unintended side-effects.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n.\n|-- app.py\n|-- app2.py\n`-- config.py\n```\n\n----------------------------------------\n\nTITLE: Registering a View Callable for a Route in Pyramid\nDESCRIPTION: This code registers a view callable for a specific route in Pyramid. It first defines a route named 'favicon' that maps to the '/favicon.ico' URL. Then, it associates the 'myapp.views.favicon_view' callable with this route using config.add_view. This ensures that when the '/favicon.ico' URL is accessed, the specified view is executed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('favicon', '/favicon.ico')\nconfig.add_view('myapp.views.favicon_view', route_name='favicon')\n```\n\n----------------------------------------\n\nTITLE: Custom Security Policy Implementation (Pyramid, Python)\nDESCRIPTION: This example shows how to define a custom ISecurityPolicy to replace the built-in authentication and authorization policies. It uses AuthTktCookieHelper and ACLHelper. This class defines methods to determine identity, authenticated userid, permission, and implements remember and forget methods.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-2.0.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.authentication import AuthTktCookieHelper\nfrom pyramid.authorization import ACLHelper, Authenticated, Everyone\n\nclass MySecurityPolicy:\n    def __init__(self, secret):\n        self.helper = AuthTktCookieHelper(secret)\n\n    def identity(self, request):\n        # define our simple identity as None or a dict with userid and principals keys\n        identity = self.helper.identify(request)\n        if identity is None:\n            return None\n        userid = identity['userid']  # identical to the deprecated request.unauthenticated_userid\n\n        # verify the userid, just like we did before with groupfinder\n        principals = groupfinder(userid, request)\n\n        # assuming the userid is valid, return a map with userid and principals\n        if principals is not None:\n            return {\n                'userid': userid,\n                'principals': principals,\n            }\n\n    def authenticated_userid(self, request):\n        # defer to the identity logic to determine if the user is logged in\n        # and return None if they are not\n        identity = request.identity\n        if identity is not None:\n            return identity['userid']\n\n    def permits(self, request, context, permission):\n        # use the identity to build a list of principals, and pass them\n        # to the ACLHelper to determine allowed/denied\n        identity = request.identity\n        principals = set([Everyone])\n        if identity is not None:\n            principals.add(Authenticated)\n            principals.add(identity['userid'])\n            principals.update(identity['principals'])\n        return ACLHelper().permits(context, principals, permission)\n\n    def remember(self, request, userid, **kw):\n        return self.helper.remember(request, userid, **kw)\n\n    def forget(self, request, **kw):\n        return self.helper.forget(request, **kw)\n\nconfig.set_security_policy(MySecurityPolicy('seekrit'))\n```\n\n----------------------------------------\n\nTITLE: Repoze.who Challenge Decider Configuration\nDESCRIPTION: This code snippet shows how to configure repoze.who to react to both 403 Forbidden and 401 Unauthorized status codes.  It defines a challenge_decider function that checks if the status starts with '403' or '401'. This is necessary because a Pyramid change now returns 403 Forbidden for certain errors, which repoze.who needs to handle.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.0.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport zope.interface\nfrom repoze.who.interfaces import IChallengeDecider\n\ndef challenge_decider(environ, status, headers):\n    return status.startswith('403') or status.startswith('401')\nzope.interface.directlyProvides(challenge_decider, IChallengeDecider)\n```\n\n----------------------------------------\n\nTITLE: Adding Alternative Views Based on View Name in Pyramid\nDESCRIPTION: This example showcases how to define multiple views for the same route, differentiating them by the `name` argument, which represents the view name resulting from traversal. The view `mypackage.views.another_view` will be invoked when the route named 'home' is matched and traversal results in the view name 'another'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hybrid.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('home', '{foo}/{bar}/*traverse',\n                     factory='mypackage.routes.root_factory')\n    config.add_view('mypackage.views.myview', route_name='home')\n    config.add_view('mypackage.views.another_view', route_name='home',\n                    name='another')\n```\n\n----------------------------------------\n\nTITLE: Advanced Logging: Capturing Log Output to File (INI)\nDESCRIPTION: This set of snippets shows how to capture log output to a separate file using logging.FileHandler. It defines a handler for file logging, adds it to the list of handlers, and then configures the root logger to use both the console and file handlers.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/logging.rst#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[handler_filelog]\nclass = FileHandler\nargs = ('%(here)s/myproject.log','a')\nlevel = INFO\nformatter = generic\n```\n\nLANGUAGE: ini\nCODE:\n```\n[handlers]\nkeys = console, myproject, filelog\n```\n\nLANGUAGE: ini\nCODE:\n```\n[logger_root]\nlevel = INFO\nhandlers = console, filelog\n```\n\n----------------------------------------\n\nTITLE: Run Pyramid Project with Development Server\nDESCRIPTION: Starts the Pyramid project using the pserve command, which launches a development server based on the configuration in `development.ini`. This allows developers to test and iterate on their application locally. It uses the pserve executable within the 'env' virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/package/README.txt#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Pyramid Test Configuration using Context Manager in Python\nDESCRIPTION: This snippet demonstrates how to use a context manager with pyramid.testing.testConfig to automatically handle test setup and teardown. This simplifies the test structure for small, self-contained tests, automatically calling setUp and tearDown.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/testing.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\n\nclass MyTest(unittest.TestCase):\n\n    def test_my_function(self):\n        from pyramid import testing\n        with testing.testConfig() as config:\n            config.add_route('bar', '/bar/{id}')\n            my_function_which_needs_route_bar()\n```\n\n----------------------------------------\n\nTITLE: Performing a Pluralization with the Localizer (Message Identifier)\nDESCRIPTION: This Python code demonstrates how to perform a pluralization using the localizer object, employing a message identifier (singular) and a mapping for replacement value interpolation. 'n' determines the plural form based on the locale, requiring appropriate definitions in the message file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef aview(request):\n    localizer = request.localizer\n    num = 1\n    translated = localizer.pluralize('item_plural', '${number} items',\n        num, 'mydomain', mapping={'number':num})\n```\n\n----------------------------------------\n\nTITLE: Using ZCA Global API (Discouraged in Pyramid Core)\nDESCRIPTION: This snippet shows the direct usage of ZCA's global API functions like `zope.component.getUtility`. This pattern is discouraged in Pyramid's core code in favor of accessing the registry via `pyramid.threadlocal.get_current_registry`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.interfaces import ISecurityPolicy\nfrom zope.component import getUtility\npolicy = getUtility(ISecurityPolicy)\n```\n\n----------------------------------------\n\nTITLE: Repoze.bfg.message Exception Handling (Deprecated)\nDESCRIPTION: This code snippet demonstrates the deprecated method of accessing exception messages using `environ['repoze.bfg.message']`.  It highlights the attempt to retrieve the message from an exception object and assign it to the environment variable. This approach has been removed due to a bug, and the recommended approach is to use `request.exception[0]`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.1.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# \"why\" is an exception object\ntry: \n    msg = why[0]\nexcept:\n    msg = ''\n\nenviron['repoze.bfg.message'] = msg\n```\n\n----------------------------------------\n\nTITLE: Extending mimetypes for Brotli Encoding - Python\nDESCRIPTION: This snippet extends the mimetypes module to recognize the '.br' file extension as Brotli encoded content.  This ensures that Pyramid can properly serve Brotli compressed files.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmimetypes.encodings_map['.br'] = 'br'  # add brotli\n```\n\n----------------------------------------\n\nTITLE: Remainder Match Unicode URL (Text)\nDESCRIPTION: Example URL showing unicode characters in the remainder section of a route.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n/foo/La%20Pe%C3%B1a/a/b/c\n```\n\n----------------------------------------\n\nTITLE: WSGI App Creation\nDESCRIPTION: This line creates a WSGI application from the Pyramid configuration. The `make_wsgi_app` method returns a WSGI application object that can be used by any WSGI server.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/firstapp.rst#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\napp = config.make_wsgi_app()\n```\n\n----------------------------------------\n\nTITLE: Minimal Not Found View Implementation in Pyramid (Python)\nDESCRIPTION: This snippet shows a minimal implementation of a Not Found View in Pyramid. It imports `HTTPNotFound` from `pyramid.httpexceptions` and returns an instance of it, signaling a 404 error.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.httpexceptions import HTTPNotFound\n\ndef notfound(request):\n    return HTTPNotFound()\n```\n\n----------------------------------------\n\nTITLE: Accessing Settings in Pyramid\nDESCRIPTION: This snippet describes the deprecation of `pyramid.settings.get_settings` and suggests using `pyramid.threadlocals.get_current_registry().settings` or `request.registry.settings` to access settings. It indicates a shift in how settings are accessed within the Pyramid framework.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_39\n\nLANGUAGE: Python\nCODE:\n```\n``pyramid.settings.get_settings`` API is now deprecated.  Use\n``pyramid.threadlocals.get_current_registry().settings`` instead or use the\n``settings`` attribute of the registry available from the request\n(``request.registry.settings``).\n```\n\n----------------------------------------\n\nTITLE: Module-Scope Side Effects Example: config.py\nDESCRIPTION: Part of the module-scope side-effects example. This file defines the decorator and the list that is mutated by the decorator.  The list L is intended to store the decorated functions.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nL = []\n\ndef decorator(func):\n    L.append(func)\n    return func\n```\n\n----------------------------------------\n\nTITLE: Defining a Location-Aware Resource in Python\nDESCRIPTION: This snippet demonstrates how to make a resource object location-aware by defining `__name__` and `__parent__` attributes. Location-awareness enables ACL inheritance in Pyramid. The root object's `__parent__` should be set to None.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass Blog(object):\n    __name__ = ''\n    __parent__ = None\n```\n\n----------------------------------------\n\nTITLE: Running pytest on Windows\nDESCRIPTION: This DOS command executes the pytest test runner in quiet mode (-q) within a virtual environment. It assumes that the virtual environment is activated and the pytest package is installed within it. It illustrates running tests using pytest in a Windows environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/tests.rst#_snippet_1\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pytest -q\n```\n\n----------------------------------------\n\nTITLE: 404 Template (Jinja2, HTML)\nDESCRIPTION: This snippet represents the `404.jinja2` template, which is displayed when a page is not found. It's linked to the `notfound_view` in `tutorial/views/notfound.py`.  It provides a basic message indicating that the requested page was not found.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/definingviews.rst#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>404 Not Found</title>\n</head>\n<body>\n    <h1>404 Not Found</h1>\n    <p>The requested page was not found.</p>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Upgrade Database to Head Revision\nDESCRIPTION: This command upgrades the database to the latest revision (head) using Alembic and the 'development.ini' configuration file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/tests/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/alembic -c development.ini upgrade head\n```\n\n----------------------------------------\n\nTITLE: Running Pyramid Application with Deprecation Warnings (Windows)\nDESCRIPTION: These commands demonstrate how to start a Pyramid application interactively on Windows while ensuring that deprecation warnings are printed to the console using the PYTHONWARNINGS environment variable.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/upgrading.rst#_snippet_4\n\nLANGUAGE: doscon\nCODE:\n```\nset PYTHONWARNINGS=default\nScripts\\pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Installing Lingua using pip\nDESCRIPTION: This command installs the Lingua package using pip, the Python package installer. The virtual environment path ($VENV) must be correctly set before running this command. Lingua is needed for extracting messages from code and templates.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install lingua\n```\n\n----------------------------------------\n\nTITLE: Subscriber Predicate Example (Original)\nDESCRIPTION: This example illustrates a subscriber predicate that accepts only one argument in its `__call__` method, which would cause a TypeError at runtime when used against a multi-interface-registered subscription.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass MyPredicate(object):\n    # portions elided...\n    def __call__(self, event):\n        return self.val == event.context.foo\n```\n\n----------------------------------------\n\nTITLE: ITraverserFactory Return Value Change\nDESCRIPTION: Changes the expected return value from an object implementing `ITraverserFactory` from a sequence to a dictionary with specific keys. Old-style traversers that return a sequence will no longer work.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n- In 0.8a7, the return value expected from an object implementing\n  ``ITraverserFactory`` was changed from a sequence of values to a\n  dictionary containing the keys ``context``, ``view_name``,\n  ``subpath``, ``traversed``, ``virtual_root``, ``virtual_root_path``,\n  and ``root``.  Until now, old-style traversers which returned a\n  sequence have continued to work but have generated a deprecation\n  warning.  In this release, traversers which return a sequence\n  instead of a dictionary will no longer work.\n```\n\n----------------------------------------\n\nTITLE: Example Successful Installation Output\nDESCRIPTION: Illustrates the expected output after successfully installing the project and its testing requirements. It lists the successfully installed packages and their versions.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nSuccessfully installed BTrees-4.7.2 Chameleon-3.8.1 Mako-1.1.3 MarkupSafe-1.1.1 PasteDeploy-2.1.1 Pygments-2.7.3 WebTest-2.0.35 ZConfig-3.5.0 ZEO-5.2.2 ZODB-5.6.0 attrs-20.3.0 beautifulsoup4-4.9.3 cffi-1.14.4 coverage-5.3.1 hupper-1.10.2 iniconfig-1.1.1 packaging-20.8 persistent-4.6.4 plaster-1.0 plaster-pastedeploy-0.7 pluggy-0.13.1 py-1.10.0 pycparser-2.20 pyparsing-2.4.7 pyramid-1.10.5 pyramid-chameleon-0.3 pyramid-debugtoolbar-4.9 pyramid-mako-1.1.0 pyramid-retry-2.1.1 pyramid-tm-2.4 pyramid-zodbconn-0.8.1 pytest-6.2.1 pytest-cov-2.10.1 repoze.lru-0.7 six-1.15.0 soupsieve-2.1 toml-0.10.2 transaction-3.0.1 translationstring-1.4 tutorial venusian-3.0.0 waitress-1.4.4 webob-1.8.6 zc.lockfile-2.0 zdaemon-4.3 zodbpickle-2.0.0 zodburi-2.4.0 zope.deprecation-4.4.0 zope.interface-5.2.0\n```\n\n----------------------------------------\n\nTITLE: Adding an External Route in Pyramid\nDESCRIPTION: This example demonstrates how to add an external route in Pyramid. External routes, like static routes, are used for URL generation only and are never considered for matching at request time. They are useful for generating URLs to external resources.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_34\n\nLANGUAGE: Python\nCODE:\n```\nconfig = Configurator()\nconfig.add_route('youtube', 'https://youtube.com/watch/{video_id}')\n```\n\n----------------------------------------\n\nTITLE: Include Zope Component Meta ZCML (XML)\nDESCRIPTION: This XML snippet demonstrates how to include the meta.zcml file from the zope.component package in an application's configure.zcml file. This is required when using the 'stock' zope.component ZCML directive implementations (e.g. adapter, subscriber, or utility) after upgrading BFG.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_48\n\nLANGUAGE: xml\nCODE:\n```\n<include package=\"zope.component\" file=\"meta.zcml\">\n```\n\n----------------------------------------\n\nTITLE: Using the CSRF Token in an HTML Form\nDESCRIPTION: This HTML snippet shows how to include the CSRF token as a hidden field within an HTML form.  The token is obtained using the `get_csrf_token()` method available in templates and is included in the form data when the form is submitted.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"post\" action=\"/myview\">\n  <input type=\"hidden\" name=\"csrf_token\" value=\"${get_csrf_token()}\">\n  <input type=\"submit\" value=\"Delete Everything\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: URL with Encoded Characters\nDESCRIPTION: This code represents a URL with encoded characters.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nhttp://example.com/foo/La%20Pe%C3%B1a\n```\n\n----------------------------------------\n\nTITLE: Upgrade Packaging Tools (Shell)\nDESCRIPTION: Upgrades `pip` and `setuptools` within the virtual environment. This ensures the latest versions of these tools are used for installing and managing project dependencies.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/cookiecutters/README.txt#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pip install --upgrade pip setuptools\n```\n\n----------------------------------------\n\nTITLE: Registering Event Subscriber with Interfaces - Python\nDESCRIPTION: This snippet demonstrates how to register an event subscriber in Pyramid using the `@subscriber` decorator. It showcases the correct way to subscribe to multiple interfaces and how to handle object events by passing a sequence of interfaces.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n@subscriber([IFoo, IBar])\ndef expects_object_event(object, event):\n    print object, event\n```\n\n----------------------------------------\n\nTITLE: Not Found View (Pyramid, Python)\nDESCRIPTION: This snippet defines an exception view for handling HTTPNotFound exceptions. It sets the response status to 404 and renders the 404.jinja2 template. It is configured using `pyramid.view.view_config` to be invoked specifically when a `pyramid.httpexceptions.HTTPNotFound` exception is raised.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/definingviews.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\nfrom pyramid.response import Response\n\n@view_config(context='pyramid.httpexceptions.HTTPNotFound',\n            renderer='templates/404.jinja2')\ndef notfound_view(request):\n    request.response.status = 404\n    return {}\n```\n\n----------------------------------------\n\nTITLE: Including pyramid_debugtoolbar in development.ini\nDESCRIPTION: This configuration snippet shows how to include the pyramid_debugtoolbar in development.ini using the `pyramid.includes` setting.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\n# ... elided configuration\npyramid.includes =\n    pyramid_debugtoolbar\n```\n\n----------------------------------------\n\nTITLE: Create Git Tag\nDESCRIPTION: This command creates a new git tag with the specified version number, marking the release point in the repository's history. X.X represents the version number of the release.\nSOURCE: https://github.com/pylons/pyramid/blob/main/RELEASING.txt#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ git tag X.X\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache for mod_wsgi\nDESCRIPTION: This Apache configuration file configures mod_wsgi to serve the Pyramid application. It sets up the WSGI daemon process, specifies the Python path, and maps the URL path to the WSGI script.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/modwsgi/index.rst#_snippet_5\n\nLANGUAGE: apache\nCODE:\n```\n# Use only 1 Python sub-interpreter.  Multiple sub-interpreters\n# play badly with C extensions.  See\n# http://stackoverflow.com/a/10558360/209039\nWSGIApplicationGroup %{GLOBAL}\nWSGIPassAuthorization On\nWSGIDaemonProcess pyramid user=chrism group=staff threads=4 \\\n  python-path=/Users/chrism/myproject/env/lib/python3.8/site-packages\nWSGIScriptAlias /myapp /Users/chrism/myproject/pyramid.wsgi\n\n<Directory /Users/chrism/myproject>\n WSGIProcessGroup pyramid\n Require all granted\n</Directory>\n```\n\n----------------------------------------\n\nTITLE: Configuring Route with Inherited Slash in Pyramid\nDESCRIPTION: This code snippet demonstrates how to configure a route with an inherited trailing slash in Pyramid using the `config.add_route` method within a `route_prefix_context`. The `inherit_slash=True` argument ensures that the route pattern inherits the trailing slash from the route prefix, providing flexibility in defining URL structures.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith config.route_prefix_context('/users'):\n    config.add_route('users', '', inherit_slash=True)\n```\n\n----------------------------------------\n\nTITLE: Pserve Command (Pyramid 1.3+)\nDESCRIPTION: This command shows the replacement for `paster serve` in Pyramid 1.3 and later. It uses the `pserve` command to run a Pyramid application based on the `development.ini` configuration file. It is compatible with both Python 2 and 3.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.3.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n$ $VENV/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Generate Alembic Revision (Windows)\nDESCRIPTION: Generates an Alembic revision using the alembic revision command. This command creates a new migration script that can be used to update the database schema. The --autogenerate flag automatically detects changes to the database model, and the -m flag specifies a message for the revision.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_12\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\alembic -c development.ini revision --autogenerate -m \"init\"\n```\n\n----------------------------------------\n\nTITLE: Configure Views with Decorators in Pyramid (Python)\nDESCRIPTION: This code snippet demonstrates how to configure views in a Pyramid application using decorators. The `@view_config` decorator associates the `fred_view` function with the route named 'fred'. This allows you to define view configurations directly within your view functions, keeping your code concise and readable. The code imports `view_config` from `pyramid.view` and `Response` from `pyramid.response`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/introduction.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyramid.view import view_config\nfrom pyramid.response import Response\n\n@view_config(route_name='fred')\ndef fred_view(request):\n    return Response('fred')\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Path Segments Configuration\nDESCRIPTION: This example shows how to configure the 'unicode_path_segments' setting to False in a BFG application's paste .ini file. This setting disables the default behavior of decoding URL path segments to Unicode before passing them to the __getitem__ method of a model object, reverting to the older behavior of passing raw byte strings.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_49\n\nLANGUAGE: ini\nCODE:\n```\nunicode_path_segments = False\n```\n\n----------------------------------------\n\nTITLE: Root Factory Definition (Python)\nDESCRIPTION: This defines a root factory for the Pyramid application. It establishes a connection to the ZODB database and returns an appmaker, which is used to manage resources and models.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/basiclayout.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef root_factory(request):\n    return appmaker(request.db)\n```\n\n----------------------------------------\n\nTITLE: Pytest Sample Output (Bash)\nDESCRIPTION: This shows the output when running the unit tests with pytest. In this example, it indicates 4 tests passed within 0.31 seconds.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest -q\n....\n4 passed in 0.31s\n```\n\n----------------------------------------\n\nTITLE: Performing a Pluralization with the Localizer (Unicode Literals)\nDESCRIPTION: This Python code demonstrates how to perform a pluralization using the localizer object. It uses Unicode literals for singular and plural forms and the number 'n' to select the correct form based on locale rules.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef aview(request):\n    localizer = request.localizer\n    translated = localizer.pluralize('Item', 'Items', 1, 'mydomain')\n    # ... use translated ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a View Callable (Class-Based)\nDESCRIPTION: This snippet demonstrates how to define a view callable using a Python class in Pyramid. The class must accept `context` and `request` parameters in its `__init__` method and have a `__call__` method that returns a response. This is similar to Zope browser views.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom webob import Response\n\nclass MyView(object):\n    def __init__(self, context, request):\n        self.context = context\n        self.request = request\n\n    def __call__(self):\n        return Response('hello from %s!' % self.context)\n```\n\n----------------------------------------\n\nTITLE: Sample CSS File\nDESCRIPTION: This code snippet represents a sample CSS file (`app.css`) that can be served as a static asset. It defines a simple style for `body` elements, setting the background color to `#eee` and the font family to `sans-serif`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_10\n\nLANGUAGE: css\nCODE:\n```\nbody {\n    background-color: #eee;\n    font-family: sans-serif;\n}\n```\n\n----------------------------------------\n\nTITLE: View Callable accepting only Request (Python)\nDESCRIPTION: This code showcases defining a view callable in Pyramid that only accepts a 'request' object as an argument, instead of the traditional 'context' and 'request'. This simplifies view definitions, especially for URL dispatched views, as the context is accessible via the request.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndef aview(request):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Route and View - Pyramid Python\nDESCRIPTION: This snippet demonstrates the deprecated way of configuring a route and associating a view with it using the `add_route` method, along with the recommended replacement using separate `add_route` and `add_view` calls. It highlights the change from passing view-related parameters directly to `add_route` to using `add_view` with the `route_name` parameter for better clarity and reduced confusion.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('home', '/', view='mypackage.views.myview',\n                       view_renderer='some/renderer.pt')\n\nconfig.add_route('home', '/')\nconfig.add_view('mypackage.views.myview', route_name='home',\n                    renderer='some/renderer.pt')\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Event Classes in Python\nDESCRIPTION: This snippet shows how to define custom event classes in Python.  Each class represents a specific event in the application (e.g., `DocCreated`, `UserEvent`, `UserLoggedIn`).  They are simple Python classes that hold event-related data.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/events.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass DocCreated(object):\n    def __init__(self, doc, request):\n        self.doc = doc\n        self.request = request\n\nclass UserEvent(object):\n    def __init__(self, user):\n        self.user = user\n\nclass UserLoggedIn(UserEvent):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Moving RoutesModelTraverser class\nDESCRIPTION: The ``repoze.bfg.urldispatch.RoutesModelTraverser`` class has been moved to ``repoze.bfg.traversal.RoutesModelTraverser``. Import paths should be updated to reflect this change.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\nrepoze.bfg.urldispatch.RoutesModelTraverser\nrepoze.bfg.traversal.RoutesModelTraverser\n```\n\n----------------------------------------\n\nTITLE: Configuring Chameleon Renderer\nDESCRIPTION: Configures pyramid_chameleon as a renderer in the __init__.py file. This allows the application to use Chameleon templates for rendering views.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/templating.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\ndef main(global_config, **settings):\n    config = Configurator(settings=settings)\n    config.include('pyramid_chameleon')\n    config.add_route('home', '/')\n    config.add_route('howdy', '/howdy')\n    config.scan('.views')\n    return config.make_wsgi_app()\n```\n\n----------------------------------------\n\nTITLE: Defining the add_page function\nDESCRIPTION: This code defines the `add_page` view function. This view function is configured to respond when the context resource is a `Wiki` and the view name is `add_page`. It's decorated with `@view_config` to associate it with the 'add_page' name, the `Wiki` resource, and the `templates/edit.pt` renderer.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/definingviews.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@view_config(name='add_page', context=\".models.Wiki\", renderer=\"templates/edit.pt\")\ndef add_page(context, request):\n    name = request.params.get('pagename', 'FrontPage')\n    if 'form.submitted' in request.params:\n        body = request.params['body']\n        page = context[name] = Page(name, body)\n        page.data = body\n        return HTTPSeeOther(request.route_url('view_page', pagename=name))\n    save_url = request.route_url('add_page', pagename=name)\n    return dict(name=name, save_url=save_url,\n                body=''\n```\n\n----------------------------------------\n\nTITLE: Pyramid Route Prefix Usage\nDESCRIPTION: This snippet demonstrates how to use route prefixes to compose applications in Pyramid. The `route_prefix` argument in `config.include` prepends a prefix to all routes defined within the included configuration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\ndef users_include(config):\n    config.add_route('show_users', '/show')\n\ndef main(global_config, **settings):\n    config = Configurator()\n    config.include(users_include, route_prefix='/users')\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure Text Representation\nDESCRIPTION: This text block shows the typical directory structure of a Pyramid project generated by the `pyramid-cookiecutter-starter` cookiecutter. It illustrates the organization of source code, configuration files, static assets, and templates.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nmyproject\n├── .coveragerc\n├── .gitignore\n├── CHANGES.txt\n├── MANIFEST.in\n├── README.txt\n├── development.ini\n├── myproject\n│   ├── __init__.py\n│   ├── routes.py\n│   ├── static\n│   │   ├── pyramid-16x16.png\n│   │   ├── pyramid.png\n│   │   └── theme.css\n│   ├── templates\n│   │   ├── 404.jinja2\n│   │   ├── layout.jinja2\n│   │   └── mytemplate.jinja2\n│   └── views\n│       ├── __init__.py\n```\n\n----------------------------------------\n\nTITLE: Session Import in __init__.py\nDESCRIPTION: This imports a session factory from `pyramid.session`. It's used as part of the Pyramid app setup to manage user sessions.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\nfrom pyramid.session import UnencryptedCookieSessionFactoryConfig\n```\n\n----------------------------------------\n\nTITLE: Generating URL with route_name in Pyramid\nDESCRIPTION: This code snippet shows how to generate a URL using `request.resource_url` with the `route_name` parameter. It uses the 'mysection' route to generate a URL for a resource `a`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hybrid.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nrequest.resource_url(a, route_name='mysection')\n```\n\n----------------------------------------\n\nTITLE: Python Code with Emphasis\nDESCRIPTION: Demonstrates the use of the `:emphasize-lines:` option to highlight specific lines in a Python code block. This example highlights lines 1 and 3.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/typographical-conventions.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nif \"foo\" == \"bar\":\n    # This is Python code\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment in Bash\nDESCRIPTION: This command creates a Python virtual environment named 'env'. A virtual environment isolates project dependencies, preventing conflicts with other Python projects.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/basiclayout/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: Using static view helper (repoze.bfg.view.static) in Pyramid\nDESCRIPTION: The ``repoze.bfg.view.static`` helper allows serving static resources from a specified directory. The ``root_path`` argument is relative to the file in which the helper is called. This utilizes WebOb's `get_response` method.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_38\n\nLANGUAGE: Python\nCODE:\n```\nrepoze.bfg.view.static(root_path)\n```\n\n----------------------------------------\n\nTITLE: Use Babel Locale Class with Pyramid\nDESCRIPTION: Illustrates how to create a `babel.core.Locale` instance using the locale name obtained from the Pyramid request. This allows for date and currency formatting according to the user's locale. Requires the `babel.core` package to be installed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom babel.core import Locale\n\ndef aview(request):\n    locale_name = request.locale_name\n    locale = Locale(locale_name)\n```\n\n----------------------------------------\n\nTITLE: View Defaults Inheritance (Python)\nDESCRIPTION: This code illustrates how view defaults are inherited by subclasses. The Bar class inherits the `route_name='rest'` default from the Foo class.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@view_defaults(route_name='rest')\nclass Foo(object):\n    pass\n\nclass Bar(Foo):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Unnamed Utility Lookup using zope.component.getUtility - Python\nDESCRIPTION: Demonstrates a typical unnamed utility lookup using the zope.component.getUtility global API in a traditional Zope application. This approach can be opaque and increase the conceptual load on readers.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/zca.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.interfaces import ISettings\nfrom zope.component import getUtility\nsettings = getUtility(ISettings)\n```\n\n----------------------------------------\n\nTITLE: Registering a Forbidden View Imperatively in Pyramid (Python)\nDESCRIPTION: This code snippet shows how to register a custom Forbidden View in Pyramid using imperative configuration. It defines a simple view that returns a 'forbidden' response and registers it using `config.add_forbidden_view`. This overrides the default Forbidden View.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef forbidden(request):\n    return Response('forbidden')\n\ndef main(globals, **settings):\n    config = Configurator()\n    config.add_forbidden_view(forbidden)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Shell Runner\nDESCRIPTION: Shows an example of a custom shell runner function that can be used with pshell. The runner function accepts 'env' (environment variables) and 'help' arguments, and it initializes and returns the custom REPL environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom ptpython.repl import embed\n\ndef ptpython_shell_runner(env, help):\n    print(help)\n    return embed(locals=env)\n```\n\n----------------------------------------\n\nTITLE: Overriding a View Configuration in Pyramid\nDESCRIPTION: This snippet shows how to override an existing view configuration by loading the original configuration and then adding a new view with the same name. This ensures the new view is executed instead of the original.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/extending.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\nfrom originalapp import configure_views\n\nif __name__ == '__main__':\n    config = Configurator()\n    config.include(configure_views)\n    config.add_view('theoverrideapp.views.theview', name='theview')\n```\n\n----------------------------------------\n\nTITLE: Subrequest Example with Renderer in Pyramid\nDESCRIPTION: This example illustrates how to use `request.invoke_subrequest` when the subrequest view uses a renderer. `view_two` returns a simple string, but it's registered with the `string` renderer, which converts the string to a Response object.  The `emphasize-lines: 11,18` directive highlights key parts of the code.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/subrequest.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom wsgiref.simple_server import make_server\nfrom pyramid.config import Configurator\nfrom pyramid.request import Request\n\ndef view_one(request):\n    subreq = Request.blank('/view_two')\n    response = request.invoke_subrequest(subreq)\n    return response\n\ndef view_two(request):\n    return 'This came from view_two'\n\nif __name__ == '__main__':\n    config = Configurator()\n    config.add_route('one', '/view_one')\n    config.add_route('two', '/view_two')\n    config.add_view(view_one, route_name='one')\n    config.add_view(view_two, route_name='two', renderer='string')\n    app = config.make_wsgi_app()\n    server = make_server('0.0.0.0', 8080, app)\n    server.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: ZCML Subscriber Configuration\nDESCRIPTION: This ZCML snippet demonstrates how to register a subscriber for the `AfterTraversal` event in Pyramid. It specifies the interface to subscribe to and the handler function to be invoked when the event occurs.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<subscriber for=\"repoze.bfg.interfaces.IAfterTraversal\"\n            handler=\"my.app.handle_after_traverse\"/>\n```\n\n----------------------------------------\n\nTITLE: Layout Template (Jinja2, HTML)\nDESCRIPTION: This snippet presents the base layout template (`layout.jinja2`) which uses Jinja2's template inheritance to define a common structure for all pages. It defines two blocks, `subtitle` and `content`, which can be overridden by child templates to insert specific content. It includes placeholders for common HTML elements and structure.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/definingviews.rst#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Wiki{% endblock %}</title>\n</head>\n<body>\n\n    <header>\n        <h1>Wiki</h1>\n        <h2>{% block subtitle %}{% endblock %}</h2>\n    </header>\n\n    <main>\n        {% block content %}{% endblock %}\n    </main>\n\n    <footer>\n        <p>&copy; 2023 My Wiki</p>\n    </footer>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Custom Route Predicate with Info Dictionary in Pyramid (Python)\nDESCRIPTION: Shows how to define a custom route predicate in Pyramid that receives an `info` dictionary containing route and match information. The `info` dictionary allows access to the route's name, path, and matched URL segments.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef any_of(segment_name, *args):\n    def predicate(info, request):\n        if info['match'][segment_name] in args:\n            return True\n    return predicate\n\nnum_one_two_or_three = any_of('num, 'one', 'two', 'three')\n\nadd_route('num', '/:num', custom_predicates=(num_one_two_or_three,))\n```\n\n----------------------------------------\n\nTITLE: NotFound Deprecation\nDESCRIPTION: Deprecates importing `NotFound` from `repoze.bfg.view` in favor of `repoze.bfg.exceptions.NotFound`. The old location still functions but emits a deprecation warning, advising users to update their imports.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n- The import of ``repoze.bfg.view.NotFound`` is deprecated in favor of\n  ``repoze.bfg.exceptions.NotFound``.  The old location still\n  functions, but emits a deprecation warning.\n```\n\n----------------------------------------\n\nTITLE: Main Function Definition (Python)\nDESCRIPTION: This defines the main function that is invoked when the pserve command is executed. It accepts settings, constructs a Configurator object, includes support for various Pyramid features, sets the root factory, performs a scan, and returns a WSGI application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/basiclayout.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef main(global_config, **settings):\n    \"\"\" This function returns a Pyramid WSGI application. \n    \"\"\"\n    with Configurator(settings=settings) as config:\n        config.include('pyramid_chameleon')\n        config.include('pyramid_tm')\n        config.include('pyramid_retry')\n        config.include('pyramid_zodbconn')\n        config.include('.routes')\n        config.set_root_factory(root_factory)\n        config.scan()\n        return config.make_wsgi_app()\n```\n\n----------------------------------------\n\nTITLE: Cleaning up after a request\nDESCRIPTION: This Python code demonstrates how to register a cleanup callback function that is executed after each request in a Pyramid application. It uses the pyramid.events module to subscribe to the NewRequest event and add a finished callback to the request. The callback function removes the SQLAlchemy database session.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/webob.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom mypackage.models import DBSession\n\nfrom pyramid.events import subscriber\nfrom pyramid.events import NewRequest\n\ndef cleanup_callback(request):\n    DBSession.remove()\n\n@subscriber(NewRequest)\ndef add_cleanup_callback(event):\n    event.request.add_finished_callback(cleanup_callback)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Renderer in View Configuration (Python)\nDESCRIPTION: This code shows how to use a custom renderer in a view configuration. The `renderer` attribute of the `@view_config` decorator is set to the name of the custom renderer ('amf' in this example).\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\n\n@view_config(renderer='amf')\ndef myview(request):\n    return {'Hello':'world'}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renderer and View Order in Python\nDESCRIPTION: This Python snippet shows how `add_renderer` and `add_view` can be called in either order when using a non-autocommitting Configurator, due to the two-phase configuration process in Pyramid.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advconfig.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_renderer('.rn', SomeCustomRendererFactory)\nconfig.add_view('some.view', renderer='path_to_custom/renderer.rn')\n```\n\n----------------------------------------\n\nTITLE: CFG Configuration\nDESCRIPTION: Demonstrates the syntax highlighting for CFG files, often used in buildout configurations.  The snippet displays a simple configuration section with a recipe and an option.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/typographical-conventions.rst#_snippet_3\n\nLANGUAGE: cfg\nCODE:\n```\n[some-part]\n# A random part in the buildout\nrecipe = collective.recipe.foo\noption = value\n```\n\n----------------------------------------\n\nTITLE: Serving a Favicon with FileResponse in Pyramid\nDESCRIPTION: This code defines a view callable that serves a favicon.ico file using Pyramid's FileResponse. It computes the path to the favicon, creates a FileResponse object, and returns it. This approach allows Pyramid to efficiently serve the file with correct content length and type based on the file extension.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom pyramid.response import FileResponse\n\ndef favicon_view(request):\n    here = os.path.dirname(__file__)\n    icon = os.path.join(here, 'static', 'favicon.ico')\n    return FileResponse(icon, request=request)\n```\n\n----------------------------------------\n\nTITLE: Invoking Interactive Shell with pshell using Default Section in Bash\nDESCRIPTION: This command invokes the pshell interactive shell for a Pyramid application using the default 'main' section in the starter/development.ini file. Omitting the '#main' assumes the default section.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pshell starter/development.ini\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Setting in INI file - INI\nDESCRIPTION: This snippet shows how to define a custom setting within an INI file. The setting is named `media_location` and is assigned the value `http://static.example.com/`, which configures the application to serve static assets from the specified URL.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n# production.ini\n[app:main]\nuse = egg:myapp#main\n\nmedia_location = http://static.example.com/\n```\n\n----------------------------------------\n\nTITLE: Adding a Route in Pyramid\nDESCRIPTION: This code snippet demonstrates how to add a route in a Pyramid application using `config.add_route`. The route is named 'mysection' and maps to the path '/mysection*traverse', allowing traversal.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hybrid.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('mysection', '/mysection*traverse')\n```\n\n----------------------------------------\n\nTITLE: Documenting pyramid.settings Module\nDESCRIPTION: This reStructuredText snippet uses automodule to document the `pyramid.settings` module. It also uses autofunction directives to document the `asbool` and `aslist` functions within the module.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/api/settings.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _settings_module:\n\n:mod:`pyramid.settings`\n--------------------------\n\n.. automodule:: pyramid.settings\n\n  .. autofunction:: asbool\n\n  .. autofunction:: aslist\n```\n\n----------------------------------------\n\nTITLE: Running Tests with pytest\nDESCRIPTION: This command runs all tests using `pytest` with code coverage enabled. The `--cov` flag enables coverage reporting, and `--cov-report=term-missing` generates a report in the terminal, highlighting lines of code that are not covered by tests.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest --cov --cov-report=term-missing\n```\n\n----------------------------------------\n\nTITLE: Defining Event Listener Functions in Python\nDESCRIPTION: This example defines two event listener functions, `handle_new_request` and `handle_new_response`, which print information about the request and response events respectively. These functions are intended to be used as subscribers within a Pyramid application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/events.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef handle_new_request(event):\n    print('request', event.request)\n\ndef handle_new_response(event):\n    print('response', event.response)\n```\n\n----------------------------------------\n\nTITLE: Installing Pyramid IPython Shell\nDESCRIPTION: This command installs the pyramid_ipython package, enabling the use of IPython as the shell for the pshell command-line tool. It provides an enhanced interactive environment for debugging and exploring Pyramid applications.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ pip install pyramid_ipython\n```\n\n----------------------------------------\n\nTITLE: Example Conflict Error Traceback (Text)\nDESCRIPTION: This traceback shows the error that occurs when there are conflicting view configurations, specifically when two views are registered with the same predicates.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advconfig.rst#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nTraceback (most recent call last):\n  File \"app.py\", line 12, in <module>\n    app = config.make_wsgi_app()\n  File \"pyramid/config.py\", line 839, in make_wsgi_app\n    self.commit()\n  File \"pyramid/pyramid/config.py\", line 473, in commit\n    self._ctx.execute_actions()\n  ... more code ...\npyramid.exceptions.ConfigurationConflictError:\n        Conflicting configuration actions\n  For: ('view', None, '', None, <InterfaceClass pyramid.interfaces.IView>,\n        None, None, None, None, None, False, None, None, None)\n  Line 14 of file app.py in <module>: 'config.add_view(hello_world)'\n  Line 17 of file app.py in <module>: 'config.add_view(goodbye_world)'\n```\n\n----------------------------------------\n\nTITLE: renderer_from_cache Move\nDESCRIPTION: Moves the `repoze.bfg.templating.renderer_from_cache` function to `repoze.bfg.renderer.template_renderer_factory`. Although it was never an official API, some code in the wild was found to be using it.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n- The ``repoze.bfg.templating.renderer_from_cache`` function has been\n  moved to ``repoze.bfg.renderer.template_renderer_factory``.  This\n  was never an API, but code in the wild was spotted that used it.  A\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment (Shell)\nDESCRIPTION: Creates a Python virtual environment named 'env' within the current directory. This isolates the project's dependencies from the global Python environment. Requires Python 3 to be installed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/tests/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: Zope View Example: Accepting Arbitrary Arguments\nDESCRIPTION: This code snippet illustrates how Zope allows views to accept arbitrary keyword and positional arguments.  The `aview` method of the `MyZopeObject` class is called with arguments extracted from the request's GET and POST namespaces, matching the argument names. It uses persistent objects and returns a formatted string.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom persistent import Persistent\n\nclass MyZopeObject(Persistent):\n    def aview(self, a, b, c=None):\n        return '%s %s %c' % (a, b, c)\n```\n\n----------------------------------------\n\nTITLE: View Lookup Pseudocode Example in Pyramid\nDESCRIPTION: This pseudocode demonstrates the view lookup algorithm in Pyramid. It shows how a URL is resolved to a resource (context) and then how a view callable is found and invoked for that resource. The 'get_root' and 'get_view' functions are placeholders for Pyramid's internal mechanisms.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/muchadoabouttraversal.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncontext = get_root()['joeschmoe']['photos']['photo1']\nview_callable = get_view(context, 'edit')\nrequest.context = context\nview_callable(request)\n```\n\n----------------------------------------\n\nTITLE: Run Development Server (Shell)\nDESCRIPTION: Starts the project's development server using `pserve`. This allows for interactive testing and debugging of the application. `development.ini` configures the server environment and settings. Requires `pserve` to be installed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/cookiecutters/README.txt#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Path Segment Cache Buster (Python)\nDESCRIPTION: This code defines a simple cache buster, PathConstantCacheBuster, that modifies the path segment of the URL. It takes a token as input and adds it to the base subpath of the asset.  This approach requires the file system to match the modified path.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport posixpath\n\nclass PathConstantCacheBuster(object):\n    def __init__(self, token):\n        self.token = token\n\n    def __call__(self, request, subpath, kw):\n        base_subpath, ext = posixpath.splitext(subpath)\n        new_subpath = base_subpath + self.token + ext\n        return new_subpath, kw\n```\n\n----------------------------------------\n\nTITLE: Serving Static Assets from an External Webserver (Python)\nDESCRIPTION: This code shows how to configure add_static_view to serve static assets from an external web server. The 'name' argument is a complete URL, and subsequent calls to static_url will generate URLs pointing to the external server.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# config is an instance of pyramid.config.Configurator\nconfig.add_static_view(name='http://example.com/images',\n                           path='mypackage:images')\n```\n\n----------------------------------------\n\nTITLE: Upgrade Packaging Tools (Windows)\nDESCRIPTION: Upgrades pip and setuptools in the virtual environment using the pip install command. This ensures that the latest versions of these tools are used.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_8\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pip install --upgrade pip setuptools\n```\n\n----------------------------------------\n\nTITLE: Installing Cookiecutter\nDESCRIPTION: This command installs the `cookiecutter` tool, which is used to generate project structures from templates.  It uses `pip` within the virtual environment to install the package.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install cookiecutter\n```\n\n----------------------------------------\n\nTITLE: Pyramid App Configuration\nDESCRIPTION: This code snippet configures the Pyramid application. It uses a Configurator context manager to add a route named 'hello' to the root path ('/') and associates the `hello_world` function as the view callable for this route. Finally, it creates the WSGI application instance.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/firstapp.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nif __name__ == '__main__':\n    with Configurator() as config:\n        config.add_route('hello', '/')\n        config.add_view(hello_world, route_name='hello')\n        app = config.make_wsgi_app()\n    server = make_server('0.0.0.0', 6543, app)\n    server.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Run Project Tests\nDESCRIPTION: Executes the project's test suite using pytest. This ensures that the project's code is functioning as expected and helps prevent regressions.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/sessions/README.txt#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pytest\n```\n\n----------------------------------------\n\nTITLE: Simulating JSON request with urllib2\nDESCRIPTION: This Python code demonstrates how to simulate a JSON request using the urllib2 library. It creates a request with a JSON payload and sets the Content-Type header to application/json. The request is then sent to the specified URL.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/webob.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport urllib2\nimport json\n\njson_payload = json.dumps({'a':1})\nheaders = {'Content-Type':'application/json'}\nreq = urllib2.Request('http://localhost:6543/', json_payload, headers)\nresp = urllib2.urlopen(req)\n```\n\n----------------------------------------\n\nTITLE: Build output example\nDESCRIPTION: This is an example of the output produced by the `build` command, showing the creation of a virtual environment, installation of dependencies, and successful building of the source distribution (tar.gz) and wheel file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/distributing.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n* Creating venv isolated environment...\n* Installing packages in isolated environment... (setuptools)\n* Getting build dependencies for sdist...\n...\nremoving build/bdist.linux-x86_64/wheel\nSuccessfully built tutorial-0.0.tar.gz and tutorial-0.0-py3-none-any.whl\n```\n\n----------------------------------------\n\nTITLE: Configure pyramid.includes in development.ini (INI)\nDESCRIPTION: This ini code shows how to include `pyramid_debugtoolbar` in the `pyramid.includes` setting within the `development.ini` file. This configuration ensures that the debug toolbar is enabled when the Pyramid application is run using this configuration file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/debugtoolbar.rst#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:debugtoolbar\nreload_templates = true\ndebug_authorization = false\ndebug_notfound = false\ndebug_routematch = false\ndebug_templates = false\ndefault_locale_name = en\nsession.type = null\n\npyramid.includes =\n    pyramid_debugtoolbar\n```\n\n----------------------------------------\n\nTITLE: Loop Counter Example\nDESCRIPTION: Illustrates a typical for loop where importing the loop counter variable 'i' from within the function scope would be nonsensical. It's used as an analogy to emphasize that a request object, which is local to a request's scope, shouldn't be treated as a global import like some microframeworks do.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef afunc():\n    for i in range(10):\n        print(i)\n```\n\n----------------------------------------\n\nTITLE: Remainder Match with Custom Regex (Text)\nDESCRIPTION: Demonstrates using a custom regular expression for a marker to capture the remainder of the URL into a single value instead of splitting by segment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nfoo/{baz}/{bar}{fizzle:.*}\n```\n\n----------------------------------------\n\nTITLE: Route Pattern with Multiple Replacement Markers\nDESCRIPTION: This example demonstrates how to capture both the file name and the file extension using two replacement markers separated by a literal dot.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nfoo/{name}.{ext}\n```\n\n----------------------------------------\n\nTITLE: Route Configuration with Remainder (pyramid.config)\nDESCRIPTION: Demonstrates route configuration with a 'remainder' segment. Prior to the change, string values for 'remainder' were not URL-quoted. Now, they are URL-quoted except for slashes. It also highlights the alternative to use `_query` and/or `_anchor` for query and anchor parts.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('remain', '/foo*remainder')\nrequest.route_path('remain', remainder='abc / def')\n# -> '/foo/abc%20/%20def'\n```\n\n----------------------------------------\n\nTITLE: Invoking an Exception View in Python with Pyramid\nDESCRIPTION: This code snippet demonstrates how to manually invoke an exception view within a Pyramid application using `request.invoke_exception_view`. It handles a potential exception, attempts to generate a response using an exception view, and re-raises the exception if no suitable view is found. This is useful for handling exceptions outside the context of the default EXCVIEW tween or for manually controlling exception handling flow.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/subrequest.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef foo(request):\n    try:\n        some_func_that_errors()\n        return response\n    except Exception:\n        response = request.invoke_exception_view()\n        if response is not None:\n            return response\n        else:\n            # there is no exception view for this exception, simply\n            # re-raise and let someone else handle it\n            raise\n```\n\n----------------------------------------\n\nTITLE: Defining an Exception Class in Python\nDESCRIPTION: Defines a custom exception class named `ValidationFailure` with a message attribute. This exception is used as an example for configuring exception views in Pyramid.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/views.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass ValidationFailure(Exception):\n    def __init__(self, msg):\n        self.msg = msg\n```\n\n----------------------------------------\n\nTITLE: Asset Override Example - Python\nDESCRIPTION: Shows how to override an asset using an absolute path on the filesystem using `config.override_asset`. This allows serving static content from a mutable directory while still generating URLs to the content using `request.static_url` and `config.add_static_view`. This example replaces `config.add_static_view('/abs/path', 'static')` with `config.add_static_view('myapp:static', 'static')` and `config.override_asset(to_override='myapp:static/', override_with='/abs/path/')`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Basic Pyramid Application Configuration (Python)\nDESCRIPTION: This snippet demonstrates a basic Pyramid application configuration, defining a simple view that returns 'Hello world!'. It shows how to use Configurator to add a view and start the server.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advconfig.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom wsgiref.simple_server import make_server\nfrom pyramid.config import Configurator\nfrom pyramid.response import Response\n\ndef hello_world(request):\n    return Response('Hello world!')\n\nif __name__ == '__main__':\n    config = Configurator()\n    config.add_view(hello_world)\n    app = config.make_wsgi_app()\n    server = make_server('0.0.0.0', 8080, app)\n    server.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Pyramid Custom Route Predicate Example\nDESCRIPTION: This snippet shows how to define a custom route predicate. The predicate class checks if a part of the URL matches specific values defined in the `allowed` tuple. It is initialized with the segment name and allowed values.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nclass AnyOfPredicate:\n    def __init__(self, val, info):\n        self.segment_name = val[0]\n        self.allowed = tuple(val[1:])\n\n    def text(self):\n```\n\n----------------------------------------\n\nTITLE: Deprecated add_route with view params - Pyramid (Python)\nDESCRIPTION: This snippet highlights the deprecation of passing view-related parameters directly to `config.add_route`. It shows the old and new ways of associating a view with a route in Pyramid, favoring the use of `config.add_view` with the `route_name` parameter.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.1.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('home', '/', view='mypackage.views.myview',\n                       view_renderer='some/renderer.pt')\n```\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('home', '/')\nconfig.add_view('mypackage.views.myview', route_name='home',\n                    renderer='some/renderer.pt')\n```\n\n----------------------------------------\n\nTITLE: Running initialize_tutorial_db on Windows\nDESCRIPTION: This DOS command executes the initialize_tutorial_db script, similar to the Unix command, but using Windows syntax for the virtual environment path. The %VENV% variable represents the virtual environment path. It uses the development.ini configuration file for database connection details.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/definingmodels.rst#_snippet_1\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\initialize_tutorial_db development.ini\n```\n\n----------------------------------------\n\nTITLE: Re-enabling ASCII Request Handling in ZCML\nDESCRIPTION: Re-enables the previous behavior of BFG where request parameters were returned as bytestrings instead of Unicode. This is done by adding a subscriber for INewRequest in configure.zcml, using the make_request_ascii handler. Useful for applications that rely on values from request.params, request.GET, and request.POST being bytestrings.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<subscriber for=\"repoze.bfg.interfaces.INewRequest\"\n                handler=\"repoze.bfg.request.make_request_ascii\"/>\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping a Pyramid Environment with pyramid.paster\nDESCRIPTION: This snippet demonstrates how to bootstrap a Pyramid environment using the `pyramid.paster.bootstrap` function. It loads the environment from a configuration file and provides access to the request object. This is useful for writing scripts that interact with a Pyramid application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.paster import bootstrap\ninfo = bootstrap('/path/to/my/development.ini')\nrequest = info['request']\nprint request.route_url('myroute')\n```\n\n----------------------------------------\n\nTITLE: Route Factory Configuration (Python)\nDESCRIPTION: This snippet shows how to configure a route with a custom factory. The `add_route` function associates the route named 'abc' with the URL '/abc' and the factory 'myproject.resources.root_factory'. When this route matches, the specified factory will be used to create the root object instead of the default root factory.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('abc', '/abc',\n                     factory='myproject.resources.root_factory')\nconfig.add_view('myproject.views.theview', route_name='abc')\n```\n\n----------------------------------------\n\nTITLE: Console Script Entry Point - INI\nDESCRIPTION: Example of how to add a console script entry point to a distribution's setup.py file.  This maps the 'show_settings' script name to the 'myproject.scripts:settings_show' callable.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_36\n\nLANGUAGE: ini\nCODE:\n```\n[console_scripts]\nshow_settings = myproject.scripts:settings_show\n```\n\n----------------------------------------\n\nTITLE: Registering a Permission in Pyramid (Python)\nDESCRIPTION: This snippet demonstrates how to register a free-standing permission using `config.add_permission` in Pyramid. This allows the permission to be introspectable within the Pyramid system, even if it's not directly associated with a view.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.4.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nconfig = Configurator()\nconfig.add_permission('view')\n```\n\n----------------------------------------\n\nTITLE: Define Access Log Formatter\nDESCRIPTION: This snippet defines a new formatter named `accesslog` that passes through the log messages as is, without any additional formatting.  This is used because TransLogger provides all the required information in its log messages.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/logging.rst#_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[formatters]\nkeys = generic, accesslog\n\n[formatter_accesslog]\nformat = %(message)s\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory\nDESCRIPTION: This bash command navigates up one directory, creates a new directory named 'package', and then navigates into it. This sets up the project directory for the tutorial.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/package.rst#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncd ..; mkdir package; cd package\n```\n\n----------------------------------------\n\nTITLE: Subscriber Decorator Example (pyramid.events)\nDESCRIPTION: Illustrates the corrected usage of the `pyramid.events.subscriber` decorator without arguments.  Prior to the fix, using `@subscriber()` without arguments would result in the decorated function not receiving any events. This snippet shows the correct way to register a function to receive all events sent via the registry.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n@subscriber()\ndef somefunc(event):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining a View Callable as a Function in Pyramid (Python)\nDESCRIPTION: This code snippet demonstrates how to define a view callable as a function in the Pyramid framework. It imports necessary modules from pyramid, defines a view function named `aview` using the `@view_config` decorator to associate it with a route named 'aview', and returns a simple Response object.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/introduction.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\nfrom pyramid.view import view_config\n\n@view_config(route_name='aview')\ndef aview(request):\n    return Response('one')\n```\n\n----------------------------------------\n\nTITLE: Adding cleanup to repoze.bfg testing\nDESCRIPTION: This code snippet demonstrates how to add the `repoze.bfg.testing.setUp` cleanup function to `zope.testing.cleanup` to ensure proper isolation between tests when `repoze.bfg.testing.setUp` cannot directly replace `zope.testing.cleanup.cleanup`. It should be executed only once, typically in the `__init__.py` or `tests` subpackage.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport zope.testing.cleanup\nfrom repoze.bfg.testing import setUp\nzope.testing.cleanup.addCleanUp(setUp)\n```\n\n----------------------------------------\n\nTITLE: Filtering SQLAlchemy Pool Logger (INI)\nDESCRIPTION: This configuration snippet demonstrates how to filter log messages for SQLAlchemy's connection pooling.  It configures a logger named sqlalchemy.pool and sets its level to DEBUG, allowing you to see debug messages related to database connection pooling while the root logger remains at INFO.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/logging.rst#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[logger_sqlalchemy.pool]\nlevel = DEBUG\nhandlers =\nqualname = sqlalchemy.pool\n```\n\n----------------------------------------\n\nTITLE: Configure View with Template Renderer - Python\nDESCRIPTION: This code snippet demonstrates how to configure a view using the `view_config` decorator to specify a template renderer. The view function returns a dictionary of values that will be passed as top-level names to the template.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/templates.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\n\n@view_config(renderer='templates/foo.pt')\ndef my_view(request):\n    return {'foo':1, 'bar':2}\n```\n\n----------------------------------------\n\nTITLE: Change Directory\nDESCRIPTION: Changes the current directory to the tutorial project directory. This command is essential for executing subsequent commands within the project's context.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/models/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncd tutorial\n```\n\n----------------------------------------\n\nTITLE: Pyramid Release Announcement (Twitter)\nDESCRIPTION: This is an example tweet announcing the release of Pyramid 2.x. It includes links to PyPI, the \"What's New\" document (for the first pre-release), the changes document (for subsequent pre-releases), and the issue tracker on GitHub.\nSOURCE: https://github.com/pylons/pyramid/blob/main/RELEASING.txt#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nPyramid 2.x released.\n\nPyPI\nhttps://pypi.org/project/pyramid/2.x/\n\n=== One time only for new version, first pre-release ===\nWhat's New\nhttps://docs.pylonsproject.org/projects/pyramid/en/2.X-branch/whatsnew-2.X.html\n=== For all subsequent pre-releases ===\nChanges\nhttps://docs.pylonsproject.org/projects/pyramid/en/2.X-branch/changes.html#version-yyyy-mm-dd\n\nIssues\nhttps://github.com/Pylons/pyramid/issues\n```\n\n----------------------------------------\n\nTITLE: REST View Class (With @view_defaults)\nDESCRIPTION: This code demonstrates a REST view class implementation using the `@view_defaults` decorator. The `route_name` is specified once at the class level, and individual methods only specify the `request_method`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.3.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyramid.view import view_defaults\nfrom pyramid.view import view_config\nfrom pyramid.response import Response\n\n@view_defaults(route_name='rest')\nclass RESTView(object):\n    def __init__(self, request):\n        self.request = request\n\n    @view_config(request_method='GET')\n    def get(self):\n        return Response('get')\n\n    @view_config(request_method='POST')\n    def post(self):\n        return Response('post')\n\n    @view_config(request_method='DELETE')\n    def delete(self):\n        return Response('delete')\n```\n\n----------------------------------------\n\nTITLE: Remainder Match Custom Regex URL with data (Text)\nDESCRIPTION: Illustrates the URL that will match a route where the fizzle parameter contains a regex match, including data in the remaining portion of the url.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nfoo/abc/def/a/b/c\n```\n\n----------------------------------------\n\nTITLE: Incorrect Route Pattern with Encoded Characters\nDESCRIPTION: This example shows an *incorrect* way of defining a route pattern using URL-encoded characters directly in the literal parts of the pattern.  This is not recommended.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n/Foo%20Bar/{baz}\n```\n\n----------------------------------------\n\nTITLE: Install Project with Testing Requirements\nDESCRIPTION: Installs the project in editable mode along with its testing dependencies. The '-e' flag installs the project in editable mode, allowing changes to the source code to be reflected immediately without re-installation.  '[testing]' installs the additional testing dependencies specified in setup.py or similar.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/sessions/README.txt#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Models Package (Python)\nDESCRIPTION: The models package defines the resource classes for the Pyramid application, including the MyModel class which is used for persistence in ZODB. It also includes the appmaker function that returns the application root object.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/basiclayout.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport transaction\n\nfrom persistent.mapping import PersistentMapping\n\n\nclass MyModel(PersistentMapping):\n    def __init__(self, name, value):\n        self[\"name\"] = name\n        self[\"value\"] = value\n\n\ndef appmaker(zodb_root):\n    if 'app_root' not in zodb_root:\n        root = MyModel('app_root', '')\n        zodb_root['app_root'] = root\n        transaction.commit()\n    return zodb_root['app_root']\n```\n\n----------------------------------------\n\nTITLE: Running Pyramid Project Server in Bash\nDESCRIPTION: This command starts the Pyramid project's development server using pserve, a utility provided by the Pyramid framework. It uses the 'development.ini' configuration file to configure the server.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/basiclayout/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Generate Alembic Revision\nDESCRIPTION: Generates a new Alembic revision script based on the current database schema. The `--autogenerate` flag automatically detects changes. The `-m` flag adds a message to the revision.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/authorization/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/alembic -c development.ini revision --autogenerate -m \"init\"\n```\n\n----------------------------------------\n\nTITLE: Subscriber Example\nDESCRIPTION: Illustrates how a subscriber function is defined to listen for events, including the context.  Shows the incorrect way, where context is passed first, leading to the event object being misinterpreted. Also shows the correct way.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nregistry.notify(context, event)\n```\n\nLANGUAGE: python\nCODE:\n```\n@subscriber([SomeContextType, SomeEvent])\ndef asubscriber(event):\n    # bzzt! you'll be getting the context here as ``event``, and it'll\n    # be useless\n```\n\nLANGUAGE: python\nCODE:\n```\n@subscriber([SomeContextType, SomeEvent])\ndef asubscriber(context, event):\n    # this will still work!\n```\n\n----------------------------------------\n\nTITLE: Using exception_response Function in Pyramid to Raise HTTP Error\nDESCRIPTION: This snippet demonstrates the use of the `exception_response` function from `pyramid.httpexceptions` to raise an HTTP exception. It creates an HTTP exception object for status code 401 (Unauthorized) and raises it within the view callable. This is a shortcut for directly instantiating an HTTP exception class.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/views.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyramid.httpexceptions import exception_response\n\ndef aview(request):\n    raise exception_response(401)\n```\n\n----------------------------------------\n\nTITLE: Registering Dummy Renderer in Pyramid Tests (Python)\nDESCRIPTION: Demonstrates how to register a dummy renderer for templates within Pyramid unit tests to avoid `KeyError` or `ValueError` exceptions. This involves using `config.testing_add_renderer` to register a basic dummy renderer for a specific template.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfig = Configurator()\nconfig.testing_add_renderer('karl.views:templates/snippets.pt')\n```\n\n----------------------------------------\n\nTITLE: Setting up virtual environment (Unix)\nDESCRIPTION: These commands set up a virtual environment for a new Pyramid project on Unix-like systems. It includes resetting the VENV environment variable, navigating to the project directory, creating a virtual environment, and upgrading packaging tools.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Reset our environment variable for a new virtual environment.\nexport VENV=~/env/myproject/env\n# Change directory into your newly created project.\ncd myproject\n# Create a new virtual environment...\npython3 -m venv $VENV\n# ...where we upgrade packaging tools.\n$VENV/bin/pip install --upgrade pip setuptools\n```\n\n----------------------------------------\n\nTITLE: Bash Shell Command\nDESCRIPTION: Illustrates the representation of Unix shell commands in the Pyramid documentation.  It shows how to install a package using pip within a virtual environment, using the $VENV environment variable.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/typographical-conventions.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Migrating from repoze.bfg.convention to core\nDESCRIPTION: The functionality of ``repoze.bfg.convention`` has been merged into the core. To migrate, replace imports and ZCML configuration. This change introduces a dependency on the ``martian`` library.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_39\n\nLANGUAGE: Python\nCODE:\n```\nrepoze.bfg.convention.bfg_view\n```\n\nLANGUAGE: Python\nCODE:\n```\nrepoze.bfg.view.bfg_view\n```\n\nLANGUAGE: xml\nCODE:\n```\n<convention package=\".\">\n<scan package=\".\">\n```\n\n----------------------------------------\n\nTITLE: Running Pyramid Application with pserve in Bash\nDESCRIPTION: This command starts a Pyramid application using the pserve utility. It takes the development.ini configuration file as an argument and enables the --reload option for automatic server restarts upon code changes.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Renaming IRootPolicy interface to IRootFactory\nDESCRIPTION: The ``repoze.bfg.interfaces.IRootPolicy`` interface has been renamed to ``repoze.bfg.interfaces.IRootFactory``. The old name is deprecated.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_46\n\nLANGUAGE: Python\nCODE:\n```\nrepoze.bfg.interfaces.IRootPolicy\nrepoze.bfg.interfaces.IRootFactory\n```\n\n----------------------------------------\n\nTITLE: Cookiecutter prompts and input\nDESCRIPTION: Shows example inputs and prompts during the execution of the cookiecutter command. This is an example of user interaction with the tool.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/cookiecutters.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nYou've cloned ~/.cookiecutters/pyramid-cookiecutter-starter before.\nIs it okay to delete and re-clone it? [yes]: yes\nproject_name [Pyramid Scaffold]: cc_starter\nrepo_name [cc_starter]: cc_starter\nSelect template_language:\n1 - jinja2\n2 - chameleon\n3 - mako\nChoose from 1, 2, 3 [1]: 1\nSelect backend:\n1 - none\n2 - sqlalchemy\n3 - zodb\nChoose from 1, 2, 3 [1]: 1\n```\n\n----------------------------------------\n\nTITLE: Setting environment variable on macOS/Linux\nDESCRIPTION: Command to set the VENV environment variable pointing to the virtual environment directory on macOS and Linux.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/requirements.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# macOS and Linux\nexport VENV=~/projects/quick_tutorial/env\n```\n\n----------------------------------------\n\nTITLE: Installing Project for Development (Windows)\nDESCRIPTION: This command installs the newly created Pyramid project in development mode using pip. The -e flag allows for editable installs, and the . specifies the current directory as the project location.  It must be run from the project root.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_5\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Run Tests with tox\nDESCRIPTION: Runs tests using tox for the default Python version. This command executes all tests defined in the `tox.ini` file for the Python version currently being used.  The `-e py` argument specifies the environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HACKING.txt#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ $TOX -e py\n```\n\n----------------------------------------\n\nTITLE: Build Documentation with tox\nDESCRIPTION: Builds the documentation using tox. This command generates HTML documentation from the reStructuredText source files.  The resulting HTML files are located in the `.tox/docs/html` directory. It uses the tox environment named 'docs'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HACKING.txt#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\n$ $TOX -e docs\n```\n\n----------------------------------------\n\nTITLE: Remainder Match Example (Text)\nDESCRIPTION: Demonstrates how to use a remainder match in a route pattern.  The remainder match must come at the end of the pattern and does not need to be preceded by a slash. The matched value is a tuple of path segments.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nfoo/{baz}/{bar}*fizzle\n```\n\n----------------------------------------\n\nTITLE: Groundhog Route Definition with Imperative Configuration\nDESCRIPTION: This code shows an alternative, imperative way to define routes in the Groundhog framework.  Instead of decorators, the `add_route` method is used to associate the `foo` function with the `/foo/` route, providing explicit control over the mapping.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef foo():\n    return 'foo'\n\ngh = Groundhog('myapp', 'seekrit')\n\nif __name__ == '__main__':\n    gh.add_route(foo, '/foo/')\n    gh.run()\n```\n\n----------------------------------------\n\nTITLE: Minimal Pyramid View Configuration with @view_config\nDESCRIPTION: This example showcases a minimal usage of the `@view_config` decorator in Pyramid. When no arguments are provided, the view name defaults to the function name, and the view is registered to match any resource type with no specific permission, request method, or other constraints.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyramid.response import Response\nfrom pyramid.view import view_config\n\n@view_config()\ndef my_view(request):\n    \"\"\" My view \"\"\"\n    return Response()\n```\n\n----------------------------------------\n\nTITLE: Remainder Match URL Example (Text)\nDESCRIPTION: Illustrates the URL that will match the remainder route defined earlier and how it corresponds to a matchdict.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nfoo/1/2/\n```\n\n----------------------------------------\n\nTITLE: Installing in Development Mode\nDESCRIPTION: Installs the current project in development mode using pip. This command makes the project's code available for import and use, and creates a link to the source code so changes are immediately reflected.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/templating.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Change Directory\nDESCRIPTION: Changes the current directory to the project's root directory. This assumes that the current directory is not already the project directory.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/myproject/README.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd myproject\n```\n\n----------------------------------------\n\nTITLE: Change Directory to Tutorial\nDESCRIPTION: This command navigates the terminal's current directory to the 'tutorial' directory, which is assumed to be the project's root directory. This is a prerequisite for subsequent commands that operate within the project's context.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/basiclayout/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd tutorial\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Factory in Pyramid Python\nDESCRIPTION: This snippet demonstrates how to configure a Pyramid application with a custom root factory.  It instantiates a `Configurator` object, passing the `Root` class defined earlier as the `root_factory` argument. This ensures that the `Root` class is used to generate the root resource whenever a request enters the application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/traversal.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfig = Configurator(root_factory=Root)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Response Object\nDESCRIPTION: This snippet showcases how to implement a completely custom response object, ensuring it implements all attributes and methods defined in `pyramid.interfaces.IResponse` and is decorated with `zope.interface.implementer(IResponse)`. This is necessary when not using `pyramid.response.Response` at all.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.interfaces import IResponse\nfrom zope.interface import implementer\n\n@implementer(IResponse)\nclass MyResponse(object):\n    # ... an implementation of every method and attribute\n    # documented in IResponse should follow ...\n```\n\n----------------------------------------\n\nTITLE: Attaching Interface to Resource Instance in Python\nDESCRIPTION: This snippet demonstrates how to define an interface and use the `zope.interface.alsoProvides` function to associate the interface with a resource instance. It defines a marker interface `IHello`, a class `Hello`, and a function `make_hello` that creates an instance of `Hello` and attaches the interface to it.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/traversal.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom zope.interface import Interface\nfrom zope.interface import alsoProvides\n\nclass IHello(Interface):\n    \"\"\" A marker interface \"\"\"\n\nclass Hello(object):\n    pass\n\n    def make_hello():\n        hello = Hello()\n        alsoProvides(hello, IHello)\n        return hello\n```\n\n----------------------------------------\n\nTITLE: Configure Default Locale Name Programmatically\nDESCRIPTION: Shows how to set the `pyramid.default_locale_name` setting programmatically when configuring a Pyramid application. This setting specifies the default locale to use when the locale negotiator returns `None`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\nconfig = Configurator(settings={'pyramid.default_locale_name':'de'})\n```\n\n----------------------------------------\n\nTITLE: Run Pyramid App\nDESCRIPTION: This command is used to run a Pyramid application from the command line. It assumes that a virtual environment has been created and Pyramid installed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ $VENV/bin/python ./app.py\n```\n\n----------------------------------------\n\nTITLE: Upgrade Packaging Tools (pip, setuptools)\nDESCRIPTION: Upgrades pip and setuptools within the created virtual environment. This ensures that the latest versions of the packaging tools are being used, preventing potential compatibility issues during dependency installation.  It uses the pip executable within the 'env' virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/package/README.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pip install --upgrade pip setuptools\n```\n\n----------------------------------------\n\nTITLE: Resource Location Pseudocode in Pyramid\nDESCRIPTION: Illustrates how resource location (traversal) works using Python pseudocode. The `get_root()` function returns the root resource, and subsequent key lookups traverse the resource tree. A KeyError results in a 404 error.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/muchadoabouttraversal.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nget_root()['joeschmoe']['photos']['photo1']\n```\n\n----------------------------------------\n\nTITLE: Compiling a Message Catalog with msgfmt\nDESCRIPTION: This command compiles a message catalog (.po) file into a binary .mo file, which is used by the application for runtime translations. It uses the msgfmt command from Gettext.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncd /file/path/to/myapplication_setup.py\nmsgfmt -o myapplication/locale/es/LC_MESSAGES/myapplication.mo \\\n    myapplication/locale/es/LC_MESSAGES/myapplication.po\n```\n\n----------------------------------------\n\nTITLE: Incorrect Byte String Pattern\nDESCRIPTION: This example shows the incorrect way to set a string for a route using a byte string pattern.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n/La Pe\\xc3\\xb1a/{x}\n```\n\n----------------------------------------\n\nTITLE: Running the Pyramid Application (Bash)\nDESCRIPTION: This bash command runs the Pyramid application using pserve. The --reload flag enables automatic reloading of the application when code changes are detected.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/databases.rst#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\n$VENV/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Add pyramid_debugtoolbar as Dev Dependency in setup.py (Python)\nDESCRIPTION: This python code demonstrates how to add `pyramid_debugtoolbar` to the `dev_requires` list in `setup.py`. This allows installation of the toolbar and its dependencies as a 'development' extra using Setuptools. `extras_require` is a dictionary where 'dev' is the key and the list of dependencies is the value.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/debugtoolbar.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    requires=[\n        'pyramid',\n        'pyramid_chameleon',\n        'waitress',\n    ],\n    extras_require={\n        'testing': [\n            'WebTest < 2.0',\n            'pytest',\n            'pytest-cov',\n        ],\n        'dev': [\n            'pyramid_debugtoolbar',\n            'pytest-watch',\n            'pserve',\n        ],\n    },\n    entry_points={\n        'paste.app_factory': [\n            'main = debugtoolbar:main',\n        ],\n    },\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect Response Mutation (Python)\nDESCRIPTION: This code demonstrates the incorrect way to modify response headers when using a renderer in Pyramid. Mutating `request.response` has no effect if you are returning a *different* `Response` object.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\n\ndef view(request):\n    request.response.set_cookie('abc', '123') # this has no effect\n    return Response('OK') # because we're returning a different response\n```\n\n----------------------------------------\n\nTITLE: Create Python Virtual Environment\nDESCRIPTION: This command creates a Python virtual environment named 'env' within the project directory, isolating project dependencies.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/tests/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: View returning an HTTP exception bypassing the renderer\nDESCRIPTION: This code snippet shows how a Pyramid view can return an HTTP exception (like HTTPFound), which is a type of Response.  This bypasses the configured renderer (in this case, 'json').\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.httpexceptions import HTTPFound\nfrom pyramid.view import view_config\n\n@view_config(renderer='json')\ndef view(request):\n    return HTTPFound(location='http://example.com') # json renderer avoided\n```\n\n----------------------------------------\n\nTITLE: View Configuration with @view_config on a Class (Python)\nDESCRIPTION: This code illustrates how to use the @view_config decorator on a class to define a view.  The MyView class is associated with the 'hello' route.  The __call__ method is invoked when the route is matched and returns a response.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\nfrom pyramid.view import view_config\n\n@view_config(route_name='hello')\nclass MyView(object):\n    def __init__(self, request):\n        self.request = request\n\n    def __call__(self):\n        return Response('hello')\n```\n\n----------------------------------------\n\nTITLE: Add bcrypt dependency in setup.py\nDESCRIPTION: This Python code snippet shows the `setup.py` file being modified to include `bcrypt` as a dependency for the project. `bcrypt` is used for securely hashing passwords. The `emphasize-lines: 6` directive indicates that the line containing the `bcrypt` dependency is important.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/authentication.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n   .. literalinclude:: authentication/setup.py\n    :language: python\n    :emphasize-lines: 6\n    :linenos:\n```\n\n----------------------------------------\n\nTITLE: Conflicting Actions Example in Pyramid\nDESCRIPTION: This example shows how conflicting actions can prevent a Pyramid application from starting.  Two calls to `config.add_jammyjam` with different arguments result in a `ConfigurationConflictError` because the actions have the same discriminator and no conflict resolution is provided.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/extconfig.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_jammyjam('first')\nconfig.add_jammyjam('second')\n```\n\n----------------------------------------\n\nTITLE: Replacing INotFoundAppFactory in ZCML\nDESCRIPTION: This snippet demonstrates how to replace the deprecated INotFoundAppFactory interface with the <notfound> directive in ZCML. It configures a view to be used when a resource is not found. This replacement ensures correct handling of 404 errors.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n   <utility provides=\"repoze.bfg.interfaces.INotFoundAppFactory\"\n            component=\"helloworld.factories.notfound_app_factory\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n   <notfound \n       view=\"helloworld.views.notfound_view\"/>\n```\n\n----------------------------------------\n\nTITLE: Module-Scope Side Effects Example: app2.py\nDESCRIPTION: Part of the module-scope side-effects example. This file imports app.py and uses the same decorator, contributing to the problem of multiple executions.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport app\n\n@app.decorator\ndef bar():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Generating Path with route_remainder_name in Pyramid\nDESCRIPTION: This code snippet shows how to use `route_remainder_name` to specify a different stararg name when generating a path using `request.resource_path`. It uses the 'mysection' route and specifies 'subpath' as the remainder name.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hybrid.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nrequest.resource_path(a, route_name='mysection',\n                         route_remainder_name='subpath')\n```\n\n----------------------------------------\n\nTITLE: Create Virtual Environment (Windows)\nDESCRIPTION: Creates a virtual environment using the python -m venv command. The virtual environment is created in the directory specified by the VENV environment variable.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_6\n\nLANGUAGE: doscon\nCODE:\n```\npython -m venv %VENV%\n```\n\n----------------------------------------\n\nTITLE: Displaying Matching Views with pviews in Bash\nDESCRIPTION: This command uses the pviews utility to display the matching views for the /FrontPage URL in the Pyramid application configured in the development.ini file. The #tutorial part specifies the section in the INI file to use.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pviews development.ini#tutorial /FrontPage\n```\n\n----------------------------------------\n\nTITLE: Replacing IUnauthorizedAppFactory in ZCML\nDESCRIPTION: This snippet demonstrates how to replace the deprecated IUnauthorizedAppFactory interface with the <forbidden> directive in ZCML. It configures a view to be used when access to a resource is forbidden, ensuring proper handling of 403 errors.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n   <utility provides=\"repoze.bfg.interfaces.IUnauthorizedAppFactory\"\n            component=\"helloworld.factories.unauthorized_app_factory\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n   <forbidden\n       view=\"helloworld.views.forbidden_view\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Request Factory Imperatively in Pyramid (Python)\nDESCRIPTION: This code demonstrates how to set the request factory imperatively using `config.set_request_factory` in Pyramid after the `Configurator` has already been constructed.  It defines a custom request class `MyRequest` that inherits from `pyramid.request.Request`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\nfrom pyramid.request import Request\n\nclass MyRequest(Request):\n    pass\n\nconfig = Configurator()\nconfig.set_request_factory(MyRequest)\n```\n\n----------------------------------------\n\nTITLE: Install Project in Editable Mode (Bash)\nDESCRIPTION: Installs the project in editable mode, along with its testing dependencies. Editable mode allows for code changes to be reflected immediately without reinstalling the package. The `.[testing]` extra installs dependencies required for running tests.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/installation/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Custom NotFound View with AppendSlashNotFoundViewFactory in Pyramid\nDESCRIPTION: This snippet demonstrates how to define a custom NotFound view using `AppendSlashNotFoundViewFactory`. It creates a custom view callable that returns an HTTPNotFound response and registers it with the Pyramid configuration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom repoze.bfg.exceptions import NotFound\nfrom repoze.bfg.view import AppendSlashNotFoundViewFactory\n\n\n\ndef notfound_view(context, request):\n    return HTTPNotFound('It aint there, stop trying!')\n\n\ncustom_append_slash = AppendSlashNotFoundViewFactory(notfound_view)\nconfig.add_view(custom_append_slash, context=NotFound)\n```\n\n----------------------------------------\n\nTITLE: Testing for Deprecation Warnings in Pyramid\nDESCRIPTION: This snippet demonstrates how to run tests in a Python environment so that DeprecationWarnings are printed to the console. This allows developers to identify deprecated features in their code when upgrading Pyramid.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/upgrading.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -Wd setup.py test -q\n```\n\n----------------------------------------\n\nTITLE: ACL Deny All Example in Python\nDESCRIPTION: This example shows the equivalent of `DENY_ALL` using `Deny`, `Everyone`, and `ALL_PERMISSIONS` from `pyramid.authorization`. It explicitly denies all permissions to everyone.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.authorization import ALL_PERMISSIONS\n__acl__ = [ (Deny, Everyone, ALL_PERMISSIONS) ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Listen Address in development.ini\nDESCRIPTION: This configuration snippet demonstrates how to modify the `development.ini` file to allow the Pyramid application to be accessed from other machines on the same network by changing the listen address to `*:6543`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n[server:main]\nuse = egg:waitress#main\nlisten = *:6543\n```\n\n----------------------------------------\n\nTITLE: Groundhog Route Definition with Decorators (Example 1)\nDESCRIPTION: This snippet demonstrates how to define routes in the Groundhog microframework using decorators. It sets up an application with two routes: '/admin' and '/:action'.  The route '/admin' is defined before '/:action'. When visiting /admin, the admin page is displayed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ngh = Groundhog('myapp', 'seekrit')\n\n@gh.route('/foo/')\ndef foo():\n    return 'foo'\n\nif __name__ == '__main__':\n    gh.run()\n```\n\n----------------------------------------\n\nTITLE: Running the Pyramid application (Bash)\nDESCRIPTION: This command runs the Pyramid application using pserve with the specified configuration file (development.ini). The --reload option enables automatic reloading of the application when code changes are detected, which is useful during development.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/ini.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Overriding an Asset with a Relative Package Path in Pyramid\nDESCRIPTION: This snippet illustrates using a relative package path (starting with a dot) when overriding an asset in Pyramid. This means that the package is relative to the package where the configuration file resides. It overrides 'templates/' in the '.subpackage' with 'templates/' in 'another.package'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nconfig.override_asset(to_override='.subpackage:templates/',\n                      override_with='another.package:templates/')\n```\n\n----------------------------------------\n\nTITLE: Mod_proxy Configuration for Virtual Root\nDESCRIPTION: This Apache `mod_proxy` configuration demonstrates how to host a subobject as a virtual root using `RequestHeader`. It rewrites requests to the backend server and adds the `X-Vhm-Root` header to specify the virtual root path.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/vhosting.rst#_snippet_2\n\nLANGUAGE: apache\nCODE:\n```\nNameVirtualHost *:80\n\n<VirtualHost *:80>\n  ServerName www.example.com\n  RewriteEngine On\n  RewriteRule ^/(.*) http://127.0.0.1:6543/$1 [L,P]\n  ProxyPreserveHost on\n  RequestHeader add X-Vhm-Root /cms\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Remainder Match Custom Regex URL (Text)\nDESCRIPTION: Illustrates the URL that will match a route where the fizzle parameter contains a regex match.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nfoo/1/2/\n```\n\n----------------------------------------\n\nTITLE: Custom ContentTypePredicate Class in Pyramid (Python)\nDESCRIPTION: This code defines the `ContentTypePredicate` class, which is used as a custom view or route predicate factory. It demonstrates the required `__init__`, `text`, `phash`, and `__call__` methods. The `__call__` method determines if the predicate matches based on the request's content type.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\nclass ContentTypePredicate(object):\n    def __init__(self, val, info):\n        self.val = val\n\n    def text(self):\n        return 'content_type = %s' % (self.val,)\n\n    phash = text\n\n    def __call__(self, context, request):\n        return request.content_type == self.val\n```\n\n----------------------------------------\n\nTITLE: Run Tests with Coverage (Windows)\nDESCRIPTION: Runs the project tests using pytest, collecting coverage information and reporting it in the terminal, displaying missing lines. Requires pytest-cov to be installed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_20\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pytest --cov --cov-report=term-missing\n```\n\n----------------------------------------\n\nTITLE: Configuring Rutter Composite for Pyramid\nDESCRIPTION: This PasteDeploy configuration snippet demonstrates how to use a `rutter` composite to host a Pyramid application under a specific URL prefix. It defines the Pyramid application and then uses `rutter#urlmap` to map the `/pyramidapp` prefix to the application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/vhosting.rst#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[app:mypyramidapp]\nuse = egg:mypyramidapp\n\n[composite:main]\nuse = egg:rutter#urlmap\n/pyramidapp = mypyramidapp\n```\n\n----------------------------------------\n\nTITLE: View returning a dictionary rendered as String in Pyramid\nDESCRIPTION: This code snippet demonstrates a Pyramid view that returns a dictionary. Because the view is configured with the 'string' renderer, the dictionary is automatically converted to its string representation.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\n\n@view_config(renderer='string')\ndef hello_world(request):\n    return {'content':'Hello!'}\n```\n\n----------------------------------------\n\nTITLE: Configurator: Setting Response Factory - Python\nDESCRIPTION: Illustrates how to set a custom response factory using `pyramid.config.Configurator.set_response_factory` or the `response_factory` keyword argument during `Configurator` initialization. This enables the use of a custom `Response` class, allowing for greater control over response creation.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Multiple @view_config Decorators for a Single View (Python)\nDESCRIPTION: This code shows how to register a single view under multiple route names using multiple @view_config decorators.  In this example, the 'edit' function is registered for both the 'edit' and 'change' routes.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\nfrom pyramid.response import Response\n\n@view_config(route_name='edit')\n@view_config(route_name='change')\ndef edit(request):\n    return Response('edited!')\n```\n\n----------------------------------------\n\nTITLE: Running Project (Shell)\nDESCRIPTION: This command starts the Pyramid project using the 'pserve' command, which is part of the Pyramid framework. It uses the 'development.ini' configuration file to configure the application's settings. Requires an active virtual environment and a valid 'development.ini' file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/authorization/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Install and Build Package - Windows\nDESCRIPTION: These commands install the `build` package using pip and then use it to build the source and binary distributions of the Pyramid application. The application's `pyproject.toml` file must be in the current working directory. `%VENV%\\Scripts\\` refers to the virtual environment's executable path.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/distributing.rst#_snippet_1\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pip install build\n%VENV%\\Scripts\\python -m build\n```\n\n----------------------------------------\n\nTITLE: Adding a Resource URL Adapter in Pyramid\nDESCRIPTION: This snippet shows how to add a resource URL adapter that allows for customization of URL generation when using a custom traverser. It associates a `ResourceURLAdapter` with a specific resource type (`MyRoot`), allowing custom URL generation for that resource type.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom myapp.traversal import ResourceURLAdapter\nfrom myapp.resources import MyRoot\n\nconfig.add_resource_url_adapter(ResourceURLAdapter, MyRoot)\n```\n\n----------------------------------------\n\nTITLE: Linking to Static CSS in Jinja2 Template\nDESCRIPTION: This snippet shows how to link to a static CSS file in a Jinja2 template. It assumes the CSS file is located at the `/static/app.css` URL.  This is a basic way to include static assets without using the `request.static_url` helper.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_11\n\nLANGUAGE: jinja\nCODE:\n```\n<link rel=\"stylesheet\" href=\"/static/app.css\" />\n```\n\n----------------------------------------\n\nTITLE: Propagating Threadlocal Request in Pyramid\nDESCRIPTION: This snippet demonstrates how `config.begin()` propagates the current threadlocal request when the registry is the same. It pushes a request initially and then propagates it through subsequent calls to `config.begin()` without a request argument.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrequest = Request.blank(...)\nconfig.begin(request)  # pushes a request\nconfig.begin()         # propagates the previous request through unchanged\nassert get_current_request() is request\n```\n\n----------------------------------------\n\nTITLE: Run Code Linter with tox\nDESCRIPTION: Runs the code linter (flake8) and code formatters (Black and isort) using tox. This command checks for PEP8 style guidelines and formatting issues. It utilizes a tox environment named 'lint'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HACKING.txt#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ $TOX -e lint\n```\n\n----------------------------------------\n\nTITLE: Generate Alembic Revision\nDESCRIPTION: Generates an Alembic revision script for database migrations.  The '--autogenerate' flag automatically detects changes to the database schema and generates the corresponding migration code. The '-m \"init\"' provides a message for the revision.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/sqla_demo/README.txt#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/alembic -c development.ini revision --autogenerate -m \"init\"\n```\n\n----------------------------------------\n\nTITLE: Running the Pyramid application (bash)\nDESCRIPTION: This bash command starts the Pyramid application using pserve. The `development.ini` file provides the configuration settings. The `--reload` flag enables automatic reloading of the application when changes are detected in the source code.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/static_assets.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Subrequest Exception Handling With Tweens in Pyramid\nDESCRIPTION: This example demonstrates how to use `use_tweens=True` with `invoke_subrequest` to allow exception views to handle exceptions raised within the subrequest.  When `use_tweens` is enabled, the exception view tween will catch the exception and generate a 500 response.  The `emphasize-lines: 7` directive highlights key parts of the code.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/subrequest.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom wsgiref.simple_server import make_server\nfrom pyramid.config import Configurator\nfrom pyramid.request import Request\n\ndef view_one(request):\n    subreq = Request.blank('/view_two')\n    response = request.invoke_subrequest(subreq, use_tweens=True)\n    return response\n\ndef view_two(request):\n    raise ValueError('foo')\n\ndef excview(request):\n    request.response.body = b'An exception was raised'\n    request.response.status_int = 500\n    return request.response\n\nif __name__ == '__main__':\n    config = Configurator()\n    config.add_route('one', '/view_one')\n    config.add_route('two', '/view_two')\n    config.add_view(view_one, route_name='one')\n    config.add_view(view_two, route_name='two', renderer='string')\n    config.add_view(excview, context=Exception)\n    app = config.make_wsgi_app()\n    server = make_server('0.0.0.0', 8080, app)\n    server.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Unicode Route Pattern Example (Text)\nDESCRIPTION: Illustrates how to use Unicode characters in route patterns using either source file encoding or Unicode escape characters. Dynamic segment names cannot contain high-order characters.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n/La Peña/{x}\n```\n\n----------------------------------------\n\nTITLE: Adding a Route for JSON Response\nDESCRIPTION: This code snippet adds a route to a Pyramid application that will respond with JSON data. The `route_name` is set to 'hello', and the `route_path` is set to 'hello.json'.  This route will be used by the view that returns JSON.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('hello', 'hello.json')\n```\n\n----------------------------------------\n\nTITLE: Preventing View Defaults Inheritance (Python)\nDESCRIPTION: This code demonstrates how to prevent a subclass from inheriting view defaults from its parent class by using an empty `@view_defaults()` decorator on the subclass.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@view_defaults(route_name='rest')\nclass Foo(object):\n    pass\n\n@view_defaults()\nclass Bar(Foo):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Subscribing to object events - Pyramid (Python)\nDESCRIPTION: This snippet addresses a bug in Pyramid 1.0 where multiple interfaces passed to the `subscriber` directive were incorrectly handled. It shows the correct way to subscribe to an object event when using multiple interfaces.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.1.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@subscriber([IFoo, IBar])\ndef expects_object_event(object, event):\n    print object, event\n```\n\n----------------------------------------\n\nTITLE: View Using Global Response Object\nDESCRIPTION: This snippet shows how to directly use the global response object available via `request.response`.  The view modifies the `body` and `content_type` attributes of the response object. It returns the modified response object.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advanced-features.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef aview(request):\n    response = request.response\n    response.body = 'Hello world!'\n    response.content_type = 'text/plain'\n    return response\n```\n\n----------------------------------------\n\nTITLE: Adding a Route with Custom Remainder in Pyramid\nDESCRIPTION: This code snippet adds a route with a custom remainder stararg named `subpath` instead of the default `traverse`. The route is named 'mysection' and maps to the path '/mysection*subpath'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hybrid.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('mysection', '/mysection*subpath')\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Configuration Decorator\nDESCRIPTION: This snippet demonstrates using the custom `registerFunction` decorator to register a function. The registration happens during a scan, after the utility is available in the application registry.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n@registerFunction('/some/path')\ndef my_function():\n    do_stuff()\n```\n\n----------------------------------------\n\nTITLE: pserve startup log example\nDESCRIPTION: Example log output from pserve showing the server starting up and listening on localhost:6543. This shows successful app initialization.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/cookiecutters.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nStarting monitor for PID 60461.\nStarting server in PID 60461.\nServing on http://localhost:6543\nServing on http://localhost:6543\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Attributes in Predicates (Python)\nDESCRIPTION: Illustrates how to access route attributes such as `name` and `path` within a route predicate using the `info` dictionary.  This example demonstrates how to determine if the route's name is in a list and compare a match to a specific year.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef twenty_ten(info, request):\n    if info['route'].name in ('ymd', 'ym', 'y'):\n        return info['match']['year'] == '2010'\n\nadd_route('y', '/:year', custom_predicates=(twenty_ten,))\nadd_route('ym', '/:year/:month', custom_predicates=(twenty_ten,))\nadd_route('ymd', '/:year/:month:/day', custom_predicates=(twenty_ten,))\n```\n\n----------------------------------------\n\nTITLE: Run Tests (Unix)\nDESCRIPTION: Executes the pytest command with the '-q' option (quiet mode) within the virtual environment to run the project's tests. This command requires the project to be installed in development mode and the testing requirements to be installed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest -q\n```\n\n----------------------------------------\n\nTITLE: JSONP Request Example (JavaScript)\nDESCRIPTION: This JavaScript code shows an example of how to make a JSONP request using JQuery's getJSON function.  The callback parameter is automatically filled in by jQuery.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar api_url = 'http://api.geonames.org/timezoneJSON' +\n                  '?lat=38.301733840000004' +\n                  '&lng=-77.45869621' +\n                  '&username=fred' +\n                  '&callback=?';\njqhxr = $.getJSON(api_url);\n```\n\n----------------------------------------\n\nTITLE: View Configuration with @view_config (attr parameter) (Python)\nDESCRIPTION: This code demonstrates an equivalent way of using @view_config with the 'attr' parameter on the class to achieve the same effect as decorating a method with @view_config.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/viewconfig.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\nfrom pyramid.view import view_config\n\n@view_config(attr='amethod', route_name='hello')\nclass MyView(object):\n    def __init__(self, request):\n        self.request = request\n\n    def amethod(self):\n        return Response('hello')\n```\n\n----------------------------------------\n\nTITLE: Enabling Authorization Debugging via Command Line\nDESCRIPTION: This command line instruction shows how to enable authorization debugging by setting the `PYRAMID_DEBUG_AUTHORIZATION` environment variable to `1` before running the Pyramid application. This will log authorization decisions to the console.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/security.rst#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nPYRAMID_DEBUG_AUTHORIZATION=1 $VENV/bin/pserve myproject.ini\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Pytest and Coverage in Bash\nDESCRIPTION: This command runs pytest with coverage reporting enabled for the `myproject` module. It specifies the module to test and the tests directory, and uses the `-q` flag for quiet output.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest --cov=myproject myproject tests -q\n```\n\n----------------------------------------\n\nTITLE: Example pserve output\nDESCRIPTION: Shows an example output from running pserve, indicating that the server has started and is listening on localhost:6543\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nStarting monitor for PID 65233.\nStarting server in PID 65233.\nServing on http://localhost:6543\nServing on http://localhost:6543\n```\n\n----------------------------------------\n\nTITLE: Using Pyramid's ptweens Command in Bash\nDESCRIPTION: Illustrates how to use the ptweens command to print a representation of the application's tween chain (both implicit and explicit) to the terminal. The command requires the path to the application's .ini file as an argument.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/ptweens development.ini\n```\n\n----------------------------------------\n\nTITLE: Print Incoming Request (Python 3)\nDESCRIPTION: Shows the correct way to print to the console in Python 3 when a request is received.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/hello_world.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint('Incoming request')\n```\n\n----------------------------------------\n\nTITLE: Declare Deform dependency in setup.py\nDESCRIPTION: Modifies the setup.py file to declare a dependency on Deform.  Deform pulls in Colander as a dependency, providing schema and validation capabilities.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/forms.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# This is a placeholder for the setup.py content.\n# Assuming the relevant part is adding 'deform' to install_requires.\n# Example:\ninstall_requires=[\n    'pyramid',\n    'pyramid_chameleon',\n    'pyramid_debugtoolbar',\n    'waitress',\n    'deform', #Added Deform here\n]\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Starts the Pyramid development server using the pserve command and the 'development.ini' configuration file. This allows developers to run and test the application locally during development.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/logging/README.txt#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Route Factory Example (Python)\nDESCRIPTION: This code provides an example of a route factory. The `Mine` class is a callable that accepts a request object and returns an arbitrary Python object, which in this case does nothing in the `__init__` method.  This demonstrates the basic structure of a route factory that will be used as a custom root object when the route is matched.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nclass Mine(object):\n    def __init__(self, request):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Making Global Views Match with `use_global_views` in Pyramid\nDESCRIPTION: This shows how to enable global views (views without a `route_name` attribute) to match a route with `*traverse` by setting `use_global_views=True` in the route definition. The view `myproject.views.bazbuz` will be found even without `route_name=\"abc\"`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hybrid.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('abc', '/abc/*traverse', use_global_views=True)\n    config.add_view('myproject.views.bazbuz', name='bazbuz')\n```\n\n----------------------------------------\n\nTITLE: Python Dictionary Access Example\nDESCRIPTION: Demonstrates how Python translates dictionary-style key access into the `__getitem__` method call, which is used by Pyramid's traversal mechanism when accessing resources. Shows standard dictionary access and the equivalent `__getitem__` call.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/muchadoabouttraversal.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> adict = {}\n>>> adict['a'] = 1\n>>> adict['a']\n1\n>>> adict.__getitem__('a')\n1\n```\n\n----------------------------------------\n\nTITLE: HTML Template\nDESCRIPTION: Defines an HTML template using Chameleon syntax. It receives data from the view and renders it into HTML, displaying a list of values and a title.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/templating.rst#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title tal:content=\"name\"></title>\n</head>\n<body>\n    <h1>Hello <span tal:content=\"name\"></span></h1>\n    <ul>\n        <li tal:repeat=\"value values\" tal:content=\"value\"></li>\n    </ul>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Invert Predicate Value with not_\nDESCRIPTION: This snippet shows how to use the `not_` class to invert the result of a predicate value in a view configuration. In this example, the view will be called only if the request method is not 'POST'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.5.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import not_\n\n@view_config(route_name='myroute', request_method=not_('POST'))\ndef myview(request): ...\n```\n\n----------------------------------------\n\nTITLE: Upgrade Packaging Tools (Windows)\nDESCRIPTION: Upgrades the 'pip' and 'setuptools' packages within the virtual environment using pip. This command makes sure that you have the latest versions of pip and setuptools for managing dependencies.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_12\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pip install --upgrade pip setuptools\n```\n\n----------------------------------------\n\nTITLE: Run pytest tests\nDESCRIPTION: Runs the pytest test suite to ensure that all tests, including the new JSON-related test, pass. The ``-q`` flag is used for quiet output.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/json.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest tutorial/tests.py -q\n.....\n5 passed in 0.47 seconds\n```\n\n----------------------------------------\n\nTITLE: View returning a Response object bypassing the renderer\nDESCRIPTION: This code snippet demonstrates how a Pyramid view can return a Response object directly, bypassing the configured renderer (in this case, 'json'). The Response object is returned as-is.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\nfrom pyramid.view import view_config\n\n@view_config(renderer='json')\ndef view(request):\n    return Response('OK') # json renderer avoided\n```\n\n----------------------------------------\n\nTITLE: Import Statements for Pyramid App\nDESCRIPTION: These import statements are required for the 'Hello World' Pyramid application. They import necessary modules from `wsgiref` and `pyramid` to create and configure the web application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/firstapp.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom wsgiref.simple_server import make_server\nfrom pyramid.config import Configurator\nfrom pyramid.response import Response\n```\n\n----------------------------------------\n\nTITLE: Run Code Formatters with tox\nDESCRIPTION: Runs code formatters (Black and isort) using tox. This ensures consistent code style across the project. It utilizes a tox environment named 'format'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HACKING.txt#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ $TOX -e format\n```\n\n----------------------------------------\n\nTITLE: Upgrade Database with Alembic\nDESCRIPTION: Upgrades the database to the latest revision using Alembic.  This applies any pending database migrations, ensuring that the database schema matches the application's requirements.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/sqla_demo/README.txt#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/alembic -c development.ini upgrade head\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes and Views without Autocommit - Python\nDESCRIPTION: This snippet demonstrates how to configure routes and views using a non-autocommitting Configurator. The order of adding routes and views does not matter in this case.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.2.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconfig = Configurator()\nconfig.add_view('my.pkg.someview', route_name='foo')\nconfig.add_route('foo', '/foo')\n```\n\n----------------------------------------\n\nTITLE: Logging Message to View (Python)\nDESCRIPTION: This code snippet extends the `logging/tutorial/views.py` file by importing the `logging` module and adding a logging statement within the `home_view` function. This will log a DEBUG message when the `home_view` is accessed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/logging.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n   .. literalinclude:: logging/tutorial/views.py\n       :linenos:\n```\n\n----------------------------------------\n\nTITLE: Starting Pyramid Application with pserve on Windows\nDESCRIPTION: This command starts the Pyramid application using the `pserve` command with the specified configuration file (`development.ini`). It's designed for Windows environments using a virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_11\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Installing Lingua using pip on Windows\nDESCRIPTION: This command installs the Lingua package using pip within a Windows environment. %VENV% should represent the path to the virtual environment. It is used for internationalizing Pyramid applications.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_11\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pip install lingua\n```\n\n----------------------------------------\n\nTITLE: Change Directory (Shell)\nDESCRIPTION: Changes the current directory to the project root. This ensures subsequent commands are executed in the correct context, where files like `README.txt` and `setup.py` are located.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/cookiecutters/README.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd cc_starter\n```\n\n----------------------------------------\n\nTITLE: Adding Routes with Configurator in Python\nDESCRIPTION: This Python snippet demonstrates how to define a function for adding routes using the Pyramid Configurator.  This function is intended to be used with `config.include` for modular configuration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advconfig.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef add_routes(config):\n    config.add_route(...)\n```\n\n----------------------------------------\n\nTITLE: Obtaining the Lineage of a Resource\nDESCRIPTION: Illustrates how to obtain the lineage (parent chain) of a resource using `pyramid.location.lineage`. The function returns a generator that yields the resource and its ancestors.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/resources.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass Thing(object): pass\n\nthing1 = Thing()\nthing2 = Thing()\nthing2.__parent__ = thing1\n\nlist(lineage(thing2))\n```\n\n----------------------------------------\n\nTITLE: JSONP Renderer Configuration (Python)\nDESCRIPTION: This code shows how to configure a JSONP renderer in Pyramid using the Configurator. It initializes the JSONP renderer with a specified parameter name ('callback' by default).\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\nfrom pyramid.renderers import JSONP\n\nconfig = Configurator()\nconfig.add_renderer('jsonp', JSONP(param_name='callback'))\n```\n\n----------------------------------------\n\nTITLE: Implementing Interface with Resource Class in Python\nDESCRIPTION: This snippet demonstrates how to define an interface and use the `zope.interface.implementer` class decorator to associate it with a resource class. It defines a marker interface `IHello` and a class `Hello` that implements it.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/traversal.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom zope.interface import Interface\nfrom zope.interface import implementer\n\nclass IHello(Interface):\n    \"\"\" A marker interface \"\"\"\n\n@implementer(IHello)\nclass Hello(object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Chameleon Template Translation String Replacement\nDESCRIPTION: Demonstrates using translation strings within Chameleon ZPT templates with `tal:replace`.  This shows how to replace an element's content with a translated string.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<span tal:replace=\"some_translation_string\"/>\n```\n\n----------------------------------------\n\nTITLE: Remainder Match with Unicode (Text)\nDESCRIPTION: Demonstrates a remainder match with Unicode characters in the URL.  The value put into the matchdict is URL-unquoted and decoded from UTF-8 into Unicode.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nfoo/*fizzle\n```\n\n----------------------------------------\n\nTITLE: Run Project Tests\nDESCRIPTION: Runs the project's tests using pytest. This verifies that the application's code is working correctly and that no regressions have been introduced.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/sqla_demo/README.txt#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pytest\n```\n\n----------------------------------------\n\nTITLE: TranslationString with Mapping - Python\nDESCRIPTION: This snippet demonstrates how to use a mapping to replace markers in a TranslationString.  The 'number' key in the mapping will replace the ${number} marker in the msgid.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.i18n import TranslationString\nts = TranslationString('Add ${number}', mapping={'number':1})\n```\n\n----------------------------------------\n\nTITLE: TranslationString with Domain (Alternative) - Python\nDESCRIPTION: This code snippet demonstrates an equivalent way to define a TranslationString with a domain, using the TranslationString class directly instead of a factory.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.i18n import TranslationString as _\nts = _('add-number', default='Add ${number}', mapping={'number':1},\n           domain='pyramid')\n```\n\n----------------------------------------\n\nTITLE: Install SQLite3 Development Packages (Debian)\nDESCRIPTION: Installs SQLite3 and its development packages using apt-get on Debian-based systems. This is necessary if Python was installed using a package manager or compiled from source.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libsqlite3-dev\n```\n\n----------------------------------------\n\nTITLE: Add ACL to Wiki class (Python)\nDESCRIPTION: This snippet shows how to add the ACL to the Wiki class in models/__init__.py. The ACL defines who has permission to view and edit the wiki pages.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/authorization.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Wiki(object):\n    __acl__ = [\n        (Allow, Everyone, 'view'),\n        (Allow, 'group:editors', 'edit'),\n    ]\n\n    def __init__(self, request):\n```\n\n----------------------------------------\n\nTITLE: Copying Debug Toolbar Project\nDESCRIPTION: This bash command copies the 'debugtoolbar' project directory to 'unit_testing', creating a new project based on the previous step.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/unit_testing.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ..; cp -r debugtoolbar unit_testing; cd unit_testing\n```\n\n----------------------------------------\n\nTITLE: Route Pattern with File Extension\nDESCRIPTION: This example demonstrates how to include literal characters and replacement markers together in a route pattern to match URLs with specific file extensions.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nfoo/{name}.html\n```\n\n----------------------------------------\n\nTITLE: Install cookiecutter\nDESCRIPTION: Installs the cookiecutter tool using pip within the virtual environment. Cookiecutter is used to generate projects from templates.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/cookiecutters.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install cookiecutter\n```\n\n----------------------------------------\n\nTITLE: Create security.py module (Python)\nDESCRIPTION: This snippet shows the code for the security.py module, which defines the security policy for the Pyramid application. It includes functions for hashing passwords, checking passwords, retrieving user identity, and determining effective principals.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/authorization.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport bcrypt\n\nfrom pyramid.authentication import AuthTktCookieHelper\nfrom pyramid.authorization import ACLHelper\nfrom pyramid.security import Everyone\nfrom pyramid.security import Authenticated\nfrom pyramid.security import Allow\n\nUSERS = {\n    'editor': {\n        'password': b'$2b$12$DXJcGJZqZsc24BIYXe9juuJmU4eYNZWA6ppuAUNzpdn0wPzV.VxtK',\n        'groups': ['group:editors']\n    },\n    'viewer': {\n        'password': b'$2b$12$DXJcGJZqZsc24BIYXe9juuJmU4eYNZWA6ppuAUNzpdn0wPzV.VxtK',\n        'groups': []\n    },\n}\n\nGROUPS = {\n    'group:editors': ['u:editor']\n}\n\ndef hash_password(password):\n    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())\n\n\ndef check_password(password, hashed):\n    return bcrypt.checkpw(password.encode('utf-8'), hashed)\n\n\nclass MySecurityPolicy:\n    def __init__(self, secret):\n        self.auth_tkt = AuthTktCookieHelper(secret)\n        self.acl_helper = ACLHelper()\n\n    def identity(self, request):\n        identity = self.auth_tkt.identify(request)\n        if identity:\n            userid = identity['userid']\n            user = USERS.get(userid)\n            if user:\n                return userid\n\n    def authenticated_userid(self, request):\n        identity = self.identity(request)\n        if identity:\n            return identity\n\n    def effective_principals(self, request):\n        identity = self.identity(request)\n        if identity:\n            userid = identity\n            user = USERS[userid]\n            groups = user['groups']\n            principals = ['u:' + userid] + groups\n        else:\n            principals = [Everyone]\n\n        principals.append(Authenticated)\n        return principals\n\n    def permits(self, context, principals, permission):\n        return self.acl_helper.permits(context, principals, permission)\n\n    def remember(self, request, userid, **kw):\n        return self.auth_tkt.remember(request, userid, **kw)\n\n    def forget(self, request):\n        return self.auth_tkt.forget(request)\n```\n\n----------------------------------------\n\nTITLE: Create Virtual Environment (Python)\nDESCRIPTION: Creates a Python virtual environment named 'env'. This isolates the project's dependencies from the system-wide Python installation, preventing conflicts. Requires Python 3.3 or later.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/cookiecutters/README.txt#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: Run Project Tests\nDESCRIPTION: Executes the project's unit tests using pytest. Pytest is a popular testing framework for Python. It uses the pytest executable within the 'env' virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/package/README.txt#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pytest\n```\n\n----------------------------------------\n\nTITLE: Mako Renderer Unit Test Setup (Python)\nDESCRIPTION: Shows how to configure a unit test to use Mako templates by including 'pyramid_mako' in the test setup.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass ATest(unittest.TestCase):\n    def setUp(self):\n        self.config = pyramid.testing.setUp()\n        self.config.include('pyramid_mako')\n\n    def test_it(self):\n        result = pyramid.renderers.render('mypkg:templates/home.mako', {})\n```\n\n----------------------------------------\n\nTITLE: Renaming makeRegistry function\nDESCRIPTION: The ``repoze.bfg.registry.makeRegistry`` function was renamed to ``repoze.bfg.registry.populateRegistry`` and now accepts a ``registry`` argument (which should be an instance of ``zope.component.registry.Components``).\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_44\n\nLANGUAGE: Python\nCODE:\n```\nrepoze.bfg.registry.makeRegistry\nrepoze.bfg.registry.populateRegistry\n```\n\n----------------------------------------\n\nTITLE: HTTP Redirect View (Returning HTTPFound) - Python\nDESCRIPTION: Demonstrates how to return an HTTP redirect by returning an instance of `HTTPFound`. The `location` parameter specifies the URL to redirect to.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/views.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.httpexceptions import HTTPFound\n\ndef myview(request):\n    return HTTPFound(location='http://example.com')\n```\n\n----------------------------------------\n\nTITLE: Prequest with Custom Header (Bash)\nDESCRIPTION: This bash command invokes the prequest utility and sets a custom request header.  Multiple --header options can be supplied.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/prequest --header=Host:example.com development.ini /\n```\n\n----------------------------------------\n\nTITLE: Custom Subscriber Predicate - RequestPathStartsWith in Pyramid (Python)\nDESCRIPTION: This code defines a custom subscriber predicate class `RequestPathStartsWith` that checks if the request path starts with a specific value. It includes the `__init__`, `text`, `phash`, and `__call__` methods. The `__call__` method determines if the predicate matches based on the event's request path.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_44\n\nLANGUAGE: Python\nCODE:\n```\nclass RequestPathStartsWith(object):\n    def __init__(self, val, info):\n        self.val = val\n\n    def text(self):\n        return 'request_path_startswith = %s' % (self.val,)\n\n    phash = text\n\n    def __call__(self, event):\n        return event.request.path.startswith(self.val)\n```\n\n----------------------------------------\n\nTITLE: Create Python Virtual Environment\nDESCRIPTION: Creates a Python virtual environment named 'env'. Virtual environments isolate project dependencies. Requires Python 3.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/views/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Resource\nDESCRIPTION: Implements the root resource class. This determines the context of the root object where permissions will be checked. Access control lists are also defined here.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/authorization.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nauthorization/tutorial/resources.py\n```\n\n----------------------------------------\n\nTITLE: Installing Gettext on Debian/Ubuntu\nDESCRIPTION: This command installs the Gettext package on Debian or Ubuntu based systems using the apt-get package manager. It's a prerequisite for internationalization tasks.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install gettext\n```\n\n----------------------------------------\n\nTITLE: Adding Pyramid IPython dependency\nDESCRIPTION: This code snippet demonstrates how to add `pyramid_ipython` as a dependency to your project's `setup.py` file to enable IPython support in pshell for Pyramid 1.6 and later versions.  It involves modifying the `install_requires` list within the `setup` function call. After adding the dependency, you need to re-run `setup.py develop` to install the new requirement.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.6.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsetup(\n    #...\n    install_requires=[\n        'pyramid_ipython',         # new dependency\n        'pyramid',\n        #...\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Change Directory to Project\nDESCRIPTION: Navigates the command line to the project's root directory. This step ensures all subsequent commands are executed in the correct context.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/authorization/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd tutorial\n```\n\n----------------------------------------\n\nTITLE: Remainder Match URL Example with data (Text)\nDESCRIPTION: Illustrates the URL that will match the remainder route defined earlier and how it corresponds to a matchdict, including data in the remaining portion of the url.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nfoo/abc/def/a/b/c\n```\n\n----------------------------------------\n\nTITLE: Upgrade Packaging Tools\nDESCRIPTION: Upgrades pip and setuptools within the virtual environment. This ensures that the latest versions of the packaging tools are used for dependency management.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/sqla_demo/README.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pip install --upgrade pip setuptools\n```\n\n----------------------------------------\n\nTITLE: Unicode Route Pattern with Escape (Text)\nDESCRIPTION: Illustrates an alternative representation of unicode characters using escape sequences. Dynamic segment names cannot contain high-order characters.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n/La Pe\\xf1a/{x}\n```\n\n----------------------------------------\n\nTITLE: Access Default Locale Name from Settings\nDESCRIPTION: Demonstrates how to access the `pyramid.default_locale_name` setting from the application's settings dictionary. This allows you to use the configured default locale name within your application logic.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.threadlocal import get_current_registry\nsettings = get_current_registry().settings\ndefault_locale_name = settings['pyramid.default_locale_name']\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Resource Tree in Pyramid\nDESCRIPTION: This code defines a simple resource tree using a dictionary-like `Resource` class. The `root` resource has a nested structure of resources 'a', 'b', and 'c'. This example demonstrates the basic structure needed for traversal.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/resources.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass Resource(dict):\n    pass\n\nroot = Resource({'a':Resource({'b':Resource({'c':Resource()})})})\n```\n\n----------------------------------------\n\nTITLE: Run Development Server\nDESCRIPTION: Starts the Pyramid development server using the 'development.ini' configuration file. This allows developers to interact with and test the project in a local environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/sessions/README.txt#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Change Directory (Bash)\nDESCRIPTION: Changes the current working directory to the tutorial project directory. This command is essential to ensure subsequent commands are executed in the correct context of the project.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/installation/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd tutorial\n```\n\n----------------------------------------\n\nTITLE: Changing the Request Factory in Pyramid (Python)\nDESCRIPTION: This code shows how to change the request factory in Pyramid. It defines a custom request class `MyRequest` that inherits from `pyramid.request.Request` and passes it to the `Configurator` constructor using the `request_factory` argument.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.request import Request\n\nclass MyRequest(Request):\n    pass\n\nconfig = Configurator(request_factory=MyRequest)\n```\n\n----------------------------------------\n\nTITLE: Upgrade Packaging Tools (pip)\nDESCRIPTION: Upgrades the pip package installer within the virtual environment to the latest version. This ensures the most up-to-date features and bug fixes are used for dependency management.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/authorization/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Pyramid Site View (Python)\nDESCRIPTION: Defines a view callable that is invoked when the 'idea' route is matched. It retrieves the 'id' from the request's matchdict and returns it as a response.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\nfrom pyramid.response import Response\n\n@view_config(route_name='idea')\ndef site_view(request):\n    return Response(request.matchdict['id'])\n```\n\n----------------------------------------\n\nTITLE: Pyramid Application Configuration Section (INI)\nDESCRIPTION: This INI configuration defines a pipeline with translogger middleware wrapping an 'another' application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\n[pipeline:main]\npipeline = translogger\n               another\n\n[filter:translogger]\nfilter_app_factory = egg:Paste#translogger\nsetup_console_handler = False\nlogger_name = wsgi\n\n[app:another]\nuse = egg:MyProject\n```\n\n----------------------------------------\n\nTITLE: Load Default Data into Database\nDESCRIPTION: This command executes a script to load default data into the database, using the 'development.ini' configuration file to connect to the database.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/tests/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/initialize_tutorial_db development.ini\n```\n\n----------------------------------------\n\nTITLE: Change Directory\nDESCRIPTION: Navigates to the project directory. This step is essential to ensure subsequent commands are executed within the project's context.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/sqla_demo/README.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd sqla_demo\n```\n\n----------------------------------------\n\nTITLE: Run Pyramid Project\nDESCRIPTION: Starts the Pyramid project using pserve. It uses the development.ini file for application configuration, including port and database settings.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/views/README.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Returning an HTTPUnauthorized Exception from a Pyramid View\nDESCRIPTION: This example demonstrates how to return an `HTTPUnauthorized` exception instance from a Pyramid view callable, instead of raising it. Pyramid treats the returned exception as the response, resulting in a 401 Unauthorized HTTP response. It imports `HTTPUnauthorized` from `pyramid.httpexceptions`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/views.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom pyramid.httpexceptions import HTTPUnauthorized\n\ndef aview(request):\n    return HTTPUnauthorized()\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Buster with Git Hash (Python)\nDESCRIPTION: This code defines a custom cache buster, GitCacheBuster, that uses the Git commit SHA1 as the cache bust token.  It inherits from QueryStringCacheBuster and overrides the tokenize method. It requires the 'git' command to be available in the system's PATH.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport subprocess\nfrom pyramid.static import QueryStringCacheBuster\n\nclass GitCacheBuster(QueryStringCacheBuster):\n    \"\"\"\n    Assuming your code is installed as a Git checkout, as opposed to an egg\n    from an egg repository like PYPI, you can use this cachebuster to get\n    the current commit's SHA1 to use as the cache bust token.\n    \"\"\"\n    def __init__(self, param='x', repo_path=None):\n        super(GitCacheBuster, self).__init__(param=param)\n        if repo_path is None:\n            repo_path = os.path.dirname(os.path.abspath(__file__))\n        self.sha1 = subprocess.check_output(\n            ['git', 'rev-parse', 'HEAD'],\n            cwd=repo_path).strip()\n\n    def tokenize(self, pathspec):\n        return self.sha1\n```\n\n----------------------------------------\n\nTITLE: Running Tests (Windows)\nDESCRIPTION: This command installs the testing dependencies for a Pyramid project and then executes the tests using pytest.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_7\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pip install -e \".[testing]\"\n```\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pytest -q\n```\n\n----------------------------------------\n\nTITLE: gettext File Structure - Text\nDESCRIPTION: This example displays the directory structure for gettext files, showing the location of the .mo file for the 'form' domain in German.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nlocale/de/LC_MESSAGES/form.mo\n```\n\n----------------------------------------\n\nTITLE: Running Tests (Unix)\nDESCRIPTION: This command installs the testing dependencies for a Pyramid project and then executes the tests using pytest.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install -e \".[testing]\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest -q\n```\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pytest --cov -q\n```\n\n----------------------------------------\n\nTITLE: Create Python Virtual Environment\nDESCRIPTION: Creates a Python virtual environment named 'env'. This isolates the project's dependencies from the system-wide Python installation.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/models/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: Upgrade Packaging Tools\nDESCRIPTION: Upgrades pip and setuptools within the virtual environment to ensure you have the latest packaging tools.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/myproject/README.txt#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nenv/bin/pip install --upgrade pip setuptools\n```\n\n----------------------------------------\n\nTITLE: Project directory structure example\nDESCRIPTION: Illustrates the expected directory structure for the tutorial, including the workspace, project, package, and virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/requirements.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n~\n└── projects\n    └── quick_tutorial\n        ├── env\n        └── step_one\n            ├── intro\n            │   ├── __init__.py\n            │   └── app.py\n            └── setup.py\n```\n\n----------------------------------------\n\nTITLE: Original Hello World Response (Python)\nDESCRIPTION: This Python code snippet demonstrates a simple function that returns an HTTP response containing 'Hello World!' within an HTML body. This is a basic example of a view callable in a Pyramid application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/debugtoolbar.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef hello_world(request):\n    return Response('<body><h1>Hello World!</h1></body>')\n```\n\n----------------------------------------\n\nTITLE: Refactoring ZCML route and view directives\nDESCRIPTION: This snippet illustrates the change in how routes and views are defined in ZCML.  Previously, routes were mapped to externally registered views. Now, the `route` directive has a `view` attribute that directly specifies the view callable, and a view is registered automatically using the route's name.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n<route\n   name=\"home\"\n   path=\"\"\n   view_name=\"login\"\n   factory=\".models.root.Root\"\n />\n\n<view\n   for=\".models.root.Root\"\n   name=\"login\"\n   view=\".views.login_view\"\n />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<route\n   name=\"home\"\n   path=\"\"\n   view=\".views.login_view\"\n   factory=\".models.root.Root\"\n />\n```\n\n----------------------------------------\n\nTITLE: Paster Command Usage Example\nDESCRIPTION: Demonstrates how to use the 'bfgshell' paster command to get an interactive prompt with a Pyramid application's root object in the global namespace. The command takes the path to the application's INI configuration file and the application name as arguments.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\nbin/paster bfgshell /path/to/myapp.ini myapp\n```\n\n----------------------------------------\n\nTITLE: Registering a View Callable for Traversal in Pyramid\nDESCRIPTION: This snippet demonstrates how to register a view callable to be invoked as a result of traversal in Pyramid. It uses the config.add_view method to associate the 'myapp.views.favicon_view' callable with the name 'favicon.ico'. This means that when a resource named 'favicon.ico' is traversed, this view will be invoked.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_view('myapp.views.favicon_view', name='favicon.ico')\n```\n\n----------------------------------------\n\nTITLE: Template for viewing a wiki page (wikipage_view.pt)\nDESCRIPTION: A Chameleon template for displaying a wiki page's title and body. It receives the 'page' variable from the view, which contains the page's content.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/forms.rst#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\n      xmlns:tal=\"http://xml.zope.org/namespaces/tal\"\n      xmlns:i18n=\"http://xml.zope.org/namespaces/i18n\">\n<head>\n  <meta http-equiv=\"content-type\"\n        content=\"text/html; charset=UTF-8\"/>\n  <title tal:content=\"page/title\">Page Title</title>\n</head>\n<body>\n\n<h1>\n  <span tal:content=\"page/title\">Page Title</span>\n</h1>\n\n<p>\n  <span tal:content=\"page/body\">Page Body</span>\n</p>\n\n<p>\n  <a tal:attributes=\"href request/route_url('edit_page', pagename=page/title)\">\n    Edit this page\n  </a>\n</p>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Create Python Virtual Environment\nDESCRIPTION: This command creates a Python virtual environment named 'env' within the project directory.  Virtual environments isolate project dependencies, preventing conflicts with other Python projects. Requires Python 3 to be installed.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/basiclayout/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: Build Output Example\nDESCRIPTION: This is an example of the output that the `build` command produces. It shows the process of creating a virtual environment, installing dependencies, and building the sdist and wheel packages. The output confirms the successful building of the tarball and wheel files.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/distributing.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n* Creating venv isolated environment...\n* Installing packages in isolated environment... (setuptools)\n* Getting build dependencies for sdist...\n...\nremoving build/bdist.linux-x86_64/wheel\nSuccessfully built tutorial-0.0.tar.gz and tutorial-0.0-py3-none-any.whl\n```\n\n----------------------------------------\n\nTITLE: Updating packaging tools on macOS/Linux\nDESCRIPTION: Command to upgrade pip and setuptools within the virtual environment on macOS and Linux.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/requirements.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# macOS and Linux\n$VENV/bin/pip install --upgrade pip setuptools\n```\n\n----------------------------------------\n\nTITLE: Example TransLogger Output\nDESCRIPTION: This is an example output from TransLogger when it logs a request.  It shows the timestamp, logger name, IP address, date/time of the request, HTTP method and path, HTTP status code, and user agent.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/logging.rst#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n00:50:53,694 INFO [myproject.views] Returning: Hello World!\n                      (content-type: text/plain)\n    00:50:53,695 INFO [wsgi] 192.168.1.111 - - [11/Aug/2011:20:09:33 -0700] \"GET /hello\n    HTTP/1.1\" 404 - \"-\"\n    \"Mozilla/5.0 (Macintosh; U; Intel macOS; en-US; rv:1.8.1.6) Gecko/20070725\n    Firefox/2.0.0.6\"\n```\n\n----------------------------------------\n\nTITLE: Run Pyramid application\nDESCRIPTION: Starts the Pyramid application using the ``pserve`` command, configured with the ``development.ini`` file. The ``--reload`` flag enables automatic reloading of the server on code changes.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/json.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pserve development.ini --reload\n```\n\n----------------------------------------\n\nTITLE: Deprecated Static View Import\nDESCRIPTION: This code snippet shows an example of importing a deprecated class `static` from `pyramid.view`.  The deprecation warning suggests using `pyramid.static.static_view` instead.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/upgrading.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\n\nfrom pyramid.view import static\nmyview = static('static', 'static')\n```\n\n----------------------------------------\n\nTITLE: Pyramid Route and View Configuration\nDESCRIPTION: This code demonstrates the correct order for adding routes and views when using an autocommitting Configurator in Pyramid. The route must be defined before the view that references it.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nconfig = Configurator(autocommit=True)\nconfig.add_route('foo', '/foo')\nconfig.add_view('my.pkg.someview', route_name='foo')\n```\n\n----------------------------------------\n\nTITLE: Example Pyramid development.ini (INI)\nDESCRIPTION: Presents an example `development.ini` file, which configures the Pyramid application. This file contains settings for the application, including debug flags, locale settings, and included packages, which are passed as settings to the application's constructor.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/startup.rst#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:myproject\npyramid.reload_templates = true\npyramid.debug_authorization = false\npyramid.debug_notfound = false\npyramid.debug_routematch = false\npyramid.default_locale_name = en\npyramid.includes = \n    pyramid_debugtoolbar\n\n[server:main]\nuse = egg:waitress#main\nhost = 0.0.0.0\nport = 6543\n\n[pipeline:main]\npaster.filter_app_factory = pyramid.config.configuration_from_config\n\n[filter:profiler]\nuse = egg:repoze.profile#profiler\ncachegrind_output_dir = profile\n```\n\n----------------------------------------\n\nTITLE: Create Virtual Environment\nDESCRIPTION: Creates a Python virtual environment named 'env' within the project directory. This isolates the project's dependencies from the system-wide Python installation.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/sessions/README.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: Install Pyramid Chameleon\nDESCRIPTION: This command installs the pyramid_chameleon add-on, which enables Chameleon as a renderer in a Pyramid application. It uses pip to install the package within the virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install pyramid_chameleon\n```\n\n----------------------------------------\n\nTITLE: Pyramid View Config without Timing\nDESCRIPTION: A standard view configuration using @view_config decorator, defining a view for the 'home' route, returning a simple 'Home' response. This configuration will not be affected by the timing_view deriver defined previously as it lacks the `timed=True` configuration option.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n@view_config(route_name='home')\ndef home(request):\n    return Response('Home')\n```\n\n----------------------------------------\n\nTITLE: Upgrade Pip in Virtual Environment\nDESCRIPTION: This command upgrades the 'pip' package installer within the created virtual environment. Upgrading pip ensures that you are using the latest version with the most recent features and security patches.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/basiclayout/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Change Directory to Project\nDESCRIPTION: Navigates the command line to the project's root directory. This ensures subsequent commands are executed in the correct context.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/installation/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd tutorial\n```\n\n----------------------------------------\n\nTITLE: Change Directory\nDESCRIPTION: Changes the current directory to the tutorial project directory. This command is essential to execute subsequent commands in the correct context.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/views/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd tutorial\n```\n\n----------------------------------------\n\nTITLE: Configure Default Locale Name via INI File\nDESCRIPTION: Illustrates how to set the `pyramid.default_locale_name` setting within a Pyramid application's INI file. This setting determines the default locale when the locale negotiator can't determine a specific locale.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_30\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:MyProject\npyramid.reload_templates = true\npyramid.debug_authorization = false\npyramid.debug_notfound = false\npyramid.default_locale_name = de\n```\n\n----------------------------------------\n\nTITLE: Example Successful Test Output\nDESCRIPTION: Illustrates the expected output after successfully running the tests.  It displays the number of tests passed and the execution time.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n....\n4 passed in 0.49 seconds\n```\n\n----------------------------------------\n\nTITLE: Chameleon Template Setup in Pyramid (Python)\nDESCRIPTION: Demonstrates how to re-add Chameleon template support to a Pyramid project after upgrading to version 1.5a2, by installing the `pyramid_chameleon` package and including it in the Configurator.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsetup(\n    #...\n    install_requires=[\n        'pyramid_chameleon',         # new dependency\n        'pyramid',\n        #...\n    ],\n)\n\nconfig = Configurator(.....)\nconfig.include('pyramid_chameleon')\n```\n\n----------------------------------------\n\nTITLE: Example Cookiecutter Interaction\nDESCRIPTION: This text block shows an example interaction with the cookiecutter after running it. It shows the prompts and possible answers to create a new Pyramid project.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nYou've cloned ~/.cookiecutters/pyramid-cookiecutter-starter before.\nIs it okay to delete and re-clone it? [yes]: yes\nproject_name [Pyramid Scaffold]: hello_world\nrepo_name [hello_world]: hello_world\nSelect template_language:\n1 - jinja2\n2 - chameleon\n3 - mako\nChoose from 1, 2, 3 [1]: 1\nSelect backend:\n1 - none\n2 - sqlalchemy\n3 - zodb\nChoose from 1, 2, 3 [1]: 1\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Creates a Python virtual environment named 'env' within the project directory. A virtual environment isolates project dependencies, preventing conflicts with other Python projects on the system.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/logging/README.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: Change Directory to Project\nDESCRIPTION: Navigates the command line to the newly created Pyramid project directory. This step is essential before performing any further actions within the project scope.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/package/README.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd hello_world\n```\n\n----------------------------------------\n\nTITLE: Configuring View and Renderer Order in Python\nDESCRIPTION: This Python snippet shows how `add_view` and `add_renderer` can be called in either order when using a non-autocommitting Configurator, due to the two-phase configuration process in Pyramid.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advconfig.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_view('some.view', renderer='path_to_custom/renderer.rn')\nconfig.add_renderer('.rn', SomeCustomRendererFactory)\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests\nDESCRIPTION: Executes the project's test suite using pytest. This command runs all tests defined within the project.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/views/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pytest\n```\n\n----------------------------------------\n\nTITLE: Installing Python 3 using Homebrew on macOS\nDESCRIPTION: This command installs Python 3.x using the Homebrew package manager on macOS. It's an alternative to installing Python directly from python.org.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/install.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# for python 3.x\nbrew install python3\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes and Views with Autocommit (Correct Order) - Python\nDESCRIPTION: This snippet shows the correct order for adding routes and views in an autocommitting Configurator. The route is defined before the view, ensuring that the view can successfully associate itself with the route.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.2.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfig = Configurator(autocommit=True)\nconfig.add_route('foo', '/foo')\nconfig.add_view('my.pkg.someview', route_name='foo')\n```\n\n----------------------------------------\n\nTITLE: Accessing a Resource in the Tree\nDESCRIPTION: This code demonstrates how to access a specific resource within the defined resource tree using dictionary-like access. It shows how to traverse the tree to reach the 'c' leaf resource.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/resources.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nroot['a']['b']['c']\n```\n\n----------------------------------------\n\nTITLE: Set Virtual Environment Variable (Windows)\nDESCRIPTION: Sets the environment variable 'VENV' to the absolute path of the virtual environment directory, assumed to be 'c:\\tutorial'. This provides a convenient way to reference the virtual environment's location in subsequent commands.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_8\n\nLANGUAGE: doscon\nCODE:\n```\nset VENV=c:\\tutorial\n```\n\n----------------------------------------\n\nTITLE: Directory Tree Structure (text)\nDESCRIPTION: Illustrates the expected directory structure as the Pyramid quick tutorial is developed. It shows the layout of the `quick_tutorial` workspace, including the `env` directory and various project directories like `request_response` with their respective subdirectories containing Python modules, configuration files, and setup scripts.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/tutorial_approach.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nquick_tutorial\n├── env\n└── request_response\n    ├── tutorial\n    │   ├── __init__.py\n    │   ├── tests.py\n    │   └── views.py\n    ├── development.ini\n    └── setup.py\n```\n\n----------------------------------------\n\nTITLE: Example Response (Text)\nDESCRIPTION: This snippet displays an example of the response generated when visiting http://localhost:6543/plain?name=alice.  It shows the URL being visited and the 'name' parameter included in the response.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/request_response.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nURL http://localhost:6543/plain?name=alice with name: alice\n```\n\n----------------------------------------\n\nTITLE: Run a Single Test with tox\nDESCRIPTION: Runs a single test using tox. This command allows for running specific tests during development. The test is specified using pytest's node ID syntax. It is also necessary to have `$VENV` environment variable set to the path to your virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HACKING.txt#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n$ $TOX -e py -- tests/test_httpexceptions.py::TestHTTPMethodNotAllowed::test_it_with_default_body_tmpl\n```\n\n----------------------------------------\n\nTITLE: Incorrect Pyramid Route and View Configuration\nDESCRIPTION: This code shows an incorrect way to add routes and views when using an autocommitting Configurator in Pyramid. Adding view before defining corresponding route will lead to exception.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nconfig = Configurator(autocommit=True)\nconfig.add_view('my.pkg.someview', route_name='foo')\nconfig.add_route('foo', '/foo')\n```\n\n----------------------------------------\n\nTITLE: Installing Project for Development (Unix)\nDESCRIPTION: This command installs the newly created Pyramid project in development mode using pip. The -e flag allows for editable installs, and the . specifies the current directory as the project location.  It must be run from the project root.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Paste HTTP Server Configuration\nDESCRIPTION: This configuration snippet shows the old way to configure the `paste.httpserver` WSGI server in a `development.ini` or `production.ini` file. This method is deprecated and replaced by `waitress` server configuration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.3.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nuse = egg:Paste#http\n```\n\n----------------------------------------\n\nTITLE: Importing Request Object from Flask\nDESCRIPTION: Demonstrates how Flask uses the import statement to access a request object. The request object is scoped to the current request but is presented as a module-level import, which is different from the way Pyramid handles request objects.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import request\n\n@app.route('/login', methods=['POST', 'GET'])\ndef login():\n    error = None\n    if request.method == 'POST':\n        if valid_login(request.form['username'],\n                       request.form['password']):\n            return log_the_user_in(request.form['username'])\n        else:\n            error = 'Invalid username/password'\n    # this is executed if the request method was GET or the\n    # credentials were invalid\n```\n\n----------------------------------------\n\nTITLE: Chameleon Template Attribute Translation\nDESCRIPTION: Demonstrates how to use a translation string to define the value of an HTML attribute within a Chameleon template. Note that there may be limitations with specific Chameleon versions.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<a tal:attributes=\"href some_translation_string\">Click here</a>\n```\n\n----------------------------------------\n\nTITLE: Run Project Tests\nDESCRIPTION: Runs the project's tests using pytest. Uses the pytest executable from the virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/views/README.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pytest\n```\n\n----------------------------------------\n\nTITLE: Installing Pyramid BPython Shell\nDESCRIPTION: This command installs the pyramid_bpython package, allowing the use of BPython as the shell for the pshell command-line tool. BPython offers features like auto-completion and syntax highlighting within the interactive shell.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ pip install pyramid_bpython\n```\n\n----------------------------------------\n\nTITLE: Pyramid View Config with Timing Enabled\nDESCRIPTION: A view configuration using @view_config decorator, defining a view for the 'home' route and setting `timed=True`. This view configuration will be affected by the timing_view deriver defined previously; a timing header will be added to the response.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_50\n\nLANGUAGE: python\nCODE:\n```\n@view_config(route_name='home', timed=True)\ndef home(request):\n    return Response('Home')\n```\n\n----------------------------------------\n\nTITLE: Starting Pyramid Application with pserve on Unix\nDESCRIPTION: This command starts the Pyramid application using the `pserve` command with the specified configuration file (`development.ini`).  It assumes that the virtual environment is activated.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: View Callable Function Definition in Pyramid (Python)\nDESCRIPTION: Defines a view callable as a function that accepts a context and a request object. It imports the Response object from pyramid.response and returns a simple 'OK' response.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/views.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.response import Response\n\ndef view(context, request):\n    return Response('OK')\n```\n\n----------------------------------------\n\nTITLE: Python Code with Line Numbers\nDESCRIPTION: Illustrates the use of the `:linenos:` option to add line numbers to a Python code block. It showcases a simple conditional statement.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/typographical-conventions.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nif \"foo\" == \"bar\":\n    # This is Python code\n    pass\n```\n\n----------------------------------------\n\nTITLE: Interactive IPython session assignment example\nDESCRIPTION: This code snippet showcases an example of a compound statement that used to fail in interactive IPython sessions invoked via `paster bfgshell` due to incorrect mutation of the shell namespace. This issue has been resolved in the described release.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef bar(x): return x\nlist(bar(x) for x in 'abc')\n```\n\n----------------------------------------\n\nTITLE: Change Directory\nDESCRIPTION: Changes the current directory to the newly created Pyramid project directory. This step is necessary to perform subsequent operations within the project's scope.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/sessions/README.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd hello_world\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests\nDESCRIPTION: Executes the project's tests using the pytest testing framework. This ensures that the project's functionality is working as expected.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/logging/README.txt#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nenv/bin/pytest\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Response Adapter (Python)\nDESCRIPTION: Shows how to register the custom string response adapter with the Pyramid configuration, allowing views to return strings directly. The `add_response_adapter` method is used to associate the adapter with the `str` type.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advanced-features.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == '__main__':\n    config = Configurator()\n    config.add_response_adapter(string_response_adapter, str)\n```\n\n----------------------------------------\n\nTITLE: Run Pytest (Windows)\nDESCRIPTION: Runs the tests for the project using pytest. The -q flag specifies quiet mode, which reduces the amount of output.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_18\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pytest -q\n```\n\n----------------------------------------\n\nTITLE: Run Tests with tox for Python 3.10\nDESCRIPTION: Runs tests using tox specifically for Python 3.10. This command forces tox to use the py310 environment defined in `tox.ini` to execute the test suite. It is required to have python 3.10 installed and accessible.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HACKING.txt#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n$ $TOX -e py310\n```\n\n----------------------------------------\n\nTITLE: Prequest with POST Method (Bash)\nDESCRIPTION: This bash command invokes the prequest utility with the -m option set to POST, using standard input as the POST body.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/prequest -mPOST development.ini / < somefile\n```\n\n----------------------------------------\n\nTITLE: Using Mako Template Directly\nDESCRIPTION: This snippet demonstrates using the Mako templating engine directly within a Pyramid view. It instantiates a Mako `Template` object and renders it with data from the request. A Pyramid `Response` object is then created with the rendered output.  Mako must be installed separately.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/templates.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom mako.template import Template\nfrom pyramid.response import Response\n\ndef make_view(request):\n    template = Template(filename='/templates/template.mak')\n    result = template.render(name=request.params['name'])\n    response = Response(result)\n    return response\n```\n\n----------------------------------------\n\nTITLE: Change directory to the project directory (Unix)\nDESCRIPTION: Changes the current directory to the newly created project directory, 'tutorial'.  This assumes the user named the project 'tutorial' when prompted by cookiecutter.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd tutorial\n```\n\n----------------------------------------\n\nTITLE: Using a Registered Renderer in a View Configuration in Pyramid\nDESCRIPTION: This code snippet shows how to use a previously registered renderer in a view configuration using the `@view_config` decorator. The `renderer` parameter specifies the renderer to use for the view's response. The example returns a simple dictionary which will be rendered using the specified Jinja2 template.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\n\n@view_config(renderer='templates/mytemplate.jinja2')\ndef myview(request):\n    return {'Hello':'world'}\n```\n\n----------------------------------------\n\nTITLE: Matchdict Result\nDESCRIPTION: This code displays how a matchdict look like with a URL-decoded / UTF-8 decoded value.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n{'bar': 'La Pe\\xf1a'}\n```\n\n----------------------------------------\n\nTITLE: Modify pyramid paster to return pyramid application\nDESCRIPTION: This diff snippet shows a proposed modification to `pyramid/paster.py` to include a `make_pyramid_app` function. This function allows creating a Pyramid application configured with provided settings via `paste.deploy`. It leverages the `Configurator` class to initialize the application and includes optional application settings.\nSOURCE: https://github.com/pylons/pyramid/blob/main/TODO.txt#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/pyramid/paster.py b/pyramid/paster.py\nindex b0e4d79..b3bd82a 100644\n--- a/pyramid/paster.py\n+++ b/pyramid/paster.py\n@@ -8,6 +8,7 @@ from paste.deploy import (\n  from pyramid.compat import configparser\n  from logging.config import fileConfig\n  from pyramid.scripting import prepare\n+from pyramid.config import Configurator\n \n  def get_app(config_uri, name=None, loadapp=loadapp):\n      \"\"\" Return the WSGI application named ``name`` in the PasteDeploy\n@@ -111,3 +112,10 @@ def bootstrap(config_uri, request=None):\n      env['app'] = app\n      return env\n  \n+def make_pyramid_app(global_conf, app=None, **settings):\n+    \"\"\"Return pyramid application configured with provided settings\"\"\"\n+    config = Configurator(package='pyramid', settings=settings)\n+    if app:\n+        config.include(app)\n+    app = config.make_wsgi_app()\n+    return app\n```\n\n----------------------------------------\n\nTITLE: Changing Directory\nDESCRIPTION: Changes the current directory to the newly created project directory, named 'hello_world'. This step is necessary to execute subsequent commands within the project's root.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour/logging/README.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd hello_world\n```\n\n----------------------------------------\n\nTITLE: Cloning Pyramid Repository via SSH\nDESCRIPTION: This code snippet shows how to clone the Pyramid repository from GitHub using SSH. It requires that the user has SSH keys configured on GitHub.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/index.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngit clone git@github.com:Pylons/pyramid.git\n```\n\n----------------------------------------\n\nTITLE: Groundhog Route Ordering (Example 2)\nDESCRIPTION: This example highlights the importance of route ordering.  The '/:action' route is defined before the '/admin' route. Consequently, visiting '/admin' results in a 404 error because '/:action' matches first, masking the '/admin' route. This demonstrates the need for careful consideration of route definition order.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom groundhog import Groundhog\napp = Groundhog('myapp', 'seekrit')\n\n@app.route('/:action')\ndef do_action(action):\n    if action == 'add':\n       return '<html>add</html>'\n    if action == 'delete':\n       return '<html>delete</html>'\n    return app.abort(404)\n\n@app.route('/admin')\ndef admin():\n    return '<html>admin page</html>'\n\nif __name__ == '__main__':\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Running pip install -e . on Unix\nDESCRIPTION: This code snippet shows the command to run `pip install -e .` on a Unix system. This command installs the package in editable mode, which means that changes to the source code are immediately reflected in the installed package. $VENV represents the path to the virtual environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/definingviews.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd tutorial\n$VENV/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Setup Chameleon Test Configuration\nDESCRIPTION: This code demonstrates how to set up a Pyramid test configuration to include Chameleon support for testing renderers. It includes `pyramid_chameleon` to ensure that Chameleon templates can be rendered during unit tests.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.5.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass ATest(unittest.TestCase):\n    def setUp(self):\n        self.config = pyramid.testing.setUp()\n        self.config.include('pyramid_chameleon')\n\n    def test_it(self):\n        result = pyramid.renderers.render('mypkg:templates/home.pt', {})\n```\n\n----------------------------------------\n\nTITLE: Extracting Messages with pot-create\nDESCRIPTION: This series of commands creates a message catalog template (.pot file) from source code and Chameleon templates in a Pyramid application. It uses the pot-create tool provided by Lingua and requires the application's setup.py file and a 'src' directory.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncd /file/path/to/myapplication_setup.py\nmkdir -p myapplication/locale\n$VENV/bin/pot-create -o myapplication/locale/myapplication.pot src\n```\n\n----------------------------------------\n\nTITLE: Custom TranslationStringFactory - Python\nDESCRIPTION: This code snippet shows how to create a custom TranslationStringFactory with a specific domain. This simplifies the creation of TranslationStrings with the same domain.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.i18n import TranslationStringFactory\n_ = TranslationStringFactory('form')\nts = _('add-number', default='Add ${number}', mapping={'number':1})\n```\n\n----------------------------------------\n\nTITLE: Change directory to the project directory (Windows)\nDESCRIPTION: Changes the current directory to the newly created project directory, 'tutorial'.  This assumes the user named the project 'tutorial' when prompted by cookiecutter.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/installation.rst#_snippet_6\n\nLANGUAGE: doscon\nCODE:\n```\ncd tutorial\n```\n\n----------------------------------------\n\nTITLE: Include Pyramid Mako Includeme\nDESCRIPTION: This snippet demonstrates how to include the `pyramid_mako` includeme within your application's configuration. This step is necessary to register the renderer factories for `.mako` files, enabling Mako template rendering in your Pyramid application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.5.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfig = Configurator(.....)\nconfig.include('pyramid_mako')\n```\n\n----------------------------------------\n\nTITLE: Install tox using pip\nDESCRIPTION: Installs tox using pip and sets the TOX environment variable. Tox is used for running tests, coverage, and building documentation. The TOX environment variable is set to the location of the tox executable.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HACKING.txt#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ pip3 install --user tox\n$ export TOX=$(python3 -c 'import site; print(site.USER_BASE + \"/bin\")')/tox\n```\n\n----------------------------------------\n\nTITLE: Pyramid Hello World Example\nDESCRIPTION: This is a basic \"Hello World\" application in Pyramid. It sets up a simple WSGI server, configures a route for the root URL ('/') and associates it with a view function that returns a simple \"Hello World!\" response. This example demonstrates the minimal code required to get a Pyramid application running.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom wsgiref.simple_server import make_server\nfrom pyramid.config import Configurator\nfrom pyramid.response import Response\n\ndef hello_world(request):\n    return Response('Hello World!')\n\nif __name__ == '__main__':\n    with Configurator() as config:\n        config.add_route('hello', '/')\n        config.add_view(hello_world, route_name='hello')\n        app = config.make_wsgi_app()\n    server = make_server('0.0.0.0', 6543, app)\n    server.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Initializing Configurator and Adding Views (Non-Extensible)\nDESCRIPTION: This code snippet demonstrates a non-extensible way of initializing a Pyramid Configurator and adding views directly within the `if __name__ == '__main__'` block. This approach makes it difficult for integrators to reuse or override the configuration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/extending.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\nif __name__ == '__main__':\n    config = Configurator()\n    config.add_view('myapp.views.view1', name='view1')\n    config.add_view('myapp.views.view2', name='view2')\n```\n\n----------------------------------------\n\nTITLE: Invoking Interactive Shell with pshell in Bash\nDESCRIPTION: This command invokes the pshell interactive shell for a Pyramid application. It specifies the path to the application's .ini file and the 'main' section within the file, allowing interaction with the application's environment.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/pshell starter/development.ini#main\n```\n\n----------------------------------------\n\nTITLE: Add Login, Logout, and Forbidden Views Python\nDESCRIPTION: This snippet defines the `login`, `logout`, and `forbidden_view` functions in `tutorial/views/auth.py`. The `login` view handles user authentication, the `logout` view handles deauthentication, and the `forbidden_view` manages access denial by redirecting to login or displaying a 403 error. It makes use of `pyramid.security.remember` and `pyramid.security.forget`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/authentication.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\nfrom pyramid.security import remember\nfrom pyramid.security import forget\nfrom pyramid.httpexceptions import HTTPFound\nfrom pyramid.response import Response\nfrom pyramid.view import forbidden_view_config\nfrom pyramid.csrf import new_csrf_token\n\n@view_config(route_name='login', renderer='templates/login.jinja2')\ndef login(request):\n    username = request.params.get('username', '')\n    error = ''\n    if request.method == 'POST':\n        password = request.params.get('password', '')\n        db = request.dbsession\n        user = db.query(User).filter_by(username=username).first()\n        if user and user.check_password(password):\n            headers = remember(request, user.id)\n            request.session.invalidate()\n            new_csrf_token(request)\n            next_url = request.params.get('next', request.route_url('view_page', pagename='FrontPage'))\n            return HTTPFound(location=next_url, headers=headers)\n        error = 'Failed to login'\n\n    login_url = request.route_url('login')\n    return dict(username=username, error=error, login_url=login_url,\n                next=request.params.get('next'))\n\n\n@view_config(route_name='logout')\ndef logout(request):\n    headers = forget(request)\n    new_csrf_token(request)\n    next_url = request.route_url('view_page', pagename='FrontPage')\n    return HTTPFound(location=next_url, headers=headers)\n\n\n@forbidden_view_config(renderer='templates/403.jinja2')\ndef forbidden_view(request):\n    request.response.status = 403\n    if request.identity:\n        return {}\n    else:\n        next_url = request.url\n        login_url = request.route_url('login', next=next_url)\n        return HTTPFound(location=login_url)\n```\n\n----------------------------------------\n\nTITLE: Navigate and Copy Directory for debugtoolbar Setup (Bash)\nDESCRIPTION: This bash snippet navigates up one directory, copies the 'ini' directory to a new directory named 'debugtoolbar', and then navigates into the newly created 'debugtoolbar' directory. This prepares the environment for subsequent configuration and development steps.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/debugtoolbar.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ..; cp -r ini debugtoolbar; cd debugtoolbar\n```\n\n----------------------------------------\n\nTITLE: Resource Tree Structure with 'baz'\nDESCRIPTION: Example showing a resource tree structure for traversal examples with an additional resource 'baz'. This shows 'baz' as a child of 'bar' and 'biz' as a child of 'baz'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/traversal.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n/--\n   |\n   |-- foo\n        |\n        ----bar\n             |\n             ----baz\n                    |\n                    biz\n```\n\n----------------------------------------\n\nTITLE: JSONP View Configuration (Python)\nDESCRIPTION: This code demonstrates how to configure a view to use the JSONP renderer. The 'renderer' parameter in the @view_config decorator specifies 'jsonp'.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\n\n@view_config(renderer='jsonp')\ndef myview(request):\n    return {'greeting':'Hello world'}\n```\n\n----------------------------------------\n\nTITLE: Run Tox Tests\nDESCRIPTION: This command executes the tox test suite, ensuring that the code meets the required test coverage and functionality. The `-r` flag likely rebuilds the virtual environments.\nSOURCE: https://github.com/pylons/pyramid/blob/main/RELEASING.txt#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ tox -r\n```\n\n----------------------------------------\n\nTITLE: Overriding a Subdirectory within a Package in Pyramid\nDESCRIPTION: This code demonstrates how to override a specific subdirectory within a package using Pyramid's override_asset.  It replaces lookups to assets inside 'some.package:templates/' with lookups inside 'another.package:othertemplates/'. Note the trailing slashes are mandatory when overriding directories.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nconfig.override_asset(to_override='some.package:templates/',\n                     override_with='another.package:othertemplates/')\n```\n\n----------------------------------------\n\nTITLE: Pytest Result Example - Text\nDESCRIPTION: This snippet presents an example output of a successful pytest run, indicating the number of tests passed and the time taken. This provides a visual reference of the expected result.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/tests.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n...........................                                         [100%]\n27 passed in 6.91s\n```\n\n----------------------------------------\n\nTITLE: Jinja2 Template Excerpt\nDESCRIPTION: This snippet shows an excerpt from the `layout.jinja2` template, used as the base layout for a Pyramid web application. It demonstrates the use of Jinja2 templating to define a content block that other templates can inherit and replace. The template is part of the `myproject` project.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_24\n\nLANGUAGE: jinja\nCODE:\n```\n{% block content %}\n      <h1>\n        <a href=\"{{ request.route_url('home') }}\">Home</a>\n      </h1>\n      {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Edit Page View Function and Decorator (Pyramid, Python)\nDESCRIPTION: This snippet defines the `edit_page` view function, which handles both rendering the edit form and processing form submissions. It retrieves the page name from the request's `matchdict`, and either updates the page data if the request method is POST, or renders the edit form if it's a GET request. It uses `request.dbsession` for automatic transaction management. The code relies on `pyramid.view.view_config` to associate a route and renderer with the function.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/definingviews.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config\nfrom pyramid.response import Response\nfrom pyramid.httpexceptions import HTTPFound\n\n@view_config(\n    route_name='edit_page',\n    renderer='templates/edit.jinja2'\n)\ndef edit_page(request):\n    pagename = request.matchdict['pagename']\n    page = request.dbsession.query(Page).filter_by(name=pagename).first()\n    if page is None:\n        raise HTTPNotFound('No such page')\n\n    if request.method == 'POST':\n        body = request.params['body']\n        page.data = body\n        url = request.route_url('view_page', pagename=pagename)\n        return HTTPFound(url)\n\n    save_url = request.route_url('edit_page', pagename=pagename)\n    return dict(\n        page=page,\n        save_url=save_url\n    )\n```\n\n----------------------------------------\n\nTITLE: Filtering Unsanitized Input - Pyramid (Python)\nDESCRIPTION: This snippet demonstrates how to filter unsanitized HTML input using the 'n' filter within Pyramid templates to revert the default escaping behavior and render the raw HTML.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.1.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n${ myhtml | n }.\n```\n\n----------------------------------------\n\nTITLE: Exception Handling for repoze.bfg.message in Pyramid Router (Python)\nDESCRIPTION: This snippet demonstrates the code that was used to set a value into the environ['repoze.bfg.message'] key when a view-related exception was caught. This was done for backwards compatibility with repoze.bfg applications. This feature was later removed due to a bug.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n                    # \"why\" is an exception object\n                    try: \n                        msg = why[0]\n                    except:\n                        msg = ''\n\n                    environ['repoze.bfg.message'] = msg\n```\n\n----------------------------------------\n\nTITLE: Pyramid Release Announcement (Mailing List)\nDESCRIPTION: This is an example email announcement for the release of Pyramid 2.X.X. It includes links to the changelog, the \"What's New\" document, the release documentation, and instructions on how to install the new version using pip. It also encourages users to report any issues they find.\nSOURCE: https://github.com/pylons/pyramid/blob/main/RELEASING.txt#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nPyramid 2.X.X has been released.\n\nThe full changelog is here:\nhttps://docs.pylonsproject.org/projects/pyramid/en/2.X-branch/changes.html\n\nWhat's New In Pyramid 2.X:\nhttps://docs.pylonsproject.org/projects/pyramid/en/2.X-branch/whatsnew-2.X.html\n\n2.X release documentation (across all alphas and betas, as well as when it gets\nto final release):\nhttps://docs.pylonsproject.org/projects/pyramid/en/2.X-branch/\n\nYou can install it via PyPI:\n\n  pip install Pyramid==2.X\n\nEnjoy, and please report any issues you find to the issue tracker at\nhttps://github.com/Pylons/pyramid/issues\n\nThanks!\n\n- Pyramid core developers\n```\n\n----------------------------------------\n\nTITLE: Custom JSON/Pickle Session Serializer in Pyramid (Python)\nDESCRIPTION: This code defines a custom serializer that attempts to serialize sessions using JSON first. If JSON serialization fails (e.g., due to non-JSON-serializable objects), it falls back to pickle.  This allows for a gradual migration to JSON sessions without breaking compatibility with older clients using pickle. Dependencies: `pickle`, `pyramid.session.JSONSerializer`, `pyramid.session.SignedCookieSessionFactory`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-2.0.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport pickle\nfrom pyramid.session import JSONSerializer\nfrom pyramid.session import SignedCookieSessionFactory\n\n\nclass JSONSerializerWithPickleFallback(object):\n    def __init__(self):\n        self.json = JSONSerializer()\n\n    def dumps(self, appstruct):\n        \"\"\"\n        Accept a Python object and return bytes.\n\n        During a migration, you may want to catch serialization errors here,\n        and keep using pickle while finding spots in your app that are not\n        storing JSON-serializable objects. You may also want to integrate\n        a fall-back to pickle serialization here as well.\n        \"\"\"\n        return self.json.dumps(appstruct)\n\n    def loads(self, bstruct):\n        \"\"\"Accept bytes and return a Python object.\"\"\"\n        try:\n            return self.json.loads(bstruct)\n        except ValueError:\n            try:\n                return pickle.loads(bstruct)\n            except Exception:\n                # this block should catch at least:\n                # ValueError, AttributeError, ImportError; but more to be safe\n                raise ValueError\n\n    # somewhere in your configuration code\nserializer = JSONSerializerWithPickleFallback()\nsession_factory = SignedCookieSessionFactory(..., serializer=serializer)\nconfig.set_session_factory(session_factory)\n```\n\n----------------------------------------\n\nTITLE: Example manifest.json (JSON)\nDESCRIPTION: This JSON represents a manifest file used by ManifestCacheBuster. The keys are the original asset paths, and the values are the cache-busted asset paths. This file is typically generated by an external asset pipeline.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"css/main.css\": \"css/main-678b7c80.css\",\n    \"images/background.png\": \"images/background-a8169106.png\"\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Pyramid Application\nDESCRIPTION: Shows a basic Pyramid application demonstrating explicit WSGI compliance, configuration, and response handling.  It highlights that Pyramid doesn't rely on thread locals for request or response objects and promotes explicit registration of views. No global application object is created.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom wsgiref.simple_server import make_server  # explicitly WSGI\nfrom pyramid.config import Configurator  # to configure app registry\nfrom pyramid.response import Response  # explicit response, no threadlocal\n\ndef hello_world(request):  # accept a request; no request threadlocal reqd\n    # explicit response object means no response threadlocal\n    return Response('Hello world!')\n\nif __name__ == '__main__':\n    with Configurator() as config:    # no global application object\n        config.add_view(hello_world)  # explicit non-decorator registration\n        app = config.make_wsgi_app()  # explicitly WSGI\n    server = make_server('0.0.0.0', 8080, app)\n    server.serve_forever()            # explicitly WSGI\n```\n\n----------------------------------------\n\nTITLE: View Inheritance Hierarchy Lookup Example in Pyramid\nDESCRIPTION: This example demonstrates how view lookup in Pyramid now searches for valid views based on the inheritance hierarchy of the context.  It shows how a more specific view (override_post) does not hide more general views defined for parent classes (get, delete).\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass IResource(Interface):\n\n    ...\n\n@view_config(context=IResource)\ndef get(context, request):\n\n    ...\n\n@view_config(context=IResource, request_method='POST')\ndef post(context, request):\n\n    ...\n\n@view_config(context=IResource, request_method='DELETE')\ndef delete(context, request):\n\n    ...\n\n@implementer(IResource)\nclass MyResource:\n\n    ...\n\n@view_config(context=MyResource, request_method='POST')\ndef override_post(context, request):\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Navigate to view_classes and copy for authentication setup\nDESCRIPTION: This bash command navigates back one directory, copies the 'view_classes' directory to 'authentication', and then navigates into the newly created 'authentication' directory.  This sets up the initial project structure for the authentication tutorial by duplicating a previous example.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/authentication.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ..; cp -r view_classes authentication; cd authentication\n```\n\n----------------------------------------\n\nTITLE: Setup Registry with Configurator in Pyramid (Python)\nDESCRIPTION: Illustrates how to set up a registry using the `Configurator` in Pyramid tests. This is a more rough way that may enable template implementations to be used, if setup_registry is called with a registry. It is important when passing in a registry to the Configurator constructor.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreg = MyRegistry()\nconfig = Configurator(registry=reg)\nconfig.setup_registry()\n```\n\n----------------------------------------\n\nTITLE: Simple Tween Factory (Class Style)\nDESCRIPTION: This code defines a simple tween factory using a class. The factory takes a handler and registry in its `__init__` method, and the `__call__` method acts as the tween, executing code before and after calling the handler.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nclass simple_tween_factory(object):\n    def __init__(self, handler, registry):\n        self.handler = handler\n        self.registry = registry\n\n        # one-time configuration code goes here\n\n    def __call__(self, request):\n        # code to be executed for each request before\n        # the actual application code goes here\n\n        response = self.handler(request)\n\n        # code to be executed for each request after\n        # the actual application code goes here\n\n        return response\n```\n\n----------------------------------------\n\nTITLE: Class-based View accepting only Request in __init__ (Python)\nDESCRIPTION: This snippet shows an example of a class-based view in Pyramid where the '__init__' method accepts only the 'request' object. This pattern is useful when you want to perform initialization logic based on the request object itself.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ndef View(object):\n    __init__(self, request):\n       pass\n```\n\n----------------------------------------\n\nTITLE: Load Default Data into Database\nDESCRIPTION: Executes a script to populate the database with default data. This typically involves inserting initial records or configuring default settings.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/src/authorization/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/initialize_tutorial_db development.ini\n```\n\n----------------------------------------\n\nTITLE: Upload Artifacts to PyPI\nDESCRIPTION: This command uploads the built distribution packages (sdist and wheel) to the Python Package Index (PyPI), making them available for installation by users. X.X represents the version number of the release.\nSOURCE: https://github.com/pylons/pyramid/blob/main/RELEASING.txt#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ twine upload dist/pyramid-X.X-*\n```\n\n----------------------------------------\n\nTITLE: Renderer Factory Class Definition (Python)\nDESCRIPTION: This code defines a renderer factory class that conforms to the Pyramid renderer factory interface. It includes an __init__ method to receive renderer info and a __call__ method to perform the actual rendering.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclass RendererFactory:\n    def __init__(self, info):\n        \"\"\" Constructor: info will be an object having the\n        following attributes: name (the renderer name), package\n        (the package that was 'current' at the time the\n        renderer was registered), type (the renderer type\n        name), registry (the current application registry) and\n        settings (the deployment settings dictionary). \"\"\"\n        pass # Replace with actual initialization code if needed\n\n    def __call__(self, value, system):\n        \"\"\" Call the renderer implementation with the value\n        and the system value passed in as arguments and return\n        the result (a bytes or string object).  The value is\n        the return value of a view.  The system value is a\n        dictionary containing available system values\n        (e.g., view, context, and request). \"\"\"\n        return '' # Replace with actual rendering logic\n```\n\n----------------------------------------\n\nTITLE: Copying Views Directory\nDESCRIPTION: Copies the 'views' directory to 'templating' to create a new project directory. This sets up the initial project structure for templating.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/templating.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ..; cp -r views templating; cd templating\n```\n\n----------------------------------------\n\nTITLE: Running Pyramid Application with Deprecation Warnings (Unix)\nDESCRIPTION: This command demonstrates how to start a Pyramid application interactively on a Unix-like system while ensuring that deprecation warnings are printed to the console using the PYTHONWARNINGS environment variable.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/upgrading.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPYTHONWARNINGS=default $VENV/bin/pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Implementation of authenticated_userid in Pyramid\nDESCRIPTION: This snippet illustrates the underlying implementation of `authenticated_userid`, which utilizes the ZCA registry to query for an `ISecurityPolicy` and then retrieve the user ID. It reveals how Pyramid hides the ZCA interactions from application developers.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef authenticated_userid(request):\n    \"\"\" Return the userid of the currently authenticated user or\n    ``None`` if there is no security policy in effect or there\n    is no currently authenticated user. \"\"\"\n\n    registry = request.registry # the ZCA component registry\n    policy = registry.queryUtility(ISecurityPolicy)\n    if policy is None:\n        return None\n    return policy.authenticated_userid(request)\n```\n\n----------------------------------------\n\nTITLE: Legacy Model Path Implementation (Python)\nDESCRIPTION: Provides the old implementation of model_path as a workaround for applications that have not yet migrated to the new URL-quoted model_path implementation. This function is useful if your application relies on the old, unquoted behavior of model_path, but it is recommended to update your application to handle the new, quoted output.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom repoze.bfg.location import lineage\n\ndef i_am_too_lazy_to_move_to_the_new_model_path(model, *elements):\n    rpath = []\n    for location in lineage(model):\n        if location.__name__:\n            rpath.append(location.__name__)\n    path = '/' + '/'.join(reversed(rpath))\n    if elements:\n        suffix = '/'.join(elements)\n        path = '/'.join([path, suffix])\n    return path\n```\n\n----------------------------------------\n\nTITLE: Event Handler Example\nDESCRIPTION: This code demonstrates how to handle multi-interface notifications in Pyramid using event subscribers. It shows how to register a subscriber that mentions both the event and the context in its argument list.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@subscriber([SomeEvent, SomeContextType])\ndef asubscriber(event, context):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting up Mimetypes Encodings Map (Python)\nDESCRIPTION: This demonstrates how to import the 'mimetypes' module from python, which may be useful in the context of setting up serving pre-compressed assets.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/assets.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport mimetypes\n```\n\n----------------------------------------\n\nTITLE: Include security.py in __init__.py (Python)\nDESCRIPTION: This snippet demonstrates how to include the new 'tutorial/security.py' module in the 'tutorial/__init__.py' file. This ensures that the CSRF protection mechanisms defined in 'security.py' are properly integrated into the application. It involves adding an 'include' statement to the Configurator.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/definingviews.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\nfrom .models import get_root\n\n\ndef main(global_config, **settings):\n    with Configurator(settings=settings) as config:\n        config.include('pyramid_jinja2')\n        config.include('.routes')\n        config.include('.models')\n        config.include('.security')\n        config.scan()\n    return config.make_wsgi_app()\n```\n\n----------------------------------------\n\nTITLE: Groundhog Microframework Example: config.py\nDESCRIPTION: Part of the Groundhog microframework example. Initializes the Groundhog application instance.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom groundhog import Groundhog\ngh = Groundhog('myapp', 'seekrit')\n```\n\n----------------------------------------\n\nTITLE: Create User Model Unit Tests - Python\nDESCRIPTION: This snippet demonstrates how to create unit tests for the user model, specifically focusing on testing the password hashing functionality.  It involves creating a test module that imports the User model and utilizes pytest to assert the correct behavior of the password hashing methods. It requires pytest and the User model.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/tests.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsrc/tests/tests/test_user_model.py\n```\n\n----------------------------------------\n\nTITLE: pytest Output Example\nDESCRIPTION: This is an example output from pytest, showing the test session starting, collected items, test results (passed/failed), coverage report, and total time taken for the tests to execute.  The coverage report shows the coverage percentage for each module.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tour.rst#_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n=========================== test session starts ===========================\nplatform darwin -- Python 3.9.0, pytest-6.2.1, py-1.10.0, pluggy-0.13.1\nrootdir: /<somepath>/hello_world, configfile: pytest.ini, testpaths: hello_world, tests\nplugins: cov-2.10.1\ncollected 4 items\n\ntests/test_functional.py ..                                          [ 50%]\ntests/test_views.py ..                                               [100%]\n\n---------- coverage: platform darwin, python 3.9.0-final-0 -----------\nName                            Stmts   Miss  Cover   Missing\n-------------------------------------------------------------\nhello_world/__init__.py             7      0   100%\nhello_world/routes.py               3      0   100%\nhello_world/views/__init__.py       0      0   100%\nhello_world/views/default.py        4      0   100%\nhello_world/views/notfound.py        5      0   100%\n-------------------------------------------------------------\nTOTAL                              19      0   100%\n\n======================== 4 passed in 0.65 seconds =========================\n```\n\n----------------------------------------\n\nTITLE: Python Code with Caption\nDESCRIPTION: Demonstrates the use of the `:caption:` and `:name:` options to add a caption and a name to a Python code block. The example shows a conditional statement.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/typographical-conventions.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nif \"foo\" == \"bar\":\n    # This is Python code\n    pass\n```\n\n----------------------------------------\n\nTITLE: Pyramid View Function with Permission Check in Python\nDESCRIPTION: This snippet shows a Pyramid view function that checks for a specific permission using request.has_permission and raises HTTPForbidden if the permission is present. It returns a greeting if the permission is not present.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/testing.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.httpexceptions import HTTPForbidden\n\ndef view_fn(request):\n    if request.has_permission('edit'):\n        raise HTTPForbidden\n    return {'greeting':'hello'}\n```\n\n----------------------------------------\n\nTITLE: Git Pull Release Branch\nDESCRIPTION: This command pulls the latest changes from the remote repository into the local release branch.\nSOURCE: https://github.com/pylons/pyramid/blob/main/RELEASING.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git pull\n```\n\n----------------------------------------\n\nTITLE: Chameleon Renderer Unit Test Setup (Python)\nDESCRIPTION: Shows how to configure a unit test to use Chameleon templates by including 'pyramid_chameleon' in the test setup.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass ATest(unittest.TestCase):\n    def setUp(self):\n        self.config = pyramid.testing.setUp()\n        self.config.include('pyramid_chameleon')\n\n    def test_it(self):\n        result = pyramid.renderers.render('mypkg:templates/home.pt', {})\n```\n\n----------------------------------------\n\nTITLE: Prequest with Headers (Bash)\nDESCRIPTION: This bash command invokes the prequest utility with the -d option to display response headers along with the body.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/commandline.rst#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$VENV/bin/prequest -d development.ini /\n```\n\n----------------------------------------\n\nTITLE: Creating virtual environment on macOS/Linux\nDESCRIPTION: Command to create a virtual environment using venv on macOS and Linux.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/requirements.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# macOS and Linux\npython3 -m venv $VENV\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Subscriber Predicate in Pyramid (Python)\nDESCRIPTION: This code snippet demonstrates how to register a custom subscriber predicate using `config.add_subscriber_predicate`. It registers the `RequestPathStartsWith` predicate with the name `request_path_startswith`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hooks.rst#_snippet_45\n\nLANGUAGE: Python\nCODE:\n```\nconfig.add_subscriber_predicate(\n    'request_path_startswith', RequestPathStartsWith)\n```\n\n----------------------------------------\n\nTITLE: Changing Directory (Shell)\nDESCRIPTION: This command changes the current working directory to the 'tutorial' directory. This is necessary to execute subsequent commands within the project's root.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki/src/authorization/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd tutorial\n```\n\n----------------------------------------\n\nTITLE: Overriding Subdirectories within a Package (XML)\nDESCRIPTION: This code illustrates how to override subdirectories within a package using the ``resource`` ZCML directive. This allows replacing specific template directories or asset directories with custom versions. Important: Slashes at the end of the 'to_override' and 'override_with' are crucial to indicate directories.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<resource\n  to_override=\"some.package:templates/\"\n  override_with=\"another.package:othertemplates/\"\n />\n```\n\n----------------------------------------\n\nTITLE: Using the `traverse` Argument in Pyramid Route Definition\nDESCRIPTION: This code demonstrates how to use the `traverse` argument to explicitly specify the traversal path, instead of relying on the `*traverse` remainder marker in the pattern. This allows for more control over the traversal process based on the matched route parameters.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/hybrid.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('abc', '/articles/{article}/edit',\n                     traverse='/{article}')\n```\n\n----------------------------------------\n\nTITLE: Replacing ISecurityPolicy in ZCML\nDESCRIPTION: This snippet illustrates how to replace the deprecated ISecurityPolicy with explicit authentication and authorization policies in ZCML. This involves using directives like <remoteuserauthenticationpolicy/> and <aclauthorizationpolicy/> to configure security policies. Failure to do so will result in a startup error.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n     <utility\n       provides=\"repoze.bfg.interfaces.ISecurityPolicy\"\n       factory=\"repoze.bfg.security.RemoteUserInheritingACLSecurityPolicy\"\n      />\n```\n\nLANGUAGE: xml\nCODE:\n```\n     <remoteuserauthenticationpolicy/>\n     <aclauthorizationpolicy/>\n```\n\n----------------------------------------\n\nTITLE: Chameleon Template String Interpolation\nDESCRIPTION: Illustrates how to use translation strings within Chameleon templates using string interpolation syntax. This allows for inserting translated strings directly within the template's HTML.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<span>${some_translation_string}</span>\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment in Python\nDESCRIPTION: This snippet demonstrates a simple variable assignment in Python. The variable 'foo' is assigned the integer value 1. This snippet is intended to be executed dynamically from a text file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/tests/test_scripts/pystartup.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfoo = 1\n```\n\n----------------------------------------\n\nTITLE: Updating Security Policy Utility Registration\nDESCRIPTION: This snippet demonstrates how to update the registration of a security policy in ZCML due to a renaming. The `RepozeWhoIdentityACLSecurityPolicy` has been deprecated in favor of `WhoACLSecurityPolicy`, requiring a change in the factory attribute of the utility registration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n<utility\n provides=\"repoze.bfg.interfaces.ISecurityPolicy\"\n factory=\"repoze.bfg.security.RepozeWhoIdentityACLSecurityPolicy\"\n />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<utility\n provides=\"repoze.bfg.interfaces.ISecurityPolicy\"\n factory=\"repoze.bfg.security.WhoACLSecurityPolicy\"\n />\n```\n\n----------------------------------------\n\nTITLE: Augmenting Interfaces on Resource Instance - Zope Interface\nDESCRIPTION: Illustrates how to augment the set of interfaces provided by a resource instance using `zope.interface.alsoProvides`, alongside `zope.interface.directlyProvides`. It creates two interfaces, `IBlogEntry1` and `IBlogEntry2`, and adds them both to an instance of `BlogEntry`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/resources.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nfrom zope.interface import alsoProvides\nfrom zope.interface import directlyProvides\nfrom zope.interface import Interface\n\nclass IBlogEntry1(Interface):\n    pass\n\nclass IBlogEntry2(Interface):\n    pass\n\nclass BlogEntry(object):\n    def __init__(self, title, body, author):\n        self.title = title\n        self.body = body\n        self.author = author\n        self.created = datetime.datetime.now()\n\nentry = BlogEntry('title', 'body', 'author')\ndirectlyProvides(entry, IBlogEntry1)\nalsoProvides(entry, IBlogEntry2)\n\n```\n\n----------------------------------------\n\nTITLE: Install Project with Testing Requirements (Shell)\nDESCRIPTION: Installs the project in editable mode along with its testing dependencies. The `-e` flag allows for live changes to the project code without requiring reinstallation. `.[testing]` installs dependencies marked with the 'testing' extra.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/cookiecutters/README.txt#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nenv/bin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Route Configuration with Dynamic Traversal Segment (pyramid.config)\nDESCRIPTION: Shows how to define a route with a dynamic segment named 'traverse' using `config.add_route`.  In previous versions, this configuration would lead to a `UnicodeDecodeError` if the matched portion of the URL contained high-order characters. This snippet highlights a bug fix related to URL decoding in traversal.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_route('trav_route', 'traversal/{traverse:.*}')\n```\n\n----------------------------------------\n\nTITLE: Creating a Pyramid Request\nDESCRIPTION: This code snippet shows how to create a Pyramid request using `pyramid.scripting.make_request`. The resulting request will have a `registry` attribute and is intended to be used in conjunction with `pyramid.scripting.prepare` or `pyramid.paster.bootstrap`.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.1.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.scripting import make_request\nrequest = make_request('/')\n```\n\n----------------------------------------\n\nTITLE: Package-Relative Resource Override (XML)\nDESCRIPTION: This example shows how to define a ``resource`` override where the 'to_override' package is relative to the current package where the ZCML file is defined.  The leading dot in the 'to_override' attribute indicates relative path.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<resource\n  to_override=\".subpackage:templates/\"\n  override_with=\"another.package:templates/\"\n />\n```\n\n----------------------------------------\n\nTITLE: XML Code Block\nDESCRIPTION: Demonstrates syntax highlighting for XML code snippets within the Pyramid documentation. The code is a simple XML snippet.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/typographical-conventions.rst#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<somesnippet>Some XML</somesnippet>\n```\n\n----------------------------------------\n\nTITLE: INI Configuration\nDESCRIPTION: Illustrates how INI configuration files are displayed.  This example shows a pytest configuration, including python_files, testpaths and addopts.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/typographical-conventions.rst#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[tool:pytest]\npython_files = test_*.py\ntestpaths =\n    tests\naddopts = -W always\n```\n\n----------------------------------------\n\nTITLE: Groundhog Route Ordering (Example 1)\nDESCRIPTION: This example illustrates how route ordering in Groundhog can affect the application's behavior.  The '/admin' route is defined first, followed by the '/:action' route. Visiting '/admin' correctly displays the admin page because the more specific route is matched first.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom groundhog import Groundhog\napp = Groundhog('myapp', 'seekrit')\n\n@app.route('/admin')\ndef admin():\n    return '<html>admin page</html>'\n\n@app.route('/:action')\ndef do_action(action):\n    if action == 'add':\n       return '<html>add</html>'\n    if action == 'delete':\n       return '<html>delete</html>'\n    return app.abort(404)\n\nif __name__ == '__main__':\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Setting environment variable on Windows\nDESCRIPTION: Command to set the VENV environment variable pointing to the virtual environment directory on Windows.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/requirements.rst#_snippet_4\n\nLANGUAGE: doscon\nCODE:\n```\n# Windows\nset VENV=c:\\projects\\quick_tutorial\\env\n```\n\n----------------------------------------\n\nTITLE: Initializing TranslationString - Python\nDESCRIPTION: This code snippet demonstrates how to create a TranslationString object using the pyramid.i18n.TranslationString class. This creates a string-like object used for translation.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/i18n.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.i18n import TranslationString\nts = TranslationString('Add')\n```\n\n----------------------------------------\n\nTITLE: ZCML Adapter Registration for Traversal Wrapper\nDESCRIPTION: Registers the ModelGraphTraverser as the traversal policy in configure.zcml to re-enable the wrapper behavior for older applications. This is necessary when upgrading to a version of repoze.bfg that has removed the default implicit traversal wrapping of subobjects that don't implement ILocation in proxies.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<adapter\n        factory=\"repoze.bfg.traversalwrapper.ModelGraphTraverser\"\n        provides=\"repoze.bfg.interfaces.ITraverserFactory\"\n        for=\"*\"\n        />\n```\n\n----------------------------------------\n\nTITLE: Simple View Returning a String (Python)\nDESCRIPTION: Shows a basic Pyramid view that returns a string directly, highlighting the potential for cleaner code compared to returning a full Response object. This snippet is used to illustrate a contrast with standard Pyramid practices.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/advanced-features.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef aview(request):\n    return \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Run Tox Lint\nDESCRIPTION: This command runs the linting checks using tox to ensure that the PyPI long description renders correctly.\nSOURCE: https://github.com/pylons/pyramid/blob/main/RELEASING.txt#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ tox -e lint\n```\n\n----------------------------------------\n\nTITLE: Configuring a view with the JSON renderer in Pyramid (repetition)\nDESCRIPTION: This is a repeated example showing how to configure a Pyramid view to use the 'json' renderer using the Configurator's add_view method. This configuration ensures that the view's return value is serialized to JSON.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/renderers.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconfig.add_view('myproject.views.hello_world',\n                    name='hello',\n                    context='myproject.resources.Hello',\n                    renderer='json')\n```\n\n----------------------------------------\n\nTITLE: Generate Pyramid Project with Cookiecutter (Windows)\nDESCRIPTION: Generates a Pyramid project from the pyramid-cookiecutter-starter template using cookiecutter. This command is executed at the root directory on Windows systems.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/installation.rst#_snippet_2\n\nLANGUAGE: doscon\nCODE:\n```\ncd \\\\\ncookiecutter gh:Pylons/pyramid-cookiecutter-starter --checkout main\n```\n\n----------------------------------------\n\nTITLE: Enabling ZCA Global API with hook_zca - Python\nDESCRIPTION: Demonstrates how to enable the ZCA global API within a Pyramid application using the `hook_zca` method of the Configurator. This makes the ZCA global APIs use the current Pyramid registry.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/zca.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.config import Configurator\n\ndef app(global_settings, **settings):\n    config = Configurator(settings=settings)\n    config.hook_zca()\n    config.include('some.other.application')\n    return config.make_wsgi_app()\n```\n\n----------------------------------------\n\nTITLE: Event Subscriber Example in Pyramid\nDESCRIPTION: This code snippet demonstrates how to create an event subscriber in Pyramid using the repoze.events library and the pyramid.interfaces.IRendererGlobalsEvent interface. The subscriber adds a key 'mykey' with the value 'foo' to the renderer globals dictionary before a renderer is invoked.\nSOURCE: https://github.com/pylons/pyramid/blob/main/HISTORY.rst#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nfrom repoze.events import subscriber\nfrom pyramid.interfaces import IRendererGlobalsEvent\n\n@subscriber(IRendererGlobalsEvent)\ndef add_global(event):\n    event['mykey'] = 'foo'\n```\n\n----------------------------------------\n\nTITLE: Module-Scope Side Effects Example: app.py\nDESCRIPTION: Illustrates module-scope side-effects in Python with a decorator that appends functions to a list. This code demonstrates how the decorator can be executed multiple times due to import behavior, leading to unexpected results.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom config import decorator\nfrom config import L\nimport pprint\n\n@decorator\ndef foo():\n    pass\n\nif __name__ == '__main__':\n    import app2\n    pprint.pprint(L)\n```\n\n----------------------------------------\n\nTITLE: Renaming RoutesContext to DefaultRoutesContext\nDESCRIPTION: The class ``repoze.bfg.urldispatch.RoutesContext`` has been renamed to ``repoze.bfg.urldispatch.DefaultRoutesContext``. The old name is deprecated and usage should be updated.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_42\n\nLANGUAGE: Python\nCODE:\n```\nrepoze.bfg.urldispatch.RoutesContext\nrepoze.bfg.urldispatch.DefaultRoutesContext\n```\n\n----------------------------------------\n\nTITLE: Print Incoming Request (Python 2)\nDESCRIPTION: Demonstrates the `print` statement for Python 2, used to output a message to the console when a request is received.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/hello_world.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint 'Incoming request'\n```\n\n----------------------------------------\n\nTITLE: Creating project directory on Windows\nDESCRIPTION: Commands to create the required project directory structure on Windows using MSDOS commands.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/requirements.rst#_snippet_2\n\nLANGUAGE: doscon\nCODE:\n```\n# Windows\ncd \\\nmkdir projects\\quick_tutorial\ncd projects\\quick_tutorial\n```\n\n----------------------------------------\n\nTITLE: Route Pattern with Special Characters\nDESCRIPTION: This code shows an example of a pattern that needs to be decoded.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/urldispatch.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nfoo/{bar}\n```\n\n----------------------------------------\n\nTITLE: urlencode Replacement\nDESCRIPTION: Replaces the `repoze.bfg.url.urlencode` function with a newer implementation located in `repoze.bfg.encode`. The new version does not delegate to the stdlib function and always behaves as if `doseq=True` for performance reasons.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n- We previously had a Unicode-aware wrapper for the\n  ``urllib.urlencode`` function named ``repoze.bfg.url.urlencode``\n  which delegated to the stdlib function, but which marshalled all\n  unicode values to utf-8 strings before calling the stdlib version.\n  A newer replacement now lives in ``repoze.bfg.encode`` The\n  replacement does not delegate to the stdlib.\n\n  The replacement diverges from the stdlib implementation and the\n  previous ``repoze.bfg.url`` url implementation inasmuch as its\n  ``doseq`` argument is now a decoy: it always behaves in the\n  ``doseq=True`` way (which is the only sane behavior) for speed\n  purposes.\n\n  The old import location (``repoze.bfg.url.urlencode``) still\n  functions and has not been deprecated.\n```\n\n----------------------------------------\n\nTITLE: Django View Example: Accepting URL Parameters\nDESCRIPTION: This code snippet demonstrates how Django views accept URL parameters as positional arguments.  The `poll_id` is extracted from the URL pattern and passed directly to the `aview` function. It returns an HttpResponse containing the poll_id.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef aview(request, poll_id):\n    return HttpResponse(poll_id)\n```\n\n----------------------------------------\n\nTITLE: Windows Command\nDESCRIPTION: Shows how Windows commands are formatted in the documentation, including the use of ``%VENV%`` for the virtual environment path.  This example uses `pserve` to serve a Pyramid application.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/typographical-conventions.rst#_snippet_2\n\nLANGUAGE: doscon\nCODE:\n```\n%VENV%\\Scripts\\pserve development.ini\n```\n\n----------------------------------------\n\nTITLE: Generating Exception Responses\nDESCRIPTION: This Python code demonstrates how to create exception responses in Pyramid using the pyramid.httpexceptions module.  It imports HTTPNotFound and HTTPMovedPermanently, and creates instances of these classes to represent a 404 Not Found and a 301 Moved Permanently response, respectively.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/webob.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.httpexceptions import HTTPNotFound\nfrom pyramid.httpexceptions import HTTPMovedPermanently\n\nresponse = HTTPNotFound('There is no such resource')\n# or:\nresponse = HTTPMovedPermanently(location=new_url)\n```\n\n----------------------------------------\n\nTITLE: Initialize SQLAlchemy models\nDESCRIPTION: The module defines the API for configuring database connections within a Pyramid application. It includes functions for creating database engines, session factories, and transaction-managed sessions. Importing models is crucial for defining relationships and attaching models to the metadata.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/basiclayout.rst#_snippet_0\n\nLANGUAGE: py\nCODE:\n```\nimport sqlalchemy\n\nfrom sqlalchemy.orm import (\\n    scoped_session,\\n    sessionmaker,\\n    )\\n\nfrom sqlalchemy.ext.declarative import declarative_base\n\nfrom zope.sqlalchemy import ZopeTransactionExtension\n\nDBSession = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))\nBase = declarative_base()\n```\n\n----------------------------------------\n\nTITLE: Creating a virtual environment on Windows\nDESCRIPTION: These commands create a virtual environment for a Pyramid project on Windows. They set the VENV environment variable, create the virtual environment using python's venv module, and change the current directory to the virtual environment's location.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/install.rst#_snippet_2\n\nLANGUAGE: doscon\nCODE:\n```\ncd \\\nset VENV=c:\\env\npython -m venv %VENV%\ncd %VENV%\n```\n\n----------------------------------------\n\nTITLE: Groundhog Microframework Example: app.py\nDESCRIPTION: Demonstrates the use of a Groundhog microframework route decorator that executes at module scope. This code illustrates the potential for unintended route registration due to multiple import executions.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom config import gh\n\n@gh.route('/foo/')\ndef foo():\n    return 'foo'\n\nif __name__ == '__main__':\n    import app2\n    pprint.pprint(L)\n```\n\n----------------------------------------\n\nTITLE: Pyramid Not Found View\nDESCRIPTION: Defines a view callable for handling 404 errors. This view is associated with a 'notfound' view configuration and returns a 404 response status along with an empty dictionary to the '404.jinja2' template. When a resource is not found, this view will be rendered.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/narr/project.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import notfound_view\n\n\n@notfound_view(renderer='myproject:templates/404.jinja2')\ndef notfound_view(request):\n    return {}\n\n```\n\n----------------------------------------\n\nTITLE: Modify setup.py to register paster app factory\nDESCRIPTION: This diff snippet demonstrates a modification to `setup.py` to register a paster application factory. Specifically, it adds an entry point named `main` within the `[paster.app_factory]` group. This entry point is linked to the `make_pyramid_app` function defined in `pyramid.paster`, allowing `paster` to easily create and manage Pyramid applications using that function.\nSOURCE: https://github.com/pylons/pyramid/blob/main/TODO.txt#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/setup.py b/setup.py\nindex 03ebb42..91e0e21 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -118,6 +118,8 @@ setup(name='pyramid',\n          [paste.server_runner]\n          wsgiref = pyramid.scripts.pserve:wsgiref_server_runner\n          cherrypy = pyramid.scripts.pserve:cherrypy_server_runner\n+        [paster.app_factory]\n+        main = pyramid.paster:make_pyramid_app\n         \"\"\"\n         )\n```\n\n----------------------------------------\n\nTITLE: AttributeError: module 'tutorial.models' has no attribute 'MyModel'\nDESCRIPTION: This traceback indicates an error that occurs when the application attempts to access the 'MyModel' attribute within the 'tutorial.models' module, but it no longer exists because the model has been updated. This highlights the importance of updating view-related files after model changes to prevent such errors.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/tutorials/wiki2/definingmodels.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nAttributeError: module 'tutorial.models' has no attribute 'MyModel'\n```\n\n----------------------------------------\n\nTITLE: Groundhog Microframework Example: app2.py\nDESCRIPTION: Part of the Groundhog microframework example. Imports app.py and defines another route, further demonstrating the issue of potential double registration.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/designdefense.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport app\n\n@app.gh.route('/bar/')\ndef bar():\n    'return bar'\n```\n\n----------------------------------------\n\nTITLE: Interactive Python Session\nDESCRIPTION: Shows how interactive Python sessions are displayed, including input (>>>) and output, as well as tracebacks. Demonstrates class definition, object creation, and error handling.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/typographical-conventions.rst#_snippet_5\n\nLANGUAGE: pycon\nCODE:\n```\n>>> class Foo:\n...     bar = 100\n...\n>>> f = Foo()\n>>> f.bar\n100\n>>> f.bar / 0\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nZeroDivisionError: integer division or modulo by zero\n```\n\n----------------------------------------\n\nTITLE: Copying View Classes (Bash)\nDESCRIPTION: This bash command sequence copies the `view_classes` directory to a new `logging` directory, changes the current directory to the new `logging` directory, and installs the package in editable mode using pip.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/quick_tutorial/logging.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ..; cp -r view_classes logging; cd logging\n$VENV/bin/pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Pyramid Template Greeting\nDESCRIPTION: This snippet shows a basic Pyramid template using the ${name} variable to display a personalized greeting.  The 'name' variable should be passed to the template context.\nSOURCE: https://github.com/pylons/pyramid/blob/main/tests/fixtures/nonminimal.txt#_snippet_0\n\nLANGUAGE: Template\nCODE:\n```\nHello, ${name}!\n```\n\n----------------------------------------\n\nTITLE: registerDummyRenderer Deprecation\nDESCRIPTION: Deprecates the `repoze.bfg.testing.registerDummyRenderer` API in favor of `repoze.bfg.testing.registerTemplateRenderer`. A deprecation warning is not issued at import time, but its existence has been removed from the documentation.\nSOURCE: https://github.com/pylons/pyramid/blob/main/BFG_HISTORY.rst#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n- The ``repoze.bfg.testing.registerDummyRenderer`` API has been\n  deprecated in favor of\n  ``repoze.bfg.testing.registerTemplateRenderer``.  A deprecation\n  warning is *not* issued at import time for the former name; it will\n  exist \"forever\"; its existence has been removed from the\n  documentation, however.\n```\n\n----------------------------------------\n\nTITLE: Paster Serve Command (Pyramid < 1.3)\nDESCRIPTION: This command illustrates how to run a Pyramid application using `paster serve` in versions prior to 1.3. It relies on a `development.ini` configuration file.\nSOURCE: https://github.com/pylons/pyramid/blob/main/docs/whatsnew-1.3.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n$ $VENV/bin/paster serve development.ini\n```"
  }
]