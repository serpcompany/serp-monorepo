[
  {
    "owner": "welldone-software",
    "repo": "why-did-you-render",
    "content": "TITLE: Example of an Inefficient Component Rendering in React JSX\nDESCRIPTION: Demonstrates a common pattern that causes unnecessary re-renders where an inline object is passed as a prop to a memoized component, creating a new object reference on each render.\nSOURCE: https://github.com/welldone-software/why-did-you-render/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<MemoBigList style={{width: '100%'}}/>\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration for Why Did You Render in React\nDESCRIPTION: Creates a wdyr.js file that initializes the library for development environments only. It configures the library to track all pure components by default.\nSOURCE: https://github.com/welldone-software/why-did-you-render/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\n\nif (process.env.NODE_ENV === 'development') {\n  const whyDidYouRender = require('@welldone-software/why-did-you-render');\n  whyDidYouRender(React, {\n    trackAllPureComponents: true,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing WDYR as First Import in React Application\nDESCRIPTION: Shows how to import the WDYR configuration file as the first import in the application's entry point, which is necessary for proper monkey patching of React.\nSOURCE: https://github.com/welldone-software/why-did-you-render/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport './wdyr'; // <--- first import\n\nimport 'react-hot-loader';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// ...\nimport {App} from './app';\n// ...\nReactDOM.render(<App/>, document.getElementById('root'));\n```\n\n----------------------------------------\n\nTITLE: Configuration for Tracking Custom Hooks with WDYR\nDESCRIPTION: Demonstrates how to configure WDYR to track custom hooks like useSelector from React-Redux, allowing detection of unnecessary re-renders caused by hooks.\nSOURCE: https://github.com/welldone-software/why-did-you-render/blob/master/README.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\n\n// For react-native you might want to use \n// the __DEV__ flag instead of process.env.NODE_ENV === 'development'\nif (process.env.NODE_ENV === 'development') {\n  const whyDidYouRender = require('@welldone-software/why-did-you-render');\n  const ReactRedux = require('react-redux');\n  whyDidYouRender(React, {\n    trackAllPureComponents: true,\n    trackExtraHooks: [\n      [ReactRedux, 'useSelector']\n    ]\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Functional Component Re-renders in React\nDESCRIPTION: Example of how to enable why-did-you-render tracking on a React functional component by setting the whyDidYouRender property after component declaration.\nSOURCE: https://github.com/welldone-software/why-did-you-render/blob/master/README.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst BigListPureComponent = props => (\n  <div>\n    //some heavy component you want to ensure doesn't happen if its not necessary\n  </div>\n)\nBigListPureComponent.whyDidYouRender = true\n```\n\n----------------------------------------\n\nTITLE: Tracking Class Component Re-renders in React\nDESCRIPTION: Example of how to enable why-did-you-render tracking on a React class component by setting the static whyDidYouRender property to true.\nSOURCE: https://github.com/welldone-software/why-did-you-render/blob/master/README.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass BigList extends React.Component {\n  static whyDidYouRender = true\n  render(){\n    return (\n      //some heavy render you want to ensure doesn't happen if its not necessary\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging React App Re-renders\nDESCRIPTION: Example showing how to debug re-render issues by deliberately causing double renders in the app's entry point.\nSOURCE: https://github.com/welldone-software/why-did-you-render/blob/master/README.md#2025-04-17_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst HotApp = hot(App);\nHotApp.whyDidYouRender = true;\nReactDOM.render(<HotApp/>, document.getElementById('root'));\nReactDOM.render(<HotApp/>, document.getElementById('root'));\n```\n\n----------------------------------------\n\nTITLE: Advanced Tracking Configuration in React\nDESCRIPTION: Example showing advanced why-did-you-render tracking configuration with custom options like logOnDifferentValues and customName.\nSOURCE: https://github.com/welldone-software/why-did-you-render/blob/master/README.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nEnhancedMenu.whyDidYouRender = {\n  logOnDifferentValues: true,\n  customName: 'Menu'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Include Patterns in React\nDESCRIPTION: Example of configuring why-did-you-render to track components matching specific patterns, particularly useful for tracking React-Redux connected components.\nSOURCE: https://github.com/welldone-software/why-did-you-render/blob/master/README.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nwhyDidYouRender(React, { include: [/^ConnectFunction/] });\n```\n\n----------------------------------------\n\nTITLE: Configuring React-Redux Connect HOC Tracking\nDESCRIPTION: Example showing the correct way to configure why-did-you-render tracking with React-Redux connected components to avoid console spam.\nSOURCE: https://github.com/welldone-software/why-did-you-render/blob/master/README.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst SimpleComponent = ({a}) => <div data-testid=\"foo\">{a.b}</div>)\nconst ConnectedSimpleComponent = connect(\n  state => ({a: state.a})\n)(SimpleComponent)\nSimpleComponent.whyDidYouRender = true\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for React 19 with WDYR\nDESCRIPTION: Shows how to configure Babel to use WDYR as the JSX import source with the automatic runtime, which is required for React 19 compatibility.\nSOURCE: https://github.com/welldone-software/why-did-you-render/blob/master/README.md#2025-04-17_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n['@babel/preset-react', {\n  runtime: 'automatic',\n  development: process.env.NODE_ENV === 'development',\n  importSource: '@welldone-software/why-did-you-render',\n}]\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for React Native (Bare Workflow)\nDESCRIPTION: Configures Babel for use with React Native's bare workflow by adding the transform-react-jsx plugin with WDYR as the import source in development environments.\nSOURCE: https://github.com/welldone-software/why-did-you-render/blob/master/README.md#2025-04-17_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  presets: ['module:metro-react-native-babel-preset'],\n\n  env: {\n    development: {\n      plugins: [['@babel/plugin-transform-react-jsx', {\n        runtime: 'automatic',\n        development: process.env.NODE_ENV === 'development',\n        importSource: '@welldone-software/why-did-you-render',\n      }]],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for Expo Managed Workflow\nDESCRIPTION: Shows how to configure WDYR with Expo by passing jsxImportSource parameter to babel-preset-expo, enabling the tool in Expo managed projects.\nSOURCE: https://github.com/welldone-software/why-did-you-render/blob/master/README.md#2025-04-17_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// babel.config.js\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: [\n      [\n        \"babel-preset-expo\",\n        {\n          jsxImportSource: \"@welldone-software/why-did-you-render\",\n        },\n      ],\n    ],\n  };\n};\n```"
  }
]