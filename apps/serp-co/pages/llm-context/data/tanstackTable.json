[
  {
    "owner": "tanstack",
    "repo": "table",
    "content": "TITLE: Framework-Specific Table Instance Creation\nDESCRIPTION: Comprehensive examples of creating table instances across different frontend frameworks including Angular, React, Vue, Svelte, Solid, Qwik, and vanilla JavaScript.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/tables.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n//vanilla js\nconst table = createTable({ columns, data, getCoreRowModel: getCoreRowModel() })\n\n//angular\nthis.table = createAngularTable({ columns: this.columns, data: this.data(), getCoreRowModel: getCoreRowModel() })\n\n//lit\nconst table = this.tableController.table({ columns, data, getCoreRowModel: getCoreRowModel() })\n\n//qwik\nconst table = useQwikTable({ columns, data, getCoreRowModel: getCoreRowModel() })\n\n//react\nconst table = useReactTable({ columns, data, getCoreRowModel: getCoreRowModel() })\n\n//solid\nconst table = createSolidTable({ columns, get data() { return data() }, getCoreRowModel: getCoreRowModel() })\n\n//svelte\nconst table = createSvelteTable({ columns, data, getCoreRowModel: getCoreRowModel() })\n\n//vue\nconst table = useVueTable({ columns, data, getCoreRowModel: getCoreRowModel() })\n```\n\n----------------------------------------\n\nTITLE: Controlling Table State in TanStack Table\nDESCRIPTION: Type definition for the state option which allows controlled state management. This state will merge with and override the table's internal state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nstate?: Partial<\n  VisibilityTableState &\n  ColumnOrderTableState &\n  ColumnPinningTableState &\n  FiltersTableState &\n  SortingTableState &\n  ExpandedTableState &\n  GroupingTableState &\n  ColumnSizingTableState &\n  PaginationTableState &\n  RowSelectionTableState\n>\n```\n\n----------------------------------------\n\nTITLE: Building a Sortable and Paginated Table with TanStack Table in React\nDESCRIPTION: This React component demonstrates how to implement a sortable table with pagination using TanStack Table. It creates a table with sample data, allows sorting by clicking on column headers, and includes pagination controls for navigating between pages of data.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/vanilla/table-core.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { flexRender, getCoreRowModel, getSortedRowModel, getPaginationRowModel, useReactTable } from '@tanstack/react-table'\nimport { useState } from 'react'\n\nfunction Example() {\n\n  // Define data\n  const data = [\n    {\n      name: 'Viola',\n      age: 34,\n      status: 'complicated',\n      createdAt: '2022-11-16T06:43:16.555Z',\n      progress: 2,\n    },\n    {\n      name: 'John',\n      age: 20,\n      status: 'single',\n      createdAt: '2022-05-03T23:45:23.122Z',\n      progress: 77,\n    },\n    {\n      name: 'Tanner',\n      age: 32,\n      status: 'relationship',\n      createdAt: '2022-09-10T14:55:32.533Z',\n      progress: 80,\n    },\n  ]\n\n  // Define columns\n  const columns = [\n    {\n      accessorKey: 'name',\n      header: 'Name',\n    },\n    {\n      accessorKey: 'age',\n      header: 'Age',\n    },\n    {\n      accessorKey: 'status',\n      header: 'Status',\n    },\n    {\n      accessorKey: 'progress',\n      header: 'Profile Progress',\n    },\n  ]\n\n  // Configure sorting\n  const [sorting, setSorting] = useState([])\n\n  // Use the useReactTable hook to create the table\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      sorting,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    onSortingChange: setSorting,\n  })\n\n  return (\n    <div className=\"p-2\">\n      <table className=\"w-full \">\n        <thead>\n          {table.getHeaderGroups().map(headerGroup => (\n            <tr key={headerGroup.id}>\n              {headerGroup.headers.map(header => (\n                <th\n                  key={header.id}\n                  className=\"border px-4 py-2 text-left\"\n                  onClick={header.column.getToggleSortingHandler()}\n                >\n                  <div className=\"flex items-center\">\n                    {flexRender(\n                      header.column.columnDef.header,\n                      header.getContext()\n                    )}\n                    {{asc: ' 🔼', desc: ' 🔽'}[\n                      header.column.getIsSorted()\n                    ] ?? null}\n                  </div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody>\n          {table.getRowModel().rows.map(row => (\n            <tr key={row.id} className=\"border-b border-slate-200\">\n              {row.getVisibleCells().map(cell => (\n                <td key={cell.id} className=\"px-4 py-2\">\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <div className=\"h-2\" />\n      <div className=\"flex items-center gap-2\">\n        <button\n          className=\"rounded border p-1\"\n          onClick={() => table.setPageIndex(0)}\n          disabled={!table.getCanPreviousPage()}\n        >\n          {'<<'}\n        </button>\n        <button\n          className=\"rounded border p-1\"\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n        >\n          {'<'}\n        </button>\n        <button\n          className=\"rounded border p-1\"\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n        >\n          {'>'}\n        </button>\n        <button\n          className=\"rounded border p-1\"\n          onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n          disabled={!table.getCanNextPage()}\n        >\n          {'>>'}\n        </button>\n        <span className=\"flex items-center gap-1\">\n          <div>Page</div>\n          <strong>\n            {table.getState().pagination.pageIndex + 1} of{' '}\n            {table.getPageCount()}\n          </strong>\n        </span>\n        <span className=\"flex items-center gap-1\">\n          | Go to page:\n          <input\n            type=\"number\"\n            defaultValue={table.getState().pagination.pageIndex + 1}\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              table.setPageIndex(page)\n            }}\n            className=\"w-16 rounded border p-1\"\n          />\n        </span>\n        <select\n          value={table.getState().pagination.pageSize}\n          onChange={e => {\n            table.setPageSize(Number(e.target.value))\n          }}\n          className=\"rounded border p-1\"\n        >\n          {[10, 20, 30, 40, 50].map(pageSize => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div>Showing {table.getRowModel().rows.length} rows</div>\n    </div>\n  )\n}\n\nexport default Example\n```\n\n----------------------------------------\n\nTITLE: Creating Column Definitions with Column Helper in TypeScript/React\nDESCRIPTION: Demonstrates using createColumnHelper to define various column types including display, grouping, and accessor columns with type safety for a Person data structure.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-defs.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Define your row shape\ntype Person = {\n  firstName: string\n  lastName: string\n  age: number\n  visits: number\n  status: string\n  progress: number\n}\n\nconst columnHelper = createColumnHelper<Person>()\n\n// Make some columns!\nconst defaultColumns = [\n  // Display Column\n  columnHelper.display({\n    id: 'actions',\n    cell: props => <RowActions row={props.row} />,\n  }),\n  // Grouping Column\n  columnHelper.group({\n    header: 'Name',\n    footer: props => props.column.id,\n    columns: [\n      // Accessor Column\n      columnHelper.accessor('firstName', {\n        cell: info => info.getValue(),\n        footer: props => props.column.id,\n      }),\n      // Accessor Column\n      columnHelper.accessor(row => row.lastName, {\n        id: 'lastName',\n        cell: info => info.getValue(),\n        header: () => <span>Last Name</span>,\n        footer: props => props.column.id,\n      }),\n    ],\n  }),\n  // Grouping Column\n  columnHelper.group({\n    header: 'Info',\n    footer: props => props.column.id,\n    columns: [\n      // Accessor Column\n      columnHelper.accessor('age', {\n        header: () => 'Age',\n        footer: props => props.column.id,\n      }),\n      // Grouping Column\n      columnHelper.group({\n        header: 'More Info',\n        columns: [\n          // Accessor Column\n          columnHelper.accessor('visits', {\n            header: () => <span>Visits</span>,\n            footer: props => props.column.id,\n          }),\n          // Accessor Column\n          columnHelper.accessor('status', {\n            header: 'Status',\n            footer: props => props.column.id,\n          }),\n          // Accessor Column\n          columnHelper.accessor('progress', {\n            header: 'Profile Progress',\n            footer: props => props.column.id,\n          }),\n        ],\n      }),\n    ],\n  }),\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Client-Side Global Filtering in React Table\nDESCRIPTION: Imports and configures the necessary functions to enable client-side global filtering in a React Table instance, including the getFilteredRowModel function.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/global-filtering.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useReactTable, getFilteredRowModel } from '@tanstack/react-table'\n//...\nconst table = useReactTable({\n  // other options...\n  getCoreRowModel: getCoreRowModel(),\n  getFilteredRowModel: getFilteredRowModel(), // needed for client-side global filtering\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Cell Values in TanStack Table\nDESCRIPTION: Demonstrates how to access cell values using getValue and renderValue APIs, which provide efficient caching of accessor function results.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/cells.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Access data from any of the columns\nconst firstName = cell.getValue('firstName') // read the cell value from the firstName column\nconst renderedLastName = cell.renderValue('lastName') // render the value from the lastName column\n```\n\n----------------------------------------\n\nTITLE: Configuring the Data Option in TanStack Table\nDESCRIPTION: Definition of the data option which provides the dataset for the table to display. The data should match the type provided to table.setRowType.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ndata: TData[]\n```\n\n----------------------------------------\n\nTITLE: Managing Pagination State in React Table\nDESCRIPTION: Example of managing pagination state with useState hook and connecting it to the table instance. This approach allows external control of the pagination state while still utilizing the table's built-in pagination APIs.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/pagination.md#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useReactTable, getCoreRowModel, getPaginationRowModel } from '@tanstack/react-table';\n//...\nconst [pagination, setPagination] = useState({\n  pageIndex: 0, //initial page index\n  pageSize: 10, //default page size\n});\n\nconst table = useReactTable({\n  columns,\n  data,\n  getCoreRowModel: getCoreRowModel(),\n  getPaginationRowModel: getPaginationRowModel(),\n  onPaginationChange: setPagination, //update the pagination state when internal APIs mutate the pagination state\n  state: {\n    //...\n    pagination,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Row Selection State in TypeScript\nDESCRIPTION: Demonstrates how to access various row selection states using TanStack Table APIs. This includes getting the raw selection state, selected rows, filtered selected rows, and grouped selected rows.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/row-selection.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(table.getState().rowSelection) //get the row selection state - { 1: true, 2: false, etc... }\nconsole.log(table.getSelectedRowModel().rows) //get full client-side selected rows\nconsole.log(table.getFilteredSelectedRowModel().rows) //get filtered client-side selected rows\nconsole.log(table.getGroupedSelectedRowModel().rows) //get grouped client-side selected rows\n```\n\n----------------------------------------\n\nTITLE: Rendering Row Selection UI with Checkboxes in TypeScript/TSX\nDESCRIPTION: Demonstrates how to render row selection UI using checkboxes. It shows how to connect table and row APIs to checkbox inputs for toggling selection of individual rows and all rows.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/row-selection.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns = [\n  {\n    id: 'select-col',\n    header: ({ table }) => (\n      <Checkbox\n        checked={table.getIsAllRowsSelected()}\n        indeterminate={table.getIsSomeRowsSelected()}\n        onChange={table.getToggleAllRowsSelectedHandler()} //or getToggleAllPageRowsSelectedHandler\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        disabled={!row.getCanSelect()}\n        onChange={row.getToggleSelectedHandler()}\n      />\n    ),\n  },\n  //... more column definitions...\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Click-to-Select Row UI in TypeScript/TSX\nDESCRIPTION: Shows how to implement a simpler row selection UI where clicking on a row toggles its selection. This uses the row.getToggleSelectedHandler() API to handle the selection logic.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/row-selection.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<tbody>\n  {table.getRowModel().rows.map(row => {\n    return (\n      <tr\n        key={row.id}\n        className={row.getIsSelected() ? 'selected' : null}\n        onClick={row.getToggleSelectedHandler()}\n      >\n        {row.getVisibleCells().map(cell => {\n          return <td key={cell.id}>{/* */}</td>\n        })}\n      </tr>\n    )\n  })}\n</tbody>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Sorting in TanStack Table (JSX)\nDESCRIPTION: This code demonstrates various configurations for multi-sorting, including disabling multi-sorting for specific columns or the entire table, customizing the multi-sorting trigger, setting a limit on multi-sorted columns, and disabling multi-sort removal.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/sorting.md#2025-04-19_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst columns = [\n  {\n    header: () => 'Created At',\n    accessorKey: 'createdAt',\n    enableMultiSort: false, // always sort by just this column if sorting by this column\n  },\n  //...\n]\n//...\nconst table = useReactTable({\n  columns,\n  data,\n  enableMultiSort: false, // disable multi-sorting for the entire table\n  isMultiSortEvent: (e) => true, // normal click triggers multi-sorting\n  //or\n  isMultiSortEvent: (e) => e.ctrlKey || e.shiftKey, // also use the `Ctrl` key to trigger multi-sorting\n  maxMultiSortColCount: 3, // only allow 3 columns to be sorted at once\n  enableMultiRemove: false, // disable the ability to remove multi-sorts\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Individual Controlled State\nDESCRIPTION: Example of controlling specific table states (filtering, sorting, pagination) with server-side data fetching.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/react/guide/table-state.md#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst [columnFilters, setColumnFilters] = React.useState([]) //no default filters\nconst [sorting, setSorting] = React.useState([{\n  id: 'age',\n  desc: true, //sort by age in descending order by default\n}]) \nconst [pagination, setPagination] = React.useState({ pageIndex: 0, pageSize: 15 })\n\n//Use our controlled state values to fetch data\nconst tableQuery = useQuery({\n  queryKey: ['users', columnFilters, sorting, pagination],\n  queryFn: () => fetchUsers(columnFilters, sorting, pagination),\n  //...\n})\n\nconst table = useReactTable({\n  columns,\n  data: tableQuery.data,\n  //...\n  state: {\n    columnFilters, //pass controlled state back to the table (overrides internal state)\n    sorting,\n    pagination\n  },\n  onColumnFiltersChange: setColumnFilters, //hoist columnFilters state into our own state management\n  onSortingChange: setSorting,\n  onPaginationChange: setPagination,\n})\n//...\n```\n\n----------------------------------------\n\nTITLE: Column accessorFn Property in TanStack Table\nDESCRIPTION: The accessorFn is the resolved function used to extract values from each row for this column. It's only defined if the column has a valid accessor key or function.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/column.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\naccessorFn?: AccessorFn<TData>\n```\n\n----------------------------------------\n\nTITLE: Defining Person Type Structure\nDESCRIPTION: TypeScript type definition for a Person object showing the structure of the data model used in the table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-defs.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype Person = {\n  firstName: string\n  lastName: string\n  age: number\n  visits: number\n  status: string\n  progress: number\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table Creation Functions Across Frameworks in TypeScript\nDESCRIPTION: Type definition for the table creation function which takes table options and returns a table instance. This is the main entry point for setting up a TanStack table in various frameworks.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype useReactTable = <TData extends AnyData>(\n  options: TableOptions<TData>\n) => Table<TData>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sorting Functions in TanStack Table\nDESCRIPTION: Shows how to define and use custom sorting functions for columns in TanStack Table, including global and column-specific sorting functions.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/sorting.md#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst columns = [\n  {\n    header: () => 'Name',\n    accessorKey: 'name',\n    sortingFn: 'alphanumeric', // use built-in sorting function by name\n  },\n  {\n    header: () => 'Age',\n    accessorKey: 'age',\n    sortingFn: 'myCustomSortingFn', // use custom global sorting function\n  },\n  {\n    header: () => 'Birthday',\n    accessorKey: 'birthday',\n    sortingFn: 'datetime', // recommended for date columns\n  },\n  {\n    header: () => 'Profile',\n    accessorKey: 'profile',\n    // use custom sorting function directly\n    sortingFn: (rowA, rowB, columnId) => {\n      return rowA.original.someProperty - rowB.original.someProperty\n    },\n  }\n]\n//...\nconst table = useReactTable({\n  columns,\n  data,\n  getCoreRowModel: getCoreRowModel(),\n  getSortedRowModel: getSortedRowModel(),\n  sortingFns: { //add a custom sorting function\n    myCustomSortingFn: (rowA, rowB, columnId) => {\n      return rowA.original[columnId] > rowB.original[columnId] ? 1 : rowA.original[columnId] < rowB.original[columnId] ? -1 : 0\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Columns in TSX\nDESCRIPTION: This method returns all columns in the table in their normalized and nested hierarchy, mirrored from the column defs passed to the table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\ntype getAllColumns = () => Column<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Headers in JSX with TanStack Table\nDESCRIPTION: Demonstrates how to map over header groups and render table headers with proper column spans. This shows the basic structure for creating the thead section of a table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/headers.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<thead>\n  {table.getHeaderGroups().map(headerGroup => {\n    return (\n      <tr key={headerGroup.id}>\n        {headerGroup.headers.map(header => ( // map over the headerGroup headers array\n          <th key={header.id} colSpan={header.colSpan}>\n            {/* */}\n          </th>\n        ))}\n      </tr>\n    )\n  })}\n</thead>\n```\n\n----------------------------------------\n\nTITLE: Column Definitions for Accessing Nested Data\nDESCRIPTION: Example of column definitions that use both dot notation and accessor functions to access nested data properties.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/data.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns = [\n  {\n    header: 'First Name',\n    accessorKey: 'name.first',\n  },\n  {\n    header: 'Last Name',\n    accessorKey: 'name.last',\n  },\n  {\n    header: 'Age',\n    accessorFn: row => row.info.age, \n  },\n  //...\n]\n```\n\n----------------------------------------\n\nTITLE: Column Cell Formatting Example\nDESCRIPTION: Demonstrates how to format cell content using a custom formatter function with getValue()\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-defs.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ncolumnHelper.accessor('firstName', {\n  cell: props => <span>{props.getValue().toUpperCase()}</span>,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing a React Table with useReactTable Hook\nDESCRIPTION: Demonstrates how to import and use the useReactTable hook from the @tanstack/react-table package. This hook takes an options object and returns a table instance that can be used for rendering a data table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/react/react-table.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReactTable } from '@tanstack/react-table'\n\nfunction App() {\n  const table = useReactTable(options)\n\n  // ...render your table\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Sub-Row Selection in TypeScript\nDESCRIPTION: Shows how to disable automatic sub-row selection when a parent row is selected. This can be done globally or conditionally based on row properties.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/row-selection.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = useReactTable({\n  //...\n  enableSubRowSelection: false, //disable sub-row selection\n  // enableSubRowSelection: row => row.original.age > 18, //disable sub-row selection for adults\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Column Reordering Logic with Drag and Drop\nDESCRIPTION: Provides a complete implementation of column reordering functionality including state management and utility functions for handling drag and drop operations.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-ordering.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst [columnOrder, setColumnOrder] = useState<string[]>(columns.map(c => c.id));\n\n//depending on your dnd solution of choice, you may or may not need state like this\nconst [movingColumnId, setMovingColumnId] = useState<string | null>(null);\nconst [targetColumnId, setTargetColumnId] = useState<string | null>(null);\n\n//util function to splice and reorder the columnOrder array\nconst reorderColumn = <TData extends RowData>(\n  movingColumnId: Column<TData>,\n  targetColumnId: Column<TData>,\n): string[] => {\n  const newColumnOrder = [...columnOrder];\n  newColumnOrder.splice(\n    newColumnOrder.indexOf(targetColumnId),\n    0,\n    newColumnOrder.splice(newColumnOrder.indexOf(movingColumnId), 1)[0],\n  );\n  setColumnOrder(newColumnOrder);\n};\n\nconst handleDragEnd = (e: DragEvent) => {\n  if(!movingColumnId || !targetColumnId) return;\n  setColumnOrder(reorderColumn(movingColumnId, targetColumnId));\n};\n\n//use your dnd solution of choice\n```\n\n----------------------------------------\n\nTITLE: Implementing Fuzzy Filter with Ranking\nDESCRIPTION: Example implementation of a fuzzy filter function using match-sorter-utils, demonstrating filter meta usage and custom sorting based on ranking.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-filtering.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { sortingFns } from '@tanstack/react-table'\n\nimport { rankItem, compareItems } from '@tanstack/match-sorter-utils'\n\nconst fuzzyFilter = (row, columnId, value, addMeta) => {\n  // Rank the item\n  const itemRank = rankItem(row.getValue(columnId), value)\n\n  // Store the ranking info\n  addMeta(itemRank)\n\n  // Return if the item should be filtered in/out\n  return itemRank.passed\n}\n\nconst fuzzySort = (rowA, rowB, columnId) => {\n  let dir = 0\n\n  // Only sort by rank if the column has ranking information\n  if (rowA.columnFiltersMeta[columnId]) {\n    dir = compareItems(\n      rowA.columnFiltersMeta[columnId]!,\n      rowB.columnFiltersMeta[columnId]!\n    )\n  }\n\n  // Provide an alphanumeric fallback for when the item ranks are equal\n  return dir === 0 ? sortingFns.alphanumeric(rowA, rowB, columnId) : dir\n}\n```\n\n----------------------------------------\n\nTITLE: Full Example of Custom Cell and Header Templates\nDESCRIPTION: Provides a complete example of how to define and use custom TemplateRefs for table headers and cells, including how to access the context in the templates.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/angular/angular-table.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  CellContext,\n  ColumnDef,\n  HeaderContext,\n} from '@tanstack/angular-table'\nimport {Component, TemplateRef, viewChild} from '@angular/core'\n\n@Component({\n  template: `\n    <tbody>\n      @for (row of table.getRowModel().rows; track row.id) {\n        <tr>\n          @for (cell of row.getVisibleCells(); track cell.id) {\n            <td>\n              <ng-container\n                *flexRender=\"\n                  cell.column.columnDef.cell;\n                  props: cell.getContext(); // Data given to the TemplateRef\n                  let cell\n                \"\n              >\n                <!-- if you want to render a simple string -->\n                {{ cell }}\n                <!-- if you want to render an html string -->\n                <div [innerHTML]=\"cell\"></div>\n              </ng-container>\n            </td>\n          }\n        </tr>\n      }\n    </tbody>\n\n    <ng-template #customHeader let-context>\n      {{ context.getValue() }}\n    </ng-template>\n    <ng-template #customCell let-context>\n      {{ context.getValue() }}\n    </ng-template>\n  `,\n})\nclass AppComponent {\n  customHeader =\n    viewChild.required<TemplateRef<{ $implicit: HeaderContext<any, any> }>>(\n      'customHeader'\n    )\n  customCell =\n    viewChild.required<TemplateRef<{ $implicit: CellContext<any, any> }>>(\n      'customCell'\n    )\n\n  columns: ColumnDef<unknown>[] = [\n    {\n      id: 'customCell',\n      header: () => this.customHeader(),\n      cell: () => this.customCell(),\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Column Definitions with TData Generic\nDESCRIPTION: Examples of defining column definitions with proper TypeScript generics for type safety. Shows both direct array definition and using columnHelper.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/tables.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns: ColumnDef<User>[] = [] //Pass User type as the generic TData type\n//or\nconst columnHelper = createColumnHelper<User>() //Pass User type as the generic TData type\n```\n\n----------------------------------------\n\nTITLE: Resetting Table State in TanStack Table API\nDESCRIPTION: Type definition for the reset method which allows resetting the table state to its initial state. This resets all features to their initial configurations.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nreset: () => void\n```\n\n----------------------------------------\n\nTITLE: Implementing Fuzzy Filtering and Sorting in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement fuzzy filtering and sorting using the match-sorter-utils package. It includes a custom filter function and a sorting function that uses the filter meta information.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/global-filtering.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { sortingFns } from '@tanstack/[adapter]-table'\n\nimport { rankItem, compareItems } from '@tanstack/match-sorter-utils'\n\nconst fuzzyFilter = (row, columnId, value, addMeta) => {\n  // Rank the item\n  const itemRank = rankItem(row.getValue(columnId), value)\n\n  // Store the ranking info\n  addMeta(itemRank)\n\n  // Return if the item should be filtered in/out\n  return itemRank.passed\n}\n\nconst fuzzySort = (rowA, rowB, columnId) => {\n  let dir = 0\n\n  // Only sort by rank if the column has ranking information\n  if (rowA.columnFiltersMeta[columnId]) {\n    dir = compareItems(\n      rowA.columnFiltersMeta[columnId]!,\n      rowB.columnFiltersMeta[columnId]!\n    )\n  }\n\n  // Provide an alphanumeric fallback for when the item ranks are equal\n  return dir === 0 ? sortingFns.alphanumeric(rowA, rowB, columnId) : dir\n}\n```\n\n----------------------------------------\n\nTITLE: Individual Controlled State with Server-side Data Fetching in Solid\nDESCRIPTION: Demonstrates how to control specific table states (filtering, sorting, pagination) for server-side data fetching. This pattern allows hoisting only the necessary state to parent components.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/solid/guide/table-state.md#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst [columnFilters, setColumnFilters] = createSignal([]) //no default filters\nconst [sorting, setSorting] = createSignal([{\n  id: 'age',\n  desc: true, //sort by age in descending order by default\n}]) \nconst [pagination, setPagination] = createSignal({ pageIndex: 0, pageSize: 15 })\n\n//Use our controlled state values to fetch data\nconst tableQuery = createQuery({\n  queryKey: ['users', columnFilters, sorting, pagination],\n  queryFn: () => fetchUsers(columnFilters, sorting, pagination),\n  //...\n})\n\nconst table = createSolidTable({\n  columns,\n  get data() {\n    return tableQuery.data()\n  },\n  //...\n  state: {\n    get columnFilters() {\n      return columnFilters() //pass controlled state back to the table (overrides internal state)\n    },\n    get sorting() {\n      return sorting()\n    },\n    get pagination() {\n      return pagination()\n    },\n  },\n  onColumnFiltersChange: setColumnFilters, //hoist columnFilters state into our own state management\n  onSortingChange: setSorting,\n  onPaginationChange: setPagination,\n})\n//...\n```\n\n----------------------------------------\n\nTITLE: Enabling Conditional Row Selection in TypeScript\nDESCRIPTION: Shows how to enable row selection conditionally using the enableRowSelection option. This example enables selection only for rows where the age is greater than 18.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/row-selection.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = useReactTable({\n  //...\n  enableRowSelection: row => row.original.age > 18, //only enable row selection for adults\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Multiple Row Models\nDESCRIPTION: Demonstrates how to import and configure multiple row models for advanced table functionality including filtering, sorting, grouping, and pagination.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/row-models.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//only import the row models you need\nimport {\n  getCoreRowModel,\n  getExpandedRowModel,\n  getFacetedMinMaxValues,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getGroupedRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n}\n//...\nconst table = useReactTable({\n  columns,\n  data,\n  getCoreRowModel: getCoreRowModel(),\n  getExpandedRowModel: getExpandedRowModel(),\n  getFacetedMinMaxValues: getFacetedMinMaxValues(),\n  getFacetedRowModel: getFacetedRowModel(),\n  getFacetedUniqueValues: getFacetedUniqueValues(),\n  getFilteredRowModel: getFilteredRowModel(),\n  getGroupedRowModel: getGroupedRowModel(),\n  getPaginationRowModel: getPaginationRowModel(),\n  getSortedRowModel: getSortedRowModel(),\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Header Content with flexRender in TanStack Table\nDESCRIPTION: Shows how to properly render header content using the flexRender utility, which handles various header column definition scenarios including strings, JSX, and functions.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/headers.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{headerGroup.headers.map(header => (\n  <th key={header.id} colSpan={header.colSpan}>\n    {/* Handles all possible header column def scenarios for `header` */}\n    {flexRender(header.column.columnDef.header, header.getContext())}\n  </th>\n))}\n```\n\n----------------------------------------\n\nTITLE: Defining TableFeature Interface in TypeScript\nDESCRIPTION: Core interface definition that describes the structure required to create a table feature in TanStack Table. Includes methods for creating table components and setting default options.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/custom-features.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TableFeature<TData extends RowData = any> {\n  createCell?: (\n    cell: Cell<TData, unknown>,\n    column: Column<TData>,\n    row: Row<TData>,\n    table: Table<TData>\n  ) => void\n  createColumn?: (column: Column<TData, unknown>, table: Table<TData>) => void\n  createHeader?: (header: Header<TData, unknown>, table: Table<TData>) => void\n  createRow?: (row: Row<TData>, table: Table<TData>) => void\n  createTable?: (table: Table<TData>) => void\n  getDefaultColumnDef?: () => Partial<ColumnDef<TData, unknown>>\n  getDefaultOptions?: (\n    table: Table<TData>\n  ) => Partial<TableOptionsResolved<TData>>\n  getInitialState?: (initialState?: InitialTableState) => Partial<TableState>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Global Filter Input UI for React Table\nDESCRIPTION: Implements a search input that connects to the table's setGlobalFilter method, allowing users to enter search terms that filter all columns of the table simultaneously.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/global-filtering.md#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n  <div>\n    <input\n      value=\"\"\n      onChange={e => table.setGlobalFilter(String(e.target.value))}\n      placeholder=\"Search...\"\n    />\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Declaration Merging for TanStack Table Types in TypeScript\nDESCRIPTION: This snippet demonstrates how to use declaration merging to add new feature APIs and state types to TanStack Table's existing types. It extends various interfaces like TableState, TableOptionsResolved, and Table to include custom feature properties.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/custom-features.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@tanstack/react-table' {\n  interface TableState extends DensityTableState {}\n  interface TableOptionsResolved<TData extends RowData>\n    extends DensityOptions {}\n  interface Table<TData extends RowData> extends DensityInstance {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Column Visibility with initialState in React\nDESCRIPTION: This example shows how to set the initial column visibility state using the initialState option in the useReactTable hook, which is useful when you don't need to manage visibility outside the table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-visibility.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = useReactTable({\n  //...\n  initialState: {\n    columnVisibility: {\n      columnId1: true,\n      columnId2: false, //hide this column by default\n      columnId3: true,\n    },\n    //...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Fully Controlled State\nDESCRIPTION: Demonstrates how to control the entire table state using onStateChange with proper initialization.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/react/guide/table-state.md#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n//create a table instance with default state values\nconst table = useReactTable({\n  columns,\n  data,\n  //... Note: `state` values are NOT passed in yet\n})\n\n\nconst [state, setState] = React.useState({\n  ...table.initialState, //populate the initial state with all of the default state values from the table instance\n  pagination: {\n    pageIndex: 0,\n    pageSize: 15 //optionally customize the initial pagination state.\n  }\n})\n\n//Use the table.setOptions API to merge our fully controlled state onto the table instance\ntable.setOptions(prev => ({\n  ...prev, //preserve any other options that we have set up above\n  state, //our fully controlled state overrides the internal state\n  onStateChange: setState //any state changes will be pushed up to our own state management\n}))\n```\n\n----------------------------------------\n\nTITLE: React Component with Stable References for Data and Columns\nDESCRIPTION: Example of a React component that properly initializes data and columns with stable references to prevent infinite re-renders.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/data.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst fallbackData = []\n\nexport default function MyComponent() {\n  //✅ GOOD: This will not cause an infinite loop of re-renders because `columns` is a stable reference\n  const columns = useMemo(() => [\n    // ...\n  ], []);\n\n  //✅ GOOD: This will not cause an infinite loop of re-renders because `data` is a stable reference\n  const [data, setData] = useState(() => [\n    // ...\n  ]);\n\n  // Columns and data are defined in a stable reference, will not cause infinite loop!\n  const table = useReactTable({\n    columns,\n    data ?? fallbackData, //also good to use a fallback array that is defined outside of the component (stable reference)\n  });\n\n  return <table>...</table>;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current State in TanStack Table API\nDESCRIPTION: Type definition for the getState method which returns the current table state. This is the merged result of internal table state and any manually controlled state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\ngetState: () => TableState\n```\n\n----------------------------------------\n\nTITLE: Row API - Row Selection Control Methods\nDESCRIPTION: Methods to control selection state of individual rows and create event handlers for selection toggling in UI components.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-selection.md#2025-04-19_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\ntoggleSelected: (value?: boolean) => void\n\ngetToggleSelectedHandler: () => (event: unknown) => void\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Pagination in React Table\nDESCRIPTION: Implementation of server-side pagination with manual control. This snippet shows how to configure the table with manualPagination mode and set rowCount or pageCount to inform the table of total data size.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/pagination.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useReactTable, getCoreRowModel, getPaginationRowModel } from '@tanstack/react-table';\n//...\nconst table = useReactTable({\n  columns,\n  data,\n  getCoreRowModel: getCoreRowModel(),\n  // getPaginationRowModel: getPaginationRowModel(), //not needed for server-side pagination\n  manualPagination: true, //turn off client-side pagination\n  rowCount: dataQuery.data?.rowCount, //pass in the total row count so the table knows how many pages there are (pageCount calculated internally if not provided)\n  // pageCount: dataQuery.data?.pageCount, //alternatively directly pass in pageCount instead of rowCount\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Table State in React\nDESCRIPTION: Demonstrates how to access internal table state using the table.getState() API.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/react/guide/table-state.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = useReactTable({\n  columns,\n  data,\n  //...\n})\n\nconsole.log(table.getState()) //access the entire internal state\nconsole.log(table.getState().rowSelection) //access just the row selection state\n```\n\n----------------------------------------\n\nTITLE: Implementing Individual Controlled State for Angular Tables\nDESCRIPTION: Shows how to selectively control specific parts of table state (filtering, sorting, pagination) in Angular using signals and rxjs. This implementation demonstrates server-side data fetching based on controlled state values.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/angular/guide/table-state.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {signal} from '@angular/core';\nimport {SortingState, ColumnFiltersState, PaginationState} from '@tanstack/angular-table'\nimport {toObservable} from \"@angular/core/rxjs-interop\";\nimport {combineLatest, switchMap} from 'rxjs';\n\nclass TableComponent {\n  readonly columnFilters = signal<ColumnFiltersState>([]) //no default filters\n  readonly sorting = signal<SortingState>([\n    {\n      id: 'age',\n      desc: true, //sort by age in descending order by default\n    }\n  ])\n  readonly pagination = signal<PaginationState>({\n    pageIndex: 0,\n    pageSize: 15\n  })\n\n  //Use our controlled state values to fetch data\n  readonly data$ = combineLatest({\n    filters: toObservable(this.columnFilters),\n    sorting: toObservable(this.sorting),\n    pagination: toObservable(this.pagination)\n  }).pipe(\n    switchMap(({filters, sorting, pagination}) => fetchData(filters, sorting, pagination))\n  )\n  readonly data = toSignal(this.data$);\n\n  readonly table = createAngularTable(() => ({\n    columns: this.columns,\n    data: this.data(),\n    //...\n    state: {\n      columnFilters: this.columnFilters(), //pass controlled state back to the table (overrides internal state)\n      sorting: this.sorting(),\n      pagination: this.pagination(),\n    },\n    onColumnFiltersChange: updater => { //hoist columnFilters state into our own state management\n      updater instanceof Function\n        ? this.columnFilters.update(updater)\n        : this.columnFilters.set(updater)\n    },\n    onSortingChange: updater => {\n      updater instanceof Function\n        ? this.sorting.update(updater)\n        : this.sorting.set(updater)\n    },\n    onPaginationChange: updater => {\n      updater instanceof Function\n        ? this.pagination.update(updater)\n        : this.pagination.set(updater)\n    },\n  }))\n}\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Implementing Fuzzy Sorting Function for Ranked Results in TanStack Table\nDESCRIPTION: Creates a custom sorting function that uses the ranking information generated by fuzzy filtering. This function compares item ranks and falls back to alphanumeric sorting when ranks are equal.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/fuzzy-filtering.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compareItems } from '@tanstack/match-sorter-utils'\nimport { sortingFns } from '@tanstack/table'\n\nconst fuzzySort: SortingFn<any> = (rowA, rowB, columnId) => {\n  let dir = 0\n\n  // Only sort by rank if the column has ranking information\n  if (rowA.columnFiltersMeta[columnId]) {\n    dir = compareItems(\n      rowA.columnFiltersMeta[columnId]?.itemRank!,\n      rowB.columnFiltersMeta[columnId]?.itemRank!\n    )\n  }\n\n  // Provide an alphanumeric fallback for when the item ranks are equal\n  return dir === 0 ? sortingFns.alphanumeric(rowA, rowB, columnId) : dir\n}\n```\n\n----------------------------------------\n\nTITLE: Column Cell Definition\nDESCRIPTION: Defines how each cell in the column should be rendered, supporting both string and function definitions with access to comprehensive cell props.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/column-def.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ncell?:\n  | string\n  | ((props: {\n      table: Table<TData>\n      row: Row<TData>\n      column: Column<TData>\n      cell: Cell<TData>\n      getValue: () => any\n      renderValue: () => any\n    }) => unknown)\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Row Selection in TypeScript\nDESCRIPTION: Demonstrates how to configure the table for single row selection by disabling multi-row selection. This is useful for creating tables with radio button-like behavior.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/row-selection.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = useReactTable({\n  //...\n  enableMultiRowSelection: false, //only allow a single row to be selected at once\n  // enableMultiRowSelection: row => row.original.age > 18, //only allow a single row to be selected at once for adults\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Fully Controlled Table State in Angular\nDESCRIPTION: Demonstrates how to completely control table state in Angular by using the onStateChange option. This approach hoists the entire table state into your own state management system and shows initialization techniques.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/angular/guide/table-state.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass TableComponent {\n  // create an empty table state, we'll override it later\n  readonly state = signal({} as TableState);\n\n  // create a table instance with default state values\n  readonly table = createAngularTable(() => ({\n    columns: this.columns,\n    data: this.data(),\n    // our fully controlled state overrides the internal state\n    state: this.state(),\n    onStateChange: updater => {\n      // any state changes will be pushed up to our own state management\n      this.state.set(\n        updater instanceof Function ? updater(this.state()) : updater\n      )\n    }\n  }))\n\n  constructor() {\n    // set the initial table state\n    this.state.set({\n      // populate the initial state with all of the default state values\n      // from the table instance\n      ...this.table.initialState,\n      pagination: {\n        pageIndex: 0,\n        pageSize: 15, // optionally customize the initial pagination state.\n      },\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Full Table State in Svelte with TanStack Table\nDESCRIPTION: Shows how to fully control the entire table state in external state management using the onStateChange option. This example demonstrates initializing state with default values and implementing a setState function to handle all state updates.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/svelte/guide/table-state.md#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n//create a table instance with default state values\nconst options = writable({\n  columns,\n  data,\n  //... Note: `state` values are NOT passed in yet\n})\nconst table = createSvelteTable(options)\n\nlet state = {\n  ...table.initialState, //populate the initial state with all of the default state values from the table instance\n  pagination: {\n    pageIndex: 0,\n    pageSize: 15 //optionally customize the initial pagination state.\n  }\n}\nconst setState = updater => {\n  if (updater instanceof Function) {\n    state = updater(state)\n  } else {\n    state = updater\n  }\n  options.update(old => ({\n    ...old,\n    state,\n  }))\n}\n\n//Use the table.setOptions API to merge our fully controlled state onto the table instance\ntable.setOptions(prev => ({\n  ...prev, //preserve any other options that we have set up above\n  state, //our fully controlled state overrides the internal state\n  onStateChange: setState //any state changes will be pushed up to our own state management\n}))\n```\n\n----------------------------------------\n\nTITLE: Extracting Min and Max Values for Range Filtering\nDESCRIPTION: This snippet demonstrates how to use the getFacetedMinMaxValues method to extract minimum and maximum values from a column for range filtering.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-faceting.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst [min, max] = column.getFacetedMinMaxValues() ?? [0, 1];\n```\n\n----------------------------------------\n\nTITLE: Setting Default Column Properties in TanStack Table\nDESCRIPTION: Type definition for the defaultColumn option which allows setting default properties for all columns. These properties will be merged with individual column definitions.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ndefaultColumn?: Partial<ColumnDef<TData>>\n```\n\n----------------------------------------\n\nTITLE: Custom Filter Functions Implementation\nDESCRIPTION: Example of implementing custom filter functions both inline and globally for table columns.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-filtering.md#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst columns = [\n  {\n    header: () => 'Name',\n    accessorKey: 'name',\n    filterFn: 'includesString', // use built-in filter function\n  },\n  {\n    header: () => 'Age',\n    accessorKey: 'age',\n    filterFn: 'inNumberRange',\n  },\n  {\n    header: () => 'Birthday',\n    accessorKey: 'birthday',\n    filterFn: 'myCustomFilterFn', // use custom global filter function\n  },\n  {\n    header: () => 'Profile',\n    accessorKey: 'profile',\n    // use custom filter function directly\n    filterFn: (row, columnId, filterValue) => {\n      return // true or false based on your custom logic\n    },\n  }\n]\n//...\nconst table = useReactTable({\n  columns,\n  data,\n  getCoreRowModel: getCoreRowModel(),\n  getFilteredRowModel: getFilteredRowModel(),\n  filterFns: { // add a custom global filter function\n    myCustomFilterFn: (row, columnId, filterValue) => { // defined inline here\n      return // true or false based on your custom logic\n    },\n    startsWith: startsWithFilterFn, // defined elsewhere\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination UI Controls in React\nDESCRIPTION: Example of implementing pagination UI controls using React Table's pagination APIs. This snippet demonstrates how to create pagination buttons and a page size selector that interact with the table instance.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/pagination.md#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Button\n  onClick={() => table.firstPage()}\n  disabled={!table.getCanPreviousPage()}\n>\n  {'<<'}\n</Button>\n<Button\n  onClick={() => table.previousPage()}\n  disabled={!table.getCanPreviousPage()}\n>\n  {'<'}\n</Button>\n<Button\n  onClick={() => table.nextPage()}\n  disabled={!table.getCanNextPage()}\n>\n  {'>'}\n</Button>\n<Button\n  onClick={() => table.lastPage()}\n  disabled={!table.getCanNextPage()}\n>\n  {'>>'}\n</Button>\n<select\n  value={table.getState().pagination.pageSize}\n  onChange={e => {\n    table.setPageSize(Number(e.target.value))\n  }}\n>\n  {[10, 20, 30, 40, 50].map(pageSize => (\n    <option key={pageSize} value={pageSize}>\n      {pageSize}\n    </option>\n  ))}\n</select>\n```\n\n----------------------------------------\n\nTITLE: Accessing Column Size Values in TanStack Table\nDESCRIPTION: Demonstrates the various APIs available to access column size values for header cells, data cells, and footer cells.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-sizing.md#2025-04-19_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nheader.getSize()\ncolumn.getSize()\ncell.column.getSize()\n```\n\n----------------------------------------\n\nTITLE: Table API setSorting Method for TanStack Table\nDESCRIPTION: Defines the setSorting method on the table API, which sets or updates the sorting state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nsetSorting: (updater: Updater<SortingState>) => void\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Pagination with React Table\nDESCRIPTION: Basic implementation of client-side pagination in TanStack Table using the getPaginationRowModel function. This snippet shows how to set up the table instance with the pagination row model.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/pagination.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useReactTable, getCoreRowModel, getPaginationRowModel } from '@tanstack/react-table';\n//...\nconst table = useReactTable({\n  columns,\n  data,\n  getCoreRowModel: getCoreRowModel(),\n  getPaginationRowModel: getPaginationRowModel(), //load client-side pagination code\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Global Filter State in React Table\nDESCRIPTION: Sets up state management for the global filter, connecting React's useState with TanStack Table's state management system to persist and update filter values.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/global-filtering.md#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst [globalFilter, setGlobalFilter] = useState<any>([])\n\nconst table = useReactTable({\n  // other options...\n  state: {\n    globalFilter,\n  },\n  onGlobalFilterChange: setGlobalFilter\n})\n```\n\n----------------------------------------\n\nTITLE: Controlling Individual Table States in Svelte for Server-Side Data Fetching\nDESCRIPTION: Demonstrates how to control specific table states (sorting, filtering, pagination) in external state management. This example shows implementing state update functions and passing them to the table for server-side data fetching scenarios.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/svelte/guide/table-state.md#2025-04-19_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nlet sorting = [\n  {\n    id: 'age',\n    desc: true, //sort by age in descending order by default\n  },\n]\nconst setSorting = updater => {\n  if (updater instanceof Function) {\n    sorting = updater(sorting)\n  } else {\n    sorting = updater\n  }\n  options.update(old => ({\n    ...old,\n    state: {\n      ...old.state,\n      sorting,\n    },\n  }))\n}\n\nlet columnFilters = [] //no default filters\nconst setColumnFilters = updater => {\n  if (updater instanceof Function) {\n    columnFilters = updater(columnFilters)\n  } else {\n    columnFilters = updater\n  }\n  options.update(old => ({\n    ...old,\n    state: {\n      ...old.state,\n      columnFilters,\n    },\n  }))\n}\n\nlet pagination = { pageIndex: 0, pageSize: 15 } //default pagination\nconst setPagination = updater => {\n  if (updater instanceof Function) {\n    pagination = updater(pagination)\n  } else {\n    pagination = updater\n  }\n  options.update(old => ({\n    ...old,\n    state: {\n      ...old.state,\n      pagination,\n    },\n  }))\n}\n\n//Use our controlled state values to fetch data\nconst tableQuery = createQuery({\n  queryKey: ['users', columnFilters, sorting, pagination],\n  queryFn: () => fetchUsers(columnFilters, sorting, pagination),\n  //...\n})\n\nconst options = writable({\n  columns,\n  data: tableQuery.data,\n  //...\n  state: {\n    columnFilters, //pass controlled state back to the table (overrides internal state)\n    sorting,\n    pagination\n  },\n  onColumnFiltersChange: setColumnFilters, //hoist columnFilters state into our own state management\n  onSortingChange: setSorting,\n  onPaginationChange: setPagination,\n})\n\nconst table = createSvelteTable(options)\n//...\n```\n\n----------------------------------------\n\nTITLE: Enabling Client-Side Expanding in TanStack Table\nDESCRIPTION: Initializes the table with expanded row model functionality by adding the getExpandedRowModel function to the table options.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/expanding.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = useReactTable({\n  // other options...\n  getExpandedRowModel: getExpandedRowModel(),\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Header Groups in React TanStack Table\nDESCRIPTION: This snippet demonstrates how to render header groups and header cells in a React component using TanStack Table. It maps over the header groups retrieved from table.getHeaderGroups() and then maps over the headers array within each header group to render individual header cells with the appropriate colSpan attribute.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/header-groups.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<thead>\n  {table.getHeaderGroups().map(headerGroup => {\n    return (\n      <tr key={headerGroup.id}>\n        {headerGroup.headers.map(header => ( // map over the headerGroup headers array\n          <th key={header.id} colSpan={header.colSpan}>\n            {/* */}\n          </th>\n        ))}\n      </tr>\n    )\n  })}\n</thead>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Density Feature Types\nDESCRIPTION: TypeScript type definitions for a custom table density feature, including state management, options configuration, and instance methods for density control.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/custom-features.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DensityState = 'sm' | 'md' | 'lg'\nexport interface DensityTableState {\n  density: DensityState\n}\n\nexport interface DensityOptions {\n  enableDensity?: boolean\n  onDensityChange?: OnChangeFn<DensityState>\n}\n\nexport interface DensityInstance {\n  setDensity: (updater: Updater<DensityState>) => void\n  toggleDensity: (value?: DensityState) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Visible Columns and Cells in React\nDESCRIPTION: This example demonstrates how to use visibility-aware table APIs like getVisibleLeafColumns and getVisibleCells to render only visible columns and cells in the table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-visibility.md#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      {table.getVisibleLeafColumns().map((column) => ( // takes column visibility into account\n        //\n      ))}\n    </tr>\n  </thead>\n  <tbody>\n    {table.getRowModel().rows.map((row) => (\n      <tr key={row.id}>\n        {row.getVisibleCells().map((cell) => ( // takes column visibility into account\n          //\n        ))}\n      </tr>\n    ))}\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Global Filter Function in React Table\nDESCRIPTION: Demonstrates how to create and apply a custom filtering function for global searches, which can be passed to the globalFilterFn option in the table configuration.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/global-filtering.md#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst customFilterFn = (rows, columnId, filterValue) => {\n  // custom filter logic\n}\n\nconst table = useReactTable({\n  // other options...\n  globalFilterFn: customFilterFn\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Client-Side Sorting in TanStack Table\nDESCRIPTION: Demonstrates how to enable client-side sorting in TanStack Table by providing the getSortedRowModel function to transform rows into sorted rows.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/sorting.md#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useReactTable } from '@tanstack/react-table'\n//...\nconst table = useReactTable({\n  columns,\n  data,\n  getCoreRowModel: getCoreRowModel(),\n  getSortedRowModel: getSortedRowModel(), //provide a sorting row model\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Fully Controlled State for TanStack Table in Qwik\nDESCRIPTION: Shows how to control the entire table state in your own state management using the onStateChange option. This approach requires properly initializing the state with default values from the table instance.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/qwik/guide/table-state.md#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n//create a table instance with default state values\nconst table = useQwikTable({\n  columns,\n  data,\n  //... Note: `state` values are NOT passed in yet\n})\n\n\nconst sate = Qwik.useSignal({\n  ...table.initialState, //populate the initial state with all of the default state values from the table instance\n  pagination: {\n    pageIndex: 0,\n    pageSize: 15 //optionally customize the initial pagination state.\n  }\n})\n\n//Use the table.setOptions API to merge our fully controlled state onto the table instance\ntable.setOptions(prev => ({\n  ...prev, //preserve any other options that we have set up above\n  state: state.value, //our fully controlled state overrides the internal state\n  onStateChange: updater => {\n    state.value = updater instanceof Function ? updater(state.value) : updater //any state changes will be pushed up to our own state management\n  },\n}))\n```\n\n----------------------------------------\n\nTITLE: Configuring Column with Fuzzy Filtering and Sorting in TanStack Table\nDESCRIPTION: Shows how to configure a column to use both fuzzy filtering and sorting. This example applies both the custom fuzzy filter function and the fuzzy sort function to a fullName column.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/fuzzy-filtering.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  accessorFn: row => `${row.firstName} ${row.lastName}`,\n  id: 'fullName',\n  header: 'Full Name',\n  cell: info => info.getValue(),\n  filterFn: 'fuzzy', //using our custom fuzzy filter function\n  sortFn: 'fuzzySort', //using our custom fuzzy sort function\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Resize Mode in TanStack Table\nDESCRIPTION: Demonstrates how to change the column resize mode from the default 'onEnd' to 'onChange' for immediate column resizing updates.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-sizing.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst table = useReactTable({\n  //...\n  columnResizeMode: 'onChange', //change column resize mode to \"onChange\"\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Column Objects from Headers and Cells in TanStack Table\nDESCRIPTION: Demonstrates how to access column objects through header and cell references in TanStack Table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/columns.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst column = cell.column; // get column from cell\nconst column = header.column; // get column from header\n```\n\n----------------------------------------\n\nTITLE: Configuring Grouping with Expandable Rows in TanStack Table\nDESCRIPTION: Implements both grouping and expanding functionality for tables, allowing users to expand and collapse grouped rows. This combines the grouped row model with the expanded row model.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/grouping.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getGroupedRowModel, getExpandedRowModel} from '@tanstack/react-table'\n\nconst table = useReactTable({\n  // other options...\n  getGroupedRowModel: getGroupedRowModel(),\n  getExpandedRowModel: getExpandedRowModel(),\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Grouping State with External State Management\nDESCRIPTION: Implements external state management for grouping using React's useState hook, allowing for controlled grouping state that can be modified outside the table component.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/grouping.md#2025-04-19_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst [grouping, setGrouping] = useState<string[]>([])\n\nconst table = useReactTable({\n  // other options...\n  state: {\n    grouping: grouping,\n  },\n  onGroupingChange: setGrouping\n})\n```\n\n----------------------------------------\n\nTITLE: SortingFnOption Type Definition for TanStack Table\nDESCRIPTION: Defines the possible values for the columnDef.sortingFn option, which can be 'auto', a string referencing built-in or custom sorting functions, or a direct sorting function implementation.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport type SortingFnOption<TData extends AnyData> =\n  | 'auto'\n  | SortingFns\n  | BuiltInSortingFns\n  | SortingFn<TData>\n```\n\n----------------------------------------\n\nTITLE: Initializing Column Visibility State in React\nDESCRIPTION: This snippet demonstrates how to initialize and manage column visibility state using React hooks. It shows setting up the state and passing it to the useReactTable hook.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-visibility.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst [columnVisibility, setColumnVisibility] = useState({\n  columnId1: true,\n  columnId2: false, //hide this column by default\n  columnId3: true,\n});\n\nconst table = useReactTable({\n  //...\n  state: {\n    columnVisibility,\n    //...\n  },\n  onColumnVisibilityChange: setColumnVisibility,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Column Pinning State in React with TanStack Table\nDESCRIPTION: This snippet demonstrates how to initialize and manage the column pinning state in a React component using TanStack Table. It shows the usage of useState hook and how to pass the state to the useReactTable hook.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-pinning.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst [columnPinning, setColumnPinning] = useState<ColumnPinningState>({\n  left: [],\n  right: [],\n});\n//...\nconst table = useReactTable({\n  //...\n  state: {\n    columnPinning,\n    //...\n  }\n  onColumnPinningChange: setColumnPinning,\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Initial Table State in Angular with TanStack Table\nDESCRIPTION: Demonstrates how to set custom initial state values for a TanStack table in Angular using the initialState option. This allows customizing defaults for column order, visibility, expansion, and sorting behavior.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/angular/guide/table-state.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ntable = createAngularTable(() => ({\n  columns: this.columns,\n  data: this.data(),\n  initialState: {\n    columnOrder: ['age', 'firstName', 'lastName'], //customize the initial column order\n    columnVisibility: {\n      id: false //hide the id column by default\n    },\n    expanded: true, //expand all rows by default\n    sorting: [\n      {\n        id: 'age',\n        desc: true //sort by age in descending order by default\n      }\n    ]\n  },\n  //...\n}))\n```\n\n----------------------------------------\n\nTITLE: Row Selection Options - enableMultiRowSelection\nDESCRIPTION: Option to enable or disable multiple row selection functionality. Can be a boolean value or a function that determines multi-selection capability based on row data.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-selection.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nenableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Filtering in React Table\nDESCRIPTION: Configuration for client-side filtering by importing and using the getFilteredRowModel function.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-filtering.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useReactTable, getFilteredRowModel } from '@tanstack/react-table'\n//...\nconst table = useReactTable({\n  data,\n  columns,\n  getCoreRowModel: getCoreRowModel(),\n  getFilteredRowModel: getFilteredRowModel(), // needed for client-side filtering\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Global Filtering for Specific Columns in React Table\nDESCRIPTION: Configures columns and table options to disable global filtering, either for specific columns using the enableGlobalFilter property or for all columns using the table-level enableGlobalFilter option.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/global-filtering.md#2025-04-19_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst columns = [\n  {\n    header: () => 'Id',\n    accessorKey: 'id',\n    enableGlobalFilter: false, // disable global filtering for this column\n  },\n  //...\n]\n//...\nconst table = useReactTable({\n  // other options...\n  columns,\n  enableGlobalFilter: false, // disable global filtering for all columns\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Row Selection State in TypeScript\nDESCRIPTION: Shows how to manage row selection state externally and pass it back to the table instance. This approach allows for easier access to selected row IDs for API calls or other actions.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/row-selection.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [rowSelection, setRowSelection] = useState<RowSelectionState>({}) //manage your own row selection state\n\nconst table = useReactTable({\n  //...\n  onRowSelectionChange: setRowSelection, //hoist up the row selection state to your own scope\n  state: {\n    rowSelection, //pass the row selection state back to the table instance\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Column Sizes to Table Headers with Inline Styles\nDESCRIPTION: Shows how to apply column sizes to table header elements using inline styles and the getSize() API.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-sizing.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<th\n  key={header.id}\n  colSpan={header.colSpan}\n  style={{ width: `${header.getSize()}px` }}\n>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Pinned Columns in TanStack Table\nDESCRIPTION: This code snippet shows how to pin columns by default in TanStack Table using the initialState option. It demonstrates pinning an 'expand-column' to the left and an 'actions-column' to the right.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-pinning.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = useReactTable({\n  //...\n  initialState: {\n    columnPinning: {\n      left: ['expand-column'],\n      right: ['actions-column'],\n    },\n    //...\n  }\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Feature in React Component with TanStack Table\nDESCRIPTION: This code demonstrates how to use the new density feature in a React component. It shows passing density state and change handler to the table, and using the density value to style table cells.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/custom-features.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst table = useReactTable({\n  _features: [DensityFeature],\n  columns,\n  data,\n  //...\n  state: {\n    density,\n  },\n  onDensityChange: setDensity,\n})\n//...\nconst { density } = table.getState()\nreturn(\n  <td\n    key={cell.id}\n    style={{\n      padding:\n        density === 'sm'\n          ? '4px'\n          : density === 'md'\n            ? '8px'\n            : '16px',\n      transition: 'padding 0.2s',\n    }}\n  >\n    {flexRender(\n      cell.column.columnDef.cell,\n      cell.getContext()\n    )}\n  </td>\n)\n```\n\n----------------------------------------\n\nTITLE: Table Option sortingFns for TanStack Table\nDESCRIPTION: Defines the sortingFns table option, which allows defining custom sorting functions that can be referenced by key in column definitions.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nsortingFns?: Record<string, SortingFn>\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial State for TanStack Table\nDESCRIPTION: Type definition for initialState which allows setting the initial state for various table features like visibility, sorting, and pagination. This state is used when resetting the table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ninitialState?: Partial<\n  VisibilityTableState &\n  ColumnOrderTableState &\n  ColumnPinningTableState &\n  FiltersTableState &\n  SortingTableState &\n  ExpandedTableState &\n  GroupingTableState &\n  ColumnSizingTableState &\n  PaginationTableState &\n  RowSelectionTableState\n>\n```\n\n----------------------------------------\n\nTITLE: Using Faceted Row Models for Autocomplete Suggestions\nDESCRIPTION: This code snippet shows how to use the getFacetedUniqueValues method to generate autocomplete suggestions from a column's unique values.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-faceting.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst autoCompleteSuggestions = \n Array.from(column.getFacetedUniqueValues().keys())\n  .sort()\n  .slice(0, 5000);\n```\n\n----------------------------------------\n\nTITLE: Defining Column API Methods for Sizing in TypeScript\nDESCRIPTION: Declares TypeScript function signatures for column API methods related to sizing, including getSize, getStart, getAfter, getCanResize, getIsResizing, and resetSize.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-sizing.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ngetSize: () => number\n\ngetStart: (position?: ColumnPinningPosition) => number\n\ngetAfter: (position?: ColumnPinningPosition) => number\n\ngetCanResize: () => boolean\n\ngetIsResizing: () => boolean\n\nresetSize: () => void\n```\n\n----------------------------------------\n\nTITLE: Row Cell Access APIs\nDESCRIPTION: APIs for accessing different sections of pinned cells within a row\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-pinning.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\ngetLeftVisibleCells: () => Cell<TData>[]\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetRightVisibleCells: () => Cell<TData>[]\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetCenterVisibleCells: () => Cell<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Filter Settings\nDESCRIPTION: Shows how to disable column filtering globally or for specific columns using table and column options\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-filtering.md#2025-04-19_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst columns = [\n  {\n    header: () => 'Id',\n    accessorKey: 'id',\n    enableColumnFilter: false, // disable column filtering for this column\n  },\n  //...\n]\n//...\nconst table = useReactTable({\n  columns,\n  data,\n  enableColumnFilters: false, // disable column filtering for all columns\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Server-Side Faceting in TanStack Table\nDESCRIPTION: This snippet shows how to implement custom server-side faceting using react-query. It fetches faceting data from an API and sets the table's faceting methods to use this data.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/global-faceting.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst facetingQuery = useQuery(\n  'faceting',\n  async () => {\n    const response = await fetch('/api/faceting');\n    return response.json();\n  },\n  {\n    onSuccess: (data) => {\n      table.getGlobalFacetedUniqueValues = () => data.uniqueValues;\n      table.getGlobalFacetedMinMaxValues = () => data.minMaxValues;\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sub-Rows with getSubRows in TanStack Table\nDESCRIPTION: Sets up the table to use children array as sub-rows by implementing the getSubRows function, along with core row model and expanded row model for proper functionality.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/expanding.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = useReactTable({\n  // other options...\n  getSubRows: (row) => row.children, // return the children array as sub-rows\n  getCoreRowModel: getCoreRowModel(),\n  getExpandedRowModel: getExpandedRowModel(),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Aggregation Functions in TypeScript\nDESCRIPTION: Example showing how to define and use custom aggregation functions with TanStack Table, including module augmentation to add type safety.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare module '@tanstack/table-core' {\n  interface AggregationFns {\n    myCustomAggregation: AggregationFn<unknown>\n  }\n}\n\nconst column = columnHelper.data('key', {\n  aggregationFn: 'myCustomAggregation',\n})\n\nconst table = useReactTable({\n  columns: [column],\n  aggregationFns: {\n    myCustomAggregation: (columnId, leafRows, childRows) => {\n      // return the aggregated value\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring Row API Methods for Expansion in TypeScript\nDESCRIPTION: Defines TypeScript interfaces for various row API methods related to expansion, including toggleExpanded, getIsExpanded, getIsAllParentsExpanded, getCanExpand, and getToggleExpandedHandler.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/expanding.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntoggleExpanded: (expanded?: boolean) => void\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsExpanded: () => boolean\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsAllParentsExpanded: () => boolean\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetCanExpand: () => boolean\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetToggleExpandedHandler: () => () => void\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Aggregation Functions in TanStack Table\nDESCRIPTION: Creates a custom aggregation function that can be referenced in column definitions. The function receives the column ID, leaf rows, and child rows to calculate an aggregated value.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/grouping.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst table = useReactTable({\n  // other options...\n  aggregationFns: {\n    myCustomAggregation: (columnId, leafRows, childRows) => {\n      // return the aggregated value\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Server-Side Faceting in TanStack Table\nDESCRIPTION: This code example shows how to implement custom server-side faceting by overriding the getFacetedUniqueValues and getFacetedMinMaxValues table options.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-faceting.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst facetingQuery = useQuery(\n  //...\n)\n\nconst table = useReactTable({\n  columns,\n  data,\n  getCoreRowModel: getCoreRowModel(),\n  getFacetedRowModel: getFacetedRowModel(),\n  getFacetedUniqueValues: (table, columnId) => {\n    const uniqueValueMap = new Map<string, number>();\n    //...\n    return uniqueValueMap;\n  },\n  getFacetedMinMaxValues: (table, columnId) => {\n    //...\n    return [min, max];\n  },\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Individually Controlled State for TanStack Table in Qwik\nDESCRIPTION: Demonstrates controlling specific table state properties (filtering, sorting, and pagination) in your own state management while leaving other state properties to be managed internally. Useful for server-side data fetching scenarios.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/qwik/guide/table-state.md#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst columnFilters = Qwik.useSignal([]) //no default filters\nconst sorting = Qwik.useSignal([{\n  id: 'age',\n  desc: true, //sort by age in descending order by default\n}]) \nconst pagination = Qwik.useSignal({ pageIndex: 0, pageSize: 15 })\n\n//Use our controlled state values to fetch data\nconst tableQuery = useQuery({\n  queryKey: ['users', columnFilters.value, sorting.value, pagination.value],\n  queryFn: () => fetchUsers(columnFilters.value, sorting.value, pagination.value),\n  //...\n})\n\nconst table = useQwikTable({\n  columns: columns.value,\n  data: tableQuery.data,\n  //...\n  state: {\n    columnFilters: columnFilters.value, //pass controlled state back to the table (overrides internal state)\n    sorting: sorting.value,\n    pagination: pagination.value,\n  },\n  onColumnFiltersChange: updater => {\n    columnFilters.value = updater instanceof Function ? updater(columnFilters.value) : updater //hoist columnFilters state into our own state management\n  },\n  onSortingChange: updater => {\n    sorting.value = updater instanceof Function ? updater(sorting.value) : updater\n  },\n  onPaginationChange: updater => {\n    pagination.value = updater instanceof Function ? updater(pagination.value) : updater\n  },\n})\n//...\n```\n\n----------------------------------------\n\nTITLE: Row Selection Options - enableRowSelection\nDESCRIPTION: Option to enable or disable row selection globally or conditionally per row. Can be a boolean value or a function that determines selectability based on row data.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-selection.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nenableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Fuzzy Filter Function in TypeScript for TanStack Table\nDESCRIPTION: Defines a custom fuzzy filter function using the rankItem utility from @tanstack/match-sorter-utils. This function evaluates each row against a filter value and stores ranking information in metadata.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/fuzzy-filtering.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { rankItem } from '@tanstack/match-sorter-utils';\nimport { FilterFn } from '@tanstack/table';\n\nconst fuzzyFilter: FilterFn<any> = (row, columnId, value, addMeta) => {\n  // Rank the item\n  const itemRank = rankItem(row.getValue(columnId), value)\n\n  // Store the itemRank info\n  addMeta({ itemRank })\n\n  // Return if the item should be filtered in/out\n  return itemRank.passed\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Sorting State with State Change Callbacks in Lit\nDESCRIPTION: Shows the correct pattern for implementing state change callbacks with corresponding state values in Lit. This example properly handles both function and value updaters for sorting state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/lit/guide/table-state.md#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n@state()\nprivate _sorting = [];\n//...\nrender() {\n  const table = this.tableController.table({\n    columns,\n    data,\n    state: {\n      sorting: this._sorting,\n    },\n    onSortingChange: updaterOrValue => {\n      if (typeof updaterOrValue === 'function') {\n        this._sorting = updaterOrValue(this._sorting)\n      } else {\n        this._sorting = updaterOrValue\n      }\n    },\n    getSortedRowModel: getSortedRowModel(),\n    getCoreRowModel: getCoreRowModel(),\n  })\n\n  return html`...`;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Required State with onChange Callbacks in TanStack Table\nDESCRIPTION: Demonstrates the requirement to provide both the state value and corresponding onChange callback for controlled state components. This example shows how to properly set up sorting state with its update function to ensure the state isn't frozen.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/svelte/guide/table-state.md#2025-04-19_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nlet sorting = []\nconst setSorting = updater => {\n  if (updater instanceof Function) {\n    sorting = updater(sorting)\n  } else {\n    sorting = updater\n  }\n  options.update(old => ({\n    ...old,\n    state: {\n      ...old.state,\n      sorting,\n    },\n  }))\n}\n//...\nconst options = writable({\n  columns,\n  data,\n  //...\n  state: {\n    sorting, //required because we are using `onSortingChange`\n  },\n  onSortingChange: setSorting, //makes the `state.sorting` controlled\n})\nconst table = createSvelteTable(options)\n```\n\n----------------------------------------\n\nTITLE: Managing Grouping State in TanStack Table\nDESCRIPTION: Shows how to control the grouping state using the setGrouping and resetGrouping functions. The grouping state determines which columns are used for grouping and in what order.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/grouping.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntable.setGrouping(['column1', 'column2']);\n```\n\nLANGUAGE: tsx\nCODE:\n```\ntable.resetGrouping();\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Sorting State in React\nDESCRIPTION: Shows how to manage sorting state externally using React's useState hook and pass it to the TanStack Table instance for controlled sorting behavior.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/sorting.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst [sorting, setSorting] = useState<SortingState>([]) // can set initial sorting state here\n//...\n// use sorting state to fetch data from your server or something...\n//...\nconst table = useReactTable({\n  columns,\n  data,\n  //...\n  state: {\n    sorting,\n  },\n  onSortingChange: setSorting,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Column Visibility State Types in TypeScript\nDESCRIPTION: Type definitions for column visibility state in TanStack Table, including the base visibility state and table state interfaces.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-visibility.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n```\n\n----------------------------------------\n\nTITLE: Using Reactive Data with Vue Table\nDESCRIPTION: Shows how to use reactive data with the useVueTable hook using Vue refs and computed properties.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/vue/guide/table-state.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns = [\n  { accessor: 'id', Header: 'ID' },\n  { accessor: 'name', Header: 'Name' }\n]\n\nconst dataRef = ref([\n  { id: 1, name: 'John' },\n  { id: 2, name: 'Jane' }\n])\n\nconst table = useVueTable({\n  columns,\n  data: dataRef, // Pass the reactive data ref\n})\n\n// Later, updating dataRef will automatically update the table\ndataRef.value = [\n  { id: 1, name: 'John' },\n  { id: 2, name: 'Jane' },\n  { id: 3, name: 'Doe' }\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom Component in Table Cells\nDESCRIPTION: Demonstrates how to render a custom Angular component in table cells using flexRenderComponent. It shows how to pass inputs, outputs, and a custom injector to the component.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/angular/angular-table.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {flexRenderComponent} from \"./flex-render-component\";\nimport {ChangeDetectionStrategy, input, output} from \"@angular/core\";\n\n@Component({\n  template: `\n    ...\n  `,\n  standalone: true,\n  changeDetectionStrategy: ChangeDetectionStrategy.OnPush,\n  host: {\n    '(click)': 'clickEvent.emit($event)'\n  }\n})\nclass CustomCell {\n  readonly content = input.required<string>();\n  readonly cellType = input<MyType>();\n\n  // An output that will emit for every cell click\n  readonly clickEvent = output<Event>();\n}\n\nclass AppComponent {\n  columns: ColumnDef<unknown>[] = [\n    {\n      id: 'custom-cell',\n      header: () => {\n        const translateService = inject(TranslateService);\n        return translateService.translate('...');\n      },\n      cell: (context) => {\n        return flexRenderComponent(\n          MyCustomComponent,\n          {\n            injector, // Optional injector\n            inputs: {\n              // Mandatory input since we are using `input.required()\n              content: context.row.original.rowProperty,\n              // cellType? - Optional input\n            },\n            outputs: {\n              clickEvent: () => {\n                // Do something\n              }\n            }\n          }\n        )\n      },\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Table Option onSortingChange for TanStack Table\nDESCRIPTION: Defines the onSortingChange table option, which provides a callback for when sorting state changes, allowing for external state management.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nonSortingChange?: OnChangeFn<SortingState>\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Rows\nDESCRIPTION: Demonstrates how to retrieve selected rows using the getSelectedRowModel() API.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/rows.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst selectedRows = table.getSelectedRowModel().rows\n```\n\n----------------------------------------\n\nTITLE: Accessing Row Values\nDESCRIPTION: Shows how to access row values using getValue and renderValue APIs for efficient data retrieval.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/rows.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Access data from any of the columns\nconst firstName = row.getValue('firstName') // read the row value from the firstName column\nconst renderedLastName = row.renderValue('lastName') // render the value from the lastName column\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Expanding UI with Row Fragment Pattern\nDESCRIPTION: Creates a custom expanding UI by overriding the getRowCanExpand function and rendering expanded content in a separate row with a colspan that covers the entire table width.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/expanding.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n//...\nconst table = useReactTable({\n  // other options...\n  getRowCanExpand: (row) => true, // Add your logic to determine if a row can be expanded. True means all rows include expanded data\n  getCoreRowModel: getCoreRowModel(),\n  getExpandedRowModel: getExpandedRowModel(),\n})\n//...\n<tbody>\n  {table.getRowModel().rows.map((row) => (\n    <React.Fragment key={row.id}>\n     {/* Normal row UI */}\n      <tr>\n        {row.getVisibleCells().map((cell) => (\n          <td key={cell.id}>\n            <FlexRender\n              render={cell.column.columnDef.cell}\n              props={cell.getContext()}\n            />\n          </td>\n        ))}\n      </tr>\n      {/* If the row is expanded, render the expanded UI as a separate row with a single cell that spans the width of the table */}\n      {row.getIsExpanded() && (\n        <tr>\n          <td colSpan={row.getAllCells().length}> // The number of columns you wish to span for the expanded data if it is not a row that shares the same columns as the parent row\n            // Your custom UI goes here\n          </td>\n        </tr>\n      )}\n    </React.Fragment>\n  ))}\n</tbody>\n//...\n```\n\n----------------------------------------\n\nTITLE: Overriding Column Sizing Defaults in TanStack Table\nDESCRIPTION: Demonstrates how to override default column sizing settings both at the table level and for individual columns using column definitions.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-sizing.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns = [\n  {\n    accessorKey: 'col1',\n    size: 270, //set column size for this column\n  },\n  //...\n]\n\nconst table = useReactTable({\n  //override default column sizing\n  defaultColumn: {\n    size: 200, //starting column size\n    minSize: 50, //enforced during column resizing\n    maxSize: 500, //enforced during column resizing\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Table Content with FlexRender\nDESCRIPTION: Shows how to use the FlexRender component to render dynamic cell, header, and footer templates within a Vue table implementation.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/vue/vue-table.md#2025-04-19_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\nimport { FlexRender } from '@tanstack/vue-table'\n\n<template>\n  <tbody>\n    <tr v-for=\"row in table.getRowModel().rows\" :key=\"row.id\">\n      <td v-for=\"cell in row.getVisibleCells()\" :key=\"cell.id\">\n        <FlexRender\n          :render=\"cell.column.columnDef.cell\"\n          :props=\"cell.getContext()\"\n        />\n      </td>\n    </tr>\n  </tbody>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accessing Row Data from Cells in TanStack Table\nDESCRIPTION: Shows how to access original row data from any cell object using the cell.row.original property.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/cells.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Even if we are in the scope of a different cell, we can still access the original row data\nconst firstName = cell.row.original.firstName // { firstName: 'John', lastName: 'Doe' }\n```\n\n----------------------------------------\n\nTITLE: Table Option - onColumnVisibilityChange\nDESCRIPTION: Type definition for the callback function that handles column visibility state changes.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-visibility.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nonColumnVisibilityChange?: OnChangeFn<VisibilityState>\n```\n\n----------------------------------------\n\nTITLE: Customizing Sorting Behavior in TanStack Table\nDESCRIPTION: Demonstrates various options to customize sorting behavior in TanStack Table, including disabling sorting and configuring initial sorting direction for columns.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/sorting.md#2025-04-19_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst columns = [\n  {\n    header: () => 'ID',\n    accessorKey: 'id',\n    enableSorting: false, // disable sorting for this column\n  },\n  {\n    header: () => 'Name',\n    accessorKey: 'name',\n  },\n  //...\n]\n//...\nconst table = useReactTable({\n  columns,\n  data,\n  enableSorting: false, // disable sorting for the entire table\n})\n```\n\n----------------------------------------\n\nTITLE: Column API toggleSorting Method for TanStack Table\nDESCRIPTION: Defines the toggleSorting method on the column API, which toggles the column's sorting state with options to force direction and enable multi-sorting.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\ntoggleSorting: (desc?: boolean, isMulti?: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Table Options for Column Pinning\nDESCRIPTION: TypeScript definitions for table-level column pinning options including enabling/disabling pinning and change handler\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-pinning.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nenableColumnPinning?: boolean\n```\n\nLANGUAGE: tsx\nCODE:\n```\nonColumnPinningChange?: OnChangeFn<ColumnPinningState>\n```\n\n----------------------------------------\n\nTITLE: Infinite Loop Anti-Pattern in React Table Implementation\nDESCRIPTION: Demonstrates incorrect implementation that causes infinite rendering loops by creating new column and data references on every render.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/faq.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function MyComponent() {\n  const columns = [\n    // ...\n  ];\n\n  const data = [\n    // ...\n  ];\n\n  const table = useReactTable({\n    columns,\n    data,\n  });\n\n  return <table>...</table>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Faceting Row Models in TanStack Table\nDESCRIPTION: This snippet demonstrates how to import and set up various faceting row models in the table options. It includes core, faceted, min/max, and unique value row models.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/global-faceting.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getCoreRowModel,\n  getFacetedRowModel,\n  getFacetedMinMaxValues, //depends on getFacetedRowModel\n  getFacetedUniqueValues, //depends on getFacetedRowModel\n} from '@tanstack/react-table'\n//...\nconst table = useReactTable({\n  // other options...\n  getCoreRowModel: getCoreRowModel(),\n  getFacetedRowModel: getFacetedRowModel(), //Faceting model for client-side faceting (other faceting methods depend on this model)\n  getFacetedMinMaxValues: getFacetedMinMaxValues(), //if you need min/max values\n  getFacetedUniqueValues: getFacetedUniqueValues(), //if you need a list of unique values\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying a Global Filter Function in React Table\nDESCRIPTION: Configures a table instance with a specific global filter function, in this case using the built-in 'text' filter function for case-insensitive text search across all columns.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/global-filtering.md#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = useReactTable({\n  data,\n  columns,\n  getCoreRowModel: getCoreRowModel(),\n  getFilteredRowModel: getFilteredRowModel(),\n  globalFilterFn: 'text' // built-in filter function\n})\n```\n\n----------------------------------------\n\nTITLE: Basic TanStack Table Implementation with Core Row Model\nDESCRIPTION: Shows the basic setup of TanStack Table with the core row model, demonstrating the minimal required configuration.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/row-models.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCoreRowModel, useReactTable } from '@tanstack/react-table'\n\nfunction Component() {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(), //row model\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Table with createSvelteTable in Svelte\nDESCRIPTION: This snippet demonstrates the basic usage of createSvelteTable function from the @tanstack/svelte-table package. It imports the necessary function and creates a table instance by passing options to it, which will handle state management in a Svelte-compatible way.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/svelte/svelte-table.md#2025-04-19_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\nimport { createSvelteTable } from '@tanstack/svelte-table'\n\nconst table = createSvelteTable(options)\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Column Resize Event Handlers\nDESCRIPTION: Demonstrates how to connect column resize event handlers for both mouse and touch events using the getResizeHandler() API.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-sizing.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ColumnResizeHandle\n  onMouseDown={header.getResizeHandler()} //for desktop\n  onTouchStart={header.getResizeHandler()} //for mobile\n/>\n```\n\n----------------------------------------\n\nTITLE: Inverting Sorting in TanStack Table (JSX)\nDESCRIPTION: This snippet demonstrates how to invert sorting for a specific column. It's useful for values with an inverted best/worst scale, such as rankings or golf-like scoring.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/sorting.md#2025-04-19_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst columns = [\n  {\n    header: () => 'Rank',\n    accessorKey: 'rank',\n    invertSorting: true, // invert the sorting for this column. 1st -> 2nd -> 3rd -> ... even if \"desc\" sorting is applied\n  },\n  //...\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Column Visibility Toggles in React\nDESCRIPTION: This code snippet shows how to create column visibility toggles using various column API methods such as getCanHide, getIsVisible, and getToggleVisibilityHandler.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-visibility.md#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{table.getAllColumns().map((column) => (\n  <label key={column.id}>\n    <input\n      checked={column.getIsVisible()}\n      disabled={!column.getCanHide()}\n      onChange={column.getToggleVisibilityHandler()}\n      type=\"checkbox\"\n    />\n    {column.columnDef.header}\n  </label>\n))}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Filter Function with TypeScript\nDESCRIPTION: Demonstrates how to create a custom starts-with filter function with autoRemove and resolveFilterValue handlers for TanStack Table\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-filtering.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst startsWithFilterFn = <TData extends MRT_RowData>(\n  row: Row<TData>,\n  columnId: string,\n  filterValue: number | string, //resolveFilterValue will transform this to a string\n) =>\n  row\n    .getValue<number | string>(columnId)\n    .toString()\n    .toLowerCase()\n    .trim()\n    .startsWith(filterValue); // toString, toLowerCase, and trim the filter value in `resolveFilterValue`\n\n// remove the filter value from filter state if it is falsy (empty string in this case)\nstartsWithFilterFn.autoRemove = (val: any) => !val; \n\n// transform/sanitize/format the filter value before it is passed to the filter function\nstartsWithFilterFn.resolveFilterValue = (val: any) => val.toString().toLowerCase().trim();\n```\n\n----------------------------------------\n\nTITLE: Column Accessor Function Definition\nDESCRIPTION: Defines a function to extract column value from each row with access to the original row data and index.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/column-def.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\naccessorFn?: (originalRow: TData, index: number) => any\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Fuzzy Filtering in TanStack Table\nDESCRIPTION: Demonstrates how to configure a TanStack Table instance to use fuzzy filtering for global searches. This setup registers the custom fuzzy filter function and applies it to global filtering.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/fuzzy-filtering.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = useReactTable({ // or your framework's equivalent function\n    columns,\n    data,\n    filterFns: {\n      fuzzy: fuzzyFilter, //define as a filter function that can be used in column definitions\n    },\n    globalFilterFn: 'fuzzy', //apply fuzzy filter to the global filter (most common use case for fuzzy filter)\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(), //client side filtering\n    getSortedRowModel: getSortedRowModel(), //client side sorting needed if you want to use sorting too.\n})\n```\n\n----------------------------------------\n\nTITLE: Table Option enableMultiSort for TanStack Table\nDESCRIPTION: Defines the enableMultiSort table option, which globally enables or disables multi-sorting for the table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nenableMultiSort?: boolean\n```\n\n----------------------------------------\n\nTITLE: Using flexRender for Dynamic Cell Rendering in Lit\nDESCRIPTION: Shows how to use the flexRender utility function to render cell templates with dynamic values in a Lit table implementation. The example renders table rows and cells with proper context handling.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/lit/lit-table.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { flexRender } from '@tanstack/lit-table'\n//...\nreturn html`\n<tbody>\n  ${table\n    .getRowModel()\n    .rows.slice(0, 10)\n    .map(\n      row => html`\n        <tr>\n          ${row\n            .getVisibleCells()\n            .map(\n              cell => html`\n                <td>\n                  ${flexRender(\n                    cell.column.columnDef.cell,\n                    cell.getContext()\n                  )}\n                </td>\n              `\n            )}\n        </tr>\n      `\n    )}\n</tbody>\n`\n```\n\n----------------------------------------\n\nTITLE: Defining getAutoAggregationFn Column API in TypeScript\nDESCRIPTION: Specifies the getAutoAggregationFn method in the column API which returns the automatically inferred aggregation function for the column.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\ngetAutoAggregationFn: () => AggregationFn<TData> | undefined\n```\n\n----------------------------------------\n\nTITLE: Row Selection Options - onRowSelectionChange\nDESCRIPTION: Callback function for handling row selection state changes. This overrides the default state management, requiring external state management implementation.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-selection.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nonRowSelectionChange?: OnChangeFn<RowSelectionState>\n```\n\n----------------------------------------\n\nTITLE: Constructing Cell IDs in TanStack Table\nDESCRIPTION: Shows how cell IDs are constructed by combining row and column IDs with an underscore separator.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/cells.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{ id: `${row.id}_${column.id}` }\n```\n\n----------------------------------------\n\nTITLE: Implementing setPageSize Method\nDESCRIPTION: Defines the setPageSize method that updates the page size using a provided function or value.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nsetPageSize: (updater: Updater<number>) => void\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Feature Object for TanStack Table\nDESCRIPTION: This code creates a DensityFeature object that defines new functionality for TanStack Table. It includes methods for initial state, default options, and table instance methods related to the density feature.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/custom-features.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const DensityFeature: TableFeature<any> = {\n  getInitialState: (state): DensityTableState => {\n    return {\n      density: 'md',\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): DensityOptions => {\n    return {\n      enableDensity: true,\n      onDensityChange: makeStateUpdater('density', table),\n    } as DensityOptions\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setDensity = updater => {\n      const safeUpdater: Updater<DensityState> = old => {\n        let newState = functionalUpdate(updater, old)\n        return newState\n      }\n      return table.options.onDensityChange?.(safeUpdater)\n    }\n    table.toggleDensity = value => {\n      table.setDensity(old => {\n        if (value) return value\n        return old === 'lg' ? 'md' : old === 'md' ? 'sm' : 'lg'\n      })\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table Options for Expansion in TypeScript\nDESCRIPTION: Specifies TypeScript interfaces for various table options related to expansion, including manualExpanding, onExpandedChange, autoResetExpanded, enableExpanding, getExpandedRowModel, getIsRowExpanded, getRowCanExpand, and paginateExpandedRows.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/expanding.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nmanualExpanding?: boolean\n```\n\nLANGUAGE: tsx\nCODE:\n```\nonExpandedChange?: OnChangeFn<ExpandedState>\n```\n\nLANGUAGE: tsx\nCODE:\n```\nautoResetExpanded?: boolean\n```\n\nLANGUAGE: tsx\nCODE:\n```\nenableExpanding?: boolean\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetExpandedRowModel?: (table: Table<TData>) => () => RowModel<TData>\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsRowExpanded?: (row: Row<TData>) => boolean\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetRowCanExpand?: (row: Row<TData>) => boolean\n```\n\nLANGUAGE: tsx\nCODE:\n```\npaginateExpandedRows?: boolean\n```\n\n----------------------------------------\n\nTITLE: Table API - toggleAllRowsSelected\nDESCRIPTION: Method to select or deselect all rows in the table based on the provided boolean value. Provides programmatic control over bulk selection.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-selection.md#2025-04-19_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\ntoggleAllRowsSelected: (value: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Managing Dynamic Column Order State in TanStack Table\nDESCRIPTION: Shows how to implement dynamic column order management using React state hooks. This approach allows for runtime column order changes.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-ordering.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst [columnOrder, setColumnOrder] = useState<string[]>(['columnId1', 'columnId2', 'columnId3']); //optionally initialize the column order\n//...\nconst table = useReactTable({\n  //...\n  state: {\n    columnOrder,\n    //...\n  }\n  onColumnOrderChange: setColumnOrder,\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Row Model Data Structures\nDESCRIPTION: Shows how to access different data structures provided by row models including rows array, flattened rows, and rows by ID lookup.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/row-models.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(table.getRowModel().rows) // array of rows\nconsole.log(table.getRowModel().flatRows) // array of rows, but all sub-rows are flattened into the top level\nconsole.log(table.getRowModel().rowsById['row-id']) // object of rows, where each row is keyed by its `id`\n```\n\n----------------------------------------\n\nTITLE: Implementing Fully Controlled Table State\nDESCRIPTION: Shows how to implement fully controlled table state management using onStateChange.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/vue/guide/table-state.md#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = useVueTable({\n  get columns() {\n    return columns.value\n  },\n  data,\n  //... Note: `state` values are NOT passed in yet\n})\n\nconst state = ref({\n  ...table.initialState,\n  pagination: {\n    pageIndex: 0,\n    pageSize: 15\n  }\n})\nconst setState = updater => {\n  state.value = updater instanceof Function ? updater(state.value) : updater\n}\n\n//Use the table.setOptions API to merge our fully controlled state onto the table instance\ntable.setOptions(prev => ({\n  ...prev, //preserve any other options that we have set up above\n  get state() {\n    return state.value\n  },\n  onStateChange: setState //any state changes will be pushed up to our own state management\n}))\n```\n\n----------------------------------------\n\nTITLE: Accessing Internal Table State in Svelte with TanStack Table\nDESCRIPTION: Demonstrates how to access the internal state of a TanStack Table instance in Svelte. This example shows creating a table with columns and data, then accessing either the entire state or specific parts like row selection using the table.getState() API.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/svelte/guide/table-state.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst options = writable({\n  columns,\n  data,\n  //...\n})\n\nconst table = createSvelteTable(options)\n\nconsole.log(table.getState()) //access the entire internal state\nconsole.log(table.getState().rowSelection) //access just the row selection state\n```\n\n----------------------------------------\n\nTITLE: Table State Management Operations\nDESCRIPTION: Examples of reading, setting, and resetting table state using row selection as an example feature.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/tables.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntable.getState().rowSelection //read the row selection state\ntable.setRowSelection((old) => ({...old})) //set the row selection state\ntable.resetRowSelection() //reset the row selection state\n```\n\n----------------------------------------\n\nTITLE: Creating Toggle Buttons for Row Expansion in TanStack Table\nDESCRIPTION: Adds expansion toggle buttons to a column definition, using conditional rendering based on whether the row can be expanded and its current expansion state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/expanding.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns = [\n  {\n    accessorKey: 'name',\n    header: 'Name',\n  },\n  {\n    accessorKey: 'age',\n    header: 'Age',\n  },\n  {\n    header: 'Children',\n    cell: ({ row }) => {\n      return row.getCanExpand() ?\n        <button\n          onClick={row.getToggleExpandedHandler()}\n          style={{ cursor: 'pointer' }}\n        >\n        {row.getIsExpanded() ? '👇' : '👉'}\n        </button>\n       : '';\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Types for Table State in TanStack Table\nDESCRIPTION: Shows how to use TypeScript types provided by TanStack Table for proper type checking of state values. This example demonstrates typing sorting state and updater functions to get proper autocompletion and type safety.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/svelte/guide/table-state.md#2025-04-19_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { createSvelteTable, type SortingState, type Updater } from '@tanstack/svelte-table'\n//...\nlet sorting: SortingState[] = [\n  {\n    id: 'age', //you should get autocomplete for the `id` and `desc` properties\n    desc: true,\n  }\n]\nconst setSorting = (updater: Updater<SortingState>)  => {\n  if (updater instanceof Function) {\n    sorting = updater(sorting)\n  } else {\n    sorting = updater\n  }\n  options.update(old => ({\n    ...old,\n    state: {\n      ...old.state,\n      sorting,\n    },\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Extending TableMeta Interface in TanStack Table\nDESCRIPTION: Example of extending the TableMeta interface via declaration merging to add custom properties that can be accessed via table.options.meta throughout the table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare module '@tanstack/table-core' {\n  interface TableMeta<TData extends RowData> {\n    foo: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Column Resize Indicator with columnSizingInfo\nDESCRIPTION: Shows how to implement a column resize indicator UI using the columnSizingInfo state from the table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-sizing.md#2025-04-19_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<ColumnResizeIndicator\n  style={{\n    transform: header.column.getIsResizing()\n      ? `translateX(${table.getState().columnSizingInfo.deltaOffset}px)`\n      : '',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Column Definition Option for Pinning\nDESCRIPTION: TypeScript definition for column-level pinning configuration\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-pinning.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nenablePinning?: boolean\n```\n\n----------------------------------------\n\nTITLE: Configuring Sorting Direction in TanStack Table\nDESCRIPTION: Shows how to customize the initial sorting direction for columns in TanStack Table using the sortDescFirst option at both column and table levels.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/sorting.md#2025-04-19_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst columns = [\n  {\n    header: () => 'Name',\n    accessorKey: 'name',\n    sortDescFirst: true, //sort by name in descending order first (default is ascending for string columns)\n  },\n  {\n    header: () => 'Age',\n    accessorKey: 'age',\n    sortDescFirst: false, //sort by age in ascending order first (default is descending for number columns)\n  },\n  //...\n]\n//...\nconst table = useReactTable({\n  columns,\n  data,\n  sortDescFirst: true, //sort by all columns in descending order first (default is ascending for string columns and descending for number columns)\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Column Order in TanStack Table\nDESCRIPTION: Demonstrates how to set up initial column order using the initialState table option. This approach is suitable when you only need to specify a static initial column order.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-ordering.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = useReactTable({\n  //...\n  initialState: {\n    columnOrder: ['columnId1', 'columnId2', 'columnId3'],\n  }\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Faceted Unique Values in TanStack Table\nDESCRIPTION: This snippet shows how to retrieve a list of unique values from the table instance for use in an autocomplete filter. It uses the getGlobalFacetedUniqueValues method.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/global-faceting.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// list of unique values for autocomplete filter\nconst autoCompleteSuggestions =\n Array.from(table.getGlobalFacetedUniqueValues().keys())\n  .sort()\n  .slice(0, 5000);\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Types for Table State in Qwik\nDESCRIPTION: Shows how to import and use TypeScript types for table state properties to ensure correct data structures and enable autocompletion in your IDE.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/qwik/guide/table-state.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQwikTable, type SortingState } from '@tanstack/qwik-table'\n//...\nconst sorting = Qwik.useSignal<SortingState[]>([\n  {\n    id: 'age', //you should get autocomplete for the `id` and `desc` properties\n    desc: true,\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Declaring Table Options for Column Sizing in TypeScript\nDESCRIPTION: Specifies TypeScript types for table options related to column sizing, including enableColumnResizing, columnResizeMode, columnResizeDirection, onColumnSizingChange, and onColumnSizingInfoChange.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-sizing.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nenableColumnResizing?: boolean\n\ncolumnResizeMode?: 'onChange' | 'onEnd'\n\ncolumnResizeDirection?: 'ltr' | 'rtl'\n\nonColumnSizingChange?: OnChangeFn<ColumnSizingState>\n\nonColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n```\n\n----------------------------------------\n\nTITLE: Enabling Manual Grouping for Server-side Operations\nDESCRIPTION: Configures the table for manual grouping when server-side grouping and aggregation are being used, disabling automatic grouping behavior provided by getGroupedRowModel().\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/grouping.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst table = useReactTable({\n  // other options...\n  manualGrouping: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Table with TanStack\nDESCRIPTION: Demonstrates how to initialize a table using the useVueTable hook from @tanstack/vue-table package.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/vue/vue-table.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useVueTable } from '@tanstack/vue-table'\n\nconst table = useVueTable(options)\n// ...render your table\n\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Function Options in TypeScript\nDESCRIPTION: This code defines the type for filter function options in TanStack Table. It can be a string 'auto', a built-in filter function, or a custom filter function for the data.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/global-filtering.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport type FilterFnOption<TData extends AnyData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | FilterFn<TData>\n```\n\n----------------------------------------\n\nTITLE: Installing Table Core Package\nDESCRIPTION: Command to install the core TanStack Table package for custom implementations or unsupported frameworks.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/installation.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tanstack/table-core\n```\n\n----------------------------------------\n\nTITLE: Generating Row IDs in TanStack Table\nDESCRIPTION: Type definition for the getRowId function which derives unique IDs for rows. This is recommended when working with server-side operations to ensure stable row identification.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\ngetRowId?: (\n  originalRow: TData,\n  index: number,\n  parent?: Row<TData>\n) => string\n```\n\n----------------------------------------\n\nTITLE: Controlled Column Filter State Implementation\nDESCRIPTION: Example of implementing controlled column filter state management using React useState.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-filtering.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]) // can set initial column filter state here\n//...\nconst table = useReactTable({\n  columns,\n  data,\n  //...\n  state: {\n    columnFilters,\n  },\n  onColumnFiltersChange: setColumnFilters,\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to State Changes in TanStack Table\nDESCRIPTION: Type definition for the onStateChange callback which is triggered when the table state changes. Used for controlled state management in conjunction with the state option.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nonStateChange: (updater: Updater<TableState>) => void\n```\n\n----------------------------------------\n\nTITLE: Defining aggregatedCell Column Option in TypeScript\nDESCRIPTION: Specifies the aggregatedCell option for column definitions to determine how aggregated cells are rendered. Accepts a Renderable that receives table context objects.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\naggregatedCell?: Renderable<\n  {\n    table: Table<TData>\n    row: Row<TData>\n    column: Column<TData>\n    cell: Cell<TData>\n    getValue: () => any\n    renderValue: () => any\n  }\n>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Row IDs in TypeScript\nDESCRIPTION: Demonstrates how to set custom row IDs using the getRowId option. This is useful for creating more meaningful row identifiers, especially when using row selection features.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/row-selection.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = useReactTable({\n  //...\n  getRowId: row => row.uuid, //use the row's uuid from your database as the row id\n})\n```\n\n----------------------------------------\n\nTITLE: Column API getToggleSortingHandler Method for TanStack Table\nDESCRIPTION: Defines the getToggleSortingHandler method on the column API, which returns a function that can be used to toggle the column's sorting state, useful for attaching click handlers.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\ngetToggleSortingHandler: () => undefined | ((event: unknown) => void)\n```\n\n----------------------------------------\n\nTITLE: Implementing getPrePaginationRowModel Method\nDESCRIPTION: Defines the getPrePaginationRowModel method that returns the row model before any pagination has been applied.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\ngetPrePaginationRowModel: () => RowModel<TData>\n```\n\n----------------------------------------\n\nTITLE: Using Table Meta for Custom Data in TanStack Table\nDESCRIPTION: Definition of the meta option which allows passing arbitrary data to be accessed throughout the table. This interface can be extended via declaration merging to add custom properties.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nmeta?: TableMeta // This interface is extensible via declaration merging. See below!\n```\n\n----------------------------------------\n\nTITLE: Table API getPreSortedRowModel Method for TanStack Table\nDESCRIPTION: Defines the getPreSortedRowModel method on the table API, which returns the row model before any sorting has been applied.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\ngetPreSortedRowModel: () => RowModel<TData>\n```\n\n----------------------------------------\n\nTITLE: Handling Reactive Data Updates\nDESCRIPTION: Examples of correct and incorrect ways to update reactive table data.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/vue/guide/table-state.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst dataRef = ref([\n  { id: 1, name: 'John' },\n  { id: 2, name: 'Jane' }\n])\n\n// This will NOT update the table ❌\ndataRef.value.push({ id: 4, name: 'John' })\n\n// This will update the table ✅\ndataRef.value = [\n  ...dataRef.value,\n  { id: 4, name: 'John' }\n]\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Types for Table State in Angular\nDESCRIPTION: Demonstrates how to leverage TypeScript types from TanStack Table in Angular for better type safety and autocompletion when working with table state values like sorting.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/angular/guide/table-state.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createAngularTable, type SortingState} from '@tanstack/angular-table'\n\nclass TableComponent {\n  readonly sorting = signal<SortingState>([\n    {\n      id: 'age', // you should get autocomplete for the `id` and `desc` properties\n      desc: true,\n    }\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Recursive TypeScript Type for Hierarchical Data\nDESCRIPTION: TypeScript type definition for User data that includes a recursive subRows property for hierarchical data representation.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/data.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype User = {\n  firstName: string\n  lastName: string\n  subRows?: User[] //does not have to be called \"subRows\", can be called anything\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Column Components in Table Options\nDESCRIPTION: Demonstrates how to define custom components for table headers and cells directly in the column definitions, which can then be used with the flexRender directive.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/angular/angular-table.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass AppComponent {\n  columns: ColumnDef<Person>[] = [\n    {\n      id: 'select',\n      header: () => TableHeadSelectionComponent<Person>,\n      cell: () => TableRowSelectionComponent<Person>,\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Rows and Cells with FlexRender\nDESCRIPTION: Shows how to use the FlexRender directive to render table rows and cells in an Angular template. It demonstrates rendering simple strings and HTML content.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/angular/angular-table.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<tbody>\n@for (row of table.getRowModel().rows; track row.id) {\n  <tr>\n    @for (cell of row.getVisibleCells(); track cell.id) {\n      <td>\n        <ng-container\n          *flexRender=\"\n              cell.column.columnDef.cell;\n              props: cell.getContext();\n              let cell\n            \"\n        >\n          <!-- if you want to render a simple string -->\n          {{ cell }}\n          <!-- if you want to render an html string -->\n          <div [innerHTML]=\"cell\"></div>\n        </ng-container>\n      </td>\n    }\n  </tr>\n}\n</tbody>\n```\n\n----------------------------------------\n\nTITLE: Accessing Sub-Rows for Nested Data in TanStack Table\nDESCRIPTION: Type definition for the getSubRows function which is used to access sub-rows for nested row structures. This is required when using hierarchical data.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\ngetSubRows?: (\n  originalRow: TData,\n  index: number\n) => undefined | TData[]\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Table State\nDESCRIPTION: Example of controlling specific table states (filtering, sorting, pagination) for server-side data fetching.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/vue/guide/table-state.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst columnFilters = ref([]) //no default filters\nconst sorting = ref([{\n  id: 'age',\n  desc: true, //sort by age in descending order by default\n}])\nconst pagination = ref({ pageIndex: 0, pageSize: 15 }\n\n//Use our controlled state values to fetch data\nconst tableQuery = useQuery({\n  queryKey: ['users', columnFilters, sorting, pagination],\n  queryFn: () => fetchUsers(columnFilters, sorting, pagination),\n  //...\n})\n\nconst table = useVueTable({\n  columns,\n  data: tableQuery.data,\n  //...\n  state: {\n    get columnFilters() {\n      return columnFilters.value\n    },\n    get sorting() {\n      return sorting.value\n    },\n    get pagination() {\n      return pagination.value\n    }\n  },\n  onColumnFiltersChange: updater => {\n    columnFilters.value =\n      updater instanceof Function\n        ? updater(columnFilters.value)\n        : updater\n  },\n  onSortingChange: updater => {\n    sorting.value =\n      updater instanceof Function\n        ? updater(sorting.value)\n        : updater\n  },\n  onPaginationChange: updater => {\n    pagination.value =\n      updater instanceof Function\n        ? updater(pagination.value)\n        : updater\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Individual Controlled State with Lit\nDESCRIPTION: Shows how to control specific table states (like sorting) in your own state management while letting the table handle other states internally. This uses state and onSortingChange to manage sorting state externally.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/lit/guide/table-state.md#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {html} from \"lit\";\n\n@customElement('my-component')\nclass MyComponent extends LitElement {\n  @state()\n  private _sorting: SortingState = []\n\n  render() {\n    const table = this.tableController.table({\n      columns,\n      data,\n      state: {\n        sorting: this._sorting,\n      },\n      onSortingChange: updaterOrValue => {\n        if (typeof updaterOrValue === 'function') {\n          this._sorting = updaterOrValue(this._sorting)\n        } else {\n          this._sorting = updaterOrValue\n        }\n      },\n      getSortedRowModel: getSortedRowModel(),\n      getCoreRowModel: getCoreRowModel(),\n    })\n\n    return html`...`\n  }\n}\n//...\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Table State in Solid\nDESCRIPTION: Shows how to control the entire table state using onStateChange and setOptions. This approach hoists all table state into parent component state management and properly initializes with defaults.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/solid/guide/table-state.md#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n//create a table instance with default state values\nconst table = createSolidTable({\n  columns,\n  get data() {\n    return data()\n  },\n  //... Note: `state` values are NOT passed in yet\n})\n\n\nconst [state, setState] = createSignal({\n  ...table.initialState, //populate the initial state with all of the default state values from the table instance\n  pagination: {\n    pageIndex: 0,\n    pageSize: 15 //optionally customize the initial pagination state.\n  }\n})\n\n//Use the table.setOptions API to merge our fully controlled state onto the table instance\ntable.setOptions(prev => ({\n  ...prev, //preserve any other options that we have set up above\n  get state() {\n    return state() //our fully controlled state overrides the internal state\n  },\n  onStateChange: setState //any state changes will be pushed up to our own state management\n}))\n```\n\n----------------------------------------\n\nTITLE: Implementing getPaginationRowModel Method\nDESCRIPTION: Defines the getPaginationRowModel method that returns the row model after pagination has been applied.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\ngetPaginationRowModel: () => RowModel<TData>\n```\n\n----------------------------------------\n\nTITLE: Calculating Faceted Unique Values in TypeScript\nDESCRIPTION: Function type definition for computing unique values and their occurrences in a faceted row model. Returns a Map with values and their counts. Requires a valid getFacetedUniqueValues function in options.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-faceting.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ngetFacetedUniqueValues: () => Map<any, number>\n```\n\n----------------------------------------\n\nTITLE: Using TableController in a Lit Component\nDESCRIPTION: Demonstrates how to initialize and use the TableController in a Lit custom element. The controller provides a table API that accepts options and returns a table instance for rendering.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/lit/lit-table.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TableController } from '@tanstack/lit-table'\n\n@customElement('my-table-element')\nclass MyTableElement extends LitElement {\n  private tableController = new TableController<Person>(this)\n\n  protected render() {\n    const table = this.tableController.table(options)\n    // ...render your table\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Row ID Definition in TanStack Table\nDESCRIPTION: Defines the unique identifier property for table rows. The ID is resolved through the options.getRowId option and defaults to the row's index.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/row.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nid: string\n```\n\n----------------------------------------\n\nTITLE: Setting Column Aggregation Function in TanStack Table\nDESCRIPTION: Configures how data should be aggregated for a specific column when rows are grouped, using one of the built-in aggregation functions like 'sum'.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/grouping.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst column = columnHelper.accessor('key', {\n  aggregationFn: 'sum',\n})\n```\n\n----------------------------------------\n\nTITLE: Defining getIsGrouped Row API in TypeScript\nDESCRIPTION: Specifies the getIsGrouped method in the row API which returns whether the row is currently grouped.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsGrouped: () => boolean\n```\n\n----------------------------------------\n\nTITLE: Controlling Pagination Behavior for Expanded Rows\nDESCRIPTION: Configures how expanded rows interact with pagination by setting the paginateExpandedRows option to false, which ensures expanded rows always render on their parent's page.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/expanding.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = useReactTable({\n  // other options...\n  paginateExpandedRows: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Cell ID in TanStack Table\nDESCRIPTION: The unique identifier for a cell across the entire table, providing a way to uniquely reference any cell.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/cell.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nid: string\n```\n\n----------------------------------------\n\nTITLE: Defining Column Definitions Type for TanStack Table\nDESCRIPTION: Type definition for the columns option which specifies the column structure and behavior for the table. It expects an array of ColumnDef objects that define each column.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype columns = ColumnDef<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Implementing getFilteredRowModel in TanStack Table Configuration (TSX)\nDESCRIPTION: Example of how to implement the getFilteredRowModel function in the table configuration using the default implementation provided by the table adapter.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-filtering.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getFilteredRowModel } from '@tanstack/[adapter]-table'\n\n\n  getFilteredRowModel: getFilteredRowModel(),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Reset Page Index Option\nDESCRIPTION: Defines the autoResetPageIndex option that controls whether pagination resets to the first page when page-altering state changes.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nautoResetPageIndex?: boolean\n```\n\n----------------------------------------\n\nTITLE: Accessing Table Context in Custom Components\nDESCRIPTION: Shows how to access the table context within custom components using the injectFlexRenderContext function. This allows components to access cell or header context data.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/angular/angular-table.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  // ...\n})\nclass CustomCellComponent {\n  // context of a cell component\n  readonly context = injectFlexRenderContext<CellContext<TData, TValue>>();\n  // context of a header/footer component\n  readonly context = injectFlexRenderContext<HeaderContext<TData, TValue>>();\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Cell Formatting with Row Data\nDESCRIPTION: Shows how to access both cell value and original row data for custom cell formatting\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-defs.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ncolumnHelper.accessor('firstName', {\n  cell: props => (\n    <span>{`${props.row.original.id} - ${props.getValue()}`}</span>\n  ),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Core Row Model in Table Instance\nDESCRIPTION: Example of importing and implementing the core row model functionality in table creation.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/tables.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCoreRowModel } from '@tanstack/[framework]-table'\n\nconst table = createTable({ columns, data, getCoreRowModel: getCoreRowModel() })\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Server-Side Filtering in React Table\nDESCRIPTION: Setup configuration for manual server-side filtering in TanStack Table by setting manualFiltering to true and skipping the filtered row model.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-filtering.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = useReactTable({\n  data,\n  columns,\n  getCoreRowModel: getCoreRowModel(),\n  // getFilteredRowModel: getFilteredRowModel(), // not needed for manual server-side filtering\n  manualFiltering: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Data Arrays with Type Safety\nDESCRIPTION: Examples of creating data arrays with proper typing and stable references to prevent infinite re-renders in different frameworks.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/data.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n//note: data needs a \"stable\" reference in order to prevent infinite re-renders\nconst data: User[] = []\n//or\nconst [data, setData] = React.useState<User[]>([])\n//or\nconst data = ref<User[]>([]) //vue\n//etc...\n```\n\n----------------------------------------\n\nTITLE: Implementing Column Order Change Handler in TanStack Table\nDESCRIPTION: Defines the onColumnOrderChange callback option that allows for external state management of column ordering. When provided, this function is called whenever column order changes.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-ordering.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nonColumnOrderChange?: OnChangeFn<ColumnOrderState>\n```\n\n----------------------------------------\n\nTITLE: Column Footer Definition\nDESCRIPTION: Specifies the footer content for the column, supporting both string and function definitions with access to table, header, and column props.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/column-def.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfooter?:\n  | string\n  | ((props: {\n      table: Table<TData>\n      header: Header<TData>\n      column: Column<TData>\n    }) => unknown)\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Server-Side Sorting in TanStack Table\nDESCRIPTION: Shows how to configure TanStack Table for manual server-side sorting by disabling the built-in sorting functionality and managing sorting state externally.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/sorting.md#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst [sorting, setSorting] = useState<SortingState>([])\n//...\nconst table = useReactTable({\n  columns,\n  data,\n  getCoreRowModel: getCoreRowModel(),\n  //getSortedRowModel: getSortedRowModel(), //not needed for manual sorting\n  manualSorting: true, //use pre-sorted row model instead of sorted row model\n  state: {\n    sorting,\n  },\n  onSortingChange: setSorting,\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Flat Columns in TSX\nDESCRIPTION: This method returns all columns in the table flattened to a single level, including parent column objects throughout the hierarchy.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\ntype getAllFlatColumns = () => Column<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Configuring Row Count for Pagination Calculation\nDESCRIPTION: Defines the rowCount option that allows specifying the total number of rows, which is used to calculate pageCount internally.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nrowCount?: number\n```\n\n----------------------------------------\n\nTITLE: Column columns Property in TanStack Table\nDESCRIPTION: The columns property contains child columns if this is a group column. It will be an empty array if the column is not a group column.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/column.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ntype columns = ColumnDef<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pagination Change Callback\nDESCRIPTION: Defines the onPaginationChange callback option that allows manual management of pagination state changes.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nonPaginationChange?: OnChangeFn<PaginationState>\n```\n\n----------------------------------------\n\nTITLE: Checking for Placeholder Headers in TanStack Table\nDESCRIPTION: Shows the type definition for the isPlaceholder property, which indicates if a header is a placeholder header.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nisPlaceholder: boolean\n```\n\n----------------------------------------\n\nTITLE: Row Selection State Structure in TanStack Table\nDESCRIPTION: Defines the TypeScript types for row selection state. The state is structured as a record mapping row IDs to boolean values indicating selection status.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-selection.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type RowSelectionState = Record<string, boolean>\n\nexport type RowSelectionTableState = {\n  rowSelection: RowSelectionState\n}\n```\n\n----------------------------------------\n\nTITLE: Extending FilterFns Interface in TypeScript\nDESCRIPTION: This code snippet shows how to extend the FilterFns interface to include a custom filter function. It also demonstrates how to use the custom filter function in a column definition and table options.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/global-filtering.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare module '@tanstack/table-core' {\n  interface FilterFns {\n    myCustomFilter: FilterFn<unknown>\n  }\n}\n\nconst column = columnHelper.data('key', {\n  filterFn: 'myCustomFilter',\n})\n\nconst table = useReactTable({\n  columns: [column],\n  filterFns: {\n    myCustomFilter: (rows, columnIds, filterValue) => {\n      // return the filtered rows\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Initial State for TanStack Table in Qwik\nDESCRIPTION: Shows how to customize the initial state of a table without needing to manage the state yourself. This example demonstrates setting initial column order, visibility, expansion state, and sorting.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/qwik/guide/table-state.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = useQwikTable({\n  columns,\n  data,\n  initialState: {\n    columnOrder: ['age', 'firstName', 'lastName'], //customize the initial column order\n    columnVisibility: {\n      id: false //hide the id column by default\n    },\n    expanded: true, //expand all rows by default\n    sorting: [\n      {\n        id: 'age',\n        desc: true //sort by age in descending order by default\n      }\n    ]\n  },\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Expanded State with React useState in TanStack Table\nDESCRIPTION: Controls the expanded state of rows using React's useState hook and connects it to the table through state and onExpandedChange options.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/expanding.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst [expanded, setExpanded] = useState<ExpandedState>({})\n\nconst table = useReactTable({\n  // other options...\n  state: {\n    expanded: expanded, // must pass expanded state back to the table\n  },\n  onExpandedChange: setExpanded\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Sorting State Structure in TanStack Table\nDESCRIPTION: Defines the TypeScript types used for storing sorting state in TanStack Table, including SortDirection, ColumnSort, SortingState, and SortingTableState.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type SortDirection = 'asc' | 'desc'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Sorting Removal in TanStack Table (JSX)\nDESCRIPTION: This snippet shows how to disable the ability to remove sorting while cycling through sorting states. This ensures that at least one column is always sorted.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/sorting.md#2025-04-19_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = useReactTable({\n  columns,\n  data,\n  enableSortingRemoval: false, // disable the ability to remove sorting on columns (always none -> asc -> desc -> asc)\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Row Selection Implementation\nDESCRIPTION: Changes required to update row selection implementation with new handlers and props.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/migrating.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n- Header: ({ getToggleAllRowsSelectedProps }) => (\n-   <input type=\"checkbox\" {...getToggleAllRowsSelectedProps()} />\n- ),\n- Cell: ({ row }) => (\n-   <input type=\"checkbox\" {...row.getToggleRowSelectedProps()} />\n- ),\n+ header: ({ table }) => (\n+   <Checkbox\n+     checked={table.getIsAllRowsSelected()}\n+     indeterminate={table.getIsSomeRowsSelected()}\n+     onChange={table.getToggleAllRowsSelectedHandler()}\n+   />\n+ ),\n+ cell: ({ row }) => (\n+   <Checkbox\n+     checked={row.getIsSelected()}\n+     disabled={!row.getCanSelect()}\n+     indeterminate={row.getIsSomeSelected()}\n+     onChange={row.getToggleSelectedHandler()}\n+   />\n+ ),\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Global Filter State in React Table\nDESCRIPTION: Shows different approaches to initialize the global filter state, either using React's useState or through the table's initialState option, with a note about not using both simultaneously.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/global-filtering.md#2025-04-19_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst [globalFilter, setGlobalFilter] = useState(\"search term\") //recommended to initialize globalFilter state here\n\nconst table = useReactTable({\n  // other options...\n  initialState: {\n    globalFilter: 'search term', // if not managing globalFilter state, set initial state here\n  }\n  state: {\n    globalFilter, // pass our managed globalFilter state to the table\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Rows with React\nDESCRIPTION: Shows how to map and render table rows using the getRowModel() API in a React component.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/rows.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<tbody>\n  {table.getRowModel().rows.map(row => (\n    <tr key={row.id}>\n     {/* ... */}\n    </tr>\n  ))}\n</tbody>\n```\n\n----------------------------------------\n\nTITLE: Column API getSortingFn Method for TanStack Table\nDESCRIPTION: Defines the getSortingFn method on the column API, which returns the resolved sorting function to be used for this column.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\ngetSortingFn: () => SortingFn<TData>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Faceted Min and Max Values in TanStack Table (TSX)\nDESCRIPTION: This API returns an array containing the minimum and maximum values for the global filter. It's useful for determining the range of values in the filtered data, which can be applied in range filters or data visualization.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/global-faceting.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ngetGlobalFacetedMinMaxValues: () => [number, number]\n```\n\n----------------------------------------\n\nTITLE: Initializing Grouped Row Model in TanStack Table with React\nDESCRIPTION: Sets up the basic grouped row model in a React component using TanStack table's useReactTable hook. This is the foundation required to enable grouping functionality in the table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/grouping.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getGroupedRowModel } from '@tanstack/react-table'\n\nconst table = useReactTable({\n  // other options...\n  getGroupedRowModel: getGroupedRowModel(),\n})\n```\n\n----------------------------------------\n\nTITLE: Checking if Column is Last in TanStack Table\nDESCRIPTION: Defines the getIsLastColumn method that determines if a column is the last visible column. An optional position parameter allows checking within a specific pinned section.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-ordering.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsLastColumn: (position?: ColumnPinningPosition) => boolean\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Faceted Min/Max Values in TanStack Table\nDESCRIPTION: This snippet demonstrates how to get the minimum and maximum values from the table instance for use in a range filter. It uses the getGlobalFacetedMinMaxValues method.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/global-faceting.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// tuple of min and max values for range filter\nconst [min, max] = table.getGlobalFacetedMinMaxValues() ?? [0, 1];\n```\n\n----------------------------------------\n\nTITLE: Getting All Footer Groups in TanStack Table\nDESCRIPTION: Shows the type definition for the getFooterGroups method, which returns all footer groups for the table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\ntype getFooterGroups = () => HeaderGroup<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Declaring Table API Methods for Expansion in TypeScript\nDESCRIPTION: Defines TypeScript interfaces for various table API methods related to expansion, including setExpanded, toggleAllRowsExpanded, resetExpanded, getCanSomeRowsExpand, getToggleAllRowsExpandedHandler, getIsSomeRowsExpanded, getIsAllRowsExpanded, getExpandedDepth, getExpandedRowModel, and getPreExpandedRowModel.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/expanding.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nsetExpanded: (updater: Updater<ExpandedState>) => void\n```\n\nLANGUAGE: tsx\nCODE:\n```\ntoggleAllRowsExpanded: (expanded?: boolean) => void\n```\n\nLANGUAGE: tsx\nCODE:\n```\nresetExpanded: (defaultState?: boolean) => void\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetCanSomeRowsExpand: () => boolean\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetToggleAllRowsExpandedHandler: () => (event: unknown) => void\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsSomeRowsExpanded: () => boolean\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsAllRowsExpanded: () => boolean\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetExpandedDepth: () => number\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetExpandedRowModel: () => RowModel<TData>\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetPreExpandedRowModel: () => RowModel<TData>\n```\n\n----------------------------------------\n\nTITLE: Column Management APIs\nDESCRIPTION: APIs for managing and accessing column pinning status and operations\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-pinning.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ngetCanPin: () => boolean\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetPinnedIndex: () => number\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsPinned: () => ColumnPinningPosition\n```\n\nLANGUAGE: tsx\nCODE:\n```\npin: (position: ColumnPinningPosition) => void\n```\n\n----------------------------------------\n\nTITLE: Defining User Data Structure in JSON\nDESCRIPTION: Example JSON array representing a list of users with properties like firstName, lastName, age, visits, progress, and status.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/data.md#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"firstName\": \"Tanner\",\n    \"lastName\": \"Linsley\",\n    \"age\": 33,\n    \"visits\": 100,\n    \"progress\": 50,\n    \"status\": \"Married\"\n  },\n  {\n    \"firstName\": \"Kevin\",\n    \"lastName\": \"Vandy\",\n    \"age\": 27,\n    \"visits\": 200,\n    \"progress\": 100,\n    \"status\": \"Single\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Column Accessor Key Definition\nDESCRIPTION: Specifies the key to access data from the row object for the column.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/column-def.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\naccessorKey?: string & typeof TData\n```\n\n----------------------------------------\n\nTITLE: Accessing Sorting State from Table Instance\nDESCRIPTION: Demonstrates how to access the current sorting state from a TanStack Table instance using the getState() method.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/sorting.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst table = useReactTable({\n  columns,\n  data,\n  //...\n})\n\nconsole.log(table.getState().sorting) // access the sorting state from the table instance\n```\n\n----------------------------------------\n\nTITLE: Defining Pagination State Structure in TypeScript\nDESCRIPTION: Defines the TypeScript types for pagination state including pageIndex and pageSize properties, along with table state interfaces.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationInitialTableState = {\n  pagination?: Partial<PaginationState>\n}\n```\n\n----------------------------------------\n\nTITLE: Table Option getSortedRowModel for TanStack Table\nDESCRIPTION: Defines the getSortedRowModel table option, which provides a function to retrieve the sorted row model. Required for client-side sorting.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\ngetSortedRowModel?: (table: Table<TData>) => () => RowModel<TData>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Row IDs\nDESCRIPTION: Shows how to override default row IDs with custom identifiers using the getRowId table option.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/rows.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst table = useReactTable({\n  columns,\n  data,\n  getRowId: originalRow => originalRow.uuid, //override the row.id with the uuid from the original row's data\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Single Column by ID in TanStack Table\nDESCRIPTION: Shows how to retrieve a specific column using the table.getColumn API by providing the column ID.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/columns.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst column = table.getColumn('firstName');\n```\n\n----------------------------------------\n\nTITLE: Applying Fuzzy Filtering to Specific Columns in TanStack Table\nDESCRIPTION: Shows how to apply the custom fuzzy filter to specific columns in a TanStack Table. The example creates a column definition that combines firstName and lastName fields and applies fuzzy filtering to it.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/fuzzy-filtering.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst column = [\n  {\n    accessorFn: row => `${row.firstName} ${row.lastName}`,\n    id: 'fullName',\n    header: 'Full Name',\n    cell: info => info.getValue(),\n    filterFn: 'fuzzy', //using our custom fuzzy filter function\n  },\n  // other columns...\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Core Row Model Function in TanStack Table\nDESCRIPTION: Type definition for the getCoreRowModel function which computes and returns the core row model for the table. This is a required option for all tables.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\ngetCoreRowModel: (table: Table<TData>) => () => RowModel<TData>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Initial State with Lit\nDESCRIPTION: Demonstrates how to customize the initial default values for table state without requiring manual state management, using the initialState option of the table instance.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/lit/guide/table-state.md#2025-04-19_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nrender() {\n  const table = this.tableController.table({\n    columns,\n    data,\n    initialState: {\n      columnOrder: ['age', 'firstName', 'lastName'], //customize the initial column order\n      columnVisibility: {\n        id: false //hide the id column by default\n      },\n      expanded: true, //expand all rows by default\n      sorting: [\n        {\n          id: 'age',\n          desc: true //sort by age in descending order by default\n        }\n      ]\n    },\n  })\n\n  return html`...`;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining getFilteredRowModel Method in TanStack Table API (TSX)\nDESCRIPTION: This method returns the row model for the table after column filtering has been applied.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-filtering.md#2025-04-19_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\ngetFilteredRowModel: () => RowModel<TData>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type for Nested User Data\nDESCRIPTION: TypeScript type definition for User data with nested objects, matching the structure of the nested JSON data.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/data.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype User = {\n  name: {\n    first: string\n    last: string\n  }\n  info: {\n    age: number\n    visits: number\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Column Pinning State Types in TypeScript\nDESCRIPTION: TypeScript type definitions for column pinning state management, including position types and state structure\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-pinning.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n```\n\n----------------------------------------\n\nTITLE: Footer Group Management APIs\nDESCRIPTION: APIs for accessing different sections of pinned footer groups\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-pinning.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ngetLeftFooterGroups: () => HeaderGroup<TData>[]\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetCenterFooterGroups: () => HeaderGroup<TData>[]\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetRightFooterGroups: () => HeaderGroup<TData>[]\n```\n\n----------------------------------------\n\nTITLE: SortingFn Type Definition for TanStack Table\nDESCRIPTION: Defines the type signature for sorting functions in TanStack Table. These functions compare two rows based on a column ID and return a numeric value indicating their relative order.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport type SortingFn<TData extends AnyData> = {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n```\n\n----------------------------------------\n\nTITLE: Column Definition sortingFn Option for TanStack Table\nDESCRIPTION: Defines the sortingFn option for column definitions, which specifies the sorting function to use with a column. Can be a string reference or a custom function.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nsortingFn?: SortingFn | keyof SortingFns | keyof BuiltInSortingFns\n```\n\n----------------------------------------\n\nTITLE: Column id Property in TanStack Table\nDESCRIPTION: The id property is a unique identifier for the column, resolved in order of priority from manual id property, accessor key, or header string.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/column.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nid: string\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structure with Nested Children for Expandable Rows\nDESCRIPTION: Example data structure with nested children that can be used as sub-rows in an expandable table. The Person type includes an optional children array containing more Person objects.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/expanding.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = {\n  id: number\n  name: string\n  age: number\n  children?: Person[] | undefined\n}\n\nconst data: Person[] =  [\n  { id: 1, \n  name: 'John', \n  age: 30, \n  children: [\n      { id: 2, name: 'Jane', age: 5 },\n      { id: 5, name: 'Jim', age: 10 }\n    ] \n  },\n  { id: 3,\n   name: 'Doe', \n   age: 40, \n    children: [\n      { id: 4, name: 'Alice', age: 10 }\n    ] \n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Recursive JSON Data Structure with Sub-Rows\nDESCRIPTION: Example of a JSON data structure that includes recursive subRows for hierarchical data representation.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/data.md#2025-04-19_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"firstName\": \"Tanner\",\n    \"lastName\": \"Linsley\",\n    \"subRows\": [\n      {\n        \"firstName\": \"Kevin\",\n        \"lastName\": \"Vandy\",\n      },\n      {\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"subRows\": [\n          //...\n        ]\n      }\n    ]\n  },\n  {\n    \"firstName\": \"Jane\",\n    \"lastName\": \"Doe\",\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Column Sizing State Types in TypeScript\nDESCRIPTION: Defines the structure of column sizing state, including ColumnSizingTableState, ColumnSizing, and ColumnSizingInfoState types.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-sizing.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type ColumnSizingTableState = {\n  columnSizing: ColumnSizing\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizing = Record<string, number>\n\nexport type ColumnSizingInfoState = {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Column Resize Direction for RTL Layouts\nDESCRIPTION: Shows how to configure column resize direction for right-to-left layouts using the columnResizeDirection property.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-sizing.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst table = useReactTable({\n  //...\n  columnResizeDirection: 'rtl', //change column resize direction to \"rtl\" for certain locales\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Undefined Values in Sorting (JSX)\nDESCRIPTION: This code shows how to customize the sorting behavior for undefined values in a column. The 'sortUndefined' option can be set to 'first', 'last', false, -1, or 1 to control how undefined values are sorted.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/sorting.md#2025-04-19_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst columns = [\n  {\n    header: () => 'Rank',\n    accessorKey: 'rank',\n    sortUndefined: -1, // 'first' | 'last' | 1 | -1 | false\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Table API - Row Model Selection Methods\nDESCRIPTION: Methods to access different row models filtered by selection status. These provide access to selected rows at different stages of filtering, grouping, etc.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-selection.md#2025-04-19_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\ngetPreSelectedRowModel: () => RowModel<TData>\n\ngetSelectedRowModel: () => RowModel<TData>\n\ngetFilteredSelectedRowModel: () => RowModel<TData>\n\ngetGroupedSelectedRowModel: () => RowModel<TData>\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Pagination State in React Table\nDESCRIPTION: Example of setting initial pagination values using the initialState option. This approach is useful when you don't need to manage pagination state in your component's scope but want to customize the initial values.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/pagination.md#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = useReactTable({\n  columns,\n  data,\n  getCoreRowModel: getCoreRowModel(),\n  getPaginationRowModel: getPaginationRowModel(),\n  initialState: {\n    pagination: {\n      pageIndex: 2, //custom initial page index\n      pageSize: 25, //custom default page size\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining getAggregationFn Column API in TypeScript\nDESCRIPTION: Specifies the getAggregationFn method in the column API which returns the aggregation function for the column.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\ngetAggregationFn: () => AggregationFn<TData> | undefined\n```\n\n----------------------------------------\n\nTITLE: Column API getCanMultiSort Method for TanStack Table\nDESCRIPTION: Defines the getCanMultiSort method on the column API, which returns whether this column can be multi-sorted.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\ngetCanMultiSort: () => boolean\n```\n\n----------------------------------------\n\nTITLE: Accessing Table State in Angular with TanStack Table\nDESCRIPTION: Shows how to access the internal state of a TanStack table instance in Angular using the getState() API. This enables reading the entire state object or specific properties like rowSelection.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/angular/guide/table-state.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntable = createAngularTable(() => ({\n  columns: this.columns,\n  data: this.data(),\n  //...\n}))\n\nsomeHandler() {\n  console.log(this.table.getState()) //access the entire internal state\n  console.log(this.table.getState().rowSelection) //access just the row selection state\n}\n```\n\n----------------------------------------\n\nTITLE: Deep Nested JSON Data Structure\nDESCRIPTION: Example of a more complex JSON data structure with nested objects containing user information including nested name and info objects.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/data.md#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": {\n      \"first\": \"Tanner\",\n      \"last\": \"Linsley\"\n    },\n    \"info\": {\n      \"age\": 33,\n      \"visits\": 100,\n    }\n  },\n  {\n    \"name\": {\n      \"first\": \"Kevin\",\n      \"last\": \"Vandy\"\n    },\n    \"info\": {\n      \"age\": 27,\n      \"visits\": 200,\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Table API - getToggleAllRowsSelectedHandler\nDESCRIPTION: Returns a handler function that toggles selection for all rows in the table. Useful for implementing select-all functionality in UI components.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-selection.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ngetToggleAllRowsSelectedHandler: () => (event: unknown) => void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flat Headers in TSX\nDESCRIPTION: This method returns a flattened array of Header objects for the table, including parent headers.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\ntype getFlatHeaders = () => Header<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Implementing setPagination Method\nDESCRIPTION: Defines the setPagination method that allows setting or updating the pagination state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nsetPagination: (updater: Updater<PaginationState>) => void\n```\n\n----------------------------------------\n\nTITLE: Column Definition invertSorting Option for TanStack Table\nDESCRIPTION: Defines the invertSorting option for column definitions, which inverts the sorting order for a column - useful for values where lower numbers are better (like rankings).\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\ninvertSorting?: boolean\n```\n\n----------------------------------------\n\nTITLE: Using State Change Callbacks\nDESCRIPTION: Example of implementing state change callbacks with proper type checking for updater functions.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/vue/guide/table-state.md#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst sorting = ref([])\nconst setSorting = updater => {\n  sorting.value = updater instanceof Function ? updater(sorting.value) : updater\n}\n//...\nconst table = useVueTable({\n  columns,\n  data,\n  //...\n  state: {\n    get sorting() {\n      return sorting //required because we are using `onSortingChange`\n    },\n  },\n  onSortingChange: setSorting, //makes the `state.sorting` controlled\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Auto-Reset Behavior in TanStack Table\nDESCRIPTION: Definition of the autoResetAll option which can override all individual auto-reset feature options. This controls whether the table automatically resets various states when dependencies change.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nautoResetAll?: boolean\n```\n\n----------------------------------------\n\nTITLE: Defining resetColumnFilters Method in TanStack Table API (TSX)\nDESCRIPTION: This method resets the columnFilters state to initialState.columnFilters, or to an empty array if true is passed as an argument.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-filtering.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nresetColumnFilters: (defaultState?: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with TanStack Table Core in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the createTable function from @tanstack/table-core and use it to create a table instance. The createTable function takes an options object as a parameter and returns a table object.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/vanilla.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTable } from '@tanstack/table-core'\n\nconst table = createTable(options)\n```\n\n----------------------------------------\n\nTITLE: Table API - getToggleAllPageRowsSelectedHandler\nDESCRIPTION: Returns a handler function that toggles selection for all rows on the current page. Useful for paginated tables where you only want to select visible rows.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-selection.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ngetToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n```\n\n----------------------------------------\n\nTITLE: Accessing Internal Table State in Qwik\nDESCRIPTION: Demonstrates how to access the internal state of a TanStack table instance using the getState() method, either as a whole or by accessing specific state properties.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/qwik/guide/table-state.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = useQwikTable({\n  columns,\n  data,\n  //...\n})\n\nconsole.log(table.getState()) //access the entire internal state\nconsole.log(table.getState().rowSelection) //access just the row selection state\n```\n\n----------------------------------------\n\nTITLE: Defining GroupingState Interface in TypeScript\nDESCRIPTION: Defines the state structure for grouping in TanStack Table. GroupingState is an array of strings (column IDs) and GroupingTableState contains the grouping property.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type GroupingState = string[]\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Column Resizing for Specific Columns\nDESCRIPTION: Shows how to disable column resizing for a specific column using the enableResizing property in the column definition.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-sizing.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns = [\n  {\n    accessorKey: 'id',\n    enableResizing: false, //disable resizing for just this column\n    size: 200, //starting column size\n  },\n  //...\n]\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Type for User Data\nDESCRIPTION: TypeScript type definition for User data that matches the structure of the JSON data array. This type will be used as TData generic throughout TanStack Table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/data.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//TData\ntype User = {\n  firstName: string\n  lastName: string\n  age: number\n  visits: number\n  progress: number\n  status: string\n}\n```\n\n----------------------------------------\n\nTITLE: Using onStateChange with Corresponding State in Angular Tables\nDESCRIPTION: Shows how to correctly implement controlled state in Angular by ensuring that each onStateChange callback has a corresponding state value in the state option. This prevents state from becoming 'frozen' at its initial value.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/angular/guide/table-state.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass TableComponent {\n  sorting = signal<SortingState>([])\n\n  table = createAngularTable(() => ({\n    columns: this.columns,\n    data: this.data(),\n    //...\n    state: {\n      sorting: this.sorting(), // required because we are using `onSortingChange`\n    },\n    onSortingChange: updater => { // makes the `state.sorting` controlled\n      updater instanceof Function\n        ? this.sorting.update(updater)\n        : this.sorting.set(updater)\n    }\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Column Sizing Configuration in TanStack Table\nDESCRIPTION: Shows the default column sizing configuration which defines the starting size, minimum size, and maximum size for all columns in TanStack Table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-sizing.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table Instance with Solid.js Adapter\nDESCRIPTION: Demonstrates how to initialize a table instance using the createSolidTable function from @tanstack/solid-table. The function accepts an options object that configures the table's behavior and returns a table instance that can be used for rendering.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/solid/solid-table.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createSolidTable } from '@tanstack/solid-table'\n\nfunction App() {\n  const table = createSolidTable(options)\n\n  // ...render your table\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Table State with Lit\nDESCRIPTION: Shows how to access the internal state of a TanStack Table using the table.getState() API. This allows you to read any part of the state without needing to set up additional state management.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/lit/guide/table-state.md#2025-04-19_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nprivate tableController = new TableController<Person>(this);\n\nrender() {\n  const table = this.tableController.table({\n    columns,\n    data,\n    ...\n  })\n\n  console.log(table.getState()) //access the entire internal state\n  console.log(table.getState().rowSelection) //access just the row selection state\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Table API - getIsAllPageRowsSelected\nDESCRIPTION: Returns a boolean indicating whether all rows on the current page are selected. Useful for paginated tables with page-specific selection controls.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-selection.md#2025-04-19_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsAllPageRowsSelected: () => boolean\n```\n\n----------------------------------------\n\nTITLE: Column API getIsSorted Method for TanStack Table\nDESCRIPTION: Defines the getIsSorted method on the column API, which returns whether this column is sorted and in which direction.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsSorted: () => false | SortDirection\n```\n\n----------------------------------------\n\nTITLE: Row API - Row Selection State Methods\nDESCRIPTION: Methods to query the selection state of individual rows, including hierarchical selection status for parent-child row relationships.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-selection.md#2025-04-19_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsSelected: () => boolean\n\ngetIsSomeSelected: () => boolean\n\ngetIsAllSubRowsSelected: () => boolean\n```\n\n----------------------------------------\n\nTITLE: Column getFlatColumns Method in TanStack Table\nDESCRIPTION: The getFlatColumns method returns a flattened array containing this column and all of its child/grand-child columns.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/column.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ntype getFlatColumns = () => Column<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Rendering Cells with flexRender in React\nDESCRIPTION: Example of using flexRender utility to properly render cells with JSX content and handle cell rendering callbacks.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/cells.md#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { flexRender } from '@tanstack/react-table'\n\nconst columns = [\n  {\n    accessorKey: 'fullName',\n    cell: ({ cell, row }) => {\n      return <div><strong>{row.original.firstName}</strong> {row.original.lastName}</div>\n    }\n    //...\n  }\n]\n//...\n<tr>\n  {row.getVisibleCells().map(cell => {\n    return <td key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</td>\n  })}\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Configuring Leaf Row Filtering\nDESCRIPTION: Example of enabling filtering from leaf rows up and configuring expanded row filtering behavior\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-filtering.md#2025-04-19_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = useReactTable({\n  columns,\n  data,\n  getCoreRowModel: getCoreRowModel(),\n  getFilteredRowModel: getFilteredRowModel(),\n  getExpandedRowModel: getExpandedRowModel(),\n  filterFromLeafRows: true, // filter and search through sub-rows\n})\n```\n\n----------------------------------------\n\nTITLE: Row API - Row Selection Capability Methods\nDESCRIPTION: Methods to determine if a row can be selected, multi-selected, or have its sub-rows automatically selected. These reflect the configuration options at the row level.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-selection.md#2025-04-19_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\ngetCanSelect: () => boolean\n\ngetCanMultiSelect: () => boolean\n\ngetCanSelectSubRows: () => boolean\n```\n\n----------------------------------------\n\nTITLE: Stable Reference Implementation with useMemo and useState\nDESCRIPTION: Shows correct implementation using React's useMemo and useState hooks to create stable references for columns and data, preventing infinite rendering loops.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/faq.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst columns = [\n  // ...\n];\n\nconst data = [\n  // ...\n];\n\nexport default function MyComponent() {\n  const columns = useMemo(() => [\n    // ...\n  ], []);\n\n  const [data, setData] = useState(() => [\n    // ...\n  ]);\n\n  const table = useReactTable({\n    columns,\n    data,\n  });\n\n  return <table>...</table>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ExpandedState Type in TanStack Table\nDESCRIPTION: Defines the ExpandedState type which can be either true (all rows expanded) or a record mapping row IDs to boolean values indicating expansion state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/expanding.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExpandedState = true | Record<string, boolean>\n```\n\n----------------------------------------\n\nTITLE: Table API - resetRowSelection\nDESCRIPTION: Resets row selection state to initial values or clears all selections. Optionally accepts a boolean parameter to force reset to an empty selection state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-selection.md#2025-04-19_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nresetRowSelection: (defaultState?: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Getting Column Index in TanStack Table\nDESCRIPTION: Defines the getIndex method for columns that returns the column's position within visible columns. An optional position parameter allows getting the index within a specific pinned section.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-ordering.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ngetIndex: (position?: ColumnPinningPosition) => number\n```\n\n----------------------------------------\n\nTITLE: Table Option isMultiSortEvent for TanStack Table\nDESCRIPTION: Defines the isMultiSortEvent table option, which provides a custom function to determine if an event should trigger a multi-sort operation.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nisMultiSortEvent?: (e: unknown) => boolean\n```\n\n----------------------------------------\n\nTITLE: Defining setGrouping Table API in TypeScript\nDESCRIPTION: Specifies the setGrouping method in the table API which sets or updates the grouping state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nsetGrouping: (updater: Updater<GroupingState>) => void\n```\n\n----------------------------------------\n\nTITLE: Defining getGroupingValue Column Option in TypeScript\nDESCRIPTION: Specifies the getGroupingValue option for column definitions to provide a custom value for grouping rows on a column. If not specified, the accessor value is used.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ngetGroupingValue?: (row: TData) => any\n```\n\n----------------------------------------\n\nTITLE: Column Group Definition\nDESCRIPTION: Specifies child column definitions for grouped columns.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/column-def.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ncolumns?: ColumnDef<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Core Row Model in TSX\nDESCRIPTION: This method returns the core row model before any processing has been applied. It provides the rows, flatRows, and rowsById.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\ngetCoreRowModel: () => {\n  rows: Row<TData>[],\n  flatRows: Row<TData>[],\n  rowsById: Record<string, Row<TData>>,\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Faceted Row Model in TanStack Table (TSX)\nDESCRIPTION: This API returns the faceted row model for the global filter. It is used to get the filtered and faceted data based on the global filter applied to the table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/global-faceting.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ngetGlobalFacetedRowModel: () => RowModel<TData>\n```\n\n----------------------------------------\n\nTITLE: Table API Methods - Column Visibility Management\nDESCRIPTION: Collection of method signatures for managing visible columns, including getting visible columns and updating visibility state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-visibility.md#2025-04-19_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\ngetVisibleFlatColumns: () => Column<TData>[]\n\ngetVisibleLeafColumns: () => Column<TData>[]\n\ngetLeftVisibleLeafColumns: () => Column<TData>[]\n\ngetRightVisibleLeafColumns: () => Column<TData>[]\n\ngetCenterVisibleLeafColumns: () => Column<TData>[]\n\nsetColumnVisibility: (updater: Updater<VisibilityState>) => void\n\nresetColumnVisibility: (defaultState?: boolean) => void\n\ntoggleAllColumnsVisible: (value?: boolean) => void\n\ngetIsAllColumnsVisible: () => boolean\n\ngetIsSomeColumnsVisible: () => boolean\n\ngetToggleAllColumnsVisibilityHandler: () => ((event: unknown) => void)\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Pagination Option in TanStack Table\nDESCRIPTION: Defines the manualPagination option that enables manual pagination mode, requiring manual row pagination before passing to the table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nmanualPagination?: boolean\n```\n\n----------------------------------------\n\nTITLE: Table API - toggleAllPageRowsSelected\nDESCRIPTION: Method to select or deselect all rows on the current page based on the provided boolean value. Useful for page-specific selection actions.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-selection.md#2025-04-19_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\ntoggleAllPageRowsSelected: (value: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Handling State Change Callbacks\nDESCRIPTION: Shows different approaches to handling state change callbacks with additional logic.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/react/guide/table-state.md#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst [sorting, setSorting] = React.useState([])\nconst [pagination, setPagination] = React.useState({ pageIndex: 0, pageSize: 10 })\n\nconst table = useReactTable({\n  columns,\n  data,\n  //...\n  state: {\n    pagination,\n    sorting,\n  }\n  //syntax 1\n  onPaginationChange: (updater) => {\n    setPagination(old => {\n      const newPaginationValue = updater instanceof Function ? updater(old) : updater\n      //do something with the new pagination value\n      //...\n      return newPaginationValue\n    })\n  },\n  //syntax 2\n  onSortingChange: (updater) => {\n    const newSortingValue = updater instanceof Function ? updater(sorting) : updater\n    //do something with the new sorting value\n    //...\n    setSorting(updater) //normal state update\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced State Change Callback Handling in Solid\nDESCRIPTION: Shows how to handle both value and function updaters in state change callbacks. This allows adding custom logic while properly handling both update patterns that TanStack Table supports.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/solid/guide/table-state.md#2025-04-19_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst [sorting, setSorting] = createSignal([])\nconst [pagination, setPagination] = createSignal({ pageIndex: 0, pageSize: 10 })\n\nconst table = createSolidTable({\n  get columns() {\n    return columns()\n  },\n  get data() {\n    return data()\n  },\n  //...\n  state: {\n    get pagination() {\n      return pagination()\n    },\n    get sorting() {\n      return sorting()\n    },\n  }\n  //syntax 1\n  onPaginationChange: (updater) => {\n    setPagination(old => {\n      const newPaginationValue = updater instanceof Function ? updater(old) : updater\n      //do something with the new pagination value\n      //...\n      return newPaginationValue\n    })\n  },\n  //syntax 2\n  onSortingChange: (updater) => {\n    const newSortingValue = updater instanceof Function ? updater(sorting) : updater\n    //do something with the new sorting value\n    //...\n    setSorting(updater) //normal state update\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Center Header Groups in TanStack Table\nDESCRIPTION: Shows the type definition for the getCenterHeaderGroups method, which returns header groups for non-pinned columns when using column pinning.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\ntype getCenterHeaderGroups = () => HeaderGroup<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Get All Cells Method Definition\nDESCRIPTION: Method to retrieve all cells associated with the row.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/row.md#2025-04-19_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\ntype getAllCells = () => Cell<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto Reset Page Index in React Table\nDESCRIPTION: Example of disabling the automatic reset of pageIndex when data changes. By default, pageIndex resets to 0 when page-altering state changes occur, but this behavior can be disabled with the autoResetPageIndex option.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/pagination.md#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = useReactTable({\n  columns,\n  data,\n  getCoreRowModel: getCoreRowModel(),\n  getPaginationRowModel: getPaginationRowModel(),\n  autoResetPageIndex: false, //turn off auto reset of pageIndex\n});\n```\n\n----------------------------------------\n\nTITLE: Table Option sortDescFirst for TanStack Table\nDESCRIPTION: Defines the sortDescFirst table option, which when true causes all sorts to default to descending as their first toggle state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nsortDescFirst?: boolean\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Initial State in TanStack Table for Svelte\nDESCRIPTION: Shows how to customize the initial state of a table without managing state externally. This example configures initial column order, visibility, expansion state, and sorting through the initialState option.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/svelte/guide/table-state.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst options = writable({\n  columns,\n  data,\n  initialState: {\n    columnOrder: ['age', 'firstName', 'lastName'], //customize the initial column order\n    columnVisibility: {\n      id: false //hide the id column by default\n    },\n    expanded: true, //expand all rows by default\n    sorting: [\n      {\n        id: 'age',\n        desc: true //sort by age in descending order by default\n      }\n    ]\n  },\n  //...\n})\n\nconst table = createSvelteTable(options)\n```\n\n----------------------------------------\n\nTITLE: State Change Callbacks with Required State Value in Solid\nDESCRIPTION: Demonstrates the requirement to provide both state values and onChange handlers when controlling table state. Without providing the corresponding state value, the controlled state becomes frozen.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/solid/guide/table-state.md#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst [sorting, setSorting] = createSignal([])\n//...\nconst table = createSolidTable({\n  columns,\n  data,\n  //...\n  state: {\n    get sorting() {\n      return sorting() //required because we are using `onSortingChange`\n    },\n  },\n  onSortingChange: setSorting, //makes the `state.sorting` controlled\n})\n```\n\n----------------------------------------\n\nTITLE: Checking if Column is First in TanStack Table\nDESCRIPTION: Defines the getIsFirstColumn method that determines if a column is the first visible column. An optional position parameter allows checking within a specific pinned section.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-ordering.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsFirstColumn: (position?: ColumnPinningPosition) => boolean\n```\n\n----------------------------------------\n\nTITLE: Column API Method - getCanHide\nDESCRIPTION: Method signature for checking if a column can be hidden.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-visibility.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ngetCanHide: () => boolean\n```\n\n----------------------------------------\n\nTITLE: Defining aggregationFn Column API in TypeScript\nDESCRIPTION: Specifies the aggregationFn property in the column API, representing the resolved aggregation function for the column.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\naggregationFn?: AggregationFnOption<TData>\n```\n\n----------------------------------------\n\nTITLE: Defining getGroupingValue Row API in TypeScript\nDESCRIPTION: Specifies the getGroupingValue method in the row API which returns the grouping value for any row and column, including leaf rows.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\ngetGroupingValue: (columnId: string) => unknown\n```\n\n----------------------------------------\n\nTITLE: Defining getGroupedRowModel Table Option in TypeScript\nDESCRIPTION: Specifies the getGroupedRowModel table option which returns a function to generate the row model after grouping has been applied.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\ngetGroupedRowModel?: (table: Table<TData>) => () => RowModel<TData>\n```\n\n----------------------------------------\n\nTITLE: Table API - setRowSelection\nDESCRIPTION: Updates the row selection state using an updater function. This method allows for programmatic control of row selection state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-selection.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nsetRowSelection: (updater: Updater<RowSelectionState>) => void\n```\n\n----------------------------------------\n\nTITLE: Column API Method - getIsVisible\nDESCRIPTION: Method signature for checking if a column is currently visible.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-visibility.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsVisible: () => boolean\n```\n\n----------------------------------------\n\nTITLE: Setting Table State in TanStack Table API\nDESCRIPTION: Type definition for the setState method which updates the table state. It accepts either a direct state object or an updater function.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nsetState: (updater: Updater<TableState>) => void\n```\n\n----------------------------------------\n\nTITLE: Defining getGroupedRowModel Table API in TypeScript\nDESCRIPTION: Specifies the getGroupedRowModel method in the table API which returns the row model after grouping has been applied.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\ngetGroupedRowModel: () => RowModel<TData>\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript State Types with TanStack Table in Lit\nDESCRIPTION: Demonstrates how to use the TypeScript types provided by TanStack Table to ensure correct data structures and get proper autocompletion for state properties.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/lit/guide/table-state.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TableController, type SortingState } from '@tanstack/lit-table'\n//...\n@state()\nprivate _sorting: SortingState = [\n  {\n    id: 'age', //you should get autocomplete for the `id` and `desc` properties\n    desc: true,\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Leaf Headers in TanStack Table\nDESCRIPTION: Shows the type definition for the getLeafHeaders method, which returns all leaf headers nested under the current header.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\ntype getLeafHeaders = () => Header<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Defining Table API Methods for Column Sizing in TypeScript\nDESCRIPTION: Declares TypeScript function signatures for table API methods related to column sizing, including setColumnSizing, setColumnSizingInfo, resetColumnSizing, resetHeaderSizeInfo, getTotalSize, getLeftTotalSize, getCenterTotalSize, and getRightTotalSize.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-sizing.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nsetColumnSizing: (updater: Updater<ColumnSizingState>) => void\n\nsetColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n\nresetColumnSizing: (defaultState?: boolean) => void\n\nresetHeaderSizeInfo: (defaultState?: boolean) => void\n\ngetTotalSize: () => number\n\ngetLeftTotalSize: () => number\n\ngetCenterTotalSize: () => number\n\ngetRightTotalSize: () => number\n```\n\n----------------------------------------\n\nTITLE: Rendering Cell Value with Fallback in TanStack Table\nDESCRIPTION: A method that renders the value for a cell similar to getValue, but will return the renderFallbackValue if no value is found, providing a safe way to display cell content.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/cell.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nrenderValue: () => any\n```\n\n----------------------------------------\n\nTITLE: Accessing Table Options in TanStack Table API\nDESCRIPTION: Type definition for the options property which provides read-only access to the table's current options. This is generally used internally or by adapters.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\noptions: TableOptions<TData>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cell Value in TanStack Table\nDESCRIPTION: A method that returns the value for the cell, accessed via the associated column's accessor key or accessor function.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/cell.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ngetValue: () => any\n```\n\n----------------------------------------\n\nTITLE: Getting Cell Context for Rendering in TanStack Table\nDESCRIPTION: A method that returns the rendering context (or props) for cell-based components. This context includes references to the table, column, row, cell itself, and methods for getting and rendering values.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/cell.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ngetContext: () => {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: <TTValue = TValue,>() => TTValue\n  renderValue: <TTValue = TValue,>() => TTValue | null\n}\n```\n\n----------------------------------------\n\nTITLE: Row API Method - getVisibleCells\nDESCRIPTION: Method signature for retrieving an array of visible cells for a row, taking into account column visibility settings.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-visibility.md#2025-04-19_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\ngetVisibleCells: () => Cell<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Defining AggregationFnOption Type in TypeScript\nDESCRIPTION: Defines the possible types that can be used for column aggregation functions. Options include 'auto', a key referencing built-in or custom functions, or a direct function implementation.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport type AggregationFnOption<TData extends AnyData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n```\n\n----------------------------------------\n\nTITLE: Updating Table Cell Markup\nDESCRIPTION: Changes required to update table cell markup with new flexRender implementation.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/migrating.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n- <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n+ <td key={cell.id}>\n+   {flexRender(\n+     cell.column.columnDef.cell,\n+     cell.getContext()\n+   )}\n+ </td>\n```\n\n----------------------------------------\n\nTITLE: Setting Column Order in TanStack Table\nDESCRIPTION: Defines the setColumnOrder method in the table API which allows updating the column order state. It accepts an updater function to modify the current column order state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-ordering.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nsetColumnOrder: (updater: Updater<ColumnOrderState>) => void\n```\n\n----------------------------------------\n\nTITLE: Implementing Fully Controlled Table State with Lit\nDESCRIPTION: Demonstrates how to control the entire table state in your own state management system using the onStateChange table option. This approach allows full external control of all table state aspects.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/lit/guide/table-state.md#2025-04-19_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nprivate tableController = new TableController<Person>(this);\n\n@state()\nprivate _tableState;\n\nrender() {\n  const table = this.tableController.table({\n    columns,\n    data,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel()\n  })\n  const state = { ...table.initialState, ...this._tableState };\n  table.setOptions(prev => ({\n    ...prev,\n    state,\n    onStateChange: updater => {\n      this._tableState =\n        updater instanceof Function ? updater(state) : updater //any state changes will be pushed up to our own state management\n    },\n  }))\n\n  return html`...`;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Table Header Markup\nDESCRIPTION: Changes required to update table header markup with new flexRender implementation.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/migrating.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n- <th {...header.getHeaderProps()}>{cell.render('Header')}</th>\n+ <th colSpan={header.colSpan} key={column.id}>\n+   {flexRender(\n+     header.column.columnDef.header,\n+     header.getContext()\n+   )}\n+ </th>\n```\n\n----------------------------------------\n\nTITLE: Configuring Grouped Column Behavior Mode in TanStack Table\nDESCRIPTION: Sets the behavior for grouped columns, determining whether they should be reordered to the start of the table, removed from view, or left in their original position.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/grouping.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst table = useReactTable({\n  // other options...\n  groupedColumnMode: 'reorder',\n})\n```\n\n----------------------------------------\n\nTITLE: Column Pinning State Management APIs\nDESCRIPTION: Core APIs for managing column pinning state including setting and resetting pinning state\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-pinning.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nsetColumnPinning: (updater: Updater<ColumnPinningState>) => void\n```\n\nLANGUAGE: tsx\nCODE:\n```\nresetColumnPinning: (defaultState?: boolean) => void\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n```\n\n----------------------------------------\n\nTITLE: Column depth Property in TanStack Table\nDESCRIPTION: The depth property indicates the nesting level of a column (if grouped) relative to the root column definition array.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/column.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ndepth: number\n```\n\n----------------------------------------\n\nTITLE: Column Definition sortDescFirst Option for TanStack Table\nDESCRIPTION: Defines the sortDescFirst option for column definitions, which when set to true causes sorting toggles on the column to start in the descending direction.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nsortDescFirst?: boolean\n```\n\n----------------------------------------\n\nTITLE: Computing Faceted Min/Max Values in TypeScript\nDESCRIPTION: Function type definition for calculating minimum and maximum values from a faceted row model. Returns a Map containing min/max value pairs. Requires a valid getFacetedMinMaxValues function in options.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-faceting.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ngetFacetedMinMaxValues: () => Map<any, number>\n```\n\n----------------------------------------\n\nTITLE: Rendering TemplateRefs in Table Cells\nDESCRIPTION: Shows how to use TemplateRefs to render custom content in table cells, including how to access the cell context within the template.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/angular/angular-table.md#2025-04-19_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<ng-container\n  *flexRender=\"\n              cell.column.columnDef.cell;\n              props: cell.getContext();\n              let cell\n            \"\n>\n  <!-- if you want to render a simple string -->\n  {{ cell }}\n  <!-- if you want to render an html string -->\n  <div [innerHTML]=\"cell\"></div>\n</ng-container>\n\n<ng-template #myCell let-context>\n  <!-- render something with context -->\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Memoized Data Transformation Pattern\nDESCRIPTION: Shows correct implementation using useMemo to handle data transformations while maintaining stable references.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/faq.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function MyComponent() {\n  const columns = useMemo(() => [\n    // ...\n  ], []);\n\n  const { data, isLoading } = useQuery({\n    //...\n  });\n\n  const filteredData = useMemo(() => data?.filter(d => d.isActive) ?? [], [data]);\n\n  const table = useReactTable({\n    columns,\n    data: filteredData,\n  });\n\n  return <table>...</table>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Table for Various Frameworks\nDESCRIPTION: npm commands to install TanStack Table for different frameworks including Angular, Lit, Qwik, React, Solid, Svelte, Vue, and a core version for vanilla JavaScript.\nSOURCE: https://github.com/TanStack/table/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Npm\nnpm install @tanstack/angular-table\nnpm install @tanstack/lit-table\nnpm install @tanstack/qwik-table\nnpm install @tanstack/react-table\nnpm install @tanstack/solid-table\nnpm install @tanstack/svelte-table\nnpm install @tanstack/vue-table\nnpm install @tanstack/table-core #vanilla js that can work with any framework\n```\n\n----------------------------------------\n\nTITLE: Check Pinned Rows Method Definition\nDESCRIPTION: Defines the method type for checking if any rows are pinned, optionally by position.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-pinning.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsSomeRowsPinned: (position?: RowPinningPosition) => boolean\n```\n\n----------------------------------------\n\nTITLE: Accessing Column Object from Cell in TanStack Table\nDESCRIPTION: A property that provides access to the associated Column object for the cell, allowing access to column-level configuration and operations.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/cell.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ncolumn: Column<TData>\n```\n\n----------------------------------------\n\nTITLE: Table State Reset Control Implementation\nDESCRIPTION: Demonstrates how to prevent table state from automatically resetting when data changes using ref flags.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/faq.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst [data, setData] = React.useState([])\nconst skipPageResetRef = React.useRef()\n\nconst updateData = newData => {\n  skipPageResetRef.current = true\n\n  setData(newData)\n}\n\nReact.useEffect(() => {\n  skipPageResetRef.current = false\n})\n\nuseReactTable({\n  ...\n  autoResetPageIndex: !skipPageResetRef.current,\n  autoResetExpanded: !skipPageResetRef.current,\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Initial State in TanStack Table API\nDESCRIPTION: Type definition for the initialState property on the table instance which provides access to the resolved initial table state. This combines all feature states.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\ninitialState: VisibilityTableState &\n  ColumnOrderTableState &\n  ColumnPinningTableState &\n  FiltersTableState &\n  SortingTableState &\n  ExpandedTableState &\n  GroupingTableState &\n  ColumnSizingTableState &\n  PaginationTableState &\n  RowSelectionTableState\n```\n\n----------------------------------------\n\nTITLE: Getting Left Pinned Leaf Headers in TanStack Table\nDESCRIPTION: Shows the type definition for the getLeftLeafHeaders method, which returns headers for left pinned leaf columns (not including parent headers).\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\ntype getLeftLeafHeaders = () => Header<TData, unknown>[]\n```\n\n----------------------------------------\n\nTITLE: Implementing Faceted Row Model in TypeScript\nDESCRIPTION: Function type definition for retrieving a faceted row model. Returns a RowModel of type TData. Requires passing a valid getFacetedRowModel function to options.facetedRowModel.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-faceting.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype getFacetedRowModel = () => RowModel<TData>\n```\n\n----------------------------------------\n\nTITLE: Column API Method - getToggleVisibilityHandler\nDESCRIPTION: Method signature for getting an event handler function that toggles column visibility.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-visibility.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ngetToggleVisibilityHandler: () => (event: unknown) => void\n```\n\n----------------------------------------\n\nTITLE: Column Meta Type Extension\nDESCRIPTION: Demonstrates how to extend the ColumnMeta interface through declaration merging to add custom metadata types.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/column-def.md#2025-04-19_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@tanstack/react-table' //or vue, svelte, solid, qwik, etc.\n\ndeclare module '@tanstack/react-table' {\n  interface ColumnMeta<TData extends RowData, TValue> {\n    foo: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Column ID Definition in TanStack Table\nDESCRIPTION: Defines the unique identifier property for a table column.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/column-def.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nid: string\n```\n\n----------------------------------------\n\nTITLE: Row Index Property Definition\nDESCRIPTION: Defines the index position of the row within its parent array or root data array.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/row.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nindex: number\n```\n\n----------------------------------------\n\nTITLE: Get Parent Rows Method Definition\nDESCRIPTION: Method to retrieve all parent rows up to the root row.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/row.md#2025-04-19_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\ntype getParentRows = () => Row<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Get Row Value Method Definition\nDESCRIPTION: Method to retrieve the value from a row for a specified column ID.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/row.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ngetValue: (columnId: string) => TValue\n```\n\n----------------------------------------\n\nTITLE: Using Custom Aggregation Function in Column Definition\nDESCRIPTION: References a custom aggregation function in a column definition by specifying its ID in the aggregationFn property, allowing custom calculation of aggregated values for the column.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/grouping.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst column = columnHelper.accessor('key', {\n  aggregationFn: 'myCustomAggregation',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Options Merging for Framework Adapters\nDESCRIPTION: Type definition for the mergeOptions function used by framework adapters to merge table options. This is only necessary when implementing a table adapter.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\ntype mergeOptions = <T>(defaultOptions: T, options: Partial<T>) => T\n```\n\n----------------------------------------\n\nTITLE: Configuring Faceted Row Models in TanStack Table\nDESCRIPTION: This snippet demonstrates how to import and configure faceted row models in the table options. It includes getCoreRowModel, getFacetedRowModel, getFacetedMinMaxValues, and getFacetedUniqueValues.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-faceting.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getCoreRowModel,\n  getFacetedRowModel,\n  getFacetedMinMaxValues, //depends on getFacetedRowModel\n  getFacetedUniqueValues, //depends on getFacetedRowModel\n}\n//...\nconst table = useReactTable({\n  columns,\n  data,\n  getCoreRowModel: getCoreRowModel(),\n  getFacetedRowModel: getFacetedRowModel(), //if you need a list of values for a column (other faceted row models depend on this one)\n  getFacetedMinMaxValues: getFacetedMinMaxValues(), //if you need min/max values\n  getFacetedUniqueValues: getFacetedUniqueValues(), //if you need a list of unique values\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Column API getAutoSortingFn Method for TanStack Table\nDESCRIPTION: Defines the getAutoSortingFn method on the column API, which returns a sorting function automatically inferred based on the column's values.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\ngetAutoSortingFn: () => SortingFn<TData>\n```\n\n----------------------------------------\n\nTITLE: Render Row Value Method Definition\nDESCRIPTION: Method to render the value from a row for a given column ID, returning a fallback value if no value is found.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/row.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nrenderValue: (columnId: string) => TValue\n```\n\n----------------------------------------\n\nTITLE: Accessing Table State in Solid\nDESCRIPTION: Demonstrates how to access internal table state using the table.getState() method in a Solid.js component. This allows viewing the entire state or specific state properties like rowSelection.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/solid/guide/table-state.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = createSolidTable({\n  columns,\n  get data() {\n    return data()\n  },\n  //...\n})\n\nconsole.log(table.getState()) //access the entire internal state\nconsole.log(table.getState().rowSelection) //access just the row selection state\n```\n\n----------------------------------------\n\nTITLE: Getting Left Pinned Flat Headers in TanStack Table\nDESCRIPTION: Shows the type definition for the getLeftFlatHeaders method, which returns headers for left pinned columns including parent headers.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\ntype getLeftFlatHeaders = () => Header<TData, unknown>[]\n```\n\n----------------------------------------\n\nTITLE: Column Definition enableMultiSort Option for TanStack Table\nDESCRIPTION: Defines the enableMultiSort option for column definitions, which enables or disables multi-sorting for a specific column.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nenableMultiSort?: boolean\n```\n\n----------------------------------------\n\nTITLE: Column Header Definition\nDESCRIPTION: Defines the header content for the column, supporting both string and function definitions with access to table, header, and column props.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/column-def.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nheader?:\n  | string\n  | ((props: {\n      table: Table<TData>\n      header: Header<TData>\n      column: Column<TData>\n    }) => unknown)\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Person Type Structure\nDESCRIPTION: TypeScript type definition showing a nested data structure for a Person object with grouped properties.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-defs.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype Person = {\n  name: {\n    first: string\n    last: string\n  }\n  info: {\n    age: number\n    visits: number\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining aggregationFn Column Option in TypeScript\nDESCRIPTION: Specifies the aggregationFn option for column definitions, which can be a string referencing a built-in or custom function, or a direct function implementation.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\naggregationFn?: AggregationFn | keyof AggregationFns | keyof BuiltInAggregationFns\n```\n\n----------------------------------------\n\nTITLE: Setting Page Count Option for Manual Pagination\nDESCRIPTION: Defines the pageCount option used in manual pagination to specify the total number of pages available.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\npageCount?: number\n```\n\n----------------------------------------\n\nTITLE: Enabling Table Debugging in TanStack Table\nDESCRIPTION: Definition of the debugTable option which enables table-specific debugging information. This option is only available in development mode.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\ndebugTable?: boolean\n```\n\n----------------------------------------\n\nTITLE: Resetting Column Order in TanStack Table\nDESCRIPTION: Defines the resetColumnOrder method that reverts the column order to its initial state. It can optionally force a reset to an empty array by passing true as an argument.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-ordering.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nresetColumnOrder: (defaultState?: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Accessing Header ID in TanStack Table\nDESCRIPTION: Shows the type definition for the id property of a header, which serves as a unique identifier for the header.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nid: string\n```\n\n----------------------------------------\n\nTITLE: Defining toggleGrouping Column API in TypeScript\nDESCRIPTION: Specifies the toggleGrouping method in the column API which toggles the grouping state of the column.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\ntoggleGrouping: () => void\n```\n\n----------------------------------------\n\nTITLE: Column API clearSorting Method for TanStack Table\nDESCRIPTION: Defines the clearSorting method on the column API, which removes this column from the table's sorting state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nclearSorting: () => void\n```\n\n----------------------------------------\n\nTITLE: Defining getIsPlaceholder Cell API in TypeScript\nDESCRIPTION: Specifies the getIsPlaceholder method in the cell API which returns whether the cell is currently a placeholder.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsPlaceholder: () => boolean\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Faceted Unique Values in TanStack Table (TSX)\nDESCRIPTION: This API returns a Map of faceted unique values for the global filter. It provides a count of unique values in the filtered data, which can be useful for creating faceted navigation or summaries.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/global-faceting.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ngetGlobalFacetedUniqueValues: () => Map<any, number>\n```\n\n----------------------------------------\n\nTITLE: Implementing setPageIndex Method\nDESCRIPTION: Defines the setPageIndex method that updates the page index using a provided function or value.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nsetPageIndex: (updater: Updater<number>) => void\n```\n\n----------------------------------------\n\nTITLE: Table API getSortedRowModel Method for TanStack Table\nDESCRIPTION: Defines the getSortedRowModel method on the table API, which returns the row model after sorting has been applied.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\ngetSortedRowModel: () => RowModel<TData>\n```\n\n----------------------------------------\n\nTITLE: Column parent Property in TanStack Table\nDESCRIPTION: The parent property references the parent column for this column. It will be undefined for root-level columns.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/column.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nparent?: Column<TData>\n```\n\n----------------------------------------\n\nTITLE: Table API - getIsAllRowsSelected\nDESCRIPTION: Returns a boolean indicating whether all rows in the table are currently selected. Useful for determining the state of select-all UI elements.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-selection.md#2025-04-19_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsAllRowsSelected: () => boolean\n```\n\n----------------------------------------\n\nTITLE: Declaring Column Definition Options for Sizing in TypeScript\nDESCRIPTION: Specifies TypeScript types for column definition options related to sizing, including enableResizing, size, minSize, and maxSize.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-sizing.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nenableResizing?: boolean\n\nsize?: number\n\nminSize?: number\n\nmaxSize?: number\n```\n\n----------------------------------------\n\nTITLE: Defining getPreFilteredRowModel Method in TanStack Table API (TSX)\nDESCRIPTION: This method returns the row model for the table before any column filtering has been applied.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-filtering.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\ngetPreFilteredRowModel: () => RowModel<TData>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Processed Row Model in TSX\nDESCRIPTION: This method returns the final model after all processing from other used features has been applied. It provides the rows, flatRows, and rowsById.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\ngetRowModel: () => {\n  rows: Row<TData>[],\n  flatRows: Row<TData>[],\n  rowsById: Record<string, Row<TData>>,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining onGroupingChange Table Option in TypeScript\nDESCRIPTION: Specifies the onGroupingChange table option which is called when grouping state changes, allowing external state management.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nonGroupingChange?: OnChangeFn<GroupingState>\n```\n\n----------------------------------------\n\nTITLE: Table Option - enableHiding\nDESCRIPTION: Type definition for the table-level option to enable or disable column hiding functionality.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-visibility.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nenableHiding?: boolean\n```\n\n----------------------------------------\n\nTITLE: Implementing getPageCount Method\nDESCRIPTION: Defines the getPageCount method that returns the total page count, either from options.pageCount or calculated from row count and page size.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\ngetPageCount: () => number\n```\n\n----------------------------------------\n\nTITLE: Getting Header Depth in TanStack Table\nDESCRIPTION: Shows the type definition for the depth property, which indicates the nesting level of the header (zero-indexed).\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ndepth: number\n```\n\n----------------------------------------\n\nTITLE: Accessing Sub-Headers in TanStack Table\nDESCRIPTION: Shows the type definition for accessing child headers in hierarchical table structures. Will be empty for leaf-column headers.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ntype subHeaders = Header<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Get Parent Row Method Definition\nDESCRIPTION: Method to retrieve the parent row if it exists.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/row.md#2025-04-19_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\ntype getParentRow = () => Row<TData> | undefined\n```\n\n----------------------------------------\n\nTITLE: Column API Method - toggleVisibility\nDESCRIPTION: Method signature for toggling column visibility with an optional boolean value parameter.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-visibility.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ntoggleVisibility: (value?: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Row Pinning Change Handler Definition\nDESCRIPTION: Defines the type for the row pinning state change handler function.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-pinning.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nonRowPinningChange?: OnChangeFn<RowPinningState>\n```\n\n----------------------------------------\n\nTITLE: Column API getFirstSortDir Method for TanStack Table\nDESCRIPTION: Defines the getFirstSortDir method on the column API, which returns the first direction that should be used when sorting this column.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\ngetFirstSortDir: () => SortDirection\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Column by ID in TSX\nDESCRIPTION: This method returns a single column by its ID. It may return undefined if the column is not found.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\ntype getColumn = (id: string) => Column<TData> | undefined\n```\n\n----------------------------------------\n\nTITLE: Column API getNextSortingOrder Method for TanStack Table\nDESCRIPTION: Defines the getNextSortingOrder method on the column API, which returns the next sorting order for this column.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\ngetNextSortingOrder: () => SortDirection | false\n```\n\n----------------------------------------\n\nTITLE: Defining enableGrouping Table Option in TypeScript\nDESCRIPTION: Specifies the enableGrouping table option which enables or disables grouping for all columns in the table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nenableGrouping?: boolean\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Leaf Columns in TSX\nDESCRIPTION: This method returns all leaf-node columns in the table flattened to a single level, excluding parent columns.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\ntype getAllLeafColumns = () => Column<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Enabling All Debugging in TanStack Table\nDESCRIPTION: Definition of the debugAll option which enables all debugging information to be output to the console. This option is only available in development mode.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\ndebugAll?: boolean\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript State Types\nDESCRIPTION: Demonstrates how to use TypeScript types for table state management with proper type checking.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/vue/guide/table-state.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useVueTable, type SortingState } from '@tanstack/vue-table'\n//...\nconst sorting = ref<SortingState[]>([\n  {\n    id: 'age', //you should get autocomplete for the `id` and `desc` properties\n    desc: true,\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing getCanPreviousPage Method\nDESCRIPTION: Defines the getCanPreviousPage method that returns whether the table can go to the previous page.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\ngetCanPreviousPage: () => boolean\n```\n\n----------------------------------------\n\nTITLE: Getting Right Pinned Leaf Headers in TanStack Table\nDESCRIPTION: Shows the type definition for the getRightLeafHeaders method, which returns headers for right pinned leaf columns (not including parent headers).\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\ntype getRightLeafHeaders = () => Header<TData, unknown>[]\n```\n\n----------------------------------------\n\nTITLE: Table Option maxMultiSortColCount for TanStack Table\nDESCRIPTION: Defines the maxMultiSortColCount table option, which sets a maximum number of columns that can be multi-sorted.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nmaxMultiSortColCount?: number\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Cells with flexRender in Qwik\nDESCRIPTION: This snippet shows how to use flexRender utility to render cell/header/footer templates with dynamic values in a Qwik table component. It maps through rows and cells to create a table body.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/qwik/qwik-table.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { flexRender } from '@tanstack/qwik-table'\n//...\nreturn (\n  <tbody>\n    {table.getRowModel().rows.map(row => {\n      return (\n        <tr key={row.id}>\n          {row.getVisibleCells().map(cell => (\n            <td key={cell.id}>\n              {flexRender(cell.column.columnDef.cell, cell.getContext())}\n            </td>\n          ))}\n        </tr>\n      )\n    })}\n  </tbody>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining enableGrouping Column Option in TypeScript\nDESCRIPTION: Specifies the enableGrouping option for column definitions to control whether grouping is enabled for a specific column.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nenableGrouping?: boolean\n```\n\n----------------------------------------\n\nTITLE: SubRows Type Definition\nDESCRIPTION: Defines the type for an array of sub-rows created by the options.getSubRows option.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/row.md#2025-04-19_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\ntype subRows = Row<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Initializing a Table with useQwikTable in Qwik\nDESCRIPTION: This snippet demonstrates how to initialize a table using the useQwikTable hook, which takes an options object and returns a table from a Qwik Store with NoSerialize.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/qwik/qwik-table.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQwikTable } from '@tanstack/qwik-table'\n\nconst table = useQwikTable(options)\n// ...render your table\n\n```\n\n----------------------------------------\n\nTITLE: Column Definition enableSorting Option for TanStack Table\nDESCRIPTION: Defines the enableSorting option for column definitions, which enables or disables sorting for a specific column.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nenableSorting?: boolean\n```\n\n----------------------------------------\n\nTITLE: Column API getCanSort Method for TanStack Table\nDESCRIPTION: Defines the getCanSort method on the column API, which returns whether this column can be sorted.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\ngetCanSort: () => boolean\n```\n\n----------------------------------------\n\nTITLE: Implementing resetPagination Method\nDESCRIPTION: Defines the resetPagination method that resets the pagination state to the initial state or a default blank state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nresetPagination: (defaultState?: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Incorrect Data Mutation Pattern\nDESCRIPTION: Demonstrates an anti-pattern where data mutations destroy stable references and cause infinite rendering loops.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/faq.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function MyComponent() {\n  const columns = useMemo(() => [\n    // ...\n  ], []);\n\n  const { data, isLoading } = useQuery({\n    //...\n  });\n\n  const table = useReactTable({\n    columns,\n    data: data?.filter(d => d.isActive) ?? [],\n  });\n\n  return <table>...</table>;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting All Header Groups in TanStack Table\nDESCRIPTION: Shows the type definition for the getHeaderGroups method in the Table API, which returns all header groups for the table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\ntype getHeaderGroups = () => HeaderGroup<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Updating Column Definitions\nDESCRIPTION: Changes required to update column definitions with new accessor syntax and column helper usage.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/migrating.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst columns = [\n-  {\n-    accessor: 'firstName',\n-    Header: 'First Name',\n-  },\n-  {\n-    accessor: row => row.lastName,\n-    Header: () => <span>Last Name</span>,\n-  },\n\n// Best TypeScript experience, especially when using `cell.getValue()` later on\n+  columnHelper.accessor('firstName', { //accessorKey\n+    header: 'First Name',\n+  }),\n+  columnHelper.accessor(row => row.lastName, { //accessorFn\n+    header: () => <span>Last Name</span>,\n+  }),\n\n// OR (if you prefer)\n+ {\n+   accessorKey: 'firstName',\n+   header: 'First Name',\n+ },\n+ {\n+   accessorFn: row => row.lastName,\n+   header: () => <span>Last Name</span>,\n+ },\n]\n```\n\n----------------------------------------\n\nTITLE: Check Row Pin Ability Method Definition\nDESCRIPTION: Defines the method type for checking if a row can be pinned.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-pinning.md#2025-04-19_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\ngetCanPin: () => boolean\n```\n\n----------------------------------------\n\nTITLE: Implementing getCanNextPage Method\nDESCRIPTION: Defines the getCanNextPage method that returns whether the table can go to the next page.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\ngetCanNextPage: () => boolean\n```\n\n----------------------------------------\n\nTITLE: Retrieving Column-Specific Faceted Row Model in TypeScript\nDESCRIPTION: Function type definition for getting a faceted row model for a specific column using its ID. Takes a columnId parameter and returns the corresponding RowModel of type TData.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-faceting.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ngetColumnFacetedRowModel: (columnId: string) => RowModel<TData>\n```\n\n----------------------------------------\n\nTITLE: Table Option enableSorting for TanStack Table\nDESCRIPTION: Defines the enableSorting table option, which globally enables or disables sorting for the entire table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nenableSorting?: boolean\n```\n\n----------------------------------------\n\nTITLE: Getting Left Pinned Header Groups in TanStack Table\nDESCRIPTION: Shows the type definition for the getLeftHeaderGroups method, which returns header groups for left pinned columns when using column pinning.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\ntype getLeftHeaderGroups = () => HeaderGroup<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Defining Sales Array Type\nDESCRIPTION: TypeScript type definition for a Sales tuple containing a Date and number.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-defs.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ntype Sales = [Date, number]\n```\n\n----------------------------------------\n\nTITLE: Table API - getIsSomeRowsSelected\nDESCRIPTION: Returns a boolean indicating if some (but not all) rows are selected in the table. Returns false if all rows are selected.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-selection.md#2025-04-19_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsSomeRowsSelected: () => boolean\n```\n\n----------------------------------------\n\nTITLE: Accessing Original Row Data\nDESCRIPTION: Demonstrates how to access the original unmodified row data using the row.original property.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/rows.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Access any data from the original row\nconst firstName = row.original.firstName // { firstName: 'John', lastName: 'Doe' }\n```\n\n----------------------------------------\n\nTITLE: Defining ExpandedState and ExpandedTableState Types in TypeScript\nDESCRIPTION: Defines the structure of expanding state for the table, including the ExpandedState type and ExpandedTableState interface.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/expanding.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type ExpandedState = true | Record<string, boolean>\n\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing resetPageIndex Method\nDESCRIPTION: Defines the resetPageIndex method that resets the page index to its initial state or to 0 when defaultState is true.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nresetPageIndex: (defaultState?: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Implementing lastPage Method\nDESCRIPTION: Defines the lastPage method that sets the page index to the last available page.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nlastPage: () => void\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Initial State in Solid Table\nDESCRIPTION: Shows how to customize the initial state of a table by using the initialState option. This example sets default column ordering, visibility, expansion state, and sorting preferences.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/solid/guide/table-state.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = createSolidTable({\n  columns,\n  data,\n  initialState: {\n    columnOrder: ['age', 'firstName', 'lastName'], //customize the initial column order\n    columnVisibility: {\n      id: false //hide the id column by default\n    },\n    expanded: true, //expand all rows by default\n    sorting: [\n      {\n        id: 'age',\n        desc: true //sort by age in descending order by default\n      }\n    ]\n  },\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Center Flat Headers in TanStack Table\nDESCRIPTION: Shows the type definition for the getCenterFlatHeaders method, which returns headers for non-pinned columns including parent headers.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\ntype getCenterFlatHeaders = () => Header<TData, unknown>[]\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Column Filter State\nDESCRIPTION: Configuration for setting initial column filter state using the initialState table option.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-filtering.md#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = useReactTable({\n  columns,\n  data,\n  //...\n  initialState: {\n    columnFilters: [\n      {\n        id: 'name',\n        value: 'John', // filter the name column by 'John' by default\n      },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Running Full Width Table Example with React Table\nDESCRIPTION: Instructions for running the full-width table example with collapsible cells. It includes a link to open the example in CodeSandbox and commands to run the example locally.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/full-width-table/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Full Width Table (with collapsible cells)\n\n- [Open this example in a new CodeSandbox](https://codesandbox.io/s/github/tanstack/react-table/tree/master/examples/full-width-table)\n- `yarn` and `yarn start` to run and edit the example\n```\n\n----------------------------------------\n\nTITLE: Defining Header Group ID in TanStack Table (TSX)\nDESCRIPTION: This snippet shows the type definition for the 'id' property of a header group. It is a unique identifier for the header group, represented as a string.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header-group.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nid: string\n```\n\n----------------------------------------\n\nTITLE: Accessing HeaderGroup Object in TanStack Table\nDESCRIPTION: Shows the type definition for accessing the header group object that contains this header.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nheaderGroup: HeaderGroup<TData>\n```\n\n----------------------------------------\n\nTITLE: Getting Column Span in TanStack Table\nDESCRIPTION: Shows the type definition for the colSpan property, which determines how many columns a header spans horizontally.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ncolSpan: number\n```\n\n----------------------------------------\n\nTITLE: Installing Qwik Table Adapter\nDESCRIPTION: Command to install the Qwik adapter for TanStack Table. Works with Qwik 1, with future updates planned for Qwik 2.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/installation.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tanstack/qwik-table\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Row Using table.getRow\nDESCRIPTION: Demonstrates how to access a specific row by its ID using the table.getRow API method.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/rows.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst row = table.getRow(rowId)\n```\n\n----------------------------------------\n\nTITLE: Configuring Leaf-First Filtering for Expanded Rows\nDESCRIPTION: Sets up filtering to prioritize child (leaf) rows by enabling filterFromLeafRows and controlling the search depth with maxLeafRowFilterDepth.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/expanding.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n//...\nconst table = useReactTable({\n  // other options...\n  getSubRows: row => row.subRows,\n  getCoreRowModel: getCoreRowModel(),\n  getFilteredRowModel: getFilteredRowModel(),\n  getExpandedRowModel: getExpandedRowModel(),\n  filterFromLeafRows: true, // search through the expanded rows\n  maxLeafRowFilterDepth: 1, // limit the depth of the expanded rows that are searched\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing previousPage Method\nDESCRIPTION: Defines the previousPage method that decrements the page index by one, if possible.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\npreviousPage: () => void\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Initial State\nDESCRIPTION: Shows how to set custom initial state values for column order, visibility, expansion, and sorting.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/react/guide/table-state.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = useReactTable({\n  columns,\n  data,\n  initialState: {\n    columnOrder: ['age', 'firstName', 'lastName'], //customize the initial column order\n    columnVisibility: {\n      id: false //hide the id column by default\n    },\n    expanded: true, //expand all rows by default\n    sorting: [\n      {\n        id: 'age',\n        desc: true //sort by age in descending order by default\n      }\n    ]\n  },\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Table State in Vue\nDESCRIPTION: Demonstrates how to access internal table state using the table.getState() API method.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/vue/guide/table-state.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = useVueTable({\n  columns,\n  data: dataRef, // Reactive data support\n  //...\n})\n\nconsole.log(table.getState()) //access the entire internal state\nconsole.log(table.getState().rowSelection) //access just the row selection state\n```\n\n----------------------------------------\n\nTITLE: Column getLeafColumns Method in TanStack Table\nDESCRIPTION: The getLeafColumns method returns an array of all leaf-node columns for this column. A column with no children is considered the only leaf-node.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/column.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\ntype getLeafColumns = () => Column<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Original Row Data Type Definition\nDESCRIPTION: Represents the original row object provided to the table. For grouped rows, contains the first original in the group.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/row.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\noriginal: TData\n```\n\n----------------------------------------\n\nTITLE: Column Definition sortUndefined Option for TanStack Table\nDESCRIPTION: Defines the sortUndefined option for column definitions, which controls how undefined values are handled during sorting, with options to place them first, last, or use specific sorting priority.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nsortUndefined?: 'first' | 'last' | false | -1 | 1 // defaults to 1\n```\n\n----------------------------------------\n\nTITLE: Row Depth Property Definition\nDESCRIPTION: Specifies the depth of a row in nested or grouped structures relative to the root row array.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/row.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ndepth: number\n```\n\n----------------------------------------\n\nTITLE: Defining getFilteredRowModel Function in TanStack Table (TSX)\nDESCRIPTION: This function is called once per table and should return a new function to calculate and return the filtered row model. It's required for client-side filtering but unnecessary for server-side filtering.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-filtering.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ngetFilteredRowModel?: (\n  table: Table<TData>\n) => () => RowModel<TData>\n```\n\n----------------------------------------\n\nTITLE: Getting Row Span in TanStack Table\nDESCRIPTION: Shows the type definition for the rowSpan property, which determines how many rows a header spans vertically.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nrowSpan: number\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Table V8 Package\nDESCRIPTION: Instructions for uninstalling the old react-table packages and installing the new @tanstack/react-table package.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/migrating.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall react-table @types/react-table\nnpm install @tanstack/react-table\n```\n\n----------------------------------------\n\nTITLE: Setting Up Manual (Server-Side) Expansion\nDESCRIPTION: Enables manual expansion mode for server-side expansion scenarios by setting manualExpanding to true, which prevents the internal getExpandedRowModel from being used.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/expanding.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = useReactTable({\n  // other options...\n  manualExpanding: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Column API getSortIndex Method for TanStack Table\nDESCRIPTION: Defines the getSortIndex method on the column API, which returns the index position of this column's sorting within the sorting state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\ngetSortIndex: () => number\n```\n\n----------------------------------------\n\nTITLE: Defining Pagination Row Model Function\nDESCRIPTION: Specifies the getPaginationRowModel function that returns the row model after pagination has been applied.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ngetPaginationRowModel?: (table: Table<TData>) => () => RowModel<TData>\n```\n\n----------------------------------------\n\nTITLE: Column columnDef Property in TanStack Table\nDESCRIPTION: The columnDef property contains the original column definition used to create this column instance.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/column.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ncolumnDef: ColumnDef<TData>\n```\n\n----------------------------------------\n\nTITLE: Getting Only Leaf Headers in TanStack Table\nDESCRIPTION: Shows the type definition for the getLeafHeaders method, which returns headers only for leaf columns (not including parent headers).\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\ntype getLeafHeaders = () => Header<TData, unknown>[]\n```\n\n----------------------------------------\n\nTITLE: Accessing Column Object from Header in TanStack Table\nDESCRIPTION: Shows the type definition for accessing the column object associated with a header.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ncolumn: Column<TData>\n```\n\n----------------------------------------\n\nTITLE: Get Center Rows Method Definition\nDESCRIPTION: Defines the method type for retrieving unpinned (center) rows.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-pinning.md#2025-04-19_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\ngetCenterRows: () => Row<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Defining Column Filter State Types in TypeScript\nDESCRIPTION: TypeScript interfaces defining the structure of column filter state, including the table state, filter state array, and individual filter objects.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-filtering.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface ColumnFiltersTableState {\n  columnFilters: ColumnFiltersState\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n```\n\n----------------------------------------\n\nTITLE: Column Definition enableHiding Option\nDESCRIPTION: Type definition for the enableHiding option in column definitions that controls whether a column can be hidden.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-visibility.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nenableHiding?: boolean\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Other Artifacts\nDESCRIPTION: Uses Angular CLI to generate new components, directives, pipes, services, classes, guards, interfaces, enums, or modules.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/basic/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Using flexRender with Cell Context in TanStack Table\nDESCRIPTION: An example showing how to use the flexRender utility with a cell's context to render cell content using the template of your choice.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/cell.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nflexRender(cell.column.columnDef.cell, cell.getContext())\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Feature to TanStack Table Instance\nDESCRIPTION: This snippet shows how to add the custom DensityFeature to a TanStack Table instance by passing it to the _features option when creating the table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/custom-features.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = useReactTable({\n  _features: [DensityFeature],\n  columns,\n  data,\n  //..\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing resetPageSize Method\nDESCRIPTION: Defines the resetPageSize method that resets the page size to its initial state or to 10 when defaultState is true.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nresetPageSize: (defaultState?: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Row Pinning State Types Definition in TypeScript\nDESCRIPTION: Defines the TypeScript types for row pinning state management, including position types and state structure.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-pinning.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type RowPinningPosition = false | 'top' | 'bottom'\n\nexport type RowPinningState = {\n  top?: string[]\n  bottom?: string[]\n}\n\nexport type RowPinningRowState = {\n  rowPinning: RowPinningState\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Leaf Row Filter Depth\nDESCRIPTION: Demonstrates how to limit the depth of filtering in hierarchical data structures\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-filtering.md#2025-04-19_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = useReactTable({\n  columns,\n  data,\n  getCoreRowModel: getCoreRowModel(),\n  getFilteredRowModel: getFilteredRowModel(),\n  getExpandedRowModel: getExpandedRowModel(),\n  maxLeafRowFilterDepth: 0, // only filter root level parent rows out\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Leaf Headers in TSX\nDESCRIPTION: This method returns a flattened array of leaf-node Header objects for the table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\ntype getLeafHeaders = () => Header<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Footer Groups in TSX\nDESCRIPTION: This method returns the footer groups for the table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\ntype getFooterGroups = () => HeaderGroup<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Defining getIsGrouped Cell API in TypeScript\nDESCRIPTION: Specifies the getIsGrouped method in the cell API which returns whether the cell is currently grouped.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsGrouped: () => boolean\n```\n\n----------------------------------------\n\nTITLE: Pin Row Method Definition\nDESCRIPTION: Defines the method type for pinning a row to a specific position.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-pinning.md#2025-04-19_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\npin: (position: RowPinningPosition) => void\n```\n\n----------------------------------------\n\nTITLE: Rendering Column Components with FlexRender\nDESCRIPTION: Shows how to use the flexRender directive to render custom components defined in column definitions, passing the appropriate context to the components.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/angular/angular-table.md#2025-04-19_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ng-container\n  *flexRender=\"\n    header.column.columnDef.header;\n    props: header.getContext();\n    let headerCell\n  \"\n>\n  {{ headerCell }}\n</ng-container>\n```\n\n----------------------------------------\n\nTITLE: Defining Headers Array in TanStack Table (TSX)\nDESCRIPTION: This snippet shows the type definition for the 'headers' property of a header group. It is an array of Header objects that belong to the header group, with a generic type parameter TData.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header-group.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype headers = Header<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components\nDESCRIPTION: Angular CLI command for scaffolding new components and other Angular artifacts like directives, pipes, services, etc.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/expanding/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Disabling Column Hiding in React\nDESCRIPTION: This snippet demonstrates how to prevent certain columns from being hidden by setting the enableHiding column option to false.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-visibility.md#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst columns = [\n  {\n    header: 'ID',\n    accessorKey: 'id',\n    enableHiding: false, // disable hiding for this column\n  },\n  {\n    header: 'Name',\n    accessor: 'name', // can be hidden\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Specifying Header API Methods for Sizing in TypeScript\nDESCRIPTION: Defines TypeScript function signatures for header API methods related to sizing, including getSize, getStart, and getResizeHandler.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-sizing.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ngetSize: () => number\n\ngetStart: (position?: ColumnPinningPosition) => number\n\ngetResizeHandler: () => (event: unknown) => void\n```\n\n----------------------------------------\n\nTITLE: Get Unique Values Method Definition\nDESCRIPTION: Method to retrieve an array of unique values from the row for a specified column ID.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/row.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\ngetUniqueValues: (columnId: string) => TValue[]\n```\n\n----------------------------------------\n\nTITLE: Implementing nextPage Method\nDESCRIPTION: Defines the nextPage method that increments the page index by one, if possible.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nnextPage: () => void\n```\n\n----------------------------------------\n\nTITLE: Row Pinning Enable Option Definition\nDESCRIPTION: Defines the enableRowPinning option type that can be either a boolean or a function that determines if a row can be pinned.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-pinning.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nenableRowPinning?: boolean | ((row: Row<TData>) => boolean)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Header Groups in TSX\nDESCRIPTION: This method returns the header groups for the table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\ntype getHeaderGroups = () => HeaderGroup<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Filter Function Type Definitions\nDESCRIPTION: TypeScript type definitions for filter functions, including the main FilterFn type and supporting types for transform functions and auto-remove tests.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-filtering.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport type FilterFn<TData extends AnyData> = {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: any) => void\n  ): boolean\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n  addMeta?: (meta?: any) => void\n}\n\nexport type TransformFilterValueFn<TData extends AnyData> = (\n  value: any,\n  column?: Column<TData>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends AnyData> = (\n  value: any,\n  column?: Column<TData>\n) => boolean\n\nexport type CustomFilterFns<TData extends AnyData> = Record<\n  string,\n  FilterFn<TData>\n>\n```\n\n----------------------------------------\n\nTITLE: Defining Sorting State Types in TypeScript\nDESCRIPTION: Defines the TypeScript types for column sorting and sorting state in TanStack Table. These types are used to represent the current sorting configuration.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/sorting.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype ColumnSort = {\n  id: string\n  desc: boolean\n}\ntype SortingState = ColumnSort[]\n```\n\n----------------------------------------\n\nTITLE: Table Option manualSorting for TanStack Table\nDESCRIPTION: Defines the manualSorting table option, which enables manual sorting where the developer is expected to sort data before passing it to the table, useful for server-side sorting.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nmanualSorting?: boolean\n```\n\n----------------------------------------\n\nTITLE: Defining getCanGroup Column API in TypeScript\nDESCRIPTION: Specifies the getCanGroup method in the column API which returns whether the column can be grouped.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\ngetCanGroup: () => boolean\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components\nDESCRIPTION: Angular CLI command for generating new components and other Angular artifacts like directives, pipes, services, etc.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/grouping/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Table API - getIsSomePageRowsSelected\nDESCRIPTION: Returns a boolean indicating if some (but not all) rows on the current page are selected. Useful for determining indeterminate checkbox states.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-selection.md#2025-04-19_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsSomePageRowsSelected: () => boolean\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Executes the project's unit tests using the Karma test runner. This command runs all tests defined in the project's test files.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/sub-components/README.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Defining resetGrouping Table API in TypeScript\nDESCRIPTION: Specifies the resetGrouping method in the table API which resets the grouping state to initialState or to an empty array if true is passed.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nresetGrouping: (defaultState?: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Column Filter State Type Definition\nDESCRIPTION: TypeScript interface definition for column filter state structure.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/column-filtering.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ColumnFilter {\n  id: string\n  value: unknown\n}\ntype ColumnFiltersState = ColumnFilter[]\n```\n\n----------------------------------------\n\nTITLE: Implementing firstPage Method\nDESCRIPTION: Defines the firstPage method that sets the page index to 0 (the first page).\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nfirstPage: () => void\n```\n\n----------------------------------------\n\nTITLE: Getting Center Leaf Headers in TanStack Table\nDESCRIPTION: Shows the type definition for the getCenterLeafHeaders method, which returns headers for non-pinned leaf columns (not including parent headers).\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\ntype getCenterLeafHeaders = () => Header<TData, unknown>[]\n```\n\n----------------------------------------\n\nTITLE: Setting Table Options in TSX\nDESCRIPTION: This method is used to update the table options. It's generally used by adapters and not recommended for direct use to bypass the adapter's strategy for updating table options.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nsetOptions: (newOptions: Updater<TableOptions<TData>>) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Column Ordering State in TanStack Table\nDESCRIPTION: Defines the structure of column ordering state in TanStack Table. The state consists of a columnOrder property containing an array of column IDs (strings) that determine the order of columns.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-ordering.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type ColumnOrderTableState = {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n```\n\n----------------------------------------\n\nTITLE: Enabling Columns Debugging in TanStack Table\nDESCRIPTION: Definition of the debugColumns option which enables column-specific debugging information. This option is only available in development mode.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\ndebugColumns?: boolean\n```\n\n----------------------------------------\n\nTITLE: Defining aggregationFns Table Option in TypeScript\nDESCRIPTION: Specifies the aggregationFns table option which allows defining custom aggregation functions that can be referenced by name in column definitions.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\naggregationFns?: Record<string, AggregationFn>\n```\n\n----------------------------------------\n\nTITLE: Defining getIsGrouped Column API in TypeScript\nDESCRIPTION: Specifies the getIsGrouped method in the column API which returns whether the column is currently grouped.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsGrouped: () => boolean\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Development Server\nDESCRIPTION: Command to start the Angular development server which serves the application at localhost:4200 with auto-reload capability\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/signal-input/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Running Angular End-to-End Tests\nDESCRIPTION: Runs end-to-end tests for the Angular project. Note that a package implementing end-to-end testing capabilities must be added before using this command.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-pinning/README.md#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Getting Right Pinned Header Groups in TanStack Table\nDESCRIPTION: Shows the type definition for the getRightHeaderGroups method, which returns header groups for right pinned columns when using column pinning.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\ntype getRightHeaderGroups = () => HeaderGroup<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Defining getIsAggregated Cell API in TypeScript\nDESCRIPTION: Specifies the getIsAggregated method in the cell API which returns whether the cell is currently aggregated.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsAggregated: () => boolean\n```\n\n----------------------------------------\n\nTITLE: Getting Center Footer Groups in TanStack Table\nDESCRIPTION: Shows the type definition for the getCenterFooterGroups method, which returns footer groups for non-pinned columns when using column pinning.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\ntype getCenterFooterGroups = () => HeaderGroup<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Defining getPreGroupedRowModel Table API in TypeScript\nDESCRIPTION: Specifies the getPreGroupedRowModel method in the table API which returns the row model before any grouping has been applied.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\ngetPreGroupedRowModel: () => RowModel<TData>\n```\n\n----------------------------------------\n\nTITLE: Implementing getPageOptions Method\nDESCRIPTION: Defines the getPageOptions method that returns an array of page options (zero-index-based) for the current page size.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/pagination.md#2025-04-19_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\ngetPageOptions: () => number[]\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Development Server\nDESCRIPTION: Launches a development server for the Angular project. The server runs on http://localhost:4200/ and automatically reloads when source files are changed.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/sub-components/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Rendering Headers with flexRender in TanStack Table\nDESCRIPTION: Shows how to use the flexRender utility with the context from a header to render header components with your framework's template.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nflexRender(header.column.columnDef.header, header.getContext())\n```\n\n----------------------------------------\n\nTITLE: Defining getGroupedIndex Column API in TypeScript\nDESCRIPTION: Specifies the getGroupedIndex method in the column API which returns the index of the column in the grouping state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\ngetGroupedIndex: () => number\n```\n\n----------------------------------------\n\nTITLE: Running Angular Development Server\nDESCRIPTION: Command to start the Angular development server. The server will run on http://localhost:4200/ and automatically reload when source files are changed.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-ordering/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Row Selection Options - enableSubRowSelection\nDESCRIPTION: Option to enable or disable automatic selection of sub-rows when a parent row is selected. Useful with hierarchical data or when using expanding/grouping features.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-selection.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nenableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n```\n\n----------------------------------------\n\nTITLE: Running Angular Development Server\nDESCRIPTION: Starts a development server for the Angular project. The server will automatically reload when source files are changed.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/row-selection-signal/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Table Adapter\nDESCRIPTION: Command to install the Vue adapter for TanStack Table. Compatible with Vue 3.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/installation.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tanstack/vue-table\n```\n\n----------------------------------------\n\nTITLE: Installing Solid Table Adapter\nDESCRIPTION: Command to install the Solid-JS adapter for TanStack Table. Works with Solid-JS 1.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/installation.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tanstack/solid-table\n```\n\n----------------------------------------\n\nTITLE: Getting Right Pinned Footer Groups in TanStack Table\nDESCRIPTION: Shows the type definition for the getRightFooterGroups method, which returns footer groups for right pinned columns when using column pinning.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\ntype getRightFooterGroups = () => HeaderGroup<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Get Row Pin Status Method Definition\nDESCRIPTION: Defines the method type for getting a row's current pin position.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-pinning.md#2025-04-19_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\ngetIsPinned: () => RowPinningPosition\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Sorting State in TanStack Table\nDESCRIPTION: Demonstrates how to set an initial sorting state for TanStack Table using the initialState option, without controlling the state externally.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/sorting.md#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = useReactTable({\n  columns,\n  data,\n  //...\n  initialState: {\n    sorting: [\n      {\n        id: 'name',\n        desc: true, // sort by name in descending order by default\n      },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute unit tests using the Karma test runner\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/grouping/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Defining AggregationFn Type in TypeScript\nDESCRIPTION: Defines the type signature for aggregation functions in TanStack Table. Each function receives methods to access leaf and child rows and returns a value for the aggregated row model.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport type AggregationFn<TData extends AnyData> = (\n  getLeafRows: () => Row<TData>[],\n  getChildRows: () => Row<TData>[]\n) => any\n```\n\n----------------------------------------\n\nTITLE: Defining getToggleGroupingHandler Column API in TypeScript\nDESCRIPTION: Specifies the getToggleGroupingHandler method in the column API which returns a function that toggles the grouping state, useful for event handlers.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\ngetToggleGroupingHandler: () => () => void\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install all required npm dependencies for the project.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vue/column-pinning/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Command to build the Angular project and output the compiled files to the dist directory\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/signal-input/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte Table Adapter\nDESCRIPTION: Command to install the Svelte adapter for TanStack Table. Compatible with Svelte 3 and 4.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/installation.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tanstack/svelte-table\n```\n\n----------------------------------------\n\nTITLE: Column Meta Definition\nDESCRIPTION: Defines metadata association for the column that can be accessed via column.columnDef.meta.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/column-def.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nmeta?: ColumnMeta\n```\n\n----------------------------------------\n\nTITLE: Global Filter State Interface in TanStack Table\nDESCRIPTION: Defines the TypeScript interface for the global filter state object used by TanStack Table, showing its structure with a single property of any type.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/global-filtering.md#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\ninterface GlobalFilter {\n  globalFilter: any\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Other Artifacts\nDESCRIPTION: Uses Angular CLI to generate new components, directives, pipes, services, classes, guards, interfaces, enums, or modules.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-visibility/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\nLANGUAGE: bash\nCODE:\n```\nng generate directive|pipe|service|class|guard|interface|enum|module\n```\n\n----------------------------------------\n\nTITLE: Specifying Header Group Depth in TanStack Table (TSX)\nDESCRIPTION: This code defines the 'depth' property of a header group. It represents the depth of the header group in the hierarchy, using a zero-indexed number.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header-group.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ndepth: number\n```\n\n----------------------------------------\n\nTITLE: Defining groupingColumnId Row API in TypeScript\nDESCRIPTION: Specifies the groupingColumnId property in the row API which contains the ID of the column by which the row is grouped, if applicable.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\ngroupingColumnId?: string\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (NPM/Yarn)\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package manager.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vue/pagination/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Getting Header Context in TanStack Table\nDESCRIPTION: Shows the type definition for the getContext method, which returns rendering context for column-based components like headers, footers, and filters.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\ngetContext: () => {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Compiles the Angular project and creates production-ready files. The resulting build artifacts are stored in the 'dist/' directory.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/filters/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Other Structures\nDESCRIPTION: Uses the Angular CLI to generate new components, directives, pipes, services, classes, guards, interfaces, enums, or modules. This command simplifies the creation of Angular project structures.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/filters/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Retrieving Header Index in TanStack Table\nDESCRIPTION: Shows the type definition for the index property, which represents the position of the header within its header group.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nindex: number\n```\n\n----------------------------------------\n\nTITLE: Set Row Pinning Method Definition\nDESCRIPTION: Defines the method type for updating the row pinning state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-pinning.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nsetRowPinning: (updater: Updater<RowPinningState>) => void\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Command to build the Angular project with output artifacts stored in the dist directory.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-pinning-sticky/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Table Example\nDESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/column-dnd/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Defining groupingValue Row API in TypeScript\nDESCRIPTION: Specifies the groupingValue property in the row API which contains the shared value for the grouping column across all rows in this group.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\ngroupingValue?: any\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example (npm/yarn)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/lit/column-sizing/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Executes the unit tests for the Angular project using the Karma test runner. This command helps ensure the correctness of individual components and services.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/filters/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Keep Pinned Rows Option Definition\nDESCRIPTION: Defines the keepPinnedRows option type that determines if pinned rows remain visible when filtered or paginated.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-pinning.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nkeepPinnedRows?: boolean\n```\n\n----------------------------------------\n\nTITLE: Get Bottom Rows Method Definition\nDESCRIPTION: Defines the method type for retrieving bottom pinned rows.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-pinning.md#2025-04-19_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\ngetBottomRows: () => Row<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Running Angular Development Server\nDESCRIPTION: Command to start the Angular development server which serves the application at http://localhost:4200 with hot reload capability.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/row-dnd/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Table Example\nDESCRIPTION: Commands to install dependencies and start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/basic/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Defining manualGrouping Table Option in TypeScript\nDESCRIPTION: Specifies the manualGrouping table option which enables manual grouping, requiring the developer to manually group rows instead of using automatic grouping.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nmanualGrouping?: boolean\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/lit/virtualized-rows/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Accessing Row Object from Cell in TanStack Table\nDESCRIPTION: A property that provides access to the associated Row object for the cell, allowing access to row-level data and operations.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/cell.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nrow: Row<TData>\n```\n\n----------------------------------------\n\nTITLE: Accessing Angular CLI Help\nDESCRIPTION: Provides access to the Angular CLI help documentation, offering guidance on various CLI commands and their usage.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/filters/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Features to TanStack Table\nDESCRIPTION: Definition of the _features option which allows adding extra features to the table instance. This is used to extend table functionality.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n_features?: TableFeature[]\n```\n\n----------------------------------------\n\nTITLE: Getting All Headers (Including Parents) in TanStack Table\nDESCRIPTION: Shows the type definition for the getFlatHeaders method, which returns headers for all columns including parent headers.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\ntype getFlatHeaders = () => Header<TData, unknown>[]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Package Managers\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package manager.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/pagination/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Defining Global Filter Table State in TypeScript\nDESCRIPTION: This snippet shows the TypeScript interface for the global filter state in TanStack Table. It defines a single property 'globalFilter' of type 'any'.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/global-filtering.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface GlobalFilterTableState {\n  globalFilter: any\n}\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/svelte/basic/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Accessing Angular CLI Help\nDESCRIPTION: Command to display Angular CLI help information\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/signal-input/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Enabling Headers Debugging in TanStack Table\nDESCRIPTION: Definition of the debugHeaders option which enables header-specific debugging information. This option is only available in development mode.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\ndebugHeaders?: boolean\n```\n\n----------------------------------------\n\nTITLE: Installing React Table Adapter\nDESCRIPTION: Command to install the React adapter for TanStack Table. Works with React 16.8, 17, 18, and 19.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/installation.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tanstack/react-table\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (npm/yarn)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/custom-features/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Running Full Width Resizable Table Example with Yarn\nDESCRIPTION: Commands to install dependencies and start the example project using Yarn package manager.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/full-width-resizable-table/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn && yarn start\n```\n\n----------------------------------------\n\nTITLE: Header Group Management APIs\nDESCRIPTION: APIs for accessing different sections of pinned header groups\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-pinning.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ngetLeftHeaderGroups: () => HeaderGroup<TData>[]\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetCenterHeaderGroups: () => HeaderGroup<TData>[]\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetRightHeaderGroups: () => HeaderGroup<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/svelte/column-ordering/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Initial Table State\nDESCRIPTION: Demonstrates how to set custom initial state values for column order, visibility, expansion, and sorting.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/vue/guide/table-state.md#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = useVueTable({\n  columns,\n  data,\n  initialState: {\n    columnOrder: ['age', 'firstName', 'lastName'], //customize the initial column order\n    columnVisibility: {\n      id: false //hide the id column by default\n    },\n    expanded: true, //expand all rows by default\n    sorting: [\n      {\n        id: 'age',\n        desc: true //sort by age in descending order by default\n      }\n    ]\n  },\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Executes unit tests for the Angular project using Karma test runner.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-visibility/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Updating Table Hook Import\nDESCRIPTION: Changes required to update the import statement from react-table to @tanstack/react-table.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/migrating.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n- import { useTable } from 'react-table'\n+ import { useReactTable } from '@tanstack/react-table'\n```\n\n----------------------------------------\n\nTITLE: Original SubRows Property Definition\nDESCRIPTION: Optional property that stores the original sub-rows array as returned by the options.getSubRows option.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/row.md#2025-04-19_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\noriginalSubRows?: TData[]\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/virtualized-infinite-scrolling/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/pagination-controlled/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/svelte/column-ordering/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Qwik Project using npm/pnpm/yarn\nDESCRIPTION: This bash command installs the necessary dependencies for the Qwik project. It provides options for using npm, pnpm, or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/qwik/row-selection/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install # or pnpm install or yarn install\n```\n\n----------------------------------------\n\nTITLE: Installing Lit Table Adapter\nDESCRIPTION: Command to install the Lit adapter for TanStack Table. Works with Lit 3.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/installation.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tanstack/lit-table\n```\n\n----------------------------------------\n\nTITLE: Installing Angular Table Adapter\nDESCRIPTION: Command to install the Angular adapter for TanStack Table. Compatible with Angular 17, using Angular Signal implementation.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/installation.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tanstack/angular-table\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Dev Server with NPM/Yarn\nDESCRIPTION: Commands for installing project dependencies and starting the development server using either NPM or Yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vue/filters/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Example Project\nDESCRIPTION: Commands for starting the TanStack Table example project using either npm or yarn package manager.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/row-pinning/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Table Example with Package Managers\nDESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/svelte/filtering/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript State Types\nDESCRIPTION: Shows how to use TypeScript types for table states to ensure correct data structures.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/react/guide/table-state.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReactTable, type SortingState } from '@tanstack/react-table'\n//...\nconst [sorting, setSorting] = React.useState<SortingState[]>([\n  {\n    id: 'age', //you should get autocomplete for the `id` and `desc` properties\n    desc: true,\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/row-dnd/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vanilla/basic/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting TanStack Table Example\nDESCRIPTION: Commands for installing project dependencies and starting the example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/virtualized-rows-experimental/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for TanStack Table Example (Shell)\nDESCRIPTION: Commands to start the development server for the TanStack Table example using either npm or yarn.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vue/pagination-controlled/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (npm/yarn)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/solid/column-visibility/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Table Example\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn, followed by commands to start the example project with either package manager.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/virtualized-columns/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vanilla/sorting/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/column-pinning-sticky/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting TanStack Table Example\nDESCRIPTION: Commands for installing project dependencies and starting the example application using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/column-pinning/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Command to build the Angular project and output compiled files to the dist directory.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/expanding/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Updating Table Hook Implementation\nDESCRIPTION: Changes required to update the table hook implementation with new row models and feature imports.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/migrating.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n- import { useTable, usePagination, useSortBy } from 'react-table';\n+ import {\n+   useReactTable,\n+   getCoreRowModel,\n+   getPaginationRowModel,\n+   getSortedRowModel\n+ } from '@tanstack/react-table';\n\n// ...\n\n-   const tableInstance = useTable(\n-     { columns,  data },\n-     useSortBy,\n-     usePagination, //order of hooks used to matter\n-     // etc.\n-   );\n+   const tableInstance = useReactTable({\n+     columns,\n+     data,\n+     getCoreRowModel: getCoreRowModel(),\n+     getPaginationRowModel: getPaginationRowModel(),\n+     getSortedRowModel: getSortedRowModel(), //order doesn't matter anymore!\n+     // etc.\n+   });\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Package Managers\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/svelte/column-groups/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Package Managers\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/virtualized-rows/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/lit/filters/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Commands for starting the development server using either npm or yarn package manager.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/solid/column-groups/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (npm/yarn)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/lit/column-sizing/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests\nDESCRIPTION: Command to run end-to-end tests after setting up an E2E testing package\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/grouping/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/svelte/column-pinning/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Table Dependencies\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/grouping/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vue/pagination-controlled/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Table Example\nDESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/virtualized-columns-experimental/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute unit tests using the Karma test runner.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/row-dnd/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests\nDESCRIPTION: Command to run end-to-end tests using the configured testing platform\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/signal-input/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Defining groupedColumnMode Table Option in TypeScript\nDESCRIPTION: Specifies the groupedColumnMode table option which controls how grouped columns are handled in the columns list - reordered, removed, or left as-is.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/grouping.md#2025-04-19_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\ngroupedColumnMode?: false | 'reorder' | 'remove' // default: `reorder`\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vanilla/sorting/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example\nDESCRIPTION: This snippet shows the command to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/column-ordering/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: Shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Other Artifacts\nDESCRIPTION: Angular CLI command for generating new components, directives, pipes, services, classes, guards, interfaces, enums, or modules.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-ordering/README.md#2025-04-19_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/solid/basic/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Running Angular End-to-End Tests\nDESCRIPTION: Runs end-to-end tests for the Angular project. Note that a separate package for end-to-end testing capabilities must be installed before using this command.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/sub-components/README.md#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Get Pinned Index Method Definition\nDESCRIPTION: Defines the method type for getting a row's index within its pinned group.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-pinning.md#2025-04-19_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\ngetPinnedIndex: () => number\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running TanStack Table Example\nDESCRIPTION: Terminal commands for installing project dependencies using either npm or yarn, followed by commands to start the development server.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vue/grouping/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Qwik CSR Mode\nDESCRIPTION: Configuration setup for Vite to enable Client Side Rendering (CSR) mode in a Qwik application. This configuration enables full browser-side bootstrapping of the application.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/qwik/sorting/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  plugins: [\n    qwikVite({\n      csr: true,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Table Example\nDESCRIPTION: Commands for installing project dependencies and starting the example application using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/column-groups/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Table Example with Package Managers\nDESCRIPTION: Command line instructions for installing dependencies and starting the example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/lit/sorting-dynamic-data/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Shell)\nDESCRIPTION: Command to start the TanStack Table example project using either npm or yarn package manager.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/filters-faceted/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Other Artifacts\nDESCRIPTION: Uses Angular CLI to generate new components, directives, pipes, services, classes, guards, interfaces, enums, or modules. This command scaffolds the basic structure for the specified artifact type.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/sub-components/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nng generate component component-name\n```\n\nLANGUAGE: shell\nCODE:\n```\nng generate directive|pipe|service|class|guard|interface|enum|module\n```\n\n----------------------------------------\n\nTITLE: Running Angular End-to-End Tests\nDESCRIPTION: Executes end-to-end tests for the Angular project. Requires a package that implements end-to-end testing capabilities.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/row-selection-signal/README.md#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with Hot-Reload\nDESCRIPTION: Command to start the development server with hot-reload functionality enabled.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vue/column-ordering/README.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Column API getAutoSortDir Method for TanStack Table\nDESCRIPTION: Defines the getAutoSortDir method on the column API, which returns a sort direction automatically inferred based on the column's values.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\ngetAutoSortDir: () => SortDirection\n```\n\n----------------------------------------\n\nTITLE: Using Controlled State with Required State Property in Qwik\nDESCRIPTION: Demonstrates that when using onStateChange callbacks, you must provide the corresponding state value in the state option. Without this, the state will remain frozen at its initial value.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/qwik/guide/table-state.md#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst sorting = Qwik.useSignal([])\n//...\nconst table = useQwikTable({\n  columns,\n  data,\n  //...\n  state: {\n    sorting: sorting.value, //required because we are using `onSortingChange`\n  },\n  onSortingChange: updater => {\n    sorting.value = updater instanceof Function ? updater(sorting) : updater //makes the `state.sorting` controlled\n  }, \n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/row-selection/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/row-selection/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Accessing Placeholder ID in TanStack Table\nDESCRIPTION: Shows the type definition for the placeholderId property, which provides a unique ID for placeholder headers to avoid conflicts.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nplaceholderId?: string\n```\n\n----------------------------------------\n\nTITLE: Building Qwik Project for Production with npm\nDESCRIPTION: This bash command builds the Qwik application for production using npm. It creates a production-ready bundle in the 'dist' folder.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/qwik/row-selection/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Table Option enableMultiRemove for TanStack Table\nDESCRIPTION: Defines the enableMultiRemove table option, which enables or disables the ability to remove multi-sorts.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nenableMultiRemove?: boolean\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript State Types in Solid Table\nDESCRIPTION: Demonstrates how to import and use TypeScript types for table state in a Solid component. This provides type safety and autocompletion for state properties like sorting.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/solid/guide/table-state.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createSolidTable, type SortingState } from '@tanstack/solid-table'\n//...\nconst [sorting, setSorting] = createSignal<SortingState[]>([\n  {\n    id: 'age', //you should get autocomplete for the `id` and `desc` properties\n    desc: true,\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Table Example\nDESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/solid/column-ordering/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/bootstrap/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Command to execute unit tests using the Karma test runner.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/row-selection/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Implementing Render Function for Framework Adapters\nDESCRIPTION: Type definition for the render function used by framework adapters to render templates. This is only necessary when implementing a table adapter.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\ntype render = <TProps>(template: Renderable<TProps>, props: TProps) => any\n```\n\n----------------------------------------\n\nTITLE: Parent Row ID Definition\nDESCRIPTION: Optional property that stores the parent row's ID for nested row structures.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/row.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nparentId?: string\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/fully-controlled/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (npm/yarn)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/custom-features/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests\nDESCRIPTION: Command to run end-to-end tests using the configured testing platform.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/row-dnd/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Table Example\nDESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/svelte/column-visibility/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/solid/sorting/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Commands to start the development server using either npm or yarn package manager.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/query-router-search-params/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Table API resetSorting Method for TanStack Table\nDESCRIPTION: Defines the resetSorting method on the table API, which resets the sorting state to initial state or a default blank state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nresetSorting: (defaultState?: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/expanding/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the development server with hot-reload functionality.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vue/column-pinning/README.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example (npm/yarn)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/solid/filters/README.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `npm run start` or `yarn start`\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/fully-controlled/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Running Angular Development Server\nDESCRIPTION: Starts a development server for the Angular project. The application will be accessible at http://localhost:4200/ and will automatically reload on file changes.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-resizing-performant/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/solid/bootstrap/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/column-pinning-sticky/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Table Option enableSortingRemoval for TanStack Table\nDESCRIPTION: Defines the enableSortingRemoval table option, which controls whether sorting can be removed completely or only toggled between ascending and descending.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/sorting.md#2025-04-19_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nenableSortingRemoval?: boolean\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting TanStack Table Example\nDESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/lit/row-selection/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Executes unit tests for the Angular project using Karma test runner.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/row-selection-signal/README.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Dev Server in TanStack Table\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn, and starting the development server.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vue/sorting/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Example Project\nDESCRIPTION: Commands for starting the example project using either npm or yarn package manager\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/kitchen-sink/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Building for Production with Type Checking\nDESCRIPTION: Command to run type checking, compilation and minification for production deployment.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vue/column-ordering/README.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Executes the unit tests for the Angular project using Karma test runner.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-resizing-performant/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example App\nDESCRIPTION: Commands to start the example application using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/lit/filters/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Table Example\nDESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/column-sizing/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Getting Right Pinned Flat Headers in TanStack Table\nDESCRIPTION: Shows the type definition for the getRightFlatHeaders method, which returns headers for right pinned columns including parent headers.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\ntype getRightFlatHeaders = () => Header<TData, unknown>[]\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command line instructions for installing project dependencies using various package managers including npm, pnpm, or yarn.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/qwik/basic/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install # or pnpm install or yarn install\n```\n\n----------------------------------------\n\nTITLE: Getting Angular CLI Help\nDESCRIPTION: Command to access Angular CLI help documentation and information.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/expanding/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example (Shell)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/lit/virtualized-rows/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/pagination-controlled/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Table Example\nDESCRIPTION: Commands for installing dependencies and starting the development server. Users can choose between npm or yarn as their package manager.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vue/basic/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (npm/yarn)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/solid/filters/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `npm install` or `yarn`\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components\nDESCRIPTION: Angular CLI command for generating new components and other Angular artifacts like directives, pipes, services, etc\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/signal-input/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vanilla/pagination/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/sub-components/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Bash)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers. This step is necessary before running the example.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/editable-data/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Getting Left Pinned Footer Groups in TanStack Table\nDESCRIPTION: Shows the type definition for the getLeftFooterGroups method, which returns footer groups for left pinned columns when using column pinning.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/header.md#2025-04-19_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\ntype getLeftFooterGroups = () => HeaderGroup<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/solid/basic/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project\nDESCRIPTION: This snippet demonstrates the command to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/column-ordering/README.md#2025-04-19_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: Shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Other Artifacts\nDESCRIPTION: Uses Angular CLI to generate new components, directives, pipes, services, classes, guards, interfaces, enums, or modules. This command streamlines the creation of Angular artifacts.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-pinning/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nng generate component component-name\n```\n\nLANGUAGE: shell\nCODE:\n```\nng generate directive|pipe|service|class|guard|interface|enum|module\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Command to install project dependencies using either npm or yarn package manager.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/filters-faceted/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/sub-components/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Running TanStack Table Example Development Server (NPM/Yarn)\nDESCRIPTION: Commands for starting the development server using either npm or yarn package manager.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vue/pagination/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Package Managers\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package manager.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/solid/column-groups/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Command to build the Angular project. The build artifacts will be stored in the 'dist/' directory.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-ordering/README.md#2025-04-19_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Development Server\nDESCRIPTION: Launches a development server for the Angular project. The server will automatically reload when source files are changed.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/basic/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components\nDESCRIPTION: Commands for generating new Angular components and other artifacts using the CLI scaffolding feature.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/row-selection/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table example project (npm/yarn)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/filters-fuzzy/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vue/row-selection/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Reset Row Pinning Method Definition\nDESCRIPTION: Defines the method type for resetting the row pinning state to initial or default values.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-pinning.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nresetRowPinning: (defaultState?: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Bash)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/column-visibility/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Command to create a production build of the Angular application with output files in the dist directory.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/editable/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Development Server\nDESCRIPTION: Command to start the Angular development server on http://localhost:4200 with auto-reload capabilities\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/grouping/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Accessing Angular CLI Help\nDESCRIPTION: Displays help information for Angular CLI commands and options.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-resizing-performant/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/svelte/column-pinning/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for TanStack Table Example (Shell)\nDESCRIPTION: Commands to start the development server for the TanStack Table example using either npm or yarn.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vue/row-selection/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Bash)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/material-ui-pagination/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Accessing Angular CLI Help\nDESCRIPTION: Command to access the Angular CLI help documentation.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/row-selection/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Builds the Angular project for production. The built files will be stored in the 'dist/' directory.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-visibility/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute unit tests using the Karma test runner.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/editable/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Table Examples\nDESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/svelte/sorting/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Project\nDESCRIPTION: Command to install all required npm dependencies for the project.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vue/column-ordering/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Get Top Rows Method Definition\nDESCRIPTION: Defines the method type for retrieving top pinned rows.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/row-pinning.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\ngetTopRows: () => Row<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/expanding/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Getting Angular CLI Help\nDESCRIPTION: Command to access Angular CLI help documentation and reference.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/row-dnd/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests\nDESCRIPTION: Command to run end-to-end tests using the configured e2e testing platform.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/expanding/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Accessing Angular CLI Help\nDESCRIPTION: Provides access to Angular CLI help documentation and command reference.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/row-selection-signal/README.md#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (npm/yarn)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/solid/column-visibility/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Starting the Example Application\nDESCRIPTION: Commands for starting the example application using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/svelte/column-groups/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/column-resizing-performant/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Running Angular End-to-End Tests\nDESCRIPTION: Executes end-to-end tests for the Angular project. Note that a separate package for end-to-end testing capabilities must be installed before using this command.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/filters/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute unit tests using the Karma test runner\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/signal-input/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Building Production Bundle\nDESCRIPTION: Command to type-check, compile and minify the project for production deployment.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vue/column-pinning/README.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting TanStack Table Example\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers, followed by commands to start the example application.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/lit/sorting/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Accessing Angular CLI Help\nDESCRIPTION: Displays help information for Angular CLI. This command provides quick access to documentation and usage instructions for Angular CLI commands.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-pinning/README.md#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Development Server\nDESCRIPTION: Command to start the local development server that serves the Angular application on port 4200 with auto-reload capability.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/editable/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/virtualized-infinite-scrolling/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components\nDESCRIPTION: Angular CLI command for generating new components and other Angular artifacts including directives, pipes, services, classes, guards, interfaces, enums, and modules.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/row-dnd/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Table Example\nDESCRIPTION: Commands for installing dependencies and starting the development server using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vue/virtualized-rows/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Development Server\nDESCRIPTION: Command to start the Angular development server which serves the application on localhost:4200 with auto-reload capabilities.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/expanding/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Builds the Angular project for production. The compiled files will be stored in the 'dist/' directory.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-resizing-performant/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Package Managers\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package manager.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/query-router-search-params/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Running Angular Development Server\nDESCRIPTION: Starts a development server for the Angular project. The server will automatically reload when source files are changed.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-visibility/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Starting the Example Project\nDESCRIPTION: Commands for starting the example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/lit/basic/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Builds the Angular project and outputs the build artifacts to the 'dist/' directory. This command is used to create a production-ready version of the application.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-pinning/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Accessing Angular CLI Help\nDESCRIPTION: Displays help information for Angular CLI commands and options.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/basic/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Command to execute unit tests using the Karma test runner.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/expanding/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Package Managers\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/filters/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Getting Angular CLI Help\nDESCRIPTION: Command to access Angular CLI help documentation\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/grouping/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vanilla/pagination/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Builds the Angular project for production. The compiled files are output to the 'dist/' directory, ready for deployment.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/sub-components/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests\nDESCRIPTION: Command to run end-to-end tests using the configured testing platform.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-pinning-sticky/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install the necessary dependencies for the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/sorting/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Qwik CSR Mode in TypeScript\nDESCRIPTION: This snippet shows how to configure Vite for a Qwik project in Client Side Rendering (CSR) mode. It uses the qwikVite plugin with the csr option set to true.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/qwik/row-selection/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  plugins: [\n    qwikVite({\n      csr: true,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Qwik Project\nDESCRIPTION: Command line instructions for installing project dependencies using various package managers including npm, pnpm, or yarn.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/qwik/sorting/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install # or pnpm install or yarn install\n```\n\n----------------------------------------\n\nTITLE: Running Angular End-to-End Tests\nDESCRIPTION: Command to execute end-to-end tests. Requires a package that implements end-to-end testing capabilities to be added first.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-ordering/README.md#2025-04-19_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Accessing Angular CLI Help\nDESCRIPTION: Command to get help information about Angular CLI usage and commands.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-pinning-sticky/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests\nDESCRIPTION: Command to execute end-to-end tests using the configured testing platform.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/row-selection/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/svelte/basic/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Qwik Project in Bash\nDESCRIPTION: This bash command installs the necessary dependencies for the Qwik project. It provides options for using npm, pnpm, or yarn as the package manager.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/qwik/filters/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install # or pnpm install or yarn install\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests\nDESCRIPTION: Command to run end-to-end tests using the configured testing platform.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/editable/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Running Angular End-to-End Tests\nDESCRIPTION: Runs end-to-end tests for the Angular project. Note that a package implementing end-to-end testing capabilities must be added first.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-resizing-performant/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/solid/bootstrap/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Building Qwik Project for Production in Bash\nDESCRIPTION: This bash command builds the Qwik app for production. It creates optimized files in the 'dist' folder, ready for deployment.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/qwik/filters/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Angular CLI\nDESCRIPTION: Command to access Angular CLI help documentation directly from the command line.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-ordering/README.md#2025-04-19_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Accessing Angular CLI Help\nDESCRIPTION: Command to display Angular CLI help information and documentation.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/editable/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Running Angular End-to-End Tests\nDESCRIPTION: Executes end-to-end tests for the Angular project. Requires a package that implements end-to-end testing capabilities.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-visibility/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example\nDESCRIPTION: Commands for starting the example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/grouping/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Builds the Angular project and stores the output in the 'dist/' directory.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/basic/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Angular CLI\nDESCRIPTION: Displays help information for Angular CLI commands and options.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-visibility/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Running Angular End-to-End Tests\nDESCRIPTION: Executes end-to-end tests for the Angular project using a platform of choice. Requires a package that implements end-to-end testing capabilities.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/basic/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/bootstrap/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Executes the unit tests for the Angular project using the Karma test runner. This command is essential for maintaining code quality and catching regressions.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-pinning/README.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Command to build the Angular project with output files stored in the dist directory.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/row-selection/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Table example project after installing dependencies, using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/sorting/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components\nDESCRIPTION: CLI command for generating new Angular components and other artifacts like directives, pipes, services, etc.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-pinning-sticky/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for TanStack Table example (npm/yarn)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/filters-fuzzy/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Features\nDESCRIPTION: Angular CLI command for scaffolding new application features including components, directives, pipes, services, and other artifacts.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/editable/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Other Artifacts\nDESCRIPTION: Uses Angular CLI to generate new components, directives, pipes, services, classes, guards, interfaces, enums, or modules. Replace 'component-name' with the desired name of your component.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-resizing-performant/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Package Managers\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/lit/basic/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Command to build the Angular project with output to the dist directory\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/grouping/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Qwik CSR Mode in TypeScript\nDESCRIPTION: This snippet shows how to configure Vite for a Qwik project in Client Side Rendering (CSR) mode. It uses the qwikVite plugin with the csr option set to true.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/qwik/filters/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  plugins: [\n    qwikVite({\n      csr: true,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Development Server\nDESCRIPTION: Command to start the local development server on http://localhost:4200/ with auto-reload capability.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/row-selection/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Creating an Angular Table with createAngularTable\nDESCRIPTION: Demonstrates how to use the createAngularTable function to create a table instance in an Angular component. It uses signals for reactive data management.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/angular/angular-table.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createAngularTable} from '@tanstack/angular-table'\n\nexport class AppComponent {\n  data = signal<Person[]>([])\n\n  table = createAngularTable(() => ({\n    data: this.data(),\n    columns: defaultColumns,\n    getCoreRowModel: getCoreRowModel(),\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Qwik CSR Mode\nDESCRIPTION: Configuration setup for Vite to enable Client Side Rendering mode in a Qwik application. This configuration uses the qwikVite plugin with CSR flag enabled.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/qwik/basic/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  plugins: [\n    qwikVite({\n      csr: true,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: React Component with Unstable References (Anti-Pattern)\nDESCRIPTION: Example of a React component that incorrectly initializes data and columns without stable references, which will cause infinite re-renders.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/data.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function MyComponent() {\n  //😵 BAD: This will cause an infinite loop of re-renders because `columns` is redefined as a new array on every render!\n  const columns = [\n    // ...\n  ];\n\n  //😵 BAD: This will cause an infinite loop of re-renders because `data` is redefined as a new array on every render!\n  const data = [\n    // ...\n  ];\n\n  //❌ Columns and data are defined in the same scope as `useReactTable` without a stable reference, will cause infinite loop!\n  const table = useReactTable({\n    columns,\n    data ?? [], //❌ Also bad because the fallback array is re-created on every render\n  });\n\n  return <table>...</table>;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example (Bash)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn. This will run the example after dependencies have been installed.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/editable-data/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Running Qwik Development Server in Bash\nDESCRIPTION: This bash command starts the development server for the Qwik project. It runs the app in development mode and makes it accessible at http://localhost:5173.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/qwik/filters/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/row-dnd/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Bash)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/material-ui-pagination/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Running Qwik Development Server with npm\nDESCRIPTION: This bash command starts the Qwik application in development mode using npm. It runs the app on http://localhost:5173.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/qwik/row-selection/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Package Managers\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package manager.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/row-pinning/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components\nDESCRIPTION: Uses Angular CLI to generate new components or other Angular artifacts. This command can create various types of elements in the project structure.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/row-selection-signal/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Commands for starting the development server using either npm or yarn package manager.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/pagination/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Defining setColumnFilters Method in TanStack Table API (TSX)\nDESCRIPTION: This method sets or updates the state.columnFilters state in the TanStack Table API.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/features/column-filtering.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nsetColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/column-resizing-performant/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Commands for starting the development server using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/filters/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Get Leaf Rows Method Definition\nDESCRIPTION: Method to retrieve all leaf rows, excluding parent rows.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/row.md#2025-04-19_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\ntype getLeafRows = () => Row<TData>[]\n```\n\n----------------------------------------\n\nTITLE: Starting the Example Project\nDESCRIPTION: Commands for starting the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/virtualized-rows/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Package Managers\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package manager\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/kitchen-sink/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Development Server\nDESCRIPTION: Commands to install project dependencies using npm or yarn, and start the development server.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vue/sub-components/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Bash)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/react/column-visibility/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Table Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/solid/sorting/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Building Angular Application\nDESCRIPTION: Command to build the Angular application with production optimizations. Output is stored in the dist directory.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/row-dnd/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Table Example Project\nDESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/vanilla/basic/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Builds the Angular project for production. The compiled files will be stored in the 'dist/' directory.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/row-selection-signal/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Running Angular Development Server\nDESCRIPTION: Command to start the Angular development server that runs on http://localhost:4200 with auto-reload capability.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-pinning-sticky/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Enabling Rows Debugging in TanStack Table\nDESCRIPTION: Definition of the debugRows option which enables row-specific debugging information. This option is only available in development mode.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/api/core/table.md#2025-04-19_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\ndebugRows?: boolean\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute unit tests using the Karma test runner.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-pinning-sticky/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Development Server\nDESCRIPTION: Runs the Angular development server and provides the local URL for accessing the application. The server automatically reloads when source files are changed.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-pinning/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Server-Side Global Filtering in React Table\nDESCRIPTION: Sets up a table instance with manual filtering enabled, indicating that server-side filtering is being used and the table should not apply client-side filtering logic to the data.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/global-filtering.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = useReactTable({\n  data,\n  columns,\n  // getFilteredRowModel: getFilteredRowModel(), // not needed for manual server-side global filtering\n  manualFiltering: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Command to execute unit tests using Karma test runner.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/column-ordering/README.md#2025-04-19_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Executes unit tests for the Angular project using Karma test runner.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/basic/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Header Selection Component\nDESCRIPTION: Demonstrates how to create a custom header selection component that uses the table context to manage row selection state.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/framework/angular/angular-table.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  template: `\n    <input\n      type=\"checkbox\"\n      [checked]=\"table().getIsAllRowsSelected()\"\n      [indeterminate]=\"table().getIsSomeRowsSelected()\"\n      (change)=\"table().toggleAllRowsSelected()\"\n    />\n  `,\n  // ...\n})\nexport class TableHeadSelectionComponent<T> {\n  //column = input.required<Column<T, unknown>>()\n  //header = input.required<Header<T, unknown>>()\n  table = input.required<Table<T>>()\n}\n```\n\n----------------------------------------\n\nTITLE: Running Angular Development Server\nDESCRIPTION: Starts the Angular development server and provides the local URL for accessing the application. The server supports automatic reloading on file changes.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/filters/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Accessing Angular CLI Help\nDESCRIPTION: Displays help information for Angular CLI commands and options. This command provides quick access to documentation and usage instructions for the CLI.\nSOURCE: https://github.com/TanStack/table/blob/main/examples/angular/sub-components/README.md#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Updating Filter Functions Signature\nDESCRIPTION: Changes required to update custom filter functions with new function signature.\nSOURCE: https://github.com/TanStack/table/blob/main/docs/guide/migrating.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n- (rows: Row[], id: string, filterValue: any) => Row[]\n+ (row: Row, id: string, filterValue: any) => boolean\n```"
  }
]