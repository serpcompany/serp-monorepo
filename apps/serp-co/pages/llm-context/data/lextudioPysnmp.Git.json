[
  {
    "owner": "lextudio",
    "repo": "pysnmp.git",
    "content": "TITLE: Querying SNMP Table Entry in Python using PySNMP\nDESCRIPTION: This snippet demonstrates how to query an SNMP table entry (ifDescr) using PySNMP's ObjectIdentity class. It shows how to construct the OID for a specific table row.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> x = ObjectIdentity('IF-MIB', 'ifDescr', 123)\n>>> # ... calling MIB lookup ...\n>>> str(x)\n'1.3.6.1.2.1.2.2.1.2.123'\n```\n\n----------------------------------------\n\nTITLE: Asynchronous SNMP GETBULK Walk Operation with PySNMP in Python\nDESCRIPTION: This script demonstrates how to perform an asynchronous SNMP walk operation using the GETBULK command with PySNMP's high-level API. It retrieves SNMP data from a remote agent, continuing until the end of the MIB is reached.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v1arch/asyncio/manager/cmdgen/walking-operations.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"  #\nFetch whole SNMP table at once using GETBULK operation.\n\nSend a series of SNMP GETBULK requests using the following options:\n\n* with SNMPv2c, community 'public'\n* over IPv4/UDP\n* to an Agent at demo.snmplabs.com:161\n* for all OIDs within 1.3.6.1.2.1.1 (sysDescr)\n* run till end-of-mib condition is reported by Agent\n* based on asyncio I/O framework\n\nAsynchronous Python 3.5+ code\n\nThis script performs similar to the following Net-SNMP command:\n\n| $ snmpbulkwalk -v2c -c public -Cr50 demo.snmplabs.com 1.3.6.1.2.1.1\n\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing SNMP Table in PySNMP using AsyncIO\nDESCRIPTION: Example demonstrating how to implement an SNMP table in a PySNMP agent using the AsyncIO architecture. The code shows how to create and manage tabular data structures in SNMP.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/v3arch/asyncio/agent/cmdrsp/agent-side-mib-implementations.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Agent-side MIB implementation\n```\n\n----------------------------------------\n\nTITLE: Performing SNMPv2c/v3 GETBULK Operation with PySNMP Asyncio\nDESCRIPTION: This snippet shows how to perform an SNMPv2c/v3 GETBULK operation using PySNMP's asyncio-based high-level API. It retrieves multiple OIDs from the IF-MIB::ifTable with specified non-repeaters and max-repetitions.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v3arch/asyncio/manager/cmdgen/snmp-versions.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# GETBULK with limits on variable-bindings and rows\n#\n# Perform SNMP GETBULK operation using the following options:\n#\n# * with SNMPv2c\n# * with community name 'public'\n# * over IPv4/UDP\n# * to an Agent at localhost:161\n# * for some columns of the IF-MIB::ifTable table\n# * with non-repeaters=0 and max-repetitions=25\n# * stop when response OIDs leave the scop of the table\n#\n# This script performs similar to the following Net-SNMP command:\n#\n# $ snmpbulkget -v2c -c public -Cn0 -Cr25 -ObentU localhost:161 1.3.6.1.2.1.2.2.1.2 1.3.6.1.2.1.2.2.1.3\n\nfrom pysnmp.hlapi.v3arch.asyncio import *\n\nasync def run():\n    snmpEngine = SnmpEngine()\n    \n    await getbulk(\n        snmpEngine,\n        CommunityData('public'),\n        UdpTransportTarget(('localhost', 161)),\n        ContextData(),\n        0, 25,\n        ObjectType(ObjectIdentity('IF-MIB', 'ifTable')),\n        lexicographicMode=False,\n        lookupMib=True\n    )\n\n    snmpEngine.transportDispatcher.closeDispatcher()\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.run(run())\n\n```\n\n----------------------------------------\n\nTITLE: Multiple Concurrent SNMP Queries Over IPv4 and IPv6 Using PySNMP and asyncio\nDESCRIPTION: Demonstrates how to perform multiple concurrent SNMP GET queries over both IPv4 and IPv6 using PySNMP's high-level API with asyncio. The script queries multiple devices simultaneously and processes their responses asynchronously.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v1arch/asyncio/manager/cmdgen/advanced-topics.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# This script performs concurrent SNMP GET operations using asyncio\n\nimport asyncio\nfrom pysnmp.hlapi.v1arch.asyncio import (\n    getCmd, SnmpDispatcher, CommunityData, UdpTransportTarget,\n    UdpTransportTarget6, ContextData, SnmpEngine, ObjectType,\n    ObjectIdentity\n)\n\n# List of targets in (transport, community) format\ntargets = [\n    (UdpTransportTarget(('demo.snmplabs.com', 161)), CommunityData('public')),\n    (UdpTransportTarget(('demo.snmplabs.com', 1161)), CommunityData('public')),\n    (UdpTransportTarget6(('::1', 161)), CommunityData('public'))\n]\n\n# Multiple OIDs to query\nobjectIdentities = [\n    ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0),\n    ObjectIdentity('SNMPv2-MIB', 'sysLocation', 0)\n]\n\n\nasync def getone(snmpEngine, transport, community):\n    errorIndication, errorStatus, errorIndex, varBinds = await getCmd(\n        snmpEngine,\n        community,\n        transport,\n        ContextData(),\n        *[ObjectType(x) for x in objectIdentities]\n    )\n\n    if errorIndication or errorStatus:\n        print(transport.getLocalAddress(),\n              errorIndication or errorStatus.prettyPrint())\n    else:\n        for varBind in varBinds:  # SNMP response contents\n            print(' = '.join([str(x) for x in varBind]))\n\n\nasync def run():\n    # Create and pass a separate SNMP engine for each task\n    tasks = []\n    for transport, community in targets:\n        snmpEngine = SnmpEngine()\n        tasks.append(getone(snmpEngine, transport, community))\n\n    # Run all SNMP queries asynchronously\n    await asyncio.gather(*tasks)\n\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(run())\nloop.close()\n```\n\n----------------------------------------\n\nTITLE: Configuring SNMP Agent with Multiple USM Users using PySNMP and asyncio in Python\nDESCRIPTION: This script sets up an SNMP agent with multiple USM users, each with different authentication and privacy protocols. It uses the PySNMP library and asyncio for asynchronous operation. The agent is configured to listen on UDP port 161 and respond to SNMP GET/GETNEXT/GETBULK queries.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/v3arch/asyncio/agent/cmdrsp/snmp-versions.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# SNMP agent with multiple USM users\n\nfrom pysnmp.entity import engine, config\nfrom pysnmp.entity.rfc3413 import cmdrsp, context\nfrom pysnmp.carrier.asyncio.dgram import udp\nfrom pysnmp.proto import api\nfrom pysnmp.proto.api import v2c\n\nimport asyncio\n\n# Create SNMP engine\nsnmpEngine = engine.SnmpEngine()\n\n# Transport setup\n\n# UDP over IPv4\nconfig.addTransport(\n    snmpEngine,\n    udp.domainName,\n    udp.UdpTransport().openServerMode(('localhost', 161))\n)\n\n# SNMPv3/USM setup\n\n# user: usr-md5-des, auth: MD5, priv DES\nconfig.addV3User(\n    snmpEngine,\n    'usr-md5-des',\n    config.usmHMACMD5AuthProtocol, 'authkey1',\n    config.usmDESPrivProtocol, 'privkey1'\n)\n\n# user: usr-sha-none, auth: SHA, priv NONE\nconfig.addV3User(\n    snmpEngine,\n    'usr-sha-none',\n    config.usmHMACSHAAuthProtocol, 'authkey1'\n)\n\n# user: usr-sha-aes128, auth: SHA, priv AES\nconfig.addV3User(\n    snmpEngine,\n    'usr-sha-aes128',\n    config.usmHMACSHAAuthProtocol, 'authkey1',\n    config.usmAesCfb128Protocol, 'privkey1'\n)\n\n# Allow full MIB access for each user at VACM\nconfig.addVacmUser(snmpEngine, 3, 'usr-md5-des', 'authPriv', (1, 3, 6, 1, 2, 1), (1, 3, 6, 1, 2, 1))\nconfig.addVacmUser(snmpEngine, 3, 'usr-sha-none', 'authNoPriv', (1, 3, 6, 1, 2, 1), (1, 3, 6, 1, 2, 1))\nconfig.addVacmUser(snmpEngine, 3, 'usr-sha-aes128', 'authPriv', (1, 3, 6, 1, 2, 1), (1, 3, 6, 1, 2, 1))\n\n# Get default SNMP context this SNMP engine serves\nsnmpContext = context.SnmpContext(snmpEngine)\n\n# Register SNMP Applications at the SNMP engine for particular SNMP context\ncmdrsp.GetCommandResponder(snmpEngine, snmpContext)\ncmdrsp.NextCommandResponder(snmpEngine, snmpContext)\ncmdrsp.BulkCommandResponder(snmpEngine, snmpContext)\n\n# Register an imaginary never-ending job to keep I/O dispatcher running forever\nasync def run():\n    while True:\n        await asyncio.sleep(1)\n\nloop = asyncio.get_event_loop()\nloop.create_task(run())\n\n# Run I/O dispatcher which would receive queries and send responses\nloop.run_forever()\n```\n\n----------------------------------------\n\nTITLE: Listening on IPv4 and IPv6 Interfaces for SNMP Notifications using asyncio and PySNMP\nDESCRIPTION: This code demonstrates how to configure a SNMP manager to listen for notifications on both IPv4 and IPv6 interfaces simultaneously using PySNMP's asyncio interface. The example shows how to set up transport dispatchers for both IP protocols and handle incoming SNMP notifications asynchronously.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/v1arch/asyncio/manager/ntfrcv/transport-tweaks.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\n#\n# Listen and receive SNMP TRAP/INFORM messages over both IPv4 and\n# IPv6 transports in asyncio paradigm.\n#\n# This script can receive both TRAP and INFORM SNMP notifications from\n# IPv4 and IPv6 sources at once.\n#\n# Try to run this script and send TRAP/INFORM using snmptrap or\n# snmpinform utilities like this (assuming net-snmp on the other end):\n#\n# $ snmptrap -v2c -c public 127.0.0.1:162 123 1.3.6.1.6.3.1.1.5.1\n# $ snmptrap -v2c -c public udp6:[::1]:162 123 1.3.6.1.6.3.1.1.5.1\n# $ snmpinform -v2c -c public 127.0.0.1:162 123 1.3.6.1.6.3.1.1.5.1\n# $ snmpinform -v2c -c public udp6:[::1]:162 123 1.3.6.1.6.3.1.1.5.1\n#\n# As PySNMP is capable of General PDU processing for both TRAP and\n# INFORM notifications, TRAP's are responded with TRAP acknowledgement,\n# INFORM's with INFORM response PDUs.\n#\nfrom pysnmp.carrier.asyncio.dispatch import AsyncioDispatcher\nfrom pysnmp.carrier.asyncio.dgram import udp, udp6\nfrom pysnmp.proto import api\nfrom pysnmp import debug\n\n# debug.setLogger(debug.Debug('all'))\n\n# Create SNMP engine\nsnmpEngine = api.SnmpEngine()\n\n# Transport setup\n\n# UDP over IPv4, first listening interface/port\nconfig = udp.UdpTransport().openServerMode(('127.0.0.1', 162))\nsnmpEngine.registerTransport(udp.DOMAIN_NAME, config)\n\n# UDP over IPv6, second listening interface/port\nconfig = udp6.Udp6Transport().openServerMode(('::1', 162))\nsnmpEngine.registerTransport(udp6.DOMAIN_NAME, config)\n\n# SNMPv1/2c setup\n\n# SecurityName <-> CommunityName mapping\nconfig = api.CommunityData('public', 'public')\nsnmpEngine.registerCommunityData(config)\n\n# Callback function for receiving notifications\n\n\ndef cbFun(snmpEngine, stateReference, contextEngineId, contextName,\n          varBinds, cbCtx):\n    print('Notification from ContextEngineId \"%s\", ContextName \"%s\"' %\n          (contextEngineId.prettyPrint(), contextName.prettyPrint()))\n    for name, val in varBinds:\n        print('%s = %s' % (name.prettyPrint(), val.prettyPrint()))\n\n\n# Register SNMP Application at the SNMP engine\ncmd = api.CommandResponderData(snmpEngine, cbFun)\nsnmpEngine.registerCmdResp(cmd)\n\n# Run I/O dispatcher which would receive queries and send responses\nasyncoDispatcher = AsyncioDispatcher()\nasyncoDispatcher.registerTransport(\n    udp.DOMAIN_NAME, udp.UdpAsyncioProtocol())\nasyncoDispatcher.registerTransport(\n    udp6.DOMAIN_NAME, udp6.Udp6AsyncioProtocol())\nasyncoDispatcher.registerRecvCbFun(snmpEngine.receiveMessage)\nasyncioLoop = asyncioDispatcher.getEventLoop()\n\ntransport = asyncioDispatcher.getTransport(udp.DOMAIN_NAME)\nprint('Listening at %s' % (transport.getLocalAddress(), ))\n\ntransport = asyncioDispatcher.getTransport(udp6.DOMAIN_NAME)\nprint('Listening at %s' % (transport.getLocalAddress(), ))\n\nasyncioLoop.run_forever()\n```\n\n----------------------------------------\n\nTITLE: Sending SNMP Informs over IPv4 and IPv6 using pysnmp\nDESCRIPTION: This code snippet shows how to configure and send SNMP informs over both IPv4 and IPv6 networks using pysnmp. It sets up the SNMP engine, configures transport settings, and sends inform notifications asynchronously.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/v1arch/asyncio/agent/ntforg/transport-tweaks.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Send SNMP INFORM via IPv4/UDP\nconfig.addTransport(\n    snmpEngine,\n    udp.domainName,\n    udp.UdpTransport().openClientMode()\n)\n\n# Send SNMP INFORM via IPv6/UDP\nconfig.addTransport(\n    snmpEngine,\n    udp6.domainName,\n    udp6.Udp6Transport().openClientMode()\n)\n\n# Setup transport endpoint addresses\nconfig.addTargetAddr(\n    snmpEngine, 'my-nms-1',\n    udp.domainName, ('104.236.166.95', 162),\n    'my-creds', timeout=6, retryCount=2\n)\nconfig.addTargetAddr(\n    snmpEngine, 'my-nms-2',\n    udp6.domainName, ('::1', '162'),\n    'my-creds', timeout=6, retryCount=2\n)\n\n# Setup notification targets\nconfig.addNotificationTarget(\n    snmpEngine, 'my-notify', 'my-filter', 'my-nms-1', 'my-inform'\n)\nconfig.addNotificationTarget(\n    snmpEngine, 'my-notify', 'my-filter', 'my-nms-2', 'my-inform'\n)\n\n# Specify what kind of notification should be sent (TRAP or INFORM)\nconfig.addContext(snmpEngine, '')\nconfig.addVacmUser(snmpEngine, 2, 'my-user', 'noAuthNoPriv', (), ())\n\n# Create Notification Originator\nntfOrg = ntforg.NotificationOriginator(snmpContext)\n\n# Build and submit notification message to dispatcher\nntfOrg.sendVarBinds(\n    snmpEngine,\n    'my-notify',  # notification targets\n    None, '',  # contextEngineId, contextName\n    # var-binds\n    [\n        ('1.3.6.1.2.1.1.3.0', v2c.TimeTicks(12039208)),\n        ('1.3.6.1.6.3.1.1.5.1', v2c.ObjectIdentifier('1.3.6.1.6.3.1.1.5.1')),\n        ('1.3.6.1.2.1.2.2.1.1.123', v2c.Integer(123)),\n        ('1.3.6.1.2.1.2.2.1.7.123', v2c.Integer(1)),\n        ('1.3.6.1.2.1.2.2.1.8.123', v2c.Integer(1))\n    ]\n)\n\nsnmpEngine.transportDispatcher.runDispatcher()\n```\n\n----------------------------------------\n\nTITLE: Configuring MIB Viewer and Resolving PDU VarBinds in PySNMP\nDESCRIPTION: This script demonstrates how to configure a MIB viewer and resolve PDU variable bindings using PySNMP. It shows the process of loading MIB files, creating a MIB viewer, and resolving OIDs to human-readable form.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/smi/manager/browsing-mib-tree.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pysnmp.smi import builder, view, compiler, rfc1902\n\nmibBuilder = builder.MibBuilder()\nmibViewController = view.MibViewController(mibBuilder)\n\ncompiler.addMibCompiler(mibBuilder, sources=['file:///usr/share/snmp/mibs',\n                                              'http://mibs.snmplabs.com/asn1/@mib@'])\n\nmibBuilder.loadModules('SNMPv2-MIB', 'SNMP-COMMUNITY-MIB')\n\noid = rfc1902.ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0)\noid.resolveWithMib(mibViewController)\nprint(oid.prettyPrint())\n\nproto = rfc1902.Integer(123)\nproto.resolveWithMib(mibViewController)\nprint(proto.prettyPrint())\n\nvb = rfc1902.ObjectType(rfc1902.ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0), 'Linux i386')\nvb.resolveWithMib(mibViewController)\nprint(vb.prettyPrint())\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple SNMP Contexts in PySNMP using AsyncIO\nDESCRIPTION: Example demonstrating how to implement multiple SNMP contexts in a PySNMP agent using the AsyncIO architecture. This shows how to separate MIB trees into different logical contexts.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/v3arch/asyncio/agent/cmdrsp/agent-side-mib-implementations.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Agent-side MIB implementation\n```\n\n----------------------------------------\n\nTITLE: Performing SNMP GET Operation in Python using PySNMP\nDESCRIPTION: This snippet demonstrates how to perform an SNMP GET operation using PySNMP's high-level API. It retrieves the tcpConnectionState for a specific TCP connection.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> from pysnmp.hlapi.v3arch.asyncio import *\n>>>\n>>> g = await get_cmd(SnmpEngine(),\n...            CommunityData('public'),\n...            await UdpTransportTarget.create(('demo.pysnmp.com', 161)),\n...            ContextData(),\n...            ObjectType(ObjectIdentity('TCP-MIB', 'tcpConnectionState',\n...                                      'ipv4', '195.218.254.105', 41511,\n...                                      'ipv4', '194.67.1.250', 993)\n>>> g\n(None, 0, 0, [ObjectType(ObjectIdentity(ObjectName('1.3.6.1.2.1.6.19.1.7.1.4.195.218.254.105.41511.1.4.194.67.1.250.993')), Integer(5))])\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple SNMP Traps at Once with PySNMP and asyncio in Python\nDESCRIPTION: This code demonstrates how to send multiple SNMP trap notifications concurrently using PySNMP's asyncio-based high-level API. It creates SNMPv3 authenticated trap notifications directed to multiple managers.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v3arch/asyncio/agent/ntforg/advanced-topics.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Send multiple TRAP notifications at once using asyncio.\n#\n# Here we send the same TRAP to multiple Managers at once.\n# We do this by building a list of coroutines and scheduling\n# them for execution via asyncio.gather()\n\nfrom pysnmp.hlapi.v3arch.asyncio import *\n\nasync def run():\n    snmpEngine = SnmpEngine()\n\n    # Define list of targets\n    targets = [\n        (\n            UdpTransportTarget(('demo.snmplabs.com', 162)),\n            CommunityData('public')\n        ),\n        (\n            Udp6TransportTarget(('::1', 162)),\n            CommunityData('public')\n        ),\n        (\n            UdpTransportTarget(('127.0.0.1', 162)),\n            UsmUserData('usr-sha-aes128', 'authkey1', 'privkey1',\n                        authProtocol=usmHMACSHAAuthProtocol,\n                        privProtocol=usmAesCfb128Protocol)\n        ),\n    ]\n\n    # Send TRAP to all targets\n\n    return await asyncio.gather(\n        *[sendNotification(\n            snmpEngine,\n            authData,\n            transportTarget,\n            ContextData(),\n            'trap',\n            # sequence of OIDs-values\n            [\n                # SNMPv2-MIB::sysUpTime.0 = 123\n                (('1.3.6.1.2.1.1.3.0', TimeTicks(123)),),\n                # SNMPv2-MIB::snmpTrapOID.0 = SNMPv2-MIB::warmStart\n                (('1.3.6.1.6.3.1.1.4.1.0', ObjectIdentifier('1.3.6.1.6.3.1.1.5.2')),),\n                # Some payload\n                (('1.3.6.1.2.1.1.1.0', OctetString('Hello from asyncio TRAP ')),),\n            ]\n          ) for transportTarget, authData in targets]\n    )\n\nif __name__ == '__main__':\n    asyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Implementing IP-MIB Table in PySNMP Agent\nDESCRIPTION: This code snippet demonstrates how to create and register a static IP-MIB table in a PySNMP agent. It imports necessary symbols from IP-MIB, creates MibScalarInstance objects for each table column, and registers them with the SNMP engine. The example creates a single row with the IP address 1.2.3.4 and related attributes.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/how-to-implement-agent-mib.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# SNMP Agent (AKA CommandResponder) is built around SNMP engine object\nsnmpEngine = engine.SnmpEngine()\n\n# Import table columns\n( ipAddressAddrType,\n  ipAddressAddr,\n  ipAddressIfIndex,\n  ipAddressType,\n  ipAddressPrefix,\n  ipAddressOrigin,\n  ipAddressStatus,\n  ipAddressCreated,\n  ipAddressLastChanged,\n  ipAddressRowStatus,\n  ipAddressStorageType ) = snmpEngine.get_mib_builder().import_symbols(\n  'IP-MIB',\n  'ipAddressAddrType',\n  'ipAddressAddr',\n  'ipAddressIfIndex',\n  'ipAddressType',\n  'ipAddressPrefix',\n  'ipAddressOrigin',\n  'ipAddressStatus',\n  'ipAddressCreated',\n  'ipAddressLastChanged',\n  'ipAddressRowStatus',\n  'ipAddressStorageType'\n)\n\n# Import MibScalarInstance\n\nMibScalarInstance, = snmpEngine.get_mib_builder().import_symbols('SNMPv2-SMI', 'MibScalarInstance')\n\n# Create table columns instances\n\n_ipAddressAddrType = MibScalarInstance(\n    ipAddressAddrType.name, (1, 4, 1, 2, 3, 4),\n    ipAddressAddrType.syntax.clone(1)\n)\n_ipAddressAddr = MibScalarInstance(\n    ipAddressAddr.name, (1, 4, 1, 2, 3, 4),\n    ipAddressAddr.syntax.clone('1.2.3.4')\n)\n_ipAddressIfIndex = MibScalarInstance(\n    ipAddressIfIndex.name, (1, 4, 1, 2, 3, 4),\n    ipAddressIfIndex.syntax.clone(1)\n)\n_ipAddressType = MibScalarInstance(\n    ipAddressType.name, (1, 4, 1, 2, 3, 4),\n    ipAddressType.syntax.clone(1)\n)\n_ipAddressPrefix = MibScalarInstance(\n    ipAddressPrefix.name, (1, 4, 1, 2, 3, 4),\n    ipAddressPrefix.syntax.clone((0,0))\n)\n_ipAddressOrigin = MibScalarInstance(\n    ipAddressOrigin.name, (1, 4, 1, 2, 3, 4),\n    ipAddressOrigin.syntax.clone(1)\n)\n_ipAddressStatus = MibScalarInstance(\n    ipAddressStatus.name, (1, 4, 1, 2, 3, 4),\n    ipAddressStatus.syntax.clone(1)\n)\n_ipAddressCreated = MibScalarInstance(\n    ipAddressCreated.name, (1, 4, 1, 2, 3, 4),\n    ipAddressCreated.syntax.clone(800)\n)\n_ipAddressLastChanged = MibScalarInstance(\n    ipAddressLastChanged.name, (1, 4, 1, 2, 3, 4),\n    ipAddressLastChanged.syntax.clone(600)\n)\n_ipAddressRowStatus = MibScalarInstance(\n    ipAddressRowStatus.name, (1, 4, 1, 2, 3, 4),\n    ipAddressRowStatus.syntax.clone(1)\n)\n_ipAddressStorageType = MibScalarInstance(\n    ipAddressStorageType.name, (1, 4, 1, 2, 3, 4),\n    ipAddressStorageType.syntax\n)\n\n# add anonymous column instances\nsnmpEngine.get_mib_builder().export_symbols(\n    '_IP-MIB',\n    _ipAddressAddrType,\n    _ipAddressAddr,\n    _ipAddressIfIndex,\n    _ipAddressType,\n    _ipAddressPrefix,\n    _ipAddressOrigin,\n    _ipAddressStatus,\n    _ipAddressCreated,\n    _ipAddressLastChanged,\n    _ipAddressRowStatus,\n    _ipAddressStorageType\n    )\n\n# Command responder code would follow...\n```\n\n----------------------------------------\n\nTITLE: Implementing Scalar MIB Objects over IPv4 and IPv6 with PySNMP in Python\nDESCRIPTION: This code snippet demonstrates how to implement scalar MIB objects for SNMP agents using PySNMP's v1arch and asyncio modules. It sets up SNMP engine, transport dispatchers, and community-based security model for both IPv4 and IPv6. The script defines MIB scalar objects and their values, then starts the SNMP engine to serve GET/GETNEXT requests.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/v1arch/asyncio/agent/cmdrsp/agent-side-mib-implementations.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Implement scalar MIB objects at unified SNMPv2-MIB with SNMPv1/SNMPv2c\n#     agent using asyncio\n\n# Send SNMPv1/v2c GET/GETNEXT requests to localhost:161\n# with community name 'public'\n\n# This script can respond to both IPv4 and IPv6 queries\n\nfrom pysnmp.entity import engine, config\nfrom pysnmp.entity.rfc3413 import cmdrsp, context\nfrom pysnmp.carrier.asyncio.dgram import udp, udp6\nfrom pysnmp.proto.api import v2c\nimport asyncio\n\n# Create SNMP engine\nsnmpEngine = engine.SnmpEngine()\n\n# Transport setup\n\n# UDP over IPv4\nconfig.addTransport(\n    snmpEngine,\n    udp.domainName,\n    udp.UdpTransport().openServerMode(('127.0.0.1', 161))\n)\n\n# UDP over IPv6\nconfig.addTransport(\n    snmpEngine,\n    udp6.domainName,\n    udp6.Udp6Transport().openServerMode(('::1', 161))\n)\n\n# SNMPv1/2c setup\n\n# SecurityName <-> CommunityName mapping\nconfig.addV1System(snmpEngine, 'my-area', 'public')\n\n# Allow full MIB access for each user at VACM\nconfig.addVacmUser(snmpEngine, 2, 'my-area', 'noAuthNoPriv', (1, 3, 6, 1, 2, 1))\nconfig.addVacmUser(snmpEngine, 1, 'my-area', 'noAuthNoPriv', (1, 3, 6, 1, 2, 1))\n\n# Get default SNMP context this SNMP engine serves\nsnmpContext = context.SnmpContext(snmpEngine)\n\n# Create an instance of MIB builder\nmibBuilder = snmpContext.getMibInstrum().getMibBuilder()\n\n# MIB scalar objects implementation\nsysDescr, = mibBuilder.importSymbols('SNMPv2-MIB', 'sysDescr')\nsysObjectID, = mibBuilder.importSymbols('SNMPv2-MIB', 'sysObjectID')\nsysUpTime, = mibBuilder.importSymbols('SNMPv2-MIB', 'sysUpTime')\nsysContact, = mibBuilder.importSymbols('SNMPv2-MIB', 'sysContact')\nsysName, = mibBuilder.importSymbols('SNMPv2-MIB', 'sysName')\nsysLocation, = mibBuilder.importSymbols('SNMPv2-MIB', 'sysLocation')\nsysServices, = mibBuilder.importSymbols('SNMPv2-MIB', 'sysServices')\nsysORLastChange, = mibBuilder.importSymbols('SNMPv2-MIB', 'sysORLastChange')\n\nmibInstrumController = snmpContext.getMibInstrum()\nmibInstrumController.writeVars(\n    ((sysDescr.name, (v2c.OctetString('PySNMP example agent'))),\n     (sysObjectID.name, (v2c.ObjectIdentifier((1, 3, 6, 1, 4, 1, 20408)))),\n     (sysUpTime.name, (v2c.TimeTicks(0))),\n     (sysContact.name, (v2c.OctetString('info@snmplabs.com'))),\n     (sysName.name, (v2c.OctetString('example-agent'))),\n     (sysLocation.name, (v2c.OctetString('San Francisco, CA, USA'))),\n     (sysServices.name, (v2c.Integer32(72))),\n     (sysORLastChange.name, (v2c.TimeTicks(0))))\n)\n\n# Register SNMP Applications at the SNMP engine for particular SNMP context\ncmdrsp.GetCommandResponder(snmpEngine, snmpContext)\ncmdrsp.NextCommandResponder(snmpEngine, snmpContext)\n\nasyncio.get_event_loop().run_forever()\n```\n\n----------------------------------------\n\nTITLE: Configuring SNMP Transport for Multiple Interfaces using PySNMP and Asyncio in Python\nDESCRIPTION: This code snippet demonstrates how to set up SNMP transport to listen on multiple network interfaces using PySNMP's asyncio-based API. It configures the transport, sets up notification receivers, and runs the asyncio event loop.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/v3arch/asyncio/manager/ntfrcv/transport-tweaks.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pysnmp.entity import engine, config\nfrom pysnmp.carrier.asyncio.dgram import udp\nfrom pysnmp.entity.rfc3413 import ntfrcv\nimport asyncio\n\n# Create SNMP engine with autogenernated engineID and pre-bound\n# to socket transport dispatcher\nsnmpEngine = engine.SnmpEngine()\n\n# Setup transport endpoints\nconfig.addTransport(\n    snmpEngine,\n    udp.domainName + (1,),\n    udp.UdpTransport().openServerMode(('127.0.0.1', 162))\n)\nconfig.addTransport(\n    snmpEngine,\n    udp.domainName + (2,),\n    udp.UdpTransport().openServerMode(('0.0.0.0', 2162))\n)\n\n# Register SNMP Application at the SNMP engine\nntfrcv.NotificationReceiver(snmpEngine, cbFun)\n\n# Run I/O dispatcher which would receive queries and send confirmations\nloop = asyncio.get_event_loop()\nloop.run_forever()\n```\n\n----------------------------------------\n\nTITLE: Multiple Concurrent SNMP Queries over IPv4 and IPv6 with PySNMP Asyncio\nDESCRIPTION: Example demonstrating how to perform multiple concurrent SNMP queries over both IPv4 and IPv6 using PySNMP's asyncio framework. This showcases the ability to query multiple SNMP agents simultaneously with different transport protocols.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v3arch/asyncio/manager/cmdgen/advanced-topics.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#\n# This example sends a set of SNMP GET requests using asyncio coroutines\n# and processes responses as they come in, one at a time.\n#\n# This script performs concurrent queries to SNMP agents over IPv4 and IPv6\n# transports.\n#\nimport asyncio\nfrom pysnmp.hlapi.v3arch.asyncio import *\n\nasync def getone(snmpEngine, hostname, community):\n    errorIndication, errorStatus, errorIndex, varBinds = await getCmd(\n        snmpEngine,\n        CommunityData(community),\n        UdpTransportTarget((hostname, 161)),\n        ContextData(),\n        ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0))\n    )\n\n    if errorIndication or errorStatus:\n        print(hostname, errorIndication or errorStatus)\n    else:\n        for varBind in varBinds:\n            print(' = '.join([x.prettyPrint() for x in varBind]))\n\nasync def getv6one(snmpEngine, hostname, community):\n    errorIndication, errorStatus, errorIndex, varBinds = await getCmd(\n        snmpEngine,\n        CommunityData(community),\n        Udp6TransportTarget((hostname, 161)),\n        ContextData(),\n        ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0))\n    )\n\n    if errorIndication or errorStatus:\n        print(hostname, errorIndication or errorStatus)\n    else:\n        for varBind in varBinds:\n            print(' = '.join([x.prettyPrint() for x in varBind]))\n\n\nsnmpEngine = SnmpEngine()\n\nloop = asyncio.get_event_loop()\n\nloop.run_until_complete(\n    asyncio.gather(\n        getone(snmpEngine, 'demo.snmplabs.com', 'public'),\n        getv6one(snmpEngine, 'localhost', 'public')\n    )\n)\n\nloop.close()\n```\n\n----------------------------------------\n\nTITLE: Converting Between PDU VarBinds and MIB Objects in PySNMP\nDESCRIPTION: This script shows how to convert between PDU variable bindings and MIB objects using PySNMP. It demonstrates the process of creating MIB objects, converting them to PDU variable bindings, and vice versa.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/smi/manager/browsing-mib-tree.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pysnmp.smi import builder, view, rfc1902\n\nmibBuilder = builder.MibBuilder()\nmibViewController = view.MibViewController(mibBuilder)\n\nmibBuilder.loadModules('SNMPv2-MIB', 'SNMP-COMMUNITY-MIB')\n\nmibObject = rfc1902.ObjectType(rfc1902.ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0),\n                                'Linux i386')\n\npdu = rfc1902.ObjectType(\n    rfc1902.ObjectIdentity('1.3.6.1.2.1.1.1.0'),\n    rfc1902.OctetString('Linux i386')\n)\n\nprint('MIB object {} converted into PDU var-bind: {}'.format(\n    mibObject.prettyPrint(), pdu.prettyPrint()\n))\n\npdu.resolveWithMib(mibViewController)\n\nprint('PDU var-bind {} converted into MIB object: {}'.format(\n    pdu.prettyPrint(), mibObject.prettyPrint()\n))\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple SNMP Notifications Concurrently with PySNMP and Asyncio in Python\nDESCRIPTION: This script demonstrates how to send multiple SNMP notifications concurrently using PySNMP's high-level API with asyncio. It sets up the SNMP engine, community data, transport target, and notification type, then sends trap notifications to multiple managers simultaneously.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v1arch/asyncio/agent/ntforg/advanced-topics.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Send TRAP notifications to multiple Managers at once\n#\n# The following script sends SNMP TRAP notification to three\n# different Managers at once using asyncio API.\n\nfrom pysnmp.hlapi.v1arch.asyncio import *\n\nloop = asyncio.get_event_loop()\n\nsnmpEngine = SnmpEngine()\n\n# Send TRAP to multiple Managers\nloop.run_until_complete(\n    sendNotification(\n        snmpEngine,\n        CommunityData('public'),\n        [\n            UdpTransportTarget(('demo.snmplabs.com', 162)),\n            Udp6TransportTarget(('demo.snmplabs.com', 162)),\n            Udp6TransportTarget(('localhost', 162))\n        ],\n        'trap',\n        NotificationType(\n            ObjectIdentity('1.3.6.1.6.3.1.1.5.2')\n        ).addVarBinds(\n            ('1.3.6.1.2.1.1.3.0', TimeTicks(12345678)),\n            ('1.3.6.1.6.3.1.1.4.1.0', ObjectIdentifier('1.3.6.1.6.3.1.1.5.2')),\n            ('1.3.6.1.2.1.1.1.0', OctetString('my system'))\n        )\n    )\n)\n\nsnmpEngine.transportDispatcher.closeDispatcher()\n```\n\n----------------------------------------\n\nTITLE: MIB Tree Inspection in PySNMP\nDESCRIPTION: This script demonstrates how to inspect the MIB tree using PySNMP. It shows the process of loading MIB modules, creating a MIB viewer, and traversing the MIB tree to inspect its structure and contents.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/smi/manager/browsing-mib-tree.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pysnmp.smi import builder, view, compiler, error\n\nmibBuilder = builder.MibBuilder()\nmibViewController = view.MibViewController(mibBuilder)\n\ncompiler.addMibCompiler(mibBuilder, sources=['file:///usr/share/snmp/mibs',\n                                              'http://mibs.snmplabs.com/asn1/@mib@'])\n\nmibBuilder.loadModules('SNMPv2-MIB', 'SNMP-COMMUNITY-MIB')\n\nprint('MIB tree traversal')\n\noid = (1, 3, 6)\nwhile True:\n    try:\n        oid, label, suffix = mibViewController.getNextNodeName(oid)\n    except error.NoSuchObjectError:\n        break\n\n    modName, nodeDesc, suffix = mibViewController.getNodeLocation(oid)\n    print('{} ({}) -> {}::{} {}'.format(\n        '.'.join([str(x) for x in oid]), nodeDesc,\n        modName, label, '.'.join([str(x) for x in suffix])\n    ))\n```\n\n----------------------------------------\n\nTITLE: Walking MIB using GETBULK operation with asyncio in PySNMP\nDESCRIPTION: This example shows how to walk through an entire MIB tree using SNMP GETBULK operation with PySNMP's asyncio architecture. GETBULK retrieves multiple MIB objects in a single request, offering better performance compared to GETNEXT for large MIBs.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/v1arch/asyncio/manager/cmdgen/walking-operations.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# This script performs SNMP GETBULK operations on the specified Agent.\n# It uses PySNMP's asyncio-based v1arch API.\n\nfrom pysnmp.v1arch.asyncio.cmdgen import getCmd, bulkCmd\nfrom pysnmp.v1arch.proto import rfc1902\nfrom pysnmp.error import PySnmpError\nimport asyncio\n\n# List of targets in form target[(auth), (transport)]\ntargets = [\n    # 1-st target (SNMPv2c over IPv4/UDP)\n    (('public', 'snmpv2c'),\n     ('demo.snmplabs.com', 162)),\n]\n\nasync def getbulk(hostname, port, community, objectId):\n    # Create SNMP request generator\n    snmpEngine = bulkCmd(\n        # Security parameters\n        (community, 'snmpv2c'),\n        # Transport parameters\n        (hostname, port),\n        # GETBULK options\n        0, 25,\n        # MIB this request is about\n        objectId\n    )\n\n    varBindTable = None\n\n    while True:\n        try:\n            # Submit async request\n            varBindTable = await snmpEngine.send(varBindTable)\n\n            for varBindRow in varBindTable:\n                for varName, varVal in varBindRow:\n                    print(f'{varName.prettyPrint()} = {varVal.prettyPrint()}')\n\n        except PySnmpError as e:\n            print(f'SNMP request failed: {e}')\n            break\n\n        except KeyboardInterrupt:\n            print('Shutdown requested...')\n            break\n\n        except Exception as e:\n            print(f'Unexpected exception: {e}')\n            break\n\nasync def main():\n    # Run all command generators\n    for authData, transportTarget in targets:\n        await getbulk(\n            transportTarget[0], transportTarget[1],\n            authData[0],\n            '1.3.6'\n        )\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Peer Transport Information in PySNMP Callback Function\nDESCRIPTION: This code snippet demonstrates how to obtain peer transport information within a callback function for receiving SNMP notifications. It uses the getTransportInfo() method of the SNMP engine's message dispatcher to retrieve the transport domain and address.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/getting-peer-information.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Callback function for receiving notifications\ndef cbFun(snmpEngine,\n          stateReference,\n          contextEngineId, contextName,\n          varBinds,\n          cbCtx):\n    transportDomain, transportAddress = snmpEngine.message_dispatcher.getTransportInfo(stateReference)\n```\n\n----------------------------------------\n\nTITLE: Correct SNMP Value Display Using prettyPrint()\nDESCRIPTION: Demonstration of proper way to display SNMP values using prettyPrint() method, which correctly formats IpAddress and other ASN.1 types\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/non-printable-snmp-values-apps.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from pysnmp.proto import rfc1902\n>>> a = rfc1902.IpAddress('1.2.3.4')\n>>> str(a)\n'\\x01\\x02\\x03\\x04'\n>>> a\nIpAddress('1.2.3.4')\n>>> a.prettyPrint()\n'1.2.3.4'\n>>> rfc1902.IpAddress.prettyPrint(a)\n'1.2.3.4'\n```\n\n----------------------------------------\n\nTITLE: Performing SNMP GETBULK Operation in Python using PySNMP\nDESCRIPTION: This snippet demonstrates how to perform an SNMP GETBULK operation using PySNMP's bulk_cmd function. It retrieves multiple MIB objects starting from OID 1.3.6.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> from pysnmp.hlapi.v3arch.asyncio import *\n>>>\n>>> N, R = 0, 25\n>>> g = await bulk_cmd(SnmpEngine(),\n...             CommunityData('public'),\n...             await UdpTransportTarget.create(('demo.pysnmp.com', 161)),\n...             ContextData(),\n...             N, R,\n...             ObjectType(ObjectIdentity('1.3.6')))\n>>>\n>>> g\n(None, 0, 0, [ObjectType(ObjectIdentity('1.3.6.1.2.1.1.1.0'), DisplayString('SunOS zeus.pysnmp.com')), ObjectType(ObjectIdentity('1.3.6.1.2.1.1.2.0'), ObjectIdentifier('1.3.6.1.4.1.20408'))])\n```\n\n----------------------------------------\n\nTITLE: Sending SNMP Traps over IPv4 and IPv6 using pysnmp\nDESCRIPTION: This code snippet demonstrates how to configure and send SNMP traps over both IPv4 and IPv6 networks using pysnmp. It sets up the necessary SNMP parameters, creates trap PDUs, and sends them asynchronously.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/v1arch/asyncio/agent/ntforg/transport-tweaks.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Send SNMP TRAP via IPv4/UDP\nconfig.addTransport(\n    snmpEngine,\n    udp.domainName,\n    udp.UdpTransport().openClientMode()\n)\n\n# Send SNMP TRAP via IPv6/UDP\nconfig.addTransport(\n    snmpEngine,\n    udp6.domainName,\n    udp6.Udp6Transport().openClientMode()\n)\n\n# Setup transport endpoint addresses\nconfig.addTargetAddr(\n    snmpEngine, 'my-nms-1',\n    udp.domainName, ('104.236.166.95', 162),\n    'my-creds', timeout=6, retryCount=2\n)\nconfig.addTargetAddr(\n    snmpEngine, 'my-nms-2',\n    udp6.domainName, ('::1', '162'),\n    'my-creds', timeout=6, retryCount=2\n)\n\n# Setup notification targets\nconfig.addNotificationTarget(\n    snmpEngine, 'my-notify', 'my-filter', 'my-nms-1', 'my-trap'\n)\nconfig.addNotificationTarget(\n    snmpEngine, 'my-notify', 'my-filter', 'my-nms-2', 'my-trap'\n)\n\n# Specify what kind of notification should be sent (TRAP or INFORM)\nconfig.addContext(snmpEngine, '')\nconfig.addVacmUser(snmpEngine, 2, 'my-user', 'noAuthNoPriv', (), ())\n\n# Create Notification Originator\nntfOrg = ntforg.NotificationOriginator(snmpContext)\n\n# Build and submit notification message to dispatcher\nntfOrg.sendVarBinds(\n    snmpEngine,\n    'my-notify',  # notification targets\n    None, '',  # contextEngineId, contextName\n    # var-binds\n    [\n        ('1.3.6.1.2.1.1.3.0', v2c.TimeTicks(12039208)),\n        ('1.3.6.1.6.3.1.1.5.1', v2c.ObjectIdentifier('1.3.6.1.6.3.1.1.5.1')),\n        ('1.3.6.1.2.1.2.2.1.1.123', v2c.Integer(123)),\n        ('1.3.6.1.2.1.2.2.1.7.123', v2c.Integer(1)),\n        ('1.3.6.1.2.1.2.2.1.8.123', v2c.Integer(1))\n    ]\n)\n\nsnmpEngine.transportDispatcher.runDispatcher()\n```\n\n----------------------------------------\n\nTITLE: Fetching SNMP Variable with PySNMP (Python)\nDESCRIPTION: Python script to perform an SNMP v1 GET operation using PySNMP's slim class. It fetches the sysDescr variable from a demo SNMP agent.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/quick-start.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pysnmp.hlapi.v3arch.asyncio.slim import *\n\nasync def main():\n    async for (errorIndication,\n               errorStatus,\n               errorIndex,\n               varBinds) in getCmd(\n            SnmpEngine(),\n            CommunityData('public'),\n            UdpTransportTarget(('demo.pysnmp.com', 161)),\n            ContextData(),\n            ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0))):\n\n        if errorIndication:\n            print(errorIndication)\n            break\n        elif errorStatus:\n            print('%s at %s' % (errorStatus.prettyPrint(),\n                                errorIndex and varBinds[int(errorIndex) - 1][0] or '?'))\n            break\n        else:\n            for varBind in varBinds:\n                print(' = '.join([x.prettyPrint() for x in varBind]))\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Sending SNMP TRAP with PySNMP (Python)\nDESCRIPTION: Python script to send an SNMP v1 TRAP message using PySNMP. It demonstrates how to perform agent-side operations.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/quick-start.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pysnmp.hlapi.v3arch.asyncio.slim import *\n\nasync def main():\n    await sendNotification(\n        SnmpEngine(),\n        CommunityData('public'),\n        UdpTransportTarget(('demo.pysnmp.com', 162)),\n        ContextData(),\n        'trap',\n        NotificationType(\n            ObjectIdentity('1.3.6.1.6.3.1.1.5.2')\n        )\n    )\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Walking SNMP Tables with AsyncIO GETBULK Operation in Python\nDESCRIPTION: Demonstrates how to perform SNMP GETBULK operations using PySNMP's AsyncIO API to efficiently walk through SNMP tables until reaching the end of MIB. This implementation handles authentication, performs the GETBULK requests asynchronously, and collects the response data.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v3arch/asyncio/manager/cmdgen/walking-operations.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# GETBULK command generator\n#\n# Perform SNMP GETBULK operation using the following options:\n#\n# * with SNMPv3 with user 'usr-md5-des', MD5 auth and DES privacy\n# * over IPv4/UDP\n# * to an Agent at 104.236.166.95:161\n# * for OIDs in tuple form\n# * stop when response OIDs leave the scopes of initial OIDs\n# * run inside asyncio loop\n\nfrom pysnmp.hlapi.v3arch.asyncio import *\n\n\nasync def run():\n    # AsyncCommandGenerator handles SNMP engine and network transport\n    async with AsyncCommandGenerator(\n            # SecurityParameters provides configuration for authentication\n            SecurityParameters(\n                securityModel=3,\n                securityName='usr-md5-des',\n                securityLevel='auth-priv',\n                authKey='authkey1',\n                authProtocol='md5',\n                privKey='privkey1',\n                privProtocol='des'\n            ),\n            # UDP over IPv4\n            UdpTransportTarget(('104.236.166.95', 161))\n    ) as snmp_engine:\n\n        count = 0\n        object_types = (\n            ObjectType(ObjectIdentity('1.3.6'))\n        )\n        initial_object_types = object_types\n\n        # Loop through GETBULK requests until response OIDs\n        # leave the scope of the initial OIDs\n        while 1:\n            result = await snmp_engine.getbulk(\n                ContextData(),\n                non_repeaters=0, max_repetitions=50,\n                *object_types\n            )\n\n            error_indication, error_status, error_index, var_binds = result\n\n            if error_indication:\n                print(error_indication)\n                break\n            elif error_status:\n                print('%s at %s' % (\n                    error_status.prettyPrint(),\n                    error_index and var_binds[int(error_index) - 1][0] or '?'\n                ))\n                break\n            else:\n                for var_bind in var_binds:\n                    object_type, object_value = var_bind\n\n                    # Check if response OIDs are within initial OIDs scope\n                    for initial_object_type in initial_object_types:\n                        if object_type.isPrefixOf(initial_object_type[0]):\n                            break\n                    else:\n                        return\n\n                    count += 1\n\n                    print('%s = %s' % (object_type.prettyPrint(),\n                                       object_value.prettyPrint()))\n\n                # Check if we reached end of MIB\n                if var_binds[-1][1].isEndOfMib():\n                    return\n\n                # Update request with the last OID retrieved from response\n                object_types = var_binds[-1:]\n\n        print('Total objects retrieved: %s' % count)\n\n\nif __name__ == '__main__':\n    import asyncio\n\n    asyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom MIB Controller in PySNMP using AsyncIO\nDESCRIPTION: Example showing how to implement a custom MIB controller in a PySNMP agent using the AsyncIO architecture. This demonstrates advanced customization of MIB object behavior.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/v3arch/asyncio/agent/cmdrsp/agent-side-mib-implementations.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Agent-side MIB implementation\n```\n\n----------------------------------------\n\nTITLE: Multiple Sequential SNMP Queries Using PySNMP and asyncio\nDESCRIPTION: Demonstrates how to perform multiple sequential SNMP GET queries using PySNMP's high-level API with asyncio. The script queries each device one after another in a sequential manner and processes their responses.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v1arch/asyncio/manager/cmdgen/advanced-topics.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# This script performs sequential SNMP GET operations using asyncio\n\nimport asyncio\nfrom pysnmp.hlapi.v1arch.asyncio import (\n    getCmd, CommunityData, UdpTransportTarget, ContextData,\n    SnmpEngine, ObjectType, ObjectIdentity\n)\n\n# List of targets in (transport, community) format\ntargets = [\n    (UdpTransportTarget(('demo.snmplabs.com', 161)), CommunityData('public')),\n    (UdpTransportTarget(('demo.snmplabs.com', 1161)), CommunityData('public'))\n]\n\n# Multiple OIDs to query\nobjectIdentities = [\n    ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0),\n    ObjectIdentity('SNMPv2-MIB', 'sysObjectID', 0)\n]\n\n\nasync def run():\n    # Create shared SNMP engine\n    snmpEngine = SnmpEngine()\n\n    # Submit GET requests one by one\n    for transport, community in targets:\n        errorIndication, errorStatus, errorIndex, varBinds = await getCmd(\n            snmpEngine,\n            community,\n            transport,\n            ContextData(),\n            *[ObjectType(x) for x in objectIdentities]\n        )\n\n        if errorIndication or errorStatus:\n            print(transport.getLocalAddress(),\n                  errorIndication or errorStatus.prettyPrint())\n        else:\n            for varBind in varBinds:  # SNMP response contents\n                print(' = '.join([str(x) for x in varBind]))\n\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(run())\nloop.close()\n```\n\n----------------------------------------\n\nTITLE: Walking MIB using GETNEXT operation with asyncio in PySNMP\nDESCRIPTION: This example demonstrates how to walk through an entire MIB tree using SNMP GETNEXT operation with PySNMP's asyncio architecture. It iteratively retrieves MIB objects by requesting the next object in the tree until the entire MIB is traversed.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/v1arch/asyncio/manager/cmdgen/walking-operations.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# This script performs a linear SNMP GETNEXT operations on the specified Agent.\n# It uses PySNMP's asyncio-based v1arch API.\n\nfrom pysnmp.v1arch.asyncio.cmdgen import getCmd, nextCmd\nfrom pysnmp.v1arch.proto import rfc1902\nfrom pysnmp.error import PySnmpError\nimport asyncio\n\n# List of targets in form target[(auth), (transport)]\ntargets = [\n    # 1-st target (SNMPv1 over IPv4/UDP)\n    (('public', 'snmpv1'),\n     ('demo.snmplabs.com', 162)),\n]\n\nasync def getbulk(hostname, port, community, objectId):\n    # Create SNMP request generator\n    snmpEngine = nextCmd(\n        # Security parameters\n        (community, 'snmpv1'),\n        # Transport parameters\n        (hostname, port),\n        # MIB this request is about\n        objectId\n    )\n\n    varBinds = None\n\n    while True:\n        try:\n            # Submit async request\n            varBinds = await snmpEngine.send(varBinds)\n\n            for varName, varVal in varBinds:\n                print(f'{varName.prettyPrint()} = {varVal.prettyPrint()}')\n\n        except PySnmpError as e:\n            print(f'SNMP request failed: {e}')\n            break\n\n        except KeyboardInterrupt:\n            print('Shutdown requested...')\n            break\n\n        except Exception as e:\n            print(f'Unexpected exception: {e}')\n            break\n\nasync def main():\n    # Run all command generators\n    for authData, transportTarget in targets:\n        await getbulk(\n            transportTarget[0], transportTarget[1],\n            authData[0],\n            '1.3.6'\n        )\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring ASN.1 MIB Search Paths in PySNMP\nDESCRIPTION: Sets up the SNMP engine with access to common Linux ASN.1 MIB directories and the remote PySNMP MIB repository. This allows automatic parsing of plain-text MIBs into PySNMP format using the PySMI tool.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/pass-custom-mib-to-manager.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Configure the SNMP engine with access to the\n# common Linux ASN.1 (Textual) MIB directories...\nfrom pysnmp import hlapi\nfrom pysnmp.smi import compiler\nengine = hlapi.Engine()\nbuilder = engine.get_mib_builder()\ncompiler.add_mib_compiler(builder, sources=[\n    '/usr/share/snmp/mibs',\n    os.path.expanduser('~/.snmp/mibs'),\n    'https://mibs.pysnmp.com/asn1/@mib@',\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing Alternative MIB Tree in PySNMP using AsyncIO\nDESCRIPTION: Example showing how to implement an alternative MIB tree structure in a PySNMP agent using the AsyncIO architecture. This demonstrates how to organize MIB objects in custom hierarchies.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/v3arch/asyncio/agent/cmdrsp/agent-side-mib-implementations.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Agent-side MIB implementation\n```\n\n----------------------------------------\n\nTITLE: Verifying GET Response Values with PySNMP\nDESCRIPTION: This example shows how to use PySNMP to send a GET request and verify the response values against MIB constraints. It uses the lookupValues flag to ensure that the Agent-supplied value for SNMPv2-MIB::sysName satisfies MIB constraints.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/snmp-data-constraints-verification-failure.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nerrorIndication, errorStatus, errorIndex, varBinds = await cmdGen.get_cmd(\n    cmdgen.CommunityData('public'),\n    await cmdgen.UdpTransportTarget(('localhost', 161)),\n    cmdgen.MibVariable('SNMPv2-MIB', 'sysName', 0),\n    lookupValues=True\n)\n```\n\n----------------------------------------\n\nTITLE: Creating OctetString Type in PySNMP\nDESCRIPTION: Instantiates an OctetString type object in PySNMP, which can be initialized with either a string value or a hexadecimal value.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/api-reference.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\npysnmp.proto.rfc1902.OctetString(strValue=None, hexValue=None)\n```\n\n----------------------------------------\n\nTITLE: Implementing SNMP GETNEXT Table Walk Operation with Python asyncio\nDESCRIPTION: Shows how to perform sequential SNMP GETNEXT operations to walk through an SNMP table using PySNMP's high-level API with asyncio. This implementation demonstrates table traversal functionality.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v1arch/asyncio/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pysnmp.hlapi.asyncio import *\n\nasync def run():\n    snmpEngine = SnmpEngine()\n    while True:\n        errorIndication, errorStatus, errorIndex, varBinds = await\n            getNextRequestObject(snmpEngine,\n                               CommunityData('public'),\n                               UdpTransportTarget(('demo.snmplabs.com', 161)),\n                               ContextData(),\n                               ObjectType(ObjectIdentity('1.3.6.1.2.1.1')))\n\n        if errorIndication:\n            print(errorIndication)\n            break\n        elif errorStatus:\n            print('%s at %s' % (errorStatus.prettyPrint(),\n                                errorIndex and varBinds[int(errorIndex)-1][0] or '?'))\n            break\n        else:\n            for varBind in varBinds:\n                print(' = '.join([x.prettyPrint() for x in varBind]))\n```\n\n----------------------------------------\n\nTITLE: Fetching Scalar Values with PySNMP AsyncIO in Python\nDESCRIPTION: This example demonstrates how to fetch scalar values from SNMP-enabled devices using PySNMP's v1 architecture with AsyncIO. The code shows the asynchronous approach to retrieve SNMP data, which is useful for non-blocking network operations.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/v1arch/asyncio/manager/cmdgen/fetching-variables.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# GETNEXT Command Generator\n#\n# Send a series of SNMP GETNEXT requests addressed to different\n# SNMP agents using different credentials and other SNMP parameters\n\nfrom pysnmp.entity import engine, config\nfrom pysnmp.carrier.asyncio.dgram import udp\nfrom pysnmp.entity.rfc3413 import cmdgen\nimport asyncio\n\n# Create SNMP engine instance\nsnmpEngine = engine.SnmpEngine()\n\n#\n# Functionally similar to:\n# $ snmpget -v1 -c public demo.snmplabs.com 1.3.6.1.2.1.1.1.0\n#\n\n# SecurityName <-> CommunityName mapping\nconfig.addV1System(snmpEngine, 'my-area', 'public')\n\n# Specify security settings per SecurityName (SNMPv1 - 0, SNMPv2c - 1)\nconfig.addTargetParams(snmpEngine, 'my-params', 'my-area', 'noAuthNoPriv', 0)\n\n# Setup transport endpoint and bind it with security settings yielding\n# a target name\nconfig.addTransport(\n    snmpEngine,\n    udp.domainName,\n    udp.UdpTransport().openClientMode()\n)\nconfig.addTargetAddr(\n    snmpEngine, 'my-router',\n    udp.domainName, ('demo.snmplabs.com', 161),\n    'my-params'\n)\n\n\n# Error/response receiver\ndefaultPrinter = lambda *x: None\n\n# Callback function for receiving notifications\ndef cbFun(snmpEngine, sendRequestHandle, errorIndication,\n           errorStatus, errorIndex, varBinds, cbCtx):\n    if errorIndication:\n        print(errorIndication)\n        return\n    elif errorStatus:\n        print('%s at %s' % (errorStatus.prettyPrint(),\n                            errorIndex and varBinds[int(errorIndex) - 1][0] or '?'))\n        return\n    else:\n        for oid, val in varBinds:\n            print('%s = %s' % (oid.prettyPrint(), val.prettyPrint()))\n\n\n# Prepare and send a request message, pass custom variables\n# (OID sub-tree) to callback function\n\n\nasync def getScalar(oid):\n    loop = asyncio.get_event_loop()\n    return await loop.create_future()\n\n\nasync def run():\n    cmdGen = cmdgen.GetCommandGenerator()\n\n    oid = (1, 3, 6, 1, 2, 1, 1, 1, 0)\n\n    cmdGen.sendVarBinds(\n        snmpEngine,\n        'my-router',\n        None, '',  # contextEngineId, contextName\n        [(oid, None)],\n        cbFun\n    )\n\n    await asyncio.sleep(2)\n\n    snmpEngine.transportDispatcher.closeDispatcher()\n\n\nasyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Operations on Managed Objects in PySNMP\nDESCRIPTION: Example showing various operations that can be performed on managed objects in a PySNMP agent context. Demonstrates object manipulation and management.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/smi/agent/implementing-mib-objects.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Operations on managed objects example\n```\n\n----------------------------------------\n\nTITLE: Implementing SNMP GETNEXT with SNMPv3 and USM\nDESCRIPTION: Shows how to perform sequential SNMP GETNEXT operations using SNMPv3 and USM to fetch a table of SNMP variables from an SNMP Agent.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v3arch/asyncio/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# This script is functionally identical to:\n#\n# $ snmpbulkwalk -v3 -lauthPriv -u usr-md5-des -A authkey1 -X privkey1 demo.snmplabs.com system\n#\n# Note: it uses higher-level asyncio API\n\nfrom pysnmp.hlapi.asyncio import *\n\nasync def run():\n    snmpEngine = SnmpEngine()\n    while True:\n        errorIndication, errorStatus, errorIndex, varBinds = await nextCmd(\n            snmpEngine,\n            UsmUserData('usr-md5-des', 'authkey1', 'privkey1',\n                       authProtocol=usmHMACMD5AuthProtocol,\n                       privProtocol=usmDESPrivProtocol),\n            UdpTransportTarget(('demo.snmplabs.com', 161)),\n            ContextData(),\n            ObjectType(ObjectIdentity('SNMPv2-MIB', 'system')),\n            lexicographicMode=False\n        )\n\n        if errorIndication:\n            print(errorIndication)\n            break\n        elif errorStatus:\n            print('%s at %s' % (errorStatus.prettyPrint(),\n                               errorIndex and varBinds[int(errorIndex)-1][0] or '?'))\n            break\n        else:\n            for varBind in varBinds:\n                print(' = '.join([x.prettyPrint() for x in varBind]))\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.get_event_loop().run_until_complete(run())\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous SNMP GET Operation with Python asyncio\nDESCRIPTION: Demonstrates how to perform a simple SNMP GET operation using PySNMP's high-level API with asyncio. This example shows the asynchronous implementation of querying SNMP agents.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v1arch/asyncio/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pysnmp.hlapi.asyncio import *\n\nasync def run():\n    snmpEngine = SnmpEngine()\n    errorIndication, errorStatus, errorIndex, varBinds = await\n        getNextRequestObject(snmpEngine,\n                           CommunityData('public', mpModel=0),\n                           UdpTransportTarget(('demo.snmplabs.com', 161)),\n                           ContextData(),\n                           ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0)))\n\n    if errorIndication:\n        print(errorIndication)\n    elif errorStatus:\n        print('%s at %s' % (errorStatus.prettyPrint(),\n                            errorIndex and varBinds[int(errorIndex) - 1][0] or '?'))\n    else:\n        for varBind in varBinds:\n            print(' = '.join([x.prettyPrint() for x in varBind]))\n```\n\n----------------------------------------\n\nTITLE: Multiple Sequential SNMP Queries with PySNMP Asyncio\nDESCRIPTION: Example demonstrating how to perform multiple sequential SNMP queries using PySNMP's asyncio framework. This showcases the ability to query multiple SNMP agents in sequence, waiting for each response before proceeding to the next query.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v3arch/asyncio/manager/cmdgen/advanced-topics.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#\n# This example sends a bunch of SNMP GET requests in a serialized manner\n# using asyncio. It sends a request, wait till response arrives and sends\n# another request and so on.\n#\nimport asyncio\nfrom pysnmp.hlapi.v3arch.asyncio import *\n\n# List of targets in the followin format:\n# ( (authData, transportTarget, varNames), ... )\n#\ntargets = (\n    # 1-st target (SNMPv1 over IPv4/UDP)\n    (CommunityData('public', mpModel=0),\n     UdpTransportTarget(('demo.snmplabs.com', 161)),\n     (ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0)),\n      ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysName', 0)))),\n    # 2-nd target (SNMPv2c over IPv4/UDP)\n    (CommunityData('public'),\n     UdpTransportTarget(('demo.snmplabs.com', 161)),\n     (ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysUpTime', 0)),\n      ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysORLastChange', 0))))\n)\n\nasync def getone(snmpEngine, authData, transportTarget, varBinds):\n    errorIndication, errorStatus, errorIndex, varBinds = await getCmd(\n        snmpEngine,\n        authData,\n        transportTarget,\n        ContextData(),\n        *varBinds\n    )\n\n    if errorIndication or errorStatus:\n        print(transportTarget.transportAddr,\n              errorIndication or errorStatus.prettyPrint())\n    else:\n        for varBind in varBinds:\n            print(' = '.join([x.prettyPrint() for x in varBind]))\n\n\nsnmpEngine = SnmpEngine()\n\nloop = asyncio.get_event_loop()\n\ntasks = [\n    getone(snmpEngine, *target)\n    for target in targets\n]\n\nloop.run_until_complete(asyncio.gather(*tasks))\n\nloop.close()\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple SNMP GET Operation with Asyncio\nDESCRIPTION: Demonstrates a basic SNMP GET operation using Python's asyncio and PySNMP's high-level API. Shows how to perform asynchronous SNMP queries.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v3arch/asyncio/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# This script is functionally identical to:\n#\n# $ snmpget -v1 -c public demo.snmplabs.com 1.3.6.1.2.1.1.1.0\n#\n# Note: it uses higher-level asyncio API\n\nfrom pysnmp.hlapi.asyncio import *\n\nasync def run():\n    snmpEngine = SnmpEngine()\n    errorIndication, errorStatus, errorIndex, varBinds = await getCmd(\n        snmpEngine,\n        CommunityData('public', mpModel=0),\n        UdpTransportTarget(('demo.snmplabs.com', 161)),\n        ContextData(),\n        ObjectType(ObjectIdentity('1.3.6.1.2.1.1.1.0'))\n    )\n\n    if errorIndication:\n        print(errorIndication)\n    elif errorStatus:\n        print('%s at %s' % (errorStatus.prettyPrint(),\n                           errorIndex and varBinds[int(errorIndex) - 1][0] or '?'))\n    else:\n        for varBind in varBinds:\n            print(' = '.join([x.prettyPrint() for x in varBind]))\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.get_event_loop().run_until_complete(run())\n```\n\n----------------------------------------\n\nTITLE: Enabling PySNMP Debug Logging in Python\nDESCRIPTION: Code snippet demonstrating how to enable built-in debugging in PySNMP applications. Shows both specific debugging flags for individual subsystems and full debugging mode. Debug output is written to stderr.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/troubleshooting.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pysnmp import debug\n\n# use specific flags for debugging\ndebug.set_logger(debug.Debug('dsp', 'msgproc', 'secmod'))\n\n# use 'all' for full debugging\ndebug.set_logger(debug.Debug('all'))\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple SNMP Informs at Once with PySNMP and asyncio in Python\nDESCRIPTION: This code demonstrates how to send multiple SNMP inform notifications concurrently using PySNMP's asyncio-based high-level API. It creates SNMPv3 authenticated inform notifications directed to multiple managers.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v3arch/asyncio/agent/ntforg/advanced-topics.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Send multiple INFORM notifications at once using asyncio.\n#\n# Here we send the same INFORM to multiple Managers at once.\n# We do this by building a list of coroutines and scheduling\n# them for execution via asyncio.gather()\n\nfrom pysnmp.hlapi.v3arch.asyncio import *\n\nasync def run():\n    snmpEngine = SnmpEngine()\n\n    # Define list of targets\n    targets = [\n        (\n            UdpTransportTarget(('demo.snmplabs.com', 162)),\n            CommunityData('public')\n        ),\n        (\n            Udp6TransportTarget(('::1', 162)),\n            CommunityData('public')\n        ),\n        (\n            UdpTransportTarget(('127.0.0.1', 162)),\n            UsmUserData('usr-sha-aes128', 'authkey1', 'privkey1',\n                        authProtocol=usmHMACSHAAuthProtocol,\n                        privProtocol=usmAesCfb128Protocol)\n        ),\n    ]\n\n    # Send INFORM to all targets\n    # noinspection PyTypeChecker\n    return await asyncio.gather(\n        *[sendNotification(\n            snmpEngine,\n            authData,\n            transportTarget,\n            ContextData(),\n            'inform',\n            # sequence of OIDs-values\n            [\n                # SNMPv2-MIB::sysUpTime.0 = 123\n                (('1.3.6.1.2.1.1.3.0', TimeTicks(123)),),\n                # SNMPv2-MIB::snmpTrapOID.0 = SNMPv2-MIB::warmStart\n                (('1.3.6.1.6.3.1.1.4.1.0', ObjectIdentifier('1.3.6.1.6.3.1.1.5.2')),),\n                # Some payload\n                (('1.3.6.1.2.1.1.1.0', OctetString('Hello from asyncio INFORM')),),\n            ]\n          ) for transportTarget, authData in targets], \n          return_exceptions=True\n    )\n\nif __name__ == '__main__':\n    asyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Defining PySNMP MIB Structure and Object Identifiers\nDESCRIPTION: This snippet defines the complete PySNMP MIB structure including imports, module identity, revision history, and all object identifier hierarchies. It establishes the enterprise ID (20408) and organizes objects into categories for management objects, examples, enumerations, notifications, and conformance.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/mibs/PYSNMP-MIB.txt#2025-04-22_snippet_0\n\nLANGUAGE: MIB\nCODE:\n```\nPYSNMP-MIB DEFINITIONS ::= BEGIN\n\n--\n-- Top-level infrastructure of the PySNMP project enterprise MIB tree\n--\n\nIMPORTS\n    MODULE-IDENTITY, enterprises FROM SNMPv2-SMI;\n\npysnmp MODULE-IDENTITY\n    LAST-UPDATED \"201704140000Z\"\n    ORGANIZATION \"The PySNMP Project\"\n    CONTACT-INFO \"E-mail: LeXtudio Inc. <support@lextudio.com>\n                  GitHub: https://github.com/lextudio/pysnmp\"\n    DESCRIPTION\n\t\"PySNMP top-level MIB tree infrastructure\"\n    REVISION     \"202211120000Z\"\n    DESCRIPTION  \"Updated contact\"\n    REVISION     \"201704140000Z\"\n    DESCRIPTION  \"Updated addresses\"\n    REVISION     \"200505140000Z\"\n    DESCRIPTION  \"Initial revision\"\n    ::= { enterprises 20408 }\n\n\n--\n--  PySNMP enterprise-specific management objects\n--\n\npysnmpObjects              OBJECT IDENTIFIER ::= {pysnmp 1}\npysnmpExamples             OBJECT IDENTIFIER ::= {pysnmp 2}\npysnmpEnumerations         OBJECT IDENTIFIER ::= {pysnmp 3}\npysnmpModuleIDs            OBJECT IDENTIFIER ::= {pysnmpEnumerations 1}\npysnmpAgentOIDs            OBJECT IDENTIFIER ::= {pysnmpEnumerations 2}\npysnmpDomains              OBJECT IDENTIFIER ::= {pysnmpEnumerations 3}\npysnmpExperimental         OBJECT IDENTIFIER ::= {pysnmp 9999}\n\n--\n--  Notifications\n--\n\npysnmpNotificationPrefix   OBJECT IDENTIFIER ::= {pysnmp 4}\npysnmpNotifications        OBJECT IDENTIFIER ::= {pysnmpNotificationPrefix 0}\npysnmpNotificationObjects  OBJECT IDENTIFIER ::= {pysnmpNotificationPrefix 1}\n\n--\n--  Conformance\n--\n\npysnmpConformance          OBJECT IDENTIFIER ::= {pysnmp 5}\npysnmpCompliances          OBJECT IDENTIFIER ::= {pysnmpConformance 1}\npysnmpGroups               OBJECT IDENTIFIER ::= {pysnmpConformance 2}\n\nEND\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Increasing OID Errors in PySNMP Walk Operations\nDESCRIPTION: This code demonstrates how to use the ignoreNonIncreasingOid parameter with the walk_cmd() function to bypass OID verification when working with broken SNMP agents. The example shows an asynchronous SNMP walk operation that sets ignoreNonIncreasingOid=True to prevent the infinite loop error, along with proper error handling.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/oids-not-increasing.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsnmpEngine = SnmpEngine()\nasync for (errorIndication,\n     errorStatus,\n     errorIndex,\n     varBinds) in walk_cmd(snmpEngine,\n                          CommunityData('public'),\n                          await UdpTransportTarget.create(('demo.pysnmp.com', 161)),\n                          ContextData(),\n                          ObjectType(ObjectIdentity('1.3.6')),\n                          ignoreNonIncreasingOid=True):\n\n    if errorIndication:\n        print(errorIndication)\n        break\n    elif errorStatus:\n        print('%s at %s' % (errorStatus.prettyPrint(),\n                            errorIndex and varBinds[int(errorIndex) - 1][0] or '?'))\n        break\n    else:\n        for varBind in varBinds:\n            print(' = '.join([x.prettyPrint() for x in varBind])\n\nsnmpEngine.close_dispatcher()\n```\n\n----------------------------------------\n\nTITLE: Defining USM Key Table for Localized Keys\nDESCRIPTION: This snippet defines a table structure for storing USM users' localized keys. The table augments the standard usmUserEntry table and provides storage for both localized and non-localized keys used for authentication and privacy.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/mibs/PYSNMP-USM-MIB.txt#2025-04-22_snippet_6\n\nLANGUAGE: ASN.1\nCODE:\n```\n--\n-- The pysnmpUsmKeysTable contains a database of USM users' localized\n-- keys.\n--\n\npysnmpUsmKeyTable OBJECT-TYPE\n    SYNTAX       SEQUENCE OF PysnmpUsmKeyEntry\n    MAX-ACCESS   not-accessible\n    STATUS       current\n    DESCRIPTION\n        \"The table of USM users localized keys configured in the\n         SNMP engine's Local Configuration Datastore (LCD).\"\n    ::= { pysnmpUsmMIBObjects 3 }\n\npysnmpUsmKeyEntry OBJECT-TYPE\n    SYNTAX       PysnmpUsmKeyEntry\n    MAX-ACCESS   not-accessible\n    STATUS       current\n    DESCRIPTION\n        \"Information about a particular USM user credentials.\"\n    AUGMENTS    { usmUserEntry }\n    ::= { pysnmpUsmKeyTable 1 }\n\nPysnmpUsmKeyEntry ::= SEQUENCE {\n    pysnmpUsmKeyAuthLocalized       OCTET STRING,\n    pysnmpUsmKeyPrivLocalized       OCTET STRING,\n    pysnmpUsmKeyAuth                OCTET STRING,\n    pysnmpUsmKeyPriv                OCTET STRING\n}\n```\n\n----------------------------------------\n\nTITLE: Performing SNMPv1 GET Operation with pysnmp and asyncio\nDESCRIPTION: This snippet demonstrates how to perform an SNMPv1 GET operation using pysnmp's high-level API with asyncio. It retrieves a single OID value from an SNMP agent.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v1arch/asyncio/manager/cmdgen/snmp-versions.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# This script performs a single SNMP GET operation using the following options:\n#\n#   * SNMPv1\n#   * with community name 'public'\n#   * over IPv4/UDP\n#   * to an Agent at demo.snmplabs.com:161\n#   * for ISO-3.6.1.2.1.1.1.0 MIB object (sysDescr)\n#\n# This script performs similar to the following Net-SNMP command:\n#\n# $ snmpget -v1 -c public demo.snmplabs.com sysDescr.0\n\nfrom pysnmp.hlapi.asyncio import *\n\nasync def run():\n    errorIndication, errorStatus, errorIndex, varBinds = await (\n        getCmd(SnmpEngine(),\n               CommunityData('public', mpModel=0),\n               UdpTransportTarget(('demo.snmplabs.com', 161)),\n               ContextData(),\n               ObjectType(ObjectIdentity('1.3.6.1.2.1.1.1.0')))\n    )\n\n    if errorIndication:\n        print(errorIndication)\n    elif errorStatus:\n        print('%s at %s' % (errorStatus.prettyPrint(),\n                            errorIndex and varBinds[int(errorIndex) - 1][0] or '?'))\n    else:\n        for varBind in varBinds:\n            print(' = '.join([x.prettyPrint() for x in varBind]))\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Implementing Scalar MIB Objects in PySNMP using AsyncIO\nDESCRIPTION: Example showing how to implement scalar MIB objects in a PySNMP agent using the AsyncIO architecture. The code demonstrates basic scalar value handling within an SNMP agent.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/v3arch/asyncio/agent/cmdrsp/agent-side-mib-implementations.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Agent-side MIB implementation\n```\n\n----------------------------------------\n\nTITLE: Implementing SNMP TRAP Sending with Python asyncio\nDESCRIPTION: Demonstrates how to send SNMP TRAP notifications using PySNMP's high-level API with asyncio. This example shows the implementation of notification originator functionality.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v1arch/asyncio/index.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pysnmp.hlapi.asyncio import *\n\nasync def run():\n    snmpEngine = SnmpEngine()\n    errorIndication, errorStatus, errorIndex, varBinds = await\n        sendNotificationObject(snmpEngine,\n                             CommunityData('public', mpModel=0),\n                             UdpTransportTarget(('demo.snmplabs.com', 162)),\n                             ContextData(),\n                             'trap',\n                             NotificationType(ObjectIdentity('1.3.6.1.6.3.1.1.5.2')))\n\n    if errorIndication:\n        print(errorIndication)\n    elif errorStatus:\n        print('%s at %s' % (errorStatus.prettyPrint(),\n                            errorIndex and varBinds[int(errorIndex)-1][0] or '?'))\n    else:\n        print('Notification sent')\n```\n\n----------------------------------------\n\nTITLE: Defining USM Key Table Columns\nDESCRIPTION: This snippet defines the columns for the pysnmpUsmKeyTable, including both localized and non-localized keys for authentication and privacy. These objects store the cryptographic keys used in USM security operations.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/mibs/PYSNMP-USM-MIB.txt#2025-04-22_snippet_7\n\nLANGUAGE: ASN.1\nCODE:\n```\npysnmpUsmKeyAuthLocalized OBJECT-TYPE\n    SYNTAX       OCTET STRING (SIZE(8..64))\n    MAX-ACCESS   not-accessible\n    STATUS       current\n    DESCRIPTION\n        \"User's localized key used for authentication.\"\n    ::= { pysnmpUsmKeyEntry 1 }\n\npysnmpUsmKeyPrivLocalized OBJECT-TYPE\n    SYNTAX       OCTET STRING (SIZE(8..64))\n    MAX-ACCESS   not-accessible\n    STATUS       current\n    DESCRIPTION\n        \"User's localized key used for encryption.\"\n    ::= { pysnmpUsmKeyEntry 2 }\n\npysnmpUsmKeyAuth OBJECT-TYPE\n    SYNTAX       OCTET STRING (SIZE(8..64))\n    MAX-ACCESS   not-accessible\n    STATUS       current\n    DESCRIPTION\n        \"User's non-localized key used for authentication.\"\n    ::= { pysnmpUsmKeyEntry 3 }\n\npysnmpUsmKeyPriv OBJECT-TYPE\n    SYNTAX       OCTET STRING (SIZE(8..64))\n    MAX-ACCESS   not-accessible\n    STATUS       current\n    DESCRIPTION\n        \"User's non-localized key used for encryption.\"\n    ::= { pysnmpUsmKeyEntry 4 }\n```\n\n----------------------------------------\n\nTITLE: Defining Administrative Assignments and Object Identifiers\nDESCRIPTION: This snippet establishes the OID structure for the MIB module, organizing objects and conformance definitions within the pysnmpUsmMIB tree. It creates the fundamental structure for the USM MIB components.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/mibs/PYSNMP-USM-MIB.txt#2025-04-22_snippet_1\n\nLANGUAGE: ASN.1\nCODE:\n```\n-- Administrative assignments ****************************************\n\npysnmpUsmMIBObjects     OBJECT IDENTIFIER ::= { pysnmpUsmMIB 1 }\npysnmpUsmMIBConformance OBJECT IDENTIFIER ::= { pysnmpUsmMIB 2 }\n\n-- Implementation-specific SNMP engine configuration\n\npysnmpUsmCfg    OBJECT IDENTIFIER ::= { pysnmpUsmMIBObjects 1 }\n```\n\n----------------------------------------\n\nTITLE: Performing SNMPv1 GET Operation with PySNMP Asyncio\nDESCRIPTION: This snippet demonstrates how to perform an SNMPv1 GET operation using PySNMP's asyncio-based high-level API. It retrieves a specific OID value from an SNMP agent.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v3arch/asyncio/manager/cmdgen/snmp-versions.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# GETBULK with limits on variable-bindings and rows\n#\n# Perform SNMP GETBULK operation using the following options:\n#\n# * with SNMPv2c\n# * with community name 'public'\n# * over IPv4/UDP\n# * to an Agent at localhost:161\n# * for some columns of the IF-MIB::ifTable table\n# * with non-repeaters=0 and max-repetitions=25\n# * stop when response OIDs leave the scop of the table\n#\n# This script performs similar to the following Net-SNMP command:\n#\n# $ snmpbulkget -v2c -c public -Cn0 -Cr25 -ObentU localhost:161 1.3.6.1.2.1.2.2.1.2 1.3.6.1.2.1.2.2.1.3\n\nfrom pysnmp.hlapi.v3arch.asyncio import *\n\nasync def run():\n    snmpEngine = SnmpEngine()\n    \n    await getbulk(\n        snmpEngine,\n        CommunityData('public'),\n        UdpTransportTarget(('localhost', 161)),\n        ContextData(),\n        0, 25,\n        ObjectType(ObjectIdentity('IF-MIB', 'ifTable')),\n        lexicographicMode=False,\n        lookupMib=True\n    )\n\n    snmpEngine.transportDispatcher.closeDispatcher()\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.run(run())\n\n```\n\n----------------------------------------\n\nTITLE: Performing SNMP SET Operation in Python using PySNMP\nDESCRIPTION: This example shows how to perform an SNMP SET operation using PySNMP's set_cmd function. It attempts to set the sysDescr MIB object.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> from pysnmp.hlapi.v3arch.asyncio import *\n>>>\n>>> g = await set_cmd(SnmpEngine(),\n...            CommunityData('public'),\n...            await UdpTransportTarget.create(('demo.pysnmp.com', 161)),\n...            ContextData(),\n...            ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0), 'Linux i386')\n... )\n>>> g\n(None, 0, 0, [ObjectType(ObjectIdentity('1.3.6.1.2.1.1.1.0'), DisplayString('Linux i386'))])\n```\n\n----------------------------------------\n\nTITLE: Defining USM Secret Table Columns\nDESCRIPTION: This snippet defines the columns for the pysnmpUsmSecretTable, including username, authentication key, privacy key, and row status. These objects store the user credentials needed for USM authentication and privacy operations.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/mibs/PYSNMP-USM-MIB.txt#2025-04-22_snippet_5\n\nLANGUAGE: ASN.1\nCODE:\n```\npysnmpUsmSecretUserName OBJECT-TYPE\n    SYNTAX      SnmpAdminString (SIZE(1..32))\n    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"The username string for which a row in this table\n         represents a configuration.\"\n    ::= { pysnmpUsmSecretEntry 1 }\n\npysnmpUsmSecretAuthKey OBJECT-TYPE\n    SYNTAX       OCTET STRING (SIZE(8..65535)) -- no upper limit in RFC\n    MAX-ACCESS   not-accessible\n    STATUS       current\n    DESCRIPTION\n        \"User's authentication passphrase used for localized key generation.\"\n    ::= { pysnmpUsmSecretEntry 2 }\n\npysnmpUsmSecretPrivKey OBJECT-TYPE\n    SYNTAX       OCTET STRING (SIZE(8..65535)) -- no upper limit in RFC\n    MAX-ACCESS   not-accessible\n    STATUS       current\n    DESCRIPTION\n        \"User's encryption passphrase used for localized key generation.\"\n    ::= { pysnmpUsmSecretEntry 3 }\n\npysnmpUsmSecretStatus OBJECT-TYPE\n    SYNTAX       RowStatus\n    MAX-ACCESS   read-create\n    STATUS       current\n    DESCRIPTION\n        \"Table status\"\n    ::= { pysnmpUsmSecretEntry 4 }\n```\n\n----------------------------------------\n\nTITLE: Sending SNMP Inform with Custom MIB Values\nDESCRIPTION: Shows how to send an SNMP inform notification with custom MIB object values using a dictionary-like object to map OIDs to their current values.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom pysnmp.hlapi.v3arch.asyncio import *\n\nmib = {ObjectIdentifier('1.3.6.1.2.1.2.2.1.1.123'): 123,\n       ObjectIdentifier('1.3.6.1.2.1.2.2.1.7.123'): 'testing',\n       ObjectIdentifier('1.3.6.1.2.1.2.2.1.8.123'): 'up'}\n\ng = await send_notification(SnmpEngine(),\n                     CommunityData('public'),\n                     await UdpTransportTarget.create(('demo.pysnmp.com', 162)),\n                     ContextData(),\n                     'inform',\n                     NotificationType(ObjectIdentity('IF-MIB', 'linkUp'), instanceIndex=(123,), objects=mib)\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying SNMP Variables with PySNMP v2c SET Operation\nDESCRIPTION: Example script showing how to perform SNMP SET operations using SNMPv2c protocol with PySNMP library in asyncio mode. Demonstrates variable modification on an SNMP agent.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/v1arch/asyncio/manager/cmdgen/modifying-variables.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#\n# SET Command Generator\n#\n# Send a SNMP SET request\n#     with the following object:\n#     sysContact.0 = 'info@snmplabs.com'\n#\n# This script performs similar to the following Net-SNMP command:\n#\n# $ snmpset -v2c -c private demo.snmplabs.com sysContact.0 s \"info@snmplabs.com\"\n#\nfrom pysnmp.hlapi.v1arch.asyncio import *\n\nasync def run():\n    snmpEngine = SnmpEngine()\n\n    errorIndication, errorStatus, errorIndex, varBinds = await setCmd(\n        snmpEngine,\n        CommunityData('private', mpModel=1),\n        UdpTransportTarget(('demo.snmplabs.com', 161)),\n        ContextData(),\n        ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysContact', 0),\n                  'info@snmplabs.com')\n    )\n\n    if errorIndication:\n        print(errorIndication)\n    elif errorStatus:\n        print('%s at %s' % (\n            errorStatus.prettyPrint(),\n            errorIndex and varBinds[int(errorIndex) - 1][0] or '?'\n        ))\n    else:\n        for varBind in varBinds:\n            print(' = '.join([x.prettyPrint() for x in varBind]))\n\n    snmpEngine.transportDispatcher.closeDispatcher()\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Initializing Poetry and Setting Up Pre-commit Hooks for pysnmp\nDESCRIPTION: These commands initialize Poetry for the project, add the poetry-bumpversion plugin, install pre-commit as a dev dependency, and set up pre-commit hooks.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/Development.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry init\npoetry self add poetry-bumpversion\npoetry add --group dev pre-commit=2.21.0\npoetry run pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Performing SNMP GETNEXT Operation in Python using PySNMP\nDESCRIPTION: This example shows how to perform an SNMP GETNEXT operation using PySNMP's next_cmd function. It retrieves the next MIB object after sysDescr.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> from pysnmp.hlapi.v3arch.asyncio import *\n>>> g =  await next_cmd(SnmpEngine(),\n...             CommunityData('public'),\n...             await UdpTransportTarget.create(('demo.pysnmp.com', 161)),\n...             ContextData(),\n...             ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr')))\n>>> g\n(None, 0, 0, [ObjectType(ObjectIdentity('1.3.6.1.2.1.1.1.0'), DisplayString('SunOS zeus.pysnmp.com'))])\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Coverage for pysnmp Project\nDESCRIPTION: This command runs pytest with coverage analysis for the pysnmp package and generates an XML coverage report.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/Development.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npoetry run pytest --cov=pysnmp --cov-report=xml:coverage.xml\n```\n\n----------------------------------------\n\nTITLE: Sending Default SNMP v1 Trap using PySNMP with AsyncIO\nDESCRIPTION: This code demonstrates how to generate and send a standard SNMP v1 trap using PySNMP's high-level API with asyncio. It shows the asynchronous notification originator that connects to an SNMP manager, constructs and sends a trap message.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v3arch/asyncio/agent/ntforg/common-notifications.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Trigger standard SNMP TRAP via SNMP v1, to a Manager\n#\n# SNMPv1 TRAP message protocol:\n# * SNMPv1TrapPDU\n#   * generic-trap: coldStart (0)\n#   * specific-trap: 0\n#\n# TRAP includes the following variable-bindings:\n# * sysUpTime.0 = 123\n# * snmpTrapOID.0 = 1.3.6.1.6.3.1.1.5.1\n\nfrom pysnmp.hlapi.v3arch.asyncio import *\n\n# v1/2c specific\nfrom pysnmp.proto import rfc1902\nfrom pysnmp.proto.api import v2c\n\nimport asyncio\n\n\nasync def run():\n    # Send TRAP v1 notification\n    snmpEngine = SnmpEngine()\n\n    errorIndication, errorStatus, errorIndex, varBinds = (\n        await sendNotification(\n            snmpEngine,\n            CommunityData('public'),\n            UdpTransportTarget(('localhost', 162)),\n            ContextData(),\n            'trap',\n            NotificationType(\n                ObjectIdentity('1.3.6.1.6.3.1.1.5.1')\n            ).addVarBinds(\n                # sysUpTime is mandatory for TRAP\n                ('1.3.6.1.2.1.1.3.0', v2c.Integer32(123))\n            )\n        )\n    )\n\n    if errorIndication:\n        print(errorIndication)\n    elif errorStatus:\n        print('%s at %s' % (\n            errorStatus.prettyPrint(),\n            errorIndex and varBinds[int(errorIndex) - 1][0] or '?'\n        ))\n    else:\n        for varBind in varBinds:\n            print(' = '.join([x.prettyPrint() for x in varBind]))\n\n    # v1 trap setup\n    ntforg = NotificationOriginator(snmpEngine)\n\n    errorIndication = await ntforg.sendVarBinds(\n        CommunityData('public'),\n        UdpTransportTarget(('localhost', 162)),\n        ContextData(),\n        'trap',\n        # SNMPv1 uses PDU-specific approach to identify trap type\n        # Generic trap #0 is coldStart\n        # Specific trap 0\n        # Uptime 123\n        # Enterprise OID 1.3.6.1.4.1.20408.4.1.1.2\n        v2c.apiTrapPDU.setDefaults(\n            v2c.TrapPDU(),\n            enterprise='1.3.6.1.4.1.20408.4.1.1.2',\n            generic=0,\n            specific=0,\n            timeStamp=123\n        ).getVarBinds()\n    )\n\n    if errorIndication:\n        print(errorIndication)\n\n    snmpEngine.transportDispatcher.closeDispatcher()\n\n\nasyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Creating SNMP Notification Type in Python using PySNMP\nDESCRIPTION: This snippet demonstrates how to create an SNMP Notification Type using PySNMP's NotificationType class. It creates a linkUp notification type.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> from pysnmp.hlapi.v3arch.asyncio import *\n>>>\n>>> x = NotificationType(ObjectIdentity('IF-MIB', 'linkUp'))\n>>> # ... calling MIB lookup ...\n>>> >>> [ str(y) for x in n ]\n['SNMPv2-MIB::snmpTrapOID.0 = 1.3.6.1.6.3.1.1.5.3', 'IF-MIB::ifIndex = ', 'IF-MIB::ifAdminStatus = ', 'IF-MIB::ifOperStatus = ']\n```\n\n----------------------------------------\n\nTITLE: Checking UDP Port Usage for pysnmp\nDESCRIPTION: This command checks if UDP port 1611 is in use, which may be relevant for the pysnmp project's network operations.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/Development.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnetstat -anp udp | grep 1611\n```\n\n----------------------------------------\n\nTITLE: Demonstrating UdpTransportTarget API Change in Python\nDESCRIPTION: This snippet illustrates the breaking change in the Transport type construction API for PySNMP 7.1. It shows how calls to UdpTransportTarget() need to be updated to use async/await syntax.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/ROADMAP.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nUdpTransportTarget()\n```\n\nLANGUAGE: python\nCODE:\n```\nawait UdpTransportTarget.create()\n```\n\n----------------------------------------\n\nTITLE: Generating Default SNMP v1 Trap with PySNMP Asyncio\nDESCRIPTION: This code snippet demonstrates how to generate a default SNMP v1 trap using PySNMP's high-level API with asyncio. It sets up the SNMP engine, community data, transport target, and notification type, then sends the trap asynchronously.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v1arch/asyncio/agent/ntforg/common-notifications.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pysnmp.hlapi.v1arch.asyncio import *\n\nasync def run():\n    snmpEngine = SnmpEngine()\n    \n    await sendNotification(\n        snmpEngine,\n        CommunityData('public'),\n        UdpTransportTarget(('demo.snmplabs.com', 162)),\n        ContextData(),\n        'trap',\n        NotificationType(\n            ObjectIdentity('1.3.6.1.6.3.1.1.5.2')\n        )\n    )\n    snmpEngine.transportDispatcher.closeDispatcher()\n\nasyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Preparing for SNMP Query Execution in PySNMP\nDESCRIPTION: Shows the initial setup for executing an SNMP query with all required parameters. This is the final preparation before sending the actual SNMP request.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> from pysnmp.hlapi.v3arch.asyncio import *\n>>>\n>>> g = await get_cmd(SnmpEngine(),\n...            CommunityData('public'),\n...            await UdpTransportTarget.create(('demo.pysnmp.com', 161)),\n...            ContextData(),\n```\n\n----------------------------------------\n\nTITLE: Initializing SNMP GET Command with SNMPv2c in PySNMP\nDESCRIPTION: Starts building an SNMP GET command using SNMPv2c protocol with the 'public' community string. This is an incomplete example showing the initial part of the command construction.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from pysnmp.hlapi.v3arch.asyncio import *\n>>>\n>>> g = await get_cmd(SnmpEngine(), CommunityData('public'),\n...\n```\n\n----------------------------------------\n\nTITLE: Sending SNMP Inform Notification with PySNMP\nDESCRIPTION: Demonstrates sending an SNMP inform notification using PySNMP's asyncio interface. The example shows how to create a notification for IF-MIB linkUp event with a specific instance index.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom pysnmp.hlapi.v3arch.asyncio import *\n\ng = await send_notification(SnmpEngine(),\n                     CommunityData('public'),\n                     await UdpTransportTarget.create(('demo.pysnmp.com', 162)),\n                     ContextData(),\n                     'inform',\n                     NotificationType(ObjectIdentity('IF-MIB', 'linkUp'), instanceIndex=(123,))\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring py2exe to include PySNMP MIB modules in setup.py\nDESCRIPTION: This setup.py script demonstrates how to properly configure py2exe to include the necessary PySNMP MIB modules. It explicitly lists 'pysnmp.smi.mibs.*' and 'pysnmp.smi.mibs.instances.*' in the 'includes' option, ensuring these modules are packaged with the application.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/py2exe-throws-error.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom distutils.core import setup\nimport sys\n\noptions = {}\n\nif \"py2exe\" in sys.argv:\n  import py2exe\n  # fix executables\n  options['console'] = ['myapp.py']\n  # add files not found my modulefinder\n  options['options'] = {\n    'py2exe': {\n      'includes': [\n        'pysnmp.smi.mibs.*',\n        'pysnmp.smi.mibs.instances.*'\n      ]\n    }\n  }\n\nsetup(**options)\n```\n\n----------------------------------------\n\nTITLE: Working with MIB Object Instances and Indices in PySNMP\nDESCRIPTION: Demonstrates how to reference specific MIB object instances by adding indices to the ObjectIdentity. For scalar objects, the index is '0' by convention.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> x = ObjectIdentity('SNMPv2-MIB', 'system', 0)\n>>> # ... calling MIB lookup ...\n>>> tuple(x)\n(1, 3, 6, 1, 2, 1, 1, 1, 0)\n```\n\n----------------------------------------\n\nTITLE: Defining USM Secret Table for Passphrase Management\nDESCRIPTION: This snippet defines a table structure for storing USM user passphrases used for key localization. The table is designed to be consulted during SNMP engine-ID autodiscovery and includes user credentials with authentication and privacy keys.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/mibs/PYSNMP-USM-MIB.txt#2025-04-22_snippet_4\n\nLANGUAGE: ASN.1\nCODE:\n```\n--\n-- The pysnmpUsmSecretTable contains a database of USM users passphrases\n-- used for key localization. This table may be consulted during SNMP engine-ID\n-- autodiscovery procedure.\n--\n\npysnmpUsmSecretTable OBJECT-TYPE\n    SYNTAX       SEQUENCE OF PysnmpUsmSecretEntry\n    MAX-ACCESS   not-accessible\n    STATUS       current\n    DESCRIPTION\n        \"The table of USM users passphrases configured in the SNMP\n         engine's Local Configuration Datastore (LCD).\"\n    ::= { pysnmpUsmMIBObjects 2 }\n\npysnmpUsmSecretEntry OBJECT-TYPE\n    SYNTAX       PysnmpUsmSecretEntry\n    MAX-ACCESS   not-accessible\n    STATUS       current\n    DESCRIPTION\n        \"Information about a particular USM user credentials.\"\n    INDEX       { IMPLIED pysnmpUsmSecretUserName }\n    ::= { pysnmpUsmSecretTable 1 }\n\nPysnmpUsmSecretEntry ::= SEQUENCE {\n    pysnmpUsmSecretUserName       SnmpAdminString,\n    pysnmpUsmSecretAuthKey        OCTET STRING,\n    pysnmpUsmSecretPrivKey        OCTET STRING,\n    pysnmpUsmSecretStatus         RowStatus\n}\n```\n\n----------------------------------------\n\nTITLE: Running SNMP Simulator in Docker Container\nDESCRIPTION: Command to run a Docker container with SNMP simulator, mapping UDP port 161 to the host. This allows testing PySNMP against a simulated SNMP agent without needing to configure a real SNMP device.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/examples/README.md#2025-04-22_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\ndocker run -d -p 161:161/udp ghcr.io/lextudio/docker-snmpsim:master\n```\n\n----------------------------------------\n\nTITLE: Querying Multi-Indexed SNMP Table Entry in Python using PySNMP\nDESCRIPTION: This example shows how to query a multi-indexed SNMP table entry (tcpConnectionState) using PySNMP. It demonstrates constructing the OID with multiple index values.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> x = ObjectIdentity('TCP-MIB', 'tcpConnectionState',\n...                    'ipv4', '195.218.254.105', 41511,\n...                    'ipv4', '194.67.1.250', 993)\n>>> # ... calling MIB lookup ...\n>>> str(x)\n'1.3.6.1.2.1.6.19.1.7.1.4.195.218.254.105.41511.1.4.194.67.1.250.993'\n```\n\n----------------------------------------\n\nTITLE: Configuring SNMP v1/v2c Community Data in PySNMP\nDESCRIPTION: Creates CommunityData objects for SNMPv1 and SNMPv2c protocol versions, setting the community name ('public') and the SNMP model version using mpModel parameter.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from pysnmp.hlapi.v3arch.asyncio import *\n>>>\n>>> CommunityData('public', mpModel=0)  # SNMPv1\nCommunityData('public')\n>>> CommunityData('public', mpModel=1)  # SNMPv2c\nCommunityData('public')\n```\n\n----------------------------------------\n\nTITLE: Exception Thrown During SNMP Response Processing in Python\nDESCRIPTION: This code snippet shows an exception that may be thrown when processing SNMP responses, particularly when using v1arch PySNMP code. The error is related to value constraint violations in ASN.1 decoding.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/ignored-snmp-packets.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n....\nFile \"build/bdist.linux-i686/egg/pyasn1/type/base.py\", line 64, in\n__init__\nFile \"build/bdist.linux-i686/egg/pyasn1/type/base.py\", line 32, in _verifySubtypeSpec\nFile \"build/bdist.linux-i686/egg/pyasn1/type/constraint.py\", line 33, in __call__\npyasn1.type.error.ValueConstraintError: ConstraintsIntersection(ConstraintsIntersection(), ValueRangeConstraint(0, 4294967295)) failed at: ValueRangeConstraint(0, 4294967295) failed at: -1413698940\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Broken BER Encoding for Counter in Python\nDESCRIPTION: This snippet shows an example of broken BER encoding for a Counter value, resulting in a ValueConstraintError when trying to decode the value.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/ignored-snmp-packets.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> decoder.decode('A\\x04\\xab\\xbc\\xaa\\x84', asn1Spec=rfc1155.Counter())\nTraceback (most recent call last):\n...\npyasn1.type.error.ValueConstraintError: ConstraintsIntersection(ConstraintsIntersection(), ValueRangeConstraint(0, 4294967295)) failed at: ValueRangeConstraint(0, 4294967295) failed at: -1413698940\n```\n\n----------------------------------------\n\nTITLE: Complete SNMP GET Command for Reading a Scalar MIB Object\nDESCRIPTION: Shows a complete SNMP GET command to read the sysDescr.0 scalar MIB object from the SNMPv2-MIB using PySNMP's high-level asyncio API.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> from pysnmp.hlapi.v3arch.asyncio import *\n>>> g = await get_cmd(SnmpEngine(),\n...            CommunityData('public'),\n...            await UdpTransportTarget.create(('demo.pysnmp.com', 161)),\n...            ContextData(),\n...            ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0)))\n```\n\n----------------------------------------\n\nTITLE: Configuring SNMPv3 User Authentication in PySNMP\nDESCRIPTION: Creates UsmUserData objects for SNMPv3 protocol with different authentication and privacy options. Shows examples with authentication key only and with both authentication and privacy keys.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from pysnmp.hlapi.v3arch.asyncio import *\n>>>\n>>> UsmUserData('testuser', authKey='myauthkey')\nUsmUserData(userName='testuser', authKey=<AUTHKEY>)\n>>> UsmUserData('testuser', authKey='myauthkey', privKey='myenckey')\nUsmUserData(userName='testuser', authKey=<AUTHKEY>, privKey=<PRIVKEY>)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SNMP Request Failure in Bash\nDESCRIPTION: This code snippet shows a comparison between a successful SNMP get request using pysnmpget and a failed request using snmpget.py for different OIDs on the same device.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/ignored-snmp-packets.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pysnmpget -v2c -c public 10.0.0.33 1.3.6.1.2.1.2.2.1.10.3\nSNMPv2-SMI::mib-2.2.2.1.10.3 = Counter32: 1519568842\n$ snmpget.py -v2c -c public 10.0.0.33 1.3.6.1.2.1.2.2.1.10.4\nrequestTimedOut\n```\n\n----------------------------------------\n\nTITLE: Using USM Master Keys with PySNMP Asyncio\nDESCRIPTION: Example demonstrating how to use USM master keys for SNMP v3 authentication in an asyncio-based PySNMP command generator. This shows how to configure SNMP USM with master authentication and privacy keys.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v3arch/asyncio/manager/cmdgen/advanced-topics.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#\n# This example demonstrates how to use master USM key with asyncio.\n#\n# SNMPv3 authentication key localization is defined in RFC3414\n# Under normal circumstances, human suppliers of USM values deal just\n# with master keys and let SNMP engine to derive localized ones.\n#\n# Here we assume the following values:\n#\n# USM user: usr-md5-des, auth: MD5, priv: DES\n# Auth key: authkey1, priv key: privkey1\n#\nimport asyncio\nfrom pysnmp.hlapi.v3arch.asyncio import *\n\n# use master key\nloop = asyncio.get_event_loop()\n\nsnmpEngine = SnmpEngine()\n\n# USM supports two-way auth keys localization (auth and privacy keys can be\n# localized to specific authoritative SNMP Engine ID). Since we do not know\n# specific authoritative SNMP Engine ID till later and do not want to manage\n# many localized keys, we will use USM feature to auto-localize master key.\n\nlcd = snmpEngine.msgAndPduDsp.mibInstrumController.mibBuilder.loadModules(\n    'SNMP-USER-BASED-SM-MIB'\n)\n\nusmUser = lcd['SNMP-USER-BASED-SM-MIB']['usmUserEntry']\n\n# Create a new user in the USM MIB with security name \"usr-md5-des\" and\n# localizaion keys.\n\nresult = usmUser.getNode(\n    usmUser.name + (3,)  # usmUserAuthProtocol\n).syntax.clone(\n    usmUser.getNode(usmUser.name + (3,)).syntax.namedValues.getValue(\n        'usmHMACMD5AuthProtocol'\n    )\n)\n\nresult = usmUser.getNode(\n    usmUser.name + (4,)  # usmUserAuthKeyChange\n).syntax.clone(\n    'authkey1'\n)\n\nresult = usmUser.getNode(\n    usmUser.name + (5,)  # usmUserPrivProtocol\n).syntax.clone(\n    usmUser.getNode(usmUser.name + (5,)).syntax.namedValues.getValue(\n        'usmDESPrivProtocol'\n    )\n)\n\nresult = usmUser.getNode(\n    usmUser.name + (6,)  # usmUserPrivKeyChange\n).syntax.clone(\n    'privkey1'\n)\n\nusmUserEntry, = lcd['SNMP-USER-BASED-SM-MIB']['usmUserTable'].getInstances()\n\nusmUserEntry.registerUser(\n    snmpEngine=snmpEngine,\n    userName='usr-md5-des',\n    securityName='usr-md5-des'\n)\n\n# and then we can query whatever SNMP Engine\nresult = loop.run_until_complete(\n    getCmd(\n        snmpEngine,\n        UsmUserData('usr-md5-des'),\n        UdpTransportTarget(('demo.snmplabs.com', 161)),\n        ContextData(),\n        ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0))\n    )\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Using -OT Flag with PySNMP for Hex Output in Bash\nDESCRIPTION: Example demonstrating how to use the -OT command line parameter with PySNMP's snmpget.py to display octet string values in hexadecimal format similar to Net-SNMP.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/non-printable-snmp-values-tools.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ snmpget.py -OT -v2c -c public 127.0.0.1 .1.3.6.1.4.1.14988.1.1.1.2.1.1.0.23.\n183.34.8.200.3\nSNMPv2-SMI::enterprises.14988.1.1.1.2.1.1.0.23.183.34.8.200.3 =\nOctetString: 00 17 b7 22 08 c8\n```\n\n----------------------------------------\n\nTITLE: Creating SNMP Engine with PySNMP asyncio API\nDESCRIPTION: Initializes the central SnmpEngine object which is required for all PySNMP operations. The engine is assigned a unique identifier automatically that will be used in SNMP protocol operations.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pysnmp.hlapi.v3arch.asyncio import *\n>>>\n>>> SnmpEngine()\nSnmpEngine(snmpEngineID=<SnmpEngineID value object, tagSet <TagSet object, tags 0:0:4>, subtypeSpec <ConstraintsIntersection object, consts <ValueSizeConstraint object, consts 0, 65535>, <ValueSizeConstraint object, consts 5, 32>>, encoding iso-8859-1, payload [0x80004fb8054d61...6c6f63611bb6c040]>)\n```\n\n----------------------------------------\n\nTITLE: Displaying SNMP Values with PySNMP Default Formatting in Bash\nDESCRIPTION: Example showing how PySNMP's snmpget.py tool displays octet string values by default, which can appear as garbaged characters for binary data.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/non-printable-snmp-values-tools.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ snmpget.py -v2c -c public 127.0.0.1 .1.3.6.1.4.1.14988.1.1.1.2.1.1.0.23.183.34.8.200.3\nSNMPv2-SMI::enterprises.14988.1.1.1.2.1.1.0.23.183.34.8.200.3 =\nOctetString: Ë‡ÄŒ\n```\n\n----------------------------------------\n\nTITLE: Defining USM Key Type Configuration\nDESCRIPTION: This snippet defines a configuration object for key type specification when configuring USM users. It allows specifying whether keys are plain-text passphrases, pre-hashed passphrases, or localized keys mixed with the SNMP Security Engine ID.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/mibs/PYSNMP-USM-MIB.txt#2025-04-22_snippet_3\n\nLANGUAGE: ASN.1\nCODE:\n```\npysnmpUsmKeyType OBJECT-TYPE\n    SYNTAX       INTEGER { passphrase (0), master(1), localized(2) }\n    MAX-ACCESS   not-accessible\n    STATUS       current\n    DESCRIPTION \"When configuring USM user, the value of this enumeration\n                 determines how the keys should be treated. The default\n                 value \"passphrase\" means that given keys are plain-text\n                 pass-phrases, \"master\" indicates that the keys are pre-hashed\n                 pass-phrases, while \"localized\" stands for pre-hashed\n                 pass-phrases mixed with SNMP Security Engine ID value.\"\n    DEFVAL      { passphrase }\n    ::= { pysnmpUsmCfg 3 }\n\n-- The usmUser Group ************************************************\n\npysnmpUsmUser       OBJECT IDENTIFIER ::= { pysnmpUsmMIBObjects 3 }\n```\n\n----------------------------------------\n\nTITLE: Using USM Localized Keys with PySNMP Asyncio\nDESCRIPTION: Example demonstrating how to use pre-localized USM keys for SNMP v3 authentication in an asyncio-based PySNMP command generator. This shows how to configure SNMP USM with localized authentication and privacy keys for a specific authoritative engine ID.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v3arch/asyncio/manager/cmdgen/advanced-topics.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#\n# This example demonstrates how to use pre-localized USM keys with asyncio.\n#\n# SNMPv3 authentication key localization is defined in RFC3414\n# Localized keys can be used for pre-computing of final keys on a per-user,\n# per-SNMP Engine ID basis.\n#\n# Here we use pre-localized keys to let local SNMP engine communicate\n# with a specific remote SNMP engine.\n#\n# Here we assume the following values:\n#\n# Local SNMP Engine ID = 0x0102030405\n# Remote SNMP Engine ID = 0x0102030405\n# Auth key = 0x9c8c650fea1c9cb0ebc9630ac7678f8f\n# Priv key = 0x9c8c650fea1c9cb0ebc9630ac7678f8f\n#\nimport asyncio\nfrom pysnmp.hlapi.v3arch.asyncio import *\nfrom pysnmp.proto import rfc1902\n\nloop = asyncio.get_event_loop()\n\nsnmpEngine = SnmpEngine(OctetString(hexValue='0102030405'))\n\n# User entry comes from LCD (LocalConfigurationDataBase) which is a\n# MIB managed by SNMP Engine.\nlcd = snmpEngine.msgAndPduDsp.mibInstrumController.mibBuilder.loadModules(\n    'SNMP-USER-BASED-SM-MIB'\n)\n\n# Create a new user in the USM MIB with security name \"usr-md5-des\" and\n# localized auth/priv keys.\n\nresult = lcd['SNMP-USER-BASED-SM-MIB']['usmUserTable'].adduser(\n    snmpEngine,\n    rfc1902.OctetString(hexValue='0102030405'),  # SnmpEngineId\n    'usr-md5-des',  # userName\n    'MD5',  # authentication\n    rfc1902.OctetString(hexValue='9c8c650fea1c9cb0ebc9630ac7678f8f'),  # auth key\n    'DES',  # privacy\n    rfc1902.OctetString(hexValue='9c8c650fea1c9cb0ebc9630ac7678f8f'),  # priv key\n    # we are creating a direct entry, so securityName == username\n    securityName='usr-md5-des'\n)\n\nresult = loop.run_until_complete(\n    getCmd(\n        snmpEngine,\n        UsmUserData('usr-md5-des'),\n        UdpTransportTarget(('demo.snmplabs.com', 161)),\n        ContextData(),\n        ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0))\n    )\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Transport Target for SNMP Command in PySNMP\nDESCRIPTION: Adds a UDP transport target to the SNMP GET command, specifying the remote host ('demo.pysnmp.com') and standard SNMP port (161). The await keyword is used since this is an asyncio-based API.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from pysnmp.hlapi.v3arch.asyncio import *\n>>>\n>>> g = await get_cmd(SnmpEngine(),\n...            CommunityData('public'),\n...            await UdpTransportTarget.create(('demo.pysnmp.com', 161)),\n...\n```\n\n----------------------------------------\n\nTITLE: Problematic SNMP Value Display\nDESCRIPTION: Example showing incorrect way of displaying SNMP values that results in garbled output, especially for IpAddress types\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/non-printable-snmp-values-apps.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor varBind in varBinds:\n  print(' = '.join([ str(x) for x in varBind ])\n```\n\n----------------------------------------\n\nTITLE: Initializing Unsigned32 Type in PySNMP\nDESCRIPTION: Creates an Unsigned32 type object in PySNMP, representing a 32-bit unsigned integer value.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/api-reference.rst#2025-04-22_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\npysnmp.proto.rfc1902.Unsigned32(initializer)\n```\n\n----------------------------------------\n\nTITLE: Custom Managed Object Implementation in PySNMP\nDESCRIPTION: Code example demonstrating how to create and implement custom managed objects in a PySNMP agent. Shows setup and configuration of SNMP managed objects.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/smi/agent/implementing-mib-objects.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Custom managed object implementation example\n```\n\n----------------------------------------\n\nTITLE: Using ObjectType for SNMP Value Representation in PySNMP\nDESCRIPTION: Shows how to use the ObjectType class to represent SNMP values associated with MIB objects. The class acts as a container for both the ObjectIdentity (OID) and the value associated with it.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> from pysnmp.hlapi.v3arch.asyncio import *\n>>> x = ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0), 'Linux i386 box'))\n>>> # ... calling MIB lookup ...\n>>> x[0].prettyPrint()\n'SNMPv2-MIB::sysDescr.0'\n>>> x[1].prettyPrint()\n'Linux i386 box'\n```\n\n----------------------------------------\n\nTITLE: Creating TimeTicks Type in PySNMP\nDESCRIPTION: Instantiates a TimeTicks type object in PySNMP, representing a time interval measured in hundredths of a second.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/api-reference.rst#2025-04-22_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\npysnmp.proto.rfc1902.TimeTicks(initializer)\n```\n\n----------------------------------------\n\nTITLE: Broadcasting SNMP Requests for Agent Discovery in PySNMP with asyncio\nDESCRIPTION: This example demonstrates how to use broadcast techniques to discover SNMP agents on a network. The script sends broadcast SNMP requests and processes responses from any agents on the network. It uses asyncio for asynchronous network operations.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/v1arch/asyncio/manager/cmdgen/transport-tweaks.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Send broadcast SNMP GET request\n#\n# The following script sends a SNMP GET request to broadcast address which\n# will be responded by any SNMP agent (within the same broadcast domain or\n# behind UDP packet forwarder).\n#\n# This script performs similar to the following Net-SNMP command:\n#\n# $ snmpget -v1 -c public 255.255.255.255 1.3.6.1.2.1.1.1.0\n\nfrom pysnmp.carrier.asyncio.dgram import udp\nfrom pysnmp.entity import engine, config\nfrom pysnmp.entity.rfc3413 import cmdgen\nfrom pysnmp.proto import rfc1902\nfrom pysnmp import debug\nimport asyncio\n\n# debug.setLogger(debug.Debug('all'))\n\n# Create SNMP engine instance\nsnmpEngine = engine.SnmpEngine()\n\n# SecurityName <-> CommunityName mapping\nconfig.addV1System(snmpEngine, 'my-area', 'public')\n\n# Specify security settings per SecurityName (SNMPv1 - 0, SNMPv2c - 1)\nconfig.addTargetParams(snmpEngine, 'my-creds', 'my-area', 'noAuthNoPriv', 0)\n\n# Setup transport endpoint and bind it with security settings yielding\n# a target name\nconfig.addTransport(\n    snmpEngine,\n    udp.domainName,\n    udp.UdpTransport().openClientMode()\n)\nconfig.addTargetAddr(\n    snmpEngine, 'my-router',\n    udp.domainName, ('255.255.255.255', 161),\n    'my-creds',\n    # UDP broadcast needs to be explicitly enabled\n    tagList='broadcast-agent-discovery'\n)\n\n# Specify broadcast addressing options\nconfig.addSocketTransportOption(\n    snmpEngine,\n    udp.domainName,\n    'broadcast-agent-discovery',\n    # Enable UDP broadcasts at the socket level\n    udp.enableBroadcast, 1\n)\n\n# Error/response receiver\nasync def cbFun(snmpEngine, sendRequestHandle, errorIndication,\n         errorStatus, errorIndex, varBinds, cbCtx):\n    if errorIndication:\n        print(errorIndication)\n        return\n\n    # SNMPv1 response may contain noSuchName error *and* SNMPv2c exception,\n    # so we ignore noSuchName error here\n    if errorStatus and errorStatus != 2:\n        print('%s at %s' % (errorStatus.prettyPrint(),\n                            errorIndex and varBinds[int(errorIndex)-1][0] or '?'))\n        return\n\n    for varBind in varBinds:\n        print(' = '.join([x.prettyPrint() for x in varBind]))\n\n    # Continue enumeration for as long as non-empty varBinds are returned\n    return True\n\n# Prepare request to be sent yielding GetRequestPDU -> str\ncmdgen.AsyncCommandGenerator().getCmd(\n    snmpEngine,\n    'my-router',\n    ((1, 3, 6, 1, 2, 1, 1, 1, 0),),\n    # User-space callback function and its context\n    (cbFun, None)\n)\n\n# Run I/O dispatcher which would send pending queries and process\n# responses\nloop = asyncio.get_event_loop()\nloop.run_until_complete(snmpEngine.transportDispatcher.runDispatcher())\n```\n\n----------------------------------------\n\nTITLE: Initializing Integer Type in PySNMP\nDESCRIPTION: Creates an Integer type object in PySNMP, representing a signed integer value.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/api-reference.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npysnmp.proto.rfc1902.Integer(initializer)\n```\n\n----------------------------------------\n\nTITLE: Adding SNMP Context to SNMP Command in PySNMP\nDESCRIPTION: Adds an empty context (default) to the SNMP GET command. SNMP context addresses specific collections of MIBs served by the SNMP engine at the managed entity.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from pysnmp.hlapi.v3arch.asyncio import *\n>>>\n>>> g = await get_cmd(SnmpEngine(),\n...            CommunityData('public'),\n...            await UdpTransportTarget.create(('demo.pysnmp.com', 161)),\n...            ContextData(),\n...\n```\n\n----------------------------------------\n\nTITLE: Initializing Opaque Type in PySNMP\nDESCRIPTION: Creates an Opaque type object in PySNMP, representing arbitrary ASN.1 syntax.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/api-reference.rst#2025-04-22_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\npysnmp.proto.rfc1902.Opaque(initializer)\n```\n\n----------------------------------------\n\nTITLE: Sending SNMP TRAP Notifications\nDESCRIPTION: Demonstrates how to send SNMP TRAP notifications using PySNMP's notification originator API with asyncio support.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v3arch/asyncio/index.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# This script is functionally identical to:\n#\n# $ snmptrap -v1 -c public demo.snmplabs.com 0 0.0.0.0 1 0 0 '' ''\n#\n# Note: it uses higher-level asyncio API\n\nfrom pysnmp.hlapi.asyncio import *\n\nasync def run():\n    snmpEngine = SnmpEngine()\n    errorIndication, errorStatus, errorIndex, varBinds = await sendNotification(\n        snmpEngine,\n        CommunityData('public', mpModel=0),\n        UdpTransportTarget(('demo.snmplabs.com', 162)),\n        ContextData(),\n        'trap',\n        NotificationType(\n            ObjectIdentity('1.3.6.1.6.3.1.1.5.2')\n        )\n    )\n\n    if errorIndication:\n        print(errorIndication)\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.get_event_loop().run_until_complete(run())\n```\n\n----------------------------------------\n\nTITLE: Exploring Available SNMP Command Functions in PySNMP\nDESCRIPTION: Lists the available SNMP command functions in PySNMP's high-level API, including get_cmd, next_cmd, bulk_cmd, and set_cmd for different SNMP operations.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from pysnmp.hlapi.v3arch.asyncio import *\n>>> [ x for x in dir() if 'cmd' in x]\n['bulk_cmd', 'get_cmd', 'next_cmd', 'set_cmd']\n>>> get_cmd\n<function get_cmd at 0x222b330>\n```\n\n----------------------------------------\n\nTITLE: Creating Counter64 Type in PySNMP\nDESCRIPTION: Instantiates a Counter64 type object in PySNMP, representing a 64-bit counter value.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/api-reference.rst#2025-04-22_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\npysnmp.proto.rfc1902.Counter64(initializer)\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx with pip\nDESCRIPTION: Command to install the Sphinx documentation generator using pip package manager\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# pip install sphinx\n```\n\n----------------------------------------\n\nTITLE: Using ObjectIdentity for MIB Object Resolution in PySNMP\nDESCRIPTION: Demonstrates how to use the ObjectIdentity class to represent and resolve MIB objects. Shows examples of initializing with MIB name and converting between symbolic names and OIDs.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> from pysnmp.hlapi.v3arch.asyncio import *\n>>>\n>>> x = ObjectIdentity('SNMPv2-MIB', 'system')\n>>> # ... calling MIB lookup ...\n>>> tuple(x)\n(1, 3, 6, 1, 2, 1, 1, 1)\n>>> x = ObjectIdentity('iso.org.dod.internet.mgmt.mib-2.system.sysDescr')\n>>> # ... calling MIB lookup ...\n>>> str(x)\n'1.3.6.1.2.1.1.1'\n```\n\n----------------------------------------\n\nTITLE: Using MIB Files with PySNMP for Improved Value Display in Bash\nDESCRIPTION: Example showing how to use MIB files with PySNMP's snmpwalk.py tool to format values according to their display conventions for better human-readable output.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/non-printable-snmp-values-tools.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ snmpwalk.py -m IP-MIB,IF-MIB -v2c -c public 127.0.0.1 .1.3.6.1.4.1\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation\nDESCRIPTION: Command to generate HTML documentation from source files using Sphinx\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/README.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ make html\n```\n\n----------------------------------------\n\nTITLE: Adding Custom MIB Directory to MibBuilder\nDESCRIPTION: Demonstrates how to add a custom directory of pre-compiled MIBs to the MibBuilder's sources. This approach can be used after manually compiling MIBs with the mibdump tool from PySMI.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/pass-custom-mib-to-manager.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbuilder = engine.get_mib_builder()\n# Make ./mibs available to all OIDs that are created\n# e.g. with \"MIB-NAME-MIB::identifier\"\nbuilder.add_mib_sources(builder_module.DirMibSource(\n    os.path.join( HERE, 'mibs')\n))\n```\n\n----------------------------------------\n\nTITLE: Autodocumenting the bulk_cmd Function in PySNMP's Asyncio API\nDESCRIPTION: Sphinx directive that automatically generates documentation for the bulk_cmd function from the pysnmp.hlapi.v3arch.asyncio module. This function likely implements the SNMP GETBULK operation using Python's asyncio framework.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/hlapi/v3arch/asyncio/manager/cmdgen/bulkcmd.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autofunction:: pysnmp.hlapi.v3arch.asyncio.bulk_cmd\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation Structure for PySNMP TRAP/INFORM Operations\nDESCRIPTION: This ReStructuredText snippet defines the documentation structure for TRAP/INFORM operations in PySNMP. It sets up the page title, includes a table of contents directive, and references the send_notification function from the pysnmp.hlapi.v1arch.asyncio module.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/hlapi/v1arch/asyncio/agent/ntforg/notification.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nTRAP/INFORM Operation\n=====================\n\n.. toctree::\n   :maxdepth: 2\n\n.. autofunction:: pysnmp.hlapi.v1arch.asyncio.send_notification\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple UDP Transport Endpoints in PySNMP\nDESCRIPTION: This code demonstrates how to register multiple network transports with an SNMP engine, each bound to a different IP address and port. The example shows configuration for two transport endpoints - one on localhost (127.0.0.1) and another on a local network interface (192.168.1.1), both using port 162. Each transport is registered with a unique transport domain identifier.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/listening-on-multiple-interfaces.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Security setup would follow\n...\n# Setup first transport endpoint\nconfig.add_socket_transport(\n    snmpEngine,\n    udp.domainName + (1,),\n    udp.UdpSocketTransport().open_server_mode(('127.0.0.1', 162))\n)\n\n# Setup second transport endpoint\nconfig.add_socket_transport(\n    snmpEngine,\n    udp.domainName + (2,),\n    udp.UdpSocketTransport().open_server_mode(('192.168.1.1', 162))\n)\n# Receiver callback function implementation and Dispatcher invocation\n# would follow\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Related Resources Section in reStructuredText\nDESCRIPTION: This snippet defines a section for related resources, including links to support options and various documentation pages.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/license.rst#2025-04-22_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\nRelated Resources\n-----------------\n\n- `Support Options`_\n- :doc:`/quick-start`\n- :doc:`/troubleshooting`\n- :doc:`/faq/index`\n```\n\n----------------------------------------\n\nTITLE: Defining Source Address Table and Entry Objects\nDESCRIPTION: This snippet defines the snmpSourceAddrTable and snmpSourceAddrEntry objects which augment the SNMP-TRANSPORT-ADDRESS::snmpSourceAddressTable to provide source transport address functionality.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/mibs/PYSNMP-SOURCE-MIB.txt#2025-04-22_snippet_2\n\nLANGUAGE: MIB\nCODE:\n```\nsnmpSourceAddrTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SnmpSourceAddrEntry\n    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"A table of transport addresses to be used as a source in the\n         generation of SNMP messages. This table contains additional\n         objects for the SNMP-TRANSPORT-ADDRESS::snmpSourceAddressTable.\"\n    ::= { pysnmpSourceMIBObjects 1 }\n\nsnmpSourceAddrEntry OBJECT-TYPE\n    SYNTAX      SnmpSourceAddrEntry\n    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"A transport address to be used as a source in the generation\n         of SNMP operations.\n\n         An entry containing additional management information\n         applicable to a particular target.\"\n    AUGMENTS { snmpTargetAddrEntry }\n    ::= { snmpSourceAddrTable 1 }\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Include Directive for PySNMP Documentation\nDESCRIPTION: This directive includes external link definitions from a common file to maintain consistency across documentation.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /includes/_links.rst\n```\n\n----------------------------------------\n\nTITLE: Verifying SET Request Values with PySNMP\nDESCRIPTION: This snippet demonstrates how to use PySNMP to send a SET request while verifying the value against MIB constraints. It loads the SNMPv2-MIB and checks if the 'new system name' value satisfies sysName constraints.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/snmp-data-constraints-verification-failure.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nerrorIndication, errorStatus, errorIndex, varBinds = await cmdGen.set_cmd(\n    cmdgen.CommunityData('public'),\n    await cmdgen.UdpTransportTarget(('localhost', 161)),\n    ( cmdgen.MibVariable('SNMPv2-MIB', 'sysName', 0), 'new system name' )\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Workaround for Negative Counter Values in Python\nDESCRIPTION: This code snippet provides a hack to convert negated Counter values into their positive complimentaries. It modifies the clone method of Counter and Counter32 classes to handle negative values correctly.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/ignored-snmp-packets.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pysnmp.proto import rfc1155, rfc1902, api\nfrom pyasn1.codec.ber import encoder, decoder\n\n# --- hack Counter type\n\ndef counterCloneHack(self, *args):\n    if args and args[0] < 0:\n        args = (0xffffffff+args[0]-1,) + args[1:]\n\n    return self.__class__(*args)\n\nrfc1155.Counter.clone = counterCloneHack\nrfc1902.Counter32.clone = counterCloneHack\n```\n\n----------------------------------------\n\nTITLE: Running Python in Release Mode with PySNMP\nDESCRIPTION: A command to execute Python scripts in optimized mode using the -O flag. Running Python in release mode can make your code execute faster by disabling debug features and assertions.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/performance.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -O myscript.py\n```\n\n----------------------------------------\n\nTITLE: Installing PySNMP via pip\nDESCRIPTION: Command to install the PySNMP package using pip. This will download and install the library along with its dependencies from PyPI.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install pysnmp\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for PySNMP SET Operation\nDESCRIPTION: reStructuredText documentation for the SET operation in PySNMP. The file uses Sphinx directives to create documentation, including a table of contents and an autofunction directive that automatically generates documentation from the set_cmd function docstring.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/hlapi/v3arch/asyncio/manager/cmdgen/setcmd.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nSET Operation\n=============\n\n.. toctree::\n   :maxdepth: 2\n\n.. autofunction:: pysnmp.hlapi.v3arch.asyncio.set_cmd\n```\n\n----------------------------------------\n\nTITLE: Installing PySNMP via pip\nDESCRIPTION: Command to install PySNMP package from PyPI using pip package manager. This is the recommended way to install the stable version of PySNMP.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/download.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install pysnmp\n```\n\n----------------------------------------\n\nTITLE: Documenting GET Operation in PySNMP using reStructuredText\nDESCRIPTION: This snippet defines the structure for documenting the GET operation in PySNMP. It uses reStructuredText directives to create a table of contents and automatically generate function documentation for the get_cmd function in the pysnmp.hlapi.v3arch.asyncio module.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/hlapi/v3arch/asyncio/manager/cmdgen/getcmd.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nGET Operation\n=============\n\n.. toctree::\n   :maxdepth: 2\n\n.. autofunction:: pysnmp.hlapi.v3arch.asyncio.get_cmd\n```\n\n----------------------------------------\n\nTITLE: Setting up PySNMP Test Environment (Bash)\nDESCRIPTION: Commands to create a test folder, set up a Python virtual environment, and install PySNMP using pipenv on macOS/Linux.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/quick-start.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~\n$ mkdir test-field\n$ cd test-field\n$ pyenv local 3.12\n$ pip install pipenv\n$ pipenv install pysnmp\n$ pipenv run pip list\n```\n\n----------------------------------------\n\nTITLE: Including toctree and autofunction in ReStructuredText for pysnmp WALK operation\nDESCRIPTION: ReStructuredText markup that sets up documentation for the WALK operation in pysnmp. It includes a table of contents tree with maximum depth of 2 and autodocuments the walk_cmd function from the asyncio module in pysnmp's high-level API.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/hlapi/v3arch/asyncio/manager/cmdgen/walkcmd.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n.. autofunction:: pysnmp.hlapi.v3arch.asyncio.walk_cmd\n```\n\n----------------------------------------\n\nTITLE: Creating ObjectIdentifier Type in PySNMP\nDESCRIPTION: Instantiates an ObjectIdentifier type object in PySNMP, representing an SNMP Object Identifier.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/api-reference.rst#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\npysnmp.proto.rfc1902.ObjectIdentifier(initializer)\n```\n\n----------------------------------------\n\nTITLE: Including PySNMP bulk_walk_cmd Documentation Using Sphinx\nDESCRIPTION: This snippet uses Sphinx's restructuredtext directives to create documentation for the bulk_walk_cmd function in PySNMP's asyncio API. It includes a toctree directive for organizing related documents and an autofunction directive to automatically generate function documentation.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/hlapi/v1arch/asyncio/manager/cmdgen/bulkwalkcmd.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n.. autofunction:: pysnmp.hlapi.v1arch.asyncio.bulk_walk_cmd\n```\n\n----------------------------------------\n\nTITLE: Initializing Counter32 Type in PySNMP\nDESCRIPTION: Creates a Counter32 type object in PySNMP, representing a 32-bit counter value.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/api-reference.rst#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\npysnmp.proto.rfc1902.Counter32(initializer)\n```\n\n----------------------------------------\n\nTITLE: Including auto-documentation for PySNMP's AsyncIO GETBULK function\nDESCRIPTION: This reStructuredText directive automatically generates function documentation for the bulk_cmd function within PySNMP's high-level AsyncIO API.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/hlapi/v1arch/asyncio/manager/cmdgen/bulkcmd.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autofunction:: pysnmp.hlapi.v1arch.asyncio.bulk_cmd\n```\n\n----------------------------------------\n\nTITLE: Initializing IpAddress Type in PySNMP\nDESCRIPTION: Creates an IpAddress type object in PySNMP, which can be initialized with either a string value or a hexadecimal value representing an IP address.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/api-reference.rst#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\npysnmp.proto.rfc1902.IpAddress(strValue=None, hexValue=None)\n```\n\n----------------------------------------\n\nTITLE: Documenting send_notification Function in PySNMP's Asyncio API\nDESCRIPTION: Generates automatic documentation for the send_notification function from the pysnmp.hlapi.v3arch.asyncio module using Sphinx's autofunction directive.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/hlapi/v3arch/asyncio/agent/ntforg/notification.rst#2025-04-22_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autofunction:: pysnmp.hlapi.v3arch.asyncio.send_notification\n```\n\n----------------------------------------\n\nTITLE: Initializing Bits Type in PySNMP\nDESCRIPTION: Creates a Bits type object in PySNMP, representing a bit string.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/api-reference.rst#2025-04-22_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\npysnmp.proto.rfc1902.Bits(initializer)\n```\n\n----------------------------------------\n\nTITLE: Performing SNMPv2c GETBULK Operation with pysnmp and asyncio\nDESCRIPTION: This snippet demonstrates how to perform an SNMPv2c GETBULK operation using pysnmp's high-level API with asyncio. It retrieves multiple OID values from an SNMP agent until the end of MIB is reached.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/examples/hlapi/v1arch/asyncio/manager/cmdgen/snmp-versions.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# This script performs a series of SNMP GETBULK operations using the following options:\n#\n#   * SNMPv2c\n#   * with community name 'public'\n#   * over IPv4/UDP\n#   * to an Agent at demo.snmplabs.com:161\n#   * for some columns of the IF-MIB::ifTable table\n#   * stop when response OIDs leave the scopes of the table\n#\n# This script performs similar to the following Net-SNMP command:\n#\n# $ snmpbulkwalk -v2c -c public -C n0 -Cr50 demo.snmplabs.com IF-MIB::ifTable\n\nfrom pysnmp.hlapi.asyncio import *\n\nasync def run():\n    snmpEngine = SnmpEngine()\n    await bulkCmd(\n        snmpEngine,\n        CommunityData('public'),\n        UdpTransportTarget(('demo.snmplabs.com', 161)),\n        ContextData(),\n        0, 50,\n        ObjectType(ObjectIdentity('IF-MIB', 'ifDescr')),\n        ObjectType(ObjectIdentity('IF-MIB', 'ifType')),\n        ObjectType(ObjectIdentity('IF-MIB', 'ifMtu')),\n        ObjectType(ObjectIdentity('IF-MIB', 'ifSpeed')),\n        ObjectType(ObjectIdentity('IF-MIB', 'ifPhysAddress')),\n        ObjectType(ObjectIdentity('IF-MIB', 'ifAdminStatus')),\n        ObjectType(ObjectIdentity('IF-MIB', 'ifOperStatus')),\n        lexicographicMode=False,\n        lookupMib=True,\n        ignoreNonIncreasingOid=True,\n        \n        # User-space callback function and its context\n        cbFun=cbFun, cbCtx=snmpEngine\n    )\n\nasync def cbFun(snmpEngine, sendRequestHandle, errorIndication,\n                errorStatus, errorIndex, varBinds, cbCtx):\n    if errorIndication:\n        print(errorIndication)\n        return\n    elif errorStatus:\n        print('%s at %s' % (errorStatus.prettyPrint(),\n                            errorIndex and varBinds[int(errorIndex) - 1][0] or '?'))\n        return\n    else:\n        for varBind in varBinds:\n            print(' = '.join([x.prettyPrint() for x in varBind]))\n\n    # Stop on EOM\n    return True\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct BER Encoding for Counter in Python\nDESCRIPTION: This snippet shows the correct BER encoding for a Counter value, which includes an additional octet to ensure the highest bit is set to zero for positive values.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/ignored-snmp-packets.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> decoder.decode('A\\x05\\x00\\xab\\xbc\\xaa\\x84',\n>>> asn1Spec=rfc1155.Counter())\n(Counter('2881268356'), '')\n```\n\n----------------------------------------\n\nTITLE: Defining SNMP Engine Discovery Configuration Objects\nDESCRIPTION: This snippet defines configuration objects to control USM discovery behavior. It includes pysnmpUsmDiscoverable and pysnmpUsmDiscovery which determine whether the SNMP engine responds to unknown clients and attempts to discover peer engine IDs.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/mibs/PYSNMP-USM-MIB.txt#2025-04-22_snippet_2\n\nLANGUAGE: ASN.1\nCODE:\n```\npysnmpUsmDiscoverable OBJECT-TYPE\n    SYNTAX       INTEGER { notDiscoverable(0), discoverable(1) }\n    MAX-ACCESS   read-write\n    STATUS       current\n    DESCRIPTION \"Whether SNMP engine would support its discovery by\n                 responding to unknown clients.\"\n    DEFVAL      { discoverable }\n    ::= { pysnmpUsmCfg 1 }\n\npysnmpUsmDiscovery OBJECT-TYPE\n    SYNTAX       INTEGER { doNotDiscover(0), doDiscover(1) }\n    MAX-ACCESS   read-write\n    STATUS       current\n    DESCRIPTION \"Whether SNMP engine would try to figure out the EngineIDs\n                 of its peers by sending discover requests.\"\n    DEFVAL      { doDiscover }\n    ::= { pysnmpUsmCfg 2 }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ImportError when MIB modules are missing in py2exe-packaged PySNMP application\nDESCRIPTION: This traceback shows the error that occurs when py2exe fails to include necessary PySNMP MIB modules in the packaged application. The error specifically indicates that the 'mibs.instances' module could not be found.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/py2exe-throws-error.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nFile \"pysnmp\\entity\\rfc3413\\oneliner\\cmdgen.pyc\", line 116, in __init__\nFile \"pysnmp\\entity\\engine.pyc\", line 16, in __init__\nFile \"pysnmp\\proto\\rfc3412.pyc\", line 16, in __init__\nFile \"pysnmp\\smi\\builder.pyc\", line 143, in __init__\nFile \"pysnmp\\smi\\builder.pyc\", line 35, in init\nFile \"pysnmp\\smi\\builder.pyc\", line 80, in _init\nImportError: No module named mibs.instances\n```\n\n----------------------------------------\n\nTITLE: Defining PYSNMP-USM-MIB Module in ASN.1 SMI Notation\nDESCRIPTION: This snippet defines the PYSNMP-USM-MIB module with imports, module identity, and revision history. It establishes the foundation for the User Security Model (USM) implementation in PySNMP with metadata about the organization and contact information.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/mibs/PYSNMP-USM-MIB.txt#2025-04-22_snippet_0\n\nLANGUAGE: ASN.1\nCODE:\n```\nPYSNMP-USM-MIB DEFINITIONS ::= BEGIN\n\nIMPORTS\n    MODULE-IDENTITY,\n    OBJECT-TYPE\n        FROM SNMPv2-SMI\n    SnmpAdminString\n        FROM SNMP-FRAMEWORK-MIB\n    usmUserEntry\n        FROM SNMP-USER-BASED-SM-MIB\n    RowStatus\n        FROM SNMPv2-TC\n    pysnmpModuleIDs\n        FROM PYSNMP-MIB;\n\npysnmpUsmMIB MODULE-IDENTITY\n    LAST-UPDATED \"201704140000Z\"\n    ORGANIZATION \"The PySNMP Project\"\n    CONTACT-INFO \"E-mail: LeXtudio Inc. <support@lextudio.com>\n                  GitHub: https://github.com/lextudio/pysnmp\"\n    DESCRIPTION\n        \"This MIB module defines objects specific to User\n         Security Model (USM) implementation at PySNMP.\"\n    REVISION    \"202211120000Z\"\n    DESCRIPTION \"Updated contact\"\n    REVISION    \"201908300000Z\"\n    DESCRIPTION \"Added USM key types\"\n    REVISION    \"201707300000Z\"\n    DESCRIPTION \"Extended authentication key size\"\n    REVISION    \"201704140000Z\"\n    DESCRIPTION \"Updated addresses\"\n    REVISION \"200505140000Z\"          -- 14 May 2005, midnight\n    DESCRIPTION \"The Initial Revision\"\n    ::= { pysnmpModuleIDs 1 }\n```\n\n----------------------------------------\n\nTITLE: Defining Conformance Information\nDESCRIPTION: This snippet defines the conformance section of the MIB module, establishing object identifiers for compliance statements and object groups. These objects are used to specify conformance requirements for implementations of the MIB.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/mibs/PYSNMP-USM-MIB.txt#2025-04-22_snippet_8\n\nLANGUAGE: ASN.1\nCODE:\n```\n-- Conformance Information *******************************************\n\npysnmpUsmMIBCompliances OBJECT IDENTIFIER\n                            ::= { pysnmpUsmMIBConformance 1 }\npysnmpUsmMIBGroups      OBJECT IDENTIFIER\n                            ::= { pysnmpUsmMIBConformance 2 }\n\nEND\n```\n\n----------------------------------------\n\nTITLE: Creating Integer32 Type in PySNMP\nDESCRIPTION: Instantiates an Integer32 type object in PySNMP, which represents a 32-bit signed integer value.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/api-reference.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npysnmp.proto.rfc1902.Integer32(initializer)\n```\n\n----------------------------------------\n\nTITLE: Defining PYSNMP-SOURCE-MIB Module with Imports and Module Identity\nDESCRIPTION: This snippet defines the PYSNMP-SOURCE-MIB module and imports necessary types and objects from SNMPv2-SMI, SNMPv2-TC, SNMP-TARGET-MIB, and PYSNMP-MIB. It also declares the module identity with revision history and contact information.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/mibs/PYSNMP-SOURCE-MIB.txt#2025-04-22_snippet_0\n\nLANGUAGE: MIB\nCODE:\n```\nPYSNMP-SOURCE-MIB DEFINITIONS ::= BEGIN\n\nIMPORTS\n    MODULE-IDENTITY,\n    OBJECT-TYPE\n        FROM SNMPv2-SMI\n    TAddress\n        FROM SNMPv2-TC\n    snmpTargetAddrEntry\n        FROM SNMP-TARGET-MIB\n    pysnmpModuleIDs\n        FROM PYSNMP-MIB;\n\npysnmpSourceMIB MODULE-IDENTITY\n    LAST-UPDATED \"201704140000Z\"\n    ORGANIZATION \"The PySNMP Project\"\n    CONTACT-INFO \"E-mail: LeXtudio Inc. <support@lextudio.com>\n                  GitHub: https://github.com/lextudio/pysnmp\"\n    DESCRIPTION\n        \"This MIB module defines implementation specific objects\n         that provide variable source transport endpoints feature to\n         SNMP Engine and Standard SNMP Applications.\"\n    REVISION    \"202211120000Z\"\n    DESCRIPTION \"Updated contact\"\n    REVISION    \"201704140000Z\"\n    DESCRIPTION \"Updated addresses\"\n    REVISION    \"201501160000Z\"          -- 16 January 2015, midnight\n    DESCRIPTION \"Initial Revision\"\n    ::= { pysnmpModuleIDs 8 }\n```\n\n----------------------------------------\n\nTITLE: Creating Gauge32 Type in PySNMP\nDESCRIPTION: Instantiates a Gauge32 type object in PySNMP, representing a 32-bit gauge value.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/api-reference.rst#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\npysnmp.proto.rfc1902.Gauge32(initializer)\n```\n\n----------------------------------------\n\nTITLE: Defining MIB Administrative Assignments\nDESCRIPTION: This snippet defines the administrative assignments for objects and conformance within the PYSNMP-SOURCE-MIB namespace.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/mibs/PYSNMP-SOURCE-MIB.txt#2025-04-22_snippet_1\n\nLANGUAGE: MIB\nCODE:\n```\npysnmpSourceMIBObjects     OBJECT IDENTIFIER ::= { pysnmpSourceMIB 1 }\npysnmpSourceMIBConformance OBJECT IDENTIFIER ::= { pysnmpSourceMIB 2 }\n```\n\n----------------------------------------\n\nTITLE: Initializing Null Type in PySNMP\nDESCRIPTION: Creates a Null type object in PySNMP. The Null type is part of base ASN.1 types and is included in the rfc1902 module for convenience.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/api-reference.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npysnmp.proto.rfc1902.Null(initializer)\n```\n\n----------------------------------------\n\nTITLE: Documenting BULK WALK Operation in PySNMP using RST\nDESCRIPTION: This RST (reStructuredText) snippet sets up documentation for the BULK WALK operation in PySNMP, using toctree for navigation and autofunction directive to automatically generate documentation for the bulk_walk_cmd function from the pysnmp.hlapi.v3arch.asyncio module.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/hlapi/v3arch/asyncio/manager/cmdgen/bulkwalkcmd.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nBULK WALK Operation\n===================\n\n.. toctree::\n   :maxdepth: 2\n\n.. autofunction:: pysnmp.hlapi.v3arch.asyncio.bulk_walk_cmd\n```\n\n----------------------------------------\n\nTITLE: MIB Object Definition Example in ASN.1\nDESCRIPTION: Shows the ASN.1 definition of the sysUpTime MIB object from a standard MIB, demonstrating how MIB objects are formally defined with syntax, access level, status, and description.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_8\n\nLANGUAGE: asn1\nCODE:\n```\nsysUpTime OBJECT-TYPE\n    SYNTAX      TimeTicks\n    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The time (in hundredths of a second) since\n            the network management portion of the system\n            was last re-initialized.\"\n    ::= { system 3 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for pysnmp SET Operation\nDESCRIPTION: This snippet configures the Sphinx documentation for the SET operation in pysnmp. It sets up a table of contents and uses the autofunction directive to automatically generate documentation for the set_cmd function.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/hlapi/v1arch/asyncio/manager/cmdgen/setcmd.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nSET Operation\n=============\n\n.. toctree::\n   :maxdepth: 2\n\n.. autofunction:: pysnmp.hlapi.v1arch.asyncio.set_cmd\n```\n\n----------------------------------------\n\nTITLE: Example of SNMP GET Command in Shell\nDESCRIPTION: Shows command-line examples of SNMP GET operations using both MIB object name (SNMPv2-MIB::sysDescr.0) and OID (1.3.6.1.2.1.1.1.0) addressing with the snmpget utility.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/pysnmp-hlapi-tutorial.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ snmpget -v2c -c public demo.pysnmp.com SNMPv2-MIB::sysDescr.0\nSNMPv2-MIB::sysDescr.0 = STRING: SunOS zeus.pysnmp.com\n$\n$ snmpget -v2c -c public demo.pysnmp.com 1.3.6.1.2.1.1.1.0\nSNMPv2-MIB::sysDescr.0 = STRING: SunOS zeus.pysnmp.com\n```\n\n----------------------------------------\n\nTITLE: Including Auto-Generated Function Documentation in reStructuredText\nDESCRIPTION: This snippet demonstrates how to include auto-generated function documentation for pysnmp's get_cmd function using Sphinx's autofunction directive in reStructuredText format.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/hlapi/v1arch/asyncio/manager/cmdgen/getcmd.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: pysnmp.hlapi.v1arch.asyncio.get_cmd\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Directives for PySNMP GETNEXT\nDESCRIPTION: ReStructuredText directives defining documentation structure and auto-documentation of the next_cmd function from pysnmp.hlapi.v1arch.asyncio module.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/hlapi/v1arch/asyncio/manager/cmdgen/nextcmd.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n.. autofunction:: pysnmp.hlapi.v1arch.asyncio.next_cmd\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for TRAP/INFORM Operation Documentation\nDESCRIPTION: Sets up a table of contents for the TRAP/INFORM operation documentation with a maximum depth of 2 levels.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/hlapi/v3arch/asyncio/agent/ntforg/notification.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure with Sphinx toctree Directives in reStructuredText\nDESCRIPTION: This snippet defines the hierarchical documentation structure for PySNMP using Sphinx toctree directives. It organizes content into four main sections with specified depth levels and captions.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/docs/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: PySNMP Fundamentals\n\n   /docs/pysnmp-architecture\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Usage Tutorials\n\n   /docs/pysnmp-hlapi-tutorial\n\n.. toctree::\n   :maxdepth: 2\n   :caption: API Reference\n\n   /docs/api-reference\n\n.. toctree::\n   :maxdepth: 1\n   :caption: Additional Resources\n\n   /faq/index\n   /examples/index\n   /download/index\n```\n\n----------------------------------------\n\nTITLE: Capturing SNMP Traffic with tcpdump in Bash\nDESCRIPTION: This snippet demonstrates the use of tcpdump to capture SNMP traffic, showing that responses are being sent by the device even when the PySNMP client reports a timeout.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/ignored-snmp-packets.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n13:33:30.161843 IP 10.0.0.33.snmp > 10.0.0.1.51094: \nGetResponse(31)  interfaces.ifTable.ifEntry.ifInOctets.3=1532504859\n13:33:30.161881 IP 10.0.0.33.snmp > 10.0.0.1.51094: \nGetResponse(31)  interfaces.ifTable.ifEntry.ifInOctets.3=1532504859\n```\n\n----------------------------------------\n\nTITLE: Garbled Output Example\nDESCRIPTION: Example output showing how IpAddress values appear garbled when using direct string conversion\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/non-printable-snmp-values-apps.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n1.3.6.1.4.1.161.19.3.2.1.63.0 = 50000\n1.3.6.1.4.1.161.19.3.2.1.4.0 = '\\x01\\x02\\x03\\x04'\n```\n\n----------------------------------------\n\nTITLE: Defining Source Address Entry Sequence and TAddress Object\nDESCRIPTION: This snippet defines the SnmpSourceAddrEntry sequence structure and the snmpSourceAddrTAddress object which contains the transport address for source endpoints.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/mibs/PYSNMP-SOURCE-MIB.txt#2025-04-22_snippet_3\n\nLANGUAGE: MIB\nCODE:\n```\nSnmpSourceAddrEntry ::= SEQUENCE {\n    snmpSourceAddrTAddress     TAddress\n}\n\nsnmpSourceAddrTAddress OBJECT-TYPE\n    SYNTAX      TAddress\n    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n        \"This object contains a transport address.  The format of\n         this address depends on the value of the\n         snmpSourceAddrTDomain object.\"\n    ::= { snmpSourceAddrEntry 1 }\n```\n\n----------------------------------------\n\nTITLE: Including External Links in reStructuredText\nDESCRIPTION: This snippet includes an external file containing link definitions for use throughout the documentation.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/license.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: /includes/_links.rst\n```\n\n----------------------------------------\n\nTITLE: Defining MIB Conformance Information\nDESCRIPTION: This snippet defines the conformance information for the PYSNMP-SOURCE-MIB, including object identifiers for compliance statements and object groups.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/mibs/PYSNMP-SOURCE-MIB.txt#2025-04-22_snippet_4\n\nLANGUAGE: MIB\nCODE:\n```\npysnmpSourceMIBCompliances OBJECT IDENTIFIER\n                            ::= { pysnmpSourceMIBConformance 1 }\npysnmpSourceMIBGroups      OBJECT IDENTIFIER\n                            ::= { pysnmpSourceMIBConformance 2 }\n\nEND\n```\n\n----------------------------------------\n\nTITLE: Changing Poetry Virtual Environment Python Version for pysnmp\nDESCRIPTION: These commands set the local Python version to 3.11 using pyenv, update Poetry's virtual environment to use Python 3.11, and display information about the virtual environment.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/Development.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npyenv local 3.11\npoetry env use 3.11\npoetry env info --path\npoetry env list\n```\n\n----------------------------------------\n\nTITLE: Displaying SNMP Values with Net-SNMP Hex Formatting in Bash\nDESCRIPTION: Example showing how Net-SNMP's snmpget command displays the same octet string value in a more readable hexadecimal format by default.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/non-printable-snmp-values-tools.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ snmpget -v2c -c public 127.0.0.1 .1.3.6.1.4.1.14988.1.1.1.2.1.1.0.23.183.34.8.200.3\nSNMPv2-SMI::enterprises.14988.1.1.1.2.1.1.0.23.183.34.8.200.3 =\nHex-STRING: 00 17 B7 22 08 C8\n```\n\n----------------------------------------\n\nTITLE: Building Multiple Versions Documentation for pysnmp Deployment\nDESCRIPTION: This command uses sphinx-polyversion to build documentation for multiple versions of the project for deployment purposes.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/Development.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry run sphinx-polyversion docs/poly.py\n```\n\n----------------------------------------\n\nTITLE: Bumping Version Number for pysnmp Project\nDESCRIPTION: This command updates the Poetry lock file and increments the patch version number of the project.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/Development.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry lock\npoetry version patch\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Link References\nDESCRIPTION: A collection of link references in reStructuredText format that define URLs for PySNMP documentation, related tools, standards, and resources.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/includes/_links.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\n.. _LeXtudio Inc.: https://www.lextudio.com\n.. _PySNMP PyPI package: http://pypi.python.org/pypi/pysnmp\n.. _PySNMP GitHub repository: https://github.com/lextudio/pysnmp\n.. _GitHub issue: https://github.com/lextudio/pysnmp/issues/new\n.. _Stack Overflow: http://stackoverflow.com/questions/tagged/pysnmp\n.. _demo.pysnmp.com: https://www.pysnmp.com/snmp-simulation-service#\n.. _mibs.pysnmp.com: https://mibs.pysnmp.com/\n.. _PySMI: https://www.pysnmp.com/pysmi/\n.. _SNMP Proxy Forwarder: https://www.pysnmp.com/snmpfwd/\n.. _snmpsim: https://www.pysnmp.com/snmpsim/\n.. _PyASN1: https://pyasn1.readthedocs.io/\n.. _mibdump: https://www.pysnmp.com/pysmi/docs/mibdump\n.. _command line tools: https://www.pysnmp.com/snmpclitools/\n.. _Python: https://www.python.org/\n.. _SNMP: https://en.wikipedia.org/wiki/Simple_Network_Management_Protocol\n.. _PSF: https://www.python.org/psf/\n.. _ASN.1: https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One\n.. _RFC3413: https://www.ietf.org/rfc/rfc3413.txt\n.. _RFC3418: https://www.ietf.org/rfc/rfc3418.txt\n.. _pyenv: https://github.com/pyenv/pyenv\n.. _pyenv-win: https://github.com/pyenv-win/pyenv-win\n.. _Wireshark: https://www.wireshark.org/\n.. _tcpdump: https://www.tcpdump.org/\n.. _Net-SNMP: http://www.net-snmp.org/\n.. _Support Options: https://www.pysnmp.com/support\n.. _this lifecycle page: https://github.com/lextudio/pysnmp/blob/main/SECURITY.md\n.. _PySNMP Homepage: https://www.pysnmp.com/\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Toctree for PySNMP FAQ Section\nDESCRIPTION: This directive sets up a table of contents that automatically includes all files from the FAQ directory, with a maximum depth of 2 levels.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/faq/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :glob:\n\n   /faq/*\n```\n\n----------------------------------------\n\nTITLE: Building Current Version Documentation for pysnmp\nDESCRIPTION: This command builds the current version of the documentation using Sphinx to identify and fix any issues.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/Development.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry run make html -C docs\n```\n\n----------------------------------------\n\nTITLE: Including License File in reStructuredText\nDESCRIPTION: This snippet includes the project's license file, located two directories up from the current file.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/license.rst#2025-04-22_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../../LICENSE.rst\n```\n\n----------------------------------------\n\nTITLE: Including External Changelog in reStructuredText\nDESCRIPTION: This snippet demonstrates how to include an external file (CHANGES.rst) into the current reStructuredText document. The CHANGES.rst file is located two directories up from the current file's location.\nSOURCE: https://github.com/lextudio/pysnmp.git/blob/main/docs/source/changelog.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../../CHANGES.rst\n```"
  }
]