[
  {
    "owner": "danzen",
    "repo": "zimjs",
    "content": "TITLE: Creating Interactive Elements with ZIM in JavaScript\nDESCRIPTION: This snippet demonstrates creating basic interactive elements using ZIM, including a draggable rectangle, particle emitter, animated circle, and button with URL navigation.\nSOURCE: https://github.com/danzen/zimjs/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Rectangle(50, 50, green).center().drag(); // for a centered draggable rectangle!\n\nnew MotionController(new Emitter().center(), \"mousemove\"); // for a particle emitter following the mouse\n\nconst squiggle = new Squiggle().loc(100, 100); // wavy line with Bezier handles\nnew Circle(20, pink).addTo().animate({path:squiggle}, 1); // animate along a squiggle\n\nnew Button(200, 70, \"TRY ME\")\n  .pos(30,30,RIGHT,BOTTOM) \n  .tap(()=>{zgo(\"https://zimjs.com\")}); // go to URL\n```\n\n----------------------------------------\n\nTITLE: ZIM Setup with Vite and NPM for TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a ZIM project using Vite and NPM for TypeScript. It shows the necessary imports and a basic template for creating a ZIM application in TypeScript.\nSOURCE: https://github.com/danzen/zimjs/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ZIM - JavaScript Canvas Framework - https://zimjs.com - code creativity\nimport {Frame, Circle} from \"zimjs\";\n\n// See Docs under Frame for FIT, FILL, FULL, and TAG\nnew Frame(FIT, 1024, 768, light, dark, ready);\nfunction ready() {\n    \n    // given F (Frame), S (Stage), W (width), H (height)\n    // put code here\n    \n    new Circle(100, purple)\n        .center()\n        .drag();\n        \n} // end ready\n```\n\n----------------------------------------\n\nTITLE: Integrating ZIM with React (TypeScript)\nDESCRIPTION: This snippet shows how to integrate ZIM with React using TypeScript and the zim namespace. It creates a Frame component and adds a draggable red circle to the center of the canvas.\nSOURCE: https://github.com/danzen/zimjs/blob/master/README.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, ReactNode, StrictMode } from \"react\";\nimport \"./App.css\";\nimport zim from \"zimjs\";\n\nclass ZimFrame extends Component {\n  frame: zim.Frame | undefined;\n\n  componentDidMount(): void {\n      this.frame = new zim.Frame({\n        scaling: \"zim\",\n        width: 500,\n        height: 400,\n        color:light,\n        ready: () => {\n            // put code here\n            new zim.Circle(50, red).center().drag();\n        }\n      });\n  }\n  componentWillUnmount(): void {\n      this.frame?.dispose();\n  }\n  render(): ReactNode {\n      return null;\n  }\n}\n\nfunction App() {\n  return (\n      <>\n      <div>\n          {/* Move StrictMove from the root to here */}\n          <StrictMode>\n          <div id='zim'></div>\n          </StrictMode>\n          {/* Include ZIM code outside StrictMode */}\n          <ZimFrame />\n      </div>\n      </>\n  )\n}\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Integrating ZIM with Angular (TypeScript)\nDESCRIPTION: This snippet shows how to integrate ZIM with Angular using TypeScript. It creates a Frame component and adds a draggable red circle to the center of the canvas using the ZIM namespace.\nSOURCE: https://github.com/danzen/zimjs/blob/master/README.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterContentInit, Component, OnDestroy } from '@angular/core';\nimport { Frame, Circle } from 'zimjs';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnDestroy, AfterContentInit {\n  frame: Frame | undefined;\n  ngOnDestroy(): void {\n    this.frame?.dispose();\n  }\n\n  ngAfterContentInit(): void {\n    this.frame = new Frame({\n      scaling: FIT,\n      width: 600,\n      height: 300,\n      ready: () => {\n        new Circle(50, red).center().drag();\n      },\n    });\n  }\n\n  title = 'ZIM in Angular';\n}\n```\n\n----------------------------------------\n\nTITLE: ZIM Setup with Vite and NPM for JavaScript\nDESCRIPTION: This code snippet shows how to set up a ZIM project using Vite and NPM for vanilla JavaScript. It includes the necessary imports and a basic template for creating a ZIM application.\nSOURCE: https://github.com/danzen/zimjs/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ZIM - JavaScript Canvas Framework - https://zimjs.com - code creativity\nimport zim from \"zimjs\";\n\n// make ZIM global - if this is not used then would use zim.Frame() and zim.Circle()\nzimplify();\n\n// or make all globals except need to use zim.Blob and zim.Window\n// these are two classes that have occassionally conflicted with other libraries\n// zimplify([\"Blob\", \"Window\"]);\n\n// See Docs under Frame for FIT, FILL, FULL, and TAG\nnew Frame(FIT, 1024, 768, light, dark, ready);\nfunction ready() {\n    \n    // given F (Frame), S (Stage), W (width), H (height)\n    // put code here\n    \n    new Circle(100, purple)\n        .center()\n        .drag();\n        \n} // end ready\n```\n\n----------------------------------------\n\nTITLE: Integrating ZIM with Vue.js\nDESCRIPTION: This code snippet demonstrates how to integrate ZIM with Vue.js. It includes the setup for creating a ZIM Frame within a Vue component, with lifecycle hooks for mounting and unmounting.\nSOURCE: https://github.com/danzen/zimjs/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>  \n  import { onMounted, onBeforeUnmount } from \"vue\";\n  import zim from \"zimjs\";\n\n  let frame;\n  onMounted(() => {\n    frame = new zim.Frame({\n      scaling: \"zim\",\n      width: 500,\n      height: 400,\n      color:light,\n      ready: () => {\n          // put code here\n          new zim.Circle(50, red).center().drag();\n      }\n    });\n  });\n\n  onBeforeUnmount(() => {\n    frame.dispose();\n  });  \n</script>\n\n<template>\n  <div id=\"zim\"></div>\n</template>\n\n<style>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Integrating ZIM with Svelte (TypeScript)\nDESCRIPTION: This snippet shows how to integrate ZIM with Svelte using TypeScript and the zim namespace. It creates a Frame and adds a draggable red circle to the center of the canvas.\nSOURCE: https://github.com/danzen/zimjs/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">  \n  import { onMount, onDestroy } from \"svelte\";\n  import zim from \"zimjs\";\n\n  let frame: Frame;\n  onMount(() => {\n    frame = new zim.Frame({\n      scaling: \"zim\",\n      width: 500,\n      height: 400,\n      color:light,\n      ready: () => {\n          // put code here\n          new zim.Circle(50, red).center().drag();\n      }\n    });\n    function ready() {\n      // put code here\n      new zim.Circle(50, red).center().drag();\n    }\n  });\n\n  onDestroy(() => {\n    frame.dispose();\n  });\n</script>\n\n<main>\n  <div id=\"zim\">\n</main>\n\n<style>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Integrating ZIM with React (JavaScript)\nDESCRIPTION: This snippet demonstrates ZIM integration with React using JavaScript and global ZIM commands. It creates a Frame component and adds a draggable red circle to the center of the canvas.\nSOURCE: https://github.com/danzen/zimjs/blob/master/README.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, ReactNode, StrictMode } from \"react\";\nimport \"./App.css\";\nimport zim from \"zimjs\";\n\nzim.zimplify(); // make zim commands global\n\nclass ZimFrame extends Component {\n  frame: Frame | undefined;\n\n  componentDidMount(): void {\n      this.frame = new Frame({\n        scaling: \"zim\",\n        width: 500,\n        height: 400,\n        color:light,\n        ready: () => {\n            // put code here\n            new Circle(50, red).center().drag();\n        }\n      });\n  }\n  componentWillUnmount(): void {\n      this.frame?.dispose();\n  }\n  render(): ReactNode {\n      return null;\n  }\n}\n\nfunction App() {\n  return (\n      <>\n      <div>\n          {/* Move StrictMove from the root to here */}\n          <StrictMode>\n          <div id='zim'></div>\n          </StrictMode>\n          {/* Include ZIM code outside StrictMode */}\n          <ZimFrame />\n      </div>\n      </>\n  )\n}\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Integrating ZIM with Vue (JavaScript)\nDESCRIPTION: This snippet demonstrates how to integrate ZIM with Vue using global ZIM commands. It sets up a Frame and creates a draggable red circle in the center of the canvas.\nSOURCE: https://github.com/danzen/zimjs/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>  \n  import { onMounted, onBeforeUnmount } from \"vue\";\n  import zim from \"zimjs\";\n\n  zim.zimplify(); // make zim commands global\n\n  let frame;\n  onMounted(() => {\n    frame = new Frame({\n      scaling: \"zim\",\n      width: 500,\n      height: 400,\n      color:light,\n      ready: () => {\n          // put code here\n          new Circle(50, red).center().drag();\n      }\n    });\n  });\n\n  onBeforeUnmount(() => {\n    frame.dispose();\n  });  \n</script>\n\n<template>\n  <div id=\"zim\"></div>\n</template>\n\n<style>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Integrating ZIM with Svelte (JavaScript)\nDESCRIPTION: This snippet demonstrates ZIM integration with Svelte using JavaScript and global ZIM commands. It creates a Frame and adds a draggable red circle to the center of the canvas.\nSOURCE: https://github.com/danzen/zimjs/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<script>  \n  import { onMount, onDestroy } from \"svelte\";\n  import zim from \"zimjs\";\n\n  zim.zimplify(); // make zim commands global\n  \n  let frame;\n  onMount(() => {\n    frame = new Frame({\n      scaling: \"zim\",\n      width: 500,\n      height: 400,\n      color:light,\n      ready: () => {\n          // put code here\n          new Circle(50, red).center().drag();\n      }\n    });\n  });\n\n  onDestroy(() => {\n    frame.dispose();\n  });\n</script>\n\n<main>\n  <div id=\"zim\">\n</main>\n\n<style>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Adding ZIM Icons to HTML\nDESCRIPTION: This HTML snippet shows how to add ZIM icons to an HTML file, including various sizes for different devices and platforms.\nSOURCE: https://github.com/danzen/zimjs/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"57x57\" href=\"https://zimjs.com/icons/apple-touch-icon-57x57.png\" />\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"https://zimjs.com/icons/apple-touch-icon-114x114.png\" />\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"72x72\" href=\"https://zimjs.com/icons/apple-touch-icon-72x72.png\" />\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"144x144\" href=\"https://zimjs.com/icons/apple-touch-icon-144x144.png\" />\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"60x60\" href=\"https://zimjs.com/icons/apple-touch-icon-60x60.png\" />\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"120x120\" href=\"https://zimjs.com/icons/apple-touch-icon-120x120.png\" />\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"76x76\" href=\"https://zimjs.com/icons/apple-touch-icon-76x76.png\" />\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"152x152\" href=\"https://zimjs.com/icons/apple-touch-icon-152x152.png\" />\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"180x180\" href=\"https://zimjs.com/icons/apple-touch-icon.png\" />\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"https://zimjs.com/icons/favicon-32x32.png\" />\n<link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"https://zimjs.com/icons/android-chrome-192x192.png\" />\n<link rel=\"icon\" type=\"image/png\" sizes=\"512x512\" href=\"https://zimjs.com/icons/android-chrome-512x512.png\" />\n```\n\n----------------------------------------\n\nTITLE: Installing CreateJS Type Definitions via NPM\nDESCRIPTION: Command to install TypeScript type definitions for CreateJS library using NPM package manager. This package provides type support for CreateJS framework in TypeScript projects.\nSOURCE: https://github.com/danzen/zimjs/blob/master/ts-src/typings/createjs-lib/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @types/createjs-lib\n```\n\n----------------------------------------\n\nTITLE: Installing EaselJS Type Definitions with npm\nDESCRIPTION: This command installs the TypeScript type definitions for EaselJS as a development dependency in your project. These type definitions provide enhanced IDE support and type checking for EaselJS in TypeScript projects.\nSOURCE: https://github.com/danzen/zimjs/blob/master/ts-src/typings/easeljs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save @types/easeljs\n```\n\n----------------------------------------\n\nTITLE: Installing PreloadJS Type Definitions via npm\nDESCRIPTION: Command to install the PreloadJS type definitions package using npm. This allows TypeScript developers to use PreloadJS with proper type support in their projects.\nSOURCE: https://github.com/danzen/zimjs/blob/master/ts-src/typings/preloadjs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: npm\nCODE:\n```\nnpm install --save @types/preloadjs\n```\n\n----------------------------------------\n\nTITLE: Installing SoundJS TypeScript Definitions via npm\nDESCRIPTION: This command installs the TypeScript definitions for SoundJS as a development dependency in your project. It allows for type checking and autocompletion when using SoundJS with TypeScript.\nSOURCE: https://github.com/danzen/zimjs/blob/master/ts-src/typings/soundjs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save @types/soundjs\n```\n\n----------------------------------------\n\nTITLE: Installing TweenJS Type Definitions via npm\nDESCRIPTION: This command installs the TypeScript type definitions for TweenJS 0.6.0 as a development dependency in your project. These type definitions enable better TypeScript support when working with the TweenJS library.\nSOURCE: https://github.com/danzen/zimjs/blob/master/ts-src/typings/tweenjs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @types/tweenjs\n```"
  }
]