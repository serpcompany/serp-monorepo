[
  {
    "owner": "highcharts",
    "repo": "highcharts",
    "content": "TITLE: Loading a Preconfigured Highcharts Theme\nDESCRIPTION: Shows how to include a preconfigured theme JavaScript file to style Highcharts visualizations. Themes apply styling options globally through the Highcharts.setOptions method.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/your-first-chart.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"/js/themes/gray.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Efficient Highcharts Configuration Using Object Literals in JavaScript\nDESCRIPTION: Example of a properly written Highcharts configuration using JavaScript object literals. This approach is more concise and readable than using verbose object creation syntax.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/how-to-set-options.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Good code:\nconst options = {\n    chart: {\n        type: 'bar'\n    },\n    series: [{\n        name: 'Jane',\n        data: [1, 0, 4]\n    }]\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts with NPM\nDESCRIPTION: Command to install the Highcharts package from NPM and save it as a dependency in package.json.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/install-from-npm.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install highcharts --save\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Stock with Maps module\nDESCRIPTION: Example of loading Highcharts Stock bundle and then adding Maps functionality as a module.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/install-from-npm.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Highstock bundle includes Stock and basic Highcharts\nvar Highcharts = require('highcharts/highstock');\n// Load Highcharts Maps as a module to get both Maps and Stock\nrequire('highcharts/modules/map');\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic Highcharts Bar Chart\nDESCRIPTION: Creates a basic bar chart using the Highcharts.chart constructor. The code defines chart type, title, axes configuration, and series data for multiple datasets. The chart is initialized after the DOM content is loaded.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/your-first-chart.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('DOMContentLoaded', function () {\n    const chart = Highcharts.chart('container', {\n        chart: {\n            type: 'bar'\n        },\n        title: {\n            text: 'Fruit Consumption'\n        },\n        xAxis: {\n            categories: ['Apples', 'Bananas', 'Oranges']\n        },\n        yAxis: {\n            title: {\n                text: 'Fruit eaten'\n            }\n        },\n        series: [{\n            name: 'Jane',\n            data: [1, 0, 4]\n        }, {\n            name: 'John',\n            data: [5, 7, 3]\n        }]\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Container for Highcharts\nDESCRIPTION: Adds a div element to serve as the container for the Highcharts visualization. The container needs a specific ID that will be referenced in the chart initialization, and defines the dimensions of the chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/your-first-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\" style=\"width:100%; height:400px;\"></div>\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts from CDN\nDESCRIPTION: Basic example of loading Highcharts JavaScript library from the official Content Delivery Network. This is the simplest way to include Highcharts in a web page.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring DataPool with JSON and CSV Connectors in JavaScript\nDESCRIPTION: This snippet demonstrates setting up a DataPool in a Highcharts Dashboard with JSON and CSV data connectors. Prerequisites include having the 'Dashboards' library loaded. Inputs include URLs for JSON and CSV data sources, and optional data modifiers for processing. The data can be accessed asynchronously in the dashboard.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-pool-and-connectors.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function run() {\n  const board = await Dashboards.board('container', {\n    // ...\n    dataPool: {\n      connectors: [{\n        type: 'JSON',\n        id: 'My Series Data',\n        enablePolling: true,\n        jsonURL: 'https://'\n      }, {\n        type: 'CSV',\n        id: 'My Currency Data',\n        csvURL: 'https://'\n        dataModifier: {\n            type: 'Math',\n            columnFormulas: [{\n                column: 'My Fixed Rate',\n                formula: 'A1*7.8'\n            }]\n        }\n      }]\n    }\n    // ...\n  }, true);\n  // A component usually performs access to the data pool.\n  const table = await board.dataPool.getConnectorTable('My Currency Data');\n  const modifiedTable = table.modified;\n}\nrun();\n```\n\n----------------------------------------\n\nTITLE: Customizing Axis Labels in Highcharts JavaScript\nDESCRIPTION: This snippet illustrates how to customize axis labels in Highcharts by adding a '%' symbol to y-axis labels using either a format string or a formatter function. Dependencies include Highcharts library and correct initialization of the chart object. The formatter function directly modifies the label output based on the axis value.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/axes.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nyAxis: {\n    labels: {\n        format: '{value}%',''// provides the same result as:\n        formatter: function() {\n            return this.value + ' %';\n        }\n    },\n},\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Loading of Highcharts Modules\nDESCRIPTION: JavaScript example demonstrating how to dynamically import Highcharts modules using async/await for lazy loading, which is useful for performance optimization.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation-with-esm.md#2025-04-16_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst loadHighchartsAndCreateChart = async () => {\n    const { default: Highcharts } =\n        await import('https://code.highcharts.com/esm/highcharts.js');\n    await import('https://code.highcharts.com/esm/highcharts-more.js');\n    await import('https://code.highcharts.com/esm/modules/exporting.js');\n    await import('https://code.highcharts.com/esm/modules/export-data.js');\n\n    Highcharts.chart('container', { /* options */ });\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Global Highcharts Options in JavaScript\nDESCRIPTION: Example of using Highcharts.setOptions to apply consistent styling across multiple charts. This sets global defaults for chart background, border, and plot appearance that will apply to all charts created afterward.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/how-to-set-options.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.setOptions({\n    chart: {\n        backgroundColor: {\n            linearGradient: [0, 0, 500, 500],\n            stops: [\n                [0, 'rgb(255, 255, 255)'],\n                [1, 'rgb(240, 240, 255)']\n            ]\n        },\n        borderWidth: 2,\n        plotBackgroundColor: 'rgba(255, 255, 255, .9)',\n        plotShadow: true,\n        plotBorderWidth: 1\n    }\n});\n\nconst chart1 = Highcharts.chart('container', {\n    xAxis: {\n        type: 'datetime'\n    },\n\n    series: [{\n        data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4],\n        pointStart: Date.UTC(2010, 0, 1),\n        pointInterval: 3600 * 1000 // one hour\n    }]\n});\n\nconst chart2 = Highcharts.chart('container2', {\n    chart: {\n        type: 'column'\n    },\n\n    xAxis: {\n        type: 'datetime'\n    },\n\n    series: [{\n        data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4],\n        pointStart: Date.UTC(2010, 0, 1),\n        pointInterval: 3600 * 1000 // one hour\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Highcharts with CSV Data\nDESCRIPTION: JavaScript code to initialize a Highcharts column chart using external CSV data. Demonstrates how to configure the chart with CSV URL loading and basic chart options.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/data-module.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n    chart: {\n        type: 'column'\n    },\n    data: {\n        // enablePolling: true,\n        csvURL: window.location.origin + '/studies/data.csv'\n    },\n    title: {\n        text: 'Fruit Consumption'\n    },\n    yAxis: {\n        title: {\n            text: 'Units'\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Chart Types in Highcharts\nDESCRIPTION: This code shows how to combine different chart types within a single Highcharts visualization. It defines two series: one as a line chart and another as a column chart, each with its own data array.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/chart-types.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    type: 'line'\n    data: []\n},{\n    type: 'column'\n    data: []\n}]\n```\n\n----------------------------------------\n\nTITLE: Defining Dashboard Components\nDESCRIPTION: This JavaScript array defines the components to be included in the dashboard. Each component specifies its `type`, `renderTo` (cell ID), and options.  The first component is an HTML element (a heading), rendered in `dashboard-col-0`, while the second is a Highcharts chart, rendered in `dashboard-col-1`, with a simple series containing sample data.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/your-first-dashboard.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncomponents: [{\n    type: 'HTML',\n    renderTo: 'dashboard-col-0',\n    elements: [\n        {\n            tagName: 'h1',\n            textContent: 'Your first dashboard'\n        }\n    ]\n}, {\n    renderTo: 'dashboard-col-1',\n    type: 'Highcharts',\n    chartOptions: {\n        series: [{\n            data: [1, 2, 3, 4]\n        }]\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Good Example of Safe JSON Configuration\nDESCRIPTION: This snippet illustrates a safe usage of chart options in Highcharts where the input is valid JSON and any potentially harmful code is stripped out. The configuration is securely rendered despite the presence of an unsafe link in the title text.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/security.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighcharts.chart('container', {\n    \"title\": {\n        // Filtered\n        \"text\": \"<a href='javascript:console.log(document.domain)'>Click me</a>\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Highcharts Products as Modules\nDESCRIPTION: Example showing how to load multiple Highcharts products (Stock, Maps, and Gantt) alongside the base Highcharts library using the modular approach. This allows using multiple products on the same page.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/js/highcharts.js\"></script>\n<script src=\"/js/modules/stock.js\"></script>\n<script src=\"/js/modules/map.js\"></script>\n<script src=\"/js/modules/gantt.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Labels in Highcharts\nDESCRIPTION: This code snippet demonstrates how to enable data labels for a line series in Highcharts.  Setting enabled to true within the dataLabels configuration will display the value of each data point on the chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/series.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nplotOptions: {\n    line: {\n        dataLabels: {\n            enabled: true\n        }\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Enhanced Chart Configuration for Accessibility - JavaScript\nDESCRIPTION: This JavaScript code enhances the previous configuration by adding series names, axis titles, and category labels, improving the chart's accessibility for all users. This configuration is designed to be more informative for screen readers and general users.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/accessibility-module.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n    chart: {\n            type: 'column'\n        },\n        title: {\n            text: 'Corn vs wheat estimated production for 2020',\n        },\n        subtitle: {\n            text:\n                'Source: <a target=\"_blank\" ' +\n                'href=\"https://www.indexmundi.com/agriculture/?commodity=corn\">indexmundi</a>',\n        },\n        xAxis: {\n            categories: ['USA', 'China', 'Brazil', 'EU', 'India', 'Russia'],\n            title: {\n                text: 'Countries',\n            }\n        },\n        yAxis: {\n            title: {\n                text: '1000 metric tons (MT)'\n            }\n        },\n        tooltip: {\n            valueSuffix: ' (1000 MT)',\n        },\n        series: [\n            {\n                name: 'Corn',\n                data: [406292, 260000, 107000, 68300, 27500, 14500]\n            },\n            {\n                name: 'Wheat',\n                data: [51086, 136000, 5500, 141000, 107180, 77000]\n            }\n        ]\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts from Local Server\nDESCRIPTION: Example of loading Highcharts from your own server rather than the CDN. This requires downloading the Highcharts files and hosting them on your web server.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/js/highcharts.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Column Chart with ES6 Modules\nDESCRIPTION: Example implementation for creating a Highcharts column chart using ES6 modules. This approach enables minimal bundle size by only including required components.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation-with-esm.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// mychart.js\nimport Chart from 'highcharts/es-modules/Core/Chart/Chart.js';\nimport ColumnSeries from 'highcharts/es-modules/Series/Column/ColumnSeries.js';\n\n// Example to create a simple column chart in a div#container:\nconst myChart = new Chart('container', { series: [{ type: 'column', data: [1, 2, 3]}] });\n```\n\n----------------------------------------\n\nTITLE: Loading and Using JSON Data with Highcharts.ajax\nDESCRIPTION: This JavaScript snippet demonstrates how to load JSON data using Highcharts.ajax and then set it as the data for a Highcharts chart series. It creates a basic spline chart and assigns the fetched JSON data to the chart's series data option.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/custom-preprocessing.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.addEventListener('DOMContentLoaded', function () {\n\n    var options = {\n        chart: {\n            type: 'spline'\n        },\n        series: [{}]\n    };\n\n    Highcharts.ajax({  \n        url: 'data.json',  \n        success: function(data) {\n            options.series[0].data = data;\n            Highcharts.Chart('container', options);\n        }  \n    });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Threshold Component - JavaScript\nDESCRIPTION: This snippet demonstrates how to instantiate the ThresholdComponent with specific thresholds defined. It shows how to create a dashboard with this component, allowing adjustments to rendered contents based on user-specified values and corresponding thresholds.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/custom-component.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst board = Dashboards.board('container', {\n    gui: {\n        layouts: [{\n            rows: [{\n                cells: [{\n                    id: 'dashboard-col-0'\n                }]\n            }]\n        }]\n    },\n    components: [{\n        type: 'Threshold',\n        renderTo: 'dashboard-col-0',\n        component: 'HTML',\n        value: 10,\n        options: {\n            title: {\n                text: 'Threshold Component'\n            },\n            elements: [{\n                tagName: 'p',\n                textContent: `This is a demo of a custom threshold component\n                that allows you to adjust your content depending on the values\n                according to the appropriate thresholds. Move the slider above\n                the board and see how the options and components will change.`,\n                style: {\n                    padding: '0 14px',\n                    textAlign: 'justify'\n                }\n            }]\n        },\n        thresholds: [{\n            min: 15,\n            component: 'KPI',\n            options: {\n                title: 'KPI Component',\n                subtitle: 'You can use any component here, e.g. KPI.'\n            }\n        }, {\n            min: 40,\n            max: 69,\n            component: 'Highcharts',\n            options: {\n                title: '',\n                chartOptions: {\n                    title: {\n                        text: 'Highcharts Component'\n                    },\n                    subtitle: {\n                        text: 'You can use also the Highcharts Component.'\n                    },\n                    series: [{\n                        data: [1, 2, 3],\n                        animation: false\n                    }]\n                }\n            }\n        }, {\n            min: 70,\n            options: {\n                subtitle: `Options from previous thresholds, if not overwritten\n                or limited by the 'max' option, are passed to the next\n                thresholds.`\n            }\n        }, {\n            min: 80,\n            options: {\n                style: {\n                    background: '#197'\n                }\n            }\n        }, {\n            min: 90,\n            component: 'HTML',\n            options: {\n                title: {\n                    text: 'The End'\n                }\n            }\n        }]\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts with Babel\nDESCRIPTION: Example showing how to import and use Highcharts in a project that uses Babel for transpilation. This pattern works with npm-installed Highcharts packages.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation-with-esm.md#2025-04-16_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport Highcharts from 'highcharts';\n// Alternatively, this is how to load Highstock. Highmaps and Highcharts Gantt are similar.\n// import Highcharts from 'highcharts/highstock';\n\n// Load the exporting module.\nimport 'highcharts/modules/exporting';\n\n// Generate the chart\nHighcharts.chart('container', {\n  // options - see https://api.highcharts.com/highcharts\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Bar Series in Highcharts JavaScript\nDESCRIPTION: This snippet demonstrates how to set up an error bar series in Highcharts. It shows the configuration for a column chart with rainfall data and an associated error bar series. The error bar series is linked to the rainfall data series and provides error ranges for each data point.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/error-bar-series.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    name: 'Rainfall',\n    color: '#4572A7',\n    type: 'column',\n    data: [\n        49.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1,\n        95.6, 54.4\n    ]\n}, {\n    name: 'Rainfall error',\n    type: 'errorbar',\n    data: [[48, 51], [68, 73], [92, 110], [128, 136], [140, 150], [171, 179], [135, 143], [142, 149], [204, 220], [189, 199], [95, 110], [52, 56]]\n}]\n```\n\n----------------------------------------\n\nTITLE: Creating an Example Extension with Trackballs\nDESCRIPTION: This code illustrates how to create a custom plugin for Highcharts to add trackballs to column series by wrapping methods in the Tooltip prototype. It demonstrates adding functionality for displaying trackballs based on point data while ensuring existing markers are not duplicated.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/extending-highcharts/extending-highcharts.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n(function (H) {\n    // This is a self executing function\n    // The global variable Highcharts is passed along with a reference H\n}(Highcharts));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nH.wrap(H.Tooltip.prototype, 'refresh', function (proceed, points) {\n    // When refresh is called, code inside this wrap is executed\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nH.wrap(H.Tooltip.prototype, 'refresh', function (proceed, points) {\n\n    // Run the original proceed method\n    proceed.apply(this, Array.prototype.slice.call(arguments, 1));\n\n    // For each point add or update trackball\n    H.each(points, function (point) {\n        // Function variables\n        var series = point.series,\n            chart = series.chart,\n            pointX = point.plotX + series.xAxis.pos,\n            pointY = H.pick(point.plotClose, point.plotY) + series.yAxis.pos;\n\n        // If trackball functionality does not already exist\n        if (!series.options.marker) {\n            // If trackball is not defined\n            if (!series.trackball) {\n                // Creates a new trackball with same color as the series\n                series.trackball = chart.renderer.circle(pointX, pointY, 5).attr({\n                    fill: series.color,\n                    stroke: 'white',\n                    'stroke-width': 1,\n                    zIndex: 5\n                }).add();\n            } else {\n                // Updates the position of the trackball\n                series.trackball.attr({\n                    x: pointX,\n                    y: pointY\n                });\n            }\n        }\n    });\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nH.wrap(H.Tooltip.prototype, 'hide', function (proceed) {\n    var series = this.chart.series;\n    // Run original proceed method\n    proceed.apply(this);\n    // For each series destroy trackball\n    H.each(series, function (serie) {\n        var trackball = serie.trackball;\n        if (trackball) {\n            serie.trackball = trackball.destroy();\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Sort Modifier Example\nDESCRIPTION: This snippet demonstrates the usage of the Sort modifier in Highcharts Dashboards.  The Sort modifier rearranges rows based on the content of a specified column. The sorting order can be ascending or descending.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-modifiers.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndataModifier: {\n    type: 'Sort',\n    direction: 'desc', // 'desc' or 'asc', default 'asc'\n    orderByColumn: 'y' // Default: 'y'\n    orderInColumn: ''  // Optional\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Highcharts Version from CDN\nDESCRIPTION: Example of loading a specific major version (v12) of Highcharts from the CDN. This ensures compatibility with code written for that version while automatically receiving minor updates.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/12/highcharts.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Highcharts with Basic Configuration in JavaScript\nDESCRIPTION: Example of creating a bar chart with multiple series using the Highcharts.chart constructor. The configuration includes chart type, title, axis settings, and two data series.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/how-to-set-options.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart1 = Highcharts.chart('container', {\n    chart: {\n        type: 'bar'\n    },\n    title: {\n        text: 'Fruit Consumption'\n    },\n    xAxis: {\n        categories: ['Apples', 'Bananas', 'Oranges']\n    },\n    yAxis: {\n        title: {\n            text: 'Fruit eaten'\n        }\n    },\n    series: [{\n        name: 'Jane',\n        data: [1, 0, 4]\n    }, {\n        name: 'John',\n        data: [5, 7, 3]\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts with require\nDESCRIPTION: Basic example of loading Highcharts using require, including a module and creating a chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/install-from-npm.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Highcharts = require('highcharts');\n// Load module after Highcharts is loaded\nrequire('highcharts/modules/exporting');\n// Create the chart\nHighcharts.chart('container', { /*Highcharts options*/ });\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid Component in React Using TypeScript\nDESCRIPTION: This snippet demonstrates how to create a React component that leverages the Highcharts Grid Lite package. It uses TypeScript and imports necessary modules and styles. The main functionality involves using React's useEffect and useRef hooks to render a grid within a specified container. The component expects a config object of type Grid.Options to define the grid's data structure.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/wrappers/grid-with-react.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// GridComponent.tsx\n\nimport { useEffect, useRef } from 'react';\nimport Grid from '@highcharts/grid-lite/es-modules/masters/grid-lite.src.js';\nimport '@highcharts/grid-lite/css/grid.css';\n\nexport default function GridComponent(props: { config: Grid.Options }) {\n    const { config } = props;\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (containerRef.current) {\n            Grid.grid(containerRef.current, config);\n        }\n    }, [config]);\n\n    return (\n        <div ref={containerRef} />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Defaults and Specific Columns in Highcharts Grid\nDESCRIPTION: Shows how to set default options for all columns using columnDefaults and override these defaults for specific columns using the columns array. Options include cell editability and value formatting.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/understanding-grid.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    columnDefaults: {\n        cells: {\n            editable: true\n        }\n    },\n    columns: [\n        {\n            id: \"weight\",\n            header: {\n                format: \"Weight\"\n            },\n            cells: {\n                format: \"{value}g\"\n                editable: false\n            }\n        },\n        {\n            id: \"price\",\n            header: {\n                format: \"Price\"\n            },\n            cells: {\n                format: \"${value}\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create a Highcharts component in a dashboard\nDESCRIPTION: This JavaScript code shows how to create a Highcharts component within a Highcharts Dashboard. It defines a layout with a single cell and then creates a Highcharts component within that cell, setting its type to 'Highcharts' and providing chart options for the series data. The renderTo property specifies the cell where the chart should be rendered.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/highcharts-component.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nDashboards.board('container', {\n    gui: {\n        layouts: [{\n            id: 'layout-1',\n            rows: [{\n                cells: [{\n                    id: 'dashboard-col-0'\n                }]\n            }]\n        }]\n    },\n    components: [{\n        renderTo: 'dashboard-col-0',\n        type: 'Highcharts',\n        chartOptions: {\n            series: [{\n                data: [1, 2, 3, 4]\n            }]\n        }\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Grid Lines on Axes in Highcharts JavaScript\nDESCRIPTION: This snippet shows how to enable or disable grid lines for the x and y axes in a Highcharts chart by setting the gridLineWidth property. Default behavior is to have grid lines on for the y-axis and off for the x-axis. Adjust this by specifying the desired pixel width for grid lines.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/axes.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nxAxis: {\n    gridLineWidth: 1\n},\nyAxis: {\n    gridLineWidth: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Title and Subtitle in Highcharts JavaScript\nDESCRIPTION: This snippet shows how to set a custom title and subtitle for a Highcharts chart in JavaScript. The `text` property is defined for both the title and subtitle. Dependencies include Highcharts library. The expected input is a configuration object for the chart, with the output being the rendered chart displaying the specified title and subtitle.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/title-and-subtitle.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntitle: {\n    text: 'My custom title'\n},\nsubtitle: {\n    text: 'My custom subtitle'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plot Bands and Plot Lines for Axes in Highcharts\nDESCRIPTION: This snippet shows how to configure plot bands and plot lines for both the x-axis and y-axis in a Highcharts chart. The configuration includes properties like color, value, width, and style. It requires the Highcharts library to function properly.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/plot-bands-and-plot-lines.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nxAxis: {\n  ...,\n  plotBands: [{\n    color: 'orange', // Color value\n    from: 3, // Start of the plot band\n    to: 4 // End of the plot band\n  }],\n  plotLines: [{\n    color: 'red', // Color value\n    dashStyle: 'longdashdot', // Style of the plot line. Default to solid\n    value: 3, // Value of where the line will appear\n    width: 2 // Width of the line\n  }]\n},\nyAxis: {\n  ...,\n  plotBands: [{\n    ... // Same as in the xAxis\n  }],\n  plotLines: [{\n    ... // Same as in the xAxis\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts via npm\nDESCRIPTION: Command to install Highcharts package using npm package manager.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save highcharts\n```\n\n----------------------------------------\n\nTITLE: Initializing a Highcharts Stock Chart\nDESCRIPTION: Creates a stock chart using the Highcharts.stockChart constructor. This example demonstrates how to create a stock chart with range selection functionality and how to reference an external data array. The chart variable is made globally available.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/your-first-chart.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet chart; // globally available\ndocument.addEventListener('DOMContentLoaded', function() {\n    chart = Highcharts.stockChart('container', {\n        rangeSelector: {\n            selected: 1\n        },\n        series: [{\n            name: 'USD to EUR',\n            data: usdtoeur // predefined JavaScript array\n       }]\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Series with Technical Indicators in Highcharts JavaScript\nDESCRIPTION: Demonstrates how to configure a set of series in Highcharts with different technical indicators like SMA and EMA. Requires Highcharts library and 'indicators.js' module. Each technical indicator is linked to the main series using `linkedTo` parameter, and custom periods are set via `params.period`. The input is a data array for the main series. Outputs are visual representations with indicators calculated over the main series data.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/technical-indicator-series.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nseries: [{\n  id: 'main-series',\n  data: [ … ]\n}, {\n  type: 'sma',\n  linkedTo: 'main-series',\n  params: {\n    period: 14\n  }\n}, {\n  type: 'sma',\n  linkedTo: 'main-series',\n  params: {\n    period: 28\n  }\n}, {\n  type: 'ema',\n  linkedTo: 'main-series',\n  params: {\n    period: 7\n  }\n}]\n```\n\n----------------------------------------\n\nTITLE: Initializing Navigator Component with Crossfilter Sync in Highcharts Dashboards\nDESCRIPTION: This snippet shows how to set up Navigator components with `crossfilter` synchronization in a Highcharts Dashboard.  Each Navigator component is linked to the same 'Economy' DataConnector but displays a different column ('Agriculture' or 'Industry').  The `sync: { crossfilter: true }` option enables cross-filtering, allowing selections in one navigator to affect the data displayed in the other and related components, limiting the data points based on the defined column ranges.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/navigator-component.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nDashboard.board('container', {\n  components: [\n    {\n      renderTo: 'Top-left',\n      type: 'Navigator',\n      connector: {\n        id: 'Economy'\n      },\n      columnAssignment: {\n        'Agriculture': 'y'\n      },\n      sync: {\n        crossfilter: true\n      }\n    },\n    {\n      renderTo: 'Top-left',\n      type: 'Navigator',\n      connector: {\n        id: 'Economy'\n      },\n      columnAssignment: {\n        'Industry': 'y'\n      },\n      sync: {\n        crossfilter: true\n      }\n    },\n    // ...\n  ],\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Line Chart with Highcharts in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a basic line chart using Highcharts library. It visualizes employment trends in the solar installation sector compared to other sectors from 2013 to 2020. The chart includes tooltips, responsive design, and automatic color assignment.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/line-chart/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n\n    title: {\n        text: 'U.S. Employment in Solar-Panel Installation and Farming',\n        align: 'left'\n    },\n\n    subtitle: {\n        text: 'Source: ' +\n            '<a href=\"https://irecusa.org/programs/solar-jobs-census/\"' +\n            'target=\"_blank\">IREC</a>',\n        align: 'left'\n    },\n\n    yAxis: {\n        title: {\n            text: 'Number of employees'\n        }\n    },\n\n    xAxis: {\n        accessibility: {\n            rangeDescription: 'Range: 2013 to 2020'\n        }\n    },\n\n    legend: {\n        layout: 'vertical',\n        align: 'right',\n        verticalAlign: 'middle'\n    },\n\n    plotOptions: {\n        series: {\n            label: {\n                connectorAllowed: false\n            },\n            pointStart: 2013\n        }\n    },\n\n    series: [{\n        name: 'Solar-panel installation',\n        data: [142698, 174689, 208859, 251855, 250271, 240000, 225000, 220000]\n    }, {\n        name: 'Farming',\n        data: [1060000, 1065000, 1070000, 1070000, 1070000, 1060000, 1050000, 1060000]\n    }],\n\n    responsive: {\n        rules: [{\n            condition: {\n                maxWidth: 500\n            },\n            chartOptions: {\n                legend: {\n                    layout: 'horizontal',\n                    align: 'center',\n                    verticalAlign: 'bottom'\n                }\n            }\n        }]\n    }\n\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependent Sorting in Highcharts\nDESCRIPTION: This snippet demonstrates how to implement dependent sorting in Highcharts, where multiple series are sorted based on a master series.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/data-sorting.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    series: [{\n        id: 'mainSeries',\n        dataSorting: {\n            enabled: true,\n            sortKey: 'value'\n        },\n        data: [...]\n    }, {\n        linkedTo: 'mainSeries',\n        data: [...]\n    }, {\n        linkedTo: 'mainSeries',\n        data: [...]\n    }, {\n        linkedTo: 'mainSeries',\n        data: [...]\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Axis Types in Highcharts JavaScript\nDESCRIPTION: This snippet provides an example of setting axis types in Highcharts, demonstrating both 'linear' and 'categories' configurations. It highlights how to set categories with a string array and use tickInterval for linear axes. Inputs include basic highcharts.Chart initialization, and outputs are rendered axis types.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/axes.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The types are 'linear', 'logarithmic' and 'datetime'\nyAxis: {\n    type: 'linear',\n}\n\n// Categories are set by using an array\nxAxis: {\n    categories: ['Apples', 'Bananas', 'Oranges']\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts with CommonJS Modules (Node.js)\nDESCRIPTION: This example shows how to load Highcharts using CommonJS module pattern as used in Node.js. It demonstrates loading both the main Highcharts library and the exporting module, then generating a chart with the loaded components.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation-with-amd-commonjs.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Load Highcharts\nvar Highcharts = require('highcharts');\n// Alternatively, this is how to load Highstock. Highmaps and Highcharts Gantt are similar.\n// var Highcharts = require('highcharts/highstock');\n\n// Load the exporting module\nrequire('highcharts/modules/exporting');\n\n// Generate the chart\nHighcharts.chart('container', {\n  // options - see https://api.highcharts.com/highcharts\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Radial Bar Chart in Highcharts\nDESCRIPTION: This snippet demonstrates how to set up a basic radial bar chart by configuring the chart options. Both 'polar' and 'inverted' properties must be set to true for a radial bar chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/radial-bar-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighcharts.chart('container', {\n    chart: {\n        polar: true,\n        inverted: true\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts in Browser-side TypeScript Projects\nDESCRIPTION: This TypeScript snippet shows how to import Highcharts in browser-side projects targeting ES6. It demonstrates the import syntax for the main Highcharts bundle and lists other available product bundles.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/highcharts-typescript-declarations.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Highcharts from 'highcharts/esm/highcharts.js';\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Drilldown Series in Highcharts JS\nDESCRIPTION: This snippet defines a basic series configuration with drilldown options in Highcharts. Each main series has linked drilldown series defined in a separate array, which are identified by unique IDs. The snippet includes example data for animals, fruits, and cars for drilldown functionality.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/drilldown.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    name: 'Things',\n    colorByPoint: true,\n    data: [{\n        name: 'Animals',\n        y: 5,\n        drilldown: 'animals'\n    }, {\n        name: 'Fruits',\n        y: 2,\n        drilldown: 'fruits'\n    }, {\n        name: 'Cars',\n        y: 4,\n        drilldown: 'cars'\n    }]\n}],\ndrilldown: {\n    series: [{\n        id: 'animals',\n        data: [\n            ['Cats', 4],\n            ['Dogs', 2],\n            ['Cows', 1],\n            ['Sheep', 2],\n            ['Pigs', 1]\n        ]\n    }, {\n        id: 'fruits',\n        data: [\n            ['Apples', 4],\n            ['Oranges', 2]\n        ]\n    }, {\n        id: 'cars',\n        data: [\n            ['Toyota', 4],\n            ['Opel', 2],\n            ['Volkswagen', 2]\n        ]\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Axes Configuration in Highcharts JavaScript\nDESCRIPTION: This example demonstrates how to configure multiple y-axes in Highcharts and link them to different data series. The snippet handles creating primary and secondary axes using an array, with the 'opposite' property positioning the secondary axis to the right. Notes on using array indices to reference axes are provided for clarity.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/axes.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nyAxis: [{ //--- Primary yAxis\n    title: {\n        text: 'Temperature'\n    }\n}, { //--- Secondary yAxis\n    title: {\n        text: 'Rainfall'\n    },\n    opposite: true\n}],\n\nseries: [{\n    yAxis: 0,\n    data: [\n        49.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1,\n        95.6, 54.4\n    ]\n},{\n    yAxis: 1,\n    data: [\n        7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6\n    ]\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Type for Range Series in Highcharts\nDESCRIPTION: This snippet demonstrates how to set the chart type to 'columnrange' in Highcharts configuration. This is essential for creating a range series chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/range-series.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart: {\n    type: 'columnrange'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Connector for Grid Component in JavaScript\nDESCRIPTION: This snippet illustrates setting up a Data Connector for a Grid component in Highcharts Dashboards. It uses dataPool for defining connector specifics used to populate the grid. Connecting multiple components with the same data pool can synchronize data edits across components.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/types-of-components.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ndataPool: {\n    connectors: [{\n        id: 'data',\n        type: 'JSON',\n        options: {\n            data: [\n                ['Product Name', 'Quantity', 'Revenue', 'Category'],\n                ['Laptop', 100, 2000, 'Electronics'],\n                ['Smartphone', 150, 3300, 'Electronics'],\n                ['Desk Chair', 120, 2160, 'Furniture'],\n                ['Coffee Maker', 90, 1890, 'Appliances'],\n                ['Headphones', 200, 3200, 'Electronics'],\n                ['Dining Table', 130, 2470, 'Furniture'],\n                ['Refrigerator', 170, 2890, 'Appliances']\n            ]\n        }\n    }]\n},\n{\n    type: 'Grid',\n    renderTo: 'cell-id-2',\n    connector: {\n        id: 'data'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stellar Chart with Highcharts\nDESCRIPTION: Demonstrates how to construct a stellar chart using Highcharts by configuring a polar chart with bubble and pie series, enabling multi-dimensional data representation\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/stellar-chart/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example configuration for Stellar Chart\nHighcharts.chart('container', {\n  chart: {\n    polar: true\n  },\n  series: [{\n    type: 'bubble',\n    data: [...]\n  }, {\n    type: 'pie',\n    data: [...]\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Highcharts Stock Chart with Configuration\nDESCRIPTION: This JavaScript snippet shows the initialization of a Stock chart using the Highcharts.stockChart constructor. It requires a container ID and a configuration object to define the chart settings. An optional callback function can be provided to execute code once the chart has been fully loaded.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/getting-started-stock.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nHighcharts.stockChart(containerID, {\n    // configuration options object\n}, callback);\n```\n\n----------------------------------------\n\nTITLE: Highcharts component with DataConnector\nDESCRIPTION: This JavaScript code creates a Highcharts component that uses a DataConnector to populate its data. A CSV connector is defined with food data. The Highcharts component is then configured to use this connector and display a basic chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/highcharts-component.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nDashboards.board('container', {\n    dataPool: {\n        connectors: [{\n            id: 'Vitamin',\n            type: 'CSV',\n            options: {\n                csv: `Food,Vitamin A,Iron\n                Beef Liver,6421,6.5\n                Lamb Liver,2122,6.5\n                Cod Liver Oil,1350,0.9\n                Mackerel,388,1\n                Tuna,214,0.6`,\n            },\n        }]\n    },\n    gui: {\n        layouts: [{\n            id: 'layout-1',\n            rows: [{\n                cells: [{\n                    id: 'dashboard-col-0'\n                }]\n            }]\n        }]\n    },\n    components: [{\n        renderTo: 'dashboard-col-0',\n        type: 'Highcharts',\n        connector: {\n            id: 'Vitamin'\n        },\n        chartOptions: {\n            title: {\n                text: 'Example chart'\n            }\n        }\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Highlight Sync Options in Highcharts Dashboard Components\nDESCRIPTION: Configuration object for the highlight sync feature in Highcharts dashboards. It includes options to enable highlighting, specify which series should be affected, control point highlighting, and toggle tooltip and crosshair visibility during synchronization.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/highcharts-component.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nsync: {\n    highlight: {\n        enabled: true,\n        affectedSeriesId: 'series-1',\n        highlightPoint: true,\n        showTooltip: false,\n        showCrosshair: true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom HTML Component - JavaScript\nDESCRIPTION: This snippet defines a CustomHTML component that extends the HTMLComponent class. It enables the reuse of HTML elements by referencing their IDs or passing HTML strings. A method getCustomHTML extracts the HTML from the DOM based on provided options and converts it to an AST-like structure for further use in the dashboard.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/custom-component.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ComponentRegistry } = Dashboards,\n    HTMLComponent = ComponentRegistry.types.HTML,\n    AST = Dashboards.AST;\n\nclass CustomHTML extends HTMLComponent {\n    constructor(cell, options) {\n        super(cell, options);\n        this.type = 'CustomHTML';\n        this.getCustomHTML();\n        return this;\n    }\n\n    getCustomHTML() {\n        const options = this.options;\n        if (options.id) {\n            const customHTML = document.getElementById(options.id).outerHTML;\n\n            this.options.elements = new AST(customHTML).nodes;\n        }\n    }\n}\n\nComponentRegistry.registerComponent('CustomHTML', CustomHTML);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Threshold Component - JavaScript\nDESCRIPTION: This snippet defines a ThresholdComponent which alters its rendered content based on the provided value and thresholds. It implements a render method that checks conditions and updates the displayed component based on defined thresholds, allowing for dynamic visualization adjustments.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/custom-component.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n    Component,\n    ComponentRegistry,\n    merge\n} = Dashboards;\n\nclass ThresholdComponent extends Component {\n    constructor(cell, options) {\n        super(cell, options);\n        this.type = 'Threshold';\n        return this;\n    }\n\n    render() {\n        const options = this.options,\n            value = options.value,\n            thresholds = options.thresholds;\n\n        let CurrentComponent = ComponentRegistry.types[options.component],\n            componentOptions = merge(options.options || {}, {\n                value\n            });\n\n        // Selecting appropriate options and components based on thresholds\n        // and given value.\n        if (thresholds && Number.isFinite(value)) {\n            for (let i = 0; i < thresholds.length; i++) {\n                const threshold = thresholds[i];\n\n                if (\n                    Number.isFinite(threshold.min) && value < threshold.min ||\n                    Number.isFinite(threshold.max) && value > threshold.max\n                ) {\n                    continue;\n                }\n\n                componentOptions = merge(componentOptions, threshold.options);\n                if (threshold.component) {\n                    CurrentComponent =\n                        ComponentRegistry.types[threshold.component];\n                }\n            }\n        }\n\n        // Rendering the appropriate component or updating it with new options\n        // if it already exists.\n        if (!this.component || this.component !== Component) {\n            this.parentElement.innerHTML = '';\n            this.component =\n                new CurrentComponent(this.cell, componentOptions).load();\n        } else {\n            this.component.update(componentOptions);\n        }\n\n        return this;\n    }\n}\n\nComponentRegistry.registerComponent('Threshold', ThresholdComponent);\n```\n\n----------------------------------------\n\nTITLE: Adding Data Labels to Line Series using Compositions\nDESCRIPTION: Example showing how to activate optional functionality (data labels) for a line series using composition pattern in Highcharts ES6 modules.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation-with-esm.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport Chart from 'highcharts/es-modules/Core/Chart/Chart.js';\nimport LineSeries from 'highcharts/es-modules/Series/Line/LineSeries.js';\nimport DataLabel from 'highcharts/es-modules/Core/Series/DataLabel.js';\n\nDataLabel.compose(LineSeries);\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts Boost Module with ES Modules\nDESCRIPTION: This snippet demonstrates how to import and initialize the Highcharts Boost module using ES6 module syntax. It shows the standard method and a simplified version for Highcharts version 12 and later.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/boost-module.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Highcharts from 'highcharts';\nimport HighchartsBoost from 'highcharts/modules/boost';\ntypeof HighchartsBoost === 'function' && HighchartsBoost(Highcharts);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Highcharts from 'highcharts';\nimport 'highcharts/modules/boost';\n```\n\n----------------------------------------\n\nTITLE: Creating a Stock Chart\nDESCRIPTION: This snippet shows how to create a basic stock chart in Highcharts using the `Highcharts.stockChart` function. It includes an OHLC series type with placeholder data.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/stock-tools.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.stockChart('container', {\n    series: [{\n        type: 'ohlc',\n            data: [ ... ]\n        }]\n    });\n```\n\n----------------------------------------\n\nTITLE: Loading and Registering Highcharts Dashboards Plugin\nDESCRIPTION: Shows how to import Dashboards and Grid plugin modules, connect the Grid, and register the plugin for advanced dashboard functionality. Demonstrates NPM-based module loading and plugin integration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/installation-with-es-modules.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Dashboards from '@highcharts/dashboards/es-modules/masters/dashboards.src';\nimport Grid from '@highcharts/dashboards/es-modules/masters/datagrid.src';\n\nDashboards.GridPlugin.custom.connectGrid(Grid);\nDashboards.PluginHandler.addPlugin(Dashboards.GridPlugin);\n```\n\n----------------------------------------\n\nTITLE: Implementing RNANews with Morningstar Connectors for Dashboards\nDESCRIPTION: Shows how to integrate RNANews into Highcharts Dashboards using the MorningstarRNANews connector type. Includes configuration for data pool, security settings, and component rendering with custom date formatting.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/morningstar/regulatory-news-announcements.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDashboards.board('container', {\n    dataPool: {\n        connectors: [{\n            id: 'rna',\n            type: 'MorningstarRNANews',\n            options: {\n                postman: {\n                    environmentJSON: postmanJSON\n                },\n                security: {\n                    id: 'GB00BLGZ9862',\n                    idType: 'ISIN'\n                },\n                startDate: '2000-01-01',\n                endDate: '2020-12-31'\n            }\n        }]\n    },\n    components: [\n        {\n            renderTo: 'dashboard-col-0',\n            connector: {\n                id: 'rna'\n            },\n            type: 'DataGrid',\n            title: 'Regulatory News for Tesco',\n            dataGridOptions: {\n                editable: false,\n                columns: {\n                    Day: {\n                        cellFormatter: function () {\n                            return new Date(this.value)\n                                .toISOString()\n                                .substring(0, 10);\n                        }\n                    }\n                }\n            }\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding Highcharts with Data in JavaScript\nDESCRIPTION: This code snippet demonstrates embedding a Highcharts component in a Highcharts Dashboard with data defined directly in chart options. It specifies the 'renderTo' and 'type' attributes and uses 'chartOptions' to configure the chart data, specifically defining series data inline within the configuration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/types-of-components.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    renderTo: 'dashboard-1',\n    type: 'Highcharts',\n    chartOptions: {\n        series: [{\n            data: [1, 2, 3, 4]\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Point Selection in Highcharts\nDESCRIPTION: This code enables point selection within a series in Highcharts. Setting allowPointSelect to true in the series' plotOptions allows users to click on individual points to select them.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/series.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nplotOptions: {\n    series: {\n        allowPointSelect: true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Annotations on Highcharts\nDESCRIPTION: Shows how to create and position custom annotations on a Highcharts chart, using the render event to ensure responsiveness.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/renderer.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet isNew = false;\nif (!this.autumnBracket) {\n    this.autumnBracket = this.renderer.path()\n        .attr({\n            stroke: '#333333',\n            'stroke-width': 1\n        })\n        .add();\n    this.autumnText = this.renderer.text('Autumn months')\n        .attr({\n            'text-anchor': 'middle'\n        })\n        .css({\n            fontStyle: 'italic'\n        })\n        .add();\n    isNew = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data with CSVConnector in JavaScript\nDESCRIPTION: This code shows how to initialize a CSVConnector to load structured text data into Highcharts Dashboards. A CSV file URL is required, and the load function fetches the data asynchronously. Dependencies include the 'DataConnector' class.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-pool-and-connectors.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function run() {\n    const connector = new DataConnector.types.CSV({\n        csvURL: 'https://demo-live-data.highcharts.com/updating-set.csv'\n    });\n    await connector.load();\n}\nrun();\n```\n\n----------------------------------------\n\nTITLE: Initializing Series Object in Highcharts\nDESCRIPTION: This code snippet shows the basic structure of a series object in Highcharts, which is an array containing objects with 'name' and 'data' attributes. The 'name' attribute provides a name for the series, and the 'data' attribute holds the data points to be plotted.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/series.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    name: '',\n    data: []\n}]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Highcharts Stock Line Chart\nDESCRIPTION: This JavaScript code example creates a basic line chart using Highcharts Stock. The chart configuration includes a 'series' object with sample data. This serves as a simple introduction to using the library for data visualization.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/getting-started-stock.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nHighcharts.stockChart('container', {\n    series: [{\n        data: [1, 2, 3]\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Global Chart Variable Declaration\nDESCRIPTION: Declaration of a global chart variable to ensure accessibility across different functions and scopes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/live-data.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet chart; // global\n```\n\n----------------------------------------\n\nTITLE: Highcharts Live Chart Initialization\nDESCRIPTION: Chart initialization code that sets up a spline chart with live data capabilities. Includes axis configuration, event handling for data loading, and initial empty series setup.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/live-data.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener('load', function () {\n  chart = new Highcharts.Chart({\n    chart: {\n      renderTo: 'container',\n      defaultSeriesType: 'spline',\n      events: {\n        load: requestData\n      }\n    },\n    title: {\n      text: 'Live random data'\n    },\n    xAxis: {\n      type: 'datetime',\n      tickPixelInterval: 150,\n      maxZoom: 20 * 1000\n    },\n    yAxis: {\n      minPadding: 0.2,\n      maxPadding: 0.2,\n      title: {\n        text: 'Value',\n        margin: 80\n      }\n    },\n    series: [{\n      name: 'Random data',\n      data: []\n    }]\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Manual DataTable Creation with Connector Options - JavaScript\nDESCRIPTION: This snippet illustrates how to manually set connector options for DataPool and retrieve a DataTable. It utilizes the DataPool object to configure a CSV connector for data retrieval.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-table.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataPool = new DataPool();\n\ndataPool.setConnectorOptions({\n    type: 'CSV',\n    id: 'my-connector',\n    options: {\n        csvURL: 'https://example.com/data.csv'\n    }\n});\n\nconst dataTable = await dataPool.getConnectorTable('my-connector');\n```\n\n----------------------------------------\n\nTITLE: Creating Highcharts Linear Axis Example in JavaScript\nDESCRIPTION: This snippet demonstrates initializing a Highcharts column chart with linear x and y axes. It specifies tick intervals and uses default linear scaling to index y-axis data. The setup includes chart rendering parameters, axis titles, and tick configurations.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/axes.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar chart = new Highcharts.Chart({\n    chart: {\n        renderTo: 'container',\n        type: 'column'\n    },\n    title: {\n        text: 'Fruit Consumption'\n    },\n    xAxis: {\n        title: {\n            text: 'Fruit Number'\n        },\n        tickInterval: 1\n    },\n    yAxis: {\n        title: {\n            text: 'Fruit eaten'\n        },\n        tickInterval: 1\n    },\n    series: [{\n        name: 'Jane',\n        data: [1, 0, 4]\n    }, {\n        name: 'John',\n        data: [5, 7, 3]\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Row-Oriented Data with JSONConnector in JavaScript\nDESCRIPTION: Illustrates the use of a JSONConnector to load data arranged in a row-oriented JSON array. It supports different structures and requires specifying the column and row configuration. The data is loaded asynchronously.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-pool-and-connectors.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function run() {\n    const connector = new DataConnector.types.JSON({\n        data: [\n            ['row 1', 1, 2, 3],\n            ['row 2', 2, 3, 4],\n            ['row 3', 0, 1, 2]\n        ]\n    });\n    await connector.load();\n}\nrun();\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Options in Highcharts\nDESCRIPTION: This code snippet illustrates how to configure boost options in a Highcharts chart. It shows setting chart-level boost threshold, enabling GPU translations, and configuring series-level boost threshold.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/boost-module.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    boost: {\n        useGPUTranslations: true,\n        // Chart-level boost when there are more than 5 series in the chart\n        seriesThreshold: 5\n    },\n\n    title: {\n        text: 'Highcharts Boost'\n    },\n\n    series: [{\n        boostThreshold: 1,  // Boost when there are more than 1\n                            // point in the series.\n        data: [ [0, 1], [1, 2], [2, 3] ]\n    }]\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import of Highcharts from CDN\nDESCRIPTION: Example showing how to import Highcharts as ECMAScript modules directly from the CDN in modern browsers without bundling tools.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation-with-esm.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n    import Highcharts from 'https://code.highcharts.com/esm/highcharts.js';\n    import 'https://code.highcharts.com/esm/modules/accessibility.js';\n\n    Highcharts.chart('container', {\n        ...\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Highcharts Bundle\nDESCRIPTION: Webpack configuration file for bundling Highcharts modules. This creates a production-ready bundle that can be included in web pages.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation-with-esm.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// webpack.config.js\nmodule.exports = {\n  entry: './mychart.js',\n  mode: 'production',\n  output: {\n    filename: 'mybundle.js',\n    // automatically placed in the subfolder 'dist'\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring 3D Cylinder Chart in Highcharts\nDESCRIPTION: This snippet demonstrates how to configure a basic 3D cylinder chart using Highcharts. It sets the chart type to 'cylinder', enables 3D options, and defines series data. The 3D options include settings for alpha, beta, depth, and view distance.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/3d-cylinder.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    chart: {\n        type: 'cylinder',\n        options3d: {\n            enabled: true,\n            alpha: 15,\n            beta: 15,\n            depth: 50,\n            viewDistance: 25\n        }\n    },\n    series: [{\n        data: [1, 2, 3]\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Example MQTT Message Format\nDESCRIPTION: Example of a JSON message payload structure for the MQTT Connector. This format is used in the sample application for the 'highcharts/topic1' topic and includes a name, value, and timestamp.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-pool-and-connectors.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n {\n    \"name\": \"North Sea\",\n    \"value\": 35.69,\n    \"timestamp\": \"2024-09-12T08:12:01.028Z\"\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Histogram Settings in Highcharts Column Chart\nDESCRIPTION: This code snippet demonstrates how to configure a Highcharts column chart to create a histogram. It sets the pointPadding and groupPadding to 0, removes the borderWidth, and disables shadows to ensure columns do not overlap.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/column-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n    plotOptions: {\n        column: {\n            pointPadding: 0,\n            borderWidth: 0,\n            groupPadding: 0,\n            shadow: false\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Crooked Line Connector Shape in Highcharts Pie Chart\nDESCRIPTION: This snippet illustrates how to set the dataLabels.connectorShape option to 'crookedLine' in a Highcharts pie chart. It also shows the use of the crookDistance option, which defines how far from the vertical plot edge the connector path should be crooked.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/pie-datalabels-alignment.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndataLabels: {\n    connectorShape: 'crookedLine',\n    crookDistance: '70%'\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltip Format in Highcharts\nDESCRIPTION: Customizes the format of tooltips in Highcharts to include the series name and data point values. Uses format string to define tooltip content, requires tooltip configuration object.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/tooltip.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntooltip: {\n    format: 'The value for <b>{x}</b> is <b>{y}</b>, in series {series.name}'\n}\n```\n\n----------------------------------------\n\nTITLE: Including Highcharts Stock as Standalone\nDESCRIPTION: This HTML snippet demonstrates how to load Highcharts Stock into a webpage as a standalone library. No other Highcharts dependencies are required for this setup.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/getting-started-stock.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/stock/highstock.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Highcharts Theme with CSS\nDESCRIPTION: This CSS code demonstrates how to create a custom theme for Highcharts by importing the default Highcharts CSS, re-declaring CSS variables, and overriding individual component styles. It shows how to modify global variables, variables for specific charts, and styles for axis labels and titles.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/custom-themes-in-styled-mode.md#2025-04-16_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n\"@import url('https://code.highcharts.com/css/highcharts.css');\n/* or @import url('./node_modules/css/highcharts.css'); */\n\n/* This will re-declare variables globally */\n:root {\n  --highcharts-color-0: #f45b5b;\n}\n\n/* This will overwrite variables for different charts */\n#container-1 {\n  --highcharts-color-0: #f45b5b;\n}\n\n#container-2 {\n  --highcharts-color-0: #dedede;\n}\n\n/* This will use a different variable for some elements, in this case a more\ncontrasted color variation for the axis labels */\n.highcharts-axis-labels {\n  fill: var(--highcharts-neutral-color-100);\n}\n\n/* Example of individual components overriding variables */\n.highcharts-title {\n  fill: black;\n  font-size: 26px;\n  font-weight: bold;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Themes with Highcharts Styled Mode\nDESCRIPTION: Demonstrates how to import Highcharts CSS files to style charts when using styled mode. This approach allows separating content from presentation by using CSS for styling instead of JavaScript configuration options.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/your-first-chart.md#2025-04-16_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@import url(\"/css/highcharts.css\");\n@import url(\"/css/themes/dark-unica.css\");\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Loading with ESM in HTML\nDESCRIPTION: Example of using ES Modules with Highcharts v12 in HTML to support asynchronous loading via type=\"module\" script tags.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/version-12.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\nimport Highcharts from 'https://code.highcharts.com/esm/highcharts.js';\nimport 'https://code.highcharts.com/esm/highcharts-more.js';\nimport 'https://code.highcharts.com/esm/modules/exporting.js';\nimport 'https://code.highcharts.com/esm/modules/accessibility.js';\n</scripts>\n```\n\n----------------------------------------\n\nTITLE: Customizing Point Marker in Highcharts\nDESCRIPTION: This code snippet shows how to alter the appearance of a specific point marker. By setting marker properties like fillColor and radius within a point's configuration, you can customize the look of the marker for that specific point.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/series.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5,\n    {y: 216.4, marker: { fillColor: '#BF0B23', radius: 10 } }, 194.1, 95.6, 54.4]\n}]\n```\n\n----------------------------------------\n\nTITLE: Enabling Polar Chart in Highcharts Configuration\nDESCRIPTION: This snippet shows how to enable a polar chart in Highcharts by setting the chart.polar option to true. This simple configuration transforms a regular X-Y chart into a polar coordinate system.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/polar-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart: {\n    polar: true\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Highcharts Configuration for Accessibility - JavaScript\nDESCRIPTION: This JavaScript configuration sets up a simple Highcharts column chart. It includes titles for the chart and axes which makes it more accessible by providing context to users with assistive technologies.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/accessibility-module.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n    chart: {\n            type: 'column'\n    },\n    title: {\n        text: 'Corn vs wheat estimated production for 2020',\n        align: 'left'\n    },\n    subtitle: {\n        text:\n            'Source: indexmundi',\n        align: 'left'\n    },\n    series: [{\n            data: [406292, 260000, 107000, 68300, 27500, 14500]\n        }, {\n            data: [51086, 136000, 5500, 141000, 107180, 77000]\n        }]\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Loading and Parsing CSV Data with Highcharts.ajax\nDESCRIPTION: This JavaScript snippet uses Highcharts.ajax to load a CSV file, parse its contents, and populate the Highcharts chart options. It splits the CSV data into lines and uses `forEach` to extract categories and series data before creating the chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/custom-preprocessing.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighcharts.ajax({  \n    url: 'data.csv',  \n    dataType: 'text',  \n    success: function(data) {  \n        // Split the lines  \n        var lines = data.split('\\n');  \n        lines.forEach(function(line, lineNo) {  \n            var items = line.split(',');  \n              \n            // header line contains categories  \n            if (lineNo == 0) {  \n                items.forEach(function(item, itemNo) {  \n                    if (itemNo > 0) options.xAxis.categories.push(item);  \n                });  \n            }  \n              \n            // the rest of the lines contain data with their name in the first position  \n            else {  \n                var series = {   \n                    data: []  \n                };  \n                items.forEach(function(item, itemNo) {  \n                    if (itemNo == 0) {  \n                        series.name = item;  \n                    } else {  \n                        series.data.push(parseFloat(item));  \n                    }  \n                });  \n                  \n                options.series.push(series);  \n    \n            }  \n              \n        });  \n          \n        Highcharts.chart('container', options);  \n    },  \n    error: function (e, t) {  \n        console.error(e, t);  \n    }  \n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Theme in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a custom Highcharts theme using JavaScript.  It defines a `Highcharts.theme` object with various styling options and then applies it using `Highcharts.setOptions`. This allows for easy sharing of styles across multiple charts.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/themes.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.theme = {\n    colors: ['#058DC7', '#50B432', '#ED561B', '#DDDF00', '#24CBE5', '#64E572',\n             '#FF9655', '#FFF263', '#6AF9C4'],\n    chart: {\n        backgroundColor: {\n            linearGradient: [0, 0, 500, 500],\n            stops: [\n                [0, 'rgb(255, 255, 255)'],\n                [1, 'rgb(240, 240, 255)']\n            ]\n        },\n    },\n    title: {\n        style: {\n            color: '#000',\n            font: 'bold 16px \"Trebuchet MS\", Verdana, sans-serif'\n        }\n    },\n    subtitle: {\n        style: {\n            color: '#666666',\n            font: 'bold 12px \"Trebuchet MS\", Verdana, sans-serif'\n        }\n    },\n\n    legend: {\n        itemStyle: {\n            font: '9pt Trebuchet MS, Verdana, sans-serif',\n            color: 'black'\n        },\n        itemHoverStyle:{\n            color: 'gray'\n        }\n    }\n};\n\n// Apply the theme\nHighcharts.setOptions(Highcharts.theme);\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltip Appearance in JavaScript\nDESCRIPTION: Defines the appearance of tooltips in a Highcharts chart, including background color, border color, border radius, and border width. Requires Highcharts library. These styles affect the default SVG rendering of tooltips.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/tooltip.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntooltip: {\n    backgroundColor: '#FCFFC5',\n    borderColor: 'black',\n    borderRadius: 10,\n    borderWidth: 3\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Value Description Format for Individual Data Points - Highcharts JS\nDESCRIPTION: This snippet allows developers to customize how individual data points are described to screen readers using the 'accessibility.point.valueDescriptionFormat' option, which formats the value shown to users.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/configure-the-accessibility-module.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n    accessibility: {\n        point: {\n            valueDescriptionFormat:\n            'On {xDescription}, there were {point.y}'\n        }\n    }\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts Dashboards via NPM\nDESCRIPTION: This snippet demonstrates how to install the Highcharts Dashboards package using npm. It shows the command to install the package and how to import it into a JavaScript project.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/installation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @highcharts/dashboards\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Dashboards from '@highcharts/dashboards';\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Formatting for Column Cells in Highcharts Grid\nDESCRIPTION: Example of number formatting in Highcharts Grid columns using the template engine. The format string '{value:,.1f} kg' formats numbers with thousands separators, one decimal place, and adds a unit.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/columns.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncolumns: [\n    {\n        id: 'weight',\n        className: 'custom-column-class-name',\n        cells: {\n            format: '{value:,.1f} kg'\n        }\n    }\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts and Grid Plugins\nDESCRIPTION: This TypeScript code imports Highcharts, Dashboards, and Grid modules, along with connecting them to Dashboards using dedicated plugins. This enables the use of Highcharts charts and the Grid component within the dashboard.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/wrappers/dashboards-with-react.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"import Highcharts from 'highcharts/es-modules/masters/highcharts.src.js';\\nimport Dashboards from '@highcharts/dashboards/es-modules/masters/dashboards.src.js';\\nimport Grid from '@highcharts/dashboards/es-modules/masters/datagrid.src.js';\\n\\nDashboards.HighchartsPlugin.custom.connectHighcharts(Highcharts);\\nDashboards.GridPlugin.custom.connectGrid(Grid);\\nDashboards.PluginHandler.addPlugin(Dashboards.HighchartsPlugin);\\nDashboards.PluginHandler.addPlugin(Dashboards.GridPlugin);\\n\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Path Annotation with Arrow Marker in Highcharts\nDESCRIPTION: This example demonstrates how to create a path annotation connecting multiple points and adding an arrow marker at the end of the path.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/annotations-module.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nannotations: [{\n    shapes: [{\n        type: 'path',\n        points: ['0', '3', {\n            x: 6,\n            y: 195,\n            xAxis: 0,\n            yAxis: 0\n        }],\n        markerEnd: 'arrow'\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts with TypeScript (UMD)\nDESCRIPTION: Example showing how to import and use Highcharts in a TypeScript project using UMD module format. Includes both the TypeScript code and required compiler options.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation-with-esm.md#2025-04-16_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport Highcharts from 'highcharts';\n// Alternatively, this is how to load Highstock. Highmaps and Highcharts Gantt are similar.\n// import Highcharts from 'highcharts/highstock';\n\n// Load the exporting module.\nimport 'highcharts/modules/exporting';\n\n// Generate the chart\nHighcharts.chart('container', {\n  // options - see https://api.highcharts.com/highcharts\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Container Div for the Dashboard\nDESCRIPTION: This HTML snippet defines a `div` element that will serve as the container for the Highcharts dashboard. The `id` attribute is crucial as it's used by the JavaScript code to identify where to render the dashboard.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/your-first-dashboard.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Tags and Attributes in Highcharts\nDESCRIPTION: This code snippet demonstrates how to add custom tags and attributes to the allow lists for XSS filtering in Highcharts. By doing this, users can control which HTML elements and attributes can be safely included in chart options, enhancing security against XSS vulnerabilities.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/security.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighcharts.AST.allowedTags.push('blink');\nHighcharts.AST.allowedAttributes.push('data-value');\n// Allow links to the `tel` protocol\nHighcharts.AST.allowedReferences.push('tel:');\n```\n\n----------------------------------------\n\nTITLE: Creating a Dashboard Instance with Factory Function\nDESCRIPTION: This JavaScript code demonstrates how to create a new Highcharts dashboard instance using the `Dashboards.board` factory function. It takes the container ID and an object containing dashboard options as arguments.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/your-first-dashboard.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nDashboards.board('container', {...})\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Chart Options in Highcharts\nDESCRIPTION: This JavaScript snippet initializes the basic options for a Highcharts chart, including the chart type, title, x-axis categories, y-axis title, and an empty series array.  These options are later populated with data parsed from a CSV file.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/custom-preprocessing.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar options = {\n    chart: {\n        defaultSeriesType: 'column'\n    },\n    title: {\n        text: 'Fruit Consumption'\n    },\n    xAxis: {\n        categories: []\n    },\n    yAxis: {\n        title: {\n            text: 'Units'\n        }\n    },\n    series: []\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Server-Side Data with Express\nDESCRIPTION: Server-side function that generates random data points and maintains a state array for live updates. The function creates timestamps and random values, pushing them to an array while maintaining its size.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/live-data.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngenerate: (state, counter) => {\n  state.rows = state.rows || [];\n  state.rows.push([startDate.toISOString(), Math.random() * 10]);\n  trimArray(state.rows);\n  return JSON.stringify(state.rows);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Description Formatter for Individual Data Points - Highcharts JS\nDESCRIPTION: This code snippet demonstrates how to define a custom function for formatting the description of individual data points with the 'accessibility.point.descriptionFormatter' option, providing detailed output based on the point's properties.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/configure-the-accessibility-module.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n   accessibility: {\n        point: {\n            descriptionFormatter: function (p) {\n                return p.series.name + ', ' + p.category + ', ' + p.y + '°F.';\n            }\n        }\n    },\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Full YouTube Component for Highcharts Dashboards\nDESCRIPTION: Complete implementation of a custom YouTube component that embeds and displays YouTube videos in a Highcharts Dashboard. The component handles creation, resizing, loading, updating, and provides editable options for the dashboard editor.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/custom-component.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass YouTubeComponent extends Component {\n    constructor(cell, options) {\n        super(cell, options);\n\n        this.type = 'YouTube';\n        this.youTubeElement = document.createElement('iframe');\n\n        this.options.editableOptions = [{\n            name: 'videoId',\n            propertyPath: ['videoId'],\n            type: 'input'\n        }, {\n            name: 'title',\n            propertyPath: ['title'],\n            type: 'input'\n        }, {\n            name: 'caption',\n            propertyPath: ['caption'],\n            type: 'input'\n        }];\n\n\n        return this;\n    }\n\n    resize(width, height) {\n        super.resize.call(this, width, height);\n        this.youTubeElement.setAttribute('width', width - 10);\n        this.youTubeElement.setAttribute('height', height - 10);\n    }\n\n    load() {\n        super.load();\n\n        this.youTubeElement.setAttribute(\n            'src',\n            'https://www.youtube.com/embed/' + this.options.videoId\n        );\n        this.youTubeElement.setAttribute('title', 'YouTube video player');\n        this.youTubeElement.setAttribute('frameborder', '0');\n        this.youTubeElement.allowfullscreen = true;\n        this.contentElement.appendChild(this.youTubeElement);\n        this.parentElement.appendChild(this.element);\n\n        return this;\n    }\n\n    async update(newOptions, shouldRerender) {\n        super.update.call(this, newOptions, shouldRerender);\n\n        this.youTubeElement.setAttribute(\n            'src',\n            'https://www.youtube.com/embed/' + this.options.videoId\n        );\n\n        this.cell.setLoadingState(false);\n    }\n\n    getOptionsOnDrop(sidebar) {\n        super.getOptionsOnDrop.call(this, sidebar);\n        return {\n            renderTo: '',\n            type: 'YouTube',\n            videoId: '115hdz9NsrY'\n        };\n    }\n}\n\nComponentRegistry.registerComponent('YouTube', YouTubeComponent);\n```\n\n----------------------------------------\n\nTITLE: Including Highcharts Core Modules Directly in Browser\nDESCRIPTION: Example showing how to import Highcharts core modules directly in the browser using ES6 imports. This approach enables tree shaking but may result in increased load time due to multiple file requests.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation-with-esm.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n    import Chart from 'https://code.highcharts.com/es-modules/Core/Chart/Chart.js';\n    import LineSeries from 'https://code.highcharts.com/es-modules/Series/Line/LineSeries.js';\n\n    // Example to create a simple line chart in a div#container:\n    new Chart('container', { series: [{ data: [1, 2, 3]}] });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Point Accessibility Description in Highcharts\nDESCRIPTION: This snippet demonstrates how to add an accessibility description to a specific data point in a Highcharts series.  The `accessibility.description` property is used to provide a more detailed explanation of the point for screen reader users. This enhances the chart's accessibility by providing context and information beyond the basic data value.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/configure-the-accessibility-module.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n    series: [{\n        name: 'Percentage usage',\n        data: [{\n            name: 'JAWS',\n            y: 30.2,\n            accessibility: {\n                description: 'This is the most used desktop screen reader'\n            }\n        },\n        //..\n    }]\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts and Dashboards Libraries\nDESCRIPTION: These HTML script tags import the necessary JavaScript libraries for Highcharts and Highcharts Dashboards. These includes the core Highcharts library, the Dashboards library itself, and the layout module. These libraries are essential for creating and rendering the dashboard.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/your-first-dashboard.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n<script src=\"https://code.highcharts.com/dashboards/dashboards.js\"></script>\n<script src=\"https://code.highcharts.com/dashboards/modules/layout.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Vue Component with TypeScript\nDESCRIPTION: Implements a reusable Vue component for Highcharts Grid using script setup and template reference\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/wrappers/grid-with-vue.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { watch, ref } from 'vue';\nimport Grid from '@highcharts/grid-lite/es-modules/masters/grid-lite.src.js';\nimport '@highcharts/grid-lite/css/grid.css';\n\nconst props = defineProps(['config']);\nconst gridContainer = ref(null);\n\nwatch(gridContainer, () => {\n    if (gridContainer.value) {\n        Grid.grid(gridContainer.value, props.config);\n    }\n});\n</script>\n\n<template>\n    <div ref=\"gridContainer\"></div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Network Graph in JavaScript\nDESCRIPTION: This snippet shows a basic implementation of a network graph in Highcharts. It defines the chart type and provides a simple data structure for the graph connections.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/network-graph.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    chart: {\n        type: 'networkgraph'\n    },\n    series: [{\n        data: [\n            ['A', 'B'],\n            ['B', 'C'],\n            ['C', 'A']\n        ]\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Axis Accessibility Description and Range in Highcharts\nDESCRIPTION: This snippet illustrates how to set the accessibility description and range description for a y-axis in Highcharts. The `axis.accessibility.description` property provides a general description of the axis, while `axis.accessibility.rangeDescription` specifies the range of values represented by the axis. These options enhance the chart's accessibility by providing clear and concise information about the axes to screen reader users.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/configure-the-accessibility-module.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n     yAxis: {\n        accessibility: {\n            description: 'Daily steps in total for all three persons',\n            rangeDescription: 'Ranges from 22214 steps to 33730 steps'\n        },\n    },\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CSVConnector in DataPool with URL\nDESCRIPTION: This snippet demonstrates how to configure a CSVConnector within the DataPool. It specifies the connector's ID, type ('CSV'), and the URL from which the CSV data should be fetched. The `csvURL` option points to a remote CSV file.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-handling.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataPool: {\n    connectors: [{\n        id: 'my-csv-connector',\n        type: 'CSV',\n        options: {\n            csvURL: 'https://demo-live-data.highcharts.com/updating-set.csv'\n        }\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Pyramid Chart in Highcharts\nDESCRIPTION: This code snippet demonstrates the configuration of a column pyramid chart using Highcharts. It shows how to set the chart type and define the data series. The Highcharts library must be included for the snippet to work.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/column-pyramid.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    chart: {\n        type: 'columnpyramid'\n    },\n    series: [{\n        data: [138.8, 136.4, 104, 101.1, 75]\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Label Annotation in Highcharts\nDESCRIPTION: This snippet demonstrates how to create a basic annotation with a label pointing to the top-left corner of the chart (0, 0) in pixel coordinates.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/annotations-module.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nannotations: [{\n    labels: [{\n        point: { x: 0, y: 0 },\n        text: 'Label'\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Adding Shape Annotations in Highcharts\nDESCRIPTION: This snippet illustrates how to add shape annotations to a chart, specifically a circle and a rectangle, each associated with different data points.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/annotations-module.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nannotations: [{\n    shapes: [{\n        point: '0',\n        type: 'circle',\n        r: 10\n    }, {\n        point: '3',\n        type: 'rect',\n        width: 20,\n        height: 20\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts and Dashboards Modules in HTML\nDESCRIPTION: This snippet demonstrates how to import Highcharts and Dashboards modules in an HTML file. It is essential to load the Highcharts script before the Dashboards script to ensure proper functionality of charts in dashboards.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/types-of-components.md#2025-04-16_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n<script src=\"https://code.highcharts.com/dashboards/dashboards.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Responsive Chart Rules in Highcharts JavaScript\nDESCRIPTION: This code snippet demonstrates how to set up responsive chart rules in Highcharts. It defines a rule that hides the chart legend when the viewport width is less than 500 pixels. This is useful for optimizing the chart's appearance on smaller screens.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/responsive.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nresponsive: {\n  rules: [{\n    condition: {\n      maxWidth: 500\n    },\n    chartOptions: {\n      legend: {\n        enabled: false\n      }\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from Google Sheets with GoogleSheetsConnector in JavaScript\nDESCRIPTION: Demonstrates the setup of a GoogleSheetsConnector to fetch data from a Google Spreadsheet using an API key and a spreadsheet key. Dependencies include access to Google Sheets API and proper authentication keys. Data is loaded asynchronously and requires Google account permissions.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-pool-and-connectors.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function run() {\n    const connector = new DataConnector.types.GoogleSheets({\n        googleAPIKey: 'Aa...zz',\n        googleSpreadsheetKey: 'Bb...wW'\n    });\n    await connector.load();\n}\nrun();\n```\n\n----------------------------------------\n\nTITLE: Data Request Function Implementation\nDESCRIPTION: Async function that fetches data from the server using the Fetch API, processes it, and updates the chart. Includes logic for shifting data points when series length exceeds 20 points.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/live-data.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function requestData() {\n  const result = await fetch('https://demo-live-data.highcharts.com/time-rows.json');\n  if (result.ok) {\n    const data = await result.json();\n\n    const [date, value] = data[0];\n    const point = [new Date(date).getTime(), value * 10];\n    const series = chart.series[0],\n      shift = series.data.length > 20; // shift if the series is longer than 20\n\n    // add the point\n    chart.series[0].addPoint(point, true, shift);\n    // call it again after one second\n    setTimeout(requestData, 1000);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scatter Series with Marker Clusters in Highcharts\nDESCRIPTION: This code snippet shows how to configure a scatter series with marker clusters in Highcharts. It includes settings for data labels, clustering algorithm, zones, and sample data points.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/marker-clusters.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n  type: 'scatter',\n  color: 'red',\n  dataLabels: {\n    enabled: true,\n    pointFormat: ''\n  },\n  cluster: {\n    enabled: true,\n    dataLabels: {\n      style: {\n        fontSize: '8px'\n      },\n      y: -1\n    },\n    allowOverlap: false,\n    animation: true,\n    layoutAlgorithm: {\n      type: 'grid',\n      gridSize: 100\n    },\n    zones: [{\n      from: 0,\n      to: 2,\n      marker: {\n        fillColor: '#ffcccc',\n        radius: 12\n      }\n    }, {\n      from: 3,\n      to: 10,\n      marker: {\n        fillColor: '#ff6666',\n        radius: 15\n      }\n    }]\n  },\n  data: [\n    [35.79, 33.94],\n    [5, 24.05],\n    [20.89, 49.01],\n    [6.96, 79.79],\n    [21.92, 25.19],\n    [16.71, 53.54],\n    [6.54, 8.64],\n    [5.28, 12.24],\n    [16.14, 49.82],\n    [80.22, 16.38],\n    [31.36, 17.16],\n    [9.24, 8.97],\n    [66.57, 91.86],\n    [17.55, 5.07],\n    [54.86, 88.33],\n    [6.7, 5.49],\n    [53.34, 88.98],\n    [5.34, 46.02],\n    [18.13, 10.24],\n    [7.37, 43.98]\n  ]\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional yAxis for Pareto Chart in Highcharts\nDESCRIPTION: This snippet demonstrates how to set up an additional yAxis specifically for the Pareto series. It configures the axis to display values from 0-100% range, opposite to the main axis, with custom formatting.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/pareto-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyAxis: [{\n        // main yAxis\n}, {\n    title: {\n        text: 'Pareto'\n    },\n    minPadding: 0,\n    maxPadding: 0,\n    opposite: true,\n    labels: {\n        format: '{value}%'\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Groups in Highcharts Grid with JavaScript\nDESCRIPTION: This example demonstrates how to configure header options in Highcharts Grid, including renaming headers, creating header groups, defining grouped columns, inheriting column configurations, and excluding columns from the original DataTable.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/header.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    dataTable: {\n        columns: {\n            product: [\"Apple\", \"Pear\"],\n            weight: [182, 178],\n            price: [3.5, 2.5],\n            vitamin_a: [54,27],\n            in_stock: [true, false]\n        }\n    },\n    header: [\n        {\n            columnId: \"product\",\n            format: \"Fruit\"\n        },\n        {\n            format: \"Fruit data\",\n            accessibility: {\n                description: \"Header spanning three sub-headers\"\n            },\n            columns: [\n                \"weight\",\n                \"price\",\n                {\n                    columnId: \"vitamin_a\",\n                    format: \"Vitamin A (IU)\"\n                }\n            ]\n        }\n    ],\n    columns: [\n        {\n            id: \"weight\",\n            header: {\n                format: \"Weight\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Series as a Group Only in Highcharts\nDESCRIPTION: This snippet demonstrates how to expose a data series as a group only, without exposing the individual data points, using the `series.accessibility.exposeAsGroupOnly` option.  This is useful for simplifying the chart's structure for screen reader users and providing a summary of the series as a whole. Also shows how to use `descriptionFormat` to create a custom description.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/configure-the-accessibility-module.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n    series: [{\n        accessibility: {\n            exposeAsGroupOnly: true,\n            descriptionFormat: 'Emma did not reach her step goal which was ' +\n                '70000 steps in one week. She walked {sum} steps.'\n        },\n        // ..\n    }]\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: yAxis Configuration for Technical Indicators in Highcharts JavaScript\nDESCRIPTION: Illustrates how to configure multiple yAxis in Highcharts to accommodate different types of technical indicators which vary in value ranges. Overlay indicators share yAxis with the main series, while oscillators require separate yAxis due to differing value ranges. Inputs define proportions and positioning of yAxis and are used to correctly display technical indicators.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/technical-indicator-series.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nyAxis: [{\n  // Main series yAxis:\n  height: '50%'\n}, {\n  // yAxis for Stochastic technical indicator:\n  top: '50%',\n  height: '50%'\n}]\n```\n\n----------------------------------------\n\nTITLE: Setting Default Chart Type in Highcharts\nDESCRIPTION: This snippet demonstrates how to set the default chart type for a Highcharts visualization. It uses the 'chart' object with a 'type' property to specify the desired chart type, in this case, a line chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/chart-types.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart: {\n    type: 'line'\n}\n```\n\n----------------------------------------\n\nTITLE: CSV Data Connector Configuration\nDESCRIPTION: Defining a data connector with CSV formatted data for populating the Grid component.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/grid-component.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndataPool: {\\n    connectors: [{\\n        id: 'data',\\n        type: 'CSV',\\n        options: {\\n            csv: `Food,Vitamin A,Iron\\n            Beef Liver,6421,6.5\\n            Lamb Liver,2122,6.5\\n            Cod Liver Oil,1350,0.9\\n            Mackerel,388,1\\n            Tuna,214,0.6`\\n        }\\n    }]\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-side Data Grouping in Node.js with Highcharts\nDESCRIPTION: This code demonstrates two main operations for server-side data grouping: getting group positions using Highcharts.Time for time-based data distribution, and grouping data using the groupData function with various approximation methods.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/server-side-data-grouping.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 1. Get groupPositions using Highcharts.Time\nHighcharts.Time.getTimeTicks(normalizedInterval, min, max)\n\n// 2. Group the data\ngroupData(xData, yData, groupPositions, { approximation: 'average' })\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Label Alignment to Connectors in Highcharts Pie Chart\nDESCRIPTION: This snippet demonstrates how to set the dataLabels.alignTo option to 'connectors' in a Highcharts pie chart. This alignment method ensures each label touches the nearest vertical edge of the plot area.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/pie-datalabels-alignment.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    dataLabels: {\n        alignTo: 'connectors'\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Subexpressions in Highcharts Formatting\nDESCRIPTION: This code demonstrates the usage of subexpressions within Highcharts formatting. It shows how to perform Celsius to Fahrenheit conversion using nested helpers and how to format the result to one decimal place.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/templating.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Celsius to Fahrenheit conversion, where point.y is degrees Celsius\nformat: '{add (multiply point.y (divide 9 5)) 32}℉'\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Celsius to Fahrenheit conversion, where point.y is degrees Celsius.\n// Format the result with 1 decimal place.\nformat: '{(add (multiply point.y (divide 9 5)) 32):.1f}℉'\n```\n\n----------------------------------------\n\nTITLE: Configuring Axis for Navigator in Highcharts Stock (JavaScript)\nDESCRIPTION: This snippet configures the xAxis and yAxis for the Navigator component in Highcharts Stock charts. The options specified can customize axis behaviors such as labels and ranges, which apply universally across all navigator instances.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/navigator.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigator: {\n    xAxis: {...},\n    yAxis: {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Venn Diagram Configuration\nDESCRIPTION: This code snippet shows the complete configuration for creating a basic Venn diagram with two sets (Apples and Bananas) and their intersection (Fruits). It includes the chart initialization, series definition, and data configuration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/venn-series.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n    series: [{\n        type: 'venn',\n        data: [{\n            name: 'Apples',\n            sets: ['A'],\n            value: 2\n        }, {\n            name: 'Bananas',\n            sets: ['B'],\n            value: 2\n        }, {\n            name: 'Fruits',\n            sets: ['A', 'B'],\n            value: 1\n        }]\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Series with Multiple Chart Types using Highcharts in JavaScript\nDESCRIPTION: This snippet demonstrates how to define different series with various chart types such as 'column' and 'spline' using the Highcharts JavaScript library. The series array includes data for multiple entities, like 'Jane', 'John', and 'Joe', with an average calculated using a 'spline' type. No additional dependencies are required beyond Highcharts itself. Expected input includes the series configuration with type, name, and data. The output will be a rendered combination chart in the browser.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/combining-chart-types.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nseries: [{\n    type: 'column',\n    name: 'Jane',\n    data: [3, 2, 1, 3, 4]\n}, {\n    type: 'column',\n    name: 'John',\n    data: [2, 3, 5, 7, 6]\n}, {\n    type: 'column',\n    name: 'Joe',\n    data: [4, 3, 3, 9, 0]\n}, {\n    type: 'spline',\n    name: 'Average',\n    data: [3, 2.67, 3, 6.33, 3.33]\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Spacing in Highcharts\nDESCRIPTION: This snippet demonstrates how to configure the spacing around a Highcharts chart by setting specific values for spacingBottom, spacingTop, spacingLeft, and spacingRight. It also allows you to explicitly specify the chart’s width and height, although these are set to null here, implying default or container-based sizing. Key parameters include spacing and dimension values, which directly affect the visual layout of the chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/design-and-style.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nchart: {\n        // Edit chart spacing\n        spacingBottom: 15,\n        spacingTop: 10,\n        spacingLeft: 10,\n        spacingRight: 10,\n\n        // Explicitly tell the width and height of a chart\n        width: null,\n        height: null\n}\n```\n\n----------------------------------------\n\nTITLE: Including Highcharts Export Modules\nDESCRIPTION: This snippet shows how to include the exporting, offline-exporting, and export-data modules in an HTML page. These scripts are required to enable exporting functionalities in Highcharts.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/export-module-overview.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\n    <!-- optional -->\n    <script src=\"https://code.highcharts.com/modules/offline-exporting.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/export-data.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Highcharts Grid Lite Implementation\nDESCRIPTION: Complete HTML example showing how to set up a basic Highcharts Grid Lite instance with tabular data for products, weights, and prices.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/general.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>My First Grid</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/@highcharts/grid-lite/grid-lite.js\"></script>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@highcharts/grid-lite/css/grid.css\" />\n  </head>\n  <body>\n    <div id=\"container\"></div>\n    <script type=\"text/javascript\">\n      Grid.grid(\"container\", {\n        dataTable: {\n          columns: {\n            product: [\"Apple\", \"Pear\", \"Plum\", \"Banana\"],\n            weight: [100, 40, 0.5, 200],\n            price: [1.5, 2.53, 5, 4.5],\n          },\n        },\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Including Highcharts and Highcharts Stock\nDESCRIPTION: In this HTML example, Highcharts Stock is loaded alongside the main Highcharts library to support projects that require both functionalities. The script tags should be ordered appropriately to ensure correct module loading.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/getting-started-stock.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n<script src=\"https://code.highcharts.com/stock/modules/stock.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Language Module in JavaScript\nDESCRIPTION: This snippet shows how to load a Highcharts language module JSON file using JavaScript fetch API and set the language options. It's important to set the language options before initializing the chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/internationalization.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst langOptions = await fetch('https://code.highcharts.com/i18n/nb-NO.json')\n    .then(response => response.json());\n\nHighcharts.setOptions({\n    lang: langOptions\n});\n```\n\n----------------------------------------\n\nTITLE: Irregular Data Compression using relativeXValue\nDESCRIPTION: Shows how to compress irregularly spaced data using the relativeXValue option (available since v9.1.2). This method allows compression while maintaining irregular intervals between points.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/data-compression.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndata: [\n    [0,1],\n    [1,1],\n    [2,1],\n    [3,1],\n    [4,1],\n    [5,1],\n    ...\n],\npointStart: 1577836800000, // Date.UTC(2020, 0, 1)\npointInterval: 36e5, // one hour\nrelativeXValue: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Bullet Chart Series in Highcharts\nDESCRIPTION: This snippet demonstrates how to configure a bullet chart series in Highcharts. It includes settings for the series type, data structure, and target options. The code shows how to set the value and target for a data point, as well as customizing the appearance of the target.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/bullet-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type : 'bullet',\n    data : [{\n        y : 20,     // The value of a point\n        target: 50  // The target value of a point\n    }],\n    targetOptions: { // Options related with look and position of targets\n        width: '140%',        // The width of the target\n        height: 3,            // The height of the target\n        borderWidth: 0,       // The border width of the target\n        borderColor: 'black', // The border color of the target\n        color: 'black'        // The color of the target\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Click Event Handler for Audio Playback\nDESCRIPTION: JavaScript code that adds a click event handler to the sonify button, which triggers the chart's toggleSonify method to play or stop the audio representation of the chart data.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/getting-started.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ndocument.getElementById('sonify').onclick = () => chart.toggleSonify();\n```\n\n----------------------------------------\n\nTITLE: Wrapping Prototype Functions in Highcharts\nDESCRIPTION: This snippet demonstrates the use of the wrap utility in Highcharts to modify an existing prototype function, allowing for additional functionality before and after the original method is executed. It illustrates how to use the original function and pass the original arguments.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/extending-highcharts/extending-highcharts.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nH.wrap(H.Series.types.line.prototype, 'drawGraph', function (proceed) {\n\n    // Before the original function\n    console.log(\"We are about to draw the graph: \", typeof this.graph);\n\n    // Now apply the original function with the original arguments,\n    // which are sliced off this function's arguments\n    proceed.apply(this, Array.prototype.slice.call(arguments, 1));\n\n    // Add some code after the original function\n    console.log(\"We just finished drawing the graph: \", typeof this.graph);\n\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Maps without Stock\nDESCRIPTION: Example of loading just the Highmaps bundle when Stock functionality is not needed.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/install-from-npm.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Highmaps bundle still includes basic Highcharts, but not Stock\nvar Highcharts = require('highcharts/highmaps');\n```\n\n----------------------------------------\n\nTITLE: Initializing Extension on Chart Load\nDESCRIPTION: This snippet shows how to add an event listener to the Highcharts Chart class to initialize a custom extension when the chart loads. It listens for clicks on the chart container and tracks changes to the x-axis extremes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/extending-highcharts/extending-highcharts.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nH.addEvent(H.Chart, 'load', function(e) {\n    const chart = e.target;\n    H.addEvent(chart.container, 'click', function(e) {\n        e = chart.pointer.normalize(e);\n        console.log(`Clicked chart at ${e.chartX}, ${e.chartY}`);\n    });\n    H.addEvent(chart.xAxis[0], 'afterSetExtremes', function(e) {\n        console.log(`Set extremes to ${e.min}, ${e.max}`);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Styling and Positioning Chart Title in Highcharts\nDESCRIPTION: This snippet shows how to set and customize the title text in Highcharts, including positioning (alignment and offset) and floating properties. It also demonstrates inline text styling using Markdown for bold text and styles through the 'style' option.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/design-and-style.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ntitle: {\n    text: 'Example with **bold** text',\n    floating: true,\n    align: 'right',\n    x: -30,\n    y: 30\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Series Type in Highcharts Stock\nDESCRIPTION: This code snippet demonstrates how to update the series type in a Highcharts Stock chart to a candlestick chart. It utilizes the `update` method on the series object to modify its `type` property. This allows you to dynamically change the visualization of your stock data.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/understanding-highcharts-stock.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.series[0].update({\n    type: 'candlestick'\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Map Topology Data in Highcharts\nDESCRIPTION: This code snippet demonstrates how to fetch map topology data from a remote URL using the `fetch` API and parse it as JSON. The resulting JSON object, representing the map topology, is then used in the Highcharts configuration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/flowmap-series.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst topology = await fetch(\n    'https://code.highcharts.com/mapdata/custom/world.topo.json'\n).then(response => response.json());\n```\n\n----------------------------------------\n\nTITLE: Initializing Navigator Component with Extremes Sync in Highcharts Dashboards\nDESCRIPTION: This code snippet demonstrates how to initialize a Navigator component within a Highcharts Dashboard and configure it to synchronize extremes with other components.  The `sync: { extremes: true }` configuration enables this synchronization, allowing the navigator's range selection to update the displayed data in other linked components. The navigator displays data from the 'TXC' column as the 'y' value.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/navigator-component.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nDashboard.board('container', {\n  components: [\n    {\n      renderTo: 'time-range-selector',\n      type: 'Navigator',\n      connector: {\n        id: 'Range Selection'\n      },\n      columnAssignment: {\n        'TXC': 'y'\n      },\n      sync: {\n        extremes: true\n      }\n    },\n    // ...\n  ],\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Box Plot Data Point as Array in JavaScript\nDESCRIPTION: Shows two ways to define a data point for a box plot series using arrays in JavaScript. The first array contains only the five-number summary, while the second includes an x-value as the first element.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/box-plot-series.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[0, 1, 2, 3, 4]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[Date.UTC(2013, 1, 7), 0, 1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Highcharts Indicators\nDESCRIPTION: This snippet demonstrates how to load specific technical indicators for Highcharts Stock, instead of loading the entire bundle.  It first loads the base `indicators.js` module, followed by the specific indicator modules.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/stock-tools.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/indicators/indicators.js\"></script>\n<script src=\"https://code.highcharts.com/indicators/rsi.js\"></script>\n<script src=\"https://code.highcharts.com/indicators/ema.js\"></script>\n<script src=\"https://code.highcharts.com/indicators/macd.js\"></script>\n<script src=\"/ .... other technical indicators ...  \"\n```\n\n----------------------------------------\n\nTITLE: Customizing Network Graph Links and Layout in JavaScript\nDESCRIPTION: This example demonstrates how to customize the network graph by adjusting the link length, color, and other layout algorithm options in Highcharts.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/network-graph.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    chart: {\n        type: 'networkgraph'\n    },\n    plotOptions: {\n        networkgraph: {\n            layoutAlgorithm: {\n                linkLength: 50 // in pixels\n            },\n            link: {\n                color: 'red'\n            }\n        }\n    },\n    series: [{\n        data: [\n            ['A', 'B'],\n            ['B', 'C'],\n            ['C', 'A']\n        ]\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Data for Highcharts Treemap in JavaScript\nDESCRIPTION: Demonstrates how to structure data for a Highcharts treemap, including parent-child relationships and value assignment.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/treemap.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndata: [{\n    name: 'I have children',\n    id: 'id-1'\n}, {\n    name: 'I am a child',\n    parent: 'id-1',\n    value: 2\n}, {\n    name: 'I am a smaller child',\n    parent: 'id-1',\n    value: 1\n}]\n```\n\n----------------------------------------\n\nTITLE: Including Highcharts Modules\nDESCRIPTION: This snippet demonstrates how to include the necessary Highcharts modules (exporting, export-data, and accessibility) in an HTML page. These modules are required to enable the data table functionality and ensure accessibility. These modules should be included in the `<head>` or before the chart initialization.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/tables.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\n<script src=\"https://code.highcharts.com/modules/export-data.js\"></script>\n<script src=\"https://code.highcharts.com/modules/accessibility.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Fetching Map Data from Highcharts CDN in JavaScript\nDESCRIPTION: Demonstrates how to fetch and parse TopoJSON map data from the Highcharts CDN. This code uses the fetch API to retrieve the world map topology and parses the response as JSON.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/map-collection.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst topology = await fetch(\n    'https://code.highcharts.com/mapdata/custom/world.topo.json'\n).then(response => response.json());\n```\n\n----------------------------------------\n\nTITLE: Creating a Dashboard Instance with Class Constructor\nDESCRIPTION: This JavaScript code demonstrates an alternative method to create a new Highcharts dashboard instance using the `Dashboards.Board` class constructor. It takes the container ID and an object containing dashboard options as arguments.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/your-first-dashboard.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst board = new Dashboards.Board('container', {...})\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Defaults in Highcharts Grid\nDESCRIPTION: Basic configuration for column defaults and column-specific overrides in a Highcharts Grid component. The columnDefaults object defines default options for all columns, while the columns array allows overriding specific columns.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/columns.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    columnDefaults: {\n        cells: {\n            format: \"<span>{value}</span>\"\n        },\n        sorting: {\n            sortable: false\n        }\n    },\n    columns: [\n        {\n            id: \"product\",\n            sorting: {\n                sortable: true\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sankey Diagram Data Structure in JavaScript\nDESCRIPTION: This snippet demonstrates the data structure for a Sankey diagram in Highcharts. It defines the keys for the data points and provides an array of links between nodes, each specifying the source, target, and weight of the flow.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/sankey-diagram.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nkeys: ['from', 'to', 'weight'],\ndata: [\n         ['Oil', 'Transportation', 94],\n         ['Natural Gas', 'Transportation', 3],\n         ['Coal', 'Transportation', 0],\n         ['Renewable', 'Transportation', 0],\n         ['Nuclear', 'Transportation', 3],\n\n         ['Oil', 'Industrial', 41],\n         ['Natural Gas', 'Industrial', 40],\n         ['Coal', 'Industrial', 7],\n         ['Renewable', 'Industrial', 11],\n         ['Nuclear', 'Industrial', 0],\n\n         ['Oil', 'Residential & Commercial', 17],\n         ['Natural Gas', 'Residential & Commercial', 76],\n         ['Coal', 'Residential & Commercial', 1],\n         ['Renewable', 'Residential & Commercial', 7],\n         ['Nuclear', 'Residential & Commercial', 0],\n\n         ['Oil', 'Electric Power', 1],\n         ['Natural Gas', 'Electric Power', 18],\n         ['Coal', 'Electric Power', 48],\n         ['Renewable', 'Electric Power', 11],\n         ['Nuclear', 'Electric Power', 22]\n],\n```\n\n----------------------------------------\n\nTITLE: Conditional rendering using #if helper in Highcharts\nDESCRIPTION: This snippet illustrates the use of the `#if` block helper in Highcharts templating. It demonstrates how to conditionally render different content based on whether a point's value is null or not.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/templating.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// A simple #if helper\nformat: '{#if point.isNull}Null{else}{point.y:.2f} USD{/if}'\n```\n\n----------------------------------------\n\nTITLE: Integrating ColorAxis with Highcharts Treemap in JavaScript\nDESCRIPTION: Demonstrates how to use ColorAxis with a Highcharts treemap, including configuration and point color value assignment.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/treemap.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Highcharts.Chart({\n    ...\n    colorAxis: {\n        minColor: '#FFFFFF',\n        maxColor: Highcharts.getOptions().colors[0]\n    },\n    ...\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Highcharts.Chart({\n    ...\n    colorAxis: {\n        ...\n    },\n    series: [{\n        ...\n        data: [{\n            name: \"Point 1\",\n            value: 1,\n            colorValue: 5 // This value decides which color on the scale that the point gets.\n        }],\n        ...\n    }],\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Highcharts Package as ES6 Module\nDESCRIPTION: HTML implementation showing how to use a custom Highcharts package as an ES6 module. It imports the custom Highcharts module and creates a basic line chart in a container element.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/how-to-create-custom-highcharts-packages.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <body>\n        <div id=\"container\"></div>\n        <script type=\"module\">\n            import Highcharts from './esm/custom.js';\n            Highcharts.chart('container', {\n                series: [{\n                    type: 'line',\n                    data: [1, 32, 42]\n                }]\n            });\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Including a Pre-defined Theme in HTML\nDESCRIPTION: This code snippet demonstrates how to include a pre-defined Highcharts theme in an HTML page. It uses a `<script>` tag to load the theme file.  This will apply the theme's default options to all charts on the page.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/themes.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/js/themes/gray.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Map Points with Latitude/Longitude in Highcharts\nDESCRIPTION: Example of how to specify map points using direct latitude/longitude coordinates in a Highcharts Maps series configuration. This demonstrates defining city locations with their geographical coordinates.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/latlon.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    type: 'mappoint',\n    name: 'Cities',\n    data: [{\n        name: 'London',\n        lat: 51.507222,\n        lon: -0.1275\n    }, {\n        name: 'Birmingham',\n        lat: 52.483056,\n        lon: -1.893611\n    }, {\n        name: 'Leeds',\n        lat: 53.799722,\n        lon: -1.549167\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Including Highcharts and Exporting Modules\nDESCRIPTION: Script tags for loading Highcharts core library and required exporting modules for client-side chart export functionality\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/client-side-export.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n<script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\n<script src=\"https://code.highcharts.com/modules/offline-exporting.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Sunburst Chart Levels in Highcharts\nDESCRIPTION: This code snippet shows how to customize specific levels in a Sunburst chart using the 'levels' option. It sets 'colorByPoint' to true for the first level, allowing each point at that level to have a unique color.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/sunburst-series.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chart = new Highcharts.Chart({\n    ...\n    series: [{\n       levels: [{\n           level: 1,\n           colorByPoint: true\n       }],\n       ...\n    }],\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Waterfall Chart Data Points with Highcharts in JavaScript\nDESCRIPTION: This code snippet demonstrates how to define data points for a waterfall chart using Highcharts in JavaScript. Each point can be given a name and a Y value, with special flags like 'isIntermediateSum' and 'isSum' to denote summarized points. No additional dependencies are required beyond Highcharts itself.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/waterfall-series.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndata: [{\n    name: 'Start',\n    y: 120000\n}, {\n    name: 'Product Revenue',\n    y: 569000\n}, {\n    name: 'Service Revenue',\n    y: 231000\n}, {\n    name: 'Positive Balance',\n    isIntermediateSum: true,\n    color: '#0066FF'\n}, {\n    name: 'Fixed Costs',\n    y: -342000\n}, {\n    name: 'Variable Costs',\n    y: -233000\n}, {\n    name: 'Balance',\n    isSum: true,\n    color: '#0066FF'\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigator and Scrollbar in Highcharts Stock\nDESCRIPTION: This code snippet shows how to configure the navigator and scrollbar in a Highcharts Stock chart.  The navigator allows for fine-tuning the displayed range, while the scrollbar enables scrolling through the entire dataset. The code uses the `update` method on the chart object to enable the navigator, set its height, and disable the scrollbar.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/understanding-highcharts-stock.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchart.update({\n    navigator: {\n        enabled: true,\n        height: 100\n    },\n    scrollbar: {\n        enabled: false\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Indicators\nDESCRIPTION: This snippet shows how to load all technical indicators for Highcharts Stock. This is a convenience bundle, and may not be suitable for production environments where only specific indicators are required.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/stock-tools.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/indicators/indicators-all.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Data Announcements in Highcharts\nDESCRIPTION: This snippet shows how to customize data announcements in Highcharts using the announcementFormatter function. It demonstrates conditional announcements based on point values, with the ability to interrupt the user for critical alerts.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/accessible-dynamic-data.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onAnnounce(updatedSeries, newSeries, newPoint) {\n    return newPoint && newPoint.y > 10 ? 'Alert: ' + newPoint.y : '';\n}\n\nHighcharts.chart('container', {\n    accessibility: {\n        announceNewData: {\n            interruptUser: true,\n            announcementFormatter: onAnnounce\n        }\n    },\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Modules With v12\nDESCRIPTION: Simplified module loading in Highcharts v12, where modules automatically recognize the shared namespace without requiring factory function calls.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/version-12.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Highcharts from 'highcharts';\nimport 'highcharts/modules/exporting';\n```\n\n----------------------------------------\n\nTITLE: Example of Synchronized Highcharts Components\nDESCRIPTION: This snippet features a configuration example for synchronized Highcharts components using a common CSV data connector. It enables visibility, highlight, and extremes sync types.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/synchronize-components.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nDashboards.board('container', {\n  dataPool: {\n      connectors: [{\n          id: 'Vitamin',\n          type: 'CSV',\n          options: {\n              csv: `Food,Vitamin A,Iron\n              Beef Liver,6421,6.5\n              Lamb Liver,2122,6.5\n              Cod Liver Oil,1350,0.9\n              Mackerel,388,1\n              Tuna,214,0.6`,\n          },\n      }]\n  },\n  components: [{\n      connector: {\n          id: 'Vitamin'\n      },\n      sync: {\n          visibility: true,\n          highlight: true,\n          extremes: true\n      },\n      renderTo: 'dashboard-col-0',\n      type: 'Highcharts'\n  }, {\n      renderTo: 'dashboard-col-1',\n      connector: {\n          id: 'Vitamin'\n      },\n      sync: {\n          visibility: true,\n          highlight: true,\n          extremes: true\n      },\n      type: 'Highcharts'\n  }]\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Tooltip with CSS\nDESCRIPTION: Demonstrates styling the tooltip in Highcharts using CSS when styled mode is enabled. CSS class uses SVG styling properties such as `fill` and `stroke`.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/tooltip.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.highcharts-tooltip-box {\n    fill: #FCFFC5;\n    stroke: black;\n    stroke-width: 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing KPI Component\nDESCRIPTION: This JavaScript code initializes a KPI component within a Highcharts Dashboard.  It defines a layout with a single cell and configures a KPI component to render in that cell, setting its type, title, and initial value. The code uses the `Dashboards.board` function to create the dashboard.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/kpi-component.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nDashboards.board('container', {\n    gui: {\n        layouts: [{\n            id: 'layout-1',\n            rows: [{\n                cells: [{\n                    id: 'dashboard-col-0'\n                }]\n            }]\n        }]\n    },\n    components: [{\n        renderTo: 'dashboard-col-0',\n        type: 'KPI',\n        title: 'My KPI',\n        value: 10\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic TiledWebMap Series with Provider\nDESCRIPTION: This code configures a basic tiled web map series using OpenStreetMap as the provider. It sets the series type, name, and provider details including type, theme, and subdomain.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/tiledwebmap.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nseries: [{\n    type: 'tiledwebmap',\n    name: 'Basemap Tiles',\n    provider: {\n        type: 'OpenStreetMap',\n        theme: 'Standard',\n        subdomain: 'a'\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Axis Resizer in Highcharts JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the Axis Resizer in Highcharts. By enabling the resizer feature in the yAxis configuration, users can dynamically adjust the height of multiple axes. This feature is particularly beneficial in stock charts with technical indicators. Dependencies include the inclusion of either the `modules/drag-panes.js` or `js/modules/drag-panes.js` module, depending on the styled mode configuration. Key parameters include `height` and `resize.enabled`, which define the initial axis size and enable resizing, respectively. The snippet requires an active Highcharts environment supporting stock charts.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/axis-resizer.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nyAxis: [{\n  height: '50%',\n  resize: {\n    enabled: true\n  }\n}, {\n  height: '50%',\n  top: '50%'\n}]\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Callbacks in Highcharts Grid Pro\nDESCRIPTION: This example demonstrates how to implement various event callbacks for cells, columns, and headers in Highcharts Grid Pro. The code shows how to log information about different interactions such as editing, clicking, resizing, and sorting.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/events.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nevents: {\n  cell: {\n    afterEdit: function () {\n      console.log('Cell edited:', this);\n    },\n    afterSetValue: function () {\n      console.log('Cell value set:', this);\n    },\n    click: function () {\n      console.log('Cell clicked:', this);\n    },\n    dblClick: function () {\n      console.log('Cell double-clicked:', this);\n    },\n    mouseOver: function () {\n      console.log('Mouse over cell:', this);\n    },\n    mouseOut: function () {\n      console.log('Mouse out of cell:', this);\n    }\n  },\n  column: {\n    afterResize: function () {\n      console.log('Column resized:', this);\n    },\n    afterSorting: function () {\n      console.log('Column sorted:', this);\n    }\n  },\n  header: {\n    click: function () {\n      console.log('Header clicked:', this);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid Pro in Highcharts\nDESCRIPTION: This snippet demonstrates how to use the factory function `Grid.grid` to initialize the new Grid Pro component. The function takes two parameters: the container ID where the grid will be rendered and an options object that specifies the data table structure and configurations.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/grid-migration.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = Grid.grid('container', {\n    dataTable: {\n        columns: { ... }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Cell Edit Events in Highcharts Grid Pro\nDESCRIPTION: This snippet shows how to use the afterEdit event handler to respond to cell value changes. The event provides access to column id, row data, and the updated value.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/cell-editing.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nevents: {\n  cell: {\n    afterEdit: function () {\n      console.log(`${this.column.id} for ${this.row.data.firstName} was updated to ${this.value}`);\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Grid Pro in JavaScript\nDESCRIPTION: This snippet shows how to import the Highcharts Grid Pro module along with its CSS stylesheet into a JavaScript project. This step is necessary after installing the package via NPM. The import statements should be added at the beginning of the JavaScript files where Grid functionalities are required.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/grid-standalone.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Grid from '@highcharts/dashboards/datagrid';\nimport '@highcharts/dashboards/css/datagrid.css';\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Gantt as a Standalone Library\nDESCRIPTION: This snippet shows how to include Highcharts Gantt as a standalone library when no other Highcharts dependencies are needed. The script tag loads the complete highcharts-gantt.js file from the CDN.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/gantt/getting-started-gantt.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/gantt/highcharts-gantt.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Options with setOptions() in Highcharts Grid\nDESCRIPTION: Shows how to set default options globally for all Grid instances on a page using the setOptions() method. This example disables sorting functionality for all grids.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/understanding-grid.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nGrid.setOptions({\n    columnDefaults: {\n        sorting: {\n            sortable: false\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Modules\nDESCRIPTION: This snippet shows how to load the necessary modules for the default Stock Tools toolbar in Highcharts Stock, including Resizable panes, Annotations, Full screen, and Current Price.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/stock-tools.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/modules/drag-panes.js\"></script>\n<script src=\"https://code.highcharts.com/modules/annotations-advanced.js\"></script>\n<script src=\"https://code.highcharts.com/modules/price-indicator.js\"></script>\n<script src=\"https://code.highcharts.com/modules/full-screen.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Connector Shape Function in Highcharts Pie Chart\nDESCRIPTION: This snippet demonstrates how to create a custom connector shape using a callback function in a Highcharts pie chart. The function receives label position, connector position, and options as parameters, and returns an SVG path definition for the connector.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/pie-datalabels-alignment.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconnectorShape: function(labelPosition, connectorPosition, options) {\n  var connectorPadding = options.connectorPadding,\n    touchingSliceAt = connectorPosition.touchingSliceAt,\n    series = this.series,\n    plotWidth = series.chart.plotWidth,\n    plotLeft = series.chart.plotLeft,\n    alignment = labelPosition.alignment,\n    stepDistance = 150, // in px - distance between the step and vertical border of the plot area\n    stepX = alignment === 'left' ? plotLeft + plotWidth - stepDistance : plotLeft + stepDistance;\n\n  return ['M',\n    labelPosition.x + (alignment === 'left' ? 1 : -1) *\n    connectorPadding,\n    labelPosition.y,\n    'L',\n    stepX,\n    labelPosition.y,\n    'L',\n    stepX,\n    touchingSliceAt.y,\n    'L',\n    touchingSliceAt.x,\n    touchingSliceAt.y\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Network Graph Data Structure in JavaScript\nDESCRIPTION: This code demonstrates the data format required for creating a network graph in Highcharts. Each data point represents a link between two nodes specified by 'from' and 'to' properties.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/network-graph.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    data: [\n        {from: 'A', to: 'B'},\n        {from: 'A', to: 'C'},\n        {from: 'A', to: 'D'},\n        {from: 'A', to: 'E'},\n        {from: 'A', to: 'F'},\n        {from: 'A', to: 'G'},\n\n        {from: 'B', to: 'C'},\n        ...\n    ]\n}]\n```\n\n----------------------------------------\n\nTITLE: Setting Data Grouping Units in Highcharts Stock JS\nDESCRIPTION: This code snippet sets custom units for data grouping in a Highcharts Stock chart. It restricts the grouping to specific time intervals, such as one to three days, enhancing control over how data is aggregated.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/data-grouping.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighcharts.stockChart('container', {\\n    series: [{\\n        dataGrouping:{\\n            units: [['day', [1, 2, 3]]]\\n        },\\n        data: [...]\\n    }]\\n});\n```\n\n----------------------------------------\n\nTITLE: Setting General Y-Axis Configurations in Parallel Coordinates Chart\nDESCRIPTION: This code demonstrates how to set general configurations for all y-axes using the 'parallelAxes' property in the chart configuration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/parallel-coordinates-chart.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nchart: {\n  parallelAxes: {\n    tickAmount: 10 // all non-categorized axes will have exactly ten ticks\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Reader Section Before Chart - Highcharts JS\nDESCRIPTION: This snippet configures the text format of the screen reader section that appears before the chart. It uses the 'accessibility.screenReaderSection.beforeChartFormat' option to generate HTML with key information about the chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/configure-the-accessibility-module.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n    accessibility: {\n        screenReaderSection: {\n            beforeChartFormat: '<h5>{chartTitle}</h5>' +\n                '<div>{typeDescription}</div>' +\n                '<div>{chartSubtitle}</div>' +\n                '<div>{chartLongdesc}</div>' +\n                '<div>{viewTableButton}</div>'\n        },\n    },\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Highcharts component with multiple DataConnectors\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure a Highcharts component to use multiple DataConnectors.  The `connector` option is an array, where each object defines a separate connector with its own ID and column assignments. This allows the chart to pull data from multiple sources.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/highcharts-component.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncomponents: [{\n    type: 'Highcharts',\n    connector: [{\n        id: 'connector-1',\n        columnAssignment: [ ... ]\n    }, {\n        id: 'connector-2',\n        columnAssignment: [ ... ]\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Customizing Legend Position in Highcharts\nDESCRIPTION: This snippet demonstrates how to position a Highcharts legend using alignment and floating options. The legend is customized to align to the left and top, with floating enabled to allow free positioning over the plot area.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/design-and-style.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlegend:{\n     align: 'left',\n     verticalAlign: 'top',\n     floating: true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DataTable Manually - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a DataTable manually by directly providing data for columns and rows. It reflects a static initialization of the DataTable.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-table.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataTable = new Dashboards.DataTable({\n    columns: {\n        x: [1, 2, 3, 4, 5, 6],\n        y: ['a', 'a', 'b', 'b', 'c', 'c']\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts Dashboards Package\nDESCRIPTION: This command installs the Highcharts Dashboards package using npm. It is a prerequisite for creating dashboards with React.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/wrappers/dashboards-with-react.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install @highcharts/dashboards\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Highcharts Dashboard with ES6 Module\nDESCRIPTION: Demonstrates how to load Highcharts Dashboards directly from CDN and create a basic dashboard with edit mode and GUI enabled. Includes a simple HTML component rendering a 'Hello world' heading.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/installation-with-es-modules.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n    <script type=\"module\">\n        import Dashboards from 'https://code.highcharts.com/dashboards/es-modules/masters/dashboards.src.js';\n\n        Dashboards.board('container', {\n            editMode: {\n                enabled: true,\n                contextMenu: {\n                    enabled: true\n                }\n            },\n            gui: {\n                enabled: true,\n                layouts: [{\n                    rows: [{\n                        cells: [{\n                            id: 'dashboard-col-0'\n                        }]\n                    }]\n                }]\n            },\n            components: [\n                {\n                    renderTo: 'dashboard-col-0',\n                    type: 'HTML',\n                    elements: [{\n                        tagName: 'h1',\n                        attributes: {\n                            text: 'Hello world'\n                        }\n                    }]\n                }\n            ]\n        });\n\n    </script>\n```\n\n----------------------------------------\n\nTITLE: Configuring a KPI Component in Highcharts Dashboard\nDESCRIPTION: This code snippet demonstrates how to configure a KPI (Key Performance Indicator) component in Highcharts. It specifies a render target, component type, title, value, thresholds, and threshold colors for conditional styling based on the value.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/types-of-components.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    renderTo: 'kpi-00',\n    type: 'KPI',\n    title: 'Average revenue',\n    value: 888,\n    threshold: [200, 800],\n    thresholdColors: ['#f45b5b', '#f7a35c', '#90ed7d']\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring 3D Options in JavaScript for Highcharts\nDESCRIPTION: This JavaScript snippet outlines how to configure 3D options for a Highcharts chart. It includes settings such as enabling 3D, adjusting depth, and defining frames and perspective adjustments. Dependencies include Highcharts and the Highcharts 3D module.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/3d-charts.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nchart: {\n    ....\n    options3d: {\n        enabled: 'boolean value',\n        alpha: 'numeric value',\n        beta: 'numeric value',\n        depth: 'numeric value',\n        viewDistance: 'numeric value',\n        frame: {\n            bottom: {\n                size: 'numeric value',\n                color: 'color value'\n            },\n            side: {\n                size: 'numeric value',\n                color: 'color value'\n            },\n            back: {\n                size: 'numeric value',\n                color: 'color value'\n            }\n       }\n   },\n   ...\n}\n...\nplotOptions: {\n    ...\n    column: {\n        ...\n        depth: 'numeric value',\n        groupZPadding: 'numeric value',\n        ...\n    },\n    ...\n    pie: {\n        depth: 'numeric value'\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Drag and Drop in Packed Bubble Chart\nDESCRIPTION: Shows how to make bubbles draggable in a packed bubble chart and allow dragging between series. This feature is only available when simulation is enabled.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/packed-bubble.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nplotOptions: {\n    packedbubble: {\n        Draggable: true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dashboard Layout (GUI)\nDESCRIPTION: This JavaScript object defines the layout structure of the dashboard using rows and cells.  The `gui` object specifies the layout with a single row containing two cells, identified by `dashboard-col-0` and `dashboard-col-1`. These IDs are later used to place components in the respective cells.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/your-first-dashboard.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngui: {\n    layouts: [{\n        id: 'layout-1',\n        rows: [{\n            cells: [{\n                id: 'dashboard-col-0'\n            }, {\n                id: 'dashboard-col-1'\n            }]\n        }]\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Highcharts Map Chart\nDESCRIPTION: This snippet demonstrates how to initialize a Highcharts map chart using the `Highcharts.mapChart` constructor. It takes the container ID and chart options as arguments. The default series `type` is `map` if not specified in the chart options.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/map-series.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.mapChart('container', {\n   // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Highcharts in tsconfig.json\nDESCRIPTION: This JSON snippet shows a typical TypeScript configuration for using Highcharts in a web browser environment. It sets the target to ES2020, uses ES6 modules, and excludes the node_modules directory.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/highcharts-typescript-declarations.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"esModuleInterop\": true,\n        \"strict\": true,\n        \"target\": \"es2020\",\n        \"module\": \"es6\",\n        \"moduleResolution\": \"node\",\n        \"outDir\": \"mychart/\"\n    },\n    \"exclude\": [\n        \"node_modules\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Crosshairs on Axes\nDESCRIPTION: Enables crosshairs on specified axes in a Highcharts chart, which helps in identifying the corresponding value on the axis for hovered points. This snippet configures crosshairs for both x and y axes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/tooltip.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Enable for x-axis\nxAxis: {\n    crosshair: true\n}\n\n// Enable for y-axis\nyAxis: {\n    crosshair: true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring new Grid Pro Structure\nDESCRIPTION: This code snippet outlines the configuration options for the new Grid Pro, including data tables, column defaults, rendering options, and event handlers. The customization includes defining columns, enabling or disabling certain fields, and specifying callback actions for cell interactions.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/grid-migration.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndataTable: {\n        columns: {\n            product: ['Apples', 'Pears', 'Plums', 'Bananas'],\n            weight: [100, 40, 0.5, 200],\n            price: [1.5, 2.53, 5, 4.5],\n            metaData: ['a', 'b', 'c', 'd'],\n        }\n    },\n    columnDefaults: {\n        cells: {\n            editable: true\n        }\n        sorting: {\n            sortable: false\n        }\n    }\n    rendering: {\n        columns: {\n            distribution: 'full'\n        },\n        rows: {\n            bufferSize: 10,\n            strictHeights: false\n        }\n    }\n    columns: [{\n        id: 'weight',\n        className: 'custom-column-class-name',\n        cells: {\n            format: 'V:{value}';\n            }\n        }\n    }, {\n        id: 'metaData',\n        enabled: false\n    }],\n    events: {\n        cell: {\n            click: function () {\n                // Callback action\n            },\n            dblClick: function() {\n                // Callback action\n            },\n            afterEdit: function () {\n                // Callback action\n            }\n        },\n        column: {\n            afterSorting: function () {\n                // Callback action\n            },\n            afterResize: function () {\n                // Callback action\n            }\n        },\n        header: {\n            click: function () {\n                // Callback action\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeline Data Series with Datetime Axis in JavaScript\nDESCRIPTION: This snippet shows how to structure the data series for a Timeline chart with events tied to specific dates using timestamps. The 'x' property is set with milliseconds since 1970.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/timeline-series.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndata: [{\n    x: 1514764800000,\n    name: 'Event name',\n    label: 'Event label',\n    description: 'Description of this event.'\n}, {\n    x: 1526774400000,\n    name: 'Event name',\n    label: 'Another event label',\n    description: 'Description of second event'\n}]\n```\n\n----------------------------------------\n\nTITLE: Specifying Column Depth for 3D Column Charts in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to set the depth for columns in a 3D Highcharts column chart. You must adjust this depth within the plotOptions to suit the dataset.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/3d-charts.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nplotOptions.column.depth: The depth of each individual column.\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Algorithm for Packed Bubble Chart\nDESCRIPTION: Demonstrates how to configure the layout algorithm for a packed bubble chart, including options for gravitational constant, series splitting, and drag-and-drop functionality.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/packed-bubble.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayoutAlgorithm: {\n    gravitationalConstant: 0.05,\n    splitSeries: true,\n    seriesInteraction: false,\n    dragBetweenSeries: true,\n    parentNodeLimit: true\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Data Label (CSS)\nDESCRIPTION: This CSS class styles the data labels in Highcharts. Use `_.highcharts-data-label-box` to style the border or background, and `_.highcharts-data-label text` for text styling. Use the `dataLabels.className` option to set specific class names for individual items. It replaces background, border, color and style options for `series.dataLabels`.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_25\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-data-label\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Arc Diagram Keys in Highcharts\nDESCRIPTION: Demonstrates the key structure needed for linking nodes in an Arc Diagram. Uses 'from' and 'to' properties to establish connections between nodes, and 'weight' to define connection strength.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/arc-diagram/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nkeys: ['from', 'to', 'weight']\n```\n\n----------------------------------------\n\nTITLE: Setting Value Suffix for Data Points - Highcharts JS\nDESCRIPTION: This snippet configures a value suffix for data points using the 'accessibility.point.valueSuffix' option. If not specified, it will use 'tooltip.valueSuffix' as the default.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/configure-the-accessibility-module.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n    accessibility: {\n        point: {\n            valueSuffix: '%'\n        }\n    },\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to Highcharts Dashboard Edit Mode Events\nDESCRIPTION: This example shows how to add event listeners for edit mode events in a Highcharts Dashboard. It logs messages to the console for events such as component changes and layout changes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/edit-mode.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nU.addEvent(editMode, 'componentChanged', e => {\n    console.log('Component Changed', e);\n});\n\nU.addEvent(editMode, 'componentChangesDiscarded', e => {\n    console.log('Component Changes Discarded', e);\n});\n\nU.addEvent(editMode, 'layoutChanged', e => {\n    console.log('Layout Changed', e);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating DataTable in TypeScript\nDESCRIPTION: Instantiate a new DataTable with predefined columns and a manual ID to differentiate between instances. The table organizes data by columns, enabling efficient data management.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ts/Data/README.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst table = new DataTable({\n    columns: {\n        year: [1984, 1990],\n        title: ['Gremlins', 'Gremlins 2: The New Batch']\n    },\n    id: 'gremlins_movies'\n});\ntable.id === 'gremlins_movies';\ntable.autoId === false;\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Treegraph Data Structure in JavaScript\nDESCRIPTION: This snippet shows how to structure data for a treegraph chart in Highcharts. It demonstrates defining nodes with parent-child relationships using 'id' and 'parent' properties.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/treegraph-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndata: [{\n    name: 'I have children',\n    id: 'id-1'\n}, {\n    name: 'I am a child',\n    parent: 'id-1'\n}, {\n    name: 'I am a smaller child',\n    parent: 'id-1'\n}]\n```\n\n----------------------------------------\n\nTITLE: Chain Modifier Example\nDESCRIPTION: This snippet demonstrates the usage of the Chain modifier in Highcharts Dashboards. The Chain modifier allows combining multiple modifiers sequentially. The `chain` property is an array of modifier configuration objects, each specifying the type and options for a modifier to be applied in order.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-modifiers.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndataModifier: {\n    type: 'Chain',\n    chain: [{\n     // ... Another modifier options\n    }, {\n     // ... Another modifier options\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Caption to Highcharts - JavaScript\nDESCRIPTION: This code snippet illustrates how to add a caption to a Highcharts chart, which will be accessible to screen readers. The caption appears at the bottom of the chart and is included in exported versions of the chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/accessibility-module.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n    caption: {\n        text: '<b>The caption renders in the bottom, and is part of the exported chart.</b>'\n    },\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Highcharts Master File in TypeScript\nDESCRIPTION: This TypeScript code defines a custom Highcharts master file with only the essential modules needed for a basic line chart. It imports core Highcharts functionality, SVG renderer, Chart component, and LineSeries module, then exports them as a Highcharts object.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/how-to-create-custom-highcharts-packages.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @license Highcharts JS v@product.version@ (@product.date@)\n * @module highcharts/highcharts\n *\n * (c) 2009-2024 Highcharts AS\n *\n * License: www.highcharts.com/license\n */\n'use strict';\nimport Highcharts from '../Core/Globals.js';\nimport SVGRenderer from '../Core/Renderer/SVG/SVGRenderer.js';\nimport Chart from '../Core/Chart/Chart.js';\nimport LineSeries from '../Series/Line/LineSeries.js';\nconst exports: Record<string, any> = Highcharts;\nexports.Renderer = SVGRenderer;\nexports.SVGRenderer = SVGRenderer;\nexports.Chart = Chart;\nexports.chart = Chart.chart;\nexports.LineSeries = LineSeries;\nexport default Highcharts;\n```\n\n----------------------------------------\n\nTITLE: Defining a Linear Gradient in Highcharts\nDESCRIPTION: This snippet demonstrates how to define a linear gradient for color properties in Highcharts. The gradient is specified using two properties: the starting and ending positions, as well as the color stops.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/colors.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncolor: {\n    linearGradient: { x1: 0, x2: 0, y1: 0, y2: 1 },\n    stops: [\n        [0, '#003399'],\n        [1, '#3366AA']\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flow Map Series with Lon/Lat Coordinates in Highcharts\nDESCRIPTION: This code snippet configures a `flowmap` series in Highcharts, creating flows directly with longitude and latitude coordinates specified in the `from` and `to` properties. This allows creating flow lines without needing a separate mappoint series.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/flowmap-series.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    type: 'flowmap',\n    name: 'Flowmap with lon/lat coordinates',\n    data: [\n        {\n            from: [52.2662, 20.9969],\n            to: [59.9170, 10.7511]\n        },\n        ...\n    ],\n    ...\n}]\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Announcements in Highcharts\nDESCRIPTION: This snippet demonstrates how to enable announcements of new data and drilldown events for screen reader users in a Highcharts chart. It sets the accessibility.announceNewData.enabled option to true.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/accessible-dynamic-data.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n    accessibility: {\n        announceNewData: {\n            enabled: true\n        }\n    },\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Total Revenue Component with DataConnector in Highcharts Dashboards\nDESCRIPTION: This code creates a custom TotalRevenueHTML component by extending the HTMLComponent class. It fetches data from a DataConnector, calculates the total revenue, and displays it in a formatted HTML container. The component implements async loading to ensure data is properly fetched before rendering.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/custom-component.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ComponentRegistry } = Dashboards,\n    HTMLComponent = ComponentRegistry.types.HTML;\n\nclass TotalRevenueHTML extends HTMLComponent {\n    constructor(cell, options) {\n        super(cell, options);\n\n        this.type = 'TotalRevenueHTML';\n\n        return this;\n    }\n\n    async load() {\n        await super.load();\n        const revenue = this.getTotalRevenue();\n\n        this.elements = this.getElementsFromString(\n            `\n            <div class=\"revenue\">\n                <p class=\"title\">Total revenue</p>\n                <p class=\"value\">${revenue} €</p>\n            </div>\n            `\n        );\n        this.render();\n    }\n\n    getTotalRevenue() {\n        const connector = this.getFirstConnector();\n        const table = connector.table.modified;\n\n        return table.columns.Revenue.reduce((acc, cur) => acc + cur);\n    }\n}\n\nComponentRegistry.registerComponent('TotalRevenueHTML', TotalRevenueHTML);\n```\n\n----------------------------------------\n\nTITLE: Defining a color as a pattern\nDESCRIPTION: This snippet shows how to define a color as a pattern within a Highcharts configuration. The `pattern` object allows you to specify the pattern's properties, which can be either SVG or image based.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/pattern-fills.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncolor: {\n    pattern: {\n        // Pattern options here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Helper in Highcharts\nDESCRIPTION: This code defines a custom helper function named `abs` that returns the absolute value of a number, and registers it with `Highcharts.Templating.helpers`.  It also shows how to use this newly defined helper within a format string.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/templating.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Define a helper to return the absolute of a number\nHighcharts.Templating.helpers.abs = value => Math.abs(value);\n\n// Use it like this\nformat: 'Absolute value: {abs point.y}'\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts Dashboards Modules in JavaScript\nDESCRIPTION: Illustrates how to import the Highcharts Dashboards and LayoutModule in a JavaScript project using ES modules. It assumes a module bundler setup like Webpack or Parcel.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/edit-mode.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Dashboards from '@highcharts/dashboards';\nimport LayoutModule from '@highcharts/dashboards/modules/layout';\n\nLayoutModule(Dashboards);\n```\n\n----------------------------------------\n\nTITLE: Initializing Series Type for Linear Regression in Highcharts\nDESCRIPTION: Sets up a new series type 'linearregression' using Highcharts.seriesType. Integrates the getValues and getLinearRegression methods, ensuring it inherits from 'sma'. Requires 'indicators.js' module for core-logic.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/custom-technical-indicators.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"text/javascript\" src=\"https://code.highcharts.com/stock/indicators/indicators.js\"></script>\n\nHighcharts.seriesType(\n  'linearregression',\n  'sma',\n  {\n    name: 'Linear Regression',\n    params: {} // linear regression doesn’t need params\n  },\n  {\n    getValues: function (series, params) {\n      return this.getLinearRegression(series.xData, series.yData);\n    },\n    getLinearRegression: getLinearRegression\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Loading and Parsing XML Data with jQuery for Highcharts\nDESCRIPTION: This JavaScript snippet uses jQuery's `$.get` method to load XML data, parse it using jQuery's XML parsing capabilities, and populate the Highcharts chart options.  It extracts categories and series data from the XML structure before creating the chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/custom-preprocessing.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Load the data from the XML file \n$.get('data.xml', function(xml) {\n    \n    // Split the lines\n    var $xml = $(xml);\n\n    // push categories\n    $xml.find('categories item').each(function(i, category) {\n        options.xAxis.categories.push($(category).text());\n    });\n\n    // push series\n    $xml.find('series').each(function(i, series) {\n\n        var seriesOptions = {\n            name: $(series).find('name').text(),\n            data: []\n        };\n\n        // push data points\n        $(series).find('data point').each(function(i, point) {\n            seriesOptions.data.push(\n                parseInt($(point).text())\n            );\n        });\n\n        // add it to the options\n        options.series.push(seriesOptions);\n    });\n\n    var chart = new Highcharts.Chart(options);\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Datetime Data with Irregular Intervals in Highcharts using PHP\nDESCRIPTION: Shows how to handle datetime data with irregular intervals by creating point arrays that include both x and y values. Includes conversion from Unix timestamp to JavaScript time by multiplying by 1000.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/data-from-a-database.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nwhile ($row = mysql_fetch_array($result)) {\n   extract $row;\n   $datetime *= 1000; // convert from Unix timestamp to JavaScript time\n   $data[] = \"[$datetime, $value]\";\n}\n?>\nvar chart = new Highcharts.Chart({\n      chart: {\n         renderTo: 'container'\n      },\n      series: [{\n         data: [<?php echo join($data, ',') ?>]\n      }]\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Map Topology to Chart Configuration in JavaScript\nDESCRIPTION: Shows how to set the map topology as the default map for all series in a Highcharts configuration using the chart.map property.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/map-collection.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchart: {\n    map: topology,\n    ...\n```\n\n----------------------------------------\n\nTITLE: Customizing Bell Curve Intervals and Points in Highcharts\nDESCRIPTION: This snippet shows how to customize the bell curve by setting the number of intervals and points per interval. It demonstrates setting 4 intervals and 5 points per interval.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/bell-curve-series.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    type: 'bellcurve',\n    intervals: 4,\n    pointsInInterval: 5\n    ...\n}]\n```\n\n----------------------------------------\n\nTITLE: Grouping All Points in Highcharts Stock JS\nDESCRIPTION: This snippet demonstrates how to group all data points in a Highcharts Stock chart by setting the 'groupAll' property to true. This feature is useful for aggregating data from beyond the visible range of the chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/data-grouping.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighcharts.stockChart('container', {\\n  series: [{\\n    dataGrouping:{\\n      groupAll: true\\n    },\\n    data: [...]\\n  }]\\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Pareto Series to Highcharts\nDESCRIPTION: This snippet demonstrates how to add a Pareto series to the chart. It specifies the series type as 'pareto', sets the yAxis index, zIndex for layering, and references the base column series.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/pareto-chart.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    type: 'pareto',\n    yAxis: 1, // number of declared yAxis\n    zIndex: 10,\n    baseSeries: 1 // index of column series\n}, {\n    type: 'column',\n    zIndex: 2,\n        data: [755, 222, 151, 86, 72, 51, 36, 10]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating DataTable from DataPool - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a DataTable from a data pool using a CSV connector. The DataPool is the primary entry point for data handling in Highcharts Dashboards.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-table.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nDashboards.board('container', {\n    dataPool: {\n        connectors: [{\n            type: 'CSV',\n            id: 'my-connector',\n            options: {\n                csvURL: 'https://example.com/data.csv'\n            }\n        }]\n        ...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Morningstar TimeSeriesConnector for Price Data in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a TimeSeriesConnector instance configured to fetch price time series data for a specific security. It requires the Morningstar API environment configuration and specifies 'Price' as the series type.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/morningstar/time-series/price.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst priceConnector = new HighchartsConnectors.Morningstar.TimeSeriesConnector({\n    postman: {\n        environmentJSON: postmanJSON\n    },\n    series: {\n        type: 'Price'\n    },\n    securities: [{\n        id: 'F0GBR04S23',\n        idType: 'MSID'\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal Axis for Highcharts Gantt\nDESCRIPTION: This snippet demonstrates how to set the `tickInterval` for the horizontal axes of a Gantt chart using Highcharts. It includes setting the interval for both the daily and weekly representations on the axis. Dependencies include Highcharts Gantt with proper configuration of the `xAxis` properties like `labels` and `grid`. Inputs involve screen size adjustments, and outputs are the adaptable axis intervals displayed as days and weeks. Ensure Highcharts library is loaded to execute this configuration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/gantt/gantt-axis-grid.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nxAxis: [{\n    labels: {\n      format: '{value:%w}' // day of the week\n    },\n    grid: { // default setting\n      enabled: true\n    }\n    tickInterval: 1000 * 60 * 60 * 24, // Day\n  }, {\n    labels: {\n      format: '{value:%W}'\n    },\n    tickInterval: 1000 * 60 * 60 * 24 * 7 // week\n  }],\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts and Grid packages\nDESCRIPTION: This TypeScript code imports the Highcharts library, the Dashboards library, and the Grid library. It then connects Highcharts and Grid as plugins to Dashboards, enabling the usage of Highcharts charts and data grids within the dashboard.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/wrappers/dashboards-with-angular.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"import Highcharts from 'highcharts/es-modules/masters/highcharts.src.js';\nimport Dashboards from '@highcharts/dashboards/es-modules/masters/dashboards.src.js';\nimport Grid from '@highcharts/dashboards/es-modules/masters/datagrid.src.js';\n\nDashboards.HighchartsPlugin.custom.connectHighcharts(Highcharts);\nDashboards.GridPlugin.custom.connectGrid(Grid);\nDashboards.PluginHandler.addPlugin(Dashboards.HighchartsPlugin);\nDashboards.PluginHandler.addPlugin(Dashboards.GridPlugin);\n\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Click-to-Add-Point Functionality in Highcharts\nDESCRIPTION: This code snippet shows how to set up a Highcharts chart with the ability to add new points by clicking. It uses the chart.events.click option to handle mouse clicks and the series.addPoint method to add new data points to the series.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/dynamic-click-to-add/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart: {\n    events: {\n        click: function(e) {\n            // Find the clicked values and the series\n            var x = Math.round(e.xAxis[0].value),\n                y = Math.round(e.yAxis[0].value),\n                series = this.series[0];\n\n            // Add the point\n            series.addPoint([x, y]);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Highcharts Renko Series in JavaScript\nDESCRIPTION: This code snippet demonstrates the basic configuration for implementing a Renko series chart using Highcharts. Key dependencies include the 'highstock.js' package and the 'renko' module. It features a simple setup with the chart type specified as 'renko', highlighting how to input the data series for price visualization. Ensure the necessary libraries are loaded before executing this configuration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/renko.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.stockChart('container', {\n    chart: {\n        type: 'renko'\n    },\n\n    series: [{\n        name: 'Price data',\n        data: ...  // Array of price data\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Component with Predefined Sync Configuration\nDESCRIPTION: This JavaScript class demonstrates how to define a custom component with predefined synchronization configuration. The class includes default sync options and pairs, and registers sync events post-render.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/synchronize-components.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass CustomComponent extends Component {\n    static predefinedSyncConfig = {\n        defaultSyncOptions: {\n            customSync: {\n                sampleOption: true\n            }\n        },\n        defaultSyncPairs: {\n            customSync: {\n                emitter: function() {\n                    ...\n                },\n                handler: function() {\n                    ...\n                }\n            }\n        }\n    };\n\n    constructor(cell, options) {\n        super(cell, options);\n        return this;\n    }\n\n    render() {\n        super.render();\n        this.sync.start();\n        return this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Math Modifier Example\nDESCRIPTION: This snippet demonstrates the usage of the Math modifier in Highcharts Dashboards.  The Math modifier allows performing complex mathematical calculations and adding new columns based on existing ones. It uses spreadsheet-like formulas to define the calculations.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-modifiers.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndataModifier: {\n    type: 'Math',\n    columnFormulas: [{\n        column: 'USD',\n        formula: 'B1*C1' // Multiply EUR (B1) with the rate (C1)\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Candlestick Colors\nDESCRIPTION: This code snippet demonstrates how to customize the colors of candlestick charts in Highcharts. It allows users to define the colors for the candle body and wicks based on the price movement. The snippet requires the Highcharts library to be included in the project.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/candlestick-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    plotOptions: {\n        candlestick: {\n            color: 'pink',\n            lineColor: 'red',\n            upColor: 'lightgreen',\n            upLineColor: 'green'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts and Network Graph Module in HTML\nDESCRIPTION: This snippet shows how to include the Highcharts library and the Network Graph module in an HTML file. These scripts are necessary for creating network graphs.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/network-graph.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n<script src=\"https://code.highcharts.com/modules/networkgraph.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Calculating Linear Regression with JavaScript Function\nDESCRIPTION: Implements getLinearRegression to calculate regression points based on xData and yData, using formulas for the slope and intercept. Generates xData, yData, and values arrays for the linear regression series.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/custom-technical-indicators.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getLinearRegression(xData, yData) {\n  var sumX = (xValLength - 1) * xValLength / 2,\n      sumY = 0,\n      sumXY = 0,\n      sumX2 = ((xValLength - 1) * (xValLength) * (2 * xValLength - 1)) / 6,\n      linearData = [],\n      linearXData = [],\n      linearYData = [],\n      n = xData.length,\n      alpha, beta, i, x, y;\n\n  // Get sums:\n  for (i = 0; i < n; i++) {\n    y = yData[i];\n    sumY += y;\n    sumXY += i * y;\n  }\n\n  // Get slope and offset:\n  alpha = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n  if (isNaN(alpha)) {\n    alpha = 0;\n  }\n  beta = (sumY - alpha * sumX)/ n;\n\n  // Calculate linear regression:\n  for (i = 0; i < n; i++) {\n    y = alpha * i + beta;\n\n    // Prepare arrays required for getValues() method\n    linearData[i] = [xData[i], y];\n    linearXData[i] = xData[i];\n    linearYData[i] = y;\n  }\n\n  return {\n    xData: linearXData,\n    yData: linearYData,\n    values: linearData\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Zoning by Value in Highcharts\nDESCRIPTION: This code snippet demonstrates zoning by y value. It sets different colors for different value ranges. Values below 0 will have color '#f7a35c', values between 0 and 10 will have color '#7cb5ec', and values above 10 will have color '#90ed7d'.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/series.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nzones: [{\n    value: 0,\n    color: '#f7a35c'\n}, {\n    value: 10,\n    color: '#7cb5ec'\n}, {\n    color: '#90ed7d'\n}]\n```\n\n----------------------------------------\n\nTITLE: KPI Component with Chart Options\nDESCRIPTION: This JavaScript code configures a KPI component with chart options within a Highcharts Dashboard. It defines a layout with a KPI component that includes a chart with sample data.  The `linkedValueTo` property is disabled to prevent automatic synchronization between the KPI value and chart data.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/kpi-component.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nDashboards.board('container', {\n    gui: {\n        layouts: [{\n            id: 'layout-1',\n            rows: [{\n                cells: [{\n                    id: 'dashboard-col-0'\n                }]\n            }]\n        }]\n    },\n    components: [{\n        renderTo: 'dashboard-col-0',\n        title: 'My KPI',\n        type: 'KPI',\n        value: 10,\n        linkedValueTo: {\n            enabled: false\n        },\n        chartOptions: {\n        series: [{\n            data: [734, 244, 685, 250, 920, 320, 200, 150]\n        }]\n        }\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Point Description Threshold in Highcharts\nDESCRIPTION: This snippet shows how to configure the `pointDescriptionEnabledThreshold` option to control whether individual data points in a large series are exposed to screen reader users. By setting a threshold, you can prevent overwhelming the user with too much detail when dealing with large datasets. The accessibility.series.pointDescriptionEnabledThreshold option defines the limit.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/configure-the-accessibility-module.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n    accessibility: {\n        series: {\n            pointDescriptionEnabledThreshold: 1\n        }\n    },\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Map Data for Individual Series in JavaScript\nDESCRIPTION: Demonstrates how to apply different maps for different series in Highcharts Maps using the mapData property in the series configuration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/map-collection.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    mapData: topology,\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Series Data for Stream Graph in JavaScript\nDESCRIPTION: This snippet demonstrates how to structure series data for a stream graph in Highcharts. Each series represents a band in the graph, with data points defined as Y values. The series are stacked against each other to form the stream graph.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/stream-graph.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    \"name\": \"Finland\",\n    \"data\": [\n        0, 11, 4, 3, 6, 0, 0, 6\n    ]\n}, {\n    \"name\": \"Austria\",\n    \"data\": [\n        0, 3, 4, 2, 4, 0, 0, 8, 8\n    ]\n}, {\n    \"name\": \"Sweden\",\n    \"data\": [\n        0, 2, 5, 3, 7, 0, 0, 10, 4\n    ]\n}]\n```\n\n----------------------------------------\n\nTITLE: Advanced Pitch Mapping with Note Names in Highcharts\nDESCRIPTION: Example of pitch mapping using human-readable note names and defining pitch ranges with min/max values.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/advanced-mapping.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmapping: {\n    volume: 0.7,\n    pitch: {\n        mapTo: 'y',\n        min: 'c3',\n        max: 'g7'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CSV Data Structure for Highcharts\nDESCRIPTION: This CSV file format example contains data suitable for a Highcharts column chart, with the first row defining categories and subsequent rows representing data series and their respective values. The first column in each row contains data series names.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/custom-preprocessing.md#2025-04-16_snippet_0\n\nLANGUAGE: CSV\nCODE:\n```\n\"Categories,Apples,Pears,Oranges,Bananas\nJohn,8,4,6,5\nJane,3,4,2,3\nJoe,86,76,79,77\nJanet,3,16,13,15\"\n```\n\n----------------------------------------\n\nTITLE: Defining Box Plot Data Point as Object Literal in JavaScript\nDESCRIPTION: Demonstrates how to define a single data point for a box plot series using an object literal in JavaScript. The x-value is optional and represents a date, while the other values represent the five-number summary.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/box-plot-series.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{ x: Date.UTC(2013, 1, 7), low: 0, q1: 1, median: 2, q3: 3, high: 4 }\n```\n\n----------------------------------------\n\nTITLE: Defining Wordcloud Data Structure in JavaScript\nDESCRIPTION: This snippet defines a basic structure for wordcloud series in Highcharts, where each point in the data array must have a `name` and a `weight`. The `name` represents the text to be displayed, while the `weight` influences its size and rendering priority on the visualization.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/word-cloud-series.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\ndata: [{\n    name: 'Lorem',\n    weight: 3\n}, {\n    name: 'Ipsum',\n    weight: 2\n}, {\n    name: 'Dolor',\n    weight: 1\n}]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Histogram Chart in Highcharts\nDESCRIPTION: This snippet demonstrates how to create a basic histogram chart in Highcharts. It shows the series configuration, including setting the type to histogram and specifying the base series.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/histogram-series.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    type: histogram,\n    xAxis: 1,\n    yAxis: 1,\n    baseSeries: 1\n}, {\n    data: [3.5, 3, 3.2, 3.1, 3.6, 3.9, 3.4]\n}]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Highcharts Audio Chart\nDESCRIPTION: JavaScript code to initialize a basic Highcharts chart with two data series that can be sonified. This creates the visual representation of the data that will also be played as audio.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/getting-started.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst chart = Highcharts.chart('container', {\n    title: {\n        text: 'Audio chart'\n    },\n    series: [{\n        data: [4, 5, 6, 5, 7, 9, 11, 13]\n    }, {\n        data: [1, 3, 4, 2]\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Treegraph Links in Highcharts\nDESCRIPTION: This snippet demonstrates how to configure link properties for all links in a treegraph series. It sets the link type to 'curved' and specifies a line width.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/treegraph-chart.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    type: 'treegraph',\n    link: {\n        type: 'curved',\n        lineWidth: 3\n    },\n    data: [{\n        name: 'I have children',\n        id: 'id-1'\n    }, {\n        name: 'I am a child',\n        parent: 'id-1'\n    }, {\n        name: 'I am a smaller child',\n        parent: 'id-1'\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Map Bubble Series in Highcharts\nDESCRIPTION: This snippet configures a Map Bubble series in a Highcharts chart. It sets the series type to 'mapbubble', establishes the joinBy properties to link the data with map points, and provides the dataset to be visualized. Each data point includes geographical and numerical properties.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/mapbubble-series.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nseries: [{\n    type: 'mapbubble',\n    name: 'Population 2016',\n    joinBy: ['iso-a3', 'code3'],\n    data: [\n        { code3: 'ABW', z: 105, code: 'AW' },\n        { code3: 'AFG', z: 34656, code: 'AF' },\n        ...\n    ],\n    ...\n}]\n```\n\n----------------------------------------\n\nTITLE: Embedding Highcharts Pie Chart Demo in HTML\nDESCRIPTION: This snippet demonstrates how to embed an interactive Highcharts pie chart demo using an iframe. The iframe is set to full width, 480px height, and allows fullscreen mode.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/pie-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe style=\"width: 100%; height: 480px; border: none;\" src=\"https://www.highcharts.com/samples/embed/highcharts/demo/pie-chart\" allow=\"fullscreen\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Language Module in HTML\nDESCRIPTION: This snippet demonstrates how to include a Highcharts language module alongside the main Highcharts script in HTML. It uses the Norwegian Bokmål language module as an example.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/internationalization.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n<!-- Other Highcharts modules -->\n\n<script src=\"https://code.highcharts.com/i18n/nb-NO.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Loading Additional Highcharts Modules\nDESCRIPTION: This snippet explains how to include additional Highcharts modules necessary for using predefined component types within Highcharts Dashboards, either through script tags or npm imports.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/installation.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n../highcharts.js\n../dashboards/dashboards.js\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Highcharts from 'highcharts';\nimport * as Dashboards from '@highcharts/dashboards';\n```\n\n----------------------------------------\n\nTITLE: Declaring Synchronization in JavaScript\nDESCRIPTION: This snippet demonstrates how to declare basic synchronization options, including the crossfilter sync with default enabled settings. It provides a way to enable extra options like affectNavigator.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/synchronize-components.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsync: {\n    crossfilter: true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Data Sorting in Highcharts\nDESCRIPTION: This snippet demonstrates how to enable basic data sorting in a Highcharts series using the default 'y' sort key.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/data-sorting.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    dataSorting: {\n        enabled: true\n    },\n    data: [5, 12, 4, 10]\n}]\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Component with AST in JavaScript\nDESCRIPTION: This code snippet demonstrates how to define an HTML component using an Abstract Syntax Tree (AST) style in Highcharts Dashboards. It specifies the 'renderTo' attribute to define target cell and element tags, such as 'img' with specific attributes. This approach allows defining HTML in a nested tree structure.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/types-of-components.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    type: 'HTML',\n    renderTo: 'dashboard-1',\n    elements: [{\n        tagName: 'img',\n        attributes: {\n            src: 'https://www.highcharts.com/samples/graphics/stock-dark.svg'\n        }\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Gantt as a Module\nDESCRIPTION: This snippet demonstrates how to load Highcharts Gantt as a module alongside the main Highcharts library. This approach is used when a project needs both regular charts and Gantt charts.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/gantt/getting-started-gantt.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n<script src=\"https://code.highcharts.com/gantt/modules/gantt.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Series Data with Numerical Values in Highcharts\nDESCRIPTION: This code shows how to define series data as a simple array of numerical values in Highcharts. These values are interpreted as 'y' values, with 'x' values automatically calculated based on the axis settings or pointStart and pointInterval options.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/series.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndata: [0, 5, 3, 5]\n```\n\n----------------------------------------\n\nTITLE: Handling afterSetExtremes Event in Highcharts\nDESCRIPTION: This snippet demonstrates how to utilize the afterSetExtremes event in Highcharts to manage the new position of the selector when the user adjusts the timeline. This is essential for optimizing data loading and rendering only the relevant points for the specified time span.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/stock/demo/lazy-loading/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example of using the afterSetExtremes event\nxAxis: {\n    events: {\n        afterSetExtremes: function (e) {\n            // Logic to load and visualize relevant data\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Grouping in Highcharts Stock\nDESCRIPTION: This code snippet enables data grouping for a series in a Highcharts Stock chart. Data grouping automatically combines multiple data points into a single point for improved readability, especially when zoomed out. The `update` method of the series object is used to set the `groupAll` property of the `dataGrouping` object to `true`.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/understanding-highcharts-stock.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nchart.series[0].update({\n    dataGrouping: {\n        groupAll: true\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading and Using Highcharts Maps in Node.js\nDESCRIPTION: This JavaScript snippet demonstrates how to load a map and utilize it within the Highcharts Maps framework. It requires the Highcharts library for maps and a map file from the Highcharts Map Collection. The map is used to create a chart in a specified HTML container.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/map-collection.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst Highcharts = require('highcharts/highmaps.js'),\n    map = require('@highcharts/map-collection/custom/world.topo.json');\n\nHighcharts.mapChart('container', {\n    chart: {\n        map\n    },\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Pictorial Series with SVG Path in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a pictorial series with an SVG path definition and stacking options.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/pictorial.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nplotOptions: {\n  series: {\n    stacking: 'percent',\n    paths: [{\n      definition: 'M480.15 0.510986V0.531986C316.002 0.531986 197.223 56.655 119.105 139.78C40.987 222.905 3.50699 332.801 0.884992 440.062C-1.74001 547.459 36.194 644.769 79.287 725.354C122.38 805.938 170.742 870.203 188.861 909.922C205.994 947.479 203.626 990.232 206.788 1033.17C209.95 1076.11 219.126 1119.48 260.261 1156.26C260.888 1156.83 261.679 1157.18 262.52 1157.27C262.639 1157.28 262.75 1157.28 262.87 1157.29L262.747 1173.69L274.021 1200.24C275.812 1214.45 275.053 1222.2 273.364 1229.45C261.44 1238.59 250.866 1253.57 283.323 1261.97V1283.88C249.425 1299.28 261.103 1315.14 283.323 1327.03L281.331 1342.96C249.673 1354.72 261.6 1377.5 282.645 1388.76V1403.36C256.094 1414.86 256.771 1436.12 283.323 1451.16V1473.73L349.035 1535.46L396.163 1582.58L397.498 1600.51H565.433V1585.91L619.193 1535.46C631.786 1531.75 660.881 1505.66 698.191 1468.41L702.729 1451.49L686.753 1440.38L687.226 1426.38C714.969 1420.61 718.256 1388.06 687.226 1382.78V1366.87C725.039 1359.03 715.965 1331.13 690.532 1325.04V1311.77C735.92 1292.94 715.774 1272.19 695.193 1267.29V1245.38C721.584 1240.94 721.209 1210.5 702.688 1201.19L711.107 1183.45L711.682 1162.54C713.198 1162.5 714.725 1162.46 716.241 1162.38C717.056 1162.36 717.845 1162.09 718.5 1161.6C754.295 1134.83 762.81 1094.37 765.299 1051.47C767.789 1008.58 764.577 962.629 775.69 923.173C788.878 876.344 833.216 822.264 875.654 750.885C918.093 679.505 958.46 590.459 963.133 472.719C967.812 354.836 929.374 236.776 848.507 148.143C767.638 59.511 644.344 0.516987 480.15 0.516987V0.510986Z'\n    }]\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Component Styled Mode - JavaScript\nDESCRIPTION: This snippet demonstrates how to enable styled mode for a Highcharts component by setting 'styledMode' to true in the configuration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/style-by-css.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    type: 'Highcharts',\n    renderTo: 'chart-container',\n    chartOptions: {\n        chart: {\n            styledMode: true\n        }\n        ...\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering US States Highcharts Map\nDESCRIPTION: Creates a detailed map visualization of US states with custom map data and data labels, optimized for displaying smaller state areas\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/maps/demo/us-data-labels/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Example Highcharts map configuration would typically go here\n```\n\n----------------------------------------\n\nTITLE: Configuring Arc Diagram Series in JavaScript with Highcharts\nDESCRIPTION: This snippet demonstrates how to set up an arc diagram series in Highcharts. It shows the data structure using the 'keys' option to define relationships between nodes, and includes arc diagram-specific options like 'linkWeight' and 'centeredLinks'.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/arc-diagram.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    keys: ['from', 'to', 'weight'],\n    type: 'arcdiagram',\n    name: 'Flights',\n    linkWeight: 1,\n    centeredLinks: true,\n    data: [\n        ['Bergen', 'Cracow', 1],\n        ['Cracow', 'Frankfurt', 2],\n        ['Bergen', 'Frankfurt', 1],\n        ['Cracow', 'Chicago', 1]\n    ]\n}]\n```\n\n----------------------------------------\n\nTITLE: Setting Global Font Family in Highcharts\nDESCRIPTION: Sets a global font family for all chart elements using the chart.style option. This applies the serif font family to all text elements in Highcharts charts.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/design-and-style.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.setOptions({\n    chart: {\n        style: {\n            fontFamily: 'serif'\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Packed Bubble Chart in JavaScript\nDESCRIPTION: Creates a simple packed bubble chart using Highcharts. The chart type is set to 'packedbubble' and the series data is provided as an array of bubble sizes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/packed-bubble.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighcharts.chart('container', {\n    chart: {\n        type: 'packedbubble'\n    },\n    series: [{\n        data: [50, 12, 33, 45, 60] // sizes of the bubble\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing getValues Method for Technical Indicator\nDESCRIPTION: Defines the getValues method that accepts series and params arguments, performing calculations and returning them as an object. Includes xData, yData, and values arrays. This method is essential for defining the structure of a technical indicator.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/custom-technical-indicators.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getValues(series, params) {\n  // calculations\n  ...\n  // end of calculations\n  return {\n    xData: [...], // array of x-values\n    yData: [...] // array of y-values\n    values: [...], // array of points\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Type for Angular Gauge in Highcharts\nDESCRIPTION: This snippet demonstrates how to set the chart type to 'gauge' in Highcharts configuration. This is the fundamental step in creating an angular gauge chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/angular-gauges.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nchart: {\n    type: 'gauge'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Options for Styled Mode in Highcharts\nDESCRIPTION: This JavaScript snippet demonstrates how to set the `styledMode` option to `true` for a specific Highcharts component, enabling it to follow the light or dark theme. This configuration allows individual chart components to adjust their styles based on the selected theme.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/light-dark-theme.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: 'Highcharts',\n    renderTo: 'chart-container',\n    chartOptions: {\n        chart: {\n            styledMode: true\n        }\n        ...\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Data Labels to Column Series using Compositions\nDESCRIPTION: Code example demonstrating how to enable data labels for column series charts using the composition pattern in Highcharts ES6 modules.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation-with-esm.md#2025-04-16_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport Chart from 'highcharts/es-modules/Core/Chart/Chart.js';\nimport ColumnSeries from 'highcharts/es-modules/Series/Column/ColumnSeries.js';\nimport ColumnDataLabel from 'highcharts/es-modules/Series/Column/ColumnDataLabel.js';\n\nColumnDataLabel.compose(ColumnSeries);\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Data from HTML Table\nDESCRIPTION: JavaScript code showing how to initialize a Highcharts chart using data from an HTML table. Demonstrates the simple configuration needed to reference table data by ID.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/data-module.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n    data: {\n        table: 'datatable'\n    },\n    title: {\n        text: 'Data extracted from a HTML table in the page'\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing JSONP Request with Highcharts\nDESCRIPTION: Client-side JavaScript code using jQuery to fetch JSONP data and initialize a Highcharts spline chart. Demonstrates how to configure chart options and populate series data from the JSONP response.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/getting-data-across-domains-jsonp.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$(document).ready(function() {\n    var options = {\n        chart: {\n            renderTo: 'container',\n            type: 'spline'\n        },\n        series: [{}]\n    };\n    \n    var url =  \"http://url-to-your-remote-server/jsonp.php?callback=?\";\n    $.getJSON(url,  function(data) {\n        options.series[0].data = data;\n        var chart = new Highcharts.Chart(options);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Theme for Highcharts DataGrid using CSS Variables\nDESCRIPTION: Demonstrates how to create a custom theme for Highcharts DataGrid using CSS custom properties. Sets variables for font sizes, colors, backgrounds, padding, and hover states. Uses a custom variable (--my-hover-color) to maintain consistency across hover effects.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/theming/theming-variables.md#2025-04-16_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.my-theme {\n  --my-hover-color: #ff0000;\n\n  --hcg-font-size: 15px;\n  --hcg-color: #666666;\n  --hcg-header-color: #ffffff;\n  --hcg-background: #ffffff;\n  --hcg-padding: 10px;\n  --hcg-header-background: #002933;\n  --hcg-row-even-background: #e9faff;\n  --hcg-cell-hovered-header-background: #1a3f48;\n  --hcg-cell-hovered-border-width: 1px;\n  --hcg-cell-hovered-column-border-width: 1px;\n  --hcg-cell-hovered-column-border-color: #f2f2f2;\n  --hcg-header-hovered-background: #1a3f48;\n  --hcg-cell-hovered-border-color: var(--my-hover-color);\n  --hcg-cell-hovered-header-color: var(--my-hover-color);\n  --hcg-cell-hovered-row-color: var(--my-hover-color);\n  --hcg-cell-hovered-column-color: var(--my-hover-color);\n  --hcg-header-hovered-color: var(--my-hover-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Points in Highcharts\nDESCRIPTION: This code retrieves an array of the selected points in the chart. The getSelectedPoints() method returns an array of point objects that are currently selected by the user.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/series.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar selectedPoints = chart.getSelectedPoints();\n```\n\n----------------------------------------\n\nTITLE: Calculating Fibonacci Retracement Levels with JavaScript\nDESCRIPTION: This snippet calculates the Fibonacci retracement levels based on the provided start and end points (y1, y2) and an array of Fibonacci levels. It iterates through the levels array, calculates the retracement level for each Fibonacci ratio, and stores it in the retracementlevel variable.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/annotations-and-fibonacci-retracements.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst levels = [0, 0.236, 0.382, 0.5, 0.618, 0.786, 1],\n      diff = y2 - y1;\n\nconst retracementlevel = y2 - diff * level;\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts and Dashboards Modules\nDESCRIPTION: This JavaScript code imports the necessary Highcharts and Dashboards modules.  It also initializes and connects the Highcharts plugin to the Dashboards framework, making Highcharts charts available for use within dashboards.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/kpi-component.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Dashboards from '@highcharts/dashboards';\nimport * as Highcharts from 'highcharts';\nimport LayoutModule from '@highcharts/dashboards/modules/layout';\n\nLayoutModule(Dashboards);\n\nDashboards.HighchartsPlugin.custom.connectHighcharts(Highcharts);\nDashboards.PluginHandler.addPlugin(Dashboards.HighchartsPlugin);\n```\n\n----------------------------------------\n\nTITLE: Customizing Point Color in Highcharts\nDESCRIPTION: This code snippet demonstrates how to customize the color of a specific data point within a series. By including a 'color' property in the point's configuration, you can override the default series color for that particular point.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/series.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5,\n            { y: 216.4, color: '#BF0B23'}, 194.1, 95.6, 54.4]\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume-Based Technical Indicator in Highcharts\nDESCRIPTION: Shows how to set up a Money Flow Index (MFI) indicator that requires both price and volume data. The configuration includes a main price series, volume series, and the MFI indicator with proper volume series binding through params.volumeSeriesID.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/technical-indicator-series.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n  id: 'main-series',\n  data: [ … ]\n}, {\n  id: 'volume-series',\n  yAxis: 1,\n  data: [ … ]\n}, {\n  type: 'mfi',\n  linkedTo: 'main-series',\n  yAxis: 2,\n  params: {\n    volumeSeriesID: 'volume-series'\n  }\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Treemap Clustering in Highcharts\nDESCRIPTION: This code snippet demonstrates how to configure treemap clustering in Highcharts. The `cluster` option is enabled and `pixelHeight` and `pixelWidth` are set to define the minimum size for areas before they are grouped. The `type` is set to 'treemap'.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/treemap.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Highcharts.Chart({\n    ...\n    series: [{\n        ...\n        type: \"treemap\",\n        cluster: {\n            enabled: true,\n            pixelHeight: 20,\n            pixelWidth: 10\n        }\n        ...\n    }],\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TiledWebMap with Custom URL Template\nDESCRIPTION: This snippet demonstrates how to configure a tiled web map using a custom URL template instead of a predefined provider. The URL must include variables for {x}, {y}, and {z}/{zoom}.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/tiledwebmap.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nseries: [{\n    type: 'tiledwebmap',\n    url: 'https://yourcustomprovider.com/{x}/{y}/{z}.png'\n}]\n```\n\n----------------------------------------\n\nTITLE: Creating a Pie Chart with ES6 Modules\nDESCRIPTION: Implementation example for a Highcharts pie chart using ES6 modules. This shows an alternative initialization pattern where the series is created separately.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation-with-esm.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// mychart.js\nimport Chart from 'highcharts/es-modules/Core/Chart/Chart.js';\nimport PieSeries from 'highcharts/es-modules/Series/Pie/PieSeries.js';\n\n// Example to create a simple pie chart in a div#container:\nconst myChart = new Chart('container');\nconst mySeries = new PieSeries();\nmySeries.init(myChart, { data: [1, 2, 3] });\n```\n\n----------------------------------------\n\nTITLE: Enabling Parallel Coordinates Chart in Highcharts\nDESCRIPTION: This snippet shows how to enable parallel coordinates chart by setting the 'parallelCoordinates' property to true in the chart configuration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/parallel-coordinates-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart: {\n  parallelCoordinates: true\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Word Cloud Module in Highcharts\nDESCRIPTION: This snippet shows how to import the word cloud module in Highcharts. The module is required to create word cloud charts, which visualize text data by sizing words based on their frequency.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/wordcloud/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/module/wordcloud.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Headers in Highcharts Grid\nDESCRIPTION: Configuration options for customizing column headers in a Highcharts Grid, including custom class names, formatting, and column visibility. The header property supports templating with references to column IDs.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/columns.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  columns: [\n    {\n      id: \"product\",\n      header: {\n        className: \"custom_header_class\",\n        format: \"Fruit ({id})\"\n      },\n      enabled: false,\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Force-Approach Algorithm with Split Series\nDESCRIPTION: Demonstrates the configuration for a force-approach algorithm in a packed bubble chart with split series and additional options for interaction and dragging.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/packed-bubble.md#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nplotOptions: {\n    packedbubble: {\n        useSimulation: true,\n        layoutAlgorithm: {\n            splitSeries: true,\n            seriesInteraction: false,\n            dragBetweenSeries: true,\n            parentNodeLimit: true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Highcharts Chart with SecurityDetailsConnector Data in JavaScript\nDESCRIPTION: Complete example showing how to load data using the SecurityDetailsConnector and create a Highcharts column chart. This snippet demonstrates initializing the connector, loading the data, and using it to populate a chart with trailing performance values.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/morningstar/security-details.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst securityDetailsConnector = new HighchartsConnectors.Morningstar.SecurityDetailsConnector({\n    postman: {\n        environmentJSON: postmanJSON\n    },\n    security: {\n        id: 'F0GBR050DD',\n        idType: 'MSID'\n    }\n});\n\nawait securityDetailsConnector.load();\n\nHighcharts.chart('container', {\n    title: {\n        text: 'Aviva Investors UK Listed Equity Unconstrained Fund 2 GBP Acc'\n    },\n    series: [{\n        type: 'column',\n        name: 'F0GBR050DD',\n        data: connector.table.getRowObjects().map(obj => [\n            obj.SecurityDetails_TrailingPerformance_TimePeriod,\n            obj.SecurityDetails_TrailingPerformance_Value\n        ])\n    }],\n    xAxis: {\n        type: 'category'\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Connector for Highcharts in JavaScript\nDESCRIPTION: This code snippet details configuring a Data Connector for a Highcharts component in a Highcharts Dashboard. The configuration uses a dataPool for connecting data and assigns data columns to chart series using columnAssignment. This allows data sharing across components within dashboards.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/types-of-components.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ndataPool: {\n    connectors: [{\n        id: 'micro-element',\n        type: 'JSON',\n        options: {\n            firstRowAsNames: false,\n            columnNames: ['Food', 'Vitamin A',  'Iron'],\n            data: [\n                ['Beef Liver', 6421, 6.5],\n                ['Lamb Liver', 2122, 6.5],\n                ['Cod Liver Oil', 1350, 0.9],\n                ['Mackerel', 388, 1],\n                ['Tuna', 214, 0.6]\n            ]\n        }\n    }]\n},\ncomponents: [\n{\n    renderTo: 'dashboard-col-0',\n    type: 'Highcharts',\n    connector: {\n        id: 'micro-element',\n        columnAssignment: [{\n            seriesId: 'Vitamin A',\n            data: ['Food', 'Vitamin A']\n        }]\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Binding Stochastic Indicator to Y-Axis in Highcharts\nDESCRIPTION: Demonstrates how to bind a stochastic indicator to a specific y-axis while linking it to a main data series. The indicator is set to use the second y-axis (index 1) and references the main series through the linkedTo property.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/technical-indicator-series.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n  id: 'main-series',\n  data: [ … ]\n}, {\n  type: 'stochastic',\n  linkedTo: 'main-series',\n  yAxis: 1\n}]\n```\n\n----------------------------------------\n\nTITLE: Calculating Heikin Ashi Points with TypeScript\nDESCRIPTION: This code snippet computes new Heikin Ashi points based on the modified formula that averages previous and current price values. The new open is the average of the previous open and previous close, the new close is the average of open, high, low, and close. The new high and low are determined based on the calculated values, ensuring accurate representation of price movements.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/heikinashi.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnewOpen = (previousOpen + previousClose) / 2;\nnewClose = (open + high + low + close) / 4;\nnewHigh = Math.max(high, newClose, newOpen);\nnewClose = Math.min(low, newClose, newOpen);\n```\n\n----------------------------------------\n\nTITLE: KPI Component with Data Connector\nDESCRIPTION: This JavaScript code configures a KPI component with a data connector in a Highcharts Dashboard. It sets up a CSV data connector and links it to the KPI component. The KPI value is dynamically updated based on the last value in the specified CSV column.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/kpi-component.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nDashboards.board('container', {\n    dataPool: {\n        connectors: [{\n            id: 'value',\n            type: 'CSV',\n            options: {\n                csv: `Date,Value\n                2019-01-01,100\n                2019-01-02,200\n                2019-01-03,300\n                2019-01-04,400`\n            }\n        }]\n    },\n    components: [{\n        renderTo: 'kpi',\n        type: 'KPI',\n        title: 'Last day\\'s value',\n        columnName: 'Value',\n        connector: {\n            id: 'value'\n        }\n    }],\n    gui: {\n        layouts: [{\n            rows: [{\n                cells: [{\n                    id: 'kpi'\n                }]\n            }]\n        }]\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertical Position in Range Selector\nDESCRIPTION: Demonstrates how to set vertical alignment and offset for range selector using verticalAlign, x, and y properties\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/range-selector.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrangeSelector: {\n\tverticalAlign: 'top',\n\tx: 0,\n\ty: 0\n},\n```\n\n----------------------------------------\n\nTITLE: Initializing a Gantt Chart with the ganttChart Constructor\nDESCRIPTION: This code shows how to initialize a Gantt chart using the Highcharts.ganttChart constructor. It takes three parameters: the container element ID, a configuration object for chart options, and an optional callback function.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/gantt/getting-started-gantt.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.ganttChart('container', {\n    title: { .. },\n    // other configuration options\n}, myCallback);\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Themes with Highcharts Grid API\nDESCRIPTION: Demonstrates how to apply a custom theme along with the default theme using the rendering.theme configuration option. This approach allows building upon the default styles.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/theming/theming.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n  rendering: {\n    theme: \"hcg-theme-default theme-custom\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Grouping in Highcharts Stock JS\nDESCRIPTION: This snippet initializes a Highcharts Stock chart with data grouping enabled, setting a pixel width for grouping. The configuration allows Highcharts to optimize rendering by defining how many data points can be grouped.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/data-grouping.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighcharts.stockChart('container', {\\n  series: [{\\n    dataGrouping: {\\n      groupPixelWidth: 5\\n    },\\n    data: [...]\\n  }]\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Sorting in Highcharts Grid\nDESCRIPTION: Configuration options for column sorting in Highcharts Grid, including enabling sortability and setting initial sort order. The sorting property controls whether users can sort by clicking headers and the default sort direction.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/columns.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  columns: [\n    {\n      id: \"weight\",\n      sorting: {\n        sortable: true,\n        order: \"desc\",\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts CSS from CDN using link tag\nDESCRIPTION: This snippet demonstrates how to load the Highcharts CSS file directly from the Highcharts CDN using a `<link>` tag. This is a simple way to include the default Highcharts styles in your project.  It's recommended to use version-specific URLs for production environments.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://code.highcharts.com/css/highcharts.css\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Radial Gradient in Highcharts\nDESCRIPTION: This snippet showcases how to define a radial gradient in Highcharts. The radial gradient requires specifying the center coordinates and radius along with the color stops similar to linear gradients.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/colors.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncolor: {\n    radialGradient: { cx: 0.5, cy: 0.5, r: 0.5 },\n    stops: [\n       [0, '#003399'],\n       [1, '#3366AA']\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Zoning by X Axis in Highcharts\nDESCRIPTION: This code snippet demonstrates zoning by x axis. It sets the dash style to 'dot' for values after x=8.  This is useful for styling estimated data differently.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/series.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nzoneAxis: 'x',\nzones: [{\n    value: 8\n}, {\n    dashStyle: 'dot'\n}]\n```\n\n----------------------------------------\n\nTITLE: Integrating HTML Table Data using HTMLTableConnector in JavaScript\nDESCRIPTION: Provides an example using an HTMLTableConnector to import data from an HTML table element into Highcharts Dashboards. It requires an HTML element ID present on the page. The connector loads data without needing a network request.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-pool-and-connectors.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function run() {\n    const connector = new DataConnector.types.HTMLTable({\n        dataTable: document.querySelector('#table');\n    });\n    await connector.load();\n}\nrun();\n```\n\n----------------------------------------\n\nTITLE: Adding Fibonacci Annotation in Highcharts - JavaScript\nDESCRIPTION: This snippet shows how to create a Fibonacci retracement annotation in Highcharts. It involves specifying the start and end points through the 'typeOptions' property. This requires the Highcharts library and the advanced annotations module.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/advanced-annotations.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nannotations: [{\n    type: 'fibonacci',\n    typeOptions: {\n        points: [{\n            x: 2,\n            y: 4\n        }, {\n            x: 10,\n            y: 6.5\n        }]\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Enabling 3D Perspective for Funnel Chart in Highcharts\nDESCRIPTION: This snippet demonstrates how to enable 3D perspective for a Funnel chart in Highcharts. It sets the chart type to 'funnel3d' and enables 3D options.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/funnel-3d.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  chart: {\n    type: 'funnel3d',\n    options3d: {\n      enabled: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Dashboard Layout - CSS (Container Queries)\nDESCRIPTION: This CSS code snippet utilizes container queries to create responsive design rules for dashboard cells. It allows for responsive flexibility based on the size of the container rather than the viewport.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/layout-description.md#2025-04-16_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* Create a containment context */\n#container {\n    container: dashboard / inline-size;\n}\n\n/* LARGE */\n@container dashboard (max-width: 1200px) {\n    #dashboard-cell-1 {\n        flex: 1 1 33.333%;\n    }\n}\n\n/* MEDIUM */\n@container dashboard (max-width: 992px) {\n    #dashboard-cell-1 {\n        flex: 1 1 50%;\n    }\n}\n\n/* SMALL */\n@container dashboard (max-width: 576px) {\n    #dashboard-cell-1 {\n        flex: 1 1 100%;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Linked Description for Highcharts - JavaScript\nDESCRIPTION: This snippet demonstrates how to link a text description of a chart using the accessible features of Highcharts. It shows how to provide a textual interpretation that enhances accessibility and clarifies the chart's content for all users.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/accessibility-module.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<figure>\n    <div id=\"chart-container\"></div>\n    <p class=\"highcharts-description\">The following chart demonstrates some accessibility features  of Highcharts, including use of the <code>linkedDescription</code> option.</p>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Configuring Straight Connector Shape in Highcharts Pie Chart\nDESCRIPTION: This snippet shows how to set the dataLabels.connectorShape option to 'straight' in a Highcharts pie chart. It also demonstrates the use of the crookDistance option, which affects the connector's path.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/pie-datalabels-alignment.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndataLabels: {\n    connectorShape: 'straight',\n    crookDistance: '70%'\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Z-axis Group Padding in 3D Column Charts\nDESCRIPTION: This snippet shows how to manipulate the spacing between columns on the Z-axis through the groupZPadding property within plotOptions in a 3D column chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/3d-charts.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nplotOptions.column.groupZPadding: Spacing between columns on the z-axis.\n```\n\n----------------------------------------\n\nTITLE: Initializing Morningstar Investment Screener Connector in JavaScript\nDESCRIPTION: This code initializes a new Morningstar Investment Screener connector with configuration for pagination, language, currency, filters, and data points to retrieve. It demonstrates how to set up filters for star ratings and specify which security data points to include in the results.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/morningstar/screeners/investment-screener.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst screenerConnector = new HighchartsConnectors.Morningstar.InvestmentScreenerConnector({\n    page: 1,\n    pageSize: 20,\n    languageId: 'en-GB',\n    currencyId: 'USD',\n    filters: [\n        {\n            dataPointId: 'StarRatingM255',\n            comparatorCode: 'IN',\n            value: 5\n        }\n    ],\n    securityDataPoints: [\n        'secId',\n        'tenforeId',\n        'name',\n        'closePrice',\n        'ongoingCharge',\n        'initialPurchase',\n        'maxFrontEndLoad',\n        'analystRatingScale',\n        'average12MonthCarbonRiskScore',\n        'investmentType',\n        'holdingTypeId',\n        'universe'\n    ],\n    universeIds: ['FOALL$$ALL'],\n    postman: {\n        environmentJSON: postmanJSON\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Editable Cells in Highcharts Grid Pro\nDESCRIPTION: This snippet demonstrates how to enable cell editing for all columns while making specific columns non-editable using the columnDefaults and columns configuration options.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/cell-editing.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncolumnDefaults: {\n    cells: {\n      editable: true,\n    },\n},\ncolumns: [\n  {\n    id: \"firstName\",\n    cells: {\n      editable: false,\n    },\n  },\n],\n```\n\n----------------------------------------\n\nTITLE: Enabling Range Selector in Highcharts Stock\nDESCRIPTION: This snippet demonstrates how to enable the range selector in a Highcharts Stock chart. The range selector allows users to quickly select a predefined range of data to display.  The `update` method of the chart object is used to set the `enabled` property of the `rangeSelector` to `true`.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/understanding-highcharts-stock.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nchart.update({\n    rangeSelector: {\n        enabled: true\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Data Grouping in Highcharts Stock JS\nDESCRIPTION: This snippet demonstrates how to disable data grouping in a Highcharts Stock chart. The example sets the 'enabled' property of data grouping to false, which means the chart will render all data points without grouping.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/data-grouping.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighcharts.stockChart('container', {\\n    series: [{\\n        dataGrouping: {\\n            enabled: false\\n        },\\n        data: [...]\\n    }]\\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts with AMD Modules (RequireJS)\nDESCRIPTION: This example demonstrates loading Highcharts along with exporting and accessibility modules from a CDN using RequireJS. It configures the RequireJS path to the Highcharts CDN and creates a simple chart with a single data series.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation-with-amd-commonjs.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <script src=\"require.js\"></script>\n        <script>\n            require.config({\n                packages: [{\n                    name: 'highcharts',\n                    main: 'highcharts'\n                }],\n                paths: {\n                    // Change this to your server if you do not wish to use our CDN.\n                    'highcharts': 'https://code.highcharts.com'\n                }\n            });\n        </script>\n    </head>\n    <body>\n        <div id=\"container\"></div>\n        <script>\n            require([\n                'highcharts',\n                'highcharts/modules/exporting',\n                'highcharts/modules/accessibility'\n            ], function (Highcharts) {\n                // This function runs when the above files have been loaded.\n\n                // Create a test chart.\n                Highcharts.chart('container', {\n                    series: [{\n                        data: [1,2,3,4,5]\n                    }]\n                });\n            });\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Nested HTML Elements in Highcharts\nDESCRIPTION: JavaScript snippet to create nested HTML components within Highcharts. Designed to demonstrate the use of children property for hierarchy.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/html-component.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nelements: [{\n    tagName: 'div',\n    children: [{\n        tagName: 'h1',\n        textContent: 'Title',\n        attributes: {\n            id: 'main-title',\n        }\n    }, {\n        tagName: 'p',\n        textContent: 'Description',\n        attributes: {\n            id: 'description',\n        }\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Pitch Range for Sonification Mapping in JavaScript\nDESCRIPTION: This snippet demonstrates how to define a specific pitch range for instrument sonification. Y-values are mapped to pitches between 'c3' and 'g6', with the minimum Y-value playing 'c3' and the maximum playing 'g6'.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/mapping.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmapping: {\n    volume: 0.4,\n    pan: 0,\n    noteDuration: 300,\n    pitch: {\n        mapTo: 'y',\n        min: 'c3',\n        max: 'g6'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts and Dashboards\nDESCRIPTION: These HTML script tags import the necessary Highcharts and Dashboards JavaScript libraries. These imports are required to use Highcharts charts and dashboards in a web page. The layout module is also imported, enabling layout functionalities for the dashboards.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/kpi-component.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n<script src=\"https://code.highcharts.com/dashboards/dashboards.js\"></script>\n<script src=\"https://code.highcharts.com/dashboards/modules/layout.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Crosshair in Highcharts Stock\nDESCRIPTION: This code snippet demonstrates how to configure the crosshair on the x-axis in a Highcharts Stock chart. The crosshair displays a line perpendicular to the axis, following the mouse. The `update` method of the axis object is used to modify the `snap` property of the `crosshair`.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/understanding-highcharts-stock.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nchart.xAxis[0].update({\n    crosshair: {\n        snap: false\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Series with Morningstar standalone for Highcharts\nDESCRIPTION: This code demonstrates how to use the TimeSeriesConnector to fetch dividend data for a security and display it in a Highcharts stock chart. It requires a Postman environment JSON for authentication and specifies various parameters like security ID, date range, and currency.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/morningstar/time-series/time-series.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dividendConnector = new HighchartsConnectors.Morningstar.TimeSeriesConnector({\n    postman: {\n        environmentJSON: postmanJSON\n    },\n    series: {\n        type: 'Dividend'\n    },\n    securities: [{\n        id: 'F0GBR04S23',\n        idType: 'MSID'\n    }],\n    startDate: '2000-01-01',\n    endDate: '2020-12-31',\n    currencyId: 'EUR'\n});\n\nawait dividendConnector.load();\n\nHighcharts.stockChart('container', {\n    series: [{\n        type: 'line',\n        table: dividendConnector.table.getRows(0, undefined)\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Range Selector Button Events\nDESCRIPTION: Demonstrates how to create custom range selector buttons with specific time ranges and click events\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/range-selector.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrangeSelector: {\n\tbuttons: [{\n\t\ttype: 'month',\n\t\tcount: 1,\n\t\ttext: '1m',\n\t\tevents: {\n\t\t\tclick: function() {\n\t\t\t\talert('Clicked button');\n\t\t\t}\n\t\t}\n\t}, {\n\t\ttype: 'month',\n\t\tcount: 3,\n\t\ttext: '3m'\n\t}, {\n\t\ttype: 'month',\n\t\tcount: 6,\n\t\ttext: '6m'\n\t}, {\n\t\ttype: 'ytd',\n\t\ttext: 'YTD'\n\t}, {\n\t\ttype: 'year',\n\t\tcount: 1,\n\t\ttext: '1y'\n\t}, {\n\t\ttype: 'all',\n\t\ttext: 'All'\n\t}]\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Force-Approach Algorithm in Packed Bubble Chart\nDESCRIPTION: Shows the configuration for a force-approach algorithm in a packed bubble chart without splitting series.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/packed-bubble.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nplotOptions: {\n    packedbubble: {\n        useSimulation: true,\n        layoutAlgorithm: {\n            splitSeries: false\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Labels to Plot Bands and Plot Lines in Highcharts\nDESCRIPTION: This snippet demonstrates how to add a label to a plot band in Highcharts. It specifies properties such as the text content and alignment of the label. This configuration depends on an existing plot band setup and requires Highcharts library.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/plot-bands-and-plot-lines.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nplotBands: {\n  ...,\n  label: {\n    text: 'I am a label', // Content of the label.\n    align: 'left', // Positioning of the label. Default to center.\n    x: +10 // Amount of pixels the label will be repositioned according to the alignment.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring 3D Pie Chart Depth\nDESCRIPTION: This snippet is used to set the 'thickness' or depth of a 3D pie chart in Highcharts. The depth property is defined within plotOptions specific to pie charts.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/3d-charts.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nplotOptions.pie.depth: Defines the 'thickness' of the pie.\n```\n\n----------------------------------------\n\nTITLE: Creating a Highcharts Grid instance in Angular\nDESCRIPTION: This code snippet demonstrates how to create a Highcharts Grid instance using the `Grid.grid` factory function. It takes the container ID and the options object as arguments to initialize the grid.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/wrappers/grid-with-angular.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nGrid.grid('container', this.options);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic GeoHeatMap Series in Highcharts\nDESCRIPTION: This snippet shows the basic configuration for setting up a GeoHeatMap series. It defines the series type, data points with longitude, latitude and value, and sets the colsize and rowsize to determine grid dimensions.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/geoheatmap-series.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    type: 'geoheatmap',\n    data: [{\n        lon: 10,\n        lat: 50,\n        value: 5\n    }],\n    colsize: 10,\n    rowsize: 10\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Chart for Pre-aggregated Histogram Data in Highcharts\nDESCRIPTION: This snippet shows how to configure a column chart to display pre-aggregated histogram data. It sets up the plotOptions for the column series to remove padding and borders, creating a histogram-like appearance.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/histogram-series.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nplotOptions: {\n    column: {\n        pointPadding: 0,\n        borderWidth: 0,\n        groupPadding: 0,\n        shadow: false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Graph (CSS)\nDESCRIPTION: This CSS class targets the graph element of line or line-like series in Highcharts. Use parent items like `.highcharts-series` including series type, index or individual class name, to identify specific series.  It replaces styling options such as plotOptions.series.color, plotOptions.series.lineWidth, and plotOptions.series.dashStyle.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-graph\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Levels in Highcharts Treemap with JavaScript\nDESCRIPTION: Illustrates how to set options for specific levels in a Highcharts treemap, including layout algorithm and color customization.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/treemap.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Highcharts.Chart({\n    ...\n    series: [{\n       layoutAlgorithm: 'squarified',\n       color: 'red',\n       levels: [{\n           level: 1,\n           layoutAlgorithm: 'sliceAndDice'\n       }, {\n           level: 2,\n           color: 'blue'\n       }],\n       ...\n    }],\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Looping using #each helper in Highcharts\nDESCRIPTION: This snippet shows how to use the `#each` block helper to iterate over an array of points in Highcharts. It includes nested expressions to access properties of each point and format the output.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/templating.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// A block helper looping through points, with nested expressions\nformat: '{#each points}{add this.index 1}) {this.name}<br>{/each}'\n```\n\n----------------------------------------\n\nTITLE: Styling Plot Bands in Highcharts with CSS\nDESCRIPTION: This CSS class name is used to style plot bands in Highcharts. Use the _className_ option on each band to distinguish them. It replaces color and border options for the plot band, allowing for custom styling through CSS.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_47\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-plot-band\n\n```\n\n----------------------------------------\n\nTITLE: Initializing SVG Renderer in JavaScript\nDESCRIPTION: Creates a new SVG Renderer instance for standalone use, specifying the container element and dimensions.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/renderer.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderer = new Highcharts.SVGRenderer(\n    document.getElementById('container'),\n    600,\n    400\n);\n```\n\n----------------------------------------\n\nTITLE: Column assignment two-dimensional data\nDESCRIPTION: This JavaScript code shows how to configure the `columnAssignment` option in Highcharts Dashboards to map two columns from the data connector to the series data (x and y values). It assigns the columns 'myX' to the x values and 'myY' to the y values of the series with the ID 'mySeriesId'.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/highcharts-component.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncolumnAssignment: [{\n    seriesId: 'mySeriesId',\n    data: ['myX', 'myY']\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Logarithmic Y-Axis in Highcharts\nDESCRIPTION: Configuration example showing how to set up a logarithmic y-axis in Highcharts. This setting is particularly useful for visualizing data sets with large value ranges where a linear scale would be ineffective.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/line-log-axis/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyAxis: {\n    type: 'logarithmic'\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Highcharts Image with PHP using cURL\nDESCRIPTION: This PHP snippet demonstrates how to use cURL to post a Highcharts configuration to the Highcharts Export Server and retrieve the generated image. It sets up the cURL request with the necessary headers and data, then saves the received content to a file.  The script defines the chart options, encodes them into JSON, and posts them to the Highcharts Export Server.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/deprecated-async-option.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * PHP script to create image exports using the Highcharts Export Server\n */\n\n$type = 'png'; // Can be png, jpeg or pdf\n\n// Chart options\n$options = [\n    'series' => [[\n        'data' => [1, 4, 3, 5],\n        'type' => 'column'\n    ]]\n];\n\n$arr = [\n    'type' => $type,\n    'width' => 400,\n    'infile' => $options\n];\n\n$data = json_encode($arr);\n$curlProcess = curl_init();\ncurl_setopt( $curlProcess, CURLOPT_URL, 'https://export.highcharts.com/' );\ncurl_setopt(\n    $curlProcess,\n    CURLOPT_HTTPHEADER,\n    array(\n        'Content-Type: application/json',\n        'Content-Length: ' . strlen( $data ), 'Accept: application/json'\n    )\n);\ncurl_setopt( $curlProcess, CURLOPT_HEADER, 0 );\ncurl_setopt( $curlProcess, CURLOPT_TIMEOUT, 30 );\ncurl_setopt( $curlProcess, CURLOPT_POST, 1 );\ncurl_setopt( $curlProcess, CURLOPT_POSTFIELDS, $data );\ncurl_setopt( $curlProcess, CURLOPT_RETURNTRANSFER, TRUE );\n$content = curl_exec( $curlProcess );\ncurl_close( $curlProcess );\n\nfile_put_contents(\"chart.$type\", $content);\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Data for Variable Radius Pie in Highcharts\nDESCRIPTION: This code demonstrates how to structure the data for a variable radius pie chart. Each data point includes 'y' for volume and 'z' for radius. The series also specifies minPointSize and innerSize.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/variable-radius-pie-chart.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    minPointSize: 100,\n    innerSize: '20%',\n    data: [{\n        y: 505370,\n        z: 1\n    }, {\n        y: 551500,\n        z: 2\n    }, {\n        y: 312685,\n        z: 1\n    }, {\n        y: 78867,\n        z: 3\n    }, {\n        y: 301340,\n        z: 4\n    }, {\n        y: 41277,\n        z: 5\n    }, {\n        y: 357022,\n        z: 5\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Defining Map Points Using GeoJSON Geometry in Highcharts Maps\nDESCRIPTION: This code shows the long-form configuration for map points using GeoJSON geometry objects. Each point uses a 'Point' type geometry with coordinates as [longitude, latitude] tuples, which allows direct application of data from GeoJSON and TopoJSON sources.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/adding-points-and-lines.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: 'mappoint',\n    data: [{\n        geometry: {\n            type: 'Point',\n            coordinates: [4.90, 53.38]\n        },\n        name: 'Amsterdam'\n    }, {\n        geometry: {\n            type: 'Point',\n            coordinates: [-118.24, 34.05]\n        },\n        name: 'LA'\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing a Connector in TypeScript\nDESCRIPTION: Instantiate a CSV connector without immediate data loading, allowing for table population later. Alternatively, initialize the connector with an existing data-filled table ready for operations.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ts/Data/README.md#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst connector = new CSVConnector();\nconnector.table.getRowCount() === 0;\nconst table = new DataTable({ columns: { column: [1, 2, 3] } });\nconst connector2 = new CSVConnector(table);\nconnector.table.getRowCount() === 3;\n```\n\n----------------------------------------\n\nTITLE: Fetching Topology Data for Map in JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch topology data for use in a Highcharts map. The data must be fetched from Highcharts' predefined mapdata and converted to JSON format. This topology data forms the base map that specific series data can be drawn upon.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/mapbubble-series.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst topology = await fetch(\n    'https://code.highcharts.com/mapdata/custom/world.topo.json'\n).then(response => response.json());\n```\n\n----------------------------------------\n\nTITLE: Integrating Grid Component in a React Application Using TypeScript\nDESCRIPTION: This snippet shows how to use the previously defined GridComponent within a React application. It passes a configuration object defining the grid's data in terms of columns and their respective contents. The App component then renders the GridComponent with the provided data configuration. This demonstrates integrating and using the Grid component in a functional React component.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/wrappers/grid-with-react.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// App.tsx\n\nimport GridComponent from \"./components/GridComponent\";\n\nfunction App() {\n    const config: Grid.Options = {\n        dataTable: {\n            columns: {\n                name: ['Alice', 'Bob', 'Charlie', 'David'],\n                age: [23, 34, 45, 56],\n                city: ['New York', 'Oslo', 'Paris', 'Tokyo'],\n            }\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <GridComponent config={config} />\n        </div>\n    );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing RiskScore Connector with Morningstar and Highcharts\nDESCRIPTION: This snippet demonstrates how to create a RiskScore connector instance to analyze portfolio risk, configure it with portfolio holdings, load data, and display it using DataGrid. The example shows how to specify securities using different ID types and weights.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/morningstar/risk-score.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst riskScoreConnector = new HighchartsConnectors.Morningstar.RiskScoreConnector({\n    postman: {\n        environmentJSON: postmanJSON\n    },\n    portfolios: [\n        {\n            name: 'MyPortfolio',\n            currency: 'USD',\n            totalValue: 100,\n            holdings: [\n                {\n                    id: 'F00000VCTT',\n                    idType: 'SecurityID',\n                    weight: 50\n                },\n                {\n                    id: 'AAPL',\n                    idType: 'TradingSymbol',\n                    weight: 50\n                }\n            ]\n        }\n    ]\n});\n\nawait riskScoreConnector.load();\n\nnew DataGrid.DataGrid('container', {\n    dataTable: riskScoreConnector,\n    editable: false,\n    columns: {\n      'MyPortfolio_EffectiveDate': {\n        cellFormatter: function () {\n            return new Date(this.value)\n                .toISOString()\n                .substring(0, 10);\n        }\n      }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data Structure Example\nDESCRIPTION: Example CSV data structure showing fruit consumption data with categories and values for different individuals.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/data-module.md#2025-04-16_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nCategories,Apples,Pears,Oranges,Bananas\nJohn,8,4,6,5\nJane,3,4,2,3\nJoe,86,76,79,77\nJanet,3,16,13,15\n```\n\n----------------------------------------\n\nTITLE: Creating Mappoint Series in Highcharts\nDESCRIPTION: This code snippet creates a `mappoint` series in Highcharts, which serves as the base series for connecting the flow map to specific map points (nodes). The `data` array contains objects representing cities, each with an `id`, `lat` (latitude), and `lon` (longitude).\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/flowmap-series.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    type: 'mappoint',\n    name: 'Cities',\n    data: [{\n          id: 'Oslo',\n          lat: 60.1975501,\n          lon: 11.1004152,\n        }, {\n          id: 'Warszawa',\n          lat: 52.169192,\n          lon: 20.973514\n        },\n        ...\n    ],\n    ...\n}]\n```\n\n----------------------------------------\n\nTITLE: Using Custom Sort Key in Highcharts Data Sorting\nDESCRIPTION: This example shows how to use a custom sort key for data sorting in a Highcharts column series.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/data-sorting.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    type: 'column',\n    dataSorting: {\n        enabled: true,\n        sortKey: 'custom.value'\n    },\n    data: [\n        { y: 2, custom: { value: 7 } },\n        { y: 5, custom: { value: 10 } },\n        { y: 8, custom: { value: 1 } }\n    ]\n}]\n```\n\n----------------------------------------\n\nTITLE: Loading Stock Tools Module\nDESCRIPTION: This snippet shows how to load the Stock Tools module in Highcharts Stock.  It should be loaded after all other required modules to ensure it picks up available plugins.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/stock-tools.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/modules/stock-tools.js\">\n\n```\n\n----------------------------------------\n\nTITLE: Enabling matchByName in Highcharts Data Sorting\nDESCRIPTION: This snippet demonstrates how to enable matchByName for data sorting, allowing points to be matched by name during updates.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/data-sorting.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar chart = Highcharts.chart('container', {\n    xAxis: {\n        type: 'category'\n    },\n    series: [{\n        type: 'column',\n        dataSorting: {\n            enabled: true,\n            matchByName: true\n        },\n        data: [\n            ['one', 5],\n            ['two', 10]\n        ]\n    }]\n});\n\nsetTimeout(function() {\n    chart.series[0].setData([\n        ['two', 15],\n        ['one', 11]\n    ]);\n}, 2000);\n```\n\n----------------------------------------\n\nTITLE: Setting Pictorial Chart Type in JavaScript\nDESCRIPTION: This code sets the default chart type to 'pictorial' in the Highcharts configuration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/pictorial.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchart: {\n    type: 'pictorial'\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Interactive World Map with Highmaps in JavaScript\nDESCRIPTION: This code snippet sets up an interactive world map using the Highmaps library. It includes options for drilling between administrative levels and visualizing global data.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/maps/demo/all-maps/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// No code snippet provided in the input text\n```\n\n----------------------------------------\n\nTITLE: Styling Drilldown Data Label in Highcharts with CSS\nDESCRIPTION: This CSS class name is used to style a drillable data label in Highcharts. It replaces the drilldown.activeDataLabelStyle option, enabling customized styling through CSS.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_42\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-drilldown-data-label text\n\n```\n\n----------------------------------------\n\nTITLE: Importing ESM Highcharts Dashboard Modules - JavaScript\nDESCRIPTION: This code snippet demonstrates how to import specific Highcharts dashboard modules using ES modules. This approach is used for working in environments that support ES module syntax.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/layout-description.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Dashboards from '@highcharts/dashboards/es-modules/masters/dashboards.src.js';\nimport '@highcharts/dashboards/es-modules/masters/modules/layout.src.js';\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Synchronization in JavaScript\nDESCRIPTION: This JavaScript snippet illustrates the setup of custom synchronization, using emitter and handler functions to register and unregister events dynamically.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/synchronize-components.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsync: {\n    customSync: {\n        emitter: function() {\n            registerEmitterEvents();\n            return () => {\n                unregisterEmitterEvents();\n            }\n        },\n        handler: function() {\n            registerHandlerEvents();\n            return () => {\n                unregisterHandlerEvents();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DataConverter with CSV Data in TypeScript\nDESCRIPTION: Define a CSVConverter to interpret and convert CSV formatted data into table form with configurable options for decimal points and delimiters. This converter pairs with a CSVConnector to facilitate data loading and parsing.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ts/Data/README.md#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst converter = new CSVConverter({\n    decimalPoint: ',',\n    itemDelimiter: ';',\n});\nconst connector = new CSVConnector({\n    csv: 'a;b\\n1,2;3,4\\n5,6;7,8'\n});\nawait connector.load();\nconnector.table.getRowCount() === 2;\n```\n\n----------------------------------------\n\nTITLE: Configuring DataTable in Highcharts Grid\nDESCRIPTION: Demonstrates how to set up the required dataTable configuration for Highcharts Grid. The dataTable.columns object contains key-value pairs where each key represents a column header and its value is an array of data for the corresponding rows.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/understanding-grid.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    dataTable: {\n        columns: {\n            product: [\"Apple\", \"Pear\", \"Orange\", \"Banana\"],\n            weight: [182, 178, 150, 120],\n            price: [3.5, 2.5, 3, 2.2],\n            vitamin_a: [54,27,225,64]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invert Modifier Example\nDESCRIPTION: This snippet demonstrates the usage of the Invert modifier in Highcharts Dashboards.  The Invert modifier flips the data, replacing columns with rows. No additional options need to be specified.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-modifiers.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndataModifier: {\n    type: 'Invert'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Bubble Legend in Highcharts\nDESCRIPTION: This snippet shows how to manually define ranges for the bubble legend in a Highcharts bubble chart. It allows the legend to create bubbles based on specified minimum and maximum sizes, in addition to defined ranges.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/bubble-legend.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    chart: {\n        type: 'bubble'\n    },\n    legend: {\n        bubbleLegend: {\n            enabled: true,\n            minSize: 20,\n            maxSize: 60,\n            ranges: [{\n                value: 14\n            }, {\n                value: 89\n            }]\n        }\n    },\n    series: [{\n        minSize: 20,\n        maxSize: 60,\n        data: [\n            [9, 81, 63],\n            [98, 5, 89],\n            [51, 50, 73],\n            [41, 22, 14],\n            [58, 24, 20]\n        ]\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Map Points Using Shorthand Notation in Highcharts Maps\nDESCRIPTION: This code demonstrates the shorthand configuration for adding map points by setting longitude (lon) and latitude (lat) properties directly in the data options. This approach is simpler than using full GeoJSON geometry definitions.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/adding-points-and-lines.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: 'mappoint',\n    data: [{\n        lon: 4.90,\n        lat: 53.38,\n        name: 'Amsterdam'\n    }, {\n        lon: -118.24,\n        lat: 34.05,\n        name: 'LA'\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Highcharts Map with Custom Map Data\nDESCRIPTION: Basic code snippet for initializing a Highcharts Map with custom map data. This serves as the starting point where users should paste the map data generated from the map converter tool.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/create-custom-maps.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Initiate the chart\nHighcharts.mapChart('container', {\n    series: /* paste your content here */\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Breadcrumbs for Drilldown in Highcharts\nDESCRIPTION: This snippet demonstrates how to configure breadcrumbs within the drilldown module in Highcharts. Breadcrumbs should be nested within the drilldown configuration object, enabling users to navigate paths. No additional dependencies are needed. Configuration options, such as floating and position alignment, can be adjusted.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/breadcrumbs.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndrilldown: {\n    breadcrumbs: {\n        floating: true,\n        position: {\n            align: 'right'\n        }\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Series (CSS)\nDESCRIPTION: This CSS class provides general styling for all series in a Highcharts chart. Specific series types can be targeted using `.highcharts-{type}-series`, and individual series can be styled using `.highcharts-series-{n}` or a custom `className`. This replaces styling traditionally done through JavaScript plotOptions.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-series\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Morningstar Goal Analysis Connector in JavaScript\nDESCRIPTION: Creates a GoalAnalysisConnector instance with configuration parameters including annual investment, asset class weights, current savings, detailed investment growth graph option, probability target, financial goal amount, and time horizon in years.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/morningstar/goal-analysis.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst goalAnalysisConnector = new HighchartsConnectors.Morningstar.GoalAnalysisConnector({\n    postman: {\n        environmentJSON: postmanJSON\n    },\n    annualInvestment: 4800,\n    assetClassWeights: [\n        0.1, 0, 0, 0, 0, 0, 0, 0, 0.08, 0.03, 0, 0, 0.17,\n        0.05, 0, 0, 0, 0.13, 0.28, 0, 0, 0, 0.11, 0, 0\n    ],\n    currentSavings: 20000,\n    includeDetailedInvestmentGrowthGraph: true,\n    requestProbability: 90,\n    target: 9000,\n    timeHorizon: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Options Object to Highcharts Constructor in JavaScript\nDESCRIPTION: Example of creating a Highcharts chart by passing a separately defined options object to the Highcharts.Chart constructor.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/how-to-set-options.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Highcharts.Chart('container', options);\n```\n\n----------------------------------------\n\nTITLE: Importing Variable Pie Module in Highcharts\nDESCRIPTION: This snippet shows how to include the necessary module for creating a variable radius pie chart in Highcharts. The variable-pie.js module is required for this chart type.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/variable-radius-pie/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/module/variable-pie.js\n```\n\n----------------------------------------\n\nTITLE: Regular Data Compression with pointStart and pointInterval\nDESCRIPTION: Demonstrates how to compress regularly spaced data points using pointStart and pointInterval options. This approach eliminates the need for explicit X values, reducing data size significantly.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/data-compression.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndata: [1, 1, 1, 1, 1, 1, ...]\npointStart: 1577836800000, // Date.UTC(2020, 0, 1)\npointInterval: 36e5, // one hour\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Instrument Tracks for Series\nDESCRIPTION: JavaScript code showing how to configure different instruments for different data series using the tracks configuration. This example assigns different instruments (flute and piano) to two series.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/getting-started.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nseries: [{\n    sonification: {\n        tracks: [{\n            instrument: 'flute',\n            ...\n        }]\n    },\n    data: [ ... ]\n}, {\n    sonification: {\n        tracks: [{\n            instrument: 'piano',\n            ...\n        }]\n    },\n    data: [ ... ]\n}]\n```\n\n----------------------------------------\n\nTITLE: Saving Dashboard Configuration to localStorage\nDESCRIPTION: Shows how to save dashboard options to localStorage using JSON.stringify() with formatted output\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/get-options.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlocalStorage.setItem(\n    'highcharts-dashboards-config',\n    JSON.stringify(\n        board.getOptions(),\n        null,\n        2\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Styling Context Menu in Highcharts with CSS\nDESCRIPTION: This CSS class name is used for the container of the context menu in Highcharts. It replaces the navigation.menuStyle option, allowing customization of the menu's appearance using CSS.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_38\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-menu\n\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts Export Server with NPM\nDESCRIPTION: This command installs the Highcharts export server globally using npm. This allows the server to be accessed from anywhere in the system. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/setting-up-the-server.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install highcharts-export-server -g\"\n```\n\n----------------------------------------\n\nTITLE: Styling Alternate Grid Bands in Highcharts with CSS\nDESCRIPTION: This CSS class name is used for styling alternate grid bands on an axis in Highcharts.  To activate alternate grid bands in styled mode, set xAxis.alternateGridColor to `true` in the settings, then apply a `fill` in CSS.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_46\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-alternate-grid\n\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Stack Label (CSS)\nDESCRIPTION: This CSS class styles the text for stack labels in Highcharts. It replaces the `yAxis.stackLabels.style` option.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-stack-label\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dashboards package\nDESCRIPTION: This command installs the Highcharts Dashboards package using npm, allowing you to use it in your Angular project. This package is essential for creating dashboards.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/wrappers/dashboards-with-angular.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install @highcharts/dashboards\"\n```\n\n----------------------------------------\n\nTITLE: Loading Funnel Module for Highcharts\nDESCRIPTION: Prerequisite for creating funnel charts in Highcharts, requiring the funnel module to be loaded after the core Highcharts library\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/funnel-series.md#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"highcharts.js\"></script>\\n<script src=\"modules/funnel.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart Bundle with Webpack\nDESCRIPTION: Demonstrates how to create a custom JavaScript bundle for a Highcharts line chart using webpack. This approach improves load time while maintaining the benefits of tree shaking.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation-with-esm.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// mychart.js\nimport Chart from 'highcharts/es-modules/Core/Chart/Chart.js';\nimport LineSeries from 'highcharts/es-modules/Series/Line/LineSeries.js';\n\n// Example to create a simple line chart in a div#container:\nconst myChart = new Chart('container', {\n    series: [{\n        type: 'line',\n        data: [1, 2, 3]\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Data Modifier to Connector Options\nDESCRIPTION: This snippet demonstrates how to add a data modifier to the connector options in Highcharts Dashboards. The `dataModifier` property within the connector's `options` object is used to specify the type and configuration of the modifier. The `type` property indicates the specific modifier to use, such as 'Math', 'Invert', etc.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-modifiers.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconnector: {\n    type: 'CSV',\n    id: 'connector-id',\n    options: {\n        //... other options\n        dataModifier: {\n            type: 'Math' // or 'Invert'|'Math' etc,\n            // additional modifier options\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Series Data with Array of Objects in Highcharts\nDESCRIPTION: This code snippet shows how to define series data as an array of objects, where each object represents a data point with named values. This allows for custom configurations for each point, like setting a name, color, and y value. The total number of points must not exceed the turboThreshold for Highcharts Stock.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/series.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndata: [{\n    name: 'Point 1',\n    color: '#00FF00',\n    y: 0\n}, {\n    name: 'Point 2',\n    color: '#FF00FF',\n    y: 5\n}]\n```\n\n----------------------------------------\n\nTITLE: Enabling Marker Clusters in Highcharts\nDESCRIPTION: This snippet outlines the configuration required to enable marker clusters in Highcharts. The primary dependency is the 'modules/marker-clusters.js' file. The snippet enables the clustering feature for map series by setting the 'series.cluster.enabled' property to true.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/marker-clusters.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire('modules/marker-clusters.js');\n\nHighcharts.mapChart('container', {\n    series: [{\n        cluster: {\n            enabled: true\n        }\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Category Axis in Highcharts\nDESCRIPTION: This code snippet demonstrates how to set a category axis in Highcharts, which is used for grouping tasks vertically in a Gantt chart on horizontal tracks. It defines an array of categories that represent the resources.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/gantt/gantt-grouping-tasks.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyAxis: {\n    categories: ['Resource 1', 'Resource 2', 'Resource 3']\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RNANews with Morningstar Standalone for Highcharts\nDESCRIPTION: Demonstrates how to initialize and configure the RNANewsConnector for standalone Highcharts implementation. Shows setup of security parameters, date ranges, and data grid formatting with custom cell formatting for dates.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/morningstar/regulatory-news-announcements.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst rnaNewsConnector = new HighchartsConnectors.Morningstar.RNANewsConnector({\n    postman: {\n        environmentJSON: postmanJSON\n    },\n    security: {\n        id: 'GB00BLGZ9862',\n        idType: 'ISIN'\n    },\n    startDate: '2000-01-01',\n    endDate: '2020-12-31',\n});\n\nawait rnaNewsConnector.load();\n\nnew DataGrid.DataGrid('container', {\n    dataTable: rnaNewsConnector,\n    editable: false,\n    columns: {\n      Day: {\n        cellFormatter: function () {\n            return new Date(this.value)\n                .toISOString()\n                .substring(0, 10);\n        }\n      }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Naming Sets\nDESCRIPTION: This code snippet shows how to name the sets in a Venn diagram. The `name` property is used to specify the name of the set, which is displayed in data labels and tooltips.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/venn-series.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Series data\ndata: [{\n    name: 'Apples',\n    sets: ['A'],\n    value: 2\n}, {\n    name: 'Bananas',\n    sets: ['B'],\n    value: 2\n}, {\n    name: 'Fruits',\n    sets: ['A', 'B'],\n    value: 1\n}]\n```\n\n----------------------------------------\n\nTITLE: Defining Editable Options for YouTube Component\nDESCRIPTION: Code snippet demonstrating how to make properties of the YouTube component editable in the dashboard editor. It defines editable fields for videoId, title, and caption, allowing users to customize the component without coding.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/custom-component.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n    this.options.editableOptions = [{\n        name: 'videoId',\n        propertyPath: ['videoId'],\n        type: 'input'\n    }, {\n        name: 'title',\n        propertyPath: ['title'],\n        type: 'input'\n    }, {\n        name: 'caption',\n        propertyPath: ['caption'],\n        type: 'input'\n    }];\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Maps as a Plugin\nDESCRIPTION: Script tag to include Highcharts Maps as a plugin after loading the main Highcharts library, suitable for users who already have Highcharts installed.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/getting-started.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/maps/modules/map.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Accessibility Options in Highcharts Grid\nDESCRIPTION: This snippet demonstrates how to configure accessibility options in Highcharts Grid, including disabling all accessibility features or specific announcements like sorting.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/accessibility.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n  accessibility: {\n    enabled: false,\n    announcements: {\n      sorting: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Bell Curve Series in Highcharts\nDESCRIPTION: This snippet demonstrates how to create a basic bell curve series in Highcharts. It shows setting the series type to 'bellcurve' and specifying the base series for data.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/bell-curve-series.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    type: 'bellcurve',\n    xAxis: 1,\n    yAxis: 1,\n    baseSeries: 1\n}, {\n    data: [3.5, 3, 3.2, 3.1, 3.6, 3.9, 3.4]\n}]\n```\n\n----------------------------------------\n\nTITLE: Defining Series Data with Array of Arrays in Highcharts\nDESCRIPTION: This code shows how to define series data as an array of arrays, where each inner array contains x and y values. The first value represents the x value, and the second represents the y value. This format allows explicit specification of both x and y coordinates for each data point.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/series.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndata: [[5, 2], [6, 3], [8, 2]]\n```\n\n----------------------------------------\n\nTITLE: Styling OHLC Series in Highcharts with CSS\nDESCRIPTION: These CSS class names are used to differentiate between up or down points in Highcharts Stock OHLC series. They enable styling the appearance of OHLC charts based on price movement, enhancing the visual representation of stock data.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_32\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-ohlc-series .highcharts-point-up\n.highcharts-ohlc-series .highcharts-point-down\n\n```\n\n----------------------------------------\n\nTITLE: Styling Loading Overlay in Highcharts CSS\nDESCRIPTION: CSS classes for styling the loading overlay and its inner label in Highcharts. These replace the JavaScript options for loading style and label style.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_56\n\nLANGUAGE: CSS\nCODE:\n```\n.highcharts-loading\n```\n\nLANGUAGE: CSS\nCODE:\n```\n.highcharts-loading-inner\n```\n\n----------------------------------------\n\nTITLE: Defining Dashboard Layout with Highcharts\nDESCRIPTION: JavaScript code snippet to configure a layout for a Highcharts dashboard. Layouts define rows and cells using unique identifiers.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/html-component.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngui: {\n    layouts: [{\n        id: 'layout-1',\n        rows: [{\n            cells: [{\n                id: 'dashboard-col-0'\n            }]\n        }]\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling 3D Perspective in Highcharts\nDESCRIPTION: This code snippet demonstrates how to enable 3D perspective for a Highcharts chart. It sets the options3d.enabled property to true in the chart configuration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/pyramid-3d.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noptions3d.enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring JSONConnector in DataPool with URL\nDESCRIPTION: This snippet demonstrates how to configure a JSONConnector within the DataPool. It specifies the connector's ID, type ('JSON'), and the URL from which the JSON data should be fetched. The `dataUrl` option points to a remote JSON file.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-handling.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndataPool: {\n    connectors: [{\n        id: 'my-json-connector',\n        type: 'JSON',\n        options: {\n            dataUrl: 'https://demo-live-data.highcharts.com/instance-details.json',\n        }\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Placement Strategy in JavaScript\nDESCRIPTION: This code snippet shows how to define a custom word placement strategy called `randomPlacement`. This strategy computes random positions for words and is integrated by setting it to the `placementStrategy` property of a Highcharts wordcloud series.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/word-cloud-series.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar randomPlacement = function randomPlacement(point, options) {\n  var field = options.field,\n    r = options.rotation;\n  return {\n    x: getRandomPosition(field.width) - (field.width / 2),\n    y: getRandomPosition(field.height) - (field.height / 2),\n   rotation: getRotation(r.orientations, r.from, r.to)\n  };\n};\n```\n\nLANGUAGE: js\nCODE:\n```\nHighcharts.seriesTypes.wordcloud.prototype.placementStrategy.random= randomPlacement;\n```\n\nLANGUAGE: js\nCODE:\n```\nHighcharts.chart(..., {\n  series: [{\n    type: 'wordcloud',\n    placementStrategy: 'random'\n  }]\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Edit Mode in Highcharts Dashboard Configuration\nDESCRIPTION: This code sets the editMode property to enable edit mode in the dashboard configuration. It allows interaction through the context menu.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/edit-mode.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neditMode: {\n    enabled: true,\n    contextMenu: {\n        enabled: true\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Defining Hierarchical Data Structure for Sunburst Chart in JavaScript\nDESCRIPTION: This snippet demonstrates how to structure hierarchical data for a Sunburst chart in Highcharts. It shows a parent node with two children, illustrating the use of 'id' and 'parent' properties to establish relationships.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/sunburst-series.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndata: [{\n    name: 'I have children',\n    id: 'id-1'\n}, {\n    name: 'I am a child',\n    parent: 'id-1',\n    value: 2\n}, {\n    name: 'I am a smaller child',\n    parent: 'id-1',\n    value: 1\n}]\n```\n\n----------------------------------------\n\nTITLE: Filtering Audio Events in Highcharts Sonification using JavaScript\nDESCRIPTION: This snippet demonstrates how to filter audio events during playback in Highcharts sonification. The filter function selects only points with a 'red' color property, allowing targeted sonification of specific data points.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/navigation.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.sonification.playAdjacent(true, onEndCallback, (e) => {\n    const point = e.relatedPoint || {};\n    return point.color === 'red';\n});\n```\n\n----------------------------------------\n\nTITLE: Using the TotalRevenueHTML Component in a Dashboard\nDESCRIPTION: Code snippet showing how to include the custom TotalRevenueHTML component in a Highcharts Dashboard configuration. It demonstrates referencing the component by its registered name and connecting it to a data source.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/custom-component.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n...\ncomponents: [{\n    type: 'TotalRevenueHTML',\n    renderTo: 'cell-id-0',\n    connector: {\n        id: 'data'\n    }\n},\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Column Series for Pareto Chart Base Data in Highcharts\nDESCRIPTION: This code snippet shows how to set up a column series that serves as the data source for the Pareto series. The data should be sorted in descending order by y-value.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/pareto-chart.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: 'column',\n    data: [115, 75, 60, 55, 45, 30, 20]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Tracks for Sonification Notifications in Highcharts\nDESCRIPTION: This code demonstrates setting up conditional sound notifications using global tracks. It defines two different instrument sounds (vibraphone and saxophone) that trigger when a data point's Y-value crosses above or below 100, respectively.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/notifications.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nglobalTracks: [{\n    instrument: 'vibraphone',\n    mapping: {\n        pitch: ['c6', 'g6'],\n        gapBetweenNotes: 140\n    },\n    activeWhen: {\n        prop: 'y',\n        crossingUp: 100\n    }\n}, {\n    instrument: 'saxophone',\n    mapping: {\n        pitch: ['g6', 'c6'],\n        gapBetweenNotes: 140\n    },\n    activeWhen: {\n        prop: 'y',\n        crossingDown: 100\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Defining Data for Radial Bar Chart in Highcharts\nDESCRIPTION: This snippet shows how to format data for a radial bar chart. The data structure is the same as for regular column or bar series, with each value representing a data point.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/radial-bar-chart.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nseries: [{\n    type: 'column',\n    data: [1, 2, 3, 4, 5]\n}]\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts No Data Label (CSS)\nDESCRIPTION: This CSS class styles the label shown when no data is present in the chart in Highcharts (requires the `no-data-to-display` module). It replaces the `noData.style` option.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_23\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-no-data\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Morningstar Investment Screener Connector in JavaScript\nDESCRIPTION: Example of creating a new Morningstar Investment Screener Connector instance with custom filters, pagination, language preferences, and data points. This code demonstrates how to configure the connector to find investments similar to ones you're already familiar with.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/morningstar/screeners/find-similar-screener.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst screenerConnector = new HighchartsConnectors.Morningstar.InvestmentScreenerConnector({\n    page: 1,\n    pageSize: 20,\n    languageId: 'en-GB',\n    currencyId: 'GBP',\n    filters: [\n        {\n            dataPointId: 'CategoryId',\n            comparatorCode: 'EQ',\n            value: '0P00002D7X'\n        },\n        {\n            dataPointId: 'OngoingCharge',\n            comparatorCode: 'LT',\n            value: 3\n        }\n    ],\n    securityDataPoints: [\n        'secId',\n        'name',\n        'riskRating'\n        'ongoingCharge'\n    ],\n    sortOrder: 'Name+Asc',\n    universeIds: ['FOESP$$ALL'],\n    postman: {\n        environmentJSON: postmanJSON\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic hc-transform Configuration for Custom Maps\nDESCRIPTION: Minimal JSON configuration needed to add latitude/longitude support to custom maps in Highcharts. This defines the coordinate reference system (CRS) using a proj4 string format.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/latlon.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"hc-transform\": {\n    \"default\": {\n        \"crs\": \"Your map projection in proj4 string format, as supported by pro4js\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Annotation Structure in Highcharts\nDESCRIPTION: This snippet shows the basic structure of a Highcharts annotation, consisting of labels and shapes. Labels are used for text annotations, and shapes are used for visual elements like lines and backgrounds.  This structure allows developers to customize annotations with labels and shapes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/annotations-and-fibonacci-retracements.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n{\n    labels: [ /* options for labels */ ],\n    shapes: [ /* options for lines */, /* options for backgrounds */ ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Including X-range Module in Highcharts\nDESCRIPTION: To create an X-range series chart in Highcharts, you need to include the xrange.js module. This module provides the necessary functionality for rendering X-range charts.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/x-range/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/modules/xrange.js\n```\n\n----------------------------------------\n\nTITLE: Drawing Shapes with SVG Renderer in JavaScript\nDESCRIPTION: Demonstrates how to draw a circle and text using the SVG Renderer, setting attributes and styles.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/renderer.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrenderer.circle(100, 100, 50).attr({\n    fill: 'red',\n    stroke: 'black',\n    'stroke-width': 1\n}).add();\n\nrenderer.text('Hello world', 200, 100).attr({\n    rotation: 45\n}).css({\n    fontSize: '16pt',\n    color: 'green'\n}).add();\n```\n\n----------------------------------------\n\nTITLE: Disabling GUI in Highcharts Dashboard Configuration - JavaScript\nDESCRIPTION: This code snippet demonstrates how to disable the GUI in a Highcharts dashboard configuration by setting the 'enabled' property to false in the 'gui' object.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/style-by-css.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n    gui: {\n        enabled: false\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading Proj4js Library for Highcharts Maps\nDESCRIPTION: Example of loading the proj4js library from CDNJS, which is required for latitude/longitude support in Highcharts Maps prior to version 9.3.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/latlon.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Example of loading from CDNJS: -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.3.6/proj4.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Styling Inactive Legend Navigation in Highcharts with CSS\nDESCRIPTION: This CSS class name styles the inactive arrow of the legend navigation in Highcharts. It replaces legend.navigation.inactiveColor, allowing for custom styling through CSS.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_54\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-legend-nav-inactive\n\n```\n\n----------------------------------------\n\nTITLE: Importing Dashboards CSS\nDESCRIPTION: This CSS import statement includes the default styles for the Highcharts dashboard. This CSS file provides the necessary styling to properly display the dashboard components.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/your-first-dashboard.md#2025-04-16_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import url(\"https://code.highcharts.com/dashboards/css/dashboards.css\");\n```\n\n----------------------------------------\n\nTITLE: Defining Map Lines Using LineString Geometry in Highcharts Maps\nDESCRIPTION: This example demonstrates how to create map lines using a LineString geometry type. The coordinates are provided as a two-dimensional array of longitude-latitude tuples. Note that lines may render as curves in certain projections as Highcharts displays the geodesic path.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/adding-points-and-lines.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: 'mapline',\n    data: [{\n        geometry: {\n            type: 'LineString',\n            coordinates: [\n                [4.90, 53.38], // Amsterdam\n                [-118.24, 34.05] // Los Angeles\n            ]\n        }\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Line Indicator Series Type in Highcharts\nDESCRIPTION: Complete configuration for creating a custom multiple line indicator series type with styling and calculation logic for regression zones.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/custom-technical-indicators.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar multipleLinesMixin = Highcharts._modules['Mixins/MultipleLines.js'];\n\nHighcharts.seriesType(\n  'linearregressionzones',\n  'sma',\n  {\n    color: '#00ff00',\n    params: {\n      zoneDistance: 5\n    },\n    tooltip: {\n      pointFormat: '<span style=\"color:{point.color}\">●</span> {series.name}:<br/>' +\n        '110%: <b>{point.y4}</b><br/>' +\n        '105%: <b>{point.y3}</b><br/>' +\n        '100%: <b>{point.y}</b><br/>' +\n        '95%: <b>{point.y2}</b><br/>' +\n        '90%: <b>{point.y1}</b>'\n    },\n    closeRangeBottomLine: {\n      styles: {\n        lineWidth: 1,\n        lineColor: '#ffa500'\n      }\n    },\n    highRangeBottomLine: {\n      styles: {\n        lineWidth: 1,\n        lineColor: '#ff0000'\n      }\n    },\n    closeRangeTopLine: {\n      styles: {\n        lineWidth: 1,\n        lineColor: '#ffa500'\n      }\n    },\n    highRangeTopLine: {\n      styles: {\n        lineWidth: 1,\n        lineColor: '#ff0000'\n      }\n    }\n  },\n  {\n    getValues: function (series) {\n        return this.getLinearRegressionZones(series.xData, series.yData);\n    },\n    getLinearRegressionZones: getLinearRegressionZones,\n\n    linesApiNames: ['highRangeBottomLine', 'closeRangeBottomLine', 'closeRangeTopLine', 'highRangeTopLine'],\n    nameBase: 'Linear regression zones',\n    nameComponents: ['zoneDistance'],\n    nameSuffixes: ['%'],\n    parallelArrays: ['x', 'y', 'y1', 'y2', 'y3', 'y4'],\n    pointArrayMap: ['y1', 'y2', 'y', 'y3', 'y4'],\n    pointValKey: 'y'\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Hidden Accessibility Description in Highcharts\nDESCRIPTION: This code snippet demonstrates how to add a hidden description for screen reader users in Highcharts using the accessibility.description option. This approach makes the chart description available to screen reader users while keeping it visually hidden.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/accessibility-module.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n    accessibility: {\n        description: 'This is the most used desktop screen reader'\n    },\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Y-Axes in Parallel Coordinates Chart with Highcharts\nDESCRIPTION: This snippet shows how to customize individual y-axes in a parallel coordinates chart, such as setting line width and tick interval.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/parallel-coordinates-chart.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nyAxis: [{\n  lineWidth: 2\n}, {\n  tickInterval: 10\n},\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Map Topology in Highcharts Configuration\nDESCRIPTION: This code snippet configures the Highcharts chart to use the fetched map topology. The `map` property within the `chart` options is set to the `topology` object, defining the base map for the chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/flowmap-series.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchart: {\n    map: topology\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pictorial Series Data in JavaScript\nDESCRIPTION: This code shows how to structure data for a pictorial series with multiple stacked components.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/pictorial.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nplotOptions: {\n  pictorial: {\n    stacking: 'normal'\n  }\n},\nseries: [{\n    name: 'Daylight',\n    data: [6500]\n  }, {\n    name: 'Moonlight',\n    data: [4000]\n  },\n  {\n    name: 'Morning/Evening Sun',\n    data: [3500]\n  },\n  {\n    name: 'Lightbulb',\n    data: [3000]\n  },\n  {\n    name: 'Sunrise/sunset',\n    data: [2500]\n  },\n  {\n    name: 'Candle flame',\n    data: [1800]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Flow Map Series with Mappoint IDs in Highcharts\nDESCRIPTION: This code snippet configures a `flowmap` series in Highcharts, connecting data points from the `mappoint` series by their `id`.  It shows usage of `from` and `to` properties set to the `id` values defined in the mappoint series. Also demonstrated is the usage of `curveFactor` and `markerEnd` options to customize the flow lines.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/flowmap-series.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    type: 'flowmap',\n    name: 'Flowmap with mappoint series',\n    data: [{\n        from: 'Warszawa',\n        to: 'Oslo',\n        curveFactor: 0.4,\n        weight: 5,\n        growTorwards: true,\n        markerEnd: {\n            enabled: true,\n            height: 15,\n            width: 10\n        }\n        ...\n    }],\n    ...\n}]\n```\n\n----------------------------------------\n\nTITLE: Importing Dashboards module in TypeScript\nDESCRIPTION: This line imports the `Dashboards` module from the `@highcharts/dashboards` package. This import is essential to utilize the dashboard functionalities within the Vue application.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/wrappers/dashboards-with-vue.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"import Dashboards from '@highcharts/dashboards';\"\n```\n\n----------------------------------------\n\nTITLE: Extending Highcharts Point Prototype in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to extend the Highcharts Point prototype with a custom highlight function. It demonstrates proper typing, declaration of additional interfaces, and use of existing Highcharts types.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/highcharts-typescript-declarations.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Highcharts from 'highcharts';\n\ndeclare module 'highcharts' {\n    interface Point {\n        highlight (event: Highcharts.PointerEventObject): void;\n    }\n}\n\nHighcharts.Point.prototype.highlight = function (\n    event: Highcharts.PointerEvent\n): void {\n    event = this.series.chart.pointer.normalize(event);\n    this.onMouseOver(event);\n    this.series.chart.tooltip.refresh(this);\n    this.series.chart.xAxis[0].drawCrosshair(event, this);\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a Highcharts Map\nDESCRIPTION: Basic JavaScript code to initialize a map using the Highcharts.mapChart constructor, which creates a map visualization in the specified container element.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/getting-started.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.mapChart('container', {\n   ...\n});\n```\n\n----------------------------------------\n\nTITLE: USGS Provider Configuration Options\nDESCRIPTION: This snippet shows the available theme properties for the United States Geological Survey (USGS) provider, which includes topographic and imagery map options specific to US territories.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/tiledwebmap.md#2025-04-16_snippet_7\n\nLANGUAGE: js\nCODE:\n```\ntheme: 'USTopo', 'USImagery', 'USImageryTopo'\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Family and Size in Highcharts Grid CSS\nDESCRIPTION: Sets a base font family and size for the entire grid, with a larger font size specifically for the caption. This demonstrates how to use both global variables and section-specific overrides.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/theming/theming-variables.md#2025-04-16_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.theme-custom {\n  --hcg-font-family: Arial, sans-serif;\n  --hcg-font-size: 14px;\n  --hcg-caption-font-size: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart with Custom Sonification Duration\nDESCRIPTION: JavaScript code that creates a chart with a custom sonification duration of 3000 milliseconds (3 seconds), which controls how long the audio playback will last. The example also includes custom chart styling.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/getting-started.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst chart = Highcharts.chart('container', {\n    sonification: {\n        duration: 3000\n    },\n    title: {\n        text: 'Chart sonified in sequence',\n        align: 'left',\n        margin: 25\n    },\n    legend: {\n        enabled: false\n    },\n    series: [{\n        data: [4, 5, 6, 5, 7, 9, 11, 13]\n    }, {\n        data: [1, 3, 4, 2]\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating New SVG Drawing with Highcharts in JavaScript\nDESCRIPTION: Demonstrates how to create a new SVG drawing outside of a Highcharts instance. It requires specifying a parent DOM node, width, and height for the drawing area.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/freeform-drawing.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Highcharts.Renderer(parentNode, width, height)\n```\n\n----------------------------------------\n\nTITLE: Styling Tooltip in Highcharts CSS\nDESCRIPTION: CSS classes for styling the tooltip components in Highcharts, including the container, box, text, and header.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_67\n\nLANGUAGE: CSS\nCODE:\n```\n.highcharts-tooltip\n.highcharts-tooltip-box\n.highcharts-tooltip text\n.highcharts-tooltip-header\n```\n\n----------------------------------------\n\nTITLE: JSON Data for Highcharts\nDESCRIPTION: This JSON snippet represents a simple array of data points, each point being an array of two numbers. This data format is directly usable as the data for a Highcharts series.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/custom-preprocessing.md#2025-04-16_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n[\n[1,12],\n[2,5],\n[3,18],\n[4,13],\n[5,7],\n[6,4],\n[7,9],\n[8,10],\n[9,15],\n[10,22]\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigator Series Options in Highcharts Stock (JavaScript)\nDESCRIPTION: This snippet customizes the appearance and settings for navigator series in Highcharts Stock. By utilizing 'navigator.series' and 'series.navigatorOptions', users can define common parameters for all navigator series, allowing for consistency in data representation.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/navigator.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigator: {\n    maskInside: false,\n    maskFill: \"rgba(102,133,194,0.3)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using DataModifier to Modify DataTable - JavaScript\nDESCRIPTION: This snippet shows how to utilize a DataModifier to create a new modified DataTable based on sorting criteria. It demonstrates the process of cloning a DataTable and applying a sort modifier.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-table.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst sortModifier = new DataModifier.types.Sort({\n    direction: 'asc',\n    orderByColumn: 'City'\n});\n\nconst table = new Dashboards.DataTable({\n    columns: {\n        Rank: [1, 2, 3, 4, 5, 6],\n        City: ['Sydney', 'Melbourne', 'Brisbane', 'Perth', 'Adelaide', 'Canberra'],\n        State: ['NSW', 'VIC', 'QLD', 'WA', 'SA', 'ACT'],\n        Population: [5259764, 4976157, 2568927, 2192229, 1402393, 453558]\n    }\n});\n\nconst tableModified = sortModifier.modifyTable(table.clone());\n```\n\n----------------------------------------\n\nTITLE: Define basic chart options\nDESCRIPTION: This JavaScript object defines basic chart options for a Highcharts chart.  It specifies a single series with some data points.  These options are passed to the Highcharts component to configure the chart's appearance and data.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/highcharts-component.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n    chartOptions: {\n        series: [{\n            data: [1, 2, 3, 4]\n        }]\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Locale for Time Formatting in Highcharts Grid\nDESCRIPTION: Configuration for setting the locale used for time formatting in Highcharts Grid. The locale affects how date and time values are formatted, with priority given to the lang.locale option.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/columns.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nGrid.setOptions({\n    lang: {\n        locale: 'en-US'\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Including Exporting and Export-data Modules in Highcharts - HTML\nDESCRIPTION: This snippet shows how to include both the exporting and export-data modules before including the Accessibility module. These modules allow users to download charts and view data in a table format.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/accessibility-module.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\n<script src=\"https://code.highcharts.com/modules/export-data.js\"></script>\n<script src=\"https://code.highcharts.com/modules/accessibility.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Component with HTML String in JavaScript\nDESCRIPTION: This code snippet illustrates how to define an HTML component using a standard HTML string in Highcharts Dashboards. It sets the 'renderTo' attribute to specify the target cell and uses the 'html' attribute for defining inline HTML content. This approach is straightforward for embedding HTML directly into the configuration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/types-of-components.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    type: 'HTML',\n    renderTo: 'dashboard-1',\n    html: '<img src=\"https://www.highcharts.com/samples/graphics/stock-dark.svg\">'\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Morningstar TimeSeriesConnector for OHLCV Data in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a TimeSeriesConnector instance configured to fetch OHLCV (Open, High, Low, Close, Volume) time series data for a security. The connector is initialized with Postman environment JSON, OHLCV series type, and a security identifier.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/morningstar/time-series/ohlcv.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ohlcvConnector = new HighchartsConnectors.Morningstar.TimeSeriesConnector({\n    postman: {\n        environmentJSON: postmanJSON\n    },\n    series: {\n        type: 'OHLCV'\n    },\n    securities: [{\n        id: 'F0GBR04S23',\n        idType: 'MSID'\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Highcharts Plugin\nDESCRIPTION: This snippet demonstrates how to wrap a Highcharts plugin in an anonymous self-executing function to prevent variable pollution. Inside this function, shortcuts to Highcharts classes are created, and local variables can be defined.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/extending-highcharts/extending-highcharts.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(function (H) {\n    const { Chart, Series } = H; // shortcuts to Highcharts classes\n\n    let localVar; // local variable\n\n    doSomething();\n}(Highcharts));\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts and Dashboards modules in TypeScript\nDESCRIPTION: These lines import the Highcharts library, Dashboards module, and Grid module, along with connecting the Highcharts and Grid plugins to the Dashboards.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/wrappers/dashboards-with-vue.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"import Highcharts from 'highcharts/es-modules/masters/highcharts.src.js';\\nimport Dashboards from '@highcharts/dashboards/es-modules/masters/dashboards.src.js';\\nimport Grid from '@highcharts/dashboards/es-modules/masters/datagrid.src.js';\\n\\nDashboards.HighchartsPlugin.custom.connectHighcharts(Highcharts);\\nDashboards.GridPlugin.custom.connectGrid(Grid);\\nDashboards.PluginHandler.addPlugin(Dashboards.HighchartsPlugin);\\nDashboards.PluginHandler.addPlugin(Dashboards.GridPlugin);\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeline Data Series with Time Periods in JavaScript\nDESCRIPTION: This code snippet demonstrates how to structure the data series for a Timeline chart with evenly divided time periods. It doesn't use the 'x' property for timestamps.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/timeline-series.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndata: [{\n    name: 'Some date',\n    label: 'Event label',\n    description: 'Description of this event.'\n}, {\n    name: 'Another date',\n    label: 'Another event label',\n    description: 'Description of second event'\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Headers in Highcharts Grid\nDESCRIPTION: Shows how to configure headers using the header array, which can be an alternative to the columns option. This approach allows changing the order of headers and creating hierarchical header structures.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/understanding-grid.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    header: [\n        {\n            columnId: \"product\"\n            format: \"Fruit\",\n        },\n        \"weight\",\n        \"price\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sync States in Highcharts Grid CSS\nDESCRIPTION: Defines styling for synchronized states in Highcharts Grid, which is identical to the hover state example. This pattern provides the foundation for custom sync highlighting when the grid is used in Highcharts Dashboards.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/theming/theming-variables.md#2025-04-16_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.theme-custom {\n  --hcg-background: #aaaaaa;\n  --hcg-header-background: #888888;\n  --hcg-row-even-background: #aeaeae;\n  --hcg-cell-hovered-row-background: #999999;\n  --hcg-cell-hovered-column-background: #999999;\n  --hcg-cell-hovered-column-border-width: 1px;\n  --hcg-cell-hovered-column-border-color: #d27676;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Angular component example with Highcharts Grid\nDESCRIPTION: This is a complete Angular component that demonstrates how to integrate Highcharts Grid. It includes importing the necessary modules, defining the component, setting up the Grid options, and initializing the Grid in the `ngOnInit` lifecycle hook.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/wrappers/grid-with-angular.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\nimport Grid from '@highcharts/grid-lite/es-modules/masters/grid-lite.src.js';\nimport '@highcharts/grid-lite/css/grid.css';\n\n@Component({\n    selector: 'app-root',\n    standalone: true,\n    template: '<div id=\"container\"></div>',\n})\nexport class AppComponent implements OnInit {\n    private options: Grid.Options = {\n        dataTable: {\n            columns: {\n                name: ['Alice', 'Bob', 'Charlie', 'David'],\n                age: [23, 34, 45, 56],\n                city: ['New York', 'Oslo', 'Paris', 'Tokyo'],\n            }\n        }\n    }\n\n    ngOnInit() {\n        Grid.grid('container', this.options);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Morningstar Investor Preferences Connector in JavaScript\nDESCRIPTION: Example of initializing and configuring the Morningstar Investor Preferences connector with custom filters, data points, and calculated fields. The connector allows filtering securities based on criteria like star rating, sustainability rank, and custom boolean conditions.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/morningstar/screeners/investor-preferences.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst investorPreferencesConnector = new HighchartsConnectors.Morningstar.InvestorPreferencesConnector({\n    page: 1,\n    pageSize: 20,\n    languageId: 'en-GB',\n    currencyId: 'USD',\n    filters: [\n        {\n            dataPointId: 'StarRatingM255',\n            comparatorCode: 'IN',\n            value: 5\n        }\n    ],\n    securityDataPoints: [\n        'secId',\n        'name',\n        'sustainabilityRank'\n    ],\n    calculatedDataPoints: [{\n        name: 'ClientPreferences',\n        type: 'bool',\n        condition: {\n            and: [{\n                fields: [\n                    {\n                        name: 'EET_EUSFDRType',\n                        op: 'eq',\n                        value: 8\n                    },\n                    {\n                        name: 'EET_PAI_GHGEmissions1Considered',\n                        op: 'eq',\n                        value: 'Y'\n                    },\n                    {\n                        name: 'EET_PAI_GHGEmissions3Considered',\n                        op: 'in',\n                        value: ['N','I']\n                    }\n                ]\n            }]\n        }\n    }],\n    universeIds: ['FOALL$$ALL'],\n    postman: {\n        environmentJSON: postmanJSON\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Stacked Area Chart in Highcharts\nDESCRIPTION: This snippet demonstrates how to set up a stacked area chart using Highcharts. The key configuration is setting the 'stacking' option to 'normal' in the plotOptions for the area series.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/area-stacked/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nplotOptions: {\n    area: {\n        stacking: 'normal'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Type for Variable Radius Pie in Highcharts\nDESCRIPTION: This snippet shows how to set the chart type to 'variablepie' in the Highcharts configuration. This is the first step in creating a variable radius pie chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/variable-radius-pie-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart: {\n    type: 'variablepie'\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom HTML Component - JavaScript\nDESCRIPTION: This snippet demonstrates how to instantiate the CustomHTML component within a dashboard layout. It shows the registration of a CustomHTML component with specific rendering options, leveraging both DOM IDs and HTML strings as input for customization.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/custom-component.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDashboards.board('container', {\n    gui: {\n        layouts: [{\n            id: 'layout-1',\n            rows: [{\n                cells: [{\n                    id: 'dashboard-col-0'\n                }, {\n                    id: 'dashboard-col-1'\n                }, {\n                    id: 'dashboard-col-2'\n                }]\n            }]\n        }]\n    },\n    components: [{\n        type: 'CustomHTML',\n        renderTo: 'dashboard-col-0',\n        id: 'custom-html-div'\n    }, {\n        type: 'CustomHTML',\n        renderTo: 'dashboard-col-1',\n        html: `\n            <div>\n                <h1>Custom HTML 2</h1>\n                <span id=\"custom-html-div-2\">Custom HTML added as string</span>\n            </div>\n        `\n    },\n    {\n        renderTo: 'dashboard-col-2',\n        type: 'Highcharts',\n        chartOptions: {\n            series: [{\n                data: [1, 2, 3, 4]\n            }]\n        }\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring X-Axis for Parallel Coordinates Chart in Highcharts\nDESCRIPTION: This code demonstrates how to set up the x-axis for a parallel coordinates chart, including categories and label styling.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/parallel-coordinates-chart.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nxAxis: {\n  categories: ['Title 1', 'Title 2', 'Title 3', ... , 'Title N'],\n  labels: {\n    styles: {\n      color: '#DFDFDF' // changes titles colors\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-filled Column Calculations with DataTable\nDESCRIPTION: Shows how to create a DataTable with pre-filled formulas in columns. Formulas must start with an equal sign (=) to be processed by MathModifier.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/mathmodifier-module.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    id: 'My DataTable',\n    columns: {\n        'First Column': [ 1, 2, 3 ], // = Column A\n        'Second Column': [ 4, 5, 6 ], // = Column B\n        'Total Column': [ '=SUM(A1:B1)', '=SUM(A2:B2)', '=SUM(A3:B3)' ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Highcharts Map with City Demographic Data\nDESCRIPTION: Creates a US map visualization with mapbubble series to represent city populations across different states using geographic coordinates\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/maps/demo/latlon-advanced/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.mapChart('container', { ... })\n```\n\n----------------------------------------\n\nTITLE: Highcharts Wind Barb Series Code Example\nDESCRIPTION: This code snippet demonstrates how to create a wind barb series in Highcharts. It sets the `x`, `value`, and `direction` properties for each wind barb point. The example is from a jsfiddle.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/wind-barbs-series.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"Click [here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/windbarb-series/) to check the code.\"\n```\n\n----------------------------------------\n\nTITLE: Importing TiledWebMap Module in HTML\nDESCRIPTION: This snippet shows how to import the tiledwebmap.js module, which is required before using the TWM functionality in Highcharts Maps.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/tiledwebmap.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/maps/modules/tiledwebmap.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Importing Dashboard Configuration from localStorage\nDESCRIPTION: Demonstrates how to retrieve and parse dashboard configuration from localStorage and create a new dashboard instance\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/get-options.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimportBtn.addEventListener('click', () => {\n    const dashboardsConfig = localStorage.getItem('highcharts-dashboards-config');\n\n    // Your custom action\n    Dashboards.board('container', JSON.parse(dashboardsConfig));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Shadow in Pictorial Chart\nDESCRIPTION: This snippet demonstrates how to enable and customize the stack shadow for a pictorial chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/pictorial.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nyAxis: {\n  stackShadow: {\n    enabled: true,\n    ...\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Creating JSONP Endpoint in PHP\nDESCRIPTION: Server-side PHP script that wraps JSON data in a JSONP callback. Sets appropriate content type header and encodes an array of numbers as JSON, wrapping it in the callback function name received via GET parameter.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/getting-data-across-domains-jsonp.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nheader(\"content-type: application/json\"); \n\n$array = array(7,4,2,8,4,1,9,3,2,16,7,12);\n\necho $_GET['callback']. '('. json_encode($array) . ')';    \n\n?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Scatter Plot Data Format\nDESCRIPTION: Demonstrates the data array format for scatter plots using x and y coordinates. Data should be structured as nested arrays where each inner array contains x and y values.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/scatter/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[[x,y]]\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Grid Component in Vue Application\nDESCRIPTION: Demonstrates how to import and configure the Grid component with sample data in a Vue application\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/wrappers/grid-with-vue.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">    \nimport Grid from './components/Grid.vue';\n\nconst config: Grid.Options = {\n    dataTable: {\n        columns: {\n            name: ['Alice', 'Bob', 'Charlie', 'David'],\n            age: [23, 34, 45, 56],\n            city: ['New York', 'Oslo', 'Paris', 'Tokyo'],\n        }\n    }\n}\n</script>\n\n<template>\n    <div id=\"app\">\n        <Grid :config=\"config\" />\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Data Labels to Pie Series using Compositions\nDESCRIPTION: Implementation example showing how to enable data labels for pie charts using the composition pattern in Highcharts ES6 modules.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation-with-esm.md#2025-04-16_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport Chart from 'highcharts/es-modules/Core/Chart/Chart.js';\nimport PieSeries from 'highcharts/es-modules/Series/Pie/PieSeries.js';\nimport PieDataLabel from 'highcharts/es-modules/Series/Pie/PieDataLabel.js';\n\nPieDataLabel.compose(PieSeries);\n```\n\n----------------------------------------\n\nTITLE: Configuring Bubble Series with Color Value in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure a bubble series with a custom color key. It sets up a series with data points containing x, y, z, and colorValue properties. The colorKey option is set to 'colorValue' to use this property for coloring the bubbles.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/bubble-series.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    colorKey: 'colorValue',\n    data: [{\n        x: 0,\n        y: 81,\n        z: 63,\n        colorValue: 4\n    }, {\n        x: 98,\n        y: 5,\n        z: 89,\n        colorValue: 32\n    }, {\n        x: 51,\n        y: 50,\n        z: 73,\n        colorValue: 9\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Series-Specific Default Instrument Options\nDESCRIPTION: JavaScript code demonstrating how to set default instrument options for a specific series while maintaining different configuration for other series, allowing for more granular control over sonification.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/getting-started.md#2025-04-16_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nsonification: {\n    duration: 4000\n},\nseries: [{\n    data: [1, 2, 3, 4, 5],\n    sonification: {\n        defaultInstrumentOptions: {\n            instrument: 'flute'\n        },\n        tracks: [{\n            // other track configuration goes here\n        }, {\n            // other track configuration goes here\n        }]\n    }\n}, {\n    data: [5, 7, 7, 5, 3]\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Circular Layout for Highcharts Item Chart in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a circular layout for an item chart, typically used for parliament-style visualizations. It specifies the center position, size, and angle range for the chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/item-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Circular options\ncenter: ['50%', '88%'],\nsize: '170%',\nstartAngle: -100,\nendAngle: 100\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Path Value in Pictorial Chart\nDESCRIPTION: This code shows how to set the maximum value for the pictorial series path, which determines the height of the image.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/pictorial.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nplotOptions: {\n    series: {\n        paths: [{\n            max: 1,\n            ...\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SecurityDetailsConnector with AssetAllocations Type in JavaScript\nDESCRIPTION: Example of configuring the SecurityDetailsConnector to retrieve asset allocation data for a specific security. The connector is initialized with Postman environment JSON for authentication, a security ID, and the type of data to retrieve.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/morningstar/security-details.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst securityDetailsConnector = new HighchartsConnectors.Morningstar.SecurityDetailsConnector({\n    postman: {\n        environmentJSON: postmanJSON\n    },\n    security: {\n        id: 'F0GBR050DD',\n        idType: 'MSID'\n    },\n    converter: {\n        type: 'AssetAllocations' // Specify the type of data to retrieve\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting Highcharts Component with Dashboards Plugin\nDESCRIPTION: This snippet shows how to connect a Highcharts component to Dashboards using the HighchartsPlugin, allowing the two systems to work together.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/installation.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nDashboards.HighchartsPlugin.custom.connectHighcharts(Highcharts);\nDashboards.PluginHandler.addPlugin(Dashboards.HighchartsPlugin);\n```\n\n----------------------------------------\n\nTITLE: Customizing Highcharts Renko Box Size in JavaScript\nDESCRIPTION: Illustrating how to modify the 'boxSize' parameter in a Renko series using JavaScript in Highcharts. The snippet is customizable to adjust the size of the bricks, in this case, representing $1 price changes. This adjustment is essential for tailoring the visualization scale according to specific trading strategies.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/renko.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nplotOptions: {\n    renko: {\n        boxSize: 1   // This signifies that each \"brick\" represents $1 price changes\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: NPM Package Import with TypeScript\nDESCRIPTION: Demonstrates importing Dashboards and Grid modules using NPM packages, and connecting Grid plugin to Dashboards.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/grid-component.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Dashboards from '@highcharts/dashboards';\\nimport * as Grid from '@highcharts/dashboards/datagrid';\\n\\nDashboards.GridPlugin.custom.connectGrid(Grid);\\nDashboards.PluginHandler.addPlugin(Dashboards.GridPlugin);\n```\n\n----------------------------------------\n\nTITLE: Adding numbers with helper in Highcharts\nDESCRIPTION: This code demonstrates how to add two numbers using the `add` helper in Highcharts templating. It shows both adding two literal numbers and adding a literal number with a variable from the data point's context.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/templating.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Add two literal number using the `add` helper\nformat: '{add 1 2}' // => prints 3\n\n// Add a literal number and a variable\nformat: '{add point.index 1}' // => prints a 1-based index from zero-based\n```\n\n----------------------------------------\n\nTITLE: Displaying Data Table on Page Load\nDESCRIPTION: This JavaScript snippet shows how to configure Highcharts to display the data table when the page is rendered. By setting the `exporting.showTable` option to `true`, the table will automatically appear below the chart.  This allows users to view the data in a tabular format without needing to interact with the export menu.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/tables.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n    exporting: {\n        showTable: true,\n    }\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Dash Style in Highcharts\nDESCRIPTION: This code snippet shows how to set a dashed line style for an individual series in Highcharts. The dashStyle property can be set to various predefined dash patterns, such as 'longdash'.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/series.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    data: [1, 3, 2, 4, 5, 4, 6, 2, 3, 5, 6],\n    dashStyle: 'longdash'\n}]\n```\n\n----------------------------------------\n\nTITLE: Customizing Individual Treegraph Links in Highcharts\nDESCRIPTION: This snippet shows how to customize a specific link in a treegraph. It defines a link object within a child node's configuration to set custom properties for that particular link.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/treegraph-chart.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndata: [{\n    name: 'parent',\n    id: 'id-1\n}, {\n    name: 'child',\n    parent: 'id-1',\n    link: {\n        type: 'curved',\n        lineWidth: 5\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Rendering Options in Highcharts Grid\nDESCRIPTION: Demonstrates how to configure performance-related rendering options for Highcharts Grid. This example shows settings for row buffering and height management to optimize performance.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/understanding-grid.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    rendering: {\n        rows: {\n            bufferSize: 5,\n            strictHeights: true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Components - JavaScript\nDESCRIPTION: This snippet demonstrates how to synchronize multiple Highcharts components using common events and a shared connector. Each component definition specifies the synchronization settings required.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/frequently-asked-questions.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncomponents: [{\n    connector: {\n        id: 'Vitamin'\n    },\n    sync: {\n        visibility: true,\n        highlight: true,\n        extremes: true\n    },\n    renderTo: 'dashboard-col-0',\n    type: 'Highcharts',\n    chartOptions: {\n        chart: {\n            type: 'pie'\n        }\n    },\n}, {\n    renderTo: 'dashboard-col-1',\n    connector: {\n        id: 'Vitamin'\n    },\n    sync: {\n        visibility: true,\n        highlight: true,\n        extremes: true\n    },\n    type: 'Highcharts',\n    chartOptions: {\n        xAxis: {\n            type: 'category'\n        },\n        chart: {\n            animation: false,\n            type: 'column'\n        }\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Modules for Lollipop Chart\nDESCRIPTION: This HTML snippet demonstrates how to include the necessary Highcharts modules for creating a lollipop chart. It loads the core Highcharts library, the 'highcharts-more' module, and the specific 'dumbbell' and 'lollipop' modules.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/lollipop-series.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n<script src=\"https://code.highcharts.com/highcharts-more.js\"></script>\n<script src=\"https://code.highcharts.com/modules/dumbbell.js\"></script>\n<script src=\"https://code.highcharts.com/modules/lollipop.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sankey Diagram Keys in Highcharts\nDESCRIPTION: This snippet demonstrates the structure of the 'keys' option for Sankey diagrams in Highcharts. It defines the data format for linking nodes and specifying flow volume.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/sankey-diagram/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nkeys: ['from', 'to', 'weight']\n```\n\n----------------------------------------\n\nTITLE: Mapping Data Properties to Instrument Parameters in JavaScript\nDESCRIPTION: This snippet shows how to map a data property ('y') to the pitch parameter, while keeping other parameters fixed. The pitch will dynamically change based on the Y-values of the data points.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/mapping.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmapping: {\n    volume: 0.4,\n    pan: 0,\n    noteDuration: 300,\n    pitch: 'y'\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Accessing Data with DataConnector in TypeScript\nDESCRIPTION: Use DataConnector to load and access external data effortlessly by importing specific connector types. This system supports bundling, which updates a type registry, making data connectors easy to manage via imports.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ts/Data/README.md#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport CSVConnector from 'dashboards/Data/Connectors/CSVConnector';\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst CSVConnector = Dashboards.DataConnector.types.CSVConnector;\n```\n\n----------------------------------------\n\nTITLE: Positioning and Animating Custom Elements in Highcharts\nDESCRIPTION: Demonstrates how to position and animate custom elements on a Highcharts chart, using different methods for initial placement and subsequent updates.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/renderer.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nthis.autumnBracket[isNew ? 'attr' : 'animate']({\n    d: [\n        ['M', left, top + 10],\n        ['L', left, top],\n        ['L', right, top],\n        ['L', right, top + 10]\n    ]\n});\nthis.autumnText[isNew ? 'attr' : 'animate']({\n    x: (right + left) / 2,\n    y: top - 5\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Flag Series in Highcharts\nDESCRIPTION: This snippet outlines the configuration options for creating a flag series in Highcharts. It details the required attributes for each flag, including its position, title, and text displayed on hover. The snippet also mentions additional options affecting the series placement and shape.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/flag-series.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\"type : 'flags',\n    data : [{\n        x : 0,      // Point where the flag appears\n        title : '', // Title of flag displayed on the chart \n        text : ''   // Text displayed when the flag are highlighted.\n    }],\n    onSeries : '',  // Id of which series it should be placed on. If not defined \n                    // the flag series will be put on the X axis\n    shape : 'flag'  // Defines the shape of the flags.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Highcharts Grid with Data\nDESCRIPTION: JavaScript code showing how to configure a Highcharts Grid instance with a simple data table containing product information.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/general.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nGrid.grid(\"container\", {\n  dataTable: {\n    columns: {\n      product: [\"Apple\", \"Pear\", \"Plum\", \"Banana\"],\n      weight: [100, 40, 0.5, 200],\n      price: [1.5, 2.53, 5, 4.5],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Title (CSS)\nDESCRIPTION: This CSS class styles the chart title text in Highcharts. It replaces the `title.style` option.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-title\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Label Annotations with Different Point Options\nDESCRIPTION: This example shows how to create multiple label annotations with various point configurations, including chart coordinates and axis-specific coordinates.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/annotations-module.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nannotations: [{\n      labels: [{\n          point: {\n              x: 3,\n              y: 129.2,\n              xAxis: 0,\n              yAxis: 0\n          }\n      }, {\n          point: {\n              x: 0,\n              y: 0\n          }\n      }, {\n          point: {\n              x: 5,\n              y: 100,\n              xAxis: 0\n          }\n      }],\n```\n\n----------------------------------------\n\nTITLE: Install Highcharts using NPM\nDESCRIPTION: This bash command shows how to install the Highcharts library using NPM (Node Package Manager).  This allows for managing Highcharts as a project dependency.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/highcharts-component.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n    npm install highcharts\n```\n\n----------------------------------------\n\nTITLE: Custom Dashboard Layout Configuration - JavaScript\nDESCRIPTION: This snippet illustrates how to define a custom layout structure for a dashboard in Highcharts. It disables the GUI mode and specifies the rendering options for components.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/layout-description.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n    gui: {\n        enabled: false\n    },\n    components: [{\n        renderTo: 'dashboard-col-0',\n        type: 'Highcharts',\n        chartOptions: {\n            chart: {\n                type: 'pie'\n            },\n            series: [{\n                data: [1,2,3]\n            }]\n        },\n    }]\n```\n\n----------------------------------------\n\nTITLE: Saving Annotation Color via Popup\nDESCRIPTION: Add event listener to save button for updating annotation properties dynamically\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/annotations-gui.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nHighcharts.chart('container', {\n    chart: {\n        events: {\n            load: function() {\n                const chart = this;\n                document.querySelectorAll('.highcharts-popup-annotations button')[0].addEventListener(\n                    'click',\n                    function() {\n                        const color = document.querySelectorAll(\n                            '.highcharts-popup-annotations input[name=\"stroke\"]'\n                        )[0].value;\n\n                        chart.currentAnnotation.update({\n                            shapes: [{\n                                fill: color\n                            }]\n                        });\n\n                        chart.annotationsPopupContainer.style.display = 'none';\n                    }\n                )\n            }\n        }\n    },\n    navigation: { ... },\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Highcharts Package with Script Tag\nDESCRIPTION: HTML implementation demonstrating how to use a custom Highcharts package with a traditional script tag. It loads the custom Highcharts file and creates a basic line chart in a container element.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/how-to-create-custom-highcharts-packages.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <script src=\"custom.src.js\"></script>\n    </head>\n    <body>\n        <div id=\"container\"></div>\n        <script>\n            Highcharts.chart('container', {\n                series: [{\n                    type: 'line',\n                    data: [1, 32, 42]\n                }]\n            });\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Filtering HTML Tags in Highcharts - JavaScript\nDESCRIPTION: This snippet demonstrates how to filter out unknown tags and attributes for security reasons in Highcharts. It allows adding specific tags and attributes from trusted sources to allow lists.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/labels-and-string-formatting.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighcharts.AST.allowedTags.push('blink');\nHighcharts.AST.allowedAttributes.push('data-value');\n// Allow links to the `tel` protocol\nHighcharts.AST.allowedReferences.push('tel:');\n```\n\n----------------------------------------\n\nTITLE: Adding a Caption to Highcharts Grid\nDESCRIPTION: Demonstrates how to add a title or caption above the grid using the caption configuration object.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/understanding-grid.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    caption: {\n        text: \"Title of the Grid\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Series in Packed Bubble Chart\nDESCRIPTION: Demonstrates how to set up a packed bubble chart with multiple series and different data formats. Includes examples of setting custom names, values, and colors for individual bubbles.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/packed-bubble.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighcharts.chart('container', {\n    chart: {\n        type: 'packedbubble',\n    },\n    series: [{\n        name: 'Coffee', // Coffee series\n        data: [{\n            // name property is used for the datalabel\n            // value property is used for the volume of the bubble\n            value: 12,\n            name: 'Bert'\n        }, {\n            value: 5,\n            name: 'John'\n        }, {\n            value: 10,\n            name: 'Sandra'\n        }, {\n            value: 7,\n            name: 'Cecile'\n        }]\n    }, {\n        name: 'Energy drinks', // Energy drinks series\n        data: [{\n            value: 10,\n            name: 'Tristan'\n        }]\n    }, {\n        name: 'Tea', // Tea series\n        data: [5, 6, 8, {\n            value: 10,\n            name: 'Mustapha',\n            color: 'pink'\n        }]\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Adding dashboard container in HTML\nDESCRIPTION: This HTML snippet shows how to add a div element where the dashboard will be rendered, utilizing a Vue ref for easy access.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/wrappers/dashboards-with-vue.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n\"<div ref=\\\"dashboardContainer\\\"></div>\"\n```\n\n----------------------------------------\n\nTITLE: Loading the Venn Module\nDESCRIPTION: This code snippet demonstrates how to load the Venn module in Highcharts using CDN links. It is necessary to include both `highcharts.js` and `venn.js` for the Venn series to work.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/venn-series.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script href=\"https://code.highcharts.com/highcharts.js\"></script>\n<script href=\"https://code.highcharts.com/modules/venn.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Clustering Algorithm Return Object in JavaScript\nDESCRIPTION: This snippet demonstrates the structure of the object that should be returned by a custom clustering algorithm function. It shows how clustered points should be grouped and formatted.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/marker-clusters.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  clusterId1: [{\n      x: 573,\n      y: 285,\n      index: 1 // point index in the data array\n  }, {\n      x: 521,\n      y: 197,\n      index: 2\n  }],\n  clusterId2: [{\n      ...\n  }]\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Content in Highcharts Dashboard\nDESCRIPTION: JavaScript example defining HTML components to render in a specified cell. Components can be defined using tagName and attributes, or as a raw HTML string.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/html-component.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncomponents: [{\n    type: 'HTML',\n    renderTo: 'dashboard-col-0',\n    elements: [{\n        tagName: 'h1',\n        textContent: 'Your text',\n        attributes: {\n            id: 'main-title',\n        }\n    }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Highcharts for VU Meter Simulation\nDESCRIPTION: This snippet outlines the key Highcharts configuration options needed to create a VU meter-like visualization. It includes settings for the red band, background color, and arc shape.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/gauge-vu-meter/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n####  Tip\nTo mimic the VU meter set the red band using the [innerRadius](https://api.highcharts.com/highcharts/pane.background.innerRadius) and [outerRadius](https://api.highcharts.com/highcharts/pane.background.outerRadius) features in a [plotBands](https://api.highcharts.com/highcharts/yAxis.plotBands) option. The back ground color is set using the [plotBackgroundColor](https://api.highcharts.com/highcharts/chart.plotBackgroundColor) option.\nUse the [pane](https://api.highcharts.com/highcharts/pane) feature to set up the arc shape and color.\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed Mapping for Sonification in JavaScript\nDESCRIPTION: This snippet demonstrates fixed mapping configuration where audio parameters receive constant values. Each data point will play the note 'a3' for 300 milliseconds at 0.4 volume in the center of the stereo field.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/mapping.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsonification: {\n    duration: 4000,\n    defaultInstrumentOptions: {\n        instrument: 'saxophone',\n        mapping: {\n            volume: 0.4,\n            pan: 0,\n            noteDuration: 300,\n            pitch: 'a3'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Table Caption in Highcharts Grid\nDESCRIPTION: This snippet shows how to properly configure a caption for a Highcharts Grid table, using proper heading elements for better accessibility with screen readers.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/accessibility.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ncaption: {\n  text: \"<h3>This is the caption</h3>\";\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Highcharts Renderer Object in JavaScript\nDESCRIPTION: Shows how to access the chart's renderer object within a Highcharts instance. This object can be used for custom drawing operations on the chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/freeform-drawing.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nchart.renderer\n```\n\n----------------------------------------\n\nTITLE: Adding a Venn Series\nDESCRIPTION: This code snippet demonstrates how to add a Venn series to a Highcharts chart. The `type` option is set to 'venn', and the `data` option is used to define the series data.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/venn-series.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n    series: [{\n        type: 'venn',\n        data: [/* Series data */]\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Gradients in Highcharts SVG Structure\nDESCRIPTION: This JavaScript snippet defines a gradient using the SVG structure in Highcharts. It specifies a linear gradient with two stop points, allowing for later customization and application in CSS. The structure utilizes the `defs` key, where the `tagName` for SVG elements such as `linearGradient` and `stop` is defined. Make sure to have Highcharts library loaded to use `Highcharts.setOptions` to manage options dynamically.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/gradients-shadows-and-patterns.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\ndefs: {\n    gradient0: { // key\n        tagName: 'linearGradient',\n        id: 'gradient-0',\n        x1: 0,\n        y1: 0,\n        x2: 0,\n        y2: 1,\n        children: [{\n            tagName: 'stop',\n            offset: 0\n        }, {\n            tagName: 'stop',\n            offset: 1\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Plot Line Label (CSS)\nDESCRIPTION: This CSS class styles the plot line labels in Highcharts.  The `className` option can be used on each line to distinguish them. It replaces the plotLines.label.style option.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-plot-line-label\"\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts and Timeline Module in HTML\nDESCRIPTION: This snippet shows how to include the necessary Highcharts scripts in an HTML file to use the Timeline chart functionality.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/timeline-series.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n<script src=\"https://code.highcharts.com/modules/timeline.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts Dashboards Package\nDESCRIPTION: Command to install the Highcharts Dashboards NPM package. Imports the Dashboards and layout module for integration into a project.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/html-component.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @highcharts/dashboards\n```\n\n----------------------------------------\n\nTITLE: Supported Color Format Examples in Highcharts\nDESCRIPTION: Examples of the three primary supported color formats in Highcharts for color interpolation: hex (6-digit), rgb, and rgba. Other formats like 3-digit hex colors, named colors, or gradients are not supported for interpolation.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/errors/23/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n#FFFFFF\nrgba(255,255,255)\nrgba(255,255,255,1)\n```\n\n----------------------------------------\n\nTITLE: Configuring SMA Indicator in Highcharts\nDESCRIPTION: Set up a Simple Moving Average (SMA) chart with linked data series, used for technical analysis of price movements and trend identification.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/stock/demo/sma-volume-by-price/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Configure SMA with linkedTo property\nplotOptions: {\n  sma: {\n    linkedTo: 'main-chart-id'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import Highcharts and Dashboards modules\nDESCRIPTION: This HTML snippet demonstrates how to import the Highcharts and Dashboards JavaScript files using CDN links.  The order of import is crucial, with 'dashboards.js' needing to be imported after 'highcharts.js'. The layout module is also imported.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/highcharts-component.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n    <script src=\"https://code.highcharts.com/highcharts.js\"></script>\n    <script src=\"https://code.highcharts.com/dashboards/dashboards.js\"></script>\n    <script src=\"https://code.highcharts.com/dashboards/modules/layout.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Modules for Dumbbell Chart\nDESCRIPTION: This snippet shows how to include the necessary Highcharts modules for creating a dumbbell chart. It requires loading the main Highcharts library, the 'highcharts-more' module, and the specific 'dumbbell.js' module.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/dumbbell-series.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n<script src=\"https://code.highcharts.com/highcharts-more.js\"></script>\n<script src=\"https://code.highcharts.com/modules/dumbbell.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Dashboards package with npm\nDESCRIPTION: This command installs the `@highcharts/dashboards` package, which is necessary to work with Highcharts dashboards.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/wrappers/dashboards-with-vue.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install @highcharts/dashboards\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Backgrounds for Fibonacci Retracement in Highcharts\nDESCRIPTION: This snippet sets up background fills between the horizontal lines of the Fibonacci retracement annotation. It iterates through the retracement levels and creates a rectangular shape between each pair of consecutive lines, using a different color for each background. The points for the rectangles are derived from the line endpoints.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/annotations-and-fibonacci-retracements.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst backgrounds = [];\nconst colors = [\n    'rgba(130, 170, 255, 0.4)',\n    'rgba(139, 191, 216, 0.4)',\n    'rgba(150, 216, 192, 0.4)',\n    'rgba(156, 229, 161, 0.4)',\n    'rgba(162, 241, 130, 0.4)',\n    'rgba(169, 255, 101, 0.4)'\n];\n\nlevels.forEach(function (level, i) {\n    const retracement = y2 - diff * level,\n        p1 = point(x1, retracement),\n        p2 = point(x2, retracement);\n\n    if (i > 0) {\n        backgrounds.push({\n            type: 'path',\n            points: [ lines[i - 1].points[0], lines[i - 1].points[1], lines[i].points[1], lines[i].points[0] ],\n            strokeWidth: 0,\n            fill: colors[i - 1]\n        });\n    }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Bubble Legend in Highcharts\nDESCRIPTION: This snippet demonstrates how to enable an automatic bubble legend in a Highcharts bubble chart without defining ranges. It utilizes the series data to create bubbles representing the range of values in the chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/bubble-legend.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    chart: {\n        type: 'bubble'\n    },\n    legend: {\n        bubbleLegend: {\n            enabled: true\n        }\n    },\n    series: [{\n        data: [\n            [9, 81, 63],\n            [98, 5, 89],\n            [51, 50, 73],\n            [41, 22, 14],\n            [58, 24, 20]\n        ]\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Column assignment one-dimensional data\nDESCRIPTION: This JavaScript code shows how to configure the `columnAssignment` option in Highcharts Dashboards to map a single column from the data connector to the series data. It assigns the column 'myData' to the 'data' property of the series with the ID 'mySeriesId'.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/highcharts-component.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncolumnAssignment: [{\n    seriesId: 'mySeriesId',\n    data: 'myData'\n}]\n```\n\n----------------------------------------\n\nTITLE: Range Modifier Example\nDESCRIPTION: This snippet demonstrates the usage of the Range modifier in Highcharts Dashboards. The Range modifier filters data based on minimum and maximum values within a specified column. The `column` property indicates the column to filter, and `minValue` and `maxValue` define the range limits.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-modifiers.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndataModifier: {\n    type: 'Range',\n    ranges: [{\n        column: 'year',\n        minValue: '1961',\n        maxValue: '2021'\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hover States in Highcharts Grid CSS\nDESCRIPTION: Creates hover state styling for a Highcharts Grid with alternating row colors. When hovering over cells, the row and column backgrounds change to a darker shade, and the hovered column receives a subtle red border.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/theming/theming-variables.md#2025-04-16_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.theme-custom {\n  --hcg-background: #aaaaaa;\n  --hcg-header-background: #888888;\n  --hcg-row-even-background: #aeaeae;\n  --hcg-cell-hovered-row-background: #999999;\n  --hcg-cell-hovered-column-background: #999999;\n  --hcg-cell-hovered-column-border-width: 1px;\n  --hcg-cell-hovered-column-border-color: #d27676;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Highcharts for Wind Rose Chart\nDESCRIPTION: This snippet outlines the essential configuration options for creating a wind rose chart in Highcharts. It specifies setting the chart type to 'column' for the column shape and enabling normal stacking for the series.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/polar-wind-rose/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n  chart: {\n    type: 'column'\n  },\n  plotOptions: {\n    series: {\n      stacking: 'normal'\n    }\n  },\n  // Other configuration options...\n});\n```\n\n----------------------------------------\n\nTITLE: Registering MQTT Connector in Highcharts Dashboards\nDESCRIPTION: Code snippet that registers the MQTTConnector as a Dashboards component. This is a required step when implementing the connector in your own application.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-pool-and-connectors.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Register the connector\nMQTTConnector.registerType('MQTT', MQTTConnector);\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Label Alignment to Plot Edges in Highcharts Pie Chart\nDESCRIPTION: This snippet shows how to set the dataLabels.alignTo option to 'plotEdges' in a Highcharts pie chart. This alignment method positions the ends of connectors at the same x position, with the widest label touching the nearest vertical edge of the plot area.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/pie-datalabels-alignment.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n    dataLabels: {\n        alignTo: 'plotEdges'\n    }\n```\n\n----------------------------------------\n\nTITLE: DataTable from DataConnector - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a DataTable from a DataConnector that retrieves data from an external CSV source. It includes loading the data asynchronously.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-table.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function loadData() {\n    const connector = new DataConnector.types.CSV({\n        csvURL: 'https://example.com/data.csv'\n    });\n\n    await connector.load();\n\n    const dataTable = connector.table;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Highcharts Grid Component Initialization\nDESCRIPTION: Full JavaScript configuration for creating a Grid component with data pool, layout, and component rendering.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/grid-component.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nDashboards.board('container', {\\n    dataPool: {\\n        connectors: [{\\n            id: 'data',\\n            type: 'CSV',\\n            options: {\\n                csv: `Food,Vitamin A,Iron\\n                Beef Liver,6421,6.5\\n                Lamb Liver,2122,6.5\\n                Cod Liver Oil,1350,0.9\\n                Mackerel,388,1\\n                Tuna,214,0.6`\\n            }\\n        }]\\n    },\\n    gui: {\\n        layouts: [{\\n            id: 'layout-1',\\n            rows: [{\\n                cells: [{\\n                    id: 'dashboard-col-1'\\n                }]\\n            }]\\n        }]\\n    },\\n    components: [{\\n        renderTo: 'dashboard-col-1',\\n        connector: {\\n            id: 'data'\\n        },\\n        type: 'Grid'\\n    }]\\n});\n```\n\n----------------------------------------\n\nTITLE: Disable Emitter in Highlight Synchronization\nDESCRIPTION: This code demonstrates how to configure the highlight synchronization to only handle incoming events by disabling the emitter. It enables a component to respond to hover events without triggering them.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/synchronize-components.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsync: {\n    highlight: {\n        enabled: true,\n        emitter: false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Annotation Appearance in Highcharts - JavaScript\nDESCRIPTION: Demonstrates how to use 'typeOptions' for customizing the appearance of Fibonacci retracement shapes, including setting custom background colors and line colors. This setup uses options specific to the Fibonacci annotation type.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/advanced-annotations.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n...\nlabelOptions: {\n    style: {\n        color: '#071952'\n    }\n},\ntypeOptions: {\n    backgroundColors: [\n        'rgb(7, 25, 82,   0.4)',\n        'rgb(8, 131, 149, 0.4)',\n        'rgb(7, 25, 82,   0.4)',\n        'rgb(8, 131, 149, 0.4)',\n        'rgb(7, 25, 82,   0.4)',\n        'rgb(8, 131, 149, 0.4)'\n    ],\n    lineColor: 'rgba(0, 0, 0, 0.8)'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dual Coding in Highcharts Sonification\nDESCRIPTION: This snippet shows how to map a single data property (y-value) to multiple audio parameters simultaneously. The Y-values affect volume, note duration, and pitch, emphasizing the importance of changes in Y-values.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/mapping.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsonification: {\n    duration: 4000,\n    defaultInstrumentOptions: {\n        instrument: 'saxophone',\n        mapping: {\n            pan: 0,\n            volume: 'y',\n            noteDuration: 'y',\n            pitch: 'y'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Pattern Fill Module in Highcharts - HTML\nDESCRIPTION: This snippet demonstrates how to include the pattern fill module in your Highcharts implementation. The pattern fill module is essential for applying visual patterns to chart areas, columns, or plot bands, enhancing series distinction.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/patterns-and-contrast.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/modules/pattern-fill.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Module\nDESCRIPTION: This TypeScript code imports the layout module from the Highcharts Dashboards package. This is required to use the built-in dashboard layout system.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/wrappers/dashboards-with-react.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"import '@highcharts/dashboards/es-modules/masters/modules/layout.src.js';\"\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Loading with ESM in Next.js\nDESCRIPTION: Example of Highcharts ESM usage in a Next.js client component, demonstrating how to load modules asynchronously in v12.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/version-12.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n'use client';\nimport Highcharts from 'highcharts/es-modules/masters/highcharts.src.js';\nimport 'highcharts/es-modules/masters/highcharts-more.src.js';\nimport 'highcharts/es-modules/masters/modules/exporting.src.js';\nimport 'highcharts/es-modules/masters/modules/accessibility.src.js';\n```\n\n----------------------------------------\n\nTITLE: Enabling Floating Range Selector\nDESCRIPTION: Shows how to create a floating range selector that does not occupy extra space, with optional vertical offset\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/range-selector.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrangeSelector: {\n\tfloating: true,\n\ty: 250\n},\n```\n\n----------------------------------------\n\nTITLE: Navigation Bindings Event Handlers\nDESCRIPTION: Configure event handlers for managing annotation interactions, including showing/hiding popups and button selection states\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/annotations-gui.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nnavigation: {\n    bindingsClassName: 'custom-gui-container',\n    events: {\n        showPopup: function(event) {\n            const chart = this.chart;\n            if (!chart.annotationsPopupContainer) {\n                chart.annotationsPopupContainer = document\n                  .getElementsByClassName('highcharts-popup-annotations')[0];\n            }\n\n            if (\n                event.formType === 'annotation-toolbar' &&\n                !chart.activeButton\n            ) {\n                chart.currentAnnotation = event.annotation;\n                chart.annotationsPopupContainer.style.display = 'block';\n            }\n        },\n        closePopup: function() {\n            this.chart.annotationsPopupContainer.style.display = 'none';\n            this.chart.currentAnnotation = null;\n        },\n        selectButton: function(event) {\n            event.button.classList.add('active');\n            this.chart.activeButton = event.button;\n        },\n        deselectButton: function(event) {\n            event.button.classList.remove('active');\n            this.chart.activeButton = null;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Language Options for YouTube Component\nDESCRIPTION: Configuration for customizing display names of YouTube component options in the dashboard editor. It specifies friendly labels for the videoId field and the component itself in the sidebar.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/custom-component.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n    editMode: {\n        enabled: true,\n        lang: {\n            videoId: 'Video ID',\n            sidebar: {\n                YouTube: 'YouTube'\n            }\n        },\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dashboard Options with getOptions()\nDESCRIPTION: Demonstrates two methods of accessing dashboard options using the getOptions() method from Highcharts Dashboards\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/get-options.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nDashboards.boards[].getOptions()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst board = Dashboards.board('container', { ... })\n\nboard.getOptions();\n```\n\n----------------------------------------\n\nTITLE: HTML structure for dashboard\nDESCRIPTION: This HTML snippet defines a div element with the ID \"dashboard\". This element will serve as the container where the Highcharts dashboard will be rendered.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/wrappers/dashboards-with-angular.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n\"<div id=\\\"dashboard\\\"></div>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Node Export Server\nDESCRIPTION: Global npm installation of Highcharts export server for command-line chart rendering\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/render-charts-serverside.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install highcharts-export-server -g\n```\n\n----------------------------------------\n\nTITLE: Creating Base Structure for Custom YouTube Component in Highcharts Dashboards\nDESCRIPTION: Initial code setup for a custom YouTube component in Highcharts Dashboards. It shows how to import necessary classes and create a class that inherits from the base Component class for further implementation.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/custom-component.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Component, ComponentRegistry } = Dashboards;\n\nclass YouTubeComponent extends Component {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Font Sizing for Wordcloud in JavaScript\nDESCRIPTION: This snippet defines how to customize font size based on word weight using the `deriveFontSize` function in a Highcharts word cloud. Higher font sizes might slow down the placement algorithm, while smaller fonts can lead to a more scattered layout.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/word-cloud-series.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nHighcharts.seriesTypes.wordcloud.prototype.deriveFontSize = function (relativeWeight) {\n   var maxFontSize = 25;\n  // Will return a fontSize between 0px and 25px.\n  return Math.floor(maxFontSize * relativeWeight);\n};\n```\n\n----------------------------------------\n\nTITLE: Pitch Array Mapping in Highcharts\nDESCRIPTION: Demonstrates how to map pitch to an array of notes that will be played for each data point.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/advanced-mapping.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmapping: {\n    volume: 0.7,\n    pitch: ['c4', 'e4', 'g4']\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Split Series in Packed Bubble Chart\nDESCRIPTION: Shows how to enable the split series option in a packed bubble chart, which separates different series into individual groups.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/packed-bubble.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nplotOptions: {\n    packedbubble: {\n        layoutAlgorithm: {\n            splitSeries: true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Simulation in Packed Bubble Chart\nDESCRIPTION: Illustrates how to enable or disable the simulation feature in a packed bubble chart, which affects the animation and final position of bubbles.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/packed-bubble.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nplotOptions: {\n    packedbubble: {\n        useSimulation: true\n    }\n}\nplotOptions: {\n    packedbubble: {\n        useSimulation: false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining custom SVG pattern\nDESCRIPTION: This snippet demonstrates how to define a custom SVG pattern using the `path` option. The `path` can be either an SVG path data string or an object with SVG attributes. It also shows how to define the `width`, `height`, `x` and `y` options of the pattern.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/pattern-fills.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    color: {\n        pattern: {\n            path: 'M 0 0 L 10 10 M 9 - 1 L 11 1 M - 1 9 L 1 11',\n            width: 10,\n            height: 10\n        }\n    },\n    keys: ['y', 'color.pattern.color'],\n    data: [\n        [1, '#f00'],\n        [2, '#00ff00'],\n        [3, 'blue']\n    ]\n}]\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Regression with Multiple Zones in JavaScript\nDESCRIPTION: Code snippet showing how to calculate linear regression with multiple zone lines. The code generates data points for five different lines representing different percentage zones of the main regression line.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/custom-technical-indicators.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar zoneDistance = this.options.params.zoneDistance / 100;\n\n// Calculate linear regression:\nfor (i = 0; i < n; i++) {\n  x = xData[i];\n  y = alpha * x + beta;\n\n  // Prepare arrays required for getValues() method\n  linearData[i] = [x, y * (1 - 2 * zoneDistance), y * (1 - zoneDistance), y, y * (1 + zoneDistance), y * (1 + 2 * zoneDistance)];\n  linearXData[i] = x;\n  linearYData[i] = [y * (1 - 2 * zoneDistance), y * (1 - zoneDistance), y, y * (1 + zoneDistance), y * (1 + 2 * zoneDistance)];\n}\n\nreturn {\n  xData: linearXData,\n  yData: linearYData,\n  values: linearData\n};\n```\n\n----------------------------------------\n\nTITLE: Import Highcharts and Dashboards modules (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows how to import the Highcharts and Dashboards modules using ES module syntax. It also includes importing and initializing the layout module. The `connectHighcharts` method connects Highcharts to the Dashboards plugin, allowing you to use Highcharts charts as components in your dashboard.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/highcharts-component.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n    import * as Highcharts from 'highcharts';\n    import * as Dashboards from '@highcharts/dashboards';\n    import LayoutModule from '@highcharts/dashboards/modules/layout';\n\n    LayoutModule(Dashboards);\n\n    Dashboards.HighchartsPlugin.custom.connectHighcharts(Highcharts);\n    Dashboards.PluginHandler.addPlugin(Dashboards.HighchartsPlugin);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Options for Highcharts Styled Mode\nDESCRIPTION: This JavaScript code utilizes the Highcharts `setOptions` method to globally enable the `styledMode` for all charts in the application, thus enforcing a consistent look and feel across all Highcharts components without needing to configure each one individually.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/light-dark-theme.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.setOptions({\n    chart: {\n        styledMode: true\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Navigator Series in Highcharts Stock CSS\nDESCRIPTION: CSS class for styling the navigator series in Highcharts Stock. This replaces various JavaScript options for the navigator series appearance.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_60\n\nLANGUAGE: CSS\nCODE:\n```\n.highcharts-navigator-series\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Annotation Popup Dialog\nDESCRIPTION: Create a dialog window HTML structure for customizing annotation properties with color input\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/annotations-gui.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"highcharts-popup highcharts-popup-annotations\">\n    <div class=\"highcharts-popup-wrapper\">\n        <label for=\"stroke\">Color</label>\n        <input type=\"color\" name=\"stroke\" value=\"#000000\"/>\n    </div>\n    <button class=\"button\">Save</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Including Dashboards via Script Tag\nDESCRIPTION: This snippet shows how to include Highcharts Dashboards JavaScript files directly in the head section of an HTML document.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/installation.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/dashboards/dashboards.js\"></script>\n<script src=\"https://code.highcharts.com/dashboards/modules/layout.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Type for 3D Pyramid in Highcharts\nDESCRIPTION: This code snippet shows how to set the chart type to 'pyramid3d' either at the chart level or in the series options of a Highcharts configuration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/pyramid-3d.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchart.type: 'pyramid3d'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nseries.pyramid3d.type: 'pyramid3d'\n```\n\n----------------------------------------\n\nTITLE: Configuring Breadcrumbs in Hierarchical Series\nDESCRIPTION: This snippet illustrates how to configure breadcrumbs for treemap and sunburst series in Highcharts. Breadcrumbs are nested under the series configuration and are enabled by default. The snippet shows disabling the full path display by setting showFullPath to false.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/breadcrumbs.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nseries: [{\n    breadcrumbs: {\n        showFullPath: false\n    },\n    type: 'treemap',\n    ...\n}]\n```\n\n----------------------------------------\n\nTITLE: Grid Component with Embedded Data Table in JavaScript\nDESCRIPTION: This code snippet provides an example of configuring a Grid component in Highcharts Dashboards with embedded data. It specifies the 'renderTo' attribute and employs a dataTable object for defining data series directly, useful for visualization in a table format without external data connectors.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/types-of-components.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    renderTo: 'dashboard-1',\n    type: 'Grid',\n    dataTable: {\n        columns: {\n            product: ['Apples', 'Pears', 'Plums', 'Bananas'],\n            weight: [100, 40, 0.5, 200],\n            price: [1.5, 2.53, 5, 4.5]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Dashboard Background and Wrapper - CSS\nDESCRIPTION: This snippet illustrates how to apply background styling to the entire dashboard and its wrapper using the default CSS class names.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/style-by-css.md#2025-04-16_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.highcharts-dashboards,\n.highcharts-dashboards-wrapper {\n    background-color: #f2f9fd;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Highcharts Navigator Series for Renko in JavaScript\nDESCRIPTION: The snippet provides the setup for embedding a navigator series in the Highcharts Renko setup, facilitating a smaller overview chart below the main one. By setting the 'type' in the 'navigator' configuration to 'renko', traders can quickly reference larger trends without switching views frequently.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/renko.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnavigator: {\n    series: {\n        type: 'renko'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Method for YouTube Component\nDESCRIPTION: Implementation of the update method for the YouTube component to handle changes to editable properties. It updates the iframe's source URL when the videoId changes and manages the loading state.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/custom-component.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n    async update(newOptions, shouldRerender) {\n        super.update.call(this, newOptions, shouldRerender);\n\n        this.youTubeElement.setAttribute(\n            'src',\n            'https://www.youtube.com/embed/' + this.options.videoId\n        );\n\n        this.cell.setLoadingState(false);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining a Speech Track in Highcharts - JavaScript\nDESCRIPTION: This code snippet demonstrates how to define a speech track within a Highcharts series. The `type` of the track is set to 'speech', allowing for speech synthesis features. The snippet shows configuration parameters including volume and text to be spoken.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/speech.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nseries: [{\n    data: [1, 2, 3, 4, 5],\n    sonification: {\n        tracks: [{\n            // This is an instrument track\n            instrument: 'flute',\n            mapping: {\n                volume: 0.8\n            }\n        }, {\n            // This is a speech track\n            type: 'speech',\n            mapping: {\n                volume: 0.4,\n                text: 'Hello world'\n            }\n        }]\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Spiderweb Chart Properties in Highcharts\nDESCRIPTION: Key configuration properties for customizing a spiderweb chart, including tickmark placement, line width, and grid line interpolation settings. These settings help achieve a hexagonal shape and clean axis appearance.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/polar-spider/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  xAxis: {\n    tickmarkPlacement: 'on',\n    lineWidth: 0\n  },\n  yAxis: {\n    gridLineInterpolation: 'polygon'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Setup for Highcharts Audio Chart\nDESCRIPTION: HTML structure required for implementing an audio chart with Highcharts, including necessary script imports for highcharts.js, sonification.js, and accessibility.js modules, along with a button to trigger the audio playback and a container for the chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/getting-started.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n<script src=\"https://code.highcharts.com/modules/sonification.js\"></script>\n<script src=\"https://code.highcharts.com/modules/accessibility.js\"></script>\n\n<button id=\"sonify\">Play chart</button>\n<div id=\"container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Setting Line Width in Highcharts\nDESCRIPTION: This code snippet demonstrates how to alter the width of a line in a Highcharts series. The lineWidth option controls the thickness of the line connecting the data points.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/series.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    data: [216.4, 194.1, 95.6],\n    lineWidth: 5}],\n```\n\n----------------------------------------\n\nTITLE: Configuring Drag Between Series in Packed Bubble Chart\nDESCRIPTION: Demonstrates how to enable dragging bubbles between different series in a packed bubble chart, allowing users to change point-related series.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/packed-bubble.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayoutAlgorithm: {\n    splitSeries: true,\n    dragBetweenSeries: true\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Series in Navigator (JavaScript)\nDESCRIPTION: This snippet enables the display of specific series in the Navigator. By setting the 'showInNavigator' property to true within the series configuration, selected series can be visualized within the Navigator, enhancing data representation and interaction.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/navigator.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nseries: {\n    showInNavigator: true\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Button Binding for Circle Annotation\nDESCRIPTION: Create an HTML button with a specific class to bind it to circle annotation events in Highcharts\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/annotations-gui.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"custom-gui-container\">\n  <button class=\"highcharts-circle-annotation\">Add Circle</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Timestamp Data Format in Highcharts\nDESCRIPTION: Shows the standard format for datetime data in Highcharts using JavaScript timestamps (milliseconds since 1970-01-01). This is the uncompressed format that can result in larger file sizes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/data-compression.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndata: [\n    [1577836800000,1],\n    [1577840400000,1],\n    [1577844000000,1],\n    [1577847600000,1],\n    [1577851200000,1],\n    [1577854800000,1],\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Customizing Input and Button Positioning\nDESCRIPTION: Demonstrates how to individually position input boxes and buttons using align, x, and y properties\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/range-selector.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrangeSelector: {\n\tinputPosition: {\n\t\talign: 'left',\n\t\tx: 0,\n\t\ty: 0\n\t},\n\tbuttonPosition: {\n\t\talign: 'right',\n\t\tx: 0,\n\t\ty: 0\n\t}\n},\n```\n\n----------------------------------------\n\nTITLE: Including Highcharts Grid Lite from Local Server\nDESCRIPTION: HTML code to load Grid Lite from files hosted on your own server after downloading them from highcharts.com.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/installation.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"../code/grid/grid-lite.js\"></script>\n<link rel=\"stylesheet\" href=\"../code/grid/css/grid.css\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Offset Connector Shape in Highcharts Pie Chart\nDESCRIPTION: This snippet demonstrates how to set the dataLabels.connectorShape option to 'fixedOffset' in a Highcharts pie chart. This is the default connector shape.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/pie-datalabels-alignment.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n    dataLabels: {\n        connectorShape: 'fixedOffset'\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Set Data\nDESCRIPTION: This code snippet shows how to define data for two sets, A and B, with a proportional area of 2 each. The `sets` property specifies the set, and the `value` property defines the area.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/venn-series.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Series data\ndata: [{\n    sets: ['A'],\n    value: 2\n}, {\n    sets: ['B'],\n    value: 2\n}]\n```\n\n----------------------------------------\n\nTITLE: Setting Simultaneous Playback for Multiple Series\nDESCRIPTION: JavaScript code snippet showing how to configure sonification to play multiple data series simultaneously rather than sequentially, with a specified duration of 4000 milliseconds.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/getting-started.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nsonification: {\n    duration: 4000,\n    order: 'simultaneous'\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Border Properties in Highcharts Grid CSS\nDESCRIPTION: Defines border styling for a Highcharts Grid with varying border widths for different elements. Sets a thick outer border, thinner row borders, medium column borders, and applies a unique dashed style to header column borders.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/theming/theming-variables.md#2025-04-16_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.theme-custom {\n  --hcg-border-width: 3px;\n  --hcg-border-color: #000000;\n  --hcg-row-border-width: 1px;\n  --hcg-column-border-width: 2px;\n  --hcg-header-column-border-color: #eeeeee;\n  --hcg-header-column-border-style: dashed;\n}\n```\n\n----------------------------------------\n\nTITLE: Including Highcharts Grid Lite via CDN\nDESCRIPTION: HTML code to load Grid Lite from a CDN by adding JavaScript and CSS files to a page's head section.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/installation.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@highcharts/grid-lite/grid-lite.js\"></script>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@highcharts/grid-lite/css/grid.css\" />\n```\n\n----------------------------------------\n\nTITLE: Including Standalone Navigator Module in HTML\nDESCRIPTION: This snippet illustrates how to include the Standalone Navigator module in an HTML page, either separately or as a bundle with Highcharts. This setup is essential for utilizing the navigator's functionalities, providing users with options to integrate it modularly or as a full package.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/standalone-navigator.md#2025-04-16_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n<script src=\"https://code.highcharts.com/modules/navigator.js\"></script>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://code.highcharts.com/standalone-navigator.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Linked Series with Linear Regression in Highcharts\nDESCRIPTION: Demonstrates using the linkedTo option to connect the linear regression series to the main series. Ensures data continuity and proper integration in Highcharts visualizations.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/custom-technical-indicators.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nseries: [{\n  id: 'main',\n  type: 'scatter',\n  data: [ ... ]\n}, {\n  type: 'linearregression',\n  linkedTo: 'main'\n}]\n```\n\n----------------------------------------\n\nTITLE: Forcing Data Grouping in Highcharts Stock JS\nDESCRIPTION: This snippet shows how to force data grouping in a Highcharts Stock chart by setting the 'forced' property to true. The grouping is specified to happen at one-second intervals, aiding in smoother data representation.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/data-grouping.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighcharts.stockChart('container', {\\n  series: [{\\n    dataGrouping: {\\n      forced: true,\\n      units: [['second', [1]]]\\n    },\\n    data: [...]\\n  }]\\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts Grid Resources\nDESCRIPTION: Code snippet showing how to import the required JavaScript and CSS files for Highcharts Grid from a CDN.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/general.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@highcharts/grid-lite/grid-lite.js\"></script>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@highcharts/grid-lite/css/grid.css\" />\n```\n\n----------------------------------------\n\nTITLE: Backward Compatible Loading for Highcharts Modules\nDESCRIPTION: Code example showing how to support both pre-v12 and v12 module loading patterns for better compatibility during migration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/version-12.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Highcharts from 'highcharts';\nimport HighchartsExport from 'highcharts/modules/exporting';\ntypeof HighchartsExport === 'function' && HighchartsExport(Highcharts);\n```\n\n----------------------------------------\n\nTITLE: Defining 3D Coordinates for Scatter Charts in JavaScript\nDESCRIPTION: This snippet illustrates adding a Z coordinate to scatter chart data points, allowing points to be represented in a 3D space. Points can be defined as objects or arrays.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/3d-charts.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n{x: 1, y: 1, z: 1} is the same point as [1,1,1]\n```\n\n----------------------------------------\n\nTITLE: Managing Connectors with DataPool in TypeScript\nDESCRIPTION: DataPool enables lazy loading of data connectors, supporting deferred data requests and ensuring single-instance loading. Once configured, you can request connectors or tables, receiving them when available.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ts/Data/README.md#2025-04-16_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst dataPool = new DataPool({\n    connectors: [{\n        id: 'my-google-spreadsheet',\n        type: 'GoogleSheets',\n        options: {\n            googleAPIKey: 'XXXXX',\n            googleSpreadsheetKey: 'XXXXX',\n        }\n    }]\n});\ndataPool.setConnectorOptions({\n    name: 'my-csv',\n    type: 'CSV',\n    options: {\n        csvURL: 'https://domain.example/data.csv'\n    }\n});\nconst googleConnector = await dataPool.getConnector('my-google-spreadsheet');\nconst csvTable = await dataPool.getConnectorTable('my-csv');\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst googleConnector1 = await dataPool.getConnector('my-google-spreadsheet');\nconst googleConnector2 = await dataPool.getConnector('my-google-spreadsheet');\nconst googleConnector3 = await dataPool.getConnector('my-google-spreadsheet');\n```\n\n----------------------------------------\n\nTITLE: Defining a Color as a Pattern Fill in Highcharts\nDESCRIPTION: This JavaScript snippet provides an example of how to define a color using a pattern in Highcharts. The pattern options can be customized as needed.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/colors.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncolor: {\n    pattern: {\n        // Pattern options here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Step Line Chart in Highcharts\nDESCRIPTION: This code snippet demonstrates how to enable and configure the step option for a line chart in Highcharts. The step option allows the line to be drawn as a series of steps rather than a continuous line. The 'left', 'center', or 'right' value determines the positioning of the step.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/line-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nplotOptions: {\n    series: {\n        step: 'left' // or 'center' or 'right'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Highcharts Tooltip for Renko Series in JavaScript\nDESCRIPTION: This snippet showcases tooltip customization within a Renko series on Highcharts. It utilizes HTML formats to provide richer visual tooltips, informing viewers with dynamic data points reflecting color styling and data values. Tooltips enhance data point insights, yet require HTML support in the viewing environment.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/renko.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntooltip: {\n    pointFormat: '<span> style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}<br/>'\n}\n```\n\n----------------------------------------\n\nTITLE: Building Horizontal Lines for Fibonacci Retracement in Highcharts\nDESCRIPTION: This code snippet generates horizontal lines for the Fibonacci retracement annotation using Highcharts. It iterates through the calculated retracement levels, creates a line shape for each level, and adds it to the `lines` array. The `point` function (not provided in the snippet) is assumed to create Highcharts point objects from x and y coordinates.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/annotations-and-fibonacci-retracements.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst lines = [];\n\nlevels.forEach(function (level, i) {\n        const retracement = y2 - diff * level,\n        p1 = point(x1, retracement),\n        p2 = point(x2, retracement);\n\n        lines.push({\n            type: 'path',\n            points: [ p1, p2 ],\n            stroke: 'grey'\n        });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts Dashboard CSS - CSS\nDESCRIPTION: This snippet shows how to import the necessary CSS files for styling Highcharts dashboards. Importing 'dashboards.css' is mandatory, whereas 'datagrid.css' is needed if the Grid component is used.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/style-by-css.md#2025-04-16_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n@import url(\"https://code.highcharts.com/dashboards/css/dashboards.css\");\n@import url(\"https://code.highcharts.com/dashboards/css/datagrid.css\");\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Axis Labels (CSS)\nDESCRIPTION: This CSS class styles the axis labels in Highcharts. It replaces the `axis.labels.style` option. Use `_.highcharts-xaxis` / `_.highcharts-yaxis` parent items or className options to distinguish axes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-axis-labels\"\n```\n\n----------------------------------------\n\nTITLE: Creating Standalone Custom Themes in Highcharts Grid\nDESCRIPTION: Shows how to apply a completely custom theme without inheriting from the default theme. This configuration replaces all default styling with custom styles.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/theming/theming.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  rendering: {\n    theme: \"theme-custom\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Selection Marker (CSS)\nDESCRIPTION: This CSS class styles the rectangle that appears when mouse-dragging for zooming in Highcharts. It replaces the chart.selectionMarkerFill option.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-selection-marker\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF Font for Non-Latin Character Support\nDESCRIPTION: Configuration for loading custom TTF font files to support Unicode characters in PDF exports, using Noto Sans font family\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/client-side-export.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexporting: {\n    pdfFont: {\n        normal: 'https://www.highcharts.com/samples/data/fonts/NotoSans-Regular.ttf',\n        bold: 'https://www.highcharts.com/samples/data/fonts/NotoSans-Bold.ttf',\n        bolditalic: 'https://www.highcharts.com/samples/data/fonts/NotoSans-BoldItalic.ttf',\n        italic: 'https://www.highcharts.com/samples/data/fonts/NotoSans-Italic.ttf'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Axis (CSS)\nDESCRIPTION: This CSS class targets the top-level group for axis elements in Highcharts.  It provides a base for styling axes, with additional classes like `.highcharts-xaxis`, `.highcharts-yaxis`, and `.highcharts-coloraxis` for more specific targeting.  A custom class name can also be applied via the className option.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-axis\"\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts Dashboards via NPM\nDESCRIPTION: This snippet provides the command to install Highcharts and Dashboards module via npm. It requires node and npm setup on your system.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/edit-mode.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install highcharts @highcharts/dashboards\n```\n\n----------------------------------------\n\nTITLE: Debugging Highcharts Series Options in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to cast series options explicitly to a desired type for more helpful error messages when debugging Highcharts options in TypeScript.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/highcharts-typescript-declarations.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nseries: [{\n    type: \"line\",\n    data: [1, 2, \"3\", 4, 5]\n} as Highcharts.LineSeriesOptions]\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Dashboard\nDESCRIPTION: This HTML snippet defines a div element with the ID \"dashboard\". This element will serve as the container where the Highcharts dashboard will be rendered.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/wrappers/dashboards-with-react.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n\"<div id=\\\"dashboard\\\"></div>\"\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts pattern-fill.js Module\nDESCRIPTION: This snippet demonstrates how to load the `pattern-fill.js` module from the Highcharts CDN. Loading this module enables the use of pattern fills in Highcharts charts. This is a prerequisite for using any pattern fill functionality.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/pattern-fills.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/modules/pattern-fill.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Loading Data with URL in DataConnector in TypeScript\nDESCRIPTION: Load data using a URL with a DataConnector. This approach allows asynchronous data retrieval from external CSV sources, with appropriate exception handling during the load operation.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ts/Data/README.md#2025-04-16_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst connector = new CSVConnector({\n    csvURL: 'https://domain.example/source.csv'\n});\ntry {\n    await connector.load();\n}\ncatch (error) {\n    console.error(error);\n}\nconnector.table.getRowCount() > 0;\n```\n\n----------------------------------------\n\nTITLE: Loading Stock Tools CSS\nDESCRIPTION: This snippet shows how to load the necessary CSS files for the built-in Stock Tools toolbar in Highcharts Stock, including styles for the GUI and annotation popups.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/stock-tools.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://code.highcharts.com/css/stocktools/gui.css\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://code.highcharts.com/css/annotations/popup.css\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Layout Algorithm for Highcharts Treemap in JavaScript\nDESCRIPTION: Shows how to create and implement a custom layout algorithm for Highcharts treemap, including function structure and integration with the chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/treemap.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myFunction(parent, children) {\n    childrenAreas = [];\n    children.forEach(function(child) {\n        // Do some calculations\n\n        // These return values are required for each child\n        childrenAreas.push({\n            x: someXValue,\n            y: someYValue,\n            width: someWidth,\n            height: someHeight\n        });\n    });\n    return childrenAreas;\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.seriesTypes.treemap.prototype.myCustomAlgorithm = myFunction;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new Highcharts.Chart({\n    ...\n    series: [{\n       layoutAlgorithm: \"myCustomAlgorithm\",\n       ...\n    }],\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Morningstar TimeSeriesConnector for Dividend Data in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Morningstar TimeSeriesConnector instance configured to fetch dividend time series data for a specific security. It requires a Postman environment JSON for authentication and specifies the series type as 'Dividend'.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/morningstar/time-series/dividend.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dividendConnector = new HighchartsConnectors.Morningstar.TimeSeriesConnector({\n    postman: {\n        environmentJSON: postmanJSON\n    },\n    series: {\n        type: 'Dividend'\n    },\n    securities: [{\n        id: 'F0GBR04S23',\n        idType: 'MSID'\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom HTML Layout Without GUI - HTML & JavaScript\nDESCRIPTION: This snippet shows how to create a custom HTML layout styled with CSS or other frameworks like Tailwind or Bootstrap, while disabling the automatic layout creator. It emphasizes the need for unique IDs for each container.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/frequently-asked-questions.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\">\n    <div>\n        <div id=\"dashboard-col-0\"></div>\n    </div>\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngui: {\n    enabled: false\n}\ncomponents: [{\n    renderTo: 'dashboard-col-0',\n    type: 'Highcharts',\n    chartOptions: {\n        chart: {\n            type: 'pie'\n        },\n        series: [{data: [1,2,3]}]\n    },\n}]\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum and Maximum Bubble Sizes in Packed Bubble Chart\nDESCRIPTION: Shows how to control the size range of bubbles in a packed bubble chart by setting minSize and maxSize options. This is useful for datasets with many small or large values.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/packed-bubble.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighcharts.chart('container', {\n    chart: {\n        type: 'packedbubble'\n    },\n    plotOptions: {\n        packedbubble: {\n            minSize: 15,\n            maxSize: 300\n        }\n    },\n    series: [{\n        data: [1, 75, 112, 180, 20, 3000]\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Formatting for Column Cells in Highcharts Grid\nDESCRIPTION: Example of time formatting in Highcharts Grid columns using date format specifiers. The format string uses Highcharts time formatting syntax with the {value:%[dbY]} pattern for dates.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/columns.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncolumns: [\n    {\n        id: 'date',\n        header: {\n            format: 'Date of purchase'\n        },\n        cells: {\n            format: '{value:%[dbY]}'\n        }\n    }\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Loading Simple Data with Regular Intervals in Highcharts using PHP\nDESCRIPTION: Demonstrates how to fetch numeric values from MySQL and format them for a Highcharts series with regular intervals. The code uses a basic PHP loop to build an array of values that are then joined into a comma-separated string for the chart configuration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/working-with-data/data-from-a-database.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nwhile ($row = mysql_fetch_array($result)) {\n   $data[] = $row['value'];\n}\n?>\nvar chart = new Highcharts.Chart({\n      chart: {\n         renderTo: 'container'\n      },\n      series: [{\n         data: [<?php echo join($data, ',') ?>],\n         pointStart: 0,\n         pointInterval\n      }]\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts CSS from node_modules using link tag\nDESCRIPTION: This snippet demonstrates how to load the Highcharts CSS file from the `node_modules` directory using a `<link>` tag.  This is applicable when using Highcharts with NPM and the `node_modules` directory is accessible from the server. If not, the CSS file needs to be copied to a public location.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"./node_modules/highcharts/css/highcharts.css\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Y-Axis Plot Bands in Highcharts\nDESCRIPTION: Demonstrates how to add plot bands to the Y-axis to highlight specific value ranges using color and configuration options\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/stock/demo/yaxis-plotbands/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyAxis: {\n  plotBands: [{\n    from: startValue,\n    to: endValue,\n    color: 'rgba(68, 170, 213, 0.2)',\n    label: {\n      text: 'Label for Band'\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Plot Background (CSS)\nDESCRIPTION: This CSS class styles the plot area background in Highcharts. It's drawn behind the grid. It replaces styling options such as chart.plotBackgroundColor.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-plot-background\"\n```\n\n----------------------------------------\n\nTITLE: Saving Data with DataConnector in TypeScript\nDESCRIPTION: Save data using a DataConnector, depending on the type and context. Serverless scenarios utilize converters, while external source-based connectors can save data back if supported by permissions.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ts/Data/README.md#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst connector = new CSVConnector({\n    csv: 'column\\n1\\n2\\n3\\n'\n});\nconnector.converter.export(connector) === 'column\\n1\\n2\\n3\\n';\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst connector = new HTMLTableConnector({\n    tableElement: document.getElementById('the_table')\n});\ntry {\n    await connector.save();\n}\ncatch (error) {\n    console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Standalone Navigator in Highcharts\nDESCRIPTION: This code snippet demonstrates how to initialize the Standalone Navigator using the Highcharts library. It requires the container ID and configuration options specific to the navigator. Users can adjust the viewing range of associated charts through a navigator interface. Ensure the Highcharts library is included in the project prior to initializing.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/standalone-navigator.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighcharts.navigator('container', {\n    // Standalone Navigator configuration options\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Navigator on Opposite Side in Inverted Charts (JavaScript)\nDESCRIPTION: This snippet shows how to position the Navigator on the opposite side of the chart in cases where the chart is inverted. Setting the 'opposite' property to true allows for flexible UX in data visualization.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/navigator.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nnavigator: {\n    opposite: true\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Tick Marks (CSS)\nDESCRIPTION: This CSS class styles the tick marks along the axis in Highcharts. It replaces the `axis.tickColor` and `axis.tickWidth` options. Use `_.highcharts-xaxis` / `_.highcharts-yaxis` parent items or className options to distinguish axes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-tick\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RequireJS for Highcharts\nDESCRIPTION: This JavaScript snippet demonstrates how to configure RequireJS to work with the Highcharts package. It sets up the package name and main file, and specifies the path to the Highcharts library.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/highcharts-typescript-declarations.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire.config({\n    packages: [{\n        name: 'highcharts',\n        main: 'highcharts'\n    }],\n    paths: {\n        'highcharts': 'https://code.highcharts.com'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Hidden Legend Items in Highcharts with CSS\nDESCRIPTION: This CSS class name is used for a legend item that represents a hidden series or point in Highcharts. It replaces legend.itemHiddenStyle, allowing for custom styling of hidden legend items via CSS.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_51\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-legend-item-hidden\n\n```\n\n----------------------------------------\n\nTITLE: Defining Component and Cell Structure - JavaScript\nDESCRIPTION: This snippet illustrates how to define a dashboard layout with components in Highcharts, enabling a GUI layout creator. The component configuration specifies the type of chart and data for rendering.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/frequently-asked-questions.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngui: {\n    enabled: true,\n    layouts: [{\n        id: 'layout-1',\n        rows: [{\n            cells: [{\n                id: 'dashboard-col-0'\n            }]\n        }]\n    }]\n},\ncomponents: [{\n    renderTo: 'dashboard-col-0',\n    type: 'Highcharts',\n    chartOptions: {\n        chart: {\n            type: 'pie'\n        },\n        series: [{data: [1,2,3]}]\n    },\n}]\n```\n\n----------------------------------------\n\nTITLE: Adding Highcharts Boost Module for Improved Rendering Performance\nDESCRIPTION: Instructions for including the Highcharts Boost module to enhance chart rendering performance. The module is added by including 'module/boost.js' in the Highcharts setup, requiring no additional configuration or code changes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/scatter-boost/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n####  Tip\nJust add the Highcharts boost module ('module/boost.js') to your Highcharts charts to improve the rendering performance without any configuration or extra code.\nRead more about the boost module [here](https://www.highcharts.com/docs/advanced-chart-features/boost-module).\n```\n\n----------------------------------------\n\nTITLE: PhantomJS Start as a Web Server\nDESCRIPTION: This code snippet demonstrates how to start the PhantomJS export server as a web server. This allows for faster conversion of Highcharts configurations, as the PhantomJS process doesn't need to be started for each conversion. Note that this setup isn't meant to be exposed as a general production server.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/legacy-export-servers.md#2025-04-16_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nphantomjs highcharts-convert.js -host 127.0.0.1 -port 3003\n```\n\n----------------------------------------\n\nTITLE: Styling Box Plot Series in Highcharts with CSS\nDESCRIPTION: These CSS class names are used to style the various graphic items for box plot series in Highcharts. The box, median, stem, and whisker are nested inside the series group. These classes replace color, stroke widths, and dash style options for box plots, enabling customization via CSS.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_27\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-boxplot-series\n.highcharts-boxplot-box\n.highcharts-boxplot-median\n.highcharts-boxplot-stem\n.highcharts-boxplot-whisker\n\n```\n\n----------------------------------------\n\nTITLE: Including Accessibility Module in Highcharts - HTML\nDESCRIPTION: This code snippet demonstrates how to include the Accessibility module alongside Highcharts' core JS files. It ensures that charts are accessible to users with disabilities and can enhance the overall usability of visualization.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/accessibility/accessibility-module.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/modules/accessibility.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Styling Plot Band Labels in Highcharts with CSS\nDESCRIPTION: This CSS class name is used to style plot band labels in Highcharts. Use the className option on each band to distinguish them. It replaces the plotBands.label.style option, allowing for custom label styling through CSS.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_48\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-plot-band-label\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Morningstar Growth Time Series Connector in Highcharts\nDESCRIPTION: Demonstrates how to initialize a TimeSeriesConnector instance for fetching growth time series data. The connector is configured with Postman environment settings and security identifier parameters for data retrieval.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/morningstar/time-series/growth.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst growthConnector = new HighchartsConnectors.Morningstar.TimeSeriesConnector({\n    postman: {\n        environmentJSON: postmanJSON\n    },\n    series: {\n        type: 'Growth'\n    },\n    securities: [{\n        id: 'F0GBR04S23',\n        idType: 'MSID'\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Colors in Highcharts Grid CSS\nDESCRIPTION: Sets up a theming configuration with different background colors for the grid, headers, and even rows. Also demonstrates adjusting header text color for better contrast against the darker background.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/theming/theming-variables.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.theme-custom {\n  --hcg-background: #dedede;\n  --hcg-header-background: #505050;\n  --hcg-row-even-background: #cbcbcb;\n  --hcg-header-color: #dedede;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Funnel Chart Size and Neck Options\nDESCRIPTION: Demonstrates how to customize funnel chart dimensions and neck properties using Highcharts configuration options\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/funnel-series.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  plotOptions: {\n    funnel: {\n      neckWidth: 100,\n      neckHeight: \"25%\",\n      width: \"80%\",\n      height: \"70%\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Sorting with xAxis Labels Animation and Zones\nDESCRIPTION: This example shows how to configure data sorting with xAxis labels animation and color zones in Highcharts.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/data-sorting.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    series: [{\n        zoneAxis: 'x',\n        zones: [{\n            value: 1,\n            color: '#ff4d40'\n        }],\n        dataLabels: {\n            enabled: true,\n            format: '{y:,.2f}'\n        },\n        dataSorting: {\n            enabled: true\n        },\n        data: [...]\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Musical Scale Mapping in Highcharts\nDESCRIPTION: Shows how to map pitch within a musical scale using preset scales.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/advanced-mapping.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmapping: {\n    volume: 0.7,\n    pitch: {\n        mapTo: 'y',\n        min: 'c3',\n        max: 'g7',\n        scale: Highcharts.sonification.Scales.minor\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts Dashboards in JavaScript\nDESCRIPTION: JavaScript code to import Highcharts Dashboards and its layout module, integrating them into the project. Necessary for constructing layouts.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/html-component.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Dashboards from '@highcharts/dashboards';\nimport LayoutModule from '@highcharts/dashboards/modules/layout';\n\nLayoutModule(Dashboards);\n```\n\n----------------------------------------\n\nTITLE: Styling Legend Items in Highcharts with CSS\nDESCRIPTION: This CSS class name is used for styling individual legend items in Highcharts. It replaces legend.itemStyle, and legend.itemHoverStyle when the `:hover` pseudo-class is added.  This enables custom styling of legend items through CSS.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_50\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-legend-item\n\n```\n\n----------------------------------------\n\nTITLE: Highlight Sync Configuration for Grid Component\nDESCRIPTION: Configuration for enabling highlight synchronization with auto-scroll functionality.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/grid-component.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsync: {\\n    highlight: {\\n        enabled: true,\\n        autoScroll: true\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Series Colors (CSS)\nDESCRIPTION: This CSS class is used for styling series colors, or individual points when `colorByPoint` is set, typically for pie charts etc. Each such color rule sets the fill and stroke to a default color in `highcharts.css`. It replaces the colors option.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-color-{n}\"\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts Grid Lite in JavaScript\nDESCRIPTION: JavaScript code to import the Grid Lite module and its CSS styles into a project after NPM installation.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/installation.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Grid from '@highcharts/grid-lite/grid-lite';\nimport '@highcharts/grid-lite/css/grid.css';\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Subtitle (CSS)\nDESCRIPTION: This CSS class styles the chart subtitle text in Highcharts. It replaces the `subtitle.style` option.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-subtitle\"\n```\n\n----------------------------------------\n\nTITLE: Modifying DataTable with Modifiers in TypeScript\nDESCRIPTION: Tables can utilize modifiers to automatically modify data without changing the original table. Modifiers can produce a second table reflecting modifications. Original table changes propagate to the modified table unless explicitly prevented.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ts/Data/README.md#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ntable.setModifier(new RangeModifier({\n    ranges: [{\n        column: 'year',\n        minValue: 1980,\n        maxValue: 1989,\n    }],\n    strict: true\n});\ntable.getRowCount() === 2;\ntable.modified.getRowCount() === 1;\n\ntable.setRows([\n    [1983, 'Gremlins Teaser'],\n    [2023, 'Gremlins 3']\n]);\ntable.getRowCount() === 4;\ntable.modified.getRowCount() === 2;\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Credits (CSS)\nDESCRIPTION: This CSS class styles the credits label, normally found in the lower right corner of the chart in Highcharts. It replaces `credits.style` and more.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-credits\"\n```\n\n----------------------------------------\n\nTITLE: Configuring X-Axis Type in Highcharts\nDESCRIPTION: Sets the x-axis type to 'datetime' in a Highcharts configuration. This is important for properly displaying time-based data on the x-axis.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/spline-plot-bands/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[type on x axis](https://api.highcharts.com/highcharts/xAxis.type) is set using the ***datetime*** value.\n```\n\n----------------------------------------\n\nTITLE: Styling Drilldown Axis Label in Highcharts with CSS\nDESCRIPTION: This CSS class name is used to style a drillable category axis label in Highcharts. It replaces the drilldown.activeAxisLabelStyle option, enabling customized styling through CSS.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_41\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-drilldown-axis-label\n\n```\n\n----------------------------------------\n\nTITLE: Loading Required Highcharts Modules for Parallel Coordinates Polar Chart\nDESCRIPTION: Instructions for including necessary Highcharts modules to create a parallel coordinates chart in polar format. Requires both parallel-coordinates.js for parallel coordinates functionality and highcharts-more.js for polar chart capabilities.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/parallel-coordinates-polar/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/modules/parallel-coordinates.js\n/highcharts-more.js\n```\n\n----------------------------------------\n\nTITLE: Customizing Component Settings in Highcharts Dashboard\nDESCRIPTION: Shows how to define custom editable options for components in Highcharts Dashboards using the editableOptions property. It allows for customization of display settings in the settings sidebar.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/edit-mode.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n...\nrenderTo: 'dashboard-cell-0',\ntype: 'Highcharts',\neditableOptions: [{\n    isStandalone: true,\n    name: 'Component title',\n    propertyPath: ['title'],\n    type: 'input'\n  }, {\n    name: 'chartOptions',\n    type: 'nested',\n    nestedOptions: [{\n      name: 'Marker Radius',\n      options: [{\n        name: 'Marker Radius',\n        propertyPath: [\n          'chartOptions',\n          'plotOptions',\n          'series',\n          'marker',\n          'radius'\n        ],\n        type: 'select',\n        selectOptions: [{\n          name: 3\n        }, {\n          name: 5\n        }]\n      }]\n    }]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Set Intersection\nDESCRIPTION: This code snippet demonstrates how to define the intersection between two sets, A and B, with an area of 1. The `sets` property specifies both sets, and the `value` property defines the area of overlap.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/venn-series.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    sets: ['A', 'B'],\n    value: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Legend Box in Highcharts with CSS\nDESCRIPTION: This CSS class name is used for the box and border of the legend in Highcharts. It replaces legend.backgroundColor, legend.borderColor, and legend.borderWidth, allowing for customized styling of the legend box via CSS.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_49\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-legend-box\n\n```\n\n----------------------------------------\n\nTITLE: Using exportChartLocal with Success Callback in Highcharts\nDESCRIPTION: Demonstrates the usage of a success callback function with the exportChartLocal method. This allows developers to perform actions after a chart has been successfully exported.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/9.0.1.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexportChartLocal\n```\n\n----------------------------------------\n\nTITLE: Configuring Styled Mode for KPI Component - JavaScript\nDESCRIPTION: This JavaScript snippet configures the KPI component to use styled mode by setting the 'styledMode' option to true in the chart options.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/style-by-css.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    type: 'KPI',\n    renderTo: 'kpi-container',\n    chartOptions: {\n        chart: {\n            styledMode: true\n        }\n        ...\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Assembling Fibonacci Retracement Annotation in Highcharts\nDESCRIPTION: This snippet combines the generated labels, lines, and backgrounds into a single object representing the complete Fibonacci retracement annotation in Highcharts. It concatenates the lines and backgrounds arrays into the `shapes` property and sets the zIndex to 2 to ensure the annotation is drawn on top of other chart elements.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/annotations-and-fibonacci-retracements.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nreturns {\n    labels: labels,\n    shapes: lines.concat(backgrounds),\n    zIndex: 2\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Dashboard Layout Module - HTML\nDESCRIPTION: This snippet demonstrates how to include the Highcharts dashboards layout module in an HTML document using script tags. It ensures the necessary JavaScript files are loaded for dashboard functionalities.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/layout-description.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/dashboards/dashboards.js\"></script>\n<script src=\"https://code.highcharts.com/dashboards/modules/layout.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Data for Highcharts Bubble Chart in JavaScript\nDESCRIPTION: This snippet demonstrates how to structure data for a Highcharts bubble chart. It uses an array of arrays, where each inner array represents a single data point with x, y, and z coordinates. The z coordinate determines the size of the bubble.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/bubble/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndata:[[x,y,z]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Rendering Options in JavaScript\nDESCRIPTION: Configuration options for customizing the Grid table appearance and behavior. This includes adding custom CSS classes, disabling column headers, and setting column width distribution methods.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/performance.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    rendering: {\n        table: {\n            className: \"custom_table_class\"\n        },\n        header: {\n            enabled: false // default is true\n        },\n        columns: {\n            distribution: \"fixed\" // default is \"full\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating DataTable with Highcharts in TypeScript\nDESCRIPTION: Connect and synchronize DataTable with Highcharts series if supported. Use 'setTable' for connection or utilize data options for specifying interested columns, effectively supplying Highcharts with required data as two-dimensional arrays.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ts/Data/README.md#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst chart = new Highcharts.chart('container', {\n    series: [{\n        type: 'flags',\n        data: table.getRows(0, void 0, ['year', 'title']);\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Responsive Dashboard Layout - CSS (Regular Media Queries)\nDESCRIPTION: This CSS snippet provides responsive design rules for dashboard cells based on the viewport width. It uses media queries to adjust the flex properties of dashboard cells for various screen sizes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/layout-description.md#2025-04-16_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* LARGE */\n@media (max-width: 1200px) {\n    #dashboard-cell-1 {\n        flex: 1 1 33.333%;\n    }\n}\n  \n/* MEDIUM */\n@media (max-width: 992px) {\n    #dashboard-cell-1 {\n        flex: 1 1 50%;\n    }\n}\n  \n/* SMALL */\n@media (max-width: 576px) {\n    #dashboard-cell-1 {\n        flex: 1 1 100%;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts CSS from node_modules using @import\nDESCRIPTION: This snippet shows how to import the Highcharts CSS file from the `node_modules` directory using the `@import` rule within a `<style>` tag. This method is used when Highcharts is installed via NPM and the `node_modules` directory is accessible. If not, the CSS file needs to be copied to a public location.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<style>\n@import url('./node_modules/highcharts/css/highcharts.css');\n</style>\n```\n\n----------------------------------------\n\nTITLE: Referencing Columns in DataTable in TypeScript\nDESCRIPTION: Retrieve a column as a reference for maximum performance, where changes to the array also affect the table's column data. Ensures that the column data remains synchronized with the table.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ts/Data/README.md#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst column = table.getColumn('year', true);\ncolumn[0] = 2004;\ntable.getRow(0)[0] === 2004;\ntable.setCell('year', 0, 1984);\ncolumn[0] === 1984\n```\n\n----------------------------------------\n\nTITLE: Using predefined pattern\nDESCRIPTION: This code snippet demonstrates how to reference a predefined pattern from the `Highcharts.patterns` global array. `patternIndex` is used to select a specific pattern from the array (0 for the first pattern).\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/pattern-fills.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncolor: {\n    patternIndex: 0 // References the first default pattern\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Legend Navigation in Highcharts with CSS\nDESCRIPTION: This CSS class name is used for styling the navigation part of the legend (arrows up and down, and the text x/n) in Highcharts.  Use this to set text styles. It replaces legend.navigation.style.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_52\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-legend-navigation\n\n```\n\n----------------------------------------\n\nTITLE: Defining Data for Packed Bubble Chart in Highcharts\nDESCRIPTION: Demonstrates the data structure for a packed bubble chart in Highcharts. Each data point is represented by a y-value, which determines the size of the bubble. The x and y coordinates are automatically calculated for optimal packing.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/packed-bubble/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ndata:[y, y, y]\n```\n\n----------------------------------------\n\nTITLE: Styling Gauge Series in Highcharts with CSS\nDESCRIPTION: These CSS class names are used to style the dial and pivot of gauge series in Highcharts. These classes replace border and background options for plotOptions.gauge.dial and plotOptions.gauge.pivot, enabling customized visual representation of gauge charts.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_30\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-gauge-series .highcharts-dial\n.highcharts-gauge-series .highcharts-pivot\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Styled Mode in Highcharts\nDESCRIPTION: Shows how to enable styled mode in Highcharts. This option affects the way styles are applied to the chart, particularly important for offline exports in Internet Explorer.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/9.0.1.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nchart.styledMode\n```\n\n----------------------------------------\n\nTITLE: Styling Scrollbar in Highcharts Stock CSS\nDESCRIPTION: CSS classes for styling various components of the scrollbar in Highcharts Stock, including arrows, buttons, rifles, thumb, and track.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_66\n\nLANGUAGE: CSS\nCODE:\n```\n.highcharts-scrollbar\n.highcharts-scrollbar-arrow\n.highcharts-scrollbar-button\n.highcharts-scrollbar-rifles\n.highcharts-scrollbar-thumb\n.highcharts-scrollbar-track\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Labels and Mouse Tracking in Highcharts\nDESCRIPTION: Configuration settings to enable data labels and disable mouse tracking in Highcharts. Data labels improve chart readability for small datasets, while disabling mouse tracking can simplify the user interaction.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/line-labels/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  plotOptions: {\n    line: {\n      dataLabels: {\n        enabled: true\n      },\n      enableMouseTracking: false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Benchmark Tests with TypeScript\nDESCRIPTION: This TypeScript snippet defines a configuration for benchmark tests, including sample sizes and optional setup functions. It includes an export for the main test function, which measures performance using Node.js performance marks. Required dependencies include the Node.js \\'performance\\' object and a \\'generateColumnData\\' function for data preparation. Inputs include a benchmark context with code path, data, and size parameters. The output is a duration measurement of the benchmarked code. Constraints include the necessity of ES-module syntax and predefined data sizes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/test/ts-node-unit-tests/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config = {\n    sizes: [100, 1000, 10_000, 100_000, 1_000_000, 2_500_000]\n}\n\nexport function before(size: number) {\n    return {\n        fileName: `data-${size}.json`,\n        func: () => generateColumnData(size, 5)\n    }\n}\n\nexport default async function benchmarkTest(\n    {\n        CODE_PATH,\n        data,\n        size\n    }: BenchmarkContext\n): Promise<BenchmarkResult> {\n\n    // setup\n\n    performance.mark('Start');\n\n    // Code to be benchmarked\n\n    performance.mark('End');\n\n    return performance.measure('Start to Now', 'Start', 'End').duration;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts in Server-side TypeScript Projects\nDESCRIPTION: This TypeScript snippet demonstrates how to import Highcharts in server-side projects targeting Node.js. It shows the import syntax for the main Highcharts bundle and lists other available product bundles.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/highcharts-typescript-declarations.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Highcharts from 'highcharts';\n```\n\n----------------------------------------\n\nTITLE: Importing Variwide Chart Module in JavaScript\nDESCRIPTION: To create a variwide chart in Highcharts, you need to import the variwide module. This snippet shows the module path that needs to be included in your project.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/variwide/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/modules/variwide.js\n```\n\n----------------------------------------\n\nTITLE: Loading Pattern Fill Module in Highcharts\nDESCRIPTION: This HTML snippet demonstrates how to include the pattern fill module for Highcharts, which allows the use of pattern fills as color options. It's important to ensure this module is loaded before using pattern fills.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/colors.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/modules/pattern-fill.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating SVG Element with Attributes in JavaScript for Highcharts\nDESCRIPTION: This function creates an SVG element with specified attributes. It uses the document.createElementNS method to create the element in the SVG namespace and sets the provided attributes using setAttribute.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/website/themes-demo/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction createElement(tag, attrs) {\n    const element = document.createElementNS('http://www.w3.org/2000/svg', tag);\n    for (const key in attrs) {\n        if (Object.hasOwnProperty.call(attrs, key)) {\n            element.setAttribute(key, attrs[key]);\n        }\n    }\n    return element;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Pane Backgrounds in Highcharts with CSS\nDESCRIPTION: This CSS class name is used for styling pane backgrounds in radial charts within Highcharts. It replaces backgrounds and borders defined under the pane.background option set, enabling customized visual presentation of pane elements.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_33\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-pane\n\n```\n\n----------------------------------------\n\nTITLE: Extending Highcharts Options After Creation in JavaScript\nDESCRIPTION: Example of adding another data series to an existing Highcharts options object using the push method on the series array.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/how-to-set-options.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\noptions.series.push({\n    name: 'John',\n    data: [3, 4, 2]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Morningstar Investment Screener Connector in JavaScript\nDESCRIPTION: Example configuration for setting up the Morningstar Investment Screener connector with pagination, language settings, currency, filters, and data points. Shows how to initialize the connector with specific parameters for regulatory data retrieval.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/morningstar/screeners/regulatory-screener.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst screenerConnector = new HighchartsConnectors.Morningstar.InvestmentScreenerConnector({\n    page: 1,\n    pageSize: 20,\n    languageId: 'en-AU',\n    currencyId: 'AUD',\n    filters: [\n        {\n            dataPointId: 'EET_PAIConsidered',\n            comparatorCode: 'EQ',\n            value: true\n        }\n    ],\n    securityDataPoints: [\n        'secId',\n        'name',\n        'EET_SustPreferencesConsidered',\n        'EET_PAIConsidered',\n        'EET_SustInv_A8',\n    ],\n    universeIds: ['FOEUR$$ALL_5791'],\n    sortOrder: 'name asc',\n    postman: {\n        environmentJSON: postmanJSON\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Error Display in Highcharts\nDESCRIPTION: This JavaScript snippet demonstrates how to disable the display of errors on a Highcharts chart by setting the `chart.displayErrors` property to `false`. This is useful for hiding error messages in production environments or when debugging is not required.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/debugger-mode.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n    chart: {\n        displayErrors: false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Series in Highcharts Stock\nDESCRIPTION: Demonstrates how to set a column chart type for visualizing trading volume in a financial chart. The configuration involves specifying the series type as 'column' to represent volume data.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/stock/demo/column/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n  type: 'column',\n  // Volume data configuration\n}]\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Dashboard Cells - CSS\nDESCRIPTION: This CSS snippet sets text alignment for dashboard cells using the 'highcharts-dashboards-cell' class.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/style-by-css.md#2025-04-16_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\n.highcharts-dashboards-cell {\n    text-align: left;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Background (CSS)\nDESCRIPTION: This CSS class styles the chart background rectangle in Highcharts. It's used to set background fills or strokes for the chart area. It replaces styling options such as chart.backgroundColor, chart.borderColor and chart.borderWidth.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-background\"\n```\n\n----------------------------------------\n\nTITLE: Styling Context Menu Items in Highcharts with CSS\nDESCRIPTION: This CSS class name is used for the list items in the context menu in Highcharts. It replaces the navigation.menuItemStyle option. Use the `:hover` pseudo-class to replace navigation.menuItemHoverStyle for interactive menu styling.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_39\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-menu-item\n\n```\n\n----------------------------------------\n\nTITLE: Using DataTable in DataGrid in TypeScript\nDESCRIPTION: Integrate DataTable with DataGrid to display and potentially modify the content. To reorder cells or retain their original order from a source, use DataConnector if necessary.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ts/Data/README.md#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst dataGrid = DataGrid.dataGrid('container', {\n    dataTable: new DataTable({\n        columns: {\n            Value: [ 12.34, 45.67, 78.90 ],\n            Currency: [ 'EUR', 'DKK', 'NOK' ]\n        }\n    })\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU Translations for Boosted Charts in Highcharts\nDESCRIPTION: Shows how to use the useGPUTranslations option in boost settings. When set to false, it affects the rendering of columns in boosted charts.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/9.0.1.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nboost.useGPUTranslations\n```\n\n----------------------------------------\n\nTITLE: Configuring Pane for Clock-like Gauge Chart in Highcharts\nDESCRIPTION: This snippet provides a tip for setting up the arc shape and color of the clock gauge chart using the pane feature in Highcharts. The pane configuration is crucial for achieving the desired clock-like appearance.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/gauge-clock/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n####  Tip\nUse the [pane](https://api.highcharts.com/highcharts/pane) feature to set up the arc shape and color.\n```\n\n----------------------------------------\n\nTITLE: Creating a New Test Template for Highcharts\nDESCRIPTION: Shows how to register a new test template for a specific chart type with default configuration options\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Parameters: name, chart factory function, chart template options\\nTestTemplate.register('highmaps/geoseries', Highcharts.mapChart, {\\n\\n    chart: {\\n        type: 'geoseries'\\n    },\\n\\n    title: {\\n        text: 'template/highmaps/geoseries'\\n    },\\n\\n    series: [{\\n        type: 'geoseries',\\n        data: [[0, 1], [2, 3], [2, 1]]\\n    }]\\n\\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts Dashboards Layout Module - Bash\nDESCRIPTION: This snippet shows how to install the Highcharts dashboards package via npm for use within a JavaScript project. It is essential to set up the required dependencies for utilizing dashboard features.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/layout-description.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @highcharts/dashboards\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Cells in Highcharts Grid\nDESCRIPTION: Configuration options for customizing cells within columns in a Highcharts Grid, including styling, formatting, and editability. The cells property supports templating with the {value} reference for cell contents.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/columns.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  columns: [\n    {\n      id: \"price\",\n      cells: {\n        className: \"custom_cell_class\",\n        format: \"${value}\",\n        editable: true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts via CDN\nDESCRIPTION: Demonstrates how to include Highcharts library in your project using the official CDN.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Custom Column Indicator Implementation\nDESCRIPTION: Configuration for creating a custom column-type indicator with necessary methods inherited from column series prototype.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/custom-technical-indicators.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.seriesType(\n    'customIndicator',\n    'sma', {\n        name: 'Sum of previous 2 points',\n        threshold: 0,\n        groupPadding: 0.2,\n        pointPadding: 0.2\n    }, {\n        getValues: function(series) {\n            return this.getSum(series.xData, series.yData);\n        },\n        getSum: getSum,\n        markerAttribs: Highcharts.noop,\n        drawGraph: Highcharts.noop,\n        crispCol: Highcharts.seriesTypes.column.prototype.crispCol,\n        drawPoints: Highcharts.seriesTypes.column.prototype.drawPoints,\n        getColumnMetrics: Highcharts.seriesTypes.column.prototype.getColumnMetrics,\n        translate: Highcharts.seriesTypes.column.prototype.translate\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Styling Points in Highcharts CSS\nDESCRIPTION: CSS classes for styling individual points in Highcharts. These can be used in combination with series-specific selectors for more targeted styling.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_61\n\nLANGUAGE: CSS\nCODE:\n```\n.highcharts-point\n.highcharts-point-hover\n.highcharts-point-select\n```\n\n----------------------------------------\n\nTITLE: Styling Area Series in Highcharts with CSS\nDESCRIPTION: This CSS class name styles the area under an area series in Highcharts.  It replaces plotOptions.area.fillColor and plotOptions.area.fillOpacity, allowing custom styling of area charts. Use the parent item, ._highcharts-series_ including series type, index or individual class name, to identify specific series.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_34\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-area\n\n```\n\n----------------------------------------\n\nTITLE: Setting Credits Position in Highcharts\nDESCRIPTION: This snippet shows how to customize the position of credits in a Highcharts chart using the position option. Credits can be aligned horizontally and vertically using 'align' and 'verticalAlign' options, with additional 'x' and 'y' offsets for precise placement. Necessary parameters include alignment values and pixel offsets.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/design-and-style.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncredits: {\n    position: {\n        align: 'left',\n        verticalAlign: 'bottom',\n        x: 10,\n        y: -10\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Structure for Packed Bubble Chart\nDESCRIPTION: Shows the basic data structure format for packed bubble charts where y values determine bubble positions and sizes. Each data point should be provided in the format [y, y, y] where y represents both position and bubble size.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/packed-bubble-project-status/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndata:[y, y, y]\n```\n\n----------------------------------------\n\nTITLE: Inverted Polarity Mapping in Highcharts\nDESCRIPTION: Shows how to implement inverted polarity mapping where parameter values decrease as data point values increase.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/advanced-mapping.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmapping: {\n    volume: 0.7,\n    pitch: '-y'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Area Chart Fill Opacity in Highcharts\nDESCRIPTION: Example configuration reference for modifying the fill opacity of area charts in Highcharts using the fillOpacity property under plotOptions.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/area-missing/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfillOpacity](https://api.highcharts.com/highcharts/plotOptions.area.fillOpacity\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for ES5 UMD Bundles\nDESCRIPTION: Configuration module for creating Universal Module Definition (UMD) bundles from Highcharts ES5 master files, enabling compatibility across different module systems\nSOURCE: https://github.com/highcharts/highcharts/blob/master/tools/webpacks/README.md#2025-04-16_snippet_1\n\nLANGUAGE: mjs\nCODE:\n```\n// highcharts-es5.webpack.mjs\n// Webpack configuration for ES5 UMD bundle generation\n```\n\n----------------------------------------\n\nTITLE: Time Mapping Configuration in Highcharts\nDESCRIPTION: Example of mapping time to Y values instead of the default X values for controlling point play order.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/advanced-mapping.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmapping: {\n    time: 'y',\n    pitch: 'y',\n    volume: 0.6\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Plot Border (CSS)\nDESCRIPTION: This CSS class styles the plot area border in Highcharts. It's drawn in front of the grid. It replaces styling options such as chart.plotBorderColor and chart.plotBorderWidth.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-plot-border\"\n```\n\n----------------------------------------\n\nTITLE: Defining Frame Options for 3D Charts in JavaScript\nDESCRIPTION: This snippet defines how to set options for the 3D frame in Highcharts charts. It allows configuring the visibility, size, and color of the bottom, side, and back panes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/3d-charts.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nbottom|side|back: {\n    size:   The thickness of the pane (defaults to 0)\n    color:  The color of the pane (default to transparent)\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Single Chart Configuration to PNG\nDESCRIPTION: Command to generate a PNG image from a chart configuration file using node export server\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/render-charts-serverside.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhighcharts-export-server -infile chartConfig.json -outfile chart.png\n```\n\n----------------------------------------\n\nTITLE: Pre-defined Column Calculation Configuration\nDESCRIPTION: Demonstrates how to configure a MathModifier to create a new column with calculations based on existing columns. References are dynamically adjusted for each row.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/mathmodifier-module.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    type: 'MathModifier'\n    columns: {\n        'My New Column': 'A1 / 7 * 5'\n        // A1 is here the first cell of each row\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Highcharts nightly build\nDESCRIPTION: Commands to update a nightly build of Highcharts, which requires uninstalling and reinstalling rather than using npm update.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/install-from-npm.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall highcharts && npm install --save highcharts/highcharts-dist#nightly\n```\n\n----------------------------------------\n\nTITLE: Simulating Mouse Events with TestController in Highcharts\nDESCRIPTION: Example of using TestController to emulate mouse events for chart testing, demonstrating pan interaction with shift key\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Instanciate\\nconst controller = new TestController(chart);\\n\\n// Simulate panning with the shift key pressed. X and Y are chart coordinates.\\ncontroller.pan([200, 100], [150, 100], { shiftKey: true });\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Release notes for Highcharts Gantt version 10.2.1, indicating that most changes from the main Highcharts release apply to this version.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts-gantt/10.2.1.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog for Highcharts Gantt v10.2.1 (2022-08-29)\n\n- Most changes listed under Highcharts 10.2.1 above also apply to Highcharts Gantt 10.2.1.\n```\n\n----------------------------------------\n\nTITLE: Configuring Rotated Labels in Highcharts Column Chart\nDESCRIPTION: This snippet shows how to set up a Highcharts column chart with rotated x-axis labels. It uses the rotation option to angle the labels and applies custom styling to both x-axis and data labels.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/column-rotated-labels/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n  chart: {\n    type: 'column'\n  },\n  xAxis: {\n    categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    labels: {\n      rotation: -45,\n      style: {\n        fontSize: '13px',\n        fontFamily: 'Verdana, sans-serif'\n      }\n    }\n  },\n  plotOptions: {\n    series: {\n      dataLabels: {\n        enabled: true,\n        style: {\n          fontSize: '11px',\n          fontWeight: 'bold'\n        }\n      }\n    }\n  },\n  series: [{\n    data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4]\n  }]\n});\n```\n\n----------------------------------------\n\nTITLE: Importing layout module in TypeScript\nDESCRIPTION: This line imports the layout module from the `@highcharts/dashboards` package to enable the dashboards layout system.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/wrappers/dashboards-with-vue.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"import '@highcharts/dashboards/es-modules/masters/modules/layout.src.js';\"\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Root Element (CSS)\nDESCRIPTION: This CSS class targets the root SVG element of the Highcharts chart. It's used to set inherited styles like font-family or text styles. It replaces styling options traditionally set via JavaScript configuration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-root\"\n```\n\n----------------------------------------\n\nTITLE: Positioning Axis Labels in Highcharts\nDESCRIPTION: This code snippet explains how to set the position of axis labels relative to the plot area in Highcharts. The 'align', 'x', and 'y' options are used to determine the label's alignment and offset, allowing for precise control over label placement.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/design-and-style.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlabels: {\n    align: 'right',\n    x: -10,\n    y: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Event-Based Custom Indicator Configuration\nDESCRIPTION: Configuration for creating a custom indicator that recalculates based on chart events like afterSetExtremes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/custom-technical-indicators.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.seriesType('customIndicator', 'sma', {}, {\n    getValues: function (series) {\n        return this.getSum(\n            series.processedXData || series.xData,\n            series.processedYData || series.yData\n        );\n    },\n    calculateOn: {\n        chart: 'init',\n        xAxis: 'afterSetExtremes'\n    },\n    getSum: getSum\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Navigation Bindings\nDESCRIPTION: Configure chart navigation to enable custom GUI bindings for annotations by specifying a custom container class name\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/annotations-gui.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nHighcharts.chart('container', {\n    navigation: {\n        bindingsClassName: 'custom-gui-container'\n    },\n    series: [{\n        ...\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Exporting URL in Highcharts - JavaScript\nDESCRIPTION: This snippet shows how to configure the exporting URL in a Highcharts configuration object to direct chart export requests to a custom server instead of the default Highcharts export server.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/legacy-export-servers.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nexporting:{\n    url:'http://new.server.com/highcharts-export/'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Bullet Graph Module to Highcharts\nDESCRIPTION: Demonstrates how to include the required bullet graph module in Highcharts. This module is necessary for creating bullet graphs that efficiently compare actual values against target metrics.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/bullet-graph/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/modules/bullet.js\n```\n\n----------------------------------------\n\nTITLE: Importing Wind Barb Module in Highcharts\nDESCRIPTION: This snippet shows how to import the required module for creating wind barb charts in Highcharts. The module is essential for enabling wind barb functionality.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/windbarb-series/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/module/windbarb.js\n```\n\n----------------------------------------\n\nTITLE: Initializing Morningstar TimeSeriesConnector for Cumulative Return Data in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the Morningstar TimeSeriesConnector to fetch cumulative return time series data for securities. It specifies the series type as 'CumulativeReturn' and configures a security by its Morningstar ID.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/morningstar/time-series/cumulative-return.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cumulReturnConnector = new HighchartsConnectors.Morningstar.TimeSeriesConnector({\n    postman: {\n        environmentJSON: postmanJSON\n    },\n    series: {\n        type: 'CumulativeReturn'\n    },\n    securities: [{\n        id: 'F0GBR04S23',\n        idType: 'MSID'\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Setting UTF-8 Content Type for HTML Pages\nDESCRIPTION: HTML meta tag to specify UTF-8 character encoding for web pages. This is necessary when using non-English characters like German umlauts or Scandinavian vowels in Highcharts.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/frequently-asked-questions.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Negative Values (CSS)\nDESCRIPTION: This CSS class is given to negative parts of the graph, area, and individual points if the `negativeColor` option is set to true in Highcharts.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-negative\"\n```\n\n----------------------------------------\n\nTITLE: Adding Global Tracks to All Series\nDESCRIPTION: JavaScript code showing how to add global tracks that will be applied to all series in the chart, allowing multiple instruments (piano and trumpet) to play for each data series without specifying tracks per series.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/getting-started.md#2025-04-16_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nsonification: {\n    duration: 4000,\n    defaultInstrumentOptions: {\n        instrument: 'flute'\n    },\n    globalTracks: [{\n        instrument: 'piano'\n    }, {\n        instrument: 'trumpet'\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Plot Line (CSS)\nDESCRIPTION: This CSS class styles the plot lines in Highcharts. The `className` option can be used on each line to distinguish them. It replaces color, dashStyle and width options for the plot line.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-plot-line\"\n```\n\n----------------------------------------\n\nTITLE: Deploy Website without SSH\nDESCRIPTION: This command deploys the Docusaurus website without using SSH, requiring the GitHub username to be specified. It builds the website and pushes the content to the `gh-pages` branch for GitHub Pages hosting.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/tools/docs-preview/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"$ GIT_USER=<Your GitHub username> yarn deploy\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Effects for Series in Highcharts\nDESCRIPTION: Demonstrates how to create a glow effect for graph series by configuring the shadow property. This example sets a yellow shadow with width of 10 pixels and no offset.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/design-and-style.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nshadow: {\n    color: 'yellow',\n    width: 10,\n    offsetX: 0,\n    offsetY: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Styles for Highcharts Dashboards in CSS\nDESCRIPTION: This snippet details importing necessary CSS files to style Highcharts Dashboards components. Importing specific CSS files like highcharts.css and dashboards.css ensures components are rendered with appropriate styles.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/types-of-components.md#2025-04-16_snippet_7\n\nLANGUAGE: CSS\nCODE:\n```\n@import url(\"https://code.highcharts.com/css/highcharts.css\");\n@import url(\"https://code.highcharts.com/dashboards/css/dashboards.css\");\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Highcharts ESM from CDN\nDESCRIPTION: TypeScript compiler options for using Highcharts ESM modules from CDN. Includes path mappings to resolve module dependencies correctly.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation-with-esm.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"allowSyntheticDefaultImports\": true,\n    \"esModuleInterop\": true,\n    \"baseUrl\": \"./\",\n    \"module\": \"es6\",\n    \"moduleResolution\": \"node\",\n    \"target\": \"es6\",\n    \"paths\": {\n      \"https://code.highcharts.com/es-modules/masters/*.src.js\": [\n        \"node_modules/highcharts/*.src\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sonification Options in Highcharts (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set up sonification options in Highcharts, including showing play markers and defining a data series. It illustrates the structure of the configuration object and how to specify default instrument options.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/getting-started.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndefaultInstrumentOptions: {\n    showPlayMarker: true\n}\n},\n{\ndata: [5, 7, 7, 5, 3]\n}]\n```\n\n----------------------------------------\n\nTITLE: OpenStreetMap Provider Configuration Options\nDESCRIPTION: This snippet shows the available properties for the OpenStreetMap provider, including theme options and possible subdomains for load balancing.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/tiledwebmap.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ntheme: 'Standard', 'Hot', 'Mapnik', 'OpenTopoMap'\nsubdomain: 'a', 'b', 'c'\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts\nDESCRIPTION: This command installs the Highcharts package using npm. It is required to use Highcharts charts within the dashboard.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/wrappers/dashboards-with-react.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install highcharts\"\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts Dashboards - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the Dashboards module in a JavaScript file after installing it via npm. This allows the use of Highcharts Dashboards in the project.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ts/Dashboards/README.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Dashboards from '@highcharts/dashboards';\n```\n\n----------------------------------------\n\nTITLE: Advanced Multi-zone hc-transform Configuration\nDESCRIPTION: Complex hc-transform configuration for maps with multiple zones, each with its own projection. This is useful for maps that combine multiple geographical areas with different projections, scaling, and positioning requirements.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/latlon.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"hc-transform\": {\n    \"default\": {\n        \"crs\": \"+proj=lcc +lat_1=33 +lat_2=45 +lat_0=39 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs\"\n    },\n    \"zone2\": {\n        \"crs\": \"+proj=aea +lat_1=8 +lat_2=18 +lat_0=13 +lon_0=-157 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs\",\n        \"hitZone\": {\n            \"type\": \"Polygon\",\n            \"coordinates\": [[[1747,3900],[3651,2950],[3651,-999],[1747,-999],[1747,3900]]]\n        },\n        \"xpan\": 190,\n        \"ypan\": 417,\n        \"scale\": 0.000123090941806\n    },\n    \"zone3\": {\n        \"crs\": \"+proj=tmerc +lat_0=54 +lon_0=-142 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\",\n        \"hitZone\": {\n            \"type\": \"Polygon\",\n            \"coordinates\": [[[-999,5188],[-707,5188],[1747,3900],[1747,-999],[-999,-999],[-999,5188]]]\n        },\n        \"xpan\": 5,\n        \"ypan\": 357,\n        \"scale\": 5.84397059179e-05,\n        \"rotation\": 0.2618\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Depth Chart Interactive Demonstration\nDESCRIPTION: An embedded iframe demonstrating Highcharts depth chart functionality, showing supply and demand visualization for financial trading data\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/depth-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe style=\"width: 100%; height: 450px; border: none;\" src=\"https://www.highcharts.com/samples/embed/stock/demo/depth-chart\" allow=\"fullscreen\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts with TypeScript (ESM from CDN)\nDESCRIPTION: Example showing how to import Highcharts as ES modules from CDN in a TypeScript project. This approach uses native ES6 module imports.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation-with-esm.md#2025-04-16_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n// Load modules the ES6 way\nimport Highcharts from 'https://code.highcharts.com/esm/highcharts.js';\nimport 'https://code.highcharts.com/esm/modules/exporting.js';\n\n// Generate the chart\nHighcharts.chart('container', {\n  // options - see https://api.highcharts.com/highcharts\n});\n```\n\n----------------------------------------\n\nTITLE: Esri Provider Configuration Options\nDESCRIPTION: This snippet shows the available theme properties for the Esri provider, which includes various map types such as street maps, topographic maps, imagery, and other specialized views.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/tiledwebmap.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ntheme: 'WorldStreetMap', 'DeLorme', 'WorldTopoMap', 'WorldImagery', 'WorldTerrain', 'WorldShadedRelief', 'WorldPhysical', 'NatGeoWorldMap', 'WorldGrayCanvas'\n```\n\n----------------------------------------\n\nTITLE: Disabling Tooltip and Markers for Linear Regression in Highcharts\nDESCRIPTION: Modifies the default options for the linear regression series in Highcharts by disabling mouse tracking and markers. Enhances user experience by decluttering visual output.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/custom-technical-indicators.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighcharts.seriesType(\n  'linearregression',\n  'sma',\n  {\n    name: 'Linear Regression',\n    enableMouseTracking: false, // default options\n    marker: {\n      enabled: false\n    }\n    params: {} // linear regression doesn’t need params\n  },\n  {\n    getValues: ... ,\n    getLinearRegression: ...\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Data for Packed Bubble Chart in Highcharts\nDESCRIPTION: This snippet demonstrates the recommended data structure for a packed bubble chart in Highcharts. It uses an array of y values, where each y value represents a bubble, and the size of the bubble is determined by the z variable.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/series-packedbubble/spiral/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ndata:[y, y, y]\n```\n\n----------------------------------------\n\nTITLE: Styling Hollow Candlestick Series in Highcharts with CSS\nDESCRIPTION: These CSS class names are used to differentiate between up or down points in Highcharts Stock hollow candlesticks. They allow for styling the appearance of the hollow candlestick based on whether the price went up or down, enhancing the visual representation of stock data.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_29\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-hollowcandlestick-series .highcharts-point-down\n.highcharts-hollowcandlestick-series .highcharts-point-down-bearish-up\n.highcharts-hollowcandlestick-series .highcharts-point-up\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Variable Inheritance in Highcharts Grid CSS\nDESCRIPTION: Demonstrates how to create a custom theme with cascading border properties. Border styling is defined at the table level and selectively overridden for rows while inheriting the border color.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/theming/theming.md#2025-04-16_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.theme-custom {\n  --hcg-border-width: 3px;\n  --hcg-border-style: solid;\n  --hcg-border-color: #000;\n\n  --hcg-row-border-width: 1px;\n  --hcg-row-border-style: dashed;\n}\n```\n\n----------------------------------------\n\nTITLE: Row References in DataGrid in TypeScript\nDESCRIPTION: To obtain row references in a DataGrid, include an index column in the DataTable. This allows tracking of specific rows and their indices during data manipulation and accessing.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ts/Data/README.md#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst dataGrid = new DataGrid('container', {\n    dataTable: new DataTable({\n        columns: {\n            '': [1, 2, 3],\n            Value: [ 12.34, 45.67, 78.90 ],\n            Currency: [ 'EUR', 'DKK', 'NOK' ]\n        }\n    }\n});\ndataGrid.dataTable.getRow(dataGrid.table.getRowIndexBy('', 2));\n```\n\n----------------------------------------\n\nTITLE: Importing Dashboards package\nDESCRIPTION: This import statement allows you to use the Highcharts Dashboards functionality within your TypeScript code.  It imports the Dashboards object which provides the main functionalities for creating dashboards.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/wrappers/dashboards-with-angular.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"import Dashboards from '@highcharts/dashboards';\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bad Text Formatting in Documentation\nDESCRIPTION: Example showing incorrect way of formatting documentation with unwanted line breaks within paragraphs\nSOURCE: https://github.com/highcharts/highcharts/blob/master/repo-guidelines.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThis feature turns something off, so that it does not show.\nIt is `undefined` by default.\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts Map Collection using npm\nDESCRIPTION: This shell command installs the Highcharts Map Collection library from npm, which is necessary for loading and using maps in Highcharts Maps. This must be executed in the terminal within the project directory.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/map-collection.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @highcharts/map-collection\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts Flutter Package\nDESCRIPTION: This snippet demonstrates how to import the Highcharts package into a Dart file, making the widgets available for use in a Flutter application.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/flutter/getting-started.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:highcharts_flutter/highcharts.dart';\n```\n\n----------------------------------------\n\nTITLE: Styling Grid Lines in Highcharts with CSS\nDESCRIPTION: This CSS class name is used for styling grid lines in Highcharts. It replaces the gridLineWidth and gridLineColor options, allowing for custom grid line styling via CSS.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_44\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-grid-line\n\n```\n\n----------------------------------------\n\nTITLE: Configuring CSV Parsing Options for Highcharts Data Module in JavaScript\nDESCRIPTION: This code snippet defines the default configuration options for parsing CSV data in the Highcharts data module. It includes settings for date parsing, decimal point handling, line terminator recognition, and various callbacks for data processing.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/marker-clusters/kmeans/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nH.Data.prototype.options = {\n    csv: {\n        dateFormat: undefined,\n        alternateRowColor: false,\n        // Silence Highcharts errors in the CSV parsing. Not recommended to\n        // set to true in production.\n        silent: false,\n        columnTypes: [],\n        firstRowAsNames: true,\n        // When using regex parsing, lines or semicolons based on this flag.\n        lineDelimiter: undefined,\n        // Highlight lines with error in the data, for example if the value is\n        // not a number.\n        highlightErrorLines: true,\n        itemDelimiter: undefined,\n        liveRedraw: true,\n        decimalPoint: undefined,\n        omitNull: undefined,\n        beforeParse: undefined,\n        parseDate: undefined,\n        complete: undefined,\n        error: undefined\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts Dashboards Package\nDESCRIPTION: This TypeScript code imports the Highcharts Dashboards module. This import is essential for accessing the functionalities provided by the Dashboards package.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/wrappers/dashboards-with-react.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"import Dashboards from '@highcharts/dashboards';\"\n```\n\n----------------------------------------\n\nTITLE: Importing Grid Styles in CSS\nDESCRIPTION: This snippet shows how to properly import the CSS styles needed for rendering Grid components in Highcharts Dashboards. Importing these styles ensures proper layout and visualization of Grid components.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/types-of-components.md#2025-04-16_snippet_9\n\nLANGUAGE: CSS\nCODE:\n```\n@import url(\"https://code.highcharts.com/dashboards/css/datagrid.css\");\n@import url(\"https://code.highcharts.com/dashboards/css/dashboards.css\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Flutter App with Highcharts\nDESCRIPTION: This Dart code snippet showcases how to create a simple Flutter application that displays a basic line chart using the HighchartsFlutter widget.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/flutter/getting-started.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:highcharts_flutter/highcharts.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Hello, Highcharts!',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n        useMaterial3: true,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          backgroundColor: Theme.of(context).colorScheme.inversePrimary,\n          title: Text(widget.title),\n        ),\n        body: ListView(\n          children: [\n            // Here is a Highcharts widget added to the ListView\n            HighchartsChart(\n              HighchartsOptions(\n                title: HighchartsTitleOptions(\n                  text: 'Hello, Flutter!'\n                ),\n                series: [\n                  HighchartsLineSeries(\n                    name: 'My First Series',\n                    data: [[0, 5], [0.5, 55.5], [1, 10]],\n                    options: HighchartsLineSeriesOptions(\n                      color: '#C60'\n                    )\n                  )\n                ]\n              )\n            )\n          ],\n        ),\n      )\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Dashboard Rows - CSS\nDESCRIPTION: This snippet demonstrates how to style dashboard rows by applying padding using the 'highcharts-dashboards-row' class.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/style-by-css.md#2025-04-16_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n.highcharts-dashboards-row {\n    padding: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Including a Bundled Highcharts Module in HTML\nDESCRIPTION: HTML code showing how to include a custom Highcharts bundle created with webpack. It creates a container for the chart and loads the bundled JavaScript.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation-with-esm.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\"></div>\n<script type=\"module\" src=\"./dist/mybundle.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Stamen Provider Configuration Options\nDESCRIPTION: This snippet shows the available properties for the Stamen provider, including various artistic and specialized map themes and subdomain options for load balancing.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/tiledwebmap.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\ntheme: 'Toner', 'TonerBackground', 'TonerLite', 'Terrain', 'TerrainBackground', 'Watercolor'\nsubdomain: 'a', 'b', 'c', 'd'\n```\n\n----------------------------------------\n\nTITLE: Bad Example of Unsafe JSON Configuration with Function\nDESCRIPTION: This snippet shows an example where the chart options include a function that could execute malicious code, which is not filtered out. This demonstrates how using functions in configuration can lead to vulnerabilities within Highcharts.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/security.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighcharts.chart('container', {\n    \"chart\": {\n        \"events\": {\n            // Unsafe\n            \"load\": () => console.log(document.domain)\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Range Selector Input in Highcharts Stock CSS\nDESCRIPTION: CSS selector for styling the text in range selector input boxes in Highcharts Stock. This replaces the JavaScript option for input style.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_63\n\nLANGUAGE: CSS\nCODE:\n```\n.highcharts-range-input text\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Date Format\nDESCRIPTION: Shows how to set input date format to control input type (datetime-local, date, time)\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/range-selector.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrangeSelector: {\n\tinputDateFormat: '%b %e, %Y %H:%M'\n},\n```\n\n----------------------------------------\n\nTITLE: Styling Navigator Handles in Highcharts Stock CSS\nDESCRIPTION: CSS classes for styling the navigator handles in Highcharts Stock. These replace the JavaScript options for handle background color and border color.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_57\n\nLANGUAGE: CSS\nCODE:\n```\n.highcharts-navigator-handle\n.highcharts-navigator-handle-left\n.highcharts-navigator-handle-left\n```\n\n----------------------------------------\n\nTITLE: Build Static Content\nDESCRIPTION: This command generates the static content for the Docusaurus website and places it in the `build` directory. This content can then be served using any static content hosting service.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/tools/docs-preview/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"$ yarn build\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Vector Color in Highcharts Vector Plot\nDESCRIPTION: This snippet demonstrates how to highlight a specific vector in a Highcharts vector plot by changing its color. It shows the data structure for a single vector point, including x and y coordinates, length, direction, and custom color.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/vector-plot/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{x:5, y:5, length:300, direction:18, color: '# ff0000'}\n```\n\n----------------------------------------\n\nTITLE: Subexpression inside Condition in Highcharts\nDESCRIPTION: This snippet illustrates how to use a subexpression within a conditional statement in Highcharts templating. It demonstrates how to determine the plural form of 'point' based on the length of the points array.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/templating.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// A subexpression inside a condition. Decide plural form.\nformat: 'The series exists of {points.length} ' +\n    '{#if (eq 1 points.length)}point{else}points{/if}.'\n```\n\n----------------------------------------\n\nTITLE: Column assignment object with keys as series data\nDESCRIPTION: This JavaScript code demonstrates the usage of the `columnAssignment` option with an object to map columns to series data properties, allowing you to specify which columns in the connector will correspond to various parameters of a series, such as x, open, high, low, and close values for a candlestick series or name and y values for a column series with customized data label visibility.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/highcharts-component.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncolumnAssignment: [{\n    seriesId: 'myStockSeriesId',\n    data: {\n        x: 'myX',\n        open: 'myOpen',\n        high: 'myHigh',\n        low: 'myLow',\n        close: 'myClose'\n    },\n}, {\n    seriesId: 'myColumnSeriesId',\n    data: {\n        name: 'myNamesColumn',\n        y: 'myYColumn',\n        'dataLabels.style.visibility': 'myDataLabelVisibilityColumn'\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Styling Zones in Highcharts with CSS\nDESCRIPTION: This CSS class name is used when zones are applied to Highcharts series, giving each zone a class name with its index. A custom _className_ option can also be set in the zone options. It replaces the color, dashStyle, and fillColor options for zones, allowing for dynamic styling based on zone indexes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_35\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-zone-{n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Grid Pro via NPM\nDESCRIPTION: This code snippet demonstrates how to install the Highcharts Grid Pro package using NPM. The package name is @highcharts/dashboards, and it is intended for projects that utilize Node.js package management. After installation, the components can be imported into the project for further usage.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/grid-standalone.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @highcharts/dashboards\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts 3D Module in HTML\nDESCRIPTION: This HTML snippet shows how to include the Highcharts 3D plugin module in your web page. Ensure Highcharts is already loaded before this plugin.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/3d-charts.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/highcharts-3d.js\"><script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Highcharts Cinema Seat Plan in JavaScript\nDESCRIPTION: This code snippet sets up a Highcharts chart to create an interactive cinema seat plan. It defines the chart structure, seat data, and click events for seat selection and deselection.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/maps/demo/cinema-seat-plan/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighcharts.chart('container', {\n    chart: {\n        type: 'item'\n    },\n    title: {\n        text: 'Cinema seats'\n    },\n    legend: {\n        enabled: false\n    },\n    series: [{\n        name: 'Seats',\n        keys: ['name', 'y', 'color', 'label'],\n        data: [\n            ['1_1', 1, '#1E90FF', 'A1'],\n            ['1_2', 1, '#1E90FF', 'A2'],\n            ['1_3', 1, '#1E90FF', 'A3'],\n            ['1_4', 1, '#1E90FF', 'A4'],\n            ['1_5', 1, '#1E90FF', 'A5'],\n            ['1_6', 1, '#1E90FF', 'A6'],\n            ['1_7', 1, '#1E90FF', 'A7'],\n            ['1_8', 1, '#1E90FF', 'A8'],\n            ['1_9', 1, '#1E90FF', 'A9'],\n            ['1_10', 1, '#1E90FF', 'A10'],\n            ['2_1', 1, '#1E90FF', 'B1'],\n            ['2_2', 1, '#1E90FF', 'B2'],\n            ['2_3', 1, '#1E90FF', 'B3'],\n            ['2_4', 1, '#1E90FF', 'B4'],\n            ['2_5', 1, '#1E90FF', 'B5'],\n            ['2_6', 1, '#1E90FF', 'B6'],\n            ['2_7', 1, '#1E90FF', 'B7'],\n            ['2_8', 1, '#1E90FF', 'B8'],\n            ['2_9', 1, '#1E90FF', 'B9'],\n            ['2_10', 1, '#1E90FF', 'B10'],\n            ['3_1', 1, '#1E90FF', 'C1'],\n            ['3_2', 1, '#1E90FF', 'C2'],\n            ['3_3', 1, '#1E90FF', 'C3'],\n            ['3_4', 1, '#1E90FF', 'C4'],\n            ['3_5', 1, '#1E90FF', 'C5'],\n            ['3_6', 1, '#1E90FF', 'C6'],\n            ['3_7', 1, '#1E90FF', 'C7'],\n            ['3_8', 1, '#1E90FF', 'C8'],\n            ['3_9', 1, '#1E90FF', 'C9'],\n            ['3_10', 1, '#1E90FF', 'C10'],\n            ['4_1', 1, '#1E90FF', 'D1'],\n            ['4_2', 1, '#1E90FF', 'D2'],\n            ['4_3', 1, '#1E90FF', 'D3'],\n            ['4_4', 1, '#1E90FF', 'D4'],\n            ['4_5', 1, '#1E90FF', 'D5'],\n            ['4_6', 1, '#1E90FF', 'D6'],\n            ['4_7', 1, '#1E90FF', 'D7'],\n            ['4_8', 1, '#1E90FF', 'D8'],\n            ['4_9', 1, '#1E90FF', 'D9'],\n            ['4_10', 1, '#1E90FF', 'D10'],\n            ['5_1', 1, '#1E90FF', 'E1'],\n            ['5_2', 1, '#1E90FF', 'E2'],\n            ['5_3', 1, '#1E90FF', 'E3'],\n            ['5_4', 1, '#1E90FF', 'E4'],\n            ['5_5', 1, '#1E90FF', 'E5'],\n            ['5_6', 1, '#1E90FF', 'E6'],\n            ['5_7', 1, '#1E90FF', 'E7'],\n            ['5_8', 1, '#1E90FF', 'E8'],\n            ['5_9', 1, '#1E90FF', 'E9'],\n            ['5_10', 1, '#1E90FF', 'E10'],\n            ['6_1', 1, '#1E90FF', 'F1'],\n            ['6_2', 1, '#1E90FF', 'F2'],\n            ['6_3', 1, '#1E90FF', 'F3'],\n            ['6_4', 1, '#1E90FF', 'F4'],\n            ['6_5', 1, '#1E90FF', 'F5'],\n            ['6_6', 1, '#1E90FF', 'F6'],\n            ['6_7', 1, '#1E90FF', 'F7'],\n            ['6_8', 1, '#1E90FF', 'F8'],\n            ['6_9', 1, '#1E90FF', 'F9'],\n            ['6_10', 1, '#1E90FF', 'F10']\n        ],\n        dataLabels: {\n            enabled: true,\n            format: '{point.label}'\n        },\n        // Circular options\n        center: ['50%', '88%'],\n        size: '170%',\n        startAngle: -100,\n        endAngle: 100\n    }],\n    plotOptions: {\n        series: {\n            events: {\n                click: function (event) {\n                    if (!event.point.selected) {\n                        event.point.update({\n                            selected: true,\n                            color: 'orange'\n                        });\n                    } else {\n                        event.point.update({\n                            selected: false,\n                            color: '#1E90FF'\n                        });\n                    }\n                }\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Accessibility in Highcharts Grid\nDESCRIPTION: Shows how to enable or disable accessibility features such as ARIA attributes and live announcements using the accessibility configuration object.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/understanding-grid.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  accessibility: {\n    enabled: false,\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Range Selector Labels in Highcharts Stock CSS\nDESCRIPTION: CSS class for styling the range selector labels in Highcharts Stock. This replaces the JavaScript option for label style.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_64\n\nLANGUAGE: CSS\nCODE:\n```\n.highcharts-range-label\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Loading with ESM in Node.js\nDESCRIPTION: Example of importing Highcharts ES Modules in a Node.js environment for asynchronous loading support in v12.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/version-12.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Highcharts from 'highcharts/es-modules/masters/highcharts.src.js';\nimport 'highcharts/es-modules/masters/highcharts-more.src.js';\nimport 'highcharts/es-modules/masters/modules/exporting.src.js';\nimport 'highcharts/es-modules/masters/modules/accessibility.src.js';\n```\n\n----------------------------------------\n\nTITLE: New Axis Configuration Features in Highcharts\nDESCRIPTION: Two new axis configuration options were added: yAxis.angle for positioning axis line and labels in polar chart Y axes, and xAxis.nameToX allowing points to have the same name but different positions on category type axes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/4.2.7.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  yAxis: {\n    angle: 45 // Position axis line and labels at 45 degrees\n  },\n  xAxis: {\n    type: 'category',\n    nameToX: true // Allow same names with different positions\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog for Review (Bash)\nDESCRIPTION: This command generates a changelog for review, copying PR descriptions since the last release into markdown files for each product.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode changelog/generate --review\n```\n\n----------------------------------------\n\nTITLE: Adding SASS Default Variable Configuration\nDESCRIPTION: Implementation of !default statement in SASS variables to enable easier configuration of chart styling and appearances.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/5.0.10.md#2025-04-16_snippet_0\n\nLANGUAGE: SASS\nCODE:\n```\n!default\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts Grid Package\nDESCRIPTION: Install the Grid Lite package using npm for Vue project integration\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/wrappers/grid-with-vue.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @highcharts/grid-lite\n```\n\n----------------------------------------\n\nTITLE: Debugging with Custom Helper in Highcharts\nDESCRIPTION: This code demonstrates how to define a custom helper to log the context for debugging purposes within Highcharts templating. It allows inspecting the context when working with string formats instead of formatter callbacks.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/templating.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Custom helper to log the context\nHighcharts.Templating.helpers.log = function () {\n    console.log(arguments[0].ctx);\n};\n\n// Usage\nformat: '{log}'\n```\n\n----------------------------------------\n\nTITLE: Batch Converting Multiple Chart Configurations\nDESCRIPTION: Command for batch converting multiple chart configuration files to different image formats simultaneously\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/render-charts-serverside.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhighcharts-export-server -batch \"infile1.json=outfile1.png;infile2.json=outfile2.png;infile3.json=outfile3.png;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Highcharts for Negative Logarithmic Values\nDESCRIPTION: Setting the Axis.prototype.allowNegativeLog property to true enables handling of negative values on logarithmic axes. This configuration requires custom conversion functions to properly display the data.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/errors/10/enduser.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nAxis.prototype.allowNegativeLog = true\n```\n\n----------------------------------------\n\nTITLE: Initializing Highcharts Chart\nDESCRIPTION: This code snippet shows how to initialize a Highcharts chart using `Highcharts.chart()`. The chart is created within a container element with the ID 'container'.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/venn-series.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart('container', {\n    // Chart options\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Context Button in Highcharts with CSS\nDESCRIPTION: This CSS class name is used for the context button with a burger menu for the exporting module in Highcharts. It replaces visual options for exporting.buttons.contextButton and navigation.buttonOptions.theme, enabling customized styling through CSS.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_40\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-contextbutton\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Morningstar ESG Screener Connector in JavaScript\nDESCRIPTION: This code demonstrates how to instantiate the Morningstar Investment Screener Connector to filter sustainable investments. It configures pagination, language, currency, and specific ESG filters while specifying which security data points to return.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/morningstar/screeners/esg-screener.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst screenerConnector = new HighchartsConnectors.Morningstar.InvestmentScreenerConnector({\n    page: 1,\n    pageSize: 20,\n    languageId: 'en-GB',\n    currencyId: 'USD',\n    filters: [\n        {\n            dataPointId: 'SustainableInvestmentOverall',\n            comparatorCode: 'EQ',\n            value: true\n        }\n    ],\n    securityDataPoints: [\n        'secId',\n        'name',\n        'sustainableInvestmentOverall',\n        'historicalSustainabilityScore',\n        'sustainabilityPercentRank',\n        'average12MonthCarbonRiskScore',\n        'average12MonthFossilFuelExposure',\n        'tobacco',\n        'controversialWeapons',\n        'renewableEnergyProductionInvolvement'\n    ],\n    universeIds: ['FOALL$$ALL'],\n    postman: {\n        environmentJSON: postmanJSON\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Including Highcharts Dashboards via CDN - HTML\nDESCRIPTION: This snippet demonstrates how to include the Highcharts Dashboards library using a CDN. It provides both the JavaScript and CSS files necessary for the dashboards to function properly.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ts/Dashboards/README.md#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://code.highcharts.com/dashboards/dashboards.js\"></script>\n<link rel=\"stylesheet\" src=\"https://code.highcharts.com/dashboards/css/dashboards.css\">\n```\n\n----------------------------------------\n\nTITLE: Initializing Packed Bubble Data Structure in Highcharts\nDESCRIPTION: Demonstrates the data structure format for packed bubble charts where y values determine bubble positions and z values control bubble sizes. The data points are structured as an array of y values.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/packed-bubble-split/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndata:[y, y, y]\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Axis Title (CSS)\nDESCRIPTION: This CSS class styles the axis title text in Highcharts. It replaces the `axis.title.style` option.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_22\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-axis-title\"\n```\n\n----------------------------------------\n\nTITLE: Styling Drill-up Button in Highcharts with CSS\nDESCRIPTION: This CSS class name is used for styling the drill-up button in Highcharts. It replaces the drilldown.drillUpButton.theme option, allowing for custom button styling via CSS.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_43\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-drillup-button\n\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts Grid Lite via NPM\nDESCRIPTION: Command to install the Highcharts Grid Lite package using NPM package manager.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/installation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @highcharts/grid-lite\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts Export Server via NPM\nDESCRIPTION: This command installs the Highcharts export server using npm. The export server can then be used to export charts.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/setting-up-the-server.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install highcharts-export-server\"\n```\n\n----------------------------------------\n\nTITLE: Uploading Changelog to S3 (Bash)\nDESCRIPTION: This command assembles the content of all markdown files into an HTML file and uploads it to S3 for the website to access.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode changelog/upload\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Highstock v7.0.1\nDESCRIPTION: Changelog entry listing bug fixes and improvements for Highstock v7.0.1, including Stock Tools toolbar enhancements, indicator fixes, and IE compatibility updates.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts-stock/7.0.1.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog for Highstock v7.0.1 (2018-12-19)\n\n- Most changes listed under Highcharts 7.0.1 above also apply to Highstock 7.0.1.\n\n## Bug fixes\n- Improved layout in Stock Tools toolbar.\n- Fixed issue in Stock Tools where separate yAxes should be created for certain indicators.\n- Fixed missing translation of `measure` key in `lang.navigation.popup`.\n- Fixed #10214, stocktools bindings referred to wrong chart container.\n- Fixed #10351, ichimoku - remove was broken in iE11.\n- Fixed #10387, `verticalCounter` in stockTools was broken.\n- Fixed #10392, stocktools popup was not compatible with IE.\n- Fixed #9938, added annotation options in stocktools.\n```\n\n----------------------------------------\n\nTITLE: Defining Unique Map Identification hc-key Property\nDESCRIPTION: Demonstrates the hierarchical identification format for map areas using unique identifiers for different administrative levels\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/map-collection.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<unique admin0 id>-<unique admin1 id>-<unique admin2 id>-...\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts package with npm\nDESCRIPTION: This command installs the core Highcharts library which is needed to create charts inside the dashboard.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/wrappers/dashboards-with-vue.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install highcharts\"\n```\n\n----------------------------------------\n\nTITLE: Setting Tooltip Distance in Highcharts\nDESCRIPTION: Demonstrates how to configure the distance property for tooltips when the outside option is set to false. This affects the scaling of the tooltip's position relative to the data point.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/9.0.1.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ntooltip.outside\n```\n\n----------------------------------------\n\nTITLE: Normalizing SVG Path Array in JavaScript for Highcharts\nDESCRIPTION: This function normalizes an SVG path array by converting shorthand path commands to their full equivalents. It handles various path commands like M, L, C, Q, and A, ensuring consistency in path representation.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/website/themes-demo/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction normalizePath(path) {\n    const normalized = [];\n    let lastX = 0;\n    let lastY = 0;\n    let lastCommand = '';\n    let i = 0;\n\n    while (i < path.length) {\n        const command = path[i];\n        let x, y, x1, y1, x2, y2;\n\n        if (typeof command === 'string') {\n            lastCommand = command.toUpperCase();\n            i++;\n        }\n\n        switch (lastCommand) {\n            case 'M':\n                x = path[i++];\n                y = path[i++];\n                normalized.push('M', x, y);\n                lastX = x;\n                lastY = y;\n                break;\n            case 'L':\n                x = path[i++];\n                y = path[i++];\n                normalized.push('L', x, y);\n                lastX = x;\n                lastY = y;\n                break;\n            case 'C':\n                x1 = path[i++];\n                y1 = path[i++];\n                x2 = path[i++];\n                y2 = path[i++];\n                x = path[i++];\n                y = path[i++];\n                normalized.push('C', x1, y1, x2, y2, x, y);\n                lastX = x;\n                lastY = y;\n                break;\n            case 'Q':\n                x1 = path[i++];\n                y1 = path[i++];\n                x = path[i++];\n                y = path[i++];\n                normalized.push('Q', x1, y1, x, y);\n                lastX = x;\n                lastY = y;\n                break;\n            case 'A':\n                const rx = path[i++];\n                const ry = path[i++];\n                const xAxisRotation = path[i++];\n                const largeArcFlag = path[i++];\n                const sweepFlag = path[i++];\n                x = path[i++];\n                y = path[i++];\n                normalized.push('A', rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y);\n                lastX = x;\n                lastY = y;\n                break;\n            case 'Z':\n                normalized.push('Z');\n                break;\n        }\n    }\n\n    return normalized;\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Highcharts Gantt v9.2.1 Changelog in Markdown\nDESCRIPTION: This markdown snippet documents the changelog for Highcharts Gantt v9.2.1. It notes that most changes from Highcharts 9.2.1 are applicable to this Gantt version as well.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts-gantt/9.2.1.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog for Highcharts Gantt v9.2.1 (2021-08-19)\n\n- Most changes listed under Highcharts 9.2.1 above also apply to Highcharts Gantt 9.2.1.\n```\n\n----------------------------------------\n\nTITLE: Setting Default Instrument Options for All Tracks\nDESCRIPTION: JavaScript code showing how to set default instrument options that apply to all instrument tracks in the chart, in this case setting the default instrument to 'flute'.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/getting-started.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nsonification: {\n    duration: 4000,\n    defaultInstrumentOptions: {\n        instrument: 'flute'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GoogleSheetsConnector in DataPool\nDESCRIPTION: This snippet demonstrates how to configure a GoogleSheetsConnector within the DataPool. It specifies the connector's ID, type ('GoogleSheets'), and the API key and spreadsheet key required to access the Google Sheet.  Proper API key and spreadsheet key are required for this connector to work.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-handling.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndataPool: {\n    connectors: [{\n        id: 'my-google-sheets-connector',\n            type: 'GoogleSheets',\n            options: {\n                googleAPIKey: 'AIzaSyCQ0Jh8OFRShXam8adBbBcctlbeeA-qJOk',\n                googleSpreadsheetKey: '1U17c4GljMWpgk1bcTvUzIuWT8vdOnlCBHTm5S8Jh8tw'\n            }\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Null Points in Maps/Heatmaps with CSS\nDESCRIPTION: This CSS class name is used to style null points in maps or heat maps in Highcharts. This class replaces the plotOptions.map.nullColor option, enabling customization of how null data points are displayed visually.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_31\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-null-point\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Morningstar X-Ray Connector in JavaScript\nDESCRIPTION: Example of initializing the X-Ray Connector to fetch benchmark data points with specific performance metrics. The connector is configured with Postman environment settings and portfolio holdings specified by ISIN identifier.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/morningstar/x-ray.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst xRayConnector = new HighchartsConnectors.Morningstar.XRayConnector({\n    postman: {\n        environmentJSON: postmanJSON\n    },\n    dataPoints: {\n        type: 'benchmark',\n        dataPoints: [\n            'HistoricalPerformanceSeries',\n            ['PerformanceReturn', 'M0', 'M1', 'M2', 'M3', 'M6', 'M12'],\n            'ShowBreakdown'\n        ]\n    },\n    holdings: [\n        {\n            id: 'GB00BWDBJF10',\n            idType: 'ISIN',\n            weight: 100\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect String Data Usage in Highcharts Series\nDESCRIPTION: Example showing incorrect usage of string values in a Highcharts data series. This will trigger an error as Highcharts expects numerical values for data points. Common when data is parsed from CSV or XML without using parseFloat.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/errors/14/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [{\n    data: [\"3\", \"5\", \"1\", \"6\"]\n}]\n```\n\n----------------------------------------\n\nTITLE: Embedding Highcharts Bar Chart Demo in HTML\nDESCRIPTION: This snippet demonstrates how to embed a Highcharts bar chart demo using an iframe. The iframe is set to full width, 470px height, and has no border.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/bar-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe style=\"width: 100%; height: 470px; border: none;\" src=\"https://www.highcharts.com/samples/embed/highcharts/demo/bar-chart\" allow=\"fullscreen\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Styling Minor Grid Lines in Highcharts with CSS\nDESCRIPTION: This CSS class name is used for styling minor grid lines in Highcharts. It replaces the axis.minorGridLineColor and axis.minorGridLineWidth options, allowing customized styling of minor grid lines through CSS.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_45\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-minor-grid-line\n\n```\n\n----------------------------------------\n\nTITLE: Importing Default CSS for Highcharts Dashboards - CSS\nDESCRIPTION: This snippet demonstrates how to import default CSS stylesheets for Highcharts dashboards to ensure proper display of components. Custom CSS styles can also be added to override the default styles.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/frequently-asked-questions.md#2025-04-16_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import url(\"https://code.highcharts.com/dashboards/css/dashboards.css\");\n@import url(\"https://code.highcharts.com/dashboards/css/datagrid.css\");\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for ESM and UMD Bundles\nDESCRIPTION: Configuration module for generating both ECMAScript Module (ESM) and Universal Module Definition (UMD) bundles from Highcharts master files\nSOURCE: https://github.com/highcharts/highcharts/blob/master/tools/webpacks/README.md#2025-04-16_snippet_2\n\nLANGUAGE: mjs\nCODE:\n```\n// highcharts.webpack.mjs\n// Webpack configuration for ESM and UMD bundle generation\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Timezone Offset in Highcharts\nDESCRIPTION: Configuration option that allows setting the timezone for data display in Highcharts, even when input data is in UTC format. This is referenced through the global.timezoneOffset API endpoint.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/3.0.8.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nglobal.timezoneOffset\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Maps as a Standalone Product\nDESCRIPTION: Script tag to include the standalone Highcharts Maps library (highmaps.js) for users who don't have a Highcharts license.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/getting-started.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/maps/highmaps.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Highcharts Dashboards v2.0.0\nDESCRIPTION: Comprehensive changelog documenting new features, upgrade requirements, and bug fixes for the Highcharts Dashboards v2.0.0 release. Includes details about custom HTML layout support, CSS styling improvements, component modularization, and synchronization enhancements.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts-dashboards/2.0.0.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog for Highcharts Dashboards v2.0.0 (2024-03-13)\n\n- Added support for [custom HTML layout](https://www.highcharts.com/docs/dashboards/layout-description#custom-layout). The use of `gui` is now optional.\n- Dashboard, and charts, are now [100% stylable via CSS](https://www.highcharts.com/docs/dashboards/style-by-css) instead of JavaScript configuration.\n- Include what you need, with [Dashboards Core](https://www.highcharts.com/docs/dashboards/installation), [Layout/EditMode](https://www.highcharts.com/docs/dashboards/layout-description) and [DataGrid](https://www.highcharts.com/docs/dashboards/datagrid-component) as separate scripts. `dashboards-plugin` is removed and no longer needed.\n- Improved [chart synchronization options](https://www.highcharts.com/docs/dashboards/synchronize-components), and added additional options to highlight synchronization. `highlight`, `tooltip` and `crosshair` can now be set separately.\n- Improved and simplified [column assignment](https://www.highcharts.com/docs/dashboards/highcharts-component#working-with-data). Moved the option from `component` scope to `component.connector`.\n- Added support for HTML as string in the [HTML Component](https://www.highcharts.com/docs/dashboards/html-component).\n\n## Upgrade notes\n\n- [Dashboards Core](https://www.highcharts.com/docs/dashboards/installation), [Layout/EditMode](https://www.highcharts.com/docs/dashboards/layout-description) and [DataGrid](https://www.highcharts.com/docs/dashboards/datagrid-component) are now seperate scripts, and needs to be explicitly included whenever needed. See respective documentation articles for details.\n- The old `columnAssignment` logic is no longer supported, and needs to be refactored to [the new one](https://www.highcharts.com/docs/dashboards/highcharts-component#working-with-data).\n- Responsive layout should now be specified using [CSS media queries](https://www.highcharts.com/docs/dashboards/layout-description#how-the-dashboard-layout-engine-makes-your-dashboard-responsive).\n\n## Bug fixes\n\n- Fixed synchronization was not stopping during component destroy.\n- Fixed point dragging with `allowConnectorUpdate` in Highcharts Component.\n```\n\n----------------------------------------\n\nTITLE: Defining Map Data with Region Codes in JavaScript\nDESCRIPTION: Shows how to define data for a map visualization using region codes that match the hc-key property in the map data. This example uses US state codes with corresponding values.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/map-collection.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndata: [['us-ny', 0], ['us-mi', 5], ['us-tx', 3], ['us-ak', 5]]\n```\n\n----------------------------------------\n\nTITLE: XSS Filtering on Partial Chart Options Update\nDESCRIPTION: This snippet shows how XSS filtering is applied even when updating chart elements with partial options. It ensures that unsafe HTML in the title text is filtered out when using the setTitle method.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/security.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst chart = Highcharts.chart('container', {});\nchart.setTitle({\n    // Filtered\n    text: \"<a href='javascript:console.log(document.domain)'>Click me</a>\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring centerInCategory for Column Range Series in Highcharts\nDESCRIPTION: Shows how to use the centerInCategory option with columnrange series. This option centers the columns within their respective categories.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/9.0.1.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nplotOptions.column.centerInCategory\n```\n\n----------------------------------------\n\nTITLE: Defining Data for Packed Bubble Chart in Highcharts\nDESCRIPTION: Demonstrates the data structure for a packed bubble chart in Highcharts. The y value in the data array represents the size of each bubble.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/series-packedbubble/parentnode-style/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndata:[y, y, y]\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Crosshair (CSS)\nDESCRIPTION: This CSS class is used for styling the crosshair extending from the axis to the currently highlighted point in Highcharts. Styling can also be differentiated by `_.highcharts-crosshair-category` or `_.highcharts-crosshair-thin`.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-crosshair\"\n```\n\n----------------------------------------\n\nTITLE: Styling Active Legend Navigation in Highcharts with CSS\nDESCRIPTION: This CSS class name styles the active arrow of the legend navigation in Highcharts. It replaces legend.navigation.activeColor, allowing for custom styling through CSS.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_53\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-legend-nav-active\n\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Webpack in tsconfig.json\nDESCRIPTION: This JSON snippet demonstrates how to configure TypeScript for use with Webpack. It sets the moduleResolution to 'bundler' to ensure TypeScript takes all declarations into account.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/highcharts-typescript-declarations.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ // tsconfig.json snippet\n    \"compilerOptions\": {\n        \"moduleResolution\": \"bundler\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Crosshair Label (CSS)\nDESCRIPTION: This CSS class styles the label next to the crosshair in Highcharts Stock.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_24\n\nLANGUAGE: css\nCODE:\n```\n\".highcharts-crosshair-label\"\n```\n\n----------------------------------------\n\nTITLE: Adding proj4JS Library for Geospatial Coordinate Conversion\nDESCRIPTION: Recommendation to include proj4JS library to support advanced geographical coordinate transformations and projections in Highcharts. The library enables complex mathematical conversions between different coordinate systems.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/maps/marker-clusters/europe/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.7.5/proj4.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Embedding Highcharts Areaspline Chart Demo\nDESCRIPTION: This HTML snippet embeds an interactive demo of an areaspline chart from the Highcharts website. The iframe is styled to be responsive and fill its container.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/areaspline-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe style=\"width: 100%; height: 470px; border: none;\" src=\"https://www.highcharts.com/samples/embed/highcharts/demo/areaspline\" allow=\"fullscreen\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Calculating Point on Cubic Bezier Curve in JavaScript for Highcharts\nDESCRIPTION: This function calculates a point on a cubic Bezier curve given the control points and a parameter t. It uses the cubic Bezier formula to interpolate between the points based on the t value (0 to 1).\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/website/themes-demo/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction cubicBezier(p0, p1, p2, p3, t) {\n    const mt = 1 - t;\n    return {\n        x: mt * mt * mt * p0.x + 3 * mt * mt * t * p1.x + 3 * mt * t * t * p2.x + t * t * t * p3.x,\n        y: mt * mt * mt * p0.y + 3 * mt * mt * t * p1.y + 3 * mt * t * t * p2.y + t * t * t * p3.y\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML container for Highcharts Grid\nDESCRIPTION: This HTML snippet creates a `div` element with the id `container`. The Highcharts Grid will be rendered inside this `div` element.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/wrappers/grid-with-angular.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts Modules - Legacy v11 Method\nDESCRIPTION: Demonstrates the deprecated method of importing and initializing Highcharts modules in version 11. This approach used a factory function pattern that required explicit module initialization.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/12.0.0.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Highcharts from 'highcharts';\nimport addAccessibility from 'highcharts/modules/accessibility';\n\naddAccessibility(Highcharts); // <== This no longer works!\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts Dashboards using NPM\nDESCRIPTION: This bash command installs the Highcharts and Highcharts Dashboards packages using NPM. This allows for importing and using the libraries within a JavaScript project.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/kpi-component.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install highcharts @highcharts/dashboards\n```\n\n----------------------------------------\n\nTITLE: Loading Parallel Coordinates Module in Highcharts\nDESCRIPTION: Instructions for including the required parallel coordinates module in Highcharts. The module is essential for creating parallel coordinates charts and should be loaded from the modules directory.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/parallel-coordinates/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/modules/parallel-coordinates.js\n```\n\n----------------------------------------\n\nTITLE: Customizing Accessibility Language in Highcharts Grid\nDESCRIPTION: This snippet shows how to customize the language and wording for accessibility features like ARIA attributes and announcements using the lang.accessibility configuration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/accessibility.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  lang: {\n    accessibility: {\n      cellEditing: {\n        editable: \"Editable\",\n        announcements: {\n          started: \"Entered cell editing mode\",\n          ...\n        }\n      },\n      sorting: {\n        announcements: {\n          ascending: \"Sorted ascending\",\n          ...\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts package\nDESCRIPTION: This command installs the Highcharts library, which can be used in conjunction with Highcharts Dashboards to create charts and visualizations. It is a dependency if you plan to use Highcharts within your dashboard.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/wrappers/dashboards-with-angular.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install highcharts\"\n```\n\n----------------------------------------\n\nTITLE: Updating Points in Highcharts Series\nDESCRIPTION: Demonstrates the usage of the update event for points in a series. This is relevant when using scrollablePlotArea and maintaining y-axis position after updates.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/9.0.1.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nplotOptions.series.point.events.update\n```\n\n----------------------------------------\n\nTITLE: Styling Navigator Outline in Highcharts Stock CSS\nDESCRIPTION: CSS class for styling the navigator outline in Highcharts Stock. This replaces the JavaScript options for outline color and width.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_59\n\nLANGUAGE: CSS\nCODE:\n```\n.highcharts-navigator-outline\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Performance Options in JavaScript\nDESCRIPTION: Configuration options for optimizing Grid performance through buffer size and strict heights settings. The bufferSize controls how many rows are rendered outside the viewport, while strictHeights enforces uniform row heights for better performance.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/performance.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    rendering: {\n        rows: {\n            bufferSize: 3, // default is 10\n            strictHeights: true // default is false\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Legend Title in Highcharts with CSS\nDESCRIPTION: This CSS class name is used for the legend title in Highcharts.  Use this CSS rule for text styling. It replaces legend.title.style, allowing for customized styling of the legend title through CSS.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_55\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-legend-title\n\n```\n\n----------------------------------------\n\nTITLE: Styling Exporting Button Symbol in Highcharts with CSS\nDESCRIPTION: This CSS class name is used to style the symbol for the exporting button in Highcharts. It can be used to set the stroke and fill properties of the symbol, providing customization options through CSS.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_37\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-button-symbol\n\n```\n\n----------------------------------------\n\nTITLE: JSON.parse Method Throwing on Invalid Function Syntax\nDESCRIPTION: This example demonstrates how the usage of JSON.parse on an invalid JSON string (due to the inclusion of a function) throws a SyntaxError. This ensures that only valid JSON configurations are accepted, avoiding potential XSS vectors.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/security.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst options = JSON.parse(`{\n    \"chart\": {\n        \"events\": {\n            \"load\": () => console.log(document.domain)\n        }\n    }\n}`); // => Throws SyntaxError\nHighcharts.chart('container', options);\n```\n\n----------------------------------------\n\nTITLE: Thunderforest Provider Configuration Options\nDESCRIPTION: This snippet shows the available properties for the Thunderforest provider, including various theme options and possible subdomains for load balancing.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/tiledwebmap.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ntheme: 'OpenCycleMap', 'Transport', 'TransportDark', 'SpinalMap', 'Landscape', 'Outdoors', 'Pioneer', 'MobileAtlas', 'Neighbourhood'\nsubdomain: 'a', 'b', 'c'\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts Dashboards via npm - Shell\nDESCRIPTION: This snippet shows the command to install the Highcharts Dashboards package using npm. It requires npm to be installed and set up in the user's environment.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ts/Dashboards/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @highcharts/dashboards\n```\n\n----------------------------------------\n\nTITLE: Setting Styled Mode Configuration\nDESCRIPTION: Configuration example showing how to enable styled mode in Highcharts by setting the chart.styledMode option to true.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/7.0.0.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  chart: {\n    styledMode: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of MIT Licensed Function in Highcharts Contribution\nDESCRIPTION: Demonstrates the proper way to document license information for code contributions to Highcharts. The example shows how to attribute authorship and specify MIT licensing for a contributed function.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * The following function is licensed under the MIT license.\n * Author: John Doe\n */\nfunction anMITLicensedFunction () {\n<some awesome code in here>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts Grid module in Angular\nDESCRIPTION: This import statement brings the Highcharts Grid module into the Angular component.  It allows the component to use the Grid functionality.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/wrappers/grid-with-angular.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Grid from '@highcharts/grid-lite/es-modules/masters/grid-lite.src.js';\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts CSS from CDN using @import\nDESCRIPTION: This snippet shows how to import the Highcharts CSS file from the CDN using the `@import` rule within a `<style>` tag. This approach allows you to include the Highcharts styles directly within your CSS code. It's recommended to use a version-specific URL in production.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style>\n@import url('https://code.highcharts.com/css/highcharts.css');\n</style>\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Dashboard Component - CSS\nDESCRIPTION: This snippet styles a dashboard component's div by setting a border-radius using the 'highcharts-dashboards-component' class.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/style-by-css.md#2025-04-16_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\n.highcharts-dashboards-component {\n    border-radius: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Theme Inheritance in Highcharts Grid CSS\nDESCRIPTION: Shows how to build an extended theme that inherits from a base theme. The base theme defines font family and size, while the extended theme overrides just the font size for specific use cases.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/theming/theming.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.theme-brand {\n  --hcg-font-family: \"Brand Font\", Arial, sans-serif;\n  --hcg-font-size: 12px;\n}\n\n.theme-brand-big {\n  --hcg-font-size: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Series Names - JavaScript\nDESCRIPTION: This snippet warns about modifying series names in a chart because it can disrupt synchronization with other components. It shows an example of how this modification could be implemented incorrectly.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/frequently-asked-questions.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nafterRender(e) {\n    // Potential problem: setting custom name for series\n    e.target.chart.series[0].name = 'customName'\n    e.target.chart.series[1].name = 'otherCustomName'\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Grid Modules for Dashboards in HTML\nDESCRIPTION: This snippet shows how to import the Grid module for use in Highcharts Dashboards by specifying the script source. This is necessary for including Grid functionalities in a dashboard layout.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/types-of-components.md#2025-04-16_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://code.highcharts.com/dashboards/datagrid.js\"></script>\n<script src=\"https://code.highcharts.com/dashboards/dashboards.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for Server Command\nDESCRIPTION: This snippet details the usage of the command to run the Node.js server. It outlines the available options for specifying the server port, with a default setting provided.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/tools/gulptasks/lib/api/README.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nUsage: node server.js {OPTIONS}\n\nOptions:\n    --port  Specify a port for the server. Defaults to 8080.\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Container for Highcharts Grid\nDESCRIPTION: HTML snippet showing the container element where the Highcharts Grid will be rendered.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/general.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\"></div>\n```\n\n----------------------------------------\n\nTITLE: LimaLabs Provider Configuration Options\nDESCRIPTION: This snippet shows the available theme property for the LimaLabs provider, which currently only offers a Standard theme option for its tile maps.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/tiledwebmap.md#2025-04-16_snippet_8\n\nLANGUAGE: js\nCODE:\n```\ntheme: 'Standard'\n```\n\n----------------------------------------\n\nTITLE: Defining Dashboard Demo Links in Markdown\nDESCRIPTION: This snippet provides markdown-formatted links to four different dashboard demos. Each link points to a localhost URL with specific parameters to load the desired dashboard.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/website/small-demos-dashboards/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-[Climate Dashboard](http://localhost:3030/samples/view?path=highcharts/website/small-demos-dashboards&charts=climate)    \n-[Minimal Dashboard](http://localhost:3030/samples/view?path=highcharts/website/small-demos-dashboards&charts=minimal)    \n-[Data Cursor Sync](http://localhost:3030/samples/view?path=highcharts/website/small-demos-dashboards&charts=datacursor)   \n-[Sync Extremes](http://localhost:3030/samples/view?path=highcharts/website/small-demos-dashboards&charts=extremes)  \n```\n\n----------------------------------------\n\nTITLE: Initializing Highcharts with New Constructor Pattern\nDESCRIPTION: Demonstrates the new constructor pattern that allows chart instantiation without the 'new' keyword and enables setting the renderTo element as the first argument.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/4.2.0.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.chart(renderTo, options);\n```\n\n----------------------------------------\n\nTITLE: Handling Table Change Events in TypeScript\nDESCRIPTION: Set up event listeners for table data changes made through setter functions. Indirect changes via column references do not trigger events. Listeners can track various table operations like row additions.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ts/Data/README.md#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntable.on('afterSetRows', function (e) {\n    e.rowCount === 1;\n    this.getRowCount() === 3;\n});\ntable.setRow([2023, 'Gremlins 3']);\ntable.deleteRows(table.getRowIndexBy('title', 'Gremlins 3'), 1);\n```\n\n----------------------------------------\n\nTITLE: Starting Node.js Server\nDESCRIPTION: This snippet explains how to start a static file server using Node.js. It requires Node.js to be installed beforehand. The command opens a terminal in the specified folder and runs the server script, making the API accessible at a specified URL.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/tools/gulptasks/lib/api/README.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnode server.js\n```\n\n----------------------------------------\n\nTITLE: Opening Generated API Documentation in Browser\nDESCRIPTION: This snippet shows the command to open the generated API documentation in a web browser. The command assumes the documentation has been previously created at the specified path.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ts/Dashboards/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nopen build/api/dashboards/index.html\n```\n\n----------------------------------------\n\nTITLE: Loading JavaScript with UTF-8 Encoding\nDESCRIPTION: HTML script tag specifying UTF-8 character encoding for an external JavaScript file. This allows non-English characters to display correctly in Highcharts when the main HTML file cannot be modified.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/frequently-asked-questions.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"charts.js\" charset=\"UTF-8\"></script>\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Module\nDESCRIPTION: This import statement includes the layout module from Highcharts Dashboards, enabling the use of the built-in layout system to structure the dashboard. This allows to create pre-defined layouts without custom HTML.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/wrappers/dashboards-with-angular.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"import '@highcharts/dashboards/es-modules/masters/modules/layout.src.js';\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Component with Custom Classes - TypeScript\nDESCRIPTION: This TypeScript snippet configures an HTML component within a dashboard, assigning custom classes and IDs to elements for styling purposes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/style-by-css.md#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n    type: 'HTML',\n    renderTo: 'dashboard-row-1-cell-3',\n    elements: [\n        {\n            tagName: 'div',\n            children: [\n                {\n                    tagName: 'h4',\n                    textContent: 'Check how you can save more!',\n                    attributes: {\n                        class: 'main-title'\n                    }\n                },\n                {\n                    tagName: 'button',\n                    textContent: 'Go to the saving account',\n                    attributes: {\n                        id: 'saving-button'\n                    }\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing High Contrast Mode in Highcharts Grid Themes\nDESCRIPTION: This CSS snippet demonstrates how to create a custom theme for Highcharts Grid that includes a high contrast variant, activated when the user has their system set to high contrast mode.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/accessibility.md#2025-04-16_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.my-theme {\n  --hcg-color: #606060;\n  --hcg-border-stye: dashed;\n  ...;\n}\n@media (prefers-contrast: more) {\n  .my-theme {\n    --hcg-color: #000000;\n    --hcg-border-style: solid;\n    ...;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Modifier with Math Transformation\nDESCRIPTION: Demonstrates using a Math data modifier to create a new column with mathematical transformation.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/grid-component.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconnectors: [{\\n    id: 'data',\\n    type: 'CSV',\\n    options: {\\n        csv: `A,B\\n        1,3\\n        20,2\\n        100,2`,\\n        dataModifier: {\\n            type: 'Math',\\n            columnFormulas: [{\\n                column: 'Sum',\\n                formula: 'A1+B1'\\n            }]\\n        }\\n    }\\n}]\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts for Legacy Browser Support\nDESCRIPTION: HTML snippet showing how to load Highcharts from the 'es5' folder to support legacy browsers like IE 11 and QtWeb. This approach loads both the core Highcharts library and the exporting module from the legacy-compatible source.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/system-requirements.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/es5/highcharts.js\"></script>\n<script src=\"https://code.highcharts.com/es5/modules/exporting.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: PhantomJS JSON Resources Example\nDESCRIPTION: This JSON snippet shows the structure of the `resources` parameter used with the PhantomJS export server. It allows specifying JavaScript files, CSS, and JavaScript code to be injected into the page before rendering the chart, enabling customization of the chart's appearance and behavior.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/legacy-export-servers.md#2025-04-16_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\"files\": \"highstock.js,highcharts-more.js,data.js,drilldown.js,funnel.js,heatmap.js,treemap.js,highcharts-3d.js,no-data-to-display.js,map.js,solid-gauge.js,broken-axis.js\",\n\"css\": \"g.highcharts-series path {stroke-width:2;stroke: pink}\",\n\"js\": \"document.body.style.webkitTransform = 'rotate(-10deg)';\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Node.js\nDESCRIPTION: This snippet shows how to execute the test suite for the project. It uses the `node --test` command followed by the path to the test file. This command utilizes Node.js's built-in test runner to execute the specified tests.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/tools/gulptasks-tests/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n`node --test ./tools/gulptasks-tests`\n```\n\n----------------------------------------\n\nTITLE: Referencing Highcharts Components in JavaScript\nDESCRIPTION: Example references to key Highcharts components that demonstrate the overlap between Highcharts and Highstock. Shows that Highstock includes all Highcharts functionality, making separate inclusion unnecessary.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/errors/16/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nHighcharts.Chart\nHighcharts\n```\n\n----------------------------------------\n\nTITLE: Styling Navigator Mask in Highcharts Stock CSS\nDESCRIPTION: CSS classes for styling the navigator mask in Highcharts Stock. These replace the JavaScript option for mask fill.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_58\n\nLANGUAGE: CSS\nCODE:\n```\n.highcharts-navigator-mask-outside\n.highcharts-navigator-mask-inside\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Highcharts API Usage in Markdown\nDESCRIPTION: This snippet shows examples of Highcharts API options being referenced in the changelog. It includes links to documentation for new features and options.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/8.0.0.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Added new series type, [radial bar chart](https://www.highcharts.com/docs/chart-and-series-types/radial-bar-chart).\n- Added [data sorting](https://www.highcharts.com/docs/advanced-chart-features/data-sorting) with animations on update.\n- Added [marker clusters ](https://www.highcharts.com/docs/advanced-chart-features/marker-clusters) for scatter and map point series.\n- Added new option [accessibility.linkedDescription](https://api.highcharts.com/highcharts/accessibility.linkedDescription).\n```\n\n----------------------------------------\n\nTITLE: Configuring RequireJS for Highcharts Stock\nDESCRIPTION: This JavaScript snippet shows how to configure RequireJS specifically for Highcharts Stock. It adjusts the main file to 'highstock' and updates the path accordingly.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/highcharts-typescript-declarations.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire.config({\n    packages: [{\n        name: 'highcharts',\n        main: 'highstock'\n    }],\n    paths: {\n        'highcharts': 'https://code.highcharts.com/stock'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Running Base Cypress Tests\nDESCRIPTION: This shell command is used to run Cypress tests to generate reference images for visual comparison. The command specifies the environment as 'base' in the configuration file located at test/cypress/dashboards/visual.config.mjs. It is necessary to execute this in the reference branch to establish a baseline for later comparisons.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/test/cypress/dashboards/visual/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx cypress run --env type=base --config-file test/cypress/dashboards/visual.config.mjs\n```\n\n----------------------------------------\n\nTITLE: Accessing Highcharts AST in JavaScript\nDESCRIPTION: Exposes the Highcharts.AST object for overriding HTML allow lists. This allows developers to customize the allowed HTML elements and attributes in Highcharts.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/9.0.1.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nHighcharts.AST\n```\n\n----------------------------------------\n\nTITLE: Importing Dashboards CSS\nDESCRIPTION: This CSS import statement imports the dashboards.css file. This CSS file provides the default styling for Highcharts Dashboards components.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/kpi-component.md#2025-04-16_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@import url(\"https://code.highcharts.com/dashboards/css/dashboards.css\");\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Highcharts UMD\nDESCRIPTION: TypeScript compiler options configuration for using Highcharts with UMD modules. These settings enable proper module resolution and synthetic default imports.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/installation-with-esm.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"allowSyntheticDefaultImports\": true,\n    \"module\": \"umd\",\n    \"moduleResolution\": \"node\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Pictorial Module in HTML\nDESCRIPTION: This snippet shows how to include the necessary Highcharts scripts, including the pictorial module, in an HTML file.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/pictorial.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n<script src=\"https://code.highcharts.com/modules/pictorial.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Start Local Development Server\nDESCRIPTION: This command starts a local development server for the Docusaurus website. It opens a browser window and provides live reloading for most changes made to the project files.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/tools/docs-preview/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"$ yarn start\"\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Modules Before v12\nDESCRIPTION: Example showing how modules were loaded in Highcharts versions prior to v12, requiring explicit factory function calls with the Highcharts namespace.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/version-12.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Highcharts from 'highcharts';\nimport HighchartsExport from 'highcharts/modules/exporting';\nHighchartsExport(Highcharts);\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts Grid package using npm\nDESCRIPTION: This command installs the `@highcharts/grid-lite` package using npm. This package provides the necessary files and dependencies to use Highcharts Grid in an Angular project.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/wrappers/grid-with-angular.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @highcharts/grid-lite\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Legacy Script Usage in Highcharts\nDESCRIPTION: This code snippet shows how to use legacy script files from the /es5 folder to support older browsers like IE11. It demonstrates loading Highcharts and its modules from the es5 path.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/10.3.3.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script src=\"https://code.highcharts.com/es5/highcharts.js\"></script>\n<script src=\"https://code.highcharts.com/es5/modules/exporting.js\"></script>\n<script src=\"https://code.highcharts.com/es5/modules/accessibility.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Highstock v5.0.6 Changelog Entry\nDESCRIPTION: Markdown formatted changelog entry detailing new features and bug fixes for Highstock v5.0.6, including improvements to comparison functionality and fixes for axis offset, extremes calculation, polar charts, and configuration options.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts-stock/5.0.6.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog for Highstock v5.0.6 (2016-12-07)\n        \n- Most changes listed under Highcharts 5.0.6 above also apply to Highstock 5.0.6.\n- Added new option, `series.compareBase`, to allow percentage comparison to start at 100%.\n\n## Bug fixes\n- Fixed #2685, `xAxis.offset` didn't work for navigator's xAxis.\n- Fixed #5924, wrong extremes on dynamically added axes.\n- Fixed #6057, setting correct series clip-path for polar charts.\n- Fixed #4988, `navigator.enabled`, `rangeSelector.enabled`, `scrollbar.enabled` ignored when `setOptions` was used.\n```\n\n----------------------------------------\n\nTITLE: Linking to Highcharts Lollipop Documentation\nDESCRIPTION: Markdown link to the official Highcharts API documentation for lollipop chart plot options.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/lollipop/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Lollipop](https://api.highcharts.com/highcharts/plotOptions.lollipop)\n```\n\n----------------------------------------\n\nTITLE: Including Bollinger Bands Script in HTML\nDESCRIPTION: HTML script tag to include the Bollinger Bands indicator which provides access to the MultipleLines mixin.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/stock/custom-technical-indicators.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"https://code.highcharts.com/stock/indicators/bollinger-bands.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Running Actual Cypress Tests\nDESCRIPTION: This shell command runs Cypress tests to compare current images against previously generated reference images. It is executed in the comparison branch with the 'actual' environment specified in the configuration file at test/cypress/dashboards/visual.config.mjs. This step follows after establishing a baseline.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/test/cypress/dashboards/visual/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx cypress run --env type=actual --config-file test/cypress/dashboards/visual.config.mjs\n```\n\n----------------------------------------\n\nTITLE: Sending File Contents via POST with curl (Mac & Linux)\nDESCRIPTION: This shell command demonstrates how to send the contents of a file as part of a POST request to the PhantomJS export server using curl on Mac or Linux systems. This is used when the Highcharts configuration is stored in an external JSON file.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/legacy-export-servers.md#2025-04-16_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncurl http://127.0.0.1:3005 -H \"Content-Type: application/json\" -X POST --data-binary \"@/Users/yourname/yourfolder/chart-config.json\"\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts Grid Lite Package via npm\nDESCRIPTION: This snippet provides the command to install the Highcharts Grid Lite package using npm. This package is necessary to integrate grids into React components. Ensure npm is installed and configured in your development environment.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/wrappers/grid-with-react.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @highcharts/grid-lite\n```\n\n----------------------------------------\n\nTITLE: Importing Dashboards CSS Styles\nDESCRIPTION: CSS import statements for including necessary Highcharts Dashboards and Grid component styles.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/grid-component.md#2025-04-16_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import url(\"https://code.highcharts.com/dashboards/css/dashboards.css\");\\n@import url(\"https://code.highcharts.com/dashboards/css/datagrid.css\");\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts nightly build\nDESCRIPTION: Command to install the nightly build of Highcharts directly from GitHub. Nightly builds provide access to upcoming features but are not stable for production use.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/install-from-npm.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save highcharts/highcharts-dist#nightly\n```\n\n----------------------------------------\n\nTITLE: Configuring Highcharts Dashboard Context Menu\nDESCRIPTION: Demonstrates configuring custom items in the Highcharts Dashboard context menu. It includes creating buttons with specific id, type, text, and onclick events.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/edit-mode.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nitems: [{\n    id: 'custom-id',\n    type: 'toggle',\n    text: 'Custom Name',\n    events: {\n        click: function () {\n            // onClick Event\n        }\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Embedding Highcharts Spline Chart Example in HTML\nDESCRIPTION: This HTML snippet embeds an interactive example of a spline chart from the Highcharts demo page. The iframe is styled to be responsive and takes up the full width of its container with a height of 480 pixels.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/spline-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe style=\"width: 100%; height: 480px; border: none;\" src=\"https://www.highcharts.com/samples/embed/highcharts/demo/spline-inverted\" allow=\"fullscreen\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Highcharts Test Template Usage Pattern\nDESCRIPTION: Demonstrates how to use test templates for efficient unit testing, showing chart modification and assertion in a QUnit test\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('My test', function (assert) {\\n    TestTemplate.test('highcharts/line', {\\n        // additional options to modify the template defaults\\n        myOptionsToTest: {\\n            enabled: true\\n        }\\n    }, function (testTemplate) {\\n        var chart = testTemplate.chart;\\n        assert.strictEqual(\\n            chart.myPropertyToTest,\\n            20,\\n            'Chart.myPropertyToTest should be 20 if myOptionsToTest is enabled.'\\n        );\\n    });\\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid HTML Attributes in Highcharts\nDESCRIPTION: Examples of problematic HTML attributes and tags that would trigger the sanitization error in Highcharts, including misspelled tags like 'lineargradient' and security-blocked attributes like 'onclick'.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/errors/33/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nlineargradient\\nonclick\n```\n\n----------------------------------------\n\nTITLE: PhantomJS POST Request JSON Example\nDESCRIPTION: This JSON snippet shows an example of the JSON structure expected by the PhantomJS export server when running in web server mode. It includes the Highcharts configuration, a JavaScript callback function, and the constructor type to use (Chart or StockChart).\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/legacy-export-servers.md#2025-04-16_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\"infile\":\"{xAxis: {categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']},series: [{data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4]}]};\",\"callback\":\"function(chart) {chart.renderer.arc(200, 150, 100, 50, -Math.PI, 0).attr({fill : '#FCFFC5',stroke : 'black','stroke-width' : 1}).add();}\",\"constr\":\"Chart\"}\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation using TypeDoc in Shell\nDESCRIPTION: This snippet describes the command used to generate API documentation for Highcharts Dashboards using the gulp build system. It requires Node.js and gulp to be installed beforehand.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ts/Dashboards/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpx gulp dashboards/api-docs\n```\n\n----------------------------------------\n\nTITLE: Embedding Highcharts Area Chart Demo in HTML\nDESCRIPTION: This HTML snippet embeds an interactive demo of an area chart from the Highcharts website. The iframe is set to full width, has a height of 520 pixels, and allows fullscreen mode.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/area-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe style=\"width: 100%; height: 520px; border: none;\" src=\"https://www.highcharts.com/samples/embed/highcharts/demo/area-chart\" allow=\"fullscreen\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Disabling Navigator in Highcharts\nDESCRIPTION: Demonstrates how to disable the navigator feature by setting the enabled property to false. This prevents the scrollbar from appearing and reduces visual clutter in the chart.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/stock/navigator/navigator-disabled/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  navigator: {\n    enabled: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Highcharts v12.0.1\nDESCRIPTION: Documents a bug fix for issue #22243 where compiled files were missing from the npm package distribution.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/12.0.1.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog for Highcharts v12.0.1 (2024-11-28)\n\n- Fixed #22243, compiled files were not available on npm.\n```\n\n----------------------------------------\n\nTITLE: Describing Sonification Navigation Demo in Markdown\nDESCRIPTION: This markdown snippet explains the purpose of the demo, which is to demonstrate custom keyboard navigation with the sonification module in Highcharts. It mentions the use of SonificationSpeaker for custom announcements and instructs users to click 'Play chart' to start and enable keyboard navigation.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/sonification-navigation/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Sonification Navigation\nThis demo shows how custom keyboard navigation can be set up with the sonification module. It also demonstrates use of the SonificationSpeaker for more flexible custom speaker announcements. Click \"Play chart\" to get started and enable the keyboard navigation.\n```\n\n----------------------------------------\n\nTITLE: Defining External Module Mappings in JSON\nDESCRIPTION: Configuration file for mapping Highcharts module imports to specific namespaces and bundles, allowing flexible module inclusion and namespace assignment\nSOURCE: https://github.com/highcharts/highcharts/blob/master/tools/webpacks/README.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": [\"list of imports relative to code/es-modules\"],\n  \"included\": [\"optional list of module masters\"],\n  \"namespacePath\": \"namespace assignment path\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Layout Module in Dashboards\nDESCRIPTION: This snippet illustrates how to import and register the layout module of Highcharts Dashboards. This is necessary if a custom layout is not used.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/installation.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Dashboards from '@highcharts/dashboards';\nimport LayoutModule from '@highcharts/dashboards/modules/layout';\n\nLayoutModule(Dashboards);\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts Dashboard Modules - JavaScript\nDESCRIPTION: This snippet illustrates how to import the Highcharts dashboards and layout modules in a JavaScript project. This setup is crucial for initializing and managing the dashboard functionality programmatically.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/layout-description.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Dashboards from '@highcharts/dashboards';\nimport LayoutModule from '@highcharts/dashboards/modules/layout';\n\nLayoutModule(Dashboards);\n```\n\n----------------------------------------\n\nTITLE: Setting Padding in Highcharts Grid CSS\nDESCRIPTION: Configures padding for Highcharts Grid elements with a global padding value of 8px. Reduces vertical padding for header cells to 4px and removes horizontal padding for the caption area.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/theming/theming-variables.md#2025-04-16_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.theme-custom {\n  --hcg-padding: 8px;\n  --hcg-header-vertical-padding: 4px;\n  --hcg-caption-horizontal-padding: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Scripts for Highcharts Testing\nDESCRIPTION: This command runs the gulp task 'scripts-compile' to prepare the project for testing. It's essential to execute this command before running any tests to ensure all necessary scripts are properly compiled.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/esm/async-await/test-notes.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngulp scripts-compile\n```\n\n----------------------------------------\n\nTITLE: Verifying Tilde Prefix in Highcharts Data Labels (JavaScript)\nDESCRIPTION: This code snippet sets up a Highcharts chart and then verifies that each data label starts with a tilde character. It uses QUnit for assertion testing.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/esm/extending-members/test-notes.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nQUnit.test('Prefixed data labels', function (assert) {\n    var chart = Highcharts.chart('container', {\n        series: [{\n            data: [1, 2, 3],\n            dataLabels: {\n                enabled: true,\n                format: '~{y}'\n            }\n        }]\n    });\n\n    assert.strictEqual(\n        chart.series[0].points.length,\n        3,\n        'Verify point count'\n    );\n\n    chart.series[0].points.forEach(function (point) {\n        assert.strictEqual(\n            point.dataLabel.text.textStr[0],\n            '~',\n            'Verify tilde'\n        );\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Documenting Markdown Changelog\nDESCRIPTION: Markdown formatted changelog documenting the changes, upgrades and bug fixes in Highcharts Stock v9.3.0. Includes new features, breaking changes, and resolved issues.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts-stock/9.3.0.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog for Highcharts Stock v9.3.0 (2021-10-21)\n\n- Most changes listed under Highcharts 9.3.0 above also apply to Highcharts Stock 9.3.0.\n- Added new annotation, Ellipse. See [#15008](https://github.com/highcharts/highcharts/issues/15008).\n- Added new annotation, Time Cycles. See [#15826](https://github.com/highcharts/highcharts/issues/15826).\n- Added new annotation Fibonacci Time Zones. See [#15825](https://github.com/highcharts/highcharts/issues/15825).\n- VBP indicator now follows the main series when the compare mode is on and [compareToMain](https://api.highcharts.com/highstock/series.vbp.compareToMain) is `false`. See [#16277](https://github.com/highcharts/highcharts/issues/16277).\n- Added new feature [Cumulative Sum](https://www.highcharts.com/docs/stock/cumulative-sum). See [#1536](https://github.com/highcharts/highcharts/issues/1536)1.\n- Added Disparity Index `average` parameter as a dropdown in the Stock Tools popup. See [#16159](https://github.com/highcharts/highcharts/issues/16159).\n- Removed `requiredIndicators` info and added EMA to the default `indicators` master. See [#1540](https://github.com/highcharts/highcharts/issues/1540)9.\n- Added new series type: `HLC`, see [#15346](https://github.com/highcharts/highcharts/issues/15346).\n```\n\n----------------------------------------\n\nTITLE: Linking Highcharts Demo Template\nDESCRIPTION: HTML comment containing the JSFiddle template URL for reproducing Highcharts issues\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ISSUE_TEMPLATE.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- template: https://jsfiddle.net/highcharts/LLExL/ -->\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Export-Server with PHP\nDESCRIPTION: This PHP code snippet provides a troubleshooting mechanism for export-server issues by executing a Java command using shell execution and printing the command and output. This should be inserted before the line handling conversion operations.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/legacy-export-servers.md#2025-04-16_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n// Troubleshoot snippet\n$command = \"java -jar \". BATIK_PATH .\" $typeString -d $outfile $width temp/$tempName.svg 2>&1\";\n$output = shell_exec($command);\necho \"Command: $command <br>\";\necho \"Output: $output\";\ndie;\n```\n\n----------------------------------------\n\nTITLE: Highstock v4.2.5 Changelog Entry\nDESCRIPTION: Markdown formatted changelog entry detailing bug fixes and improvements in Highstock v4.2.5. Notable fixes include animation issues with addPoint, zooming functionality, Chrome browser crashes with candlestick charts, and input field focus problems.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts-stock/4.2.5.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog for Highstock v4.2.5 (2016-05-06)\n        \n- Most changes listed under Highcharts 4.2.5 above also apply to Highstock 4.2.5.\n- Refactored scroller redraw to prevent chart from redrawing twice.\n\n## Bug fixes\n- Fixed #2266, series didn't animate when running `addPoint`.\n- Fixed #3452, zoomed range didn't move when adding points to stock chart without a navigator.\n- Fixed #5193, browser crash in Chrome 49+ when updating candlestick points frequently.\n- Fixed #5231, input fields not receiving focus after showing hidden chart.\n```\n\n----------------------------------------\n\nTITLE: Describing Audio Map Functionality in Markdown\nDESCRIPTION: This markdown snippet outlines the features of an interactive audio map. It explains how users can interact with the map by clicking regions, and describes the sonification effects used to represent data and enhance user experience.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/maps/demo/audio-map/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Audio map\nThis audio map can be interacted with by clicking the map regions. The demo illustrates one way to use the sonification module with maps. Repeated sounds play with varying speed to indicate the population density of a region. After a while, the name of the region is announced with speech. A notification sound plays when moving between regions.\n```\n\n----------------------------------------\n\nTITLE: Sending a POST Request with curl (Mac & Linux)\nDESCRIPTION: This shell command demonstrates how to send a POST request to the PhantomJS export server using curl on Mac or Linux systems. It includes the necessary headers and data to submit a Highcharts configuration for conversion.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/legacy-export-servers.md#2025-04-16_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"infile\":\"{xAxis: {categories: [\\\"Jan\\\", \\\"Feb\\\", \\\"Mar\\\"]},series: [{data: [29.9, 71.5, 106.4]}]}\"}' 127.0.0.1:3005\n```\n\n----------------------------------------\n\nTITLE: Embedding Highcharts Organization Chart Demo in HTML\nDESCRIPTION: This snippet demonstrates how to embed a Highcharts organization chart demo using an iframe. The iframe is set to full width, 700px height, and removes the border for seamless integration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/organization-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe style=\"width: 100%; height: 700px; border: none;\" src=\"https://www.highcharts.com/samples/embed/highcharts/demo/organization-chart\" allow=\"fullscreen\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Dashboards and Layout Modules - HTML\nDESCRIPTION: This snippet shows how to properly load the necessary Highcharts dashboards and layout modules in an HTML document. It is essential that the layout module is imported after the dashboards module.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/frequently-asked-questions.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/dashboards/dashboards.js\"></script>\n<script src=\"https://code.highcharts.com/dashboards/modules/layout.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to S3 with AWS CLI\nDESCRIPTION: This snippet demonstrates how to use the AWS CLI to copy files from a local directory to an S3 bucket. It includes flags for recursive copying and excludes the README.md file. The dry run option is included for testing purposes to validate the command without making actual changes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/www/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\naws s3 cp ./www/ s3://{bucket-goes-here} \\\n--recursive \\\n--exclude README.md \\\n--acl public-read \\\n--dryrun # for testing\n```\n\n----------------------------------------\n\nTITLE: Configuring HTMLTableConnector in DataPool\nDESCRIPTION: This snippet demonstrates how to configure a HTMLTableConnector within the DataPool. It specifies the connector's ID, type ('HTMLTable'), and the ID of the HTML table element to use as the data source.  Ensure that the HTML table exists in the DOM.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/data-handling.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndataPool: {\n    connectors: [{\n        id: 'my-html-table-connector',\n        type: 'HTMLTable',\n        options: {\n            table: 'table-element-id',\n        }\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Highcharts Development Environment\nDESCRIPTION: Commands to set up the development environment for Highcharts, including installing dependencies and running the Gulp build system.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\ngulp\n```\n\n----------------------------------------\n\nTITLE: Changelog Content in Markdown\nDESCRIPTION: Markdown formatted changelog detailing version updates, new features, and bug fixes for Highmaps v5.0.8 released on March 8, 2017.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts-maps/5.0.8.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog for Highmaps v5.0.8 (2017-03-08)\n        \n- Most changes listed under Highcharts 5.0.8 above also apply to Highmaps 5.0.8.\n- New advanced demo for [map pies](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/samples/maps/demo/map-pies/).\n\n## Bug fixes\n- Fixed #6025, color axis got misplaced after update then resizing chart.\n- Fixed #6287, regression with panning on countries close to the edge.\n- Fixed #6369, `mapNavigation` options were not applied on `chart.update`.\n```\n\n----------------------------------------\n\nTITLE: Bug Fixes Section\nDESCRIPTION: Comprehensive list of bug fixes and improvements\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/6.0.4.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Bug fixes\n```\n\n----------------------------------------\n\nTITLE: Generating Highcharts Dashboards Changelog (Bash)\nDESCRIPTION: This command generates a changelog specifically for Highcharts Dashboards, specifying the version number of the release.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode changelog/generate --highchartsDashboards --release 2.0.0\n```\n\n----------------------------------------\n\nTITLE: Extending window.JSONSources in karma-conf.js for Highcharts Tests\nDESCRIPTION: The karma-conf.js file extends the window.JSONSources object with the contents of local data files. This process is crucial for making the local JSON data available during test execution.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/data/json-sources/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.JSONSources = {\n  // Extended with local data file contents\n};\n```\n\n----------------------------------------\n\nTITLE: SVG Path Definition Format Change in Highcharts v8.1.0\nDESCRIPTION: Example of the SVG path definition format change in Highcharts v8.1.0. The format changed from a flat array to a two-dimensional array of tuples for better type safety.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/8.1.0.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Old format\n['M', 0, 0, 'L', 100, 100]\n\n// New format\n[['M', 0, 0], ['L', 100, 100]]\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Dashboards Via CDN\nDESCRIPTION: Scripts for including the Highcharts Dashboards and layout module via CDN. Essential for using Highcharts Dashboards components directly in HTML.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/html-component.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/dashboards/dashboards.js\"></script>\n<script src=\"https://code.highcharts.com/dashboards/modules/layout.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Document\nDESCRIPTION: A comprehensive changelog entry detailing new features and bug fixes for Highcharts v9.1.0, including API links and issue references.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/9.1.0.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog for Highcharts v9.1.0 (2021-05-04)\n\n- Added `text` to axis label context, making it possible to insert the default formatting inside [labels.format](https://api.highcharts.com/highcharts/xAxis.labels.format).\n- Added additional `item` object context for [lang.accessibility.legend.legendItem](https://api.highcharts.com/highcharts/lang.accessibility.legend.legendItem).\n\n## Bug fixes\n- Fixed #14966, selected null points generated NaN values in the SVG.\n- Fixed #9549, column drag handle was not visible with reversed Y axis.\n[...]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Good Single Paragraph Text Formatting\nDESCRIPTION: Example showing correct way of formatting documentation with proper line wrapping at 80 characters\nSOURCE: https://github.com/highcharts/highcharts/blob/master/repo-guidelines.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThis feature turns something off, so that it does not show. It is `undefined` by\ndefalt.\n```\n\n----------------------------------------\n\nTITLE: Documenting First Release of Highcharts in Markdown\nDESCRIPTION: This Markdown snippet documents the initial release of Highcharts. It uses a heading to specify the version and release date, followed by a bullet point indicating it's the first release.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/1.0.0.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Changelog for Highcharts v1.0.0 (2009-11-27)\n        \n- First release.\n```\n\n----------------------------------------\n\nTITLE: Embedding Highcharts Dashboard Sample\nDESCRIPTION: An iframe is used to embed a sample Highcharts dashboard into a webpage. The iframe is styled for full width and a height of 470px with no border, allowing fullscreen mode.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/html-component.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe style=\"width: 100%; height: 470px; border: none;\" src='https://www.highcharts.com/samples/embed/dashboards/components/component-html' allow=\"fullscreen\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Mapping in index.json for Highcharts Tests\nDESCRIPTION: The index.json file is used to map URLs to local JSON data files, enabling offline testing of Highcharts samples. This configuration is essential for the test setup process.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/data/json-sources/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"url\": \"path/to/local/file.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Including Grid Pro via Script Tag\nDESCRIPTION: These snippets illustrate how to include Highcharts Grid Pro in a HTML document using script tags. The JavaScript and CSS files are loaded from a public CDN or can alternatively be downloaded and hosted locally. This method is suitable for projects that do not use module bundlers.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/grid-standalone.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/dashboards/datagrid.js\"></script>\n<link rel=\"stylesheet\" href=\"https://code.highcharts.com/dashboards/css/datagrid.css\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"../code/dashboards/datagrid.js\"></script>\n<link rel=\"stylesheet\" href=\"../code/dashboards/css/datagrid.css\" />\n```\n\n----------------------------------------\n\nTITLE: Logarithmic Mapping Configuration in Highcharts\nDESCRIPTION: Demonstrates how to configure logarithmic mapping for pitch parameters, useful when working with logarithmic axes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/advanced-mapping.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmapping: {\n    volume: 0.7,\n    pitch: {\n        mapTo: 'y',\n        mapFunction: 'logarithmic'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Good Two Paragraph Text Formatting\nDESCRIPTION: Example showing correct way of formatting documentation with proper paragraph separation\nSOURCE: https://github.com/highcharts/highcharts/blob/master/repo-guidelines.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nThis feature turns something off, so that it does not show.\n\nIt is `undefined` by default.\n```\n\n----------------------------------------\n\nTITLE: Styling Candlestick Series in Highcharts with CSS\nDESCRIPTION: These CSS class names are used to differentiate between up or down points in Highcharts Stock candlesticks. They allow for styling the appearance of the candlestick based on whether the price went up or down, enhancing the visual representation of stock data.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_28\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-candlestick-series .highcharts-point-up\n.highcharts-candlestick-series .highcharts-point-down\n\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Changelog entry detailing bug fixes for Highcharts version 11.4.5, released on July 4, 2024. Documents fixes for module import paths and TypeScript declarations.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/11.4.5.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog for Highcharts v11.4.5 (2024-07-04)\n\n\n## Bug fixes\n- Fixed [#21446](https://github.com/highcharts/highcharts/issues/21446), a regression causing broken imports of modules due to bad relative paths.\n- Fixed [#21445](https://github.com/highcharts/highcharts/issues/21445), generated TypeScript declarations for deprecated option [series.events.legendItemClick](https://api.highcharts.com/highcharts/plotOptions.series.events.legendItemClick).\n```\n\n----------------------------------------\n\nTITLE: Styling Exporting Button in Highcharts with CSS\nDESCRIPTION: This CSS class name is used for the wrapping group of the exporting button, such as range selector buttons in Highcharts Stock. It enables styling of the button's container, providing customization options through CSS.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_36\n\nLANGUAGE: CSS\nCODE:\n```\n\n.highcharts-button\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Visual Feedback During Sonification\nDESCRIPTION: JavaScript code showing how to disable the tooltip and crosshair visual feedback that typically appears during sonification playback, allowing for a cleaner visual experience while the audio plays.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/getting-started.md#2025-04-16_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nsonification: {\n    duration: 4000,\n    showCrosshair: false,\n    showTooltip: false\n},\nseries: [{\n    data: [1, 2, 3, 4, 5],\n    sonification: {\n\n```\n\n----------------------------------------\n\nTITLE: PhantomJS Command Line Usage\nDESCRIPTION: This code snippet demonstrates how to use PhantomJS from the command line to convert Highcharts configurations to images. It shows the command structure and necessary parameters like input file, output file, scale, and width.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/legacy-export-servers.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nphantomjs highcharts-convert.js -infile options.js -outfile chart.png -scale 2.5 -width 300 \n```\n\n----------------------------------------\n\nTITLE: Styling Point Halo in Highcharts CSS\nDESCRIPTION: CSS class for styling the halo effect that appears around hovered points in Highcharts.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_62\n\nLANGUAGE: CSS\nCODE:\n```\n.highcharts-halo\n```\n\n----------------------------------------\n\nTITLE: Highcharts Demo Metadata Configuration\nDESCRIPTION: Example of demo metadata configuration file specifying name, authors, tags, and categories for a Highcharts demo\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\\nname: Basic area\\nauthors:\\n  - Torstein Hønsi\\njs_wrap: b\\nalt_text: >-\\n  Highcharts basic area chart JavaScript example graph compares cold war nuclear\\n  weapon stockpile peaks over time.\\ntags:\\n  - Highcharts demo\\ncategories:\\n  - Area charts:\\n      priority: 1\\n...\n```\n\n----------------------------------------\n\nTITLE: Styling Range Selector Buttons in Highcharts Stock CSS\nDESCRIPTION: CSS class for styling the range selector buttons in Highcharts Stock. This replaces the JavaScript option for button theme.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-design-and-style/style-by-css.md#2025-04-16_snippet_65\n\nLANGUAGE: CSS\nCODE:\n```\n.highcharts-range-selector-buttons\n```\n\n----------------------------------------\n\nTITLE: Creating Labels for Fibonacci Retracement Levels in Highcharts\nDESCRIPTION: This code snippet creates labels for each Fibonacci retracement level in Highcharts. It iterates through the retracement levels, creates a label object with the level value as text, and configures its position and style. The label is positioned at point p1, which is assumed to be created with the point function.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/advanced-chart-features/annotations-and-fibonacci-retracements.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst labels = [];\n\nlevels.forEach(function (level, i) {\n    const retracement = y2 - diff * level,\n        p1 = point(x1, retracement),\n        p2 = point(x2, retracement);\n\n    labels.push({\n        point: p1,\n        text: level.toString(),\n        allowOverlap: true,\n        align: 'right',\n        y: 0,\n        backgroundColor: 'none',\n        verticalAlign: 'middle',\n        shape: 'rect',\n        borderWidth: 0,\n        style: {\n            color: 'grey'\n        }\n    });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Class Pattern with Class Types in TypeScript\nDESCRIPTION: This code snippet demonstrates the recommended pattern for defining classes and their associated types in TypeScript within the Highcharts project. It combines the class implementation with a namespace containing related interfaces, ensuring clear separation and accessibility of both implementation and types. This pattern is beneficial when types are exclusively tied to a specific class.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ts/README.md#2025-04-16_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n\"class MyClass {\n    /* properties and functions using MyClass.MyType */\n    private myProperty?: MyClass.MyType;\n    public myFunction(arg: MyClass.MyType) {\n        /* ... */\n    }\n}\nnamespace MyClass {\n    export interface MyType {\n        /* ... */\n    }\n}\nexport default MyClass; // allows access to both, class implementation and types\"\n```\n\n----------------------------------------\n\nTITLE: Grid Component Rendering Configuration\nDESCRIPTION: Configuration for rendering a Grid component with a specified cell and data connector.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/grid-component.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncomponents: [{\\n    renderTo: 'dashboard-col-1',\\n    connector: {\\n        id: 'data'\\n    },\\n    type: 'Grid'\\n}]\n```\n\n----------------------------------------\n\nTITLE: Listing Sample JSON Files for Highcharts in Markdown\nDESCRIPTION: This markdown snippet lists various JSON files used as sample data in Highcharts. It includes stock price data for tech companies and OHLC data from different sources, providing information on the origin of each file.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/data/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Sample data folder\n\n## JSON comments\n\n * `aapl-c.json`, `aapl-ohlc.json`, `aapl-ohlcv.json` and `aapl-v.json`,\n   `goog-c.json` and `msft-c.json`: Generated from Google Finance API.\n * `ohlc.json` and `ohlcv.json` exported from www.ducascopy.net.\n * `range.json` generated from http://vikjavev.no/ver/range.jsonp.php?year=2017.\n```\n\n----------------------------------------\n\nTITLE: New Configuration Options in Highcharts 4.1.9\nDESCRIPTION: New configuration options introduced including axis.visible for axis visibility control, bubble.sizeByAbsoluteValue for bubble size calculations, and softThreshold for controlling subzero axis ticks display. Also adds support for legendType: 'point' across more series types.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/4.1.9.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  axis: {\n    visible: true  // New option for axis visibility\n  },\n  plotOptions: {\n    bubble: {\n      sizeByAbsoluteValue: true  // For negative bubbles size calculation\n    },\n    series: {\n      softThreshold: true,  // Prevents subzero ticks for positive-only data\n      legendType: 'point'  // Extended support for point-based legends\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring YouTube Component in Dashboard Edit Mode with Language Options\nDESCRIPTION: Configuration for enabling the YouTube component in the dashboard editor sidebar. It includes language customizations for the component name and editable fields to improve the user experience in the editor.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/custom-component.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n    editMode: {\n        enabled: true,\n        lang: {\n            videoId: 'Video ID',\n            sidebar: {\n                YouTube: 'YouTube'\n            }\n        },\n        contextMenu: {\n            enabled: true\n        },\n        toolbars: {\n            sidebar: {\n                components: ['YouTube', 'HTML', 'Highcharts']\n            }\n        }\n    },\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Highcharts v11.4.1\nDESCRIPTION: A markdown formatted changelog detailing bug fixes and improvements in Highcharts version 11.4.1, released on April 4, 2024.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/11.4.1.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog for Highcharts v11.4.1 (2024-04-04)\n\n\n## Bug fixes\n- Fixed [#20784](https://github.com/highcharts/highcharts/issues/20784), a regression in v11.4.0 causing wrong min and max extremes for the selection event in column charts.\n- Fixed [#20710](https://github.com/highcharts/highcharts/issues/20710), bubble legend with color-axis moved after redraw.\n- Fixed [#20792](https://github.com/highcharts/highcharts/issues/20792), plot lines' HTML labels rendered incorrectly.\n- Fixed [#18980](https://github.com/highcharts/highcharts/issues/18980), the `highcharts.d.ts` type definition file was too large and caused issues in editors. Moved majority of series options into separate definition files.\n- Fixed [#20871](https://github.com/highcharts/highcharts/issues/20871), a regression with resetting zoom across synchronized charts.\n- Fixed [#20586](https://github.com/highcharts/highcharts/issues/20586), plot line CSS classes were not concatenated with spaces, causing the `className` option to fail.\n- Fixed [#20548](https://github.com/highcharts/highcharts/issues/20548), chart not resizing after closing fullscreen.\n```\n\n----------------------------------------\n\nTITLE: Sending a POST Request with curl (Windows)\nDESCRIPTION: This shell command demonstrates how to send a POST request to the PhantomJS export server using curl on Windows systems. It shows the command structure and necessary parameters to submit a Highcharts configuration for conversion.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/legacy-export-servers.md#2025-04-16_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -X POST -d \"{\\\"infile\\\":\\\"{series:[{data:[29.9,71.5,106.4]}]}\\\"}\" 127.0.0.1:3005\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts Dashboards and Grid Modules\nDESCRIPTION: Script tags for importing required Highcharts Dashboards and Grid modules in HTML. Ensures correct loading order of dependencies.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/grid-component.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/dashboards/datagrid.js\"></script>\\n<script src=\"https://code.highcharts.com/dashboards/dashboards.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Events for Plot Bands and Plot Lines in Highcharts\nDESCRIPTION: This snippet outlines how to define mouse events for plot bands in Highcharts, including click and mouseover actions. These events enhance interactivity by triggering functions on user interactions. It requires a previously defined plot band or line setup.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-concepts/plot-bands-and-plot-lines.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nplotBands: {\n  ...,\n  events: {\n    click: function () {\n      // Action performed when event occurs\n    },\n    mouseover: function () {\n      // Action performed when event occurs\n    },\n    mouseout: function () {\n      // Action performed when event occurs\n    },\n    mousemove: function () {\n      // Action performed when event occurs\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Highcharts v5.0.12\nDESCRIPTION: Detailed changelog documenting new features and bug fixes in Highcharts v5.0.12, released on May 24, 2017. Includes core improvements like color animation support and various fixes for chart rendering issues.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/5.0.12.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog for Highcharts v5.0.12 (2017-05-24)\n        \n- Added core support for color animation.\n- Added error message on trying to define the same series type twice. Fixes #6686.\n- Let `Series.update` fall back to the optimized `Series.setData` if only the data is updated.\n\n## Bug fixes\n- Fixed #223, pie chart data labels were not truncated to chart area when pie size was explicitly set.\n- Fixed #3160, let the `xAxis.offset` option modify the clip area to avoid clipping line graphs.\n- Fixed #4588, loading and \"no data\" labels overlapped.\n- Fixed #4921, `ignoreHiddenSeries` caused wrong column position and width after hiding and showing all series.\n- Fixed #6307, offline export issues with styled mode in IE and Edge.\n- Fixed #6517, regression with shared tooltip and columns. Tooltip not following mouse move.\n- Fixed #6659, long series name in legend broke the geometry of the chart. Added `textOverflow` and max width to default `itemStyle`.\n- Fixed #6659, long series names made tooltip overflow the chart.\n- Fixed #6664, no-data label remained in heat maps after adding points.\n- Fixed #6670, `visible: false` didn't work correctly on funnel chart points.\n- Fixed #6687, wrong hover points with columns and shared tooltip.\n- Fixed #6700, axis label font size wrongly detected in styled mode.\n- Fixed #6704, series names were not grouped for two series after drilldown.\n- Fixed #6705, bubble chart click events and point select was broken.\n- Fixed #6706, crash with heatmap and boost-canvas.\n- Fixed #6721, area range fill was broken with null values and connectNulls: true.\n- Fixed #6731, category axis allowed zooming outside range.\n- Fixed AT announcing clickable for some a11y demos.\n- Fixed Firefox issue with styled export, ref #6307.\n- Fixed bug with inserting multiple data tables in export-data.\n- Fixed issue where chart container height was not respected when initially hidden. See #6693.\n- Fixed issue with data labels not appearing on exported charts in styled mode.\n- Fixed issue with missing gridLines in 3D.\n- Fixed issue with mouseOver event in column chart with shared tooltip.\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: A markdown formatted changelog that documents new features and bug fixes in Highcharts v6.1.1. Includes API references, issue numbers, and detailed descriptions of changes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/6.1.1.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog for Highcharts v6.1.1 (2018-06-27)\n        \n- Added new feature, [proximate legend layout](https://api.highcharts.com/highcharts/legend.layout), to allow placing legend items close to the data series.\n- Added new option, [tooltip.outside](https://api.highcharts.com/highcharts/tooltip.outside), to allow the tooltip to render outside the confinement of the chart area. Closes #5784.\n- Added clearer error reporting to offline exporting. Closes #8226.\n- Added default for `data.weight` in Word Cloud.\n- Added feature, event ordering for controlling what handler runs first when multiple modules are used.\n- Added new default behaviour for sunburst data labels, `rotationMode: 'auto'`. Now the best fit will be calculated. See #8502.\n- Added support for polar parallel coordinate charts (star plots).\n- Added symbol for month number without leading zero. Closes #8150.\n\n## Bug fixes\n- Fixed #4377, exporting context menu did not hide on button click.\n- Fixed #8021, missing points after zoom in scatter 3d.\n- Fixed #8031, columns overlapped xAxis.\n- Fixed #8042, axis labels had the same slot width on 3d charts.\n- Fixed #8140, series legend items didn't show up when `colorAxis.showInlegend` was false.\n- Fixed #8159, useHTML caused that treemap data label was misplaced.\n- Fixed #8163, added [xAxis.reversedStacks](https://api.highcharts.com/highcharts/xAxis.reversedStacks) option to control stacks order within a columns group.\n- Fixed #8173, crosshair did not work properly with variwide.\n- Fixed #8173, missing unit test.\n- Fixed #8181, wordcloud missed large words.\n- Fixed #8187, stackLabels in bar chart were misaligned.\n- Fixed #8210, a regression causing axis labels to not expand after having ellipsis.\n- Fixed #8214, missing space character before tracker class definition.\n- Fixed #8234, a regression causing overlapping X axis labels on drilldown.\n- Fixed #8241, use secure URLs in themes.\n- Fixed #8243, the way of calculating axis slotWidth changed.\n- Fixed #8245, regression causing [data.parsed](https://api.highcharts.com/highcharts/data.parsed) callback not being called on loading Google Spreadsheets.\n- Fixed #8273, offline export bug due to nested function wrap.\n- Fixed #8276, wrong z-index for halo in styled mode.\n- Fixed #8277, missing top neck of reversed funnel.\n- Fixed #8330, overlapping pie data labels due to a bug in the label distribution algorithm.\n- Fixed #8358, export icon was not disabled using responsive rule.\n- Fixed #8365, indicator calculated wrong values for long and short sma.\n- Fixed #8377, chart disappeared after resizing a hidden chart inside a padded div.\n- Fixed #8392, plotbands update zIndex issue.\n- Fixed #8393, annotations are not exported when added dynamically.\n- Fixed #8402, boost not rendering well with bubble chart and missing z values.\n- Fixed #8406, colorAxis did not get new series extremes after chart update.\n- Fixed #8407, scatter series added to a 3D chart via `chart.addSeries` was not converted to a `scatter3d` series.\n- Fixed #8415, `className` option did not work on plot lines.\n- Fixed #8428, pie chart slice did not show after visibility changes.\n- Fixed #8438, combination charts from CSV didn't lay out properly without `seriesMapping`.\n- Fixed #8444, axis title rendered a title tag when wrapped across two or more lines.\n- Fixed #8456, improved 3d projection matrix property.\n- Fixed #8467, regression causing long axis labels being clipped when using HTML in combination with `whiteSpace: nowrap`.\n- Fixed #8477, plot line labels didn't work in browsers that support `Array.prototype.flat`.\n- Fixed #8478, a regression causing duplicated legend items when using color axis and dynamically adding series.\n- Fixed #8481, chart update with type: bar didn't work.\n- Fixed #8494, incorrect assignment in data export for multiple pie charts.\n- Fixed #8515, padding was not applied to data labels in sunburst series.\n- Fixed #8531, random data labels in sunburst chart were hidden.\n- Fixed #8181, regression with drilling up by clicking root node in Sunburst.\n- Fixed build scripts which returned to early, instead of waiting for promise to resolve.\n- Fixed disabling animation in pattern fills.\n- Fixed export menu rendering below axis when scrollablePlotArea was used. See #8316.\n- Fixed issue where image patterns could not have translucent opacity with default animation.\n- Fixed issue with `scrollablePlotArea` being applied on exported charts. See #8316.\n- Fixed issue with image patterns in IE not always being shown if images were cached.\n- Fixed issue with initialValue was always supplied to reduce.\n- Fixed scrollablePlotArea, the scroll jumped back to original `scrollPositionX` after toggling series. See #8316.\n- Fixed stuck series labels.\n```\n\n----------------------------------------\n\nTITLE: Custom Function Definition for MathModifier\nDESCRIPTION: Demonstrates how to define a custom function that can handle cell and range references, with dynamic value processing and registration in the formula system.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/mathmodifier-module.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Formula = Dashboards.DataModifier.types.Math.Formula;\n\nfunction MYFUNC(args, table): number {\n    // Calculate values and map references\n    const values = Formula.getArgumentsValues(args, table);\n\n    let result = 0;\n\n    // Loop over the argument values\n    for (const value of values) {\n        switch (typeof value) {\n            case 'number': // Calculate\n                if (!isNaN(value)) {\n                    result += value * 2;\n                }\n                break;\n            case 'object': // Calculate with range array of values\n                result += MYFUNC(value, table);\n                break;\n        }\n    }\n\n    return result;\n}\n\nFormula.registerProcessorFunction('MYFUNC', MYFUNC);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Spiral Algorithm in JavaScript\nDESCRIPTION: Demonstrates how to create a custom spiraling algorithm, `archimedeanSpiral`, which calculates a set of coordinates for word placement in a Highcharts word cloud. The algorithm is applied by attaching it to the `spirals` property of the wordcloud series.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/chart-and-series-types/word-cloud-series.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/**\n * archimedeanSpiral - Gives a set of coordinates for an Archimedian Spiral.\n *\n * @param {number} t How far along the spiral we have traversed.\n * @return {object} Resulting coordinates, x and y.\n */\nvar archimedeanSpiral = function archimedeanSpiral(t) {\n    t *= 0.1;\n    return {\n        x: t * Math.cos(t),\n        y: t * Math.sin(t)\n    };\n};\n```\n\nLANGUAGE: js\nCODE:\n```\nHighcharts.seriesTypes.wordcloud.prototype.spirals.archimedean = archimedeanSpiral;\n```\n\nLANGUAGE: js\nCODE:\n```\nHighcharts.chart(..., {\n  series: [{\n    type: 'wordcloud',\n    spiral: 'archimedean'\n  }]\n});\n```\n\n----------------------------------------\n\nTITLE: Import Dashboards CSS\nDESCRIPTION: This CSS snippet shows how to import the Dashboards CSS file. This provides the default styling for the dashboard layout and components.  Importing only Dashboards' CSS file is enough for basic styling.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/highcharts-component.md#2025-04-16_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n    @import url(\"https://code.highcharts.com/dashboards/css/dashboards.css\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Light/Dark Theme Detection for Highcharts Dashboards using CSS\nDESCRIPTION: The dashboards.css module provides default styling for light and dark modes in Highcharts dashboards. This allows the dashboard to automatically adjust its appearance based on the user's system theme settings. For Highcharts charts to work with this feature, styled mode must be enabled.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/dashboards/demo/light-dark-theme/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* No specific code provided, but the file mentions using dashboards.css module */\n```\n\n----------------------------------------\n\nTITLE: Installation using Yarn\nDESCRIPTION: This command installs the necessary dependencies for the Docusaurus website project using Yarn. It is a prerequisite for running the website locally or building the static content.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/tools/docs-preview/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ yarn\"\n```\n\n----------------------------------------\n\nTITLE: IE 6-8 Polyfill Implementation\nDESCRIPTION: Example showing how to include polyfills for IE 6-8 support before loading the main Highcharts library.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/7.0.0.md#2025-04-16_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!--[if lte IE 8]>\n<script src=\"modules/oldie-polyfills.js\"></script>\n<![endif]-->\n<script src=\"highcharts.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Dark Theme Dashboard Container\nDESCRIPTION: This HTML snippet illustrates how to apply a dark theme to the dashboard container by setting a specific class. The class `highcharts-dark` configures the dashboard to use a dark color scheme, overriding the system default settings and user preferences.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/light-dark-theme.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\" class=\"highcharts-dark\">\n```\n\n----------------------------------------\n\nTITLE: Responsive Layout for Highcharts Dashboards - CSS\nDESCRIPTION: This snippet provides media queries for responsive design in Highcharts dashboards. It shows how to adjust the flex property of dashboard cells based on the viewport size.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/frequently-asked-questions.md#2025-04-16_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* LARGE */\n@media (max-width: 1200px) {\n    #dashboard-cell-1 {\n        flex: 1 1 33.333%;\n    }\n}\n\n/* MEDIUM */\n@media (max-width: 992px) {\n    #dashboard-cell-1 {\n        flex: 1 1 50%;\n    }\n}\n\n/* SMALL */\n@media (max-width: 576px) {\n    #dashboard-cell-1 {\n        flex: 1 1 100%;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Dashboards Edit Mode with HTML\nDESCRIPTION: This snippet shows how to load the required Highcharts Dashboards scripts using HTML script tags. The layout module should be loaded after the Dashboards module for proper functioning.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/edit-mode.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.highcharts.com/dashboards/dashboards.js\"></script>\n<script src=\"https://code.highcharts.com/dashboards/modules/layout.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Dashboards Edit Mode\nDESCRIPTION: Describes how to import default styles and apply custom styling to Highcharts Dashboards Edit Mode using CSS. Styles specific to edit mode have a high z-index by default.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/edit-mode.md#2025-04-16_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n@import url(\"https://code.highcharts.com/dashboards/css/datagrid.css\");\n```\n\nLANGUAGE: css\nCODE:\n```\n.highcharts-dashboards-edit-sidebar {\n    background-color: #f0f0f0;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    padding: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the YouTube Component in a Dashboard Configuration\nDESCRIPTION: Example configuration for including the custom YouTube component in a Highcharts Dashboard. It shows how to reference the component in the board configuration and provide the YouTube video ID as a parameter.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/custom-component.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nDashboards.board({\n    gui: [{\n        layouts: [{\n            rows: [{\n                cells:[{\n                    id: 'cell-id'\n                }]\n            }]\n        }]\n    }],\n    components: [{\n        renderTo: 'cell-id',\n        type: 'YouTube',\n        videoId: 'video-id-from-youtube'\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Dashboard Layout Configuration with Cell Identifier\nDESCRIPTION: JavaScript configuration for defining dashboard layout with a unique cell identifier for Grid component placement.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/grid-component.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngui: {\\n    layouts: [{\\n        id: 'layout-1',\\n        rows: [{\\n            cells: [{\\n                id: 'dashboard-col-0'\\n            }]\\n        }]\\n    }]\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart with Topology in Highcharts\nDESCRIPTION: This code initializes a Highcharts chart and sets its map property to the previously fetched topology. This step binds the topology data to the chart, preparing it to incorporate series data for visualization.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/maps/mapbubble-series.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nchart: {\n    map: topology\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts Modules - New v12 Method\nDESCRIPTION: Shows the new recommended way to import Highcharts modules in version 12. Modules are now imported directly without requiring initialization, supporting better tree shaking.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/12.0.0.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Highcharts from 'highcharts';\nimport 'highcharts/modules/accessibility';\n```\n\n----------------------------------------\n\nTITLE: Grouping Countries in Highcharts Map\nDESCRIPTION: This code snippet demonstrates how to group countries in a Highcharts map by assigning the same value to their data points. It shows the syntax for grouping Iceland, Norway, and Sweden.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/maps/demo/all-areas-as-null/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n['is', 1],['no', 1],['se', 1]\n```\n\n----------------------------------------\n\nTITLE: Loading Highcharts Dashboards from Local Domain\nDESCRIPTION: This snippet provides an example of how to load the Highcharts Dashboards JavaScript files from your own server instead of from the Highcharts CDN.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/installation.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"../code/dashboards/dashboards.js\"></script>\n<script src=\"../code/dashboards/modules/layout.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Enabling Navigation in Crossfilter Synchronization\nDESCRIPTION: This JavaScript code shows how to enable advanced options such as affectNavigator for crossfilter synchronization using a detailed Sync declaration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/synchronize-components.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsync: {\n    crossfilter: {\n        enabled: true,\n        affectNavigator: true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Highcharts Dashboard Grid Rows - CSS\nDESCRIPTION: This CSS snippet applies styling to grid rows and headers using the 'highcharts-datagrid-row' and 'highcharts-datagrid-column-header' classes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/style-by-css.md#2025-04-16_snippet_8\n\nLANGUAGE: CSS\nCODE:\n```\n.highcharts-datagrid-row {\n    background-color: gray;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS for Highcharts Dashboard\nDESCRIPTION: This CSS snippet imports the necessary dashboards.css file from Highcharts to allow for themed styling in the application. It must be included in the project's stylesheet for the themes to work properly.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/light-dark-theme.md#2025-04-16_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import \"https://code.highcharts.com/dashboards/css/dashboards.css\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Data Format for Highcharts Heat Map\nDESCRIPTION: Demonstrates the required data format for creating a heat map in Highcharts. Each data point consists of x and y coordinates, followed by a value representing the color density.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/demo/heatmap/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nData:[x,y,value]\n```\n\n----------------------------------------\n\nTITLE: Upgrade Notes Section\nDESCRIPTION: Important notes about breaking changes and layout modifications\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/6.0.4.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Upgrade notes\n```\n\n----------------------------------------\n\nTITLE: Utilizing window.JSONSources in karma-setup.js for Highcharts Tests\nDESCRIPTION: The karma-setup.js file uses the window.JSONSources object, which contains the local JSON data, to set up the test environment for Highcharts samples. This setup enables offline testing of the samples.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/data/json-sources/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example usage of window.JSONSources in karma-setup.js\nconsole.log(window.JSONSources);\n```\n\n----------------------------------------\n\nTITLE: Generating Final Changelog (Bash)\nDESCRIPTION: This command generates the final changelog without the review flag, incorporating any edits made during the review process.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode changelog/generate\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts Flutter Package\nDESCRIPTION: This snippet provides the command to add the Highcharts Flutter package to a Flutter project's dependencies, ensuring access to data visualization widgets.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/flutter/getting-started.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add highcharts_flutter\n```\n\n----------------------------------------\n\nTITLE: Handling URL Connections in WebLogic - Java\nDESCRIPTION: The snippet shows how to alter a Java URL connection to use Java's default URLStreamHandler instead of WebLogic's custom handler. This change helps in resolving issues with empty file returns from the server.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/legacy-export-servers.md#2025-04-16_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nURL url = new URL(\"http://\" + host + \":\" + port + \"/\");\n```\n\nLANGUAGE: Java\nCODE:\n```\nsun.net.www.protocol.http.Handler handler = new sun.net.www.protocol.http.Handler();\nURL url = new URL(null, \"http://\" + host + \":\" + port + \"/\", handler);\n```\n\n----------------------------------------\n\nTITLE: Mapping Audio Parameters to Functions in Highcharts\nDESCRIPTION: Example of mapping volume and other audio parameters using a function that determines volume based on point color. The function receives a context object with time, point, and value data.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/sonification/advanced-mapping.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmapping: {\n    // Volume is 0.8 for red points, 0.3 for all other points\n    volume: (context) => {\n        const point = context.point || {};\n        return point.color === 'red' ? 0.8 : 0.3;\n    },\n    pan: 0,\n    noteDuration: 300,\n    pitch: 'a3'\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging Debug Messages - Configuration\nDESCRIPTION: This configuration snippet enables logging of debug messages for different components of the Highcharts export server to help in troubleshooting issues by uncommenting specific lines in the log4j configuration file.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/export-module/legacy-export-servers.md#2025-04-16_snippet_8\n\nLANGUAGE: Configuration\nCODE:\n```\n\\# Debug specific class\n `log4j.logger.services=DEBUG`\n `log4j.logger.converter=DEBUG`\n `log4j.logger.exporter=DEBUG`\n `log4j.logger.pool=DEBUG`\n\n```\n\n----------------------------------------\n\nTITLE: Structuring Data for Packed Bubble Chart in Highcharts\nDESCRIPTION: Demonstrates the correct data structure for a packed bubble chart in Highcharts. Each data point should be represented as an array with y values, where the z value determines the bubble size.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/samples/highcharts/series-packedbubble/initial-radius/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ndata:[y, y, y]\n```\n\n----------------------------------------\n\nTITLE: Product Version Placeholder\nDESCRIPTION: HTML comment indicating where to specify the Highcharts product variant and version number\nSOURCE: https://github.com/highcharts/highcharts/blob/master/ISSUE_TEMPLATE.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!--- Highcharts, Highstock or Highmaps plus version number -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode Support in Highcharts Grid Themes\nDESCRIPTION: Demonstrates how to create dark mode-specific styling using media queries. The example shows overriding border color for dark mode while maintaining other properties from the light theme.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/grid/theming/theming.md#2025-04-16_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.theme-custom {\n  --hcg-border-width: 3px;\n  --hcg-border-style: solid;\n  --hcg-border-color: #000;\n}\n\n@media (prefers-color-scheme: dark) {\n  .theme-custom {\n    --hcg-border-color: #fff;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling HTML Components with CSS\nDESCRIPTION: CSS styles applied to HTML components within a Highcharts dashboard. The styles make use of id selectors for styling text color and text decoration.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/dashboards/html-component.md#2025-04-16_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n#main-title {\n  color: #4b4b4b;\n}\n#description {\n  text-decoration: underline;\n}\n```\n\n----------------------------------------\n\nTITLE: Inefficient Highcharts Configuration in JavaScript\nDESCRIPTION: Example of a poorly written Highcharts configuration using verbose object creation syntax. This approach is less readable and more verbose than using object literals.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/getting-started/how-to-set-options.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad code:\nvar options = new Object();\n\noptions.chart = new Object();\noptions.chart.type = 'bar';\n\noptions.series = new Array();\noptions.series[0] = new Object();\noptions.series[0].name = 'Jane';\noptions.series[0].data = new Array(1, 0, 4);\n```\n\n----------------------------------------\n\nTITLE: Deploy Website using SSH\nDESCRIPTION: This command deploys the Docusaurus website using SSH.  It builds the website and pushes the content to the `gh-pages` branch for GitHub Pages hosting.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/tools/docs-preview/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"$ USE_SSH=true yarn deploy\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Series with Morningstar connectors for Dashboards\nDESCRIPTION: This code shows how to integrate the Morningstar Time Series connector with Highcharts Dashboards. It creates a data grid component that displays dividend data for a specified security. The implementation includes date formatting and requires authentication through a Postman environment JSON.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/docs/morningstar/time-series/time-series.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDashboards.board('container', {\n    dataPool: {\n        connectors: [{\n            id: 'time-series',\n            type: 'MorningstarTimeSeries',\n            options: {\n                postman: {\n                    environmentJSON: postmanJSON\n                },\n                series: {\n                    type: 'Dividend'\n                },\n                securities: [{\n                    id: 'F0GBR04S23',\n                    idType: 'MSID'\n                }],\n                startDate: '2000-01-01',\n                endDate: '2020-12-31',\n                currencyId: 'EUR'\n            }\n        }]\n    },\n    components: [\n        {\n            renderTo: 'dashboard-col-0',\n            connector: {\n                id: 'time-series'\n            },\n            type: 'DataGrid',\n            title: 'Dividends',\n            dataGridOptions: {\n                editable: false,\n                columns: {\n                    Date: {\n                        cellFormatter: function () {\n                            return new Date(this.value)\n                                .toISOString()\n                                .substring(0, 10);\n                        }\n                    }\n                }\n            }\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing Highcharts API Options in Markdown\nDESCRIPTION: This snippet demonstrates how Highcharts API options are referenced within the bug fix descriptions. It shows the usage of links to API documentation for specific options.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/8.0.0.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Fixed #12161, legend [textDecoration](https://api.highcharts.com/highcharts/drilldown.activeDataLabelStyle.textDecoration) hidden style not working on IE11 with accessibility module enabled.\n- Fixed #12374, sankey nodes were rearranged after redraw where the [nodes.level](https://api.highcharts.com/highcharts/series.sankey.nodes.level) option was used.\n- Fixed #11617, support [tooltip.split](https://api.highcharts.com/highcharts/tooltip.split) with `chart.scrollablePlotArea`.\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Content\nDESCRIPTION: Structured changelog documenting new features and bug fixes for Highcharts v2.2.5, including improvements to legend handling, tooltip formatting, and various platform-specific fixes.\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/2.2.5.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog for Highcharts v2.2.5 (2012-06-08)\n        \n- Removed double clipping assignment in development branch, and subsequent JS error on Series.remove in legacy IE. 1027.\n- Reverted fix for #904 where a line with lineWidth of 0 became visible in hover state. 1016.\n- Added legend.maxHeight option for paging.\n- Added tooltip formatting options: percentageDecimals, percentagePrefix, percentageSuffix, totalDecimals, totalPrefix, totalSuffix. 864.\n\n## Bug fixes\n- Fixed Android 2 compatibility problem. 1034.\n- Fixed issue with legend text not wrapping correctly to itemStyle.width option ion IE8. 1021.\n- Fixed broken minRange after the #878 fix.\n- Fixed issue with chart title and subtitle responding too late to chart resize. 1012.\n- Fixed JS error on quickly changing range selection in Highstock in column charts. 1004.\n- Fixed issue with clipping of legend after resize to a greater width. 1001.\n- Fixed issue with size detection of rotated text in exported charts legacy IE. 997.\n- Fixed issue with original mouse event information not being passed over to legendItemClick handler. Added it to event.browserEvent. 4. 992.\n- Fixed issue with the series.pointRange option not affecting the width of columns.\n- Fixed issue with error #10 appearing on a chart with all null data if yAxis.min was set.\n- Fixed issue when colorByPoint was set to true, it started from the second item in the color array, whereas the first one was assigned to the whole series. 974.\n- Fixed JS error on setting categories with fewer items before the chart was redrawn. 970.\n```\n\n----------------------------------------\n\nTITLE: Changelog Header\nDESCRIPTION: Version and date information for Highcharts v6.0.4 release\nSOURCE: https://github.com/highcharts/highcharts/blob/master/changelog/highcharts/6.0.4.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog for Highcharts v6.0.4 (2017-12-15)\n```"
  }
]