[
  {
    "owner": "isaac-sim",
    "repo": "isaacsim-app-template",
    "content": "TITLE: Running Standalone Python Script with Isaac Sim Environment - Bash\nDESCRIPTION: Demonstrates how to run a standalone Python script using the Python interpreter included with the built Isaac Sim environment on Linux. The example shows executing a simple example script `hello_world.py`, useful for testing and development without fully launching the Isaac Sim GUI.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./_build/linux-x86_64/release/python.sh standalone_examples/hello_world.py\n```\n\n----------------------------------------\n\nTITLE: Running Standalone Python Script with Isaac Sim Environment - PowerShell\nDESCRIPTION: Shows how to execute a standalone Python script using the Isaac Sim environment's Python interpreter on Windows. The example runs `hello_world.py` located in the standalone_examples folder. This method allows users to test or develop scripts without launching the full Isaac Sim UI.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/README.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n.\\_build\\windows-x86_64\\release\\python.bat standalone_examples\\hello_world.py\n```\n\n----------------------------------------\n\nTITLE: Adding an Extension to a .kit File (TOML)\nDESCRIPTION: This TOML snippet demonstrates how to add an extension dependency to a `.kit` file.  This ensures that the extension is included when the application is built and launched.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/apps/isaacsim/README.md#_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\n\"extension.name\" = {}\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Dependency in TOML\nDESCRIPTION: This snippet demonstrates how to declare an extension as a dependency within an application's `.kit` file using TOML format. The dependency is added to the `dependencies` section of the TOML file.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/extensions/basic_cpp/README.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\n\"my_company.my_extension\" = {}\n```\n\n----------------------------------------\n\nTITLE: Launch Built Kit App - Launch Tool - Bash\nDESCRIPTION: Starts a built application (.kit file) from the `source/apps` directory. Requires the project to be built first. Supports the `-d` or `--dev-bundle` option to enable developer tools in UI apps. This command is for Linux.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh launch\n```\n\n----------------------------------------\n\nTITLE: Launch Built Kit App - Launch Tool - PowerShell\nDESCRIPTION: Starts a built application (.kit file) from the `source/apps` directory. Requires the project to be built first. Supports the `-d` or `--dev-bundle` option to enable developer tools in UI apps. This command is for Windows.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat launch\n```\n\n----------------------------------------\n\nTITLE: Building Prebuilt Isaac Sim Applications - Bash\nDESCRIPTION: Commands to build the pre-configured Isaac Sim applications on Linux platforms. This requires executable permissions for repo.sh and appropriate build environment configuration. The build generates binaries to be launched later. Users must be in the cloned isaacsim-app-template directory.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh build\n```\n\n----------------------------------------\n\nTITLE: Building Prebuilt Isaac Sim Applications - PowerShell\nDESCRIPTION: Commands to build the pre-configured Isaac Sim applications on Windows platforms using PowerShell. This requires running .\\repo.bat with the build argument inside the cloned isaacsim-app-template directory. The build will generate executables for launching the Isaac Sim apps.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/README.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat build\n```\n\n----------------------------------------\n\nTITLE: Build Kit Project - Build Tool - Bash\nDESCRIPTION: Compiles all necessary files and resources in the project, preparing them for execution, testing, or packaging. Should be run before using the `test` or `package` tools. Supports options like `-c` or `--clean` to clean the build directory and `x` or `--rebuild` to rebuild from scratch. This command is for Linux.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh build\n```\n\n----------------------------------------\n\nTITLE: Declaring Extension Dependency (TOML)\nDESCRIPTION: This TOML configuration snippet demonstrates how to declare a dependency on a custom extension within an Omniverse Kit application's `.kit` file. Adding the extension's namespaced name under the `[dependencies]` section ensures it is recognized and included when the application is built and run.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/extensions/python_ui/README.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\n\"my_company.my_extension\" = {}\n```\n\n----------------------------------------\n\nTITLE: Declaring Extension Dependency in .kit File (TOML)\nDESCRIPTION: Illustrates how to add a custom extension as a dependency within the `[dependencies]` section of an Omniverse Kit application's configuration (.kit) file. This declaration instructs the build system to include the specified extension, making it available to the application at runtime. Requires manual editing of the target application's `.kit` file.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/extensions/basic_python/README.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\n\"my_company.my_extension\" = {}\n```\n\n----------------------------------------\n\nTITLE: Build Kit Project - Build Tool - PowerShell\nDESCRIPTION: Compiles all necessary files and resources in the project, preparing them for execution, testing, or packaging. Should be run before using the `test` or `package` tools. Supports options like `-c` or `--clean` to clean the build directory and `x` or `--rebuild` to rebuild from scratch. This command is for Windows.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat build\n```\n\n----------------------------------------\n\nTITLE: Building IsaacSim Applications (Windows)\nDESCRIPTION: This command builds all applications contained in the `source` directory using the `repo.bat` script. It compiles the necessary files for the applications to run.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/apps/isaacsim/README.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat build\n```\n\n----------------------------------------\n\nTITLE: Create New Kit Project - Template Tool - PowerShell\nDESCRIPTION: Initiates the interactive configuration wizard to create a new application or extension based on available templates. This command is used on Windows systems.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat template new\n```\n\n----------------------------------------\n\nTITLE: Creating a New IsaacSim Application (Windows)\nDESCRIPTION: This command uses the `repo.bat` script to create a new IsaacSim application from a template. It requires the user to select a template type and provide a name, display name, and version for the new application.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/apps/isaacsim/README.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat template new\n```\n\n----------------------------------------\n\nTITLE: Creating New Extension (Linux Bash)\nDESCRIPTION: This Bash command executes the `repo.sh` script on Linux to launch the interactive template creation utility. It guides the user through selecting 'Extension', the 'Python UI Extension' template, and providing naming and version details for the new extension.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/extensions/python_ui/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh template new\n```\n\n----------------------------------------\n\nTITLE: Creating New Extension (Windows PowerShell)\nDESCRIPTION: This PowerShell command runs the `repo.bat` batch file on Windows to start the interactive template creation process. Similar to the Linux version, it prompts the user to select 'Extension', the 'Python UI Extension' template, and define its name and version.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/extensions/python_ui/README.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat template new\n```\n\n----------------------------------------\n\nTITLE: Creating New Extension via repo.sh (Bash)\nDESCRIPTION: Executes the provided `repo.sh` script with the `template new` command to initiate the process of creating a new project based on available templates, specifically targeting extension creation on Linux systems. Users are guided through interactive prompts to select the template and configure basic extension properties. Requires execution permissions on `repo.sh`.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/extensions/basic_python/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh template new\n```\n\n----------------------------------------\n\nTITLE: Creating New Extension via repo.bat (PowerShell)\nDESCRIPTION: Executes the provided `repo.bat` script with the `template new` command to initiate the process of creating a new project based on available templates, specifically targeting extension creation on Windows systems. Users are guided through interactive prompts similar to the Linux version. Requires execution permissions on `repo.bat` and access to the Windows command interpreter or PowerShell.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/extensions/basic_python/README.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat template new\n```\n\n----------------------------------------\n\nTITLE: Creating a New Extension (Linux)\nDESCRIPTION: This snippet shows how to create a new extension using the `repo.sh` script in a Linux environment. This command initiates the template creation process, prompting the user for details such as the extension name, display name, and version.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/extensions/basic_cpp/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh template new\n```\n\n----------------------------------------\n\nTITLE: Creating a New IsaacSim Extension (Linux)\nDESCRIPTION: This command uses the `repo.sh` script to create a new IsaacSim extension from a template. It requires the user to select a template type and provide a name, display name, and version for the new extension.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/apps/isaacsim/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh template new\n```\n\n----------------------------------------\n\nTITLE: Creating a New IsaacSim Extension (Windows)\nDESCRIPTION: This command uses the `repo.bat` script to create a new IsaacSim extension from a template. It requires the user to select a template type and provide a name, display name, and version for the new extension.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/apps/isaacsim/README.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat template new\n```\n\n----------------------------------------\n\nTITLE: Creating a New Extension (Windows)\nDESCRIPTION: This snippet shows how to create a new extension using the `repo.bat` script in a Windows environment. This command initiates the template creation process, prompting the user for details such as the extension name, display name, and version.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/extensions/basic_cpp/README.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat template new\n```\n\n----------------------------------------\n\nTITLE: Launching Isaac Sim Application - Full Kit - Bash\nDESCRIPTION: Launches the full Isaac Sim application on Linux after building. The path targets the release build directory where the .kit.sh file resides. This script starts the Isaac Sim simulation environment with full extension sets enabled.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./_build/linux-x86_64/release/isaacsim.exp.full.kit.sh\n```\n\n----------------------------------------\n\nTITLE: Creating a New IsaacSim Application (Linux)\nDESCRIPTION: This command uses the `repo.sh` script to create a new IsaacSim application from a template. It requires the user to select a template type and provide a name, display name, and version for the new application.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/apps/isaacsim/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh template new\n```\n\n----------------------------------------\n\nTITLE: Create New Kit Project - Template Tool - Bash\nDESCRIPTION: Initiates the interactive configuration wizard to create a new application or extension based on available templates. This command is used on Linux systems.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh template new\n```\n\n----------------------------------------\n\nTITLE: Building IsaacSim Applications (Linux)\nDESCRIPTION: This command builds all applications contained in the `source` directory using the `repo.sh` script. It compiles the necessary files for the applications to run.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/apps/isaacsim/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh build\n```\n\n----------------------------------------\n\nTITLE: Launching Isaac Sim Application - Full Kit - PowerShell\nDESCRIPTION: Launches the full Isaac Sim application on Windows after building. The command targets the built executable batch file under the release directory for Windows x86_64. This starts Isaac Sim with the full set of extensions and simulation capabilities available.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/README.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n.\\_build\\windows-x86_64\\release\\isaacsim.exp.full.kit.bat\n```\n\n----------------------------------------\n\nTITLE: Launching IsaacSim Applications (Windows)\nDESCRIPTION: This command launches an IsaacSim application using the `repo.bat` script. It prompts the user to select which application to launch.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/apps/isaacsim/README.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat launch\n```\n\n----------------------------------------\n\nTITLE: Launching Omniverse Kit with Dev Bundle on Linux\nDESCRIPTION: This command is used to launch an Omniverse Kit application on Linux with the Developer Bundle Extensions enabled. It utilizes the `repo.sh` script with the `launch` command and the `--dev-bundle` flag.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/developer_bundle_extensions.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n./repo.sh launch --dev-bundle\n```\n\n----------------------------------------\n\nTITLE: Launching Omniverse Kit with Dev Bundle on Windows\nDESCRIPTION: This command is used to launch an Omniverse Kit application on Windows with the Developer Bundle Extensions enabled. It utilizes the `repo.bat` script with the `launch` command and the `--dev-bundle` flag. The tool will prompt for selecting a `.kit` file.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/developer_bundle_extensions.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\repo.bat launch --dev-bundle\n```\n\n----------------------------------------\n\nTITLE: Launching IsaacSim Applications (Linux)\nDESCRIPTION: This command launches an IsaacSim application using the `repo.sh` script. It prompts the user to select which application to launch.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/apps/isaacsim/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh launch\n```\n\n----------------------------------------\n\nTITLE: Launching IsaacSim with Developer Bundle (Windows)\nDESCRIPTION: This command launches an IsaacSim application with the developer bundle enabled using the `repo.bat` script. The developer bundle provides additional tools and features for development.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/apps/isaacsim/README.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat launch --dev-bundle\n```\n\n----------------------------------------\n\nTITLE: Pass Args to Kit Executable - Launch Tool - Bash\nDESCRIPTION: Launches the built application and passes additional arguments directly to the underlying Kit executable. Arguments following `--` are forwarded to Kit. This command is for Linux.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh launch -- --clear-cache\n```\n\n----------------------------------------\n\nTITLE: Enabling Host Toolchain Linking in repo.toml\nDESCRIPTION: Configuration snippet to enable linking with the host toolchain in the repo.toml file, which is necessary for Windows C++ development.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/windows_developer_configuration.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[repo_build.msbuild]\nlink_host_toolchain = true\n```\n\n----------------------------------------\n\nTITLE: Pass Args to Kit Executable - Launch Tool - PowerShell\nDESCRIPTION: Launches the built application and passes additional arguments directly to the underlying Kit executable. Arguments following `--` are forwarded to Kit. This command is for Windows.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat launch -- --clear-cache\n```\n\n----------------------------------------\n\nTITLE: Launching a Packaged IsaacSim Application (Linux)\nDESCRIPTION: This command launches a packaged IsaacSim application using the `repo.sh` script.  The full path to the package must be specified.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/apps/isaacsim/README.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh launch --package <full-path-to-package>\n```\n\n----------------------------------------\n\nTITLE: Launching IsaacSim with Developer Bundle (Linux)\nDESCRIPTION: This command launches an IsaacSim application with the developer bundle enabled using the `repo.sh` script. The developer bundle provides additional tools and features for development.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/apps/isaacsim/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh launch --dev-bundle\n```\n\n----------------------------------------\n\nTITLE: Launching a Packaged IsaacSim Application (Windows)\nDESCRIPTION: This command launches a packaged IsaacSim application using the `repo.bat` script. The full path to the package must be specified.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/apps/isaacsim/README.md#_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat launch --package <full-path-to-package>\n```\n\n----------------------------------------\n\nTITLE: Launch Packaged Kit App - Launch Tool - PowerShell\nDESCRIPTION: Launches an application that has been packaged into a distributable format (e.g., a .zip file). The path to the package must be provided using the `-p` or `--package` option. This command is for Windows.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat launch -p <C:\\path\\to\\package.zip>\n```\n\n----------------------------------------\n\nTITLE: Create Thin Kit Package - Package Tool - PowerShell\nDESCRIPTION: Creates a minimal package that includes only the custom extensions and configurations, relying on a Kit installation to provide required registry extensions. Requires the project to be built first. This command is for Windows.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_24\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat package --thin\n```\n\n----------------------------------------\n\nTITLE: Create Thin Kit Package - Package Tool - Bash\nDESCRIPTION: Creates a minimal package that includes only the custom extensions and configurations, relying on a Kit installation to provide required registry extensions. Requires the project to be built first. This command is for Linux.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh package --thin\n```\n\n----------------------------------------\n\nTITLE: Package Kit App with Name - Package Tool - Bash\nDESCRIPTION: Packages the built application, allowing a specific name to be provided for the resulting package or container image using the `-n` or `--name` option. Requires the project to be built first. This command is for Linux.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh package -n <package_name>\n```\n\n----------------------------------------\n\nTITLE: Package Kit App with Name - Package Tool - PowerShell\nDESCRIPTION: Packages the built application, allowing a specific name to be provided for the resulting package or container image using the `-n` or `--name` option. Requires the project to be built first. This command is for Windows.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_22\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat package -n <package_name>\n```\n\n----------------------------------------\n\nTITLE: Packaging IsaacSim Applications (Windows)\nDESCRIPTION: This command packages an IsaacSim application for deployment using the `repo.bat` script. By default, the package name is taken from the `repo.toml` file but can be overridden with the `--name` flag.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/apps/isaacsim/README.md#_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat package\n```\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat package --name <package_name>\n```\n\n----------------------------------------\n\nTITLE: Package Kit App as Container - Package Tool - Bash\nDESCRIPTION: Packages the application as a container image. This feature is currently supported only on Linux systems. The target `.kit` file can be specified via `--target-app`. Requires the project to be built first.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh package --container\n```\n\n----------------------------------------\n\nTITLE: Run Kit Project Tests - Test Tool - PowerShell\nDESCRIPTION: Executes automated tests for the applications and extensions in the project. Primarily tests application startup/shutdown and includes tests defined within extensions. Should always be run after a successful build. This command is for Windows.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat test\n```\n\n----------------------------------------\n\nTITLE: Configuring Isaac Sim Application Arguments\nDESCRIPTION: This snippet defines arguments for executing containerized applications within Isaac Sim. The \"--no-window\" argument disables the application's graphical window, and the \"--ext-folder\" argument specifies the location of the extension folder. These arguments are used during application launches via the repo launch script, influencing the application's operational behavior by modifying how it is displayed and how it utilizes extensions. No dependencies are explicitly listed, implying core system functionality is available.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/tools/containers/kit_args.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n--no-window\n--ext-folder /home/ubuntu/.local/share/ov/data/exts/v2\n```\n\n----------------------------------------\n\nTITLE: Launch Containerized Kit App - Launch Tool - Bash\nDESCRIPTION: Launches the application as a containerized image. This feature is currently supported only on Linux systems. Requires the application to be built or packaged as a container first.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh launch --container\n```\n\n----------------------------------------\n\nTITLE: Git LFS Installation and Content Pull for Large Files - Bash\nDESCRIPTION: These commands install Git Large File Storage (LFS) and download any LFS-tracked content. This ensures that all large assets, such as UI images used by Omniverse Kit applications, are properly retrieved to prevent runtime errors related to missing resources.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit lfs install\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit lfs pull\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry in Omniverse Kit Application (toml)\nDESCRIPTION: This snippet shows the configuration within a `.kit` file to disable anonymous telemetry. The `[settings.telemetry]` section controls the telemetry settings. The `enableAnonymousData` parameter is set to `true` by default and is changed to `false` to disable data collection. The purpose of the telemetry is to collect anonymous usage data like installation and configuration details, hardware details, product session and feature usage, error and crash logs.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/data_collection_and_use.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n   ```toml\n       [settings.telemetry]\n       # Anonymous Kit application usage telemetry\n       enableAnonymousData = true\n   ```\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry in Omniverse Kit Application (toml) - Disabled\nDESCRIPTION: This snippet demonstrates how to disable the anonymous telemetry data collection in the Omniverse Kit application. By setting `enableAnonymousData` to `false`, the application will stop sending anonymous usage data, including hardware, configuration, and session data. This change must be made in the `.kit` file.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/data_collection_and_use.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n   ```toml\n       [settings.telemetry]\n       # Anonymous Kit application usage telemetry\n       enableAnonymousData = false\n   ```\n```\n\n----------------------------------------\n\nTITLE: Enabling Windows C++ Build Process in repo.toml\nDESCRIPTION: Configuration snippet to enable Windows x86_64 platform builds in the repo.toml file.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/windows_developer_configuration.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[repo_build.build]\n\"platform:windows-x86_64\".enabled = true\n```\n\n----------------------------------------\n\nTITLE: Package Kit App - Package Tool - Bash\nDESCRIPTION: Packages the built application and its components into a distributable format. Ensures the application is ready for deployment or distribution. Requires the project to be built first. The version is set in `tools/VERSION.md`. This command is for Linux.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh package\n```\n\n----------------------------------------\n\nTITLE: Package Kit App - Package Tool - PowerShell\nDESCRIPTION: Packages the built application and its components into a distributable format. Ensures the application is ready for deployment or distribution. Requires the project to be built first. The version is set in `tools/VERSION.md`. This command is for Windows.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_20\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat package\n```\n\n----------------------------------------\n\nTITLE: Packaging IsaacSim Applications (Linux)\nDESCRIPTION: This command packages an IsaacSim application for deployment using the `repo.sh` script. By default, the package name is taken from the `repo.toml` file but can be overridden with the `--name` flag.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/apps/isaacsim/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh package\n```\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh package --name <package_name>\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Installation Paths in repo.toml\nDESCRIPTION: Configuration snippet for specifying non-default installation paths for Visual Studio and Windows SDK in the repo.toml file.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/windows_developer_configuration.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[repo_build.msbuild]\nvs_path = \"D:\\\\CustomPath\\\\Visual Studio\\\\2022\\\\Community\"\nwinsdk_path = \"D:\\\\CustomPath\\\\Windows Kits\\\\10\\\\bin\\\\10.0.19041.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Windows SDK Version in repo.toml\nDESCRIPTION: Configuration snippet to specify preferred Windows SDK version and installation path when multiple installations exist.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/windows_developer_configuration.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[repo_build.msbuild]\nwinsdk_version = \"10.0.19041.0\"\nwinsdk_path = \"D:\\\\CustomSDKPath\\\\Windows Kits\\\\10\\\\bin\\\\10.0.19041.0\"\n```\n\n----------------------------------------\n\nTITLE: Resetting Isaac Sim User Settings for Troubleshooting - Bash\nDESCRIPTION: This snippet resets the user settings of Isaac Sim by launching the application with the `--reset-user` argument on Linux. This is used to clear corrupted or misconfigured user data that may cause errors during app execution.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh launch -- --reset-user\n```\n\n----------------------------------------\n\nTITLE: Replay Kit Template Configuration - Template Tool - Bash\nDESCRIPTION: Applies a previously generated template configuration from a TOML file to create a new project non-interactively. Useful for CI/CD pipelines on Linux.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh template replay {playback_file_name}.toml\n```\n\n----------------------------------------\n\nTITLE: Running Tests on IsaacSim Applications (Windows)\nDESCRIPTION: This command runs the test suite for the IsaacSim applications using the `repo.bat` script. A successful build is required before testing.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/apps/isaacsim/README.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat test\n```\n\n----------------------------------------\n\nTITLE: Run Kit Project Tests - Test Tool - Bash\nDESCRIPTION: Executes automated tests for the applications and extensions in the project. Primarily tests application startup/shutdown and includes tests defined within extensions. Should always be run after a successful build. This command is for Linux.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh test\n```\n\n----------------------------------------\n\nTITLE: Running Tests on IsaacSim Applications (Linux)\nDESCRIPTION: This command runs the test suite for the IsaacSim applications using the `repo.sh` script. A successful build is required before testing.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/apps/isaacsim/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh test\n```\n\n----------------------------------------\n\nTITLE: Replay Kit Template Configuration - Template Tool - PowerShell\nDESCRIPTION: Applies a previously generated template configuration from a TOML file to create a new project non-interactively. Useful for CI/CD pipelines on Windows.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat template replay {playback_file_name}.toml\n```\n\n----------------------------------------\n\nTITLE: Generate Kit Template Playback File - Template Tool - Bash\nDESCRIPTION: Runs the interactive template creation wizard and saves the configuration choices to a specified TOML file for later replay. This is useful for scripting and automation on Linux.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh template new --generate-playback {playback_file_name}.toml\n```\n\n----------------------------------------\n\nTITLE: Launch Packaged Kit App - Launch Tool - Bash\nDESCRIPTION: Launches an application that has been packaged into a distributable format (e.g., a .zip file). The path to the package must be provided using the `-p` or `--package` option. This command is for Linux.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh launch -p </path/to/package.zip>\n```\n\n----------------------------------------\n\nTITLE: Generate Kit Template Playback File - Template Tool - PowerShell\nDESCRIPTION: Runs the interactive template creation wizard and saves the configuration choices to a specified TOML file for later replay. This is useful for scripting and automation on Windows.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat template new --generate-playback {playback_file_name}.toml\n```\n\n----------------------------------------\n\nTITLE: List Kit Templates - Template Tool - Bash\nDESCRIPTION: Lists the available predefined project templates without initiating the interactive configuration wizard. This command is used on Linux systems.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./repo.sh template list\n```\n\n----------------------------------------\n\nTITLE: Cleaning Build Directory with repo Scripts (Shell/Batch)\nDESCRIPTION: Cleans the build directory using `repo.sh` (Linux/macOS) or `repo.bat` (Windows) with the `-c` flag. This removes potentially stale build artifacts and helps resolve build configuration issues before starting a fresh build.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/usage_and_troubleshooting.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Linux/macOS\n./repo.sh build -c\n```\n\nLANGUAGE: Batch\nCODE:\n```\n# Windows\n.\\repo.bat build -c\n```\n\n----------------------------------------\n\nTITLE: Cloning Isaac Sim App Template Repository - Bash\nDESCRIPTION: This snippet demonstrates how to clone the isaacsim-app-template repository from GitHub using git in a bash environment, followed by changing the directory into the cloned repo. It assumes git is installed and network access is available to github.com. The commands set up the local workspace ready for further build and development steps.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/isaac-sim/isaacsim-app-template.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd isaacsim-app-template\n```\n\n----------------------------------------\n\nTITLE: Cloning Kit App Template Repository (Bash)\nDESCRIPTION: Provides the standard Git commands to clone the NVIDIA Omniverse Kit App Template repository from GitHub and navigate into the newly created directory. This is the essential first step for users to access and utilize the template files and associated tools. Requires Git installed and configured.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/extensions/basic_python/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/NVIDIA-Omniverse/kit-app-template.git\ncd kit-app-template\n```\n\n----------------------------------------\n\nTITLE: Cloning Template Repository (Bash)\nDESCRIPTION: These Bash commands are used to clone the official `kit-app-template` repository from GitHub, which contains the Python UI Extension Template, and then change the current directory to the root of the newly cloned repository.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/extensions/python_ui/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/NVIDIA-Omniverse/kit-app-template.git\ncd kit-app-template\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository with Git\nDESCRIPTION: This snippet demonstrates how to clone the NVIDIA Omniverse Kit App Template repository from GitHub using Git. It involves using the `git clone` command followed by navigating into the cloned directory using `cd`.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/extensions/basic_cpp/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/NVIDIA-Omniverse/kit-app-template.git\ncd kit-app-template\n```\n\n----------------------------------------\n\nTITLE: Cloning the IsaacSim App Template Repository (Git)\nDESCRIPTION: This command clones the IsaacSim App Template repository from GitHub to your local machine. It's the first step in setting up the development environment.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/templates/apps/isaacsim/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/isaac-sim/isaacsim-app-template.git\ncd isaacsim-app-template\n```\n\n----------------------------------------\n\nTITLE: Safely Pruning Stopped Docker Containers (Shell)\nDESCRIPTION: Removes all stopped Docker containers using `docker container prune`. This is a safe, recommended command for regular maintenance to reclaim disk space without impacting active resources or images.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/usage_and_troubleshooting.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndocker container prune\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Visual Studio Version in repo.toml\nDESCRIPTION: Configuration snippet to specify preferred Visual Studio version, edition, and installation path when multiple installations exist.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/windows_developer_configuration.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[repo_build.msbuild]\nvs_version = \"vs2022\"\nvs_edition = \"Community\"\nvs_path = \"D:\\\\AnotherPath\\\\Visual Studio\\\\2022\\\\Enterprise\\\\\"\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Disk Space Usage (Shell)\nDESCRIPTION: Displays disk space consumed by Docker objects (images, containers, volumes) using `docker system df`. Useful for monitoring space usage during local container testing and identifying cleanup needs.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/usage_and_troubleshooting.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndocker system df\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Docker Images (Shell)\nDESCRIPTION: Removes one or more specified Docker images using `docker rmi <image>`, where `<image>` is the image ID or name:tag. Allows targeted cleanup of unneeded images identified via `docker images`.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/usage_and_troubleshooting.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ndocker rmi <image>\n```\n\n----------------------------------------\n\nTITLE: Listing Local Docker Images (Shell)\nDESCRIPTION: Lists all Docker images present on the local machine using `docker images`. This command helps identify images by repository, tag, and ID for potential manual removal or inspection.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/usage_and_troubleshooting.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ndocker images\n```\n\n----------------------------------------\n\nTITLE: List Kit Templates - Template Tool - PowerShell\nDESCRIPTION: Lists the available predefined project templates without initiating the interactive configuration wizard. This command is used on Windows systems.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/kit_app_template_tooling_guide.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat template list\n```\n\n----------------------------------------\n\nTITLE: Aggressively Pruning Unused Docker Resources (Shell)\nDESCRIPTION: Removes all unused Docker resources (containers, networks, images, build cache) via `docker system prune`. Use with caution as it cleans indiscriminately; review potential deletions before running.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/readme-assets/additional-docs/usage_and_troubleshooting.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ndocker system prune\n```\n\n----------------------------------------\n\nTITLE: Resetting Isaac Sim User Settings for Troubleshooting - PowerShell\nDESCRIPTION: The PowerShell command resets Isaac Sim user data by launching the app with the `--reset-user` flag on Windows. It helps resolve problems related to user-specific configuration by clearing or rebuilding these settings.\nSOURCE: https://github.com/isaac-sim/isaacsim-app-template/blob/main/README.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n.\\repo.bat launch -- --reset-user\n```"
  }
]