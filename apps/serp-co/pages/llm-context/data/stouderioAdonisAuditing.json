[
  {
    "owner": "stouderio",
    "repo": "adonis-auditing",
    "content": "TITLE: Implementing Auditable Mixin in an Adonis.js Model\nDESCRIPTION: This snippet shows how to create an auditable Book model in Adonis.js by using the compose helper to extend BaseModel with the Auditable mixin. The model includes standard fields like id, title, createdAt, and updatedAt.\nSOURCE: https://github.com/stouderio/adonis-auditing/blob/main/docs/guide/model-setup.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport { BaseModel, column } from '@adonisjs/lucid/orm'\nimport { compose } from '@adonisjs/core/helpers'\nimport { Auditable } from '@stouder-io/adonis-auditing'\n\nexport default class Book extends compose(BaseModel, Auditable) {\n  @column({ isPrimary: true })\n  declare id: number\n\n  @column()\n  declare title: string\n\n  @column.dateTime({ autoCreate: true })\n  declare createdAt: DateTime\n\n  @column.dateTime({ autoCreate: true, autoUpdate: true })\n  declare updatedAt: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Adonis Auditing in TypeScript\nDESCRIPTION: The default configuration file for Adonis Auditing that defines user and metadata resolvers. It imports the configuration function from the package and sets up default resolvers for user identification, IP address, user agent, and URL tracking.\nSOURCE: https://github.com/stouderio/adonis-auditing/blob/main/docs/guide/general-configuration.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@stouder-io/adonis-auditing/setup'\n\nexport default defineConfig({\n  userResolver: () => import('#audit_resolvers/user_resolver'),\n  resolvers: {\n    ip_address: () => import('#audit_resolvers/ip_address_resolver'),\n    user_agent: () => import('#audit_resolvers/user_agent_resolver'),\n    url: () => import('#audit_resolvers/url_resolver'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Audits from Models in Adonis.js with Typescript\nDESCRIPTION: This code snippet demonstrates how to retrieve audit records from a model instance using the Auditable mixin. It shows how to get all associated audits, the first audit, and the last audit for a Book model.\nSOURCE: https://github.com/stouderio/adonis-auditing/blob/main/docs/guide/getting-audits.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Get the first available book\nconst book = await Book.firstOrFail()\n\n// Get all associated audits\nconst audits = await book.audits()\n\n// Get the first audit\nconst first = await book.audits().first()\n\n// Get the last audit\nconst last = await book.audits().last()\n```\n\n----------------------------------------\n\nTITLE: Implementing UserResolver Interface in TypeScript\nDESCRIPTION: The UserResolver interface requires a resolve method that takes an HttpContext and returns a Promise of user identification or null. This is used to associate audits with users.\nSOURCE: https://github.com/stouderio/adonis-auditing/blob/main/docs/guide/user-resolver.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UserResolver {\n  resolve(ctx: HttpContext): Promise<{ id: string; type: string } | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Resolver in TypeScript for Adonis Auditing\nDESCRIPTION: This code demonstrates how to create a custom resolver by implementing the Resolver interface. The resolver generates a random number between 0 and 100 and returns it as metadata for the audit. It requires the HttpContext from Adonis core and the Resolver interface from the adonis-auditing package.\nSOURCE: https://github.com/stouderio/adonis-auditing/blob/main/docs/guide/audit-resolvers.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport { Resolver } from '@stouder-io/adonis-auditing'\n\nexport default class RandomResolver implements Resolver {\n  async resolve(ctx: HttpContext) {\n    return Math.random() * 100\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Adonis Auditing with Ace Command\nDESCRIPTION: Direct installation using the Adonis ace command which handles both installation and configuration automatically.\nSOURCE: https://github.com/stouderio/adonis-auditing/blob/main/docs/guide/installation.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace add @stouder-io/adonis-auditing\n```\n\n----------------------------------------\n\nTITLE: Installing Adonis Auditing with NPM\nDESCRIPTION: Manual installation steps using NPM package manager, followed by the configuration command.\nSOURCE: https://github.com/stouderio/adonis-auditing/blob/main/docs/guide/installation.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @stouder-io/adonis-auditing\nnode ace configure @stouder-io/adonis-auditing\n```\n\n----------------------------------------\n\nTITLE: Installing Adonis Auditing with PNPM\nDESCRIPTION: Manual installation steps using PNPM package manager, followed by the configuration command.\nSOURCE: https://github.com/stouderio/adonis-auditing/blob/main/docs/guide/installation.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm install @stouder-io/adonis-auditing\nnode ace configure @stouder-io/adonis-auditing\n```\n\n----------------------------------------\n\nTITLE: Installing Adonis Auditing with Yarn\nDESCRIPTION: Manual installation steps using Yarn package manager, followed by the configuration command.\nSOURCE: https://github.com/stouderio/adonis-auditing/blob/main/docs/guide/installation.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @stouder-io/adonis-auditing\nnode ace configure @stouder-io/adonis-auditing\n```\n\n----------------------------------------\n\nTITLE: Describing src Directory Structure in Markdown\nDESCRIPTION: This snippet provides a brief explanation of the src directory's purpose in the adonis-auditing project. It informs developers that they can organize their package code in this directory and create additional sub-directories as needed.\nSOURCE: https://github.com/stouderio/adonis-auditing/blob/main/src/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# The src directory\n\nThe `src` directory is where you organize your package code. Feel free to create additional sub-directories as you see fit.\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Homepage for Adonis Auditing Documentation\nDESCRIPTION: YAML configuration for the VitePress documentation homepage for Adonis Auditing. It sets up the layout, hero section with project name and actions, and lists the key features of the package.\nSOURCE: https://github.com/stouderio/adonis-auditing/blob/main/docs/index.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\n\nhero:\n  name: \"Adonis Auditing\"\n  tagline: Audit your Lucid models with ease.\n  actions:\n    - theme: brand\n      text: Getting started\n      link: /guide/introduction\n    - theme: alt\n      text: View on GitHub\n      link: https://github.com/StouderIO/adonis-auditing\n      \nfeatures:\n  - title: Auditable mixing\n    details: Simply add the `Auditable` mixin to your model to enable auditing.\n  - title: Resolvers\n    details: Define custom resolvers to resolve metadata.\n  - title: User resolver\n    details: Define a user resolver to resolve the user who triggered the audit.\n  - title: Events\n    details: Auditing events let you subscribe to model changes.\n  - title: Transition\n    details: Transition from one state to another with ease.\n```"
  }
]