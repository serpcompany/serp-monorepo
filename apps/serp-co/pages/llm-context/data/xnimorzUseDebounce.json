[
  {
    "owner": "xnimorz",
    "repo": "use-debounce",
    "content": "TITLE: Simple Value Debouncing with useDebounce Hook in React\nDESCRIPTION: Example showing how to debounce an input value using the useDebounce hook. The hook updates the debounced value only after the specified delay (1000ms) has passed since the last change.\nSOURCE: https://github.com/xnimorz/use-debounce/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { useDebounce } from 'use-debounce';\n\nexport default function Input() {\n  const [text, setText] = useState('Hello');\n  const [value] = useDebounce(text, 1000);\n\n  return (\n    <div>\n      <input\n        defaultValue={'Hello'}\n        onChange={(e) => {\n          setText(e.target.value);\n        }}\n      />\n      <p>Actual value: {text}</p>\n      <p>Debounce value: {value}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Debounced Callbacks with useDebouncedCallback in React\nDESCRIPTION: Example of using useDebouncedCallback to debounce a function that updates state. The callback is executed only after 1000ms of inactivity, making it useful for handling input events.\nSOURCE: https://github.com/xnimorz/use-debounce/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useDebouncedCallback } from 'use-debounce';\n\nfunction Input({ defaultValue }) {\n  const [value, setValue] = useState(defaultValue);\n  // Debounce callback\n  const debounced = useDebouncedCallback(\n    // function\n    (value) => {\n      setValue(value);\n    },\n    // delay in ms\n    1000\n  );\n\n  // you should use `e => debounced(e.target.value)` as react works with synthetic events\n  return (\n    <div>\n      <input\n        defaultValue={defaultValue}\n        onChange={(e) => debounced(e.target.value)}\n      />\n      <p>Debounced value: {value}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Debouncing Window Scroll Event with useDebouncedCallback in React\nDESCRIPTION: Example demonstrating how to use useDebouncedCallback with native event listeners, specifically for handling scroll events efficiently by updating the state only after scrolling has stopped for 800ms.\nSOURCE: https://github.com/xnimorz/use-debounce/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ScrolledComponent() {\n  // just a counter to show, that there are no any unnessesary updates\n  const updatedCount = useRef(0);\n  updatedCount.current++;\n\n  const [position, setPosition] = useState(window.pageYOffset);\n\n  // Debounce callback\n  const debounced = useDebouncedCallback(\n    // function\n    () => {\n      setPosition(window.pageYOffset);\n    },\n    // delay in ms\n    800\n  );\n\n  useEffect(() => {\n    const unsubscribe = subscribe(window, 'scroll', debounced);\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  return (\n    <div style={{ height: 10000 }}>\n      <div style={{ position: 'fixed', top: 0, left: 0 }}>\n        <p>Debounced top position: {position}</p>\n        <p>Component rerendered {updatedCount.current} times</p>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Debounce with Cancel, maxWait Options in React\nDESCRIPTION: Example showing how to use the advanced options of useDebouncedCallback including maxWait parameter to limit the maximum delay and cancel method to stop debouncing explicitly.\nSOURCE: https://github.com/xnimorz/use-debounce/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useDebouncedCallback } from 'use-debounce';\n\nfunction Input({ defaultValue }) {\n  const [value, setValue] = useState(defaultValue);\n  const debounced = useDebouncedCallback(\n    (value) => {\n      setValue(value);\n    },\n    500,\n    // The maximum time func is allowed to be delayed before it's invoked:\n    { maxWait: 2000 }\n  );\n\n  // you should use `e => debounced(e.target.value)` as react works with synthetic events\n  return (\n    <div>\n      <input\n        defaultValue={defaultValue}\n        onChange={(e) => debounced(e.target.value)}\n      />\n      <p>Debounced value: {value}</p>\n      <button onClick={debounced.cancel}>Cancel Debounce cycle</button>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Input defaultValue=\"Hello world\" />, rootElement);\n```\n\n----------------------------------------\n\nTITLE: Using Throttled Callback for Scroll Event Handling\nDESCRIPTION: Example of throttling a scroll event handler to avoid excessive position updates. The callback is throttled to execute at most once every 100ms.\nSOURCE: https://github.com/xnimorz/use-debounce/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst scrollHandler = useThrottledCallback(updatePosition, 100);\nwindow.addEventListener('scroll', scrollHandler);\n```\n\n----------------------------------------\n\nTITLE: Using Cancel, isPending, and Flush Methods with useDebounce in React\nDESCRIPTION: Example showing how to access and use the control methods (cancel, isPending, flush) provided by the useDebounce hook for managing the debounce state and behavior.\nSOURCE: https://github.com/xnimorz/use-debounce/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst [value, {cancel, isPending, flush}] = useDebounce(valueToDebounce);\n...\ncancel() // cancels pending debounce request\nisPending() // returns if there is a pending debouncing request\nflush() // immediately flushes pending request\n```\n\n----------------------------------------\n\nTITLE: Using Flush Method with useDebouncedCallback in React Unmount Scenario\nDESCRIPTION: Example demonstrating how to use the flush method with useDebouncedCallback to ensure a debounced function executes when a component is about to unmount, preventing data loss.\nSOURCE: https://github.com/xnimorz/use-debounce/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { useDebouncedCallback } from 'use-debounce';\n\nfunction InputWhichFetchesSomeData({ defaultValue, asyncFetchData }) {\n  const debounced = useDebouncedCallback(\n    (value) => {\n      asyncFetchData;\n    },\n    500,\n    { maxWait: 2000 }\n  );\n\n  // When the component goes to be unmounted, we will fetch data if the input has changed.\n  useEffect(\n    () => () => {\n      debounced.flush();\n    },\n    [debounced]\n  );\n\n  return (\n    <input\n      defaultValue={defaultValue}\n      onChange={(e) => debounced(e.target.value)}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Pending State with isPending Method in React\nDESCRIPTION: Example demonstrating how to use the isPending method to check if there are any pending callbacks with useDebouncedCallback, which is useful for conditional rendering or logic based on debounce status.\nSOURCE: https://github.com/xnimorz/use-debounce/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useCallback } from 'react';\n\nfunction Component({ text }) {\n  const debounced = useDebouncedCallback(\n    useCallback(() => {}, []),\n    500\n  );\n\n  expect(debounced.isPending()).toBeFalsy();\n  debounced();\n  expect(debounced.isPending()).toBeTruthy();\n  debounced.flush();\n  expect(debounced.isPending()).toBeFalsy();\n\n  return <span>{text}</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Leading Debounce Implementation with useDebounce in React\nDESCRIPTION: Example showing how to use the leading option with useDebounce to execute the function once immediately when called, with subsequent calls debounced until the timeout expires.\nSOURCE: https://github.com/xnimorz/use-debounce/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { useDebounce } from 'use-debounce';\n\nexport default function Input() {\n  const [text, setText] = useState('Hello');\n  const [value] = useDebounce(text, 1000, { leading: true });\n\n  // value is updated immediately when text changes the first time,\n  // but all subsequent changes are debounced.\n  return (\n    <div>\n      <input\n        defaultValue={'Hello'}\n        onChange={(e) => {\n          setText(e.target.value);\n        }}\n      />\n      <p>Actual value: {text}</p>\n      <p>Debounce value: {value}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Throttled Token Renewal on Button Click\nDESCRIPTION: Example showing how to throttle a token renewal function on button clicks to execute at most once every 5 minutes (300000ms), with the trailing option disabled.\nSOURCE: https://github.com/xnimorz/use-debounce/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst throttled = useThrottledCallback(renewToken, 300000, { 'trailing': false })\n<button onClick={throttled}>click</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring throttling options in v4.0.0\nDESCRIPTION: Shows how to use lodash-style throttling options with useDebouncedCallback, including leading, trailing, and maxWait parameters for fine-grained control.\nSOURCE: https://github.com/xnimorz/use-debounce/blob/master/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nuseDebouncedCallback(callback, 300, {\n  leading: true,\n  trailing: false,\n  maxWait: 300,\n});\n```\n\n----------------------------------------\n\nTITLE: API Change Example for useDebouncedCallback in v6.0.0\nDESCRIPTION: Shows how the API for useDebouncedCallback changed in version 6.0.0, removing the callback field and returning a callable function instead, with additional methods like cancel, flush, and isPending.\nSOURCE: https://github.com/xnimorz/use-debounce/blob/master/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Old:\nconst { callback, pending } = useDebouncedCallback(/*...*/); \n// ...\ndebounced.callback();\n\n// New:\nconst debounced = useDebouncedCallback(/*...*/); \n// ...\ndebounced();\n/**\n * Also debounced has fields:\n * {\n *   cancel: () => void\n *   flush: () => void\n *   isPending: () => boolean\n * }\n * So you can call debounced.cancel(), debounced.flush(), debounced.isPending()\n */\n```\n\n----------------------------------------\n\nTITLE: Usage Changes for useDebouncedCallback in v5.0.0\nDESCRIPTION: Demonstrates the breaking change in useDebouncedCallback API, which now returns an object with callback, cancel, flush, and pending methods instead of an array.\nSOURCE: https://github.com/xnimorz/use-debounce/blob/master/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst [debouncedCallback, cancelDebouncedCallback, callPending] =\n  useDebouncedCallback(/*...*/);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst debounced = useDebouncedCallback(/*...*/);\n/**\n * debounced: {\n *   callback: (...args: T) => unknown, which is debouncedCallback\n *   cancel: () => void, which is cancelDebouncedCallback\n *   flush: () => void, which is callPending\n *   pending: () => boolean, which is a new function\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Usage Changes for useDebounce in v5.0.0\nDESCRIPTION: Explains the breaking change in useDebounce API, which now returns an array where the second element is an object containing cancel, flush, and pending methods.\nSOURCE: https://github.com/xnimorz/use-debounce/blob/master/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst [value, cancel, callPending] = useDebounce(/*...*/);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst [value, fn] = useDebounce(/*...*/);\n/**\n * value is just a value without changes\n * But fn now is an object: {\n *   cancel: () => void, which is cancel\n *   flush: () => void, which is callPending\n *   pending: () => boolean, which is a new function\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Using the new pending function in v5.0.0\nDESCRIPTION: Demonstrates how to use the new pending function with useDebouncedCallback to check if there are pending callbacks, trigger them with callback(), and flush them.\nSOURCE: https://github.com/xnimorz/use-debounce/blob/master/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Component({ text }) {\n  const debounced = useDebouncedCallback(\n    useCallback(() => {}, []),\n    500\n  );\n\n  expect(debounced.pending()).toBeFalsy();\n  debounced.callback();\n  expect(debounced.pending()).toBeTruthy();\n  debounced.flush();\n  expect(debounced.pending()).toBeFalsy();\n\n  return <span>{text}</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Pending State API Change in v6.0.0\nDESCRIPTION: Illustrates how the pending state API changed in version 6.0.0, replacing the pending property with an isPending method on the returned object from useDebouncedCallback.\nSOURCE: https://github.com/xnimorz/use-debounce/blob/master/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Old:\nconst { callback, pending } = useDebouncedCallback(/*...*/); \n\n// New:\nconst { isPending } = useDebouncedCallback(/*...*/); \n/**\n * {\n *   cancel: () => void\n *   flush: () => void\n *   isPending: () => boolean\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Importing useThrottledCallback from use-debounce\nDESCRIPTION: Two different ways to import the useThrottledCallback function from the use-debounce library.\nSOURCE: https://github.com/xnimorz/use-debounce/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport useThrottledCallback from 'use-debounce/useThrottledCallback';\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { useThrottledCallback } from 'use-debounce';\n```\n\n----------------------------------------\n\nTITLE: Migration Example for use-debounce v8.0.0\nDESCRIPTION: Demonstrates how to migrate import statements after the build system change to microbundle in version 8.0.0. The example shows how to update paths from the old specific imports to the new consolidated exports.\nSOURCE: https://github.com/xnimorz/use-debounce/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Before:\nimport useDebounceCallback from 'use-debounce/lib/useDebounceCallback';\n\n// After:\nimport { useDebounceCallback } from 'use-debounce';\n```\n\n----------------------------------------\n\nTITLE: Installing use-debounce with npm or yarn\nDESCRIPTION: Command line instructions for installing the use-debounce package using npm or yarn package managers.\nSOURCE: https://github.com/xnimorz/use-debounce/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add use-debounce\n# or\nnpm i use-debounce --save\n```"
  }
]