[
  {
    "owner": "jmfernandes",
    "repo": "robin_stocks",
    "content": "TITLE: Executing Various Order Types with Robin Stocks\nDESCRIPTION: Demonstrates different types of market, limit, and stop orders for stocks, cryptocurrencies, and options using the Robin Stocks library. Shows the versatility of the order execution capabilities.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/docs/source/quickstart.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#Buy 10 shares of Apple at market price\nrobin_stocks.order_buy_market('AAPL',10)\n#Sell half a Bitcoin is price reaches 10,000\nrobin_stocks.order_sell_crypto_limit('BTC',0.5,10000)\n#Buy $500 worth of Bitcoin\nrobin_stocks.order_buy_crypto_by_price('BTC',500)\n#Buy 5 $150 May 1st, 2020 SPY puts if the price per contract is $1.00. Good until cancelled.\nrobin_stocks.order_buy_option_limit('open','debit',1.00,'SPY',5,'2020-05-01',150,'put','gtc')\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Robinhood API using robin_stocks in Python\nDESCRIPTION: This snippet demonstrates how to import the robin_stocks library and log in to Robinhood. It includes both basic authentication and MFA authentication using TOTP.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/Robinhood.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport robin_stocks.robinhood as r\nlogin = r.login('joshsmith@email.com','password')\n```\n\nLANGUAGE: python\nCODE:\n```\nimport pyotp\nimport robin_stocks.robinhood as r\ntotp  = pyotp.TOTP(\"My2factorAppHere\").now()\nlogin = r.login('joshsmith@email.com','password', mfa_code=totp)\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Sell Orders Based on Current Positions\nDESCRIPTION: Demonstrates how to retrieve current positions, filter for a specific stock (Tesla), and create a limit sell order for half of the current position if the price falls to a specific threshold.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/docs/source/quickstart.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npositions_data = robin_stocks.get_current_positions()\n## Note: This for loop adds the stock ticker to every order, since Robinhood\n## does not provide that information in the stock orders.\n## This process is very slow since it is making a GET request for each order.\nfor item in positions_data:\n    item['symbol'] = robin_stocks.get_symbol_by_url(item['instrument'])\nTSLAData = [item for item in positions_data if item['symbol'] == 'TSLA']\nsellQuantity = float(TSLAData['quantity'])//2.0\nrobin_stocks.order_sell_limit('TSLA',sellQuantity,200.00)\n```\n\n----------------------------------------\n\nTITLE: Placing Various Order Types with robin_stocks in Python\nDESCRIPTION: This snippet shows how to place different types of orders using robin_stocks, including market orders, limit orders, and stop orders for stocks, options, and cryptocurrencies.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/Robinhood.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#Buy 10 shares of Apple at market price\nr.order_buy_market('AAPL',10)\n#Sell half a Bitcoin is price reaches 10,000\nr.order_sell_crypto_limit('BTC',0.5,10000)\n#Buy $500 worth of Bitcoin\nr.order_buy_crypto_by_price('BTC',500)\n#Buy 5 $150 May 1st, 2020 SPY puts if the price per contract is $1.00. Good until cancelled.\nr.order_buy_option_limit('open','debit',1.00,'SPY',5,'2020-05-01',150,'put','gtc')\n```\n\n----------------------------------------\n\nTITLE: Finding and Filtering Options Data with Robin Stocks\nDESCRIPTION: Shows how to retrieve options data for multiple stocks for a specific expiration date and option type. The example also demonstrates filtering and displaying specific option details including price, expiration, and Greeks.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/docs/source/quickstart.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\noptionData = robin_stocks.find_options_for_list_of_stocks_by_expiration_date(['fb','aapl','tsla','nflx'],\n             expirationDate='2018-11-16',optionType='call')\nfor item in optionData:\n    print(' price -',item['strike_price'],' exp - ',item['expiration_date'],' symbol - ',\n          item['chain_symbol'],' delta - ',item['delta'],' theta - ',item['theta'])\n```\n\n----------------------------------------\n\nTITLE: Managing Open Cryptocurrency Orders with Robin Stocks\nDESCRIPTION: Demonstrates how to retrieve all open cryptocurrency orders, filter them for specific conditions (Bitcoin sell orders), and cancel those orders. Includes adding symbol data to the orders for easier filtering.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/docs/source/quickstart.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npositions_data = robin_stocks.get_all_open_crypto_orders()\n## Note: Again we are adding symbol to our list of orders because Robinhood\n## does not include this with the order information.\nfor item in positions_data:\n   item['symbol'] = robin_stocks.get_crypto_quote_from_id(item['currency_pair_id'], 'symbol')\nbtcOrders = [item for item in positions_data if item['symbol'] == 'BTCUSD' and item['side'] == 'sell']\nfor item in btcOrders:\n   robin_stocks.cancel_crypto_order(item['id'])\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Displaying Stock Holdings with Robin Stocks\nDESCRIPTION: Shows how to retrieve all stock holdings in your Robinhood portfolio and iterate through them to display the details of each position.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/docs/source/quickstart.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmy_stocks = robin_stocks.build_holdings()\nfor key,value in my_stocks.items():\n    print(key,value)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Trading APIs\nDESCRIPTION: Example showing how to import and make basic API calls to Robinhood, Gemini, and TD Ameritrade modules for accessing market data.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport robin_stocks.robinhood as rh\nimport robin_stocks.gemini as gem\nimport robin_stocks.tda as tda\n# Here are some example calls\ngem.get_pubticker(\"btcusd\") # gets ticker information for Bitcoin from Gemini\nrh.get_all_open_crypto_orders() # gets all cypto orders from Robinhood\ntda.get_price_history(\"tsla\") # get price history from TD Ameritrade\n```\n\n----------------------------------------\n\nTITLE: Exporting Order History to CSV Files with Robin Stocks\nDESCRIPTION: Shows how to export completed stock or option orders to CSV files. Demonstrates both auto-generated filenames and custom filenames, as well as different directory path options for saving the exports.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/docs/source/quickstart.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# let's say that I am running code from C:/Users/josh/documents/\nr.export_completed_stock_orders(\".\") # saves at C:/Users/josh/documents/stock_orders_Jun-28-2020.csv\nr.export_completed_option_orders(\"../\", \"toplevel\") # save at C:/Users/josh/toplevel.csv\n```\n\n----------------------------------------\n\nTITLE: Viewing and Managing Orders with robin_stocks in Python\nDESCRIPTION: This snippet demonstrates how to view and manage orders, including retrieving open positions, cancelling orders, and finding options by expiration date.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/Robinhood.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npositions_data = r.get_all_open_crypto_orders()\n## Note: Again we are adding symbol to our list of orders because Robinhood\n## does not include this with the order information.\nfor item in positions_data:\n   item['symbol'] = r.get_crypto_quote_from_id(item['currency_pair_id'], 'symbol')\nbtcOrders = [item for item in positions_data if item['symbol'] == 'BTCUSD' and item['side'] == 'sell']\nfor item in btcOrders:\n   r.cancel_crypto_order(item['id'])\n```\n\nLANGUAGE: python\nCODE:\n```\noptionData = r.find_options_by_expiration(['fb','aapl','tsla','nflx'],\n             expirationDate='2018-11-16',optionType='call')\nfor item in optionData:\n    print(' price -',item['strike_price'],' exp - ',item['expiration_date'],' symbol - ',\n          item['chain_symbol'],' delta - ',item['delta'],' theta - ',item['theta'])\n```\n\n----------------------------------------\n\nTITLE: Exporting Orders to CSV with robin_stocks in Python\nDESCRIPTION: This snippet demonstrates how to export completed stock and option orders to CSV files using the export functions provided by robin_stocks.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/Robinhood.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# let's say that I am running code from C:/Users/josh/documents/\nr.export_completed_stock_orders(\".\") # saves at C:/Users/josh/documents/stock_orders_Jun-28-2020.csv\nr.export_completed_option_orders(\"../\", \"toplevel\") # save at C:/Users/josh/toplevel.csv\n```\n\n----------------------------------------\n\nTITLE: Regular Login to TD Ameritrade API using Robin-Stocks in Python\nDESCRIPTION: This code snippet shows the regular login process for the TD Ameritrade API using Robin-Stocks. It should be used at the start of every script or program after the initial login has been performed. It uses the encryption passcode to decrypt stored credentials and manage token refresh.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/tda.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport robin_stocks.tda as tda\ntda.login(\"my-encryption-passcode\") # make sure you have called login_first_time as some point.\n```\n\n----------------------------------------\n\nTITLE: Generating Encryption Passcode for TD Ameritrade API with Robin-Stocks in Python\nDESCRIPTION: This snippet demonstrates how to generate an encryption passcode using the Robin-Stocks library for TD Ameritrade API authentication. The passcode is used to encrypt sensitive API information stored locally.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/tda.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport robin_stocks.tda as tda\npasscode = tda.generate_encryption_passcode()\nprint(\"my secret passcode is \", passcode)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Gemini API using Robin Stocks\nDESCRIPTION: Example of how to login to the Gemini API using account API key and secret key through the robin_stocks library. This authentication is required for accessing private API endpoints.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/gemini.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport robin_stocks.gemini as g\ng.login(\"account-apigoeshere\", \"secret-api-goes-here\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stocks by Market Tag with robin_stocks in Python\nDESCRIPTION: This snippet shows how to retrieve quote information for stocks in specific categories using the get_all_stocks_from_market_tag function.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/Robinhood.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nr.get_all_stocks_from_market_tag('upcoming-earnings') # get upcoming earnings\nr.get_all_stocks_from_market_tag('technology') # get all tech tags\n```\n\n----------------------------------------\n\nTITLE: Automated MFA Login with Robinhood using TOTP\nDESCRIPTION: Demonstrates how to programmatically login to Robinhood with MFA by generating the TOTP code and passing it directly to the login function, eliminating the need for manual entry.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/docs/source/quickstart.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pyotp\nimport robin_stocks.robinhood as r\ntotp  = pyotp.TOTP(\"My2factorAppHere\").now()\nlogin = r.login('joshsmith@email.com','password', mfa_code=totp)\n```\n\n----------------------------------------\n\nTITLE: Basic Login Authentication with Robinhood\nDESCRIPTION: Demonstrates the basic login process for authenticating with Robinhood. This approach requires manual MFA token entry if MFA is enabled on the account.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/docs/source/quickstart.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport robin_stocks.robinhood as r\nlogin = r.login(<username>,<password>)\n```\n\n----------------------------------------\n\nTITLE: First-time Login to TD Ameritrade API using Robin-Stocks in Python\nDESCRIPTION: This snippet demonstrates the process of logging in to the TD Ameritrade API for the first time using Robin-Stocks. It requires the encryption passcode, consumer key, authorization token, and refresh token. This should only be called once to initialize the authentication.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/tda.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport robin_stocks.tda as tda\ntda.login_first_time(\"my-encryption-passcode\", \"my-application-consumer-key\",\n    \"my-authroization-token\", \"my-refresh-token\") # ONLY CALL ME ONCE. EVER.\n```\n\n----------------------------------------\n\nTITLE: Direct API Requests with robin_stocks in Python\nDESCRIPTION: This snippet shows how to make direct API requests to Robinhood using the request_get method provided by robin_stocks.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/Robinhood.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nurl = 'https://api.robinhood.com/'\npayload = { 'key1' : 'value1', 'key2' : 'value2'}\nr.request_get(url,'regular',payload)\n```\n\n----------------------------------------\n\nTITLE: Generating MFA Token using TOTP in Python\nDESCRIPTION: Shows how to generate a Time-based One-Time Password (TOTP) for MFA authentication with Robinhood. This code generates the initial token that must be entered into the Robinhood app during MFA setup.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/docs/source/quickstart.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pyotp\ntotp  = pyotp.TOTP(\"My2factorAppHere\").now()\nprint(\"Current OTP:\", totp)\n```\n\n----------------------------------------\n\nTITLE: Different Data Type Request Examples\nDESCRIPTION: Examples showing the four different ways to handle API response data using the dataType parameter in request_get.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/docs/source/advanced.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrobin_stocks.robinhood.request_get(url,'regular')    # For when you want\n                                           # the whole dictionary\n                                           # to view 'next' or\n                                           # 'previous' values.\n\nrobin_stocks.robinhood.request_get(url,'results')    # For when results contains a\n                                           # list or single dictionary.\n\nrobin_stocks.robinhood.request_get(url,'pagination') # For when results contains a\n                                           # list, but you also want to\n                                           # append any information in\n                                           # 'next' to the list.\n\nrobin_stocks.robinhood.request_get(url,'indexzero')  # For when results is a list\n                                           # of only one entry.\n```\n\n----------------------------------------\n\nTITLE: Basic GET Request with Robin Stocks\nDESCRIPTION: Example of making a basic GET request to the Robinhood options instruments API endpoint to retrieve call options data.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/docs/source/advanced.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nurl = 'https://api.robinhood.com/options/instruments/'\npayload = { 'type' : 'call'}\nrobin_stocks.request_get(url,'regular',payload)\n```\n\n----------------------------------------\n\nTITLE: Importing Robin Stocks Library in Python\nDESCRIPTION: Shows two different ways to import the Robin Stocks library, either as a module or by importing all functions directly. The documentation recommends the module approach as best practice.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/docs/source/quickstart.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport robin_stocks\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom robin_stocks import *\n```\n\n----------------------------------------\n\nTITLE: Function Call Patterns\nDESCRIPTION: Demonstrates the different ways to call functions from the robin_stocks library, showing both developer and end-user patterns.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/docs/source/intro.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmodule.function\n```\n\nLANGUAGE: python\nCODE:\n```\nrobin_stocks.function\n```\n\nLANGUAGE: python\nCODE:\n```\nrobin_stocks.module.function\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables for TD Ameritrade API Authentication in Python\nDESCRIPTION: This code snippet shows how to load environment variables, specifically the encryption passcode, from a .env file using the dotenv library. This approach is used to securely store and access sensitive information.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/tda.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom dotenv import load_dotenv\nload_dotenv()\nmy_secret_passcode = os.environ[\"tda_encryption_passcode\"]\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Robin Stocks\nDESCRIPTION: This snippet lists the required Python packages and their versions for the Robin Stocks project. It includes requests for HTTP operations, pyotp for one-time password generation, python-dotenv for environment variable management, and cryptography for secure operations.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrequests==2.31.0\npyotp==2.3.0\npython-dotenv==0.15.0\ncryptography==41.0.3\n```\n\n----------------------------------------\n\nTITLE: Python Module Import Examples\nDESCRIPTION: Examples showing the preferred explicit import style versus the discouraged implicit import style for the robin_stocks library.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/docs/source/intro.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport robin_stocks.module as module\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom module import *\n```\n\n----------------------------------------\n\nTITLE: Installing Robin Stocks with pip\nDESCRIPTION: Simple command to install Robin Stocks globally or inside a virtual environment using pip.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/docs/source/install.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install robin_stocks\n```\n\n----------------------------------------\n\nTITLE: Installing the Package\nDESCRIPTION: Commands for installing the robin_stocks package either from PyPI or from local source code.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/README.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npip install robin_stocks\n\n# For local development:\ngit clone https://github.com/jmfernandes/robin_stocks.git\ncd robin_stocks\npip install .\n```\n\n----------------------------------------\n\nTITLE: Installing Robin Stocks from Source\nDESCRIPTION: Command to install Robin Stocks from the local source after downloading or cloning the repository. Should be run in the directory containing setup.py.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/docs/source/install.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install .\n```\n\n----------------------------------------\n\nTITLE: Version Number Format Example - Robin Stocks\nDESCRIPTION: Demonstrates the version numbering format used in the project where XX represents major changes, YY for feature additions, and ZZ for bug fixes. Example shows version change from 1.23.50 to 1.24.0 when adding features.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1.23.50 => 1.24.0\n```\n\n----------------------------------------\n\nTITLE: Running Pytest Commands\nDESCRIPTION: Example commands showing how to run specific tests or test classes using pytest with different options.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/README.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npytest\npytest tests/test_robinhood.py -k test_name_apple # runs only the 1 test\npytest tests/test_gemini.py -k TestTrades # runs every test in TestTrades but nothing else\n```\n\n----------------------------------------\n\nTITLE: Cloning Robin Stocks Repository\nDESCRIPTION: Command to clone the Robin Stocks source code repository from GitHub.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/docs/source/install.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/jmfernandes/robin_stocks.git\n```\n\n----------------------------------------\n\nTITLE: Installing Testing Dependencies\nDESCRIPTION: Commands for installing pytest and pytest-dotenv packages required for running automated tests on the codebase.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npip install pytest\npip install pytest-dotenv\n```\n\n----------------------------------------\n\nTITLE: Alternative Version Number Example - Robin Stocks\nDESCRIPTION: Shows another valid version number format example demonstrating that numbers can go as high as needed.\nSOURCE: https://github.com/jmfernandes/robin_stocks/blob/master/contributing.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1.65289.0\n```"
  }
]