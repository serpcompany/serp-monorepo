[
  {
    "owner": "mui",
    "repo": "base-ui",
    "content": "TITLE: Implementing Select Component Structure in React\nDESCRIPTION: Demonstrates the complete anatomy of the Select component showing how to import and assemble all its constituent parts. The structure includes root container, trigger elements, portal for dropdown, positioning elements, and various interactive sub-components.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/select/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Select } from '@base-ui-components/react/select';\n\n<Select.Root>\n  <Select.Trigger>\n    <Select.Value />\n    <Select.Icon />\n  </Select.Trigger>\n\n  <Select.Portal>\n    <Select.Backdrop />\n    <Select.Positioner>\n      <Select.ScrollUpArrow />\n      <Select.Popup>\n        <Select.Arrow />\n        <Select.Item>\n          <Select.ItemText />\n          <Select.ItemIndicator />\n        </Select.Item>\n        <Select.Separator />\n        <Select.Group>\n          <Select.GroupLabel />\n        </Select.Group>\n      </Select.Popup>\n      <Select.ScrollDownArrow />\n    </Select.Positioner>\n  </Select.Portal>\n</Select.Root>;\n```\n\n----------------------------------------\n\nTITLE: Importing and Structuring Form and Field Components in JSX\nDESCRIPTION: This snippet demonstrates how to import the Form and Field components from Base UI and structure them together in JSX. It shows the basic anatomy of a form using these components.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/form/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Field } from '@base-ui-components/react/field';\nimport { Form } from '@base-ui-components/react/form';\n\n<Form>\n  <Field.Root>\n    <Field.Label />\n    <Field.Control />\n    <Field.Error />\n  </Field.Root>\n</Form>;\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling Field Component in React\nDESCRIPTION: This snippet demonstrates how to import the Field component from Base UI and assemble its parts. It shows the anatomy of the Field component, including Root, Label, Control, Description, Error, and Validity sub-components.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/field/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Field } from '@base-ui-components/react/field';\n\n<Field.Root>\n  <Field.Label />\n  <Field.Control />\n  <Field.Description />\n  <Field.Error />\n  <Field.Validity />\n</Field.Root>;\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling Toast Component in React\nDESCRIPTION: This snippet demonstrates how to import the Toast component and assemble its parts, including Provider, Viewport, Root, Title, Description, Action, and Close.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/toast/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toast } from '@base-ui-components/react/toast';\n\n<Toast.Provider>\n  <Toast.Viewport>\n    <Toast.Root>\n      <Toast.Title />\n      <Toast.Description />\n      <Toast.Action />\n      <Toast.Close />\n    </Toast.Root>\n  </Toast.Viewport>\n</Toast.Provider>;\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling Menu Component in React\nDESCRIPTION: This snippet demonstrates how to import the Menu component and assemble its various parts to create a complete menu structure.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/menu/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Menu } from '@base-ui-components/react/menu';\n\n<Menu.Root>\n  <Menu.Trigger />\n  <Menu.Portal>\n    <Menu.Backdrop />\n    <Menu.Positioner>\n      <Menu.Popup>\n        <Menu.Arrow />\n        <Menu.Item />\n        <Menu.Separator />\n        <Menu.Group>\n          <Menu.GroupLabel />\n        </Menu.Group>\n        <Menu.RadioGroup>\n          <Menu.RadioItem />\n        </Menu.RadioGroup>\n        <Menu.CheckboxItem />\n      </Menu.Popup>\n    </Menu.Positioner>\n  </Menu.Portal>\n</Menu.Root>;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Input Component in React\nDESCRIPTION: Demonstrates how to import the Input component from the Base UI library and use it as a single part in a React application. This component is an unstyled input element that works with the Field component.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/input/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Input } from '@base-ui-components/react/input';\n\n<Input />;\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling PreviewCard Component in React\nDESCRIPTION: This code demonstrates how to import the PreviewCard component from Base UI and assemble its constituent parts. The component structure includes Root, Trigger, Portal, Backdrop, Positioner, Popup, and Arrow elements that work together to create a preview card that appears when a link is hovered.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/preview-card/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PreviewCard } from '@base-ui-components/react/previewCard';\n\n<PreviewCard.Root>\n  <PreviewCard.Trigger />\n  <PreviewCard.Portal>\n    <PreviewCard.Backdrop />\n    <PreviewCard.Positioner>\n      <PreviewCard.Popup>\n        <PreviewCard.Arrow />\n      </PreviewCard.Popup>\n    </PreviewCard.Positioner>\n  </PreviewCard.Portal>\n</PreviewCard.Root>;\n```\n\n----------------------------------------\n\nTITLE: Assembling NumberField Component in React MUI Base UI\nDESCRIPTION: Demonstrates how to import and assemble the NumberField component with its constituent parts including the root, scrub area, group, and control elements. The component provides numeric input functionality with increment/decrement buttons and a scrub area for value manipulation.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/number-field/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { NumberField } from '@base-ui-components/react/number-field';\n\n<NumberField.Root>\n  <NumberField.ScrubArea>\n    <NumberField.ScrubAreaCursor />\n  </NumberField.ScrubArea>\n  <NumberField.Group>\n    <NumberField.Decrement />\n    <NumberField.Input />\n    <NumberField.Increment />\n  </NumberField.Group>\n</NumberField.Root>;\n```\n\n----------------------------------------\n\nTITLE: Importing and Structuring Alert Dialog Component in JSX\nDESCRIPTION: Shows the anatomy of the Alert Dialog component, demonstrating how to import it and structure its various parts including Root, Trigger, Portal, Backdrop, Popup, Title, Description, and Close.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/alert-dialog/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AlertDialog } from '@base-ui-components/react/alert-dialog';\n\n<AlertDialog.Root>\n  <AlertDialog.Trigger />\n  <AlertDialog.Portal>\n    <AlertDialog.Backdrop />\n    <AlertDialog.Popup>\n      <AlertDialog.Title />\n      <AlertDialog.Description />\n      <AlertDialog.Close />\n    </AlertDialog.Popup>\n  </AlertDialog.Portal>\n</AlertDialog.Root>;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled Dialog\nDESCRIPTION: Shows how to create a controlled Dialog component with explicit state management using React's useState hook, allowing the dialog to be opened imperatively.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/dialog/page.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst [open, setOpen] = React.useState(false);\nreturn (\n  <Dialog.Root open={open} onOpenChange={setOpen}>\n    <Dialog.Trigger>Open</Dialog.Trigger>\n    <Dialog.Portal>\n      <Dialog.Popup>\n        <form\n          // Close the dialog once the form data is submitted\n          onSubmit={async () => {\n            await submitData();\n            setOpen(false);\n          }}\n        >\n          ...\n        </form>\n      </Dialog.Popup>\n    </Dialog.Portal>\n  </Dialog.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Accordion Component in React (MUI Base UI)\nDESCRIPTION: This snippet demonstrates how to import the Accordion component from @base-ui-components/react and how to structure it with its constituent parts: Root, Item, Header, Trigger, and Panel.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/accordion/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Accordion } from '@base-ui-components/react/accordion';\n\n<Accordion.Root>\n  <Accordion.Item>\n    <Accordion.Header>\n      <Accordion.Trigger />\n    </Accordion.Header>\n    <Accordion.Panel />\n  </Accordion.Item>\n</Accordion.Root>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Submenu in React\nDESCRIPTION: This example demonstrates how to create a submenu by nesting another menu inside the parent menu, using the Menu.SubmenuTrigger part.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/menu/page.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu.Root>\n  <Menu.Trigger />\n  <Menu.Portal>\n    <Menu.Backdrop />\n    <Menu.Positioner>\n      <Menu.Popup>\n        <Menu.Arrow />\n        <Menu.Item />\n\n        {/* Submenu */}\n        <Menu.Root>\n          <Menu.SubmenuTrigger />\n          <Menu.Portal>\n            <Menu.Positioner>\n              <Menu.Popup>\n                {/* prettier-ignore */}\n                {/* Submenu items  */}\n              </Menu.Popup>\n            </Menu.Positioner>\n          </Menu.Portal>\n        </Menu.Root>\n      </Menu.Popup>\n    </Menu.Positioner>\n  </Menu.Portal>\n</Menu.Root>\n```\n\n----------------------------------------\n\nTITLE: Dialog Anatomy in JSX\nDESCRIPTION: Shows the basic structure and anatomy of the Dialog component, demonstrating how to import and assemble its various parts.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/dialog/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Dialog } from '@base-ui-components/react/dialog';\n\n<Dialog.Root>\n  <Dialog.Trigger />\n  <Dialog.Portal>\n    <Dialog.Backdrop />\n    <Dialog.Popup>\n      <Dialog.Title />\n      <Dialog.Description />\n      <Dialog.Close />\n    </Dialog.Popup>\n  </Dialog.Portal>\n</Dialog.Root>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Global Toast Manager in React\nDESCRIPTION: This snippet demonstrates how to create and use a global toast manager instance that can be used outside the React tree.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/toast/page.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst toastManager = Toast.createToastManager();\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Toast.Provider toastManager={toastManager}>\n```\n\n----------------------------------------\n\nTITLE: Implementing Base UI Tabs Component Structure in React\nDESCRIPTION: Shows how to import and structure the Tabs component from the Base UI library. The component consists of Root, List, Tab, Indicator, and Panel parts that must be assembled in a specific hierarchy to create a functional tabs interface.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/tabs/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tabs } from '@base-ui-components/react/tabs';\n\n<Tabs.Root>\n  <Tabs.List>\n    <Tabs.Tab />\n    <Tabs.Indicator />\n  </Tabs.List>\n  <Tabs.Panel />\n</Tabs.Root>;\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling Slider Component in React\nDESCRIPTION: This snippet demonstrates how to import the Slider component from the Base UI library and correctly assemble its parts to create a complete slider component. It shows the component's anatomy with all the necessary subcomponents.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/slider/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Slider } from '@base-ui-components/react/slider';\n\n<Slider.Root>\n  <Slider.Value />\n  <Slider.Control>\n    <Slider.Track>\n      <Slider.Indicator />\n      <Slider.Thumb />\n    </Slider.Track>\n  </Slider.Control>\n</Slider.Root>;\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling Switch Component in React\nDESCRIPTION: Demonstrates how to import the Switch component from @base-ui-components and assemble its constituent parts (Root and Thumb) in a React application.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/switch/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Switch } from '@base-ui-components/react/switch';\n\n<Switch.Root>\n  <Switch.Thumb />\n</Switch.Root>;\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling the Popover Component in React\nDESCRIPTION: This code snippet demonstrates how to import the Popover component from @base-ui-components/react and assemble its various parts in the correct hierarchy. The structure includes Root, Trigger, Portal, Backdrop, Positioner, Popup, Arrow, Title, Description, and Close components.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/popover/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Popover } from '@base-ui-components/react/popover';\n\n<Popover.Root>\n  <Popover.Trigger />\n  <Popover.Portal>\n    <Popover.Backdrop />\n    <Popover.Positioner>\n      <Popover.Popup>\n        <Popover.Arrow />\n        <Popover.Title />\n        <Popover.Description />\n        <Popover.Close />\n      </Popover.Popup>\n    </Popover.Positioner>\n  </Popover.Portal>\n</Popover.Root>;\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling Checkbox Component in React\nDESCRIPTION: Shows how to import the Checkbox component from MUI Base UI and assemble its constituent parts - Root and Indicator. The component follows a compound component pattern for better customization.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/checkbox/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Checkbox } from '@base-ui-components/react/checkbox';\n\n<Checkbox.Root>\n  <Checkbox.Indicator />\n</Checkbox.Root>;\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling Tooltip Component with Base UI\nDESCRIPTION: This snippet demonstrates how to import the Tooltip component from @base-ui-components/react/tooltip and assemble its constituent parts. It shows the proper nesting structure including Provider, Root, Trigger, Portal, Positioner, Popup, and Arrow components.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/tooltip/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tooltip } from '@base-ui-components/react/tooltip';\n\n<Tooltip.Provider>\n  <Tooltip.Root>\n    <Tooltip.Trigger />\n    <Tooltip.Portal>\n      <Tooltip.Positioner>\n        <Tooltip.Popup>\n          <Tooltip.Arrow />\n        </Tooltip.Popup>\n      </Tooltip.Positioner>\n    </Tooltip.Portal>\n  </Tooltip.Root>\n</Tooltip.Provider>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Component Structure in React\nDESCRIPTION: Demonstrates the basic anatomy of implementing a Radio component within a RadioGroup using Base UI components. Shows the import statements and component structure required for a functional radio button implementation.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/radio/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Radio } from '@base-ui-components/react/radio';\nimport { RadioGroup } from '@base-ui-components/react/radio-group';\n\n<RadioGroup>\n  <Radio.Root>\n    <Radio.Indicator />\n  </Radio.Root>\n</RadioGroup>;\n```\n\n----------------------------------------\n\nTITLE: Styling a Menu Component with Tailwind CSS\nDESCRIPTION: A complete example of styling a Menu component using Tailwind CSS classes. Shows how to apply classes to each part of the component structure for a fully styled dropdown menu.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/handbook/styling/page.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Menu } from '@base-ui-components/react/menu';\n\nexport default function ExampleMenu() {\n  return (\n    <Menu.Root>\n      <Menu.Trigger className=\"flex h-10 items-center justify-center gap-1.5 rounded-md border border-gray-200 bg-gray-50 px-3.5 text-base font-medium text-gray-900 select-none hover:bg-gray-100 focus-visible:outline focus-visible:outline-2 focus-visible:-outline-offset-1 focus-visible:outline-blue-800 active:bg-gray-100 data-[popup-open]:bg-gray-100\">\n        Song\n      </Menu.Trigger>\n      <Menu.Portal>\n        <Menu.Positioner className=\"outline-none\" sideOffset={8}>\n          <Menu.Popup className=\"origin-[var(--transform-origin)] rounded-md bg-[canvas] py-1 text-gray-900 shadow-lg shadow-gray-200 outline outline-1 outline-gray-200 transition-[transform,scale,opacity] data-[ending-style]:scale-90 data-[ending-style]:opacity-0 data-[starting-style]:scale-90 data-[starting-style]:opacity-0 dark:shadow-none dark:-outline-offset-1 dark:outline-gray-300\">\n            <Menu.Item className=\"flex cursor-default py-2 pr-8 pl-4 text-sm leading-4 outline-none select-none data-[highlighted]:relative data-[highlighted]:z-0 data-[highlighted]:text-gray-50 data-[highlighted]:before:absolute data-[highlighted]:before:inset-x-1 data-[highlighted]:before:inset-y-0 data-[highlighted]:before:z-[-1] data-[highlighted]:before:rounded-sm data-[highlighted]:before:bg-gray-900\">\n              Add to Library\n            </Menu.Item>\n            <Menu.Item className=\"flex cursor-default py-2 pr-8 pl-4 text-sm leading-4 outline-none select-none data-[highlighted]:relative data-[highlighted]:z-0 data-[highlighted]:text-gray-50 data-[highlighted]:before:absolute data-[highlighted]:before:inset-x-1 data-[highlighted]:before:inset-y-0 data-[highlighted]:before:z-[-1] data-[highlighted]:before:rounded-sm data-[highlighted]:before:bg-gray-900\">\n              Add to Playlist\n            </Menu.Item>\n          </Menu.Popup>\n        </Menu.Positioner>\n      </Menu.Portal>\n    </Menu.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling Meter Component in React\nDESCRIPTION: Demonstrates how to import the Meter component from the base-ui-components library and assemble its constituent parts including Root, Label, Track, Indicator, and Value elements.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/meter/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meter } from '@base-ui-components/react/meter';\n\n<Meter.Root>\n  <Meter.Label />\n  <Meter.Track>\n    <Meter.Indicator />\n  </Meter.Track>\n  <Meter.Value />\n</Meter.Root>;\n```\n\n----------------------------------------\n\nTITLE: Handling Dialog State Changes\nDESCRIPTION: Demonstrates how to execute code when the dialog state changes, which is recommended over using React.useEffect for responding to state changes.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/dialog/page.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Dialog.Root\n  open={open}\n  onOpenChange={(open) => {\n    // Do stuff when the dialog is closed\n    if (!open) {\n      doStuff();\n    }\n    // Set the new state\n    setOpen(open);\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Checkbox Group Components in React\nDESCRIPTION: Demonstrates the basic anatomy of using Checkbox Group with Checkbox components. Shows how to import both components and structure them together in JSX.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/checkbox-group/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Checkbox } from '@base-ui-components/react/checkbox';\nimport { CheckboxGroup } from '@base-ui-components/react/checkbox-group';\n\n<CheckboxGroup>\n  <Checkbox.Root />\n</CheckboxGroup>;\n```\n\n----------------------------------------\n\nTITLE: Importing and Implementing the Avatar Component in React\nDESCRIPTION: This code snippet demonstrates how to import the Avatar component from Base UI and how to structure it with its constituent parts: Root, Image, and Fallback. The Fallback displays when the image fails to load.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/avatar/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Avatar } from '@base-ui-components/react/avatar';\n\n<Avatar.Root>\n  <Avatar.Image src=\"\" />\n  <Avatar.Fallback>LT</Avatar.Fallback>\n</Avatar.Root>;\n```\n\n----------------------------------------\n\nTITLE: Using useToastManager Hook in React\nDESCRIPTION: This snippet shows how to use the useToastManager hook to manage toasts within a Toast.Provider component.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/toast/page.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst toastManager = Toast.useToastManager();\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Toggle Group Component in React\nDESCRIPTION: Demonstrates how to import and implement the basic ToggleGroup component from the MUI Base UI library. The component provides shared state management for toggle buttons.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/toggle-group/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ToggleGroup } from '@base-ui-components/react/toggle-group';\n\n<ToggleGroup />;\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling Fieldset Component in React\nDESCRIPTION: This snippet demonstrates how to import the Fieldset component from the @base-ui-components/react/fieldset package and assemble its parts. It shows the basic structure of the Fieldset component with its Root and Legend subcomponents.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/fieldset/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Fieldset } from '@base-ui-components/react/fieldset';\n\n<Fieldset.Root>\n  <Fieldset.Legend />\n</Fieldset.Root>;\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous Toast with Promise in React\nDESCRIPTION: This example shows how to create an asynchronous toast with three possible states (loading, success, error) using the toastManager's promise method.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/toast/page.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst toastId = toastManager.promise(\n  new Promise((resolve) => {\n    setTimeout(() => resolve('world!'), 1000);\n  }),\n  {\n    loading: 'Loading...',\n    success: (data) => `Hello ${data}`,\n    error: (err) => `Error: ${err}`,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Base UI Toggle Component in React\nDESCRIPTION: Demonstrates how to import and implement the basic Toggle component from the Base UI library. The Toggle is rendered as a standalone component that can be used to create a two-state button.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/toggle/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toggle } from '@base-ui-components/react/toggle';\n\n<Toggle />;\n```\n\n----------------------------------------\n\nTITLE: Opening a Dialog from a Menu\nDESCRIPTION: Shows how to open a dialog from a menu by controlling the dialog state and using an onClick handler on the menu item, with proper focus management using the finalFocus prop.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/dialog/page.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Dialog } from '@base-ui/components/dialog';\nimport { Menu } from '@base-ui/components/menu';\n\nfunction ExampleMenu() {\n  const menuTriggerRef = React.useRef<HTMLButtonElement>(null);\n  const [dialogOpen, setDialogOpen] = React.useState(false);\n\n  return (\n    <React.Fragment>\n      <Menu.Root>\n        {/* Set the trigger ref */}\n        <Menu.Trigger ref={menuTriggerRef}>Open menu</Menu.Trigger>\n        <Menu.Portal>\n          <Menu.Positioner>\n            <Menu.Popup>\n              {/* Open the dialog when the menu item is clicked */}\n              <Menu.Item onClick={() => setDialogOpen(true)}>Open dialog</Menu.Item>\n            </Menu.Popup>\n          </Menu.Positioner>\n        </Menu.Portal>\n      </Menu.Root>\n\n      {/* Control the dialog state */}\n      <Dialog.Root open={dialogOpen} onOpenChange={setDialogOpen}>\n        <Dialog.Portal>\n          <Dialog.Backdrop />\n          {/* Return focus to the menu trigger when the dialog is closed */}\n          <Dialog.Popup finalFocus={menuTriggerRef}>\n            {/* prettier-ignore */}\n            {/* Rest of the dialog */}\n          </Dialog.Popup>\n        </Dialog.Portal>\n      </Dialog.Root>\n    </React.Fragment>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Component Unmounting with Animation Completion\nDESCRIPTION: This React example demonstrates how to manually unmount a component after its exit animation has completed. It uses the actionsRef to access the unmount method and calls it in the onAnimationComplete callback when the component is closed.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/handbook/animation/page.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [open, setOpen] = React.useState(false);\n  const actionsRef = React.useRef({ unmount: () => {} });\n\n  return (\n    <Popover.Root open={open} onOpenChange={setOpen} actionsRef={actionsRef}>\n      <Popover.Trigger>Trigger</Popover.Trigger>\n      <AnimatePresence>\n        {open && (\n          <Popover.Portal keepMounted>\n            <Popover.Positioner>\n              <Popover.Popup\n                render={\n                  <motion.div\n                    initial={{ scale: 0 }}\n                    animate={{ scale: 1 }}\n                    exit={{ scale: 0 }}\n                    onAnimationComplete={() => {\n                      if (!open) {\n                        actionsRef.current.unmount();\n                      }\n                    }}\n                  />\n                }\n              >\n                Popup\n              </Popover.Popup>\n            </Popover.Positioner>\n          </Popover.Portal>\n        )}\n      </AnimatePresence>\n    </Popover.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Separator Component - React/JSX\nDESCRIPTION: Demonstrates how to import and implement the basic Separator component from the MUI Base UI library. The component provides a screen-reader accessible way to separate content sections.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/separator/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Separator } from '@base-ui-components/react/separator';\n\n<Separator />;\n```\n\n----------------------------------------\n\nTITLE: Initializing Toolbar Component Anatomy in JSX\nDESCRIPTION: Demonstrates the basic structure and composition of the Toolbar component using its various parts like Root, Button, Link, Separator, Group, and Input.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/toolbar/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toolbar } from '@base-ui-components/react/toolbar';\n\n<Toolbar.Root>\n  <Toolbar.Button />\n  <Toolbar.Link />\n  <Toolbar.Separator />\n  <Toolbar.Group>\n    <Toolbar.Button />\n    <Toolbar.Button />\n  <Toolbar.Group />\n  <Toolbar.Input />\n</Toolbar.Root>;\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling the ScrollArea Component in React\nDESCRIPTION: This snippet demonstrates how to import the ScrollArea component from the @base-ui-components/react/scroll-area package and how to properly assemble its parts in a React component structure. The ScrollArea consists of Root, Viewport, Scrollbar, Thumb, and Corner subcomponents.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/scroll-area/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ScrollArea } from '@base-ui-components/react/scroll-area';\n\n<ScrollArea.Root>\n  <ScrollArea.Viewport />\n  <ScrollArea.Scrollbar>\n    <ScrollArea.Thumb />\n  </ScrollArea.Scrollbar>\n  <ScrollArea.Corner />\n</ScrollArea.Root>;\n```\n\n----------------------------------------\n\nTITLE: Controlling Menu Closing Behavior in React\nDESCRIPTION: This snippet shows how to control whether the menu closes when an item is clicked using the closeOnClick prop.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/menu/page.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Close the menu when a checkbox item is clicked\n<Menu.CheckboxItem closeOnClick />\n\n// Keep the menu open when an item is clicked\n<Menu.Item closeOnClick={false} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Structuring the Progress Component in React\nDESCRIPTION: Demonstrates how to import the Progress component from @base-ui-components/react and assemble its constituent parts. The component follows a compound component pattern with Root, Label, Track, Indicator, and Value subcomponents.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/progress/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Progress } from '@base-ui-components/react/progress';\n\n<Progress.Root>\n  <Progress.Label />\n  <Progress.Track>\n    <Progress.Indicator />\n  </Progress.Track>\n  <Progress.Value />\n</Progress.Root>;\n```\n\n----------------------------------------\n\nTITLE: Integrating Menu with Toolbar in TSX\nDESCRIPTION: Shows how to integrate a Menu component with the Toolbar by passing the Menu.Trigger to Toolbar.Button using the render prop. This approach is applicable to other popup components like AlertDialog, Dialog, Popover, and Select.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/toolbar/page.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nreturn (\n  <Toolbar.Root>\n    <Menu.Root>\n      <Toolbar.Button render={<Menu.Trigger />} />\n      <Menu.Portal>\n        {/* prettier-ignore */}\n        {/* Compose the rest of the menu */}\n      </Menu.Portal>\n    </Menu.Root>\n  </Toolbar.Root>;\n)\n```\n\n----------------------------------------\n\nTITLE: Nesting Multiple Components with Render Props in TSX\nDESCRIPTION: Demonstrates how to nest multiple Base UI components with custom React components using nested render props, showing a complex example with Dialog, Tooltip, and Menu components.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/handbook/composition/page.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Dialog.Root>\n  <Tooltip.Root>\n    <Tooltip.Trigger\n      render={\n        <Dialog.Trigger\n          // prettier-ignore\n          render={\n            <Menu.Trigger render={<MyButton size=\"md\" />}>\n              Open menu\n            </Menu.Trigger>\n          }\n        />\n      }\n    />\n    <Tooltip.Portal>...</Tooltip.Portal>\n  </Tooltip.Root>\n  <Dialog.Portal>...</Dialog.Portal>\n</Dialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Connecting Alert Dialog to a Menu in React\nDESCRIPTION: Demonstrates how to open an alert dialog from a menu item click, with controlled dialog state and proper focus management. The example uses useRef to maintain focus and useState to control the dialog's open state.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/alert-dialog/page.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { AlertDialog } from '@base-ui/components/alert-dialog';\nimport { Menu } from '@base-ui/components/menu';\n\nfunction ExampleMenu() {\n  const menuTriggerRef = React.useRef<HTMLButtonElement>(null);\n  const [dialogOpen, setDialogOpen] = React.useState(false);\n\n  return (\n    <React.Fragment>\n      <Menu.Root>\n        {/* Set the trigger ref */}\n        <Menu.Trigger ref={menuTriggerRef}>Open menu</Menu.Trigger>\n        <Menu.Portal>\n          <Menu.Positioner>\n            <Menu.Popup>\n              {/* Open the dialog when the menu item is clicked */}\n              <Menu.Item onClick={() => setDialogOpen(true)}>Open dialog</Menu.Item>\n            </Menu.Popup>\n          </Menu.Positioner>\n        </Menu.Portal>\n      </Menu.Root>\n\n      {/* Control the dialog state */}\n      <AlertDialog.Root open={dialogOpen} onOpenChange={setDialogOpen}>\n        <AlertDialog.Portal>\n          <AlertDialog.Backdrop />\n          {/* Return focus to the menu trigger when the dialog is closed */}\n          <AlertDialog.Popup finalFocus={menuTriggerRef}>\n            {/* prettier-ignore */}\n            {/* Rest of the dialog */}\n          </AlertDialog.Popup>\n        </AlertDialog.Portal>\n      </AlertDialog.Root>\n    </React.Fragment>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Base UI Render Prop Implementation\nDESCRIPTION: Example of how to implement a component with the render prop pattern used in Base UI, equivalent to Radix UI's asChild pattern but with a different approach.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/utils/use-render/page.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRender } from '@base-ui-components/react/use-render';\n\nfunction Button({ render = <button />, ...props }) {\n  const { renderElement } = useRender({ render, props });\n  return renderElement();\n}\n\n// Usage\n<Button render={<a href=\"/contact\">Contact</a>} />;\n```\n\n----------------------------------------\n\nTITLE: Closing a Toast Notification in React\nDESCRIPTION: This snippet demonstrates how to close a toast notification using the toastManager's close method.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/toast/page.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\ntoastManager.close(toastId);\n```\n\n----------------------------------------\n\nTITLE: Merging Refs in React 18 and 17 with useRender\nDESCRIPTION: Example showing how to merge internal and external refs using useRender in React 18 and 17, requiring the use of React.forwardRef() to properly forward refs.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/utils/use-render/page.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst Text = React.forwardRef(function Text(\n  { render = <p />, ...props }: TextProps,\n  forwardedRef: React.ForwardedRef<HTMLElement>,\n) {\n  const internalRef = React.useRef<HTMLElement | null>(null);\n\n  const { renderElement } = useRender({\n    render,\n    props,\n    refs: [forwardedRef, internalRef],\n  });\n\n  return renderElement();\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Tooltip with Toolbar in TSX\nDESCRIPTION: Demonstrates how to use a Tooltip component with the Toolbar. Unlike other popups, the Toolbar.Button is passed to the render prop of Tooltip.Trigger.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/toolbar/page.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nreturn (\n  <Toolbar.Root>\n    <Tooltip.Root>\n      <Tooltip.Trigger render={<Toolbar.Button />} />\n      <Tooltip.Portal>\n        {/* prettier-ignore */}\n        {/* Compose the rest of the tooltip */}\n      </Tooltip.Portal>\n    </Tooltip.Root>\n  </Toolbar.Root>;\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using DirectionProvider in Base UI React\nDESCRIPTION: This snippet demonstrates how to import the DirectionProvider component from Base UI and wrap it around your application or a group of components to enable RTL behavior.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/utils/direction-provider/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DirectionProvider } from '@base-ui-components/react/direction-provider';\n\n// prettier-ignore\n<DirectionProvider>\n  {/* Your app or a group of components */}\n</DirectionProvider>\n```\n\n----------------------------------------\n\nTITLE: Changing Default Rendered Element with Render Prop in TSX\nDESCRIPTION: Illustrates how to override the default rendered element of a component. This example shows how to change Menu.Item from a div to an a element to make it function as a link.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/handbook/composition/page.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Menu } from '@base-ui-components/react/menu';\n\nexport default () => (\n  <Menu.Root>\n    <Menu.Trigger>Song</Menu.Trigger>\n    <Menu.Portal>\n      <Menu.Positioner>\n        <Menu.Popup>\n          {/* prettier-ignore */}\n          <Menu.Item render={<a href=\"base-ui.com\" />}>\n            Add to Library\n          </Menu.Item>\n        </Menu.Popup>\n      </Menu.Positioner>\n    </Menu.Portal>\n  </Menu.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Updating a Toast Notification in React\nDESCRIPTION: This snippet shows how to update an existing toast notification using the toastManager's update method.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/toast/page.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\ntoastManager.update(toastId, {\n  description: 'New description',\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Menu with Dialog in React\nDESCRIPTION: This example demonstrates how to open a dialog from a menu item, control the dialog state, and return focus to the menu trigger when the dialog is closed.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/menu/page.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Dialog } from '@base-ui/components/dialog';\nimport { Menu } from '@base-ui/components/menu';\n\nfunction ExampleMenu() {\n  const menuTriggerRef = React.useRef<HTMLButtonElement>(null);\n  const [dialogOpen, setDialogOpen] = React.useState(false);\n\n  return (\n    <React.Fragment>\n      <Menu.Root>\n        {/* Set the trigger ref */}\n        <Menu.Trigger ref={menuTriggerRef}>Open menu</Menu.Trigger>\n        <Menu.Portal>\n          <Menu.Positioner>\n            <Menu.Popup>\n              {/* Open the dialog when the menu item is clicked */}\n              <Menu.Item onClick={() => setDialogOpen(true)}>Open dialog</Menu.Item>\n            </Menu.Popup>\n          </Menu.Positioner>\n        </Menu.Portal>\n      </Menu.Root>\n\n      {/* Control the dialog state */}\n      <Dialog.Root open={dialogOpen} onOpenChange={setDialogOpen}>\n        <Dialog.Portal>\n          <Dialog.Backdrop />\n          {/* Return focus to the menu trigger when the dialog is closed */}\n          <Dialog.Popup finalFocus={menuTriggerRef}>\n            {/* prettier-ignore */}\n            {/* Rest of the dialog */}\n          </Dialog.Popup>\n        </Dialog.Portal>\n      </Dialog.Root>\n    </React.Fragment>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Toast Notification in React\nDESCRIPTION: This example demonstrates how to add a toast notification using the toastManager's add method within a React component.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/toast/page.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const toastManager = Toast.useToastManager();\n  return (\n    <button\n      type=\"button\"\n      onClick={() => {\n        toastManager.add({\n          description: 'Hello, world!',\n        });\n      }}\n    >\n      Add toast\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating NumberField with Toolbar in TSX\nDESCRIPTION: Shows how to use a NumberField component within the Toolbar. The NumberField.Input is passed to Toolbar.Input using the render prop, allowing for a number input within the toolbar structure.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/toolbar/page.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nreturn (\n  <Toolbar.Root>\n    <NumberField.Root>\n      <NumberField.Group>\n        <NumberField.Decrement />\n        <Toolbar.Input render={<NumberField.Input />} />\n        <NumberField.Increment />\n      </NumberField.Group>\n    </NumberField.Root>\n  </Toolbar.Root>;\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu Item with Link in React\nDESCRIPTION: This snippet shows how to use the render prop to compose a menu item with an anchor element, allowing navigation to another page.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/menu/page.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu.Item render={<a href=\"/projects\">Go to Projects</a>} />\n```\n\n----------------------------------------\n\nTITLE: Animating Select Components That Stay in the DOM\nDESCRIPTION: This React example shows how to animate a Select component that remains in the DOM when closed. It uses the Motion library without AnimatePresence, instead animating properties based on the open state directly with the render prop.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/handbook/animation/page.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <Select.Root open={open} onOpenChange={setOpen}>\n      <Select.Trigger>\n        <Select.Value />\n      </Select.Trigger>\n      <Select.Portal>\n        <Select.Positioner>\n          <Select.Popup\n            render={\n              <motion.div\n                initial={false}\n                animate={{\n                  opacity: open ? 1 : 0,\n                  scale: open ? 1 : 0.8,\n                }}\n              />\n            }\n          >\n            Popup\n          </Select.Popup>\n        </Select.Positioner>\n      </Select.Portal>\n    </Select.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Uncontrolled Dialog\nDESCRIPTION: Demonstrates how to create an uncontrolled Dialog component that manages its own state internally.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/dialog/page.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Dialog.Root>\n  <Dialog.Trigger>Open</Dialog.Trigger>\n  <Dialog.Portal>\n    <Dialog.Popup>\n      <Dialog.Title>Example dialog</Dialog.Title>\n      <Dialog.Close>Close</Dialog.Close>\n    </Dialog.Popup>\n  </Dialog.Portal>\n</Dialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Using the useRender Hook in React Components\nDESCRIPTION: Basic example of how to use the renderElement function returned by the useRender hook to render a component.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/utils/use-render/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst { renderElement } = useRender({\n  // Input parameters\n});\n\nconst element = renderElement();\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Base UI Collapsible Component in React\nDESCRIPTION: This code demonstrates how to import the Collapsible component from the Base UI library and assemble its parts. The component consists of a Root container, a Trigger button, and a Panel that contains the collapsible content.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/collapsible/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Collapsible } from '@base-ui-components/react/collapsible';\n\n<Collapsible.Root>\n  <Collapsible.Trigger />\n  <Collapsible.Panel />\n</Collapsible.Root>;\n```\n\n----------------------------------------\n\nTITLE: Animating Popover Components with Motion and AnimatePresence\nDESCRIPTION: This React example demonstrates how to animate a Popover component that gets removed from the DOM when closed. It uses Motion library with AnimatePresence to control the animation, and requires the keepMounted prop on the Portal component for proper exit animations.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/handbook/animation/page.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <Popover.Root open={open} onOpenChange={setOpen}>\n      <Popover.Trigger>Trigger</Popover.Trigger>\n      <AnimatePresence>\n        {open && (\n          <Popover.Portal keepMounted>\n            <Popover.Positioner>\n              <Popover.Popup\n                render={\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.8 }}\n                  />\n                }\n              >\n                Popup\n              </Popover.Popup>\n            </Popover.Positioner>\n          </Popover.Portal>\n        )}\n      </AnimatePresence>\n    </Popover.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Components with Data Attributes in CSS\nDESCRIPTION: Shows how to target component states using data attributes for styling. This example styles the Switch component's thumb when it's in the checked state.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/handbook/styling/page.mdx#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.SwitchThumb[data-checked] {\n  background-color: green;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Render Function for Performance Optimization in TSX\nDESCRIPTION: Shows how to use a function with the render prop for performance-sensitive applications. This approach provides complete control over props spreading and allows rendering different content based on component state.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/handbook/composition/page.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch.Thumb\n  render={(props, state) =>\n    // prettier-ignore\n    <span {...props}>\n      {state.checked ? <CheckedIcon /> : <UncheckedIcon />}\n    </span>\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Using CSS Animations with Base UI Components\nDESCRIPTION: This CSS snippet shows how to implement CSS animations for a popup component using the data-open and data-closed attributes. It defines keyframes for scale-in and scale-out animations that control the appearance and disappearance of the component.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/handbook/animation/page.mdx#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0.9);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n@keyframes scaleOut {\n  from {\n    opacity: 1;\n    transform: scale(1);\n  }\n  to {\n    opacity: 0;\n    transform: scale(0.9);\n  }\n}\n\n.Popup[data-open] {\n  animation: scaleIn 250ms ease-out;\n}\n\n.Popup[data-closed] {\n  animation: scaleOut 250ms ease-in;\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Refs in React 19 with useRender\nDESCRIPTION: Example showing how to merge internal and external refs using the useRender hook in React 19, where React.forwardRef() isn't needed for primitive components.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/utils/use-render/page.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Text({ render = <p />, ...props }: TextProps) {\n  const internalRef = React.useRef<HTMLElement | null>(null);\n\n  const { renderElement } = useRender({\n    render,\n    props,\n    refs: [internalRef],\n  });\n\n  return renderElement();\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Toast Dismissal Animation with CSS\nDESCRIPTION: This CSS snippet demonstrates how to style the dismissal animation of toasts based on the swipe direction.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/toast/page.mdx#2025-04-22_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n&[data-ending-style] {\n  opacity: 0;\n\n  &[data-swipe-direction='up'] {\n    transform: translateY(calc(var(--toast-swipe-movement-y) - 150%));\n  }\n  &[data-swipe-direction='down'] {\n    transform: translateY(calc(var(--toast-swipe-movement-y) + 150%));\n  }\n  &[data-swipe-direction='left'] {\n    transform: translateX(calc(var(--toast-swipe-movement-x) - 150%)) translateY(var(--offset-y));\n  }\n  &[data-swipe-direction='right'] {\n    transform: translateX(calc(var(--toast-swipe-movement-x) + 150%)) translateY(var(--offset-y));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CSS Transitions for Base UI Components\nDESCRIPTION: This CSS snippet demonstrates how to create transitions for a popup component using the data-starting-style and data-ending-style attributes. The transition smoothly animates opacity and transform properties, allowing for a clean animation that can be interrupted midway.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/handbook/animation/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.Popup {\n  box-sizing: border-box;\n  padding: 1rem 1.5rem;\n  background-color: canvas;\n  transform-origin: var(--transform-origin);\n  transition:\n    transform 150ms,\n    opacity 150ms;\n\n  &[data-starting-style],\n  &[data-ending-style] {\n    opacity: 0;\n    transform: scale(0.9);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Toast Stacking with CSS\nDESCRIPTION: This CSS snippet shows how to style the stacking order of toasts using the --toast-index CSS variable.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/toast/page.mdx#2025-04-22_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.Toast {\n  z-index: calc(1000 - var(--toast-index));\n  transform: scale(1 - calc(0.1 * var(--toast-index)));\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interfaces for useRender Props\nDESCRIPTION: Example showing how to properly type component props with useRender's utility types: ComponentProps for external props and ElementProps for internal props.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/utils/use-render/page.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ninterface ButtonProps extends useRender.ComponentProps<'button'> {}\n\nfunction Button({ render = <button />, ...props }: ButtonProps) {\n  const defaultProps: useRender.ElementProps<'button'> = {\n    className: styles.Button,\n    type: 'button',\n    children: 'Click me',\n  };\n\n  const { renderElement } = useRender({\n    render,\n    props: mergeProps<'button'>(defaultProps, props),\n  });\n\n  return renderElement();\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Toast Swipe Movement with CSS\nDESCRIPTION: This CSS snippet shows how to style the swipe movement of toasts using CSS variables for x and y movements.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/toast/page.mdx#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.Toast {\n  transform: scale(1 - calc(0.1 * var(--toast-index))) + translateX(var(--toast-swipe-movement-x)) +\n    translateY(calc(var(--toast-swipe-movement-y) + (var(--toast-index) * -20%)));\n}\n```\n\n----------------------------------------\n\nTITLE: Styling a Menu Component with CSS-in-JS (Emotion)\nDESCRIPTION: Shows how to create styled Base UI components using CSS-in-JS with Emotion. This approach wraps each component part with styled() and then assembles them into a complete menu.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/handbook/styling/page.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Menu } from '@base-ui-components/react/menu';\nimport styled from '@emotion/styled';\n\nconst StyledMenuTrigger = styled(Menu.Trigger)`\n  // Button styles\n`;\n\nconst StyledMenuPositioner = styled(Menu.Positioner)`\n  // Positioner styles\n`;\n\nconst StyledMenuPopup = styled(Menu.Popup)`\n  // Popup styles\n`;\n\nconst StyledMenuItem = styled(Menu.Item)`\n  // Menu item styles\n`;\n\nconst MenuExample = () => (\n  <Menu.Root>\n    <StyledMenuTrigger>Song</StyledMenuTrigger>\n    <Menu.Portal>\n      <StyledMenuPositioner>\n        <StyledMenuPopup>\n          <StyledMenuItem>Add to Library</StyledMenuItem>\n          <StyledMenuItem>Add to Playlist</StyledMenuItem>\n        </Menu.Portal>\n      </StyledMenuPositioner>\n    </StyledMenuPopup>\n  </Menu.Root>\n);\n\nexport default MenuExample;\n```\n\n----------------------------------------\n\nTITLE: Basic Composition Using Render Prop in TSX\nDESCRIPTION: Shows how to compose a Menu.Trigger with a custom button component. The custom component must forward the ref and spread received props on its DOM node.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/handbook/composition/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Menu.Trigger render={<MyButton size=\"md\" />}>\n  Open menu\n</Menu.Trigger>\n```\n\n----------------------------------------\n\nTITLE: Styling a Menu Component with CSS Modules\nDESCRIPTION: Demonstrates how to style a Menu component using CSS Modules. Shows the component structure with class names imported from a separate CSS module file.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/handbook/styling/page.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Menu } from '@base-ui-components/react/menu';\nimport styles from './menu.module.css';\n\nexport default function ExampleMenu() {\n  return (\n    <Menu.Root>\n      <Menu.Trigger className={styles.Button}>Song</Menu.Trigger>\n      <Menu.Portal>\n        <Menu.Positioner className={styles.Positioner} sideOffset={8}>\n          <Menu.Popup className={styles.Popup}>\n            <Menu.Item className={styles.Item}>Add to Library</Menu.Item>\n            <Menu.Item className={styles.Item}>Add to Playlist</Menu.Item>\n          </Menu.Popup>\n        </Menu.Positioner>\n      </Menu.Portal>\n    </Menu.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using createRenderer for React Component Testing with Testing Library\nDESCRIPTION: Demonstrates how to set up a test suite using the createRenderer utility function that provides a render function compatible with @testing-library/react. This pattern should be used for all unit tests in the project.\nSOURCE: https://github.com/mui/base-ui/blob/master/test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('test suite', () => {\n  const { render } = createRenderer();\n\n  test('first', async () => {\n    await render(<input />);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using CSS Classes with Switch Component in React\nDESCRIPTION: Demonstrates how to apply CSS classes to Base UI components using the className prop, both as a direct string value and as a function that responds to component state.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/handbook/styling/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch.Thumb className=\"SwitchThumb\" />\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch.Thumb className={(state) => (state.checked ? 'checked' : 'unchecked')} />\n```\n\n----------------------------------------\n\nTITLE: Testing Console Error Messages with toErrorDev in React Components\nDESCRIPTION: Shows how to test React components that produce console error messages using the custom toErrorDev matcher. This example tests multiple expected error messages in a specific order.\nSOURCE: https://github.com/mui/base-ui/blob/master/test/README.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction SomeComponent({ variant }) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (variant === 'unexpected') {\n      console.error(\"That variant doesn't make sense.\");\n    }\n    if (variant !== undefined) {\n      console.error('`variant` is deprecated.');\n    }\n  }\n\n  return <div />;\n}\nexpect(() => {\n  render(<SomeComponent variant=\"unexpected\" />);\n}).toErrorDev([\"That variant doesn't make sense.\", '`variant` is deprecated.']);\n```\n\n----------------------------------------\n\nTITLE: Radix UI Slot Component Implementation\nDESCRIPTION: Example of how to implement a component with the asChild prop pattern used in Radix UI, for comparison with Base UI's render prop pattern.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/utils/use-render/page.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Slot } from 'radix-ui';\n\nfunction Button({ asChild, ...props }) {\n  const Comp = asChild ? Slot.Root : 'button';\n  return <Comp {...props} />;\n}\n\n// Usage\n<Button asChild>\n  <a href=\"/contact\">Contact</a>\n</Button>;\n```\n\n----------------------------------------\n\nTITLE: Testing Absence of Console Errors in React Components\nDESCRIPTION: Demonstrates how to verify that a component doesn't produce any console error messages using the not.toErrorDev assertion. This is useful for regression testing.\nSOURCE: https://github.com/mui/base-ui/blob/master/test/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction SomeComponent({ variant }) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (variant === 'unexpected') {\n      console.error(\"That variant doesn't make sense.\");\n    }\n    if (variant !== undefined) {\n      console.error('`variant` is deprecated.');\n    }\n  }\n\n  return <div />;\n}\nexpect(() => {\n  render(<SomeComponent />);\n}).not.toErrorDev();\n```\n\n----------------------------------------\n\nTITLE: Commands for Visual Regression Testing in MUI Base UI\nDESCRIPTION: A table of command-line instructions for running various aspects of the visual regression tests. Includes commands for full test runs, development mode, running tests separately, building fixtures, and serving the fixture bundle.\nSOURCE: https://github.com/mui/base-ui/blob/master/test/regressions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| command                        | description                                                                                                           |\n| :----------------------------- | :-------------------------------------------------------------------------------------------------------------------- |\n| `pnpm test:regressions`        | Full run                                                                                                              |\n| `pnpm test:regressions:dev`    | Prepares the fixtures and runs a Vite dev server                                                                      |\n| `pnpm test:regressions:run`    | Runs the tests (requires `pnpm test:regressions:dev` or `pnpm test:regressions:build`+`pnpm test:regressions:server`) |\n| `pnpm test:regressions:build`  | Builds the Vite bundle for viewing fixtures                                                                           |\n| `pnpm test:regressions:server` | Serves the fixture bundle.                                                                                            |\n```\n\n----------------------------------------\n\nTITLE: Setting Up Portal Root Layout\nDESCRIPTION: TSX layout configuration to enable proper rendering of portal-based components like Dialog and Popover\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/overview/quick-start/page.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<body>\n  <div className=\"root\">\n    {/* prettier-ignore */}\n    {children}\n  </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Test Commands in Base UI\nDESCRIPTION: Various npm commands for running end-to-end tests in Base UI. These commands handle different aspects of the testing workflow including development mode with hot reloading, full test runs, building the test fixtures, and serving the test environment.\nSOURCE: https://github.com/mui/base-ui/blob/master/test/e2e/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:e2e        # Full run\npnpm test:e2e:dev    # Prepares the fixtures and runs a Vite dev server\npnpm test:e2e:run    # Runs the tests (requires `pnpm test:e2e:dev` or `pnpm test:e2e:build`+`pnpm test:e2e:server`)\npnpm test:e2e:build  # Builds the Vite bundle for viewing fixtures\npnpm test:e2e:server # Serves the fixture bundle.\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables with Popover Component\nDESCRIPTION: Demonstrates how to leverage CSS variables exposed by Base UI components for styling. This example uses the --available-height variable from the Popover component.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/handbook/styling/page.mdx#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.Popup {\n  max-height: var(--available-height);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Base UI Docs Development Server\nDESCRIPTION: Command to start the Base UI documentation site in development mode using pnpm package manager. Must be run from the project root directory.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Base UI Package\nDESCRIPTION: Command to install Base UI components package using npm package manager\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/overview/quick-start/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @base-ui-components/react\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Authentication Token\nDESCRIPTION: Sets up the npm authentication token in the user's .npmrc file for publishing packages.\nSOURCE: https://github.com/mui/base-ui/blob/master/scripts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n//registry.npmjs.org/:_authToken=npm_000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Installing Base UI React Components\nDESCRIPTION: Command to install the Base UI React components package in your project directory using npm. This adds the library to your project's dependencies.\nSOURCE: https://github.com/mui/base-ui/blob/master/packages/react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @base-ui-components/react\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes\nDESCRIPTION: Detailed changelog entries for Base UI versions alpha.7 and alpha.8, documenting component-specific changes including breaking changes, new features, and bug fixes. Organized by component with links to pull requests.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/overview/releases/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Releases\n\n<Subtitle>Changelogs for each Base UI release.</Subtitle>\n<Meta name=\"description\" content=\"Changelogs for each Base UI release.\" />\n\n## v1.0.0-alpha.8\n\n**Apr 17, 2025**\n\n### Accordion\n\n- Recalculate panel dimensions on layout resize ([#1704](https://github.com/mui/base-ui/pull/1704))\n- Rework animations and transitions ([#1601](https://github.com/mui/base-ui/pull/1601))\n\n[...additional changelog content...]\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v1.0.0-alpha.5\nDESCRIPTION: Changelog entry documenting breaking changes and updates for version 1.0.0-alpha.5 of MUI Base UI, including changes to Portal requirements and component-specific updates.\nSOURCE: https://github.com/mui/base-ui/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.0.0-alpha.5\n\n_Jan 10, 2025_\n\n### AlertDialog\n\n- **Breaking change:** Require `Portal` part.\n  The AlertDialog must explicitly include the Portal part wrapping the Popup.\n  The `keepMounted` prop was removed from the Popup.\n  It's only present on the Portal part.\n  [#1222](https://github.com/mui/base-ui/pull/1222) @atomiks\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v1.0.0-alpha.4\nDESCRIPTION: Brief changelog entry announcing the public alpha launch of MUI Base UI.\nSOURCE: https://github.com/mui/base-ui/blob/master/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.0.0-alpha.4\n\n_Dec 17, 2024_\n\nPublic alpha launch 🐣 Merry Xmas! 🎁\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Structure for Base UI React\nDESCRIPTION: Code snippet showing the expected file structure and configuration for the Base UI React project. This appears in the context of removing legacy components and organizing the codebase for new API implementation.\nSOURCE: https://github.com/mui/base-ui/blob/master/CHANGELOG.old.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Non-public versions\n\n## v1.0.0-alpha.3\n\n_Oct 7, 2024_\n\nA big thanks to the 7 contributors who made this release possible. Here are some highlights ✨:\n\n- ⭐ We added several new components: CheckboxGroup, RadioGroup, Form, Separator\n- ⭐ Menu has new parts: CheckboxItem, RadioItem, and Group\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Versions Table in Markdown\nDESCRIPTION: This snippet shows a markdown table that lists the supported versions of Base UI, including version numbers, release dates, and support status.\nSOURCE: https://github.com/mui/base-ui/blob/master/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Base UI version | Release    | Supported          |\n| --------------: | :--------- | :----------------- |\n|          <1.0.0 | 2024-12-17 | :white_check_mark: |\n```\n\n----------------------------------------\n\nTITLE: Base UI Meta Description Configuration in Markdown\nDESCRIPTION: Markdown configuration block that sets up the meta description for Base UI's accessibility documentation page. It includes subtitle and meta description tags.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/overview/accessibility/page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Accessibility\n\n<Subtitle>Learn how to make the most of Base UI's accessibility features and guidelines.</Subtitle>\n<Meta\n  name=\"description\"\n  content=\"Learn how to make the most of Base UI's accessibility features and guidelines.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Portal Stacking Context\nDESCRIPTION: CSS styling to create a separate stacking context for portal components, ensuring they appear above page contents\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/overview/quick-start/page.mdx#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.root {\n  isolation: isolate;\n}\n```\n\n----------------------------------------\n\nTITLE: Using mergeProps with the render Callback\nDESCRIPTION: Example showing how to use the mergeProps function to combine component props with custom styles in a render callback.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/utils/use-render/page.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { mergeProps } from '@base-ui-components/react/merge-props';\nimport styles from './index.module.css';\n\nfunction Button() {\n  return (\n    <Component\n      render={(props, state) => (\n        <button\n          {...mergeProps<'button'>(props, {\n            className: styles.Button,\n          })}\n        />\n      )}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Toast Vertical Offset with CSS\nDESCRIPTION: This CSS snippet demonstrates how to style the vertical offset of toasts when the viewport is hovered or focused.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/src/app/(public)/(content)/react/components/toast/page.mdx#2025-04-22_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.Toast[data-expanded] {\n  transform: translateY(var(--toast-offset-y));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Algolia Crawler Verification and User Agent Permissions\nDESCRIPTION: This snippet sets up the Algolia crawler verification code and defines access rules for all user agents. It allows unrestricted access to the entire site for all crawlers.\nSOURCE: https://github.com/mui/base-ui/blob/master/docs/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Algolia-Crawler-Verif: 98C49CAFF7AEED76\n\nUser-agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Deploying Documentation to Netlify\nDESCRIPTION: Command to deploy the documentation to the Netlify hosting platform.\nSOURCE: https://github.com/mui/base-ui/blob/master/scripts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm docs:deploy\n```"
  }
]