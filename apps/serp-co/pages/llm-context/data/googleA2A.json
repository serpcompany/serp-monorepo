[
  {
    "owner": "google",
    "repo": "a2a",
    "content": "TITLE: Basic A2A Client Usage in TypeScript\nDESCRIPTION: Demonstrates how to initialize the A2AClient and use it to send and retrieve tasks. The example shows importing necessary types, creating a client instance, sending a task with a simple text message, and querying task status using the client's methods.\nSOURCE: https://github.com/google/a2a/blob/main/samples/js/src/client/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { A2AClient, Task, TaskQueryParams, TaskSendParams } from \"./client\"; // Import necessary types\nimport { v4 as uuidv4 } from \"uuid\"; // Example for generating task IDs\n\nconst client = new A2AClient(\"http://localhost:41241\"); // Replace with your server URL\n\nasync function run() {\n  try {\n    // Send a simple task (pass only params)\n    const taskId = uuidv4();\n    const sendParams: TaskSendParams = {\n      id: taskId,\n      message: { role: \"user\", parts: [{ text: \"Hello, agent!\", type: \"text\" }] },\n    };\n    // Method now returns Task | null directly\n    const taskResult: Task | null = await client.sendTask(sendParams);\n    console.log(\"Send Task Result:\", taskResult);\n\n    // Get task status (pass only params)\n    const getParams: TaskQueryParams = { id: taskId };\n    // Method now returns Task | null directly\n    const getTaskResult: Task | null = await client.getTask(getParams);\n    console.log(\"Get Task Result:\", getTaskResult);\n  } catch (error) {\n    console.error(\"A2A Client Error:\", error);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Implementing A2A Server with Task Handler in TypeScript\nDESCRIPTION: Demonstrates the setup of an A2A server with a custom task handler implementation. Shows how to handle task lifecycle, yield updates, manage cancellation, and produce artifacts. Uses async generator pattern for progressive task updates.\nSOURCE: https://github.com/google/a2a/blob/main/samples/js/src/server/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  A2AServer,\n  InMemoryTaskStore,\n  TaskContext,\n  TaskYieldUpdate,\n} from \"./index\"; // Assuming imports from the server package\n\n// 1. Define your agent's logic as a TaskHandler\nasync function* myAgentLogic(\n  context: TaskContext\n): AsyncGenerator<TaskYieldUpdate> {\n  console.log(`Handling task: ${context.task.id}`);\n  yield {\n    state: \"working\",\n    message: { role: \"agent\", parts: [{ text: \"Processing...\" }] },\n  };\n\n  // Simulate work...\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  if (context.isCancelled()) {\n    console.log(\"Task cancelled!\");\n    yield { state: \"canceled\" };\n    return;\n  }\n\n  // Yield an artifact\n  yield {\n    name: \"result.txt\",\n    mimeType: \"text/plain\",\n    parts: [{ text: `Task ${context.task.id} completed.` }],\n  };\n\n  // Yield final status\n  yield {\n    state: \"completed\",\n    message: { role: \"agent\", parts: [{ text: \"Done!\" }] },\n  };\n}\n\n// 2. Create and start the server\nconst store = new InMemoryTaskStore(); // Or new FileStore()\nconst server = new A2AServer(myAgentLogic, { taskStore: store });\n\nserver.start(); // Starts listening on default port 41241\n\nconsole.log(\"A2A Server started.\");\n```\n\n----------------------------------------\n\nTITLE: A2A Streaming Request and Response for Currency Exchange\nDESCRIPTION: Example of using the tasks/sendSubscribe method to enable streaming responses, showing real-time status updates during processing and the final result with incremental updates.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/langgraph/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 12,\n  \"method\": \"tasks/sendSubscribe\",\n  \"params\": {\n    \"id\": \"131\",\n    \"sessionId\": \"cebd704d0ddd4e8aa646aeb123d60614\",\n    \"acceptedOutputModes\": [\n      \"text\"\n    ],\n    \"message\": {\n      \"role\": \"user\",\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"How much is 100 USD in GBP?\"\n        }\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\ndata: {\"jsonrpc\":\"2.0\",\"id\":12,\"result\":{\"id\":\"131\",\"status\":{\"state\":\"working\",\"message\":{\"role\":\"agent\",\"parts\":[{\"type\":\"text\",\"text\":\"Looking up the exchange rates...\"}]},\"timestamp\":\"2025-04-02T16:59:34.578939\"},\"final\":false}}\n\ndata: {\"jsonrpc\":\"2.0\",\"id\":12,\"result\":{\"id\":\"131\",\"status\":{\"state\":\"working\",\"message\":{\"role\":\"agent\",\"parts\":[{\"type\":\"text\",\"text\":\"Processing the exchange rates..\"}]},\"timestamp\":\"2025-04-02T16:59:34.737052\"},\"final\":false}}\n\ndata: {\"jsonrpc\":\"2.0\",\"id\":12,\"result\":{\"id\":\"131\",\"artifact\":{\"parts\":[{\"type\":\"text\",\"text\":\"Based on the current exchange rate, 1 USD is equivalent to 0.77252 GBP. Therefore, 100 USD would be approximately 77.252 GBP.\"}],\"index\":0,\"append\":false}}}\n\ndata: {\"jsonrpc\":\"2.0\",\"id\":12,\"result\":{\"id\":\"131\",\"status\":{\"state\":\"completed\",\"timestamp\":\"2025-04-02T16:59:35.331844\"},\"final\":true}}\n```\n\n----------------------------------------\n\nTITLE: Streaming Implementation with A2A Client in TypeScript\nDESCRIPTION: Shows how to implement streaming task updates using A2AClient. The example demonstrates subscribing to task events, handling different event types (status updates and artifact updates), and properly processing the streaming response until the server signals completion.\nSOURCE: https://github.com/google/a2a/blob/main/samples/js/src/client/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  A2AClient,\n  TaskStatusUpdateEvent,\n  TaskArtifactUpdateEvent,\n  TaskSendParams, // Use params type directly\n} from \"./client\"; // Adjust path if necessary\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst client = new A2AClient(\"http://localhost:41241\");\n\nasync function streamTask() {\n  const streamingTaskId = uuidv4();\n  try {\n    console.log(`\\n--- Starting streaming task ${streamingTaskId} ---`);\n    // Construct just the params\n    const streamParams: TaskSendParams = {\n      id: streamingTaskId,\n      message: { role: \"user\", parts: [{ text: \"Stream me some updates!\", type: \"text\" }] },\n    };\n    // Pass only params to the client method\n    const stream = client.sendTaskSubscribe(streamParams);\n\n    // Stream now yields the event payloads directly\n    for await (const event of stream) {\n      // Type guard to differentiate events based on structure\n      if (\"status\" in event) {\n        // It's a TaskStatusUpdateEvent\n        const statusEvent = event as TaskStatusUpdateEvent; // Cast for clarity\n        console.log(\n          `[${streamingTaskId}] Status Update: ${statusEvent.status.state} - ${\n            statusEvent.status.message?.parts[0]?.text ?? \"No message\"\n          }`\n        );\n        if (statusEvent.final) {\n          console.log(`[${streamingTaskId}] Stream marked as final.`);\n          break; // Exit loop when server signals completion\n        }\n      } else if (\"artifact\" in event) {\n        // It's a TaskArtifactUpdateEvent\n        const artifactEvent = event as TaskArtifactUpdateEvent; // Cast for clarity\n        console.log(\n          `[${streamingTaskId}] Artifact Update: ${\n            artifactEvent.artifact.name ??\n            `Index ${artifactEvent.artifact.index}`\n          } - Part Count: ${artifactEvent.artifact.parts.length}`\n        );\n        // Process artifact content (e.g., artifactEvent.artifact.parts[0].text)\n      } else {\n        console.warn(\"Received unknown event structure:\", event);\n      }\n    }\n    console.log(`--- Streaming task ${streamingTaskId} finished ---`);\n  } catch (error) {\n    console.error(`Error during streaming task ${streamingTaskId}:`, error);\n  }\n}\n\nstreamTask();\n```\n\n----------------------------------------\n\nTITLE: Streaming A2A API Response\nDESCRIPTION: Example of streaming response handling in the A2A Protocol, showing progressive updates during document processing and analysis. Demonstrates the event-based streaming format with status updates.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/llama_index_file_chat/README.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 11,\n  \"method\": \"tasks/send\",\n  \"params\": {\n    \"id\": \"129\",\n    \"sessionId\": \"8f01f3d172cd4396a0e535ae8aec6687\",\n    \"acceptedOutputModes\": [\n      \"text\"\n    ],\n    \"message\": {\n      \"role\": \"user\",\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"What does this file talk about?\"\n        },\n        {\n            \"type\": \"file\",\n            \"file\": {\n                \"bytes\": \"...\",\n                \"name\": \"attention.pdf\"\n            }\n        }\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nstream event => {\"jsonrpc\":\"2.0\",\"id\":\"367d0ba9af97457890261ac29a0f6f5b\",\"result\":{\"id\":\"373b26d64c5a4f0099fa906c6b7342d9\",\"status\":{\"state\":\"working\",\"message\":{\"role\":\"agent\",\"parts\":[{\"type\":\"text\",\"text\":\"Parsing document...\"}]},\"timestamp\":\"2025-04-15T16:05:18.283682\"},\"final\":false}}\n\nstream event => {\"jsonrpc\":\"2.0\",\"id\":\"367d0ba9af97457890261ac29a0f6f5b\",\"result\":{\"id\":\"373b26d64c5a4f0099fa906c6b7342d9\",\"status\":{\"state\":\"working\",\"message\":{\"role\":\"agent\",\"parts\":[{\"type\":\"text\",\"text\":\"Document parsed successfully.\"}]},\"timestamp\":\"2025-04-15T16:05:24.200133\"},\"final\":false}}\n\nstream event => {\"jsonrpc\":\"2.0\",\"id\":\"367d0ba9af97457890261ac29a0f6f5b\",\"result\":{\"id\":\"373b26d64c5a4f0099fa906c6b7342d9\",\"status\":{\"state\":\"working\",\"message\":{\"role\":\"agent\",\"parts\":[{\"type\":\"text\",\"text\":\"Chatting with 1 initial messages.\"}]},\"timestamp\":\"2025-04-15T16:05:24.204757\"},\"final\":false}}\n```\n\n----------------------------------------\n\nTITLE: A2A Multi-turn Conversation for Currency Exchange\nDESCRIPTION: A sequence of JSON requests and responses demonstrating a multi-turn conversation where the agent requests additional information (target currency) before providing the exchange rate.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/langgraph/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 10,\n  \"method\": \"tasks/send\",\n  \"params\": {\n    \"id\": \"130\",\n    \"sessionId\": \"a9bb617f2cd94bd585da0f88ce2ddba2\",\n    \"acceptedOutputModes\": [\n      \"text\"\n    ],\n    \"message\": {\n      \"role\": \"user\",\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"How much is the exchange rate for 1 USD?\"\n        }\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 10,\n  \"result\": {\n    \"id\": \"130\",\n    \"status\": {\n      \"state\": \"input-required\",\n      \"message\": {\n        \"role\": \"agent\",\n        \"parts\": [\n          {\n            \"type\": \"text\",\n            \"text\": \"Which currency do you want to convert to? Also, do you want the latest exchange rate or a specific date?\"\n          }\n        ]\n      },\n      \"timestamp\": \"2025-04-02T16:57:02.336787\"\n    },\n    \"history\": []\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 10,\n  \"method\": \"tasks/send\",\n  \"params\": {\n    \"id\": \"130\",\n    \"sessionId\": \"a9bb617f2cd94bd585da0f88ce2ddba2\",\n    \"acceptedOutputModes\": [\n      \"text\"\n    ],\n    \"message\": {\n      \"role\": \"user\",\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"CAD\"\n        }\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 10,\n  \"result\": {\n    \"id\": \"130\",\n    \"status\": {\n      \"state\": \"completed\",\n      \"timestamp\": \"2025-04-02T16:57:40.033328\"\n    },\n    \"artifacts\": [\n      {\n        \"parts\": [\n          {\n            \"type\": \"text\",\n            \"text\": \"The current exchange rate is 1 USD = 1.4328 CAD.\"\n          }\n        ],\n        \"index\": 0\n      }\n    ],\n    \"history\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-turn A2A API Conversation\nDESCRIPTION: Demonstration of a multi-turn conversation using the A2A Protocol, showing how to maintain context across multiple requests using a session ID. Includes file analysis and follow-up questions.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/llama_index_file_chat/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 11,\n  \"method\": \"tasks/send\",\n  \"params\": {\n    \"id\": \"130\",\n    \"sessionId\": \"8f01f3d172cd4396a0e535ae8aec6687\",\n    \"acceptedOutputModes\": [\n      \"text\"\n    ],\n    \"message\": {\n      \"role\": \"user\",\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"What about thing X?\"\n        }\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 11,\n  \"result\": {\n    \"id\": \"130\",\n    \"status\": {\n      \"state\": \"completed\",\n      \"timestamp\": \"2025-04-02T16:53:29.301828\"\n    },\n    \"artifacts\": [\n      {\n        \"parts\": [\n          {\n            \"type\": \"text\",\n            \"text\": \"Thing X is ... [1]\"\n          }\n        ],\n        \"metadata\": {\n            \"1\": [\"Text for citation 1\"]\n        }\n        \"index\": 0,\n      }\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Agent Environment using Bash Commands\nDESCRIPTION: Bash commands for navigating to the sample directory, creating an environment file with an API key, and running the agent with optional host/port configuration.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/langgraph/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd samples/python/agents/langgraph\n```\n\nLANGUAGE: bash\nCODE:\n```\necho \"GOOGLE_API_KEY=your_api_key_here\" > .env\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Basic run on default port 10000\nuv run .\n\n# On custom host/port\nuv run . --host 0.0.0.0 --port 8080\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd samples/python/hosts/cli\nuv run .\n```\n\n----------------------------------------\n\nTITLE: Running the LlamaIndex File Chat Agent\nDESCRIPTION: Bash commands demonstrating how to run the agent using UV, either with default settings on port 10010 or with custom host and port configurations.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/llama_index_file_chat/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Basic run on default port 10010\nuv run .\n\n# On custom host/port\nuv run . --host 0.0.0.0 --port 8080\n```\n\n----------------------------------------\n\nTITLE: Setting up and running the Marvin agent server in Bash\nDESCRIPTION: Commands for navigating to the project directory, setting up the Python environment, and running the Marvin agent server. It includes options for setting the OpenAI API key and specifying custom host/port.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/marvin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd samples/python/agents/marvin\n\nexport OPENAI_API_KEY=your_api_key_here\n\nuv venv\nsource .venv/bin/activate\nuv sync\n\n# Default host/port (localhost:10030)\nMARVIN_DATABASE_URL=sqlite+aiosqlite:///test.db MARVIN_LOG_LEVEL=DEBUG uv run .\n\n# Custom host/port\n# uv run . --host 0.0.0.0 --port 8080\n```\n\n----------------------------------------\n\nTITLE: Running Semantic Kernel Agent with A2A Protocol\nDESCRIPTION: These commands demonstrate how to run the Semantic Kernel agent. It includes options for running on the default port or specifying a custom host and port.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/semantickernel/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Basic run on default port 10020\nuv run .\n```\n\nLANGUAGE: bash\nCODE:\n```\n# On custom host/port\nuv run . --host 0.0.0.0 --port 8080\n```\n\n----------------------------------------\n\nTITLE: Running the ADK Agent Server with UV in Bash\nDESCRIPTION: Command to start the ADK agent server using UV, which makes the agent available at a local port (default 10002).\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/google_adk/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run .\n```\n\n----------------------------------------\n\nTITLE: Running the A2A Agent\nDESCRIPTION: Commands to run the agent with different configuration options including custom host and port settings.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/crewai/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Basic run\nuv run .\n\n# On custom host/port\nuv run . --host 0.0.0.0 --port 8080\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Environment for Semantic Kernel Agent\nDESCRIPTION: This snippet shows how to set up the Python environment for the Semantic Kernel agent using uv. It includes commands for pinning the Python version, creating a virtual environment, and activating it.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/semantickernel/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv python pin 3.12\nuv venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running the A2A Client in Bash\nDESCRIPTION: Commands to navigate to the CLI host directory and start the A2A client, connecting it to the running agent server at the specified port.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/google_adk/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Connect to the agent (specify the agent URL with correct port)\ncd samples/python/hosts/cli\nuv run . --agent http://localhost:10002\n\n# If you changed the port when starting the agent, use that port instead\n# uv run . --agent http://localhost:YOUR_PORT\n```\n\n----------------------------------------\n\nTITLE: Running the A2A CLI Client with UV\nDESCRIPTION: Command to run the A2A CLI client using UV, specifying the URL of the A2A server with the --agent flag. Additional command line options are available in the source code.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/hosts/cli/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv run . --agent [url-of-your-a2a-server]\n```\n\n----------------------------------------\n\nTITLE: Running A2A Agent\nDESCRIPTION: Command to start the A2A agent using UV package manager\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv run .\n```\n\n----------------------------------------\n\nTITLE: Running an A2A Client for Testing\nDESCRIPTION: Bash commands showing how to set up and run an A2A client to test the agent, including downloading a sample PDF file and connecting to the agent at the specified URL.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/llama_index_file_chat/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd samples/python/hosts/cli\nuv run . --agent http://localhost:10010\n\n# Download a sample file for testing\nwget https://arxiv.org/pdf/1706.03762 -O attention.pdf\n```\n\n----------------------------------------\n\nTITLE: A2A Protocol Response for Currency Conversion\nDESCRIPTION: This JSON snippet shows the A2A protocol response for a currency conversion request. It includes the conversion result, status, and other metadata.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/semantickernel/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 33,\n  \"result\": {\n    \"id\": \"3\",\n    \"status\": {\n      \"state\": \"completed\",\n      \"timestamp\": \"2025-04-01T16:53:29.301828\"\n    },\n    \"artifacts\": [\n      {\n        \"parts\": [\n          {\n            \"type\": \"text\",\n            \"text\": \"1 USD is approximately 0.88137 EUR.\"\n          }\n        ],\n        \"index\": 0\n      }\n    ],\n    \"history\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Environment File with API Key in Bash\nDESCRIPTION: Command to create a .env file containing the Google API key required for the agent to access LLM services.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/google_adk/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho \"GOOGLE_API_KEY=your_api_key_here\" > .env\n```\n\n----------------------------------------\n\nTITLE: A2A Protocol Request for Currency Conversion\nDESCRIPTION: This JSON snippet demonstrates an A2A protocol request for currency conversion. It includes the JSON-RPC structure with method, params, and message details.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/semantickernel/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 33,\n  \"method\": \"tasks/send\",\n  \"params\": {\n    \"id\": \"3\",\n    \"sessionId\": \"1aab49f1e85c499da48c2124f4ceee4d\",\n    \"acceptedOutputModes\": [\"text\"],\n    \"message\": {\n      \"role\": \"user\",\n      \"parts\": [\n        { \"type\": \"text\", \"text\": \"How much is 1 USD to EUR?\" }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the A2A client CLI in Bash\nDESCRIPTION: Commands for running an A2A client, specifically the sample CLI, to interact with the Marvin agent server. It assumes the Python environment is already active.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/marvin/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Ensure the environment is active (source .venv/bin/activate)\ncd samples/python/hosts/cli\nuv run . --agent http://localhost:10030 # Use the correct agent URL/port\n```\n\n----------------------------------------\n\nTITLE: Visualizing Agent Flow with Mermaid Diagram\nDESCRIPTION: A sequence diagram illustrating the interaction flow between the A2A client, server, LangGraph agent, and Frankfurter API. It shows the complete information path, incomplete information flow requiring additional input, and streaming capabilities.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/langgraph/README.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client as A2A Client\n    participant Server as A2A Server\n    participant Agent as LangGraph Agent\n    participant API as Frankfurter API\n\n    Client->>Server: Send task with currency query\n    Server->>Agent: Forward query to currency agent\n\n    alt Complete Information\n        Agent->>API: Call get_exchange_rate tool\n        API->>Agent: Return exchange rate data\n        Agent->>Server: Process data & return result\n        Server->>Client: Respond with currency information\n    else Incomplete Information\n        Agent->>Server: Request additional input\n        Server->>Client: Set state to \"input-required\"\n        Client->>Server: Send additional information\n        Server->>Agent: Forward additional info\n        Agent->>API: Call get_exchange_rate tool\n        API->>Agent: Return exchange rate data\n        Agent->>Server: Process data & return result\n        Server->>Client: Respond with currency information\n    end\n\n    alt With Streaming\n        Note over Client,Server: Real-time status updates\n        Server->>Client: \"Looking up exchange rates...\"\n        Server->>Client: \"Processing exchange rates...\"\n        Server->>Client: Final result\n    end\n```\n\n----------------------------------------\n\nTITLE: Running the A2A Client\nDESCRIPTION: Commands to run the A2A client and connect to the agent with specified URL and port.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/crewai/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Connect to the agent (specify the agent URL with correct port)\ncd samples/python/hosts/cli   \nuv run . --agent http://localhost:10001\n\n# If you changed the port when starting the agent, use that port instead\n# uv run . --agent http://localhost:YOUR_PORT\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Agents with Gemini API\nDESCRIPTION: Commands to set up the Gemini API key and run the coder agent, followed by starting the CLI interface in a separate terminal\nSOURCE: https://github.com/google/a2a/blob/main/samples/js/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport GEMINI_API_KEY=<your_api_key>\nnpm run agents:coder\n\n# in a separate terminal\nnpm run a2a:cli\n```\n\n----------------------------------------\n\nTITLE: Starting the Coder Agent with Gemini API Key\nDESCRIPTION: Commands to set up the Gemini API key and start the Coder Agent service. The agent will run on http://localhost:41241/ after successful execution.\nSOURCE: https://github.com/google/a2a/blob/main/samples/js/src/agents/coder/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GEMINI_API_KEY=<your_api_key>\nnpm run agents:coder\n```\n\n----------------------------------------\n\nTITLE: Python Environment Setup Commands\nDESCRIPTION: Series of commands to set up Python virtual environment using UV package manager.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/crewai/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv python pin 3.12\nuv venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Synchronous A2A API Request and Response\nDESCRIPTION: Example of a basic synchronous request to analyze a PDF file and its corresponding response. The request includes session management and file handling parameters, while the response contains the analysis result with citations.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/llama_index_file_chat/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 11,\n  \"method\": \"tasks/send\",\n  \"params\": {\n    \"id\": \"129\",\n    \"sessionId\": \"8f01f3d172cd4396a0e535ae8aec6687\",\n    \"acceptedOutputModes\": [\n      \"text\"\n    ],\n    \"message\": {\n      \"role\": \"user\",\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"What does this file talk about?\"\n        },\n        {\n            \"type\": \"file\",\n            \"file\": {\n                \"bytes\": \"...\",\n                \"name\": \"attention.pdf\"\n            }\n        }\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 11,\n  \"result\": {\n    \"id\": \"129\",\n    \"status\": {\n      \"state\": \"completed\",\n      \"timestamp\": \"2025-04-02T16:53:29.301828\"\n    },\n    \"artifacts\": [\n      {\n        \"parts\": [\n          {\n            \"type\": \"text\",\n            \"text\": \"This file is about XYZ... [1]\"\n          }\n        ],\n        \"metadata\": {\n            \"1\": [\"Text for citation 1\"]\n        }\n        \"index\": 0,\n      }\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for API Access\nDESCRIPTION: Command to create environment file with Google API key for Gemini access.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/crewai/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho \"GOOGLE_API_KEY=your_api_key_here\" > .env\n```\n\n----------------------------------------\n\nTITLE: Setting Google AI Studio API Key in Bash\nDESCRIPTION: Command to create an environment file and add the Google API key for authentication.\nSOURCE: https://github.com/google/a2a/blob/main/demo/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho \"GOOGLE_API_KEY=your_api_key_here\" >> .env\n```\n\n----------------------------------------\n\nTITLE: Defining ContactInfo data structure in Python\nDESCRIPTION: Python code defining the ContactInfo class using Pydantic BaseModel. It specifies the structure of the extracted contact information, including name, email, phone, organization, and role fields.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/marvin/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass ContactInfo(BaseModel):\n    name: str = Field(description=\"Person's first and last name\")\n    email: EmailStr\n    phone: str = Field(description=\"standardized phone number\")\n    organization: str | None = Field(None, description=\"org if mentioned\")\n    role: str | None = Field(None, description=\"title or role if mentioned\")\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram for File Chat Workflow\nDESCRIPTION: A mermaid sequence diagram illustrating the interaction flow between A2A Client, Server, ParseAndChat Workflow, and External APIs, showing the message handling process with file attachments, streaming updates, and response generation.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/llama_index_file_chat/README.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client as A2A Client\n    participant Server as A2A Server\n    participant Workflow as ParseAndChat Workflow\n    participant Services as External APIs\n\n    Client->>Server: Send message (with or without attachment)\n    Server->>Workflow: Forward as InputEvent\n\n    alt Has Attachment\n        Workflow-->>Server: Stream LogEvent \"Parsing document...\"\n        Server-->>Client: Stream status update\n        Workflow->>Services: Parse document\n        Workflow-->>Server: Stream LogEvent \"Document parsed successfully\"\n        Server-->>Client: Stream status update\n    end\n\n    Workflow-->>Server: Stream LogEvent about chat processing\n    Server-->>Client: Stream status update\n    \n    Workflow->>Services: LLM Chat (with document context if available)\n    Services->>Workflow: Structured LLM Response\n    Workflow-->>Server: Stream LogEvent about response processing\n    Server-->>Client: Stream status update\n    \n    Workflow->>Server: Return final ChatResponseEvent\n    Server->>Client: Return response with citations (if available)\n\n    Note over Server: Context is maintained for follow-up questions\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram of A2A and CrewAI Integration Flow\nDESCRIPTION: Mermaid sequence diagram showing the interaction flow between A2A client, server, CrewAI agent, and Gemini API for image generation process.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/crewai/README.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client as A2A Client\n    participant Server as A2A Server\n    participant Agent as CrewAI Agent\n    participant API as Gemini API\n\n    Client->>Server: Send task with text prompt\n    Server->>Agent: Forward prompt to image agent\n    Note over Server,Agent: Optional: Simulated streaming updates\n    Agent->>API: Generate image using Gemini\n    API->>Agent: Return generated image\n    Agent->>Server: Store image and return ID\n    Server->>Client: Respond with image artifact\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Agent Environment\nDESCRIPTION: Bash commands to navigate to the sample directory and create an environment file with API keys for Google API and LlamaCloud, which are required for the agent to function.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/llama_index_file_chat/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd samples/python/agents/llama_index_file_chat\n\necho \"GOOGLE_API_KEY=your_api_key_here\" >> .env\necho \"LLAMA_CLOUD_API_KEY=your_api_key_here\" >> .env\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for JavaScript Agents\nDESCRIPTION: Command to install required npm packages for the agent samples\nSOURCE: https://github.com/google/a2a/blob/main/samples/js/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running the Frontend Application with UV in Bash\nDESCRIPTION: Command to start the frontend application using the UV package runner.\nSOURCE: https://github.com/google/a2a/blob/main/demo/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuv run main.py\n```\n\n----------------------------------------\n\nTITLE: Running A2A Specification Tests with Pytest\nDESCRIPTION: Command to run the A2A specification tests using pytest with verbose output and displaying print statements. The test file targeted is test_a2a_spec.py.\nSOURCE: https://github.com/google/a2a/blob/main/tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv run pytest -v -s tests/test_a2a_spec.py\n```\n\n----------------------------------------\n\nTITLE: Running A2A Client for Semantic Kernel Agent\nDESCRIPTION: This command shows how to run the A2A client to interact with the Semantic Kernel agent. It specifies the agent's URL as a parameter.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/semantickernel/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd samples/python/hosts/cli\nuv run . --agent http://localhost:10020\n```\n\n----------------------------------------\n\nTITLE: Running Client Application\nDESCRIPTION: Command to start the example client using UV package manager\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuv run .\n```\n\n----------------------------------------\n\nTITLE: Navigating to CLI Sample Directory in Bash\nDESCRIPTION: Command to navigate to the Python CLI sample directory for the A2A client implementation.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/hosts/cli/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd samples/python/hosts/cli\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment for A2A Project\nDESCRIPTION: Command to activate the Python virtual environment located in the samples/python directory. This is a prerequisite for running the tests.\nSOURCE: https://github.com/google/a2a/blob/main/tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsource samples/python/.venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Setting up JavaScript Agents - Directory Navigation\nDESCRIPTION: Command to navigate to the JavaScript samples directory where the agent code is located\nSOURCE: https://github.com/google/a2a/blob/main/samples/js/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd samples/js\n```\n\n----------------------------------------\n\nTITLE: Navigating to Agent Directory\nDESCRIPTION: Command to change directory to the langgraph agent location\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd samples/python/agents/langgraph\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Vertex AI in Bash\nDESCRIPTION: Commands to set up environment variables for using Google Cloud Vertex AI, including project ID and location.\nSOURCE: https://github.com/google/a2a/blob/main/demo/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho \"GOOGLE_GENAI_USE_VERTEXAI=TRUE\" >> .env\necho \"GOOGLE_CLOUD_PROJECT=your_project_id\" >> .env\necho \"GOOGLE_CLOUD_LOCATION=your_location\" >> .env\n```\n\n----------------------------------------\n\nTITLE: Navigating to the ADK Agent Directory in Bash\nDESCRIPTION: Command to navigate to the directory containing the ADK agent sample code.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/google_adk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd samples/python/agents/google_adk\n```\n\n----------------------------------------\n\nTITLE: Navigating to Demo UI Directory in Bash\nDESCRIPTION: Command to change the current directory to the demo UI folder.\nSOURCE: https://github.com/google/a2a/blob/main/demo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd demo/ui\n```\n\n----------------------------------------\n\nTITLE: Navigating to CLI Directory\nDESCRIPTION: Command to change directory to the CLI host application location\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd samples/python/hosts/cli\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running Movie Info Agent with TMDB and Gemini APIs\nDESCRIPTION: This snippet demonstrates how to set up the required API keys as environment variables and start the Movie Info Agent. It requires a TMDB API key and a Gemini API key. The agent will be accessible at http://localhost:41241 after starting.\nSOURCE: https://github.com/google/a2a/blob/main/samples/js/src/agents/movie-agent/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport TMDB_API_KEY=<api_key> # see https://developer.themoviedb.org/docs/getting-started\nexport GEMINI_API_KEY=<api_key>\nnpm run agents:movie-agent\n```\n\n----------------------------------------\n\nTITLE: A2A Synchronous Request for Currency Exchange Rate\nDESCRIPTION: Example JSON request and response for a synchronous query to convert USD to INR using the A2A protocol's tasks/send method, demonstrating a complete single-turn interaction.\nSOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/langgraph/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 11,\n  \"method\": \"tasks/send\",\n  \"params\": {\n    \"id\": \"129\",\n    \"sessionId\": \"8f01f3d172cd4396a0e535ae8aec6687\",\n    \"acceptedOutputModes\": [\n      \"text\"\n    ],\n    \"message\": {\n      \"role\": \"user\",\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"How much is the exchange rate for 1 USD to INR?\"\n        }\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 11,\n  \"result\": {\n    \"id\": \"129\",\n    \"status\": {\n      \"state\": \"completed\",\n      \"timestamp\": \"2025-04-02T16:53:29.301828\"\n    },\n    \"artifacts\": [\n      {\n        \"parts\": [\n          {\n            \"type\": \"text\",\n            \"text\": \"The exchange rate for 1 USD to INR is 85.49.\"\n          }\n        ],\n        \"index\": 0\n      }\n    ],\n    \"history\": []\n  }\n}\n```"
  }
]