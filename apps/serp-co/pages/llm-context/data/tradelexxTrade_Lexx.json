[
  {
    "owner": "tradelexx",
    "repo": "trade_lexx",
    "content": "TITLE: Implementing Zendog V3 DCA Bot Strategy in Pine Script\nDESCRIPTION: A comprehensive implementation of a Dollar Cost Averaging (DCA) trading bot strategy in Pine Script v5. The strategy includes configurable deal start/end conditions using either RSI or external indicators, safety order management with scale parameters, take profit and stop loss settings, and date range limitations for backtesting.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\n//@author zendog123\n//@version=5\nstrategy(title='Zendog V3 backtest DCA bot 3commas', shorttitle='Zendog V3 DCA', \n overlay=true, max_labels_count=500, pyramiding=99, initial_capital=10000, \n  calc_on_order_fills=false, commission_type=strategy.commission.percent, commission_value=0.075)\n```\n\n----------------------------------------\n\nTITLE: Implementing 3commas DCA Bot Backtesting Strategy in Pine Script v4\nDESCRIPTION: Complete Pine Script v4 implementation of a backtesting strategy for 3commas DCA Bot. The script supports customizable parameters including take profit, stop loss, order sizing, safety orders, and multiple deal start conditions. It allows simulation of the bot's behavior on historical data with accurate trade execution logic.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Backtesting 3commas DCA Bot v2.txt#2025-04-23_snippet_0\n\nLANGUAGE: Pine Script\nCODE:\n```\n//@version=4\n// Author: rouxam\nstrategy(\"Backtesting 3commas DCA Bot v2\", overlay=true, pyramiding=99, process_orders_on_close=true, commission_type=strategy.commission.percent, commission_value=0.1, initial_capital=3009)\n\n// Important Note : Initial Capital above is written to match the default value based on bot parameters.\n//                  It is expected the user will update the initial_capital via the GUI Parameters > Properties tab\n//                  A warning will displayed in case initial capital and max amount for bot usage do not match.\n\n// ----------------------------------\n// Strategy Inputs\n// ----------------------------------\ntake_profit             = input(4.5, type=input.float,  title=\"Take Profit (%)\", minval=0.0, step=0.1)/100\ntake_profit_type        = input(defval=\"% from total volume\", title=\"Take Profit Type\", options=[\"% from total volume\", \"% from base order\"])\nttp                     = input(0.0, type=input.float,  title=\"Trailing Take Profit (%) [0 = Disabled]\", minval=0.0, step=0.1)/100\nstop_loss               = input(0.0, type=input.float,  title=\"Stop Loss (%) [0 = Disabled]\", minval=0.0, step=0.1)/100\norder_size_type         = input(defval=\"Fixed\",         title=\"Order Size Type\", options=[\"Fixed\", \"% of equity\"])\nbase_order              = input(100.0, type=input.float,title=\"Base Order\") \nsafe_order              = input(140.0, type=input.float,title=\"Safety Order\") \nmax_safe_order          = input(6,                      title=\"Max Safety Trades Count\", minval=0, maxval=99, step=1) \nprice_deviation         = input(1.5, type=input.float,  title=\"Price deviation to open safety order (%)\", minval=0.0, step=0.1)/100\nsafe_order_volume_scale = input(1.5, type=input.float,  title=\"Safety Order Volume Scale\", step=0.1) \nsafe_order_step_scale   = input(1.6, type=input.float,  title=\"Safety Order Step Scale\", step=0.1) \ndsc                     = input(defval=\"RSI-7\",         title=\"Deal Start Condition\", options=[\"Start ASAP\", \"RSI-7\", \"TV presets\"])\ndsc_rsi_threshold       = input(defval=30,              title=\"[RSI-7 only] RSI Threshold\", minval=1, maxval=99)\ndsc_technicals          = input(defval=\"Strong\",        title=\"[TV presets only] Strength\", options=[\"Strong\", \"Weak\"])\ndsc_res                 = input(\"\",                     title=\"[RSI-7 and TV presets Only] Indicator Timeframe\", type=input.resolution)\nbot_direction           = input(defval=\"Long\",          title=\"Bot Direction\", options=[\"Long\", \"Short\"])\nstart_time              = input(defval=timestamp(\"15 June 2021 06:00\"),   title=\"Start Time\",     type=input.time)\nend_time                = input(defval=timestamp(\"31 Dec 2021 20:00\"),   title=\"End Time\",       type=input.time)\n\n\n// ----------------------------------\n// Declarations\n// ----------------------------------\nvar bo_level = 0.0\nvar last_so_level = 0.0\nvar so_level = 0.0\nvar ttp_active = false\nvar ttp_extremum = 0.0\nvar ttp_level = 0.0\nvar stop_level = 0.0\nvar take_profit_level = 0.0\nvar deal_counter = 0\nvar stop_loss_counter = 0\nvar stop_loss_on_bar = false\nvar latest_price = close\nvar deal_start_condition = false\nvar start_time_actual = start_time\nvar end_time_actual = start_time\n\n// CONSTANTS\nvar float init_price = na\nvar IS_LONG = bot_direction == \"Long\"\n\n\n\n// ----------------------------------\n// Utilities functions\n// ----------------------------------\npretty_date(t) => tostring(dayofmonth(t)) + \"/\" + tostring(month(t)) + \"/\" + tostring(year(t))\n\nwithin_window() => time >= start_time and time <= end_time\n\nbase_order_size() => order_size_type == \"Fixed\" ? base_order : base_order/100 * strategy.equity\nsafe_order_size() => order_size_type == \"Fixed\" ? safe_order : safe_order/100 * strategy.equity\n\nsafety_order_deviation(index) => price_deviation * pow(safe_order_step_scale,  index - 1)\n\nsafety_order_price(index, last_safety_order_price) => \n    if IS_LONG\n        last_safety_order_price * (1 - safety_order_deviation(index))\n    else\n        last_safety_order_price * (1 + safety_order_deviation(index))\n\nsafety_order_qty(index) => safe_order_size() * pow(safe_order_volume_scale, index - 1)\n\nmax_amount_for_bot_usage() =>\n    var total_qty = 0.0\n    var last_order_qty = 0.0\n    total_qty := base_order_size()\n    last_order_qty := safe_order_size()\n    if max_safe_order > 0\n        for index = 1 to max_safe_order\n            total_qty := total_qty + safety_order_qty(index)\n    total_qty // returned value\n\nmax_deviation() =>\n    var total_deviation = 0.0\n    total_deviation := 0.0\n    for index = 1 to max_safe_order\n        total_deviation := total_deviation + safety_order_deviation(index)\n\ncurrency_format() =>\n    if syminfo.currency == \"USDT\" or syminfo.currency == \"USD\" or syminfo.currency == \"TUSD\" or syminfo.currency == \"BUSD\" or syminfo.currency == \"USDC\" or syminfo.currency == \"EUR\" or syminfo.currency == \"AUD\"\n        \"#.##\"\n    else if syminfo.currency == \"BTC\"\n        \"#.########\"\n    else\n        // TODO (rouxam) list more options\n        \"#.####\"\n\n\n\n// ***********************************\n// Deal Start Condition Strategies\n// ***********************************\n\n// RSI-7 \n// ***********************************\n\nrsi_signal() =>\n    // Regular strat would be crossover but not for 3C DCA Bot\n    rsi7 = rsi(close, 7)\n    if IS_LONG\n        [rsi7 < dsc_rsi_threshold, close]\n    else\n        [rsi7 > dsc_rsi_threshold, close]\n\n// TV presets\n// ***********************************\n// This whole section is from the TradingView \"Technical Ratings\" code.\n// Adding the Technical Ratings \"indicator\" as input to this \"strategy\" is not sufficient for our purpose,\n// Therefore the code is copy-pasted.\n// ***********************************\n\n// Awesome Oscillator\nAO() => \n    sma(hl2, 5) - sma(hl2, 34)\n\n// Stochastic RSI\nStochRSI() =>\n    rsi1 = rsi(close, 14)\n    K = sma(stoch(rsi1, rsi1, rsi1, 14), 3)\n    D = sma(K, 3)\n    [K, D]\n\n// Ultimate Oscillator\ntl() => close[1] < low ? close[1]: low\nuo(ShortLen, MiddlLen, LongLen) =>\n    Value1 = sum(tr, ShortLen)\n    Value2 = sum(tr, MiddlLen)\n    Value3 = sum(tr, LongLen)\n    Value4 = sum(close - tl(), ShortLen)\n    Value5 = sum(close - tl(), MiddlLen)\n    Value6 = sum(close - tl(), LongLen)\n    float UO = na\n    if Value1 != 0 and Value2 != 0 and Value3 != 0\n        var0 = LongLen / ShortLen\n        var1 = LongLen / MiddlLen\n        Value7 = (Value4 / Value1) * (var0)\n        Value8 = (Value5 / Value2) * (var1)\n        Value9 = (Value6 / Value3)\n        UO := (Value7 + Value8 + Value9) / (var0 + var1 + 1)\n    UO\n\n// Ichimoku Cloud\ndonchian(len) => avg(lowest(len), highest(len))\nichimoku_cloud() =>\n    conversionLine = donchian(9)\n    baseLine = donchian(26)\n    leadLine1 = avg(conversionLine, baseLine)\n    leadLine2 = donchian(52)\n    [conversionLine, baseLine, leadLine1, leadLine2]\n\ncalcRatingMA(ma, src) => na(ma) or na(src) ? na : (ma == src ? 0 : ( ma < src ? 1 : -1 ))\ncalcRating(buy, sell) => buy ? 1 : ( sell ? -1 : 0 )\n\nta_presets_signal() =>\n    //============== MA =================\n    SMA10 = sma(close, 10)\n    SMA20 = sma(close, 20)\n    SMA30 = sma(close, 30)\n    SMA50 = sma(close, 50)\n    SMA100 = sma(close, 100)\n    SMA200 = sma(close, 200)\n    \n    EMA10 = ema(close, 10)\n    EMA20 = ema(close, 20)\n    EMA30 = ema(close, 30)\n    EMA50 = ema(close, 50)\n    EMA100 = ema(close, 100)\n    EMA200 = ema(close, 200)\n    \n    HullMA9 = hma(close, 9)\n    \n    // Volume Weighted Moving Average (VWMA)\n    VWMA = vwma(close, 20)\n    \n    [IC_CLine, IC_BLine, IC_Lead1, IC_Lead2] = ichimoku_cloud()\n    \n    // ======= Other =============\n    // Relative Strength Index, RSI\n    RSI = rsi(close,14)\n    \n    // Stochastic\n    lengthStoch = 14\n    smoothKStoch = 3\n    smoothDStoch = 3\n    kStoch = sma(stoch(close, high, low, lengthStoch), smoothKStoch)\n    dStoch = sma(kStoch, smoothDStoch)\n    \n    // Commodity Channel Index, CCI\n    CCI = cci(close, 20)\n    \n    // Average Directional Index\n    float adxValue = na, float adxPlus = na, float adxMinus = na\n    [P, M, V] = dmi(14, 14)\n    adxValue := V\n    adxPlus := P\n    adxMinus := M\n    // Awesome Oscillator\n    ao = AO()\n    \n    // Momentum\n    Mom = mom(close, 10)\n    // Moving Average Convergence/Divergence, MACD\n    [macdMACD, signalMACD, _] = macd(close, 12, 26, 9)\n    // Stochastic RSI\n    [Stoch_RSI_K, Stoch_RSI_D] = StochRSI()\n    // Williams Percent Range\n    WR = wpr(14)\n    \n    // Bull / Bear Power\n    BullPower = high - ema(close, 13)\n    BearPower = low - ema(close, 13)\n    // Ultimate Oscillator\n    UO = uo(7,14,28)\n    if not na(UO)\n        UO := UO * 100\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    \n    PriceAvg = ema(close, 50)\n    DownTrend = close < PriceAvg\n    UpTrend = close > PriceAvg\n    // calculate trading recommendation based on SMA/EMA\n    float ratingMA = 0\n    float ratingMAC = 0\n    \n    if not na(SMA10)\n        ratingMA := ratingMA + calcRatingMA(SMA10, close)\n        ratingMAC := ratingMAC + 1\n    if not na(SMA20)\n        ratingMA := ratingMA + calcRatingMA(SMA20, close)\n        ratingMAC := ratingMAC + 1\n    if not na(SMA30)\n        ratingMA := ratingMA + calcRatingMA(SMA30, close)\n        ratingMAC := ratingMAC + 1\n    if not na(SMA50)\n        ratingMA := ratingMA + calcRatingMA(SMA50, close)\n        ratingMAC := ratingMAC + 1\n    if not na(SMA100)\n        ratingMA := ratingMA + calcRatingMA(SMA100, close)\n        ratingMAC := ratingMAC + 1\n    if not na(SMA200)\n        ratingMA := ratingMA + calcRatingMA(SMA200, close)\n        ratingMAC := ratingMAC + 1\n    if not na(EMA10)\n```\n\n----------------------------------------\n\nTITLE: Initializing 3Commas Bot DCA Backtester Strategy in Pine Script\nDESCRIPTION: Strategy initialization with settings for DCA backtesting including pyramiding for multiple orders, commission settings, slippage, and initial capital. This forms the foundation for the entire DCA strategy backtesting system.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Bot DCA Backtester & Signals FREE.txt#2025-04-23_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\n// © FriendOfTheTrend\n\n//@version=5\nstrategy('3Commas Bot DCA Backtester & Signals FREE', shorttitle=\"3Commas Bot DCA Backtester & Signals FREE\", overlay=true, precision=2, pyramiding=51, \n calc_on_every_tick=true, backtest_fill_limits_assumption=1, default_qty_type=strategy.fixed, currency=currency.USD, slippage=1, commission_type=strategy.commission.percent,\n commission_value=.05, process_orders_on_close=true, initial_capital=26000, margin_long=100, margin_short=100)\n```\n\n----------------------------------------\n\nTITLE: Implementing Trading Strategy with Base and Safety Orders in Pine Script\nDESCRIPTION: This code implements a trading strategy with initialization, entry and exit rules. It handles initialization of variables, calculation of backtesting window, deal start conditions based on different signal types (RSI or TradingView presets), placing base orders and safety orders, and managing take profit and stop loss conditions including trailing take profit functionality.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Backtesting 3commas DCA Bot v2.txt#2025-04-23_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\n// ----------------------------------\n// (Re-)Initialize\n// ----------------------------------\nvar max_amount = max_amount_for_bot_usage()\nvar max_dev = max_deviation()\ninit_price := na(init_price) and within_window() ? open : init_price\nlatest_price := within_window() ? close : latest_price\n\n// Actualize the start and end time of the backtesting window because number of bars is limited.\n// NOTE: limits on number of available bars:\n//      TradingView FREE account: 5000 bars available,\n//      TradingView PRO/PRO+ account: 10000 bars available,\n//      TradingView PREMIUM account: 20000 bars available.\nstart_time_actual := barstate.isfirst and time > start_time_actual ?  time : start_time_actual\nend_time_actual := time > end_time_actual and time <= end_time ? time : end_time_actual\n\n\nif strategy.position_size == 0.0\n    ttp_extremum := 0.0\n    ttp_active := false\n    deal_start_condition := false\n\n// ----------------------------------\n// Open deal with Base Order on Deal Start Condition\n// ----------------------------------\n[dsc_rsi, bo_level_rsi] = security(syminfo.tickerid, dsc_res, rsi_signal())\n[dsc_ta, bo_level_ta] = security(syminfo.tickerid, dsc_res, ta_presets_signal())\n\n\n\nif(strategy.opentrades == 0 and within_window() and close > 0 and strategy.equity > 0.0)\n    // Compute deal start condition\n    if dsc == \"Start ASAP\"\n        deal_start_condition := true\n        bo_level := close\n    if dsc == \"RSI-7\"\n        deal_start_condition := dsc_rsi\n        bo_level := bo_level_rsi\n    if dsc == \"TV presets\"\n        deal_start_condition := dsc_ta\n        bo_level := bo_level_ta\n\n    // Place Buy Order\n    if deal_start_condition\n        deal_counter := deal_counter + 1\n        if IS_LONG\n            strategy.entry(\"BO\", limit=bo_level, long=strategy.long, qty=base_order_size()/bo_level)\n        else\n            strategy.entry(\"BO\", limit=bo_level, long=strategy.short, qty=base_order_size()/bo_level)\n\n        last_so_level := bo_level\n\n        // Place Safety Orders\n        if max_safe_order > 0\n            for index = 1 to max_safe_order\n                so_level := safety_order_price(index, last_so_level)\n                so_name = \"SO\" + tostring(index) \n                if IS_LONG\n                    strategy.entry(so_name, long=strategy.long, limit=so_level, qty=safety_order_qty(index)/so_level)\n                else\n                    strategy.entry(so_name, long=strategy.short, limit=so_level, qty=safety_order_qty(index)/so_level)\n                last_so_level := so_level\n\n// ----------------------------------\n// Close Deal on SL, TP or TTP\n// ----------------------------------\nif abs(strategy.position_size) > 0\n    take_profit_factor = IS_LONG ? (1 + take_profit) : (1 - take_profit)\n    stop_loss_factor = IS_LONG ? (1 - stop_loss) : (1 + stop_loss)\n    ttp_factor = IS_LONG ? (1 - ttp) : (1 + ttp)\n    stop_level := bo_level * stop_loss_factor\n    if take_profit_type == \"% from total volume\"\n        take_profit_level := strategy.position_avg_price * take_profit_factor\n    else\n        take_profit_level := bo_level * take_profit_factor\n\n    // Stop Loss\n    stop_loss_on_bar := false\n    if stop_loss > max_dev and not ttp_active\n        if IS_LONG and low < stop_level\n            stop_loss_counter := stop_loss_counter + 1\n            strategy.exit(id=\"x\", stop=stop_level, comment=\"SL\")\n            stop_loss_on_bar := true\n        else if not IS_LONG and high > stop_level\n            stop_loss_counter := stop_loss_counter + 1\n            strategy.exit(id=\"x\", stop=stop_level, comment=\"SL\")\n            stop_loss_on_bar := true\n    if not stop_loss_on_bar\n        if ttp == 0.0\n            // Simple take profit\n            strategy.exit(id=\"x\", limit=take_profit_level, comment=\"TP\")\n        else\n            // Trailing take profit\n            if IS_LONG and high >= take_profit_level \n                ttp_extremum := max(high, ttp_extremum)\n                ttp_active := true\n            if not IS_LONG and low <= take_profit_level\n                ttp_extremum := min(low, ttp_extremum)\n                ttp_active := true\n            if ttp_active \n                ttp_level := ttp_extremum * ttp_factor\n```\n\n----------------------------------------\n\nTITLE: Creating Strategy Statistics Dashboard in Pine Script\nDESCRIPTION: This code generates a comprehensive statistics dashboard that displays the trading strategy's performance metrics including open/closed deals, profitability, and win rate. It dynamically updates the display based on whether trades are active or completed.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_44\n\nLANGUAGE: pinescript\nCODE:\n```\nif i_show_stats_table\n    int rowsforstats = array.size(statsarray_safety_orders) + 25\n    table sostats = table.new(position.top_right, columns=2, rows=rowsforstats, frame_width=1, frame_color=color.black)\n\n    _row = 0\n    table.cell(sostats, column=0, row=_row, text='QFL Backtester ' + str.tostring(syminfo.basecurrency) + ' / ' + str.tostring(syminfo.currency), text_halign=text.align_left, text_size=size.small, text_color=color.white, bgcolor=get_bg_color_orange())\n    table.cell(sostats, column=1, row=_row, text='', text_size=size.small, text_color=color.white, bgcolor=get_bg_color_orange())\n    _row := _row + 1\n\n    table.cell(sostats, column=0, row=_row, text='Status:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n    if _deal_in_progress\n        table.cell(sostats, column=1, row=_row, text='Deal in progress', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_red())\n    else if stats_deals_started == 0 and stats_deals_finished == 0\n        table.cell(sostats, column=1, row=_row, text='No deals', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_red())\n    else\n        table.cell(sostats, column=1, row=_row, text='All deals closed', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_green())\n    _row := _row + 1\n\n\n    table.cell(sostats, column=0, row=_row, text='Open deals:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n    if stats_deals_started - stats_deals_finished == 0\n        table.cell(sostats, column=1, row=_row, text='0', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_green())\n    else\n        _current_deal_total_value = strategy.position_size * strategy.position_avg_price\n        _current_deal_actual_value = strategy.position_size * close\n        float _current_deal_equity_percent = 0\n        if IS_LONG\n            _current_deal_equity_percent := _current_deal_actual_value * 100 / _current_deal_total_value - 100\n            _current_deal_equity_percent\n        else\n            _current_deal_equity_percent := 100 - _current_deal_actual_value * 100 / _current_deal_total_value\n\n        _text0 = str.tostring(stats_deals_started - stats_deals_finished) + ' deal\\n'\n        _text0 := _text0 + str.tostring(math.round(strategy.openprofit, i_decimals)) + ' ' + str.tostring(syminfo.currency)\n        _text0 := _text0 + ' (' + str.tostring(math.round(_current_deal_equity_percent, 2)) + '%)\\n'\n        _text0 := _text0 + str.tostring(get_timespan_string(c_dealstart_bar_time, time_close)) + ', currently at SO ' + str.tostring(count_executed_safety_orders+1) + '\\n'\n        _text0 := _text0 + '(start: ' + str.tostring(time_to_date_string(c_dealstart_bar_time)) + ')'\n        table.cell(sostats, column=1, row=_row, text=_text0, text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_red())\n    _row := _row + 1\n\n    table.cell(sostats, column=0, row=_row, text='Finished deals:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n    table.cell(sostats, column=1, row=_row, text=str.tostring(stats_deals_finished), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n    _row := _row + 1\n\n\n    table.cell(sostats, column=0, row=_row, text='Winning deals:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n    if stats_deals_take_profit_finished == 0\n        table.cell(sostats, column=1, row=_row, text=str.tostring(array.size(statsarray_winning_deals_pnl)), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n    else\n        _text5 = ''\n        _text5 := _text5 + str.tostring(stats_deals_take_profit_finished)\n        _text5 := _text5 + ' (' + str.tostring(math.round(array.avg(statsarray_winning_deals_pnl), i_decimals))\n        _text5 := _text5 + ' ' + str.tostring(syminfo.currency) + ' on avg)'\n```\n\n----------------------------------------\n\nTITLE: Setting DCA Bot Parameters for Backtesting in Pine Script\nDESCRIPTION: Configuration of critical DCA bot parameters including stop-loss, take-profit percentages, average down percentages, volume multipliers, maximum number of orders, and base order size. These settings control how the DCA mechanism will respond to market changes.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Bot DCA Backtester & Signals FREE.txt#2025-04-23_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\n//Inputs\nstoplossOn = input.bool(false, title=\"Stoploss On\", group=\"DCA Bot Settings\")\nstoploss = input.float(5, title=\"Stoploss %\", minval=.0001, step=.001, group=\"DCA Bot Settings\")/100\ntakeProfit = input.float(.5, title=\"Take Profit %\", minval=.0001, step=.001, group=\"DCA Bot Settings\")/100\navgDown = input.float(.5, title=\"Average Down %\", minval=.0001, step=.001, group=\"DCA Bot Settings\")/100\npercentScale = input.float(1.2, title=\"Avg Down % Multiplier\", minval=.0001, step=.001, group=\"DCA Bot Settings\")\nmultiplier = input.float(1.5, title=\"Volume Multiplier\", minval=1, step=.001, tooltip=\"Increasing this value above 1 will multiply each new orders volume by the amount you input. This makes your buys bigger every time you average down so you don't need as big of a bounce when it recovers to get out in profit.\", group=\"DCA Bot Settings\")\nmaxOrders = input.int(12, title=\"Max # Of Orders\", group=\"DCA Bot Settings\")\nquantity = input.float(100, title=\"Size Of Base Order\", minval=.000000001, step=.000000001, group=\"DCA Bot Settings\")\n```\n\n----------------------------------------\n\nTITLE: Implementing 3Commas DCA Strategy in Pine Script v5\nDESCRIPTION: A complete trading strategy script that implements Dollar Cost Averaging (DCA) with configurable parameters for base order size, safety orders, take profit, and stop loss. The strategy uses moving average crossovers for entry signals and visualizes safety order levels on the chart.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Visible DCA Strategy.txt#2025-04-23_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\n// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\n// © MGTG\n\n//@version=5\nStrategy = input.string('Long', options=['Long'], group='Strategy', inline='1',\n tooltip='Long bots profit when asset prices rise, Short bots profit when asset prices fall'\n + '\\n\\n' + 'Please note: to run a Short bot on a spot exchange account, you need to own the asset you want to trade. The bot will sell the asset at the current chart price and buy it back at a lower price - the profit made is actually trapped equity released from an asset you own that is declining in value.')\n\nProfit_currency = input.string('Quote (USDT)', 'Profit currency', options=['Quote (USDT)', 'Quote (BTC)', 'Quote (BUSD)'], group='Strategy', inline='1')\nBase_order_size = input.int(10, 'Base order Size', group='Strategy', inline='2', \n tooltip='The Base Order is the first order the bot will create when starting a new deal.')\nSafety_order_size = input.int(20, 'Safety order Size', group='Strategy', inline='2',\n tooltip=\"Enter the amount of funds your Safety Orders will use to Average the cost of the asset being traded, this can help your bot to close deals faster with more profit. Safety Orders are also known as Dollar Cost Averaging and help when prices moves in the opposite direction to your bot's take profit target.\")\n\nTriger_Type = input.string('Over', 'Entry at Cross Over / Under', options=['Over', 'Under'], group='Deal start condition > Trading View custom signal', inline='1',\n tooltip='Deal start condition decision')\n\nShort_Moving_Average  = input.string('SMA', 'Short Moving Average', group='Deal start condition > Trading View custom signal', inline='2',\n options=[\"SMA\", \"EMA\", \"HMA\"])\nShort_Period         = input.int(5, 'Period', group='Deal start condition > Trading View custom signal', inline='2')\nLong_Moving_Average  = input.string('HMA', 'Long Moving Average', group='Deal start condition > Trading View custom signal', inline='3',\n options=[\"SMA\", \"EMA\", \"HMA\"])\n\nLong_Period          = input.int(50, 'Period', group='Deal start condition > Trading View custom signal', inline='3')\n\nTarget_profit = input.float(1.5, 'Target profit (%)', step=0.05, group='Take profit / Stop Loss', inline='1') * 0.01\nStop_Loss = input.int(15, 'Stop Loss (%)', group='Take profit / Stop Loss', inline='1',\n tooltip='This is the percentage that price needs to move in the opposite direction to your take profit target, at which point the bot will execute a Market Order on the exchange account to close the deal for a smaller loss than keeping the deal open.'\n + '\\n' + 'Please note, the Stop Loss is calculated from the price the Safety Order at on the exchange account and not the Dollar Cost Average price.') * 0.01\n\nMax_safety_trades_count = input.int(10, 'Max safety trades count', maxval=10, group='Safety orders', inline='1')\nPrice_deviation = input.float(0.4, 'Price deviation to open safety orders (% from initial order)', step=0.01, group='Safety orders', inline='2') * 0.01\nSafety_order_volume_scale = input.float(1.8, 'Safety order volume scale', step=0.01, group='Safety orders', inline='3')\nSafety_order_step_scale = input.float(1.19, 'Safety order step scale', step=0.01, group='Safety orders', inline='3')\n\ninitial_capital = 8913\n\nstrategy(\n title='3Commas Visible DCA Strategy', \n overlay=true, \n initial_capital=initial_capital, \n pyramiding=11, \n process_orders_on_close=true, \n commission_type=strategy.commission.percent, \n commission_value=0.01, \n max_bars_back=5000, \n max_labels_count=50)\n\n// Position\nstatus_none  = strategy.position_size == 0\nstatus_long  = strategy.position_size[1] == 0 and strategy.position_size > 0\nstatus_long_offset  = strategy.position_size[2] == 0 and strategy.position_size[1] > 0\nstatus_short = strategy.position_size[1] == 0 and strategy.position_size < 0\nstatus_increase = strategy.opentrades[1] < strategy.opentrades\n\nShort_Moving_Average_Line = \n Short_Moving_Average == 'SMA' ? ta.sma(close, Short_Period) :\n Short_Moving_Average == 'EMA' ? ta.ema(close, Short_Period) :\n Short_Moving_Average == 'HMA' ? ta.sma(close, Short_Period) : na\n\nLong_Moving_Average_Line = \n Long_Moving_Average == 'SMA' ? ta.sma(close, Long_Period) :\n Long_Moving_Average == 'EMA' ? ta.ema(close, Long_Period) :\n Long_Moving_Average == 'HMA' ? ta.sma(close, Long_Period) : na\n \nBase_order_Condition      = Triger_Type == \"Over\" ? ta.crossover(Short_Moving_Average_Line, Long_Moving_Average_Line) : ta.crossunder(Short_Moving_Average_Line, Long_Moving_Average_Line) // Buy when close crossing lower band\nsafety_order_deviation(index) => Price_deviation * math.pow(Safety_order_step_scale,  index - 1)\n\npd = Price_deviation\nss = Safety_order_step_scale\n\nstep(i) =>\n i == 1 ? pd :\n i == 2 ? pd + pd * ss :\n i == 3 ? pd + (pd + pd * ss) * ss :\n i == 4 ? pd + (pd + (pd + pd * ss) * ss) * ss : \n i == 5 ? pd + (pd + (pd + (pd + pd * ss) * ss) * ss) * ss : \n i == 6 ? pd + (pd + (pd + (pd + (pd + pd * ss) * ss) * ss) * ss) * ss : \n i == 7 ? pd + (pd + (pd + (pd + (pd + (pd + pd * ss) * ss) * ss) * ss) * ss) * ss : \n i == 8 ? pd + (pd + (pd + (pd + (pd + (pd + (pd + pd * ss) * ss) * ss) * ss) * ss) * ss) * ss : \n i == 9 ? pd + (pd + (pd + (pd + (pd + (pd + (pd + (pd + pd * ss) * ss) * ss) * ss) * ss) * ss) * ss) * ss : \n i == 10 ? pd + (pd + (pd + (pd + (pd + (pd + (pd + (pd + (pd + pd * ss) * ss) * ss) * ss) * ss) * ss) * ss) * ss) * ss : na\n\nlong_line(i) =>\n close[1] - close[1] * (step(i))\n\n\nSafe_order_line(i) =>\n i == 0 ? ta.valuewhen(status_long, long_line(0), 0) :\n i == 1 ? ta.valuewhen(status_long, long_line(1), 0) :\n i == 2 ? ta.valuewhen(status_long, long_line(2), 0) :\n i == 3 ? ta.valuewhen(status_long, long_line(3), 0) :\n i == 4 ? ta.valuewhen(status_long, long_line(4), 0) :\n i == 5 ? ta.valuewhen(status_long, long_line(5), 0) :\n i == 6 ? ta.valuewhen(status_long, long_line(6), 0) :\n i == 7 ? ta.valuewhen(status_long, long_line(7), 0) :\n i == 8 ? ta.valuewhen(status_long, long_line(8), 0) : \n i == 9 ? ta.valuewhen(status_long, long_line(9), 0) :\n i == 10 ? ta.valuewhen(status_long, long_line(10), 0) : na\n\nTP_line = strategy.position_avg_price * (1 + Target_profit) \nSL_line = Safe_order_line(Max_safety_trades_count) * (1 - Stop_Loss)\nsafety_order_size(i) => Safety_order_size * math.pow(Safety_order_volume_scale, i - 1)\n\nplot(Short_Moving_Average_Line, 'Short MA', color=color.new(color.white, 0), style=plot.style_line)\nplot(Long_Moving_Average_Line, 'Long MA', color=color.new(color.green, 0), style=plot.style_line)\nplot(strategy.position_size > 0 and Max_safety_trades_count >= 1 ? Safe_order_line(1) : na, 'Safety order1', color=color.new(#009688, 0), style=plot.style_linebr)\nplot(strategy.position_size > 0 and Max_safety_trades_count >= 2 ? Safe_order_line(2) : na, 'Safety order2', color=color.new(#009688, 0), style=plot.style_linebr)\nplot(strategy.position_size > 0 and Max_safety_trades_count >= 3 ? Safe_order_line(3) : na, 'Safety order3', color=color.new(#009688, 0), style=plot.style_linebr)\nplot(strategy.position_size > 0 and Max_safety_trades_count >= 4 ? Safe_order_line(4) : na, 'Safety order4', color=color.new(#009688, 0), style=plot.style_linebr)\nplot(strategy.position_size > 0 and Max_safety_trades_count >= 5 ? Safe_order_line(5) : na, 'Safety order5', color=color.new(#009688, 0), style=plot.style_linebr)\nplot(strategy.position_size > 0 and Max_safety_trades_count >= 6 ? Safe_order_line(6) : na, 'Safety order6', color=color.new(#009688, 0), style=plot.style_linebr)\nplot(strategy.position_size > 0 and Max_safety_trades_count >= 7 ? Safe_order_line(7) : na, 'Safety order7', color=color.new(#009688, 0), style=plot.style_linebr)\nplot(strategy.position_size > 0 and Max_safety_trades_count >= 8 ? Safe_order_line(8) : na, 'Safety order8', color=color.new(#009688, 0), style=plot.style_linebr)\nplot(strategy.position_size > 0 and Max_safety_trades_count >= 9 ? Safe_order_line(9) : na, 'Safety order9', color=color.new(#009688, 0), style=plot.style_linebr)\nplot(strategy.position_size > 0 and Max_safety_trades_count >= 10 ? Safe_order_line(10) : na, 'Safety order10', color=color.new(#009688, 0), style=plot.style_linebr)\nplot(strategy.position_size > 0 ? TP_line : na, 'Take Profit', color=color.new(color.orange, 0), style=plot.style_linebr)\nplot(strategy.position_size > 0 ? SL_line : na, 'Safety', color=color.new(color.aqua, 0), style=plot.style_linebr)\n\ncurrency = \n Profit_currency == 'Quote (USDT)' ? ' USDT' :\n Profit_currency == 'Quote (BTC)'  ? ' BTC' :\n Profit_currency == 'Quote (BUSD)' ? ' BUSD' : na\n\nif Base_order_Condition\n    strategy.entry('Base order', strategy.long, qty=Base_order_size/close, when=Base_order_Condition and strategy.opentrades == 0,\n     comment='BO' + ' - ' + str.tostring(Base_order_size) + str.tostring(currency))\n\nfor i = 1 to Max_safety_trades_count by 1\n    i_s = str.tostring(i)\n    strategy.entry('Safety order' + i_s, strategy.long, qty=safety_order_size(i)/close,\n     limit=Safe_order_line(i), when=(strategy.opentrades <= i) and strategy.position_size > 0 and not(strategy.position_size == 0), \n     comment='SO' + i_s + ' - ' + str.tostring(safety_order_size(i))  + str.tostring(currency))\n\nfor i = 1 to Max_safety_trades_count by 1\n    i_s = str.tostring(i)\n    strategy.cancel('Safety order' + i_s, when=status_none)\n    strategy.exit('TP/SL','Base order', limit=TP_line, stop=SL_line, comment = Safe_order_line(100) > close ? 'SL' + i_s + ' - ' +  str.tostring(Base_order_size) + str.tostring(currency) : 'TP' + i_s + ' - ' +  str.tostring(Base_order_size) + str.tostring(currency)) \n    strategy.exit('TP/SL','Safety order' + i_s, limit=TP_line, stop=SL_line, comment = Safe_order_line(100) > close ? 'SL' + i_s + ' - ' +  str.tostring(safety_order_size(i)) + str.tostring(currency) : 'TP' + i_s + ' - ' +  str.tostring(safety_order_size(i)) + str.tostring(currency)) \n```\n\n----------------------------------------\n\nTITLE: Creating Status Display Table in Pine Script\nDESCRIPTION: Creates a multi-row table showing trading statistics including deal status, winning/losing trades, profit calculations and buy & hold comparisons. Uses color coding to highlight different states and formats numbers with proper currency symbols.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_35\n\nLANGUAGE: pine\nCODE:\n```\ntable.cell(sostats, column=0, row=_row, text='Zendog DCA Backtester ' + str.tostring(syminfo.basecurrency) + ' / ' + str.tostring(syminfo.currency), text_halign=text.align_left, text_size=size.small, text_color=color.white, bgcolor=get_bg_color_blue())\ntable.cell(sostats, column=1, row=_row, text='', text_size=size.small, text_color=color.white, bgcolor=get_bg_color_blue())\n_row := _row + 1\n\ntable.cell(sostats, column=0, row=_row, text='Status:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\nif _deal_in_progress\n    table.cell(sostats, column=1, row=_row, text='Deal in progress', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_red())\nelse if stats_deals_started == 0 and stats_deals_finished == 0\n    table.cell(sostats, column=1, row=_row, text='No deals', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_red())\nelse\n    table.cell(sostats, column=1, row=_row, text='All deals closed', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_green())\n```\n\n----------------------------------------\n\nTITLE: Managing Open Deals and Safety Orders in TradeLEXX Strategy\nDESCRIPTION: Handles the logic for managing open deals, including updating base order details, placing safety orders, and setting stop loss/take profit levels. Supports both percentage-based and external indicator-based safety orders.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_20\n\nLANGUAGE: pinescript\nCODE:\n```\n// if we are in a deal\nif is_deal_started() and not was_deal_marked_as_finished()\n    \n    // ------------------------\n    // ONLY BO WAS EXECUTED\n    // If the only executed order is BO, overwrite SL price and BO price and size based on executed values \n    // taken from stragey.xxx variables\n    if strategy.opentrades == 1 and not glb_so_orders_placed\n        glb_so_orders_placed        := true\n        glb_base_order_price        := strategy.position_avg_price\n        glb_base_order_qty          := strategy.position_size\n        \n        count_executed_safety_orders:= 0\n        \n        glb_debug_text += \"BO: \"+str.tostring(math.round(glb_base_order_qty, cfg_decimals))+\" * \"+\n         str.tostring(math.round(glb_base_order_price, cfg_decimals))+\"=\"+str.tostring(glb_base_order_qty * glb_base_order_price)+\"\\n\"\n\n        // place all Percentage SO orders as limit orders\n        if cfg_max_safety_orders > 0 and safety_order_type == 'Percentage'\n            for _so_number = 1 to cfg_max_safety_orders\n                _next_so_price      = next_so_price(_so_number, glb_base_order_price)\n                _next_so_qty        = next_so_qty(_so_number, glb_base_order_price)\n                _next_so_size_usd   = next_so_size_usd(_so_number)\n                \n                //place safety order as limit order\n        \n                // ----------------------------\n                // I guess there is no reason to send human readeable alerts to the bot, so this section\n                // is commented out. Feel free to re-use this if your are interested in sending notifications at\n                // the same time the strategy order triggers (otherwise notifications are delayed until the next candle)\n                // ----------------------------\n        \n                // _alert = \"D\"+tostring(stats_deals_started)+\"-SO\"+tostring(_so_number)+\" (\"+\n                //  tostring(syminfo.basecurrency)+\"_\"+tostring(syminfo.currency)+\n                //   (cfg_strategy_type==\"long\"?\" LONG\":\" SHORT\") + \") | \"+\n                //   tostring(_next_so_qty*_next_so_price)+\" \"+tostring(syminfo.currency)\n                // strategy.entry(id=\"D\"+tostring(stats_deals_started)+\"-SO\" + tostring(_so_number),\n                //   long=IS_LONG, qty=_next_so_qty, limit=_next_so_price, alert_message=_alert)\n        \n                glb_debug_text += \"SO\"+str.tostring(_so_number)+\": \"+str.tostring(math.round(_next_so_qty, cfg_decimals))+\"*\"+\n                 str.tostring(math.round(_next_so_price, cfg_decimals))+\"=\"+str.tostring(_next_so_qty * _next_so_price)+\"\\n\"\n    \n                if cfg_enable_bot_control and cfg_exec_safety_order\n                    _alert_json = get_3cbot_addfundsinquote_json(_next_so_size_usd)\n                    strategy.entry(id='D' + str.tostring(stats_deals_started) + '-SO' + str.tostring(_so_number), \n                     direction=IS_LONG ? strategy.long : strategy.short, qty=_next_so_qty, limit=_next_so_price, alert_message=_alert_json)\n                else\n                    strategy.entry(id='D' + str.tostring(stats_deals_started) + '-SO' + str.tostring(_so_number), \n                     direction=IS_LONG ? strategy.long : strategy.short, qty=_next_so_qty, limit=_next_so_price)\n\n            //used for plot\n            glb_next_safety_order_price := next_so_price(1, glb_base_order_price)\n            \n        // create SL order as limit\n        if valid_stop_loss()\n            glb_stop_loss_price := stop_loss_price(glb_base_order_price)\n            \n            glb_debug_text += \"SL: \"+str.tostring(glb_stop_loss_price)+\"\\n\"\n            \n            if cfg_enable_bot_control and cfg_exec_stop_loss\n                _alert_json = get_3cbot_stopdeal_json()\n                strategy.exit(id='D' + str.tostring(stats_deals_started) + '-SL', stop=glb_stop_loss_price, \n                 when=is_deal_started(), alert_message=_alert_json)\n            else\n                // ----------------------------\n                // I guess there is no reason to send human readeable alerts to the bot, so this section\n                // is commented out. Feel free to re-use this if your are interested in sending notifications at\n                // the same time the strategy order triggers (otherwise notifications are delayed until the next candle)\n                // ----------------------------\n        \n                // _alert_human = \"D\"+tostring(stats_deals_started)+\"-SL (\"+\n                //  tostring(syminfo.basecurrency)+\"_\"+tostring(syminfo.currency)+\n                //   (cfg_strategy_type==\"long\"?\" LONG\":\" SHORT\")+\") \"\n                // strategy.exit(id=\"D\"+tostring(stats_deals_started)+\"-SL\",\n                //   stop=glb_stop_loss_price, when=is_deal_started(), alert_message=_alert_human)\n        \n                strategy.exit(id='D' + str.tostring(stats_deals_started) + '-SL', stop=glb_stop_loss_price, when=is_deal_started())\n\n    \n    // ------------------------\n    // AT LEAST ONE SAFETY ORDER (PERCENTAGE) WAS EXECUTED IN THE MEANTIME\n    // Update statistics and send alerts\n    if strategy.opentrades > (count_executed_safety_orders + 1) and safety_order_type == 'Percentage'\n\n        for _i = count_executed_safety_orders+1 to strategy.opentrades\n            _next_so_price  = next_so_price(_i, glb_base_order_price)\n            _next_so_qty    = next_so_qty(_i, glb_base_order_price)\n            //delayed alert about previous SO execution\n            _alert_human = 'D' + str.tostring(stats_deals_started) + '-SO' + str.tostring(_i) + ' [delayed] (' +\n             str.tostring(syminfo.basecurrency) + '_' + str.tostring(syminfo.currency) + \n              (cfg_strategy_type == 'long' ? ' LONG' : ' SHORT') + ') | ' + \n               str.tostring(_next_so_price * _next_so_qty) + ' ' + str.tostring(syminfo.currency)\n            alert(_alert_human, alert.freq_once_per_bar_close)\n    \n        //update to current open trades\n        count_executed_safety_orders    := (strategy.opentrades - 1)\n        \n        //for visual plot\n        if count_executed_safety_orders < cfg_max_safety_orders\n            glb_next_safety_order_price := next_so_price(count_executed_safety_orders+1, glb_base_order_price)\n        else if count_executed_safety_orders == cfg_max_safety_orders\n            glb_next_safety_order_price := na\n\n\n    // ------------------------\n    // SAFETY ORDER FROM EXTERNAL INDICATOR\n    // Place safety order as market order at current close\n    if safety_order_type == 'External Indicator' and safety_order_condition == true and count_executed_safety_orders < cfg_max_safety_orders\n        count_executed_safety_orders    := count_executed_safety_orders + 1\n        _next_so_size_usd                = next_so_size_usd(count_executed_safety_orders)\n        _next_so_qty                     = _next_so_size_usd / close\n        \n        if cfg_enable_bot_control and cfg_exec_safety_order\n            _alert_json = get_3cbot_addfundsinquote_json(_next_so_size_usd)\n            strategy.entry(id='D' + str.tostring(stats_deals_started) + '-SO' + str.tostring(count_executed_safety_orders), \n             direction=IS_LONG ? strategy.long : strategy.short, qty=_next_so_qty, alert_message=_alert_json)\n        else\n            strategy.entry(id='D' + str.tostring(stats_deals_started) + '-SO' + str.tostring(count_executed_safety_orders), \n             direction=IS_LONG ? strategy.long : strategy.short, qty=_next_so_qty)\n\n        _alert_human = 'D' + str.tostring(stats_deals_started) + '-SO' + str.tostring(count_executed_safety_orders) + ' (' +\n         str.tostring(syminfo.basecurrency) + '_' + str.tostring(syminfo.currency) + \n          (cfg_strategy_type == 'long' ? ' LONG' : ' SHORT') + ') | ' + \n           str.tostring(_next_so_size_usd) + ' ' + str.tostring(syminfo.currency)\n        alert(_alert_human, alert.freq_once_per_bar_close)\n    \n\n    \n    // ------------------------\n    // GENERAL UPDATES FOR EACH CANDLE\n    // TAKE PROFIT\n    // Recalculate TP price based on current strategy.position_avg_price \n    // and strategy.position_size and UPDATE ORDER\n    \n    if deal_end_type == \"Take Profit\"\n        glb_take_profit_price := take_profit_price()\n        \n        //Place or update TP order\n        if cfg_enable_bot_control and cfg_exec_take_profit\n            _alert_json = get_3cbot_stopdeal_json()\n            strategy.order(id='D' + str.tostring(stats_deals_started) + '-TP', limit=glb_take_profit_price, \n             direction=IS_LONG ? strategy.short : strategy.long, qty=math.abs(strategy.position_size), \n              when=is_deal_started(), alert_message=_alert_json)\n        else\n            // ----------------------------\n            // I guess there is no reason to send human readeable alerts to the bot, so this section\n            // is commented out. Feel free to re-use this if your are interested in sending notifications at\n            // the same time the strategy order triggers (otherwise notifications are delayed until the next candle)\n            // ----------------------------\n        \n            // _alert_human = \"D\"+tostring(stats_deals_started)+\"-TP (\"\n```\n\n----------------------------------------\n\nTITLE: Tracking Deal Statistics and Maximum Drawdown in Pine Script\nDESCRIPTION: Maintains statistics for the current trading deal, including position size, average price, maximum drawdown, and largest price deviation from the base order. Updates these values for each new candle to track performance metrics.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_35\n\nLANGUAGE: pine\nCODE:\n```\n// ------------------------\n// GENERAL STATISTICS\n\n//save these variables for pushing stats after the deal is finished\nc_current_deal_position_size  := strategy.position_size\nc_current_deal_avg_price      := strategy.position_avg_price\n\n//stats for max drawndown\nif strategy.openprofit < stats_max_drawdown\n    stats_max_drawdown                  := strategy.openprofit\n    stats_max_drawdown_equity_percent   := get_current_drawdown_equity()\n    //approx\n    stats_max_drawdown_time             := time\n\n\n// Biggest drop vs base order price\n_current_dev_vs_bo_price = get_current_dev_vs_bo_price()\nif _current_dev_vs_bo_price < stats_biggest_dev\n    stats_biggest_dev       := _current_dev_vs_bo_price\n    //approx\n    stats_biggest_dev_time  := time\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Technical Indicator Buy Signals in Pine Script\nDESCRIPTION: Calculation of technical indicators (MACD, MFI, RSI, and Stochastic RSI) and their corresponding buy signals based on the selected strategy. Each indicator is configured to trigger buy signals according to specific criteria.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Bot DCA Backtester & Signals FREE.txt#2025-04-23_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\n//Buy Signals\nbuy = false\n\n//MACD\nfastMa = ta.sma(close, 12)\nslowMa = ta.sma(close, 26)\nmacd = fastMa - slowMa\nsignal = ta.sma(macd, 9)\n\nif  strategy == \"MACD\" and ta.crossover(macd, signal)\n    buy := true\n\n//MFI\nmfi = ta.mfi(close, strategyLength)\n\nif strategy == \"MFI\" and mfi <= strategyLevelTrigger\n    buy := true\n\n//RSI\nrsi = ta.rsi(close, strategyLength)\n\nif strategy == \"RSI\" and rsi <= strategyLevelTrigger\n    buy := true\n\n//Stochastic RSI\nsmoothK = 3\nsmoothD = 3\nlengthRSI = 14\nlengthStoch = 14\nrsi1 = ta.rsi(close, lengthRSI)\nk = ta.sma(ta.stoch(rsi1, rsi1, rsi1, lengthStoch), smoothK)\nd = ta.sma(k, smoothD)\n\nif  strategy == \"Stochastic RSI\" and ta.crossover(k, d)\n    buy := true\n```\n\n----------------------------------------\n\nTITLE: Active Deal Management in Pine Script\nDESCRIPTION: Logic for managing an active deal, including placing safety orders and stop loss orders. Updates internal tracking variables, calculates order prices and quantities, and executes appropriate orders with alerts.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_30\n\nLANGUAGE: pine\nCODE:\n```\n// if we are in a deal\nif is_deal_started() and not was_deal_marked_as_finished()\n    \n    // ------------------------\n    // ONLY BO WAS EXECUTED\n    // If the only executed order is BO, overwrite SL price and BO price and size based on executed values \n    // taken from stragey.xxx variables\n    if strategy.opentrades == 1 and not c_so_orders_placed\n        c_so_orders_placed        := true\n        c_base_order_price        := strategy.position_avg_price\n        c_base_order_qty          := strategy.position_size\n        \n        count_executed_safety_orders:= 0\n        \n        c_debug_text += \"BO: \"+str.tostring(math.round(c_base_order_qty, i_decimals))+\" * \"+\n         str.tostring(math.round(c_base_order_price, i_decimals))+\"=\"+str.tostring(c_base_order_qty * c_base_order_price)+\"\\n\"\n\n        // place all Percentage SO orders as limit orders\n        if i_max_safety_orders > 0 \n            for _so_number = 1 to i_max_safety_orders\n                _next_so_price      = next_so_price(_so_number, c_base_order_price)\n                _next_so_qty        = next_so_qty(_so_number, c_base_order_price)\n                _next_so_size_usd   = next_so_size_usd(_so_number)\n                \n\n        \n                c_debug_text += \"SO\"+str.tostring(_so_number)+\": \"+str.tostring(math.round(_next_so_qty, i_decimals))+\"*\"+\n                 str.tostring(math.round(_next_so_price, i_decimals))+\"=\"+str.tostring(_next_so_qty * _next_so_price)+\"\\n\"\n    \n                if i_enable_bot_control and i_exec_safety_order\n                    _alert_json = get_3cbot_addfundsinquote_json(_next_so_size_usd)\n                    strategy.entry(id='D' + str.tostring(stats_deals_started) + '-SO' + str.tostring(_so_number), \n                     direction=IS_LONG ? strategy.long : strategy.short, qty=_next_so_qty, limit=_next_so_price, alert_message=_alert_json)\n                else\n                    strategy.entry(id='D' + str.tostring(stats_deals_started) + '-SO' + str.tostring(_so_number), \n                     direction=IS_LONG ? strategy.long : strategy.short, qty=_next_so_qty, limit=_next_so_price)\n\n            //used for plot\n            c_next_safety_order_price := next_so_price(1, c_base_order_price)\n            \n        // create SL order as limit\n        if valid_stop_loss()\n            c_stop_loss_price := stop_loss_price(c_base_order_price)\n            \n            c_debug_text += \"SL: \"+str.tostring(c_stop_loss_price)+\"\\n\"\n            \n            if i_enable_bot_control and i_exec_stop_loss\n                _alert_json = get_3cbot_stopdeal_json()\n                strategy.exit(id='D' + str.tostring(stats_deals_started) + '-SL', stop=c_stop_loss_price, \n                 when=is_deal_started(), alert_message=_alert_json)\n            else\n\n        \n                strategy.exit(id='D' + str.tostring(stats_deals_started) + '-SL', stop=c_stop_loss_price, when=is_deal_started())\n\n    \n    // ------------------------\n    // AT LEAST ONE SAFETY ORDER (PERCENTAGE) WAS EXECUTED IN THE MEANTIME\n    // Update statistics and send alerts\n    if strategy.opentrades > (count_executed_safety_orders + 1)\n\n        for _i = count_executed_safety_orders+1 to strategy.opentrades\n            _next_so_price  = next_so_price(_i, c_base_order_price)\n```\n\n----------------------------------------\n\nTITLE: Order Size and Position Management Functions - Pine Script\nDESCRIPTION: Core functions for calculating order quantities, checking position status, and managing trade lifecycle\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_14\n\nLANGUAGE: pine\nCODE:\n```\nnext_so_qty(so_index, _bo_price) =>\n    float _next_so_size_usd = next_so_size_usd(so_index)\n    float _next_so_qty = _next_so_size_usd / next_so_price(so_index, _bo_price)\n\nis_planb_timeout() =>\n    _res = false\n    if na(glb_dealstart_bar_time) == false\n        if time - glb_dealstart_bar_time >= glb_planb_timeout\n            _res := true\n    else\n        _res := false\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Results Table in Pine Script\nDESCRIPTION: This code creates a table to display strategy results, including configuration details, performance metrics, and comparison to buy-and-hold strategy. It uses the previously defined add_line function to populate the table with formatted data.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Backtesting 3commas DCA Bot v2.txt#2025-04-23_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\n// Making the results table\nvar results_table  = table.new(position.top_right, 2, 20, frame_color=color.black)\ncurr_row = -1\nNone = int(na)\ncurr_row += 1, add_line(results_table, curr_row, \"Bot setup\", None, false)\nif (array.size(warnings) > 0)\n    for index = 1 to array.size(warnings)\n        curr_row += 1\n        add_line(results_table, curr_row, \"Please review your strategy settings\", array.pop(warnings), true)\ncurr_row += 1, add_line(results_table, curr_row, \"Dates\", pretty_date(start_time_actual) + \" to \" + pretty_date(end_time_actual), false)\ncurr_row += 1, add_line(results_table, curr_row, \"Deal Start Condition\", dsc, false)\ncurr_row += 1, add_line(results_table, curr_row, \"Base and Safety Orders\", \"BO: \" + tostring(base_order, currency_format()) + \" \" + (order_size_type == \"Fixed\" ? \"\" : \"% \") + syminfo.currency + \" / \" + \"SO: \" + tostring(safe_order, currency_format()) + \" \" + (order_size_type == \"Fixed\" ? \"\" : \"% \") + syminfo.currency, false)\ncurr_row += 1, add_line(results_table, curr_row, \"Price Deviation\", tostring(price_deviation, \"#.##%\"), false)\ncurr_row += 1, add_line(results_table, curr_row, \"Safe Order Scale\", \"Volume: \" + tostring(safe_order_volume_scale) + \" / Scale: \" + tostring(safe_order_step_scale), false)\ncurr_row += 1, add_line(results_table, curr_row, \"Take Profit / Stop Loss\", tostring(take_profit, \"#.##%\") + (ttp > 0.0 ?  \"( Trailing: \" + tostring(ttp, \"#.##%\") + \")\" : \"\") + \"/ \" + (stop_loss > 0.0 ? tostring(stop_loss, \"#.##%\") : \"No Stop Loss\"), false)\ncurr_row += 1, add_line(results_table, curr_row, \"Max Amount For Bot Usage\", tostring(max_amount, currency_format()) + \" \" + syminfo.currency, false)\ncurr_row += 1, add_line(results_table, curr_row, \"Max Coverage\", tostring(max_safe_order) + \" Safety Orders / \" + tostring(max_dev, \"#.##%\"), false)\ncurr_row += 1, add_line(results_table, curr_row, \"Summary\", None, false)\ncurr_row += 1, add_line(results_table, curr_row, \"Initial Capital\", tostring(strategy.initial_capital, currency_format()) + \" \" + syminfo.currency, false)\ncurr_row += 1, add_line(results_table, curr_row, \"Final Capital\",   tostring(max(strategy.equity, 0.0), currency_format()) + \" \" + syminfo.currency, false)\ncurr_row += 1, add_line(results_table, curr_row, \"Net Result\",      tostring(profit, currency_format()) + \" \" + syminfo.currency + \" (\" +  tostring(profit_pct, \"#.##%\") + \")\", false)\ncurr_row += 1, add_line(results_table, curr_row, \"Total Deals\",     tostring(deal_counter), false)\nif stop_loss > 0.0\n    curr_row += 1, add_line(results_table, curr_row, \"Deals Closed on Stop Loss\", tostring(stop_loss_counter), false)\nif IS_LONG\n    buy_hold_profit = (latest_price - init_price) / init_price * strategy.initial_capital\n    buy_hold_profit_pct = buy_hold_profit / strategy.initial_capital\n    ratio = profit_pct / buy_hold_profit_pct\n    curr_row += 1, add_line(results_table, curr_row, \"Comparison to Buy-And-Hold\",                      None, false)\n    curr_row += 1, add_line(results_table, curr_row, \"Net Result for Buy-and-hold\",                     tostring(buy_hold_profit, currency_format()) + \" \" + syminfo.currency + \" (\" +  tostring(buy_hold_profit_pct, \"#.##%\") + \")\", false)\n    curr_row += 1, add_line(results_table, curr_row, \"(Bot Performance) / (Buy-and-hold Performance)\",  tostring(ratio, \"#.###\"), false)\n```\n\n----------------------------------------\n\nTITLE: Executing Base Order in TradeLEXX Strategy with Bot Control\nDESCRIPTION: Handles the entry of base orders with optional 3Commas bot integration. Sends alert messages and executes trades based on configuration settings.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_19\n\nLANGUAGE: pinescript\nCODE:\n```\nif cfg_enable_bot_control and cfg_exec_deal_start\n    _alert_json = get_3cbot_startdeal_json()\n    strategy.entry(id='D' + str.tostring(stats_deals_started) + '-BO', direction=IS_LONG ? strategy.long : strategy.short, \n     qty=glb_base_order_qty, alert_message=_alert_json)\n    alert(_alert_human, alert.freq_once_per_bar_close)\nelse\n    strategy.entry(id='D' + str.tostring(stats_deals_started) + '-BO', direction=IS_LONG ? strategy.long : strategy.short, \n     qty=glb_base_order_qty)\n    alert(_alert_human, alert.freq_once_per_bar_close)\n```\n\n----------------------------------------\n\nTITLE: Safety Order Calculation Functions\nDESCRIPTION: Implements helper functions for calculating safety order prices, sizes, and deviations based on configured parameters.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_15\n\nLANGUAGE: pine\nCODE:\n```\nstepped_deviation(so_index) =>\n    float _stepped_deviation = 0\n    if so_index > 0\n        for _i = 1 to so_index by 1\n            _stepped_deviation := _stepped_deviation + i_safety_order_price_deviation_perc * math.pow(i_safety_order_price_step_scale, _i - 1)\n    else\n        _stepped_deviation := 0\n\nnext_so_price(so_index, _bo_price) =>\n    float _stepped_deviation = stepped_deviation(so_index)\n    if IS_LONG\n        float _next_so_price = _bo_price * (1 - _stepped_deviation / 100)\n    else\n        float _next_so_price = _bo_price * (1 + _stepped_deviation / 100)\n```\n\n----------------------------------------\n\nTITLE: Plotting Trade Levels and Statistics in Pine Script Trading Bot\nDESCRIPTION: This code handles the visualization of key price levels for the trading strategy. It plots take profit, deal average price, safety orders, stop loss, and plan-B levels with appropriate colors and fills the areas between them to indicate risk/reward zones.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_27\n\nLANGUAGE: pine\nCODE:\n```\n// ----------------------\n// PLOT STUFF\n_color_avg_price = theme_text_color\n_color_take_profit = get_bg_color_green(90)\nif is_planb_timeout() and cfg_planb_action != 'none'\n    _color_avg_price := get_bg_color_lightblue()\n\nif is_planb_timeout() and cfg_planb_action == 'close deal'\n    _color_take_profit := get_bg_color_green(100)\n\n\np1 = plot(glb_take_profit_price, color=get_bg_color_green(), style=plot.style_circles, title='Take Profit')\np2 = plot(strategy.position_avg_price, color=theme_text_color, style=plot.style_circles, title='Deal avg price')\np3 = plot(glb_next_safety_order_price, color=get_bg_color_orange(), style=plot.style_circles, title='Safety order')\np4 = plot(glb_stop_loss_price, color=get_bg_color_red(), style=plot.style_circles, title='Stop loss')\np5 = plot(glb_planb_timeout_price, color=get_bg_color_lightblue(), style=plot.style_circles, title='PLAN-B')\n\n\nfill(p1, p2, color=_color_take_profit, title='Fill take profit')\nfill(p2, p3, color=get_bg_color_orange(90), title='Fill safety order')\nfill(p2, p5, color=get_bg_color_lightblue(90), title='Fill PLAN-B')\n\n// Normally fill stop loss from last so price\nfill(p3, p4, color=get_bg_color_red(90), title='Fill stop loss')\n\n// If SO are not configured or all SO were executed fill SL from AVG PRICE\n_col = (cfg_max_safety_orders == 0 or na(glb_next_safety_order_price)) ? get_bg_color_red(90) : get_bg_color_red(100)\nfill(p2, p4, color=_col, title='Fill stop loss')\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Buy Orders with Dynamic Position Sizing in Pine Script\nDESCRIPTION: Implements a series of buy orders with increasing position sizes and decreasing entry prices. Each order is executed based on the number of open trades and maximum allowed orders, with dynamic quantity multipliers and percentage-based price reductions.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Bot DCA Backtester & Signals FREE.txt#2025-04-23_snippet_11\n\nLANGUAGE: pine\nCODE:\n```\nif strategy.opentrades == 14 and maxOrders >= 15\n    strategy.entry(\"Bull #1\", strategy.long, qty=quantMultiplied14, limit=strategy.opentrades.entry_price(0) * (1 - avgDown13),\n     comment=\"Buy #15 \" + str.tostring(avgDown13 * 100, format.percent))\n\nif strategy.opentrades == 15 and maxOrders >= 16\n    strategy.entry(\"Bull #1\", strategy.long, qty=quantMultiplied15, limit=strategy.opentrades.entry_price(0) * (1 - avgDown14),\n     comment=\"Buy #16 \" + str.tostring(avgDown14 * 100, format.percent))\n\n// ... [Similar pattern continues for orders 17-51]\n\n// Exit Long Position\nstoplossPrice = 0.0\nif stoplossOn and strategy.opentrades == maxOrders\n    stoplossPrice := strategy.opentrades.entry_price(maxOrders - 1) * (1 - stoploss)\n```\n\n----------------------------------------\n\nTITLE: Calculating Technical Analysis Signals from Multiple Indicators in Pine Script\nDESCRIPTION: This code calculates a composite technical rating by evaluating multiple technical indicators including various EMAs, Hull MA, VWMA, Ichimoku Cloud, RSI, Stochastic, CCI, ADX, Awesome Oscillator, Momentum, MACD, Stochastic RSI, Williams %R, Bull/Bear Power, and Ultimate Oscillator. Each indicator contributes to an overall rating that determines the trading signal direction.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Backtesting 3commas DCA Bot v2.txt#2025-04-23_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\nratingMA := ratingMA + calcRatingMA(EMA10, close)\nratingMAC := ratingMAC + 1\nif not na(EMA20)\n    ratingMA := ratingMA + calcRatingMA(EMA20, close)\n    ratingMAC := ratingMAC + 1\nif not na(EMA30)\n    ratingMA := ratingMA + calcRatingMA(EMA30, close)\n    ratingMAC := ratingMAC + 1\nif not na(EMA50)\n    ratingMA := ratingMA + calcRatingMA(EMA50, close)\n    ratingMAC := ratingMAC + 1\nif not na(EMA100)\n    ratingMA := ratingMA + calcRatingMA(EMA100, close)\n    ratingMAC := ratingMAC + 1\nif not na(EMA200)\n    ratingMA := ratingMA + calcRatingMA(EMA200, close)\n    ratingMAC := ratingMAC + 1\n\nif not na(HullMA9)\n    ratingHullMA9 = calcRatingMA(HullMA9, close)\n    ratingMA := ratingMA + ratingHullMA9\n    ratingMAC := ratingMAC + 1\n\nif not na(VWMA)\n    ratingVWMA = calcRatingMA(VWMA, close)\n    ratingMA := ratingMA + ratingVWMA\n    ratingMAC := ratingMAC + 1\n\nfloat ratingIC = na\nif not (na(IC_Lead1) or na(IC_Lead2) or na(close) or na(close[1]) or na(IC_BLine) or na(IC_CLine))\n    ratingIC := calcRating(\n     IC_Lead1 > IC_Lead2 and close > IC_Lead1 and close < IC_BLine and close[1] < IC_CLine and close > IC_CLine,\n     IC_Lead2 > IC_Lead1 and close < IC_Lead2 and close > IC_BLine and close[1] > IC_CLine and close < IC_CLine)\nif not na(ratingIC)\n    ratingMA := ratingMA + ratingIC\n    ratingMAC := ratingMAC + 1\n\nratingMA := ratingMAC > 0 ? ratingMA / ratingMAC : na\n\nfloat ratingOther = 0\nfloat ratingOtherC = 0\n\nratingRSI = RSI\nif not(na(ratingRSI) or na(ratingRSI[1]))\n    ratingOtherC := ratingOtherC + 1\n    ratingOther := ratingOther + calcRating(ratingRSI < 30 and ratingRSI[1] < ratingRSI, ratingRSI > 70 and ratingRSI[1] > ratingRSI)\n\nif not(na(kStoch) or na(dStoch) or na(kStoch[1]) or na(dStoch[1]))\n    ratingOtherC := ratingOtherC + 1\n    ratingOther := ratingOther + calcRating(kStoch < 20 and dStoch < 20 and kStoch > dStoch and kStoch[1] < dStoch[1], kStoch > 80 and dStoch > 80 and kStoch < dStoch and kStoch[1] > dStoch[1])\n\nratingCCI = CCI\nif not(na(ratingCCI) or na(ratingCCI[1]))\n    ratingOtherC := ratingOtherC + 1\n    ratingOther := ratingOther + calcRating(ratingCCI < -100 and ratingCCI > ratingCCI[1], ratingCCI > 100 and ratingCCI < ratingCCI[1])\n\nif not(na(adxValue) or na(adxPlus[1]) or na(adxMinus[1]) or na(adxPlus) or na(adxMinus))\n    ratingOtherC := ratingOtherC + 1\n    ratingOther := ratingOther + calcRating(adxValue > 20 and adxPlus[1] < adxMinus[1] and adxPlus > adxMinus, adxValue > 20 and adxPlus[1] > adxMinus[1] and adxPlus < adxMinus)\n\nif not(na(ao) or na(ao[1]))\n    ratingOtherC := ratingOtherC + 1\n    ratingOther := ratingOther + calcRating(crossover(ao,0) or (ao > 0 and ao[1] > 0 and ao > ao[1] and ao[2] > ao[1]), crossunder(ao,0) or (ao < 0 and ao[1] < 0 and ao < ao[1] and ao[2] < ao[1]))\n\nif not(na(Mom) or na(Mom[1]))\n    ratingOtherC := ratingOtherC + 1\n    ratingOther := ratingOther + calcRating(Mom > Mom[1], Mom < Mom[1])\n\nif not(na(macdMACD) or na(signalMACD))\n    ratingOtherC := ratingOtherC + 1\n    ratingOther := ratingOther + calcRating(macdMACD > signalMACD, macdMACD < signalMACD)\n\nfloat ratingStoch_RSI = na\nif not(na(DownTrend) or na(UpTrend) or na(Stoch_RSI_K) or na(Stoch_RSI_D) or na(Stoch_RSI_K[1]) or na(Stoch_RSI_D[1]))\n    ratingStoch_RSI := calcRating(\n     DownTrend and Stoch_RSI_K < 20 and Stoch_RSI_D < 20 and Stoch_RSI_K > Stoch_RSI_D and Stoch_RSI_K[1] < Stoch_RSI_D[1],\n     UpTrend and Stoch_RSI_K > 80 and Stoch_RSI_D > 80 and Stoch_RSI_K < Stoch_RSI_D and Stoch_RSI_K[1] > Stoch_RSI_D[1])\nif not na(ratingStoch_RSI)\n    ratingOtherC := ratingOtherC + 1\n    ratingOther := ratingOther + ratingStoch_RSI\n\nfloat ratingWR = na\nif not(na(WR) or na(WR[1]))\n    ratingWR := calcRating(WR < -80 and WR > WR[1], WR > -20 and WR < WR[1])\nif not na(ratingWR)\n    ratingOtherC := ratingOtherC + 1\n    ratingOther := ratingOther + ratingWR\n\nfloat ratingBBPower = na\nif not(na(UpTrend) or na(DownTrend) or na(BearPower) or na(BearPower[1]) or na(BullPower) or na(BullPower[1]))\n    ratingBBPower := calcRating(\n     UpTrend and BearPower < 0 and BearPower > BearPower[1],\n     DownTrend and BullPower > 0 and BullPower < BullPower[1])\nif not na(ratingBBPower)\n    ratingOtherC := ratingOtherC + 1\n    ratingOther := ratingOther + ratingBBPower\n\nfloat ratingUO = na\nif not(na(UO))\n    ratingUO := calcRating(UO > 70, UO < 30)\nif not na(ratingUO)\n    ratingOtherC := ratingOtherC + 1\n    ratingOther := ratingOther + ratingUO\n\nratingOther := ratingOtherC > 0 ? ratingOther / ratingOtherC : na\n\nfloat ratingTotal = 0\nfloat ratingTotalC = 0\nif not na(ratingMA)\n    ratingTotal := ratingTotal + ratingMA\n    ratingTotalC := ratingTotalC + 1\nif not na(ratingOther)\n    ratingTotal := ratingTotal + ratingOther\n    ratingTotalC := ratingTotalC + 1\nratingTotal := ratingTotalC > 0 ? ratingTotal / ratingTotalC : na\n\n// little piece of @rouxam logic\nvar bool start_condition = false\nfloat bound = dsc_technicals == \"Strong\" ? 0.5 : 0.1\nif IS_LONG\n    start_condition := ratingTotal > bound\nelse\n    start_condition := ratingTotal < -bound\n[start_condition, close]\n```\n\n----------------------------------------\n\nTITLE: Processing Deal PnL Calculation in Pine Script\nDESCRIPTION: Calculates and records the profit and loss for completed deals. This snippet extracts PnL data from the strategy, updates running totals, and categorizes trades as winning or losing for statistical purposes.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_38\n\nLANGUAGE: pine\nCODE:\n```\n        // Extracting PNL. This is different calculation for each deal close type\n        c_current_deal_pnl        := strategy.netprofit - c_strategy_prev_netprofit\n        c_strategy_prev_netprofit := strategy.netprofit\n\n        //executes on open price\n        c_current_deal_close_value    := c_current_deal_position_size * open\n        c_total_volume                := c_total_volume + c_current_deal_close_value\n\n\n\n        if c_current_deal_pnl >= 0\n            array.push(statsarray_winning_deals_pnl, c_current_deal_pnl)\n        else\n            array.push(statsarray_losing_deals_pnl, c_current_deal_pnl)\n\n        //increase SO array as well but also a separate that holds timeout deals count\n        array.set(statsarray_safety_orders, count_executed_safety_orders, array.get(statsarray_safety_orders, count_executed_safety_orders) + 1)\n        array.set(statsarray_safety_orders_timeout, count_executed_safety_orders, array.get(statsarray_safety_orders_timeout, count_executed_safety_orders) + 1)\n```\n\n----------------------------------------\n\nTITLE: Processing Deal Completion and Recording Statistics in Pine Script\nDESCRIPTION: Handles the completion of a deal by canceling open orders, updating statistics, and recording performance metrics. Different logic paths handle stop loss and take profit completions, with appropriate updates to volume, PnL, and trade counters.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_37\n\nLANGUAGE: pine\nCODE:\n```\n//reset variables for next trade and push stats\nif condition_to_cancel_open_orders\n\n    strategy.cancel_all(when=condition_to_cancel_open_orders)\n    \n    //common stats for all cases\n    stats_deals_finished    := stats_deals_finished + 1\n\n    //add to Total Volume the curernt deal VOLUME up to this point (without exit order)\n    c_total_volume        := c_total_volume + (c_current_deal_position_size * c_current_deal_avg_price)\n\n    _current_days_in_deal = get_days(c_dealstart_bar_time, time)\n    array.push(statsarray_no_of_bars, bar_index - c_dealstart_bar_index)\n    array.push(statsarray_no_of_days, _current_days_in_deal)\n\n    if stats_max_days_in_deal <= _current_days_in_deal\n        stats_max_days_in_deal := _current_days_in_deal\n        //approx\n        stats_max_days_in_deal_start_time := c_dealstart_bar_time\n        stats_max_days_in_deal_close_time := time\n\n    \n    //statistics that are specific to each close type\n    if condition_stop_loss\n        stats_deals_stop_loss_finished  := stats_deals_stop_loss_finished + 1\n\n        // Extracting PNL. This is different calculation for each deal close type\n        c_current_deal_pnl        := strategy.netprofit - c_strategy_prev_netprofit\n        c_strategy_prev_netprofit := strategy.netprofit\n\n        c_current_deal_close_value    := c_current_deal_position_size * c_stop_loss_price\n        c_total_volume                := c_total_volume + c_current_deal_close_value\n\n        array.push(statsarray_losing_deals_pnl, c_current_deal_pnl)\n\n        if i_show_pnl_labels\n            label.new(bar_index, c_stop_loss_price, text=str.tostring(math.round(c_current_deal_pnl, i_decimals)) + \n             '  ' + str.tostring(syminfo.currency) + '\\n' + get_timespan_string(c_dealstart_bar_time, time), \n              yloc=yloc.price, size=size.normal, style=label.style_label_down, textcolor=color.black, color=get_bg_color_red())\n\n        //delayed alert about deal close by stop loss\n        _alert_human = 'D' + str.tostring(stats_deals_started) + '-SL [delayed] (' + str.tostring(syminfo.basecurrency) + \n         '_' + str.tostring(syminfo.currency) + (i_strategy_type == 'long' ? ' LONG' : ' SHORT') + ') | ' + \n          str.tostring(math.round(c_current_deal_pnl, i_decimals)) + ' ' + str.tostring(syminfo.currency) + \n           ' | ' + get_timespan_string(c_dealstart_bar_time, time)\n        alert(_alert_human, alert.freq_once_per_bar_close)\n```\n\n----------------------------------------\n\nTITLE: Base Order Entry Logic in Pine Script\nDESCRIPTION: Logic for executing a base order when a signal is detected. Initializes deal tracking variables, calculates order quantity, and executes the trade with appropriate alerts or bot control messages if enabled.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_29\n\nLANGUAGE: pine\nCODE:\n```\n//condition for base order\nif timeFilterApproval and signal and not is_deal_started() and was_deal_marked_as_finished()\n\n    //stats for the first deal\n    if firstdeal_started == false\n        firstdeal_started       := true\n        firstdeal_bar_index     := bar_index\n        firstdeal_start_price   := close\n        firstdeal_start_time    := time\n        init_stats_array_safety_orders()\n\n    c_still_in_deal           := true\n    stats_deals_started         := stats_deals_started + 1\n    c_dealstart_bar_index     := bar_index\n    c_dealstart_bar_time      := time\n\n    // Adjust c_strategy_prev_netprofit before starting a new deal if different than the pine script strategy\n    // This solves a bug when pine script sells at a sligthly different price than the close price.\n    // Case was found when closing deal from external indicator\n    if c_strategy_prev_netprofit != strategy.netprofit\n        c_strategy_prev_netprofit := strategy.netprofit\n\n\n    //how many coins\n    c_base_order_qty := i_base_order_size_usd / close\n\n    //This value will be overwritten with the actual executed market price on the next candle\n    c_base_order_price := close\n\n    // enter with market order because with limit order the open of next candle might be a bit different \n    // than close of current candle and the deal might not start\n\n    _alert_human = 'D' + str.tostring(stats_deals_started) + '-BO (' + str.tostring(syminfo.basecurrency) + '-' + \n     str.tostring(syminfo.currency) + (i_strategy_type == 'long' ? ' LONG' : ' SHORT') + ') | ' + \n      str.tostring(c_base_order_qty * c_base_order_price) + ' ' + str.tostring(syminfo.currency)\n\n    if i_enable_bot_control and i_exec_deal_start\n        _alert_json = get_3cbot_startdeal_json()\n        strategy.entry(id='D' + str.tostring(stats_deals_started) + '-BO', direction=IS_LONG ? strategy.long : strategy.short, \n         qty=c_base_order_qty, alert_message=_alert_json)\n        alert(_alert_human, alert.freq_once_per_bar_close)\n    else\n        strategy.entry(id='D' + str.tostring(stats_deals_started) + '-BO', direction=IS_LONG ? strategy.long : strategy.short, \n         qty=c_base_order_qty)\n        alert(_alert_human, alert.freq_once_per_bar_close)\n```\n\n----------------------------------------\n\nTITLE: Implementing Deal End Conditions with External Indicators\nDESCRIPTION: Logic for determining when to exit a trading deal based on external indicator signals. The conditions evaluate if the indicator equals, exceeds, or falls below a specified threshold value using a configurable comparison operator.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\n//--------- DEAL END CONDITION -----------\nif deal_end_type == 'External Indicator' and deal_end_value != -99999 and deal_end_operation == '=' and external_indicator == deal_end_value\n    deal_end_condition := true\nelse if deal_end_type == 'External Indicator' and deal_end_value != -99999 and deal_end_operation == '<=' and external_indicator <= deal_end_value\n    deal_end_condition := true\nelse if deal_end_type == 'External Indicator' and deal_end_value != -99999 and deal_end_operation == '>=' and external_indicator >= deal_end_value\n    deal_end_condition := true\nelse\n    deal_end_condition := false\n//-----------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Calculating Order Quantity with Volume Multiplier for DCA in Pine Script\nDESCRIPTION: Calculation of order quantities for each potential DCA order using the volume multiplier parameter. This scales order sizes for subsequent DCA orders, allowing more efficient averaging down with increasing position sizes.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Bot DCA Backtester & Signals FREE.txt#2025-04-23_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\n// Order Quantity Adjustments With Volume Multiplier\nquantityConverted = quantity/close\nquantMultiplied1 = quantityConverted * multiplier\nquantMultiplied2 = quantMultiplied1 * multiplier\nquantMultiplied3 = quantMultiplied2 * multiplier\nquantMultiplied4 = quantMultiplied3 * multiplier\nquantMultiplied5 = quantMultiplied4 * multiplier\nquantMultiplied6 = quantMultiplied5 * multiplier\nquantMultiplied7 = quantMultiplied6 * multiplier\nquantMultiplied8 = quantMultiplied7 * multiplier\nquantMultiplied9 = quantMultiplied8 * multiplier\nquantMultiplied10 = quantMultiplied9 * multiplier\nquantMultiplied11 = quantMultiplied10 * multiplier\nquantMultiplied12 = quantMultiplied11 * multiplier\nquantMultiplied13 = quantMultiplied12 * multiplier\nquantMultiplied14 = quantMultiplied13 * multiplier\nquantMultiplied15 = quantMultiplied14 * multiplier\nquantMultiplied16 = quantMultiplied15 * multiplier\nquantMultiplied17 = quantMultiplied16 * multiplier\nquantMultiplied18 = quantMultiplied17 * multiplier\nquantMultiplied19 = quantMultiplied18 * multiplier\nquantMultiplied20 = quantMultiplied19 * multiplier\nquantMultiplied21 = quantMultiplied20 * multiplier\nquantMultiplied22 = quantMultiplied21 * multiplier\nquantMultiplied23 = quantMultiplied22 * multiplier\nquantMultiplied24 = quantMultiplied23 * multiplier\nquantMultiplied25 = quantMultiplied24 * multiplier\nquantMultiplied26 = quantMultiplied25 * multiplier\nquantMultiplied27 = quantMultiplied26 * multiplier\nquantMultiplied28 = quantMultiplied27 * multiplier\nquantMultiplied29 = quantMultiplied28 * multiplier\nquantMultiplied30 = quantMultiplied29 * multiplier\nquantMultiplied31 = quantMultiplied30 * multiplier\nquantMultiplied32 = quantMultiplied31 * multiplier\nquantMultiplied33 = quantMultiplied32 * multiplier\nquantMultiplied34 = quantMultiplied33 * multiplier\nquantMultiplied35 = quantMultiplied34 * multiplier\nquantMultiplied36 = quantMultiplied35 * multiplier\nquantMultiplied37 = quantMultiplied36 * multiplier\nquantMultiplied38 = quantMultiplied37 * multiplier\nquantMultiplied39 = quantMultiplied38 * multiplier\nquantMultiplied40 = quantMultiplied39 * multiplier\nquantMultiplied41 = quantMultiplied40 * multiplier\nquantMultiplied42 = quantMultiplied41 * multiplier\nquantMultiplied43 = quantMultiplied42 * multiplier\nquantMultiplied44 = quantMultiplied43 * multiplier\nquantMultiplied45 = quantMultiplied44 * multiplier\nquantMultiplied46 = quantMultiplied45 * multiplier\nquantMultiplied47 = quantMultiplied46 * multiplier\nquantMultiplied48 = quantMultiplied47 * multiplier\nquantMultiplied49 = quantMultiplied48 * multiplier\nquantMultiplied50 = quantMultiplied49 * multiplier\n```\n\n----------------------------------------\n\nTITLE: Generating Step Table for Trading Strategy in Pine Script\nDESCRIPTION: This snippet creates a detailed table showing buying steps, volumes, and prices for the trading strategy. It calculates and displays information for base orders and safety orders.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_31\n\nLANGUAGE: pine\nCODE:\n```\nif cfg_show_step_table\n    if cfg_steps_bo_price == 0 or na(cfg_steps_bo_price)\n        cfg_steps_bo_price := close\n        \n    _steps_bo_size = cfg_base_order_size_usd / cfg_steps_bo_price\n\n    table steps_amount = table.new(position.bottom_left, columns=12, rows=int(cfg_max_safety_orders) + 4, frame_width=1, frame_color=color.black, border_width=1, border_color=color.black, bgcolor=color.green)\n    table.cell(steps_amount, 0, 0, 'Order\\nno', text_color=color.white, text_size=size.small)\n    table.cell(steps_amount, 1, 0, 'Deviation\\n( % )', text_color=color.white, text_size=size.small)\n    table.cell(steps_amount, 2, 0, 'Size\\n( ' + str.tostring(syminfo.basecurrency) + ' )', text_color=color.white, text_size=size.small)\n    table.cell(steps_amount, 3, 0, 'Volume\\n( ' + str.tostring(syminfo.currency) + ' )', text_color=color.white, text_size=size.small)\n    table.cell(steps_amount, 4, 0, 'Price\\n( ' + str.tostring(syminfo.currency) + ' )', text_color=color.white, text_size=size.small)\n    table.cell(steps_amount, 5, 0, 'Avg price\\n( ' + str.tostring(syminfo.currency) + ' )', text_color=color.white, text_size=size.small)\n    \n    table.cell(steps_amount, 6, 0, 'Price for TP\\n( ' + str.tostring(syminfo.currency) + ' )', text_color=color.white, text_size=size.small)\n    table.cell(steps_amount, 7, 0, '% change\\nfor TP', text_color=color.white, text_size=size.small)\n    table.cell(steps_amount, 8, 0, '% change\\nfor BEP', text_color=color.white, text_size=size.small)\n    \n    table.cell(steps_amount, 9, 0, 'Total size\\n( ' + str.tostring(syminfo.basecurrency) + ' )', text_color=color.white, text_size=size.small)\n    table.cell(steps_amount, 10, 0, 'Total Vol\\n( ' + str.tostring(syminfo.currency) + ' )', text_color=color.white, text_size=size.small)\n\n    float _steps_total_size = _steps_bo_size\n    float _steps_total_volume = cfg_steps_bo_price * _steps_bo_size\n\n    //base order\n    table.cell(steps_amount, 0, 1, 'BO', text_color=color.white, text_size=size.small)\n    table.cell(steps_amount, 1, 1, '0', text_color=color.white, text_size=size.small)\n    table.cell(steps_amount, 2, 1, str.tostring(math.round(_steps_bo_size, cfg_decimals)), text_color=color.white, text_size=size.small)\n    table.cell(steps_amount, 3, 1, str.tostring(math.round(cfg_steps_bo_price * _steps_bo_size, cfg_decimals)), text_color=color.white, text_size=size.small)\n    table.cell(steps_amount, 4, 1, str.tostring(math.round(cfg_steps_bo_price, cfg_decimals)), text_color=color.white, text_size=size.small)\n    table.cell(steps_amount, 5, 1, str.tostring(math.round(_steps_total_volume / _steps_total_size, cfg_decimals)), text_color=color.white, text_size=size.small)\n    \n    _req_price_for_tp = steps_required_price(cfg_steps_bo_price,  _steps_total_volume / _steps_total_size, _steps_total_size, cfg_take_profit_perc)\n    table.cell(steps_amount, 6, 1, str.tostring(math.round(_req_price_for_tp, cfg_decimals)), text_color=color.white, text_size=size.small)\n    table.cell(steps_amount, 7, 1, str.tostring(steps_required_percent(cfg_steps_bo_price, _req_price_for_tp)), text_color=color.white, text_size=size.small)\n    table.cell(steps_amount, 8, 1, str.tostring(steps_required_percent(cfg_steps_bo_price, cfg_steps_bo_price)), text_color=color.white, text_size=size.small)\n\n    table.cell(steps_amount, 9, 1, str.tostring(math.round(_steps_total_size, cfg_decimals)), text_color=color.white, text_size=size.small)\n    table.cell(steps_amount, 10, 1, str.tostring(_steps_total_volume), text_color=color.white, text_size=size.small)\n```\n\n----------------------------------------\n\nTITLE: Deal Completion Condition Checking\nDESCRIPTION: Implements priority-based checking of multiple deal completion conditions including stop loss, timeout, take profit and external indicators\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_23\n\nLANGUAGE: pine\nCODE:\n```\nif stop_loss_price_hit() and not is_deal_started() and not was_deal_marked_as_finished()\n    condition_stop_loss     := true\nelse if planb_price_hit() and is_planb_timeout() and cfg_planb_action == 'close deal'\n    condition_planb_timeout := true\nelse if deal_end_type == \"Take Profit\" and take_profit_price_hit() and not is_deal_started() and not was_deal_marked_as_finished()\n    condition_take_profit   := true\nelse if deal_end_type == 'External Indicator' and deal_end_condition == true and is_deal_started() and not was_deal_marked_as_finished()\n    condition_stop_external_indicator := true\n```\n\n----------------------------------------\n\nTITLE: Processing External Indicator Stop Condition in Pine Script Trading Bot\nDESCRIPTION: This code handles deal closure based on external indicator signals. It creates exit orders, updates statistics, calculates profits, and sends alerts. It includes both bot-control JSON alerts and human-readable notifications.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_25\n\nLANGUAGE: pine\nCODE:\n```\nelse if condition_stop_external_indicator\n    \n    // This order has to be placed after strategy.cancel_all(), otherwise it will get canceled as well\n    // It will get executed on the next bar open using market order\n    // Cancel TP order if any\n    if cfg_enable_bot_control and cfg_exec_external_indicator\n        _alert_json = get_3cbot_stopdeal_json()\n        strategy.order(id='D' + str.tostring(stats_deals_started) + '-EXT-IND', direction=IS_LONG ? strategy.short : strategy.long, \n         qty=math.abs(strategy.position_size), alert_message=_alert_json)\n    else\n        // ----------------------------\n        // I guess there is no reason to send human readable alerts to the bot, so this section\n        // is commented out. Feel free to re-use this if your are interested in sending notifications at\n        // the same time the strategy order triggers\n        // ----------------------------\n\n        // _alert_human = \"D\"+tostring(stats_deals_started)+\"-EXT-IND (\"+\n        //  tostring(syminfo.basecurrency)+\"_\"+tostring(syminfo.currency)+\n        //   (cfg_strategy_type==\"long\"?\" LONG\":\" SHORT\")+\") \"\n        // strategy.order(id='D' + str.tostring(stats_deals_started) + '-EXT-IND', direction=IS_LONG ? strategy.short : strategy.long, \n        //  qty=math.abs(strategy.position_size), alert_message=_alert_human)\n     \n        strategy.order(id='D' + str.tostring(stats_deals_started) + '-EXT-IND', direction=IS_LONG ? strategy.short : strategy.long, \n         qty=math.abs(strategy.position_size))\n\n    \n    \n     \n    array.set(statsarray_safety_orders, count_executed_safety_orders, array.get(statsarray_safety_orders, count_executed_safety_orders) + 1)\n    stats_deals_take_profit_finished    := stats_deals_take_profit_finished + 1\n\n    glb_current_deal_close_value    := glb_current_deal_position_size * close\n    glb_total_volume                := glb_total_volume + glb_current_deal_close_value\n    \n    // Extracting PNL before the deal is actually closed. Deal will get closed on \n    // the open of next candle\n    // This is different calculation for each deal close type\n    glb_current_deal_pnl            := strategy.openprofit - get_commission_for_volume(glb_current_deal_close_value)\n    \n    glb_strategy_prev_netprofit     := strategy.netprofit + glb_current_deal_pnl\n\n    \n    if glb_current_deal_pnl >= 0\n        array.push(statsarray_winning_deals_pnl, glb_current_deal_pnl)\n    else\n        array.push(statsarray_losing_deals_pnl, glb_current_deal_pnl)\n    \n    if cfg_show_pnl_labels\n        // _text  = '' + str.tostring(math.round(glb_current_deal_pnl, cfg_decimals)) + \n        //  '  ' + str.tostring(syminfo.currency) + '\\n' + get_timespan_string(glb_dealstart_bar_time, time) + '\\n'\n        // _text += 'strategy.netprofit: ' + str.tostring(strategy.netprofit) + '\\n'\n        // _text += 'glb_prevnetp: ' + str.tostring(glb_strategy_prev_netprofit) + '\\n'\n        // _text += 'strategy.openprofit: ' + str.tostring(strategy.openprofit) + '\\n'\n        // _text += 'glb_current_deal_pnl: ' + str.tostring(glb_current_deal_pnl) + '\\n'\n        // label.new(bar_index, close, text=\"EXT-IND\", tooltip=_text, yloc=yloc.price, textalign=text.align_left,\n        //  size=size.normal, style=label.style_label_up, textcolor=color.black, color=get_bg_color_orange())\n          \n        label.new(bar_index, close, text='' + str.tostring(math.round(glb_current_deal_pnl, cfg_decimals)) + \n         '  ' + str.tostring(syminfo.currency) + '\\n' + get_timespan_string(glb_dealstart_bar_time, time), \n          yloc=yloc.price, size=size.normal, style=label.style_label_up, textcolor=color.black, color=get_bg_color_orange())\n    \n    //delayed alert about deal close by take profit\n    _alert_human = 'D' + str.tostring(stats_deals_started) + '-EXT-IND [delayed] (' + str.tostring(syminfo.basecurrency) + '_' + \n     str.tostring(syminfo.currency) + (cfg_strategy_type == 'long' ? ' LONG' : ' SHORT') + ') | ' + \n      str.tostring(math.round(glb_current_deal_pnl, cfg_decimals)) + ' ' + str.tostring(syminfo.currency) + \n       ' | ' + get_timespan_string(glb_dealstart_bar_time, time)\n    alert(_alert_human, alert.freq_once_per_bar_close)\n```\n\n----------------------------------------\n\nTITLE: Initializing TradingView Strategy with Basic Configuration in Pine Script\nDESCRIPTION: Sets up the trading strategy with its title, overlay settings, and initial parameters including capital, commission type and pyramiding. This is the foundation for the entire strategy script.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\n//@Kveie\n//@version=5\nstrategy(title='3C QFL Mean reversal v3.1', shorttitle='3C QFL v3.1', \n overlay=true, max_labels_count=500, pyramiding=99, initial_capital=10000, \n  calc_on_order_fills=false, commission_type=strategy.commission.percent, commission_value=0.075)\n```\n\n----------------------------------------\n\nTITLE: Processing Take Profit Condition in Pine Script Trading Bot\nDESCRIPTION: Code that executes when a trade hits the take profit condition. It updates statistics, calculates profit, adds to winning deals array, displays profit labels, and sends alerts about the deal closure.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_24\n\nLANGUAGE: pine\nCODE:\n```\n//we consider that deal closed with any SO, if not closed with SL\nelse if condition_take_profit\n    array.set(statsarray_safety_orders, count_executed_safety_orders, array.get(statsarray_safety_orders, count_executed_safety_orders) + 1)\n    stats_deals_take_profit_finished    := stats_deals_take_profit_finished + 1\n\n    // Extracting PNL. This is different calculation for each deal close type\n    glb_current_deal_pnl        := strategy.netprofit - glb_strategy_prev_netprofit\n    glb_strategy_prev_netprofit := strategy.netprofit\n\n    glb_current_deal_close_value    := glb_current_deal_position_size * glb_take_profit_price\n    glb_total_volume                := glb_total_volume + glb_current_deal_close_value\n\n    array.push(statsarray_winning_deals_pnl, glb_current_deal_pnl)\n\n    if cfg_show_pnl_labels\n        label.new(bar_index, glb_take_profit_price, text='' + str.tostring(math.round(glb_current_deal_pnl, cfg_decimals)) + \n         '  ' + str.tostring(syminfo.currency) + '\\n' + get_timespan_string(glb_dealstart_bar_time, time), \n          yloc=yloc.price, size=size.normal, style=label.style_label_up, textcolor=color.black, color=get_bg_color_green())\n\n    //delayed alert about deal close by take profit\n    _alert_human = 'D' + str.tostring(stats_deals_started) + '-TP [delayed] (' + str.tostring(syminfo.basecurrency) + '_' + \n     str.tostring(syminfo.currency) + (cfg_strategy_type == 'long' ? ' LONG' : ' SHORT') + ') | ' + \n      str.tostring(math.round(glb_current_deal_pnl, cfg_decimals)) + ' ' + str.tostring(syminfo.currency) + \n       ' | ' + get_timespan_string(glb_dealstart_bar_time, time)\n    alert(_alert_human, alert.freq_once_per_bar_close)\n```\n\n----------------------------------------\n\nTITLE: Checking Deal Completion Conditions in Pine Script\nDESCRIPTION: Evaluates various conditions that can lead to a deal being completed, such as take profit or stop loss being hit. Sets boolean flags to track which condition triggered the deal completion for further processing.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_36\n\nLANGUAGE: pine\nCODE:\n```\n// ----------------------------------\n// IS DEAL FINISHED ON THIS CANDLE?\n\ncondition_take_profit               = false\ncondition_stop_external_indicator   = false\ncondition_stop_loss                 = false\n\n\nif stop_loss_price_hit() and not is_deal_started() and not was_deal_marked_as_finished()\n    condition_stop_loss     := true\nelse if i_take_profit_type == '% From total volume' and take_profit_price_hit() and not is_deal_started() and not was_deal_marked_as_finished()\n    condition_take_profit   := true\n\n    \ncondition_to_cancel_open_orders     = condition_take_profit or condition_stop_loss\n```\n\n----------------------------------------\n\nTITLE: Processing Delayed Safety Order Alerts in Pine Script\nDESCRIPTION: Handles the logic for creating and sending delayed alerts about previously executed safety orders. It calculates the quantity and price for the next safety order and formats an alert message containing trade details.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_31\n\nLANGUAGE: pine\nCODE:\n```\n_next_so_qty    = next_so_qty(_i, c_base_order_price)\n//delayed alert about previous SO execution\n_alert_human = 'D' + str.tostring(stats_deals_started) + '-SO' + str.tostring(_i) + ' [delayed] (' +\n str.tostring(syminfo.basecurrency) + '_' + str.tostring(syminfo.currency) + \n  (i_strategy_type == 'long' ? ' LONG' : ' SHORT') + ') | ' + \n   str.tostring(_next_so_price * _next_so_qty) + ' ' + str.tostring(syminfo.currency)\nalert(_alert_human, alert.freq_once_per_bar_close)\n```\n\n----------------------------------------\n\nTITLE: Generating Trading Statistics Table in Pine Script\nDESCRIPTION: This code snippet creates a table with detailed trading statistics including profit/loss, number of deals, drawdowns, and various performance metrics. It uses custom functions for time formatting and color coding.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_45\n\nLANGUAGE: pine\nCODE:\n```\ntable.cell(sostats, column=0, row=_row, text='Losing deals:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\nif array.size(statsarray_losing_deals_pnl) == 0\n    table.cell(sostats, column=1, row=_row, text=str.tostring(array.size(statsarray_losing_deals_pnl)), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_green())\nelse\n    _text6 = ''\n    _text6 := _text6 + str.tostring(array.size(statsarray_losing_deals_pnl))\n    _text6 := _text6 + ' (' + str.tostring(math.round(array.avg(statsarray_losing_deals_pnl), i_decimals))\n    _text6 := _text6 + ' ' + str.tostring(syminfo.currency) + ' on avg)'\n\n    table.cell(sostats, column=1, row=_row, text=_text6, text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_red())\n_row := _row + 1\n```\n\n----------------------------------------\n\nTITLE: Creating Information Table for Position Details in Pine Script\nDESCRIPTION: Creates a detailed information table displaying key position metrics including position type, entry price, average price, safety orders status, position size, investment amount, current P&L, take profit and stop loss percentages, and net profit. The table position is configurable.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/TickDCA Strategy.txt#2025-04-23_snippet_5\n\nLANGUAGE: pine script\nCODE:\n```\n// Information table\nvar table infoTable = table.new(tablePosition == \"top_right\" ? position.top_right : tablePosition == \"top_left\" ? position.top_left : tablePosition == \"bottom_left\" ? position.bottom_left : position.bottom_right, columns=2, rows=10, bgcolor=color.rgb(0, 0, 0, 80), border_width=1)\n\nif (showInfoTable)\n    table.cell(infoTable, 0, 0, \"Position\", bgcolor=color.rgb(38, 38, 38, 80), text_color=color.white)\n    table.cell(infoTable, 1, 0, positionType, bgcolor=color.rgb(38, 38, 38, 80), text_color=positionType == \"Long\" ? color.green : positionType == \"Short\" ? color.red : color.gray)\n    \n    table.cell(infoTable, 0, 1, \"Entry Price\", bgcolor=color.rgb(38, 38, 38, 80), text_color=color.white)\n    table.cell(infoTable, 1, 1, inPosition ? str.tostring(entryPrice, \"#.####\") : \"N/A\", bgcolor=color.rgb(38, 38, 38, 80), text_color=color.white)\n    \n    table.cell(infoTable, 0, 2, \"Average Price\", bgcolor=color.rgb(38, 38, 38, 80), text_color=color.white)\n    table.cell(infoTable, 1, 2, inPosition ? str.tostring(averageEntryPrice, \"#.####\") : \"N/A\", bgcolor=color.rgb(38, 38, 38, 80), text_color=color.white)\n    \n    table.cell(infoTable, 0, 3, \"Safety Orders\", bgcolor=color.rgb(38, 38, 38, 80), text_color=color.white)\n    table.cell(infoTable, 1, 3, str.tostring(safetyOrdersPlaced) + \"/\" + str.tostring(maxSafetyOrders), bgcolor=color.rgb(38, 38, 38, 80), text_color=color.white)\n    \n    table.cell(infoTable, 0, 4, \"Position Size\", bgcolor=color.rgb(38, 38, 38, 80), text_color=color.white)\n    table.cell(infoTable, 1, 4, inPosition ? str.tostring(positionSize, \"#.####\") : \"N/A\", bgcolor=color.rgb(38, 38, 38, 80), text_color=color.white)\n    \n    table.cell(infoTable, 0, 5, \"Total Investment\", bgcolor=color.rgb(38, 38, 38, 80), text_color=color.white)\n    table.cell(infoTable, 1, 5, inPosition ? str.tostring(totalInvestment, \"#.##\") : \"N/A\", bgcolor=color.rgb(38, 38, 38, 80), text_color=color.white)\n    \n    table.cell(infoTable, 0, 6, \"Current PnL %\", bgcolor=color.rgb(38, 38, 38, 80), text_color=color.white)\n    currentPnL = inPosition ? (positionType == \"Long\" ? (close/averageEntryPrice - 1) * 100 : (averageEntryPrice/close - 1) * 100) : 0.0\n    table.cell(infoTable, 1, 6, inPosition ? str.tostring(currentPnL, \"#.##\") + \"%\" : \"N/A\", bgcolor=color.rgb(38, 38, 38, 80), text_color=currentPnL > 0 ? color.green : currentPnL < 0 ? color.red : color.white)\n    \n    table.cell(infoTable, 0, 7, \"Take Profit\", bgcolor=color.rgb(38, 38, 38, 80), text_color=color.white)\n    table.cell(infoTable, 1, 7, str.tostring(takeProfitPercent * 100, \"#.##\") + \"%\", bgcolor=color.rgb(38, 38, 38, 80), text_color=color.green)\n    \n    table.cell(infoTable, 0, 8, \"Stop Loss\", bgcolor=color.rgb(38, 38, 38, 80), text_color=color.white)\n    table.cell(infoTable, 1, 8, str.tostring(stopLossPercent * 100, \"#.##\") + \"%\", bgcolor=color.rgb(38, 38, 38, 80), text_color=color.red)\n    \n    table.cell(infoTable, 0, 9, \"Net Profit\", bgcolor=color.rgb(38, 38, 38, 80), text_color=color.white)\n    netProfit = strategy.netprofit\n    table.cell(infoTable, 1, 9, str.tostring(netProfit, \"#.##\"), bgcolor=color.rgb(38, 38, 38, 80), text_color=netProfit > 0 ? color.green : netProfit < 0 ? color.red : color.white)\n```\n\n----------------------------------------\n\nTITLE: Creating Performance Metrics Text in Pine Script\nDESCRIPTION: Builds a series of text strings containing trade performance metrics and position information. These strings will be used in the data table to display statistics like average price, take profit level, position size, and PnL.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Bot DCA Backtester & Signals FREE.txt#2025-04-23_snippet_15\n\nLANGUAGE: pine\nCODE:\n```\n//Label Text\nstoplossText = stoplossOn ? \"SL \" + str.tostring(stoploss*100, \"#.##\") + \"%\" : \"SL Off\"\npercToRecover = (((strategy.position_avg_price * (1 + takeProfit)) / close) - 1) * 100\navgPrice = \"Avg Price $\" + str.tostring(strategy.position_avg_price, \"#.##\")\npnl = \"Trade PnL \" + str.tostring(((close - strategy.position_avg_price) / strategy.position_avg_price) * 100, format.percent)\ntpPrice = \"TP Price $\" + str.tostring(strategy.position_avg_price * (1 + takeProfit), \"#.##\")\nposSize = \"Pos Size \" + str.tostring(strategy.position_size, \"#.##\") + \" Units\"\nnumOrders = \"# Of Open Orders \" +str.tostring(strategy.opentrades)\npercRecovery = \"From Take Profit \" + str.tostring(percToRecover, format.percent) + \"￪\"\nclosedTrades = \"Total # Trades \" + str.tostring(strategy.closedtrades)\ninitialCapital = \"Initial Capital $\" + str.tostring(strategy.initial_capital)\nmaxDrawdown = \"Max Drawdown $\" + str.tostring(strategy.max_drawdown, \"#.##\")\navgBarsPerTrade = \"Avg Bars Per Trade \" + str.tostring(avgBarsPerTrade(), \"#\")\ngrossProfit = \"Gross Profit $\" + str.tostring(strategy.grossprofit, \"#.##\")\nnetProfit = \"Net Profit $\" + str.tostring(strategy.netprofit, \"#.##\")\nequity = \"Portfolio Value $\" + str.tostring(strategy.equity, \"#.##\")\npercentProfit = \"Percent Profit \" + str.tostring((strategy.netprofit/strategy.initial_capital)*100, format.percent)\n```\n\n----------------------------------------\n\nTITLE: Exiting Strategy with Take Profit and Cleanup in Pine Script\nDESCRIPTION: This snippet shows how to exit a strategy with a take profit level and clean up open trades and pending orders. It uses the strategy.exit() function for take profit and strategy.close_all() and strategy.cancel_all() for cleanup.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Backtesting 3commas DCA Bot v2.txt#2025-04-23_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\nstrategy.exit(id=\"x\", stop=ttp_level, comment=\"TTP\")\n\n// Cleanup\nif (crossunder(strategy.opentrades, 0.5))\n    strategy.close_all()\n    strategy.cancel_all()\n```\n\n----------------------------------------\n\nTITLE: Configuring Order Parameters and Risk Management in Pine Script\nDESCRIPTION: Sets up take profit, base order size, safety order parameters, stop loss, and price deviation settings for the trading strategy.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_8\n\nLANGUAGE: pine\nCODE:\n```\n/////\ni_take_profit_type                        = input.string(title='Take Profit Type', defval='% From total volume', options=['% From base order', '% From total volume'], group='Strategy settings')\nfloat i_take_profit_perc                  = input.float(title='Take Profit (%)', minval=0.0, step=0.1, defval=1, group='Strategy settings')\nfloat i_base_order_size_usd               = input.float(title='Base order size', defval=30, step=10, group='Strategy settings')\nfloat i_safety_order_size_usd             = input.float(title='Safety order size', defval=60, step=10, group='Strategy settings')\nstring _tooltip2                          = \"Percentage: Open SO orders every N% of price movement. The price and size are calculated according to settings below (step scale, volume scale)\\nExternal indicator: Open SO orders using an external indicator (configure settings below)\"\nsafety_order_condition                    = false\nfloat deal_start_condition                          = input.float(0.5, step=0.1, group= 'Strategy settings', title='QFL percentage to buy', tooltip='When the price falls below the current base this percentage a buy signal will be triggered.')\nfloat i_safety_order_price_deviation_perc = input.float(title='Price Deviation To Open Safety Trades (%)', minval=0.0, step=0.1, defval=0.5, group='Strategy settings')\nfloat i_safety_order_volume_scale         = input.float(title='Safety Order Volume Scale', defval=2, step=0.1, group='Strategy settings')\nfloat i_safety_order_price_step_scale     = input.float(title='Safety Order Step Scale', defval=2, step=0.1, group='Strategy settings')\nfloat i_max_safety_orders                 = input.float(title='Max Safety Trades Count', defval=6, group='Strategy settings')\nbool i_enable_stop_loss                   = input.bool(title='Enable Stop Loss', defval=false, group='Strategy settings')\nfloat i_stop_loss_perc                    = input.float(title='Stop Loss (%)', minval=0.0, step=0.1, defval=20, group='Strategy settings')\n```\n\n----------------------------------------\n\nTITLE: Calculating Stepped Price Deviation for Safety Orders in Pine Script\nDESCRIPTION: This function calculates the stepped price deviation percentage for safety orders. It applies a scaling factor to increase the deviation for each subsequent safety order, making later orders occur at increasingly distant price levels.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_8\n\nLANGUAGE: pine\nCODE:\n```\nstepped_deviation(so_index) =>\n    float _stepped_deviation = 0\n    if so_index > 0\n        for _i = 1 to so_index by 1\n            _stepped_deviation := _stepped_deviation + cfg_safety_order_price_deviation_perc * math.pow(cfg_safety_order_price_step_scale, _i - 1)\n    else\n        _stepped_deviation := 0\n```\n\n----------------------------------------\n\nTITLE: Calculating Next Safety Order Price in Pine Script\nDESCRIPTION: This function determines the price level for the next safety order based on the base order price and a stepped deviation percentage. It adjusts the calculation direction based on whether the position is long or short.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_12\n\nLANGUAGE: pine\nCODE:\n```\nnext_so_price(so_index, _bo_price) =>\n    float _stepped_deviation = stepped_deviation(so_index)\n    if IS_LONG\n        float _next_so_price = _bo_price * (1 - _stepped_deviation / 100)\n    else\n        float _next_so_price = _bo_price * (1 + _stepped_deviation / 100)\n```\n\n----------------------------------------\n\nTITLE: Deal Completion and Global Variables Reset in Pine Script Trading Bot\nDESCRIPTION: This code resets all global variables related to the current trading deal after it has been completed. It sets flags, timeframes, price levels, and order-tracking variables to their default values to prepare for the next deal.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_26\n\nLANGUAGE: pine\nCODE:\n```\n//RESET GLOBALS AFTER DEAL COMPLETION\nglb_still_in_deal                   := false\n\nlastdeal_close_bar_index            := bar_index\n//approximate\nlastdeal_close_time                 := time\n\nglb_take_profit_price               := na\nglb_planb_timeout_price             := na\nglb_stop_loss_price                 := na\nglb_base_order_price                := na\nglb_base_order_qty                  := na\nglb_next_safety_order_price         := na\n\nglb_so_orders_placed                := false\n\n// REMOVED\n//glb_next_safety_order_qty           := na\n\nglb_current_deal_position_size      := na\n\n// REMOVED\n// glb_current_deal_prev_position_size := na\nglb_current_deal_avg_price          := na\nglb_current_deal_close_value        := na\nglb_current_deal_pnl                := 0\n\nglb_debug_text                      := \"\"\ndebug_printed                       := false\n\nglb_dealstart_bar_index             := na\nglb_dealstart_bar_time              := na\n\n// REMOVED\n//count_placed_safety_orders          := 0\ncount_executed_safety_orders        := 0\n\n// label.new(bar_index, low*0.99, text=str.tostring(was_deal_marked_as_finished()) + \"\\n\" + str.tostring(strategy.position_size), \n//  color=color.red)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Core Strategy Parameters in Pine Script\nDESCRIPTION: Configures the main strategy parameters including trade direction (long/short), QFL timeframe, volume moving average, and base signal conditions.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_7\n\nLANGUAGE: pine\nCODE:\n```\nvar g_strategy          = \"Strategy\"\ni_strategy_type         = input.string(title='Strategy Type', defval='long', options=['long', 'short'], group='Strategy settings')\nvar bool IS_LONG = i_strategy_type == 'long'\ntf                      = input.timeframe(title='QFL timeframe', defval='current', group='Strategy settings', tooltip='Do not select a timeframe below the current timeframe (example: if the chart is in 15m do no select 5m in this option, you can select 30m or higher TFs).')\nvamp                    = input(title='QFL volume MA', group='Strategy settings', defval=60)\nmaxbaseage              = input.int(10, 'Max candle age', group='Strategy settings', tooltip='It won\\'t open a deal if the price is below a base that has lived for longer than X candles. Use 0 to disable this condition.')\nallowConsecutiveSignals = input.bool(false, 'Allow consecutive signals', group='Strategy settings', tooltip='If the conditions are met in to consecutive candles, allow both to trigger the signal and not only the first candle.')\nplotLevels              = input(true, 'plot bases', group='Strategy settings')\n```\n\n----------------------------------------\n\nTITLE: Calculating Required Price for Take Profit in Pine Script\nDESCRIPTION: This function calculates the price required to achieve a specific take profit percentage. It supports two different methods: calculating based on a percentage of the total position volume or calculating based on a percentage of the base order size.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_9\n\nLANGUAGE: pine\nCODE:\n```\nsteps_required_price(_bo_price, _avg_price, _pos_size, _take_profit_percent)=>\n    float _price = 0\n    if cfg_take_profit_type == '% From total volume'\n        if IS_LONG\n            _required_price = _avg_price * (1 + _take_profit_percent / 100)\n        else\n            _required_price = _avg_price * (1 - _take_profit_percent / 100)    \n            \n    else if cfg_take_profit_type == \"% From base order\"\n        if IS_LONG\n            _req_usdt       = cfg_base_order_size_usd * cfg_take_profit_perc / 100\n            _required_price = ((_avg_price * _pos_size) + _req_usdt) / _pos_size\n        else\n            _req_usdt       = cfg_base_order_size_usd * cfg_take_profit_perc / 100\n            _required_price = ((_avg_price * _pos_size) - _req_usdt) / _pos_size\n```\n\n----------------------------------------\n\nTITLE: Generating Strategy Warnings in Pine Script\nDESCRIPTION: This code segment checks for various strategy configuration issues and generates warnings. It verifies capital usage, price deviation limits, stop loss placement, timeframe accuracy, and trailing take profit settings.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Backtesting 3commas DCA Bot v2.txt#2025-04-23_snippet_5\n\nLANGUAGE: pine\nCODE:\n```\nvar string warnings_text = \"\"\nvar warnings = array.new_string(0, \"\")\n\nif (max_amount / strategy.initial_capital > 1.005 or max_amount / strategy.initial_capital < 0.995)\n    if order_size_type == \"Fixed\"\n        array.push(warnings, \"Strategy Initial Capital (currently \" + tostring(strategy.initial_capital, currency_format()) + \" \" + syminfo.currency\n                           + \") must match Max Amount For Bot Usage (\" + tostring(max_amount, currency_format()) + \" \" + syminfo.currency + \")\")\n    else\n        array.push(warnings, \"Please adjust Base Order and Safe Order percentage to reach 100% of usage of capital. Currently using \" + tostring(max_amount / strategy.initial_capital, \"#.##%\"))\n\nif (max_dev >= 1.0)\n    array.push(warnings, \"Max Price Deviation (\" + tostring(max_dev, \"#.##%\") + \") cannot be >= 100.0%\")\nif (stop_loss > 0.0 and stop_loss <= max_dev)\n    array.push(warnings, \"Stop Loss (\" + tostring(stop_loss, \"#.##%\") + \") should be greater than Max Price Deviation (\" + tostring(max_dev, \"#.##%\") + \")\")\nif ((timeframe.isminutes and not (tonumber(timeframe.period) < 30)) or timeframe.isdwm)\n    array.push(warnings, \"Backtesting may be inaccurate. Recommended to use timeframe of 15m or less\")\nif (ttp >= take_profit)\n    array.push(warnings, \"Trailing Take Profit (\" + tostring(ttp, \"#.##%\") + \") cannot be greater than Take Profit (\" + tostring(take_profit, \"#.##%\") + \")\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Strategy Signal Types and Parameters in Pine Script\nDESCRIPTION: Input options for selecting the buy signal strategy (MACD, MFI, RSI, or Stochastic RSI) with configurable threshold levels and indicator lengths. These settings determine when the DCA bot will initiate trades.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Bot DCA Backtester & Signals FREE.txt#2025-04-23_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\n//Choose Strategy\nstrategy = input.string(\"MACD\", title=\"Buy Signal Strategy\", options=[\"MFI\", \"RSI\", \"MACD\", \"Stochastic RSI\"], tooltip=\"This is your buy signal strategy. MACD triggers a buy signal when the MACD signal line crosses above the MACD line. MFI triggers a buy signal when MFI is below your threshold level in the next setting. RSI triggers a buy signal when RSI is below your threshold level in the next setting. Stochastic RSI triggers a buy signal when the K line crosses above the D line.\", group=\"Strategy\")\nstrategyLevelTrigger = input.int(20, title=\"Signal Threshold Level\", tooltip=\"This number is the threshold that MFI or RSI will need to be below to trigger a buy signal. So if you set it to 20, the MFI or RSI that you chose above will trigger a buy signal when it goes below this number. This setting has no affect on the MACD or Stochastic RSI even when a value is set.\", group=\"Strategy\")\nstrategyLength = input.int(14, title=\"Indicator Length\", tooltip=\"This is the length used for RSI and MFI. MACD uses the standard 12, 26, 9 lengths and Stochastic RSI uses 3, 3, 14, 14 lengths. MACD and Stochastic RSI will not be affected by this input number.\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Exit Strategy with Take Profit and Stoploss in Pine Script\nDESCRIPTION: Defines the exit strategy for a bullish position with configurable take profit and conditional stoploss parameters. The exit includes custom comments to display profit percentage or stoploss information.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Bot DCA Backtester & Signals FREE.txt#2025-04-23_snippet_12\n\nLANGUAGE: pine\nCODE:\n```\nstrategy.exit(\"Bull #1\", limit=strategy.position_avg_price * (1 + takeProfit), stop=stoplossOn and strategy.opentrades == maxOrders ? stoplossPrice : na, comment_profit='Take Profit On ' + str.tostring(strategy.opentrades) + \" Orders\", comment_loss=\"Stoploss Hit @ -\" + str.tostring(stoploss*100, \"#.##\") + \"% From Last Order\")\n```\n\n----------------------------------------\n\nTITLE: Plotting Trade Levels on Chart in Pine Script\nDESCRIPTION: Creates visual indicators on the chart for the average position price, take profit level, and conditional stoploss level. These plotted lines help traders see important price points for the current trade.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Bot DCA Backtester & Signals FREE.txt#2025-04-23_snippet_16\n\nLANGUAGE: pine\nCODE:\n```\n// Plot Average Price, SL And TP Level\navgPriceLine = plot(strategy.position_avg_price, title=\"Position Average Price\", color=color.aqua, linewidth=4)\ntpLevel = plot(strategy.position_avg_price * (1+takeProfit), title=\"Take Profit Level\", color=color.red, linewidth=4)\nstopLevel = plot(stoplossOn and strategy.opentrades == maxOrders ? stoplossPrice : na, title=\"Stoploss Level\", color=color.orange, linewidth=2, style=plot.style_cross)\n```\n\n----------------------------------------\n\nTITLE: Calculating Bot Usage Based on Safety Trade Count in Pine Script\nDESCRIPTION: A function that calculates the total amount of capital the bot will use based on the specified number of safety trades. It sums the base order size and all applicable safety order sizes up to the specified index.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Visible DCA Strategy.txt#2025-04-23_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\nbot_usage(i) =>\n i == 1 ? Base_order_size + safety_order_size(1) :\n i == 2 ? Base_order_size + safety_order_size(1) + safety_order_size(2) :\n i == 3 ? Base_order_size + safety_order_size(1) + safety_order_size(2) + safety_order_size(3) :\n i == 4 ? Base_order_size + safety_order_size(1) + safety_order_size(2) + safety_order_size(3) + safety_order_size(4) : \n i == 5 ? Base_order_size + safety_order_size(1) + safety_order_size(2) + safety_order_size(3) + safety_order_size(4) + safety_order_size(5) :\n i == 6 ? Base_order_size + safety_order_size(1) + safety_order_size(2) + safety_order_size(3) + safety_order_size(4) + safety_order_size(5) + safety_order_size(6) : \n i == 7 ? Base_order_size + safety_order_size(1) + safety_order_size(2) + safety_order_size(3) + safety_order_size(4) + safety_order_size(5) + safety_order_size(6) + safety_order_size(7) : \n i == 8 ? Base_order_size + safety_order_size(1) + safety_order_size(2) + safety_order_size(3) + safety_order_size(4) + safety_order_size(5) + safety_order_size(6) + safety_order_size(7) + safety_order_size(8) : \n i == 9 ? Base_order_size + safety_order_size(1) + safety_order_size(2) + safety_order_size(3) + safety_order_size(4) + safety_order_size(5) + safety_order_size(6) + safety_order_size(7) + safety_order_size(8) + safety_order_size(9) :\n i == 10 ? Base_order_size + safety_order_size(1) + safety_order_size(2) + safety_order_size(3) + safety_order_size(4) + safety_order_size(5) + safety_order_size(6) + safety_order_size(7) + safety_order_size(8) + safety_order_size(9) + safety_order_size(10) : na\n```\n\n----------------------------------------\n\nTITLE: Calculating Next Safety Order Size in USD in Pine Script\nDESCRIPTION: This function calculates the size of the next safety order in USD. It applies a volume scaling factor to increase the size of each subsequent safety order based on the configured scale factor.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_13\n\nLANGUAGE: pine\nCODE:\n```\nnext_so_size_usd(so_index) =>\n    float _next_so_size_usd = cfg_safety_order_size_usd * math.pow(cfg_safety_order_volume_scale, so_index - 1)\n```\n\n----------------------------------------\n\nTITLE: Calculating and Displaying Advanced Trading Metrics in Pine Script\nDESCRIPTION: This code calculates and displays advanced trading metrics such as covered deviation, maximum deviation, drawdown, and deal statistics. It uses custom functions for calculations and formatting.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_48\n\nLANGUAGE: pine\nCODE:\n```\ntable.cell(sostats, column=0, row=_row, text='Covered deviation:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\ntable.cell(sostats, column=1, row=_row, text=str.tostring(math.round(stepped_deviation(i_max_safety_orders), 2)) + '%', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_row := _row + 1\n\n\nstring _bef = valid_stop_loss() ? 'before SL' : ''\ntable.cell(sostats, column=0, row=_row, text='Max deviation:\\n(Deal start price vs worst candle ' + _bef + ')', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\ntable.cell(sostats, column=1, row=_row, text=str.tostring(math.round(stats_biggest_dev, 2)) + '%\\n' + '(' + time_to_date_string(stats_biggest_dev_time) + ')', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_row := _row + 1\n\n\ntable.cell(sostats, column=0, row=_row, text='Max drawdown from breakeven:\\n(Avg price vs worst candle ' + _bef + ')', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\ntable.cell(sostats, column=1, row=_row, text=str.tostring(math.round(stats_max_drawdown, i_decimals)) + ' ' + str.tostring(syminfo.currency) + ' (' + str.tostring(math.round(stats_max_drawdown_equity_percent, 2)) + '%)\\n' + '(' + time_to_date_string(stats_max_drawdown_time) + ')', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_row := _row + 1\n\n\n\ntable.cell(sostats, column=0, row=_row, text='Max # bars in deal:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\ntable.cell(sostats, column=1, row=_row, text=str.tostring(array.max(statsarray_no_of_bars)), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_row := _row + 1\n\n\ntable.cell(sostats, column=0, row=_row, text='Avg # bars in deal:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\ntable.cell(sostats, column=1, row=_row, text=str.tostring(math.round(array.avg(statsarray_no_of_bars), 2)), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_row := _row + 1\n\n\ntable.cell(sostats, column=0, row=_row, text='Total volume:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\ntable.cell(sostats, column=1, row=_row, text=str.tostring(math.round(c_total_volume, i_decimals)) + ' ' + str.tostring(syminfo.currency), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_row := _row + 1\n\ntable.cell(sostats, column=0, row=_row, text='Commision:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\ntable.cell(sostats, column=1, row=_row, text=str.tostring(math.round(get_commission_for_volume(c_total_volume), i_decimals)) + ' ' + str.tostring(syminfo.currency), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_row := _row + 1\n```\n\n----------------------------------------\n\nTITLE: Calculating Bot Usage and Available Balance Percentage in Pine Script\nDESCRIPTION: This snippet calculates the current equity, maximum bot usage based on safety trades, maximum price deviation, and percentage of available balance that would be used. These values are key metrics for trading bot risk management.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Visible DCA Strategy.txt#2025-04-23_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\nequity = strategy.equity\nbot_use = bot_usage(Max_safety_trades_count)\nbot_dev = float(step(Max_safety_trades_count)) * 100\nbot_ava = (bot_use / equity) * 100\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Range Limitation for Backtesting\nDESCRIPTION: Logic for limiting the strategy to operate only within a specified date range for backtesting purposes. The code checks if the current time falls within the user-defined start and end times.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_5\n\nLANGUAGE: pine\nCODE:\n```\n//strategy timeframe limitation (run just between specific dates)\nlimit_date_range = input.bool(title='Limit Date Range', defval=false, group='Backtest date range')\n\n//Input options that configure backtest date range\nstart_time  = input.time(defval=timestamp('01 Jan 2022 00:00 +0000'), title='Start Time', group='Backtest date range')\nend_time    = input.time(defval=timestamp('31 Dec 2022 00:00 +0000'), title='End Time', group='Backtest date range')\n\nin_date_range = true\nif limit_date_range\n    in_date_range := time >= start_time and time <= end_time\n    \nelse\n    in_date_range := true\n```\n\n----------------------------------------\n\nTITLE: Price Level Functions - Pine Script\nDESCRIPTION: Functions for calculating various price levels like take profit, stop loss and timeout prices\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_17\n\nLANGUAGE: pine\nCODE:\n```\ntake_profit_price(_avg_price = strategy.position_avg_price, _pos_size = strategy.position_size)=>\n    if cfg_take_profit_type == \"% From total volume\"\n        if IS_LONG\n            _tp_price = _avg_price * (1 + cfg_take_profit_perc/100)\n        else\n            _tp_price = _avg_price * (1 - cfg_take_profit_perc/100)\n    else if cfg_take_profit_type == \"% From base order\"\n        if IS_LONG\n            _tp_size_usd = cfg_base_order_size_usd * cfg_take_profit_perc / 100\n            _tp_price =  ((_avg_price * _pos_size) + _tp_size_usd) / _pos_size\n        else\n            _tp_size_usd = cfg_base_order_size_usd * cfg_take_profit_perc / 100\n            _tp_price =  ((_avg_price * _pos_size) - _tp_size_usd) / _pos_size\n```\n\n----------------------------------------\n\nTITLE: Calculating and Displaying Safety Orders Table in Pine Script\nDESCRIPTION: This code creates and populates a table showing safety order calculations including price levels, order quantities, and profit targets. It handles both price-based and USD-based safety order sizing strategies based on user configuration.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_43\n\nLANGUAGE: pinescript\nCODE:\n```\ntable.cell(steps_amount, 4, 1, str.tostring(math.round(i_steps_bo_price, i_decimals)), text_color=color.white, text_size=size.small)\ntable.cell(steps_amount, 5, 1, str.tostring(math.round(_steps_total_volume / _steps_total_size, i_decimals)), text_color=color.white, text_size=size.small)\n\n_req_price_for_tp = steps_required_price(i_steps_bo_price,  _steps_total_volume / _steps_total_size, _steps_total_size, i_take_profit_perc)\ntable.cell(steps_amount, 6, 1, str.tostring(math.round(_req_price_for_tp, i_decimals)), text_color=color.white, text_size=size.small)\ntable.cell(steps_amount, 7, 1, str.tostring(steps_required_percent(i_steps_bo_price, _req_price_for_tp)), text_color=color.white, text_size=size.small)\ntable.cell(steps_amount, 8, 1, str.tostring(steps_required_percent(i_steps_bo_price, i_steps_bo_price)), text_color=color.white, text_size=size.small)\n\ntable.cell(steps_amount, 9, 1, str.tostring(math.round(_steps_total_size, i_decimals)), text_color=color.white, text_size=size.small)\ntable.cell(steps_amount, 10, 1, str.tostring(_steps_total_volume), text_color=color.white, text_size=size.small)\n\nfloat _steps_next_safety_order_price = 0 \nfloat _steps_next_safety_order_qty = 0\n\nif i_max_safety_orders > 0 \n    for _i = 1 to i_max_safety_orders by 1\n        _steps_next_safety_order_price  := next_so_price(_i, i_steps_bo_price)\n        _steps_next_safety_order_qty    := next_so_qty(_i, i_steps_bo_price)\n\n        _steps_total_size   += _steps_next_safety_order_qty\n        _steps_total_volume += _steps_next_safety_order_qty * _steps_next_safety_order_price\n\n        table.cell(steps_amount, 0, _i + 2, str.tostring(_i), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 1, _i + 2, str.tostring(stepped_deviation(_i)), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 2, _i + 2, str.tostring(math.round(_steps_next_safety_order_qty, i_decimals)), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 3, _i + 2, str.tostring(math.round(_steps_next_safety_order_qty * _steps_next_safety_order_price, i_decimals)), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 4, _i + 2, str.tostring(math.round(_steps_next_safety_order_price, i_decimals)), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 5, _i + 2, str.tostring(math.round(_steps_total_volume / _steps_total_size, i_decimals)), text_color=color.white, text_size=size.small)\n        \n        _req_price_for_tp := steps_required_price(i_steps_bo_price,  _steps_total_volume / _steps_total_size, _steps_total_size, i_take_profit_perc)\n        table.cell(steps_amount, 6, _i + 2, str.tostring(math.round(_req_price_for_tp, i_decimals)), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 7, _i + 2, str.tostring(steps_required_percent(_steps_next_safety_order_price, _req_price_for_tp)), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 8, _i + 2, str.tostring(steps_required_percent(_steps_next_safety_order_price, _steps_total_volume / _steps_total_size)), text_color=color.white, text_size=size.small)\n        \n        table.cell(steps_amount, 9, _i + 2, str.tostring(math.round(_steps_total_size, i_decimals)), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 10, _i + 2, str.tostring(_steps_total_volume), text_color=color.white, text_size=size.small)\nelse if i_max_safety_orders > 0\n    float _steps_next_safety_order_qty_usd = 0\n    for _i = 1 to i_max_safety_orders by 1\n        _steps_next_safety_order_qty_usd := next_so_size_usd(_i)\n        _steps_total_volume += _steps_next_safety_order_qty_usd\n\n        table.cell(steps_amount, 0, _i + 2, str.tostring(_i), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 1, _i + 2, \"-\", text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 2, _i + 2, \"-\", text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 3, _i + 2, str.tostring(math.round(_steps_next_safety_order_qty_usd, i_decimals)), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 4, _i + 2, \"-\", text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 5, _i + 2, \"-\", text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 6, _i + 2, \"-\", text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 7, _i + 2, \"-\", text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 8, _i + 2, \"-\", text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 9, _i + 2, \"-\", text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 10, _i + 2, str.tostring(_steps_total_volume), text_color=color.white, text_size=size.small)\n```\n\n----------------------------------------\n\nTITLE: Implementing Time-Based Filters in Pine Script\nDESCRIPTION: Sets up date and time filtering options to control when the strategy can execute trades. Includes date range, day of week and session time filters.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_5\n\nLANGUAGE: pine\nCODE:\n```\n// 📆📈 FILTERS =====================================================================================================\n// Description: Module responsible for filtering out long and short open signals that do not meet user defined rules\n// Dependencies: NONE\n// Results: longFiltersApproval, shortFiltersApproval\n\n\n// INPUT ============================================================================================================\nusefromDate = input.bool(defval = true, title = 'From', inline = 'From Date', group = '📆 Filters - Time')\nfromDate = input.time(defval = timestamp('01 Jan 2022 00:00 UTC'), title = '', inline = 'From Date', group = '📆 Filters - Time')\nusetoDate = input.bool(defval = false, title = 'To ', inline = 'To Date', group = '📆 Filters - Time')\ntoDate = input.time(defval = timestamp('31 Dec 2121 23:59 UTC'), title = '', inline = 'To Date', group = '📆 Filters - Time')\n\nuseSessionDay = input.bool(defval = false, title = 'Session Days', inline = 'Session Days', group = '📆 Filters - Time')\nmon = input.bool(defval = true, title = 'Mon', inline = 'Session Days', group = '📆 Filters - Time')\ntue = input.bool(defval = true, title = 'Tue', inline = 'Session Days', group = '📆 Filters - Time')\nwed = input.bool(defval = true, title = 'Wed', inline = 'Session Days', group = '📆 Filters - Time')\nthu = input.bool(defval = true, title = 'Thu', inline = 'Session Days', group = '📆 Filters - Time')\nfri = input.bool(defval = true, title = 'Fri', inline = 'Session Days', group = '📆 Filters - Time')\nsat = input.bool(defval = true, title = 'Sat', inline = 'Session Days', group = '📆 Filters - Time')\nsun = input.bool(defval = true, title = 'Sun', inline = 'Session Days', group = '📆 Filters - Time')\nuseSessionStart = input.bool(defval = false, title = 'Session Start', inline = 'Session Start', group = '📆 Filters - Time')\nsessionStartHour = input.int(defval = 12, title = '', minval = 0, maxval = 23, step = 1, inline = 'Session Start', group = '📆 Filters - Time')\nsessionStartMinute = input.int(defval = 00, title = ':', minval = 0, maxval = 59, step = 1, tooltip = 'Start time of the session.', inline = 'Session Start', group = '📆 Filters - Time')\nuseSessionEnd = input.bool(defval = false, title = 'Session End', inline = 'Session End', group = '📆 Filters - Time')\nsessionEndHour = input.int(defval = 20, title = '', minval = 0, maxval = 23, step = 1, inline = 'Session End', group = '📆 Filters - Time')\nsessionEndMinute = input.int(defval = 00, title = ':', minval = 0, maxval = 59, step = 1, tooltip = 'End time of the session.', inline = 'Session End', group = '📆 Filters - Time')\n\nbool dateFilterApproval = tif.is_in_date_range(fromDate, toDate, usefromDate, usetoDate)\nbool sessionFilterApproval = tif.is_in_session(useSessionStart, sessionStartHour, sessionStartMinute, useSessionEnd, sessionEndHour, sessionEndMinute, useSessionDay, mon, tue, wed, thu, fri, sat, sun)\nbool timeFilterApproval = dateFilterApproval and sessionFilterApproval\n```\n\n----------------------------------------\n\nTITLE: Calculating PLAN-B Timeout in Pine Script\nDESCRIPTION: This function calculates the timeout duration for the PLAN-B contingency based on the user's input settings. It converts the timeout value to milliseconds based on the selected time unit (days, hours, or minutes).\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_7\n\nLANGUAGE: pine\nCODE:\n```\nget_planb_timeout() =>\n    float _timeout = 0\n    if cfg_planb_timeout_type == 'day'\n        _timeout := cfg_planb_timeout * 86400000\n    else if cfg_planb_timeout_type == 'hour'\n        _timeout := cfg_planb_timeout * 3600000\n    else if cfg_planb_timeout_type == 'min'\n        _timeout := cfg_planb_timeout * 60000\n```\n\n----------------------------------------\n\nTITLE: PnL and Commission Calculation Functions - Pine Script\nDESCRIPTION: Functions for calculating profits, losses, and trading commissions\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_16\n\nLANGUAGE: pine\nCODE:\n```\nget_commission_for_volume(vol) =>\n    _commision = vol * cfg_commision_percent / 100\n\nget_final_pnl_new() =>\n    float _pnl = 0\n    if array.size(statsarray_losing_deals_pnl) > 0\n        _pnl := _pnl + array.sum(statsarray_losing_deals_pnl)\n\n    if array.size(statsarray_winning_deals_pnl) > 0\n        _pnl := _pnl + array.sum(statsarray_winning_deals_pnl)\n\n    _pnl := _pnl + strategy.openprofit\n```\n\n----------------------------------------\n\nTITLE: DCA Strategy Order Entry Implementation in TradingView Pine Script\nDESCRIPTION: Implements a Dollar Cost Averaging strategy by placing additional long orders at lower price levels when certain conditions are met. Each additional order is executed with increasing position sizes (quantMultiplied variables) at calculated price levels below the initial entry, with percentage-based comments indicating the drop from original price.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Bot DCA Backtester & Signals FREE.txt#2025-04-23_snippet_10\n\nLANGUAGE: pine\nCODE:\n```\nif strategy.opentrades == 1 and maxOrders >= 2\n    strategy.entry('Bull #1', strategy.long, qty=quantMultiplied1, limit=strategy.opentrades.entry_price(0) * (1 - avgDown),\n     comment=\"Buy #2 \" + str.tostring(avgDown * 100, format.percent))\n\nif strategy.opentrades == 2 and maxOrders >= 3\n    strategy.entry(\"Bull #1\", strategy.long, qty=quantMultiplied2, limit=strategy.opentrades.entry_price(0) * (1 - avgDown1),\n     comment=\"Buy #3 \" + str.tostring(avgDown1 * 100, format.percent))\n\nif strategy.opentrades == 3 and maxOrders >= 4\n    strategy.entry(\"Bull #1\", strategy.long, qty=quantMultiplied3, limit=strategy.opentrades.entry_price(0) * (1 - avgDown2), \n     comment=\"Buy #4 \" + str.tostring(avgDown2 * 100, format.percent))\n\nif strategy.opentrades == 4 and maxOrders >= 5\n    strategy.entry(\"Bull #1\", strategy.long, qty=quantMultiplied4, limit=strategy.opentrades.entry_price(0) * (1 - avgDown3),\n     comment=\"Buy #5 \" + str.tostring(avgDown3 * 100, format.percent))\n\nif strategy.opentrades == 5 and maxOrders >= 6\n    strategy.entry(\"Bull #1\", strategy.long, qty=quantMultiplied5, limit=strategy.opentrades.entry_price(0) * (1 - avgDown4),\n     comment=\"Buy #6 \" + str.tostring(avgDown4 * 100, format.percent))\n\nif strategy.opentrades == 6 and maxOrders >= 7\n    strategy.entry(\"Bull #1\", strategy.long, qty=quantMultiplied6, limit=strategy.opentrades.entry_price(0) * (1 - avgDown5),\n     comment=\"Buy #7 \" + str.tostring(avgDown5 * 100, format.percent))\n\nif strategy.opentrades == 7 and maxOrders >= 8\n    strategy.entry(\"Bull #1\", strategy.long, qty=quantMultiplied7, limit=strategy.opentrades.entry_price(0) * (1 - avgDown6),\n     comment=\"Buy #8 \" + str.tostring(avgDown6 * 100, format.percent))\n\nif strategy.opentrades == 8 and maxOrders >= 9\n    strategy.entry(\"Bull #1\", strategy.long, qty=quantMultiplied8, limit=strategy.opentrades.entry_price(0) * (1 - avgDown7),\n     comment=\"Buy #9 \" + str.tostring(avgDown7 * 100, format.percent))\n\nif strategy.opentrades == 9 and maxOrders >= 10\n    strategy.entry(\"Bull #1\", strategy.long, qty=quantMultiplied9, limit=strategy.opentrades.entry_price(0) * (1 - avgDown8),\n     comment=\"Buy #10 \" + str.tostring(avgDown8 * 100, format.percent))\n\nif strategy.opentrades == 10 and maxOrders >= 11\n    strategy.entry(\"Bull #1\", strategy.long, qty=quantMultiplied10, limit=strategy.opentrades.entry_price(0) * (1 - avgDown9),\n     comment=\"Buy #11 \" + str.tostring(avgDown9 * 100, format.percent))\n\nif strategy.opentrades == 11 and maxOrders >= 12\n    strategy.entry(\"Bull #1\", strategy.long, qty=quantMultiplied11, limit=strategy.opentrades.entry_price(0) * (1 - avgDown10),\n     comment=\"Buy #12 \" + str.tostring(avgDown10 * 100, format.percent))\n\nif strategy.opentrades == 12 and maxOrders >= 13\n    strategy.entry(\"Bull #1\", strategy.long, qty=quantMultiplied12, limit=strategy.opentrades.entry_price(0) * (1 - avgDown11),\n     comment=\"Buy #13 \" + str.tostring(avgDown11 * 100, format.percent))\n\nif strategy.opentrades == 13 and maxOrders >= 14\n    strategy.entry(\"Bull #1\", strategy.long, qty=quantMultiplied13, limit=strategy.opentrades.entry_price(0) * (1 - avgDown12),\n```\n\n----------------------------------------\n\nTITLE: Implementing Strategy Order with Take Profit\nDESCRIPTION: Places a take profit order with position size calculations and direction based on long/short condition\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_21\n\nLANGUAGE: pine\nCODE:\n```\nstrategy.order(id='D' + str.tostring(stats_deals_started) + '-TP', limit=glb_take_profit_price, \n direction=IS_LONG ? strategy.short : strategy.long, qty=math.abs(strategy.position_size), \n  when=is_deal_started())\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeout Order Handling\nDESCRIPTION: Places a timeout order when plan B timeout condition is met, including bot control and alert handling\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_22\n\nLANGUAGE: pine\nCODE:\n```\nstrategy.order(id='D' + str.tostring(stats_deals_started) + '-TIMEOUT', limit=glb_planb_timeout_price, \n direction=IS_LONG ? strategy.short : strategy.long, qty=math.abs(strategy.position_size), \n  when=is_deal_started())\n```\n\n----------------------------------------\n\nTITLE: Creating DCA Settings Table in TradingView Pine Script\nDESCRIPTION: This code creates and populates a table displaying the strategy's DCA (Dollar Cost Averaging) settings, including QFL type, commission, take profit values, stop loss, base order size, safety order parameters, and scaling factors.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_51\n\nLANGUAGE: pine\nCODE:\n```\nif i_show_settings_table\n    table settings = table.new(position.bottom_left, columns=1, rows=2, frame_width=1, frame_color=color.black)\n    _row = 0\n    table.cell(settings, column=0, row=0, text='DCA Settings', text_halign=text.align_left, text_size=size.small, text_color=color.white, bgcolor=get_bg_color_blue())\n\n    _text = 'QFL: ' + str.tostring(i_strategy_type) + '; '\n    _text := _text + 'Commision: ' + str.tostring(i_commision_percent) + '%;\\n'\n    _text := _text + 'Condition: ' + str.tostring(deal_start_condition) + ' '\n    _text := _text + 'TP: ' + str.tostring(i_take_profit_perc) + '% '\n    _text := _text + ' (' + str.tostring(i_take_profit_type) + ')'\n    if i_enable_stop_loss\n        _text := _text + '\\nSL: ' + str.tostring(i_stop_loss_perc) + '%'\n    _text := _text + '\\n\\n'\n\n    _text := _text + 'BO: ' + str.tostring(i_base_order_size_usd) + ' ' + str.tostring(syminfo.currency) + '; '\n    _text := _text + 'SO: ' + str.tostring(i_safety_order_size_usd) + ' ' + str.tostring(syminfo.currency) + ';\\n'\n    _text := _text + 'SO Dev: ' + str.tostring(i_safety_order_price_deviation_perc) + '% ; '\n    _text := _text + 'Max SO: ' + str.tostring(i_max_safety_orders) + '; '\n    _text := _text + 'Covered: ' + str.tostring(math.round(stepped_deviation(i_max_safety_orders), 2)) + ' %;\\n'\n    _text := _text + 'SO Volume Scale: ' + str.tostring(i_safety_order_volume_scale) + '; '\n    _text := _text + 'SO Step Scale: ' + str.tostring(i_safety_order_price_step_scale) + ';\\n'\n    \n\n    table.cell(settings, column=0, row=1, text=_text, text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n```\n\n----------------------------------------\n\nTITLE: Executing Safety Orders from External Indicator in Pine Script\nDESCRIPTION: Handles the logic for placing safety orders based on external indicator signals. It calculates the order size, updates the counter, and enters the market with appropriate order parameters. Also sends alerts about safety order execution.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_33\n\nLANGUAGE: pine\nCODE:\n```\n// ------------------------\n// SAFETY ORDER FROM EXTERNAL INDICATOR\n// Place safety order as market order at current close\nif safety_order_condition == true and count_executed_safety_orders < i_max_safety_orders\n    count_executed_safety_orders    := count_executed_safety_orders + 1\n    _next_so_size_usd                = next_so_size_usd(count_executed_safety_orders)\n    _next_so_qty                     = _next_so_size_usd / close\n    \n    if i_enable_bot_control and i_exec_safety_order\n        _alert_json = get_3cbot_addfundsinquote_json(_next_so_size_usd)\n        strategy.entry(id='D' + str.tostring(stats_deals_started) + '-SO' + str.tostring(count_executed_safety_orders), \n         direction=IS_LONG ? strategy.long : strategy.short, qty=_next_so_qty, alert_message=_alert_json)\n    else\n        strategy.entry(id='D' + str.tostring(stats_deals_started) + '-SO' + str.tostring(count_executed_safety_orders), \n         direction=IS_LONG ? strategy.long : strategy.short, qty=_next_so_qty)\n\n    _alert_human = 'D' + str.tostring(stats_deals_started) + '-SO' + str.tostring(count_executed_safety_orders) + ' (' +\n     str.tostring(syminfo.basecurrency) + '_' + str.tostring(syminfo.currency) + \n      (i_strategy_type == 'long' ? ' LONG' : ' SHORT') + ') | ' + \n       str.tostring(_next_so_size_usd) + ' ' + str.tostring(syminfo.currency)\n    alert(_alert_human, alert.freq_once_per_bar_close)\n```\n\n----------------------------------------\n\nTITLE: Initializing Safety Orders Statistics Array in Pine Script\nDESCRIPTION: Function that initializes arrays for tracking safety orders statistics. Creates arrays with default values of 0 for all potential safety orders up to the maximum defined limit.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_21\n\nLANGUAGE: pine\nCODE:\n```\n//init array with 0 values\ninit_stats_array_safety_orders() =>\n    for _i = 0 to i_max_safety_orders by 1\n        array.push(statsarray_safety_orders, 0)\n        array.push(statsarray_safety_orders_timeout, 0)\n```\n\n----------------------------------------\n\nTITLE: Display Settings for Info Tables and Order Levels in Pine Script\nDESCRIPTION: Configuration of display elements including information tables and visualization of average down levels. These inputs control the visual representation of the strategy's data on the chart.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Bot DCA Backtester & Signals FREE.txt#2025-04-23_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\n//Info Table On/Off\ndataTableOn = input.bool(true, title=\"Info Table On/Off\", group=\"Info Tables\")\n\n//Average Down Levels On/Off\norderLevelsOn = input.bool(true, title=\"Turn Average Down Levels On/Off\", group=\"Average Down Levels\")\n\n//Table Positions\nbright = position.bottom_right\nbleft = position.bottom_left\nbcenter = position.bottom_center\ntright = position.top_right\ntleft = position.top_left\ntcenter = position.top_center\nmright = position.middle_right\nmleft = position.middle_left\nmcenter = position.middle_center\ntablePosition = input.string(bright, title=\"Percentage Table Position\", options=[bright, bleft, bcenter, tright, tleft, tcenter, mright, mleft, mcenter], group=\"Info Tables\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Settings Table in Pine Script for TradingView DCA Strategy\nDESCRIPTION: Creates a table displaying the strategy's configuration settings, including strategy type, commission rate, entry conditions, take profit and stop loss parameters, and order sizes and scaling factors for the DCA strategy.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_38\n\nLANGUAGE: Pine Script\nCODE:\n```\nif cfg_show_settings_table\n    table settings = table.new(position.bottom_left, columns=1, rows=2, frame_width=1, frame_color=color.black)\n    _row = 0\n    table.cell(settings, column=0, row=0, text='DCA Settings', text_halign=text.align_left, text_size=size.small, text_color=color.white, bgcolor=get_bg_color_blue())\n\n    _text = 'Type: ' + str.tostring(cfg_strategy_type) + '; '\n    _text := _text + 'Commision: ' + str.tostring(cfg_commision_percent) + '%;\\n'\n    _text := _text + 'Condition: ' + str.tostring(deal_start_type) + ' '\n    if deal_start_type == 'RSI-7'\n        _text := _text + str.tostring(rsi_start_operation)\n        _text := _text + ' ' + str.tostring(rsi_start_value) + ' \\n\\n'\n    else if deal_start_type == 'External Indicator'\n        _text := _text + '( '\n        _text := _text + str.tostring(deal_start_operation) + ' '\n        _text := _text + str.tostring(deal_start_value)\n        _text := _text + ' )\\n\\n'\n\n    _text := _text + 'TP: ' + str.tostring(cfg_take_profit_perc) + '% '\n    _text := _text + ' (' + str.tostring(cfg_take_profit_type) + ')'\n    if cfg_enable_stop_loss\n        _text := _text + '\\nSL: ' + str.tostring(cfg_stop_loss_perc) + '%'\n    _text := _text + '\\n\\n'\n\n    _text := _text + 'BO: ' + str.tostring(cfg_base_order_size_usd) + ' ' + str.tostring(syminfo.currency) + '; '\n    _text := _text + 'SO: ' + str.tostring(cfg_safety_order_size_usd) + ' ' + str.tostring(syminfo.currency) + ';\\n'\n    _text := _text + 'SO Dev: ' + str.tostring(cfg_safety_order_price_deviation_perc) + '% ; '\n    _text := _text + 'Max SO: ' + str.tostring(cfg_max_safety_orders) + '; '\n    _text := _text + 'Covered: ' + str.tostring(math.round(stepped_deviation(cfg_max_safety_orders), 2)) + ' %;\\n'\n    _text := _text + 'SO Volume Scale: ' + str.tostring(cfg_safety_order_volume_scale) + '; '\n    _text := _text + 'SO Step Scale: ' + str.tostring(cfg_safety_order_price_step_scale) + ';\\n'\n    \n\n    table.cell(settings, column=0, row=1, text=_text, text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n```\n\n----------------------------------------\n\nTITLE: Updating Take Profit Orders Based on Current Position in Pine Script\nDESCRIPTION: Calculates and updates the take profit price based on the current position average price and size. It handles different take profit types and conditionally places or updates take profit orders with appropriate parameters.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_34\n\nLANGUAGE: pine\nCODE:\n```\n// ------------------------\n// GENERAL UPDATES FOR EACH CANDLE\n// TAKE PROFIT\n// Recalculate TP price based on current strategy.position_avg_price \n// and strategy.position_size and UPDATE ORDER\n\nif i_take_profit_type  == '% From total volume'\n    c_take_profit_price := take_profit_price()\n    \n    //Place or update TP order\n    if i_enable_bot_control and i_exec_take_profit\n        _alert_json = get_3cbot_stopdeal_json()\n        strategy.order(id='D' + str.tostring(stats_deals_started) + '-TP', limit=c_take_profit_price, \n         direction=IS_LONG ? strategy.short : strategy.long, qty=math.abs(strategy.position_size), \n          when=is_deal_started(), alert_message=_alert_json)\n    else\n        strategy.order(id='D' + str.tostring(stats_deals_started) + '-TP', limit=c_take_profit_price, \n         direction=IS_LONG ? strategy.short : strategy.long, qty=math.abs(strategy.position_size), \n          when=is_deal_started())\n    \n    //hack because if clause has return type\n    string _dumb_string = \"\"\n    \nelse\n    c_take_profit_price := na\n    \n    //hack because if clause has return type\n    string _dumb_string = \"\"\n```\n\n----------------------------------------\n\nTITLE: Calculating and Plotting Short Position Take Profit and Stop Loss Levels in Pine Script\nDESCRIPTION: Calculates and displays take profit and stop loss levels for short positions. Take profit is calculated as a percentage below average entry, while stop loss is calculated relative to the most recent safety order price or the initial entry price.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/TickDCA Strategy.txt#2025-04-23_snippet_4\n\nLANGUAGE: pine script\nCODE:\n```\n// Short TP and SL levels\nvar float shortStopLevel = na\nvar float shortTpLevel = na\n\nif (inPosition and positionType == \"Short\")\n    shortTpLevel := averageEntryPrice * (1 - takeProfitPercent)\n    shortStopLevel := safetyOrdersPlaced > 0 ? array.get(calcSafetyLevels(entryPrice, false), safetyOrdersPlaced - 1) * (1 + stopLossPercent) : entryPrice * (1 + stopLossPercent)\n\nplot(shortTpLevel, title=\"TP Short\", color=color.green, style=plot.style_linebr, linewidth=2)\nplot(shortStopLevel, title=\"SL Short\", color=color.red, style=plot.style_linebr, linewidth=2)\n```\n\n----------------------------------------\n\nTITLE: Creating Formatted Balance and Usage Label in Pine Script\nDESCRIPTION: Constructs a formatted string label displaying the account balance, maximum bot usage amount, maximum safety order price deviation, and percentage of available balance that would be used. Includes a warning if bot usage exceeds available balance.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Visible DCA Strategy.txt#2025-04-23_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\nstring label = \n 'Balance                                      : ' + str.tostring(math.round(equity, 0), '###,###,###,###') + ' USDT' + '\\n' + \n 'Max amount for bot usage           : ' + str.tostring(math.round(bot_use, 0), '###,###,###,###') + ' USDT' + '\\n' + \n 'Max safety order price deviation : ' + str.tostring(math.round(bot_dev, 0), '##.##') + ' %' + '\\n' + \n '% of available balance                : ' + str.tostring(math.round(bot_ava, 0), '###,###,###,###') + ' %' \n + (bot_ava > 100 ? '\\n \\n' +  '⚠ Warning! Bot will use amount greater than you have on exchange' : na)\n```\n\n----------------------------------------\n\nTITLE: Calculating Required Percentage for Price Target in Pine Script\nDESCRIPTION: This function calculates the percentage change needed for the current price to reach a required target price. It handles both long and short positions by adjusting the calculation direction appropriately.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_10\n\nLANGUAGE: pine\nCODE:\n```\nsteps_required_percent(_last_price, _required_price)=>\n    if IS_LONG\n        _required_percent   = math.round((_required_price * 100 / _last_price) - 100, 2)\n    else\n        _required_percent   = math.round(100 - (_required_price * 100 / _last_price), 2)\n```\n\n----------------------------------------\n\nTITLE: Deal Closure and Statistics Handling in Pine Script\nDESCRIPTION: Handles the closure of trading deals including profit calculation, statistics updates, and state reset logic. Manages arrays for tracking deal performance and updates global variables.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_40\n\nLANGUAGE: pine\nCODE:\n```\narray.set(statsarray_safety_orders, count_executed_safety_orders, array.get(statsarray_safety_orders, count_executed_safety_orders) + 1)\nstats_deals_take_profit_finished    := stats_deals_take_profit_finished + 1\n\nc_current_deal_close_value    := c_current_deal_position_size * close\nc_total_volume                := c_total_volume + c_current_deal_close_value\n\nc_current_deal_pnl            := strategy.openprofit - get_commission_for_volume(c_current_deal_close_value)\n\nc_strategy_prev_netprofit     := strategy.netprofit + c_current_deal_pnl\n```\n\n----------------------------------------\n\nTITLE: Displaying Balance Information Label on Chart in Pine Script\nDESCRIPTION: Conditionally creates and positions a label on the chart when in a long position. The label displays account balance information and bot usage details, with special color formatting if the bot usage exceeds available balance.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Visible DCA Strategy.txt#2025-04-23_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\nif status_long\n    day_label = \n     label.new(\n     x=time[1], \n     y=high * 1.03, \n     text=label, \n     xloc=xloc.bar_time, \n     yloc=yloc.price, \n     color=bot_ava > 100 ? color.new(color.yellow, 0) : color.new(color.black, 50), \n     style=label.style_label_lower_right, \n     textcolor=bot_ava > 100 ? color.new(color.red, 0) : color.new(color.silver, 0), \n     size=size.normal, \n     textalign=text.align_left)\n```\n\n----------------------------------------\n\nTITLE: Time Conversion and Formatting Functions - Pine Script\nDESCRIPTION: Utility functions for converting between different time formats and generating human-readable time strings\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_15\n\nLANGUAGE: pine\nCODE:\n```\nget_days(start_time, end_time) =>\n    time_diff = end_time - start_time\n    diff_days = math.round(time_diff / 86400000, 1)\n\nget_timestring_from_seconds(seconds) =>\n    if seconds >= 86400\n        string _string = str.tostring(math.round(seconds / 86400, 1)) + ' days'\n    else if seconds >= 3600\n        string _string = str.tostring(math.round(seconds / 3600, 1)) + ' hours'\n    else\n        string _string = str.tostring(math.round(seconds / 60, 1)) + ' mins'\n```\n\n----------------------------------------\n\nTITLE: Validating Stop Loss Configuration in Pine Script\nDESCRIPTION: This function validates if the stop loss configuration is appropriate based on the trading strategy settings. It checks if stop loss is enabled and if the stop loss percentage is greater than the last safety order's deviation percentage when using percentage-based safety orders.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_11\n\nLANGUAGE: pine\nCODE:\n```\nvalid_stop_loss() =>\n    bool _valid = false\n    if cfg_enable_stop_loss \n        //stop loss percent is bigger than last safety order percent\n        if (safety_order_type == 'Percentage' and cfg_stop_loss_perc > stepped_deviation(cfg_max_safety_orders))\n            _valid := true\n        else if (safety_order_type == 'External Indicator')\n            _valid := true\n        else\n            _valid := false\n    else\n        _valid := false\n```\n\n----------------------------------------\n\nTITLE: Executing Strategy Entry and Plotting Price Levels in Pine Script\nDESCRIPTION: Implementation of trade execution logic based on buy signals and visualization of entry and average down price levels. This places the first order when a buy signal is triggered and displays key price levels on the chart.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Bot DCA Backtester & Signals FREE.txt#2025-04-23_snippet_8\n\nLANGUAGE: pine\nCODE:\n```\n//Strategy Trade Signal\nif strategy.opentrades == 0 and buy and barstate.isconfirmed \n    strategy.entry('Bull #1', strategy.long, qty=quantityConverted, comment='Buy #1')\n\n// Plot Entry & Average Down Levels\nplot(strategy.opentrades.entry_price(0), title=\"Order #1\", color=color.white)\nplot(maxOrders >= 2 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown) : na, title=\"Order #2\", color=color.green)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Trading Signal Alerts in Pine Script\nDESCRIPTION: Configures TradingView alerts for both long and short trading signals. These alerts can be used to notify the trader when a signal is generated or to send signals to external systems for automated trading.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/TickDCA Strategy.txt#2025-04-23_snippet_6\n\nLANGUAGE: pine script\nCODE:\n```\n// Alert for external signal changes\nalertcondition(longSignal, title=\"Long Signal\", message=\"Long signal received\")\nalertcondition(shortSignal, title=\"Short Signal\", message=\"Short signal received\")\n```\n\n----------------------------------------\n\nTITLE: Fractal Pattern Detection in Pine Script\nDESCRIPTION: Defines up and down fractal patterns based on price action and volume conditions. Includes helper functions to maintain state across security calls.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_12\n\nLANGUAGE: pine\nCODE:\n```\nup = high[3]>high[4] and high[4]>high[5] and high[2]<high[3] and high[1]<high[2] and volume[3]>vam[3]\ndown = low[3]<low[4] and low[4]<low[5] and low[2]>low[3] and low[1]>low[2] and volume[3]>vam[3]\n\nfractaldownF() => \n    fd = 0.0\n    fd := down ? low[3] : nz(fd[1])\n    \nfractalupF() => \n    fu = 0.0\n    fu := up ? high[3] : nz(fu[1])\n```\n\n----------------------------------------\n\nTITLE: Plotting Order Price Levels in TradingView Pine Script\nDESCRIPTION: Plots visualization lines for each potential order entry price from order #3 to order #51. Each price level is calculated as a percentage (avgDown values) below the initial entry price and only displayed if the maximum allowed orders parameter permits it and if order level visualization is enabled.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Bot DCA Backtester & Signals FREE.txt#2025-04-23_snippet_9\n\nLANGUAGE: pine\nCODE:\n```\nplot(maxOrders >= 3 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown1) : na, title=\"Order #3\", color=color.green)\nplot(maxOrders >= 4 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown2) : na, title=\"Order #4\", color=color.green)\nplot(maxOrders >= 5 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown3) : na, title=\"Order #5\", color=color.green)\nplot(maxOrders >= 6 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown4) : na, title=\"Order #6\", color=color.green)\nplot(maxOrders >= 7 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown5) : na, title=\"Order #7\", color=color.green)\nplot(maxOrders >= 8 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown6) : na, title=\"Order #8\", color=color.green)\nplot(maxOrders >= 9 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown7) : na, title=\"Order #9\", color=color.green)\nplot(maxOrders >= 10 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown8) : na, title=\"Order #10\", color=color.green)\nplot(maxOrders >= 11 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown9) : na, title=\"Order #11\", color=color.green)\nplot(maxOrders >= 12 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown10) : na, title=\"Order #12\", color=color.green)\nplot(maxOrders >= 13 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown11) : na, title=\"Order #13\", color=color.green)\nplot(maxOrders >= 14 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown12) : na, title=\"Order #14\", color=color.green)\nplot(maxOrders >= 15 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown13) : na, title=\"Order #15\", color=color.green)\nplot(maxOrders >= 16 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown14) : na, title=\"Order #16\", color=color.green)\nplot(maxOrders >= 17 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown15) : na, title=\"Order #17\", color=color.green)\nplot(maxOrders >= 18 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown16) : na, title=\"Order #18\", color=color.green)\nplot(maxOrders >= 19 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown17) : na, title=\"Order #19\", color=color.green)\nplot(maxOrders >= 20 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown18) : na, title=\"Order #20\", color=color.green)\nplot(maxOrders >= 21 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown19) : na, title=\"Order #21\", color=color.green)\nplot(maxOrders >= 22 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown20) : na, title=\"Order #22\", color=color.green)\nplot(maxOrders >= 23 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown21) : na, title=\"Order #23\", color=color.green)\nplot(maxOrders >= 24 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown22) : na, title=\"Order #24\", color=color.green)\nplot(maxOrders >= 25 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown23) : na, title=\"Order #25\", color=color.green)\nplot(maxOrders >= 26 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown24) : na, title=\"Order #26\", color=color.green)\nplot(maxOrders >= 27 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown25) : na, title=\"Order #27\", color=color.green)\nplot(maxOrders >= 28 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown26) : na, title=\"Order #28\", color=color.green)\nplot(maxOrders >= 29 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown27) : na, title=\"Order #29\", color=color.green)\nplot(maxOrders >= 30 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown28) : na, title=\"Order #30\", color=color.green)\nplot(maxOrders >= 31 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown29) : na, title=\"Order #31\", color=color.green)\nplot(maxOrders >= 32 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown30) : na, title=\"Order #32\", color=color.green)\nplot(maxOrders >= 33 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown31) : na, title=\"Order #33\", color=color.green)\nplot(maxOrders >= 34 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown32) : na, title=\"Order #34\", color=color.green)\nplot(maxOrders >= 35 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown33) : na, title=\"Order #35\", color=color.green)\nplot(maxOrders >= 36 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown34) : na, title=\"Order #36\", color=color.green)\nplot(maxOrders >= 37 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown35) : na, title=\"Order #37\", color=color.green)\nplot(maxOrders >= 38 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown36) : na, title=\"Order #38\", color=color.green)\nplot(maxOrders >= 39 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown37) : na, title=\"Order #39\", color=color.green)\nplot(maxOrders >= 40 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown38) : na, title=\"Order #40\", color=color.green)\nplot(maxOrders >= 41 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown39) : na, title=\"Order #41\", color=color.green)\nplot(maxOrders >= 42 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown40) : na, title=\"Order #42\", color=color.green)\nplot(maxOrders >= 43 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown41) : na, title=\"Order #43\", color=color.green)\nplot(maxOrders >= 44 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown42) : na, title=\"Order #44\", color=color.green)\nplot(maxOrders >= 45 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown43) : na, title=\"Order #45\", color=color.green)\nplot(maxOrders >= 46 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown44) : na, title=\"Order #46\", color=color.green)\nplot(maxOrders >= 47 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown45) : na, title=\"Order #47\", color=color.green)\nplot(maxOrders >= 48 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown46) : na, title=\"Order #48\", color=color.green)\nplot(maxOrders >= 49 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown47) : na, title=\"Order #49\", color=color.green)\nplot(maxOrders >= 50 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown48) : na, title=\"Order #50\", color=color.green)\nplot(maxOrders >= 51 and orderLevelsOn ? strategy.opentrades.entry_price(0) * (1 - avgDown49) : na, title=\"Order #51\", color=color.green)\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Down Levels for DCA in Pine Script\nDESCRIPTION: Calculation of price levels for average down orders based on the initial average down percentage and percentage scaling factor. These levels determine at what prices additional DCA orders will be executed.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Bot DCA Backtester & Signals FREE.txt#2025-04-23_snippet_7\n\nLANGUAGE: pine\nCODE:\n```\n// Average Down Levels\navgDown1 = (avgDown * percentScale) + avgDown\navgDown2 = (avgDown1 * percentScale) + avgDown\navgDown3 = (avgDown2 * percentScale) + avgDown\navgDown4 = (avgDown3 * percentScale) + avgDown\navgDown5 = (avgDown4 * percentScale) + avgDown\navgDown6 = (avgDown5 * percentScale) + avgDown\navgDown7 = (avgDown6 * percentScale) + avgDown\navgDown8 = (avgDown7 * percentScale) + avgDown\navgDown9 = (avgDown8 * percentScale) + avgDown\navgDown10 = (avgDown9 * percentScale) + avgDown\navgDown11 = (avgDown10 * percentScale) + avgDown\navgDown12 = (avgDown11 * percentScale) + avgDown\navgDown13 = (avgDown12 * percentScale) + avgDown\navgDown14 = (avgDown13 * percentScale) + avgDown\navgDown15 = (avgDown14 * percentScale) + avgDown\navgDown16 = (avgDown15 * percentScale) + avgDown\navgDown17 = (avgDown16 * percentScale) + avgDown\navgDown18 = (avgDown17 * percentScale) + avgDown\navgDown19 = (avgDown18 * percentScale) + avgDown\navgDown20 = (avgDown19 * percentScale) + avgDown\navgDown21 = (avgDown20 * percentScale) + avgDown\navgDown22 = (avgDown21 * percentScale) + avgDown\navgDown23 = (avgDown22 * percentScale) + avgDown\navgDown24 = (avgDown23 * percentScale) + avgDown\navgDown25 = (avgDown24 * percentScale) + avgDown\navgDown26 = (avgDown25 * percentScale) + avgDown\navgDown27 = (avgDown26 * percentScale) + avgDown\navgDown28 = (avgDown27 * percentScale) + avgDown\navgDown29 = (avgDown28 * percentScale) + avgDown\navgDown30 = (avgDown29 * percentScale) + avgDown\navgDown31 = (avgDown30 * percentScale) + avgDown\navgDown32 = (avgDown31 * percentScale) + avgDown\navgDown33 = (avgDown32 * percentScale) + avgDown\navgDown34 = (avgDown33 * percentScale) + avgDown\navgDown35 = (avgDown34 * percentScale) + avgDown\navgDown36 = (avgDown35 * percentScale) + avgDown\navgDown37 = (avgDown36 * percentScale) + avgDown\navgDown38 = (avgDown37 * percentScale) + avgDown\navgDown39 = (avgDown38 * percentScale) + avgDown\navgDown40 = (avgDown39 * percentScale) + avgDown\navgDown41 = (avgDown40 * percentScale) + avgDown\navgDown42 = (avgDown41 * percentScale) + avgDown\navgDown43 = (avgDown42 * percentScale) + avgDown\navgDown44 = (avgDown43 * percentScale) + avgDown\navgDown45 = (avgDown44 * percentScale) + avgDown\navgDown46 = (avgDown45 * percentScale) + avgDown\navgDown47 = (avgDown46 * percentScale) + avgDown\navgDown48 = (avgDown47 * percentScale) + avgDown\navgDown49 = (avgDown48 * percentScale) + avgDown\navgDown50 = (avgDown49 * percentScale) + avgDown\n```\n\n----------------------------------------\n\nTITLE: 3CBot Integration Functions - Pine Script\nDESCRIPTION: Functions for generating JSON messages to integrate with 3CBot trading system\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_18\n\nLANGUAGE: pine\nCODE:\n```\nget_3cbot_startdeal_json() =>\n    _string = '{\"message_type\":\"bot\", \"bot_id\":\"' + cfg_bot_id + '\", \"email_token\":\"' + cfg_email_token + '\", \"delay_seconds\":0, \"pair\":\"' + str.tostring(syminfo.currency) + '_' + str.tostring(syminfo.basecurrency) + '\"}'\n\nget_3cbot_stopdeal_json() =>\n    _string = '{\"action\": \"close_at_market_price_all\", \"message_type\":\"bot\", \"bot_id\":\"' + cfg_bot_id + '\", \"email_token\":\"' + cfg_email_token + '\", \"delay_seconds\":0, \"pair\":\"' + str.tostring(syminfo.currency) + '_' + str.tostring(syminfo.basecurrency) + '\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating Warning Table in Pine Script\nDESCRIPTION: This snippet creates a table to display warning messages if any warnings are present. The table is positioned at the bottom center of the chart.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_30\n\nLANGUAGE: pine\nCODE:\n```\nif _text_warnings != ''\n    table warnings = table.new(position.bottom_center, columns=1, rows=2, frame_width=1, frame_color=color.red, border_width=1, border_color=color.red, bgcolor=color.red)\n    table.cell(warnings, 0, 0, 'WARNINGS!\\n(Fix them, otherwise the stats are innacurate)', text_color=color.white, text_halign=text.align_center)\n    table.cell(warnings, 0, 1, _text_warnings, text_color=color.white, text_halign=text.align_left)\n```\n\n----------------------------------------\n\nTITLE: Trading Statistics Table Generation in Pine Script\nDESCRIPTION: Creates detailed tables showing trading steps, volumes, and prices. Includes validation warnings and calculates required capital and other trading metrics.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_42\n\nLANGUAGE: pine\nCODE:\n```\nif barstate.islastconfirmedhistory\n    c_required_capital := get_required_capital()\n\n    string _text_warnings = ''\n\n    if stats_deals_started == 0\n        _text_warnings := _text_warnings + ' - No deal started\\n'\n\n    if stats_deals_finished == 0\n        _text_warnings := _text_warnings + ' - No deal finished\\n'\n```\n\n----------------------------------------\n\nTITLE: Trading Signal Generation Logic\nDESCRIPTION: Calculates buy and sell signals based on fractal patterns, price deviations, and age conditions with configurable parameters.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_13\n\nLANGUAGE: pine\nCODE:\n```\nage = ta.barssince(fuptf != fuptf[1])\nagecond = maxbaseage == 0 or age < maxbaseage \n\nbuy = 100*(close/fdowntf) < 100 - deal_start_condition and agecond\nsell = 100*(close/fuptf) > 100 + deal_start_condition and agecond\n\nsignal =i_strategy_type == 'long' ? buy and (allowConsecutiveSignals or not buy[1] or fdowntf != fdowntf[1]) : i_strategy_type =='short' ? sell and (allowConsecutiveSignals or not sell[1] or fuptf != fuptf[1]) : na\n```\n\n----------------------------------------\n\nTITLE: Creating Warning Table for High Share Price in Pine Script\nDESCRIPTION: Displays a warning table when the current price is higher than the base order quantity. This helps alert traders when position sizing may need adjustment before entering a trade.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Bot DCA Backtester & Signals FREE.txt#2025-04-23_snippet_18\n\nLANGUAGE: pine\nCODE:\n```\n// Share price too high for base order label\nwarningTable = table.new(position.top_center, columns=1, rows=1, bgcolor=color.orange)\nif strategy.closedtrades == 0 and close > quantity\n    table.cell(table_id=warningTable, column=0, row=0, text=\"Share Price Is Higher Than Base Order\", height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center)\n```\n\n----------------------------------------\n\nTITLE: Plotting Average Entry Price in Pine Script\nDESCRIPTION: Displays the average entry price when in a position. The value is shown as a white line that breaks when not in a position, providing a visual reference for the trade's average cost basis.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/TickDCA Strategy.txt#2025-04-23_snippet_2\n\nLANGUAGE: pine script\nCODE:\n```\nplot(inPosition ? averageEntryPrice : na, title=\"Average Entry\", color=color.white, style=plot.style_linebr, linewidth=2)\n```\n\n----------------------------------------\n\nTITLE: Rendering Safety Order Statistics in Pine Script for TradingView DCA Strategy\nDESCRIPTION: Creates a section of the statistics table that displays detailed information about safety order execution, including the number of deals closed with each safety order level, maximum and average safety orders used, and stop loss statistics.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_37\n\nLANGUAGE: Pine Script\nCODE:\n```\nif array.size(statsarray_safety_orders) > 0\n    table.cell(sostats, column=0, row=_row, text='Close stats for ' + str.tostring(stats_deals_finished) + ' deals', text_color=color.white, text_size=size.small, bgcolor=get_bg_color_blue(), text_halign=text.align_left)\n    table.cell(sostats, column=1, row=_row, text='Number (%) / Exit with timeout', text_color=color.white, text_size=size.small, bgcolor=get_bg_color_blue())\n    _row := _row + 1\n    _saved_row = _row\n    _row := _row + 2\n\n    _max_safety_orders = 0\n    float _avg_safety_orders = 0\n    for _i = 0 to array.size(statsarray_safety_orders) - 1 by 1\n        string _closed_text = ''\n        if _i == 0\n            _closed_text := 'BO    (' + str.tostring(math.round(stepped_deviation(_i), 2)) + '%)'\n        else\n            _closed_text := 'SO ' + str.tostring(_i) + ' (' + str.tostring(math.round(stepped_deviation(_i), 2)) + '%)'\n\n        _cnt = array.get(statsarray_safety_orders, _i)\n        if _cnt > 0 and _i > _max_safety_orders\n            _max_safety_orders := _i\n\n        _avg_safety_orders := _avg_safety_orders + _cnt * _i\n        table.cell(sostats, column=0, row=_row + _i, text='Closed with ' + _closed_text, text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row + _i))\n        table.cell(sostats, column=1, row=_row + _i, text=str.tostring(_cnt) + ' (' + str.tostring(math.round(_cnt * 100 / stats_deals_finished, 2)) + '%) / ' + str.tostring(array.get(statsarray_safety_orders_timeout, _i)), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row + _i))\n\n    _avg_safety_orders := math.round(_avg_safety_orders / array.sum(statsarray_safety_orders), 1)\n\n    table.cell(sostats, column=0, row=_saved_row, text='Max SO used:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_saved_row))\n    table.cell(sostats, column=1, row=_saved_row, text=str.tostring(_max_safety_orders), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_saved_row))\n\n    table.cell(sostats, column=0, row=_saved_row + 1, text='Avg SO used:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_saved_row + 1))\n    table.cell(sostats, column=1, row=_saved_row + 1, text=str.tostring(_avg_safety_orders), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_saved_row + 1))\n\nif valid_stop_loss()\n    _row := _row + array.size(statsarray_safety_orders)\n    table.cell(sostats, column=0, row=_row, text='Closed with Stop Loss (' + str.tostring(cfg_stop_loss_perc) + '%)', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n    table.cell(sostats, column=1, row=_row, text=str.tostring(stats_deals_stop_loss_finished) + ' (' + str.tostring(math.round(stats_deals_stop_loss_finished * 100 / stats_deals_finished, 2)) + '%)', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=stats_deals_stop_loss_finished > 0 ? get_bg_color_red() : get_bg_color_green())\n```\n\n----------------------------------------\n\nTITLE: Checking Stop Loss Price Hit in Pine Script\nDESCRIPTION: Function that determines if a stop loss price has been hit based on the trading direction (long or short). Returns true if the price has reached the stop loss level and the position size is zero.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_16\n\nLANGUAGE: pine\nCODE:\n```\nstop_loss_price_hit() =>\n    bool _cond = false\n\n    if valid_stop_loss()\n        if IS_LONG\n            _cond := low <= c_stop_loss_price and strategy.position_size == 0\n        else\n            _cond := high >= c_stop_loss_price and strategy.position_size == 0\n    else\n        _cond := false\n```\n\n----------------------------------------\n\nTITLE: Checking if Deal is Marked as Finished in Pine Script\nDESCRIPTION: Function that checks if a deal has been properly marked as finished by validating the c_still_in_deal global variable. Used to ensure variables are reset after a deal is completed.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_20\n\nLANGUAGE: pine\nCODE:\n```\n// After a deal is completed we need to reset specific variables\nwas_deal_marked_as_finished()=>\n    // If we are not in a deal anymore but some global variable was not reset yet\n    if c_still_in_deal == true\n        _state = false\n    else\n        _state = true\n```\n\n----------------------------------------\n\nTITLE: Setting Up Label Theme Configuration in Pine Script\nDESCRIPTION: Configures the visual appearance of labels based on the chart theme (dark or light) to ensure proper text visibility.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\n//used for labels\ni_theme = input.string(defval='dark', title='Chart theme', options=['light', 'dark'])\ntheme_text_color = i_theme == 'dark' ? color.white : color.black\n```\n\n----------------------------------------\n\nTITLE: Rendering Statistics Table in Pine Script for TradingView DCA Strategy\nDESCRIPTION: Creates and populates a statistics table with various performance metrics for a DCA trading strategy, including maximum deviation, drawdown statistics, deal duration metrics, volume information, and safety order usage patterns.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_36\n\nLANGUAGE: Pine Script\nCODE:\n```\ntable.cell(sostats, column=0, row=_row, text='Covered deviation:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\ntable.cell(sostats, column=1, row=_row, text=str.tostring(math.round(stepped_deviation(cfg_max_safety_orders), 2)) + '%', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_row := _row + 1\n\n\nstring _bef = valid_stop_loss() ? 'before SL' : ''\ntable.cell(sostats, column=0, row=_row, text='Max deviation:\\n(Deal start price vs worst candle ' + _bef + ')', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\ntable.cell(sostats, column=1, row=_row, text=str.tostring(math.round(stats_biggest_dev, 2)) + '%\\n' + '(' + time_to_date_string(stats_biggest_dev_time) + ')', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_row := _row + 1\n\n\ntable.cell(sostats, column=0, row=_row, text='Max drawdown from breakeven:\\n(Avg price vs worst candle ' + _bef + ')', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\ntable.cell(sostats, column=1, row=_row, text=str.tostring(math.round(stats_max_drawdown, cfg_decimals)) + ' ' + str.tostring(syminfo.currency) + ' (' + str.tostring(math.round(stats_max_drawdown_equity_percent, 2)) + '%)\\n' + '(' + time_to_date_string(stats_max_drawdown_time) + ')', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_row := _row + 1\n\n\n\ntable.cell(sostats, column=0, row=_row, text='Max # bars in deal:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\ntable.cell(sostats, column=1, row=_row, text=str.tostring(array.max(statsarray_no_of_bars)), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_row := _row + 1\n\n\ntable.cell(sostats, column=0, row=_row, text='Avg # bars in deal:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\ntable.cell(sostats, column=1, row=_row, text=str.tostring(math.round(array.avg(statsarray_no_of_bars), 2)), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_row := _row + 1\n\n\ntable.cell(sostats, column=0, row=_row, text='Total volume:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\ntable.cell(sostats, column=1, row=_row, text=str.tostring(math.round(glb_total_volume, cfg_decimals)) + ' ' + str.tostring(syminfo.currency), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_row := _row + 1\n\ntable.cell(sostats, column=0, row=_row, text='Commision:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\ntable.cell(sostats, column=1, row=_row, text=str.tostring(math.round(get_commission_for_volume(glb_total_volume), cfg_decimals)) + ' ' + str.tostring(syminfo.currency), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_row := _row + 1\n```\n\n----------------------------------------\n\nTITLE: Displaying Safety Order Statistics in TradingView Pine Script\nDESCRIPTION: This code displays statistics about safety orders in a TradingView table, including counts of deals closed with different numbers of safety orders, maximum and average safety orders used, and stop loss statistics.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_50\n\nLANGUAGE: pine\nCODE:\n```\ntable.cell(sostats, column=0, row=_row + _i, text='Closed with ' + _closed_text, text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row + _i))\ntable.cell(sostats, column=1, row=_row + _i, text=str.tostring(_cnt) + ' (' + str.tostring(math.round(_cnt * 100 / stats_deals_finished, 2)) + '%) / ' + str.tostring(array.get(statsarray_safety_orders_timeout, _i)), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row + _i))\n\n_avg_safety_orders := math.round(_avg_safety_orders / array.sum(statsarray_safety_orders), 1)\n\ntable.cell(sostats, column=0, row=_saved_row, text='Max SO used:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_saved_row))\ntable.cell(sostats, column=1, row=_saved_row, text=str.tostring(_max_safety_orders), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_saved_row))\n\ntable.cell(sostats, column=0, row=_saved_row + 1, text='Avg SO used:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_saved_row + 1))\ntable.cell(sostats, column=1, row=_saved_row + 1, text=str.tostring(_avg_safety_orders), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_saved_row + 1))\n\nif valid_stop_loss()\n    _row := _row + array.size(statsarray_safety_orders)\n    table.cell(sostats, column=0, row=_row, text='Closed with Stop Loss (' + str.tostring(i_stop_loss_perc) + '%)', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n    table.cell(sostats, column=1, row=_row, text=str.tostring(stats_deals_stop_loss_finished) + ' (' + str.tostring(math.round(stats_deals_stop_loss_finished * 100 / stats_deals_finished, 2)) + '%)', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=stats_deals_stop_loss_finished > 0 ? get_bg_color_red() : get_bg_color_green())\n```\n\n----------------------------------------\n\nTITLE: Importing Time Filters Module in Pine Script\nDESCRIPTION: Imports a custom time filters module that provides functions for time-based filtering of trading signals.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\nimport jason5480/time_filters/1 as tif\n```\n\n----------------------------------------\n\nTITLE: Calculating and Displaying Profit Statistics in Pine Script\nDESCRIPTION: This code calculates and displays profit statistics including required capital, total profit, and buy & hold return. It uses custom functions for profit calculation and formatting.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_47\n\nLANGUAGE: pine\nCODE:\n```\ntable.cell(sostats, column=0, row=_row, text='Required capital:', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\ntable.cell(sostats, column=1, row=_row, text=str.tostring(c_required_capital) + ' ' + str.tostring(syminfo.currency), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_row := _row + 1\n\ntable.cell(sostats, column=0, row=_row, text='Profit:\\n(after commision)', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n\n_text1 = str.tostring(math.round(get_final_pnl_new(), i_decimals)) + ' ' + str.tostring(syminfo.currency)\n_text1 := _text1 + ' (' + str.tostring(math.round(get_final_pnl_prct_new(), 2)) + ' %)\\n'\nif get_days(bh_start_time, bh_end_time) >= 1\n    _text1 := _text1 + str.tostring(math.round(get_final_pnl_prct_new() / get_days(bh_start_time, bh_end_time), 2)) + '% / day'\nelse\n    _text1 := _text1 + str.tostring(math.round(get_final_pnl_prct_new(), 2)) + '% / day'\ntable.cell(sostats, column=1, row=_row, text=_text1, text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_row := _row + 1\n\n\n//if date range is limited calculate between start and end date\n_bh_equity = c_required_capital / bh_start_price * bh_end_price - c_required_capital\n_bh_commision = get_commission_for_volume(c_required_capital + c_required_capital / bh_start_price * bh_end_price)\n_bh_equity := _bh_equity - _bh_commision\n_bh_prct_total = math.round(_bh_equity * 100 / c_required_capital, 2)\n\ntable.cell(sostats, column=0, row=_row, text='Buy & hold return:\\n(after commision)', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_text2 = str.tostring(math.round(_bh_equity, i_decimals)) + ' ' + str.tostring(syminfo.currency)\n_text2 := _text2 + ' (' + str.tostring(_bh_prct_total) + '%)\\n'\nif get_days(bh_start_time, bh_end_time) >= 1\n    _text2 := _text2 + str.tostring(math.round(_bh_prct_total / get_days(bh_start_time, bh_end_time), 2)) + '% / day'\nelse\n    _text2 := _text2 + str.tostring(math.round(_bh_prct_total, 2)) + '% / day'\n    _text2\ntable.cell(sostats, column=1, row=_row, text=_text2, text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_row := _row + 1\n```\n\n----------------------------------------\n\nTITLE: Calculating and Displaying Safety Order Statistics in Pine Script\nDESCRIPTION: This code calculates and displays statistics related to safety orders, including the number of deals closed at each safety order level. It uses custom functions for calculations and formatting.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_49\n\nLANGUAGE: pine\nCODE:\n```\nif array.size(statsarray_safety_orders) > 0\n    table.cell(sostats, column=0, row=_row, text='Close stats for ' + str.tostring(stats_deals_finished) + ' deals', text_color=color.white, text_size=size.small, bgcolor=get_bg_color_orange(), text_halign=text.align_left)\n    table.cell(sostats, column=1, row=_row, text='Number (%) / Exit with timeout', text_color=color.white, text_size=size.small, bgcolor=get_bg_color_orange())\n    _row := _row + 1\n    _saved_row = _row\n    _row := _row + 2\n\n    _max_safety_orders = 0\n    float _avg_safety_orders = 0\n    for _i = 0 to array.size(statsarray_safety_orders) - 1 by 1\n        string _closed_text = ''\n        if _i == 0\n            _closed_text := 'BO    (' + str.tostring(math.round(stepped_deviation(_i), 2)) + '%)'\n        else\n            _closed_text := 'SO ' + str.tostring(_i) + ' (' + str.tostring(math.round(stepped_deviation(_i), 2)) + '%)'\n\n        _cnt = array.get(statsarray_safety_orders, _i)\n        if _cnt > 0 and _i > _max_safety_orders\n            _max_safety_orders := _i\n\n        _avg_safety_orders := _avg_safety_orders + _cnt * _i\n```\n\n----------------------------------------\n\nTITLE: Calculating Safety Orders for Percentage-based Strategy in Pine Script\nDESCRIPTION: This snippet calculates and displays safety orders for a percentage-based strategy, including price, quantity, and other metrics for each safety order.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_32\n\nLANGUAGE: pine\nCODE:\n```\nif cfg_max_safety_orders > 0 and safety_order_type == 'Percentage'\n    for _i = 1 to cfg_max_safety_orders by 1\n        _steps_next_safety_order_price  := next_so_price(_i, cfg_steps_bo_price)\n        _steps_next_safety_order_qty    := next_so_qty(_i, cfg_steps_bo_price)\n\n        _steps_total_size   += _steps_next_safety_order_qty\n        _steps_total_volume += _steps_next_safety_order_qty * _steps_next_safety_order_price\n\n        table.cell(steps_amount, 0, _i + 2, str.tostring(_i), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 1, _i + 2, str.tostring(stepped_deviation(_i)), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 2, _i + 2, str.tostring(math.round(_steps_next_safety_order_qty, cfg_decimals)), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 3, _i + 2, str.tostring(math.round(_steps_next_safety_order_qty * _steps_next_safety_order_price, cfg_decimals)), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 4, _i + 2, str.tostring(math.round(_steps_next_safety_order_price, cfg_decimals)), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 5, _i + 2, str.tostring(math.round(_steps_total_volume / _steps_total_size, cfg_decimals)), text_color=color.white, text_size=size.small)\n        \n        _req_price_for_tp := steps_required_price(cfg_steps_bo_price,  _steps_total_volume / _steps_total_size, _steps_total_size, cfg_take_profit_perc)\n        table.cell(steps_amount, 6, _i + 2, str.tostring(math.round(_req_price_for_tp, cfg_decimals)), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 7, _i + 2, str.tostring(steps_required_percent(_steps_next_safety_order_price, _req_price_for_tp)), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 8, _i + 2, str.tostring(steps_required_percent(_steps_next_safety_order_price, _steps_total_volume / _steps_total_size)), text_color=color.white, text_size=size.small)\n        \n        table.cell(steps_amount, 9, _i + 2, str.tostring(math.round(_steps_total_size, cfg_decimals)), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 10, _i + 2, str.tostring(_steps_total_volume), text_color=color.white, text_size=size.small)\n```\n\n----------------------------------------\n\nTITLE: Recording Take Profit Deal Statistics in Pine Script\nDESCRIPTION: Updates statistics specifically for deals that are closed with a take profit. It records the safety order count, updates take profit counters, calculates PnL, and displays visual labels with profit information when enabled.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_39\n\nLANGUAGE: pine\nCODE:\n```\n    //we consider that deal closed with any SO, if not closed with SL\n    else if condition_take_profit\n        array.set(statsarray_safety_orders, count_executed_safety_orders, array.get(statsarray_safety_orders, count_executed_safety_orders) + 1)\n        stats_deals_take_profit_finished    := stats_deals_take_profit_finished + 1\n\n        // Extracting PNL. This is different calculation for each deal close type\n        c_current_deal_pnl        := strategy.netprofit - c_strategy_prev_netprofit\n        c_strategy_prev_netprofit := strategy.netprofit\n\n        c_current_deal_close_value    := c_current_deal_position_size * c_take_profit_price\n        c_total_volume                := c_total_volume + c_current_deal_close_value\n\n        array.push(statsarray_winning_deals_pnl, c_current_deal_pnl)\n\n        if i_show_pnl_labels\n            label.new(bar_index, c_take_profit_price, text='' + str.tostring(math.round(c_current_deal_pnl, i_decimals)) + \n             '  ' + str.tostring(syminfo.currency) + '\\n' + get_timespan_string(c_dealstart_bar_time, time),\n```\n\n----------------------------------------\n\nTITLE: Calculating Safety Orders for Non-Percentage Strategy in Pine Script\nDESCRIPTION: This snippet calculates and displays safety orders for a non-percentage-based strategy, focusing on USD values for each safety order.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_33\n\nLANGUAGE: pine\nCODE:\n```\nelse if cfg_max_safety_orders > 0\n    float _steps_next_safety_order_qty_usd = 0\n    for _i = 1 to cfg_max_safety_orders by 1\n        _steps_next_safety_order_qty_usd := next_so_size_usd(_i)\n        _steps_total_volume += _steps_next_safety_order_qty_usd\n\n        table.cell(steps_amount, 0, _i + 2, str.tostring(_i), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 1, _i + 2, \"-\", text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 2, _i + 2, \"-\", text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 3, _i + 2, str.tostring(math.round(_steps_next_safety_order_qty_usd, cfg_decimals)), text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 4, _i + 2, \"-\", text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 5, _i + 2, \"-\", text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 6, _i + 2, \"-\", text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 7, _i + 2, \"-\", text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 8, _i + 2, \"-\", text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 9, _i + 2, \"-\", text_color=color.white, text_size=size.small)\n        table.cell(steps_amount, 10, _i + 2, str.tostring(_steps_total_volume), text_color=color.white, text_size=size.small)\n```\n\n----------------------------------------\n\nTITLE: Configuring DCA Strategy Parameters with User Inputs\nDESCRIPTION: Comprehensive configuration of the Dollar Cost Averaging strategy parameters through user inputs. Includes settings for strategy type (long/short), order sizes, take profit type and percentage, stop loss, safety order count, price deviation, and scaling parameters.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\ncfg_strategy_type                           = input.string(title='Strategy Type', defval='long', options=['long', 'short'], group='Strategy settings')\nvar bool IS_LONG = cfg_strategy_type == 'long'\n\nfloat cfg_base_order_size_usd               = input.float(title='Base order size', defval=1000, step=1000, group='Strategy settings')\nfloat cfg_safety_order_size_usd             = input.float(title='Safety order size', defval=700, step=100, group='Strategy settings')\n\ncfg_take_profit_type                        = input.string(title='Take Profit Type', defval='% From total volume', options=['% From base order', '% From total volume'], group='Strategy settings')\nfloat cfg_take_profit_perc                  = input.float(title='Take Profit (%)', minval=0.0, step=0.1, defval=2, group='Strategy settings')\n\n\nbool cfg_enable_stop_loss                   = input.bool(title='Enable Stop Loss', defval=false, group='Strategy settings')\nfloat cfg_stop_loss_perc                    = input.float(title='Stop Loss (%)', minval=0.0, step=0.1, defval=20, group='Strategy settings')\nfloat cfg_max_safety_orders                 = input.float(title='Max Safety Trades Count', defval=5, group='Strategy settings')\nfloat cfg_safety_order_price_deviation_perc = input.float(title='Price Deviation To Open Safety Trades (%)', minval=0.0, step=0.1, defval=3, group='Strategy settings')\nfloat cfg_safety_order_volume_scale         = input.float(title='Safety Order Volume Scale', defval=1, step=0.1, group='Strategy settings')\nfloat cfg_safety_order_price_step_scale     = input.float(title='Safety Order Step Scale', defval=1, step=0.1, group='Strategy settings')\n```\n\n----------------------------------------\n\nTITLE: Plot Visualization Setup in Pine Script\nDESCRIPTION: Creates visual plots for trading levels including take profit, average price, safety orders, and stop loss. Implements fill colors between different price levels for better visualization.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_41\n\nLANGUAGE: pine\nCODE:\n```\np1 = plot(c_take_profit_price, color=get_bg_color_green(), style=plot.style_circles, title='Take Profit')\np2 = plot(strategy.position_avg_price, color=theme_text_color, style=plot.style_circles, title='Deal avg price')\np3 = plot(c_next_safety_order_price, color=get_bg_color_red(), style=plot.style_circles, title='Safety order')\np4 = plot(c_stop_loss_price, color=get_bg_color_orange(), style=plot.style_circles, title='Stop loss')\n\nfill(p1, p2, color=_color_take_profit, title='Fill take profit')\nfill(p2, p3, color=get_bg_color_red(90), title='Fill safety order')\n```\n\n----------------------------------------\n\nTITLE: Calculating Current Drawdown in Equity in Pine Script\nDESCRIPTION: Function that calculates the current drawdown in equity as a percentage based on the position direction. Uses low price for long positions and high price for short positions to determine actual drawdown value.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_18\n\nLANGUAGE: pine\nCODE:\n```\nget_current_drawdown_equity() =>\n    _deal_total_value = strategy.position_size * strategy.position_avg_price\n    if IS_LONG\n        _drawdown_actual_value = strategy.position_size * low\n        _drawdown_equity_percent = _drawdown_actual_value * 100 / _deal_total_value - 100\n    else\n        _drawdown_actual_value = strategy.position_size * high\n        _drawdown_equity_percent = 100 - _drawdown_actual_value * 100 / _deal_total_value\n```\n\n----------------------------------------\n\nTITLE: Last Candle Statistics Calculation in Pine Script Trading Bot\nDESCRIPTION: This code executes on the last confirmed candle to update the required capital and deal statistics. It handles the case where a deal is still in progress at the end of the chart, updating time metrics and maximum days calculations.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_28\n\nLANGUAGE: pine\nCODE:\n```\n// ---------------------\n// LAST CANDLE - DRAW ALL TABLES\nif barstate.islastconfirmedhistory\n    glb_required_capital := get_required_capital()\n\n    //if we are still in a deal, update some stats to current bar\n    _deal_in_progress = stats_deals_finished < stats_deals_started\n    if _deal_in_progress\n        lastdeal_close_bar_index := bar_index\n        //approximate\n        lastdeal_close_time := time\n        array.push(statsarray_no_of_bars, bar_index - glb_dealstart_bar_index)\n        array.push(statsarray_no_of_days, get_days(glb_dealstart_bar_time, time_close))\n        if stats_max_days_in_deal <= get_days(glb_dealstart_bar_time, time_close)\n            stats_max_days_in_deal := get_days(glb_dealstart_bar_time, time_close)\n            stats_max_days_in_deal_start_time := glb_dealstart_bar_time\n```\n\n----------------------------------------\n\nTITLE: Calculating Price Deviation from Base Order in Pine Script\nDESCRIPTION: Function that calculates the current price deviation as a percentage from the base order price. Uses low price for long positions and high price for short positions to determine the deviation.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_17\n\nLANGUAGE: pine\nCODE:\n```\nget_current_dev_vs_bo_price() =>\n    if IS_LONG\n        _dev = low * 100 / c_base_order_price - 100\n    else\n        _dev = 100 - high * 100 / c_base_order_price\n```\n\n----------------------------------------\n\nTITLE: Calculating and Displaying Time-based Statistics in Pine Script\nDESCRIPTION: This code calculates and displays time-based statistics such as total time, maximum and average time in deal, and backtest duration. It uses custom functions for time formatting and table cell creation.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_46\n\nLANGUAGE: pine\nCODE:\n```\ntable.cell(sostats, column=0, row=_row, text='Total time  ( Max  |  Avg time in deal ):', text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_text4 = '' + str.tostring(get_timespan_string(bh_start_time, bh_end_time)) + '    ( '\n_text4 := _text4 + '' + get_timestring_from_days(array.max(statsarray_no_of_days)) + '  |  '\n_text4 := _text4 + '' + get_timestring_from_days(array.avg(statsarray_no_of_days)) + ' )'\ntable.cell(sostats, column=1, row=_row, text=_text4, text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_row := _row + 1\n\n\ntable.cell(sostats, column=0, row=_row, text='Total backtest:\\n' + str.tostring(time_to_date_string(bh_start_time)) + '\\n' + str.tostring(time_to_date_string(bh_end_time)), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\ntable.cell(sostats, column=1, row=_row, text='Max days in deal:\\n' + str.tostring(time_to_date_string(stats_max_days_in_deal_start_time)) + '\\n' + str.tostring(time_to_date_string(stats_max_days_in_deal_close_time)), text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))\n_row := _row + 1\n```\n\n----------------------------------------\n\nTITLE: Updating Open Trades Counter and Next Safety Order Price in Pine Script\nDESCRIPTION: Updates the counter for executed safety orders based on open trades and calculates the next safety order price for visual plotting. Handles conditional logic to determine whether a next safety order price should be calculated.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_32\n\nLANGUAGE: pine\nCODE:\n```\n//update to current open trades\ncount_executed_safety_orders    := (strategy.opentrades - 1)\n\n//for visual plot\nif count_executed_safety_orders < i_max_safety_orders\n    c_next_safety_order_price := next_so_price(count_executed_safety_orders+1, c_base_order_price)\nelse if count_executed_safety_orders == i_max_safety_orders\n    c_next_safety_order_price := na\n```\n\n----------------------------------------\n\nTITLE: Printing Trade Statistics Arrays in TradingView Pine Script\nDESCRIPTION: Builds a string representation of winning and losing trades from arrays containing PnL values. The code iterates through both winning and losing trade arrays, appending each value to a formatted string, then prints the complete statistics.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_40\n\nLANGUAGE: pinescript\nCODE:\n```\n// lab = \"\"\n\n// if array.size(statsarray_losing_deals_pnl) > 0\n//     lab := lab + \"Losing deals:\\n\"\n//     for i = 0 to array.size(statsarray_losing_deals_pnl) - 1\n//         lab := lab + tostring(array.get(statsarray_losing_deals_pnl, i)) + \"\\n\"\n\n// if array.size(statsarray_winning_deals_pnl) > 0\n//     lab := lab + \"Winning deals:\\n\"\n//     for i = 0 to array.size(statsarray_winning_deals_pnl) - 1\n//         lab := lab + tostring(array.get(statsarray_winning_deals_pnl, i)) + \"\\n\"\n\n// f_print(lab)\n//----------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Configuring 3Commas Bot Integration via Webhooks in Pine Script\nDESCRIPTION: Sets up parameters for controlling 3Commas trading bots via webhook alerts. Includes bot ID, email token, and options for deal start, safety orders, take profit and stop loss execution.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\nstring _tooltip_bot_control     = 'If this is enabled the strategy can control some bot operations via Webhook calls.\\n\\nTo enable Webhook calls, check this option, complete Bot id and Email Token. After the strategy is configured, create an alert on the strategy, select Order fills only, and in the message field simply input {{strategy.order.alert_message}}.'\nbool i_enable_bot_control     = input.bool(title='Enable Bot Control Via Webhook', defval=false, group='3commas Bot Settings', tooltip=_tooltip_bot_control)\nstring i_bot_id               = input.string(title='Bot id', defval='', group='3commas Bot Settings')\nstring i_email_token          = input.string(title='Email token', defval='', group='3commas Bot Settings')\nbool i_exec_deal_start        = input.bool(title='Deal start', defval=true, group='3commas Bot Settings')\nbool i_exec_safety_order      = input.bool(title='Safety Orders SPOT ONLY', defval=true, group='3commas Bot Settings', \n tooltip=\" SPOT ONLY! The strategy will send a message to add funds in the quote currency (for BTCUSDT quote is USDT). The amount of funds are calculated based on SO settings (size, volume steps). For exact values use the steps table.\")\nbool i_exec_take_profit       = input.bool(title='Take profit deal stop', defval=true, group='3commas Bot Settings', tooltip = 'The strategy will send a message to take profit')\nbool i_exec_stop_loss         = input.bool(title='Stop Loss', defval=true, group='3commas Bot Settings', tooltip = 'The strategy will send a message to execute stop loss')\n```\n\n----------------------------------------\n\nTITLE: Initializing Statistics Table in Pine Script\nDESCRIPTION: This snippet initializes a table for displaying various statistics about the trading strategy results.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_34\n\nLANGUAGE: pine\nCODE:\n```\nif cfg_show_stats_table\n    int rowsforstats = array.size(statsarray_safety_orders) + 25\n    table sostats = table.new(position.top_right, columns=2, rows=rowsforstats, frame_width=1, frame_color=color.black)\n\n    _row = 0\n```\n\n----------------------------------------\n\nTITLE: Trading State Management Variables\nDESCRIPTION: Defines state variables for managing trade execution, safety orders, position tracking, and statistics collection.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_14\n\nLANGUAGE: pine\nCODE:\n```\nvar int count_executed_safety_orders    = 0\nvar float c_take_profit_price         = na\nvar float c_stop_loss_price           = na\nvar float c_base_order_price          = na\nvar float c_base_order_qty            = na\nvar float c_next_safety_order_price   = na\nvar float c_required_capital          = na\nvar float c_total_volume              = 0\nvar float c_current_deal_position_size    = na\nvar float c_current_deal_avg_price        = na\n```\n\n----------------------------------------\n\nTITLE: Displaying Debug Information with Labels in TradingView Pine Script\nDESCRIPTION: Creates a debug label showing strategy net profit and open profit information. The label includes a tooltip with detailed performance metrics and is styled with specific color and position properties.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_39\n\nLANGUAGE: pinescript\nCODE:\n```\n//_debug_text  = 'strategy.netprofit:  ' + str.tostring(strategy.netprofit) + '\\n'\n//     _debug_text += 'glb_prevnetp:  ' + str.tostring(glb_strategy_prev_netprofit) + '\\n'\n//     _debug_text += 'strategy.openprofit:  ' + str.tostring(strategy.openprofit) + '\\n'\n//     // _debug_text += 'glb_prevnetp:' + str.tostring(glb_strategy_prev_netprofit) + '\\n'\n\n//     label.new(bar_index, close, text=\"DBG\", tooltip=_debug_text,\n//      yloc=yloc.price, size=size.normal, style=label.style_label_up, textcolor=color.black, color=get_bg_color_lightblue())\n```\n\n----------------------------------------\n\nTITLE: Creating Performance Data Table in Pine Script\nDESCRIPTION: Builds a comprehensive performance data table that displays trade statistics and strategy settings. The table includes two sections: current trade information and overall performance metrics, helping traders monitor strategy effectiveness.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Bot DCA Backtester & Signals FREE.txt#2025-04-23_snippet_17\n\nLANGUAGE: pine\nCODE:\n```\n//Plot Price Difference Table\ndataTable = table.new(tablePosition, columns=2, rows=19, bgcolor=color.blue, frame_color=color.white, frame_width=1, border_color=color.white, border_width=1)\nif dataTableOn\n    table.cell(table_id=dataTable, column=0, row=0, text=\"Current Trade\", height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center, bgcolor=color.navy)\n    table.cell(table_id=dataTable, column=0, row=1, text=avgPrice, height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center)\n    table.cell(table_id=dataTable, column=0, row=2, text=tpPrice, height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center)\n    table.cell(table_id=dataTable, column=0, row=3, text=pnl, height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center)\n    table.cell(table_id=dataTable, column=0, row=4, text=percRecovery, height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center)\n    table.cell(table_id=dataTable, column=0, row=5, text=posSize, height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center)\n    table.cell(table_id=dataTable, column=0, row=6, text=numOrders, height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center)\n    table.cell(table_id=dataTable, column=0, row=7, text=\"Overall Performance\", height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center, bgcolor=color.navy)\n    table.cell(table_id=dataTable, column=0, row=8, text=closedTrades, height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center)\n    table.cell(table_id=dataTable, column=0, row=9, text=largestOrder, height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center)\n    table.cell(table_id=dataTable, column=0, row=10, text=maxDrawdown, height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center)\n    table.cell(table_id=dataTable, column=0, row=11, text=avgBarsPerTrade, height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center)\n    table.cell(table_id=dataTable, column=0, row=12, text=grossProfit, height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center)\n    table.cell(table_id=dataTable, column=0, row=13, text=netProfit, height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center)\n    table.cell(table_id=dataTable, column=0, row=14, text=percentProfit, height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center)\n    table.cell(table_id=dataTable, column=0, row=15, text=equity, height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center)\n    table.cell(table_id=dataTable, column=0, row=16, text=initialCapital, height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center)\n    table.cell(table_id=dataTable, column=1, row=0, text=\"Settings\", height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center, bgcolor=color.navy)\n    table.cell(table_id=dataTable, column=1, row=1, text=stoplossText, height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center, bgcolor=color.purple)\n    table.cell(table_id=dataTable, column=1, row=2, text=\"TP \" + str.tostring(takeProfit*100) + \"%\", height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center, bgcolor=color.purple)\n    table.cell(table_id=dataTable, column=1, row=3, text=\"AD \" + str.tostring(avgDown*100) + \"%\", height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center, bgcolor=color.purple)\n    table.cell(table_id=dataTable, column=1, row=4, text=\"AD%M \" + str.tostring(percentScale) + \"x\", height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center, bgcolor=color.purple)\n    table.cell(table_id=dataTable, column=1, row=5, text=\"VM \" + str.tostring(multiplier) + \"x\", height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center, bgcolor=color.purple)\n    table.cell(table_id=dataTable, column=1, row=6, text=\"M#O \" + str.tostring(maxOrders), height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center, bgcolor=color.purple)\n    table.cell(table_id=dataTable, column=1, row=7, text=\"BO $\" + str.tostring(quantity), height=0, text_color=color.white, text_halign=text.align_left, text_valign= text.align_center, bgcolor=color.purple)\n```\n\n----------------------------------------\n\nTITLE: Initializing Warning Messages in Pine Script\nDESCRIPTION: This snippet initializes a string variable for storing warning messages and checks various conditions to append appropriate warnings.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_29\n\nLANGUAGE: pine\nCODE:\n```\nstring _text_warnings = ''\n\nif stats_deals_started == 0\n    _text_warnings := _text_warnings + ' - No deal started\\n'\n\nif stats_deals_finished == 0\n    _text_warnings := _text_warnings + ' - No deal finished\\n'\n\nif cfg_enable_stop_loss and valid_stop_loss() == false\n    _text_warnings := _text_warnings + ' - Stop loss is less than last safety order (should be more than ' + str.tostring(math.round(stepped_deviation(cfg_max_safety_orders), 2)) + '%' + ')\\n'\n\nif stepped_deviation(cfg_max_safety_orders) > 100\n    _text_warnings := _text_warnings + ' - Covered deviation via safety orders is over 100%\\n'\n```\n\n----------------------------------------\n\nTITLE: Tracking Buy and Hold Statistics in Pine Script\nDESCRIPTION: Logic that tracks buy and hold statistics for benchmark comparison. Initializes values at the start of the calculation period and updates them as long as the time filter is active.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_28\n\nLANGUAGE: pine\nCODE:\n```\n//stats for buy and hold return\nif timeFilterApproval and bh_calculation_started == false\n    bh_start_price          := open\n    bh_start_time           := time\n    bh_calculation_started  := true\n    bh_end_price            := close\n    bh_end_time             := time_close\n\n\n//update stats for buy and hold as long as we're still inside date range\nif timeFilterApproval\n    bh_end_price    := close\n    bh_end_time     := time_close\n```\n\n----------------------------------------\n\nTITLE: Checking if Deal is Active in Pine Script\nDESCRIPTION: Function that tests if a deal is currently active by checking the position size and direction. Returns true if in a long position with positive size or in a short position with negative size.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_19\n\nLANGUAGE: pine\nCODE:\n```\n// Tests the size of the position size\nis_deal_started() =>\n    bool _flag = false\n    if IS_LONG and strategy.position_size > 0\n        _flag := true\n    else if not IS_LONG and strategy.position_size < 0\n        _flag := true\n    else\n        _flag := false\n```\n\n----------------------------------------\n\nTITLE: Configuring Deal Start Conditions with RSI and External Indicators\nDESCRIPTION: Implementation of logic to determine when a trading deal should start based on either RSI-7 values or external indicator signals. The conditions check if indicators cross specified thresholds using configurable comparison operators.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\n//--------- DEAL START CONDITION ----------\n//RSI-7\nif deal_start_type == 'RSI-7' and rsi_start_operation == '<='\n    deal_start_condition := ta.rsi(close, 7) <= rsi_start_value\nelse if deal_start_type == 'RSI-7' and rsi_start_operation == '>='\n    deal_start_condition := ta.rsi(close, 7) >= rsi_start_value\n    \n//MAYBE FOUND A BUG --> Leave all if's on this level otherwise they do not work\nelse if deal_start_type == 'External Indicator' and deal_start_value != -99999 and deal_start_operation == '=' and external_indicator == deal_start_value\n    deal_start_condition := true\nelse if deal_start_type == 'External Indicator' and deal_start_value != -99999 and deal_start_operation == '<=' and external_indicator <= deal_start_value\n    deal_start_condition := true\nelse if deal_start_type == 'External Indicator' and deal_start_value != -99999 and deal_start_operation == '>=' and external_indicator >= deal_start_value\n    deal_start_condition := true\nelse\n    deal_start_condition := false\n//-----------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Configuring Safety Order Conditions with External Indicators\nDESCRIPTION: Implementation of logic to determine when to place safety orders based on external indicator signals. The conditions check if the indicator equals, exceeds, or falls below a specified threshold using a configurable comparison operator.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\n//--------- SAFETY ORDER CONDITION -----------\nif safety_order_type == 'External Indicator' and safety_order_value != -99999 and safety_order_operation == '=' and external_indicator == safety_order_value\n    safety_order_condition := true\nelse if safety_order_type == 'External Indicator' and safety_order_value != -99999 and safety_order_operation == '<=' and external_indicator <= safety_order_value\n    safety_order_condition := true\nelse if safety_order_type == 'External Indicator' and safety_order_value != -99999 and safety_order_operation == '>=' and external_indicator >= safety_order_value\n    safety_order_condition := true\nelse\n    safety_order_condition := false\n//-----------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Creating Security Function for Data Retrieval in Pine Script\nDESCRIPTION: Defines a helper function for retrieving data from different symbols and timeframes with proper lookahead settings to prevent future data leakage.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\nf_secureSecurity(_symbol, _res, _src) =>\n    request.security(_symbol, _res, _src[1], lookahead=barmerge.lookahead_on)\n```\n\n----------------------------------------\n\nTITLE: Generating 3Commas Bot Stop Deal JSON in Pine Script\nDESCRIPTION: Function that creates a JSON string for 3Commas bot integration to stop a running deal. Includes action to close at market price, bot ID and email token for authentication.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_23\n\nLANGUAGE: pine\nCODE:\n```\nget_3cbot_stopdeal_json() =>\n    _string = '{\"action\": \"close_at_market_price_all\", \"message_type\":\"bot\", \"bot_id\":\"' + i_bot_id + '\", \"email_token\":\"' + i_email_token + '\", \"delay_seconds\":0}'\n```\n\n----------------------------------------\n\nTITLE: Generating 3Commas Bot Add Funds JSON in Pine Script\nDESCRIPTION: Function that creates a JSON string for 3Commas bot integration to add funds to a deal. Includes volume parameter, bot ID and email token for authentication.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_24\n\nLANGUAGE: pine\nCODE:\n```\nget_3cbot_addfundsinquote_json(add_volume = 0) =>\n    _string = '{\"action\": \"add_funds_in_quote\", \"message_type\":\"bot\", \"bot_id\":\"' + i_bot_id + '\", \"email_token\":\"' + i_email_token + '\", \"delay_seconds\":0, \"volume\":\"' + str.tostring(add_volume) + '\"}'\n```\n\n----------------------------------------\n\nTITLE: Generating 3Commas Bot Start Deal JSON in Pine Script\nDESCRIPTION: Function that creates a JSON string for 3Commas bot integration to start a new deal. Includes bot ID and email token for authentication.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_22\n\nLANGUAGE: pine\nCODE:\n```\nget_3cbot_startdeal_json() =>\n    _string = '{\"message_type\":\"bot\", \"bot_id\":\"' + i_bot_id + '\", \"email_token\":\"' + i_email_token + '\", \"delay_seconds\":0}'\n```\n\n----------------------------------------\n\nTITLE: Setting Up 3Commas Integration Alerts in Pine Script\nDESCRIPTION: Configuration of alert functionality to integrate with 3Commas trading bot platform. When buy signals are triggered, alerts can notify the user or be used to automatically execute orders via 3Commas.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Bot DCA Backtester & Signals FREE.txt#2025-04-23_snippet_5\n\nLANGUAGE: pine\nCODE:\n```\n//Alerts\nif buy\n    alert(\"Place Open Deal Code From 3Commas Here.\", alert.freq_once_per_bar_close)\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Bars Per Trade Function in Pine Script\nDESCRIPTION: A custom function that calculates the average number of bars (candles) that trades remain open. It loops through all closed trades to sum the duration of each trade and then calculates the average.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Bot DCA Backtester & Signals FREE.txt#2025-04-23_snippet_14\n\nLANGUAGE: pine\nCODE:\n```\n// Function that calculates the average amount of bars in a trade.\navgBarsPerTrade() =>\n\tsumBarsPerTrade = 0\n\tfor tradeNo = 0 to strategy.closedtrades - 1\n\t\t// Loop through all closed trades, starting with the oldest.\n\t\tsumBarsPerTrade += strategy.closedtrades.exit_bar_index(tradeNo) - strategy.closedtrades.entry_bar_index(tradeNo) + 1\n\tresult = nz(sumBarsPerTrade / strategy.closedtrades)\n```\n\n----------------------------------------\n\nTITLE: Tracking Maximum Number of Open Orders in Pine Script\nDESCRIPTION: Calculates the highest number of simultaneously open trades over a lookback period of 10000 bars. This helps monitor the maximum position size reached during the strategy's execution.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3Commas Bot DCA Backtester & Signals FREE.txt#2025-04-23_snippet_13\n\nLANGUAGE: pine\nCODE:\n```\n// Find Max Number Of Orders\nmaxOrdersAtOnce = ta.highest(strategy.opentrades, 10000)\nlargestOrder = \"Highest # Of Open Trades \" + str.tostring(maxOrdersAtOnce, \"#.##\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Results Table Row in Pine Script\nDESCRIPTION: This function adds a row to a results table, handling formatting for labels, values, and conditional styling. It supports different row types including titles and warnings, with customizable colors and alignments.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Backtesting 3commas DCA Bot v2.txt#2025-04-23_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\nadd_line(the_table, the_row, the_label, the_value, is_warning) =>\n    // if providing a value, the row is shown as: the_label | the_value\n    // else: the_label is considered to be a title\n    is_even     = (the_row % 2) == 1\n    is_title    = na(the_value) ? true : false\n    text        = is_title ? \"\" : tostring(the_value)\n    bg_color    = is_title ? color.black : is_warning ? color.red : is_even ? color.silver : color.white\n    text_color  = is_title ? color.white : color.black\n    left_cell_align = is_title ? text.align_right : text.align_left\n    table.cell(the_table, 0, the_row, the_label, bgcolor=bg_color, text_color=text_color,  text_size=size.auto, text_halign=left_cell_align)\n    table.cell(the_table, 1, the_row, text,      bgcolor=bg_color, text_color=text_color,  text_size=size.auto, text_halign=text.align_right) \n```\n\n----------------------------------------\n\nTITLE: Calculating and Plotting Long Position Take Profit and Stop Loss Levels in Pine Script\nDESCRIPTION: Calculates and displays take profit and stop loss levels for long positions. Take profit is calculated as a percentage above average entry, while stop loss is calculated relative to the most recent safety order price or the initial entry price.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/TickDCA Strategy.txt#2025-04-23_snippet_3\n\nLANGUAGE: pine script\nCODE:\n```\n// Long TP and SL levels\nvar float longStopLevel = na\nvar float longTpLevel = na\n\nif (inPosition and positionType == \"Long\")\n    longTpLevel := averageEntryPrice * (1 + takeProfitPercent)\n    longStopLevel := safetyOrdersPlaced > 0 ? array.get(calcSafetyLevels(entryPrice, true), safetyOrdersPlaced - 1) * (1 - stopLossPercent) : entryPrice * (1 - stopLossPercent)\n\nplot(longTpLevel, title=\"TP Long\", color=color.green, style=plot.style_linebr, linewidth=2)\nplot(longStopLevel, title=\"SL Long\", color=color.red, style=plot.style_linebr, linewidth=2)\n```\n\n----------------------------------------\n\nTITLE: Implementing TickDCA Strategy in Pine Script\nDESCRIPTION: A complete implementation of a Dollar Cost Averaging strategy with tick-based calculations. The strategy supports both long and short positions, safety orders with customizable deviation and volume scaling, take profit and stop loss mechanisms, and visual representation of safety order levels.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/TickDCA Strategy.txt#2025-04-23_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\n//@version=6\nstrategy(\"TickDCA Strategy\", shorttitle=\"TickDCA\", overlay=true, calc_on_every_tick=true, pyramiding=50, default_qty_type=strategy.fixed, default_qty_value=1, initial_capital=10000, commission_type=strategy.commission.percent, commission_value=0.1)\n\n// Strategy Type Selection\nstrategyType = input.string(\"Both\", title=\"Trading Direction\", options=[\"Long\", \"Short\", \"Both\"], group=\"Strategy Settings\")\n\n// DCA Settings\nfirstOrderSize = input.float(100, title=\"First Order Size\", minval=0.1, group=\"DCA Settings\")\nsafetyOrderSize = input.float(200, title=\"Safety Order Size\", minval=0.1, group=\"DCA Settings\")\ntakeProfitPercent = input.float(1.0, title=\"Take Profit %\", minval=0.1, step=0.1, group=\"DCA Settings\") / 100\nstopLossPercent = input.float(5.0, title=\"Stop Loss %\", minval=0.1, step=0.1, group=\"DCA Settings\") / 100\nmaxSafetyOrders = input.int(6, title=\"Max Safety Orders\", minval=1, maxval=50, group=\"DCA Settings\")\npriceDeviation = input.float(0.5, title=\"Price Deviation %\", minval=0.1, step=0.1, group=\"DCA Settings\") / 100\ndeviationStepScale = input.float(1.2, title=\"Deviation Step Scale\", minval=1.0, step=0.1, group=\"DCA Settings\")\nvolumeScale = input.float(1.5, title=\"Volume Scale (Martingale)\", minval=1.0, step=0.1, group=\"DCA Settings\")\n\n// External Signal\nuseExternalSignal = input.bool(true, title=\"Use External Signal\", group=\"Signal Settings\")\nexternalSignalSource = input.source(0, title=\"External Signal Source\", group=\"Signal Settings\")\n\n// Information Display\nshowInfoTable = input.bool(true, title=\"Show Info Table\", group=\"Display Settings\")\nshowSafetyLevels = input.bool(true, title=\"Show Safety Order Levels\", group=\"Display Settings\")\ntablePosition = input.string(\"bottom_right\", title=\"Table Position\", options=[\"top_left\", \"top_right\", \"bottom_left\", \"bottom_right\"], group=\"Display Settings\")\n\n// Variables for position tracking\nvar float entryPrice = 0.0\nvar int safetyOrdersPlaced = 0\nvar float averageEntryPrice = 0.0\nvar float totalInvestment = 0.0\nvar float positionSize = 0.0\nvar bool inPosition = false\nvar string positionType = \"None\"\n\n// Function to calculate the next safety order deviation\nsafetyOrderDeviation(index) =>\n    priceDeviation * math.pow(deviationStepScale, index - 1)\n\n// Function to calculate safety order size with martingale\nsafetyOrderSizeWithScale(index) =>\n    safetyOrderSize * math.pow(volumeScale, index - 1)\n\n// Function to calculate the price level for a safety order\nsafetyOrderLevel(basePrice, index, isLong) =>\n    deviation = safetyOrderDeviation(index)\n    isLong ? basePrice * (1 - deviation) : basePrice * (1 + deviation)\n\n// Calculate price levels for all safety orders\ncalcSafetyLevels(basePrice, isLong) =>\n    levels = array.new_float(maxSafetyOrders)\n    for i = 0 to maxSafetyOrders - 1\n        level = safetyOrderLevel(basePrice, i + 1, isLong)\n        array.set(levels, i, level)\n    levels\n\n// Calculate safety order volumes\ncalcSafetyVolumes() =>\n    vol_array = array.new_float(maxSafetyOrders)\n    for i = 0 to maxSafetyOrders - 1\n        so_size = safetyOrderSizeWithScale(i + 1)\n        array.set(vol_array, i, so_size)\n    vol_array\n\n// Get signals from external source\nlongSignal = externalSignalSource == 1 and useExternalSignal\nshortSignal = externalSignalSource == -1 and useExternalSignal\n\n// Process signals based on strategy type\nvalidLongSignal = (strategyType == \"Long\" or strategyType == \"Both\") and longSignal\nvalidShortSignal = (strategyType == \"Short\" or strategyType == \"Both\") and shortSignal\n\n// Entry conditions\nif (not inPosition and validLongSignal)\n    strategy.entry(\"Long Entry\", strategy.long, qty=firstOrderSize/close)\n    entryPrice := close\n    inPosition := true\n    positionType := \"Long\"\n    safetyOrdersPlaced := 0\n    totalInvestment := firstOrderSize\n    positionSize := firstOrderSize/close\n    averageEntryPrice := close\n\nif (not inPosition and validShortSignal)\n    strategy.entry(\"Short Entry\", strategy.short, qty=firstOrderSize/close)\n    entryPrice := close\n    inPosition := true\n    positionType := \"Short\"\n    safetyOrdersPlaced := 0\n    totalInvestment := firstOrderSize\n    positionSize := firstOrderSize/close\n    averageEntryPrice := close\n\n// Safety orders logic for long positions\nif (inPosition and positionType == \"Long\")\n    longLevels = calcSafetyLevels(entryPrice, true)\n    longVolumes = calcSafetyVolumes()\n    \n    for i = 0 to maxSafetyOrders - 1\n        if (safetyOrdersPlaced <= i and close <= array.get(longLevels, i))\n            orderSize = array.get(longVolumes, i) / close\n            strategy.entry(\"Long SO\" + str.tostring(i+1), strategy.long, qty=orderSize)\n            safetyOrdersPlaced := math.max(safetyOrdersPlaced, i + 1)\n            newInvestment = array.get(longVolumes, i)\n            totalInvestment := totalInvestment + newInvestment\n            positionSize := positionSize + orderSize\n            averageEntryPrice := totalInvestment / positionSize\n\n    // Take profit for long\n    if (close >= averageEntryPrice * (1 + takeProfitPercent))\n        strategy.close_all(comment=\"TP Long\")\n        inPosition := false\n        positionType := \"None\"\n    \n    // Stop loss for long based on the last safety order or entry price\n    stopLevel = safetyOrdersPlaced > 0 ? array.get(longLevels, safetyOrdersPlaced - 1) * (1 - stopLossPercent) : entryPrice * (1 - stopLossPercent)\n    \n    if (close <= stopLevel)\n        strategy.close_all(comment=\"SL Long\")\n        inPosition := false\n        positionType := \"None\"\n\n// Safety orders logic for short positions\nif (inPosition and positionType == \"Short\")\n    shortLevels = calcSafetyLevels(entryPrice, false)\n    shortVolumes = calcSafetyVolumes()\n    \n    for i = 0 to maxSafetyOrders - 1\n        if (safetyOrdersPlaced <= i and close >= array.get(shortLevels, i))\n            orderSize = array.get(shortVolumes, i) / close\n            strategy.entry(\"Short SO\" + str.tostring(i+1), strategy.short, qty=orderSize)\n            safetyOrdersPlaced := math.max(safetyOrdersPlaced, i + 1)\n            newInvestment = array.get(shortVolumes, i)\n            totalInvestment := totalInvestment + newInvestment\n            positionSize := positionSize + orderSize\n            averageEntryPrice := totalInvestment / positionSize\n\n    // Take profit for short\n    if (close <= averageEntryPrice * (1 - takeProfitPercent))\n        strategy.close_all(comment=\"TP Short\")\n        inPosition := false\n        positionType := \"None\"\n    \n    // Stop loss for short based on the last safety order or entry price\n    stopLevel = safetyOrdersPlaced > 0 ? array.get(shortLevels, safetyOrdersPlaced - 1) * (1 + stopLossPercent) : entryPrice * (1 + stopLossPercent)\n    \n    if (close >= stopLevel)\n        strategy.close_all(comment=\"SL Short\")\n        inPosition := false\n        positionType := \"None\"\n\n// Create safety order level plots\nvar longSafetyLevels = array.new_float(maxSafetyOrders, 0.0)\nvar shortSafetyLevels = array.new_float(maxSafetyOrders, 0.0)\n\n// Update safety order levels when in position\nif inPosition\n    if positionType == \"Long\"\n        longSafetyLevels := calcSafetyLevels(entryPrice, true)\n    if positionType == \"Short\"\n        shortSafetyLevels := calcSafetyLevels(entryPrice, false)\n\n// Plot long safety order levels\nplot(inPosition and positionType == \"Long\" and showSafetyLevels ? array.get(longSafetyLevels, 0) : na, title=\"Long SO1\", color=color.new(color.green, 0), style=plot.style_cross)\nplot(inPosition and positionType == \"Long\" and showSafetyLevels and maxSafetyOrders >= 2 ? array.get(longSafetyLevels, 1) : na, title=\"Long SO2\", color=color.new(color.green, 0), style=plot.style_cross)\nplot(inPosition and positionType == \"Long\" and showSafetyLevels and maxSafetyOrders >= 3 ? array.get(longSafetyLevels, 2) : na, title=\"Long SO3\", color=color.new(color.green, 0), style=plot.style_cross)\nplot(inPosition and positionType == \"Long\" and showSafetyLevels and maxSafetyOrders >= 4 ? array.get(longSafetyLevels, 3) : na, title=\"Long SO4\", color=color.new(color.green, 0), style=plot.style_cross)\nplot(inPosition and positionType == \"Long\" and showSafetyLevels and maxSafetyOrders >= 5 ? array.get(longSafetyLevels, 4) : na, title=\"Long SO5\", color=color.new(color.green, 0), style=plot.style_cross)\nplot(inPosition and positionType == \"Long\" and showSafetyLevels and maxSafetyOrders >= 6 ? array.get(longSafetyLevels, 5) : na, title=\"Long SO6\", color=color.new(color.green, 0), style=plot.style_cross)\n\n// Plot short safety order levels\nplot(inPosition and positionType == \"Short\" and showSafetyLevels ? array.get(shortSafetyLevels, 0) : na, title=\"Short SO1\", color=color.new(color.red, 0), style=plot.style_cross)\nplot(inPosition and positionType == \"Short\" and showSafetyLevels and maxSafetyOrders >= 2 ? array.get(shortSafetyLevels, 1) : na, title=\"Short SO2\", color=color.new(color.red, 0), style=plot.style_cross)\nplot(inPosition and positionType == \"Short\" and showSafetyLevels and maxSafetyOrders >= 3 ? array.get(shortSafetyLevels, 2) : na, title=\"Short SO3\", color=color.new(color.red, 0), style=plot.style_cross)\nplot(inPosition and positionType == \"Short\" and showSafetyLevels and maxSafetyOrders >= 4 ? array.get(shortSafetyLevels, 3) : na, title=\"Short SO4\", color=color.new(color.red, 0), style=plot.style_cross)\nplot(inPosition and positionType == \"Short\" and showSafetyLevels and maxSafetyOrders >= 5 ? array.get(shortSafetyLevels, 4) : na, title=\"Short SO5\", color=color.new(color.red, 0), style=plot.style_cross)\n```\n\n----------------------------------------\n\nTITLE: Plotting Safety Level Visualization for Short Positions in Pine Script\nDESCRIPTION: Plots the sixth safety level for short positions when enabled in the strategy. The plot is shown only when in a short position with safety levels display enabled and at least 6 maximum safety orders configured.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/TickDCA Strategy.txt#2025-04-23_snippet_1\n\nLANGUAGE: pine script\nCODE:\n```\nplot(inPosition and positionType == \"Short\" and showSafetyLevels and maxSafetyOrders >= 6 ? array.get(shortSafetyLevels, 5) : na, title=\"Short SO6\", color=color.new(color.red, 0), style=plot.style_cross)\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Display Settings in Pine Script\nDESCRIPTION: Sets up options for visual elements including decimal display, PnL labels, statistics table, settings table, and step table for the strategy.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_10\n\nLANGUAGE: pine\nCODE:\n```\n//visuals\nint i_decimals            = input.int(title='Decimals For Display', defval=2, group='Visuals')\n\nbool i_show_pnl_labels    = input.bool(title='Show PnL Labels', defval=true, group='Visuals')\nbool i_show_stats_table   = input.bool(title='Show Table With Statistics', defval=true, group='Visuals')\nbool i_show_settings_table= input.bool(title='Show Table With Strategy Settings', defval=false, group='Visuals')\nbool i_show_step_table    = input.bool(title='Show Table With Steps Similar To 3commas', defval=false, group='Visuals', tooltip='Make sure the Table with Strategy Settings is disabled because they use the same position\\n\\nIf the Safety orders type is not percentage all significant values will be replaced by - (dashes)')\nfloat i_steps_bo_price    = input.float(title='BO Entry Price For Steps Table', defval=0, group='Visuals', tooltip=\"Custom BO price used to calculate all table values. If this is not configured, the close value will be used\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Volume Moving Average in Pine Script\nDESCRIPTION: Computes the simple moving average of volume using the specified period (vamp) for QFL strategy.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_11\n\nLANGUAGE: pine\nCODE:\n```\n// Base calculations\nvam = ta.sma(volume, vamp)\n```\n\n----------------------------------------\n\nTITLE: Setting Commission Rate in Pine Script\nDESCRIPTION: Defines the trading fee percentage used in profit and loss calculations.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_9\n\nLANGUAGE: pine\nCODE:\n```\nfloat i_commision_percent = input.float(title='FEE (%)', minval=0.0, step=0.001, defval=0.075, group='FEE')\n```\n\n----------------------------------------\n\nTITLE: Creating Debug Print Function for Label Display in Pine Script\nDESCRIPTION: A utility function that creates and updates a label on the chart to display debug information. The function adapts to the chart theme (dark or light) for text color visibility and positions the label at the bottom of the price chart.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/Zendog V3 backtest DCA bot 3commas.txt#2025-04-23_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\nf_print(_text) =>\n    // Create label on the first bar.\n    var _label = label.new(x=bar_index, y=na, text=str.tostring(_text), xloc=xloc.bar_index, yloc=yloc.price, color=color.blue, style=label.style_label_up, textcolor=theme_text_color, size=size.normal, textalign=text.align_left)\n    // On next bars, update the label's x and y position, and the text it displays.\n    if barstate.islastconfirmedhistory\n        label.set_xy(_label, bar_index, low * 0.99)\n        label.set_text(_label, str.tostring(_text))\n```\n\n----------------------------------------\n\nTITLE: Creating Label Printing Function in Pine Script\nDESCRIPTION: Defines a function for creating and updating text labels on the chart, with proper positioning and styling based on chart theme.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\nf_print(_text) =>\n    // Create label on the first bar.\n    var _label = label.new(x=bar_index, y=na, text=str.tostring(_text), xloc=xloc.bar_index, yloc=yloc.price, color=color.blue, style=label.style_label_up, textcolor=theme_text_color, size=size.normal, textalign=text.align_left)\n    // On next bars, update the label's x and y position, and the text it displays.\n    if barstate.islastconfirmedhistory\n        label.set_xy(_label, bar_index, low * 0.99)\n        label.set_text(_label, str.tostring(_text))\n```\n\n----------------------------------------\n\nTITLE: Generating Background Colors for UI in Pine Script\nDESCRIPTION: Series of utility functions that generate background colors for the user interface. Includes functions for grey, blue, green, red, light blue, and orange colors with transparency options.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_27\n\nLANGUAGE: pine\nCODE:\n```\nget_bg_color_grey(row) =>\n    _bgcolor = row % 2 == 0 ? #CACACA : #E5E5E5\n\nget_bg_color_blue(transp=0) =>\n    _bgcolor = color.new(#006bb3, transp)\n\nget_bg_color_green(transp=0) =>\n    _bgcolor = color.new(#A6E59B, transp)\n\nget_bg_color_red(transp=0) =>\n    _bgcolor = color.new(#E59B9B, transp)\n\nget_bg_color_lightblue(transp=0) =>\n    _bgcolor = color.new(#00BFFF, transp)\n\nget_bg_color_orange(transp=0) =>\n    _bgcolor = color.new(#FFA500, transp)\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Formatted Date String in Pine Script\nDESCRIPTION: Function that converts a timestamp in milliseconds to a formatted date string. Returns an empty string if the input time is less than or equal to zero.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_26\n\nLANGUAGE: pine\nCODE:\n```\ntime_to_date_string(timeinms) =>\n    if timeinms > 0\n        _string = str.tostring(dayofmonth(timeinms), '00/') + get_month_string(month(timeinms)) + '/' + str.tostring(year(timeinms), '0000') + ' ' + str.tostring(hour(timeinms), '00:') + str.tostring(minute(timeinms), '00:') + str.tostring(second(timeinms), '00')\n    else\n        _string = ''\n```\n\n----------------------------------------\n\nTITLE: Converting Month Number to String in Pine Script\nDESCRIPTION: Function that converts a numeric month value (1-12) to its three-letter abbreviation (Jan-Dec). Used for date formatting in reports and alerts.\nSOURCE: https://github.com/tradelexx/trade_lexx/blob/main/3C QFL Mean reversal.txt#2025-04-23_snippet_25\n\nLANGUAGE: pine\nCODE:\n```\nget_month_string(month_number) =>\n    if month_number == 1\n        _string = 'Jan'\n    else if month_number == 2\n        _string = 'Feb'\n    else if month_number == 3\n        _string = 'Mar'\n    else if month_number == 4\n        _string = 'Apr'\n    else if month_number == 5\n        _string = 'May'\n    else if month_number == 6\n        _string = 'Jun'\n    else if month_number == 7\n        _string = 'Jul'\n    else if month_number == 8\n        _string = 'Aug'\n    else if month_number == 9\n        _string = 'Sep'\n    else if month_number == 10\n        _string = 'Oct'\n    else if month_number == 11\n        _string = 'Nov'\n    else if month_number == 12\n        _string = 'Dec'\n```"
  }
]