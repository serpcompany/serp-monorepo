[
  {
    "owner": "jmpews",
    "repo": "dobby",
    "content": "TITLE: Configuring Dobby Build Options with CMake\nDESCRIPTION: Defines various CMake options to customize the Dobby build. These options control features like shared library generation (DOBBY_GENERATE_SHARED), debug logging (DOBBY_DEBUG), near branch trampolines (NearBranch), floating-point register packing (FullFloatingPointRegisterPack), and enabling specific plugins like SymbolResolver, ImportTableReplace, and Android BionicLinkerUtil. Options for building examples and tests are also included.\nSOURCE: https://github.com/jmpews/dobby/blob/master/docs/compile.md#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\noption(DOBBY_GENERATE_SHARED \"Build shared library\" ON)\n\noption(DOBBY_DEBUG \"Enable debug logging\" OFF)\n\noption(NearBranch \"Enable near branch trampoline\" ON)\n\noption(FullFloatingPointRegisterPack \"Save and pack all floating-point registers\" OFF)\n\noption(Plugin.SymbolResolver \"Enable symbol resolver\" ON)\n\noption(Plugin.ImportTableReplace \"Enable import table replace \" OFF)\n\noption(Plugin.Android.BionicLinkerUtil \"Enable android bionic linker util\" OFF)\n\noption(DOBBY_BUILD_EXAMPLE \"Build example\" OFF)\n\noption(DOBBY_BUILD_TEST \"Build test\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Building Dobby for Host System using CMake\nDESCRIPTION: Standard CMake workflow commands to configure and build the Dobby project directly on the host machine. It involves creating a build directory, running CMake to generate build files, and then using make to compile the project.\nSOURCE: https://github.com/jmpews/dobby/blob/master/docs/compile.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd Dobby && mkdir cmake-build-host && cd cmake-build-host\ncmake ..\nmake -j4\n```\n\n----------------------------------------\n\nTITLE: Building Dobby for Linux using Platform Builder\nDESCRIPTION: Provides commands to first set up the Linux cross-compilation environment (CMake, LLVM) using a script and then build Dobby for all Linux architectures using the `platform_builder.py` script, specifying the paths to the required tools.\nSOURCE: https://github.com/jmpews/dobby/blob/master/docs/compile.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# prepare and download cmake/llvm\nsh scripts/setup_linux_cross_compile.sh\npython3 scripts/platform_builder.py --platform=linux --arch=all --cmake_dir=$HOME/opt/cmake-3.25.2 --llvm_dir=$HOME/opt/llvm-15.0.6\n```\n\n----------------------------------------\n\nTITLE: Creating Socket Example Executable with CMake\nDESCRIPTION: This snippet creates an executable named 'socket_example' using the provided source files (main.cc, socket_example.cc).  It links the executable against the 'dobby' and 'logging' libraries. The dependencies are crucial for the executable to function correctly. There are no limitations shown in this snippet.\nSOURCE: https://github.com/jmpews/dobby/blob/master/examples/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(socket_example\n  main.cc\n  socket_example.cc\n  )\n\ntarget_link_libraries(socket_example\n  dobby\n  logging\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Native Test Executable in CMake\nDESCRIPTION: Defines a simple executable target named `test_native` using `add_executable` with a single source file (`test_native.cpp`). It links this executable against the `dobby` library target using `target_link_libraries`. This test likely verifies Dobby's core functionality in a native environment without emulation dependencies.\nSOURCE: https://github.com/jmpews/dobby/blob/master/tests/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(test_native\n  test_native.cpp)\n\ntarget_link_libraries(test_native\n  dobby)\n```\n\n----------------------------------------\n\nTITLE: Building Dobby for iPhoneOS using Platform Builder\nDESCRIPTION: Uses the `platform_builder.py` script to build Dobby for all architectures on the iPhoneOS platform.\nSOURCE: https://github.com/jmpews/dobby/blob/master/docs/compile.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 scripts/platform_builder.py --platform=iphoneos --arch=all\n```\n\n----------------------------------------\n\nTITLE: Creating Socket Example Shared Library with CMake\nDESCRIPTION: This snippet creates a shared library named 'socket_example_lib' using the source file 'socket_example.cc'. It then links the library against the 'dobby' library. The shared library can be used by other projects. There are no limitations shown in this snippet.\nSOURCE: https://github.com/jmpews/dobby/blob/master/examples/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(socket_example_lib SHARED\n  socket_example.cc\n  )\n\ntarget_link_libraries(socket_example_lib\n  dobby\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining ARM Instruction Relocation Test in CMake\nDESCRIPTION: Defines an executable target named `test_insn_relo_arm` using `add_executable`. It includes specific C++ source files (`test_insn_relo_arm.cpp`, `UniconEmulator.cpp`) along with the previously gathered Dobby sources (`${DOBBY_SOURCES}`). Sets compile definitions for debugging, disabling architecture detection, targeting ARM, and enabling Unicorn testing. Configures include/link directories and links against Capstone and Unicorn libraries.\nSOURCE: https://github.com/jmpews/dobby/blob/master/tests/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(test_insn_relo_arm\n  test_insn_relo_arm.cpp\n  UniconEmulator.cpp\n  ${DOBBY_SOURCES}\n  )\n\ntarget_compile_definitions(test_insn_relo_arm PUBLIC\n  LOGGING_DEBUG=1\n  DISABLE_ARCH_DETECT=1\n  TARGET_ARCH_ARM=1\n  TEST_WITH_UNICORN=1\n  )\n\ntarget_include_directories(test_insn_relo_arm PUBLIC\n  ${CAPSTONE_INCLUDE_DIRS}\n  ${UNICORN_INCLUDE_DIRS}\n  )\n\ntarget_link_directories(test_insn_relo_arm PUBLIC\n  ${CAPSTONE_LIBRARY_DIRS}\n  ${UNICORN_LIBRARY_DIRS}\n  )\n\ntarget_link_libraries(test_insn_relo_arm PUBLIC\n  ${CAPSTONE_LIBRARIES}\n  ${UNICORN_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Logging Library using CMake - CMake\nDESCRIPTION: This CMake snippet sets up include paths, manages a source file list depending on whether kernel mode is enabled, computes absolute paths for source files, and defines a logging library target. It requires CMake to be installed and expects the build system to be capable of compiling C++ source files. The SOURCE_FILE_LIST variable either contains 'logging.cc' or 'logging_kern.cc', depending on the build option 'DOBBY_BUILD_KERNEL_MODE'. The 'add_library' command uses this list to build the logging component. No direct inputs or outputs; changes are reflected in project build artifacts.\nSOURCE: https://github.com/jmpews/dobby/blob/master/external/logging/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(.)\n\nset(SOURCE_FILE_LIST\n  logging.cc\n  )\n\nif (DOBBY_BUILD_KERNEL_MODE)\n  set(SOURCE_FILE_LIST\n    logging_kern.cc\n    )\nendif ()\n\nget_absolute_path_list(SOURCE_FILE_LIST SOURCE_FILE_LIST_)\nset(SOURCE_FILE_LIST ${SOURCE_FILE_LIST_})\n\nadd_library(logging\n  ${SOURCE_FILE_LIST}\n  )\n```\n\n----------------------------------------\n\nTITLE: Linking Test Library 'test_supervisor_call_monitor' with Main Library in CMake\nDESCRIPTION: This snippet links the test shared library to the main 'supervisor_call_monitor' library, enabling tests to utilize the core functionalities. It ensures proper dependency resolution during testing phases.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/SupervisorCallMonitor/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(test_supervisor_call_monitor\n  supervisor_call_monitor\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Static Library 'osbase' with source files in C++ using CMake\nDESCRIPTION: This snippet uses CMake configuration to define a static library named 'osbase' by including the source file 'platform-posix.cc' located in the specified directory. It enables modular compilation and linkage within the build system for the backend platform layer.\nSOURCE: https://github.com/jmpews/dobby/blob/master/external/osbase/CMakeLists.txt#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nadd_library(osbase STATIC\n  ${PROJECT_SOURCE_DIR}/source/Backend/UserMode/UnifiedInterface/platform-posix.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Path List\nDESCRIPTION: Converts the relative paths in `SOURCE_FILE_LIST` to absolute paths and stores them in `SOURCE_FILE_LIST_`.  This ensures that CMake can find the source files regardless of the build directory.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/SymbolResolver/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nget_absolute_path_list(SOURCE_FILE_LIST SOURCE_FILE_LIST_)\n```\n\n----------------------------------------\n\nTITLE: Setting Linux/Android Source Files\nDESCRIPTION: Appends `elf/dobby_symbol_resolver.cc` and `ProcessRuntime.cc` to `SOURCE_FILE_LIST` when building on Linux or Android.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/SymbolResolver/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nelseif (SYSTEM.Linux OR SYSTEM.Android)\n  set(SOURCE_FILE_LIST ${SOURCE_FILE_LIST}\n    elf/dobby_symbol_resolver.cc\n\n    ${DOBBY_DIR}/source/Backend/UserMode/PlatformUtil/Linux/ProcessRuntime.cc\n    )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Macho Context Kit Library (Darwin)\nDESCRIPTION: Defines a static library `macho_ctx_kit` on Darwin systems.  It includes `macho_ctx.h` and `macho_ctx.cc` from the `macho` directory.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/SymbolResolver/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (SYSTEM.Darwin)\n  add_library(macho_ctx_kit\n    ${CMAKE_CURRENT_SOURCE_DIR}/macho/macho_ctx.h\n    ${CMAKE_CURRENT_SOURCE_DIR}/macho/macho_ctx.cc\n    )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Source File List\nDESCRIPTION: Initializes an empty list called SOURCE_FILE_LIST using CMake's `set` command. This list will be populated later with the paths to source files used to build the library.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/SymbolResolver/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCE_FILE_LIST)\n```\n\n----------------------------------------\n\nTITLE: Including Directories\nDESCRIPTION: Adds the current directory (`.`) to the include directories. This allows the compiler to find header files located in the project's root directory.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/SymbolResolver/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(\n  .\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Android BionicLinkerUtil Plugin - CMake\nDESCRIPTION: This snippet enables the `Plugin.Android.BionicLinkerUtil` plugin specifically for Android builds. It checks if the build system is not Android and throws a fatal error if it isn't, ensuring the plugin is only used on Android. It adds the plugin's source file `bionic_linker_util.cc` to the `dobby.plugin.SOURCE_FILE_LIST` variable. The plugin likely relates to linker utilities for Android.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (Plugin.Android.BionicLinkerUtil)\n  if (NOT SYSTEM.Android)\n    message(FATAL_ERROR \"[!] Plugin.Android.BionicLinkerUtil only works on Android.\")\n  endif ()\n  message(STATUS \"[Dobby] Enable Plugin.Android.BionicLinkerUtil\")\n  set(dobby.plugin.SOURCE_FILE_LIST ${dobby.plugin.SOURCE_FILE_LIST}\n    BionicLinkerUtil/bionic_linker_util.cc\n    )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Grouping Pattern\nDESCRIPTION: Configures automatic grouping of source files based on file extensions for better project organization in IDEs, matching source files to source group labels.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nauto_source_group(\".\" \"auto-source-group\" \"\\\\.(cc|cpp|c|h)$\")\n```\n\n----------------------------------------\n\nTITLE: Setting C++ and C Standards\nDESCRIPTION: Specifies C++17 and C17 standards as required for consistent compilation across different environments, ensuring modern language features are available.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_C_STANDARD 17)\n```\n\n----------------------------------------\n\nTITLE: Listing Header Files\nDESCRIPTION: Specifies the header files to be included in the build, defining the public interface of the Dobby library.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nset(dobby.HEADER_FILE_LIST\n  include/dobby.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding External Logging Library\nDESCRIPTION: Includes the 'logging' external subdirectory and retrieves its source files to be compiled as part of the project, enabling logging functionality.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(external/logging)\nget_target_property(logging.SOURCE_FILE_LIST logging SOURCES)\n```\n\n----------------------------------------\n\nTITLE: Including Directories for Headers and Sources\nDESCRIPTION: Specifies the directories containing header files and source code that will be included in the build; platform-specific directories are conditionally added based on system detection.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(\n  .\n  ./include\n  ./source\n  source/dobby\n\n  ./external\n  ./external/logging\n\n  ./builtin-plugin\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Build Version with Git Commit Hash\nDESCRIPTION: Creates a version string for the build, appending the current date and optionally the short Git commit hash, for version tracking purposes.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nstring(TIMESTAMP TODAY \"%Y%m%d\")\nset(VERSION_REVISION \"-${TODAY}\")\nif (EXISTS \"${CMAKE_SOURCE_DIR}/.git\")\n  execute_process(\n    COMMAND git rev-parse --short --verify HEAD\n    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n    OUTPUT_VARIABLE VERSION_COMMIT_HASH\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n  if (VERSION_COMMIT_HASH)\n    set(VERSION_REVISION \"${VERSION_REVISION}-${VERSION_COMMIT_HASH}\")\n  endif ()\nendif ()\nset(DOBBY_BUILD_VERSION \"Dobby${VERSION_REVISION}\")\nset(compile_definitions \"${compile_definitions} -D__DOBBY_BUILD_VERSION__=\\\"${DOBBY_BUILD_VERSION}\\\"\")\nmessage(STATUS \"[Dobby] ${DOBBY_BUILD_VERSION}\")\n```\n\n----------------------------------------\n\nTITLE: Defining dobby_import_replace INTERFACE library in CMake\nDESCRIPTION: Creates an INTERFACE library named 'dobby_import_replace' with the source file 'dobby_import_replace.cc'. Interface libraries in CMake are used when the library consists only of interface elements such as headers, and doesn't produce compiled artifacts directly.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/ImportTableReplace/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(dobby_import_replace INTERFACE\n  dobby_import_replace.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Configure Android System Build (CMake)\nDESCRIPTION: This block configures CMake settings when building for Android. It links the `log` library to the `dobby` target. If the processor is ARM, it sets the `ANDROID_ARM_MODE` property to `arm` for both `dobby` and `dobby_static` targets. Requires the `SYSTEM.Android` and `PROCESSOR.ARM` variables/properties to be set correctly.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nif (SYSTEM.Android)\n  target_link_libraries(dobby log)\n  if (PROCESSOR.ARM)\n    set_target_properties(dobby\n      PROPERTIES\n      ANDROID_ARM_MODE arm\n      )\n    set_target_properties(dobby_static\n      PROPERTIES\n      ANDROID_ARM_MODE arm\n      )\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Including Auxiliary CMake Scripts\nDESCRIPTION: Includes several auxiliary CMake scripts that define utility functions, macros, build environment checks, source grouping, and Xcode helpers necessary for complex build configurations and cross-platform support.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(cmake/Util.cmake)\ninclude(cmake/Macros.cmake)\ninclude(cmake/build_environment_check.cmake)\ninclude(cmake/auto_source_group.cmake)\ninclude(cmake/xcode_generator_helper.cmake)\n```\n\n----------------------------------------\n\nTITLE: Conditional Support for Function Wrapping (Not Supported)\nDESCRIPTION: Intended for supporting multi-threaded function wrapping; however, this feature is disabled with a fatal error message indicating lack of support.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif (FunctionWrapper)\n  set(dobby.SOURCE_FILE_LIST ${dobby.SOURCE_FILE_LIST}\n  )\n  message(FATAL_ERROR \"[!] FunctionWrapper plugin is not supported\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining objc_runtime_replace library in CMake for Dobby\nDESCRIPTION: Creates the objc_runtime_replace library from the dobby_objc_message_hook.mm source file. This library is responsible for implementing Objective-C message hooking functionality in the Dobby project.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/ObjcRuntimeReplace/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(objc_runtime_replace\n  dobby_objc_message_hook.mm\n  )\n```\n\n----------------------------------------\n\nTITLE: Near Branch Trampoline Inclusion\nDESCRIPTION: Includes specific source file for near branch trampoline support if the feature is enabled, facilitating branch trampoline code on ARM64.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif (NearBranch)\n  set(dobby.SOURCE_FILE_LIST ${dobby.SOURCE_FILE_LIST}\n    source/InterceptRouting/NearBranchTrampoline/near_trampoline_arm64.cc\n  )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Source Files Inclusion\nDESCRIPTION: Includes source files depending on the target platform (Darwin, Linux, Windows), ensuring appropriate platform-specific variants are compiled.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif (SYSTEM.Darwin AND (NOT DOBBY_BUILD_KERNEL_MODE))\n  include_directories(\n    source/Backend/UserMode/PlatformUtil/Darwin/ProcessRuntime.cc\n    source/Backend/UserMode/UnifiedInterface/platform-posix.cc\n    source/Backend/UserMode/ExecMemory/code-patch-tool-darwin.cc\n    source/Backend/UserMode/ExecMemory/clear-cache-tool-all.c\n  )\nelseif (SYSTEM.Linux OR SYSTEM.Android)\n  include_directories(\n    source/Backend/UserMode/PlatformUtil/Linux/ProcessRuntime.cc\n    source/Backend/UserMode/UnifiedInterface/platform-posix.cc\n    source/Backend/UserMode/ExecMemory/code-patch-tool-posix.cc\n    source/Backend/UserMode/ExecMemory/clear-cache-tool-all.c\n  )\nelseif (SYSTEM.Windows)\n  include_directories(\n    source/Backend/UserMode/PlatformUtil/Windows/ProcessRuntime.cc\n    source/Backend/UserMode/UnifiedInterface/platform-windows.cc\n    source/Backend/UserMode/ExecMemory/code-patch-tool-windows.cc\n    source/Backend/UserMode/ExecMemory/clear-cache-tool-all.c\n  )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Project Initialization\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.5 and initializes the project named 'Dobby'. It also enables assembly language support, establishing foundational configuration for the build process.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5)\nproject(Dobby)\nenable_language(ASM)\n```\n\n----------------------------------------\n\nTITLE: Include Darwin Platform Configuration (CMake)\nDESCRIPTION: This snippet conditionally includes a specific CMake configuration file for Darwin systems (`platform-darwin.cmake`). It is executed only if both `SYSTEM.Darwin` is true and `DOBBY_BUILD_KERNEL_MODE` is false. Requires the presence of `cmake/platform/platform-darwin.cmake`.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nif (SYSTEM.Darwin AND (NOT DOBBY_BUILD_KERNEL_MODE))\n  include(cmake/platform/platform-darwin.cmake)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Include Examples Subdirectory (CMake)\nDESCRIPTION: This snippet conditionally includes the `examples` subdirectory in the build process. It is executed only if both `DOBBY_BUILD_EXAMPLE` is true and `DOBBY_BUILD_KERNEL_MODE` is false.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nif (DOBBY_BUILD_EXAMPLE AND (NOT DOBBY_BUILD_KERNEL_MODE))\n  add_subdirectory(examples)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Processor Architecture Handling\nDESCRIPTION: Automatically enables near branch trampoline support if the target processor architecture is x86 or x86_64, reflecting architecture-specific capabilities.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif (PROCESSOR.X86_64 OR PROCESSOR.X86)\n  set(NearBranch ON)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Enabling Dobby Got Hook - CMake\nDESCRIPTION: This snippet conditionally enables the got hook plugin if `Plugin.ImportTableReplace` and Darwin (macOS) are enabled. It includes the necessary include directories and adds the subdirectory for the plugin. This plugin likely modifies the import table replacement functionality on Darwin systems.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (Plugin.ImportTableReplace AND SYSTEM.Darwin)\n  message(STATUS \"[Dobby] Enable got hook\")\n  include_directories(builtin-plugin/ImportTableReplace)\n  add_subdirectory(builtin-plugin/ImportTableReplace)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Optional Substrate Support for iOS\nDESCRIPTION: Includes source files and defines macros for supporting code patching with Substrate on iOS, conditioned on build flags and platform detection.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif (0 AND SYSTEM.iOS AND (NOT DOBBY_BUILD_KERNEL_MODE))\n  include_directories(\n    source/Backend/UserMode/ExecMemory/substrated\n  )\n  set(compile_definitions \"${compile_definitions} -DCODE_PATCH_WITH_SUBSTRATED\")\n  set(dobby.SOURCE_FILE_LIST ${dobby.SOURCE_FILE_LIST}\n    source/Backend/UserMode/ExecMemory/substrated/mach_interface_support\n  )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configure Linker Obfuscation Flags (CMake)\nDESCRIPTION: This snippet conditionally adds LLVM obfuscation flags to the linker if the CMake variable `Private.Obfuscation` is set. It modifies the `linker_flags` variable. Requires a CMake environment and the specified obfuscation configuration.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nif (Private.Obfuscation)\n  set(linker_flags \"${linker_flags} -Wl,-mllvm -Wl,-obfuscator-conf=all\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Build Options and Features\nDESCRIPTION: Provides various toggle options such as debug logging, near branch trampoline, symbol resolver, and test/build flags, allowing customizable build configurations.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\noption(DOBBY_DEBUG \"Enable debug logging\" OFF)\noption(NearBranch \"Enable near branch trampoline\" ON)\noption(FullFloatingPointRegisterPack \"Save and pack all floating-point registers\" OFF)\noption(Plugin.SymbolResolver \"Enable symbol resolver\" ON)\noption(Plugin.ImportTableReplace \"Enable import table replace \" OFF)\noption(Plugin.Android.BionicLinkerUtil \"Enable android bionic linker util\" OFF)\noption(DOBBY_BUILD_EXAMPLE \"Build example\" OFF)\noption(DOBBY_BUILD_TEST \"Build test\" OFF)\noption(DOBBY_BUILD_KERNEL_MODE \"Build xnu kernel mode\" OFF)\noption(Private.Obfuscation \"Enable llvm obfuscation\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Include Tests Subdirectory (CMake)\nDESCRIPTION: This snippet conditionally includes the `tests` subdirectory in the build process. It is executed only if both `DOBBY_BUILD_TEST` is true and `DOBBY_BUILD_KERNEL_MODE` is false.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nif (DOBBY_BUILD_TEST AND (NOT DOBBY_BUILD_KERNEL_MODE))\n  add_subdirectory(tests)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Type and Definitions\nDESCRIPTION: Sets debug mode based on build type, initializes compile definitions, and adds specific flags for floating-point registers and kernel mode, influencing compilation parameters.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif ((NOT DEFINED CMAKE_BUILD_TYPE) OR (CMAKE_BUILD_TYPE STREQUAL \"Debug\"))\n  set(DOBBY_DEBUG ON)\nendif ()\n\nset(compile_definitions \"\")\n\nif (FullFloatingPointRegisterPack)\n  set(compile_definitions \"${compile_definitions} -DFULL_FLOATING_POINT_REGISTER_PACK\")\nendif ()\n\nif (DOBBY_BUILD_KERNEL_MODE)\n  set(compile_definitions \"${compile_definitions} -DBUILDING_KERNEL\")\nendif ()\n\nif (DOBBY_DEBUG)\n  set(compile_definitions \"${compile_definitions} -DDOBBY_DEBUG\")\nelse ()\n  set(compile_definitions \"${compile_definitions} -DDOBBY_LOGGING_DISABLE\")\nendif ()\n\nset(compile_definitions \"${compile_definitions} -DBUILD_WITH_TRAMPOLINE_ASM\")\n```\n\n----------------------------------------\n\nTITLE: Including External OS Base Library\nDESCRIPTION: Adds the 'osbase' external directory, providing OS abstraction layers or utility functions required by the project.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(external/osbase)\n```\n\n----------------------------------------\n\nTITLE: Including Compiler and Linker Settings\nDESCRIPTION: Includes an external CMake script that sets up compiler and linker flags appropriate for the project, ensuring consistent build environment configurations.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(cmake/compiler_and_linker.cmake)\n```\n\n----------------------------------------\n\nTITLE: Outputting Build Configuration Status\nDESCRIPTION: Displays the current build configuration parameters including build type and plugin options, aiding in build verification.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nmessage(STATUS \"[Dobby] CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}\")\nmessage(STATUS \"[Dobby] DOBBY_DEBUG: ${DOBBY_DEBUG}\")\nmessage(STATUS \"[Dobby] NearBranch: ${NearBranch}\")\nmessage(STATUS \"[Dobby] FullFloatingPointRegisterPack: ${FullFloatingPointRegisterPack}\")\nmessage(STATUS \"[Dobby] Plugin.SymbolResolver: ${Plugin.SymbolResolver}\")\nmessage(STATUS \"[Dobby] Plugin.ImportTableReplace: ${Plugin.ImportTableReplace}\")\nmessage(STATUS \"[Dobby] Plugin.Android.BionicLinkerUtil: ${Plugin.Android.BionicLinkerUtil}\")\nmessage(STATUS \"[Dobby] DOBBY_BUILD_EXAMPLE: ${DOBBY_BUILD_EXAMPLE}\")\nmessage(STATUS \"[Dobby] DOBBY_BUILD_TEST: ${DOBBY_BUILD_TEST}\")\nmessage(STATUS \"[Dobby] DOBBY_BUILD_KERNEL_MODE: ${DOBBY_BUILD_KERNEL_MODE}\")\nmessage(STATUS \"[Dobby] Private.Obfuscation: ${Private.Obfuscation}\")\n```\n\n----------------------------------------\n\nTITLE: Link Dynamic Loading Library on Linux (CMake)\nDESCRIPTION: This snippet conditionally links the `dl` (dynamic loading) library to the `dobby` target when building on a Linux system. Requires the `SYSTEM.Linux` variable/property to be true.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nif (SYSTEM.Linux)\n  target_link_libraries(dobby dl)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Compilation and Linking Flags for Libraries\nDESCRIPTION: Configures compiler and linker flags for both shared and static library targets, applying custom flags and compile definitions to ensure consistent build configurations.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(dobby\n  PROPERTIES\n  LINK_FLAGS \"${linker_flags}\"\n  COMPILE_FLAGS \"${compiler_flags}\"\n)\n\nset_target_properties(dobby_static\n  PROPERTIES\n  COMPILE_FLAGS \"${compiler_flags}\"\n)\n\ntarget_compile_definitions(dobby PRIVATE\n  \"COMPILE_DEFINITIONS ${compile_definitions}\"\n  -DBUILD_WITH_TRAMPOLINE_ASM\n)\ntarget_compile_definitions(dobby_static PRIVATE\n  \"COMPILE_DEFINITIONS ${compile_definitions}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Static Library 'supervisor_call_monitor' with Source Files in CMake\nDESCRIPTION: This snippet creates a static library target named 'supervisor_call_monitor' from multiple C++ source files. It links against auxiliary libraries and specifies the source files involved in the build process. Dependencies include 'misc_helper' and 'dobby'.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/SupervisorCallMonitor/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(supervisor_call_monitor STATIC\n  mach_system_call_log_handler.cc\n  system_call_log_handler.cc\n  supervisor_call_monitor.cc\n  sensitive_api_monitor.cc\n  misc_utility.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Linking Foundation framework to objc_runtime_replace in CMake\nDESCRIPTION: Links the Objective-C Foundation framework to the objc_runtime_replace library. The Foundation framework is required for interacting with the Objective-C runtime system.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/ObjcRuntimeReplace/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(objc_runtime_replace\n  \"-framework Foundation\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Aggregation of Source Files and Library Targets\nDESCRIPTION: Collects all header and source files, then defines shared and static library targets for the project, setting include directories, compile definitions, and target properties for building dynamically and statically linked libraries.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCE_FILE_LIST\n  ${dobby.HEADER_FILE_LIST}\n  ${dobby.SOURCE_FILE_LIST}\n  ${logging.SOURCE_FILE_LIST}\n  ${dobby.plugin.SOURCE_FILE_LIST}\n)\n\nget_absolute_path_list(SOURCE_FILE_LIST SOURCE_FILE_LIST_)\nset(SOURCE_FILE_LIST ${SOURCE_FILE_LIST_})\n\nadd_library(dobby SHARED\n  ${SOURCE_FILE_LIST}\n)\ntarget_include_directories(dobby PUBLIC\n  include\n)\n\nadd_library(dobby_static STATIC\n  ${SOURCE_FILE_LIST}\n)\ntarget_include_directories(dobby_static PUBLIC\n  include\n)\n\nset_target_properties(dobby_static\n  PROPERTIES OUTPUT_NAME \"dobby\"\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of Symbol Resolver Plugin\nDESCRIPTION: Includes the symbol resolver plugin source files if enabled, setting up plugin-specific compilation and linking, enhancing dynamic symbol resolution capabilities.\nSOURCE: https://github.com/jmpews/dobby/blob/master/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif (Plugin.SymbolResolver)\n  include_directories(builtin-plugin/SymbolResolver)\n  add_subdirectory(builtin-plugin/SymbolResolver)\n  get_target_property(symbol_resolver.SOURCE_FILE_LIST dobby_symbol_resolver SOURCES)\n  set(dobby.plugin.SOURCE_FILE_LIST ${dobby.plugin.SOURCE_FILE_LIST}\n    ${symbol_resolver.SOURCE_FILE_LIST}\n  )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Checking Dobby Directory Definition\nDESCRIPTION: Checks if the variable `DOBBY_DIR` is defined. If it's not defined, CMake will issue a fatal error and stop the build process. This ensures that the Dobby directory is properly set before proceeding.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/SymbolResolver/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT DEFINED DOBBY_DIR)\n  message(FATAL_ERROR \"DOBBY_DIR must be set!\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Dobby Symbol Resolver Library\nDESCRIPTION: Defines the `dobby_symbol_resolver` library as a static library and includes all the source files listed in the `SOURCE_FILE_LIST` variable.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/SymbolResolver/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(dobby_symbol_resolver\n  ${SOURCE_FILE_LIST}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Darwin User-Mode Source Files\nDESCRIPTION: Conditionally adds source files to the `SOURCE_FILE_LIST` based on whether `DOBBY_BUILD_KERNEL_MODE` is defined.  If it's not a kernel mode build, `dobby_symbol_resolver.cc`, `macho_file_symbol_resolver.cpp`, `shared_cache_ctx.cpp`, and `ProcessRuntime.cc` are added.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/SymbolResolver/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (SYSTEM.Darwin)\n  if (NOT DOBBY_BUILD_KERNEL_MODE)\n    set(SOURCE_FILE_LIST ${SOURCE_FILE_LIST}\n      macho/dobby_symbol_resolver.cc\n      macho/macho_file_symbol_resolver.cpp\n      macho/shared_cache_ctx.cpp\n      ${DOBBY_DIR}/source/Backend/UserMode/PlatformUtil/Darwin/ProcessRuntime.cc\n      )\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Cache Context Kit Library (Darwin)\nDESCRIPTION: Defines a static library `shared_cache_ctx_kit` on Darwin systems. It includes `shared_cache_ctx.h` and `shared_cache_ctx.cpp` from the `macho` directory.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/SymbolResolver/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (SYSTEM.Darwin)\n  add_library(shared_cache_ctx_kit\n    ${CMAKE_CURRENT_SOURCE_DIR}/macho/shared_cache_ctx.h\n    ${CMAKE_CURRENT_SOURCE_DIR}/macho/shared_cache_ctx.cpp\n    )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Absolute Source File List\nDESCRIPTION: Assigns the absolute path list `SOURCE_FILE_LIST_` to the `SOURCE_FILE_LIST` variable, overwriting the original relative paths.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/SymbolResolver/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCE_FILE_LIST ${SOURCE_FILE_LIST_})\n```\n\n----------------------------------------\n\nTITLE: Defining ARM64 Instruction Relocation Test in CMake\nDESCRIPTION: Defines an executable target named `test_insn_relo_arm64` using `add_executable`. It includes specific C++ source files (`test_insn_relo_arm64.cpp`, `UniconEmulator.cpp`) along with the previously gathered Dobby sources (`${DOBBY_SOURCES}`). Sets compile definitions for debugging, disabling architecture detection, targeting ARM64, and enabling Unicorn testing. Configures include/link directories and links against Capstone and Unicorn libraries.\nSOURCE: https://github.com/jmpews/dobby/blob/master/tests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(test_insn_relo_arm64\n  test_insn_relo_arm64.cpp\n  UniconEmulator.cpp\n  ${DOBBY_SOURCES}\n  )\n\ntarget_compile_definitions(test_insn_relo_arm64 PUBLIC\n  LOGGING_DEBUG=1\n  DISABLE_ARCH_DETECT=1\n  TARGET_ARCH_ARM64=1\n  TEST_WITH_UNICORN=1\n  )\n\ntarget_include_directories(test_insn_relo_arm64 PUBLIC\n  ${CAPSTONE_INCLUDE_DIRS}\n  ${UNICORN_INCLUDE_DIRS}\n  )\n\ntarget_link_directories(test_insn_relo_arm64 PUBLIC\n  ${CAPSTONE_LIBRARY_DIRS}\n  ${UNICORN_LIBRARY_DIRS}\n  )\n\ntarget_link_libraries(test_insn_relo_arm64 PUBLIC\n  ${CAPSTONE_LIBRARIES}\n  ${UNICORN_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Windows Source Files\nDESCRIPTION: Appends `pe/dobby_symbol_resolver.cc` and `ProcessRuntime.cc` to `SOURCE_FILE_LIST` when building on Windows.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/SymbolResolver/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nelseif (SYSTEM.Windows)\n  set(SOURCE_FILE_LIST ${SOURCE_FILE_LIST}\n    pe/dobby_symbol_resolver.cc\n\n    ${DOBBY_DIR}/source/Backend/UserMode/PlatformUtil/Windows/ProcessRuntime.cc\n    )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Including Current Directory in CMake Includes\nDESCRIPTION: This snippet adds the current directory to the include paths, enabling header files and other resources in the current directory to be accessible during compilation.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/SupervisorCallMonitor/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(\n  .\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Capstone and Unicorn Dependencies with PkgConfig in CMake\nDESCRIPTION: Uses `pkg_check_modules` from the `PkgConfig` package to find the necessary include directories and library paths/names for the Capstone and Unicorn libraries. It then prints these paths using `message`. Requires `PkgConfig` to be installed and Capstone/Unicorn `.pc` files to be available.\nSOURCE: https://github.com/jmpews/dobby/blob/master/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(CAPSTONE REQUIRED capstone)\nmessage(STATUS \"Capstone libraries: \" ${CAPSTONE_LIBRARY_DIRS})\nmessage(STATUS \"Capstone includes: \" ${CAPSTONE_INCLUDE_DIRS})\n\npkg_check_modules(UNICORN REQUIRED unicorn)\nmessage(STATUS \"unicorn libraries: \" ${UNICORN_LIBRARY_DIRS})\nmessage(STATUS \"unicorn includes: \" ${UNICORN_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Defining x64 Instruction Relocation Test in CMake\nDESCRIPTION: Defines an executable target named `test_insn_relo_x64` using `add_executable`. It includes specific C++ source files (`test_insn_relo_x64.cpp`, `UniconEmulator.cpp`) along with the previously gathered Dobby sources (`${DOBBY_SOURCES}`). Sets compile definitions for debugging, disabling architecture detection, targeting x64, and enabling Unicorn testing. Configures include/link directories and links against Capstone and Unicorn libraries.\nSOURCE: https://github.com/jmpews/dobby/blob/master/tests/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(test_insn_relo_x64\n  test_insn_relo_x64.cpp\n  UniconEmulator.cpp\n  ${DOBBY_SOURCES}\n  )\n\ntarget_compile_definitions(test_insn_relo_x64 PUBLIC\n  LOGGING_DEBUG=1\n  DISABLE_ARCH_DETECT=1\n  TARGET_ARCH_X64=1\n  TEST_WITH_UNICORN=1\n  # TARGET_ARCH_IA32=1\n  )\n\ntarget_include_directories(test_insn_relo_x64 PUBLIC\n  ${CAPSTONE_INCLUDE_DIRS}\n  ${UNICORN_INCLUDE_DIRS}\n  )\n\ntarget_link_directories(test_insn_relo_x64 PUBLIC\n  ${CAPSTONE_LIBRARY_DIRS}\n  ${UNICORN_LIBRARY_DIRS}\n  )\n\ntarget_link_libraries(test_insn_relo_x64 PUBLIC\n  ${CAPSTONE_LIBRARIES}\n  ${UNICORN_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies to 'supervisor_call_monitor' in CMake\nDESCRIPTION: This snippet links the static library target 'supervisor_call_monitor' with relevant libraries such as 'misc_helper' and 'dobby', ensuring that external dependencies are correctly resolved during build.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/SupervisorCallMonitor/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(supervisor_call_monitor\n  misc_helper\n  dobby\n  )\n```\n\n----------------------------------------\n\nTITLE: Integrating Dobby into Android Studio CMake Build\nDESCRIPTION: CMake code snippet for use within an Android Studio project's `CMakeLists.txt`. It checks if the 'dobby' target has already been defined, sets the path to the Dobby source directory, defines a macro to force-set CMake options (disabling debug and shared library build for Dobby), adds Dobby as a subdirectory, retrieves its include directories, and adds them to the current project's include paths. Finally, it defines a sample `native-lib` shared library that likely depends on Dobby.\nSOURCE: https://github.com/jmpews/dobby/blob/master/docs/compile.md#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT TARGET dobby)\nset(DOBBY_DIR /Users/jmpews/Workspace/Project.wrk/Dobby)\nmacro(SET_OPTION option value)\n  set(${option} ${value} CACHE INTERNAL \"\" FORCE)\nendmacro()\nSET_OPTION(DOBBY_DEBUG OFF)\nSET_OPTION(DOBBY_GENERATE_SHARED OFF)\nadd_subdirectory(${DOBBY_DIR} dobby)\nget_property(DOBBY_INCLUDE_DIRECTORIES\n  TARGET dobby\n  PROPERTY INCLUDE_DIRECTORIES)\ninclude_directories(\n  .\n  ${DOBBY_INCLUDE_DIRECTORIES}\n  $<TARGET_PROPERTY:dobby,INCLUDE_DIRECTORIES>\n)\nendif()\n\nadd_library(native-lib SHARED\n  ${DOBBY_DIR}/examples/socket_example.cc\n  native-lib.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Darwin Source Files\nDESCRIPTION: Appends `macho/macho_ctx.cc` to `SOURCE_FILE_LIST` when building on Darwin.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/SymbolResolver/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (SYSTEM.Darwin)\n  set(SOURCE_FILE_LIST ${SOURCE_FILE_LIST}\n    macho/macho_ctx.cc\n    )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Building Dobby for Android using Platform Builder\nDESCRIPTION: Shows the steps to prepare the Android cross-compilation environment (CMake, LLVM, NDK) via a setup script and then build Dobby for all Android architectures using the `platform_builder.py` script, providing the paths to the necessary tools (CMake, LLVM, Android NDK).\nSOURCE: https://github.com/jmpews/dobby/blob/master/docs/compile.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# prepare and download cmake/llvm/ndk\nsh scripts/setup_linux_cross_compile.sh\npython3 scripts/platform_builder.py --platform=android --arch=all --cmake_dir=$HOME/opt/cmake-3.25.2 --llvm_dir=$HOME/opt/llvm-15.0.6 --android_ndk_dir=$HOME/opt/ndk-r25b\n```\n\n----------------------------------------\n\nTITLE: Gathering Dobby Source Files in CMake\nDESCRIPTION: Retrieves the list of source files associated with the `dobby` target using `get_property`. It then iterates through this list, converting relative paths to absolute paths based on the `DOBBY_DIR` variable, and stores the results in the `DOBBY_SOURCES` variable. This variable is intended for use when defining other targets that depend on Dobby's source code.\nSOURCE: https://github.com/jmpews/dobby/blob/master/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(DOBBY_SOURCE_FILE_LIST\n  TARGET dobby\n  PROPERTY SOURCES)\n\nset(DOBBY_SOURCES)\nforeach (path ${DOBBY_SOURCE_FILE_LIST})\n  if (NOT path MATCHES \"^/\")\n    list(APPEND DOBBY_SOURCES ${DOBBY_DIR}/${path})\n  else ()\n    list(APPEND DOBBY_SOURCES ${path})\n  endif ()\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Building Dobby for macOS using Platform Builder\nDESCRIPTION: Uses the `platform_builder.py` script to build Dobby for all architectures on the macOS platform.\nSOURCE: https://github.com/jmpews/dobby/blob/master/docs/compile.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython3 scripts/platform_builder.py --platform=macos --arch=all\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Test Library 'test_supervisor_call_monitor' in CMake\nDESCRIPTION: This snippet defines a shared library for testing named 'test_supervisor_call_monitor', built from a single test source file. It links against the primary 'supervisor_call_monitor' library to facilitate testing of its functionalities.\nSOURCE: https://github.com/jmpews/dobby/blob/master/builtin-plugin/SupervisorCallMonitor/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(test_supervisor_call_monitor SHARED\n  test_supervisor_call_monitor.cc\n  )\n```"
  }
]