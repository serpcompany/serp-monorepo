[
  {
    "owner": "coollabsio",
    "repo": "documentation-coolify",
    "content": "TITLE: Quick Installation of Coolify using Bash\nDESCRIPTION: This command downloads and runs the Coolify installation script, automating the setup process.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -fsSL https://cdn.coollabs.io/coolify/install.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Launching Coolify with Docker Compose\nDESCRIPTION: This command uses Docker Compose to start Coolify with specific environment files and configuration options. It ensures the latest images are pulled, removes orphaned containers, and recreates the setup.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/installation.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose --env-file /data/coolify/source/.env -f /data/coolify/source/docker-compose.yml -f /data/coolify/source/docker-compose.prod.yml up -d --pull always --remove-orphans --force-recreate\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Traefik Dashboard in YAML\nDESCRIPTION: This YAML configuration enables the Traefik dashboard in insecure mode, without password protection. It should be added to the proxy configurations and requires a proxy restart to take effect.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/dashboard.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- '--api.insecure=true'\n```\n\n----------------------------------------\n\nTITLE: Configuring Nixpacks for Laravel Deployment\nDESCRIPTION: Comprehensive Nixpacks configuration for deploying a Laravel application with queue workers, schedulers, and web server in a single container.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/applications/laravel.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[phases.setup]\nnixPkgs = [\"...\", \"python311Packages.supervisor\"]\n\n[phases.build]\ncmds = [\n    \"mkdir -p /etc/supervisor/conf.d/\",\n    \"cp /assets/worker-*.conf /etc/supervisor/conf.d/\",\n    \"cp /assets/supervisord.conf /etc/supervisord.conf\",\n    \"chmod +x /assets/start.sh\",\n    \"...\"\n]\n\n[start]\ncmd = '/assets/start.sh'\n\n[staticAssets]\n\"start.sh\" = '''\n#!/bin/bash\n\n# Transform the nginx configuration\nnode /assets/scripts/prestart.mjs /assets/nginx.template.conf /etc/nginx.conf\n\n# Start supervisor\nsupervisord -c /etc/supervisord.conf -n\n'''\n\n\"supervisord.conf\" = '''\n[unix_http_server]\nfile=/assets/supervisor.sock\n\n[supervisord]\nlogfile=/var/log/supervisord.log\nlogfile_maxbytes=50MB\nlogfile_backups=10\nloglevel=info\npidfile=/assets/supervisord.pid\nnodaemon=false\nsilent=false\nminfds=1024\nminprocs=200\n\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n[supervisorctl]\nserverurl=unix:///assets/supervisor.sock\n\n[include]\nfiles = /etc/supervisor/conf.d/*.conf\n'''\n\n\"worker-nginx.conf\" = '''\n[program:worker-nginx]\nprocess_name=%(program_name)s_%(process_num)02d\ncommand=nginx -c /etc/nginx.conf\nautostart=true\nautorestart=true\nstdout_logfile=/var/log/worker-nginx.log\nstderr_logfile=/var/log/worker-nginx.log\n'''\n\n\"worker-phpfpm.conf\" = '''\n[program:worker-phpfpm]\nprocess_name=%(program_name)s_%(process_num)02d\ncommand=php-fpm -y /assets/php-fpm.conf -F\nautostart=true\nautorestart=true\nstdout_logfile=/var/log/worker-phpfpm.log\nstderr_logfile=/var/log/worker-phpfpm.log\n'''\n\n\"worker-laravel.conf\" = '''\n[program:worker-laravel]\nprocess_name=%(program_name)s_%(process_num)02d\ncommand=bash -c 'exec php /app/artisan queue:work --sleep=3 --tries=3 --max-time=3600'\nautostart=true\nautorestart=true\nstopasgroup=true\nkillasgroup=true\nnumprocs=12 # To reduce memory/CPU usage, change to 2.\nstartsecs=0\nstopwaitsecs=3600\nstdout_logfile=/var/log/worker-laravel.log\nstderr_logfile=/var/log/worker-laravel.log\n'''\n\n\"php-fpm.conf\" = '''\n[www]\nlisten = 127.0.0.1:9000\nuser = www-data\ngroup = www-data\nlisten.owner = www-data\nlisten.group = www-data\npm = dynamic\npm.max_children = 50 # To reduce memory/CPU usage, change to 5.\npm.min_spare_servers = 4 # To reduce memory/CPU usage, change to 1.\npm.max_spare_servers = 32 # To reduce memory/CPU usage, change to 3.\npm.start_servers = 18 # To reduce memory/CPU usage, change to 2.\nclear_env = no\nphp_admin_value[post_max_size] = 35M\nphp_admin_value[upload_max_filesize] = 30M\n'''\n\n\"nginx.template.conf\" = '''\nuser www-data www-data;\nworker_processes 5;\ndaemon off;\n\nworker_rlimit_nofile 8192;\n\nevents {\n  worker_connections  4096;  # Default: 1024\n}\n\nhttp {\n    include    $!{nginx}/conf/mime.types;\n    index    index.html index.htm index.php;\n\n    default_type application/octet-stream;\n    log_format   main '$remote_addr - $remote_user [$time_local]  $status '\n        '\"$request\" $body_bytes_sent \"$http_referer\" '\n        '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    access_log /var/log/nginx-access.log;\n    error_log /var/log/nginx-error.log;\n    sendfile     on;\n    tcp_nopush   on;\n    server_names_hash_bucket_size 128; # this seems to be required for some vhosts\n\n    server {\n        listen ${PORT};\n        listen [::]:${PORT};\n        server_name localhost;\n\n        $if(NIXPACKS_PHP_ROOT_DIR) (\n            root ${NIXPACKS_PHP_ROOT_DIR};\n        ) else (\n            root /app;\n        )\n\n        add_header X-Content-Type-Options \"nosniff\";\n\n        client_max_body_size 35M;\n     \n        index index.php;\n     \n        charset utf-8;\n     \n\n        $if(NIXPACKS_PHP_FALLBACK_PATH) (\n            location / {\n                try_files $uri $uri/ ${NIXPACKS_PHP_FALLBACK_PATH}?$query_string;\n            }\n        ) else (\n          location / {\n                try_files $uri $uri/ /index.php?$query_string;\n           }\n        )\n     \n        location = /favicon.ico { access_log off; log_not_found off; }\n        location = /robots.txt  { access_log off; log_not_found off; }\n     \n        $if(IS_LARAVEL) (\n            error_page 404 /index.php;\n        ) else ()\n     \n        location ~ \\.php$ {\n            fastcgi_pass 127.0.0.1:9000;\n            fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n            include $!{nginx}/conf/fastcgi_params;\n            include $!{nginx}/conf/fastcgi.conf;\n        }\n     \n        location ~ /\\.(?!well-known).* {\n            deny all;\n        }\n    }\n}\n'''\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Variables in Coolify\nDESCRIPTION: Illustrates setting predefined variables like commit hash ('SOURCE_COMMIT') as environment variables in a Coolify application. Ensures that application can access critical build and runtime metadata. The snippet assumes an existing Coolify setup where it's integrated into application code.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/environment-variables.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# For example, you can use this variable in your application\nMY_VARIABLE=$SOURCE_COMMIT\n```\n\n----------------------------------------\n\nTITLE: Generating and Configuring SSH Keys\nDESCRIPTION: This snippet generates an SSH key pair, sets the correct ownership, adds the public key to the `authorized_keys` file, and sets proper permissions. This allows passwordless SSH access.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/server/openssh.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n\"\n# Generate SSH key pair\nssh-keygen -t ed25519 -a 100 \\\n    -f /data/coolify/ssh/keys/id.root@host.docker.internal \\\n    -q -N \\\"\\\" -C root@coolify\n\n# Set correct ownership\nchown 9999 /data/coolify/ssh/keys/id.root@host.docker.internal\n\n# Add public key to authorized_keys\nmkdir -p ~/.ssh\ncat /data/coolify/ssh/keys/id.root@host.docker.internal.pub >> ~/.ssh/authorized_keys\n\n# Set proper permissions\nchmod 600 ~/.ssh/authorized_keys\nchmod 700 ~/.ssh\n\"\n```\n\n----------------------------------------\n\nTITLE: Traefik Labels Configuration\nDESCRIPTION: Example of required labels for using Coolify's Proxy (Traefik) in raw Docker Compose deployment.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/docker/compose.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - traefik.enable=true\n  - \"traefik.http.routers.<unique_router_name>.rule=Host(`coolify.io`) && PathPrefix(`/`)\"\n  - traefik.http.routers.<unique_router_name>.entryPoints=http\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Laravel Environment\nDESCRIPTION: This Dockerfile sets up a PHP environment with Unit, tailored for Laravel applications. It includes the installation of necessary PHP extensions, configuration of Opcache, and setting of file permissions.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/applications/laravel.md#2025-04-21_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM unit:1.34.1-php8.3\n\nRUN apt update && apt install -y \\\n    curl unzip git libicu-dev libzip-dev libpng-dev libjpeg-dev libfreetype6-dev libssl-dev \\\n    && docker-php-ext-configure gd --with-freetype --with-jpeg \\\n    && docker-php-ext-install -j$(nproc) pcntl opcache pdo pdo_mysql intl zip gd exif ftp bcmath \\\n    && pecl install redis \\\n    && docker-php-ext-enable redis\n\nRUN echo \"opcache.enable=1\" > /usr/local/etc/php/conf.d/custom.ini \\\n    && echo \"opcache.jit=tracing\" >> /usr/local/etc/php/conf.d/custom.ini \\\n    && echo \"opcache.jit_buffer_size=256M\" >> /usr/local/etc/php/conf.d/custom.ini \\\n    && echo \"memory_limit=512M\" > /usr/local/etc/php/conf.d/custom.ini \\        \n    && echo \"upload_max_filesize=64M\" >> /usr/local/etc/php/conf.d/custom.ini \\\n    && echo \"post_max_size=64M\" >> /usr/local/etc/php/conf.d/custom.ini\n\nCOPY --from=composer:latest /usr/bin/composer /usr/local/bin/composer\n\nWORKDIR /var/www/html\n\nRUN mkdir -p /var/www/html/storage /var/www/html/bootstrap/cache\n\nRUN chown -R unit:unit /var/www/html/storage bootstrap/cache && chmod -R 775 /var/www/html/storage\n\nCOPY . .\n\nRUN chown -R unit:unit storage bootstrap/cache && chmod -R 775 storage bootstrap/cache\n\nRUN composer install --prefer-dist --optimize-autoloader --no-interaction\n\nCOPY unit.json /docker-entrypoint.d/unit.json\n\nEXPOSE 8000\n\nCMD [\"unitd\", \"--no-daemon\"]\n```\n\n----------------------------------------\n\nTITLE: Dynamic Environment Variables in Docker Compose\nDESCRIPTION: Example of using Coolify's magic environment variables for Appwrite deployment, showing FQDN generation, password handling, and service-specific configurations.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/docker/compose.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  appwrite:\n    environment:\n      - SERVICE_FQDN_APPWRITE=/v1/realtime\n      - _APP_URL=$SERVICE_FQDN_APPWRITE\n      - SERVICE_FQDN_APPWRITE_3000\n      - SERVICE_FQDN_API_2000=/api\n      - SERVICE_SPECIFIC_PASSWORD=${SERVICE_PASSWORD_APPWRITE}\n  not-appwrite:\n    environment:\n      - APPWRITE_PASSWORD=${SERVICE_PASSWORD_APPWRITE}\n      - SERVICE_FQDN_API=/api\n```\n\n----------------------------------------\n\nTITLE: Running Coolify Manual Upgrade Script in Shell\nDESCRIPTION: This command runs the official Coolify installation script to manually upgrade the instance to the latest version. It uses curl to fetch and execute the script from the Coolify CDN.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/upgrade.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -fsSL https://cdn.coollabs.io/coolify/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Docker Compose\nDESCRIPTION: Demonstrates how to use shared environment variables in a Docker Compose configuration for a Coolify application. It allows linking shared variables like 'NODE_ENV' predefined in Coolify with the Compose environment. Dependencies include access to Coolify shared variables sections for teams, projects, or environments.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/environment-variables.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenvironment:\n  - NODE_ENV=${NODE_ENV}\n```\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ENV=${team.NODE_ENV}\n```\n\n----------------------------------------\n\nTITLE: Downloading Coolify Configuration Files\nDESCRIPTION: These commands download necessary configuration files for Coolify from the CDN to the local system.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/installation.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -fsSL https://cdn.coollabs.io/coolify/docker-compose.yml -o /data/coolify/source/docker-compose.yml\ncurl -fsSL https://cdn.coollabs.io/coolify/docker-compose.prod.yml -o /data/coolify/source/docker-compose.prod.yml\ncurl -fsSL https://cdn.coollabs.io/coolify/.env.production -o /data/coolify/source/.env\ncurl -fsSL https://cdn.coollabs.io/coolify/upgrade.sh -o /data/coolify/source/upgrade.sh\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key for Coolify Server Management\nDESCRIPTION: This command generates an SSH key for Coolify to manage the server, using the ED25519 algorithm.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nssh-keygen -f /data/coolify/ssh/keys/id.root@host.docker.internal -t ed25519 -N '' -C root@coolify\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Swarm Cluster\nDESCRIPTION: This bash command initializes a new Docker Swarm cluster on the manager node, specifying the advertisement address for the manager IP. It will output a join command for worker nodes.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/docker/swarm.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker swarm init --advertise-addr <MANAGER_IP>\n```\n\n----------------------------------------\n\nTITLE: SaaS Configuration for Wildcard Certificate - Bash\nDESCRIPTION: This Bash snippet outlines the configuration to redirect all subdomains to a single application when using Coolify as a SaaS provider. Using the HostRegexp rule, it enables dynamic handling of subdomains with proper middleware and service settings.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/wildcard-certs.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntraefik.enable=true\ntraefik.http.routers.<unique_router_name_https>.rule=HostRegexp(`^.+\\.coolify\\.io$`)\ntraefik.http.routers.<unique_router_name_https>.entryPoints=https\ntraefik.http.routers.<unique_router_name_https>.middlewares=gzip\ntraefik.http.routers.<unique_router_name_https>.service=<unique_service_name>\ntraefik.http.routers.<unique_router_name_https>.tls.certresolver=letsencrypt\ntraefik.http.services.<unique_service_name>.loadbalancer.server.port=80\ntraefik.http.routers.<unique_router_name_https>.tls=true\n\ntraefik.http.routers.<unique_router_name_http>.rule=HostRegexp(`^.+\\.coolify\\.io$`)\ntraefik.http.routers.<unique_router_name_http>.entryPoints=http\ntraefik.http.routers.<unique_router_name_http>.middlewares=redirect-to-https\n```\n\nLANGUAGE: bash\nCODE:\n```\ntraefik.enable=true\ntraefik.http.routers.<unique_router_name_https>.rule=HostRegexp(`{subdomain:[a-zA-Z0-9-]+}.coolify.io`)\ntraefik.http.routers.<unique_router_name_https>.entryPoints=https\ntraefik.http.routers.<unique_router_name_https>.middlewares=gzip\ntraefik.http.routers.<unique_router_name_https>.service=<unique_service_name>\ntraefik.http.routers.<unique_router_name_https>.tls.certresolver=letsencrypt\ntraefik.http.services.<unique_service_name>.loadbalancer.server.port=80\ntraefik.http.routers.<unique_router_name_https>.tls=true\n\ntraefik.http.routers.<unique_router_name_http>.rule=HostRegexp(`{subdomain:[a-zA-Z0-9-]+}.coolify.io`)\ntraefik.http.routers.<unique_router_name_http>.entryPoints=http\ntraefik.http.routers.<unique_router_name_http>.middlewares=redirect-to-https\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Coolify Service Template (YAML)\nDESCRIPTION: This snippet shows how to add metadata to the top of a docker-compose file for a Coolify service template. It includes fields for documentation, slogan, tags, logo, and port.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/contribute/service.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# documentation: https://docs.example.com/\n# slogan: A brief description of your service.\n# tags: tag1,tag2,tag3\n# logo: svgs/your-service.svg\n# port: 1234\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik for Load Balancing with HTTP on Multiple Containers\nDESCRIPTION: This YAML configuration details how to set up Traefik for load balancing over HTTP among multiple containers located on the same server. It covers the necessary middlewares and router configurations and requires that placeholder values be substituted with specific domain and container information.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/load-balancing.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    gzip:\n      compress: true\n  routers:\n    lb-http:\n      middlewares:\n        - gzip\n      entryPoints:\n        - http\n      service: lb-http\n      # Change <CHANGE_THIS_TO_YOUR_DOMAIN> to your domain, like `example.com` without `http://`\n      rule: Host(`<CHANGE_THIS_TO_YOUR_DOMAIN>`)\n  services:\n    lb-http:\n      loadBalancer:\n        servers:\n          # Change <UUID_OR_HOST.DOCKER.INTERNAL>:<PORT> to your containers UUID or host.docker.internal and port\n          # UUID is when you mapped a port to the host system\n          # host.docker.internal is when you are not exposed any port to the host system\n          - url: 'http://<UUID_OR_HOST.DOCKER.INTERNAL>:<PORT>'\n          - url: 'http://<UUID_OR_HOST.DOCKER.INTERNAL>:<PORT>'\n          # Add any number of containers you want to loadbalance between\n```\n\n----------------------------------------\n\nTITLE: Backing Up ClickHouse Database to S3\nDESCRIPTION: SQL command to backup an entire database to an S3 storage location. Requires S3 endpoint, access key, and secret key.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/databases/clickhouse.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nBACKUP DATABASE <database_name> TO S3('<your_s3_endpoint_com>/<unique_folder_for_database_backup>', '<s3_access_key>', '<s3_secret_key>')\n```\n\n----------------------------------------\n\nTITLE: Traefik Dynamic TLS Configuration\nDESCRIPTION: YAML configuration for setting up TLS certificates in Traefik.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cloudflare/origin-cert.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ntls:\n  certificates:\n    -\n      certFile: /traefik/certs/shadowarcanist.cert\n      keyFile: /traefik/certs/shadowarcanist.key\n```\n\n----------------------------------------\n\nTITLE: Post-Deployment Optimization with Artisan\nDESCRIPTION: This shell command optimizes and clears unnecessary caches within a Laravel application post-deployment. It ensures optimal performance by clearing various caches and optimizing application performance.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/applications/laravel.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nphp artisan optimize:clear && php artisan config:clear && php artisan route:clear && php artisan view:clear && php artisan optimize\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik for Load Balancing with HTTPS on Multiple Servers\nDESCRIPTION: This YAML configuration is intended for setting up Traefik to load balance requests over HTTPS between multiple servers. It includes middlewares for redirecting to HTTPS and for gzip compression, as well as router and service definitions. Ensure to replace the placeholder values with actual domain and server IP addresses.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/load-balancing.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    redirect-to-https:\n      redirectscheme:\n        scheme: https\n    gzip:\n      compress: true\n  routers:\n    lb-http:\n      middlewares:\n        - redirect-to-https\n      entryPoints:\n        - http\n      service: noop\n      # Change <CHANGE_THIS_TO_YOUR_DOMAIN> to your domain, like `example.com` without `https://`\n      rule: Host(`<CHANGE_THIS_TO_YOUR_DOMAIN>`)\n    lb-https:\n      middlewares:\n        - gzip\n      entryPoints:\n        - https\n      service: lb-https\n      tls:\n        certResolver: letsencrypt\n      # Change <CHANGE_THIS_TO_YOUR_DOMAIN> to your domain, like `example.com` without `https://`\n      rule: Host(`<CHANGE_THIS_TO_YOUR_DOMAIN>`)\n  services:\n    lb-https:\n      loadBalancer:\n        servers:\n          # Change <CHANGE_THIS_TO_YOUR_IP_ADDRESS> to your servers IP addresses\n          - url: 'http://<CHANGE_THIS_TO_YOUR_IP_ADDRESS>'\n          - url: 'http://<CHANGE_THIS_TO_YOUR_IP_ADDRESS>'\n          # Add any number of servers you want to loadbalance between\n    noop:\n      loadBalancer:\n        servers:\n          - url: ''\n```\n\n----------------------------------------\n\nTITLE: Configure non-www to www redirect for Docker Compose/One-click Apps\nDESCRIPTION: This snippet configures a redirect from the non-`www` version of a domain to the `www` version for Docker Compose based applications and one-click services. It defines a Traefik middleware using a regular expression to capture the domain and reconstruct the URL, adding the `www` prefix.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/redirects.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"traefik.http.middlewares.example-middleware.redirectregex.regex=^(http|https)://(?:www\\.)?(.+)\ntraefik.http.middlewares.example-middleware.redirectregex.replacement=${1}://www.${2}\ntraefik.http.middlewares.example-middleware.redirectregex.permanent=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Domain A Record\nDESCRIPTION: DNS configuration example demonstrating how to set up a wildcard A record for multiple subdomains pointing to a server IP address.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/dns-configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: dns\nCODE:\n```\n*.example.com.    IN    A    1.1.1.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit for Laravel Deployment\nDESCRIPTION: This JSON configuration file for Unit sets up listeners, routes, and application settings necessary to serve a Laravel application. It maps requests to application endpoints and specifies the PHP root directory.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/applications/laravel.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"listeners\": {\n        \"*:8000\": {\n            \"pass\": \"routes\"\n        }\n    },\n\n    \"routes\": [\n        {\n            \"match\": {\n                \"uri\": \"!/index.php\"\n            },\n            \"action\": {\n                \"share\": \"/var/www/html/public$uri\",\n                \"fallback\": {\n                    \"pass\": \"applications/laravel\"\n                }\n            }\n        }\n    ],\n\n    \"applications\": {\n        \"laravel\": {\n            \"type\": \"php\",\n            \"root\": \"/var/www/html/public/\",\n            \"script\": \"index.php\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik for Load Balancing with HTTP on Multiple Servers\nDESCRIPTION: This YAML configuration is specifically designed for load balancing applications using HTTP across multiple servers with Traefik. It defines necessary middlewares and routers, along with service settings that require you to replace placeholder values with your actual domain and server IP information.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/load-balancing.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    gzip:\n      compress: true\n  routers:\n    lb-http:\n      middlewares:\n        - gzip\n      entryPoints:\n        - http\n      service: lb-http\n      # Change <CHANGE_THIS_TO_YOUR_DOMAIN> to your domain, like `example.com` without `http://`\n      rule: Host(`<CHANGE_THIS_TO_YOUR_DOMAIN>`)\n  services:\n    lb-http:\n      loadBalancer:\n        servers:\n          # Change <CHANGE_THIS_TO_YOUR_IP_ADDRESS> to your servers IP addresses\n          - url: 'http://<CHANGE_THIS_TO_YOUR_IP_ADDRESS>'\n          - url: 'http://<CHANGE_THIS_TO_YOUR_IP_ADDRESS>'\n          # Add any number of servers you want to loadbalance between\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Auth Middleware for Docker Compose in Coolify\nDESCRIPTION: This YAML snippet demonstrates how to add Basic Authentication middleware to a Docker Compose service in Coolify. It includes the necessary labels for configuring the middleware.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/basic-auth.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  ngnix-simple-web-container::\n    image: 'nginx:alpine'\n    ports:\n      - '8080:80'\n    labels:\n      - 'traefik.http.middlewares.<random_unique_name>.basicauth.users=test:$2y$12$ci.4U63YX83CwkyUrjqxAucnmi2xXOIlEF6T/KdP9824f1Rf1iyNG'\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Backup Command in Bash\nDESCRIPTION: Command used by Coolify to create a full backup of PostgreSQL databases with custom format, without ACLs or ownership information.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/databases/backups.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npg_dump --format=custom --no-acl --no-owner --username <username> <databaseName>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Laravel Database and Redis\nDESCRIPTION: Example of environment variables needed for configuring database and Redis connections in a Laravel application deployed on Coolify.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/applications/laravel.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDB_CONNECTION=mysql\nDB_HOST=<DB_HOST>\nDB_PORT=3306\nDB_DATABASE=laravel\nDB_USERNAME=root\nDB_PASSWORD=\n\nREDIS_HOST=<REDIS_HOST>\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n```\n\n----------------------------------------\n\nTITLE: Configuring Appwrite service with Docker Compose\nDESCRIPTION: This snippet configures the main Appwrite service using Docker Compose. It specifies the image, container name, volumes, dependencies, and environment variables required for the Appwrite application to function correctly, including database and redis connections.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/appwrite.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"appwrite:\\n  image: appwrite/appwrite:1.6.0\\n  container_name: appwrite\\n  volumes:\\n    - appwrite-uploads:/storage/uploads:rw\\n    - appwrite-cache:/storage/cache:rw\\n    - appwrite-config:/storage/config:rw\\n    - appwrite-certificates:/storage/certificates:rw\\n    - appwrite-functions:/storage/functions:rw\\n  depends_on:\\n    - appwrite-mariadb\\n    - appwrite-redis\\n  environment:\\n    - SERVICE_FQDN_APPWRITE=/\\n    - _APP_ENV=${_APP_ENV:-production}\\n    - _APP_WORKER_PER_CORE=${_APP_WORKER_PER_CORE:-6}\\n    - _APP_LOCALE=${_APP_LOCALE:-en}\\n    - _APP_CONSOLE_WHITELIST_ROOT=${_APP_CONSOLE_WHITELIST_ROOT:-enabled}\\n    - _APP_CONSOLE_WHITELIST_EMAILS=${_APP_CONSOLE_WHITELIST_EMAILS}\\n    - _APP_CONSOLE_WHITELIST_IPS=${_APP_CONSOLE_WHITELIST_IPS}\\n    - >-\\n      _APP_CONSOLE_HOSTNAMES=${_APP_CONSOLE_HOSTNAMES:-localhost,appwrite.io,*.appwrite.io}\\n    - _APP_SYSTEM_EMAIL_NAME=${_APP_SYSTEM_EMAIL_NAME:-Appwrite}\\n    - >-\\n      _APP_SYSTEM_EMAIL_ADDRESS=${_APP_SYSTEM_EMAIL_ADDRESS:-team@appwrite.io}\\n    - _APP_SYSTEM_TEAM_EMAIL=${_APP_SYSTEM_TEAM_EMAIL:-team@appwrite.io}\\n    - _APP_EMAIL_SECURITY=${_APP_EMAIL_SECURITY:-certs@appwrite.io}\\n    - _APP_SYSTEM_RESPONSE_FORMAT=${_APP_SYSTEM_RESPONSE_FORMAT}\\n    - _APP_OPTIONS_ABUSE=${_APP_OPTIONS_ABUSE:-enabled}\\n    - >-\\n      _APP_OPTIONS_ROUTER_PROTECTION=${_APP_OPTIONS_ROUTER_PROTECTION:-disabled}\\n    - _APP_OPTIONS_FORCE_HTTPS=${_APP_OPTIONS_FORCE_HTTPS:-disabled}\\n    - >-\\n      _APP_OPTIONS_FUNCTIONS_FORCE_HTTPS=${_APP_OPTIONS_FUNCTIONS_FORCE_HTTPS:-disabled}\\n    - _APP_OPENSSL_KEY_V1=$SERVICE_PASSWORD_64_APPWRITE\\n    - _APP_DOMAIN=$SERVICE_URL_APPWRITE\\n    - _APP_DOMAIN_TARGET=$SERVICE_URL_APPWRITE\\n    - _APP_DOMAIN_FUNCTIONS=$SERVICE_URL_APPWRITE\\n    - _APP_REDIS_HOST=${_APP_REDIS_HOST:-appwrite-redis}\\n    - _APP_REDIS_PORT=${_APP_REDIS_PORT:-6379}\\n    - _APP_REDIS_USER=${_APP_REDIS_USER}\\n    - _APP_REDIS_PASS=${_APP_REDIS_PASS}\\n    - _APP_DB_HOST=${_APP_DB_HOST:-appwrite-mariadb}\\n    - _APP_DB_PORT=${_APP_DB_PORT:-3306}\\n    - _APP_DB_SCHEMA=${_APP_DB_SCHEMA:-appwrite}\\n    - _APP_DB_USER=$SERVICE_USER_MARIADB\\n    - _APP_DB_PASS=$SERVICE_PASSWORD_MARIADB\\n    - _APP_SMTP_HOST=${_APP_SMTP_HOST}\\n    - _APP_SMTP_PORT=${_APP_SMTP_PORT}\\n    - _APP_SMTP_SECURE=${_APP_SMTP_SECURE}\\n    - _APP_SMTP_USERNAME=${_APP_SMTP_USERNAME}\\n    - _APP_SMTP_PASSWORD=${_APP_SMTP_PASSWORD}\\n    - _APP_USAGE_STATS=${_APP_USAGE_STATS:-enabled}\\n    - _APP_STORAGE_LIMIT=${_APP_STORAGE_LIMIT:-30000000}\\n    - _APP_STORAGE_PREVIEW_LIMIT=${_APP_STORAGE_PREVIEW_LIMIT:-20000000}\\n    - _APP_STORAGE_ANTIVIRUS=${_APP_STORAGE_ANTIVIRUS:-disabled}\\n    - >-\\n      _APP_STORAGE_ANTIVIRUS_HOST=${_APP_STORAGE_ANTIVIRUS_HOST:-appwrite-clamav}\\n    - _APP_STORAGE_ANTIVIRUS_PORT=${_APP_STORAGE_ANTIVIRUS_PORT:-3310}\\n    - _APP_STORAGE_DEVICE=${_APP_STORAGE_DEVICE:-local}\\n    - _APP_STORAGE_S3_ACCESS_KEY=${_APP_STORAGE_S3_ACCESS_KEY}\\n    - _APP_STORAGE_S3_SECRET=${_APP_STORAGE_S3_SECRET}\\n    - _APP_STORAGE_S3_REGION=${_APP_STORAGE_S3_REGION:-us-east-1}\\n    - _APP_STORAGE_S3_BUCKET=${_APP_STORAGE_S3_BUCKET}\\n    - _APP_STORAGE_DO_SPACES_ACCESS_KEY=${_APP_STORAGE_DO_SPACES_ACCESS_KEY}\\n    - _APP_STORAGE_DO_SPACES_SECRET=${_APP_STORAGE_DO_SPACES_SECRET}\\n    - >-\\n      _APP_STORAGE_DO_SPACES_REGION=${_APP_STORAGE_DO_SPACES_REGION:-us-east-1}\\n    - _APP_STORAGE_DO_SPACES_BUCKET=${_APP_STORAGE_DO_SPACES_BUCKET}\\n    - _APP_STORAGE_BACKBLAZE_ACCESS_KEY=${_APP_STORAGE_BACKBLAZE_ACCESS_KEY}\\n    - _APP_STORAGE_BACKBLAZE_SECRET=${_APP_STORAGE_BACKBLAZE_SECRET}\\n    - >-\\n      _APP_STORAGE_BACKBLAZE_REGION=${_APP_STORAGE_BACKBLAZE_REGION:-us-west-004}\\n    - _APP_STORAGE_BACKBLAZE_BUCKET=${_APP_STORAGE_BACKBLAZE_BUCKET}\\n    - _APP_STORAGE_LINODE_ACCESS_KEY=${_APP_STORAGE_LINODE_ACCESS_KEY}\\n    - _APP_STORAGE_LINODE_SECRET=${_APP_STORAGE_LINODE_SECRET}\\n    - _APP_STORAGE_LINODE_REGION=${_APP_STORAGE_LINODE_REGION:-eu-central-1}\\n    - _APP_STORAGE_LINODE_BUCKET=${_APP_STORAGE_LINODE_BUCKET}\\n    - _APP_STORAGE_WASABI_ACCESS_KEY=${_APP_STORAGE_WASABI_ACCESS_KEY}\\n    - _APP_STORAGE_WASABI_SECRET=${_APP_STORAGE_WASABI_SECRET}\\n    - _APP_STORAGE_WASABI_REGION=${_APP_STORAGE_WASABI_REGION:-eu-central-1}\\n    - _APP_STORAGE_WASABI_BUCKET=${_APP_STORAGE_WASABI_BUCKET}\\n    - _APP_FUNCTIONS_SIZE_LIMIT=${_APP_FUNCTIONS_SIZE_LIMIT:-30000000}\\n    - _APP_FUNCTIONS_TIMEOUT=${_APP_FUNCTIONS_TIMEOUT:-900}\\n    - _APP_FUNCTIONS_BUILD_TIMEOUT=${_APP_FUNCTIONS_BUILD_TIMEOUT:-900}\\n    - _APP_FUNCTIONS_CPUS=${_APP_FUNCTIONS_CPUS:-0}\\n    - _APP_FUNCTIONS_MEMORY=${_APP_FUNCTIONS_MEMORY:-0}\\n    - >-\\n      _APP_FUNCTIONS_RUNTIMES=${_APP_FUNCTIONS_RUNTIMES:-node-20.0,php-8.2,python-3.11,ruby-3.2}\\n    - _APP_EXECUTOR_SECRET=$SERVICE_PASSWORD_64_APPWRITE\\n    - _APP_EXECUTOR_HOST=${_APP_EXECUTOR_HOST:-http://appwrite-executor/v1}\\n    - _APP_LOGGING_CONFIG=${_APP_LOGGING_CONFIG}\\n    - _APP_MAINTENANCE_INTERVAL=${_APP_MAINTENANCE_INTERVAL:-86400}\\n    - _APP_MAINTENANCE_DELAY=${_APP_MAINTENANCE_DELAY}\\n    - >-\\n      _APP_MAINTENANCE_RETENTION_EXECUTION=${_APP_MAINTENANCE_RETENTION_EXECUTION:-1209600}\\n    - >-\\n      _APP_MAINTENANCE_RETENTION_CACHE=${_APP_MAINTENANCE_RETENTION_CACHE:-2592000}\\n    - >-\\n      _APP_MAINTENANCE_RETENTION_ABUSE=${_APP_MAINTENANCE_RETENTION_ABUSE:-86400}\\n    - >-\\n      _APP_MAINTENANCE_RETENTION_AUDIT=${_APP_MAINTENANCE_RETENTION_AUDIT:-1209600}\\n    - >-\\n      _APP_MAINTENANCE_RETENTION_USAGE_HOURLY=${_APP_MAINTENANCE_RETENTION_USAGE_HOURLY:-8640000}\\n    - >-\\n      _APP_MAINTENANCE_RETENTION_SCHEDULES=${_APP_MAINTENANCE_RETENTION_SCHEDULES:-86400}\\n    - _APP_SMS_PROVIDER=${_APP_SMS_PROVIDER}\\n    - _APP_SMS_FROM=${_APP_SMS_FROM}\\n    - _APP_GRAPHQL_MAX_BATCH_SIZE=${_APP_GRAPHQL_MAX_BATCH_SIZE:-10}\\n    - _APP_GRAPHQL_MAX_COMPLEXITY=${_APP_GRAPHQL_MAX_COMPLEXITY:-250}\\n    - _APP_GRAPHQL_MAX_DEPTH=${_APP_GRAPHQL_MAX_DEPTH:-3}\\n    - _APP_VCS_GITHUB_APP_NAME=${_APP_VCS_GITHUB_APP_NAME}\\n    - _APP_VCS_GITHUB_PRIVATE_KEY=${_APP_VCS_GITHUB_PRIVATE_KEY}\\n    - _APP_VCS_GITHUB_APP_ID=${_APP_VCS_GITHUB_APP_ID}\\n    - _APP_VCS_GITHUB_WEBHOOK_SECRET=${_APP_VCS_GITHUB_WEBHOOK_SECRET}\\n    - _APP_VCS_GITHUB_CLIENT_SECRET=${_APP_VCS_GITHUB_CLIENT_SECRET}\\n    - _APP_VCS_GITHUB_CLIENT_ID=${_APP_VCS_GITHUB_CLIENT_ID}\\n    - >-\\n      _APP_MIGRATIONS_FIREBASE_CLIENT_ID=${_APP_MIGRATIONS_FIREBASE_CLIENT_ID}\\n    - >-\\n      _APP_MIGRATIONS_FIREBASE_CLIENT_SECRET=${_APP_MIGRATIONS_FIREBASE_CLIENT_SECRET}\\n    - _APP_ASSISTANT_OPENAI_API_KEY=${_APP_ASSISTANT_OPENAI_API_KEY}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Laravel\nDESCRIPTION: This snippet provides shell commands to set environment variables for a Laravel application. These variables are essential for application configuration, such as database connections and cache settings.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/applications/laravel.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nAPP_DEBUG=false\nAPP_ENV=staging\nAPP_KEY= #YourAppKey\nAPP_MAINTENANCE_DRIVER=file\nAPP_NAME=Laravel\nCACHE_STORE=file\nDB_CONNECTION= #YourDbConnection\nDB_DATABASE= #YourDb\nDB_HOST= #YourDbHost\nDB_PASSWORD= #YourDbPassword\nDB_PORT= #YourDbPort\nDB_USERNAME= #YourDbUsername\nFILESYSTEM_DISK=public\nMAIL_MAILER=log\nSESSION_DRIVER=file\n```\n\n----------------------------------------\n\nTITLE: Traefik Docker Compose Configuration\nDESCRIPTION: Complete Docker Compose configuration for Traefik reverse proxy setup with TLS support.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cloudflare/origin-cert.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Define external networks\nnetworks:\n  coolify:\n    external: true  # External network.\n\nservices:\n  # Traefik reverse proxy\n  traefik:\n    container_name: coolify-proxy  # Container name.\n    image: 'traefik:v3.1'  # Traefik image version.\n    restart: unless-stopped  # Auto-restart policy.\n    extra_hosts:\n      - 'host.docker.internal:host-gateway'  # Host communication.\n    networks:\n      - coolify  # Network connection.\n    ports:\n      - '443:443'  # Expose HTTPS port.\n    healthcheck:  # Health check configuration.\n      test: 'wget -qO- http://localhost:80/ping || exit 1'  # Ping endpoint for health check.\n      interval: 4s  # Health check interval.\n      timeout: 2s  # Health check timeout.\n      retries: 5  # Retry attempts.\n    volumes:\n      - '/var/run/docker.sock:/var/run/docker.sock:ro'  # Docker socket access.\n      - '/data/coolify/proxy:/traefik'  # Traefik config volume.\n    command:\n      # Traefik configuration options\n      - '--ping=true'  # Enable ping for health check.\n      - '--ping.entrypoint=http'  # Use HTTP entrypoint for ping.\n      - '--entrypoints.http.address=:80'  # HTTP entry point for health checks.\n      - '--entrypoints.https.address=:443'  # HTTPS entry point.\n      - '--entrypoints.http.http.encodequerysemicolons=true'  # Enable query semicolon encoding.\n      - '--entryPoints.http.http2.maxConcurrentStreams=50'  # HTTP/2 max streams.\n      - '--entrypoints.https.http.encodequerysemicolons=true'  # Enable HTTPS query encoding.\n      - '--entryPoints.https.http2.maxConcurrentStreams=50'  # HTTPS/2 max streams.\n      - '--entrypoints.https.http3'  # Enable HTTP/3.\n      - '--providers.docker.exposedbydefault=false'  # Disable default exposure.\n      - '--providers.file.directory=/traefik/dynamic/'  # Dynamic config directory.\n      - '--certificatesresolvers.letsencrypt.acme.httpchallenge=false'  # Disable HTTP challenge for Let's Encrypt.\n      - '--providers.file.watch=true'  # Enable config file watching.\n      - '--providers.docker=true'  # Enable Docker provider.\n    labels:\n      - coolify.managed=true  # Managed by Coolify.\n      - coolify.proxy=true  # Proxy service.\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Traefik Dashboard with Dynamic Configuration in YAML\nDESCRIPTION: This YAML configuration enables the Traefik dashboard with HTTPS redirect and basic authentication. It sets up HTTP and HTTPS routers for the dashboard, configures TLS with Let's Encrypt, and applies authentication middleware.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/dashboard.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    auth:\n      basicAuth:\n        users:\n          - \"<GENERATED_USERNAME>:<GENERATED_PASSWORD>\"\n    redirect-to-https:\n      redirectScheme:\n        scheme: https\n\n  routers:\n    dashboard-http:\n      rule: Host(`<DOMAIN_FOR_TRAEFIK>`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`))\n      entryPoints:\n        - http\n      service: api@internal\n      middlewares:\n        - redirect-to-https\n\n    dashboard-https:\n      rule: Host(`<DOMAIN_FOR_TRAEFIK>`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`))\n      entryPoints:\n        - https\n      service: api@internal\n      tls:\n        certResolver: letsencrypt\n      middlewares:\n        - auth\n```\n\n----------------------------------------\n\nTITLE: Configuring Appwrite Services in Docker Compose\nDESCRIPTION: This YAML configuration defines multiple Appwrite services and workers, including their environment variables, dependencies, and container settings. It covers services like mail worker, messaging worker, migrations worker, maintenance task, and usage tracking workers.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/appwrite.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n#         - _APP_ENV=${_APP_ENV:-production}\n#         - _APP_WORKER_PER_CORE=${_APP_WORKER_PER_CORE:-6}\n#         - _APP_OPENSSL_KEY_V1=$SERVICE_PASSWORD_64_APPWRITE\n#         - _APP_DOMAIN=$SERVICE_URL_APPWRITE\n#         - _APP_OPTIONS_FORCE_HTTPS=${_APP_OPTIONS_FORCE_HTTPS:-disabled}\n#         - _APP_REDIS_HOST=${_APP_REDIS_HOST:-appwrite-redis}\n#         - _APP_REDIS_PORT=${_APP_REDIS_PORT:-6379}\n#         - _APP_REDIS_USER=${_APP_REDIS_USER}\n#         - _APP_REDIS_PASS=${_APP_REDIS_PASS}\n#         - _APP_DB_HOST=${_APP_DB_HOST:-appwrite-mariadb}\n#         - _APP_DB_PORT=${_APP_DB_PORT:-3306}\n#         - _APP_DB_SCHEMA=${_APP_DB_SCHEMA:-appwrite}\n#         - _APP_DB_USER=$SERVICE_USER_MARIADB\n#         - _APP_DB_PASS=$SERVICE_PASSWORD_MARIADB\n#         - _APP_FUNCTIONS_TIMEOUT=${_APP_FUNCTIONS_TIMEOUT:-900}\n#         - _APP_FUNCTIONS_BUILD_TIMEOUT=${_APP_FUNCTIONS_BUILD_TIMEOUT:-900}\n#         - _APP_FUNCTIONS_CPUS=${_APP_FUNCTIONS_CPUS:-0}\n#         - _APP_FUNCTIONS_MEMORY=${_APP_FUNCTIONS_MEMORY:-0}\n#         - _APP_EXECUTOR_SECRET=$SERVICE_PASSWORD_64_APPWRITE\n#         - _APP_EXECUTOR_HOST=${_APP_EXECUTOR_HOST:-http://appwrite-executor/v1}\n#         - _APP_USAGE_STATS=${_APP_USAGE_STATS:-enabled}\n#         - _APP_DOCKER_HUB_USERNAME=${_APP_DOCKER_HUB_USERNAME}\n#         - _APP_DOCKER_HUB_PASSWORD=${_APP_DOCKER_HUB_PASSWORD}\n#         - _APP_LOGGING_CONFIG=${_APP_LOGGING_CONFIG}\n#     appwrite-worker-mails:\n#       image: appwrite/appwrite:1.6.0\n#       entrypoint: worker-mails\n#       container_name: appwrite-worker-mails\n#       depends_on:\n#         - appwrite-redis\n#       environment:\n#         - _APP_ENV=${_APP_ENV:-production}\n#         - _APP_WORKER_PER_CORE=${_APP_WORKER_PER_CORE:-6}\n#         - _APP_OPENSSL_KEY_V1=$SERVICE_PASSWORD_64_APPWRITE\n#         - _APP_SYSTEM_EMAIL_NAME=${_APP_SYSTEM_EMAIL_NAME:-Appwrite}\n#         - >-\n#           _APP_SYSTEM_EMAIL_ADDRESS=${_APP_SYSTEM_EMAIL_ADDRESS:-team@appwrite.io}\n#         - _APP_DB_HOST=${_APP_DB_HOST:-appwrite-mariadb}\n#         - _APP_DB_PORT=${_APP_DB_PORT:-3306}\n#         - _APP_DB_SCHEMA=${_APP_DB_SCHEMA:-appwrite}\n#         - _APP_DB_USER=$SERVICE_USER_MARIADB\n#         - _APP_DB_PASS=$SERVICE_PASSWORD_MARIADB\n#         - _APP_REDIS_HOST=${_APP_REDIS_HOST:-appwrite-redis}\n#         - _APP_REDIS_PORT=${_APP_REDIS_PORT:-6379}\n#         - _APP_REDIS_USER=${_APP_REDIS_USER}\n#         - _APP_REDIS_PASS=${_APP_REDIS_PASS}\n#         - _APP_SMTP_HOST=${_APP_SMTP_HOST}\n#         - _APP_SMTP_PORT=${_APP_SMTP_PORT}\n#         - _APP_SMTP_SECURE=${_APP_SMTP_SECURE}\n#         - _APP_SMTP_USERNAME=${_APP_SMTP_USERNAME}\n#         - _APP_SMTP_PASSWORD=${_APP_SMTP_PASSWORD}\n#         - _APP_LOGGING_CONFIG=${_APP_LOGGING_CONFIG}\n#         - _APP_DOMAIN=$SERVICE_URL_APPWRITE\n#     appwrite-worker-messaging:\n#       image: appwrite/appwrite:1.6.0\n#       entrypoint: worker-messaging\n#       container_name: appwrite-worker-messaging\n#       volumes:\n#         - appwrite-uploads:/storage/uploads:rw\n#       depends_on:\n#         - appwrite-redis\n#       environment:\n#         - _APP_ENV=${_APP_ENV:-production}\n#         - _APP_WORKER_PER_CORE=${_APP_WORKER_PER_CORE:-6}\n#         - _APP_OPENSSL_KEY_V1=$SERVICE_PASSWORD_64_APPWRITE\n#         - _APP_REDIS_HOST=${_APP_REDIS_HOST:-appwrite-redis}\n#         - _APP_REDIS_PORT=${_APP_REDIS_PORT:-6379}\n#         - _APP_REDIS_USER=${_APP_REDIS_USER}\n#         - _APP_REDIS_PASS=${_APP_REDIS_PASS}\n#         - _APP_DB_HOST=${_APP_DB_HOST:-appwrite-mariadb}\n#         - _APP_DB_PORT=${_APP_DB_PORT:-3306}\n#         - _APP_DB_SCHEMA=${_APP_DB_SCHEMA:-appwrite}\n#         - _APP_DB_USER=$SERVICE_USER_MARIADB\n#         - _APP_DB_PASS=$SERVICE_PASSWORD_MARIADB\n#         - _APP_LOGGING_CONFIG=${_APP_LOGGING_CONFIG}\n#         - _APP_SMS_FROM=${_APP_SMS_FROM}\n#         - _APP_SMS_PROVIDER=${_APP_SMS_PROVIDER}\n#         - _APP_STORAGE_DEVICE=${_APP_STORAGE_DEVICE:-local}\n#         - _APP_STORAGE_S3_ACCESS_KEY=${_APP_STORAGE_S3_ACCESS_KEY}\n#         - _APP_STORAGE_S3_SECRET=${_APP_STORAGE_S3_SECRET}\n#         - _APP_STORAGE_S3_REGION=${_APP_STORAGE_S3_REGION:-us-east-1}\n#         - _APP_STORAGE_S3_BUCKET=${_APP_STORAGE_S3_BUCKET}\n#         - _APP_STORAGE_DO_SPACES_ACCESS_KEY=${_APP_STORAGE_DO_SPACES_ACCESS_KEY}\n#         - _APP_STORAGE_DO_SPACES_SECRET=${_APP_STORAGE_DO_SPACES_SECRET}\n#         - >-\n#           _APP_STORAGE_DO_SPACES_REGION=${_APP_STORAGE_DO_SPACES_REGION:-us-east-1}\n#         - _APP_STORAGE_DO_SPACES_BUCKET=${_APP_STORAGE_DO_SPACES_BUCKET}\n#         - _APP_STORAGE_BACKBLAZE_ACCESS_KEY=${_APP_STORAGE_BACKBLAZE_ACCESS_KEY}\n#         - _APP_STORAGE_BACKBLAZE_SECRET=${_APP_STORAGE_BACKBLAZE_SECRET}\n#         - >-\n#           _APP_STORAGE_BACKBLAZE_REGION=${_APP_STORAGE_BACKBLAZE_REGION:-us-west-004}\n#         - _APP_STORAGE_BACKBLAZE_BUCKET=${_APP_STORAGE_BACKBLAZE_BUCKET}\n#         - _APP_STORAGE_LINODE_ACCESS_KEY=${_APP_STORAGE_LINODE_ACCESS_KEY}\n#         - _APP_STORAGE_LINODE_SECRET=${_APP_STORAGE_LINODE_SECRET}\n#         - _APP_STORAGE_LINODE_REGION=${_APP_STORAGE_LINODE_REGION:-eu-central-1}\n#         - _APP_STORAGE_LINODE_BUCKET=${_APP_STORAGE_LINODE_BUCKET}\n#         - _APP_STORAGE_WASABI_ACCESS_KEY=${_APP_STORAGE_WASABI_ACCESS_KEY}\n#         - _APP_STORAGE_WASABI_SECRET=${_APP_STORAGE_WASABI_SECRET}\n#         - _APP_STORAGE_WASABI_REGION=${_APP_STORAGE_WASABI_REGION:-eu-central-1}\n#         - _APP_STORAGE_WASABI_BUCKET=${_APP_STORAGE_WASABI_BUCKET}\n#     appwrite-worker-migrations:\n#       image: appwrite/appwrite:1.6.0\n#       entrypoint: worker-migrations\n#       container_name: appwrite-worker-migrations\n#       depends_on:\n#         - appwrite-mariadb\n#       environment:\n#         - _APP_ENV=${_APP_ENV:-production}\n#         - _APP_WORKER_PER_CORE=${_APP_WORKER_PER_CORE:-6}\n#         - _APP_OPENSSL_KEY_V1=$SERVICE_PASSWORD_64_APPWRITE\n#         - _APP_DOMAIN=$SERVICE_URL_APPWRITE\n#         - _APP_DOMAIN_TARGET=$SERVICE_URL_APPWRITE\n#         - _APP_EMAIL_SECURITY=${_APP_EMAIL_SECURITY:-certs@appwrite.io}\n#         - _APP_REDIS_HOST=${_APP_REDIS_HOST:-appwrite-redis}\n#         - _APP_REDIS_PORT=${_APP_REDIS_PORT:-6379}\n#         - _APP_REDIS_USER=${_APP_REDIS_USER}\n#         - _APP_REDIS_PASS=${_APP_REDIS_PASS}\n#         - _APP_DB_HOST=${_APP_DB_HOST:-appwrite-mariadb}\n#         - _APP_DB_PORT=${_APP_DB_PORT:-3306}\n#         - _APP_DB_SCHEMA=${_APP_DB_SCHEMA:-appwrite}\n#         - _APP_DB_USER=$SERVICE_USER_MARIADB\n#         - _APP_DB_PASS=$SERVICE_PASSWORD_MARIADB\n#         - _APP_LOGGING_CONFIG=${_APP_LOGGING_CONFIG}\n#         - >-\n#           _APP_MIGRATIONS_FIREBASE_CLIENT_ID=${_APP_MIGRATIONS_FIREBASE_CLIENT_ID}\n#         - >-\n#           _APP_MIGRATIONS_FIREBASE_CLIENT_SECRET=${_APP_MIGRATIONS_FIREBASE_CLIENT_SECRET}\n#     appwrite-task-maintenance:\n#       image: appwrite/appwrite:1.6.0\n#       entrypoint: maintenance\n#       container_name: appwrite-task-maintenance\n#       depends_on:\n#         - appwrite-redis\n#       environment:\n#         - _APP_ENV=${_APP_ENV:-production}\n#         - _APP_WORKER_PER_CORE=${_APP_WORKER_PER_CORE:-6}\n#         - _APP_DOMAIN=$SERVICE_URL_APPWRITE\n#         - _APP_DOMAIN_TARGET=$SERVICE_URL_APPWRITE\n#         - _APP_DOMAIN_FUNCTIONS=$SERVICE_URL_APPWRITE\n#         - _APP_OPENSSL_KEY_V1=$SERVICE_PASSWORD_64_APPWRITE\n#         - _APP_REDIS_HOST=${_APP_REDIS_HOST:-appwrite-redis}\n#         - _APP_REDIS_PORT=${_APP_REDIS_PORT:-6379}\n#         - _APP_REDIS_USER=${_APP_REDIS_USER}\n#         - _APP_REDIS_PASS=${_APP_REDIS_PASS}\n#         - _APP_DB_HOST=${_APP_DB_HOST:-appwrite-mariadb}\n#         - _APP_DB_PORT=${_APP_DB_PORT:-3306}\n#         - _APP_DB_SCHEMA=${_APP_DB_SCHEMA:-appwrite}\n#         - _APP_DB_USER=$SERVICE_USER_MARIADB\n#         - _APP_DB_PASS=$SERVICE_PASSWORD_MARIADB\n#         - _APP_MAINTENANCE_INTERVAL=${_APP_MAINTENANCE_INTERVAL}\n#         - >-\n#           _APP_MAINTENANCE_RETENTION_EXECUTION=${_APP_MAINTENANCE_RETENTION_EXECUTION}\n#         - >-\n#           _APP_MAINTENANCE_RETENTION_CACHE=${_APP_MAINTENANCE_RETENTION_CACHE:-2592000}\n#         - >-\n#           _APP_MAINTENANCE_RETENTION_ABUSE=${_APP_MAINTENANCE_RETENTION_ABUSE:-86400}\n#         - >-\n#           _APP_MAINTENANCE_RETENTION_AUDIT=${_APP_MAINTENANCE_RETENTION_AUDIT:-1209600}\n#         - >-\n#           _APP_MAINTENANCE_RETENTION_USAGE_HOURLY=${_APP_MAINTENANCE_RETENTION_USAGE_HOURLY:-8640000}\n#         - >-\n#           _APP_MAINTENANCE_RETENTION_SCHEDULES=${_APP_MAINTENANCE_RETENTION_SCHEDULES:-86400}\n#     appwrite-worker-usage:\n#       image: appwrite/appwrite:1.6.0\n#       entrypoint: worker-usage\n#       container_name: appwrite-worker-usage\n#       restart: unless-stopped\n#       depends_on:\n#         - appwrite-redis\n#         - appwrite-mariadb\n#       environment:\n#         - _APP_ENV=${_APP_ENV:-production}\n#         - _APP_WORKER_PER_CORE=${_APP_WORKER_PER_CORE:-6}\n#         - _APP_OPENSSL_KEY_V1=$SERVICE_PASSWORD_64_APPWRITE\n#         - _APP_DB_HOST=${_APP_DB_HOST:-appwrite-mariadb}\n#         - _APP_DB_PORT=${_APP_DB_PORT:-3306}\n#         - _APP_DB_SCHEMA=${_APP_DB_SCHEMA:-appwrite}\n#         - _APP_DB_USER=$SERVICE_USER_MARIADB\n#         - _APP_DB_PASS=$SERVICE_PASSWORD_MARIADB\n#         - _APP_REDIS_HOST=${_APP_REDIS_HOST:-appwrite-redis}\n#         - _APP_REDIS_PORT=${_APP_REDIS_PORT:-6379}\n#         - _APP_REDIS_USER=${_APP_REDIS_USER}\n#         - _APP_REDIS_PASS=${_APP_REDIS_PASS}\n#         - _APP_USAGE_STATS=${_APP_USAGE_STATS:-enabled}\n#         - _APP_LOGGING_CONFIG=${_APP_LOGGING_CONFIG}\n#         - _APP_USAGE_AGGREGATION_INTERVAL=${_APP_USAGE_AGGREGATION_INTERVAL:-30}\n#     appwrite-worker-usage-dump:\n#       image: appwrite/appwrite:1.6.0\n#       entrypoint: worker-usage-dump\n#       container_name: appwrite-worker-usage-dump\n#       depends_on:\n#         - appwrite-redis\n#         - appwrite-mariadb\n#       environment:\n#         - _APP_ENV=${_APP_ENV:-production}\n#         - _APP_WORKER_PER_CORE=${_APP_WORKER_PER_CORE:-6}\n```\n\n----------------------------------------\n\nTITLE: Docker Service Configuration for Appwrite Components\nDESCRIPTION: Docker-compose style configuration defining multiple Appwrite services including task schedulers, database, cache, and function executors. Includes environment variables, volume mounts, and container dependencies.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/appwrite.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nappwrite-task-scheduler-functions:\n  image: appwrite/appwrite:1.6.0\n  entrypoint: schedule-functions\n  container_name: appwrite-task-scheduler-functions\n  depends_on:\n    - appwrite-mariadb\n    - appwrite-redis\n  environment:\n    - _APP_ENV=${_APP_ENV:-production}\n    - _APP_WORKER_PER_CORE=${_APP_WORKER_PER_CORE:-6}\n    - _APP_OPENSSL_KEY_V1=$SERVICE_PASSWORD_64_APPWRITE\n```\n\n----------------------------------------\n\nTITLE: Generating Secure Random Values for Coolify Configuration\nDESCRIPTION: These commands generate and set secure random values for various configuration parameters in the Coolify .env file.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/installation.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsed -i \"s|APP_ID=.*|APP_ID=$(openssl rand -hex 16)|g\" /data/coolify/source/.env\nsed -i \"s|APP_KEY=.*|APP_KEY=base64:$(openssl rand -base64 32)|g\" /data/coolify/source/.env\nsed -i \"s|DB_PASSWORD=.*|DB_PASSWORD=$(openssl rand -base64 32)|g\" /data/coolify/source/.env\nsed -i \"s|REDIS_PASSWORD=.*|REDIS_PASSWORD=$(openssl rand -base64 32)|g\" /data/coolify/source/.env\nsed -i \"s|PUSHER_APP_ID=.*|PUSHER_APP_ID=$(openssl rand -hex 32)|g\" /data/coolify/source/.env\nsed -i \"s|PUSHER_APP_KEY=.*|PUSHER_APP_KEY=$(openssl rand -hex 32)|g\" /data/coolify/source/.env\nsed -i \"s|PUSHER_APP_SECRET=.*|PUSHER_APP_SECRET=$(openssl rand -hex 32)|g\" /data/coolify/source/.env\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik for Load Balancing with HTTPS on Multiple Containers\nDESCRIPTION: This YAML configuration illustrates how to set up Traefik to load balance requests over HTTPS among multiple containers on a single server. It incorporates middlewares for HTTPS redirection and gzip compression, along with the requisite router and service definitions, which should have placeholder values replaced accordingly.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/load-balancing.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    redirect-to-https:\n      redirectscheme:\n        scheme: https\n    gzip:\n      compress: true\n  routers:\n    lb-https:\n      tls:\n        certResolver: letsencrypt\n      middlewares:\n        - gzip\n      entryPoints:\n        - https\n      service: lb-https\n      # Change <CHANGE_THIS_TO_YOUR_DOMAIN> to your domain, like `example.com` without `http://`\n      rule: Host(`<CHANGE_THIS_TO_YOUR_DOMAIN>`)\n    lb-http:\n      middlewares:\n        - redirect-to-https\n      entryPoints:\n        - http\n      service: noop\n      # Change <CHANGE_THIS_TO_YOUR_DOMAIN> to your domain, like `example.com` without `http://`\n      rule: Host(`<CHANGE_THIS_TO_YOUR_DOMAIN>`)\n  services:\n    lb-https:\n      loadBalancer:\n        servers:\n          # Change <UUID_OR_HOST.DOCKER.INTERNAL>:<PORT> to your containers UUID or host.docker.internal and port\n          # UUID is when you mapped a port to the host system\n          # host.docker.internal is when you are not exposed any port to the host system\n          - url: 'http://<UUID_OR_HOST.DOCKER.INTERNAL>:<PORT>'\n          - url: 'http://<UUID_OR_HOST.DOCKER.INTERNAL>:<PORT>'\n          # Add any number of containers you want to loadbalance between\n    noop:\n      loadBalancer:\n        servers:\n          - url: ''\n```\n\n----------------------------------------\n\nTITLE: Configuring ActivePieces Service in Docker Compose\nDESCRIPTION: This snippet defines the ActivePieces service configuration in a Docker Compose setup, specifying the Docker image to use, environment variables required for operation, dependencies on PostgreSQL and Redis, and health check parameters to ensure the service is functioning correctly.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/activepieces.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  activepieces:\n    image: ghcr.io/activepieces/activepieces:latest\n    environment:\n      - SERVICE_FQDN_ACTIVEPIECESS\n      - AP_API_KEY=$SERVICE_PASSWORD_64_APIKEY\n      - AP_ENCRYPTION_KEY=$SERVICE_PASSWORD_ENCRYPTIONKEY\n      - >-\n        AP_ENGINE_EXECUTABLE_PATH=${AP_ENGINE_EXECUTABLE_PATH:-dist/packages/engine/main.js}\n      - AP_ENVIRONMENT=${AP_ENVIRONMENT:-prod}\n      - AP_EXECUTION_MODE=${AP_EXECUTION_MODE:-UNSANDBOXED}\n      - AP_FRONTEND_URL=${SERVICE_FQDN_ACTIVEPIECES}\n      - AP_JWT_SECRET=$SERVICE_PASSWORD_64_JWT\n      - AP_POSTGRES_DATABASE=${POSTGRES_DB:-activepieces}\n      - AP_POSTGRES_HOST=${POSTGRES_HOST:-postgres}\n      - AP_POSTGRES_PASSWORD=${SERVICE_PASSWORD_POSTGRES}\n      - AP_POSTGRES_PORT=${POSTGRES_PORT:-5432}\n      - AP_POSTGRES_USERNAME=$SERVICE_USER_POSTGRES\n      - AP_REDIS_HOST=${REDIS_HOST:-redis}\n      - AP_REDIS_PORT=${REDIS_PORT:-6379}\n      - AP_SANDBOX_RUN_TIME_SECONDS=${AP_SANDBOX_RUN_TIME_SECONDS:-600}\n      - AP_TELEMETRY_ENABLED=${AP_TELEMETRY_ENABLED:-false}\n      - >-\n        AP_TEMPLATES_SOURCE_URL=${AP_TEMPLATES_SOURCE_URL:-https://cloud.activepieces.com/api/v1/flow-templates}\n      - >-\n        AP_TRIGGER_DEFAULT_POLL_INTERVAL=${AP_TRIGGER_DEFAULT_POLL_INTERVAL:-5}\n      - AP_WEBHOOK_TIMEOUT_SECONDS=${AP_WEBHOOK_TIMEOUT_SECONDS:-30}\n    depends_on:\n      postgres:\n        condition: service_healthy\n      redis:\n        condition: service_started\n    healthcheck:\n      test:\n        - CMD\n        - curl\n        - '-f'\n        - http://127.0.0.1:80\n      interval: 5s\n      timeout: 20s\n      retries: 10\n```\n\n----------------------------------------\n\nTITLE: Adding Coolify SSH Key to Authorized Keys\nDESCRIPTION: These commands add the generated Coolify SSH public key to the authorized_keys file and set appropriate permissions.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncat /data/coolify/ssh/keys/id.root@host.docker.internal.pub >> ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/authorized_keys\n```\n\n----------------------------------------\n\nTITLE: Limiting Docker Memory Usage on Raspberry Pi\nDESCRIPTION: Configuration to add to the Docker daemon settings to limit memory usage on a Raspberry Pi with 2GB RAM. This helps prevent system crashes caused by insufficient memory and slow SD card performance.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/troubleshoot/server/raspberry-crashes.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"memory\": \"1.8g\"\n}\n```\n\n----------------------------------------\n\nTITLE: Server Certificate Files Creation\nDESCRIPTION: Commands for creating and verifying certificate files on the server.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cloudflare/origin-cert.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ touch shadowarcanist.cert shadowarcanist.key\n```\n\n----------------------------------------\n\nTITLE: Mounting Coolify CA Certificate for Database SSL Connections\nDESCRIPTION: Command showing the recommended bind mount path for securely connecting containers to SSL-enabled databases. This mount provides read-only access to the Coolify CA certificate, which is needed for verify-ca and verify-full SSL modes.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/databases/ssl.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n/data/coolify/ssl/coolify-ca.crt:/etc/ssl/certs/coolify-ca.crt:ro\n```\n\n----------------------------------------\n\nTITLE: Running the PostgreSQL Restore Command\nDESCRIPTION: This command is used to restore backup data into the PostgreSQL database container of the Coolify instance. Users need to replace the backup file path with their specific file location on the server.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/how-to/backup-restore-coolify.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker exec -it coolify-db pg_restore --verbose --clean --no-acl --no-owner -U coolify -d coolify < /path/to/your_backup_file\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSH Server (Ubuntu/Debian/PopOS)\nDESCRIPTION: This snippet installs the OpenSSH server on Ubuntu, Debian, and PopOS using `apt`. It updates the package list, installs the `openssh-server` package, and enables/starts the `sshd` service.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/server/openssh.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"apt update && apt install -y openssh-server\nsystemctl enable --now sshd\"\n```\n\n----------------------------------------\n\nTITLE: Persisting WordPress Files in Docker Compose Configuration\nDESCRIPTION: Modifies the docker-compose.yml file to mount WordPress files on the host machine, allowing for easier file editing and persistence.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/how-to/wordpress-multisite.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - \"wordpress-files:/var/www/html\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - \"./wordpress:/var/www/html\"\n```\n\n----------------------------------------\n\nTITLE: Mounting Custom CA Certificate for Coolify Database SSL\nDESCRIPTION: Bind mount command for connecting containers to databases using a custom CA certificate. This ensures that applications can verify the database server's identity when using higher security SSL modes.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/databases/ssl.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n/data/coolify/ssl/coolify-ca.crt:/etc/ssl/certs/coolify-ca.crt:ro\n```\n\n----------------------------------------\n\nTITLE: MongoDB Backup Command in Bash\nDESCRIPTION: Command used by Coolify to create a compressed backup archive of MongoDB databases using mongodump utility with authentication.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/databases/backups.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmongodump --authenticationDatabase=admin --uri=<uri> --gzip --archive=<archive>\n```\n\n----------------------------------------\n\nTITLE: Configure www to non-www redirect for Standard Apps in Coolify with Traefik\nDESCRIPTION: This snippet configures a redirect from the `www` version of a domain to its non-`www` counterpart for standard applications in Coolify. It defines a router rule and associates it with a middleware to perform the redirection. The middleware uses a regular expression to extract the domain name and reconstruct the URL without the `www` prefix.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/redirects.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"# A similar line is already defined.\ntraefik.http.routers.<unique_router_name>.rule=Host(`www.coolify.io`) && PathPrefix(`/`)\n\n# You need to add the middleware to the router.\ntraefik.http.routers.<unique_router_name>.middlewares=example-middleware\n\n# If you have multiple middlewares, you need to add them comma separated.\n# traefik.http.routers.<unique_router_name>.middlewares=gzip,example-middleware\n#\ntraefik.http.middlewares.example-middleware.redirectregex.regex=^(http|https)://www\\.(.+)\ntraefik.http.middlewares.example-middleware.redirectregex.replacement=${1}://${2}\ntraefik.http.middlewares.example-middleware.redirectregex.permanent=true\"\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Key Pair for GitHub Deploy Keys\nDESCRIPTION: This command generates a new RSA key pair with 4096 bits that can be used as a deploy key for GitHub repositories. The public key is added to GitHub, while the private key is used in Coolify for authentication.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/git/github/integration.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t rsa -b 4096 -C \"deploy_key\"\n```\n\n----------------------------------------\n\nTITLE: MariaDB Backup Command in Bash\nDESCRIPTION: Command used by Coolify to create a backup of MariaDB databases using mariadb-dump utility.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/databases/backups.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmariadb-dump -u root -p <password> <datatabaseName>\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions for Coolify Files\nDESCRIPTION: These commands set the correct ownership and permissions for Coolify files and directories.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/installation.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nchown -R 9999:root /data/coolify\nchmod -R 700 /data/coolify\n```\n\n----------------------------------------\n\nTITLE: MongoDB Backup Command with Collection Exclusion in Bash\nDESCRIPTION: Extended MongoDB backup command that allows excluding specific collections from the backup using the --excludeCollection parameter.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/databases/backups.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmongodump --authenticationDatabase=admin --uri=<uri> --gzip --archive=<archive> --excludeCollection=<collectionName> --excludeCollection=<collectionName>\n```\n\n----------------------------------------\n\nTITLE: Running Coolify Database Migrations in Docker\nDESCRIPTION: Command to execute database migrations within the Coolify Docker container, ensuring the database schema is up-to-date with the latest changes.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/contribute/coolify.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it coolify php artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Enabling WordPress Multisite in wp-config.php\nDESCRIPTION: Adds a configuration line to the wp-config.php file to enable WordPress Multisite functionality.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/how-to/wordpress-multisite.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'WP_ALLOW_MULTISITE', true );\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network for Coolify\nDESCRIPTION: This command creates a Docker network named 'coolify' for use with the Coolify application.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/installation.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndocker network create --attachable coolify\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database Dump using Docker\nDESCRIPTION: This command connects to a PostgreSQL database running in a local Docker container, and creates a custom format dump of the 'postgres' database. The dump is written to a file named 'example-database.sql.gz'.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/databases/postgresql.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec pg-db pg_dump -U postgres -d postgres -Fc >example-database.sql.gz\n```\n\n----------------------------------------\n\nTITLE: Generating Password Hash for Basic Auth in Coolify\nDESCRIPTION: This bash command uses htpasswd to generate a password hash for Basic Authentication. The example creates a hash for the user 'test' with password 'test'.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/basic-auth.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhtpasswd -nbB test test\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker MTU for Hetzner servers\nDESCRIPTION: This snippet configures Docker to use a specific MTU setting suitable for Hetzner servers. It creates a configuration file that sets the MTU for overlay networks.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/docker/swarm.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /etc/docker\ncat <<EOF > /etc/docker/daemon.json\n{\n  \"default-network-opts\": {\n    \"overlay\": {\n      \"com.docker.network.driver.mtu\": \"1450\"\n    }\n  }\n}\nEOF\nsystemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: Traefik Labels Configuration\nDESCRIPTION: Labels configuration for Dockerfile-based deployments with Traefik.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cloudflare/origin-cert.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# Enable Traefik for this configuration\ntraefik.enable=true\n\n# Define the entry point for the router (HTTPS)\ntraefik.http.routers.shadowarcanist.entryPoints=https\n\n# Set the routing rule for this router to match the domain \"shadowarcanist.com\" and any path starting with \"/\"\ntraefik.http.routers.shadowarcanist.rule=Host(`shadowarcanist.com`) && PathPrefix(`/`)\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for AnythingLLM in YAML\nDESCRIPTION: This YAML file snippet outlines the Docker Compose configuration for the AnythingLLM service, including service image settings and environment variables. Dependencies include Docker and Docker Compose on a Linux-based OS. Key parameters involve environment variables like `STORAGE_DIR` and `SERVER_PORT`, which define storage settings and port mappings.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/anythingllm.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  anything-llm:\n    image: mintplexlabs/anythingllm\n    environment:\n      - SERVICE_FQDN_ANYTHINGLLM_3001\n      - STORAGE_DIR=/app/server/storage\n      - DISABLE_TELEMETRY=${DISABLE_TELEMETRY:-true}\n      - PASSWORDLOWERCASE=${PASSWORDLOWERCASE:-1}\n      - PASSWORDMAXCHAR=${PASSWORDMAXCHAR:-250}\n      - PASSWORDMINCHAR=${PASSWORDMINCHAR:-6}\n      - PASSWORDNUMERIC=${PASSWORDNUMERIC:-1}\n      - PASSWORDREQUIREMENTS=${PASSWORDREQUIREMENTS:-1}\n      - PASSWORDSYMBOL=${PASSWORDSYMBOL:-1}\n      - PASSWORDUPPERCASE=${PASSWORDUPPERCASE:-1}\n      - SIG_KEY=${SERVICE_PASSWORD_SIGKEY}\n      - SIG_SALT=${SERVICE_PASSWORD_SIGSALT}\n      - JWT_SECRET=${SERVICE_PASSWORD_JWTSECRET}\n      - AUTH_TOKEN=${SERVICE_PASSWORD_AUTHTOKEN}\n      - SERVER_PORT=${SERVER_PORT:-3001}\n    cap_add:\n      - SYS_ADMIN\n    volumes:\n      - anythingllm-storage:/app/server/storage\n      - anythingllm-hot:/app/collector/hotdir\n      - anythingllm-outputs:/app/collector/outputs\n    user: ${UID:-1000}:${GID:-1000}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Migration Start Command for Rails Deployment with NIXPACKS\nDESCRIPTION: This command configures the start-up process to migrate the database before starting the Rails server when using the NIXPACKS build pack. It runs database migrations and then starts the Rails server with the specified environment and port settings.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/applications/rails.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec rake db:migrate && bundle exec bin/rails server -b 0.0.0.0 -p ${PORT:-3000} -e $RAILS_ENV\n```\n\n----------------------------------------\n\nTITLE: Fixing Wordpress Redirection Loop with .htaccess\nDESCRIPTION: Configuration for the .htaccess file to fix redirection loops in Wordpress when hosted behind a proxy. This code sets the HTTPS environment variable based on X-Forwarded-Proto header.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/wordpress.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<IfModule mod_setenvif.c>\n  SetEnvIf X-Forwarded-Proto \"^https$\" HTTPS\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik to Use Custom SSL Certificates\nDESCRIPTION: This YAML configuration snippet shows how to set up Traefik to use custom SSL certificates. It specifies the paths to the certificate and key files within the Traefik container.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/custom-ssl-certs.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntls:\n  certificates:\n    - certFile: /traefik/certs/domain.cert\n      keyFile: /traefik/certs/domain.key\n    - certFile: /traefik/certs/domain2.cert\n      keyFile: /traefik/certs/domain2.key\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key Pair for Gitea Deploy Keys in Bash\nDESCRIPTION: This command generates a new RSA key pair with 4096 bits, specifically for use as a deploy key in Gitea repositories. The key is labeled with the comment 'deploy_key'.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/git/gitea/integration.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t rsa -b 4096 -C \"deploy_key\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Certificates Configuration\nDESCRIPTION: Extended YAML configuration for multiple TLS certificates in Traefik.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cloudflare/origin-cert.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ntls:\n  certificates:\n    -\n      certFile: /traefik/certs/shadowarcanist.cert\n      keyFile: /traefik/certs/shadowarcanist.key\n    -\n      certFile: /traefik/certs/name2.cert\n      keyFile: /traefik/certs/name2.key\n    -\n      certFile: /traefik/certs/name3.cert\n      keyFile: /traefik/certs/name3.key\n```\n\n----------------------------------------\n\nTITLE: Configuring Appwrite Console service with Docker Compose\nDESCRIPTION: This snippet configures the Appwrite Console service using Docker Compose. It defines the image, container name, and environment variables needed for the Appwrite Console, which provides a user interface for managing the Appwrite backend.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/appwrite.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"appwrite-console:\\n  image: appwrite/console:5.0.12\\n  container_name: appwrite-console\\n  environment:\\n    - SERVICE_FQDN_APPWRITE=/console\"\n```\n\n----------------------------------------\n\nTITLE: Configure www to non-www redirect for Docker Compose/One-click Apps\nDESCRIPTION: This snippet sets up a redirect from the `www` version of a domain to the non-`www` version for Docker Compose based applications and one-click services within Coolify. It defines a Traefik middleware that uses a regular expression to capture the domain name and then reconstructs the URL, removing the `www` prefix.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/redirects.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"traefik.http.middlewares.example-middleware.redirectregex.regex=^(http|https)://www\\.(.+)\ntraefik.http.middlewares.example-middleware.redirectregex.replacement=${1}://${2}\ntraefik.http.middlewares.example-middleware.redirectregex.permanent=true\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Jekyll Applications Using a Two-Stage Dockerfile for Ruby and Nginx\nDESCRIPTION: This Dockerfile creates a two-stage build process for Jekyll applications. The first stage uses a Ruby image to build the static site, and the second stage uses Nginx to serve the built site. It handles dependency installation via Bundler and exposes port 80 for web traffic.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/applications/jekyll.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM ruby:3.1.1 AS builder\nRUN apt-get update -qq && apt-get install -y build-essential nodejs\nWORKDIR /srv/jekyll\nCOPY Gemfile Gemfile.lock ./\nRUN bundle install\nCOPY . .\nRUN chown 1000:1000 -R /srv/jekyll\nRUN bundle exec jekyll build -d /srv/jekyll/_site\n\nFROM nginx:alpine\nCOPY --from=builder /srv/jekyll/_site /usr/share/nginx/html\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Mapping in Docker\nDESCRIPTION: Demonstrates how to map container ports to host ports using Docker's port mapping feature. This example shows mapping container port 80 to host port 8080.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/databases/index.md#2025-04-21_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\n8080:80\n```\n\n----------------------------------------\n\nTITLE: Multiple TLS Certificates Configuration\nDESCRIPTION: Extended YAML configuration showing how to configure multiple TLS certificates in Traefik\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cloudflare/tunnels/full-tls.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntls:\n  certificates:\n    -\n      certFile: /traefik/certs/shadowarcanist.cert\n      keyFile: /traefik/certs/shadowarcanist.key\n    -\n      certFile: /traefik/certs/name2.cert\n      keyFile: /traefik/certs/name2.key\n    -\n      certFile: /traefik/certs/name3.cert\n      keyFile: /traefik/certs/name3.key\n```\n\n----------------------------------------\n\nTITLE: Configuring Appwrite Worker (Audits) service with Docker Compose\nDESCRIPTION: This snippet configures the Appwrite worker-audits service with Docker Compose. It sets up the image, entrypoint, container name, dependencies, and environment variables for the audit worker, which handles background audit processing in Appwrite.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/appwrite.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"appwrite-worker-audits:\\n  image: appwrite/appwrite:1.6.0\\n  entrypoint: worker-audits\\n  container_name: appwrite-worker-audits\\n  depends_on:\\n    - appwrite-redis\\n    - appwrite-mariadb\\n  environment:\\n    - _APP_ENV=${_APP_ENV:-production}\\n    - _APP_WORKER_PER_CORE=${_APP_WORKER_PER_CORE:-6}\\n    - _APP_OPENSSL_KEY_V1=$SERVICE_PASSWORD_64_APPWRITE\\n    - _APP_REDIS_HOST=${_APP_REDIS_HOST:-appwrite-redis}\\n    - _APP_REDIS_PORT=${_APP_REDIS_PORT:-6379}\\n    - _APP_REDIS_USER=${_APP_REDIS_USER}\\n    - _APP_REDIS_PASS=${_APP_REDIS_PASS}\\n    - _APP_DB_HOST=${_APP_DB_HOST:-appwrite-mariadb}\\n    - _APP_DB_PORT=${_APP_DB_PORT:-3306}\\n    - _APP_DB_SCHEMA=${_APP_DB_SCHEMA:-appwrite}\\n    - _APP_DB_USER=$SERVICE_USER_MARIADB\\n    - _APP_DB_PASS=$SERVICE_PASSWORD_MARIADB\\n    - _APP_LOGGING_CONFIG=${_APP_LOGGING_CONFIG}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Auth Middleware for Standard Applications in Coolify\nDESCRIPTION: This snippet shows how to add Basic Authentication middleware to Standard Applications in Coolify using Traefik labels. It includes the basic configuration and notes on appending to existing middleware.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/basic-auth.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntraefik.http.middlewares.<random_unique_name>.basicauth.users=test:$2y$12$ci.4U63YX83CwkyUrjqxAucnmi2xXOIlEF6T/KdP9824f1Rf1iyNG\ntraefik.http.routers.<unique_router_name>.middlewares=<random_unique_name>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Docker Options in Coolify\nDESCRIPTION: Demonstrates how to add custom Docker command options to a container deployment configuration in the Coolify platform. Users can specify additional runtime parameters via the 'Custom Docker Options' field.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/docker/custom-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n--cap-add SYS_ADMIN --privileged\n```\n\n----------------------------------------\n\nTITLE: Setting Up Traefik Configuration for Wildcard SSL Certificates - Bash\nDESCRIPTION: This Bash snippet configures a Traefik container to handle wildcard SSL certificates. It initializes the Traefik system, specifying the essential environment variables, ports, volumes, and health checks needed for the proper functioning of the proxy service.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/wildcard-certs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nversion: '3.8'\nnetworks:\n  coolify:\n    external: true\nservices:\n  traefik:\n    container_name: coolify-proxy\n    image: 'traefik:v2.10'\n    restart: unless-stopped\n    environment:\n      - HETZNER_API_KEY=<API Key>\n    extra_hosts:\n      - 'host.docker.internal:host-gateway'\n    networks:\n      - coolify\n    ports:\n      - '80:80'\n      - '443:443'\n      - '8080:8080'\n    healthcheck:\n      test: 'wget -qO- http://localhost:80/ping || exit 1'\n      interval: 4s\n      timeout: 2s\n      retries: 5\n    volumes:\n      - '/var/run/docker.sock:/var/run/docker.sock:ro'\n      - '/data/coolify/proxy:/traefik'\n    command:\n      - '--ping=true'\n      - '--ping.entrypoint=http'\n      - '--api.dashboard=true'\n      - '--api.insecure=false'\n      - '--entrypoints.http.address=:80'\n      - '--entrypoints.https.address=:443'\n      - '--entrypoints.http.http.encodequerysemicolons=true'\n      - '--entrypoints.https.http.encodequerysemicolons=true'\n      - '--providers.docker.exposedbydefault=false'\n      - '--providers.file.directory=/traefik/dynamic/'\n      - '--providers.file.watch=true'\n      - '--certificatesresolvers.letsencrypt.acme.httpchallenge=true'\n      - '--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=http'\n      - '--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=hetzner'\n      - '--certificatesresolvers.letsencrypt.acme.dnschallenge.delaybeforecheck=0'\n      - '--certificatesresolvers.letsencrypt.acme.storage=/traefik/acme.json'\n      - '--providers.docker=true'\n    labels:\n      - traefik.enable=true\n      - traefik.http.routers.traefik.entrypoints=http\n      - traefik.http.routers.traefik.middlewares=traefik-basic-auth@file\n      - traefik.http.routers.traefik.service=api@internal\n      - traefik.http.routers.traefik.tls.certresolver=letsencrypt\n      - traefik.http.routers.traefik.tls.domains[0].main=coolify.io\n      - traefik.http.routers.traefik.tls.domains[0].sans=*.coolify.io\n      - traefik.http.services.traefik.loadbalancer.server.port=8080\n      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https\n      - traefik.http.middlewares.gzip.compress=true\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit for Node.js Server with adapter-node\nDESCRIPTION: Steps to configure a SvelteKit project for a Node.js server-based application using @sveltejs/adapter-node. This includes setting the site to non-static and specifying the start command.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/applications/svelte-kit.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Set your site to static to `off` (under `Build Pack` section).\n2. Set your `Start Command` to `node build`.\n```\n\n----------------------------------------\n\nTITLE: File Creation with Dynamic Content\nDESCRIPTION: Shows how to create files with predefined content and dynamic values from environment variables in Docker Compose.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/docker/compose.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  filebrowser:\n    image: filebrowser/filebrowser:latest\n    environment:\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - type: bind\n        source: ./srv/99-roles.sql\n        target: /docker-entrypoint-initdb.d/init-scripts/99-roles.sql\n        content: |\n          -- NOTE: change to your own passwords for production environments\n           \\set pgpass `echo \"$POSTGRES_PASSWORD\"`\n\n           ALTER USER authenticator WITH PASSWORD :'pgpass';\n           ALTER USER pgbouncer WITH PASSWORD :'pgpass';\n```\n\n----------------------------------------\n\nTITLE: MariaDB and Redis Service Configuration\nDESCRIPTION: Database and cache service configurations for Appwrite including volume mounts, environment variables, and performance optimization settings.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/appwrite.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nappwrite-mariadb:\n  image: mariadb:10.11\n  container_name: appwrite-mariadb\n  volumes:\n    - appwrite-mariadb:/var/lib/mysql:rw\n  environment:\n    - MYSQL_ROOT_PASSWORD=$SERVICE_PASSWORD_MARIADBROOT\n    - MYSQL_DATABASE=${_APP_DB_SCHEMA:-appwrite}\n    - MYSQL_USER=$SERVICE_USER_MARIADB\n    - MYSQL_PASSWORD=$SERVICE_PASSWORD_MARIADB\n    - MARIADB_AUTO_UPGRADE=1\n  command: mysqld --innodb-flush-method=fsync\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose Configuration for Coolify Service (YAML)\nDESCRIPTION: This example demonstrates how to create a docker-compose configuration for a Coolify service. It includes the use of Coolify's environment variable magic for database URL and volume mounting.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/contribute/service.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  app:\n    image: your-service-image:tag\n    environment:\n      - DATABASE_URL=${COOLIFY_DATABASE_URL}\n    volumes:\n      - ${COOLIFY_VOLUME_APP}:/data\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Auth Entry to Coolify Caddyfile\nDESCRIPTION: Illustrates how to add the basic auth entry to the Caddyfile of an application in Coolify. This configuration enables basic authentication for the specified application.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/caddy/basic-auth.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncaddy_0.basicauth.<username>=\"<hashed_password>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DragonFly Data Persistence with Docker Compose\nDESCRIPTION: This snippet demonstrates how to configure DragonFly to enable data persistence using snapshots. It sets a password, specifies the data directory, configures the snapshot filename format, and establishes a cron schedule for automatic snapshots every 5 minutes.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/databases/dragonfly.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dragonfly:\n    command: 'dragonfly --requirepass XXXXXXXX --dir /data --dbfilename dragonfly-snapshot-{timestamp} --snapshot_cron \"*/5 * * * *\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit for Static Build with adapter-static\nDESCRIPTION: Steps to configure a SvelteKit project for a static build using @sveltejs/adapter-static. This includes setting the site to static and specifying the publish directory.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/applications/svelte-kit.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Set your site to static `on` (under `Build Pack` section).\n2. Set your `Publish Directory` to `/build`\n```\n\n----------------------------------------\n\nTITLE: Installing Coolify with Custom Registry - Automated Method\nDESCRIPTION: Execute the automated installation script with docker.io registry configuration. This command downloads and runs the installation script while setting the REGISTRY_URL environment variable.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/custom-docker-registry.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv REGISTRY_URL=docker.io bash -c 'curl -fsSL https://cdn.coollabs.io/coolify/install.sh | bash'\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Service in Docker Compose\nDESCRIPTION: This snippet defines the PostgreSQL service configuration for Docker Compose, including necessary environment variables and health check settings to ensure the database is ready for connections.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/activepieces.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npostgres:\n  image: postgres:latest\n  environment:\n    - POSTGRES_DB=${POSTGRES_DB:-activepieces}\n    - POSTGRES_PASSWORD=${SERVICE_PASSWORD_POSTGRES}\n    - POSTGRES_USER=${SERVICE_USER_POSTGRES}\n    - POSTGRES_PORT=${POSTGRES_PORT:-5432}\n  volumes:\n    - pg-data:/var/lib/postgresql/data\n  healthcheck:\n    test:\n      - CMD-SHELL\n      - pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}\n    interval: 5s\n    timeout: 20s\n    retries: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Forward Authentication with Authentik Middleware using YAML\nDESCRIPTION: This YAML snippet configures Traefik middleware to use Authentik for forward authentication. It requires replacing `AUTHENTIK_SERVER_HOST` with the actual instance name. The middleware configuration includes trusted forward headers and specifies various authentication response headers needed for integration. Ensure the Authentik service is deployed prior to applying this configuration.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/protect-services-with-authentik.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\\n  middlewares:\\n    authentik-auth:\\n      forwardAuth:\\n        address: 'http://AUTHENTIK_SERVER_HOST:9000/outpost.goauthentik.io/auth/traefik'\\n        trustForwardHeader: true\\n        authResponseHeaders:\\n          - X-authentik-username\\n          - X-authentik-groups\\n          - X-authentik-entitlements\\n          - X-authentik-email\\n          - X-authentik-name\\n          - X-authentik-uid\\n          - X-authentik-jwt\\n          - X-authentik-meta-jwks\\n          - X-authentik-meta-outpost\\n          - X-authentik-meta-provider\\n          - X-authentik-meta-app\\n          - X-authentik-meta-version\n```\n\n----------------------------------------\n\nTITLE: Traefik TLS Certificate Configuration\nDESCRIPTION: YAML configuration for adding TLS certificates to Traefik proxy in Coolify\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cloudflare/tunnels/full-tls.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntls:\n  certificates:\n    -\n      certFile: /traefik/certs/shadowarcanist.cert\n      keyFile: /traefik/certs/shadowarcanist.key\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Docker Compose\nDESCRIPTION: Shows how to define environment variables in Docker Compose that will be recognized and managed by Coolify's UI. Demonstrates hardcoded values, variables for UI editing, and default values.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/docker/compose.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myservice:\n    environment:\n      - SOME_HARDCODED_VALUE=hello\n      - SOME_VARIABLE=${SOME_VARIABLE_IN_COOLIFY_UI}\n      - SOME_DEFAULT_VARIABLE=${OTHER_NAME_IN_COOLIFY:-hello}\n```\n\n----------------------------------------\n\nTITLE: Editing the .env File to Add APP_PREVIOUS_KEYS\nDESCRIPTION: This snippet indicates how to navigate to the directory containing environment files and edit the .env file to add a new environment variable for the previous APP_KEY required for restoration.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/how-to/backup-restore-coolify.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd /data/coolify/source\nnano .env\n```\n\n----------------------------------------\n\nTITLE: Restarting Coolify to Apply Cloudflare Tunnel Configuration\nDESCRIPTION: A command to restart the Coolify application after making changes to the environment variables. This is necessary to apply the Cloudflare Tunnel integration settings and ensure the realtime server communicates properly through the tunnel.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cloudflare/tunnels/single-resource.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://cdn.coollabs.io/coolify/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Service in Docker Compose\nDESCRIPTION: This snippet provides the configuration for the Redis service within a Docker Compose file, detailing its image, volumes for data persistence, and health check command verification.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/activepieces.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nredis:\n  image: redis:latest\n  volumes:\n    - redis_data:/data\n  healthcheck:\n    test:\n      - CMD\n      - redis-cli\n      - ping\n    interval: 5s\n    timeout: 20s\n    retries: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress OpenAPI with Bruno Support\nDESCRIPTION: This script sets up VitePress OpenAPI integration with custom support for Bruno HTTP request format. It includes configuration for code samples, language options, and a custom generator function for Bruno requests.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/api-reference/api/operations/[operation].md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useData } from 'vitepress'\nimport { useTheme, generateCodeSample } from 'vitepress-openapi/client'\n\nconst { params } = useData()\nconst operation = params.value.operation\n\nconst themeConfig = {\n    codeSamples: {\n        langs: [\n            'bruno',\n            ...useTheme().getCodeSamplesLangs(),\n        ],\n        availableLanguages: [\n            {\n                lang: 'bruno',\n                label: 'Bruno',\n                highlighter: 'plaintext',\n                icon: 'bruno',\n            },\n            ...useTheme().getCodeSamplesAvailableLanguages(),\n        ],\n        defaultLang: 'bruno',\n        generator: async (lang, request) => {\n            if (lang === 'bruno') {\n                return generateBrunoRequest(request) || ''\n            }\n            return generateCodeSample(lang, request) || ''\n        },\n    }\n}\n\nfunction generateBrunoRequest(request) {\n    if (!request) return ''\n    const { method, url, headers, body } = request\n    let brunoScript = `${method} ${url}\\n`\n    \n    if (headers && Object.keys(headers).length) {\n        brunoScript += '\\nHeaders\\n'\n        for (const [key, value] of Object.entries(headers)) {\n            brunoScript += `${key}: ${value}\\n`\n        }\n    }\n\n    if (body) {\n        brunoScript += '\\nBody\\n'\n        brunoScript += typeof body === 'string' ? body : JSON.stringify(body, null, 2)\n    }\n\n    return brunoScript\n}\n\nuseTheme(themeConfig)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Generating htpasswd user for Docker Registry\nDESCRIPTION: This bash command generates a username and password pair for use with the Docker Registry. The `-nbB` options specify non-interactive mode, bcrypt hashing, and output to stdout, respectively. The username is 'test' and the password is 'test'.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/docker/registry.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"htpasswd -nbB test test\"\n```\n\n----------------------------------------\n\nTITLE: Generating Runner Secret - Bash Command\nDESCRIPTION: Command to generate a random 40-character hexadecimal string for the Forgejo runner shared secret configuration.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/forgejo.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -hex 20\n```\n\n----------------------------------------\n\nTITLE: Upgrading Coolify to Specific Version in Shell\nDESCRIPTION: This command allows manual upgrade of Coolify to a specific version. It uses curl to fetch the installation script and passes a version number as an argument. Replace '4.0.0-beta.400' with the desired version number.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/upgrade.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -fsSL https://cdn.coollabs.io/coolify/install.sh | bash -s 4.0.0-beta.400\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Proxy Settings in Symfony\nDESCRIPTION: YAML configuration for setting up trusted proxies in Symfony's framework configuration, including trusted headers specification.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/applications/symfony.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\n\nframework:\n    trusted_proxies: \"%env(TRUSTED_PROXIES)%\"\n    trusted_headers: ['x-forwarded-for', 'x-forwarded-host', 'x-forwarded-proto', 'x-forwarded-port', 'x-forwarded-prefix']\n```\n\n----------------------------------------\n\nTITLE: Configure non-www to www redirect for Standard Apps in Coolify with Traefik\nDESCRIPTION: This snippet configures a redirect from the non-`www` version of a domain to its `www` counterpart for standard applications. It sets up a router rule and links it to a middleware responsible for the redirection. The middleware uses a regular expression to capture the domain name and reconstruct the URL with the `www` prefix.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/redirects.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"# A similar line is already defined.\ntraefik.http.routers.<unique_router_name>.rule=Host(`coolify.io`) && PathPrefix(`/`)\n\n# You need to add the middleware to the router.\ntraefik.http.routers.<unique_router_name>.middlewares=example-middleware\n\n# If you have multiple middlewares, you need to add them comma separated.\n# traefik.http.routers.<unique_router_name>.middlewares=gzip,example-middleware\n#\ntraefik.http.middlewares.example-middleware.redirectregex.regex=^(http|https)://(?:www\\.)?(.+)\ntraefik.http.middlewares.example-middleware.redirectregex.replacement=${1}://www.${2}\ntraefik.http.middlewares.example-middleware.redirectregex.permanent=true\"\n```\n\n----------------------------------------\n\nTITLE: Triggering Deployment via Coolify Webhook Bash Command\nDESCRIPTION: This snippet demonstrates how to trigger a deployment in Coolify by sending a GET request to a webhook endpoint. It utilizes GitHub repository secrets for authentication. Key parameters include the COOLIFY_WEBHOOK endpoint and COOLIFY_TOKEN for authorization. No additional dependencies required for execution.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/git/github/github-actions.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \"${% raw %}{{ secrets.COOLIFY_WEBHOOK }}{% endraw %}\" --header \"Authorization: Bearer ${% raw %}{{ secrets.COOLIFY_TOKEN }}{% endraw %}\"\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSH Server (Arch Linux)\nDESCRIPTION: This snippet installs the OpenSSH server on Arch Linux using `pacman`. It synchronizes the package database, installs the `openssh` package, and enables/starts the `sshd` service.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/server/openssh.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"pacman -Sy --noconfirm openssh\nsystemctl enable --now sshd\"\n```\n\n----------------------------------------\n\nTITLE: Installing Docker using Rancher script\nDESCRIPTION: This snippet shows how to install Docker on servers using a script provided by Rancher. The command fetches and executes the Docker installation script for version 24.0.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/docker/swarm.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://releases.rancher.com/install-docker/24.0.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Updating Webstudio Site with CLI Commands\nDESCRIPTION: Terminal commands for syncing and building Webstudio projects using Docker template for deployment through Coolify.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/integrations/webstudio.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwebstudio sync\nwebstudio build --template docker\n```\n\n----------------------------------------\n\nTITLE: Customizing PHP-FPM Configuration\nDESCRIPTION: PHP-FPM configuration with process manager settings and PHP admin values for memory, execution time, and post size limits.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/applications/symfony.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n\"php-fpm.conf\" = '''\n[www]\nlisten = 127.0.0.1:9000\nuser = www-data\ngroup = www-data\nlisten.owner = www-data\nlisten.group = www-data\npm = dynamic\npm.max_children = 50\npm.min_spare_servers = 4\npm.max_spare_servers = 32\npm.start_servers = 18\nclear_env = no\n\nphp_admin_value[memory_limit] = 512M\nphp_admin_value[max_execution_time] = 60\nphp_admin_value[max_input_time] = 60\nphp_admin_value[post_max_size] = 256M\n'''\n```\n\n----------------------------------------\n\nTITLE: Generating Hashed Password for Traefik Dashboard Authentication\nDESCRIPTION: This bash command uses htpasswd to generate a hashed password for use in Traefik's basic authentication configuration. It creates a username:password pair that can be directly used in the YAML configuration.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/dashboard.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhtpasswd -nbB test test\n```\n\n----------------------------------------\n\nTITLE: Storage Configuration with Empty Directory\nDESCRIPTION: Demonstrates how to predefine storage with host binding and create empty directories in Docker Compose using Coolify's extended syntax.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/docker/compose.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  filebrowser:\n    image: filebrowser/filebrowser:latest\n    volumes:\n      - type: bind\n        source: ./srv\n        target: /srv\n        is_directory: true\n```\n\n----------------------------------------\n\nTITLE: Setting NPM_TOKEN Environment Variable in Coolify\nDESCRIPTION: This snippet demonstrates how to add the NPM_TOKEN as a build environment variable in Coolify. The token is used for authentication with the private NPM registry.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/how-to/private-npm-registry.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNPM_TOKEN=your_npm_token\n```\n\n----------------------------------------\n\nTITLE: Restoring ClickHouse Table from S3\nDESCRIPTION: SQL command to restore a specific table from an S3 backup. Requires S3 endpoint, access key, and secret key.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/databases/clickhouse.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nRESTORE TABLE <table_name> FROM S3('<your_s3_endpoint_com>/<unique_folder_from_table_backup>', '<s3_access_key>', '<s3_secret_key>')\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker and Spin Installation in Bash\nDESCRIPTION: Commands to check the installed versions of Docker and Spin, ensuring proper setup of the development environment.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/contribute/coolify.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker --version\nspin --version\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key for Deployment\nDESCRIPTION: This Bash snippet generates an SSH key pair for use as a deployment key, which is a prerequisite for accessing private GitLab repositories from Coolify. Required dependencies include having SSH installed. The key generation command creates a 4096-bit RSA key with a custom comment.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/git/gitlab/integration.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t rsa -b 4096 -C \"deploy_key\"\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS (HTTPS) for a Traefik Router\nDESCRIPTION: This snippet demonstrates enabling TLS (HTTPS) for the 'shadowarcanist' router. This configuration ensures that traffic to this router is encrypted.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cloudflare/origin-cert.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.routers.shadowarcanist.tls=true\"\n```\n\n----------------------------------------\n\nTITLE: Normal Configuration for Wildcard Certificate - Bash\nDESCRIPTION: This Bash snippet shows how to configure Traefik for using a wildcard certificate for applications under a specific subdomain. It sets up the routers, entry points, and services for handling traffic to the subdomain.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/wildcard-certs.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntraefik.enable=true\ntraefik.http.routers.<unique_router_name_https>.rule=Host(`example.coolify.io`) && PathPrefix(`/`)\ntraefik.http.routers.<unique_router_name_https>.entryPoints=https\ntraefik.http.routers.<unique_router_name_https>.middlewares=gzip\ntraefik.http.routers.<unique_router_name_https>.service=<unique_service_name>\ntraefik.http.routers.<unique_router_name_https>.tls=true\ntraefik.http.services.<unique_service_name>.loadbalancer.server.port=80\ntraefik.http.routers.<unique_router_name_https>.tls.certresolver=letsencrypt\n\ntraefik.http.routers.<unique_router_name_http>.rule=Host(`example.coolify.io`) && PathPrefix(`/`)\ntraefik.http.routers.<unique_router_name_http>.entryPoints=http\ntraefik.http.routers.<unique_router_name_http>.middlewares=redirect-to-https\n```\n\n----------------------------------------\n\nTITLE: Configuring Database and Redis Environment Variables in Symfony\nDESCRIPTION: Environment variable configuration for database and Redis connections in Symfony applications. Includes PostgreSQL connection string and Redis connection parameters.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/applications/symfony.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=postgresql://app:!ChangeMe!@127.0.0.1:5432/app?serverVersion=16&charset=utf8\n\nREDIS_HOST=<REDIS_HOST>\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n```\n\n----------------------------------------\n\nTITLE: Configuring Appwrite Worker (Webhooks) service with Docker Compose\nDESCRIPTION: This snippet configures the Appwrite worker-webhooks service with Docker Compose. It sets up the image, entrypoint, container name, dependencies, and environment variables for the webhook worker, which handles background webhook processing in Appwrite.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/appwrite.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"appwrite-worker-webhooks:\\n  image: appwrite/appwrite:1.6.0\\n  entrypoint: worker-webhooks\\n  container_name: appwrite-worker-webhooks\\n  depends_on:\\n    - appwrite-redis\\n    - appwrite-mariadb\\n  environment:\\n    - _APP_ENV=${_APP_ENV:-production}\\n    - _APP_WORKER_PER_CORE=${_APP_WORKER_PER_CORE:-6}\\n    - _APP_OPENSSL_KEY_V1=$SERVICE_PASSWORD_64_APPWRITE\\n    - _APP_EMAIL_SECURITY=${_APP_EMAIL_SECURITY:-certs@appwrite.io}\\n    - >-\\n      _APP_SYSTEM_SECURITY_EMAIL_ADDRESS=${_APP_SYSTEM_SECURITY_EMAIL_ADDRESS}\"\n```\n\n----------------------------------------\n\nTITLE: SSH Server Login\nDESCRIPTION: Command to SSH into the server hosting Coolify.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cloudflare/origin-cert.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nssh shadowarcanist@203.0.113.1\n```\n\n----------------------------------------\n\nTITLE: Copying SSL Certificate Files to Coolify Server Using SCP\nDESCRIPTION: This snippet demonstrates how to use the scp command to copy SSL certificate files to the Coolify server. The files should be placed in the /data/coolify/proxy/certs directory.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/custom-ssl-certs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nscp /path/to/your/domain.cert root@your-server-ip:/data/coolify/proxy/certs/domain.cert\nscp /path/to/your/domain.key root@your-server-ip:/data/coolify/proxy/certs/domain.key\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Auth Credential in Caddy\nDESCRIPTION: Demonstrates the format for setting up a basic auth credential in Caddy. The username and hashed password are specified in the configuration.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/caddy/basic-auth.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncaddy_0.basicauth.<username>=\"<hashed_password>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Coolify Directories in Bash\nDESCRIPTION: These commands create the necessary directory structure for a manual Coolify installation.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p /data/coolify/{source,ssh,applications,databases,backups,services,proxy,webhooks-during-maintenance}\nmkdir -p /data/coolify/ssh/{keys,mux}\nmkdir -p /data/coolify/proxy/dynamic\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Container Status in Coolify\nDESCRIPTION: Command to verify the status of all Docker containers, displaying their names and current status in a table format. This helps identify if Coolify containers are running and healthy.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/troubleshoot/dashboard/dashboard-inaccessible.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps --format \"table {{.Names}}\\t{{.Status}}\"\n```\n\n----------------------------------------\n\nTITLE: Editing SSH Configuration\nDESCRIPTION: This snippet shows how to open the SSH configuration file using `nano` editor. This is a prerequisite to configure SSH settings for Coolify. This allows modification of the sshd_config file.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/server/openssh.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"nano /etc/ssh/sshd_config\"\n```\n\n----------------------------------------\n\nTITLE: Time Synchronization Commands\nDESCRIPTION: Commands to synchronize server time using either systemd or ntpdate.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/troubleshoot/server/two-factor-stopped-working.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo timedatectl set-ntp true\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo ntpdate ntp.ubuntu.com\n```\n\n----------------------------------------\n\nTITLE: MySQL Backup Command in Bash\nDESCRIPTION: Command used by Coolify to create a backup of MySQL databases using mysqldump utility.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/databases/backups.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmysqldump -u root -p <password> <datatabaseName>\n```\n\n----------------------------------------\n\nTITLE: Defining AWS S3 Bucket Policy in JSON\nDESCRIPTION: This JSON snippet outlines the permissions required for an AWS S3 bucket, allowing operations like listing, getting, deleting, accessing ACLs, and putting objects. Ensure to replace 'your-bucket-name' with the actual name of your S3 bucket. This policy is essential for creating IAM roles with the necessary permissions.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/s3/aws.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:ListBucket\",\n        \"s3:GetObject\",\n        \"s3:DeleteObject\",\n        \"s3:GetObjectAcl\",\n        \"s3:PutObjectAcl\",\n        \"s3:PutObject\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::your-bucket-name\",\n        \"arn:aws:s3:::your-bucket-name/*\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sudo Permissions in Bash\nDESCRIPTION: This snippet allows a non-root user to execute all root commands without a password by modifying the /etc/sudoers file. The necessary dependency is the /etc/sudoers file access, and the key parameter is 'your-non-root-user', which should be replaced with the actual user name. This setup currently has security limitations due to broad permissions.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/server/non-root-user.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Allow the your-non-root-user to run commands as root without a password\nyour-non-root-user ALL=(ALL) NOPASSWD: ALL\n```\n\n----------------------------------------\n\nTITLE: SSH Configuration Settings\nDESCRIPTION: This snippet shows the required settings for the SSH configuration file (`sshd_config`). `PermitRootLogin` can be set to `yes`, `without-password`, or `prohibit-password`. `PubkeyAuthentication` must be set to `yes` for SSH key-based authentication.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/server/openssh.md#2025-04-21_snippet_1\n\nLANGUAGE: ssh\nCODE:\n```\n\"PermitRootLogin prohibit-password\nPubkeyAuthentication yes\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub App Webhook URL for Coolify\nDESCRIPTION: Sets the Webhook URL for the GitHub App to integrate with Coolify. The URL includes a placeholder for the source UUID, which should be replaced with the actual UUID created in Coolify.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/git/github/manually-setup-github-app.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://app.coolify.io/webhooks/source/github/install?source=<source_uuid>\n```\n\n----------------------------------------\n\nTITLE: Changing Ownership of the /data/coolify Directory\nDESCRIPTION: This command addresses permission issues by changing the ownership of the Coolify data directory to the root user, ensuring that the instance can access necessary files correctly.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/how-to/backup-restore-coolify.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo chown -R root:root /data/coolify\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Restore Command in Bash\nDESCRIPTION: Command to restore a PostgreSQL database from a backup created by Coolify. This uses the pg_restore utility to handle the custom format backup file.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/databases/backups.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npg_restore --verbose --clean -h localhost -U postgres -d postgres pg-dump-postgres-1697207547.dmp\n```\n\n----------------------------------------\n\nTITLE: Configuring .npmrc for Private NPM Registry in Coolify\nDESCRIPTION: This code snippet shows the content to be added to the .npmrc file in the project root. It sets up authentication for the private NPM registry using an environment variable.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/how-to/private-npm-registry.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n//registry.npmjs.org/:_authToken=${NPM_TOKEN}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Docker Network Environment Variables\nDESCRIPTION: These environment variables define the custom Docker network settings for Coolify, including the address pool base, size, and force override option.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/define-custom-docker-network-with-env.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDOCKER_ADDRESS_POOL_BASE=10.0.0.0/8\nDOCKER_ADDRESS_POOL_SIZE=10\nDOCKER_POOL_FORCE_OVERRIDE=false\n```\n\n----------------------------------------\n\nTITLE: Editing Coolify Environment Variables File\nDESCRIPTION: This command opens the Coolify environment variables file for editing using the nano text editor.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/define-custom-docker-network-with-env.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnano /data/coolify/source/.env\n```\n\n----------------------------------------\n\nTITLE: Container Labels for Nginx Simple Web Container in Coolify\nDESCRIPTION: These Traefik labels are generated by Coolify for an Nginx simple web container. They define routing rules, middleware, and TLS configuration for both HTTP and HTTPS traffic.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/basic-auth.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntraefik.enable=true\ntraefik.http.middlewares.gzip.compress=true\ntraefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https\ntraefik.http.routers.http-0-wc04wo4ow4scokgsw8wow4s8.entryPoints=http\ntraefik.http.routers.http-0-wc04wo4ow4scokgsw8wow4s8.middlewares=redirect-to-https\ntraefik.http.routers.http-0-wc04wo4ow4scokgsw8wow4s8.rule=Host(`ngnixsite.mysite.com`) && PathPrefix(`/`)\ntraefik.http.routers.http-0-wc04wo4ow4scokgsw8wow4s8.service=http-0-wc04wo4ow4scokgsw8wow4s8\ntraefik.http.routers.https-0-wc04wo4ow4scokgsw8wow4s8.entryPoints=https\ntraefik.http.routers.https-0-wc04wo4ow4scokgsw8wow4s8.middlewares=gzip\ntraefik.http.routers.https-0-wc04wo4ow4scokgsw8wow4s8.rule=Host(`ngnixsite.mysite.com`) && PathPrefix(`/`)\ntraefik.http.routers.https-0-wc04wo4ow4scokgsw8wow4s8.service=https-0-wc04wo4ow4scokgsw8wow4s8\ntraefik.http.routers.https-0-wc04wo4ow4scokgsw8wow4s8.tls.certresolver=letsencrypt\ntraefik.http.routers.https-0-wc04wo4ow4scokgsw8wow4s8.tls=true\ntraefik.http.services.http-0-wc04wo4ow4scokgsw8wow4s8.loadbalancer.server.port=80\ntraefik.http.services.https-0-wc04wo4ow4scokgsw8wow4s8.loadbalancer.server.port=80\ncaddy_0.encode=zstd gzip\ncaddy_0.handle_path.0_reverse_proxy={{upstreams 80}}\ncaddy_0.handle_path=/*\ncaddy_0.header=-Server\ncaddy_0.try_files={path} /index.html /index.php\ncaddy_0=https://ngnixsite.73rdst.com\ncaddy_ingress_network=coolify\n```\n\n----------------------------------------\n\nTITLE: Deleting Coolify Data Directory\nDESCRIPTION: This command removes the directory where Coolify stores its data on the server. Extreme caution is advised as this will permanently delete all Coolify-related data.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/uninstallation.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo rm -rf /data/coolify\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Router Service Assignment\nDESCRIPTION: This snippet shows how to assign a service named 'shadowarcanist' to a Traefik router, also named 'shadowarcanist'. This configuration tells Traefik to route traffic hitting the 'shadowarcanist' router to the 'shadowarcanist' service.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cloudflare/origin-cert.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.routers.shadowarcanist.service=shadowarcanist\"\n```\n\n----------------------------------------\n\nTITLE: Increasing Upload Size Limits in Wordpress .htaccess\nDESCRIPTION: Code to add to the .htaccess file to increase PHP upload limits for Wordpress. This configuration increases the maximum file upload size to 256MB and extends execution time limits to 300 seconds.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/wordpress.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n# END WordPress - this line already exists in the file\n\nphp_value upload_max_filesize 256M\nphp_value post_max_size 256M\nphp_value max_execution_time 300\nphp_value max_input_time 300\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Service on All Servers\nDESCRIPTION: This command starts the Docker service and enables it to start on boot across all servers in the Docker Swarm cluster.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/docker/swarm.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl start docker\nsystemctl enable docker\n```\n\n----------------------------------------\n\nTITLE: Customizing PHP Configuration for Laravel Deployment\nDESCRIPTION: Example of customizing PHP settings using php_admin_value directives in the PHP-FPM configuration for a Laravel application.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/applications/laravel.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n\"php-fpm.conf\" = '''\n[www]\nlisten = 127.0.0.1:9000\nuser = www-data\ngroup = www-data\nlisten.owner = www-data\nlisten.group = www-data\npm = dynamic\npm.max_children = 50\npm.min_spare_servers = 4\npm.max_spare_servers = 32\npm.start_servers = 18\nclear_env = no\n\nphp_admin_value[memory_limit] = 512M\nphp_admin_value[max_execution_time] = 60\nphp_admin_value[max_input_time] = 60\nphp_admin_value[post_max_size] = 256M\n'''\n```\n\n----------------------------------------\n\nTITLE: Defining a Docker Service with Traefik Middleware for Authentication\nDESCRIPTION: This YAML snippet defines a Docker service for `privatebin` with an integrated health check and specifies a volume for data persistence. Key to this configuration is the use of Traefik middleware labels that enforce Authentik authentication. It assumes Traefik is configured to recognize `authentik-auth` middleware for authenticating incoming requests.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/protect-services-with-authentik.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\\n  privatebin:\\n    image: privatebin/nginx-fpm-alpine\\n    environment:\\n      - SERVICE_FQDN_PRIVATEBIN_8080\\n    volumes:\\n      - 'privatebin_data:/srv/data'\\n    healthcheck:\\n      test:\\n        - CMD-SHELL\\n        - 'wget -qO- http://127.0.0.1:8080/'\\n      interval: 5s\\n      timeout: 20s\\n      retries: 10\\n    labels:\\n      - traefik.http.middlewares.authentik-auth@file\n```\n\n----------------------------------------\n\nTITLE: Removing Coolify Docker Volumes\nDESCRIPTION: This command removes the persistent data stored in Docker volumes for Coolify. Caution is advised as this will permanently delete all data stored in these volumes.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/uninstallation.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo docker volume rm coolify-db coolify-redis\n```\n\n----------------------------------------\n\nTITLE: Specifying Backend Service Port in Traefik\nDESCRIPTION: This snippet configures the backend service 'shadowarcanist' to use port 80. This configuration defines the port where the backend service is listening for connections.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cloudflare/origin-cert.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n\"traefik.http.services.shadowarcanist.loadbalancer.server.port=80\"\n```\n\n----------------------------------------\n\nTITLE: Defining Cron Expressions in JavaScript for Backup Scheduling\nDESCRIPTION: JavaScript object mapping human-readable time intervals to their corresponding cron expressions for configuring backup schedules in Coolify.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/databases/backups.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst VALID_CRON_STRINGS = [\n    'every_minute' => '* * * * *',\n    'hourly' => '0 * * * *',\n    'daily' => '0 0 * * *',\n    'weekly' => '0 0 * * 0',\n    'monthly' => '0 0 1 * *',\n    'yearly' => '0 0 1 1 *',\n];\n```\n\n----------------------------------------\n\nTITLE: Switching to Root User and Configuring SSH\nDESCRIPTION: This snippet provides the steps necessary to switch to the root user and configure SSH settings to allow root login without a password. It includes commands to edit the SSH configuration and restart the service.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/server/oracle-cloud.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo su -\n\n```\n\nLANGUAGE: shell\nCODE:\n```\nvi /etc/ssh/sshd_config # Change PermitRootLogin to without-password\n\n```\n\nLANGUAGE: shell\nCODE:\n```\nservice sshd restart\n\n```\n\nLANGUAGE: shell\nCODE:\n```\necho \"your_public_key_here\" >> /root/.ssh/authorized_keys\n\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key Pair for Bitbucket Deploy Keys\nDESCRIPTION: This command generates a new RSA key pair with 4096 bits, which can be used as a deploy key for Bitbucket repositories in Coolify. The key is labeled with the comment 'deploy_key'.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/git/bitbucket/integration.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t rsa -b 4096 -C \"deploy_key\"\n```\n\n----------------------------------------\n\nTITLE: SSH Connection to Remote Server in Terminal\nDESCRIPTION: Command to SSH into a remote server using the root user and a specific IP address. This connection is needed to add your public SSH key to the authorized_keys file on the server.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cloudflare/tunnels/server-ssh.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nssh root@203.0.113.1\n```\n\n----------------------------------------\n\nTITLE: OpenRuntimes Executor Configuration\nDESCRIPTION: Configuration for OpenRuntimes executor container including volume mounts, network settings, and extensive storage provider configurations for various cloud services.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/appwrite.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nopenruntimes-executor:\n  container_name: openruntimes-executor\n  hostname: appwrite-executor\n  stop_signal: SIGINT\n  image: openruntimes/executor:0.6.11\n  networks:\n    - runtimes\n  volumes:\n    - /var/run/docker.sock:/var/run/docker.sock\n    - appwrite-builds:/storage/builds:rw\n    - appwrite-functions:/storage/functions:rw\n    - /tmp:/tmp:rw\n```\n\n----------------------------------------\n\nTITLE: Viewing the .env File to Retrieve APP_KEY\nDESCRIPTION: This snippet runs a command to display the contents of the .env file, allowing users to copy the APP_KEY necessary for data decryption during the backup restore process.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/how-to/backup-restore-coolify.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncat .env\n```\n\n----------------------------------------\n\nTITLE: Predefined Schedule Strings Without @ Prefix\nDESCRIPTION: Simplified schedule strings without @ prefix for common scheduling intervals in Coolify.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cron-syntax.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nevery_minute\nhourly\ndaily\nweekly\nmonthly\nyearly\n```\n\n----------------------------------------\n\nTITLE: Adding SSH Public Key to Authorized Keys\nDESCRIPTION: Command to append your public SSH key to the authorized_keys file on the remote server. This enables passwordless SSH authentication using the key pair created earlier.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cloudflare/tunnels/server-ssh.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ echo \"<PASTE YOUR PUBLIC KEY INSIDE OF THESE QUOTES>\" >> ~/.ssh/authorized_keys\n```\n\n----------------------------------------\n\nTITLE: Enabling Hardware Transcoding in Docker Compose (FileFlows)\nDESCRIPTION: This snippet shows how to enable hardware transcoding for FileFlows by uncommenting the `devices` section in the Docker Compose file. This allows FileFlows to utilize hardware acceleration for video processing, improving performance. It requires a device that supports hardware transcoding.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/fileflows.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"#devices:\\n# - \\\"/dev/dri:/dev/dri\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Excluding Services from Healthchecks\nDESCRIPTION: Configuration example showing how to exclude specific services from Coolify's healthchecks using the exclude_from_hc option.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/docker/compose.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  some-service:\n    exclude_from_hc: true\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue.js Sponsor List Component\nDESCRIPTION: Script setup block that imports VitePress team page components and defines an array of sponsor objects. Each sponsor object contains details like avatar image path, name, title, and external reference links.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/sponsors.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport {\n  VPTeamPage,\n  VPTeamPageTitle,\n  VPTeamMembers,\n  VPTeamPageSection\n} from 'vitepress/theme'\n\n\nconst sponsors = [\n  {\n    avatar: '../images/sponsors/hetzner.webp',\n    name: 'Hetzner',\n    title: 'Server, cloud, hosting, and data center solutions',\n    links: [\n      { icon: 'expedia', link: 'http://htznr.li/CoolifyXHetzner' }\n    ]\n  },\n  // ... additional sponsor entries ...\n  {\n    avatar: '../images/team/coollabs.webp',\n    name: 'You Company?',\n    title: 'Will Your Company Be Next?'\n  }\n]\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running the Coolify Installation Script to Restart Instance\nDESCRIPTION: This command is used to restart the Coolify instance, effectively applying the restored backup and any changes made to the environment settings.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/how-to/backup-restore-coolify.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -fsSL https://cdn.coollabs.io/coolify/install.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Restoring ClickHouse Database from S3\nDESCRIPTION: SQL command to restore an entire database from an S3 backup. Requires S3 endpoint, access key, and secret key.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/databases/clickhouse.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nRESTORE DATABASE <database_name> FROM S3('<your_s3_endpoint_com>/<unique_folder_from_database_backup>', '<s3_access_key>', '<s3_secret_key>')\n```\n\n----------------------------------------\n\nTITLE: Navigating to Data Directory for Backup Retrieval\nDESCRIPTION: This snippet demonstrates how to access the data directory in a Coolify instance via terminal to retrieve the environment configuration file required for restoration.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/how-to/backup-restore-coolify.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd /data/coolify/source\n```\n\n----------------------------------------\n\nTITLE: Forcing SSL Certificate Regeneration in Coolify\nDESCRIPTION: This command removes the existing ACME configuration file to force Coolify to generate new SSL certificates. After running this command, you need to restart the Coolify proxy from the dashboard.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/troubleshoot/dns-and-domains/lets-encrypt-not-working.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrm /data/coolify/proxy/acme.json\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Nginx Simple Web Container in Coolify\nDESCRIPTION: This Dockerfile sets up a simple Nginx web server container, copying the current directory contents to the default Nginx HTML directory.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/traefik/basic-auth.md#2025-04-21_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM nginx:alpine\nCOPY . /usr/share/nginx/html\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Fireship Overview in HTML\nDESCRIPTION: This HTML code embeds a YouTube video player for a Coolify overview by Fireship.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/videos.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe\n  width=\"560\"\n  height=\"315\"\n  src=\"https://www.youtube.com/embed/SCIfWhAheVw\"\n  title=\"YouTube video player\"\n  frameborder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n  allowfullscreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Setting Root User Credentials in Coolify Environment File\nDESCRIPTION: This snippet shows the environment variables to be added to the Coolify .env file for setting up root user credentials.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/create-root-user-with-env.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nROOT_USERNAME=RootUser\nROOT_USER_EMAIL=example@example.com\nROOT_USER_PASSWORD=Password\n```\n\n----------------------------------------\n\nTITLE: Resetting Root Password in Coolify without SMTP\nDESCRIPTION: This command resets the root user's password when SMTP is not configured, allowing recovery from a forgotten password. It must be executed on the server hosting Coolify via SSH.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -ti coolify sh -c \"php artisan root:reset-password\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Hardware Transcoding for Plex in Docker Compose\nDESCRIPTION: This YAML snippet shows how to uncomment the devices section in a Docker Compose file to enable hardware transcoding for Plex, if the hosting device supports it.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/plex.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#devices:\n# - \"/dev/dri:/dev/dri\"\n```\n\n----------------------------------------\n\nTITLE: Removing Default Proxy Docker Image\nDESCRIPTION: This command removes the default Traefik proxy Docker image used by Coolify.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/uninstallation.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo docker rmi traefik:v3.1\n```\n\n----------------------------------------\n\nTITLE: Executing Automated Installation Script for Coolify with Sudo\nDESCRIPTION: This command runs the Coolify installation script with custom Docker network settings using sudo for elevated privileges. It sets the Docker address pool base and size.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/define-custom-docker-network-with-env.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo -E env DOCKER_ADDRESS_POOL_BASE=10.0.0.0/8 DOCKER_ADDRESS_POOL_SIZE=10 bash -c 'curl -fsSL https://cdn.coollabs.io/coolify/install.sh | bash'\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for WebdevCody Overview in HTML\nDESCRIPTION: This HTML code embeds a YouTube video player for a 6-minute quick overview of Coolify by WebdevCody.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/videos.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe\n  width=\"560\"\n  height=\"315\"\n  src=\"https://www.youtube.com/embed/44uWIkGZ4W8\"\n  title=\"YouTube video player\"\n  frameborder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n  allowfullscreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Verifying the Docker Swarm Cluster\nDESCRIPTION: This command lists the nodes in the Docker Swarm cluster, allowing the user to verify the status of each node within the Swarm.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/docker/swarm.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker node ls\n```\n\n----------------------------------------\n\nTITLE: Changing Root Email in Coolify\nDESCRIPTION: This command allows changing the email address associated with the root user account. It must be executed on the server hosting Coolify via SSH.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -ti coolify sh -c \"php artisan root:change-email\"\n```\n\n----------------------------------------\n\nTITLE: Generating Hashed Password using Caddy CLI\nDESCRIPTION: Shows the command to generate a hashed password using the Caddy CLI. This hashed password is required for secure basic authentication setup.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/proxy/caddy/basic-auth.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncaddy hash-password --plaintext \"your_plaintext_password\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Database Docker Compose\nDESCRIPTION: Docker Compose configuration for Supabase database service with health checks and port mapping. Used to make the database publicly accessible by exposing PostgreSQL port.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/supabase.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsupabase-db:\n  image: 'supabase/postgres:15.6.1.146'\n  healthcheck:\n    test: 'pg_isready -U postgres -h 127.0.0.1'\n    interval: 5s\n    timeout: 5s\n    retries: 10\n  depends_on:\n    supabase-vector:\n      condition: service_healthy\n  ports:\n    - ${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}\n```\n\n----------------------------------------\n\nTITLE: Restarting SSH Service (OpenRC)\nDESCRIPTION: This snippet demonstrates how to restart the SSH service using `rc-service` on systems that utilize OpenRC as their init system. This restarts the SSH daemon after modifying the SSH configuration file.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/server/openssh.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"rc-service sshd restart\"\n```\n\n----------------------------------------\n\nTITLE: Universal Crawler Access Configuration\nDESCRIPTION: Allows all search engine bots to crawl the entire Coolify documentation website\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Coolify Containers in Docker\nDESCRIPTION: These commands stop all Coolify-related Docker containers immediately and remove them to free up system resources.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/uninstallation.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo docker stop -t 0 coolify coolify-realtime coolify-db coolify-redis coolify-proxy\nsudo docker rm coolify coolify-realtime coolify-db coolify-redis coolify-proxy\n```\n\n----------------------------------------\n\nTITLE: Executing Automated Installation Script for Coolify with Custom Docker Network\nDESCRIPTION: This command runs the Coolify installation script with custom Docker network settings using environment variables. It sets the Docker address pool base and size.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/define-custom-docker-network-with-env.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv DOCKER_ADDRESS_POOL_BASE=10.0.0.0/8 DOCKER_ADDRESS_POOL_SIZE=10 bash -c 'curl -fsSL https://cdn.coollabs.io/coolify/install.sh | bash'\n```\n\n----------------------------------------\n\nTITLE: Configuring Appwrite Realtime service with Docker Compose\nDESCRIPTION: This snippet configures the Appwrite Realtime service using Docker Compose. It sets up the image, entrypoint, container name, dependencies, and environment variables for the Appwrite Realtime server, enabling real-time functionality in Appwrite applications.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/appwrite.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"appwrite-realtime:\\n  image: appwrite/appwrite:1.6.0\\n  entrypoint: realtime\\n  container_name: appwrite-realtime\\n  depends_on:\\n    - appwrite-mariadb\\n    - appwrite-redis\\n  environment:\\n    - SERVICE_FQDN_APPWRITE=/v1/realtime\\n    - _APP_ENV=${_APP_ENV:-production}\\n    - _APP_WORKER_PER_CORE=${_APP_WORKER_PER_CORE:-6}\\n    - _APP_OPTIONS_ABUSE=${_APP_OPTIONS_ABUSE:-enabled}\\n    - _APP_OPENSSL_KEY_V1=$SERVICE_PASSWORD_64_APPWRITE\\n    - _APP_REDIS_HOST=${_APP_REDIS_HOST:-appwrite-redis}\\n    - _APP_REDIS_PORT=${_APP_REDIS_PORT:-6379}\\n    - _APP_REDIS_USER=${_APP_REDIS_USER}\\n    - _APP_REDIS_PASS=${_APP_REDIS_PASS}\\n    - _APP_DB_HOST=${_APP_DB_HOST:-appwrite-mariadb}\\n    - _APP_DB_PORT=${_APP_DB_PORT:-3306}\\n    - _APP_DB_SCHEMA=${_APP_DB_SCHEMA:-appwrite}\\n    - _APP_DB_USER=$SERVICE_USER_MARIADB\\n    - _APP_DB_PASS=$SERVICE_PASSWORD_MARIADB\\n    - _APP_USAGE_STATS=${_APP_USAGE_STATS:-enabled}\\n    - _APP_LOGGING_CONFIG=${_APP_LOGGING_CONFIG}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Coolify Environment Variables for Cloudflare Tunnel Integration\nDESCRIPTION: This snippet shows the necessary environment variables that need to be configured in Coolify's .env file located at /data/coolify/source to enable connections to the realtime server through Cloudflare Tunnels. The configuration includes setting up Pusher host and port for the tunnel integration.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cloudflare/tunnels/single-resource.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAPP_ID=<random string>\nAPP_KEY=<random string>\nAPP_NAME=Coolify\nDB_PASSWORD=<random string>\nPUSHER_APP_ID=<random string>\nPUSHER_APP_KEY=<random string>\nPUSHER_APP_SECRET=<random string>\nREDIS_PASSWORD=<random string>\n\n###########\n# Add these lines\nPUSHER_HOST=realtime.shadowarcanist.com\nPUSHER_PORT=443\n###########\n```\n\n----------------------------------------\n\nTITLE: Resetting Coolify Development Database in Docker\nDESCRIPTION: Command to reset the Coolify development database to a clean state with default values, useful for troubleshooting or starting fresh.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/contribute/coolify.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it coolify php artisan migrate:fresh --seed\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Dev Server\nDESCRIPTION: Command to install project dependencies using bun package manager and start the development server\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun install && bun run dev\n```\n\n----------------------------------------\n\nTITLE: Removing Coolify Docker Network\nDESCRIPTION: This command removes the custom Docker network used by Coolify. It's important to ensure no containers are using the network before executing this command.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/uninstallation.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo docker network rm coolify\n```\n\n----------------------------------------\n\nTITLE: Installing Coolify with Root User Credentials (Sudo)\nDESCRIPTION: This bash command shows how to run the Coolify installation script with root user credentials using sudo for privilege elevation.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/create-root-user-with-env.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo -E env ROOT_USERNAME=RootUser ROOT_USER_EMAIL=example@example.com ROOT_USER_PASSWORD=Password bash -c 'curl -fsSL https://cdn.coollabs.io/coolify/install.sh | bash'\n```\n\n----------------------------------------\n\nTITLE: Restarting SSH Service (SystemD)\nDESCRIPTION: This snippet demonstrates how to restart the SSH service using `systemctl` on systems that utilize SystemD as their init system. This ensures the configuration changes are applied and the service is running with the new settings.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/server/openssh.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"systemctl restart sshd\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Inertia.js SSR Worker for Laravel\nDESCRIPTION: Supervisor configuration for running the Inertia.js server-side rendering process in a Laravel application.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/applications/laravel.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n\"worker-inertia-ssr.conf\" = '''\n[program:inertia-ssr]\nprocess_name=%(program_name)s_%(process_num)02d\ncommand=bash -c 'exec php /app/artisan inertia:start-ssr'\nautostart=true\nautorestart=true\nstderr_logfile=/var/log/worker-inertia-ssr.log\nstdout_logfile=/var/log/worker-inertia-ssr.log\n'''\n```\n\n----------------------------------------\n\nTITLE: Standard Cron Format Syntax\nDESCRIPTION: The standard cron format used for scheduling tasks in Coolify using the five-asterisk pattern.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cron-syntax.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* * * * *\n```\n\n----------------------------------------\n\nTITLE: Deleting Stuck Services in Coolify\nDESCRIPTION: This command helps remove services that are stuck in an error state or otherwise not functioning correctly. It must be executed on the server hosting Coolify via SSH.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/commands.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -ti coolify sh -c \"php artisan services:delete\"\n```\n\n----------------------------------------\n\nTITLE: Editing Coolify Environment Variables (Manual Method)\nDESCRIPTION: This bash command opens the Coolify environment variables file for editing using nano editor.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/create-root-user-with-env.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnano /data/coolify/source/.env\n```\n\n----------------------------------------\n\nTITLE: Adding Public Key to Authorized Keys\nDESCRIPTION: Command to add the generated public SSH key to the server's authorized_keys file. This allows Coolify to authenticate and access the server using the corresponding private key.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cloudflare/tunnels/server-ssh.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ echo \"<PASTE YOUR PUBLIC KEY INSIDE OF THESE QUOTES>\" >> ~/.ssh/authorized_keys\n```\n\n----------------------------------------\n\nTITLE: Predefined Schedule Strings With @ Prefix\nDESCRIPTION: Simplified schedule strings with @ prefix for common scheduling intervals in Coolify.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cron-syntax.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n@every_minute\n@hourly\n@daily\n@weekly\n@monthly\n@yearly\n```\n\n----------------------------------------\n\nTITLE: Removing Coolify Docker Volumes\nDESCRIPTION: Command to remove all Coolify-related Docker volumes, ensuring a clean slate for the development environment.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/contribute/coolify.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume rm coolify_dev_backups_data coolify_dev_postgres_data coolify_dev_redis_data coolify_dev_coolify_data coolify_dev_minio_data\n```\n\n----------------------------------------\n\nTITLE: Editing Environment Configuration - Manual Method\nDESCRIPTION: Command to edit the Coolify environment configuration file for manual installation method.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/custom-docker-registry.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnano /data/coolify/source/.env\n```\n\n----------------------------------------\n\nTITLE: Uploading Custom CA Certificate Path for Coolify Database SSL\nDESCRIPTION: Path specification for uploading a custom CA certificate to use instead of the Coolify-generated one. The certificate must be in PEM format and placed at this location.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/databases/ssl.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n/data/coolify/ssl/coolify-ca.crt\n```\n\n----------------------------------------\n\nTITLE: Executing Coolify Downgrade Command in Shell\nDESCRIPTION: This command downloads and runs the Coolify installation script, specifying a particular version to downgrade to. The version number '4.0.0-beta.369' can be replaced with the desired target version.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/downgrade.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -fsSL https://cdn.coollabs.io/coolify/install.sh | bash -s 4.0.0-beta.369\n```\n\n----------------------------------------\n\nTITLE: Pruning Unused Docker Images\nDESCRIPTION: Command to remove all unused Docker images, helping to free up disk space in the development environment.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/contribute/coolify.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker image prune -a\n```\n\n----------------------------------------\n\nTITLE: Removing Coolify Docker Containers\nDESCRIPTION: Command to remove all Coolify-related Docker containers, part of the process for resetting the development environment.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/contribute/coolify.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker rm coolify coolify-db coolify-redis coolify-realtime coolify-testing-host coolify-minio coolify-vite-1 coolify-mail\n```\n\n----------------------------------------\n\nTITLE: Appending SSH Public Key Bash\nDESCRIPTION: This Bash command is used to manually append a generated SSH public key to the authorized_keys file to grant SSH access. It requires the public key located at /data/coolify/ssh/keys/id.root@host.docker.internal.pub. The main prerequisite is accessing the server command line where the authorized_keys file exists.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat /data/coolify/ssh/keys/id.root@host.docker.internal.pub >> ~/.ssh/authorized_keys\n```\n\n----------------------------------------\n\nTITLE: Configuring NextJS Deployment Port\nDESCRIPTION: Configuration setting for exposing the default NextJS application port when deploying with a Dockerfile. The application will be accessible on port 3000.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/applications/nextjs.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n3000\n```\n\n----------------------------------------\n\nTITLE: Installing Coolify with Custom Registry - Root Privileges\nDESCRIPTION: Installation command with sudo for elevated privileges when not logged in as root user. Uses the -E flag to preserve environment variables.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/custom-docker-registry.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo -E env REGISTRY_URL=docker.io bash -c 'curl -fsSL https://cdn.coollabs.io/coolify/install.sh | bash'\n```\n\n----------------------------------------\n\nTITLE: VitePress Homepage Configuration in YAML\nDESCRIPTION: Main configuration file for the Coolify documentation homepage. Defines the layout structure, hero section content, feature list with icons, and referral program details. Uses VitePress theme customization and includes SVG icons from Lucide.dev.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlayout: home\n\nhero:\n  name: \"Coolify\"\n  text: \"Open Source PaaS\"\n  tagline: Self-host your own databases, services (like Wordpress, Plausible Analytics, Ghost) and applications (like Next.js, Nuxt.js, Remix, SvelteKit) with ease.\n  actions:\n    - theme: brand\n      text: Get Started\n      color: '#6b16ed'\n      link: /get-started/introduction\n    - theme: alt\n      text: View Source Code\n      link: https://github.com/coollabsio/coolify\nreferral:\n  title: \"Get €20 Free Credit\"\n  url: \"https://coolify.io/hetzner\"\n  text: \"Don't have a server yet? Get started with Hetzner Cloud.\"\n  description: \"Use our referral link to get €20 in free credits at Hetzner!\"\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSH Server (SLES/openSUSE)\nDESCRIPTION: This snippet installs the OpenSSH server on SLES and openSUSE using `zypper`. It installs the `openssh` package and enables/starts the `sshd` service.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/server/openssh.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"zypper install -y openssh\nsystemctl enable --now sshd\"\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub App Webhook URL for Event Handling in Coolify\nDESCRIPTION: Configures the Webhook URL for handling GitHub App events in Coolify. This URL is used to receive and process webhook events from GitHub.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/git/github/manually-setup-github-app.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://app.coolify.io/webhooks/source/github/events\n```\n\n----------------------------------------\n\nTITLE: Installing Coolify with Root User Credentials (Automated Method)\nDESCRIPTION: This bash command demonstrates how to run the Coolify installation script with predefined root user credentials using environment variables.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/create-root-user-with-env.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv ROOT_USERNAME=RootUser ROOT_USER_EMAIL=example@example.com ROOT_USER_PASSWORD=Password bash -c 'curl -fsSL https://cdn.coollabs.io/coolify/install.sh | bash'\n```\n\n----------------------------------------\n\nTITLE: Docker Image Pull Error from GHCR\nDESCRIPTION: Error message displayed when Docker fails to pull an image from GitHub Container Registry due to authentication denial.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/troubleshoot/docker/expired-github-personal-access-token.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n  Unable to find image 'ghcr.io/coollabsio/coolify-helper:latest' locally\n  docker: Error response from daemon: Head \"https://ghcr.io/v2/coollabsio/coolify-helper/manifests/latest\": denied: denied\n```\n\n----------------------------------------\n\nTITLE: Server Directory Navigation and File Creation Commands\nDESCRIPTION: Series of shell commands for navigating to Coolify proxy directory, creating certificate directories and files\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cloudflare/tunnels/full-tls.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd /data/coolify/proxy\nls\nmkdir certs\nls\ncd certs\ntouch shadowarcanist.cert shadowarcanist.key\nls\nnano shadowarcanist.cert\nnano shadowarcanist.key\n```\n\n----------------------------------------\n\nTITLE: Firewall Configuration for Oracle ARM Server\nDESCRIPTION: This snippet provides instructions for configuring firewall rules on an Oracle ARM server to allow necessary ports for Coolify operations. It emphasizes the need to adjust firewall settings when self-hosting.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/server/oracle-cloud.md#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Rendering VitePress Team Page Template\nDESCRIPTION: Template structure that renders the sponsors page using VitePress team components. Displays a title section and renders the sponsor list using VPTeamMembers component.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/sponsors.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<VPTeamPage>\n  <VPTeamPageTitle>\n    <template #title>\n      Coolify Sponsors\n    </template>\n    <template #lead>\n      We have amazing sponsors who support the development of Coolify.\n    </template>\n  </VPTeamPageTitle>\n<VPTeamMembers size=\"small\" :members=\"sponsors\" />\n</VPTeamPage>\n```\n\n----------------------------------------\n\nTITLE: Docker GHCR Logout Command\nDESCRIPTION: Command to log out of GitHub Container Registry to resolve authentication issues.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/troubleshoot/docker/expired-github-personal-access-token.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n    docker logout ghcr.io\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Awesome Open Source Overview in HTML\nDESCRIPTION: This HTML code embeds a YouTube video player for a Coolify overview by Awesome Open Source.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/videos.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe\n  width=\"560\"\n  height=\"315\"\n  src=\"https://www.youtube.com/embed/cg28Ztt4-os?si=u6asFexlFpe8FmK7\"\n  title=\"YouTube video player\"\n  frameborder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n  allowfullscreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: SSH Connection Command\nDESCRIPTION: Command to establish SSH connection to the Coolify server\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cloudflare/tunnels/full-tls.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nssh shadowarcanist@203.0.113.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Domain A Record\nDESCRIPTION: DNS configuration example showing how to set up an A record for a single domain pointing to a server IP address.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/dns-configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: dns\nCODE:\n```\nexample.com.    IN    A    1.1.1.1\n```\n\n----------------------------------------\n\nTITLE: Installing Plausible Analytics via Docker Compose\nDESCRIPTION: Instructions to deploy Plausible Analytics using a Docker Compose configuration file. Users need to copy this configuration from the provided GitHub template link into a Docker Compose Empty application in Coolify.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/plausible.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://raw.githubusercontent.com/coollabsio/coolify/main/templates/compose/plausible.yaml\n```\n\n----------------------------------------\n\nTITLE: Sitemap Location Definition\nDESCRIPTION: Specifies the XML sitemap location for search engines to discover and index Coolify documentation pages\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/public/robots.txt#2025-04-21_snippet_1\n\nLANGUAGE: robots.txt\nCODE:\n```\nSitemap: https://coolify.io/docs/sitemap-index.xml\n```\n\n----------------------------------------\n\nTITLE: Backing Up ClickHouse Table to S3\nDESCRIPTION: SQL command to backup a specific table to an S3 storage location. Requires S3 endpoint, access key, and secret key.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/databases/clickhouse.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nBACKUP TABLE <table_name> TO S3('<your_s3_endpoint_com>/<unique_folder_for_table_backup>', '<s3_access_key>', '<s3_secret_key>')\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSH Server (CentOS/RHEL/Fedora/Rocky)\nDESCRIPTION: This snippet installs the OpenSSH server on CentOS, RHEL, Fedora, and Rocky Linux using `dnf`. It installs the `openssh-server` package and enables/starts the `sshd` service.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/server/openssh.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"dnf install -y openssh-server\nsystemctl enable --now sshd\"\n```\n\n----------------------------------------\n\nTITLE: Restarting Docker Container in Coolify\nDESCRIPTION: Command to restart a specific Docker container by name. This can resolve issues when the Coolify container is running but not functioning properly.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/troubleshoot/dashboard/dashboard-inaccessible.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker restart NAME\n```\n\n----------------------------------------\n\nTITLE: Unsupported ClickHouse Partition Freeze\nDESCRIPTION: Example of a partition freeze command that may not work in Coolify's Docker setup.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/databases/clickhouse.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE ... FREEZE PARTITION ...\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSH Server (Alpine Linux)\nDESCRIPTION: This snippet installs the OpenSSH server on Alpine Linux using `apk`. It adds the `openssh` package, adds the `sshd` service to the boot sequence, and starts the service.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/server/openssh.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"apk add openssh\nrc-update add sshd\nrc-service sshd start\"\n```\n\n----------------------------------------\n\nTITLE: Removing Caddy Proxy Docker Image\nDESCRIPTION: This command removes the Caddy proxy Docker image, which is an alternative to the default Traefik proxy used by Coolify.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/uninstallation.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo docker rmi lucaslorentz/caddy-docker-proxy:2.8-alpine\n```\n\n----------------------------------------\n\nTITLE: Rendering OpenAPI Operation Component\nDESCRIPTION: This snippet renders the OpenAPI operation component based on the operation ID extracted from URL parameters.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/api-reference/api/operations/[operation].md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<OAOperation :operationId=\"operation\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Docker using official script\nDESCRIPTION: This snippet provides an alternative method to install Docker using the official Docker installation script. It allows for specifying the version during the installation process.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/docker/swarm.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://get.docker.com | sh -s -- --version 24.0\n```\n\n----------------------------------------\n\nTITLE: SSH into Server\nDESCRIPTION: Command to SSH into the server that will be connected to Coolify. This is typically done using the root user and the server's IP address.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/cloudflare/tunnels/server-ssh.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nssh root@203.0.113.1\n```\n\n----------------------------------------\n\nTITLE: Rendering VitePress Team Page Components\nDESCRIPTION: Vue template markup for rendering the team page using VitePress components. Includes team page title, description and member list rendering.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/team.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<VPTeamPage>\n  <VPTeamPageTitle>\n    <template #title>\n      CoolLabs Team\n    </template>\n    <template #lead>\n      The development of Coolify is guided by an international team, some of whom have chosen to be featured below.\n    </template>\n  </VPTeamPageTitle>\n  <VPTeamMembers size=\"small\" :members=\"coreMembers\" />\n</VPTeamPage>\n```\n\n----------------------------------------\n\nTITLE: Allowing Coolify Cloud IP Addresses in UFW\nDESCRIPTION: Commands to enable connection from Coolify Cloud IP addresses by adding specific UFW rules for both IPv4 and IPv6 ranges. This will allow traffic from Coolify Cloud servers to reach your instance on port 22.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/troubleshoot/server/connection-issues.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n ufw insert 1 allow from <ipv4>/22 to any port 22\n ufw insert 2 allow from <ipv6>/22 to any port 22\n```\n\n----------------------------------------\n\nTITLE: Setting Registry URL - Environment Variable\nDESCRIPTION: Environment variable configuration to set the Docker registry URL to docker.io.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/knowledge-base/custom-docker-registry.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nREGISTRY_URL=docker.io\n```\n\n----------------------------------------\n\nTITLE: Configuring Team Members Array in Vue.js\nDESCRIPTION: Defines an array of team member objects containing personal information including avatars, names, titles, and social media links. Used to populate a VitePress team page component.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/team.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst coreMembers = [\n  {\n    avatar: '../images/team/andras.webp',\n    name: 'Andras Bacsai',\n    title: 'Founder, Lead Developer',\n    links: [\n      { icon: 'github', link: 'https://github.com/andrasbacsai' },\n      { icon: 'expedia', link: 'https://heyandras.dev' },\n      { icon: 'x', link: 'https://x.com/heyandras' },\n      { icon: 'bluesky', link: 'https://bsky.app/profile/heyandras.dev' }\n    ]\n  },\n  {\n    avatar: '../images/team/peak.webp',\n    name: 'Peaklabs Dev',\n    title: 'Core Developer',\n    links: [\n      { icon: 'github', link: 'https://github.com/peaklabs-dev' },\n      { icon: 'x', link: 'https://x.com/peaklabs_dev' },\n      { icon: 'bluesky', link: 'https://bsky.app/profile/peaklabs.dev' },\n      { icon: 'mastodon', link: 'https://fosstodon.org/@peaklabs_dev' }\n    ]\n  },\n  {\n    avatar: '../images/team/shadowarcanist.webp',\n    name: 'ShadowArcanist',\n    title: 'Community Lead, Docs Maintainer',\n    links: [\n      { icon: 'github', link: 'https://github.com/shadowarcanist' },\n      { icon: 'expedia', link: 'https://shadowarcanist.com' },\n      { icon: 'x', link: 'https://x.com/shadowarcanist' }\n    ]\n  },\n  {\n    avatar: '../images/team/serdar.webp',\n    name: 'Serdar Yerdelen',\n    title: 'Community Moderator, Docs Maintainer',\n    links: [\n      { icon: 'github', link: 'https://github.com/justserdar' },\n      { icon: 'expedia', link: 'https://justserdar.dev' },\n      { icon: 'x', link: 'https://x.com/darwebdb' }\n    ]\n  },\n  {\n    avatar: '../images/team/aditya.webp',\n    name: 'Aditya Tripathi',\n    title: 'Developer, Community Moderator',\n    links: [\n      { icon: 'github', link: 'https://github.com/shadowarcanist' },\n      { icon: 'expedia', link: 'https://adiology.dev' },\n      { icon: 'x', link: 'https://x.com/AdityaTripathiD' }\n    ]\n  },\n  {\n    avatar: '../images/team/coollabs.webp',\n    name: 'You?',\n    title: 'Will You Be Next?'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Checking Server Time Configuration\nDESCRIPTION: Commands to check current server time and NTP configuration status.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/troubleshoot/server/two-factor-stopped-working.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndate\n```\n\nLANGUAGE: bash\nCODE:\n```\ncat /etc/ntp.conf\n```\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl status systemd-timesyncd.service\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Syntax Walkthrough in HTML\nDESCRIPTION: This HTML code embeds a YouTube video player for a 1.5-hour long complete walkthrough of Coolify by Syntax.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/videos.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe\n  width=\"560\"\n  height=\"315\"\n  src=\"https://www.youtube.com/embed/taJlPG82Ucw?si=O4Gu8_Dxcb68agfu\"\n  title=\"YouTube video player\"\n  frameborder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n  allowfullscreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Feature Icons SVG Collection\nDESCRIPTION: Collection of SVG icons representing different features including monitoring, notifications, collaboration, OAuth, backups, and API capabilities. Each SVG icon uses specific colors and path definitions to create unique visual representations.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"32\" height=\"32\" viewBox=\"0 0 16 16\"><path fill=\"none\" stroke=\"#8aadf4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M.5 8.5H11l.75-.5a5.35 5.35 0 0 1 0-3.5c1 .6 1 1.88 1.74 2c.77-.09 1.23.01 2 .52c0 0-.97 1.77-2.5 1.98c-1.93 3.65-4.5 5.5-6.98 5.5C0 14.5.5 8.5.5 8.5m1 0v-2m0 0h8m-6 2v-4m0 0h4m-2-2h2m-2 6v-6m2 6v-6m2 6v-2\"/></svg>\n```\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"28\" height=\"28\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#f5a97f\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9\"/><path d=\"M10.3 21a1.94 1.94 0 0 0 3.4 0\"/><path d=\"M4 2C2.8 3.7 2 5.7 2 8\"/><path d=\"M22 8c0-2.3-.8-4.3-2-6\"/></svg>\n```\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"32\" height=\"32\" viewBox=\"0 0 256 256\"><path fill=\"#f5bde6\" d=\"M244.8 150.4a8 8 0 0 1-11.2-1.6A51.6 51.6 0 0 0 192 128a8 8 0 0 1-7.4-4.9 8 8 0 0 1 0-6.2 8 8 0 0 1 7.4-4.9 24 24 0 1 0-23.2-30 8 8 0 1 1-15.5-4 40 40 0 1 1 65.7 39.5 68 68 0 0 1 27.4 21.7 8 8 0 0 1-1.6 11.2M190.9 212a8 8 0 1 1-13.8 8 57 57 0 0 0-98.2 0 8 8 0 1 1-13.8-8 72 72 0 0 1 33.7-30 48 48 0 1 1 58.4 0 72 72 0 0 1 33.7 30M128 176a32 32 0 1 0-32-32 32 32 0 0 0 32 32m-56-56a8 8 0 0 0-8-8 24 24 0 1 1 23.2-30 8 8 0 1 0 15.5-4A40 40 0 1 0 37 117.5a68 68 0 0 0-27.4 21.7 8 8 0 1 0 12.8 9.6A51.6 51.6 0 0 1 64 128a8 8 0 0 0 8-8\"/></svg>\n```\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"32\" height=\"32\" viewBox=\"0 0 16 16\"><g fill=\"none\" stroke=\"#cad3f5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M10 10.5a4.5 4.5 0 1 0-4.02-2.48L1.5 12.5v2h2v-2h2v-2h2l.48-.48c.6.3 1.3.48 2.02.48\"/><path d=\"M12 5a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1a1 1 0 0 1 1 1\"/></g></svg>\n```\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"32\" height=\"32\" viewBox=\"0 0 16 16\"><path fill=\"none\" stroke=\"#a6da95\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8 6.5c3.59 0 6.5-1.4 6.5-2.68S11.59 1.5 8 1.5S1.5 2.54 1.5 3.82S4.41 6.5 8 6.5M14.5 8c0 .83-1.24 1.79-3.25 2.2s-4.49.41-6.5 0S1.5 8.83 1.5 8m13 4.18c0 .83-1.24 1.6-3.25 2c-2.01.42-4.49.42-6.5 0c-2.01-.4-3.25-1.17-3.25-2m0-8.3v8.3m13-8.3v8.3\"/></svg>\n```\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"32\" height=\"32\" viewBox=\"0 0 16 16\"><path fill=\"none\" stroke=\"#c6a0f6\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M5.5 12.5a2 2 0 1 1-4 0a2 2 0 0 1 4 0m9 0a2 2 0 1 1-4 0a2 2 0 0 1 4 0m-4.5-9a2 2 0 1 1-4 0a2 2 0 0 1 4 0m-6.5 7l3-5.5m3 0l3 5.5\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Removing Coolify Docker Images\nDESCRIPTION: These commands remove all Docker images used by Coolify to free up disk space. It includes the main Coolify image and its dependencies.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/uninstallation.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo docker rmi ghcr.io/coollabsio/coolify:latest\nsudo docker rmi ghcr.io/coollabsio/coolify-helper:latest\nsudo docker rmi quay.io/soketi/soketi:1.6-16-alpine\nsudo docker rmi postgres:15-alpine\nsudo docker rmi redis:alpine\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Playlist for Airoflare Coolify Beginner Series in HTML\nDESCRIPTION: This HTML code embeds a YouTube playlist player for a Coolify beginner series by Airoflare.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/videos.md#2025-04-21_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe\n  width=\"560\"\n  height=\"315\"\n  src=\"https://www.youtube.com/embed/videoseries?list=PLoVHNPkf8ZxrVW0vclP5ngQQcTz6-VzL-\"\n  title=\"YouTube playlist\"\n  frameborder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n  allowfullscreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Brendan O'Connell Overview in HTML\nDESCRIPTION: This HTML code embeds a YouTube video player for a Coolify overview by Brendan O'Connell.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/videos.md#2025-04-21_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe\n  width=\"560\"\n  height=\"315\"\n  src=\"https://www.youtube.com/embed/8pLDDcEZlbo?si=L-QXX-3hHbbqd7kN\"\n  title=\"YouTube video player\"\n  frameborder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n  allowfullscreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Starting Coolify Development Environment with Spin\nDESCRIPTION: Command to start the Coolify development environment using Spin. This sets up necessary containers and services for local development.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/contribute/coolify.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspin up\n```\n\n----------------------------------------\n\nTITLE: Import Data Script in VitePress using JavaScript\nDESCRIPTION: This JavaScript snippet, potentially used in a VitePress setup file, imports the `useData` function to access frontmatter properties in the documentation. Prerequisites include a VitePress environment. The output is facilitating additional functionalities to handle data in VitePress tabs.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/services/anythingllm.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<!-- <script setup>\nimport { useData } from 'vitepress'\nconst { frontmatter } = useData()\n</script> -->\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for MelkeyDev Overview in HTML\nDESCRIPTION: This HTML code embeds a YouTube video player for a Coolify overview by MelkeyDev.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/videos.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe\n  width=\"560\"\n  height=\"315\"\n  src=\"https://www.youtube.com/embed/SANSysQlS18\"\n  title=\"YouTube video player\"\n  frameborder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n  allowfullscreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Sample API Token Format in PHP\nDESCRIPTION: Demonstrates the format of a sample API token used for authorization in Coolify. The token is a string that includes a numeric prefix followed by a pipe character and a long alphanumeric sequence.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/api-reference/authorization.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n# Sample token\n3|WaobqX9tJQshKPuQFHsyApxuOOggg4wOfvGc9xa233c376d7\n```\n\n----------------------------------------\n\nTITLE: Unsupported ClickHouse Disk Backup\nDESCRIPTION: Example of a disk backup command that doesn't work in Coolify due to configuration limitations.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/databases/clickhouse.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nBACKUP TABLE test.table TO Disk('backups', '1.zip')\n```\n\n----------------------------------------\n\nTITLE: Cloning Documentation Repository\nDESCRIPTION: Commands to fork and clone the Coolify documentation repository to local environment\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/your-username/your-repo-name.git\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd your-repo-name\n```\n\n----------------------------------------\n\nTITLE: Development Server URL\nDESCRIPTION: Local development server URL for accessing the documentation\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhttp://localhost:5173/docs/\n```\n\n----------------------------------------\n\nTITLE: GitHub Access Token Error Message\nDESCRIPTION: Error message displayed when deployment fails due to GitHub access token retrieval issues. The error indicates a problem with the 'Issued at' claim timestamp format in the authentication assertion.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/troubleshoot/applications/failed-to-get-token.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n'Issued at' claim (iat) must be an Integer representing the time that assertation issued.\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Developedbyed Overview in HTML\nDESCRIPTION: This HTML code embeds a YouTube video player for a 20-minute overview of Coolify by Developedbyed.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/get-started/videos.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe\n  width=\"560\"\n  height=\"315\"\n  src=\"https://www.youtube.com/embed/ZZ1lnw8D3Qo?si=U5jfyp-wykHd1OTL\"\n  title=\"YouTube video player\"\n  frameborder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n  allowfullscreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Docker Authentication Error with GHCR\nDESCRIPTION: Error message shown when Docker cannot authenticate with GitHub Container Registry due to expired or invalid credentials.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/troubleshoot/docker/expired-github-personal-access-token.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n  Error response from daemon: Head \"https://ghcr.io/v2/coollabsio/coolify-helper/manifests/1.0.1\": unauthorized: authentication required\n```\n\n----------------------------------------\n\nTITLE: Configuring Start Command for Nuxt Server Build in package.json\nDESCRIPTION: Sets the 'start' script in package.json to run the Nuxt server build output. This allows Nixpacks to automatically use it as the start command.\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/docs/applications/nuxt.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"start\": \"node .output/server/index.mjs\"\n```\n\n----------------------------------------\n\nTITLE: Adding Zoomable Images in Vue\nDESCRIPTION: Vue component usage for adding zoomable images in the documentation\nSOURCE: https://github.com/coollabsio/documentation-coolify/blob/main/readme.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ZoomableImage src=\"path-to-the-image.webp\" />\n```"
  }
]