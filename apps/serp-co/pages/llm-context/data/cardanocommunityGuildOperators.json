[
  {
    "owner": "cardano-community",
    "repo": "guild-operators",
    "content": "TITLE: CNTools Pool Registration Options\nDESCRIPTION: This text describes the options presented during pool registration in CNTools, including setting the pledge, margin, cost, metadata URL, pool name, ticker, description, and homepage. It also includes the JSON format expected for the pool metadata.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/cntools-common.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n >> POOL >> REGISTER\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOnline mode  -  The default mode to use if all keys are available\n\nHybrid mode  -  1) Go through the steps to build a transaction file\n 2) Copy the built tx file to an offline node\n 3) Sign it using 'Sign Tx' with keys on offline node\n (CNTools started in offline mode '-o' without node connection)\n 4) Copy the signed tx file back to the online node and submit using 'Submit Tx'\n\nSelected value: [o] Online\n\n# Select pool\nSelected pool: TEST\n\n# Pool Parameters\npress enter to use default value\n\nPledge (in Ada, default: 50,000):\nMargin (in %, default: 7.5):\nCost (in Ada, minimum: 340, default: 340):\n\n# Pool Metadata\n\nEnter Pool's JSON URL to host metadata file - URL length should be less than 64 chars (default: https://foo.bat/poolmeta.json):\n\nEnter Pool's Name (default: TEST):\nEnter Pool's Ticker , should be between 3-5 characters (default: TEST):\nEnter Pool's Description (default: No Description):\nEnter Pool's Homepage (default: https://foo.com):\n\nOptionally set an extended metadata URL?\nSelected value: [n] No\n{\n \"name\": \"TEST\",\n \"ticker\": \"TEST\",\n \"description\": \"No Description\",\n \"homepage\": \"https://foo.com\",\n \"nonce\": \"1613146429\"\n}\n\nPlease host file /opt/cardano/guild/priv/pool/TEST/poolmeta.json as-is at https://foo.bat/poolmeta.json\n```\n\n----------------------------------------\n\nTITLE: Generating Cardano Wallet Recovery Phrase\nDESCRIPTION: This command generates a new mnemonic recovery phrase, which can be used to restore a wallet. The output is a string of 15-24 words.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/wallet.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncardano-wallet recovery-phrase generate\n# false brother typical saddle settle phrase foster sauce ask sunset firm gate service render burger\n```\n\n----------------------------------------\n\nTITLE: Starting Cardano Node Interactively\nDESCRIPTION: This bash script navigates to the scripts directory within the CNODE_HOME directory and executes the cnode.sh script.  It is used to start the Cardano node interactively for testing and verification after modifying configuration files.  Ensure that CNODE_HOME environment variable is set.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/node-cli.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\ncd \"${CNODE_HOME}\"/scripts\n./cnode.sh\n```\n\n----------------------------------------\n\nTITLE: Preparing DB for Sync (Bash)\nDESCRIPTION: Prepares the PostgreSQL database for synchronization by creating it using `scripts/postgresql-setup.sh`. It is expected that `PGPASSFILE` environment variable is already set. Includes a comment about using `--recreatedb` instead of `--createdb` when encountering breaking changes.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/dbsync.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/git/cardano-db-sync\n# scripts/postgresql-setup.sh --dropdb #if exists already, will fail if it doesnt - thats OK\nscripts/postgresql-setup.sh --createdb\n# Password:\n# Password:\n# All good!\n```\n\n----------------------------------------\n\nTITLE: Verifying Cardano Node Installation (Bash)\nDESCRIPTION: This snippet executes `cardano-cli` and `cardano-node` to verify the installation. It checks the version and git revision, ensuring the correct binaries are installed and working.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/node-cli.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncardano-cli version\n# cardano-cli 10.x.x - linux-x86_64 - ghc-8.10\n# git rev <...>\ncardano-node version\n# cardano-node 10.x.x - linux-x86_64 - ghc-8.10\n# git rev <...>\n```\n\n----------------------------------------\n\nTITLE: CNCLI Usage Instructions - Shell\nDESCRIPTION: This code snippet provides usage instructions for the `cncli.sh` script. It lists available operations, such as `sync`, `leaderlog`, `validate`, `ptsendtip`, `ptsendslots`, `init`, and `migrate`, along with their respective sub-arguments. These operations allow users to interact with the Cardano node for various purposes, including block synchronization, leaderlog calculation, block validation, and PoolTool integration.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/cncli.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nUsage: cncli.sh [operation <sub arg>]\nScript to run CNCLI, best launched through systemd deployed by 'deploy-as-systemd.sh'\n\nsync        Start CNCLI chainsync process that connects to cardano-node to sync blocks stored in SQLite DB (deployed as service)\nleaderlog   One-time leader schedule calculation for current epoch, then continuously monitors and calculates schedule for coming epochs, 1.5 days before epoch boundary on the mainnet (deployed as service)\n  force     Manually force leaderlog calculation and overwrite even if already done, exits after leaderlog is calculated\nvalidate    Continuously monitor and confirm that the blocks made actually was accepted and adopted by chain (deployed as service)\n  all       One-time re-validation of all blocks in blocklog db\n  epoch     One-time re-validation of blocks in blocklog db for the specified epoch \nptsendtip   Send node tip to PoolTool for network analysis and to show that your node is alive and well with a green badge (deployed as service)\nptsendslots Securely sends PoolTool the number of slots you have assigned for an epoch and validates the correctness of your past epochs (deployed as service)\ninit        One-time initialization adding all minted and confirmed blocks to blocklog\nmigrate     One-time migration from old blocklog (cntoolsBlockCollector) to new format (post cncli)\n  path      Path to the old cntoolsBlockCollector blocklog folder holding json files with blocks created\n```\n\n----------------------------------------\n\nTITLE: Starting Cardano Node (Bash)\nDESCRIPTION: This snippet illustrates how to start the Cardano node using the `cnode.sh` script.  The script automatically determines whether to start the node as a relay or block producer based on the presence of pool keys.  It relies on the `CNODE_HOME` environment variable.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/node-cli.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n######################################\n# User Variables - Change as desired #\n# Common variables set in env file   #\n######################################\n\n#CPU_CORES=4            # Number of CPU cores cardano-node process has access to (please don't set higher than physical core count, 4 recommended)\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd \"${CNODE_HOME}\"/scripts\n./cnode.sh\n```\n\n----------------------------------------\n\nTITLE: Downloading topologyUpdater.sh and env files - Bash\nDESCRIPTION: This snippet downloads the `topologyUpdater.sh` and `env` files from the cardano-community/guild-operators repository. It then sets the correct permissions for the `topologyUpdater.sh` script and executes it. This allows the relay node to connect to the central topology service.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/topologyupdater.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $CNODE_HOME/scripts\ncurl -s -o topologyUpdater.sh https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/topologyUpdater.sh\ncurl -s -o env https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/env\nchmod 750 topologyUpdater.sh\n./topologyUpdater.sh\n```\n\n----------------------------------------\n\nTITLE: Building Cardano Node (Bash)\nDESCRIPTION: This snippet fetches tags and submodules, pulls the latest changes, and checks out the latest released version of cardano-node.  It then executes the `cabal-build-all.sh` script to compile the node, potentially using the system libsodium. The binaries are then copied to `~/.local/bin`.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/node-cli.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch --tags --recurse-submodules --all\ngit pull\n# Replace tag against checkout if you do not want to build the latest released version, we recommend using battle tested node versions - which may not always be latest\ngit checkout $(curl -sLf https://api.github.com/repos/intersectmbo/cardano-node/releases/latest | jq -r .tag_name)\n\n# Use `-l` argument if you'd like to use system libsodium instead of IOG fork of libsodium while compiling\n$CNODE_HOME/scripts/cabal-build-all.sh\n```\n\n----------------------------------------\n\nTITLE: Updating DBSync Version (Bash)\nDESCRIPTION: Updates the dbsync version. It includes shutting down dbsync, updating binaries, pulling and checking out to the desired version, rebuilding (if major version update), clearing the ledger-state directory (if `cardano-node` ledger-state schema has changed), testing the startup manually, and starting the systemd service.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/dbsync.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/git/cardano-db-sync\ngit pull\ngit checkout 13.6.0.5\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Variables in Bash\nDESCRIPTION: This bash snippet defines and allows users to configure various environment variables for a Cardano node. It includes settings for node port, home directory, socket path, topology, logging directories, and update checks. The variables control core node functionalities such as EKG/Prometheus metrics, ledger state timeouts, and wallet/pool file naming conventions. It is important to configure the `CNODE_PORT` for all installs, and `POOL_NAME` if running as a block producer.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/env.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n######################################\n# User Variables - Change as desired #\n# Leave as is if unsure              #\n######################################\n\n#CCLI=\"${HOME}/.local/bin/cardano-cli\"                  # Override automatic detection of path to cardano-cli executable\n#CNCLI=\"${HOME}/.local/bin/cncli\"                       # Override automatic detection of path to cncli executable (https://github.com/AndrewWestberg/cncli)\n#CNODE_HOME=\"/opt/cardano/cnode\"                        # Override default CNODE_HOME path (defaults to /opt/cardano/cnode)\nCNODE_PORT=6000                                         # Set node port\n#CONFIG=\"${CNODE_HOME}/files/config.json\"               # Override automatic detection of node config path\n#SOCKET=\"${CNODE_HOME}/sockets/node.socket\"             # Override automatic detection of path to socket\n#TOPOLOGY=\"${CNODE_HOME}/files/topology.json\"           # Override default topology.json path\n#LOG_DIR=\"${CNODE_HOME}/logs\"                           # Folder where your logs will be sent to (must pre-exist)\n#DB_DIR=\"${CNODE_HOME}/db\"                              # Folder to store the cardano-node blockchain db\n#UPDATE_CHECK=\"Y\"                                       # Check for updates to scripts, it will still be prompted before proceeding (Y|N).\n#TMP_DIR=\"/tmp/cnode\"                                   # Folder to hold temporary files in the various scripts, each script might create additional subfolders\n#EKG_HOST=127.0.0.1                                     # Set node EKG host IP\n#EKG_PORT=12788                                         # Override automatic detection of node EKG port\n#PROM_HOST=127.0.0.1                                    # Set node Prometheus host IP\n#PROM_PORT=12798                                        # Override automatic detection of node Prometheus port\n#EKG_TIMEOUT=3                                          # Maximum time in seconds that you allow EKG request to take before aborting (node metrics)\n#CURL_TIMEOUT=10                                        # Maximum time in seconds that you allow curl file download to take before aborting (GitHub update process)\n#BLOCKLOG_DIR=\"${CNODE_HOME}/guild-db/blocklog\"         # Override default directory used to store block data for core node\n#BLOCKLOG_TZ=\"UTC\"                                      # TimeZone to use when displaying blocklog - https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n#SHELLEY_TRANS_EPOCH=208                                # Override automatic detection of shelley epoch start, e.g 208 for mainnet\n#TG_BOT_TOKEN=\"\"                                        # Uncomment and set to enable telegramSend function. To create your own BOT-token and Chat-Id follow guide at:\n#TG_CHAT_ID=\"\"                                          # https://cardano-community.github.io/guild-operators/Scripts/sendalerts\n#USE_EKG=\"N\"                                            # Use EKG metrics from the node instead of Promethus. Promethus metrics(default) should yield slightly better performance\n#TIMEOUT_LEDGER_STATE=300                               # Timeout in seconds for querying and dumping ledger-state\n#IP_VERSION=4                                           # The IP version to use for push and fetch, valid options: 4 | 6 | mix (Default: 4)\n\n#WALLET_FOLDER=\"${CNODE_HOME}/priv/wallet\"              # Root folder for Wallets\n#POOL_FOLDER=\"${CNODE_HOME}/priv/pool\"                  # Root folder for Pools\n                                                        # Each wallet and pool has a friendly name and subfolder containing all related keys, certificates, ...\n#POOL_NAME=\"\"                                           # Set the pool's name to run node as a core node (the name, NOT the ticker, ie folder name)\n\n#WALLET_PAY_VK_FILENAME=\"payment.vkey\"                  # Standardized names for all wallet related files\n#WALLET_PAY_SK_FILENAME=\"payment.skey\"\n#WALLET_HW_PAY_SK_FILENAME=\"payment.hwsfile\"\n#WALLET_PAY_ADDR_FILENAME=\"payment.addr\"\n#WALLET_BASE_ADDR_FILENAME=\"base.addr\"\n#WALLET_STAKE_VK_FILENAME=\"stake.vkey\"\n#WALLET_STAKE_SK_FILENAME=\"stake.skey\"\n#WALLET_HW_STAKE_SK_FILENAME=\"stake.hwsfile\"\n#WALLET_STAKE_ADDR_FILENAME=\"reward.addr\"\n#WALLET_STAKE_CERT_FILENAME=\"stake.cert\"\n#WALLET_STAKE_DEREG_FILENAME=\"stake.dereg\"\n#WALLET_DELEGCERT_FILENAME=\"delegation.cert\"\n\n#POOL_ID_FILENAME=\"pool.id\"                             # Standardized names for all pool related files\n#POOL_HOTKEY_VK_FILENAME=\"hot.vkey\"\n#POOL_HOTKEY_SK_FILENAME=\"hot.skey\"\n#POOL_COLDKEY_VK_FILENAME=\"cold.vkey\"\n#POOL_COLDKEY_SK_FILENAME=\"cold.skey\"\n#POOL_OPCERT_COUNTER_FILENAME=\"cold.counter\"\n#POOL_OPCERT_FILENAME=\"op.cert\"\n#POOL_VRF_VK_FILENAME=\"vrf.vkey\"\n#POOL_VRF_SK_FILENAME=\"vrf.skey\"\n#POOL_CONFIG_FILENAME=\"pool.config\"\n#POOL_REGCERT_FILENAME=\"pool.cert\"\n#POOL_CURRENT_KES_START=\"kes.start\"\n#POOL_DEREGCERT_FILENAME=\"pool.dereg\"\n\n#ASSET_FOLDER=\"${CNODE_HOME}/priv/asset\"                # Root folder for Multi-Assets containing minted assets and subfolders for Policy IDs\n#ASSET_POLICY_VK_FILENAME=\"policy.vkey\"                 # Standardized names for all multi-asset related files\n#ASSET_POLICY_SK_FILENAME=\"policy.skey\"\n#ASSET_POLICY_SCRIPT_FILENAME=\"policy.script\"           # File extension '.script' mandatory\n#ASSET_POLICY_ID_FILENAME=\"policy.id\"\n```\n\n----------------------------------------\n\nTITLE: CNCLI Configuration Variables - Shell\nDESCRIPTION: This code snippet defines the configurable variables within the `cncli.sh` script. These variables control aspects such as pool identification, API keys for PoolTool integration, network settings, and timing parameters for leaderlog calculations and block validation. The variables can be overridden to customize the script's behavior to suit specific pool configurations and operational requirements.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/cncli.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n#POOL_ID=\"\"                               # Automatically detected if POOL_NAME is set in env. Required for leaderlog calculation & pooltool sendtip, lower-case hex pool id\n#POOL_VRF_SKEY=\"\"                         # Automatically detected if POOL_NAME is set in env. Required for leaderlog calculation, path to pool's vrf.skey file\n#POOL_VRF_VKEY=\"\"                         # Automatically detected if POOL_NAME is set in env. Required for block validation, path to pool's vrf.vkey file\n#PT_API_KEY=\"\"                            # POOLTOOL sendtip: set API key, e.g \"a47811d3-0008-4ecd-9f3e-9c22bdb7c82d\"\n#POOL_TICKER=\"\"                           # POOLTOOL sendtip: set the pools ticker, e.g. \"TCKR\"\n#PT_HOST=\"127.0.0.1\"                      # POOLTOOL sendtip: connect to a remote node, preferably block producer (default localhost)\n#PT_PORT=\"${CNODE_PORT}\"                  # POOLTOOL sendtip: port of node to connect to (default is CNODE_PORT from the env file)\n#CNCLI_DIR=\"${CNODE_HOME}/guild-db/cncli\" # path to the directory for cncli sqlite db\n#SLEEP_RATE=60                            # CNCLI leaderlog/validate: time to wait until next check (in seconds)\n#CONFIRM_SLOT_CNT=600                     # CNCLI validate: require at least these many slots to have passed before validating\n#CONFIRM_BLOCK_CNT=15                     # CNCLI validate: require at least these many blocks on top of minted before validating\n#TIMEOUT_LEDGER_STATE=300                 # CNCLI leaderlog: timeout in seconds for ledger-state query\n#BATCH_AUTO_UPDATE=N                      # Set to Y to automatically update the script if a new version is available without user interaction\n```\n\n----------------------------------------\n\nTITLE: Starting CNTools in Offline Mode\nDESCRIPTION: This snippet demonstrates how to start CNTools in offline mode by executing the `cntools.sh` script with the `-o` flag from the `$CNODE_HOME/scripts/` directory. Offline mode restricts access to features that require network connectivity, focusing on transaction signing and key management.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/cntools.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $CNODE_HOME/scripts\n./cntools.sh -o\n```\n\n----------------------------------------\n\nTITLE: Restoring DB Using Snapshot (Bash)\nDESCRIPTION: Downloads and restores a database snapshot for mainnet/preview/preprod instance of dbsync. It uses `curl` to download the snapshot, removes the existing ledger state directory, creates a new one, and then restores the snapshot using `scripts/postgresql-setup.sh`.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/dbsync.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Replace the actual link below with the latest one from release notes\ncurl -fL 'https://share.koios.rest/api/public/dl/xFdZDfM4/dbsync/mainnet-dbsyncsnap-latest.tgz' -o /tmp/dbsyncsnap.tgz\nrm -rf ${CNODE_HOME}/guild-db/ledger-state ; mkdir -p ${CNODE_HOME}/guild-db/ledger-state\ncd -; cd ~/git/cardano-db-sync\nscripts/postgresql-setup.sh --restore-snapshot /tmp/dbsyncsnap.tgz ${CNODE_HOME}/guild-db/ledger-state\n# The restore may take a while, please be patient and do not interrupt the restore process. Once restore is successful, you may delete the downloaded snapshot as below:\n#   rm -f /tmp/dbsyncsnap.tgz\n```\n\n----------------------------------------\n\nTITLE: Deploying Cardano Node as Systemd Service\nDESCRIPTION: This bash script navigates to the scripts directory within the CNODE_HOME directory and executes the cnode.sh script with the -d flag.  This deploys the cnode.service as a systemd service, enabling the node to be managed by systemd.  Ensure that CNODE_HOME environment variable is set. Similarly it deploys the cnode-submit-api.service as a systemd service.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/node-cli.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\ncd $CNODE_HOME/scripts\n./cnode.sh -d\n\n./submitapi.sh -d\n```\n\n----------------------------------------\n\nTITLE: Starting Cardano Wallet\nDESCRIPTION: This command starts the cardano-wallet server, connecting it to a running cardano-node instance. It specifies the node socket, network type (mainnet), and database location. The `--node-socket` flag points to the cardano-node's socket file, and `--database` specifies the directory where the wallet data will be stored.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/wallet.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncardano-wallet serve /\n    --node-socket $CNODE_HOME/sockets/node.socket /\n    --mainnet / # if using the testnet flag you also need to specify the testnet shelley-genesis.json file\n    --database $CNODE_HOME/priv/wallet\n```\n\n----------------------------------------\n\nTITLE: Initializing Mithril Environment\nDESCRIPTION: This snippet initializes the Mithril environment by creating a `mithril.env` file with necessary environment variables. It uses the `environment setup` command.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/mithril-client.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./mithril-client.sh environment setup\n```\n\n----------------------------------------\n\nTITLE: Starting Cardano Submit API Interactively\nDESCRIPTION: This bash script navigates to the scripts directory within the CNODE_HOME directory and executes the submitapi.sh script.  This starts the cardano-submit-api, which allows submitting transactions over a Web API.  Ensure that CNODE_HOME environment variable is properly set.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/node-cli.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\ncd $CNODE_HOME/scripts\n./submitapi.sh\n```\n\n----------------------------------------\n\nTITLE: Custom Cardano Node Docker Run Command\nDESCRIPTION: This `docker run` command sets up a customized Cardano node container. It configures container name, port mapping, network settings, security options, volume mounts for sockets, configuration files, and database, and specifies the Docker image to use. Ensure the specified paths for volumes exist on the host system.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/docker/tips.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --init -itd  \n-name Relay                                   # Optional (recommended for quick access): set a name for your newly created container.\n-p 9000:6000                                  # Optional: to expose the internal container's port (6000) to the host <IP> port 9000\n-e NETWORK=mainnet                            # Mandatory: mainnet / preprod / guild-mainnet / guild\n--security-opt=no-new-privileges              # Option to prevent privilege escalations\n-v <YourNetPath>:/opt/cardano/cnode/sockets   # Optional: useful to share the node socket with other containers\n-v <YourCfgPath>:/opt/cardano/cnode/priv      # Optional: if used has to contain all the sensitive keys needed to run a node as core\n-v <YourDBbk>:/opt/cardano/cnode/db           # Optional: if not set a fresh DB will be downloaded from scratch\ncardanocommunity/cardano-node:latest          # Mandatory: image to run\n```\n\n----------------------------------------\n\nTITLE: Monitoring Cardano Node Logs with logMonitor.sh\nDESCRIPTION: logMonitor.sh is a Bash script designed to monitor JSON log files created by cardano-node, specifically for traces related to leader slots and block creation. It complements CNCLI scripts for a complete view of block production.  The script is typically run as a background process using systemd.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/logmonitor.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n`logMonitor.sh`\n```\n\n----------------------------------------\n\nTITLE: Building Cardano DB Sync (Bash)\nDESCRIPTION: Fetches all tags, pulls the latest changes, checks out the latest released version using `curl` and `jq`, and then builds the Cardano DB Sync tool using the `cabal-build-all.sh` script. Includes conditional comments for CentOS 7.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/dbsync.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch --tags --all\ngit pull\n# Include the cardano-crypto-praos and libsodium components for db-sync\n# On CentOS 7 (GCC 4.8.5) we should also do\n# echo -e \"package cryptonite\\n  flags: -use_target_attributes\" >> cabal.project.local\n# Replace tag against checkout if you do not want to build the latest released version\ngit checkout $(curl -sLf https://api.github.com/repos/intersectmbo/cardano-db-sync/releases/latest | jq -r .tag_name)\n# Use `-l` argument if you'd like to use system libsodium instead of IOG fork of libsodium while compiling\n$CNODE_HOME/scripts/cabal-build-all.sh\n```\n\n----------------------------------------\n\nTITLE: Running Cardano Node with Custom Config using Docker\nDESCRIPTION: This command starts a Cardano node in public mode with a custom configuration file.  It defines the container name, network, volume mounts, exposes port 6000 for network communication, and specifies the location of the custom configuration file using the CONFIG environment variable. This configuration allows retaining configurations after container updates.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/docker/run.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --init -dit\n--name <YourCName>\n--security-opt=no-new-privileges\n-e NETWORK=mainnet\n-e CONFIG=/opt/cardano/cnode/priv/<your own configuration files>.yml\n-p 6000:6000\n-v <your_custom_path>:/opt/cardano/cnode/priv\n-v <your_custom_db_path>:/opt/cardano/cnode/db\ncardanocommunity/cardano-node\n```\n\n----------------------------------------\n\nTITLE: Downloading and Deploying Guild Scripts\nDESCRIPTION: This snippet downloads the `guild-deploy.sh` script, sets execute permissions, and then executes it to perform an update in place of current scripts on mainnet, updating binaries along with re-compiling libsodium dependencies. No config files or user variables in scripts are overwritten.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/upgrade.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir \"$HOME/tmp\";cd \"$HOME/tmp\"\ncurl -sfS -o guild-deploy.sh https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/guild-deploy.sh && chmod 700 guild-deploy.sh\n./guild-deploy.sh -s dl -b master -n mainnet -t cnode -p /opt/cardano\n```\n\n----------------------------------------\n\nTITLE: Building Cardano Wallet from Source\nDESCRIPTION: This snippet fetches tags and pulls the latest changes, then checks out the latest release tag. After that, it executes the `cabal-build-all.sh` script, expected to be located within the `$CNODE_HOME/scripts` directory, to compile the cardano-wallet binaries. The compiled binaries are then copied to the `~/.local/bin` directory.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/wallet.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch --tags --all\ngit pull\n# Replace tag against checkout if you do not want to build the latest released version\ngit checkout $(curl -s https://api.github.com/repos/cardano-foundation/cardano-wallet/releases/latest | jq -r .tag_name)\n$CNODE_HOME/scripts/cabal-build-all.sh\n```\n\n----------------------------------------\n\nTITLE: Deploying Mithril Signer (Bash)\nDESCRIPTION: This command deploys the Mithril Signer using the `mithril-signer.sh` script with the `-d` flag. It creates a systemd service for the Mithril signer. It requires the `mithril-signer.sh` script to be present in the current directory and a correctly configured `mithril.env` file.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Mithril/mithril-overview.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./mithril-signer.sh -d\n```\n\n----------------------------------------\n\nTITLE: Deploy Nginx Mithril Relay Load Balancer (Bash)\nDESCRIPTION: This script deploys an Nginx load balancer as a sidecar for Mithril relays. It prompts the user for the IP addresses of the relays and the load balancer, and optionally the listening port. It then starts the Nginx service.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Mithril/mithril-overview.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./mithril-relay.sh -l\n\nInstalling nginx load balancer\nEnter the IP address of a relay: 4.5.6.7\nAre there more relays? (y/n) y\nEnter the IP address of a relay: 8.9.10.11\nAre there more relays? (y/n) n\nEnter the IP address of the load balancer (press Enter to use default 127.0.0.1):\nUsing IP address 127.0.0.1 for the load balancer configuration.\nEnter the relays listening port (press Enter to use default 3132):\nUsing port 3132 for relays listening port.\nStarting Mithril relay sidecar (nginx load balancer)\n```\n\n----------------------------------------\n\nTITLE: Entering Docker Container\nDESCRIPTION: This command allows you to enter a running Docker container's bash environment interactively. Replace `CN` with the actual name of your container. This enables you to use the Koios tools and manage the Cardano node within the container.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/docker/tips.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it CN bash\n```\n\n----------------------------------------\n\nTITLE: Crontab entry for topologyUpdater.sh - Bash\nDESCRIPTION: This snippet demonstrates how to schedule the `topologyUpdater.sh` script to run as a cron job. The cron expression `25 * * * *` executes the script once every hour at minute 25. This ensures that the relay node periodically updates its topology file.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/topologyupdater.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n25 * * * * /opt/cardano/cnode/scripts/topologyUpdater.sh\n```\n\n----------------------------------------\n\nTITLE: Access Postgres Credentials\nDESCRIPTION: This snippet demonstrates how to access Postgres credentials and connect to the database. It assumes that the `CNODE_HOME` environment variable is set and that the `.pgpass` file contains the necessary credentials.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/grest.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $CNODE_HOME/priv\nPGPASSFILE=$CNODE_HOME/priv/.pgpass\npsql cexplorer\n```\n\n----------------------------------------\n\nTITLE: Testing and Deploying DBSync (Bash)\nDESCRIPTION: Tests running dbsync manually and then deploys it as a systemd service.  It exports the `PGPASSFILE` environment variable, executes the `dbsync.sh` script, and then deploys it as a systemd service. Includes instructions for starting the service.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/dbsync.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd $CNODE_HOME/scripts\nexport PGPASSFILE=$CNODE_HOME/priv/.pgpass\n./dbsync.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd $CNODE_HOME/scripts\n./dbsync.sh -d\n# Deploying cnode-dbsync.service as systemd service..\n# cnode-dbsync.service deployed successfully!!\n```\n\n----------------------------------------\n\nTITLE: Monitoring Cardano Node with gLiveView\nDESCRIPTION: This bash script navigates to the scripts directory within the CNODE_HOME directory and executes the gLiveView.sh script.  This launches gLiveView, a tool for monitoring the Cardano node's performance and status.  Ensure that CNODE_HOME environment variable is set.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/node-cli.md#_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\ncd $CNODE_HOME/scripts\n./gLiveView.sh\n```\n\n----------------------------------------\n\nTITLE: Running Cardano Node in Public Mode using Docker\nDESCRIPTION: This command starts a Cardano node in public mode for use as a node relay.  It defines the container name, network, volume mounts, and exposes port 6000 for network communication. It facilitates node relay functionality.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/docker/run.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --init -dit\n--name <YourCName>\n--security-opt=no-new-privileges\n-e NETWORK=mainnet\n-p 6000:6000\n-v <your_custom_path>:/opt/cardano/cnode/priv\n-v <your_custom_db_path>:/opt/cardano/cnode/db\ncardanocommunity/cardano-node\n```\n\n----------------------------------------\n\nTITLE: Updating Mithril Signer Environment (Bash)\nDESCRIPTION: This command updates the `mithril.env` file with Mithril Signer environment variables using the `mithril-signer.sh` script. It prompts for the Mithril Relay IP address and port. It requires the `mithril-signer.sh` script to be present in the current directory.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Mithril/mithril-overview.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./mithril-signer.sh -e\n```\n\n----------------------------------------\n\nTITLE: Validating DBSync Installation (Bash)\nDESCRIPTION: Connects to the PostgreSQL database using `psql` and executes SQL queries to validate the installation. It exports the `PGPASSFILE` environment variable and then connects to the `cexplorer` database.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/dbsync.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport PGPASSFILE=$CNODE_HOME/priv/.pgpass\npsql cexplorer\n```\n\n----------------------------------------\n\nTITLE: Executing Monitoring Setup Script (setup_mon.sh) - Bash\nDESCRIPTION: This code snippet demonstrates how to execute the `setup_mon.sh` script to install and configure Prometheus and Grafana. It includes commands to check the usage parameters and then executes the script. The script requires sudo access to deploy services as systemd services.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/monitoring.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd $CNODE_HOME/scripts\n# To check Usage parameters:\n# ./setup_mon.sh -h\n#Usage: setup_mon.sh [-d directory] [-h hostname] [-p port]\n#Setup monitoring using Prometheus and Grafana for Cardano Node\n#-d directory      Directory where you'd like to deploy the packages for prometheus , node exporter and grafana\n#-i IP/hostname    IPv4 address or a FQDN/DNS name where your cardano-node (relay) is running (check for hasPrometheus in config.json; eg: 127.0.0.1 if same machine as cardano-node)\n#-p port           Port at which your cardano-node is exporting stats (check for hasPrometheus in config.json; eg: 12798)\n./setup_mon.sh\n# \n# Downloading prometheus v2.18.1...\n# Downloading grafana v7.0.0...\n# Downloading exporter v0.18.1...\n# Downloading grafana dashboard(s)...\n#   - SKYLight Monitoring Dashboard\n#   - IOHK Monitoring Dashboard\n# \n# NOTE: Could not create directory as rdlrt, attempting sudo ..\n# NOTE: No worries, sudo worked !! Moving on ..\n# Configuring components\n# Registering Prometheus as datasource in Grafana..\n# Creating service files as root..\n# \n# =====================================================\n# Installation is completed\n# =====================================================\n# \n# - Prometheus (default): http://127.0.0.1:9090/metrics\n#     Node metrics:       http://127.0.0.1:12798\n#     Node exp metrics:   http://127.0.0.1:9091\n# - Grafana (default):    http://0.0.0.0:5000\n# \n# \n# You need to do the following to configure grafana:\n# 0. The services should already be started, verify if you can login to grafana, and prometheus. If using 127.0.0.1 as IP, you can check via curl\n# 1. Login to grafana as admin/admin (http://0.0.0.0:5000)\n# 2. Add \"prometheus\" (all lowercase) datasource (http://127.0.0.1:9090)\n# 3. Create a new dashboard by importing dashboards (left plus sign).\n#   - Sometimes, the individual panel's \"prometheus\" datasource needs to be refreshed.\n# \n# Enjoy...\n# \n# Cleaning up...\n```\n\n----------------------------------------\n\nTITLE: Example Install using guild-deploy.sh (Bash)\nDESCRIPTION: This snippet demonstrates a typical example of installing most components using `guild-deploy.sh` without overwriting the static part of existing files for the preview network. It uses the `-s` flag to select specific components to install (pdlcowx) and specifies the network with the `-n` flag. It sources the .bashrc to update the environment variables.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/basics.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./guild-deploy.sh -b master -n preview -t cnode -s pdlcowx\n. \"${HOME}/.bashrc\"\n```\n\n----------------------------------------\n\nTITLE: Setup gRest with Overwrite\nDESCRIPTION: This script sets up gRest by overwriting all standard deployment tasks from a specified branch.  The script uses the `-f` flag to force overwrite, `-i prmcd` to reinstall all components (PostgREST, Reverse Proxy, Monitoring agent, and Configs), `-r` to reset the grest schema, `-q` to run all DB queries, and `-b koios-1.0.9` to specify the branch.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/grest.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./setup-grest.sh -f -i prmcd -r -q -b koios-1.0.9\n```\n\n----------------------------------------\n\nTITLE: Signing Pool ID with jcli\nDESCRIPTION: This code snippet demonstrates how to sign a pool ID using the `jcli` command-line tool and the owner's secret key from the Incentivized Testnet (ITN). The signed output is then displayed using `cat`. It requires `jcli` to be installed and configured, and the environment variable `$CNODE_HOME` to be set.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/itnwitness.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njcli key sign --secret-key ~/jormu/account/priv/owner.sk $CNODE_HOME/priv/pool/TEST/pool.id --output mainnet_pool.sig\ncat mainnet_pool.sig\n# ed25519_sig1sn32v3z...d72rg7rc6gs\n```\n\n----------------------------------------\n\nTITLE: Downloading and Preparing the Deployment Script (Bash)\nDESCRIPTION: This snippet downloads the `guild-deploy.sh` script from the specified URL, makes it executable, and saves it to a temporary directory. It requires `curl` to be installed.  The script automates the setup of pre-requisites for Linux systems.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/basics.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir \"$HOME/tmp\";cd \"$HOME/tmp\"\n# Install curl\n# CentOS / RedHat - sudo dnf -y install curl\n# Ubuntu / Debian - sudo apt -y install curl\ncurl -sS -o guild-deploy.sh https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/guild-deploy.sh\nchmod 755 guild-deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Cardano Wallet from Recovery Phrase\nDESCRIPTION: This command creates a new cardano-wallet from a provided recovery phrase.  It prompts the user for the recovery phrase and optionally a second factor and passphrase.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/wallet.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncardano-wallet wallet create from-recovery-phrase MyWalletName\n```\n\n----------------------------------------\n\nTITLE: Verifying token-metadata-creator installation\nDESCRIPTION: This snippet verifies that the `token-metadata-creator` tool is executable from anywhere in the system by running the command `token-metadata-creator -h`. The `-h` flag displays the help message, confirming that the tool is correctly installed and accessible.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/offchain-metadata-tools.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntoken-metadata-creator -h\n```\n\n----------------------------------------\n\nTITLE: Updating Node Configuration (Bash)\nDESCRIPTION: This snippet shows how to update the port number and pool name in the `$CNODE_HOME/scripts/env` file. It sets the `CNODEBIN`, `CCLI`, `CNODE_PORT`, and `POOL_NAME` variables.  This is important for configuring the node's network settings and pool affiliation.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/node-cli.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCNODEBIN=\"${HOME}/.local/bin/cardano-node\"\nCCLI=\"${HOME}/.local/bin/cardano-cli\"\nCNODE_PORT=6000\nPOOL_NAME=\"GUILD\"\n```\n\n----------------------------------------\n\nTITLE: Running Cardano Node in Private Mode using Docker\nDESCRIPTION: This command starts a Cardano node in private mode within a Docker container. It defines the container name, network, and volume mounts for persistent storage of private keys and the database. It is intended for pool and wallet management, and node testing.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/docker/run.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --init -dit\n--name <YourCName>\n--security-opt=no-new-privileges\n-e NETWORK=mainnet\n-v <your_custom_path>:/opt/cardano/cnode/priv\n-v <your_custom_db_path>:/opt/cardano/cnode/db\ncardanocommunity/cardano-node\n```\n\n----------------------------------------\n\nTITLE: Locating Cardano Binaries\nDESCRIPTION: This snippet uses the `whereis` command to locate the specified Cardano binaries. It aids in identifying the location of these binaries, which is helpful for troubleshooting path-related issues after an upgrade.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/upgrade.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwhereis bech32 cardano-address cardano-cli cardano-db-sync cardano-hw-cli cardano-node cardano-submit-api cncli ogmios\n```\n\n----------------------------------------\n\nTITLE: Verify PostgreSQL Login\nDESCRIPTION: This bash script sets up the PGPASSFILE and verifies login to the postgres instance as user 'postgres'. The <user> in the PGPASSFILE should match the OS user.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/postgres.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport PGPASSFILE=$CNODE_HOME/priv/.pgpass\necho \"/var/run/postgresql:5432:cexplorer:*:*\" > $PGPASSFILE\nchmod 0600 $PGPASSFILE\npsql postgres\n```\n\n----------------------------------------\n\nTITLE: Cardano Relay Topology Configuration\nDESCRIPTION: This is an example `topology.json` file for a Cardano relay node. It defines bootstrap peers, local roots for persistent connections, and public roots.  It includes settings for `advertise`, `trustable`, `hotValency`, `warmValency`, and `useLedgerAfterSlot` to control peer discovery and connection behavior.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/node-cli.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"bootstrapPeers\": [\n    {\n      \"address\": \"backbone.cardano.iog.io\",\n      \"port\": 3001\n    },\n    {\n      \"address\": \"backbone.mainnet.emurgornd.com\",\n      \"port\": 3001\n    },\n    {\n      \"address\": \"backbone.mainnet.cardanofoundation.org\",\n      \"port\": 3001\n    }\n  ],\n  \"localRoots\": [\n    {\n      \"accessPoints\": [\n        {\"address\": \"xx.xx.xx.xx\", \"port\": 6000 , \"description\": \"Core\"},\n        {\"address\": \"zz.zz.zz.zz\", \"port\": 6000 , \"description\": \"Relay2\"}\n      ],\n      \"advertise\": false,\n      \"trustable\": true,\n      \"hotValency\": 2\n    },\n    {\n      \"accessPoints\": [\n        {\"address\": \"node-dus.poolunder.com\",           \"port\": 6900, \"pool\": \"UNDR\",   \"location\": \"EU/DE/Dusseldorf\" },\n        {\"address\": \"node-syd.poolunder.com\",           \"port\": 6900, \"pool\": \"UNDR\",   \"location\": \"OC/AU/Sydney\" },\n        {\"address\": \"194.36.145.157\",                   \"port\": 6000, \"pool\": \"RDLRT\",  \"location\": \"EU/DE/Baden\" },\n        {\"address\": \"95.216.38.251\",                    \"port\": 6000, \"pool\": \"RDLRT\",  \"location\": \"EU/FI/Helsinki\" },\n        {\"address\": \"148.72.153.168\",                   \"port\": 16000, \"pool\": \"AAA\",   \"location\": \"NA/US/StLouis\" },\n        {\"address\": \"78.47.99.41\",                      \"port\": 6000, \"pool\": \"AAA\",    \"location\": \"EU/DE/Nuremberg\" },\n        {\"address\": \"relay1-pub.ahlnet.nu\",             \"port\": 2111, \"pool\": \"AHL\",    \"location\": \"EU/SE/Malmo\" },\n        {\"address\": \"relay2-pub.ahlnet.nu\",             \"port\": 2111, \"pool\": \"AHL\",    \"location\": \"EU/SE/Malmo\" },\n        {\"address\": \"relay1.clio.one\",                  \"port\": 6010, \"pool\": \"CLIO\",   \"location\": \"EU/IT/Milan\" },\n        {\"address\": \"relay2.clio.one\",                  \"port\": 6010, \"pool\": \"CLIO\",   \"location\": \"EU/IT/Bozlano\" },\n        {\"address\": \"relay3.clio.one\",                  \"port\": 6010, \"pool\": \"CLIO\",   \"location\": \"EU/IT/Bozlano\" }\n      ],\n      \"advertise\": false,\n      \"trustable\": false,\n      \"hotValency\": 5,\n      \"warmValency\": 10\n    }\n  ],\n  \"publicRoots\": [\n    {\n      \"accessPoints\": [],\n      \"advertise\": false\n    }\n  ],\n  \"useLedgerAfterSlot\": 128908821\n}\n```\n\n----------------------------------------\n\nTITLE: Mithril Signer Usage Help\nDESCRIPTION: Displays the usage instructions for the `mithril-signer.sh` script. It lists available command-line options and their respective functions, such as deploying as a systemd service, updating the environment file, and stopping the signer.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/mithril-signer.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage: mithril-signer.sh [-d] [-D] [-e] [-k] [-r] [-s] [-u] [-h]\nA script to setup, run and verify Cardano Mithril Signer\n\n-d    Deploy mithril-signer as a systemd service\n-D    Run mithril-signer as a daemon\n-e    Update mithril environment file\n-k    Stop signer using SIGINT\n-r    Verify signer registration\n-s    Verify signer signature\n-u    Skip update check\n-h    Show this help text\n```\n\n----------------------------------------\n\nTITLE: ITN Rewards Conversion Workflow\nDESCRIPTION: This Mermaid diagram visually represents the process of converting ITN keys to Shelley stake keys and creating a CNTools wallet. It shows the flow from ITN owner keys through key conversion using `cardano-cli` to the creation of stake keys, payment keys, reward addresses, base addresses, and finally, the CNTools wallet.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/itnrewards.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n    A([\"itnRewards.sh\"])\n    A --x B([\"ITN Owner skey (ed25519[e]_sk)..\"]) --x D([\"cardano-cli shelley key <br>convert-itn-key ..\"])\n    A --x C([\"ITN Owner vkey (ed25519_pk)..\"]) --x D\n    D --x E([\"Stake skey/vkey\"]) --x L\n    A --x F([\"cardano-cli shelley ..\"])\n    F --x G([\"Payment skey/vkey/addr\"]) --x L\n    F --x H([\"Reward addr\"]) --x L\n    F --x I([\"Base addr\"]) --x L\n    L[CNTools Wallet]\n    ;\n```\n\n----------------------------------------\n\nTITLE: Cloning Cardano DB Sync Repository (Bash)\nDESCRIPTION: Clones the Cardano DB Sync repository from GitHub into the `$HOME/git` directory and navigates into the cloned directory. This is the first step in setting up the Cardano DB Sync tool.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/dbsync.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/git\ngit clone https://github.com/intersectmbo/cardano-db-sync\ncd cardano-db-sync\n```\n\n----------------------------------------\n\nTITLE: CNTools Mnemonic Input Prompt\nDESCRIPTION: This prompt appears in CNTools when importing a wallet using a mnemonic phrase. It asks for the wallet name and the mnemonic phrase, separated by spaces. Users should review the notes before proceeding.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/cntools-common.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n >> WALLET >> IMPORT >> MNEMONIC\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nName of imported wallet: TEST\n\n24 or 15 word mnemonic(space separated):\n```\n\n----------------------------------------\n\nTITLE: Install PostgreSQL Server (Debian/Ubuntu)\nDESCRIPTION: This script installs PostgreSQL 17 on Debian/Ubuntu systems. It updates the package list, adds the PostgreSQL repository, and installs the necessary packages.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/postgres.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Determine OS platform\nOS_ID=$( (grep -i ^ID_LIKE= /etc/os-release || grep -i ^ID= /etc/os-release) | cut -d= -f 2)\nDISTRO=$(grep -i ^NAME= /etc/os-release | cut -d= -f 2)\n\nif [ -z \"${OS_ID##*debian*}\" ]; then\n  #Debian/Ubuntu\n  sudo apt install curl ca-certificates -y\n  sudo install -d /usr/share/postgresql-common/pgdg\n  sudo curl -s -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc\n  sudo sh -c 'echo \"deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\n  sudo apt-get update\n  sudo apt-get -y install postgresql-17 postgresql-server-dev-17 postgresql-contrib libghc-hdbc-postgresql-dev\n  sudo systemctl enable postgresql\nelse\n  echo \"We have no automated procedures for this ${DISTRO} system\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Building Cardano Node Docker Image (Linux)\nDESCRIPTION: This command builds a Docker image for a Cardano node using the `docker build` command. It uses the content of the `dockerfile_bin` as the Dockerfile and tags the resulting image as `cardanocommunity/cardano-node:latest`. Requires Docker to be installed. It reads the dockerfile from stdin.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/docker/build.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t cardanocommunity/cardano-node:latest - < dockerfile_bin\n```\n\n----------------------------------------\n\nTITLE: Mermaid Graph of Cardano Components\nDESCRIPTION: This Mermaid code defines a graph illustrating the relationships between various Cardano components such as Node, Ogmios, gRest/Koios, DBSync, Wallet, CNTools, Tx Submit API, GraphQL, OfflineMetadataTools, gLiveView, cardano-signer, and PostgreSQL.  It visualizes how these components interact for different functionalities like HD Wallet interaction, blockchain exploration, pool operations, custom asset creation, node monitoring, and data signing/verification.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/build.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n  A([Interact with HD Wallets<br/>locally])\n  B([Explore blockchain<br/>locally])\n  C([Easy pool-ops and<br/>fund management])\n  D([Create Custom Assets])\n  E([Monitor node <br/>using Terminal UI])\n  F([Sign/verify any data<br/>using crypto keys])\n  N(Node)\n  O(Ogmios)\n  P(gRest/Koios)\n  Q(DBSync)\n  R(Wallet)\n  S(CNTools)\n  T(Tx Submit API)\n  U(GraphQL)\n  V(OfflineMetadataTools)\n  X(gLiveView)\n  Y(cardano-signer)\n  Z[(PostgreSQL)]\n\nN --x C --x S\nN --x D --x S & V\nN --x E --x X\nN --x B\nB --x U --x Q\nB --x P --x Q\nP --x O\nP --x T\nF ---x Y\nN --x A --x R\nQ --x Z\n```\n\n----------------------------------------\n\nTITLE: Configuring User Variables\nDESCRIPTION: This section defines user-configurable variables to customize the monitoring and display of a Cardano node. These settings control the node's name, refresh rate, UI theme, and geolocation settings for connections.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/gliveview.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nNODE_NAME=\"Cardano Node\"                  # Change your node's name prefix here, keep at or below 19 characters!\nREFRESH_RATE=2                            # How often (in seconds) to refresh the view (additional time for processing and output may slow it down)\nLEGACY_MODE=false                         # (true|false) If enabled unicode box-drawing characters will be replaced by standard ASCII characters\nRETRIES=3                                 # How many attempts to connect to running Cardano node before erroring out and quitting\nPEER_LIST_CNT=6                           # Number of peers to show on each in/out page in peer analysis view\nTHEME=\"dark\"                              # dark  = suited for terminals with a dark background\n                                          # light = suited for terminals with a bright background\nENABLE_IP_GEOLOCATION=\"Y\"                 # Enable IP geolocation on outgoing and incoming connections using ip-api.com\n```\n\n----------------------------------------\n\nTITLE: Customizing Environment Variables in setup_mon.sh - Bash\nDESCRIPTION: This code snippet shows the default environment variables that can be customized in the `setup_mon.sh` script. These variables define the IP addresses, ports, and paths used by Prometheus, Grafana, and the Cardano node. Users can modify these values to match their specific network configuration.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/monitoring.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n# shellcheck disable=SC2209,SC2164\n\n######################################################################\n#### Environment Variables\n######################################################################\nCNODE_IP=127.0.0.1\nCNODE_PORT=12798\nGRAFANA_HOST=0.0.0.0\nGRAFANA_PORT=5000\nPROJ_PATH=/opt/cardano/monitoring\nPROM_HOST=127.0.0.1\nPROM_PORT=9090\nNEXP_PORT=$(( PROM_PORT + 1 ))\n```\n\n----------------------------------------\n\nTITLE: Running blockPerf.sh in console view\nDESCRIPTION: This code snippet shows the output of running `blockPerf.sh` in the console. It displays the block number, slot, timestamps for header, request, block download, and adoption, block size, delay, and the originating node's address. This helps to monitor block propagation latency.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/blockperf.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nBlock:.... 6860534\n Slot..... 52833850 (+59s)\n ......... 2022-02-09 09:49:01\n Header... 2022-02-09 09:49:02,780 (+1780 ms)\n Request.. 2022-02-09 09:49:02,780 (+0 ms)\n Block.... 2022-02-09 09:49:02,830 (+50 ms)\n Adopted.. 2022-02-09 09:49:02,900 (+70 ms)\n Size..... 79976 bytes\n delay.... 1.819971868 sec\n From..... 104.xxx.xxx.61:3001\n\nBlock:.... 6860535\n Slot..... 52833857 (+7s)\n ......... 2022-02-09 09:49:08\n Header... 2022-02-09 09:49:08,960 (+960 ms)\n Request.. 2022-02-09 09:49:08,970 (+10 ms)\n Block.... 2022-02-09 09:49:09,020 (+50 ms)\n Adopted.. 2022-02-09 09:49:09,090 (+70 ms)\n Size..... 64950 bytes\n delay.... 1.028341023 sec\n From..... 34.xxx.xxx.15:4001\n```\n\n----------------------------------------\n\nTITLE: CNTools New Pool Output\nDESCRIPTION: This is an example output when creating a new pool in CNTools. It displays the pool name, the pool ID in hexadecimal format, and the pool ID in Bech32 format.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/cntools-common.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n >> POOL >> NEW\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPool Name: TEST\n\nPool: TEST\nID (hex)    : 8d5a3510f18ce241115da38a1b2419ed82d308599c16e98caea1b4c0\nID (bech32) : pool134dr2y833n3yzy2a5w9pkfqeakpdxzzenstwnr9w5x6vqtnclue\n```\n\n----------------------------------------\n\nTITLE: Mithril Relay Script Usage\nDESCRIPTION: This bash snippet defines the usage instructions for the `mithril-relay.sh` script, outlining command-line options such as installing Squid (-d), installing Nginx (-l), skipping update checks (-u), stopping relays (-s), and displaying help text (-h). These options control the script's behavior regarding relay and load balancer setup.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/mithril-relay.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmithril-relay.sh [-d] [-l] [-u] [-h]\nA script to setup Cardano Mithril relays\n\n-d  Install squid and configure as a relay\n-l  Install nginx and configure as a load balancer\n-u  Skip update check\n-s  Stop relays\n-h  Show this help text\n```\n\n----------------------------------------\n\nTITLE: Enabling Squid Mithril Relay Service (Bash)\nDESCRIPTION: This command enables the Systemd Squid Mithril Relay service to start on boot. It requires root privileges and the Squid service to be properly installed. This ensures that the Squid relay is automatically started when the system boots.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Mithril/mithril-overview.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now squid\n```\n\n----------------------------------------\n\nTITLE: Re-install gRest Components\nDESCRIPTION: This script re-installs all gRest components and forces overwriting all configurations, but does not reset cache tables. It employs the `-f` flag for forced installation and overwriting, `-i prmcd` to specify reinstalling components, and `-q` to update the postgres queries.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/grest.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./setup-grest.sh -f -i prmcd -q\n```\n\n----------------------------------------\n\nTITLE: Create Shelley wallet\nDESCRIPTION: Creates a new Shelley-era wallet using a mnemonic phrase.  It sends a POST request to the `/v2/wallets` endpoint with the wallet name, mnemonic sentence, and passphrase.  The mnemonic sentence must be replaced with the 15-word phrase generated earlier.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/RecoverByronWallet.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '{ \"name\": \"pool_wallet\", \"mnemonic_sentence\": [\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\"], \"passphrase\": \"areallylongpasswordagain\"}' http://localhost:3002/v2/wallets\n```\n\n----------------------------------------\n\nTITLE: Downloading Monitoring Setup Script (setup_mon.sh) - Bash\nDESCRIPTION: This code snippet downloads the `setup_mon.sh` script from a GitHub repository, which automates the setup of Prometheus and Grafana for Cardano node monitoring. It changes the current directory to `$CNODE_HOME/scripts`, retrieves the script using `wget`, and sets the execute permission using `chmod`.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/monitoring.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $CNODE_HOME/scripts\nwget https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/setup_mon.sh\nchmod 750 setup_mon.sh\n```\n\n----------------------------------------\n\nTITLE: CNTools Wallet Management Menu\nDESCRIPTION: This is the menu presented in CNTools for wallet management. It allows users to create, import, register, de-register, list, show, remove, decrypt, and encrypt wallets.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/cntools-common.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n >> WALLET\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n Wallet Management\n\n ) New         - create a new wallet\n ) Import      - import a Daedalus/Yoroi 24/25 mnemonic or Ledger/Trezor HW wallet\n ) Register    - register a wallet on chain\n ) De-Register - De-Register (retire) a registered wallet\n ) List        - list all available wallets in a compact view\n ) Show        - show detailed view of a specific wallet\n ) Remove      - remove a wallet\n ) Decrypt     - remove write protection and decrypt wallet\n ) Encrypt     - encrypt wallet keys and make all files immutable\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n Select Wallet Operation\n\n  [n] New\n  [i] Import\n  [r] Register\n  [z] De-Register\n  [l] List\n  [s] Show\n  [x] Remove\n  [d] Decrypt\n  [e] Encrypt\n  [h] Home\n```\n\n----------------------------------------\n\nTITLE: Create PostgreSQL User\nDESCRIPTION: This SQL code creates a PostgreSQL superuser role with login permissions. Replace <user> with the current OS username and PasswordYouWant with the desired password.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/postgres.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE ROLE <user> SUPERUSER LOGIN;\n\\q\n```\n\n----------------------------------------\n\nTITLE: Updating Scripts with guild-deploy.sh (Bash)\nDESCRIPTION: This snippet demonstrates how to update the scripts without installing any additional dependencies using `guild-deploy.sh`. It specifies the network using the `-n` flag and sets the top-level folder name with the `-t` flag.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/basics.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./guild-deploy.sh -b master -n preview -t cnode\n```\n\n----------------------------------------\n\nTITLE: Deploying Squid Mithril Relay (Bash)\nDESCRIPTION: This command deploys the Squid Mithril Relay using the `mithril-relay.sh` script. It uses the `-d` flag to initiate the deployment and prompts for the Block Producer IP address and relay port. Requires `mithril-relay.sh` script and user interaction to provide IP address and port.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Mithril/mithril-overview.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./mithril-relay.sh -d\n```\n\n----------------------------------------\n\nTITLE: Cloning Cardano Wallet Repository\nDESCRIPTION: This code snippet clones the cardano-wallet repository from GitHub to the `$HOME/git` directory and navigates into the newly created directory. It uses standard git commands to retrieve the source code.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/wallet.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/git\ngit clone https://github.com/cardano-foundation/cardano-wallet\ncd cardano-wallet\n```\n\n----------------------------------------\n\nTITLE: Starting CNTools in Online Mode\nDESCRIPTION: This snippet shows how to start CNTools in online (advanced) mode by executing the `cntools.sh` script with the `-a` flag from the `$CNODE_HOME/scripts/` directory. Online mode allows full access to all CNTools features.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/cntools.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $CNODE_HOME/scripts\n./cntools.sh -a\n```\n\n----------------------------------------\n\nTITLE: Build cardano-wallet\nDESCRIPTION: Builds the cardano-wallet application using stack. The `--test --no-run-tests` flags are used to build the tests but skip running them. Dependencies include libssl-dev, sqlite3, libsqlite3-dev, libgmp3-dev, and libsystemd-dev.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/RecoverByronWallet.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstack build --test --no-run-tests\n```\n\n----------------------------------------\n\nTITLE: Launch cardano-wallet-jormungandr service\nDESCRIPTION: Launches the cardano-wallet-jormungandr service.  The `--node-port`, `--port`, and `--genesis-block-hash` flags configure the service's connection to the Jormungandr node and the wallet interface port and the genesis block hash respectively.  It's necessary to adjust the ports to match the Jormungandr configuration and desired access port.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/RecoverByronWallet.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncardano-wallet-jormungandr serve --node-port 3001 --port 3002 --genesis-block-hash e03547a7effaf05021b40dd762d5c4cf944b991144f1ad507ef792ae54603197\n```\n\n----------------------------------------\n\nTITLE: Checking cardano-address Version\nDESCRIPTION: This command checks the version of the cardano-address binary, which is required for importing Daedalus/Yoroi wallets into CNTools. It ensures that the correct version is installed.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/cntools-common.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncardano-address --version\n```\n\n----------------------------------------\n\nTITLE: Installing Mithril Tools with guild-deploy.sh (Bash)\nDESCRIPTION: This command installs the Mithril Client and Mithril Signer release binaries to the specified directory using the `guild-deploy.sh` script. The `-s m` flag enables the installation of Mithril components. This requires the `guild-deploy.sh` script to be available in the current directory.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Mithril/mithril-overview.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nguild-deploy.sh -s m\n```\n\n----------------------------------------\n\nTITLE: Validating DBSync Installation (SQL)\nDESCRIPTION: Executes SQL queries to list the tables in the database and select all rows from the `meta` table to verify that the database is populated with data.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/dbsync.md#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n\\dt\nselect * from meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring topologyUpdater.sh User Variables - Bash\nDESCRIPTION: This snippet shows the user-configurable variables within the `topologyUpdater.sh` script. These variables allow users to customize the script's behavior, such as setting the hostname, valency, maximum number of peers, and custom peers. The `CUSTOM_PEERS` variable is used to include local relays or block producing nodes, ensuring they are always available.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/topologyupdater.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n### topologyUpdater.sh\n\n######################################\n# User Variables - Change as desired #\n######################################\n\nCNODE_HOSTNAME=\"CHANGE ME\"                                # (Optional) Must resolve to the IP you are requesting from\nCNODE_VALENCY=1                                           # (Optional) for multi-IP hostnames\nMAX_PEERS=15                                              # Maximum number of peers to return on successful fetch\n#CUSTOM_PEERS=\"None\"                                      # Additional custom peers to (IP,port[,valency]) to add to your target topology.json\n                                                          # eg: \"10.0.0.1,3001|10.0.0.2,3002|relays.mydomain.com,3003,3\"\n#BATCH_AUTO_UPDATE=N                                      # Set to Y to automatically update the script if a new version is available without user interaction\n```\n\n----------------------------------------\n\nTITLE: Standard Pool Metadata JSON Structure\nDESCRIPTION: This JSON snippet represents the standard pool metadata file used for pool registration. It includes fields like name, ticker, description, homepage, nonce, and a crucial `extended` field pointing to the URL where the extended metadata JSON (containing the ITN owner signature) is hosted. The 'nonce' is a numerical value, recommended to be a unix timestamp.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/itnwitness.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\":\"Test\",\n  \"ticker\":\"TEST\",\n  \"description\":\"For demo purposes only\",\n  \"homepage\":\"https://hosting.site\",\n  \"nonce\":\"1595816423\",\n  \"extended\":\"https://hosting.site/poolmeta_extended.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: CNTools Pool Management Menu\nDESCRIPTION: This menu provides pool management options within CNTools, including creating, registering, modifying, retiring, listing, showing, rotating, decrypting, and encrypting stake pools.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/cntools-common.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n >> POOL\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n Pool Management\n\n ) New      - create a new pool\n ) Register - register created pool on chain using a stake wallet (pledge wallet)\n ) Modify   - change pool parameters and register updated pool values on chain\n ) Retire   - de-register stake pool from chain in specified epoch\n ) List     - a compact list view of available local pools\n ) Show     - detailed view of specified pool\n ) Rotate   - rotate pool KES keys\n ) Decrypt  - remove write protection and decrypt pool\n ) Encrypt  - encrypt pool cold keys and make all files immutable\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n Select Pool Operation\n\n  [n] New\n  [r] Register\n  [m] Modify\n  [x] Retire\n  [l] List\n  [s] Show\n  [o] Rotate\n  [d] Decrypt\n  [e] Encrypt\n  [h] Home\n```\n\n----------------------------------------\n\nTITLE: Setting up Mithril Environment (Bash)\nDESCRIPTION: This command creates a `mithril.env` file with the necessary environment variables for the Mithril client using the `mithril-client.sh` script.  It assumes that `mithril-client.sh` is present in the current working directory. No specific inputs are needed beyond running the command.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Mithril/mithril-overview.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./mithril-client.sh environment setup\n```\n\n----------------------------------------\n\nTITLE: Migrate funds from Byron to Shelley\nDESCRIPTION: Migrates funds from a Byron-era wallet to a Shelley-era wallet. It sends a POST request to the `/v2/byron-wallets/<old wallet id>/migrations/<new wallet id>` endpoint with the passphrase. The `<old wallet id>` and `<new wallet id>` placeholders must be replaced with the actual wallet IDs.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/RecoverByronWallet.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"passphrase\": \"areallylongpassword\"}' http://localhost:3002/v2/byron-wallets/<old wallet id>/migrations/<new wallet id>\n```\n\n----------------------------------------\n\nTITLE: Check Owner Keys for Pool\nDESCRIPTION: This command retrieves the owner keys for a given pool. It uses `curl` to send a POST request to the `/rpc/pool_owners` endpoint with the pool's Bech32 address as a parameter.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/grest.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d _pool_bech32=pool1z2ry6kxywgvdxv26g06mdywynvs7jj3uemnxv273mr5esukljsr -s http://localhost:8050/rpc/pool_owners\n```\n\n----------------------------------------\n\nTITLE: CNTools New Wallet Output\nDESCRIPTION: This is an example of the output after creating a new wallet in CNTools. It shows the wallet name, address, and enterprise address. The wallet will be automatically registered when delegating or pledging during stake pool registration.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/cntools-common.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n >> WALLET >> NEW\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nName of new wallet: Test\n\nNew Wallet         : Test\nAddress            : addr_test1qpq5qjr774cyc6kxcwp060k4t4hwp42q43v35lmcg3gcycu5uwdwld5yr8m8fgn7su955zf5qahtrgljqfjfa4nr8jfsj4alxk\nEnterprise Address : addr_test1vpq5qjr774cyc6kxcwp060k4t4hwp42q43v35lmcg3gcyccuxhdka\n\nYou can now send and receive Ada using the above addresses.\nNote that Enterprise Address will not take part in staking.\nWallet will be automatically registered on chain if you\nchoose to delegate or pledge wallet when registering a stake pool.\n```\n\n----------------------------------------\n\nTITLE: Downloading Latest Mithril Snapshot (Bash)\nDESCRIPTION: This command downloads the latest Mithril snapshot using the `mithril-client.sh` script. It requires a properly configured `mithril.env` file to function correctly.  It assumes that `mithril-client.sh` is present in the current working directory.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Mithril/mithril-overview.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./mithril-client.sh cardano-db download\n```\n\n----------------------------------------\n\nTITLE: Creating Symlink to Schema Folder (Bash)\nDESCRIPTION: Creates a symbolic link to the schema folder required by the Cardano DB Sync instance. The symlink is created from the git repository's schema folder to `$CNODE_HOME/guild-db/schema`.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/dbsync.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nln -s ~/git/cardano-db-sync/schema $CNODE_HOME/guild-db/schema\n```\n\n----------------------------------------\n\nTITLE: Install libssl-dev\nDESCRIPTION: Installs the libssl-dev package. This package is required for building the cardano-wallet and provides SSL/TLS support.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/RecoverByronWallet.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Send funds to new address\nDESCRIPTION: Sends funds from a Shelley-era wallet to a new address. It sends a POST request to the `/v2/wallets/<new wallet id>/transactions` endpoint with the payment details and passphrase.  The `<address to send to>`, `amount`, and `<new wallet id>` placeholders must be replaced with the actual values.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/RecoverByronWallet.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"payments\": [ { \"address\": \"<address to send to>\", \"amount\": { \"quantity\": 83333330000000, \"unit\": \"lovelace\" } } ], \"passphrase\": \"areallylongpasswordagain\"}' http://localhost:3002/v2/wallets/<new wallet id>/transactions\n```\n\n----------------------------------------\n\nTITLE: Cardano Core Topology Configuration\nDESCRIPTION: This is an example `topology.json` file for a Cardano block producing (core) node. It defines local roots for persistent connections to relay nodes and sets `useLedgerAfterSlot` to `-1` to keep the core node in non-P2P mode. `PeerSharing` should also be set to `false`.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/node-cli.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"bootstrapPeers\": [],\n  \"localRoots\": [\n    {\n      \"accessPoints\": [\n        {\"address\": \"yy.yy.yy.yy\", \"port\": 6000, \"description\": \"Relay1\"},\n        {\"address\": \"zz.zz.zz.zz\", \"port\": 6000, \"description\": \"Relay2\"}\n      ],\n      \"advertise\": false,\n      \"trustable\": true,\n      \"hotValency\": 2\n    }\n  ],\n  \"publicRoots\": [\n    {\n      \"accessPoints\": [],\n      \"advertise\": false\n    }\n  ],\n  \"useLedgerAfterSlot\": -1\n}\n```\n\n----------------------------------------\n\nTITLE: Install Haskell using curl\nDESCRIPTION: Downloads and installs Haskell Stack using curl. This command is the first step in setting up the environment for building and running cardano-wallet-jormungandr.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/RecoverByronWallet.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://get.haskellstack.org/ | sh\n```\n\n----------------------------------------\n\nTITLE: Clone cardano-wallet repository\nDESCRIPTION: Clones the cardano-wallet repository from GitHub. This provides the source code needed to build the wallet application.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/RecoverByronWallet.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/cardano-foundation/cardano-wallet.git\n```\n\n----------------------------------------\n\nTITLE: Enable Nginx Service on Boot (Bash)\nDESCRIPTION: This command enables the Nginx service to start automatically on system boot. It uses `systemctl` to enable and start the `nginx` service.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Mithril/mithril-overview.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now nginx\n```\n\n----------------------------------------\n\nTITLE: Enable Mithril Signer Service on Boot (Bash)\nDESCRIPTION: This command enables the `cnode-mithril-signer` service to start automatically on system boot, using `systemctl`.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Mithril/mithril-overview.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable cnode-mithril-signer\n```\n\n----------------------------------------\n\nTITLE: Install libgmp3-dev\nDESCRIPTION: Installs the libgmp3-dev package. This package is required for building the cardano-wallet and provides support for arbitrary-precision arithmetic.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/RecoverByronWallet.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libgmp3-dev \n```\n\n----------------------------------------\n\nTITLE: Generate Jormungandr mnemonic\nDESCRIPTION: Generates a new 15-word mnemonic phrase for a Jormungandr wallet. This phrase is used to create a new Shelley-era wallet.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/RecoverByronWallet.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncardano-wallet-jormungandr mnemonic generate\n```\n\n----------------------------------------\n\nTITLE: Downloading Cardano DB Snapshot\nDESCRIPTION: This snippet downloads the latest Mithril snapshot, which contains the latest state of the Cardano blockchain database. It utilizes the `cardano-db download` command.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/mithril-client.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./mithril-client.sh cardano-db download\n```\n\n----------------------------------------\n\nTITLE: Decoding Base64 Error Messages\nDESCRIPTION: This command decodes a base64 encoded error message associated with an invalid block, providing human-readable information about the failure. It uses `echo`, `base64`, and `jq` to decode and format the error message for easier understanding.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/cncli.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho <base64 hash> | base64 -d | jq -r\n```\n\n----------------------------------------\n\nTITLE: Displaying Usage Syntax for guild-deploy.sh (Bash)\nDESCRIPTION: This snippet shows how to display the usage syntax and available options for the `guild-deploy.sh` script. It is useful for understanding the available parameters and their purposes. The script is used to set up dependencies for building and using common tools across the Cardano ecosystem.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/basics.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUsage: guild-deploy.sh [-n <mainnet|guild|preprod|preview|sanchonet>] [-p path] [-t <name>] [-b <branch>] [-u] [-s [p][b][l][m][d][c][o][w][x][f][s]]\nSet up dependencies for building/using common tools across cardano ecosystem.\nThe script will always update dynamic content from existing scripts retaining existing user variables\n\n-n    Connect to specified network instead of mainnet network (Default: connect to cardano mainnet network) eg: -n guild\n-p    Parent folder path underneath which the top-level folder will be created (Default: /opt/cardano)\n-t    Alternate name for top level folder - only alpha-numeric chars allowed (Default: cnode)\n-b    Use alternate branch of scripts to download - only recommended for testing/development (Default: master)\n-u    Skip update check for script itself\n-s    Selective Install, only deploy specific components as below:\n  p   Install common pre-requisite OS-level Dependencies for most tools on this repo (Default: skip)\n  b   Install OS level dependencies for tools required while building cardano-node/cardano-db-sync components (Default: skip)\n  l   Build and Install libsodium fork from IO repositories (Default: skip)\n  m   Download latest (released) binaries for mithril-signer, mithril-client (Default: skip)\n  d   Download latest (released) binaries for bech32, cardano-address, cardano-node, cardano-cli, cardano-db-sync and cardano-submit-api (Default: skip)\n  c   Download latest (released) binaries for CNCLI (Default: skip)\n  o   Download latest (released) binaries for Ogmios (Default: skip)\n  w   Download latest (released) binaries for Cardano Hardware CLI (Default: skip)\n  x   Download latest (released) binaries for Cardano Signer binary (Default: skip)\n  f   Force overwrite config files (backups of existing ones will be created) (Default: skip)\n  s   Force overwrite entire content [including user variables] of scripts (Default: skip)\n```\n\n----------------------------------------\n\nTITLE: HAProxy TLS Configuration\nDESCRIPTION: This configuration snippet shows how to enable SSL on HAProxy by updating the frontend app section of the `haproxy.cfg` file. It binds to port 8453 and specifies the path to the SSL certificate and private key.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/grest.md#_snippet_4\n\nLANGUAGE: null\nCODE:\n```\nfrontend app\n  #bind 0.0.0.0:8053\n  ## If using SSL, comment line above and uncomment line below\n  bind :8453 ssl crt /etc/ssl/server.pem no-sslv3\n  http-request set-log-level silent\n  acl srv_down nbsrv(grest_postgrest) eq 0\n  acl is_wss hdr(Upgrade) -i websocket\n  ...\n```\n\n----------------------------------------\n\nTITLE: Deploy Mithril Signer (Bash)\nDESCRIPTION: This script deploys the Mithril Signer by creating a systemd service environment file. It assumes that the necessary environment variables have been configured.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Mithril/mithril-overview.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n./mithril-signer.sh -d\nCreating cnode-mithril-signer systemd service environment file..\nMithril signer service successfully deployed\n```\n\n----------------------------------------\n\nTITLE: Display Current User\nDESCRIPTION: This bash command displays the current user's username.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/postgres.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho $(whoami)\n```\n\n----------------------------------------\n\nTITLE: CNTools Wallet Import Menu\nDESCRIPTION: This menu is presented in CNTools when importing a wallet. It provides options to import a wallet using a mnemonic phrase or a hardware wallet. The mnemonic option supports Daedalus/Yoroi wallets.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/cntools-common.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n >> WALLET >> IMPORT\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n Wallet Import\n\n ) Mnemonic  - Daedalus/Yoroi 24 or 25 word mnemonic\n ) HW Wallet - Ledger/Trezor hardware wallet\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n Select Wallet operation\n\n  [m] Mnemonic\n  [w] HW Wallet\n  [h] Home\n```\n\n----------------------------------------\n\nTITLE: Building the token-metadata-creator tool\nDESCRIPTION: This snippet fetches all tags, pulls the latest changes, checks out the `master` branch (or a specific tag), and then executes the `cabal-build-all.sh` script to build the `token-metadata-creator` tool.  The `$CNODE_HOME` variable is assumed to be set, and the `cabal-build-all.sh` script handles the compilation and installation.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/offchain-metadata-tools.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch --tags --all\ngit pull\n# Replace master with appropriate tag if you'd like to avoid compiling against master\ngit checkout master\n$CNODE_HOME/scripts/cabal-build-all.sh\n```\n\n----------------------------------------\n\nTITLE: Downloading and Deploying Guild Scripts with Config Overwrite\nDESCRIPTION: This snippet downloads the `guild-deploy.sh` script, sets execute permissions, and then executes it to overwrite configuration files. It's crucial to re-add customizations to the config files, especially topology.json, after this operation. Backups of the original files are created in the `${CNODE_HOME}/files` folder.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/upgrade.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir \"$HOME/tmp\";cd \"$HOME/tmp\"\ncurl -sfS -o guild-deploy.sh https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/guild-deploy.sh && chmod 700 guild-deploy.sh\n./guild-deploy.sh -s dlf -b master -n mainnet -t cnode -p /opt/cardano\n```\n\n----------------------------------------\n\nTITLE: Cloning Cardano Node Repository (Bash)\nDESCRIPTION: This snippet clones the cardano-node repository from GitHub to the `$HOME/git` directory. It then navigates into the cloned repository. This is the first step in building the Cardano node from source.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/node-cli.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/git\ngit clone https://github.com/intersectmbo/cardano-node\ncd cardano-node\n```\n\n----------------------------------------\n\nTITLE: Disabling iptables in Docker Options - Bash\nDESCRIPTION: This snippet shows how to disable iptables in Docker options on Ubuntu/Debian based systems.  By setting `--iptables=false` in the `DOCKER_OPTS` variable, Docker will not manage iptables rules, allowing the system administrator to manage them directly.  This is useful for maintaining control over firewall rules.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/docker/security.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDOCKER_OPTS= \"--iptables=false\"\n```\n\n----------------------------------------\n\nTITLE: Cloning the offchain-metadata-tools repository\nDESCRIPTION: This snippet clones the `offchain-metadata-tools` repository from GitHub to the `$HOME/git` directory. It first changes the current directory to `$HOME/git` and then uses the `git clone` command to clone the repository. Finally it enters the token-metadata-creator directory.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/offchain-metadata-tools.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/git\ngit clone https://github.com/input-output-hk/offchain-metadata-tools.git\ncd offchain-metadata-tools/token-metadata-creator\n```\n\n----------------------------------------\n\nTITLE: Query Active Stake for Pool\nDESCRIPTION: This command queries the active stake for a specific pool in a given epoch using `curl`. It sends a POST request to the `/rpc/pool_active_stake` endpoint with the pool's Bech32 address and the epoch number as parameters.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/grest.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d _pool_bech32=pool1z2ry6kxywgvdxv26g06mdywynvs7jj3uemnxv273mr5esukljsr -d _epoch_no=122 -s http://localhost:8053/rpc/pool_active_stake\n```\n\n----------------------------------------\n\nTITLE: Update Mithril Signer Environment (Bash)\nDESCRIPTION: This script updates the `mithril.env` file with the Mithril Signer environment variables, including the IP address and port of the relay endpoint. It prompts the user for these values.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Mithril/mithril-overview.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./mithril-signer.sh -e\nEnter the IP address of the relay endpoint: 127.0.0.1\nEnter the port of the relay endpoint (press Enter to use default 3132):\nUsing RELAY_ENDPOINT=127.0.0.1:3132 for the Mithril signer relay endpoint.\n```\n\n----------------------------------------\n\nTITLE: gLiveView Configuration and Startup - Bash\nDESCRIPTION: This bash snippet illustrates the user variables section within the gLiveView.sh script that can be customized to suit the specific environment if automatic detection fails. It includes variables for KES key, blocklog database, EKG endpoint, and Prometheus endpoint.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/gliveview.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n######################################\n```\n\n----------------------------------------\n\nTITLE: Custom Peers Configuration example - Bash\nDESCRIPTION: This example provides valid `CUSTOM_PEERS` entries within the topologyUpdater.sh configuration file. It shows that custom peers can be added, specifying address, port and optional valency. Multiple custom peers can be specified by separating them with '|'.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/topologyupdater.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCUSTOM_PEERS=\"foo.bar.io,3001,2|198.175.21.197,6001|36.233.3.89,6000\n```\n\n----------------------------------------\n\nTITLE: Deploying logMonitor.sh as a Systemd Service\nDESCRIPTION: The deploy-as-systemd.sh script is used to create a systemd unit file for logMonitor.sh, enabling it to run as a background service. Log output is managed by journald, which can be monitored using journalctl. This deployment method is preferred for continuous monitoring.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/logmonitor.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n`deploy-as-systemd.sh`\n```\n\n----------------------------------------\n\nTITLE: Overriding Mithril Environment Variables (Bash)\nDESCRIPTION: This command overrides a default variable in the `mithril.env` file using the `mithril-client.sh` script. It requires specifying the variable name and the new value as arguments. It assumes that `mithril-client.sh` is present in the current working directory.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Mithril/mithril-overview.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./mithril-client.sh environment override <VARIABLE> <VALUE>\n```\n\n----------------------------------------\n\nTITLE: Enabling Mithril Signer Service (Bash)\nDESCRIPTION: This command enables the Systemd service to start the Mithril Signer on boot. It requires root privileges and the Mithril Signer service to be properly deployed. It ensures that the Mithril signer is automatically started when the system boots.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Mithril/mithril-overview.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable cnode-mithril-signer\n```\n\n----------------------------------------\n\nTITLE: Display help options for setup-grest.sh\nDESCRIPTION: This command display the usage and help options for the setup-grest.sh script.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/grest.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd \"${CNODE_HOME}\"/scripts\n./setup-grest.sh -h\n```\n\n----------------------------------------\n\nTITLE: Restore Byron wallet\nDESCRIPTION: Restores a Byron-era wallet using a mnemonic phrase.  It sends a POST request to the `/v2/byron-wallets` endpoint with the wallet name, mnemonic sentence, and passphrase.  The mnemonic sentence must be replaced with the actual 12-word phrase from the Byron wallet. The port may also need adjustment.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/RecoverByronWallet.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '{ \"name\": \"legacy_wallet\", \"mnemonic_sentence\": [\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\",\"foo\"], \"passphrase\": \"areallylongpassword\"}' http://localhost:3002/v2/byron-wallets\n```\n\n----------------------------------------\n\nTITLE: Install cardano-wallet executables\nDESCRIPTION: Installs the cardano-wallet executables to the system's path. This allows the `cardano-wallet-jormungandr` command to be run from anywhere.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/RecoverByronWallet.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nstack install\n```\n\n----------------------------------------\n\nTITLE: Verifying Cardano Wallet Operation\nDESCRIPTION: This command queries the cardano-wallet for network information. The expected output is a JSON object containing details about the network tip, node era, node tip, sync progress, and next epoch.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/wallet.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncardano-wallet network information\n```\n\n----------------------------------------\n\nTITLE: Example Cardano Wallet Network Information Output\nDESCRIPTION: This is an example JSON output from the `cardano-wallet network information` command. It provides details like network tip, node era, node tip height/time/epoch/slot, sync status and next epoch details. It confirms if the wallet can successfully communicate with the network.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/wallet.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"network_tip\": {\n        \"time\": \"2021-06-01T17:31:05Z\",\n        \"epoch_number\": 269,\n        \"absolute_slot_number\": 31002374,\n        \"slot_number\": 157574\n    },\n    \"node_era\": \"mary\",\n    \"node_tip\": {\n        \"height\": {\n            \"quantity\": 5795127,\n            \"unit\": \"block\"\n        },\n        \"time\": \"2021-06-01T17:31:00Z\",\n        \"epoch_number\": 269,\n        \"absolute_slot_number\": 31002369,\n        \"slot_number\": 157569\n    },\n    \"sync_progress\": {\n        \"status\": \"ready\"\n    },\n    \"next_epoch\": {\n        \"epoch_start_time\": \"2021-06-04T21:44:51Z\",\n        \"epoch_number\": 270\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Mithril Stake Distributions\nDESCRIPTION: This snippet lists available Mithril stake distributions using the `stake-distribution list` command. Add `json` at the end to get the output in JSON format.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/mithril-client.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./mithril-client.sh stake-distribution list\n```\n\nLANGUAGE: bash\nCODE:\n```\n./mithril-client.sh stake-distribution list json\n```\n\n----------------------------------------\n\nTITLE: Listing Available Mithril Snapshots\nDESCRIPTION: This snippet lists all available Mithril snapshots.  It uses the `cardano-db snapshot list` command.  The `json` option provides the output in JSON format.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/mithril-client.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./mithril-client.sh cardano-db snapshot list\n```\n\nLANGUAGE: bash\nCODE:\n```\n./mithril-client.sh cardano-db snapshot list json\n```\n\n----------------------------------------\n\nTITLE: Showing Mithril Snapshot Details\nDESCRIPTION: This snippet shows details of a specific Mithril snapshot, identified by its digest. It uses the `cardano-db snapshot show <DIGEST>` command. The `json` option provides the output in JSON format.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/mithril-client.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./mithril-client.sh cardano-db snapshot show <DIGEST>\n```\n\nLANGUAGE: bash\nCODE:\n```\n./mithril-client.sh cardano-db snapshot show <DIGEST> json\n```\n\n----------------------------------------\n\nTITLE: Downloading Mithril Stake Distribution\nDESCRIPTION: This snippet downloads the latest Mithril stake distribution. It uses the `stake-distribution download` command.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/mithril-client.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./mithril-client.sh stake-distribution download\n```\n\n----------------------------------------\n\nTITLE: Login to PostgreSQL as Superuser\nDESCRIPTION: This bash snippet logs into the Postgres instance as the superuser. It switches the user to 'postgres' and then opens the psql prompt.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/postgres.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo su postgres\npsql\n```\n\n----------------------------------------\n\nTITLE: Extended Pool Metadata JSON Structure\nDESCRIPTION: This JSON snippet illustrates the structure of the extended pool metadata file (`poolmeta_extended.json`). It contains an \"itn\" object with \"owner\" (ITN owner's public key) and \"witness\" (signature) fields. The \"owner\" field is the ITN owner's public key, and the \"witness\" field is the signature generated using the owner's secret key.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/itnwitness.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"itn\": {\n    \"owner\": \"ed25519_pk1...\",\n    \"witness\": \"ed25519_sig1...\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing itnRewards.sh for ITN Key Conversion\nDESCRIPTION: This bash script command executes the `itnRewards.sh` script to convert ITN owner keys to Shelley stake keys.  It takes the CNTools wallet name, ITN owner secret key, and ITN owner public key as input parameters. The script is located within the `$CNODE_HOME/scripts` directory and requires the correct paths to the keys.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/itnrewards.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $CNODE_HOME/scripts\n./itnRewards.sh MyITNWallet ~/jormu/account/priv/owner.sk ~/jormu/account/priv/owner.pk\n```\n\n----------------------------------------\n\nTITLE: Update Queries with Alternate Branch\nDESCRIPTION: This command updates the queries using an alternate branch (`alpha`) while preserving the existing configuration. It uses `-q` to update queries and `-b alpha` to specify the branch.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/grest.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./setup-grest.sh -q -b alpha\n```\n\n----------------------------------------\n\nTITLE: Managing Cardano Node Service\nDESCRIPTION: These commands use `systemctl` to manage the Cardano node and submit API services. They allow you to start, stop, restart, and check the status of the cnode and cnode-submit-api services, which are managed by systemd. These commands require sudo privileges.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Build/node-cli.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\nsudo systemctl start cnode.service\nsudo systemctl start cnode-submit-api.service\n\nsudo systemctl status cnode.service\nsudo systemctl status cnode-submit-api.service\n```\n\n----------------------------------------\n\nTITLE: Building Components Using guild-deploy.sh (Bash)\nDESCRIPTION: This snippet demonstrates how to build components instead of downloading them using `guild-deploy.sh`. It uses the `-s` flag with the `b` option to specify that the OS level dependencies for building cardano-node/cardano-db-sync components should be installed. It also specifies the network with the `-n` flag and sources the .bashrc.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/basics.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./guild-deploy.sh -b master -n preview -t cnode -s pblcowx\n. \"${HOME}/.bashrc\"\n```\n\n----------------------------------------\n\nTITLE: Building Cardano Node Docker Image (Windows)\nDESCRIPTION: This Powershell command builds a Docker image for a Cardano node, similar to the Linux command, but using Powershell to pipe the contents of `dockerfile_bin` to the `docker build` command. The resulting image will be tagged as `guild-operators/cardano-node:latest`. Requires Docker and Powershell to be installed.  It reads the dockerfile from stdin.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/docker/build.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Content dockerfile_bin  | docker build -t guild-operators/cardano-node:latest -\n```\n\n----------------------------------------\n\nTITLE: Sourcing Bashrc and Echoing Path\nDESCRIPTION: This snippet sources the `.bashrc` file and echoes the `$PATH` environment variable to ensure that the environment is properly updated after running the guild-deploy script.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/upgrade.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsource \"${HOME}/.bashrc\"\necho \"${PATH}\"\n```\n\n----------------------------------------\n\nTITLE: Checking bech32 Version\nDESCRIPTION: This command checks the version of the bech32 binary, which is required for importing Daedalus/Yoroi wallets into CNTools. It ensures that the correct version is installed.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Scripts/cntools-common.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbech32 --version\n```\n\n----------------------------------------\n\nTITLE: Navigate to wallet directory\nDESCRIPTION: Changes the current directory to the cardano-wallet directory.  This is necessary before building the wallet.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/RecoverByronWallet.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd cardano-wallet\n```\n\n----------------------------------------\n\nTITLE: Install Sqlite and Sqlite Dev\nDESCRIPTION: Installs the sqlite3 and libsqlite3-dev packages. These packages are required for building the cardano-wallet and provide SQLite database support.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/RecoverByronWallet.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install sqlite3 libsqlite3-dev \n```\n\n----------------------------------------\n\nTITLE: Install libsystemd-dev\nDESCRIPTION: Installs the libsystemd-dev package. This package may be required for building the cardano-wallet and provides systemd support.\nSOURCE: https://github.com/cardano-community/guild-operators/blob/alpha/docs/Appendix/RecoverByronWallet.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install libsystemd-dev\n```"
  }
]