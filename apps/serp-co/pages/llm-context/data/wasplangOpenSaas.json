[
  {
    "owner": "wasp-lang",
    "repo": "open-saas",
    "content": "TITLE: Configuring Authentication Methods in Wasp\nDESCRIPTION: This snippet demonstrates the basic authentication configuration in the main.wasp file. It defines the User entity and sets up multiple authentication methods including email, Google, GitHub, and Discord.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/authentication.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {}, \n      google: {},\n      gitHub: {},\n      discord: {}\n    },\n    onAuthFailedRedirectTo: \"/\",\n  },\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Checkout Action in Wasp\nDESCRIPTION: Defines a server-side action in the main.wasp file for generating a checkout session. This action imports the implementation from the payment operations file and specifies that it interacts with the User entity.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/guided-tour.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\naction generateCheckoutSession {\n  fn: import { generateCheckoutSession } from \"@src/payment/operations\",\n  entities: [User]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Wasp Application\nDESCRIPTION: Command to start the Wasp application, including both client and server.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/getting-started.mdx#2025-04-18_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nwasp start\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Client with API Version\nDESCRIPTION: TypeScript code snippet for initializing the Stripe client with a specific API version. This ensures compatibility between the server requests and Stripe's API responses.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/deploying.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const stripe = new Stripe(process.env.STRIPE_API_KEY!, {\n  apiVersion: 'YYYY-MM-DD', // e.g. 2023-08-16\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Payment Checkout Action on Server\nDESCRIPTION: Server-side implementation for generating a checkout session in the payment operations file. This function processes the payment plan ID and context to create a checkout session.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/guided-tour.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const generateCheckoutSession = async (paymentPlanId, context) => { \n  //...\n }\n```\n\n----------------------------------------\n\nTITLE: Running Database and Application in Wasp-based SaaS Project\nDESCRIPTION: Commands for starting the database, running the application, and optionally performing database migrations in a Wasp-based SaaS project.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/template/app/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasp start db\n```\n\nLANGUAGE: bash\nCODE:\n```\nwasp start\n```\n\nLANGUAGE: bash\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Processor Selection in TypeScript\nDESCRIPTION: This code snippet shows how to select between Stripe and Lemon Squeezy payment processors by uncommenting the desired implementation in the paymentProcessor.ts file.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/payments-integration.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stripePaymentProcessor } from './stripe/paymentProcessor';\nimport { lemonSqueezyPaymentProcessor } from './lemonSqueezy/paymentProcessor';\n//...\n\nexport const paymentProcessor: PaymentProcessor = stripePaymentProcessor;\n// or... \nexport const paymentProcessor: PaymentProcessor = lemonSqueezyPaymentProcessor;\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Wasp\nDESCRIPTION: This snippet shows the User entity definition in the main.wasp file, including fields for user information, subscription details, and related entities.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/general/user-overview.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nentity User {=psl\n  id                        Int             @id @default(autoincrement())\n  email                     String?         @unique\n  username                  String?         \n  createdAt                 DateTime        @default(now())\n  isAdmin                   Boolean         @default(false)\n  paymentProcessorUserId    String?         @unique\n  lemonSqueezyCustomerPortalUrl String?     // You can delete this if you're not using Lemon Squeezy as your payments processor.\n  subscriptionPlan          String?\n  subscriptionStatus        String?\n  sendEmail                 Boolean         @default(false)\n  datePaid                  DateTime?\n  credits                   Int             @default(3)\n  gptResponses              GptResponse[]\n  contactFormMessages       ContactFormMessage[]\n  tasks                     Task[]\n  files                     File[] \npsl=}\n```\n\n----------------------------------------\n\nTITLE: Creating a New SaaS Application with Open SaaS Template\nDESCRIPTION: Command to generate a new SaaS application using Wasp's Open SaaS template. This creates a clean copy of the template in a new directory, ready for customization.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwasp new -t saas\n```\n\n----------------------------------------\n\nTITLE: Secure Implementation for Updating User Admin Status\nDESCRIPTION: Restricted implementation for updating only the isAdmin field of a user, with proper authorization checks.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/blog/2025-02-26-incident-report-vulnerability-in-open-saas.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const updateUserIsAdminById: UpdateUserIsAdminById<{ id: User['id'], isAdmin: User['isAdmin'] }, User> = async ({ id, isAdmin }, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n  if (!context.user.isAdmin) {\n    throw new HttpError(403);\n  }\n  if (id === undefined || isAdmin === undefined) {\n    throw new HttpError(400);\n  }\n\n  return context.entities.User.update({\n    where: { id },\n    data: { isAdmin },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Webhook API Endpoint in Wasp\nDESCRIPTION: Defines an API endpoint in the main.wasp file to handle payment webhooks from Stripe. This exposes a POST route that processes webhook events and can access the User entity.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/guided-tour.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\napi paymentsWebhook {\n  fn: import { paymentsWebhook } from \"@src/payment/webhook\",\n  httpRoute: (POST, \"/payments-webhook\") \n  entities: [User],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp Framework for Open SaaS Template\nDESCRIPTION: Command to install the Wasp framework on macOS, Linux, or Windows with WSL. This is the prerequisite step before creating a new SaaS application with the template.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh\n```\n\n----------------------------------------\n\nTITLE: User-based Authorization in Page Components\nDESCRIPTION: Demonstrates how to implement conditional rendering based on user subscription status. This example checks subscription status to show different content to users with different subscription states.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/authorization.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type User } from \"wasp/entities\";\n\nexport default function Example({ user }: { user: User }) {\n\n  if (user.subscriptionStatus === 'past_due') {\n    return (<span>Your subscription is past due. Please update your payment information.</span>)\n  }\n  if (user.subscriptionStatus === 'cancel_at_period_end') {\n    return (<span>Your susbscription will end on 01.01.2024</span>)\n  }\n  if (user.subscriptionStatus === 'active') {\n    return (<span>Thanks so much for your support!</span>)\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed updateCurrentUserLastActiveTimestamp Implementation\nDESCRIPTION: Secure implementation that replaces the vulnerable updateCurrentUser function, limiting updates to only the lastActiveTimestamp field.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/blog/2025-02-26-incident-report-vulnerability-in-open-saas.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const updateCurrentUserLastActiveTimestamp: UpdateCurrentUserLastActiveTimestamp<void, User> = async (_args, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  return context.entities.User.update({\n    where: {\n      id: context.user.id,\n    },\n    data: {\n      lastActiveTimestamp: new Date(),\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Auth Configuration in Wasp Config File\nDESCRIPTION: The auth configuration in the main.wasp file which defines the authentication methods supported by the app. It includes email, Google, GitHub, and Discord authentication methods, with the User entity as the user entity.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/guided-tour.md#2025-04-18_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n  auth: {\n    userEntity: User,\n    methods: {\n      email: { \n        //...\n      },\n      google: {},\n      github: {},\n      discord: {}\n    },\n    onAuthFailedRedirectTo: \"/\",\n  },\n```\n\n----------------------------------------\n\nTITLE: Starting the Postgres Database\nDESCRIPTION: Commands to navigate to the app directory and start the Postgres database using Wasp.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/getting-started.mdx#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncd app\n```\n\nLANGUAGE: sh\nCODE:\n```\nwasp start db\n```\n\n----------------------------------------\n\nTITLE: Server-side Authorization in Actions\nDESCRIPTION: Shows how to implement authorization checks in server-side actions by checking the user object in the context. This example throws appropriate HTTP errors for unauthorized access or subscription issues.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/authorization.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const someServerAction: SomeServerAction<...> = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401); // throw an error if user is not logged in\n  }\n\n  if (context.user.subscriptionStatus === 'past_due') {\n    throw new HttpError(403, 'Your subscription is past due. Please update your payment information.');\n  }\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid Email Provider in Wasp\nDESCRIPTION: Implementation of SendGrid as a production-ready email provider. Requires proper SendGrid account configuration and API keys.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/email-sending.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\napp SaaSTemplate {\n  // ...\n  emailSender: {\n    provider: SendGrid,\n    defaultFrom: {\n      name: \"Open SaaS App\",\n      // When using SendGrid, you must use the same email address that you configured your account to send out emails with!\n      email: \"me@example.com\" \n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: User Entity Stripe-related Fields\nDESCRIPTION: This snippet highlights the Stripe-related fields in the User entity, including payment processor ID, subscription plan and status, and credits.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/general/user-overview.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nentity User {=psl\n  id                        Int             @id @default(autoincrement())\n  //...\n  paymentProcessorUserId    String?         @unique\n  subscriptionPlan          String?\n  subscriptionStatus        String?\n  datePaid                  DateTime?\n  credits                   Int             @default(3)\n  //...\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Authorization in Wasp\nDESCRIPTION: Sets the authRequired property on a page definition to restrict access to authenticated users only. This automatically redirects unauthenticated users to the login page.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/authorization.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nroute AccountRoute { path: \"/account\", to: AccountPage }\npage AccountPage {\n  authRequired: true,\n  component: import Account from \"@src/user/AccountPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AWS S3 Credentials in Environment Variables\nDESCRIPTION: Shell commands for setting environment variables with AWS S3 credentials, including access key, secret key, bucket name, and region. These are used for authenticating and accessing the S3 bucket for file uploads.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/file-uploading.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nAWS_S3_IAM_ACCESS_KEY=ACK...\nAWS_S3_IAM_SECRET_KEY=t+33a...\nAWS_S3_FILES_BUCKET=your-bucket-name\nAWS_S3_REGION=your-region // (e.g. us-west-2)\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity with Admin Flag in Wasp\nDESCRIPTION: This snippet shows the User entity definition in Wasp, highlighting the isAdmin field used for admin access control.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/general/admin-dashboard.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nentity User {=psl\n  id                        Int             @id @default(autoincrement())\n  email                     String?         @unique\n  username                  String?\n  isAdmin                   Boolean         @default(false)\n  //...\n\n```\n\n----------------------------------------\n\nTITLE: Sending Emails in Webhook Handler\nDESCRIPTION: Example of sending emails using the Wasp email sender module within a webhook handler, specifically for subscription cancellation notifications.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/email-sending.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { emailSender } from \"wasp/server/email\";\n\n//...\n\n  if (subscription.cancel_at_period_end) {\n    await emailSender.send({\n      to: customer.email,\n      subject: 'We hate to see you go :(',\n      text: 'We hate to see you go. Here is a sweet offer...',\n      html: 'We hate to see you go. Here is a sweet offer...',\n    });\n  }\n```\n\n----------------------------------------\n\nTITLE: User Roles Definition in User Entity\nDESCRIPTION: This snippet shows the isAdmin field in the User entity, which is used to define user roles (admin and regular user) in the application.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/general/user-overview.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nentity User {=psl\n  id                        Int             @id @default(autoincrement())\n  email                     String?         @unique\n  username                  String?\n  createdAt                 DateTime        @default(now())\n  isAdmin                   Boolean         @default(false)\n//...\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Adding Plausible Script to Wasp App Configuration\nDESCRIPTION: Demonstrates how to add the Plausible script tag to the head section of a Wasp application configuration in main.wasp. The script tag should be copied from the Plausible dashboard.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/analytics.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\napp OpenSaaS {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My SaaS App\",\n  head: [\n        \"<your plausible script tag here>\",\n  ],\n  //...\n```\n\n----------------------------------------\n\nTITLE: Configuring Landing Page Meta Tags in Wasp\nDESCRIPTION: This snippet demonstrates how to add meta tags to the landing page HTML via the main.wasp file's head property. It includes Open Graph meta tags for improved social media sharing.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/seo.mdx#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\napp SaaSTemplate {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"Open SaaS\",\n  head: [\n        \"<meta property='og:type' content='website' />\",\n        \"<meta property='og:url' content='https://opensaas.sh' />\",\n        \"<meta property='og:title' content='Open SaaS' />\",\n        \"<meta property='og:description' content='Free, open-source SaaS boilerplate starter for React & NodeJS.' />\",\n        \"<meta property='og:image' content='https://opensaas.sh/public-banner.webp' />\",\n        //...\n  ],\n  //...\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for AWS S3 Bucket in JSON\nDESCRIPTION: JSON configuration for Cross-Origin Resource Sharing (CORS) settings on an AWS S3 bucket. This allows file uploads from specified origins, including localhost for development and a custom domain for production.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/file-uploading.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"AllowedHeaders\": [\n            \"*\"\n        ],\n        \"AllowedMethods\": [\n            \"POST\",\n            \"GET\"\n        ],\n        \"AllowedOrigins\": [\n            \"http://localhost:3000\",\n            \"https://<your-domain>\"\n        ],\n        \"ExposeHeaders\": []\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Handling Past Due Subscription in Stripe Webhook\nDESCRIPTION: This code snippet demonstrates how to handle a past due subscription status in the Stripe webhook, including updating the user's status and sending an email notification.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/general/user-overview.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { emailSender } from \"wasp/server/email\";\n//...\n\nif (subscription.status === 'past_due') {\n  const updatedCustomer = await context.entities.User.update({\n    where: {\n      id: customer.id,\n    },\n    data: {\n      subscriptionStatus: 'past_due',\n    },\n  });\n\n  if (updatedCustomer.email) {\n    await emailSender.send({\n      to: updatedCustomer.email,\n      subject: 'Your Payment is Past Due',\n      text: 'Please update your payment information to continue using our service.',\n      html: '...',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Payment Checkout Action from Client\nDESCRIPTION: Client-side React code that imports and calls the generateCheckoutSession action when a user clicks the buy button. This demonstrates how to use Wasp operations from the client side.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/guided-tour.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { generateCheckoutSession } from \"wasp/client/operations\";\n\nconst handleBuyClick = async (paymentPlanId) => {\n  const checkoutSession = await generateCheckoutSession(paymentPlanId);\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Stripe Customer Portal URL in Environment Variables\nDESCRIPTION: This snippet demonstrates how to set the Stripe Customer Portal URL in the .env.server file after activating and copying the URL from the Stripe Dashboard.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/payments-integration.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nSTRIPE_CUSTOMER_PORTAL_URL=<your-test-customer-portal-link>\n```\n\n----------------------------------------\n\nTITLE: Adding Google Analytics to Astro Starlight Blog Configuration\nDESCRIPTION: Configuration for integrating Google Analytics into an Astro Starlight blog by modifying the astro.config.mjs file to include the necessary script tags in the head section.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/analytics.md#2025-04-18_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nexport default defineConfig({\n  site: 'https://opensaas.sh',\n  integrations: [\n    starlightBlog({ \n      // ...\n    }),\n    starlight({\n      //...\n       head: [\n        {\n          tag: 'script',\n          attrs: {\n            src: 'https://www.googletagmanager.com/gtag/js?id=<YOUR-GOOGLE-ANALYTICS-ID>',\n          },\n        },\n        {\n          tag: 'script',\n          content: `\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n        \n          gtag('config', '<YOUR-GOOGLE-ANALYTICS-ID>');\n          `,\n        },\n      ],\n```\n\n----------------------------------------\n\nTITLE: Using Auth Hook for Client-side Authorization\nDESCRIPTION: Demonstrates how to use the useAuth hook to access user data and conditionally render content based on user authentication state.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/authorization.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuth } from \"wasp/client/auth\";\n\nexport default function ExampleHomePage() {\n  const { data: user } = useAuth();\n\n  return (\n    <h1> Hi {user.email || 'there'} 👋 </h1>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Email Sender Configuration in Wasp Config File\nDESCRIPTION: The email sender configuration in the main.wasp file which sets up a dummy email provider for development. This provider logs all email verification links to the console instead of actually sending emails.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/guided-tour.md#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n  emailSender: {\n    provider: Dummy, // logs all email verification links/tokens to the server's console\n    defaultFrom: {\n      name: \"Open SaaS App\",\n      email: \"me@example.com\" \n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: SendGrid Email Configuration\nDESCRIPTION: Configuration example for SendGrid email provider showing the required email address setup in the main.wasp file.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/email-sending.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nemailSender: {\n  provider: SendGrid,\n  defaultFrom: {\n    name: \"Open SaaS App\",\n    email: \"me@example.com\" // <--- same email address you configured your SendGrid account to send emails with!\n  },\n```\n\n----------------------------------------\n\nTITLE: Opening Prisma DB Studio\nDESCRIPTION: Command to open Prisma's database management GUI for the Wasp project.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/getting-started.mdx#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nwasp db studio\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp App\nDESCRIPTION: Configuration file showing how to set up full-stack authentication in a Wasp application. Includes GitHub OAuth, email authentication with verification and password reset functionality.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/blog/2024-12-10-turboreel-os-ai-video-generator-built-with-open-saas.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"My App\",\n  auth: {\n    // 1. Specify the User entity\n    userEntity: User,\n    methods: {\n      // 2. Enable Github Auth\n      gitHub: {},\n      email: {\n        // 3. Specify the email from field\n        fromField: {\n          name: \"My App Postman\",\n          email: \"hello@itsme.com\"\n        },\n        // 4. Specify the email verification and password reset options\n        emailVerification: {\n          clientRoute: EmailVerificationRoute\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute\n        },\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Author Metadata in Astro Config\nDESCRIPTION: This JavaScript snippet demonstrates how to configure author metadata in the astro.config.mjs file for use in blog posts.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/README.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nauthors: {\n  vince: {\n    name: 'Vince',\n    title: 'Dev Rel @ Wasp',\n    picture: '/CRAIG_ROCK.png', // Put author images in the `public` directory.\n    url: 'https://wasp.sh',\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Adding Meta Tags to Astro Blog Posts\nDESCRIPTION: This YAML frontmatter example shows how to add SEO-relevant metadata to blog posts in Astro. It includes properties for title, publication date, description, author, image, and tags.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/seo.mdx#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'My First Blog Post'\npubDate: 2022-07-01\ndescription: 'This is the first post of my new Astro blog.'\nauthor: 'Astro Learner'\nimage:\n    url: 'https://docs.astro.build/assets/full-logo-light.png'\n    alt: 'The full Astro logo.'\ntags: [\"astro\", \"blogging\", \"learning in public\"]\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Fine-Grained Cookie Control Preferences\nDESCRIPTION: Extended configuration for the cookie consent modal to offer users granular control over different types of cookies. This implementation allows users to selectively accept or reject different cookie categories including analytics, necessary cookies, and third-party services like YouTube.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/cookie-consent.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n    language: {\n      default: 'en',\n      translations: {\n        en: {\n          consentModal: {\n            // ...\n            showPreferencesBtn: 'Manage Individual preferences', // This button will open the preferences modal below.\n          },\n          preferencesModal: {\n            title: 'Manage cookie preferences',\n            acceptAllBtn: 'Accept all',\n            acceptNecessaryBtn: 'Reject all',\n            savePreferencesBtn: 'Accept current selection',\n            closeIconLabel: 'Close modal',\n            serviceCounterLabel: 'Service|Services',\n            sections: [\n              {\n                title: 'Your Privacy Choices',\n                description: `In this panel you can express some preferences related to the processing of your personal information. You may review and change expressed choices at any time by resurfacing this panel via the provided link. To deny your consent to the specific processing activities described below, switch the toggles to off or use the \"Reject all\" button and confirm you want to save your choices.`,\n              },\n              {\n                title: 'Strictly Necessary',\n                description:\n                  'These cookies are essential for the proper functioning of the website and cannot be disabled.',\n                linkedCategory: 'necessary',\n              },\n              {\n                title: 'Performance and Analytics',\n                description:\n                  'These cookies collect information about how you use our website. All of the data is anonymized and cannot be used to identify you.',\n                linkedCategory: 'analytics',\n                cookieTable: {\n                  caption: 'Cookie table',\n                  headers: {\n                    name: 'Cookie',\n                    domain: 'Domain',\n                    desc: 'Description',\n                  },\n                  body: [\n                    {\n                      name: '_ga',\n                      domain: location.hostname,\n                      desc: 'Description 1',\n                    },\n                    {\n                      name: '_gid',\n                      domain: location.hostname,\n                      desc: 'Description 2',\n                    },\n                  ],\n                },\n              },\n              {\n                title: 'YouTube',\n                description: 'This service is used to display video content on the website.',\n                linkedCategory: 'youtube',\n                cookieTable: { \n                  // ...\n                }\n              },\n              {\n                title: 'More information',\n                description:\n                  'For any queries in relation to my policy on cookies and your choices, please <a href=\"#contact-page\">contact us</a>',\n              },\n            ],\n          },\n        },\n      },\n    }\n```\n\n----------------------------------------\n\nTITLE: Migrating from Dummy to SendGrid Email Provider\nDESCRIPTION: This snippet demonstrates how to transition from the development Dummy email provider to the production-ready SendGrid provider. It shows the modified configuration with highlighted changes and important notes about email address consistency.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/authentication.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n  auth: {\n    methods: {\n      email: {\n        fromField: {\n          name: \"Open SaaS App\",\n          // When using SendGrid, you must use the same email address that you configured your account to send out emails with!\n          email: \"me@example.com\" \n        },\n        //...\n      }, \n    }\n  },\n  //...\n  emailSender: {\n    provider: Dummy,\n    provider: SendGrid,\n    defaultFrom: {\n      name: \"Open SaaS App\",\n      // When using SendGrid, you must use the same email address that you configured your account to send out emails with!\n      email: \"me@example.com\" \n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Running Wasp Database Studio for Payment Verification\nDESCRIPTION: Command to launch the Wasp database studio interface to verify subscription status updates after completing a payment flow. This allows inspecting user entities to confirm that subscription status has been properly updated to 'active'.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/payments-integration.mdx#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nwasp db studio\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Database Migration\nDESCRIPTION: Command to create the initial database migration for the Wasp project.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/getting-started.mdx#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Daily Stats Job in Wasp\nDESCRIPTION: This snippet defines a recurring background job for calculating daily statistics, including the job executor, perform function, schedule, and related entities.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/general/admin-dashboard.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\njob dailyStatsJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { calculateDailyStats } from \"@src/analytics/stats\"\n  },\n  schedule: {\n    cron: \"0 * * * *\" // every hour. useful in production\n    // cron: \"* * * * *\" // every minute. useful for debugging\n  },\n  entities: [User, DailyStats, Logs, PageViewSource]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Google Analytics ID in Client Environment Variables\nDESCRIPTION: Configuration for adding the Google Analytics ID to the .env.client file, which is used with the Cookie Consent Modal in the application.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/analytics.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nREACT_APP_GOOGLE_ANALYTICS_ID=<your-google-analytics-id> # e.g. G-1234567890\n```\n\n----------------------------------------\n\nTITLE: Switching Analytics Provider from Plausible to Google Analytics\nDESCRIPTION: Code modification in stats.ts that changes the analytics provider from Plausible to Google Analytics by updating the import statements for the utility functions.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/analytics.md#2025-04-18_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n//...\nimport { getDailyPageViews, getSources } from './providers/plausibleAnalyticsUtils';\nimport { getDailyPageViews, getSources } from './providers/googleAnalyticsUtils';\n\nexport const calculateDailyStats: DailyStatsJob<never, void> = async (_args, context) => { \n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Mailgun Email Configuration\nDESCRIPTION: Configuration example for Mailgun email provider showing the required email address setup in the main.wasp file.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/email-sending.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nemailSender: {\n  provider: Mailgun,\n  defaultFrom: {\n    name: \"Open SaaS App\",\n    email: \"me@example.com\" // <--- same email address you configured your Mailgun account to send emails with!\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring Daily Stats Job for Analytics in Wasp\nDESCRIPTION: Sets up a scheduled job using Wasp's PgBoss executor to calculate daily statistics. The job runs hourly and interacts with User, DailyStats, Logs, and PageViewSource entities to generate analytics data.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/guided-tour.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\njob dailyStatsJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { calculateDailyStats } from \"@src/analytics/stats\"\n  },\n  schedule: {\n    cron: \"0 * * * *\" // runs every hour\n  },\n  entities: [User, DailyStats, Logs, PageViewSource]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Privacy Policy Links in Cookie Consent Modal\nDESCRIPTION: Adding custom links to Privacy Policy and Terms and Conditions in the cookie consent modal footer. This is important for legal compliance as users should have easy access to these documents when making decisions about cookies.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/cookie-consent.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n    language: {\n      default: 'en',\n      translations: {\n        en: {\n          consentModal: {\n            title: 'We use cookies',\n            // ...\n            // TODO: Add your own privacy policy and terms and conditions links below.\n            footer: `\n            <a href=\"<your-url-here>\" target=\"_blank\">Privacy Policy</a>\n            <a href=\"<your-url-here>\" target=\"_blank\">Terms and Conditions</a>\n                    `,\n          },\n        },\n      },\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Blog and Docs\nDESCRIPTION: Commands to navigate to the blog directory, install dependencies, and start the development server for the Starlight-based blog and documentation.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/getting-started.mdx#2025-04-18_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncd ../blog\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting Client-Side Environment Variables for Wasp Deploy\nDESCRIPTION: Command to deploy a Wasp application while including client-side environment variables in the build process.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/deploying.mdx#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nREACT_APP_CLIENT_ENV_VAR_1=<...> REACT_APP_CLIENT_ENV_VAR_2=<...> wasp deploy\n```\n\n----------------------------------------\n\nTITLE: Embedding Interactive Plausible Analytics Demo in HTML\nDESCRIPTION: This code snippet embeds an interactive demo of Plausible Analytics using an iframe. It demonstrates the tool's interface and functionality directly within the page.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/blog/2025-02-27-meet-marko-saric-co-founder-of-privacy-friendly-plausible-analytics.mdx#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style={{ position: 'relative', paddingBottom: 'calc(53.11430527036276% + 41px)', height: 0, width: '100%' }}>\n  <iframe\n    src=\"https://demo.arcade.software/4kph6Di7Pv5wlVhhsmEw?embed\"\n    title=\"Plausible Analytics: Live Demo\"\n    frameBorder=\"0\"\n    loading=\"lazy\"\n    allowFullScreen\n    style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', colorScheme: 'light' }}\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Google Analytics ID in Environment Variables\nDESCRIPTION: Setting the Google Analytics ID in the .env.client file to enable proper tracking through the cookie consent system. This environment variable is required for the cookie consent modal to dynamically add or remove Google Analytics cookies based on user preference.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/cookie-consent.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n REACT_APP_GOOGLE_ANALYTICS_ID=G-1234567890\n```\n\n----------------------------------------\n\nTITLE: Deploying Blog to Netlify (Production)\nDESCRIPTION: Command to deploy the blog to Netlify's production environment, making it live and publicly accessible.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/deploying.mdx#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnetlify deploy --prod\n```\n\n----------------------------------------\n\nTITLE: Secure Implementation for Updating User Personal Data\nDESCRIPTION: Example of a secure implementation for updating specific user fields using TypeScript's Pick utility type to restrict updateable fields.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/blog/2025-02-26-incident-report-vulnerability-in-open-saas.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const updateCurrentUserPersonalData: UpdateCurrentUserPersonalData<Pick<User, \"fullName\" | \"address\">, User> = async (personalData, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  // NOTE: This is also a good place to do data validation if you want to.\n  const fullName = personalData.fullName\n  const address = personalData.address\n\n  return context.entities.User.update({\n    where: {\n      id: context.user.id,\n    },\n    data: { fullName, address }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Logging into Stripe CLI\nDESCRIPTION: Shell command for authenticating with Stripe CLI to enable webhook forwarding and testing functionality.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/payments-integration.mdx#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nstripe login\n```\n\n----------------------------------------\n\nTITLE: Viewing Server Logs for Email Verification in Development\nDESCRIPTION: Example of server logs showing a dummy email verification link during development. In development mode, emails are not actually sent but logged to the terminal for testing purposes.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/guided-tour.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n[ Server ] ╔═══════════════════════╗\n[ Server ] ║ Dummy email sender ✉️  ║\n[ Server ] ╚═══════════════════════╝\n[ Server ] From:    Open SaaS App <me@example.com>\n[ Server ] To:      vinny@wasp.sh\n[ Server ] Subject: Verify your email\n[ Server ] ═════════ Text ═════════\n[ Server ] Click the link below to verify your email: http://localhost:3000/email-verification?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InZpbm55QHdhc3Auc2giLCJleHAiOjE3MTg5NjUyNTB9.PkRGrmuDPuYFXkTprf7QpAye0e_O9a70xbER6LfxGJw\n[ Server ] ═════════ HTML ═════════\n[ Server ] <p>Click the link below to verify your email</p>\n[ Server ] <a href=\"http://localhost:3000/email-verification?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InZpbm55QHdhc3Auc2giLCJleHAiOjE3MTg5NjUyNTB9.PkRGrmuDPuYFXkTprf7QpAye0e_O9a70xbER6LfxGJw\">Verify email</a> \n[ Server ] ════════════════════════\n```\n\n----------------------------------------\n\nTITLE: Google Analytics ID Format Example\nDESCRIPTION: Example format of a Google Analytics ID that appears in the installation URL. This ID needs to be extracted for environment configuration.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/analytics.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n https://www.googletagmanager.com/gtag/js?id=<your-google-analytics-id>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dummy Email Provider in Wasp\nDESCRIPTION: Implementation of a dummy email provider for local development environment. This provider doesn't actually send emails and is meant for testing purposes only.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/email-sending.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\napp SaaSTemplate {\n  // ...\n  emailSender: {\n    provider: Dummy,\n    defaultFrom: {\n      name: \"Open SaaS App\",\n      email: \"me@example.com\" \n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Callback URL Format for Lemon Squeezy Webhook\nDESCRIPTION: Example of a formatted callback URL for Lemon Squeezy webhooks. The URL consists of the Ngrok-generated domain followed by the '/payments-webhook' endpoint path that is configured in the Wasp application.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/payments-integration.mdx#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nhttps://89e5-2003-c7-153c-72a5-f837.ngrok-free.app/payments-webhook\n```\n\n----------------------------------------\n\nTITLE: Configuring Dummy Email Provider for Development\nDESCRIPTION: This snippet shows the configuration for the Dummy email provider, which is used during development. It logs email verification links and tokens to the server console instead of sending actual emails.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/authentication.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n  emailSender: {\n    provider: Dummy, // logs all email verification links/tokens to the server's console\n    defaultFrom: {\n      name: \"Open SaaS App\",\n      email: \"me@example.com\" \n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Setting Stripe Webhook Secret in Fly.io Environment\nDESCRIPTION: Command to set the Stripe webhook secret as an environment variable for a server deployed on Fly.io using the Wasp CLI.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/deploying.mdx#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nwasp deploy fly cmd --context server secrets set STRIPE_WEBHOOK_SECRET=whsec_...\n```\n\n----------------------------------------\n\nTITLE: Generating OG Image URLs with TypeScript and Astro\nDESCRIPTION: Code snippet demonstrating how to construct Open Graph image URLs using Astro props and URL manipulation. The code takes a blog post ID, transforms it into the correct image path format, and creates a complete URL using the site's base URL.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/public/banner-images/README.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst ogImageUrl = new URL(\n  `/banner-images/${Astro.props.id.replace(/blog\\//,'').replace(/\\.\\w+$/, '.webp')}`,\n  Astro.site,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Stripe NPM Package Version\nDESCRIPTION: Shell command to install a specific version of the Stripe NPM package, ensuring compatibility with the Stripe API version used in the dashboard.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/deploying.mdx#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install stripe@x.x.x # e.g. npm install stripe@13.11.0\n```\n\n----------------------------------------\n\nTITLE: Exploring Project Root Directory Structure\nDESCRIPTION: Overview of the top-level directory structure of the Open SaaS project, showing the three main directories: app (the Wasp project), blog (Astro Starlight template), and e2e-tests (Playwright tests).\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/guided-tour.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n.\n├── app\n├── blog\n└── e2e-tests\n```\n\n----------------------------------------\n\nTITLE: Examining App Directory Structure\nDESCRIPTION: Detailed view of the app directory structure which contains the Wasp configuration file, source code organized by feature, and environment files. The structure is designed vertically by feature for better organization.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/guided-tour.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n.\n├── main.wasp              # Wasp Config file. You define your app structure here.\n├── .wasp/                 # Output dir for Wasp. DON'T MODIFY THESE FILES!\n├── public/                # Public assets dir, e.g. www.yourdomain.com/public-banner.webp\n├── src/                   # Your code goes here.\n│   ├── admin/             # Admin dashboard related pages and components.\n│   ├── analytics/         # Logic and background jobs for processing analytics.\n│   ├── auth/              # All auth-related pages/components and logic.\n│   ├── client/            # Shared components, hooks, landing page, and other client code (React).\n│   ├── demo-ai-app/       # Logic for the example AI-powered demo app.\n│   ├── file-upload/       # Logic for uploading files to S3.\n│   ├── landing-page       # Landing page related code\n│   ├── messages           # Logic for app user messages.\n│   ├── payment/           # Logic for handling payments and webhooks.\n│   ├── server/            # Scripts, shared server utils, and other server-specific code (NodeJS).\n│   ├── shared/            # Shared constants and util functions.\n│   └── user/              # Logic related to users and their accounts.\n├── .env.server            # Dev environment variables for your server code.\n├── .env.client            # Dev environment variables for your client code.\n├── .prettierrc            # Prettier configuration.\n├── tailwind.config.js     # TailwindCSS configuration.\n├── package.json\n├── package-lock.json\n└── .wasproot\n```\n\n----------------------------------------\n\nTITLE: Triggering a Test Payment Event in Stripe\nDESCRIPTION: Command to manually trigger a payment_intent.succeeded event for testing webhook functionality without making an actual payment.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/payments-integration.mdx#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nstripe trigger payment_intent.succeeded\n```\n\n----------------------------------------\n\nTITLE: Client Directory Structure in src Folder\nDESCRIPTION: Breakdown of the client directory structure which contains shared React components, hooks, icons, and static assets used throughout the application. The App.tsx file is the main component wrapping all child components.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/guided-tour.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n.\n└── client\n    ├── components         # Your shared React components.\n    ├── fonts              # Extra fonts\n    ├── hooks              # Your shared React hooks.\n    ├── icons              # Your shared SVG icons.\n    ├── static             # Assets that you need access to in your code, e.g. import logo from 'static/logo.png'\n    ├── App.tsx            # Main app component to wrap all child components. Useful for global state, navbars, etc.\n    ├── cn.ts              # Helper function for dynamic and conditional Tailwind CSS classes.\n    └── Main.css\n```\n\n----------------------------------------\n\nTITLE: Starting Stripe Webhook Forwarding\nDESCRIPTION: Command to start the Stripe webhook forwarding service that redirects webhook events to your local development server on port 3001.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/payments-integration.mdx#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nstripe listen --forward-to localhost:3001/payments-webhook\n```\n\n----------------------------------------\n\nTITLE: Server Directory Structure in src Folder\nDESCRIPTION: Overview of the server directory which contains scripts and utility functions for server-side operations that don't belong to specific features. This includes scripts for tasks like database seeding.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/guided-tour.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n└── server\n    ├── scripts            # Scripts to run via Wasp, e.g. database seeding.\n    └── utils.ts\n```\n\n----------------------------------------\n\nTITLE: Encoding Google Analytics Private Key for Environment Variables\nDESCRIPTION: Shell command to encode the Google Analytics private key in base64 format for secure storage in environment variables, avoiding parsing errors with the PEM format.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/analytics.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\necho -n \"-----BEGIN PRIVATE KEY-----\\nMI...A++eK\\n-----END PRIVATE KEY-----\\n\" | base64\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp on Linux and macOS\nDESCRIPTION: Command to install Wasp on Linux and macOS systems using a curl-based installer script.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/getting-started.mdx#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Running Ngrok for Local Webhook Testing with Lemon Squeezy\nDESCRIPTION: Command to expose the local Wasp server (running on port 3001) to the internet using Ngrok. This creates a public URL that can be used as a callback URL for Lemon Squeezy webhooks during development.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/payments-integration.mdx#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nngrok http 3001\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp on Windows (WSL2)\nDESCRIPTION: Command to install Wasp in a Windows Subsystem for Linux (WSL2) environment.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/getting-started.mdx#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Generating OG Image URLs using URL Construction in TSX\nDESCRIPTION: This code snippet demonstrates how Open Graph image URLs are automatically generated for blog posts by constructing a URL based on the post ID. It extracts the post slug from the ID, ensures the file extension is .webp, and creates a complete URL using the site's base URL.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/template/blog/public/banner-images/README.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst ogImageUrl = new URL(\n  `/banner-images/${Astro.props.id.replace(/blog\\//, '').replace(/\\.\\w+$/, '.webp')}`,\n  Astro.site,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Test Dependencies for Open SaaS e2e Tests\nDESCRIPTION: Command to install the necessary dependencies for running e2e tests in the Open SaaS project.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/template/e2e-tests/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd e2e-tests && npm install\n```\n\n----------------------------------------\n\nTITLE: Running Open SaaS App with Email Verification Skipped\nDESCRIPTION: Command to start the Wasp app with an environment variable set to skip email verification in development mode, which is necessary for e2e tests to run without interruption.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/template/e2e-tests/README.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd app && SKIP_EMAIL_VERIFICATION_IN_DEV=true wasp start\n```\n\n----------------------------------------\n\nTITLE: Starting Wasp Database for Open SaaS e2e Tests\nDESCRIPTION: Command to start the Wasp database, which is required to be running before executing the e2e tests.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/template/e2e-tests/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd ../app && wasp db start\n```\n\n----------------------------------------\n\nTITLE: Exploring the Open SaaS E2E Test Directory Structure\nDESCRIPTION: Shows the directory structure of the e2e-tests folder within an Open SaaS project, highlighting the main components like test files, configuration, and scripts for CI integration.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/tests.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── e2e-tests/\n│   ├── tests/                  # Directory containing the test files\n│   ├── README.md               # Instructions on how to run the tests\n│   ├── ci-start-app-and-db.js  # Script to start the app and db for CI\n│   ├── playwright.config.ts    # Playwright configuration\n│   ├── package.json\n│   ├── ...\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for MacOS\nDESCRIPTION: Bash commands for installing necessary dependencies when developing on MacOS, including coreutils, gpatch, and diffutils packages, along with creating aliases for realpath and patch commands.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install coreutils # contains grealpath\nbrew install gpatch\nbrew install diffutils\n\necho 'alias realpath=\"grealpath\"' >> ~/.zshrc\necho 'alias patch=\"gpatch\"' >> ~/.zshrc\nsource ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Creating a New Wasp Project\nDESCRIPTION: Command to create a new Wasp project using the SaaS template.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/getting-started.mdx#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nwasp new\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta on Mac (Apple Silicon)\nDESCRIPTION: Command to install Rosetta on Mac with Apple Silicon, enabling x86 applications to run on arm64 architecture.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/getting-started.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsoftwareupdate --install-rosetta\n```\n\n----------------------------------------\n\nTITLE: Setting Client-Side Environment Variables for Manual Build\nDESCRIPTION: Command to build a React application manually while including client-side environment variables in the build process.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/deploying.mdx#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nREACT_APP_CLIENT_ENV_VAR_1=<...> npm run build\n```\n\n----------------------------------------\n\nTITLE: Docker Post-Installation Steps for WSL2\nDESCRIPTION: Commands to set up Docker in WSL2 environment, including creating a docker group and adding the current user to it.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/getting-started.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo groupadd docker\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -aG docker $USER\n```\n\nLANGUAGE: bash\nCODE:\n```\nsu -s $USER\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Components in Astro Config\nDESCRIPTION: This JavaScript snippet shows how to configure custom components in the astro.config.mjs file, replacing default Starlight components with custom ones.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncomponents: {\n  SiteTitle: './src/components/MyHeader.astro',\n  ThemeSelect: './src/components/MyThemeSelect.astro',\n  Head: './src/components/HeadWithOGImage.astro',\n  PageTitle: './src/components/TitleWithBannerImage.astro',\n},\n```\n\n----------------------------------------\n\nTITLE: Template Version Tag Format\nDESCRIPTION: Example format for template version tags used in the Open SaaS project. Tags follow the pattern wasp-v{{version}}-template where {{version}} represents the Wasp version number.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nwasp-v0.13-template\n```\n\n----------------------------------------\n\nTITLE: Configuring Plausible Site ID in Environment Variables\nDESCRIPTION: Sets the Plausible site ID in the .env.server file. The site ID should be your domain without the www prefix.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/analytics.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nPLAUSIBLE_SITE_ID=<your domain without www>\n```\n\n----------------------------------------\n\nTITLE: Installing Starlight with Astro CLI\nDESCRIPTION: Command to create a new Astro project using the Starlight template. This is the initial setup command to bootstrap a documentation website with Starlight.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/template/blog/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest -- --template starlight\n```\n\n----------------------------------------\n\nTITLE: Building Astro Starlight Blog for Deployment\nDESCRIPTION: Command to build the Astro Starlight blog, generating static files in the 'dist' directory for deployment.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/deploying.mdx#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Viewing Starlight Project Structure\nDESCRIPTION: Illustration of the typical file and directory structure of a Starlight project. Shows the organization of files including content directories, configuration files, and static assets locations.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/template/blog/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── public/\n├── src/\n│   ├── assets/\n│   ├── content/\n│   │   ├── docs/\n│   │   └── config.ts\n│   └── env.d.ts\n├── astro.config.mjs\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Running Local e2e Tests for Open SaaS\nDESCRIPTION: Command to execute the local e2e tests using Playwright's UI mode, allowing interactive test viewing and execution in a browser environment.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/template/e2e-tests/README.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd e2e-tests && npm run local:e2e:start\n```\n\n----------------------------------------\n\nTITLE: Using Astro Image Component in MDX\nDESCRIPTION: This MDX snippet shows how to import and use Astro's Image component for optimized image rendering in blog posts and docs.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/README.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Image } from 'astro:assets';\nimport myImage from '../../../assets/my-image.jpg';\n\n<Image src={myImage} alt=\"My Image\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Admin Emails in Environment Variables\nDESCRIPTION: This snippet demonstrates how to set up admin email addresses in the .env.server file for granting admin privileges.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/general/admin-dashboard.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nADMIN_EMAILS=me@example.com\n\n// or add many admins with a comma-separated list\n\nADMIN_EMAILS=me@example.com,you@example.com,them@example.com\n```\n\n----------------------------------------\n\nTITLE: Responsive YouTube Video Embed in JSX\nDESCRIPTION: A responsive iframe implementation for embedding a YouTube video with proper aspect ratio and positioning using CSS.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/blog/2023-11-21-coverlettergpt.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\">\n  <iframe \n    style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"\n    src=\"https://www.youtube.com/embed/ZhcFRD9cVrI\" \n    frameborder=\"0\" \n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Copying Environment File\nDESCRIPTION: Command to copy the example environment file to create a new .env.server file.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/getting-started.mdx#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncp .env.server.example .env.server\n```\n\n----------------------------------------\n\nTITLE: Installing Stripe CLI with Homebrew\nDESCRIPTION: Shell command for installing the Stripe CLI using Homebrew, which is necessary for local webhook testing and development.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/payments-integration.mdx#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbrew install stripe/stripe-cli/stripe\n```\n\n----------------------------------------\n\nTITLE: Astro Image Import Statement\nDESCRIPTION: Import statement for the Image component from Astro's asset handling system.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/blog/2023-11-21-coverlettergpt.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from 'astro:assets';\n```\n\n----------------------------------------\n\nTITLE: Vulnerable updateCurrentUser Implementation in TypeScript\nDESCRIPTION: Original implementation of updateCurrentUser function that contained a security vulnerability allowing users to modify any field in their User record, including restricted fields like isAdmin and subscriptionPlan.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/blog/2025-02-26-incident-report-vulnerability-in-open-saas.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const updateCurrentUser: UpdateCurrentUser<Partial<User>, User> = async (user, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  return context.entities.User.update({\n    where: {\n      id: context.user.id,\n    },\n    data: user,  // <- This is the problem!\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Assets in Astro\nDESCRIPTION: Frontend imports for Astro components and image assets used in the blog post layout\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/blog/2025-01-30-from-0-to-400-customers-saas-growth-hacks.mdx#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Image } from 'astro:assets';\nimport articleGeneration from '../../../assets/ricardo-growth-hacks/article-generation.png';\nimport StarOpenSaaSCTA from '../../../components/StarOpenSaaSCTA.astro';\nimport meetingReminders from '../../../assets/ricardo-growth-hacks/meeting-reminders.png';\nimport googleAddons from '../../../assets/ricardo-growth-hacks/google-addons.png';\n```\n\n----------------------------------------\n\nTITLE: Verifying Wasp Installation\nDESCRIPTION: Command to check the installed version of Wasp and verify successful installation.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/getting-started.mdx#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nwasp version\n```\n\n----------------------------------------\n\nTITLE: Accessing Database Studio in Wasp\nDESCRIPTION: This command shows how to open the database studio in Wasp for manual database operations.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/general/admin-dashboard.mdx#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nwasp db studio\n```\n\n----------------------------------------\n\nTITLE: Deploying Blog to Netlify (Preview)\nDESCRIPTION: Command to deploy the built blog to Netlify for preview. This step allows for reviewing the deployment before making it live.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/guides/deploying.mdx#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnetlify deploy\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Component in MDX\nDESCRIPTION: This MDX snippet demonstrates how to import a custom component (VideoPlayer) into a blog post or documentation page.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/README.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Open SaaS Tutorial\"\ndate: 2024-12-10\n//...\n---\nimport VideoPlayer from '../../../components/VideoPlayer.astro';\n```\n\n----------------------------------------\n\nTITLE: Using VideoPlayer Component in MDX\nDESCRIPTION: This MDX snippet shows how to use the VideoPlayer component with custom props for video width on different screen sizes.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/README.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<VideoPlayer src=\"/videos/open-saas-tutorial.mp4\" lgWidth=\"75%\" smWidth=\"80%\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure in Markdown\nDESCRIPTION: This snippet shows the directory structure of the Astro + Starlight project using a code block in Markdown.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n.\n├── public/\n├── src/\n│   ├── assets/\n│   ├── components/\n│   ├── content/\n│   │   ├── docs/\n│   │   │   ├── blog/\n│   │   │   ├── guides/\n│   │   │   └── ...\n│   │   └── config.ts\n│   └── env.d.ts\n├── astro.config.mjs\n├── package.json\n└── tsconfig.json\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Post Frontmatter in YAML\nDESCRIPTION: YAML frontmatter that defines metadata for a blog post including title, publication date, tags, and authors. This information is used by the blog platform to categorize and display the post correctly.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/template/blog/src/content/docs/blog/2023-11-23-post.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: My first blog post\ndate: 2023-11-20\ntags: [\"blog\", \"post\", \"saas\", \"rocknroll\"]\nauthors: [\"Dev\"]\n---\n```\n\n----------------------------------------\n\nTITLE: Embedding Interactive Demo in Markdown\nDESCRIPTION: This snippet shows how to embed an interactive demo of PromptPanda using an iframe within a markdown file. It includes responsive styling and accessibility attributes.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/blog/2025-03-12-going-from-an-idea-to-mvp-in-weeks-promptpandas-launches.mdx#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style={{ position: 'relative', paddingBottom: 'calc(53.11430527036276% + 41px)', height: 0, width: '100%' }}>\n  <iframe\n    src=\"https://demo.arcade.software/JiVvKE3oDWzbar0DKUDX?embed\"\n    title=\"PromptPanda: Live Demo\"\n    frameBorder=\"0\"\n    loading=\"lazy\"\n    allowFullScreen\n    style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', colorScheme: 'light' }}\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js with nvm\nDESCRIPTION: Commands for installing and using a specific version of Node.js using the Node Version Manager (nvm).\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/start/getting-started.mdx#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnvm install 20\n```\n\nLANGUAGE: shell\nCODE:\n```\nnvm use 20\n```\n\nLANGUAGE: shell\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with Responsive Container\nDESCRIPTION: HTML/JSX code for embedding a responsive YouTube video player with specific styling and iframe attributes.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/blog/2024-10-10-most-annoying-cookie-banner-contest.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\">\n  <iframe \n    style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"\n    src=\"https://www.youtube.com/embed/tLEEk8Q5jo4?si=U-nROtawDHrjJ4k0\" \n    title=\"YouTube video player\" \n    frameborder=\"0\" \n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" \n    referrerpolicy=\"strict-origin-when-cross-origin\" \n    allowfullscreen>\n  </iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable in CI Pipeline for Open SaaS\nDESCRIPTION: YAML snippet demonstrating how to set the SKIP_EMAIL_VERIFICATION_IN_DEV environment variable in a CI pipeline to ensure e2e tests run without email verification interruptions.\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/template/e2e-tests/README.md#2025-04-18_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n    SKIP_EMAIL_VERIFICATION_IN_DEV: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Astro Image Import Declarations\nDESCRIPTION: Import statements for image assets using Astro's image component system\nSOURCE: https://github.com/wasp-lang/open-saas/blob/main/opensaas-sh/blog/src/content/docs/blog/2024-10-10-most-annoying-cookie-banner-contest.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from 'astro:assets';\nimport wheel from '@assets/cookie-consent/wheel.gif';\nimport enter from '@assets/cookie-consent/enter.gif';\nimport keyboard from '@assets/cookie-consent/keyboard.jpg';\nimport share from '@assets/cookie-consent/image.png';\n```"
  }
]