[
  {
    "owner": "radix-ui",
    "repo": "website",
    "content": "TITLE: Anatomy of a Dialog Component\nDESCRIPTION: Shows the basic structure of a Dialog component by importing and assembling all the necessary parts including Root, Trigger, Portal, Overlay, Content, Title, Description, and Close.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dialog.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Dialog } from \"radix-ui\";\n\nexport default () => (\n\t<Dialog.Root>\n\t\t<Dialog.Trigger />\n\t\t<Dialog.Portal>\n\t\t\t<Dialog.Overlay />\n\t\t\t<Dialog.Content>\n\t\t\t\t<Dialog.Title />\n\t\t\t\t<Dialog.Description />\n\t\t\t\t<Dialog.Close />\n\t\t\t</Dialog.Content>\n\t\t</Dialog.Portal>\n\t</Dialog.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Tooltip Structure in React\nDESCRIPTION: This snippet demonstrates how to create a tooltip structure within a React component using Radix UI. It showcases the proper use of Tooltip.Provider, Tooltip.Root, Tooltip.Trigger, Tooltip.Portal, and Tooltip.Content components to assemble the tooltip functionality.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/tooltip.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tooltip } from \"radix-ui\";\n\nexport default () => (\n\t<Tooltip.Provider>\n\t\t<Tooltip.Root>\n\t\t\t<Tooltip.Trigger />\n\t\t\t<Tooltip.Portal>\n\t\t\t\t<Tooltip.Content>\n\t\t\t\t\t<Tooltip.Arrow />\n\t\t\t\t</Tooltip.Content>\n\t\t\t</Tooltip.Portal>\n\t\t</Tooltip.Root>\n\t</Tooltip.Provider>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Dropdown Menu Structure with Radix UI\nDESCRIPTION: This snippet demonstrates the basic structure of a dropdown menu using Radix UI's DropdownMenu components, including items and submenus. It utilizes the DropdownMenu.Root, Trigger, Content, Item, Sub, SubTrigger, and SubContent components to create a hierarchical dropdown menu.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/dropdown-menu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DropdownMenu.Root>\n\t<DropdownMenu.Trigger>\n\t\t<Button variant=\"soft\">\n\t\t\tOptions\n\t\t\t<DropdownMenu.TriggerIcon />\n\t\t</Button>\n\t</DropdownMenu.Trigger>\n\t<DropdownMenu.Content>\n\t\t<DropdownMenu.Item shortcut=\"⌘ E\">Edit</DropdownMenu.Item>\n\t\t<DropdownMenu.Item shortcut=\"⌘ D\">Duplicate</DropdownMenu.Item>\n\t\t<DropdownMenu.Separator />\n\t\t<DropdownMenu.Item shortcut=\"⌘ N\">Archive</DropdownMenu.Item>\n\n\t\t<DropdownMenu.Sub>\n\t\t\t<DropdownMenu.SubTrigger>More</DropdownMenu.SubTrigger>\n\t\t\t<DropdownMenu.SubContent>\n\t\t\t\t<DropdownMenu.Item>Move to project…</DropdownMenu.Item>\n\t\t\t\t<DropdownMenu.Item>Move to folder…</DropdownMenu.Item>\n\n\t\t\t\t<DropdownMenu.Separator />\n\t\t\t\t<DropdownMenu.Item>Advanced options…</DropdownMenu.Item>\n\t\t\t</DropdownMenu.SubContent>\n\t\t</DropdownMenu.Sub>\n\n\t\t<DropdownMenu.Separator />\n\t\t<DropdownMenu.Item>Share</DropdownMenu.Item>\n\t\t<DropdownMenu.Item>Add to favorites</DropdownMenu.Item>\n\t\t<DropdownMenu.Separator />\n\t\t<DropdownMenu.Item shortcut=\"⌘ ⌫\" color=\"red\">\n\t\t\tDelete\n\t\t</DropdownMenu.Item>\n\t</DropdownMenu.Content>\n</DropdownMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Adding Theme Component to React Application\nDESCRIPTION: Example of how to wrap the root component of a React application with the Theme component from Radix Themes.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/getting-started.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Theme } from \"@radix-ui/themes\";\n\nexport default function () {\n\treturn (\n\t\t<html>\n\t\t\t<body>\n\t\t\t\t<Theme>\n\t\t\t\t\t<MyApp />\n\t\t\t\t</Theme>\n\t\t\t</body>\n\t\t</html>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Component - Radix UI JSX\nDESCRIPTION: Demonstrates basic configuration of the Theme component with customization options for accent color, gray color, panel background, scaling, and radius.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Theme\n\taccentColor=\"mint\"\n\tgrayColor=\"gray\"\n\tpanelBackground=\"solid\"\n\tscaling=\"100%\"\n\tradius=\"full\"\n>\n\t<ThemesVolumeControlExample />\n</Theme>\n```\n\n----------------------------------------\n\nTITLE: Importing and Structuring Popover in JSX\nDESCRIPTION: This JSX snippet showcases how to import the Popover component from Radix UI and structure it within a React functional component, demonstrating the use of Popover.Triggers and Popover.Content.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/overview/getting-started.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport * as React from \"react\";\nimport { Popover } from \"radix-ui\";\n\nconst PopoverDemo = () => (\n\t<Popover.Root>\n\t\t<Popover.Trigger>More info</Popover.Trigger>\n\t\t<Popover.Portal>\n\t\t\t<Popover.Content>\n\t\t\t\tSome more info…\n\t\t\t\t<Popover.Arrow />\n\t\t\t</Popover.Content>\n\t\t</Popover.Portal>\n\t</Popover.Root>\n);\n\nexport default PopoverDemo;\n```\n\n----------------------------------------\n\nTITLE: Integrating Radix UI with Client-Side Routing (Next.js)\nDESCRIPTION: This snippet demonstrates how to integrate the Radix UI Navigation Menu with a client-side routing library, specifically Next.js. It creates a custom `Link` component that wraps the `NextLink` component and uses `NavigationMenu.Link` to ensure accessibility and consistent keyboard control.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/navigation-menu.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { usePathname } from \"next/navigation\";\nimport NextLink from \"next/link\";\nimport { NavigationMenu } from \"radix-ui\";\nimport \"./styles.css\";\n\nconst Link = ({ href, ...props }) => {\n\tconst pathname = usePathname();\n\tconst isActive = href === pathname;\n\n\treturn (\n\t\t<NavigationMenu.Link asChild active={isActive}>\n\t\t\t<NextLink href={href} className=\"NavigationMenuLink\" {...props} />\n\t\t</NavigationMenu.Link>\n\t);\n};\n\nexport default () => (\n\t<NavigationMenu.Root>\n\t\t<NavigationMenu.List>\n\t\t\t<NavigationMenu.Item>\n\t\t\t\t<Link href=\"/\">Home</Link>\n\t\t\t</NavigationMenu.Item>\n\t\t\t<NavigationMenu.Item>\n\t\t\t\t<Link href=\"/about\">About</Link>\n\t\t\t</NavigationMenu.Item>\n\t\t</NavigationMenu.List>\n\t</NavigationMenu.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Context Menu with Complex Items in React using Radix UI\nDESCRIPTION: Example showing how to add decorative elements like images to Context Menu items, creating more complex and visually rich menu options.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ContextMenu } from \"radix-ui\";\n\nexport default () => (\n\t<ContextMenu.Root>\n\t\t<ContextMenu.Trigger>…</ContextMenu.Trigger>\n\t\t<ContextMenu.Portal>\n\t\t\t<ContextMenu.Content>\n\t\t\t\t<ContextMenu.Item>\n\t\t\t\t\t<img src=\"…\" />\n\t\t\t\t\tAdolfo Hess\n\t\t\t\t</ContextMenu.Item>\n\t\t\t\t<ContextMenu.Item>\n\t\t\t\t\t<img src=\"…\" />\n\t\t\t\t\tMiyah Myles\n\t\t\t\t</ContextMenu.Item>\n\t\t\t</ContextMenu.Content>\n\t\t</ContextMenu.Portal>\n\t</ContextMenu.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Composing Text with Checkbox Form Control in Radix UI (JSX)\nDESCRIPTION: This example demonstrates how to compose a Text component with a Checkbox form control. The Text component is used as a label that wraps the Checkbox, creating a properly aligned multi-line form control. The Flex component with a gap property helps maintain proper spacing between the checkbox and text content.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text.mdx#2025-04-21_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<Box maxWidth=\"300px\">\n\t<Text as=\"label\" size=\"3\">\n\t\t<Flex gap=\"2\">\n\t\t\t<Checkbox defaultChecked /> I understand that these documents are\n\t\t\tconfidential and cannot be shared with a third party.\n\t\t</Flex>\n\t</Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Using Radix Themes Components in React\nDESCRIPTION: Example of how to use Radix Themes components (Flex, Text, Button) in a React application.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/getting-started.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Flex, Text, Button } from \"@radix-ui/themes\";\n\nexport default function MyApp() {\n\treturn (\n\t\t<Flex direction=\"column\" gap=\"2\">\n\t\t\t<Text>Hello from Radix Themes :)</Text>\n\t\t\t<Button>Let's go</Button>\n\t\t</Flex>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Menu Component Structure in React\nDESCRIPTION: Example showing the anatomy of the Context Menu component with all possible parts structured together, including nested submenus, checkbox items, and radio groups.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ContextMenu } from \"radix-ui\";\n\nexport default () => (\n\t<ContextMenu.Root>\n\t\t<ContextMenu.Trigger />\n\n\t\t<ContextMenu.Portal>\n\t\t\t<ContextMenu.Content>\n\t\t\t\t<ContextMenu.Label />\n\t\t\t\t<ContextMenu.Item />\n\n\t\t\t\t<ContextMenu.Group>\n\t\t\t\t\t<ContextMenu.Item />\n\t\t\t\t</ContextMenu.Group>\n\n\t\t\t\t<ContextMenu.CheckboxItem>\n\t\t\t\t\t<ContextMenu.ItemIndicator />\n\t\t\t\t</ContextMenu.CheckboxItem>\n\n\t\t\t\t<ContextMenu.RadioGroup>\n\t\t\t\t\t<ContextMenu.RadioItem>\n\t\t\t\t\t\t<ContextMenu.ItemIndicator />\n\t\t\t\t\t</ContextMenu.RadioItem>\n\t\t\t\t</ContextMenu.RadioGroup>\n\n\t\t\t\t<ContextMenu.Sub>\n\t\t\t\t\t<ContextMenu.SubTrigger />\n\t\t\t\t\t<ContextMenu.Portal>\n\t\t\t\t\t\t<ContextMenu.SubContent />\n\t\t\t\t\t</ContextMenu.Portal>\n\t\t\t\t</ContextMenu.Sub>\n\n\t\t\t\t<ContextMenu.Separator />\n\t\t\t</ContextMenu.Content>\n\t\t</ContextMenu.Portal>\n\t</ContextMenu.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Radix Themes CSS in TypeScript\nDESCRIPTION: Import statement for including the global CSS file of Radix Themes at the root of the application.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/getting-started.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport \"@radix-ui/themes/styles.css\";\n```\n\n----------------------------------------\n\nTITLE: Dropdown Menu Structure - React\nDESCRIPTION: This snippet demonstrates how to set up the basic structure of a dropdown menu component in React using Radix UI. It includes the Root, Trigger, and various menu parts like Content, Label, Item, and others.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dropdown-menu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DropdownMenu } from \"radix-ui\";\n\nexport default () => (\n\t<DropdownMenu.Root>\n\t\t<DropdownMenu.Trigger />\n\n\t\t<DropdownMenu.Portal>\n\t\t\t<DropdownMenu.Content>\n\t\t\t\t<DropdownMenu.Label />\n\t\t\t\t<DropdownMenu.Item />\n\n\t\t\t\t<DropdownMenu.Group>\n\t\t\t\t\t<DropdownMenu.Item />\n\t\t\t\t</DropdownMenu.Group>\n\n\t\t\t\t<DropdownMenu.CheckboxItem>\n\t\t\t\t\t<DropdownMenu.ItemIndicator />\n\t\t\t\t</DropdownMenu.CheckboxItem>\n\n\t\t\t\t<DropdownMenu.RadioGroup>\n\t\t\t\t\t<DropdownMenu.RadioItem>\n\t\t\t\t\t\t<DropdownMenu.ItemIndicator />\n\t\t\t\t\t</DropdownMenu.RadioItem>\n\t\t\t\t</DropdownMenu.RadioGroup>\n\n\t\t\t\t<DropdownMenu.Sub>\n\t\t\t\t\t<DropdownMenu.SubTrigger />\n\t\t\t\t\t<DropdownMenu.Portal>\n\t\t\t\t\t\t<DropdownMenu.SubContent />\n\t\t\t\t\t</DropdownMenu.Portal>\n\t\t\t\t</DropdownMenu.Sub>\n\n\t\t\t\t<DropdownMenu.Separator />\n\t\t\t\t<DropdownMenu.Arrow />\n\t\t\t</DropdownMenu.Content>\n\t\t\t</DropdownMenu.Portal>\n\t</DropdownMenu.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Radix Colors with styled-components\nDESCRIPTION: This snippet demonstrates how to use Radix Colors with styled-components. It imports color scales, creates light and dark themes, and applies the colors to a styled button component. Requires `styled-components` and `@radix-ui/colors` packages.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/overview/usage.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n\tgray,\n\tblue,\n\tred,\n\tgreen,\n\tgrayDark,\n\tblueDark,\n\tredDark,\n\tgreenDark,\n} from \"@radix-ui/colors\";\nimport styled, { ThemeProvider } from \"styled-components\";\n\n// Create your theme\nconst theme = {\n\tcolors: {\n\t\t...gray,\n\t\t...blue,\n\t\t...red,\n\t\t...green,\n\t},\n};\n\n// Create your dark theme\nconst darkTheme = {\n\tcolors: {\n\t\t...grayDark,\n\t\t...blueDark,\n\t\t...redDark,\n\t\t...greenDark,\n\t},\n};\n\n// Use the colors in your styles\nconst Button = styled.button`\n\tbackground-color: ${(props) => props.theme.colors.blue4};\n\tcolor: ${(props) => props.theme.colors.blue11};\n\tborder-color: ${(props) => props.theme.colors.blue7};\n\t&:hover {\n\t\tbackground-color: ${(props) => props.theme.colors.blue5};\n\t\tborder-color: ${(props) => props.theme.colors.blue8};\n\t}\n`;\n\n// Wrap your app with the theme provider and apply your theme to it\nexport default function App() {\n\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<Button>Radix Colors</Button>\n\t\t</ThemeProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Component in JSX\nDESCRIPTION: Renders a basic switch component with the defaultChecked prop set to true.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/switch.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Switch defaultChecked />\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover Component Structure in React\nDESCRIPTION: Example of how to import and structure all parts of the Popover component in a React application. Shows the basic composition of Root, Trigger, Anchor, Portal, Content, Close, and Arrow components.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/popover.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Popover } from \"radix-ui\";\n\nexport default () => (\n\t<Popover.Root>\n\t\t<Popover.Trigger />\n\t\t<Popover.Anchor />\n\t\t<Popover.Portal>\n\t\t\t<Popover.Content>\n\t\t\t\t<Popover.Close />\n\t\t\t\t<Popover.Arrow />\n\t\t\t</Popover.Content>\n\t\t</Popover.Portal>\n\t</Popover.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Server-Side Form Validation with Radix UI\nDESCRIPTION: Comprehensive example of handling server-side validation, including error state management, dynamic error messages, and clearing server errors\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/form.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { Form } from \"radix-ui\";\n\nfunction Page() {\n\tconst [serverErrors, setServerErrors] = React.useState({\n\t\temail: false,\n\t\tpassword: false,\n\t});\n\n\treturn (\n\t\t<Form.Root\n\t\t\tonSubmit={(event) => {\n\t\t\t\tconst data = Object.fromEntries(new FormData(event.currentTarget));\n\n\t\t\t\tsubmitForm(data)\n\t\t\t\t\t.then(() => {})\n\t\t\t\t\t.catch((errors) => __setServerErrors__(mapServerErrors(errors)));\n\n\t\t\t\tevent.preventDefault();\n\t\t\t}}\n\t\t\tonClearServerErrors={() =>\n\t\t\t\t__setServerErrors__({ email: false, password: false })\n\t\t\t}\n\t\t>\n\t\t\t<Form.Field name=\"email\" __serverInvalid__={serverErrors.email}>\n\t\t\t\t<Form.Label>Email address</Form.Label>\n\t\t\t\t<Form.Control type=\"email\" required />\n\t\t\t\t<Form.Message match=\"valueMissing\">\n\t\t\t\t\tPlease enter your email.\n\t\t\t\t</Form.Message>\n\t\t\t\t<Form.Message match=\"typeMismatch\" __forceMatch__={serverErrors.email}>\n\t\t\t\t\tPlease provide a valid email.\n\t\t\t\t</Form.Message>\n\t\t\t</Form.Field>\n\n\t\t\t<Form.Field name=\"password\" __serverInvalid__={serverErrors.password}>\n\t\t\t\t<Form.Label>Password</Form.Label>\n\t\t\t\t<Form.Control type=\"password\" required />\n\t\t\t\t<Form.Message match=\"valueMissing\">\n\t\t\t\t\tPlease enter a password.\n\t\t\t\t</Form.Message>\n\t\t\t\t{serverErrors.password && (\n\t\t\t\t\t<Form.Message>\n\t\t\t\t\t\tPlease provide a valid password. It should contain at least 1 number\n\t\t\t\t\t\tand 1 special character.\n\t\t\t\t\t</Form.Message>\n\t\t\t\t)}\n\t\t\t</Form.Field>\n\n\t\t\t<Form.Submit>Submit</Form.Submit>\n\t\t</Form.Root>\n\t);\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Form.Field name=\"email\" serverInvalid={serverErrors.email}>\n\t<Form.Label>Email address</Form.Label>\n\t<Form.Control\n\t\ttype=\"email\"\n\t\t__onChange__={() => setServerErrors((prev) => ({ ...prev, email: false }))}\n\t/>\n\t<Form.Message match=\"valueMissing\">Please enter your email.</Form.Message>\n\t<Form.Message match=\"typeMismatch\" forceMatch={serverErrors.email}>\n\t\tPlease provide a valid email.\n\t</Form.Message>\n</Form.Field>\n```\n\n----------------------------------------\n\nTITLE: Menubar Component Anatomy in React\nDESCRIPTION: Example of how to import and structure the Menubar component with all its subcomponents in a React application.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/menubar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Menubar } from \"radix-ui\";\n\nexport default () => (\n\t<Menubar.Root>\n\t\t<Menubar.Menu>\n\t\t\t<Menubar.Trigger />\n\t\t\t<Menubar.Portal>\n\t\t\t\t<Menubar.Content>\n\t\t\t\t\t<Menubar.Label />\n\t\t\t\t\t<Menubar.Item />\n\n\t\t\t\t\t<Menubar.Group>\n\t\t\t\t\t\t<Menubar.Item />\n\t\t\t\t\t</Menubar.Group>\n\n\t\t\t\t\t<Menubar.CheckboxItem>\n\t\t\t\t\t\t<Menubar.ItemIndicator />\n\t\t\t\t\t</Menubar.CheckboxItem>\n\n\t\t\t\t\t<Menubar.RadioGroup>\n\t\t\t\t\t\t<Menubar.RadioItem>\n\t\t\t\t\t\t\t<Menubar.ItemIndicator />\n\t\t\t\t\t\t</Menubar.RadioItem>\n\t\t\t\t\t</Menubar.RadioGroup>\n\n\t\t\t\t\t<Menubar.Sub>\n\t\t\t\t\t\t<Menubar.SubTrigger />\n\t\t\t\t\t\t<Menubar.Portal>\n\t\t\t\t\t\t\t<Menubar.SubContent />\n\t\t\t\t\t\t</Menubar.Portal>\n\t\t\t\t\t</Menubar.Sub>\n\n\t\t\t\t\t<Menubar.Separator />\n\t\t\t\t\t<Menubar.Arrow />\n\t\t\t\t</Menubar.Content>\n\t\t\t</Menubar.Portal>\n\t\t</Menubar.Menu>\n\t</Menubar.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Profile Edit Dialog with Radix UI\nDESCRIPTION: This snippet demonstrates how to create a modal dialog for editing user profiles using Radix UI components. It utilizes Dialog components for structuring the modal and includes fields for user input, such as name and email, along with action buttons for canceling and saving changes.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/dialog.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog.Root>\n\t<Dialog.Trigger>\n\t\t<Button>Edit profile</Button>\n\t</Dialog.Trigger>\n\n\t<Dialog.Content maxWidth=\"450px\">\n\t\t<Dialog.Title>Edit profile</Dialog.Title>\n\t\t<Dialog.Description size=\"2\" mb=\"4\">\n\t\t\tMake changes to your profile.\n\t\t</Dialog.Description>\n\n\t\t<Flex direction=\"column\" gap=\"3\">\n\t\t\t<label>\n\t\t\t\t<Text as=\"div\" size=\"2\" mb=\"1\" weight=\"bold\">\n\t\t\t\t\tName\n\t\t\t\t</Text>\n\t\t\t\t<TextField.Root\n\t\t\t\t\tdefaultValue=\"Freja Johnsen\"\n\t\t\t\t\tplaceholder=\"Enter your full name\"\n\t\t\t\t/>\n\t\t\t</label>\n\t\t\t<label>\n\t\t\t\t<Text as=\"div\" size=\"2\" mb=\"1\" weight=\"bold\">\n\t\t\t\t\tEmail\n\t\t\t\t</Text>\n\t\t\t\t<TextField.Root\n\t\t\t\t\tdefaultValue=\"freja@example.com\"\n\t\t\t\t\tplaceholder=\"Enter your email\"\n\t\t\t\t/>\n\t\t\t</label>\n\t\t</Flex>\n\n\t\t<Flex gap=\"3\" mt=\"4\" justify=\"end\">\n\t\t\t<Dialog.Close>\n\t\t\t\t<Button variant=\"soft\" color=\"gray\">\n\t\t\t\t\tCancel\n\t\t\t\t</Button>\n\t\t\t</Dialog.Close>\n\t\t\t<Dialog.Close>\n\t\t\t\t<Button>Save</Button>\n\t\t\t</Dialog.Close>\n\t\t</Flex>\n\t</Dialog.Content>\n</Dialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Installing Radix Primitives using npm\nDESCRIPTION: This snippet demonstrates how to install Radix Primitives via npm to make use of its components, specifically the Popover component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/overview/getting-started.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install radix-ui@latest\n```\n\n----------------------------------------\n\nTITLE: Handling Button Loading States in JSX\nDESCRIPTION: This snippet outlines using the 'loading' prop in JSX to show a spinner during button's loading state. The buttons maintain original size while loading, and are disabled to prevent user interaction, demonstrated across different variants.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/button.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"3\">\n\t<Button loading variant=\"classic\">\n\t\tBookmark\n\t</Button>\n\t<Button loading variant=\"solid\">\n\t\tBookmark\n\t</Button>\n\t<Button loading variant=\"soft\">\n\t\tBookmark\n\t</Button>\n\t<Button loading variant=\"surface\">\n\t\tBookmark\n\t</Button>\n\t<Button loading variant=\"outline\">\n\t\tBookmark\n\t</Button>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: CSS Keyframe Animations for Radix Primitives\nDESCRIPTION: Define CSS keyframe animations for fading in and out Dialog components using state-based selectors. Supports both mount and unmount phase animations.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/guides/animation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@keyframes fadeIn {\n\tfrom {\n\t\topacity: 0;\n\t}\n\tto {\n\t\topacity: 1;\n\t}\n}\n\n@keyframes fadeOut {\n\tfrom {\n\t\topacity: 1;\n\t}\n\tto {\n\t\topacity: 0;\n\t}\n}\n\n.DialogOverlay[data-state=\"open\"],\n.DialogContent[data-state=\"open\"] {\n\tanimation: fadeIn 300ms ease-out;\n}\n\n.DialogOverlay[data-state=\"closed\"],\n.DialogContent[data-state=\"closed\"] {\n\tanimation: fadeOut 300ms ease-in;\n}\n```\n\n----------------------------------------\n\nTITLE: Toast Component Anatomy with Radix UI\nDESCRIPTION: This code snippet demonstrates the basic structure of the Radix UI Toast component using JSX. It includes the `Toast.Provider`, `Toast.Root`, `Toast.Title`, `Toast.Description`, `Toast.Action`, `Toast.Close`, and `Toast.Viewport` components to create a functional toast notification system.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toast.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n\"import { Toast } from \\\"radix-ui\\\";\\n\\nexport default () => (\\n\t<Toast.Provider>\\n\t\t<Toast.Root>\\n\t\t\t<Toast.Title />\\n\t\t\t<Toast.Description />\\n\t\t\t<Toast.Action />\\n\t\t\t<Toast.Close />\\n\t\t</Toast.Root>\\n\\n\t\t<Toast.Viewport />\\n\t</Toast.Provider>\\n);\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip with Radix-UI in JavaScript\nDESCRIPTION: This snippet initializes a Tooltip component using Radix-UI's Tooltip API, allowing for collision-aware animations. Dependencies include Radix-UI for the Tooltip components and styles.css for animation styles. Expected inputs are the Tooltip.Trigger and Tooltip.Content components that facilitate collision detection.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/tooltip.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { Tooltip } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<Tooltip.Root>\n\t\t<Tooltip.Trigger>…</Tooltip.Trigger>\n\t\t<Tooltip.Content __className__=\"TooltipContent\">…</Tooltip.Content>\n\t</Tooltip.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Radix UI DropdownMenu.Item Props\nDESCRIPTION: This section outlines the properties for the `DropdownMenu.Item` component.  These properties govern the behavior of individual menu items, including disabling interaction, handling selection events, and providing text for typeahead functionality.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dropdown-menu.mdx#2025-04-21_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: High Contrast Checkboxes in JSX\nDESCRIPTION: Shows how to increase contrast using the highContrast prop on Checkbox components. Displays a grid layout with checkboxes of varying colors and high-contrast settings enabled. This showcases enhancing visibility against different backgrounds.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid columns=\"5\" display=\"inline-grid\" gap=\"2\">\n\t<Checkbox color=\"indigo\" defaultChecked />\n\t<Checkbox color=\"cyan\" defaultChecked />\n\t<Checkbox color=\"orange\" defaultChecked />\n\t<Checkbox color=\"crimson\" defaultChecked />\n\t<Checkbox color=\"gray\" defaultChecked />\n\n\t<Checkbox color=\"indigo\" defaultChecked highContrast />\n\t<Checkbox color=\"cyan\" defaultChecked highContrast />\n\t<Checkbox color=\"orange\" defaultChecked highContrast />\n\t<Checkbox color=\"crimson\" defaultChecked highContrast />\n\t<Checkbox color=\"gray\" defaultChecked highContrast />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Navigation Menu with Radix UI\nDESCRIPTION: This code snippet demonstrates how to create a vertical navigation menu using the `orientation` prop on the `NavigationMenu.Root` component. It shows the basic structure with `NavigationMenu.List`, `NavigationMenu.Item`, `NavigationMenu.Trigger`, and `NavigationMenu.Content` components.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/navigation-menu.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<NavigationMenu.Root __orientation__=\"vertical\">\n\t<NavigationMenu.List>\n\t\t<NavigationMenu.Item>\n\t\t\t<NavigationMenu.Trigger>Item one</NavigationMenu.Trigger>\n\t\t\t<NavigationMenu.Content>Item one content</NavigationMenu.Content>\n\t\t</NavigationMenu.Item>\n\t\t<NavigationMenu.Item>\n\t\t\t<NavigationMenu.Trigger>Item two</NavigationMenu.Trigger>\n\t\t\t<NavigationMenu.Content>Item Two content</NavigationMenu.Content>\n\t\t</NavigationMenu.Item>\n\t</NavigationMenu.List>\n</NavigationMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Imperative Toast API in React\nDESCRIPTION: This snippet demonstrates how to use the imperative Toast API created using React's forwardRef and useImperativeHandle hooks. It creates a ref to the Toast component and calls the publish method on the ref to trigger the toast display imperatively. It allows to duplicate toasts.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toast.mdx#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toast } from \"./your-toast\";\n\nexport default () => {\n\tconst savedRef = React.useRef();\n\treturn (\n\t\t<div>\n\t\t\t<form onSubmit={() => savedRef.current.publish()}>\n\t\t\t\t{/* ... */}\n\t\t\t\t<button>Save</button>\n\t\t\t</form>\n\t\t\t<Toast ref={savedRef}>Saved successfully!</Toast>\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Tabs Component Structure\nDESCRIPTION: Basic implementation showing the core structure of the Tabs component with its essential parts - Root, List, Trigger and Content.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/tabs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tabs } from \"radix-ui\";\n\nexport default () => (\n\t<Tabs.Root>\n\t\t<Tabs.List>\n\t\t\t<Tabs.Trigger />\n\t\t</Tabs.List>\n\t\t<Tabs.Content />\n\t</Tabs.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Toast Sensitivity with Foreground and Background Types in React\nDESCRIPTION: This snippet demonstrates how to control the sensitivity of the Toast component for screen readers using the type prop. Foreground toasts are announced immediately, while background toasts are announced at the next graceful opportunity. This enables fine-grained control over the user experience for assistive technologies.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toast.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Toast.Root type=\"foreground\">\n\t<Toast.Description>File removed successfully.</Toast.Description>\n\t<Toast.Close>Dismiss</Toast.Close>\n</Toast.Root>\n\n<Toast.Root type=\"background\">\n\t<Toast.Description>We've just released Radix 1.0.</Toast.Description>\n\t<Toast.Close>Dismiss</Toast.Close>\n</Toast.Root>\n```\n\n----------------------------------------\n\nTITLE: Integrating Radix UI Themes with next-themes\nDESCRIPTION: Implementation example showing how to integrate Radix UI Themes with next-themes library to support system appearance preferences. The ThemeProvider is configured with attribute=\"class\" to ensure proper class switching.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/dark-mode.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Theme } from \"@radix-ui/themes\";\nimport { ThemeProvider } from \"next-themes\";\n\nexport default function () {\n\treturn (\n\t\t<ThemeProvider attribute=\"class\">\n\t\t\t<Theme>\n\t\t\t\t<MyApp />\n\t\t\t</Theme>\n\t\t</ThemeProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Select Component Structure in React\nDESCRIPTION: This snippet demonstrates how to import and assemble the different parts of the Radix UI Select component, forming a complete functional select dropdown with trigger and content portals.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/select.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Select } from \"radix-ui\";\n\nexport default () => (\n\t<Select.Root>\n\t\t<Select.Trigger>\n\t\t\t<Select.Value />\n\t\t\t<Select.Icon />\n\t\t</Select.Trigger>\n\n\t\t<Select.Portal>\n\t\t\t<Select.Content>\n\t\t\t\t<Select.ScrollUpButton />\n\t\t\t\t<Select.Viewport>\n\t\t\t\t\t<Select.Item>\n\t\t\t\t\t\t<Select.ItemText />\n\t\t\t\t\t\t<Select.ItemIndicator />\n\t\t\t\t\t</Select.Item>\n\n\t\t\t\t\t<Select.Group>\n\t\t\t\t\t\t<Select.Label />\n\t\t\t\t\t\t<Select.Item>\n\t\t\t\t\t\t\t<Select.ItemText />\n\t\t\t\t\t\t\t<Select.ItemIndicator />\n\t\t\t\t\t\t</Select.Item>\n\t\t\t\t\t</Select.Group>\n\n\t\t\t\t\t<Select.Separator />\n\t\t\t\t</Select.Viewport>\n\t\t\t\t<Select.ScrollDownButton />\n\t\t\t\t<Select.Arrow />\n\t\t\t</Select.Content>\n\t\t\t</Select.Portal>\n\t</Select.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Composing AlertDialog in Radix UI with React\nDESCRIPTION: This React component demonstrates how to construct an AlertDialog using the Radix UI library. This includes importing necessary parts from Radix UI and rendering them in a structured manner. Dependencies: Radix UI, React.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/alert-dialog.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AlertDialog } from \"radix-ui\";\n\nexport default () => (\n\t<AlertDialog.Root>\n\t\t<AlertDialog.Trigger />\n\t\t<AlertDialog.Portal>\n\t\t\t<AlertDialog.Overlay />\n\t\t\t<AlertDialog.Content>\n\t\t\t\t<AlertDialog.Title />\n\t\t\t\t<AlertDialog.Description />\n\t\t\t\t<AlertDialog.Cancel />\n\t\t\t\t<AlertDialog.Action />\n\t\t\t</AlertDialog.Content>\n\t\t</AlertDialog.Portal>\n\t</AlertDialog.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Animating Content Size in Accordion with CSS\nDESCRIPTION: This snippet uses CSS variables to animate the size of the accordion content when it opens or closes. The animations are defined using keyframes, and it is important to set the CSS variables for smooth and responsive animations. The expected functionality enhances the visual experience by providing smooth transitions.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/accordion.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { Accordion } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<Accordion.Root type=\"single\">\n\t\t<Accordion.Item value=\"item-1\">\n\t\t\t<Accordion.Header>…</Accordion.Header>\n\t\t\t<Accordion.Content __className__=\"AccordionContent\">…</Accordion.Content>\n\t\t</Accordion.Item>\n\t</Accordion.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Radio Group Variants in JSX\nDESCRIPTION: Illustrates the use of the 'variant' prop to control the visual style of radio buttons with surface, classic, and soft options.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio-group.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"2\">\n\t<Flex direction=\"column\" asChild gap=\"2\">\n\t\t<RadioGroup.Root variant=\"surface\" defaultValue=\"1\">\n\t\t\t<RadioGroup.Item value=\"1\" />\n\t\t\t<RadioGroup.Item value=\"2\" />\n\t\t</RadioGroup.Root>\n\t</Flex>\n\n\t<Flex direction=\"column\" asChild gap=\"2\">\n\t\t<RadioGroup.Root variant=\"classic\" defaultValue=\"1\">\n\t\t\t<RadioGroup.Item value=\"1\" />\n\t\t\t<RadioGroup.Item value=\"2\" />\n\t\t</RadioGroup.Root>\n\t</Flex>\n\n\t<Flex direction=\"column\" asChild gap=\"2\">\n\t\t<RadioGroup.Root variant=\"soft\" defaultValue=\"1\">\n\t\t\t<RadioGroup.Item value=\"1\" />\n\t\t\t<RadioGroup.Item value=\"2\" />\n\t\t</RadioGroup.Root>\n\t</Flex>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Implementing radio items in Menubar (Radix UI, React)\nDESCRIPTION: This example demonstrates how to create a radio item group in a Radix UI Menubar using `Menubar.RadioGroup` and `Menubar.RadioItem`. The `color` state is managed using `React.useState`, and the `onValueChange` handler updates the state when a radio item is selected. The `Menubar.ItemIndicator` displays a check icon for the selected item.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/menubar.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { CheckIcon } from \"@radix-ui/react-icons\";\nimport { Menubar } from \"radix-ui\";\n\nexport default () => {\n\tconst [color, setColor] = React.useState(\"blue\");\n\n\treturn (\n\t\t<Menubar.Root>\n\t\t\t<Menubar.Menu>\n\t\t\t\t<Menubar.Trigger>…</Menubar.Trigger>\n\t\t\t\t<Menubar.Portal>\n\t\t\t\t\t<Menubar.Content>\n\t\t\t\t\t\t<Menubar.RadioGroup value={color} onValueChange={setColor}>\n\t\t\t\t\t\t\t<Menubar.RadioItem value=\"red\">\n\t\t\t\t\t\t\t\t<Menubar.ItemIndicator>\n\t\t\t\t\t\t\t\t\t<CheckIcon />\n\t\t\t\t\t\t\t\t</Menubar.ItemIndicator>\n\t\t\t\t\t\t\t\tRed\n\t\t\t\t\t\t\t</Menubar.RadioItem>\n\t\t\t\t\t\t\t<Menubar.RadioItem value=\"blue\">\n\t\t\t\t\t\t\t\t<Menubar.ItemIndicator>\n\t\t\t\t\t\t\t\t\t<CheckIcon />\n\t\t\t\t\t\t\t\t</Menubar.ItemIndicator>\n\t\t\t\t\t\t\t\tBlue\n\t\t\t\t\t\t\t</Menubar.RadioItem>\n\t\t\t\t\t\t</Menubar.RadioGroup>\n\t\t\t\t\t</Menubar.Content>\n\t\t\t\t</Menubar.Portal>\n\t\t\t</Menubar.Menu>\n\t\t</Menubar.Root>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Rotating Icon in Accordion with React\nDESCRIPTION: This snippet demonstrates the use of Radix UI's Accordion component within a React functional component. It integrates a rotating chevron icon to indicate the state of the accordion item (open or closed). Required dependencies include 'radix-ui' for the accordion component and '@radix-ui/react-icons' for the icon. The expected output is an interactive accordion with a visually indicating chevron icon.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/accordion.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { Accordion } from \"radix-ui\";\nimport { ChevronDownIcon } from \"@radix-ui/react-icons\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<Accordion.Root type=\"single\">\n\t\t<Accordion.Item value=\"item-1\">\n\t\t\t<Accordion.Header>\n\t\t\t\t<Accordion.Trigger className=\"AccordionTrigger\">\n\t\t\t\t\t<span>Trigger text</span>\n\t\t\t\t\t<ChevronDownIcon __className__=\"AccordionChevron\" aria-hidden />\n\t\t\t\t</Accordion.Trigger>\n\t\t\t</Accordion.Header>\n\t\t\t<Accordion.Content>…</Accordion.Content>\n\t\t</Accordion.Item>\n\t</Accordion.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Context Menu in React\nDESCRIPTION: Demonstrates the basic structure of a Context Menu with multiple items, separators, and a submenu. Includes keyboard shortcuts and supports nested menu interactions.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/context-menu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ContextMenu.Root>\\n\\t<ContextMenu.Trigger>\\n\\t\\t<RightClickZone style={{ height: 150 }} />\\n\\t</ContextMenu.Trigger>\\n\\t<ContextMenu.Content>\\n\\t\\t<ContextMenu.Item shortcut=\"⌘ E\">Edit</ContextMenu.Item>\\n\\t\\t<ContextMenu.Item shortcut=\"⌘ D\">Duplicate</ContextMenu.Item>\\n\\t\\t<ContextMenu.Separator />\\n\\t\\t<ContextMenu.Item shortcut=\"⌘ N\">Archive</ContextMenu.Item>\\n\\n\\t\\t<ContextMenu.Sub>\\n\\t\\t\\t<ContextMenu.SubTrigger>More</ContextMenu.SubTrigger>\\n\\t\\t\\t<ContextMenu.SubContent>\\n\\t\\t\\t\\t<ContextMenu.Item>Move to project…</ContextMenu.Item>\\n\\t\\t\\t\\t<ContextMenu.Item>Move to folder…</ContextMenu.Item>\\n\\t\\t\\t\\t<ContextMenu.Separator />\\n\\t\\t\\t\\t<ContextMenu.Item>Advanced options…</ContextMenu.Item>\\n\\t\\t\\t</ContextMenu.SubContent>\\n\\t\\t</ContextMenu.Sub>\\n\\n\\t\\t<ContextMenu.Separator />\\n\\t\\t<ContextMenu.Item>Share</ContextMenu.Item>\\n\\t\\t<ContextMenu.Item>Add to favorites</ContextMenu.Item>\\n\\t\\t<ContextMenu.Separator />\\n\\t\\t<ContextMenu.Item shortcut=\"⌘ ⌫\" color=\"red\">\\n\\t\\t\\tDelete\\n\\t\\t</ContextMenu.Item>\\n\\t</ContextMenu.Content>\\n</ContextMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Dialog API - Usage - JSX\nDESCRIPTION: This snippet illustrates how to create a custom dialog API by abstracting the primitive components provided by Radix UI. It simplifies the usage of the dialog by encapsulating functionality within custom components. The inputs are custom dialog components, while the output is a simplified dialog structure for users.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dialog.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Dialog, DialogTrigger, DialogContent } from \"./your-dialog\";\n\nexport default () => (\n\t<Dialog>\n\t\t<DialogTrigger>Dialog trigger</DialogTrigger>\n\t\t<DialogContent>Dialog Content</DialogContent>\n\t</Dialog>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying User List within a Dialog Using Radix UI\nDESCRIPTION: This snippet shows how to create a dialog that displays a list of users. It utilizes Radix UI components to structure the content including a title and description, and incorporates an inset component for layout adjustments.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/dialog.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog.Root>\n\t<Dialog.Trigger>\n\t\t<Button>View users</Button>\n\t</Dialog.Trigger>\n\t<Dialog.Content>\n\t\t<Dialog.Title>Users</Dialog.Title>\n\t\t<Dialog.Description>\n\t\t\tThe following users have access to this project.\n\t\t</Dialog.Description>\n\n\t\t<Inset side=\"x\" my=\"5\">\n\t\t\t<Table.Root>\n\t\t\t\t<Table.Header>\n\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t<Table.ColumnHeaderCell>Full name</Table.ColumnHeaderCell>\n\t\t\t\t\t\t<Table.ColumnHeaderCell>Email</Table.ColumnHeaderCell>\n\t\t\t\t\t\t<Table.ColumnHeaderCell>Group</Table.ColumnHeaderCell>\n\t\t\t\t\t</Table.Row>\n\t\t\t\t</Table.Header>\n\n\t\t\t\t<Table.Body>\n\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t<Table.RowHeaderCell>Danilo Sousa</Table.RowHeaderCell>\n\t\t\t\t\t\t<Table.Cell>danilo@example.com</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>Developer</Table.Cell>\n\t\t\t\t\t</Table.Row>\n\n\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t<Table.RowHeaderCell>Zahra Ambessa</Table.RowHeaderCell>\n\t\t\t\t\t\t<Table.Cell>zahra@example.com</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>Admin</Table.Cell>\n\t\t\t\t\t</Table.Row>\n\t\t\t\t</Table.Body>\n\t\t\t\t</Table.Root>\n\t\t\t</Inset>\n\n\t\t\t<Flex gap=\"3\" justify=\"end\">\n\t\t\t\t<Dialog.Close>\n\t\t\t\t\t<Button variant=\"soft\" color=\"gray\">\n\t\t\t\t\t\tClose\n\t\t\t\t\t</Button>\n\t\t\t\t</Dialog.Close>\n\t\t\t</Flex>\n\t\t</Dialog.Content>\n</Dialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Imperative Toast API Implementation in React\nDESCRIPTION: This snippet demonstrates how to create an imperative API for the Toast component using React's forwardRef and useImperativeHandle hooks. This allows for programmatically triggering the display of the toast, enabling use cases such as toast duplication.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toast.mdx#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n// your-toast.jsx\nimport * as React from \"react\";\nimport { Toast as ToastPrimitive } from \"radix-ui\";\n\nexport const Toast = React.forwardRef((props, forwardedRef) => {\n\tconst { children, ...toastProps } = props;\n\tconst [count, setCount] = React.useState(0);\n\n\tReact.useImperativeHandle(forwardedRef, () => ({\n\t\tpublish: () => setCount((count) => count + 1),\n\t}));\n\n\treturn (\n\t\t<>\n\t\t\t{Array.from({ length: count }).map((_, index) => (\n\t\t\t\t<ToastPrimitive.Root key={index} {...toastProps}>\n\t\t\t\t\t<ToastPrimitive.Description>{children}</ToastPrimitive.Description>\n\t\t\t\t\t<ToastPrimitive.Close>Dismiss</ToastPrimitive.Close>\n\t\t\t\t</ToastPrimitive.Root>\n\t\t\t))}\n\t\t</>\n\t);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Component with Groups in React\nDESCRIPTION: This snippet demonstrates the basic usage of the Select component with grouped options for fruits and vegetables. It includes disabled items and a separator between groups.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/select.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Select.Root defaultValue=\"apple\">\n\t<Select.Trigger />\n\t<Select.Content>\n\t\t<Select.Group>\n\t\t\t<Select.Label>Fruits</Select.Label>\n\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t<Select.Item value=\"grape\" disabled>\n\t\t\t\tGrape\n\t\t\t</Select.Item>\n\t\t</Select.Group>\n\t\t<Select.Separator />\n\t\t<Select.Group>\n\t\t\t<Select.Label>Vegetables</Select.Label>\n\t\t\t<Select.Item value=\"carrot\">Carrot</Select.Item>\n\t\t\t<Select.Item value=\"potato\">Potato</Select.Item>\n\t\t</Select.Group>\n\t</Select.Content>\n</Select.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Heading with Breakpoints in React/JSX\nDESCRIPTION: Example showing how to use the Responsive object shape to modify component props across different breakpoints. The Heading component's size changes based on screen width breakpoints: initial (default), md (medium), and xl (extra large).\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/breakpoints.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Heading\n\tsize={{\n\t\tinitial: \"3\",\n\t\tmd: \"5\",\n\t\txl: \"7\",\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Data List with Radix UI in JSX\nDESCRIPTION: Demonstrates the use of Radix UI's DataList component to show metadata as a list of key-value pairs. The snippet includes labels for 'Status', 'ID', 'Name', 'Email', and 'Company'. It utilizes the Badge, Flex, Code, IconButton, and Link components for layout and interactivity. Dependencies include the Radix UI component library.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/data-list.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DataList.Root>\n\t<DataList.Item align=\"center\">\n\t\t<DataList.Label minWidth=\"88px\">Status</DataList.Label>\n\t\t<DataList.Value>\n\t\t\t<Badge color=\"jade\" variant=\"soft\" radius=\"full\">\n\t\t\t\tAuthorized\n\t\t\t</Badge>\n\t\t</DataList.Value>\n\t</DataList.Item>\n\t<DataList.Item>\n\t\t<DataList.Label minWidth=\"88px\">ID</DataList.Label>\n\t\t<DataList.Value>\n\t\t\t<Flex align=\"center\" gap=\"2\">\n\t\t\t\t<Code variant=\"ghost\">u_2J89JSA4GJ</Code>\n\t\t\t\t<IconButton\n\t\t\t\t\tsize=\"1\"\n\t\t\t\t\taria-label=\"Copy value\"\n\t\t\t\t\tcolor=\"gray\"\n\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t>\n\t\t\t\t\t<CopyIcon />\n\t\t\t\t</IconButton>\n\t\t\t</Flex>\n\t\t</DataList.Value>\n\t</DataList.Item>\n\t<DataList.Item>\n\t\t<DataList.Label minWidth=\"88px\">Name</DataList.Label>\n\t\t<DataList.Value>Vlad Moroz</DataList.Value>\n\t</DataList.Item>\n\t<DataList.Item>\n\t\t<DataList.Label minWidth=\"88px\">Email</DataList.Label>\n\t\t<DataList.Value>\n\t\t\t<Link href=\"mailto:vlad@workos.com\">vlad@workos.com</Link>\n\t\t</DataList.Value>\n\t</DataList.Item>\n\t<DataList.Item>\n\t\t<DataList.Label minWidth=\"88px\">Company</DataList.Label>\n\t\t<DataList.Value>\n\t\t\t<Link target=\"_blank\" href=\"https://workos.com\">\n\t\t\t\tWorkOS\n\t\t\t</Link>\n\t\t</DataList.Value>\n\t</DataList.Item>\n</DataList.Root>\n```\n\n----------------------------------------\n\nTITLE: Popover with Custom Anchor (JSX)\nDESCRIPTION: This example demonstrates how to use the `Popover.Anchor` component to anchor the Popover Content to a different element than the trigger. The `__asChild__` prop allows any element to be used as the anchor, enabling flexible positioning of the Popover.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/popover.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n\"// index.jsx\nimport { Popover } from \\\"radix-ui\\\";\nimport \\\"./styles.css\\\";\n\nexport default () => (\n\t<Popover.Root>\n\t\t<Popover.Anchor __asChild__>\n\t\t\t<div className=\\\"Row\\\">\n\t\t\t\tRow as anchor <Popover.Trigger>Trigger</Popover.Trigger>\n\t\t\t</div>\n\t\t</Popover.Anchor>\n\n\t\t<Popover.Portal>\n\t\t\t<Popover.Content>…</Popover.Content>\n\t\t</Popover.Portal>\n\t</Popover.Root>\n);\"\n```\n\n----------------------------------------\n\nTITLE: Aligning Radio Buttons with Text in JSX\nDESCRIPTION: This example shows how to align radio buttons with text using the Flex and Text components. It demonstrates proper alignment with single-line and multi-line text for different sizes of radio buttons.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\">\n\t<Flex align=\"start\" direction=\"column\" gap=\"1\">\n\t\t<Flex asChild gap=\"2\">\n\t\t\t<Text as=\"label\" size=\"2\">\n\t\t\t\t<Radio size=\"1\" name=\"alignment-1\" value=\"1\" defaultChecked />\n\t\t\t\tDefault\n\t\t\t</Text>\n\t\t</Flex>\n\t\t<Flex asChild gap=\"2\">\n\t\t\t<Text as=\"label\" size=\"2\">\n\t\t\t\t<Radio size=\"1\" name=\"alignment-1\" value=\"2\" />\n\t\t\t\tCompact\n\t\t\t</Text>\n\t\t</Flex>\n\t</Flex>\n\n\t<Flex align=\"start\" direction=\"column\" gap=\"1\">\n\t\t<Flex asChild gap=\"2\">\n\t\t\t<Text as=\"label\" size=\"3\">\n\t\t\t\t<Radio size=\"2\" name=\"alignment-2\" value=\"1\" defaultChecked />\n\t\t\t\tDefault\n\t\t\t</Text>\n\t\t</Flex>\n\t\t<Flex asChild gap=\"2\">\n\t\t\t<Text as=\"label\" size=\"3\">\n\t\t\t\t<Radio size=\"2\" name=\"alignment-2\" value=\"2\" />\n\t\t\t\tCompact\n\t\t\t</Text>\n\t\t</Flex>\n\t</Flex>\n\n\t<Flex align=\"start\" direction=\"column\" gap=\"1\">\n\t\t<Flex asChild gap=\"2\">\n\t\t\t<Text as=\"label\" size=\"4\">\n\t\t\t\t<Radio size=\"3\" name=\"alignment-3\" value=\"1\" defaultChecked />\n\t\t\t\tDefault\n\t\t\t</Text>\n\t\t</Flex>\n\t\t<Flex asChild gap=\"2\">\n\t\t\t<Text as=\"label\" size=\"4\">\n\t\t\t\t<Radio size=\"3\" name=\"alignment-3\" value=\"2\" />\n\t\t\t\tCompact\n\t\t\t</Text>\n\t\t</Flex>\n\t</Flex>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Implementing SSR-compatible Select in React\nDESCRIPTION: This example shows how to implement a server-side rendering compatible Select component by manually rendering the selected item's text to avoid layout shifts after hydration.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/select.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n\tconst data = {\n\t\tapple: \"Apple\",\n\t\torange: \"Orange\",\n\t};\n\tconst [value, setValue] = React.useState(\"apple\");\n\treturn (\n\t\t<Select.Root value={value} onValueChange={setValue}>\n\t\t\t<Select.Trigger>{data[value]}</Select.Trigger>\n\t\t\t<Select.Content>\n\t\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t\t</Select.Content>\n\t\t</Select.Root>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced Select with Custom Item Rendering and Value Control\nDESCRIPTION: Shows complex Select implementation with custom item content, emoji flags, and controlled component state\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/select.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst countries = { france: \"🇫🇷\", \"united-kingdom\": \"🇬🇧\", spain: \"🇪🇸\" };\n\nexport default () => {\n\tconst [value, setValue] = React.useState(\"france\");\n\treturn (\n\t\t<Select.Root __value__={value} __onValueChange__={setValue}>\n\t\t\t<Select.Trigger>\n\t\t\t\t<Select.Value __aria-label__={value}>\n\t\t\t\t\t{__countries[value]__}\n\t\t\t\t</Select.Value>\n\t\t\t\t<Select.Icon />\n\t\t\t</Select.Trigger>\n\t\t\t<Select.Portal>\n\t\t\t<Select.Content>\n\t\t\t\t<Select.Viewport>\n\t\t\t\t\t<Select.Item value=\"france\">\n\t\t\t\t\t\t<Select.ItemText>France</Select.ItemText>\n\t\t\t\t\t\t<Select.ItemIndicator>…</Select.ItemIndicator>\n\t\t\t\t\t</Select.Item>\n\t\t\t\t\t<Select.Item value=\"united-kingdom\">\n\t\t\t\t\t\t<Select.ItemText>United Kingdom</Select.ItemText>\n\t\t\t\t\t\t<Select.ItemIndicator>…</Select.ItemIndicator>\n\t\t\t\t\t</Select.Item>\n\t\t\t\t\t<Select.Item value=\"spain\">\n\t\t\t\t\t\t<Select.ItemText>Spain</Select.ItemText>\n\t\t\t\t\t\t<Select.ItemIndicator>…</Select.ItemIndicator>\n\t\t\t\t\t</Select.Item>\n\t\t\t\t</Select.Viewport>\n\t\t\t</Select.Content>\n\t\t\t</Select.Portal>\n\t\t</Select.Root>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Composing Tooltip with asChild in Radix UI using JSX\nDESCRIPTION: This snippet demonstrates how to utilize the asChild prop with Radix UI's Tooltip.Trigger to render a link instead of the default button. It highlights the importance of ensuring the custom element remains accessible and functional. The code imports React and Tooltip components, and overwrites the default DOM element using asChild.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/guides/composition.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from \"react\";\nimport { Tooltip } from \"radix-ui\";\n\nexport default () => (\n\t<Tooltip.Root>\n\t\t<Tooltip.Trigger asChild>\n\t\t\t<a href=\"https://www.radix-ui.com/\">Radix UI</a>\n\t\t</Tooltip.Trigger>\n\t\t<Tooltip.Portal>…</Tooltip.Portal>\n\t</Tooltip.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Grid Layout with Radix UI\nDESCRIPTION: This snippet demonstrates how to create a basic grid layout using the Radix UI Grid component. It sets the number of columns to 3, the gap between grid items to 3 units, and the height of each row to 64 pixels, repeated twice. The width is set to auto to take up available space.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/grid.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n\"<Grid columns=\\\"3\\\" gap=\\\"3\\\" rows=\\\"repeat(2, 64px)\\\" width=\\\"auto\\\">\\n\\t<DecorativeBox />\\n\\t<DecorativeBox />\\n\\t<DecorativeBox />\\n\\t<DecorativeBox />\\n\\t<DecorativeBox />\\n\\t<DecorativeBox />\\n</Grid>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Items in Radix UI Menubar (JSX)\nDESCRIPTION: This snippet demonstrates how to add complex items with images to a Radix UI Menubar component. It shows the structure of the Menubar with nested components and how to include decorative elements like images within menu items.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/menubar.mdx#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Menubar } from \"radix-ui\";\n\nexport default () => (\n\t<Menubar.Root>\n\t\t<Menubar.Menu>\n\t\t\t<Menubar.Trigger>…</Menubar.Trigger>\n\t\t\t<Menubar.Portal>\n\t\t\t\t<Menubar.Content>\n\t\t\t\t\t<Menubar.Item>\n\t\t\t\t\t\t<img src=\"…\" />\n\t\t\t\t\t\tAdolfo Hess\n\t\t\t\t\t</Menubar.Item>\n\t\t\t\t\t<Menubar.Item>\n\t\t\t\t\t\t<img src=\"…\" />\n\t\t\t\t\t\tMiyah Myles\n\t\t\t\t\t</Menubar.Item>\n\t\t\t\t</Menubar.Content>\n\t\t\t</Menubar.Portal>\n\t\t</Menubar.Menu>\n\t</Menubar.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Indeterminate Checkbox State\nDESCRIPTION: Example implementation of a checkbox with indeterminate state support using React state management.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/checkbox.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DividerHorizontalIcon, CheckIcon } from \"@radix-ui/react-icons\";\nimport { Checkbox } from \"radix-ui\";\n\nexport default () => {\n\tconst [checked, setChecked] = React.useState(\"indeterminate\");\n\n\treturn (\n\t\t<>\n\t\t\t<StyledCheckbox checked={checked} onCheckedChange={setChecked}>\n\t\t\t\t<Checkbox.Indicator>\n\t\t\t\t\t{checked === \"indeterminate\" && <DividerHorizontalIcon />}\n\t\t\t\t\t{checked === true && <CheckIcon />}\n\t\t\t\t</Checkbox.Indicator>\n\t\t\t</StyledCheckbox>\n\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\tonClick={() =>\n\t\t\t\t\tsetChecked((prevIsChecked) =>\n\t\t\t\t\t\tprevIsChecked === \"indeterminate\" ? false : \"indeterminate\",\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t>\n\t\t\t\tToggle indeterminate\n\t\t\t</button>\n\t\t</>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Cards with Default Settings in React\nDESCRIPTION: This snippet demonstrates a basic implementation of a Radio Cards component in React using the Radix UI library. It sets up a set of cards that allows a user to select one at a time. The default card selected is controlled by the \"defaultValue\" prop, and the layout of the cards is responsive, adjusting from one column to three based on screen size. Dependencies include the Radix UI library and a React environment.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio-cards.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box maxWidth=\"600px\">\\n\\t<RadioCards.Root defaultValue=\"1\" columns={{ initial: \"1\", sm: \"3\" }}>\\n\\t\\t<RadioCards.Item value=\"1\">\\n\\t\\t\\t<Flex direction=\"column\" width=\"100%\">\\n\\t\\t\\t\\t<Text weight=\"bold\">8-core CPU</Text>\\n\\t\\t\\t\\t<Text>32 GB RAM</Text>\\n\\t\\t\\t</Flex>\\n\\t\\t</RadioCards.Item>\\n\\t\\t<RadioCards.Item value=\"2\">\\n\\t\\t\\t<Flex direction=\"column\" width=\"100%\">\\n\\t\\t\\t\\t<Text weight=\"bold\">6-core CPU</Text>\\n\\t\\t\\t\\t<Text>24 GB RAM</Text>\\n\\t\\t\\t</Flex>\\n\\t\\t</RadioCards.Item>\\n\\t\\t<RadioCards.Item value=\"3\">\\n\\t\\t\\t<Flex direction=\"column\" width=\"100%\">\\n\\t\\t\\t\\t<Text weight=\"bold\">4-core CPU</Text>\\n\\t\\t\\t\\t<Text>16 GB RAM</Text>\\n\\t\\t\\t</Flex>\\n\\t\\t</RadioCards.Item>\\n\\t</RadioCards.Root>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Creating a Comment Popover with Radix UI in JSX\nDESCRIPTION: This snippet sets up a Popover for writing comments using Radix UI components in JSX. It uses the Popover.Trigger and Popover.Content components to display a button, a comment text area, and a checkbox. Dependencies include React and Radix UI primitives, with props for styling, layout, and interactions. It outputs a styled popover with Avatar, TextArea, and Checkbox components, with limitations on styling inheritance from Radix UI.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/popover.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Popover.Root>\n\t<Popover.Trigger>\n\t\t<Button variant=\"soft\">\n\t\t\t<ChatBubbleIcon width=\"16\" height=\"16\" />\n\t\t\tComment\n\t\t</Button>\n\t</Popover.Trigger>\n\t<Popover.Content width=\"360px\">\n\t\t<Flex gap=\"3\">\n\t\t\t<Avatar\n\t\t\t\tsize=\"2\"\n\t\t\t\tsrc=\"https://images.unsplash.com/photo-1607346256330-dee7af15f7c5?&w=64&h=64&dpr=2&q=70&crop=focalpoint&fp-x=0.67&fp-y=0.5&fp-z=1.4&fit=crop\"\n\t\t\t\tfallback=\"A\"\n\t\t\t\tradius=\"full\"\n\t\t\t/>\n\t\t\t<Box flexGrow=\"1\">\n\t\t\t\t<TextArea placeholder=\"Write a comment…\" style={{ height: 80 }} />\n\t\t\t\t<Flex gap=\"3\" mt=\"3\" justify=\"between\">\n\t\t\t\t\t<Flex align=\"center\" gap=\"2\" asChild>\n\t\t\t\t\t\t<Text as=\"label\" size=\"2\">\n\t\t\t\t\t\t\t<Checkbox />\n\t\t\t\t\t\t\t<Text>Send to group</Text>\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Flex>\n\n\t\t\t\t\t<Popover.Close>\n\t\t\t\t\t\t<Button size=\"1\">Comment</Button>\n\t\t\t\t\t</Popover.Close>\n\t\t\t\t</Flex>\n\t\t\t</Box>\n\t\t</Flex>\n\t</Popover.Content>\n</Popover.Root>\n```\n\n----------------------------------------\n\nTITLE: Adding an Indicator to Radix UI Navigation Menu\nDESCRIPTION: This snippet illustrates adding an `Indicator` to the Navigation Menu, providing a visual cue for the active `Trigger`. It includes necessary imports and a basic structure for the indicator within the `NavigationMenu.List` component. The styles for the indicator are defined in a separate CSS snippet.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/navigation-menu.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { NavigationMenu } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<NavigationMenu.Root>\n\t\t<NavigationMenu.List>\n\t\t\t<NavigationMenu.Item>\n\t\t\t\t<NavigationMenu.Trigger>Item one</NavigationMenu.Trigger>\n\t\t\t\t<NavigationMenu.Content>Item one content</NavigationMenu.Content>\n\t\t\t</NavigationMenu.Item>\n\t\t\t<NavigationMenu.Item>\n\t\t\t\t<NavigationMenu.Trigger>Item two</NavigationMenu.Trigger>\n\t\t\t\t<NavigationMenu.Content>Item two content</NavigationMenu.Content>\n\t\t\t</NavigationMenu.Item>\n\n\t\t\t<NavigationMenu.Indicator __className__=\"NavigationMenuIndicator\" />\n\t\t</NavigationMenu.List>\n\n\t\t<NavigationMenu.Viewport />\n\t</NavigationMenu.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Animated Collapsible Implementation\nDESCRIPTION: Example showing how to implement an animated Collapsible component with custom styling.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/collapsible.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { Collapsible } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<Collapsible.Root>\n\t\t<Collapsible.Trigger>…</Collapsible.Trigger>\n\t\t<Collapsible.Content __className__=\"CollapsibleContent\">\n\t\t\t…\n\t\t</Collapsible.Content>\n\t</Collapsible.Root>\n);\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.CollapsibleContent {\n\toverflow: hidden;\n}\n.CollapsibleContent[data-state=\"open\"] {\n\tanimation: slideDown 300ms ease-out;\n}\n.CollapsibleContent[data-state=\"closed\"] {\n\tanimation: slideUp 300ms ease-out;\n}\n\n@keyframes slideDown {\n\tfrom {\n\t\theight: 0;\n\t}\n\tto {\n\t\theight: var(__--radix-collapsible-content-height__);\n\t}\n}\n\n@keyframes slideUp {\n\tfrom {\n\t\theight: var(__--radix-collapsible-content-height__);\n\t}\n\tto {\n\t\theight: 0;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Controlled Value\nDESCRIPTION: Demonstrates setting a specific progress value using the value prop\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/progress.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Progress value={75} />\n```\n\n----------------------------------------\n\nTITLE: Text Field with Complex Composition\nDESCRIPTION: Advanced implementation showing text fields with multiple slots and nested interactive elements\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text-field.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\" maxWidth=\"400px\">\n\t<Box maxWidth=\"200px\">\n\t\t<TextField.Root placeholder=\"Search the docs…\" size=\"1\">\n\t\t\t<TextField.Slot>\n\t\t\t\t<MagnifyingGlassIcon height=\"16\" width=\"16\" />\n\t\t\t</TextField.Slot>\n\t\t</TextField.Root>\n\t</Box>\n\n\t<Box maxWidth=\"250px\">\n\t\t<TextField.Root placeholder=\"Search the docs…\" size=\"2\">\n\t\t\t<TextField.Slot>\n\t\t\t\t<MagnifyingGlassIcon height=\"16\" width=\"16\" />\n\t\t\t</TextField.Slot>\n\t\t\t<TextField.Slot>\n\t\t\t\t<IconButton size=\"1\" variant=\"ghost\">\n\t\t\t\t\t<DotsHorizontalIcon height=\"14\" width=\"14\" />\n\t\t\t\t</IconButton>\n\t\t\t</TextField.Slot>\n\t\t</TextField.Root>\n\t</Box>\n\n\t<Box maxWidth=\"300px\">\n\t\t<TextField.Root placeholder=\"Search the docs…\" size=\"3\">\n\t\t\t<TextField.Slot>\n\t\t\t\t<MagnifyingGlassIcon height=\"16\" width=\"16\" />\n\t\t\t</TextField.Slot>\n\t\t\t<TextField.Slot pr=\"3\">\n\t\t\t\t<IconButton size=\"2\" variant=\"ghost\">\n\t\t\t\t\t<DotsHorizontalIcon height=\"16\" width=\"16\" />\n\t\t\t\t</IconButton>\n\t\t\t</TextField.Slot>\n\t\t</TextField.Root>\n\t</Box>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Basic Theme Configuration in React\nDESCRIPTION: This example demonstrates wrapping a component tree in the Theme component to provide or modify configuration for all children. It includes various UI components like Card, TextArea, Switch, and Button.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/theme.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box maxWidth=\"400px\">\n\t<Card size=\"2\">\n\t\t<Flex direction=\"column\" gap=\"3\">\n\t\t\t<Grid gap=\"1\">\n\t\t\t\t<Text as=\"div\" weight=\"bold\" size=\"2\" mb=\"1\">\n\t\t\t\t\tFeedback\n\t\t\t\t</Text>\n\t\t\t\t<TextArea placeholder=\"Write your feedback…\" />\n\t\t\t</Grid>\n\t\t\t<Flex asChild justify=\"between\">\n\t\t\t\t<label>\n\t\t\t\t\t<Text color=\"gray\" size=\"2\">\n\t\t\t\t\t\tAttach screenshot?\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Switch size=\"1\" defaultChecked />\n\t\t\t\t</label>\n\t\t\t</Flex>\n\t\t\t<Grid columns=\"2\" gap=\"2\">\n\t\t\t\t<Button variant=\"surface\">Back</Button>\n\t\t\t\t<Button>Send</Button>\n\t\t\t</Grid>\n\t\t</Flex>\n\t</Card>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Popover Custom API Implementation (JSX)\nDESCRIPTION: This example implements a custom API for the Popover component, abstracting the `Popover.Arrow` and setting a default `sideOffset` configuration. It re-exports Root and Trigger and creates a custom PopoverContent component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/popover.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n\"// your-popover.jsx\nimport * as React from \\\"react\\\";\nimport { Popover as PopoverPrimitive } from \\\"radix-ui\\\";\n\nexport const Popover = PopoverPrimitive.Root;\nexport const PopoverTrigger = PopoverPrimitive.Trigger;\n\nexport const PopoverContent = React.forwardRef(\n\t({ children, ...props }, forwardedRef) => (\n\t\t<PopoverPrimitive.Portal>\n\t\t\t<PopoverPrimitive.Content sideOffset={5} {...props} ref={forwardedRef}>\n\t\t\t\t{children}\n\t\t\t\t<PopoverPrimitive.Arrow />\n\t\t\t</PopoverPrimitive.Content>\n\t\t</PopoverPrimitive.Portal>\n\t),\n);\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Label Component in React\nDESCRIPTION: Example of how to import and implement the Label component in a React application. Shows the basic structure for using the Root component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/label.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Label } from \"radix-ui\";\n\nexport default () => <Label.Root />;\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of One-Time Password Field with Multiple Inputs\nDESCRIPTION: Illustrates rendering a One-Time Password Field component with six separate Input components to accommodate a 6-character password. It includes mapping over the desired password length to generate Input elements and a HiddenInput for data management.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/one-time-password-field.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// This will render a field with 6 inputs, for use with\n// 6-character passwords. Render an Input component for\n// each character of accepted password's length.\n<OneTimePasswordField.Root>\n\t<OneTimePasswordField.Input />\n\t<OneTimePasswordField.Input />\n\t<OneTimePasswordField.Input />\n\t<OneTimePasswordField.Input />\n\t<OneTimePasswordField.Input />\n\t<OneTimePasswordField.Input />\n\t<OneTimePasswordField.HiddenInput />\n</OneTimePasswordField.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Popover with Content and Trigger\nDESCRIPTION: This JSX snippet demonstrates the basic structure of a Popover component using Radix UI, including Popover.Root, Popover.Trigger, Popover.Portal and Popover.Content components. It also sets a custom class name and side offset for the content.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/popover.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n\"// index.jsx\nimport { Popover } from \\\"radix-ui\\\";\nimport \\\"./styles.css\\\";\n\nexport default () => (\n\t<Popover.Root>\n\t\t<Popover.Trigger>…</Popover.Trigger>\n\t\t<Popover.Portal>\n\t\t\t<Popover.Content __className__=\\\"PopoverContent\\\" sideOffset={5}>\n\t\t\t\t…\n\t\t\t</Popover.Content>\n\t\t</Popover.Portal>\n\t</Popover.Root>\n);\"\n```\n\n----------------------------------------\n\nTITLE: React Spring Animation with Radix Dialog Component\nDESCRIPTION: Demonstrates using React Spring and forceMount prop to create advanced animations for Dialog components with custom enter and exit transitions.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/guides/animation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Dialog } from \"radix-ui\";\nimport { useTransition, animated, config } from \"react-spring\";\n\nfunction Example() {\n\tconst [open, setOpen] = React.useState(false);\n\tconst transitions = useTransition(open, {\n\t\tfrom: { opacity: 0, y: -10 },\n\t\tenter: { opacity: 1, y: 0 },\n\t\tleave: { opacity: 0, y: 10 },\n\t\tconfig: config.stiff,\n\t});\n\treturn (\n\t\t<Dialog.Root open={open} onOpenChange={setOpen}>\n\t\t\t<Dialog.Trigger>Open Dialog</Dialog.Trigger>\n\t\t\t{transitions((styles, item) =>\n\t\t\t\titem ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Dialog.Overlay forceMount asChild>\n\t\t\t\t\t\t\t<animated.div\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\topacity: styles.opacity,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Dialog.Overlay>\n\t\t\t\t\t\t<Dialog.Content forceMount asChild>\n\t\t\t\t\t\t\t<animated.div style={styles}>\n\t\t\t\t\t\t\t\t<h1>Hello from inside the Dialog!</h1>\n\t\t\t\t\t\t\t\t<Dialog.Close>close</Dialog.Close>\n\t\t\t\t\t\t\t</animated.div>\n\t\t\t\t\t\t</Dialog.Content>\n\t\t\t\t\t</>\n\t\t\t\t) : null,\n\t\t\t)}\n\t\t</Dialog.Root>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ContextMenu with Submenus in React\nDESCRIPTION: Example of creating submenus in a ContextMenu component using ContextMenu.Sub and its related parts to create a nested menu structure.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<ContextMenu.Root>\n\t<ContextMenu.Trigger>…</ContextMenu.Trigger>\n\t<ContextMenu.Portal>\n\t\t<ContextMenu.Content>\n\t\t\t<ContextMenu.Item>…</ContextMenu.Item>\n\t\t\t<ContextMenu.Item>…</ContextMenu.Item>\n\t\t\t<ContextMenu.Separator />\n\t\t\t<ContextMenu.Sub>\n\t\t\t\t<ContextMenu.SubTrigger>Sub menu →</ContextMenu.SubTrigger>\n\t\t\t\t<ContextMenu.Portal>\n\t\t\t\t\t<ContextMenu.SubContent>\n\t\t\t\t\t\t<ContextMenu.Item>Sub menu item</ContextMenu.Item>\n\t\t\t\t\t\t<ContextMenu.Item>Sub menu item</ContextMenu.Item>\n\t\t\t\t\t\t<ContextMenu.Arrow />\n\t\t\t\t\t</ContextMenu.SubContent>\n\t\t\t\t</ContextMenu.Portal>\n\t\t\t</ContextMenu.Sub>\n\t\t\t<ContextMenu.Separator />\n\t\t\t<ContextMenu.Item>…</ContextMenu.Item>\n\t\t</ContextMenu.Content>\n\t</ContextMenu.Portal>\n</ContextMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Animating Swipe Gesture for Toast in React\nDESCRIPTION: This snippet demonstrates how to animate a swipe-to-close gesture for the Toast component using CSS variables and data attributes. The __swipeDirection__ prop on the Toast.Provider enables the swipe gesture, and CSS styles are applied based on the data-swipe attribute to create the animation effect.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toast.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { Toast } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<Toast.Provider __swipeDirection__=\"right\">\n\t\t<Toast.Root __className__=\"ToastRoot\">...</Toast.Root>\n\t\t<Toast.Viewport />\n\t</Toast.Provider>\n);\n```\n\n----------------------------------------\n\nTITLE: Styling Form Components Based on Validity\nDESCRIPTION: Demonstrates how to apply CSS styles to form elements using data attributes for validity states\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/form.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { Form } from \"radix-ui\";\n\nexport default () => (\n\t<Form.Root>\n\t\t<Form.Field name=\"email\">\n\t\t\t<Form.Label __className__=\"FormLabel\">Email</Form.Label>\n\t\t\t<Form.Control type=\"email\" />\n\t\t</Form.Field>\n\t</Form.Root>\n);\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.FormLabel[__data-invalid__] {\n\tcolor: red;\n}\n.FormLabel[__data-valid__] {\n\tcolor: green;\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Avatar with Tooltip in React\nDESCRIPTION: Example showing how to compose the Avatar component with a Tooltip to display additional information when the avatar is hovered or focused.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/avatar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Avatar, __Tooltip__ } from \"radix-ui\";\n\nexport default () => (\n\t<Tooltip.Root>\n\t\t<Tooltip.Trigger>\n\t\t\t<Avatar.Root>…</Avatar.Root>\n\t\t</Tooltip.Trigger>\n\n\t\t<Tooltip.Content side=\"top\">\n\t\t\tTooltip content\n\t\t\t<Tooltip.Arrow />\n\t\t</Tooltip.Content>\n\t</Tooltip.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Implementation in React\nDESCRIPTION: A simple example of a Slider component with a default value of 50.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/slider.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Slider defaultValue={[50]} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Flexible Layouts with Radix UI Viewport\nDESCRIPTION: This example demonstrates using the `NavigationMenu.Viewport` component to control where the `NavigationMenu.Content` is rendered. This is useful for designs requiring adjusted DOM structures or advanced animations, ensuring tab focus is automatically maintained.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/navigation-menu.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<NavigationMenu.Root>\n\t<NavigationMenu.List>\n\t\t<NavigationMenu.Item>\n\t\t\t<NavigationMenu.Trigger>Item one</NavigationMenu.Trigger>\n\t\t\t<NavigationMenu.Content>Item one content</NavigationMenu.Content>\n\t\t</NavigationMenu.Item>\n\t\t<NavigationMenu.Item>\n\t\t\t<NavigationMenu.Trigger>Item two</NavigationMenu.Trigger>\n\t\t\t<NavigationMenu.Content>Item two content</NavigationMenu.Content>\n\t\t</NavigationMenu.Item>\n\t</NavigationMenu.List>\n\n\t{/* NavigationMenu.Content will be rendered here when active */}\n\t<NavigationMenu.Viewport />\n</NavigationMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Composing Tooltip and Dialog Triggers in Radix UI with JSX\nDESCRIPTION: Demonstrates how to compose multiple Radix UI primitives using the asChild prop. The code combines Tooltip.Trigger and Dialog.Trigger in a single custom button component, showcasing the ability to integrate multiple behaviors in one element.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/guides/composition.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from \"react\";\nimport { Dialog, Tooltip } from \"radix-ui\";\n\nconst MyButton = React.forwardRef((props, forwardedRef) => (\n\t<button {...props} ref={forwardedRef} />\n));\n\nexport default () => {\n\treturn (\n\t\t<Dialog.Root>\n\t\t\t<Tooltip.Root>\n\t\t\t\t<Tooltip.Trigger asChild>\n\t\t\t\t\t<Dialog.Trigger asChild>\n\t\t\t\t\t\t<MyButton>Open dialog</MyButton>\n\t\t\t\t\t</Dialog.Trigger>\n\t\t\t\t</Tooltip.Trigger>\n\t\t\t\t<Tooltip.Portal>…</Tooltip.Portal>\n\t\t\t</Tooltip.Root>\n\n\t\t\t<Dialog.Portal>...</Dialog.Portal>\n\t\t</Dialog.Root>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Dialog Size Variations in Radix UI\nDESCRIPTION: This snippet illustrates how to implement multiple size variations for the dialog component using Radix UI. It demonstrates creating multiple dialog instances with different size properties, allowing control over visual aspects like padding and width.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/dialog.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"4\" align=\"center\">\n\t<Dialog.Root>\n\t\t<Dialog.Trigger>\n\t\t\t<Button variant=\"soft\">Size 1</Button>\n\t\t</Dialog.Trigger>\n\t\t<Dialog.Content __size__=\"1\" maxWidth=\"300px\">\n\t\t\t<Text as=\"p\" trim=\"both\" size=\"1\">\n\t\t\t\tThe quick brown fox jumps over the lazy dog.\n\t\t\t</Text>\n\t\t</Dialog.Content>\n\t</Dialog.Root>\n\n\t<Dialog.Root>\n\t\t<Dialog.Trigger>\n\t\t\t<Button variant=\"soft\">Size 2</Button>\n\t\t</Dialog.Trigger>\n\t\t<Dialog.Content __size__=\"2\" maxWidth=\"400px\">\n\t\t\t<Text as=\"p\" trim=\"both\" size=\"2\">\n\t\t\t\tThe quick brown fox jumps over the lazy dog.\n\t\t\t</Text>\n\t\t</Dialog.Content>\n\t</Dialog.Root>\n\n\t<Dialog.Root>\n\t\t<Dialog.Trigger>\n\t\t\t<Button variant=\"soft\">Size 3</Button>\n\t\t</Dialog.Trigger>\n\t\t<Dialog.Content __size__=\"3\" maxWidth=\"500px\">\n\t\t\t<Text as=\"p\" trim=\"both\" size=\"3\">\n\t\t\t\tThe quick brown fox jumps over the lazy dog.\n\t\t\t</Text>\n\t\t</Dialog.Content>\n\t</Dialog.Root>\n\n\t<Dialog.Root>\n\t\t<Dialog.Trigger>\n\t\t\t<Button variant=\"soft\">Size 4</Button>\n\t\t</Dialog.Trigger>\n\t\t<Dialog.Content __size__=\"4\">\n\t\t\t<Text as=\"p\" trim=\"both\" size=\"4\">\n\t\t\t\tThe quick brown fox jumps over the lazy dog.\n\t\t\t</Text>\n\t\t</Dialog.Content>\n\t</Dialog.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Implementing Ghost Variant for Select Trigger in React\nDESCRIPTION: This example shows how to use the 'ghost' trigger variant to render the Select trigger without a visually containing element. It compares the ghost variant with a surface variant.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/select.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"3\" align=\"center\">\n\t<Select.Root defaultValue=\"apple\">\n\t\t<Select.Trigger variant=\"surface\" />\n\t\t<Select.Content>\n\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t</Select.Content>\n\t</Select.Root>\n\n\t<Select.Root defaultValue=\"apple\">\n\t\t<Select.Trigger variant=\"ghost\" />\n\t\t<Select.Content>\n\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t</Select.Content>\n\t</Select.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Hover Card Structure in React\nDESCRIPTION: Example showing the anatomy of a Hover Card component with all its constituent parts properly structured in JSX.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/hover-card.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HoverCard } from \"radix-ui\";\n\nexport default () => (\n\t<HoverCard.Root>\n\t\t<HoverCard.Trigger />\n\t\t<HoverCard.Portal>\n\t\t\t<HoverCard.Content>\n\t\t\t\t<HoverCard.Arrow />\n\t\t\t</HoverCard.Content>\n\t\t</HoverCard.Portal>\n\t</HoverCard.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Submenus with Radix UI Navigation Menu\nDESCRIPTION: This code demonstrates how to create a submenu using the `NavigationMenu.__Sub__` component within the main `NavigationMenu`. It shows how to nest navigation menus and assign a `defaultValue` to the submenu to control the active item.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/navigation-menu.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<NavigationMenu.Root>\n\t<NavigationMenu.List>\n\t\t<NavigationMenu.Item>\n\t\t\t<NavigationMenu.Trigger>Item one</NavigationMenu.Trigger>\n\t\t\t<NavigationMenu.Content>Item one content</NavigationMenu.Content>\n\t\t</NavigationMenu.Item>\n\t\t<NavigationMenu.Item>\n\t\t\t<NavigationMenu.Trigger>Item two</NavigationMenu.Trigger>\n\t\t\t<NavigationMenu.Content>\n\t\t\t\t<NavigationMenu.__Sub__ __defaultValue__=\"sub1\">\n\t\t\t\t\t<NavigationMenu.List>\n\t\t\t\t\t\t<NavigationMenu.Item value=\"sub1\">\n\t\t\t\t\t\t\t<NavigationMenu.Trigger>Sub item one</NavigationMenu.Trigger>\n\t\t\t\t\t\t\t<NavigationMenu.Content>\n\t\t\t\t\t\t\t\tSub item one content\n\t\t\t\t\t\t\t</NavigationMenu.Content>\n\t\t\t\t\t\t</NavigationMenu.Item>\n\t\t\t\t\t\t<NavigationMenu.Item value=\"sub2\">\n\t\t\t\t\t\t\t<NavigationMenu.Trigger>Sub item two</NavigationMenu.Trigger>\n\t\t\t\t\t\t\t<NavigationMenu.Content>\n\t\t\t\t\t\t\t\tSub item two content\n\t\t\t\t\t\t\t</NavigationMenu.Content>\n\t\t\t\t\t\t</NavigationMenu.Item>\n\t\t\t\t\t</NavigationMenu.List>\n\t\t\t\t</NavigationMenu.__Sub__>\n\t\t\t</NavigationMenu.Content>\n\t\t</NavigationMenu.Item>\n\t</NavigationMenu.List>\n</NavigationMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Combining Spinner with Icon in Buttons in JSX\nDESCRIPTION: This snippet demonstrates how to combine disabled state and Spinner to create more sophisticated button designs in JSX, where the spinner wraps icons for improved visuals. It showcases buttons across variants, integrating BookmarkIcon with Spinner.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/button.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"3\">\n\t<Button disabled variant=\"classic\">\n\t\t<Spinner loading>\n\t\t\t<BookmarkIcon />\n\t\t</Spinner>\n\t\tBookmark\n\t</Button>\n\t<Button disabled variant=\"solid\">\n\t\t<Spinner loading>\n\t\t\t<BookmarkIcon />\n\t\t</Spinner>\n\t\tBookmark\n\t</Button>\n\t<Button disabled variant=\"soft\">\n\t\t<Spinner loading>\n\t\t\t<BookmarkIcon />\n\t\t</Spinner>\n\t\tBookmark\n\t</Button>\n\t<Button disabled variant=\"surface\">\n\t\t<Spinner loading>\n\t\t\t<BookmarkIcon />\n\t\t</Spinner>\n\t\tBookmark\n\t</Button>\n\t<Button disabled variant=\"outline\">\n\t\t<Spinner loading>\n\t\t\t<BookmarkIcon />\n\t\t</Spinner>\n\t\tBookmark\n\t</Button>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Basic Form Component Structure in React\nDESCRIPTION: Example of how to import and structure the Form component parts in a React application.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/form.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Form } from \"radix-ui\";\n\nexport default () => (\n\t<Form.Root>\n\t\t<Form.Field>\n\t\t\t<Form.Label />\n\t\t\t<Form.Control />\n\t\t\t<Form.Message />\n\t\t\t<Form.ValidityState />\n\t\t</Form.Field>\n\n\t\t<Form.Message />\n\t\t<Form.ValidityState />\n\n\t\t<Form.Submit />\n\t</Form.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Forwarding Refs in Custom React Component using React.forwardRef\nDESCRIPTION: This snippet illustrates the process of forwarding refs in a React component using React.forwardRef to ensure compatibility with Radix UI. The code modifies a custom button component to accept and pass a ref for scenarios where Radix might need to access the element's DOM node.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/guides/composition.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// before\nconst MyButton = (props) => <button {...props} />;\n\n// after\nconst MyButton = React.forwardRef((props, forwardedRef) => (\n\t<button {...props} ref={forwardedRef} />\n));\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Items in DropdownMenu with React\nDESCRIPTION: This example shows how to add radio items to a DropdownMenu using the RadioGroup and RadioItem parts, managing their state with React hooks.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dropdown-menu.mdx#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { CheckIcon } from \"@radix-ui/react-icons\";\nimport { DropdownMenu } from \"radix-ui\";\n\nexport default () => {\n\tconst [color, setColor] = React.useState(\"blue\");\n\n\treturn (\n\t\t<DropdownMenu.Root>\n\t\t\t<DropdownMenu.Trigger>…</DropdownMenu.Trigger>\n\t\t\t<DropdownMenu.Portal>\n\t\t\t\t<DropdownMenu.Content>\n\t\t\t\t\t<DropdownMenu.RadioGroup value={color} onValueChange={setColor}>\n\t\t\t\t\t\t<DropdownMenu.RadioItem value=\"red\">\n\t\t\t\t\t\t\t<DropdownMenu.ItemIndicator>\n\t\t\t\t\t\t\t\t<CheckIcon />\n\t\t\t\t\t\t\t</DropdownMenu.ItemIndicator>\n\t\t\t\t\t\t\tRed\n\t\t\t\t\t\t</DropdownMenu.RadioItem>\n\t\t\t\t\t\t<DropdownMenu.RadioItem value=\"blue\">\n\t\t\t\t\t\t\t<DropdownMenu.ItemIndicator>\n\t\t\t\t\t\t\t\t<CheckIcon />\n\t\t\t\t\t\t\t</DropdownMenu.ItemIndicator>\n\t\t\t\t\t\t\tBlue\n\t\t\t\t\t\t</DropdownMenu.RadioItem>\n\t\t\t\t\t\t<DropdownMenu.RadioItem value=\"green\">\n\t\t\t\t\t\t\t<DropdownMenu.ItemIndicator>\n\t\t\t\t\t\t\t\t<CheckIcon />\n\t\t\t\t\t\t\t</DropdownMenu.ItemIndicator>\n\t\t\t\t\t\t\tGreen\n\t\t\t\t\t\t</DropdownMenu.RadioItem>\n\t\t\t\t\t</DropdownMenu.RadioGroup>\n\t\t\t\t</DropdownMenu.Content>\n\t\t\t</DropdownMenu.Portal>\n\t\t</DropdownMenu.Root>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Select Component Variants in React\nDESCRIPTION: This snippet demonstrates how to use the 'variant' prop on Trigger and Content to customize the visual style of the Select component. It shows surface, classic, and soft variants.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/select.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"3\" align=\"center\">\n\t<Select.Root defaultValue=\"apple\">\n\t\t<Select.Trigger variant=\"surface\" />\n\t\t<Select.Content>\n\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t</Select.Content>\n\t</Select.Root>\n\n\t<Select.Root defaultValue=\"apple\">\n\t\t<Select.Trigger variant=\"classic\" />\n\t\t<Select.Content>\n\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t</Select.Content>\n\t</Select.Root>\n\n\t<Select.Root defaultValue=\"apple\">\n\t\t<Select.Trigger variant=\"soft\" />\n\t\t<Select.Content>\n\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t</Select.Content>\n\t</Select.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Constraining Tooltip Content Size with CSS Variables\nDESCRIPTION: Demonstrates using Radix UI's exposed CSS variables to dynamically size tooltip content based on trigger dimensions and viewport constraints\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/tooltip.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { Tooltip } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<Tooltip.Root>\n\t\t<Tooltip.Trigger>…</Tooltip.Trigger>\n\t\t<Tooltip.Portal>\n\t\t\t<Tooltip.Content __className__=\"TooltipContent\" sideOffset={5}>\n\t\t\t\t…\n\t\t\t</Tooltip.Content>\n\t\t</Tooltip.Portal>\n\t</Tooltip.Root>\n);\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.TooltipContent {\n\twidth: var(__--radix-tooltip-trigger-width__);\n\tmax-height: var(__--radix-tooltip-content-available-height__);\n}\n```\n\n----------------------------------------\n\nTITLE: TextArea Size Variations\nDESCRIPTION: Demonstrates different size options for the TextArea component using the size prop with values 1, 2, and 3.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text-area.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\">\n\t<Box maxWidth=\"200px\">\n\t\t<TextArea size=\"1\" placeholder=\"Reply to comment…\" />\n\t</Box>\n\t<Box maxWidth=\"250px\">\n\t\t<TextArea size=\"2\" placeholder=\"Reply to comment…\" />\n\t</Box>\n\t<Box maxWidth=\"300px\">\n\t\t<TextArea size=\"3\" placeholder=\"Reply to comment…\" />\n\t</Box>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Function in Form\nDESCRIPTION: Example of using a custom validation function with the Form.Message component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/form.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Form.Field name=\"name\">\n\t<Form.Label>Full name</Form.Label>\n\t<Form.Control />\n\t<Form.Message __match__={(value, formData) => value !== \"John\"}>\n\t\tOnly John is allowed.\n\t</Form.Message>\n</Form.Field>\n```\n\n----------------------------------------\n\nTITLE: Custom Tooltip Implementation with Tooltip API in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the creation of a custom Tooltip component by abstracting Radix-UI's Tooltip parts. It uses the asChild prop to facilitate flexible trigger component integration. It requires React and Radix-UI as dependencies, with inputs consisting of children elements and optional props such as open and defaultOpen.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/tooltip.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// your-tooltip.jsx\nimport * as React from \"react\";\nimport { Tooltip as TooltipPrimitive } from \"radix-ui\";\n\nexport function Tooltip({\n\tchildren,\n\tcontent,\n\topen,\n\tdefaultOpen,\n\tonOpenChange,\n\t...props\n}) {\n\treturn (\n\t\t<TooltipPrimitive.Root\n\t\t\topen={open}\n\t\t\tdefaultOpen={defaultOpen}\n\t\t\tonOpenChange={onOpenChange}\n\t\t>\n\t\t\t<TooltipPrimitive.Trigger __asChild__>\n\t\t\t\t{children}\n\t\t\t</TooltipPrimitive.Trigger>\n\t\t\t<TooltipPrimitive.Content side=\"top\" align=\"center\" {...props}>\n\t\t\t\t{content}\n\t\t\t\t<TooltipPrimitive.Arrow width={11} height={5} />\n\t\t\t</TooltipPrimitive.Content>\n\t\t</TooltipPrimitive.Root>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Color Prop to Define Dropdown Menu Colors\nDESCRIPTION: This snippet shows how to utilize the `color` prop to specify a color scheme for the dropdown menu and its items. It provides multiple examples of using different colors for both the trigger button and dropdown content.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/dropdown-menu.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"3\">\n\t<DropdownMenu.Root>\n\t\t<DropdownMenu.Trigger>\n\t\t\t<Button variant=\"soft\" color=\"indigo\">\n\t\t\t\tOptions\n\t\t\t\t<DropdownMenu.TriggerIcon />\n\t\t\t</Button>\n\t\t</DropdownMenu.Trigger>\n\t\t<DropdownMenu.Content variant=\"soft\" color=\"indigo\">\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ E\">Edit</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ D\">Duplicate</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ N\">Archive</DropdownMenu.Item>\n\t\t</DropdownMenu.Content>\n\t</DropdownMenu.Root>\n\n\t<DropdownMenu.Root>\n\t\t<DropdownMenu.Trigger>\n\t\t\t<Button variant=\"soft\" color=\"cyan\">\n\t\t\t\tOptions\n\t\t\t\t<DropdownMenu.TriggerIcon />\n\t\t\t</Button>\n\t\t</DropdownMenu.Trigger>\n\t\t<DropdownMenu.Content variant=\"soft\" color=\"cyan\">\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ E\">Edit</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ D\">Duplicate</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ N\">Archive</DropdownMenu.Item>\n\t\t</DropdownMenu.Content>\n\t</DropdownMenu.Root>\n\n\t<DropdownMenu.Root>\n\t\t<DropdownMenu.Trigger>\n\t\t\t<Button variant=\"soft\" color=\"orange\">\n\t\t\t\tOptions\n\t\t\t\t<DropdownMenu.TriggerIcon />\n\t\t\t</Button>\n\t\t</DropdownMenu.Trigger>\n\t\t<DropdownMenu.Content variant=\"soft\" color=\"orange\">\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ E\">Edit</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ D\">Duplicate</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ N\">Archive</DropdownMenu.Item>\n\t\t</DropdownMenu.Content>\n\t</DropdownMenu.Root>\n\n\t<DropdownMenu.Root>\n\t\t<DropdownMenu.Trigger>\n\t\t\t<Button variant=\"soft\" color=\"crimson\">\n\t\t\t\tOptions\n\t\t\t\t<DropdownMenu.TriggerIcon />\n\t\t\t</Button>\n\t\t</DropdownMenu.Trigger>\n\t\t<DropdownMenu.Content variant=\"soft\" color=\"crimson\">\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ E\">Edit</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ D\">Duplicate</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ N\">Archive</DropdownMenu.Item>\n\t\t</DropdownMenu.Content>\n\t</DropdownMenu.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Styling Radio Cards with Variants in Radix UI\nDESCRIPTION: Demonstrates the usage of the \"variant\" prop to apply different visual styles to Radio Cards. This example shows how developers can adjust the style of their components to match various design themes or requirements using predefined variant styles in Radix UI. Requires Radix UI setup in a React environment.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio-cards.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\" maxWidth=\"200px\">\\n\\t<RadioCards.Root variant=\"surface\">\\n\\t\\t<RadioCards.Item value=\"1\">8-core CPU</RadioCards.Item>\\n\\t</RadioCards.Root>\\n\\n\\t<RadioCards.Root variant=\"classic\">\\n\\t\\t<RadioCards.Item value=\"1\">8-core CPU</RadioCards.Item>\\n\\t</RadioCards.Root>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Initializing Scroll Area Component in JSX\nDESCRIPTION: This snippet demonstrates the basic usage of the Scroll Area component with vertical scrolling. It includes content about typography principles within a scrollable container.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/scroll-area.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ScrollArea type=\"always\" scrollbars=\"vertical\" style={{ height: 180 }}>\n\t<Box p=\"2\" pr=\"8\">\n\t\t<Heading size=\"4\" mb=\"2\" trim=\"start\">\n\t\t\tPrinciples of the typographic craft\n\t\t</Heading>\n\t\t<Flex direction=\"column\" gap=\"4\">\n\t\t\t<Text as=\"p\">\n\t\t\t\tThree fundamental aspects of typography are legibility, readability, and\n\t\t\t\taesthetics. Although in a non-technical sense \"legible\" and \"readable\"\n\t\t\t\tare often used synonymously, typographically they are separate but\n\t\t\t\trelated concepts.\n\t\t\t</Text>\n\n\t\t\t<Text as=\"p\">\n\t\t\t\tLegibility describes how easily individual characters can be\n\t\t\t\tdistinguished from one another. It is described by Walter Tracy as \"the\n\t\t\t\tquality of being decipherable and recognisable\". For instance, if a \"b\"\n\t\t\t\tand an \"h\", or a \"3\" and an \"8\", are difficult to distinguish at small\n\t\t\t\tsizes, this is a problem of legibility.\n\t\t\t</Text>\n\n\t\t\t<Text as=\"p\">\n\t\t\t\tTypographers are concerned with legibility insofar as it is their job to\n\t\t\t\tselect the correct font to use. Brush Script is an example of a font\n\t\t\t\tcontaining many characters that might be difficult to distinguish. The\n\t\t\t\tselection of cases influences the legibility of typography because using\n\t\t\t\tonly uppercase letters (all-caps) reduces legibility.\n\t\t\t</Text>\n\t\t</Flex>\n\t</Box>\n</ScrollArea>\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstracted Select Component in React\nDESCRIPTION: Complete implementation of a custom abstracted Select component that wraps Radix UI's primitive Select parts into a more user-friendly API with predefined structure and styling, including icon integration.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/select.mdx#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n// your-select.jsx\nimport * as React from \"react\";\nimport { Select as SelectPrimitive } from \"radix-ui\";\nimport {\n\tCheckIcon,\n\tChevronDownIcon,\n\tChevronUpIcon,\n} from \"@radix-ui/react-icons\";\n\nexport const Select = React.forwardRef(\n\t({ children, ...props }, forwardedRef) => {\n\t\treturn (\n\t\t\t<SelectPrimitive.Root {...props}>\n\t\t\t\t<SelectPrimitive.Trigger ref={forwardedRef}>\n\t\t\t\t\t<SelectPrimitive.Value />\n\t\t\t\t\t<SelectPrimitive.Icon>\n\t\t\t\t\t\t<ChevronDownIcon />\n\t\t\t\t\t</SelectPrimitive.Icon>\n\t\t\t\t</SelectPrimitive.Trigger>\n\t\t\t\t<SelectPrimitive.Portal>\n\t\t\t\t\t<SelectPrimitive.Content>\n\t\t\t\t\t\t<SelectPrimitive.ScrollUpButton>\n\t\t\t\t\t\t\t<ChevronUpIcon />\n\t\t\t\t\t\t</SelectPrimitive.ScrollUpButton>\n\t\t\t\t\t\t<SelectPrimitive.Viewport>{children}</SelectPrimitive.Viewport>\n\t\t\t\t\t\t<SelectPrimitive.ScrollDownButton>\n\t\t\t\t\t\t\t<ChevronDownIcon />\n\t\t\t\t\t\t</SelectPrimitive.ScrollDownButton>\n\t\t\t\t\t</SelectPrimitive.Content>\n\t\t\t\t</SelectPrimitive.Portal>\n\t\t\t</SelectPrimitive.Root>\n\t\t);\n\t},\n);\n\nexport const SelectItem = React.forwardRef(\n\t({ children, ...props }, forwardedRef) => {\n\t\treturn (\n\t\t\t<SelectPrimitive.Item {...props} ref={forwardedRef}>\n\t\t\t\t<SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n\t\t\t\t<SelectPrimitive.ItemIndicator>\n\t\t\t\t\t<CheckIcon />\n\t\t\t\t</SelectPrimitive.ItemIndicator>\n\t\t\t</SelectPrimitive.Item>\n\t\t);\n\t},\n);\n```\n\n----------------------------------------\n\nTITLE: Using Controlled Values with One-Time Password Fields\nDESCRIPTION: This example covers managing a controlled value in a One-Time Password Field. It provides a form setup that verifies a password against a valid code, updating the state on value change, and submitting the data automatically when filled.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/one-time-password-field.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Verify({ validCode }) {\n\tconst [value, setValue] = React.useState(\"\");\n\tconst PASSWORD_LENGTH = 6;\n\tfunction handleSubmit() {\n\t\tif (value === validCode) {\n\t\t\tredirect(\"/authenticated\");\n\t\t} else {\n\t\t\twindow.alert(\"Invalid code\");\n\t\t}\n\t}\n\treturn (\n\t\t<OneTimePasswordField.Root\n\t\t\tautoSubmit\n\t\t\tvalue={value}\n\t\t\tonAutoSubmit={handleSubmit}\n\t\t\tonValueChange={setValue}\n\t\t>\n\t\t\t{PASSWORD_LENGTH.map((_, i) => (\n\t\t\t\t<OneTimePasswordField.Input key={i} />\n\t\t\t))}\n\t\t</OneTimePasswordField.Root>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Icons in Buttons with JSX\nDESCRIPTION: This snippet shows how to integrate icons within Button components using JSX. It demonstrates using BookmarkIcon with buttons in 'classic', 'solid', 'soft', 'surface', and 'outline' variants. Each button uses Flex for layout management, preserving the JSX format.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/button.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"3\">\n\t<Button variant=\"classic\">\n\t\t<BookmarkIcon /> Bookmark\n\t</Button>\n\t<Button variant=\"solid\">\n\t\t<BookmarkIcon /> Bookmark\n\t</Button>\n\t<Button variant=\"soft\">\n\t\t<BookmarkIcon /> Bookmark\n\t</Button>\n\t<Button variant=\"surface\">\n\t\t<BookmarkIcon /> Bookmark\n\t</Button>\n\t<Button variant=\"outline\">\n\t\t<BookmarkIcon /> Bookmark\n\t</Button>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Styling Advanced Animations for Radix UI Navigation Menu\nDESCRIPTION: This CSS code defines the styles and animations for the `NavigationMenuContent` and `NavigationMenuViewport` components, enabling advanced animation effects. It uses keyframes to define the enter and exit animations based on the direction of movement.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/navigation-menu.mdx#2025-04-21_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.NavigationMenuContent {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tanimation-duration: 250ms;\n\tanimation-timing-function: ease;\n}\n.NavigationMenuContent[__data-motion__=\"from-start\"] {\n\tanimation-name: enterFromLeft;\n}\n.NavigationMenuContent[__data-motion__=\"from-end\"] {\n\tanimation-name: enterFromRight;\n}\n.NavigationMenuContent[__data-motion__=\"to-start\"] {\n\tanimation-name: exitToLeft;\n}\n.NavigationMenuContent[__data-motion__=\"to-end\"] {\n\tanimation-name: exitToRight;\n}\n\n.NavigationMenuViewport {\n\tposition: relative;\n\twidth: var(__--radix-navigation-menu-viewport-width__);\n\theight: var(__--radix-navigation-menu-viewport-height__);\n\ttransition:\n\t\twidth,\n\t\theight,\n\t\t250ms ease;\n}\n\n@keyframes enterFromRight {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: translateX(200px);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: translateX(0);\n\t}\n}\n\n@keyframes enterFromLeft {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: translateX(-200px);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: translateX(0);\n\t}\n}\n\n@keyframes exitToRight {\n\tfrom {\n\t\topacity: 1;\n\t\ttransform: translateX(0);\n\t}\n\tto {\n\t\topacity: 0;\n\t\ttransform: translateX(200px);\n\t}\n}\n\n@keyframes exitToLeft {\n\tfrom {\n\t\topacity: 1;\n\t\ttransform: translateX(0);\n\t}\n\tto {\n\t\topacity: 0;\n\t\ttransform: translateX(-200px);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Abstracting Toast Parts in React\nDESCRIPTION: This snippet demonstrates how to create a custom Toast component by abstracting the primitive parts from Radix UI. This allows for creating a reusable Toast component with a simplified API.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toast.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// your-toast.jsx\nimport { Toast as ToastPrimitive } from \"radix-ui\";\n\nexport const Toast = ({ title, content, children, ...props }) => {\n\treturn (\n\t\t<ToastPrimitive.Root {...props}>\n\t\t\t{title && <ToastPrimitive.Title>{title}</ToastPrimitive.Title>}\n\t\t\t<ToastPrimitive.Description>{content}</ToastPrimitive.Description>\n\t\t\t{children && (\n\t\t\t\t<ToastPrimitive.Action asChild>{children}</ToastPrimitive.Action>\n\t\t\t)}\n\t\t\t<ToastPrimitive.Close aria-label=\"Close\">\n\t\t\t\t<span aria-hidden>×</span>\n\t\t\t</ToastPrimitive.Close>\n\t\t</ToastPrimitive.Root>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Radix UI Components - TypeScript\nDESCRIPTION: This snippet shows how to import necessary Radix UI components after installing the package. The imported components can be used within a TypeScript project to build accessible design systems.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/overview/introduction.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Dialog, DropdownMenu, Tooltip } from \"radix-ui\";\n```\n\n----------------------------------------\n\nTITLE: Button Variants Example - Radix UI JSX\nDESCRIPTION: Shows different button variants (classic, solid, and soft) with consistent styling and arrow icons, demonstrating visual hierarchy options.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/overview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"3\" align=\"center\">\n\t<Button variant=\"classic\">\n\t\tGet started <ArrowRightIcon />\n\t</Button>\n\t<Button variant=\"solid\">\n\t\tGet started <ArrowRightIcon />\n\t</Button>\n\t<Button variant=\"soft\">\n\t\tGet started <ArrowRightIcon />\n\t</Button>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Constraining Context Menu Size with CSS Custom Properties in Radix UI\nDESCRIPTION: Demonstrates how to use Radix UI's CSS custom properties to constrain the width and height of the Context Menu content to match the trigger width and available viewport height.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { ContextMenu } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<ContextMenu.Root>\n\t\t<ContextMenu.Trigger>…</ContextMenu.Trigger>\n\t\t<ContextMenu.Portal>\n\t\t\t<ContextMenu.Content __className__=\"ContextMenuContent\">\n\t\t\t\t…\n\t\t\t</ContextMenu.Content>\n\t\t</ContextMenu.Portal>\n\t</ContextMenu.Root>\n);\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.ContextMenuContent {\n\twidth: var(__--radix-context-menu-trigger-width__);\n\tmax-height: var(__--radix-context-menu-content-available-height__);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Blockquote Component with JSX\nDESCRIPTION: This snippet demonstrates rendering a basic Blockquote component in a React application. It showcases the default usage of the Blockquote element sourced from the blockquote HTML element.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/blockquote.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Blockquote>\n\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\tstone alone comes near it in obstinacy.\n</Blockquote>\n```\n\n----------------------------------------\n\nTITLE: Text Component with Formatting Elements in JSX\nDESCRIPTION: Example showing how to compose the Text component with other formatting components like Link, Em, Code, and Kbd to add emphasis and structure to content.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text.mdx#2025-04-21_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<Text as=\"p\">\n\tLook, such a helpful <Link href=\"#\">link</Link>, an <Em>italic emphasis</Em>,\n\ta piece of computer <Code>code</Code>, and even a hotkey combination{\" \"}\n\t<Kbd>⇧⌘A</Kbd> within the text.\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Using Radix Colors with vanilla-extract\nDESCRIPTION: This snippet demonstrates how to use Radix Colors with vanilla-extract. It imports color scales, creates light and dark themes, and applies the colors to a styled button component. Requires `@vanilla-extract/css` and `@radix-ui/colors` packages.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/overview/usage.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n\tgray,\n\tblue,\n\tred,\n\tgreen,\n\tgrayDark,\n\tblueDark,\n\tredDark,\n\tgreenDark,\n} from \"@radix-ui/colors\";\nimport { createTheme } from \"@vanilla-extract/css\";\n\nexport const [theme, vars] = createTheme({\n\tcolors: {\n\t\t...gray,\n\t\t...blue,\n\t\t...red,\n\t\t...green,\n\t},\n});\n\nexport const darkTheme = createTheme(vars, {\n\tcolors: {\n\t\t...grayDark,\n\t\t...blueDark,\n\t\t...redDark,\n\t\t...greenDark,\n\t},\n});\n\n// Use the colors in your styles\nexport const styles = {\n\tbutton: style({\n\t\tbackgroundColor: vars.colors.blue4,\n\t\tcolor: vars.colors.blue11,\n\t\tborderColor: vars.colors.blue7,\n\t\t\":hover\": {\n\t\t\tbackgroundColor: vars.colors.blue5,\n\t\t\tborderColor: vars.colors.blue8,\n\t\t},\n\t}),\n};\n\n// Apply your theme to it\nexport default function App() {\n\treturn (\n\t\t<body className={theme}>\n\t\t\t<button className={styles.button}>Radix Colors</button>\n\t\t</body>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Skeleton Loading State\nDESCRIPTION: Demonstrates using the loading prop to toggle between skeleton and actual content, preserving dimensions and managing interactive elements.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/skeleton.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"4\">\n\t<Skeleton loading={true}>\n\t\t<Switch defaultChecked />\n\t</Skeleton>\n\n\t<Skeleton loading={false}>\n\t\t<Switch defaultChecked />\n\t</Skeleton>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Controlling Card Size with 'size' Prop - JSX\nDESCRIPTION: This snippet demonstrates how to control the size of the Radix UI Card component using the `size` prop.  Different sizes are applied to three cards, showcasing the effect on the overall appearance. This example also includes `Avatar` and `Text` components to illustrate the impact of card size on contained elements.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/card.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n\"<Flex gap=\\\"3\\\" direction=\\\"column\\\">\\n\\t<Box width=\\\"350px\\\">\\n\\t\t<Card size=\\\"1\\\">\\n\\t\t\t<Flex gap=\\\"3\\\" align=\\\"center\\\">\\n\\t\t\t\t<Avatar size=\\\"3\\\" radius=\\\"full\\\" fallback=\\\"T\\\" color=\\\"indigo\\\" />\\n\\t\t\t\t<Box>\\n\\t\t\t\t\t<Text as=\\\"div\\\" size=\\\"2\\\" weight=\\\"bold\\\">\\n\\t\t\t\t\t\tTeodros Girmay\\n\\t\t\t\t\t</Text>\\n\\t\t\t\t\t<Text as=\\\"div\\\" size=\\\"2\\\" color=\\\"gray\\\">\\n\\t\t\t\t\t\tEngineering\\n\\t\t\t\t\t</Text>\\n\\t\t\t\t</Box>\\n\\t\t\t</Flex>\\n\\t\t</Card>\\n\\t</Box>\\n\\n\\t<Box width=\\\"400px\\\">\\n\\t\t<Card size=\\\"2\\\">\\n\\t\t\t<Flex gap=\\\"4\\\" align=\\\"center\\\">\\n\\t\t\t\t<Avatar size=\\\"4\\\" radius=\\\"full\\\" fallback=\\\"T\\\" color=\\\"indigo\\\" />\\n\\t\t\t\t<Box>\\n\\t\t\t\t\t<Text as=\\\"div\\\" weight=\\\"bold\\\">\\n\\t\t\t\t\t\tTeodros Girmay\\n\\t\t\t\t\t</Text>\\n\\t\t\t\t\t<Text as=\\\"div\\\" color=\\\"gray\\\">\\n\\t\t\t\t\t\tEngineering\\n\\t\t\t\t\t</Text>\\n\\t\t\t</Box>\\n\\t\t</Flex>\\n\\t\t</Card>\\n\\t</Box>\\n\\n\\t<Box width=\\\"500px\\\">\\n\\t\t<Card size=\\\"3\\\">\\n\\t\t\t<Flex gap=\\\"4\\\" align=\\\"center\\\">\\n\\t\t\t\t<Avatar size=\\\"5\\\" radius=\\\"full\\\" fallback=\\\"T\\\" color=\\\"indigo\\\" />\\n\\t\t\t\t<Box>\\n\\t\t\t\t\t<Text as=\\\"div\\\" size=\\\"4\\\" weight=\\\"bold\\\">\\n\\t\t\t\t\t\tTeodros Girmay\\n\\t\t\t\t\t</Text>\\n\\t\t\t\t\t<Text as=\\\"div\\\" size=\\\"4\\\" color=\\\"gray\\\">\\n\\t\t\t\t\t\tEngineering\\n\\t\t\t\t\t</Text>\\n\\t\t\t</Box>\\n\\t\t</Flex>\\n\\t\t</Card>\\n\\t</Box>\\n</Flex>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Slider\nDESCRIPTION: Example showing how to create a vertically oriented slider using the orientation prop set to 'vertical'. Includes both JSX and corresponding CSS for styling.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/slider.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { Slider } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<Slider.Root\n\t\tclassName=\"SliderRoot\"\n\t\tdefaultValue={[50]}\n\t\t__orientation__=\"vertical\"\n\t>\n\t\t<Slider.Track className=\"SliderTrack\">\n\t\t\t<Slider.Range className=\"SliderRange\" />\n\t\t</Slider.Track>\n\t\t<Slider.Thumb className=\"SliderThumb\" />\n\t</Slider.Root>\n);\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.SliderRoot {\n\tposition: relative;\n\tdisplay: flex;\n\talign-items: center;\n}\n.SliderRoot[__data-orientation=\"vertical\"__] {\n\tflex-direction: column;\n\twidth: 20px;\n\theight: 100px;\n}\n\n.SliderTrack {\n\tposition: relative;\n\tflex-grow: 1;\n\tbackground-color: grey;\n}\n.SliderTrack[__data-orientation=\"vertical\"__] {\n\twidth: 3px;\n}\n\n.SliderRange {\n\tposition: absolute;\n\tbackground-color: black;\n}\n.SliderRange[__data-orientation=\"vertical\"__] {\n\twidth: 100%;\n}\n\n.SliderThumb {\n\tdisplay: block;\n\twidth: 20px;\n\theight: 20px;\n\tbackground-color: black;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Range Slider\nDESCRIPTION: Shows how to implement a range slider with multiple thumbs by providing an array of values and adding multiple Thumb components.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/slider.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Slider } from \"radix-ui\";\n\nexport default () => (\n\t<Slider.Root defaultValue={__[25, 75]__}>\n\t\t<Slider.Track>\n\t\t\t<Slider.Range />\n\t\t</Slider.Track>\n\t\t<Slider.Thumb />\n\t\t<Slider.Thumb />\n\t</Slider.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Extending Radix UI Accordion Primitive with React.forwardRef\nDESCRIPTION: This code demonstrates how to extend a Radix UI Accordion primitive using `React.forwardRef`. This allows you to pass a ref to the underlying DOM element of the primitive component.  It also sets the `displayName` for debugging purposes.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/guides/styling.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport { Accordion as AccordionPrimitive } from \"radix-ui\";\n\nconst AccordionItem = React.forwardRef<\n\tReact.ElementRef<typeof AccordionPrimitive.Item>,\n\tReact.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>((props, forwardedRef) => (\n\t<AccordionPrimitive.Item {...props} ref={forwardedRef} />\n));\nAccordionItem.displayName = \"AccordionItem\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Origin-Aware Animations for Context Menu in Radix UI\nDESCRIPTION: Shows how to create animations that are aware of the Context Menu's origin point using the CSS custom property --radix-context-menu-content-transform-origin for dynamic transform origins.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { ContextMenu } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<ContextMenu.Root>\n\t\t<ContextMenu.Trigger>…</ContextMenu.Trigger>\n\t\t<ContextMenu.Portal>\n\t\t\t<ContextMenu.Content __className__=\"ContextMenuContent\">\n\t\t\t\t…\n\t\t\t</ContextMenu.Content>\n\t\t</ContextMenu.Portal>\n\t</ContextMenu.Root>\n);\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.ContextMenuContent {\n\ttransform-origin: var(__--radix-context-menu-content-transform-origin__);\n\tanimation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: scale(0);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: scale(1);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Dialog Content - JSX\nDESCRIPTION: This snippet shows how to implement a custom dialog content component using Radix UI. It uses React's forwardRef to manage ref forwarding and includes a close button within the dialog content. Expected inputs include dialog content and props, while it outputs a fully functional dialog component with close functionality.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dialog.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// your-dialog.jsx\nimport * as React from \"react\";\nimport { Dialog as DialogPrimitive } from \"radix-ui\";\nimport { Cross1Icon } from \"@radix-ui/react-icons\";\n\nexport const DialogContent = React.forwardRef(\n\t({ children, ...props }, forwardedRef) => (\n\t\t<DialogPrimitive.Portal>\n\t\t\t<DialogPrimitive.Overlay />\n\t\t\t<DialogPrimitive.Content {...props} ref={forwardedRef}>\n\t\t\t\t{children}\n\t\t\t\t<DialogPrimitive.Close aria-label=\"Close\">\n\t\t\t\t\t<Cross1Icon />\n\t\t\t\t</DialogPrimitive.Close>\n\t\t\t</DialogPrimitive.Content>\n\t\t</DialogPrimitive.Portal>\n\t),\n);\n\nexport const Dialog = DialogPrimitive.Root;\nexport const DialogTrigger = DialogPrimitive.Trigger;\n```\n\n----------------------------------------\n\nTITLE: Range Slider Implementation in React\nDESCRIPTION: Creates a range slider by providing multiple values in the defaultValue array, allowing selection of a range between 25 and 75.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/slider.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Slider defaultValue={[25, 75]} />\n```\n\n----------------------------------------\n\nTITLE: Usage Example for Abstracted Select Component\nDESCRIPTION: Shows how to use a custom abstracted Select component API that simplifies the implementation for developers by hiding the complexity of the underlying primitive parts.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/select.mdx#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Select, SelectItem } from \"./your-select\";\n\nexport default () => (\n\t<Select defaultValue=\"2\">\n\t\t<SelectItem value=\"1\">Item 1</SelectItem>\n\t\t<SelectItem value=\"2\">Item 2</SelectItem>\n\t\t<SelectItem value=\"3\">Item 3</SelectItem>\n\t</Select>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Heading Color\nDESCRIPTION: This snippet illustrates how to specify custom colors for the Heading text using the 'color' prop, ensuring contrast with the background.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/heading.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\">\n\t<Heading color=\"indigo\">The quick brown fox jumps over the lazy dog</Heading>\n\t<Heading color=\"cyan\">The quick brown fox jumps over the lazy dog</Heading>\n\t<Heading color=\"orange\">The quick brown fox jumps over the lazy dog</Heading>\n\t<Heading color=\"crimson\">The quick brown fox jumps over the lazy dog</Heading>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Creating a Responsive Grid Layout with Radix UI\nDESCRIPTION: This snippet showcases the responsive capabilities of the Radix UI Grid component. It uses a breakpoint object to define the number of columns, setting it to 1 initially and transitioning to 2 columns at the medium breakpoint (md). The gap between items is set to 3 units, and the width is set to auto.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/grid.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n\"<Grid columns={{ initial: \\\"1\\\", md: \\\"2\\\" }} gap=\\\"3\\\" width=\\\"auto\\\">\\n\\t<Box height=\\\"64px\\\">\\n\\t\\t<DecorativeBox />\\n\\t</Box>\\n\\t<Box height=\\\"64px\\\">\\n\\t\\t<DecorativeBox />\\n\\t</Box>\\n</Grid>\"\n```\n\n----------------------------------------\n\nTITLE: Styling Buttons with Variant Prop in JSX\nDESCRIPTION: This snippet shows the use of the 'variant' prop to change the visual style of buttons in JSX using Flex layout. Five different styles ('classic', 'solid', 'soft', 'surface', 'outline') are displayed. Each variation displays a button with changed styling, driven by the 'variant' prop.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/button.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"center\" gap=\"3\">\n\t<Button variant=\"classic\">Edit profile</Button>\n\t<Button variant=\"solid\">Edit profile</Button>\n\t<Button variant=\"soft\">Edit profile</Button>\n\t<Button variant=\"surface\">Edit profile</Button>\n\t<Button variant=\"outline\">Edit profile</Button>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Alert Dialog in React\nDESCRIPTION: This snippet implements a basic Alert Dialog with a title, description, and action buttons. It uses the AlertDialog component from a UI library, featuring a trigger button and actions for canceling or confirming an action.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/alert-dialog.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<AlertDialog.Root>\n\t<AlertDialog.Trigger>\n\t\t<Button color=\"red\">Revoke access</Button>\n\t</AlertDialog.Trigger>\n\t<AlertDialog.Content maxWidth=\"450px\">\n\t\t<AlertDialog.Title>Revoke access</AlertDialog.Title>\n\t\t<AlertDialog.Description size=\"2\">\n\t\t\tAre you sure? This application will no longer be accessible and any\n\t\t\texisting sessions will be expired.\n\t\t</AlertDialog.Description>\n\n\t\t<Flex gap=\"3\" mt=\"4\" justify=\"end\">\n\t\t\t<AlertDialog.Cancel>\n\t\t\t\t<Button variant=\"soft\" color=\"gray\">\n\t\t\t\t\tCancel\n\t\t\t\t</Button>\n\t\t\t</AlertDialog.Cancel>\n\t\t\t<AlertDialog.Action>\n\t\t\t\t<Button variant=\"solid\" color=\"red\">\n\t\t\t\t\tRevoke access\n\t\t\t\t</Button>\n\t\t\t</AlertDialog.Action>\n\t\t</Flex>\n\t</AlertDialog.Content>\n</AlertDialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Variant Styling for Icon Button in JSX\nDESCRIPTION: This snippet demonstrates the `variant` prop on the `IconButton` component, which controls the visual style of the button. Different variants like \"classic\", \"solid\", \"soft\", \"surface\", and \"outline\" are used to showcase various visual styles. Each button displays a MagnifyingGlassIcon.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/icon-button.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n\"<Flex gap=\\\"3\\\">\\n\\t<IconButton variant=\\\"classic\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t</IconButton>\\n\\t<IconButton variant=\\\"solid\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t</IconButton>\\n\\t<IconButton variant=\\\"soft\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t</IconButton>\\n\\t<IconButton variant=\\\"surface\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t</IconButton>\\n\\t<IconButton variant=\\\"outline\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t</IconButton>\\n</Flex>\"\n```\n\n----------------------------------------\n\nTITLE: Colored Link Components\nDESCRIPTION: Demonstrates the `color` prop to set the color of the Radix UI Link component. Different color values are used from the Radix UI theme to style the links.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/link.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\">\n\t<Link href=\"#\" color=\"indigo\">\n\t\tSign up\n\t</Link>\n\t<Link href=\"#\" color=\"cyan\">\n\t\tSign up\n\t</Link>\n\t<Link href=\"#\" color=\"orange\">\n\t\tSign up\n\t</Link>\n\t<Link href=\"#\" color=\"crimson\">\n\t\tSign up\n\t</Link>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Animating Popover Content with CSS\nDESCRIPTION: This CSS snippet demonstrates how to apply an origin-aware animation to the Popover.Content component using the `--radix-popover-content-transform-origin` CSS custom property.  It defines a scale-in animation that starts from opacity 0 and scale 0, transitioning to opacity 1 and scale 1 over 0.5 seconds with an ease-out timing function.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/popover.mdx#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n\"/* styles.css */\n.PopoverContent {\n\ttransform-origin: var(__--radix-popover-content-transform-origin__);\n\tanimation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: scale(0);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: scale(1);\n\t}\n}\"\n```\n\n----------------------------------------\n\nTITLE: Constraining DropdownMenu Content Size with CSS Custom Properties\nDESCRIPTION: Demonstrates how to constrain the width and height of DropdownMenu content using CSS custom properties provided by Radix UI, such as --radix-dropdown-menu-trigger-width and --radix-dropdown-menu-content-available-height.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dropdown-menu.mdx#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { DropdownMenu } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<DropdownMenu.Root>\n\t\t<DropdownMenu.Trigger>…</DropdownMenu.Trigger>\n\t\t<DropdownMenu.Portal>\n\t\t\t<DropdownMenu.Content __className__=\"DropdownMenuContent\" sideOffset={5}>\n\t\t\t\t…\n\t\t\t</DropdownMenu.Content>\n\t\t</DropdownMenu.Portal>\n\t</DropdownMenu.Root>\n);\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.DropdownMenuContent {\n\twidth: var(__--radix-dropdown-menu-trigger-width__);\n\tmax-height: var(__--radix-dropdown-menu-content-available-height__);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tooltip in React with Radix UI\nDESCRIPTION: Example showing how to create a basic tooltip with an icon button. The tooltip displays 'Add to library' text when hovering over a button with a plus icon.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/tooltip.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Tooltip content=\"Add to library\">\n\t<IconButton radius=\"full\">\n\t\t<PlusIcon />\n\t</IconButton>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Implementing DropdownMenu with Submenus in React\nDESCRIPTION: This snippet demonstrates how to create a DropdownMenu with submenus using the DropdownMenu.Sub component and its related parts.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dropdown-menu.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<DropdownMenu.Root>\n\t<DropdownMenu.Trigger>…</DropdownMenu.Trigger>\n\t<DropdownMenu.Portal>\n\t\t<DropdownMenu.Content>\n\t\t\t<DropdownMenu.Item>…</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Item>…</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Sub>\n\t\t\t\t<DropdownMenu.SubTrigger>Sub menu →</DropdownMenu.SubTrigger>\n\t\t\t\t<DropdownMenu.Portal>\n\t\t\t\t\t<DropdownMenu.SubContent>\n\t\t\t\t\t\t<DropdownMenu.Item>Sub menu item</DropdownMenu.Item>\n\t\t\t\t\t\t<DropdownMenu.Item>Sub menu item</DropdownMenu.Item>\n\t\t\t\t\t\t<DropdownMenu.Arrow />\n\t\t\t\t\t</DropdownMenu.SubContent>\n\t\t\t\t</DropdownMenu.Portal>\n\t\t\t</DropdownMenu.Sub>\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Item>…</DropdownMenu.Item>\n\t\t</DropdownMenu.Content>\n\t</DropdownMenu.Portal>\n</DropdownMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Creating Collision-aware Animations for DropdownMenu\nDESCRIPTION: Demonstrates using data-side and data-align attributes exposed by Radix UI to create animations that adapt to collision detection and positioning changes at runtime.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dropdown-menu.mdx#2025-04-21_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { DropdownMenu } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<DropdownMenu.Root>\n\t\t<DropdownMenu.Trigger>…</DropdownMenu.Trigger>\n\t\t<DropdownMenu.Portal>\n\t\t\t<DropdownMenu.Content __className__=\"DropdownMenuContent\">\n\t\t\t\t…\n\t\t\t</DropdownMenu.Content>\n\t\t</DropdownMenu.Portal>\n\t</DropdownMenu.Root>\n);\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.DropdownMenuContent {\n\tanimation-duration: 0.6s;\n\tanimation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.DropdownMenuContent[__data-side=\"top\"__] {\n\tanimation-name: slideUp;\n}\n.DropdownMenuContent[__data-side=\"bottom\"__] {\n\tanimation-name: slideDown;\n}\n\n@keyframes slideUp {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: translateY(10px);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: translateY(0);\n\t}\n}\n\n@keyframes slideDown {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: translateY(-10px);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: translateY(0);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Labeling with Flex and Checkbox in JSX\nDESCRIPTION: This snippet illustrates how to label a Checkbox using Text and Flex components in JSX. It demonstrates creating a labeled Checkbox that is default checked to agree to terms. This implementation requires the Checkbox, Text, and Flex components to be imported. The components are used to create a simple form-like component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Text as=\"label\" size=\"2\">\n\t<Flex gap=\"2\">\n\t\t<Checkbox defaultChecked />\n\t\tAgree to Terms and Conditions\n\t</Flex>\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Event Handler Merging with Slot\nDESCRIPTION: Demonstrates how Slot merges event handlers with child precedence and handling of event prevention\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/utilities/slot.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Slot } from \"radix-ui\";\n\nexport default () => (\n\t<Slot.Root\n\t\tonClick={(event) => {\n\t\t\tif (!event.defaultPrevented)\n\t\t\t\tconsole.log(\"Not logged because default is prevented.\");\n\t\t}}\n\t>\n\t\t<button onClick={(event) => event.preventDefault()} />\n\t</Slot.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Tooltip Provider in React\nDESCRIPTION: Demonstrates how to use Tooltip.Provider to set global delay configurations for multiple tooltip instances across an application\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/tooltip.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tooltip } from \"radix-ui\";\n\nexport default () => (\n\t<Tooltip.Provider __delayDuration__={800} __skipDelayDuration__={500}>\n\t\t<Tooltip.Root>\n\t\t\t<Tooltip.Trigger>…</Tooltip.Trigger>\n\t\t\t<Tooltip.Content>…</Tooltip.Content>\n\t\t</Tooltip.Root>\n\t\t<Tooltip.Root>\n\t\t\t<Tooltip.Trigger>…</Tooltip.Trigger>\n\t\t\t<Tooltip.Content>…</Tooltip.Content>\n\t\t</Tooltip.Root>\n\t</Tooltip.Provider>\n);\n```\n\n----------------------------------------\n\nTITLE: Constraining Select Content Dimensions with CSS Variables\nDESCRIPTION: Illustrates how to use Radix UI's CSS custom properties to control Select content width and height based on trigger dimensions\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/select.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Select } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<Select.Root>\n\t\t<Select.Trigger>…</Select.Trigger>\n\t\t<Select.Portal>\n\t\t\t<Select.Content\n\t\t\t\t__className__=\"SelectContent\"\n\t\t\t\tposition=\"popper\"\n\t\t\t\tsideOffset={5}\n\t\t\t>\n\t\t\t\t…\n\t\t\t</Select.Content>\n\t\t</Select.Portal>\n\t</Select.Root>\n);\n```\n\nLANGUAGE: css\nCODE:\n```\n.SelectContent {\n\twidth: var(__--radix-select-trigger-width__);\n\tmax-height: var(__--radix-select-content-available-height__);\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Em Component in Text - JSX\nDESCRIPTION: This snippet shows how to use the Em component to emphasize specific text within a larger text block. It demonstrates a simple use case, providing visibility to the Em component's integration within a Text block.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/em.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n\"<Text>\\n\\tWe <Em>had</Em> to do something about it.\\n</Text>\"\n```\n\n----------------------------------------\n\nTITLE: Popover with Content, Trigger, and CSS\nDESCRIPTION: This JSX snippet shows the basic structure of a Popover component with `Popover.Root`, `Popover.Trigger`, `Popover.Portal`, and `Popover.Content`. It also links to a CSS file for styling, demonstrating how to integrate the Popover component into a React application.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/popover.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n\"// index.jsx\nimport { Popover } from \\\"radix-ui\\\";\nimport \\\"./styles.css\\\";\n\nexport default () => (\n\t<Popover.Root>\n\t\t<Popover.Trigger>…</Popover.Trigger>\n\t\t<Popover.Portal>\n\t\t\t<Popover.Content __className__=\\\"PopoverContent\\\">…</Popover.Content>\n\t\t</Popover.Portal>\n\t</Popover.Root>\n);\"\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Component Structure\nDESCRIPTION: Shows the basic anatomy of the Slider component, importing and assembling all required parts including Root, Track, Range, and Thumb.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/slider.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Slider } from \"radix-ui\";\n\nexport default () => (\n\t<Slider.Root>\n\t\t<Slider.Track>\n\t\t\t<Slider.Range />\n\t\t</Slider.Track>\n\t\t<Slider.Thumb />\n\t</Slider.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Inset Content Popover with Radix UI in JSX\nDESCRIPTION: This example shows how to create a Popover in Radix UI that incorporates inset alignment using JSX. It features an image and text aligned using a Grid layout, allowing for responsive design within the Popover.Content. The Radix UI framework's Inset component is used for precise positioning, and the snippet depends on Radix UI primitives to function properly.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/popover.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Popover.Root>\n\t<Popover.Trigger>\n\t\t<Button variant=\"soft\">\n\t\t\t<Share2Icon width=\"16\" height=\"16\" />\n\t\t\tShare image\n\t\t</Button>\n\t</Popover.Trigger>\n\t<Popover.Content width=\"360px\">\n\t\t<Grid columns=\"130px 1fr\">\n\t\t\t<Inset side=\"left\" pr=\"current\">\n\t\t\t\t<img\n\t\t\t\t\tsrc=\"https://images.unsplash.com/photo-1618005182384-a83a8bd57fbe?&auto=format&fit=crop&w=400&q=80\"\n\t\t\t\t\tstyle={{ objectFit: \"cover\", width: \"100%\", height: \"100%\" }}\n\t\t\t\t/>\n\t\t\t</Inset>\n\n\t\t\t<div>\n\t\t\t\t<Heading size=\"2\" mb=\"1\">\n\t\t\t\t\tShare this image\n\t\t\t\t</Heading>\n\t\t\t\t<Text as=\"p\" size=\"2\" mb=\"4\" color=\"gray\">\n\t\t\t\t\tMinimalistic 3D rendering wallpaper.\n\t\t\t\t</Text>\n\n\t\t\t\t<Flex direction=\"column\" align=\"stretch\">\n\t\t\t\t\t<Popover.Close>\n\t\t\t\t\t\t<Button size=\"1\" variant=\"soft\">\n\t\t\t\t\t\t\t<Link1Icon width=\"16\" height=\"16\" />\n\t\t\t\t\t\t\tCopy link\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Popover.Close>\n\t\t\t\t</Flex>\n\t\t\t</div>\n\t\t</Grid>\n\t</Popover.Content>\n</Popover.Root>\n```\n\n----------------------------------------\n\nTITLE: Initializing Checkbox Group Component - React\nDESCRIPTION: This snippet initializes a Checkbox Group component with a default value and defines several Checkbox items within it. Each item is associated with a value representing its identification. It allows for multiple selections.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox-group.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CheckboxGroup.Root defaultValue={[\"1\"]} name=\"example\">\n\t<CheckboxGroup.Item value=\"1\">Fun</CheckboxGroup.Item>\n\t<CheckboxGroup.Item value=\"2\">Serious</CheckboxGroup.Item>\n\t<CheckboxGroup.Item value=\"3\">Smart</CheckboxGroup.Item>\n</CheckboxGroup.Root>\n```\n\n----------------------------------------\n\nTITLE: Constraining Menubar Content Size (CSS)\nDESCRIPTION: This CSS snippet demonstrates how to use Radix UI's custom properties to constrain the width and height of the Menubar content. It uses '--radix-menubar-trigger-width' and '--radix-menubar-content-available-height' to match the content size to the trigger and viewport.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/menubar.mdx#2025-04-21_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.MenubarContent {\n\twidth: var(__--radix-menubar-trigger-width__);\n\tmax-height: var(__--radix-menubar-content-available-height__);\n}\n```\n\n----------------------------------------\n\nTITLE: Toolbar Component Anatomy\nDESCRIPTION: This code snippet demonstrates the basic anatomy of a Radix UI Toolbar component in React. It shows how to import the Toolbar components and create a simple toolbar with a button, separator, link, and toggle group.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toolbar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toolbar } from \"radix-ui\";\n\nexport default () => (\n\t<Toolbar.Root>\n\t\t<Toolbar.Button />\n\t\t<Toolbar.Separator />\n\t\t<Toolbar.Link />\n\t\t<Toolbar.ToggleGroup>\n\t\t\t<Toolbar.ToggleItem />\n\t\t</Toolbar.ToggleGroup>\n\t</Toolbar.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dialog with Asynchronous Form Submission\nDESCRIPTION: Example showing how to use controlled props to programmatically close a Dialog component after an asynchronous operation (like a form submission) has completed.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dialog.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { Dialog } from \"radix-ui\";\n\nconst wait = () => new Promise((resolve) => setTimeout(resolve, 1000));\n\nexport default () => {\n\tconst [open, setOpen] = React.useState(false);\n\n\treturn (\n\t\t<Dialog.Root __open__={open} __onOpenChange__={setOpen}>\n\t\t\t<Dialog.Trigger>Open</Dialog.Trigger>\n\t\t\t<Dialog.Portal>\n\t\t\t\t<Dialog.Overlay />\n\t\t\t\t<Dialog.Content>\n\t\t\t\t\t<form\n\t\t\t\t\t\tonSubmit={(event) => {\n\t\t\t\t\t\t\twait().then(() => setOpen(false));\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{/** some inputs */}\n\t\t\t\t\t\t<button type=\"submit\">Submit</button>\n\t\t\t\t\t</form>\n\t\t\t\t</Dialog.Content>\n\t\t\t</Dialog.Portal>\n\t\t</Dialog.Root>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Origin-Aware Tooltip Animations\nDESCRIPTION: Utilizes Radix UI's transform-origin CSS variable to create dynamic, origin-aware scale animations for tooltips\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/tooltip.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { Tooltip } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<Tooltip.Root>\n\t\t<Tooltip.Trigger>…</Tooltip.Trigger>\n\t\t<Tooltip.Content __className__=\"TooltipContent\">…</Tooltip.Content>\n\t</Tooltip.Root>\n);\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.TooltipContent {\n\ttransform-origin: var(--radix-tooltip-content-transform-origin);\n\tanimation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: scale(0);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: scale(1);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Abstracted Toast Component in React\nDESCRIPTION: This snippet demonstrates how to use the custom Toast component created by abstracting the primitive parts from Radix UI.  It shows a basic usage of the component with a title, content, and children for an action.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toast.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toast } from \"./your-toast\";\n\nexport default () => (\n\t<Toast title=\"Upgrade available\" content=\"We've just released Radix 3.0!\">\n\t\t<button onClick={handleUpgrade}>Upgrade</button>\n\t</Toast>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Origin-aware Animations for DropdownMenu\nDESCRIPTION: Shows how to use the --radix-dropdown-menu-content-transform-origin CSS custom property to create animations that respect the computed origin of the dropdown content based on positioning attributes.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dropdown-menu.mdx#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { DropdownMenu } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<DropdownMenu.Root>\n\t\t<DropdownMenu.Trigger>…</DropdownMenu.Trigger>\n\t\t<DropdownMenu.Portal>\n\t\t\t<DropdownMenu.Content __className__=\"DropdownMenuContent\">\n\t\t\t\t…\n\t\t\t</DropdownMenu.Content>\n\t\t</DropdownMenu.Portal>\n\t</DropdownMenu.Root>\n);\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.DropdownMenuContent {\n\ttransform-origin: var(__--radix-dropdown-menu-content-transform-origin__);\n\tanimation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: scale(0);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: scale(1);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Message in Form\nDESCRIPTION: Demonstrates how to provide a custom validation message for a specific validation condition.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/form.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Form.Message match=\"valueMissing\">__Please provide a name__</Form.Message>\n```\n\n----------------------------------------\n\nTITLE: Customizing Dropdown Menu Style with Variant Prop\nDESCRIPTION: This snippet illustrates how to use the `variant` prop to change the visual style of the dropdown menu and its items. It provides examples of a solid and soft variant applied to the trigger button and the content.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/dropdown-menu.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"3\" align=\"center\">\n\t<DropdownMenu.Root>\n\t\t<DropdownMenu.Trigger>\n\t\t\t<Button variant=\"solid\">\n\t\t\t\tOptions\n\t\t\t\t<DropdownMenu.TriggerIcon />\n\t\t\t</Button>\n\t\t</DropdownMenu.Trigger>\n\t\t<DropdownMenu.Content variant=\"solid\">\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ E\">Edit</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ D\">Duplicate</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ N\">Archive</DropdownMenu.Item>\n\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ ⌫\" color=\"red\">\n\t\t\t\tDelete\n\t\t\t</DropdownMenu.Item>\n\t\t</DropdownMenu.Content>\n\t</DropdownMenu.Root>\n\n\t<DropdownMenu.Root>\n\t\t<DropdownMenu.Trigger>\n\t\t\t<Button variant=\"soft\">\n\t\t\t\tOptions\n\t\t\t\t<DropdownMenu.TriggerIcon />\n\t\t\t</Button>\n\t\t</DropdownMenu.Trigger>\n\t\t<DropdownMenu.Content variant=\"soft\">\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ E\">Edit</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ D\">Duplicate</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ N\">Archive</DropdownMenu.Item>\n\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ ⌫\" color=\"red\">\n\t\t\t\tDelete\n\t\t\t</DropdownMenu.Item>\n\t\t</DropdownMenu.Content>\n\t</DropdownMenu.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Increasing Color Contrast for Code Snippets in JSX\nDESCRIPTION: This snippet utilizes the 'highContrast' prop to enhance color contrast for the 'Code' component against its background. It provides examples with and without high contrast.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/code.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"3\">\n\t<Flex direction=\"column\" align=\"start\" gap=\"2\">\n\t\t<Code color=\"gray\" variant=\"solid\">\n\t\t\tconsole.log()\n\t\t</Code>\n\t\t<Code color=\"gray\" variant=\"soft\">\n\t\t\tconsole.log()\n\t\t</Code>\n\t\t<Code color=\"gray\" variant=\"outline\">\n\t\t\tconsole.log()\n\t\t</Code>\n\t\t<Code color=\"gray\" variant=\"ghost\">\n\t\t\tconsole.log()\n\t\t</Code>\n\t</Flex>\n\n\t<Flex direction=\"column\" align=\"start\" gap=\"2\">\n\t\t<Code color=\"gray\" variant=\"solid\" highContrast>\n\t\t\tconsole.log()\n\t\t</Code>\n\t\t<Code color=\"gray\" variant=\"soft\" highContrast>\n\t\t\tconsole.log()\n\t\t</Code>\n\t\t<Code color=\"gray\" variant=\"outline\" highContrast>\n\t\t\tconsole.log()\n\t\t</Code>\n\t\t<Code color=\"gray\" variant=\"ghost\" highContrast>\n\t\t\tconsole.log()\n\t\t</Code>\n\t</Flex>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using One-Time Password Field Components in JSX\nDESCRIPTION: This snippet demonstrates how to import and use the One-Time Password Field component from Radix UI. It sets up the main Root component with individual Input components for each character and a HiddenInput to manage the full input value. Dependencies include the radix-ui library. Ensures inputs are rendered for a complete password value representation.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/one-time-password-field.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { unstable_OneTimePasswordField as OneTimePasswordField } from \"radix-ui\";\n\nexport default () => (\n\t<OneTimePasswordField.Root>\n\t\t{/* one Input for each character of the value */}\n\t\t<OneTimePasswordField.Input />\n\t\t{/* single HiddenInput to store the full value */}\n\t\t<OneTimePasswordField.HiddenInput />\n\t</OneTimePasswordField.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Select with Custom Scrollbar in React\nDESCRIPTION: Example showing how to combine Radix UI Select with ScrollArea to create a select dropdown with custom scrollbars instead of using the default ScrollUpButton and ScrollDownButton parts.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/select.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { Select, ScrollArea } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<Select.Root>\n\t\t<Select.Trigger>…</Select.Trigger>\n\t\t<Select.Portal>\n\t\t\t<Select.Content>\n\t\t\t\t<ScrollArea.Root __className__=\"ScrollAreaRoot\" type=\"auto\">\n\t\t\t\t\t<Select.Viewport __asChild__>\n\t\t\t\t\t\t<ScrollArea.Viewport __className__=\"ScrollAreaViewport\">\n\t\t\t\t\t\t\t<StyledItem>…</StyledItem>\n\t\t\t\t\t\t\t<StyledItem>…</StyledItem>\n\t\t\t\t\t\t\t<StyledItem>…</StyledItem>\n\t\t\t\t\t\t</ScrollArea.Viewport>\n\t\t\t\t\t</Select.Viewport>\n\t\t\t\t\t<ScrollArea.Scrollbar\n\t\t\t\t\t\t__className__=\"ScrollAreaScrollbar\"\n\t\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<ScrollArea.Thumb __className__=\"ScrollAreaThumb\" />\n\t\t\t\t\t</ScrollArea.Scrollbar>\n\t\t\t\t</ScrollArea.Root>\n\t\t\t</Select.Content>\n\t\t</Select.Portal>\n\t</Select.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Hotkey for Toast Viewport in React\nDESCRIPTION: This snippet demonstrates how to override the default hotkey for the Toast.Viewport component using the __hotkey__ prop. It specifies a key combination (Alt + T) that will focus the toast viewport.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toast.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Toast.Provider>\n\t{/* ... */}\n\t<Toast.Viewport __hotkey__={[\"altKey\", \"KeyT\"]} />\n</Toast.Provider>\n```\n\n----------------------------------------\n\nTITLE: Enable High Contrast on DataList Labels with Radix UI in JSX\nDESCRIPTION: Shows how to enhance the visibility of labels by using the 'highContrast' prop in Radix UI DataList. This modification improves label visibility against various backgrounds. Perfect for accessibility-minded designs. It uses Radix UI components with the essential highContrast prop.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/data-list.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"9\">\n\t<DataList.Root orientation=\"vertical\">\n\t\t<DataList.Item>\n\t\t\t<DataList.Label color=\"indigo\">Name</DataList.Label>\n\t\t\t<DataList.Value>Indigo</DataList.Value>\n\t\t</DataList.Item>\n\t\t<DataList.Item>\n\t\t\t<DataList.Label color=\"cyan\">Name</DataList.Label>\n\t\t\t<DataList.Value>Cyan</DataList.Value>\n\t\t</DataList.Item>\n\t\t<DataList.Item>\n\t\t\t<DataList.Label color=\"orange\">Name</DataList.Label>\n\t\t\t<DataList.Value>Orange</DataList.Value>\n\t\t</DataList.Item>\n\t\t<DataList.Item>\n\t\t\t<DataList.Label color=\"crimson\">Name</DataList.Label>\n\t\t\t<DataList.Value>Crimson</DataList.Value>\n\t\t</DataList.Item>\n\t</DataList.Root>\n\n\t<DataList.Root orientation=\"vertical\">\n\t\t<DataList.Item>\n\t\t\t<DataList.Label color=\"indigo\" highContrast>\n\t\t\t\tName\n\t\t\t</DataList.Label>\n\t\t\t<DataList.Value>Indigo</DataList.Value>\n\t\t</DataList.Item>\n\t\t<DataList.Item>\n\t\t\t<DataList.Label color=\"cyan\" highContrast>\n\t\t\t\tName\n\t\t\t</DataList.Label>\n\t\t\t<DataList.Value>Cyan</DataList.Value>\n\t\t</DataList.Item>\n\t\t<DataList.Item>\n\t\t\t<DataList.Label color=\"orange\" highContrast>\n\t\t\t\tName\n\t\t\t</DataList.Label>\n\t\t\t<DataList.Value>Orange</DataList.Value>\n\t\t</DataList.Item>\n\t\t<DataList.Item>\n\t\t\t<DataList.Label color=\"crimson\" highContrast>\n\t\t\t\tName\n\t\t\t</DataList.Label>\n\t\t\t<DataList.Value>Crimson</DataList.Value>\n\t\t</DataList.Item>\n\t</DataList.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Basic Avatar Component Structure in React\nDESCRIPTION: Basic structure showing how to import and compose the Avatar component parts together.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/avatar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Avatar } from \"radix-ui\";\n\nexport default () => (\n\t<Avatar.Root>\n\t\t<Avatar.Image />\n\t\t<Avatar.Fallback />\n\t</Avatar.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox Items in ContextMenu with React\nDESCRIPTION: Example demonstrating how to add checkbox items to a ContextMenu with state management for checked status and visual indicators.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { CheckIcon } from \"@radix-ui/react-icons\";\nimport { ContextMenu } from \"radix-ui\";\n\nexport default () => {\n\tconst [checked, setChecked] = React.useState(true);\n\n\treturn (\n\t\t<ContextMenu.Root>\n\t\t\t<ContextMenu.Trigger>…</ContextMenu.Trigger>\n\t\t\t<ContextMenu.Portal>\n\t\t\t\t<ContextMenu.Content>\n\t\t\t\t\t<ContextMenu.Item>…</ContextMenu.Item>\n\t\t\t\t\t<ContextMenu.Item>…</ContextMenu.Item>\n\t\t\t\t\t<ContextMenu.Separator />\n\t\t\t\t\t<ContextMenu.CheckboxItem\n\t\t\t\t\t\tchecked={checked}\n\t\t\t\t\t\tonCheckedChange={setChecked}\n\t\t\t\t\t>\n\t\t\t\t\t\t<ContextMenu.ItemIndicator>\n\t\t\t\t\t\t\t<CheckIcon />\n\t\t\t\t\t\t</ContextMenu.ItemIndicator>\n\t\t\t\t\t\tCheckbox item\n\t\t\t\t\t</ContextMenu.CheckboxItem>\n\t\t\t\t</ContextMenu.Content>\n\t\t\t</ContextMenu.Portal>\n\t\t</ContextMenu.Root>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Checkbox Visual Variants in JSX\nDESCRIPTION: This snippet shows how to use the variant prop to apply different visual styles to Checkbox components. It presents three different styles: surface, classic, and soft, with variations of checked and unchecked states. The Flex component is used to structure these differently styled checkboxes.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"center\" gap=\"4\">\n\t<Flex gap=\"2\">\n\t\t<Checkbox variant=\"surface\" defaultChecked />\n\t\t<Checkbox variant=\"surface\" />\n\t</Flex>\n\n\t<Flex gap=\"2\">\n\t\t<Checkbox variant=\"classic\" defaultChecked />\n\t\t<Checkbox variant=\"classic\" />\n\t</Flex>\n\n\t<Flex gap=\"2\">\n\t\t<Checkbox variant=\"soft\" defaultChecked />\n\t\t<Checkbox variant=\"soft\" />\n\t</Flex>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox Items in DropdownMenu with React\nDESCRIPTION: This snippet demonstrates how to add checkbox items to a DropdownMenu using the CheckboxItem part and managing its state with React hooks.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dropdown-menu.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { CheckIcon } from \"@radix-ui/react-icons\";\nimport { DropdownMenu } from \"radix-ui\";\n\nexport default () => {\n\tconst [checked, setChecked] = React.useState(true);\n\n\treturn (\n\t\t<DropdownMenu.Root>\n\t\t\t<DropdownMenu.Trigger>…</DropdownMenu.Trigger>\n\t\t\t<DropdownMenu.Portal>\n\t\t\t\t<DropdownMenu.Content>\n\t\t\t\t\t<DropdownMenu.Item>…</DropdownMenu.Item>\n\t\t\t\t\t<DropdownMenu.Item>…</DropdownMenu.Item>\n\t\t\t\t\t<DropdownMenu.Separator />\n\t\t\t\t\t<DropdownMenu.CheckboxItem\n\t\t\t\t\t\tchecked={checked}\n\t\t\t\t\t\tonCheckedChange={setChecked}\n\t\t\t\t\t>\n\t\t\t\t\t\t<DropdownMenu.ItemIndicator>\n\t\t\t\t\t\t\t<CheckIcon />\n\t\t\t\t\t\t</DropdownMenu.ItemIndicator>\n\t\t\t\t\t\tCheckbox item\n\t\t\t\t\t</DropdownMenu.CheckboxItem>\n\t\t\t\t</DropdownMenu.Content>\n\t\t\t</DropdownMenu.Portal>\n\t\t</DropdownMenu.Root>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Animation with Radix UI\nDESCRIPTION: This code snippet demonstrates how to implement advanced animations for the Radix UI Navigation Menu content. It uses CSS variables and data attributes to control the animation based on the enter/exit direction, creating smooth overlapping effects. This requires CSS styling to define the animations.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/navigation-menu.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { NavigationMenu } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<NavigationMenu.Root>\n\t\t<NavigationMenu.List>\n\t\t\t<NavigationMenu.Item>\n\t\t\t\t<NavigationMenu.Trigger>Item one</NavigationMenu.Trigger>\n\t\t\t\t<NavigationMenu.Content __className__=\"NavigationMenuContent\">\n\t\t\t\t\tItem one content\n\t\t\t\t</NavigationMenu.Content>\n\t\t\t</NavigationMenu.Item>\n\t\t\t<NavigationMenu.Item>\n\t\t\t\t<NavigationMenu.Trigger>Item two</NavigationMenu.Trigger>\n\t\t\t\t<NavigationMenu.Content __className__=\"NavigationMenuContent\">\n\t\t\t\t\tItem two content\n\t\t\t\t</NavigationMenu.Content>\n\t\t\t</NavigationMenu.Item>\n\t\t</NavigationMenu.List>\n\n\t\t<NavigationMenu.Viewport __className__=\"NavigationMenuViewport\" />\n\t</NavigationMenu.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: HoverCard Component in React JSX\nDESCRIPTION: This JSX snippet presents the Radix UI HoverCard component with a basic structure including a Trigger and Content section. This example sets the stage for later custom animations that change based on where the card appears in relation to the trigger element.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/hover-card.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HoverCard } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<HoverCard.Root>\n\t\t<HoverCard.Trigger>…</HoverCard.Trigger>\n\t\t<HoverCard.Content __className__=\"HoverCardContent\">…</HoverCard.Content>\n\t</HoverCard.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Increasing Contrast with High-contrast Prop - React\nDESCRIPTION: This snippet shows how to apply the `highContrast` prop to various Checkbox Groups to enhance visibility against the background, using the same base color. It encourages the use of high contrast for better accessibility.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox-group.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid rows=\"2\" gap=\"2\" display=\"inline-grid\" flow=\"column\">\n\t<CheckboxGroup.Root color=\"indigo\" defaultValue=\"1\">\n\t\t<CheckboxGroup.Item value=\"1\" />\n\t</CheckboxGroup.Root>\n\n\t<CheckboxGroup.Root color=\"indigo\" defaultValue=\"1\" highContrast>\n\t\t<CheckboxGroup.Item value=\"1\" />\n\t</CheckboxGroup.Root>\n\n\t<CheckboxGroup.Root color=\"cyan\" defaultValue=\"1\">\n\t\t<CheckboxGroup.Item value=\"1\" />\n\t</CheckboxGroup.Root>\n\n\t<CheckboxGroup.Root color=\"cyan\" defaultValue=\"1\" highContrast>\n\t\t<CheckboxGroup.Item value=\"1\" />\n\t</CheckboxGroup.Root>\n\n\t<CheckboxGroup.Root color=\"orange\" defaultValue=\"1\">\n\t\t<CheckboxGroup.Item value=\"1\" />\n\t</CheckboxGroup.Root>\n\n\t<CheckboxGroup.Root color=\"orange\" defaultValue=\"1\" highContrast>\n\t\t<CheckboxGroup.Item value=\"1\" />\n\t</CheckboxGroup.Root>\n\n\t<CheckboxGroup.Root color=\"crimson\" defaultValue=\"1\">\n\t\t<CheckboxGroup.Item value=\"1\" />\n\t</CheckboxGroup.Root>\n\n\t<CheckboxGroup.Root color=\"crimson\" defaultValue=\"1\" highContrast>\n\t\t<CheckboxGroup.Item value=\"1\" />\n\t</CheckboxGroup.Root>\n\n\t<CheckboxGroup.Root color=\"gray\" defaultValue=\"1\">\n\t\t<CheckboxGroup.Item value=\"1\" />\n\t</CheckboxGroup.Root>\n\n\t<CheckboxGroup.Root color=\"gray\" defaultValue=\"1\" highContrast>\n\t\t<CheckboxGroup.Item value=\"1\" />\n\t</CheckboxGroup.Root>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Custom Toast Duration in React\nDESCRIPTION: This snippet shows how to customize the duration of a toast using the __duration__ prop on the Toast.Root component. The specified duration (3000ms) overrides the default duration set by the Toast.Provider.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toast.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Toast.Root __duration__={3000}>\n\t<Toast.Description>Saved!</Toast.Description>\n</Toast.Root>\n```\n\n----------------------------------------\n\nTITLE: Sizing Icon Button in JSX\nDESCRIPTION: This snippet demonstrates the usage of the `size` prop to control the dimensions of the `IconButton`. The sizes 1, 2, and 3 are used to create buttons of different sizes. The `variant` prop is also used, set to \"soft\" in this example.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/icon-button.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n\"<Flex align=\\\"center\\\" gap=\\\"3\\\">\\n\\t<IconButton size=\\\"1\\\" variant=\\\"soft\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"15\\\" height=\\\"15\\\" />\\n\\t</IconButton>\\n\\n\\t<IconButton size=\\\"2\\\" variant=\\\"soft\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t</IconButton>\\n\\n\\t<IconButton size=\\\"3\\\" variant=\\\"soft\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"22\\\" height=\\\"22\\\" />\\n\\t</IconButton>\\n</Flex>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Expanded Item in Accordion\nDESCRIPTION: Example of using the defaultValue prop to set an item expanded by default.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/accordion.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion.Root type=\"single\" __defaultValue__=\"item-2\">\n\t<Accordion.Item value=\"item-1\">…</Accordion.Item>\n\t<Accordion.Item value=\"item-2\">…</Accordion.Item>\n</Accordion.Root>\n```\n\n----------------------------------------\n\nTITLE: Card with Inset Content - JSX\nDESCRIPTION: This snippet showcases the integration of the Radix UI Card component with the Inset component to create visually appealing layouts. The Inset component is used to align an image flush with the top edge of the card, creating a seamless visual effect. The example also demonstrates how to apply custom styles to the image within the Inset component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/card.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n\"<Box maxWidth=\\\"240px\\\">\\n\\t<Card size=\\\"2\\\">\\n\\t\t<Inset clip=\\\"padding-box\\\" side=\\\"top\\\" pb=\\\"current\\\">\\n\\t\t\t<img\\n\\t\t\t\tsrc=\\\"https://images.unsplash.com/photo-1617050318658-a9a3175e34cb?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80\\\"\\n\\t\t\t\talt=\\\"Bold typography\\\"\\n\\t\t\t\tstyle={{\\n\\t\t\t\t\tdisplay: \\\"block\\\",\\n\\t\t\t\t\tobjectFit: \\\"cover\\\",\\n\\t\t\t\t\twidth: \\\"100%\\\",\\n\\t\t\t\t\theight: 140,\\n\\t\t\t\t\tbackgroundColor: \\\"var(--gray-5)\\\",\\n\\t\t\t\t}}\\n\\t\t\t/>\\n\\t\t</Inset>\\n\\t\t<Text as=\\\"p\\\" size=\\\"3\\\">\\n\\t\t\t<Strong>Typography</Strong> is the art and technique of arranging type to\\n\\t\t\tmake written language legible, readable and appealing when displayed.\\n\\t\t</Text>\\n\\t</Card>\\n</Box>\"\n```\n\n----------------------------------------\n\nTITLE: TextArea Resize Controls\nDESCRIPTION: Shows different resize options for the TextArea using the resize prop to control resizing behavior.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text-area.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\" maxWidth=\"250px\">\n\t<TextArea resize=\"none\" placeholder=\"Search the docs…\" />\n\t<TextArea resize=\"vertical\" placeholder=\"Search the docs…\" />\n\t<TextArea resize=\"horizontal\" placeholder=\"Search the docs…\" />\n\t<TextArea resize=\"both\" placeholder=\"Search the docs…\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Using Labels with Radix UI Select Component\nDESCRIPTION: Example showing two approaches for properly labeling a Select component for accessibility: wrapping the Select in a Label component or using htmlFor to associate a Label with the Select's Trigger.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/select.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Select, Label } from \"radix-ui\";\n\nexport default () => (\n\t<>\n\t\t<Label>\n\t\t\tCountry\n\t\t\t<Select.Root>…</Select.Root>\n\t\t</Label>\n\n\t\t{/* or */}\n\n\t\t<Label htmlFor=\"country\">Country</Label>\n\t\t<Select.Root>\n\t\t\t<Select.Trigger __id__=\"country\">…</Select.Trigger>\n\t\t\t<Select.Portal>\n\t\t\t\t<Select.Content>…</Select.Content>\n\t\t\t</Select.Portal>\n\t\t</Select.Root>\n\t</>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal Accordion with React\nDESCRIPTION: This snippet illustrates how to create a horizontal accordion using Radix UI with the 'orientation' prop set to 'horizontal'. It is designed for creating multiple accordion items displaying horizontally. The expected outcome is a horizontal layout of accordion items.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/accordion.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion.Root __orientation__=\"horizontal\">\n\t<Accordion.Item value=\"item-1\">…</Accordion.Item>\n\t<Accordion.Item value=\"item-2\">…</Accordion.Item>\n</Accordion.Root>\n```\n\n----------------------------------------\n\nTITLE: Nested Theme Configuration in React\nDESCRIPTION: This example shows how to nest Theme components to modify configuration for specific subtrees. It demonstrates inheritance of configuration from parent themes and overriding for child and grandchild components.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/theme.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Card size=\"2\">\n\t<Flex gap=\"6\">\n\t\t<Flex direction=\"column\" gap=\"3\">\n\t\t\t<Heading as=\"h5\" size=\"2\">\n\t\t\t\tGlobal\n\t\t\t</Heading>\n\t\t\t<Grid gap=\"1\">\n\t\t\t\t<Text as=\"div\" weight=\"bold\" size=\"2\" mb=\"1\">\n\t\t\t\t\tFeedback\n\t\t\t\t</Text>\n\t\t\t\t<TextArea placeholder=\"Write your feedback…\" />\n\t\t\t</Grid>\n\t\t\t<Button>Send</Button>\n\t\t</Flex>\n\n\t\t<Theme __accentColor__=\"cyan\" __radius__=\"full\">\n\t\t\t<Card size=\"2\">\n\t\t\t\t<Flex gap=\"6\">\n\t\t\t\t\t<Flex direction=\"column\" gap=\"3\">\n\t\t\t\t\t\t<Heading as=\"h5\" size=\"2\">\n\t\t\t\t\t\t\tChild\n\t\t\t\t\t\t</Heading>\n\t\t\t\t\t\t<Grid gap=\"1\">\n\t\t\t\t\t\t\t<Text as=\"div\" weight=\"bold\" size=\"2\" mb=\"1\">\n\t\t\t\t\t\t\t\tFeedback\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t<TextArea placeholder=\"Write your feedback…\" />\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Button>Send</Button>\n\t\t\t\t\t</Flex>\n\n\t\t\t\t\t<Theme __accentColor__=\"orange\">\n\t\t\t\t\t\t<Card size=\"2\">\n\t\t\t\t\t\t\t<Flex direction=\"column\" gap=\"3\">\n\t\t\t\t\t\t\t\t<Heading as=\"h5\" size=\"2\">\n\t\t\t\t\t\t\t\t\tGrandchild\n\t\t\t\t\t\t\t\t</Heading>\n\t\t\t\t\t\t\t\t<Grid gap=\"1\">\n\t\t\t\t\t\t\t\t\t<Text as=\"div\" weight=\"bold\" size=\"2\" mb=\"1\">\n\t\t\t\t\t\t\t\t\t\tFeedback\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t<TextArea placeholder=\"Write your feedback…\" />\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Button>Send</Button>\n\t\t\t\t\t\t\t</Flex>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Theme>\n\t\t\t\t</Flex>\n\t\t\t</Card>\n\t\t</Theme>\n\t</Flex>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Menu with Radio Items in React using Radix UI\nDESCRIPTION: Example of using RadioGroup and RadioItem parts in a Context Menu to create selectable radio options. Uses React state to track the selected value and updates it through the onValueChange handler.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { CheckIcon } from \"@radix-ui/react-icons\";\nimport { ContextMenu } from \"radix-ui\";\n\nexport default () => {\n\tconst [color, setColor] = React.useState(\"blue\");\n\n\treturn (\n\t\t<ContextMenu.Root>\n\t\t\t<ContextMenu.Trigger>…</ContextMenu.Trigger>\n\t\t\t<ContextMenu.Portal>\n\t\t\t\t<ContextMenu.Content>\n\t\t\t\t\t<ContextMenu.RadioGroup value={color} onValueChange={setColor}>\n\t\t\t\t\t\t<ContextMenu.RadioItem value=\"red\">\n\t\t\t\t\t\t\t<ContextMenu.ItemIndicator>\n\t\t\t\t\t\t\t\t<CheckIcon />\n\t\t\t\t\t\t\t</ContextMenu.ItemIndicator>\n\t\t\t\t\t\t\tRed\n\t\t\t\t\t\t</ContextMenu.RadioItem>\n\t\t\t\t\t\t<ContextMenu.RadioItem value=\"blue\">\n\t\t\t\t\t\t\t<ContextMenu.ItemIndicator>\n\t\t\t\t\t\t\t\t<CheckIcon />\n\t\t\t\t\t\t\t</ContextMenu.ItemIndicator>\n\t\t\t\t\t\t\tBlue\n\t\t\t\t\t\t</ContextMenu.RadioItem>\n\t\t\t\t\t\t<ContextMenu.RadioItem value=\"green\">\n\t\t\t\t\t\t\t<ContextMenu.ItemIndicator>\n\t\t\t\t\t\t\t\t<CheckIcon />\n\t\t\t\t\t\t\t</ContextMenu.ItemIndicator>\n\t\t\t\t\t\t\tGreen\n\t\t\t\t\t\t</ContextMenu.RadioItem>\n\t\t\t\t\t</ContextMenu.RadioGroup>\n\t\t\t\t</ContextMenu.Content>\n\t\t\t</ContextMenu.Portal>\n\t\t</ContextMenu.Root>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Close AlertDialog After Async Operation in React\nDESCRIPTION: This example shows how to close an AlertDialog programmatically after completing an asynchronous operation like a form submission. It uses React state management to control the dialog's open state. Dependencies: Radix UI, React.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/alert-dialog.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { AlertDialog } from \"radix-ui\";\n\nconst wait = () => new Promise((resolve) => setTimeout(resolve, 1000));\n\nexport default () => {\n\tconst [open, setOpen] = React.useState(false);\n\n\treturn (\n\t\t<AlertDialog.Root __open__={open} __onOpenChange__={setOpen}>\n\t\t\t<AlertDialog.Trigger>Open</AlertDialog.Trigger>\n\t\t\t<AlertDialog.Portal>\n\t\t\t\t<AlertDialog.Overlay />\n\t\t\t\t<AlertDialog.Content>\n\t\t\t\t\t<form\n\t\t\t\t\t\tonSubmit={(event) => {\n\t\t\t\t\t\t\twait().then(() => setOpen(false));\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{/** some inputs */}\n\t\t\t\t\t\t<button type=\"submit\">Submit</button>\n\t\t\t\t\t</form>\n\t\t\t\t</AlertDialog.Content>\n\t\t\t</AlertDialog.Portal>\n\t\t</AlertDialog.Root>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an Inset Layout with Image and Text\nDESCRIPTION: Demonstrates the Inset component usage with a Card, image, and text content. Shows how to apply clipping, positioning, and responsive image styling.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/inset.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box maxWidth=\"240px\">\n\t<Card size=\"2\">\n\t\t<Inset clip=\"padding-box\" side=\"top\" pb=\"current\">\n\t\t\t<img\n\t\t\t\tsrc=\"https://images.unsplash.com/photo-1617050318658-a9a3175e34cb?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80\"\n\t\t\t\talt=\"Bold typography\"\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: \"block\",\n\t\t\t\t\tobjectFit: \"cover\",\n\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\theight: 140,\n\t\t\t\t\tbackgroundColor: \"var(--gray-5)\",\n\t\t\t\t}}\n\t\t\t/>\n\t\t</Inset>\n\t\t<Text as=\"p\" size=\"3\">\n\t\t\t<Strong>Typography</Strong> is the art and technique of arranging type to\n\t\t\tmake written language legible, readable and appealing when displayed.\n\t\t</Text>\n\t</Card>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Color Variant Tab Navigation Implementation\nDESCRIPTION: Example demonstrating different color variants (indigo, cyan, orange, crimson) of the tab navigation component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/tab-nav.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"4\" pb=\"2\">\n\t<TabNav.Root color=\"indigo\">\n\t\t<TabNav.Link href=\"#\" active>\n\t\t\tAccount\n\t\t</TabNav.Link>\n\t\t<TabNav.Link href=\"#\">Documents</TabNav.Link>\n\t\t<TabNav.Link href=\"#\">Settings</TabNav.Link>\n\t</TabNav.Root>\n\n\t<TabNav.Root color=\"cyan\">\n\t\t<TabNav.Link href=\"#\" active>\n\t\t\tAccount\n\t\t</TabNav.Link>\n\t\t<TabNav.Link href=\"#\">Documents</TabNav.Link>\n\t\t<TabNav.Link href=\"#\">Settings</TabNav.Link>\n\t</TabNav.Root>\n\n\t<TabNav.Root color=\"orange\">\n\t\t<TabNav.Link href=\"#\" active>\n\t\t\tAccount\n\t\t</TabNav.Link>\n\t\t<TabNav.Link href=\"#\">Documents</TabNav.Link>\n\t\t<TabNav.Link href=\"#\">Settings</TabNav.Link>\n\t</TabNav.Root>\n\n\t<TabNav.Root color=\"crimson\">\n\t\t<TabNav.Link href=\"#\" active>\n\t\t\tAccount\n\t\t</TabNav.Link>\n\t\t<TabNav.Link href=\"#\">Documents</TabNav.Link>\n\t\t<TabNav.Link href=\"#\">Settings</TabNav.Link>\n\t</TabNav.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Composing Form with Custom Components\nDESCRIPTION: Demonstrates how to use the asChild prop to compose Form parts with custom components.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/form.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Form.Field name=\"name\">\n\t<Form.Label>Full name</Form.Label>\n\t<Form.Control __asChild__>\n\t\t<TextField.Input variant=\"primary\" />\n\t</Form.Control>\n</Form.Field>\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Size in Radix UI\nDESCRIPTION: Example demonstrating the use of the size prop to control text size and cell padding in Radix UI tables. Three different size variations (1, 2, and 3) are shown for comparison.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/table.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"5\" maxWidth=\"350px\">\n\t<Table.Root __size__=\"1\">\n\t\t<Table.Header>\n\t\t\t<Table.Row>\n\t\t\t\t<Table.ColumnHeaderCell>Full name</Table.ColumnHeaderCell>\n\t\t\t\t<Table.ColumnHeaderCell>Email</Table.ColumnHeaderCell>\n\t\t\t</Table.Row>\n\t\t</Table.Header>\n\n\t\t<Table.Body>\n\t\t\t<Table.Row>\n\t\t\t\t<Table.RowHeaderCell>Danilo Sousa</Table.RowHeaderCell>\n\t\t\t\t<Table.Cell>danilo@example.com</Table.Cell>\n\t\t\t</Table.Row>\n\t\t\t<Table.Row>\n\t\t\t\t<Table.RowHeaderCell>Zahra Ambessa</Table.RowHeaderCell>\n\t\t\t\t<Table.Cell>zahra@example.com</Table.Cell>\n\t\t\t</Table.Row>\n\t\t</Table.Body>\n\t</Table.Root>\n\n\t<Table.Root __size__=\"2\">\n\t\t<Table.Header>\n\t\t\t<Table.Row>\n\t\t\t\t<Table.ColumnHeaderCell>Full name</Table.ColumnHeaderCell>\n\t\t\t\t<Table.ColumnHeaderCell>Email</Table.ColumnHeaderCell>\n\t\t\t</Table.Row>\n\t\t</Table.Header>\n\n\t\t<Table.Body>\n\t\t\t<Table.Row>\n\t\t\t\t<Table.RowHeaderCell>Danilo Sousa</Table.RowHeaderCell>\n\t\t\t\t<Table.Cell>danilo@example.com</Table.Cell>\n\t\t\t</Table.Row>\n\t\t\t<Table.Row>\n\t\t\t\t<Table.RowHeaderCell>Zahra Ambessa</Table.RowHeaderCell>\n\t\t\t\t<Table.Cell>zahra@example.com</Table.Cell>\n\t\t\t</Table.Row>\n\t\t</Table.Body>\n\t</Table.Root>\n\n\t<Table.Root __size__=\"3\">\n\t\t<Table.Header>\n\t\t\t<Table.Row>\n\t\t\t\t<Table.ColumnHeaderCell>Full name</Table.ColumnHeaderCell>\n\t\t\t\t<Table.ColumnHeaderCell>Email</Table.ColumnHeaderCell>\n\t\t\t</Table.Row>\n\t\t</Table.Header>\n\n\t\t<Table.Body>\n\t\t\t<Table.Row>\n\t\t\t\t<Table.RowHeaderCell>Danilo Sousa</Table.RowHeaderCell>\n\t\t\t\t<Table.Cell>danilo@example.com</Table.Cell>\n\t\t\t</Table.Row>\n\t\t\t<Table.Row>\n\t\t\t\t<Table.RowHeaderCell>Zahra Ambessa</Table.RowHeaderCell>\n\t\t\t\t<Table.Cell>zahra@example.com</Table.Cell>\n\t\t\t</Table.Row>\n\t\t</Table.Body>\n\t</Table.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Text Field Size Variants\nDESCRIPTION: Examples of text fields with different size properties showing responsive scaling\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text-field.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\">\n\t<Box maxWidth=\"200px\">\n\t\t<TextField.Root size=\"1\" placeholder=\"Search the docs…\" />\n\t</Box>\n\t<Box maxWidth=\"250px\">\n\t\t<TextField.Root size=\"2\" placeholder=\"Search the docs…\" />\n\t</Box>\n\t<Box maxWidth=\"300px\">\n\t\t<TextField.Root size=\"3\" placeholder=\"Search the docs…\" />\n\t</Box>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Sizes in JSX\nDESCRIPTION: This code snippet illustrates how to use the 'size' prop to control the button's size in JSX. The Button component varies in size from '1' to '3'. The snippet requires no additional dependencies and outputs Button elements in different sizes based on the provided prop.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/button.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"3\" align=\"center\">\n\t<Button size=\"1\" variant=\"soft\">\n\t\tEdit profile\n\t</Button>\n\t<Button size=\"2\" variant=\"soft\">\n\t\tEdit profile\n\t</Button>\n\t<Button size=\"3\" variant=\"soft\">\n\t\tEdit profile\n\t</Button>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Button with Custom Spinner Icon\nDESCRIPTION: Advanced implementation showing how to combine a disabled button state with a custom spinner wrapped around an icon.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/spinner.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Button disabled>\n\t<Spinner loading>\n\t\t<BookmarkIcon />\n\t</Spinner>\n\tBookmark\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Scroll Area Size in JSX\nDESCRIPTION: This example shows how to use the 'size' prop to control the size of the scrollbar handles. It demonstrates three different sizes for horizontal scrollbars.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/scroll-area.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"2\">\n\t<ScrollArea\n\t\tsize=\"1\"\n\t\ttype=\"always\"\n\t\tscrollbars=\"horizontal\"\n\t\tstyle={{ width: 300, height: 12 }}\n\t>\n\t\t<Box width=\"800px\" height=\"1px\" />\n\t</ScrollArea>\n\n\t<ScrollArea\n\t\tsize=\"2\"\n\t\ttype=\"always\"\n\t\tscrollbars=\"horizontal\"\n\t\tstyle={{ width: 350, height: 16 }}\n\t>\n\t\t<Box width=\"900px\" height=\"1px\" />\n\t</ScrollArea>\n\n\t<ScrollArea\n\t\tsize=\"3\"\n\t\ttype=\"always\"\n\t\tscrollbars=\"horizontal\"\n\t\tstyle={{ width: 400, height: 20 }}\n\t>\n\t\t<Box width=\"1000px\" height=\"1px\" />\n\t</ScrollArea>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Defining Menubar RadioItem Props\nDESCRIPTION: Props configuration for a radio-style menu item with unique value, disabled status, and selection event handling\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/menubar.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  asChild?: boolean\n  value: string\n  disabled?: boolean\n  onSelect?: (event: Event) => void\n  textValue?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Flex Layouts with Radix UI - JSX\nDESCRIPTION: This code snippet demonstrates how to create a flex layout using the Flex component in Radix UI. It shows multiple Box components arranged in a flex container with equal spacing between them. The Flex component leverages gap and shared layout properties.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/flex.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\\\"3\\\">\\n\\t<Box width=\\\"64px\\\" height=\\\"64px\\\">\\n\\t\\t<DecorativeBox />\\n\\t</Box>\\n\\t<Box width=\\\"64px\\\" height=\\\"64px\\\">\\n\\t\\t<DecorativeBox />\\n\\t</Box>\\n\\t<Box width=\\\"64px\\\" height=\\\"64px\\\">\\n\\t\\t<DecorativeBox />\\n\\t</Box>\\n\\t<Box width=\\\"64px\\\" height=\\\"64px\\\">\\n\\t\\t<DecorativeBox />\\n\\t</Box>\\n\\t<Box width=\\\"64px\\\" height=\\\"64px\\\">\\n\\t\\t<DecorativeBox />\\n\\t</Box>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Alternative Action for Toasts in React\nDESCRIPTION: This snippet shows how to use the altText prop on the Toast.Action component to provide an alternative way for screen reader users to achieve the action associated with the toast. It also demonstrates setting the type and duration props to improve accessibility and usability.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toast.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Toast.Root type=\"background\">\n\t<Toast.Title>Upgrade Available!</Toast.Title>\n\t<Toast.Description>We've just released Radix 1.0.</Toast.Description>\n\t<Toast.Action altText=\"Goto account settings to upgrade\">\n\t\tUpgrade\n\t</Toast.Action>\n\t<Toast.Close>Dismiss</Toast.Close>\n</Toast.Root>\n\n<Toast.Root __type__=\"foreground\" __duration__={10000}>\n\t<Toast.Description>File removed successfully.</Toast.Description>\n\t<Toast.Action altText=\"Undo (Alt+U)\">\n\t\tUndo <kbd>Alt</kbd>+<kbd>U</kbd>\n\t</Toast.Action>\n\t<Toast.Close>Dismiss</Toast.Close>\n</Toast.Root>\n```\n\n----------------------------------------\n\nTITLE: Popover Custom API Usage (JSX)\nDESCRIPTION: This example demonstrates how to create a custom API for the Popover component by abstracting the primitive parts into a new component. It uses the custom `Popover`, `PopoverTrigger`, and `PopoverContent` components.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/popover.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n\"import { Popover, PopoverTrigger, PopoverContent } from \\\"./your-popover\\\";\n\nexport default () => (\n\t<Popover>\n\t\t<PopoverTrigger>Popover trigger</PopoverTrigger>\n\t\t<PopoverContent>Popover content</PopoverContent>\n\t</Popover>\n);\"\n```\n\n----------------------------------------\n\nTITLE: Creating Scrollable Overlay Dialog with Radix UI - JSX\nDESCRIPTION: This snippet implements a scrollable dialog using the Radix UI Dialog component. It allows overflow content to be displayed inside an overlay. The 'Dialog' component imports from Radix UI and is styled using an external CSS file. The expected input includes components wrapped in the 'Dialog' for rendering, while it outputs a functional dialog component on the screen.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dialog.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { Dialog } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => {\n\treturn (\n\t\t<Dialog.Root>\n\t\t\t<Dialog.Trigger />\n\t\t\t<Dialog.Portal>\n\t\t\t\t<Dialog.Overlay className=\"DialogOverlay\">\n\t\t\t\t\t<Dialog.Content className=\"DialogContent\">...</Dialog.Content>\n\t\t\t\t</Dialog.Overlay>\n\t\t\t</Dialog.Portal>\n\t\t</Dialog.Root>\n\t);\n};\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.DialogOverlay {\n\tbackground: rgba(0 0 0 / 0.5);\n\tposition: fixed;\n\ttop: 0;\n\tleft: 0;\n\tright: 0;\n\tbottom: 0;\n\tdisplay: grid;\n\tplace-items: center;\n\toverflow-y: auto;\n}\n\n.DialogContent {\n\tmin-width: 300px;\n\tbackground: white;\n\tpadding: 30px;\n\tborder-radius: 4px;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Card Implementation with Avatar and Text - JSX\nDESCRIPTION: This snippet demonstrates a basic implementation of the Radix UI Card component, incorporating the Avatar and Text components for displaying user information. The Card is used to group the avatar and text elements, creating a visually cohesive unit. The `maxWidth` prop on the Box limits the card's width.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/card.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n\"<Box maxWidth=\\\"240px\\\">\\n\\t<Card>\\n\\t\t<Flex gap=\\\"3\\\" align=\\\"center\\\">\\n\\t\t\t<Avatar\\n\\t\t\t\tsize=\\\"3\\\"\\n\\t\t\t\tsrc=\\\"https://images.unsplash.com/photo-1607346256330-dee7af15f7c5?&w=64&h=64&dpr=2&q=70&crop=focalpoint&fp-x=0.67&fp-y=0.5&fp-z=1.4&fit=crop\\\"\\n\\t\t\t\tradius=\\\"full\\\"\\n\\t\t\t\tfallback=\\\"T\\\"\\n\\t\t\t/>\\n\\t\t\t<Box>\\n\\t\t\t\t<Text as=\\\"div\\\" size=\\\"2\\\" weight=\\\"bold\\\">\\n\\t\t\t\t\tTeodros Girmay\\n\\t\t\t\t</Text>\\n\\t\t\t\t<Text as=\\\"div\\\" size=\\\"2\\\" color=\\\"gray\\\">\\n\\t\t\t\t\tEngineering\\n\\t\t\t\t</Text>\\n\\t\t\t</Box>\\n\\t\t</Flex>\\n\\t</Card>\\n</Box>\"\n```\n\n----------------------------------------\n\nTITLE: Custom Dialog Implementation with Theme Wrapper\nDESCRIPTION: Example implementation of a custom dialog component using Radix Primitives with proper Theme wrapper for portal content to ensure styles are applied correctly.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/styling.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyCustomDialog() {\n\treturn (\n\t\t<Dialog.Root>\n\t\t\t<Dialog.Trigger>Open</Dialog.Trigger>\n\t\t\t<Dialog.Portal>\n\t\t\t\t<Theme>\n\t\t\t\t\t<Dialog.Overlay />\n\t\t\t\t\t<Dialog.Content>\n\t\t\t\t\t\t<Dialog.Title />\n\t\t\t\t\t\t<Dialog.Description />\n\t\t\t\t\t\t<Dialog.Close />\n\t\t\t\t\t</Dialog.Content>\n\t\t\t\t</Theme>\n\t\t\t</Dialog.Portal>\n\t\t</Dialog.Root>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Switch Component with Different Colors in JSX\nDESCRIPTION: Demonstrates the Switch component with different color values using the color prop, including indigo, cyan, orange, and crimson.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/switch.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"2\">\n\t<Switch color=\"indigo\" defaultChecked />\n\t<Switch color=\"cyan\" defaultChecked />\n\t<Switch color=\"orange\" defaultChecked />\n\t<Switch color=\"crimson\" defaultChecked />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Defining CheckboxItem Properties in React\nDESCRIPTION: This snippet defines properties for the CheckboxItem component that determine its behavior and interaction. It includes properties like 'asChild', 'checked', 'onCheckedChange', and 'disabled', along with their types and descriptions. It is intended for use in a React application, leveraging controlled component patterns.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<PropsTable\n\tdata={[\n\t\t{\n\t\t\tname: \"asChild\",\n\t\t\trequired: false,\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: \"false\",\n\t\t\tdescription: (\n\t\t\t\t<>Change the default rendered element for the one passed as a child,\n\t\t\t\tmerging their props and behavior.<br /><br />Read our <a href=\"../guides/composition\">Composition</a> guide for more details.</>\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\tname: \"checked\",\n\t\t\ttype: `boolean | 'indeterminate'`,\n\t\t\tdescription: (\n\t\t\t\t<span>The controlled checked state of the item. Must be used in conjunction with <Code>onCheckedChange</Code>.</span>\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\tname: \"onCheckedChange\",\n\t\t\ttype: `(checked: boolean) => void`,\n\t\t\ttypeSimple: \"function\",\n\t\t\tdescription: (\n\t\t\t\t<span>Event handler called when the checked state changes.</span>\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\tname: \"disabled\",\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: (\n\t\t\t\t<span>When <Code>true</Code>, prevents the user from interacting with the item.</span>\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\tname: \"onSelect\",\n\t\t\ttype: \"(event: Event) => void\",\n\t\t\ttypeSimple: \"function\",\n\t\t\tdescription: (\n\t\t\t\t<span>Event handler called when the user selects an item (via mouse or keyboard). Calling <Code>event.preventDefault</Code> in this handler will prevent the context menu from closing when selecting that item.</span>\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\tname: \"textValue\",\n\t\t\ttype: \"string\",\n\t\t\tdescription: (\n\t\t\t\t<span>Optional text used for typeahead purposes. By default the typeahead behavior will use the <Code>.textContent</Code> of the item. Use this when the content is complex, or you have non-textual content inside.</span>\n\t\t\t),\n\t\t},\n\t]}/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Radix UI Scroll Area Component in React\nDESCRIPTION: Example of how to import and use the Scroll Area component parts in a React application.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/scroll-area.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ScrollArea } from \"radix-ui\";\n\nexport default () => (\n\t<ScrollArea.Root>\n\t\t<ScrollArea.Viewport />\n\t\t<ScrollArea.Scrollbar orientation=\"horizontal\">\n\t\t\t<ScrollArea.Thumb />\n\t\t</ScrollArea.Scrollbar>\n\t\t<ScrollArea.Scrollbar orientation=\"vertical\">\n\t\t\t<ScrollArea.Thumb />\n\t\t</ScrollArea.Scrollbar>\n\t\t<ScrollArea.Corner />\n\t</ScrollArea.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Positioning Select Menu in React\nDESCRIPTION: This snippet demonstrates how to use the 'position' prop to position the select menu below the trigger using the 'popper' value.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/select.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Select.Root defaultValue=\"apple\">\n\t<Select.Trigger />\n\t<Select.Content position=\"popper\">\n\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t</Select.Content>\n</Select.Root>\n```\n\n----------------------------------------\n\nTITLE: Composing Radio Group Component in React\nDESCRIPTION: Example of how to import and compose the Radio Group component parts in a React application.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/radio-group.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RadioGroup } from \"radix-ui\";\n\nexport default () => (\n\t<RadioGroup.Root>\n\t\t<RadioGroup.Item>\n\t\t\t<RadioGroup.Indicator />\n\t\t</RadioGroup.Item>\n\t</RadioGroup.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating submenus with Menubar.SubContent (Radix UI, React)\nDESCRIPTION: This example demonstrates how to create a submenu using `Menubar.Sub`, `Menubar.SubTrigger`, and `Menubar.SubContent` components. The `Menubar.SubContent` contains menu items and an arrow, forming the submenu's content. It relies on other Menubar components for structure and functionality.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/menubar.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Menubar.Root>\n\t<Menubar.Menu>\n\t\t<Menubar.Trigger>…</Menubar.Trigger>\n\t\t<Menubar.Portal>\n\t\t\t<Menubar.Content>\n\t\t\t\t<Menubar.Item>…</Menubar.Item>\n\t\t\t\t<Menubar.Item>…</Menubar.Item>\n\t\t\t\t<Menubar.Separator />\n\t\t\t\t<Menubar.Sub>\n\t\t\t\t\t<Menubar.SubTrigger>Sub menu →</Menubar.SubTrigger>\n\t\t\t\t\t<Menubar.Portal>\n\t\t\t\t\t\t<Menubar.SubContent>\n\t\t\t\t\t\t\t<Menubar.Item>Sub menu item</Menubar.Item>\n\t\t\t\t\t\t\t<Menubar.Item>Sub menu item</Menubar.Item>\n\t\t\t\t\t\t\t<Menubar.Arrow />\n\t\t\t\t\t\t</Menubar.SubContent>\n\t\t\t\t\t</Menubar.Portal>\n\t\t\t\t</Menubar.Sub>\n\t\t\t\t<Menubar.Separator />\n\t\t\t\t<Menubar.Item>…</Menubar.Item>\n\t\t\t</Menubar.Content>\n\t\t</Menubar.Portal>\n\t</Menubar.Menu>\n</Menubar.Root>\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Validity State Programmatically\nDESCRIPTION: Shows how to access the raw validity state of a form field for custom handling or integration with component libraries\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/form.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Form.Field name=\"name\">\n\t<Form.Label>Full name</Form.Label>\n\t<Form.ValidityState>\n\t\t{(validity) => (\n\t\t\t<Form.Control asChild>\n\t\t\t\t<TextField.Input\n\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\tstate={getTextFieldInputState(__validity__)}\n\t\t\t\t/>\n\t\t\t</Form.Control>\n\t\t)}\n\t</Form.ValidityState>\n</Form.Field>\n```\n\n----------------------------------------\n\nTITLE: Tabs High Contrast Example\nDESCRIPTION: Shows how to implement high contrast tabs using the highContrast prop, comparing regular and high contrast variations with gray color.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/tabs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"4\" pb=\"2\">\n\t<Tabs.Root defaultValue=\"account\">\n\t\t<Tabs.List color=\"gray\">\n\t\t\t<Tabs.Trigger value=\"account\">Account</Tabs.Trigger>\n\t\t\t<Tabs.Trigger value=\"documents\">Documents</Tabs.Trigger>\n\t\t\t<Tabs.Trigger value=\"settings\">Settings</Tabs.Trigger>\n\t\t</Tabs.List>\n\t</Tabs.Root>\n\n\t<Tabs.Root defaultValue=\"account\">\n\t\t<Tabs.List color=\"gray\" highContrast>\n\t\t\t<Tabs.Trigger value=\"account\">Account</Tabs.Trigger>\n\t\t\t<Tabs.Trigger value=\"documents\">Documents</Tabs.Trigger>\n\t\t\t<Tabs.Trigger value=\"settings\">Settings</Tabs.Trigger>\n\t\t</Tabs.List>\n\t</Tabs.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: CSS for Origin-Aware HoverCard Animation\nDESCRIPTION: This CSS snippet applies an origin-aware animation to the 'HoverCardContent' class, using the `--radix-hover-card-content-transform-origin` CSS custom property to dynamically set the transform origin based on the HoverCard's position. It also defines a 'scaleIn' animation that scales the content from 0 to 1, providing a smooth appearance.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/hover-card.mdx#2025-04-21_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.HoverCardContent {\n\ttransform-origin: var(__--radix-hover-card-content-transform-origin__);\n\tanimation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: scale(0);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: scale(1);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: CSS for Constraining HoverCard Content Size\nDESCRIPTION: This CSS snippet defines styles for the 'HoverCardContent' class, constraining its width to the width of the trigger element using the `--radix-hover-card-trigger-width` CSS custom property and setting a maximum height based on the available height with `--radix-hover-card-content-available-height`. This allows the content dimensions to adapt dynamically to the trigger size and available space.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/hover-card.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.HoverCardContent {\n\twidth: var(__--radix-hover-card-trigger-width__);\n\tmax-height: var(__--radix-hover-card-content-available-height__);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading State for Icon Button in JSX\nDESCRIPTION: This snippet demonstrates the use of the `loading` prop on the `IconButton` to display a loading spinner instead of the icon. When `loading` is true, the button is also disabled.  Different variants are used to show the loading state in various button styles.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/icon-button.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n\"<Flex gap=\\\"3\\\">\\n\\t<IconButton loading variant=\\\"classic\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t</IconButton>\\n\\t<IconButton loading variant=\\\"solid\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t</IconButton>\\n\\t<IconButton loading variant=\\\"soft\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t</IconButton>\\n\\t<IconButton loading variant=\\\"surface\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t</IconButton>\\n\\t<IconButton loading variant=\\\"outline\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t</IconButton>\\n</Flex>\"\n```\n\n----------------------------------------\n\nTITLE: Enhancing Callout Contrast in React\nDESCRIPTION: Shows how the `highContrast` prop can be employed to improve the contrast of a callout component. This feature enhances readability against various backgrounds, offering a visually distinct option for users who may need it. Kit requirements involve Radix UI components with contrast-themed styles.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/callout.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\\\"column\\\" gap=\\\"3\\\">\\n\\t<Callout.Root color=\\\"gray\\\" variant=\\\"soft\\\">\\n\\t\\t<Callout.Icon>\\n\\t\\t\\t<InfoCircledIcon />\\n\\t\\t</Callout.Icon>\\n\\t\\t<Callout.Text>\\n\\t\\t\\tAn update to Radix Themes is available. See what’s new in version 3.2.0.\\n\\t\\t</Callout.Text>\\n\\t</Callout.Root>\\n\\n\\t<Callout.Root color=\\\"gray\\\" variant=\\\"soft\\\" highContrast>\\n\\t\\t<Callout.Icon>\\n\\t\\t\\t<InfoCircledIcon />\\n\\t\\t</Callout.Icon>\\n\\t\\t<Callout.Text>\\n\\t\\t\\tAn update to Radix Themes is available. See what’s new in version 3.2.0.\\n\\t\\t</Callout.Text>\\n\\t</Callout.Root>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Card Visual Variants in React\nDESCRIPTION: Demonstrates different visual styles for checkbox cards using the variant prop\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox-cards.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\" maxWidth=\"200px\">\n\t<CheckboxCards.Root defaultValue={[\"1\"]} variant=\"surface\">\n\t\t<CheckboxCards.Item value=\"1\">Agree to Terms</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n\n\t<CheckboxCards.Root defaultValue={[\"1\"]} variant=\"classic\">\n\t\t<CheckboxCards.Item value=\"1\">Agree to Terms</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Defining Popover Size Options in Radix UI with JSX\nDESCRIPTION: This snippet illustrates various implementations of the Popover component, each with different size configurations in Radix UI using JSX. By setting size properties, the Popover.Content adjusts its internal padding and border-radius, demonstrating how to customize size for different use cases. Dependencies include Radix UI components and its style props, ensuring the output popovers match desired dimensions.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/popover.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"4\" align=\"center\">\n\t<Popover.Root>\n\t\t<Popover.Trigger>\n\t\t\t<Button variant=\"soft\">Size 1</Button>\n\t\t</Popover.Trigger>\n\t\t<Popover.Content __size__=\"1\" maxWidth=\"300px\">\n\t\t\t<Text as=\"p\" trim=\"both\" size=\"1\">\n\t\t\t\tThe quick brown fox jumps over the lazy dog.\n\t\t\t</Text>\n\t\t</Popover.Content>\n\t</Popover.Root>\n\n\t<Popover.Root>\n\t\t<Popover.Trigger>\n\t\t\t<Button variant=\"soft\">Size 2</Button>\n\t\t</Popover.Trigger>\n\t\t<Popover.Content __size__=\"2\" maxWidth=\"400px\">\n\t\t\t<Text as=\"p\" trim=\"both\" size=\"2\">\n\t\t\t\tThe quick brown fox jumps over the lazy dog.\n\t\t\t</Text>\n\t\t</Popover.Content>\n\t</Popover.Root>\n\n\t<Popover.Root>\n\t\t<Popover.Trigger>\n\t\t\t<Button variant=\"soft\">Size 3</Button>\n\t\t</Popover.Trigger>\n\t\t<Popover.Content __size__=\"3\" maxWidth=\"500px\">\n\t\t\t<Text as=\"p\" trim=\"both\" size=\"3\">\n\t\t\t\tThe quick brown fox jumps over the lazy dog.\n\t\t\t</Text>\n\t\t</Popover.Content>\n\t</Popover.Root>\n\n\t<Popover.Root>\n\t\t<Popover.Trigger>\n\t\t\t<Button variant=\"soft\">Size 4</Button>\n\t\t</Popover.Trigger>\n\t\t<Popover.Content __size__=\"4\">\n\t\t\t<Text as=\"p\" trim=\"both\" size=\"4\">\n\t\t\t\tThe quick brown fox jumps over the lazy dog.\n\t\t\t</Text>\n\t\t</Popover.Content>\n\t</Popover.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Interactive Elements Default Cursor Demo in JSX\nDESCRIPTION: Demonstrates the default cursor behavior for various interactive elements including buttons, links, checkboxes, and switches in their different states.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/cursors.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"center\" gap=\"4\" wrap=\"wrap\">\n\t<Flex align=\"center\" gap=\"3\" wrap=\"wrap\">\n\t\t<Button>Button</Button>\n\t\t<Button asChild>\n\t\t\t<a href=\"#\">Link</a>\n\t\t</Button>\n\t\t<Button disabled>Disabled</Button>\n\t</Flex>\n\t<Button variant=\"ghost\">Ghost button</Button>\n\t<Link href=\"#\" size=\"2\">\n\t\tLink\n\t</Link>\n\t<Checkbox defaultChecked />\n\t<Switch defaultChecked />\n\t<Switch defaultChecked disabled />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Rendering Progress Component with JSX\nDESCRIPTION: The JSX code snippet demonstrates how to import the Progress component from Radix UI and render it within a React component. It highlights setting up the Progress.Root and Progress.Indicator components to visualize task progress.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/progress.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Progress } from \"radix-ui\";\n\nexport default () => (\n\t<Progress.Root>\n\t\t<Progress.Indicator />\n\t</Progress.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Context Menu Color and High-Contrast Configurations\nDESCRIPTION: Demonstrates color customization and high-contrast mode for context menus, showing different color schemes and the impact of the `highContrast` prop.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/context-menu.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid columns=\"2\" gap=\"3\">\\n\\t<ContextMenu.Root>\\n\\t\\t<ContextMenu.Trigger>\\n\\t\\t\\t<RightClickZone title=\"Standard\" />\\n\\t\\t</ContextMenu.Trigger>\\n\\t\\t<ContextMenu.Content color=\"gray\">\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ E\">Edit</ContextMenu.Item>\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ D\">Duplicate</ContextMenu.Item>\\n\\t\\t\\t<ContextMenu.Separator />\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ N\">Archive</ContextMenu.Item>\\n\\t\\t</ContextMenu.Content>\\n\\t</ContextMenu.Root>\\n\\n\\t<ContextMenu.Root>\\n\\t\\t<ContextMenu.Trigger>\\n\\t\\t\\t<RightClickZone title=\"High-contrast\" />\\n\\t\\t</ContextMenu.Trigger>\\n\\t\\t<ContextMenu.Content color=\"gray\" highContrast>\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ E\">Edit</ContextMenu.Item>\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ D\">Duplicate</ContextMenu.Item>\\n\\t\\t\\t<ContextMenu.Separator />\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ N\">Archive</ContextMenu.Item>\\n\\t\\t</ContextMenu.Content>\\n\\t</ContextMenu.Root>\\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Basic Table Structure in React with Radix UI\nDESCRIPTION: A basic example of a Radix UI Table component showing a structured data table with headers and rows containing user information.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/table.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Table.Root>\n\t<Table.Header>\n\t\t<Table.Row>\n\t\t\t<Table.ColumnHeaderCell>Full name</Table.ColumnHeaderCell>\n\t\t\t<Table.ColumnHeaderCell>Email</Table.ColumnHeaderCell>\n\t\t\t<Table.ColumnHeaderCell>Group</Table.ColumnHeaderCell>\n\t\t</Table.Row>\n\t</Table.Header>\n\n\t<Table.Body>\n\t\t<Table.Row>\n\t\t\t<Table.RowHeaderCell>Danilo Sousa</Table.RowHeaderCell>\n\t\t\t<Table.Cell>danilo@example.com</Table.Cell>\n\t\t\t<Table.Cell>Developer</Table.Cell>\n\t\t</Table.Row>\n\n\t\t<Table.Row>\n\t\t\t<Table.RowHeaderCell>Zahra Ambessa</Table.RowHeaderCell>\n\t\t\t<Table.Cell>zahra@example.com</Table.Cell>\n\t\t\t<Table.Cell>Admin</Table.Cell>\n\t\t</Table.Row>\n\n\t\t<Table.Row>\n\t\t\t<Table.RowHeaderCell>Jasper Eriksson</Table.RowHeaderCell>\n\t\t\t<Table.Cell>jasper@example.com</Table.Cell>\n\t\t\t<Table.Cell>Developer</Table.Cell>\n\t\t</Table.Row>\n\t</Table.Body>\n</Table.Root>\n```\n\n----------------------------------------\n\nTITLE: Customizing Radix Themes with Theme Component\nDESCRIPTION: Example of how to customize the appearance of Radix Themes by passing configuration to the Theme component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/getting-started.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Theme accentColor=\"crimson\" grayColor=\"sand\" radius=\"large\" scaling=\"95%\">\n\t<MyApp />\n</Theme>\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatars in a Flex Container\nDESCRIPTION: This snippet demonstrates how to render Avatar components within a Flex container, displaying both a custom image and a fallback character. It showcases the basic usage of the Avatar component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/avatar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"2\">\n\t<Avatar\n\t\tsrc=\"https://images.unsplash.com/photo-1502823403499-6ccfcf4fb453?&w=256&h=256&q=70&crop=focalpoint&fp-x=0.5&fp-y=0.3&fp-z=1&fit=crop\"\n\t\tfallback=\"A\"\n\t/>\n\t<Avatar fallback=\"A\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Implementing Origin-Aware Animations for Menubar (CSS)\nDESCRIPTION: This CSS snippet demonstrates how to create origin-aware animations for a Radix UI Menubar. It uses the '--radix-menubar-content-transform-origin' custom property to set the transform origin and defines a 'scaleIn' animation for the content.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/menubar.mdx#2025-04-21_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.MenubarContent {\n\ttransform-origin: var(__--radix-menubar-content-transform-origin__);\n\tanimation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: scale(0);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: scale(1);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding labels to Menubar sections (Radix UI, React)\nDESCRIPTION: This example demonstrates the usage of `Menubar.Label` to add labels to sections within a `Menubar.Content` component.  This improves the organization and clarity of the menu.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/menubar.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Menubar.Root>\n\t<Menubar.Menu>\n\t\t<Menubar.Trigger>…</Menubar.Trigger>\n\t\t<Menubar.Portal>\n\t\t\t<Menubar.Content>\n\t\t\t\t<Menubar.Label>Label</Menubar.Label>\n\t\t\t\t<Menubar.Item>…</Menubar.Item>\n\t\t\t\t<Menubar.Item>…</Menubar.Item>\n\t\t\t\t<Menubar.Item>…</Menubar.Item>\n\t\t\t</Menubar.Content>\n\t\t</Menubar.Portal>\n\t</Menubar.Menu>\n</Menubar.Root>\n```\n\n----------------------------------------\n\nTITLE: Button with Loading State\nDESCRIPTION: Example of using the Button component's built-in loading state that automatically includes a spinner.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/spinner.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Button loading>Bookmark</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing High-Contrast Mode for Radio Cards\nDESCRIPTION: Shows how the \"highContrast\" prop can be used to enhance the visual accessibility of Radio Cards by increasing the contrast with the background. This is crucial for improving readability for users with visual impairments or in low-light conditions. It requires React and Radix UI setup.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio-cards.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid columns=\"2\" gap=\"3\" display=\"inline-grid\">\\n\\t<RadioCards.Root defaultValue=\"1\" color=\"indigo\">\\n\\t\\t<RadioCards.Item value=\"1\">8-core CPU</RadioCards.Item>\\n\\t</RadioCards.Root>\\n\\n\\t<RadioCards.Root defaultValue=\"1\" color=\"indigo\" highContrast>\\n\\t\\t<RadioCards.Item value=\"1\">8-core CPU</RadioCards.Item>\\n\\t</RadioCards.Root>\\n\\n\\t<RadioCards.Root defaultValue=\"1\" color=\"cyan\">\\n\\t\\t<RadioCards.Item value=\"1\">8-core CPU</RadioCards.Item>\\n\\t</RadioCards.Root>\\n\\n\\t<RadioCards.Root defaultValue=\"1\" color=\"cyan\" highContrast>\\n\\t\\t<RadioCards.Item value=\"1\">8-core CPU</RadioCards.Item>\\n\\t</RadioCards.Root>\\n\\n\\t<RadioCards.Root defaultValue=\"1\" color=\"orange\">\\n\\t\\t<RadioCards.Item value=\"1\">8-core CPU</RadioCards.Item>\\n\\t</RadioCards.Root>\\n\\n\\t<RadioCards.Root defaultValue=\"1\" color=\"orange\" highContrast>\\n\\t\\t<RadioCards.Item value=\"1\">8-core CPU</RadioCards.Item>\\n\\t</RadioCards.Root>\\n\\n\\t<RadioCards.Root defaultValue=\"1\" color=\"crimson\">\\n\\t\\t<RadioCards.Item value=\"1\">8-core CPU</RadioCards.Item>\\n\\t</RadioCards.Root>\\n\\n\\t<RadioCards.Root defaultValue=\"1\" color=\"crimson\" highContrast>\\n\\t\\t<RadioCards.Item value=\"1\">8-core CPU</RadioCards.Item>\\n\\t</RadioCards.Root>\\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Using Radix UI Container Component\nDESCRIPTION: This code snippet demonstrates the basic usage of the Radix UI Container component to constrain content width. It wraps a DecorativeBox component within a Container with size \"1\", all within a Box for styling. This showcases how to nest components within the Container to manage layout and content presentation.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/container.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box style={{ background: \"var(--gray-a2)\", borderRadius: \"var(--radius-3)\" }}>\n\t<Container size=\"1\">\n\t\t<DecorativeBox>\n\t\t\t<Box py=\"9\" />\n\t\t</DecorativeBox>\n\t</Container>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Using Placeholder in Select Component with React\nDESCRIPTION: This example shows how to use the 'placeholder' prop to create a Select Trigger that doesn't need an initial value. It includes grouped options and a separator.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/select.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Select.Root>\n\t<Select.Trigger placeholder=\"Pick a fruit\" />\n\t<Select.Content>\n\t\t<Select.Group>\n\t\t\t<Select.Label>Fruits</Select.Label>\n\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t<Select.Item value=\"grape\" disabled>\n\t\t\t\tGrape\n\t\t\t</Select.Item>\n\t\t</Select.Group>\n\t\t<Select.Separator />\n\t\t<Select.Group>\n\t\t\t<Select.Label>Vegetables</Select.Label>\n\t\t\t<Select.Item value=\"carrot\">Carrot</Select.Item>\n\t\t\t<Select.Item value=\"potato\">Potato</Select.Item>\n\t\t</Select.Group>\n\t</Select.Content>\n</Select.Root>\n```\n\n----------------------------------------\n\nTITLE: Varying Badge Variants in JSX\nDESCRIPTION: This JSX code illustrates using the 'variant' prop to style Badge elements with different visual appearances, including solid, soft, surface, and outline variants. It helps in quickly changing the UI representation of badges in a Flex component layout.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/badge.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"2\">\\n\t<Badge variant=\"solid\" color=\"indigo\">\\n\t\tNew\\n\t</Badge>\\n\t<Badge variant=\"soft\" color=\"indigo\">\\n\t\tNew\\n\t</Badge>\\n\t<Badge variant=\"surface\" color=\"indigo\">\\n\t\tNew\\n\t</Badge>\\n\t<Badge variant=\"outline\" color=\"indigo\">\\n\t\tNew\\n\t</Badge>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Alignment in Text with Flex in JSX\nDESCRIPTION: Demonstrates how to automatically center a Checkbox component within text using Flex in JSX. Various sizes of Text and Checkbox components are used to illustrate alignment capabilities with multi-line text support as well.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\">\n\t<Text as=\"label\" size=\"2\">\n\t\t<Flex as=\"span\" gap=\"2\">\n\t\t\t<Checkbox size=\"1\" defaultChecked /> Agree to Terms and Conditions\n\t\t</Flex>\n\t</Text>\n\n\t<Text as=\"label\" size=\"3\">\n\t\t<Flex as=\"span\" gap=\"2\">\n\t\t\t<Checkbox size=\"2\" defaultChecked /> Agree to Terms and Conditions\n\t\t</Flex>\n\t</Text>\n\n\t<Text as=\"label\" size=\"4\">\n\t\t<Flex as=\"span\" gap=\"2\">\n\t\t\t<Checkbox size=\"3\" defaultChecked /> Agree to Terms and Conditions\n\t\t</Flex>\n\t</Text>\n</Flex>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Box maxWidth=\"300px\">\n\t<Text as=\"label\" size=\"3\">\n\t\t<Flex as=\"span\" gap=\"2\">\n\t\t\t<Checkbox defaultChecked /> I understand that these documents are\n\t\t\tconfidential and cannot be shared with a third party.\n\t\t</Flex>\n\t</Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: CSS for Collision-Aware HoverCard Animation\nDESCRIPTION: This CSS snippet defines collision-aware animations for the 'HoverCardContent' class, using the `data-side` attribute to determine the animation direction. It sets a base animation duration and timing function and then defines separate animations ('slideUp' and 'slideDown') for the top and bottom sides, creating a slide-in effect from the appropriate direction.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/hover-card.mdx#2025-04-21_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.HoverCardContent {\n\tanimation-duration: 0.6s;\n\tanimation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.HoverCardContent[__data-side=\"top\"__] {\n\tanimation-name: slideUp;\n}\n.HoverCardContent[__data-side=\"bottom\"__] {\n\tanimation-name: slideDown;\n}\n\n@keyframes slideUp {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: translateY(10px);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: translateY(0);\n\t}\n}\n\n@keyframes slideDown {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: translateY(-10px);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: translateY(0);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Size Variations for Hover Cards in React\nDESCRIPTION: This snippet illustrates how to create multiple Hover Cards with different size variations, showcasing the flexibility of the Hover Card component in displaying text with varying maximum widths. Each card has a different size prop and displays similar content anatomy.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/hover-card.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n\"<Flex gap=\\\"4\\\">\\n\\t<HoverCard.Root>\\n\\t\\t<HoverCard.Trigger>\\n\\t\\t\\t<Link href=\\\"#\\\">Size 1</Link>\\n\\t\\t</HoverCard.Trigger>\\n\\t\\t<HoverCard.Content size=\\\"1\\\" maxWidth=\\\"240px\\\">\\n\\t\\t\\t<Text as=\\\"div\\\" size=\\\"1\\\" trim=\\\"both\\\">\\n\\t\\t\\t\\t<Strong>Typography</Strong> is the art and technique of arranging type\\n\\t\\t\\t\\tto make written language legible, readable and appealing when displayed.\\n\\t\\t\\t</Text>\\n\\t\\t</HoverCard.Content>\\n\\t</HoverCard.Root>\\n\\n\\t<HoverCard.Root>\\n\\t\\t<HoverCard.Trigger>\\n\\t\\t\\t<Link href=\\\"#\\\">Size 2</Link>\\n\\t\\t</HoverCard.Trigger>\\n\\t\\t<HoverCard.Content size=\\\"2\\\" maxWidth=\\\"280px\\\">\\n\\t\\t\\t<Text as=\\\"div\\\" size=\\\"2\\\" trim=\\\"both\\\">\\n\\t\\t\\t\\t<Strong>Typography</Strong> is the art and technique of arranging type\\n\\t\\t\\t\\tto make written language legible, readable and appealing when displayed.\\n\\t\\t\\t</Text>\\n\\t\\t</HoverCard.Content>\\n\\t</HoverCard.Root>\\n\\n\\t<HoverCard.Root>\\n\\t\\t<HoverCard.Trigger>\\n\\t\\t\\t<Link href=\\\"#\\\">Size 3</Link>\\n\\t\\t</HoverCard.Trigger>\\n\\t\\t<HoverCard.Content size=\\\"3\\\" maxWidth=\\\"320px\\\">\\n\\t\\t\\t<Text as=\\\"div\\\" size=\\\"3\\\" trim=\\\"both\\\">\\n\\t\\t\\t\\t<Strong>Typography</Strong> is the art and technique of arranging type\\n\\t\\t\\t\\tto make written language legible, readable and appealing when displayed.\\n\\t\\t\\t</Text>\\n\\t\\t</HoverCard.Content>\\n\\t</HoverCard.Root>\\n</Flex>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Scroll Area Scrollbars in JSX\nDESCRIPTION: This example shows how to use the 'scrollbars' prop to limit scrollable axes. It demonstrates both vertical-only and horizontal-only scrolling configurations.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/scroll-area.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid columns=\"2\" gap=\"2\">\n\t<ScrollArea type=\"always\" scrollbars=\"vertical\" style={{ height: 150 }}>\n\t\t<Flex p=\"2\" pr=\"8\" direction=\"column\" gap=\"4\">\n\t\t\t<Text size=\"2\" trim=\"both\">\n\t\t\t\tThree fundamental aspects of typography are legibility, readability, and\n\t\t\t\taesthetics. Although in a non-technical sense \"legible\" and \"readable\"\n\t\t\t\tare often used synonymously, typographically they are separate but\n\t\t\t\trelated concepts.\n\t\t\t</Text>\n\n\t\t\t<Text size=\"2\" trim=\"both\">\n\t\t\t\tLegibility describes how easily individual characters can be\n\t\t\t\tdistinguished from one another. It is described by Walter Tracy as \"the\n\t\t\t\tquality of being decipherable and recognisable\". For instance, if a \"b\"\n\t\t\t\tand an \"h\", or a \"3\" and an \"8\", are difficult to distinguish at small\n\t\t\t\tsizes, this is a problem of legibility.\n\t\t\t</Text>\n\t\t</Flex>\n\t</ScrollArea>\n\n\t<ScrollArea type=\"always\" scrollbars=\"horizontal\" style={{ height: 150 }}>\n\t\t<Flex gap=\"4\" p=\"2\" width=\"700px\">\n\t\t\t<Text size=\"2\" trim=\"both\">\n\t\t\t\tThree fundamental aspects of typography are legibility, readability, and\n\t\t\t\taesthetics. Although in a non-technical sense \"legible\" and \"readable\"\n\t\t\t\tare often used synonymously, typographically they are separate but\n\t\t\t\trelated concepts.\n\t\t\t</Text>\n\n\t\t\t<Text size=\"2\" trim=\"both\">\n\t\t\t\tLegibility describes how easily individual characters can be\n\t\t\t\tdistinguished from one another. It is described by Walter Tracy as \"the\n\t\t\t\tquality of being decipherable and recognisable\". For instance, if a \"b\"\n\t\t\t\tand an \"h\", or a \"3\" and an \"8\", are difficult to distinguish at small\n\t\t\t\tsizes, this is a problem of legibility.\n\t\t\t</Text>\n\t\t</Flex>\n\t</ScrollArea>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Overriding Radius on Individual Components\nDESCRIPTION: Demonstrates how to override the radius setting on individual Button components using the radius prop.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/radius.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"center\" gap=\"3\">\n\t<Button radius=\"none\">Save</Button>\n\t<Button radius=\"small\">Save</Button>\n\t<Button radius=\"medium\">Save</Button>\n\t<Button radius=\"large\">Save</Button>\n\t<Button radius=\"full\">Save</Button>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Basic Text Field with Search Icon\nDESCRIPTION: Implementation of a basic text field with a search icon in the slot\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text-field.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TextField.Root placeholder=\"Search the docs…\">\n\t<TextField.Slot>\n\t\t<MagnifyingGlassIcon height=\"16\" width=\"16\" />\n\t</TextField.Slot>\n</TextField.Root>\n```\n\n----------------------------------------\n\nTITLE: Text Component with Different Sizes in JSX\nDESCRIPTION: Example demonstrating the 'size' prop to control text size, which also provides correct line height and corrective letter spacing. As text size increases, the relative line height and letter spacing decrease.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\">\n\t<Text size=\"1\">The quick brown fox jumps over the lazy dog.</Text>\n\t<Text size=\"2\">The quick brown fox jumps over the lazy dog.</Text>\n\t<Text size=\"3\">The quick brown fox jumps over the lazy dog.</Text>\n\t<Text size=\"4\">The quick brown fox jumps over the lazy dog.</Text>\n\t<Text size=\"5\">The quick brown fox jumps over the lazy dog.</Text>\n\t<Text size=\"6\">The quick brown fox jumps over the lazy dog.</Text>\n\t<Text size=\"7\">The quick brown fox jumps over the lazy dog.</Text>\n\t<Text size=\"8\">The quick brown fox jumps over the lazy dog.</Text>\n\t<Text size=\"9\">The quick brown fox jumps over the lazy dog.</Text>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Customizing Avatar Fallback Elements in a Flex Container\nDESCRIPTION: This snippet demonstrates how to customize the fallback element displayed by Avatar components using the 'fallback' prop. It includes examples of different fallback characters as well as a custom SVG fallback element.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/avatar.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"2\">\n\t<Avatar fallback=\"A\" />\n\t<Avatar fallback=\"AB\" />\n\t<Avatar\n\t\tfallback={\n\t\t\t<Box width=\"24px\" height=\"24px\">\n\t\t\t\t<svg viewBox=\"0 0 64 64\" fill=\"currentColor\">\n\t\t\t\t\t<path d=\"M41.5 14c4.687 0 8.5 4.038 8.5 9s-3.813 9-8.5 9S33 27.962 33 23 36.813 14 41.5 14zM56.289 43.609C57.254 46.21 55.3 49 52.506 49c-2.759 0-11.035 0-11.035 0 .689-5.371-4.525-10.747-8.541-13.03 2.388-1.171 5.149-1.834 8.07-1.834C48.044 34.136 54.187 37.944 56.289 43.609zM37.289 46.609C38.254 49.21 36.3 52 33.506 52c-5.753 0-17.259 0-23.012 0-2.782 0-4.753-2.779-3.783-5.392 2.102-5.665 8.245-9.472 15.289-9.472S35.187 40.944 37.289 46.609zM21.5 17c4.687 0 8.5 4.038 8.5 9s-3.813 9-8.5 9S13 30.962 13 26 16.813 17 21.5 17z\" />\n\t\t\t\t</svg>\n\t\t\t</Box>\n\t\t}\n\t/>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Implementing Radix UI Separator Component\nDESCRIPTION: Basic implementation of the Separator component showing how to import and use it in a React component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/separator.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Separator } from \"radix-ui\";\n\nexport default () => <Separator.Root />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Origin-Aware Animations for Menubar (JSX)\nDESCRIPTION: This JSX snippet shows the setup for implementing origin-aware animations in a Radix UI Menubar. It includes the basic structure of the Menubar component and applies a custom className to the Menubar.Content for styling.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/menubar.mdx#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { Menubar } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<Menubar.Root>\n\t\t<Menubar.Menu>\n\t\t\t<Menubar.Trigger>…</Menubar.Trigger>\n\t\t\t<Menubar.Portal>\n\t\t\t\t<Menubar.Content __className__=\"MenubarContent\">…</Menubar.Content>\n\t\t\t</Menubar.Portal>\n\t\t</Menubar.Menu>\n\t</Menubar.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing checkbox items in Menubar (Radix UI, React)\nDESCRIPTION: This example demonstrates how to create a checkbox item in a Radix UI Menubar using `Menubar.CheckboxItem`.  The `checked` state is managed using `React.useState`, and the `onCheckedChange` handler updates the state when the checkbox is toggled. The `Menubar.ItemIndicator` displays a check icon when the item is checked.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/menubar.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { CheckIcon } from \"@radix-ui/react-icons\";\nimport { Menubar } from \"radix-ui\";\n\nexport default () => {\n\tconst [checked, setChecked] = React.useState(true);\n\n\treturn (\n\t\t<Menubar.Root>\n\t\t\t<Menubar.Menu>\n\t\t\t\t<Menubar.Trigger>…</Menubar.Trigger>\n\t\t\t\t<Menubar.Portal>\n\t\t\t\t\t<Menubar.Content>\n\t\t\t\t\t\t<Menubar.Item>…</Menubar.Item>\n\t\t\t\t\t\t<Menubar.Item>…</Menubar.Item>\n\t\t\t\t\t\t<Menubar.Separator />\n\t\t\t\t\t\t<Menubar.CheckboxItem\n\t\t\t\t\t\t\tchecked={checked}\n\t\t\t\t\t\t\tonCheckedChange={setChecked}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Menubar.ItemIndicator>\n\t\t\t\t\t\t\t\t<CheckIcon />\n\t\t\t\t\t\t\t</Menubar.ItemIndicator>\n\t\t\t\t\t\t\tCheckbox item\n\t\t\t\t\t\t</Menubar.CheckboxItem>\n\t\t\t\t\t</Menubar.Content>\n\t\t\t\t</Menubar.Portal>\n\t\t\t</Menubar.Menu>\n\t\t</Menubar.Root>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Checkbox Size Variants in JSX\nDESCRIPTION: Demonstrates the use of the size prop to control the size of the Checkbox components rendered in JSX. The example shows three different size settings (size=\"1\", size=\"2\", and size=\"3\") with defaultChecked enabled. Ensure the correct import of Flex and Checkbox components.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"center\" gap=\"2\">\n\t<Checkbox size=\"1\" defaultChecked />\n\t<Checkbox size=\"2\" defaultChecked />\n\t<Checkbox size=\"3\" defaultChecked />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Controlling Checkbox Size - React\nDESCRIPTION: This snippet shows how to use the `size` prop to control the sizes of individual checkbox items in a Checkbox Group. It effectively demonstrates different size configurations through multiple instances of Checkbox Group.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox-group.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"center\" gap=\"2\">\n\t<CheckboxGroup.Root size=\"1\" defaultValue=\"1\">\n\t\t<CheckboxGroup.Item value=\"1\" />\n\t</CheckboxGroup.Root>\n\n\t<CheckboxGroup.Root size=\"2\" defaultValue=\"1\">\n\t\t<CheckboxGroup.Item value=\"1\" />\n\t</CheckboxGroup.Root>\n\n\t<CheckboxGroup.Root size=\"3\" defaultValue=\"1\">\n\t\t<CheckboxGroup.Item value=\"1\" />\n\t</CheckboxGroup.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Utilizing Inset Content within a Hover Card in React\nDESCRIPTION: This snippet demonstrates the use of the Inset component to align content flush to the sides of the Hover Card, providing a more appealing layout. It showcases an image and text within the Hover Card, enhancing the design by controlling the layout and alignment of the displayed content.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/hover-card.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n\"<Text>\\n\\tTechnology revolutionized{\\\" \\\\n\\t<HoverCard.Root>\\n\\t\\t<HoverCard.Trigger>\\n\\t\\t\\t<Link href=\\\"#\\\">typography</Link>\\n\\t\\t</HoverCard.Trigger>\\n\\t\\t<HoverCard.Content width=\\\"450px\\\">\\n\\t\\t\\t<Flex>\\n\\t\\t\\t\\t<Box asChild flexShrink=\\\"0\\\">\\n\\t\\t\\t\\t\\t<Inset side=\\\"left\\\" pr=\\\"current\\\">\\n\\t\\t\\t\\t\\t\\t<img\\n\\t\\t\\t\\t\\t\\tsrc=\\\"https://images.unsplash.com/photo-1617050318658-a9a3175e34cb?&auto=format&fit=crop&w=300&q=90\\\"\\n\\t\\t\\t\\t\\t\\t\\talt=\\\"Bold typography\\\"\\n\\t\\t\\t\\t\\t\\t\\tstyle={{\\n\\t\\t\\t\\t\\t\\t\\tdisplay: \\\"block\\\",\\n\\t\\t\\t\\t\\t\\t\\tobjectFit: \\\"cover\\\",\\n\\t\\t\\t\\t\\t\\t\\theight: \\\"100%\\\",\\n\\t\\t\\t\\t\\t\\t\\twidth: 150,\\n\\t\\t\\t\\t\\t\\t\\tbackgroundColor: \\\"var(--gray-5)\\\"\\n\\t\\t\\t\\t\\t\\t}}/>{\\\" \\\\n\\t\\t\\t\\t\\t</Inset>\\n\\t\\t\\t\\t</Box>\\n\\t\\t\\t\\t<Text size=\\\"2\\\" as=\\\"p\\\">\\n\\t\\t\\t\\t\\t<Strong>Typography</Strong> is the art and technique of arranging type\\n\\t\\t\\t\\t\\tto make written language legible, readable and appealing when\\n\\t\\t\\t\\t\\tdisplayed. The arrangement of type involves selecting typefaces, point\\n\\t\\t\\t\\t\\tsizes, line lengths, line-spacing (leading), and letter-spacing\\n\\t\\t\\t\\t\\t(tracking)…\\n\\t\\t\\t\\t</Text>\\n\\t\\t\\t</Flex>\\n\\t\\t</HoverCard.Content>\\n\\t</HoverCard.Root>{\\\" \\\\n\\tin the latter twentieth century.\\n\\t</Text>\"\n```\n\n----------------------------------------\n\nTITLE: Checkbox Card Color Customization in React\nDESCRIPTION: Shows how to apply different color themes to checkbox cards using the color prop\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox-cards.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\" maxWidth=\"200px\">\n\t<CheckboxCards.Root defaultValue={[\"1\"]} color=\"indigo\">\n\t\t<CheckboxCards.Item value=\"1\">Agree to Terms</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n\n\t<CheckboxCards.Root defaultValue={[\"1\"]} color=\"cyan\">\n\t\t<CheckboxCards.Item value=\"1\">Agree to Terms</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n\n\t<CheckboxCards.Root defaultValue={[\"1\"]} color=\"orange\">\n\t\t<CheckboxCards.Item value=\"1\">Agree to Terms</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n\n\t<CheckboxCards.Root defaultValue={[\"1\"]} color=\"crimson\">\n\t\t<CheckboxCards.Item value=\"1\">Agree to Terms</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Indeterminate Checkbox States in JSX\nDESCRIPTION: Demonstrates creating an indeterminate Checkbox component using the defaultChecked and checked attributes with the \"indeterminate\" value. Flex is used to display checkboxes side by side.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"2\">\n\t<Checkbox defaultChecked=\"indeterminate\" />\n\t<Checkbox checked=\"indeterminate\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Controlling Badge Size in JSX\nDESCRIPTION: This snippet showcases how to use the 'size' prop to modify the size of Badge components rendered within a Flex layout. Various sizes are applied to Badge elements to demonstrate customizable UI options. Requires the Radix UI library and Flex component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/badge.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"center\" gap=\"2\">\\n\t<Badge size=\"1\" color=\"indigo\">\\n\t\tNew\\n\t</Badge>\\n\t<Badge size=\"2\" color=\"indigo\">\\n\t\tNew\\n\t</Badge>\\n\t<Badge size=\"3\" color=\"indigo\">\\n\t\tNew\\n\t</Badge>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Creating a Button with Icon in JSX\nDESCRIPTION: This snippet demonstrates how to create a button with an icon using the Button component in JSX. It uses a nested BookmarkIcon component within the Button component. No dependencies are required beyond JSX support, and typical usage involves wrapping text or other inline elements. The input is the JSX markup, and the output is a Button element rendered with an icon.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/button.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Button>\n\t<BookmarkIcon /> Bookmark\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Applying Full Radius Theme to Multiple Components\nDESCRIPTION: Shows how different components react to a 'full' radius theme setting, demonstrating contextual application of border-radius.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/radius.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Theme radius=\"full\">\n\t<Flex align=\"center\" gap=\"3\">\n\t\t<Button>Save</Button>\n\t\t<Switch defaultChecked />\n\t\t<Checkbox defaultChecked />\n\t</Flex>\n</Theme>\n```\n\n----------------------------------------\n\nTITLE: Using Size Prop to Control Dropdown Menu Size\nDESCRIPTION: This snippet showcases how to use the `size` prop to customize the size of the dropdown menu and its trigger button. It demonstrates two examples with different size values applied to both the trigger button and the dropdown content.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/dropdown-menu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"3\" align=\"center\">\n\t<DropdownMenu.Root>\n\t\t<DropdownMenu.Trigger>\n\t\t\t<Button variant=\"soft\" size=\"1\">\n\t\t\t\tOptions\n\t\t\t\t<DropdownMenu.TriggerIcon />\n\t\t\t</Button>\n\t\t</DropdownMenu.Trigger>\n\t\t<DropdownMenu.Content size=\"1\">\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ E\">Edit</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ D\">Duplicate</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ N\">Archive</DropdownMenu.Item>\n\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ ⌫\" color=\"red\">\n\t\t\t\tDelete\n\t\t\t</DropdownMenu.Item>\n\t\t</DropdownMenu.Content>\n\t</DropdownMenu.Root>\n\n\t<DropdownMenu.Root>\n\t\t<DropdownMenu.Trigger>\n\t\t\t<Button variant=\"soft\" size=\"2\">\n\t\t\t\tOptions\n\t\t\t\t<DropdownMenu.TriggerIcon />\n\t\t\t</Button>\n\t\t</DropdownMenu.Trigger>\n\t\t<DropdownMenu.Content size=\"2\">\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ E\">Edit</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ D\">Duplicate</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ N\">Archive</DropdownMenu.Item>\n\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ ⌫\" color=\"red\">\n\t\t\t\tDelete\n\t\t\t</DropdownMenu.Item>\n\t\t</DropdownMenu.Content>\n\t</DropdownMenu.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Modifying Callout Size in React\nDESCRIPTION: This snippet illustrates how to control the size of callout components using the `size` prop. Different size levels are defined to affect the overall appearance of the callout. This can be particularly useful for adjusting the presentation based on the UI requirements. It requires Radix UI and components like `Flex` for layout management.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/callout.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\\\"column\\\" gap=\\\"3\\\" align=\\\"start\\\">\\n\\t<Callout.Root size=\\\"1\\\">\\n\\t\\t<Callout.Icon>\\n\\t\\t\\t<InfoCircledIcon />\\n\\t\\t</Callout.Icon>\\n\\t\\t<Callout.Text>\\n\\t\\t\\tYou will need admin privileges to install and access this application.\\n\\t\\t</Callout.Text>\\n\\t</Callout.Root>\\n\\n\\t<Callout.Root size=\\\"2\\\">\\n\\t\\t<Callout.Icon>\\n\\t\\t\\t<InfoCircledIcon />\\n\\t\\t</Callout.Icon>\\n\\t\\t<Callout.Text>\\n\\t\\t\\tYou will need admin privileges to install and access this application.\\n\\t\\t</Callout.Text>\\n\\t</Callout.Root>\\n\\n\\t<Callout.Root size=\\\"3\\\">\\n\\t\\t<Callout.Icon>\\n\\t\\t\\t<InfoCircledIcon />\\n\\t\\t</Callout.Icon>\\n\\t\\t<Callout.Text>\\n\\t\\t\\tYou will need admin privileges to install and access this application.\\n\\t\\t</Callout.Text>\\n\\t</Callout.Root>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Avatar Size Customization in a Flex Container\nDESCRIPTION: This snippet illustrates how to use the 'size' prop to specify different sizes for Avatar components in a Flex container. Multiple avatars are displayed, each with varying sizes while maintaining a consistent source image and fallback character.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/avatar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"center\" gap=\"4\">\n\t<Avatar\n\t\tsize=\"1\"\n\t\tsrc=\"https://images.unsplash.com/photo-1502823403499-6ccfcf4fb453?&w=256&h=256&q=70&crop=focalpoint&fp-x=0.5&fp-y=0.3&fp-z=1&fit=crop\"\n\t\tfallback=\"A\"\n\t/>\n\t<Avatar\n\t\tsize=\"2\"\n\t\tsrc=\"https://images.unsplash.com/photo-1502823403499-6ccfcf4fb453?&w=256&h=256&q=70&crop=focalpoint&fp-x=0.5&fp-y=0.3&fp-z=1&fit=crop\"\n\t\tfallback=\"A\"\n\t/>\n\t<Avatar\n\t\tsize=\"3\"\n\t\tsrc=\"https://images.unsplash.com/photo-1502823403499-6ccfcf4fb453?&w=256&h=256&q=70&crop=focalpoint&fp-x=0.5&fp-y=0.3&fp-z=1&fit=crop\"\n\t\tfallback=\"A\"\n\t/>\n\t<Avatar\n\t\tsize=\"4\"\n\t\tsrc=\"https://images.unsplash.com/photo-1502823403499-6ccfcf4fb453?&w=256&h=256&q=70&crop=focalpoint&fp-x=0.5&fp-y=0.3&fp-z=1&fit=crop\"\n\t\tfallback=\"A\"\n\t/>\n\t<Avatar\n\t\tsize=\"5\"\n\t\tsrc=\"https://images.unsplash.com/photo-1502823403499-6ccfcf4fb453?&w=256&h=256&q=70&crop=focalpoint&fp-x=0.5&fp-y=0.3&fp-z=1&fit=crop\"\n\t\tfallback=\"A\"\n\t/>\n\t<Avatar\n\t\tsize=\"6\"\n\t\tsrc=\"https://images.unsplash.com/photo-1502823403499-6ccfcf4fb453?&w=256&h=256&q=70&crop=focalpoint&fp-x=0.5&fp-y=0.3&fp-z=1&fit=crop\"\n\t\tfallback=\"A\"\n\t/>\n\t<Avatar\n\t\tsize=\"7\"\n\t\tsrc=\"https://images.unsplash.com/photo-1502823403499-6ccfcf4fb453?&w=256&h=256&q=70&crop=focalpoint&fp-x=0.5&fp-y=0.3&fp-z=1&fit=crop\"\n\t\tfallback=\"A\"\n\t/>\n\t<Avatar\n\t\tsize=\"8\"\n\t\tsrc=\"https://images.unsplash.com/photo-1502823403499-6ccfcf4fb453?&w=256&h=256&q=70&crop=focalpoint&fp-x=0.5&fp-y=0.3&fp-z=1&fit=crop\"\n\t\tfallback=\"A\"\n\t/>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Portal Component Overview\nDESCRIPTION: Radix UI Portal component that enables rendering React components in a different part of the DOM tree, inheriting functionality from the Portal primitive utility\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/portal.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Portal component documentation reference\nmetaTitle: Portal\nmetaDescription: Renders a React subtree in a different part of the DOM.\n```\n\n----------------------------------------\n\nTITLE: Spreading Props in Custom React Component for Radix UI\nDESCRIPTION: The snippet demonstrates the importance of spreading props in a custom React component to ensure compatibility with Radix UI's components. It shows how to use JSX's spread operator to pass Radix's props and event handlers to the underlying DOM element, making the component functional and accessible.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/guides/composition.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// before\nconst MyButton = () => <button />;\n\n// after\nconst MyButton = (props) => <button {...props} />;\n```\n\n----------------------------------------\n\nTITLE: Applying Color to Callouts in React\nDESCRIPTION: Illustrates the usage of the `color` prop to assign specific colors to callout components. Various color themes such as `blue`, `green`, and `red` can be used to fit the application's visual identity. This customization leverages Radix UI's theming capabilities. Dependencies include Radix UI components and appropriate CSS for color application.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/callout.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\\\"column\\\" gap=\\\"3\\\">\\n\\t<Callout.Root color=\\\"blue\\\">\\n\\t\\t<Callout.Icon>\\n\\t\\t\\t<InfoCircledIcon />\\n\\t\\t</Callout.Icon>\\n\\t\\t<Callout.Text>\\n\\t\\t\\tYou will need <Link href=\\\"#\\\">admin privileges</Link> to install and access\\n\\t\\t\\tthis application.\\n\\t\\t</Callout.Text>\\n\\t</Callout.Root>\\n\\n\\t<Callout.Root color=\\\"green\\\">\\n\\t\\t<Callout.Icon>\\n\\t\\t\\t<InfoCircledIcon />\\n\\t\\t</Callout.Icon>\\n\\t\\t<Callout.Text>\\n\\t\\t\\tYou will need <Link href=\\\"#\\\">admin privileges</Link> to install and access\\n\\t\\t\\tthis application.\\n\\t\\t</Callout.Text>\\n\\t</Callout.Root>\\n\\n\\t<Callout.Root color=\\\"red\\\">\\n\\t\\t<Callout.Icon>\\n\\t\\t\\t<InfoCircledIcon />\\n\\t\\t</Callout.Icon>\\n\\t\\t<Callout.Text>\\n\\t\\t\\tYou will need <Link href=\\\"#\\\">admin privileges</Link> to install and access\\n\\t\\t\\tthis application.\\n\\t\\t</Callout.Text>\\n\\t</Callout.Root>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Text Component with Different Font Weights in JSX\nDESCRIPTION: Example showing how to use the 'weight' prop to set different text weights including regular, medium, and bold, which affects the visual prominence of the text.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Text weight=\"regular\" as=\"div\">\n  The quick brown fox jumps over the lazy dog.\n</Text>\n\n<Text weight=\"medium\" as=\"div\">\n  The quick brown fox jumps over the lazy dog.\n</Text>\n\n<Text weight=\"bold\" as=\"div\">\n  The quick brown fox jumps over the lazy dog.\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Custom Portal Container for Dialogs - JSX\nDESCRIPTION: This snippet demonstrates how to customize the portal container for a dialog using Radix UI. It maintains state for the container element and uses the 'Dialog.Portal' to render the dialog into the specified container. Inputs include a reference to the container element, and it outputs a dialog that appears in the custom-defined container.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dialog.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// Custom portal container\nimport * as React from \"react\";\nimport { Dialog } from \"radix-ui\";\n\nexport default () => {\n\tconst [container, setContainer] = React.useState(null);\n\treturn (\n\t\t<div>\n\t\t\t<Dialog.Root>\n\t\t\t\t<Dialog.Trigger />\n\t\t\t\t<Dialog.Portal __container__={container}>\n\t\t\t\t\t<Dialog.Overlay />\n\t\t\t\t\t<Dialog.Content>...</Dialog.Content>\n\t\t\t\t</Dialog.Portal>\n\t\t\t</Dialog.Root>\n\n\t\t\t<div ref={__setContainer__} />\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Labels to ContextMenu in React\nDESCRIPTION: Example showing how to add descriptive labels to sections in a ContextMenu using the Label component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<ContextMenu.Root>\n\t<ContextMenu.Trigger>…</ContextMenu.Trigger>\n\t<ContextMenu.Portal>\n\t\t<ContextMenu.Content>\n\t\t\t<ContextMenu.Label>Label</ContextMenu.Label>\n\t\t\t<ContextMenu.Item>…</ContextMenu.Item>\n\t\t\t<ContextMenu.Item>…</ContextMenu.Item>\n\t\t\t<ContextMenu.Item>…</ContextMenu.Item>\n\t\t</ContextMenu.Content>\n\t</ContextMenu.Portal>\n</ContextMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Initializing Radix UI Select with Popper Positioning\nDESCRIPTION: Demonstrates how to configure Select component with alternative positioning mode using popper strategy and side offset\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/select.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Select } from \"radix-ui\";\n\nexport default () => (\n\t<Select.Root>\n\t\t<Select.Trigger>…</Select.Trigger>\n\t\t<Select.Portal>\n\t\t\t<Select.Content __position__=\"popper\" __sideOffset__={5}>\n\t\t\t\t…\n\t\t\t</Select.Content>\n\t\t</Select.Portal>\n\t</Select.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Long Text Skeleton Example\nDESCRIPTION: Demonstrates the difference in skeleton behavior when wrapping longer paragraphs of text content.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/skeleton.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Container size=\"1\">\n\t<Flex direction=\"column\" gap=\"3\">\n\t\t<Text>\n\t\t\t<Skeleton>\n\t\t\t\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque\n\t\t\t\tfelis tellus, efficitur id convallis a, viverra eget libero. Nam magna\n\t\t\t\terat, fringilla sed commodo sed, aliquet nec magna.\n\t\t\t</Skeleton>\n\t\t</Text>\n\n\t\t<Skeleton>\n\t\t\t<Text>\n\t\t\t\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque\n\t\t\t\tfelis tellus, efficitur id convallis a, viverra eget libero. Nam magna\n\t\t\t\terat, fringilla sed commodo sed, aliquet nec magna.\n\t\t\t</Text>\n\t\t</Skeleton>\n\t</Flex>\n</Container>\n```\n\n----------------------------------------\n\nTITLE: Alert Dialog with Inset Content\nDESCRIPTION: This snippet showcases an Alert Dialog containing inset content with a table. It utilizes the Inset component to align the table content flush with the sides of the dialog, providing a structured layout for displaying additional information within the dialog.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/alert-dialog.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<AlertDialog.Root>\n\t<AlertDialog.Trigger>\n\t\t<Button color=\"red\">Delete users</Button>\n\t</AlertDialog.Trigger>\n\t<AlertDialog.Content maxWidth=\"500px\">\n\t\t<AlertDialog.Title>Delete Users</AlertDialog.Title>\n\t\t<AlertDialog.Description size=\"2\">\n\t\t\tAre you sure you want to delete these users? This action is permanent and\n\t\t\tcannot be undone.\n\t\t</AlertDialog.Description>\n\n\t\t<Inset side=\"x\" my=\"5\">\n\t\t\t<Table.Root>\n\t\t\t\t<Table.Header>\n\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t<Table.ColumnHeaderCell>Full name</Table.ColumnHeaderCell>\n\t\t\t\t\t\t<Table.ColumnHeaderCell>Email</Table.ColumnHeaderCell>\n\t\t\t\t\t\t<Table.ColumnHeaderCell>Group</Table.ColumnHeaderCell>\n\t\t\t\t\t</Table.Row>\n\t\t\t\t</Table.Header>\n\n\t\t\t\t<Table.Body>\n\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t<Table.RowHeaderCell>Danilo Sousa</Table.RowHeaderCell>\n\t\t\t\t\t\t<Table.Cell>danilo@example.com</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>Developer</Table.Cell>\n\t\t\t\t\t</Table.Row>\n\n\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t<Table.RowHeaderCell>Zahra Ambessa</Table.RowHeaderCell>\n\t\t\t\t\t\t<Table.Cell>zahra@example.com</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>Admin</Table.Cell>\n\t\t\t\t\t</Table.Row>\n\t\t\t\t</Table.Body>\n\t\t\t\t</Table.Root>\n\t\t\t</Inset>\n\n\t\t\t<Flex gap=\"3\" justify=\"end\">\n\t\t\t\t<AlertDialog.Cancel>\n\t\t\t\t\t<Button variant=\"soft\" color=\"gray\">\n\t\t\t\t\t\tCancel\n\t\t\t\t\t</Button>\n\t\t\t\t</AlertDialog.Cancel>\n\t\t\t\t<AlertDialog.Action>\n\t\t\t\t\t<Button color=\"red\">Delete users</Button>\n\t\t\t\t</AlertDialog.Action>\n\t\t\t</Flex>\n\t</AlertDialog.Content>\n</AlertDialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Creating Ghost Buttons in JSX\nDESCRIPTION: This snippet demonstrates the use of the 'ghost' variant to create a button without chrome, using JSX. A ghost button behaves like text in layout, utilizing a negative margin for alignment. No additional dependencies are required, and typical usage is styling.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/button.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Button variant=\"ghost\">Edit profile</Button>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Spinner Component in React\nDESCRIPTION: Demonstrates how to use the new Spinner component in Radix Themes 3.0. The Spinner is a simple animated loading indicator that can conditionally render its children when loading is complete.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/blog/themes-3.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Spinner />\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Hover Card with Trigger and Content in React\nDESCRIPTION: This snippet demonstrates how to set up a basic Hover Card component using Radix UI. It includes a trigger link that, when hovered over, reveals additional content in the hover card. The Hover Card consists of an avatar image and descriptive text about the @radix_ui account.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/hover-card.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n\"<Text>\\n\\tFollow{\\\" \\\\n\\t<HoverCard.Root>\\n\\t\\t<HoverCard.Trigger>\\n\\t\\t\\t<Link href=\\\"#\\\" href=\\\"https://twitter.com/radix_ui\\\" target=\\\"_blank\\\">\\n\\t\\t\\t\\t@radix_ui\\n\\t\\t\\t</Link>\\n\\t\\t</HoverCard.Trigger>\\n\\t\\t<HoverCard.Content maxWidth=\\\"300px\\\">\\n\\t\\t\\t<Flex gap=\\\"4\\\">\\n\\t\\t\\t\\t<Avatar\\n\\t\\t\\t\\t\\tsize=\\\"3\\\"\\n\\t\\t\\t\\t\\tfallback=\\\"R\\\"\\n\\t\\t\\t\\t\\tradius=\\\"full\\\"\\n\\t\\t\\t\\t\\tsrc=\\\"https://pbs.twimg.com/profile_images/1337055608613253126/r_eiMp2H_400x400.png\\\"\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<Box>\\n\\t\\t\\t\\t\\t<Heading size=\\\"3\\\" as=\\\"h3\\\">\\n\\t\\t\\t\\t\\t\\tRadix\\n\\t\\t\\t\\t\\t</Heading>\\n\\t\\t\\t\\t\\t\\t<Text as=\\\"div\\\" size=\\\"2\\\" color=\\\"gray\\\" mb=\\\"2\\\">\\n\\t\\t\\t\\t\\t\\t\\t@radix_ui\\n\\t\\t\\t\\t\\t\\t</Text>\\n\\t\\t\\t\\t\\t\\t<Text as=\\\"div\\\" size=\\\"2\\\">\\n\\t\\t\\t\\t\\t\\t\\tReact components, icons, and colors for building high-quality,\\n\\t\\t\\t\\t\\t\\t\\taccessible UI.\\n\\t\\t\\t\\t\\t\\t</Text>\\n\\t\\t\\t\\t\\t</Box>\\n\\t\\t\\t\\t</Flex>\\n\\t\\t\\t</HoverCard.Content>\\n\\t\\t</HoverCard.Root>{\\\" \\\\n\\tfor updates.\\n\\t</Text>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Skeleton Component in React\nDESCRIPTION: Demonstrates the usage of the new Skeleton component, which adopts the shape and size of child components to create loading placeholders that match the final layout.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/blog/themes-3.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Skeleton>\n\t<Button radius=\"full\">Button</Button>\n</Skeleton>\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Radio Buttons in JSX\nDESCRIPTION: This snippet demonstrates how to render a basic set of radio buttons using the Radio component from Radix UI. It shows three radio buttons with different labels arranged vertically.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"start\" direction=\"column\" gap=\"1\">\n\t<Flex asChild gap=\"2\">\n\t\t<Text as=\"label\" size=\"2\">\n\t\t\t<Radio name=\"example\" value=\"1\" defaultChecked />\n\t\t\tDefault\n\t\t</Text>\n\t</Flex>\n\n\t<Flex asChild gap=\"2\">\n\t\t<Text as=\"label\" size=\"2\">\n\t\t\t<Radio name=\"example\" value=\"2\" />\n\t\t\tComfortable\n\t\t</Text>\n\t</Flex>\n\n\t<Flex asChild gap=\"2\">\n\t\t<Text as=\"label\" size=\"2\">\n\t\t\t<Radio name=\"example\" value=\"3\" />\n\t\t\tCompact\n\t\t</Text>\n\t</Flex>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Styling the Navigation Menu Indicator with CSS\nDESCRIPTION: This CSS snippet styles the Navigation Menu Indicator, defining its background color, height, and transition properties. It also includes specific styling for horizontal orientation.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/navigation-menu.mdx#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.NavigationMenuIndicator {\n\tbackground-color: grey;\n}\n.NavigationMenuIndicator[data-orientation=\"horizontal\"] {\n\theight: 3px;\n\ttransition:\n\t\twidth,\n\t\ttransform,\n\t\t250ms ease;\n}\n```\n\n----------------------------------------\n\nTITLE: High Contrast Button Example\nDESCRIPTION: Demonstrates the use of highContrast prop on buttons\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/color.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"4\">\n\t<Button variant=\"classic\" color=\"gray\">\n\t\tEdit profile\n\t</Button>\n\t<Button variant=\"classic\" color=\"gray\" highContrast>\n\t\tEdit profile\n\t</Button>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Customizing Select Trigger with Icons in React\nDESCRIPTION: This snippet demonstrates how to customize the Select Trigger by manually controlling its children. It shows how to render an icon next to the selected item's text.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/select.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n\tconst data = {\n\t\tlight: { label: \"Light\", icon: <SunIcon /> },\n\t\tdark: { label: \"Dark\", icon: <MoonIcon /> },\n\t};\n\tconst [value, setValue] = React.useState(\"light\");\n\treturn (\n\t\t<Flex direction=\"column\" maxWidth=\"160px\">\n\t\t\t<Select.Root value={value} onValueChange={setValue}>\n\t\t\t\t<Select.Trigger>\n\t\t\t\t\t<Flex as=\"span\" align=\"center\" gap=\"2\">\n\t\t\t\t\t\t{data[value].icon}\n\t\t\t\t\t\t{data[value].label}\n\t\t\t\t\t</Flex>\n\t\t\t\t</Select.Trigger>\n\t\t\t\t<Select.Content position=\"popper\">\n\t\t\t\t\t<Select.Item value=\"light\">Light</Select.Item>\n\t\t\t\t\t<Select.Item value=\"dark\">Dark</Select.Item>\n\t\t\t\t</Select.Content>\n\t\t\t</Select.Root>\n\t\t</Flex>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Card Variant with 'variant' Prop - JSX\nDESCRIPTION: This snippet demonstrates how to control the visual style of the Radix UI Card component using the `variant` prop. Two cards are displayed with different variants (`surface` and `classic`), showcasing the available styling options. This allows for creating visually distinct cards to suit different design requirements.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/card.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n\"<Flex direction=\\\"column\\\" gap=\\\"3\\\" maxWidth=\\\"350px\\\">\\n\\t<Card variant=\\\"surface\\\">\\n\\t\t<Text as=\\\"div\\\" size=\\\"2\\\" weight=\\\"bold\\\">\\n\\t\t\tQuick start\\n\\t\t</Text>\\n\\t\t<Text as=\\\"div\\\" color=\\\"gray\\\" size=\\\"2\\\">\\n\\t\t\tStart building your next project in minutes\\n\\t\t</Text>\\n\\t</Card>\\n\\n\\t<Card variant=\\\"classic\\\">\\n\\t\t<Text as=\\\"div\\\" size=\\\"2\\\" weight=\\\"bold\\\">\\n\\t\t\tQuick start\\n\\t\t</Text>\\n\\t\t<Text as=\\\"div\\\" color=\\\"gray\\\" size=\\\"2\\\">\\n\\t\t\tStart building your next project in minutes\\n\\t\t</Text>\\n\\t</Card>\\n</Flex>\"\n```\n\n----------------------------------------\n\nTITLE: Changing Heading Level with 'as' Prop\nDESCRIPTION: This snippet shows how to change the semantic heading level using the 'as' prop, which alters the element type without affecting visual appearance.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/heading.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Heading as=\"h1\">Level 1</Heading>\n<Heading as=\"h2\">Level 2</Heading>\n<Heading as=\"h3\">Level 3</Heading>\n```\n\n----------------------------------------\n\nTITLE: Alert Dialog with Size Variants\nDESCRIPTION: This snippet demonstrates creating multiple Alert Dialogs with different sizes and corresponding button triggers. The size prop is utilized to adjust padding and border-radius, affecting the dialog's appearance.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/alert-dialog.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"4\" align=\"center\">\n\t<AlertDialog.Root>\n\t\t<AlertDialog.Trigger>\n\t\t\t<Button variant=\"soft\">Size 1</Button>\n\t\t</AlertDialog.Trigger>\n\t\t<AlertDialog.Content __size__=\"1\" maxWidth=\"300px\">\n\t\t\t<Text as=\"p\" trim=\"both\" size=\"1\">\n\t\t\t\tThe quick brown fox jumps over the lazy dog.\n\t\t\t</Text>\n\t\t</AlertDialog.Content>\n\t</AlertDialog.Root>\n\n\t<AlertDialog.Root>\n\t\t<AlertDialog.Trigger>\n\t\t\t<Button variant=\"soft\">Size 2</Button>\n\t\t</AlertDialog.Trigger>\n\t\t<AlertDialog.Content __size__=\"2\" maxWidth=\"400px\">\n\t\t\t<Text as=\"p\" trim=\"both\" size=\"2\">\n\t\t\t\tThe quick brown fox jumps over the lazy dog.\n\t\t\t</Text>\n\t\t</AlertDialog.Content>\n\t</AlertDialog.Root>\n\n\t<AlertDialog.Root>\n\t\t<AlertDialog.Trigger>\n\t\t\t<Button variant=\"soft\">Size 3</Button>\n\t\t</AlertDialog.Trigger>\n\t\t<AlertDialog.Content __size__=\"3\" maxWidth=\"500px\">\n\t\t\t<Text as=\"p\" trim=\"both\" size=\"3\">\n\t\t\t\tThe quick brown fox jumps over the lazy dog.\n\t\t\t</Text>\n\t\t</AlertDialog.Content>\n\t</AlertDialog.Root>\n\n\t<AlertDialog.Root>\n\t\t<AlertDialog.Trigger>\n\t\t\t<Button variant=\"soft\">Size 4</Button>\n\t\t</AlertDialog.Trigger>\n\t\t<AlertDialog.Content __size__=\"4\">\n\t\t\t<Text as=\"p\" trim=\"both\" size=\"4\">\n\t\t\t\tThe quick brown fox jumps over the lazy dog.\n\t\t\t</Text>\n\t\t</AlertDialog.Content>\n\t</AlertDialog.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Implementing High-contrast Select Content in React\nDESCRIPTION: This example shows how to use the 'highContrast' prop on Content to increase item contrast in the Select component. It compares regular and high-contrast versions.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/select.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"3\">\n\t<Select.Root defaultValue=\"apple\">\n\t\t<Select.Trigger color=\"gray\" />\n\t\t<Select.Content color=\"gray\" variant=\"solid\">\n\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t</Select.Content>\n\t</Select.Root>\n\n\t<Select.Root defaultValue=\"apple\">\n\t\t<Select.Trigger color=\"gray\" />\n\t\t<Select.Content color=\"gray\" variant=\"solid\" highContrast>\n\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t</Select.Content>\n\t</Select.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Initializing Checkbox Cards with Multiple Items in React\nDESCRIPTION: Demonstrates creating a checkbox card group with multiple selectable items, using default value and responsive column layout\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox-cards.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box maxWidth=\"600px\">\n\t<CheckboxCards.Root defaultValue={[\"1\"]} columns={{ initial: \"1\", sm: \"3\" }}>\n\t\t<CheckboxCards.Item value=\"1\">\n\t\t\t<Flex direction=\"column\" width=\"100%\">\n\t\t\t\t<Text weight=\"bold\">A1 Keyboard</Text>\n\t\t\t\t<Text>US Layout</Text>\n\t\t\t</Flex>\n\t\t</CheckboxCards.Item>\n\t\t<CheckboxCards.Item value=\"2\">\n\t\t\t<Flex direction=\"column\" width=\"100%\">\n\t\t\t\t<Text weight=\"bold\">Pro Mouse</Text>\n\t\t\t\t<Text>Zero-lag wireless</Text>\n\t\t\t</Flex>\n\t\t</CheckboxCards.Item>\n\t\t<CheckboxCards.Item value=\"3\">\n\t\t\t<Flex direction=\"column\" width=\"100%\">\n\t\t\t\t<Text weight=\"bold\">Lightning Mat</Text>\n\t\t\t\t<Text>Wireless charging</Text>\n\t\t\t</Flex>\n\t\t</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Radix UI Primitives - TypeScript\nDESCRIPTION: This snippet details how to import specific Radix UI primitives after installing them individually. This allows for selective usage of components in a TypeScript environment.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/overview/introduction.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Dialog from \"@radix-ui/react-dialog\";\nimport * as DropdownMenu from \"@radix-ui/react-dropdown-menu\";\nimport * as Tooltip from \"@radix-ui/react-tooltip\";\n```\n\n----------------------------------------\n\nTITLE: Customizing Callout Variant in React\nDESCRIPTION: Demonstrates changing the visual style of callout components using the `variant` prop in Radix UI. Different variant values such as `soft`, `surface`, and `outline` offer distinct appearances. This feature allows developers to align callouts with the overall design theme of the application. Requires Radix UI library and compatible styling components.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/callout.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\\\"column\\\" gap=\\\"3\\\">\\n\\t<Callout.Root variant=\\\"soft\\\">\\n\\t\\t<Callout.Icon>\\n\\t\\t\\t<InfoCircledIcon />\\n\\t\\t</Callout.Icon>\\n\\t\\t<Callout.Text>\\n\\t\\t\\tYou will need <Link href=\\\"#\\\">admin privileges</Link> to install and access\\n\\t\\t\\tthis application.\\n\\t\\t</Callout.Text>\\n\\t</Callout.Root>\\n\\n\\t<Callout.Root variant=\\\"surface\\\">\\n\\t\\t<Callout.Icon>\\n\\t\\t\\t<InfoCircledIcon />\\n\\t\\t</Callout.Icon>\\n\\t\\t<Callout.Text>\\n\\t\\t\\tYou will need <Link href=\\\"#\\\">admin privileges</Link> to install and access\\n\\t\\t\\tthis application.\\n\\t\\t</Callout.Text>\\n\\t</Callout.Root>\\n\\n\\t<Callout.Root variant=\\\"outline\\\">\\n\\t\\t<Callout.Icon>\\n\\t\\t\\t<InfoCircledIcon />\\n\\t\\t</Callout.Icon>\\n\\t\\t<Callout.Text>\\n\\t\\t\\tYou will need <Link href=\\\"#\\\">admin privileges</Link> to install and access\\n\\t\\t\\tthis application.\\n\\t\\t</Callout.Text>\\n\\t</Callout.Root>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Navigation Menu Component Structure\nDESCRIPTION: Example showing the complete anatomy of the Navigation Menu component with all possible parts including root, list, items, triggers, content, sub-menus, and viewport.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/navigation-menu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { NavigationMenu } from \"radix-ui\";\n\nexport default () => (\n\t<NavigationMenu.Root>\n\t\t<NavigationMenu.List>\n\t\t\t<NavigationMenu.Item>\n\t\t\t\t<NavigationMenu.Trigger />\n\t\t\t\t<NavigationMenu.Content>\n\t\t\t\t\t<NavigationMenu.Link />\n\t\t\t\t</NavigationMenu.Content>\n\t\t\t</NavigationMenu.Item>\n\n\t\t\t<NavigationMenu.Item>\n\t\t\t\t<NavigationMenu.Link />\n\t\t\t</NavigationMenu.Item>\n\n\t\t\t<NavigationMenu.Item>\n\t\t\t\t<NavigationMenu.Trigger />\n\t\t\t\t<NavigationMenu.Content>\n\t\t\t\t\t<NavigationMenu.Sub>\n\t\t\t\t\t\t<NavigationMenu.List />\n\t\t\t\t\t\t<NavigationMenu.Viewport />\n\t\t\t\t\t</NavigationMenu.Sub>\n\t\t\t\t</NavigationMenu.Content>\n\t\t\t</NavigationMenu.Item>\n\n\t\t\t<NavigationMenu.Indicator />\n\t\t</NavigationMenu.List>\n\n\t\t<NavigationMenu.Viewport />\n\t</NavigationMenu.Root>\n)\n```\n\n----------------------------------------\n\nTITLE: HoverCard Content with Size Constraints in React JSX\nDESCRIPTION: This JSX snippet demonstrates how to use the Radix UI HoverCard component and style its content to constrain its width and maximum height using CSS custom properties. It imports the HoverCard component from 'radix-ui' and renders a HoverCard.Root containing a Trigger and a Content component, applying the 'HoverCardContent' class to the Content component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/hover-card.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HoverCard } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<HoverCard.Root>\n\t\t<HoverCard.Trigger>…</HoverCard.Trigger>\n\t\t<HoverCard.Portal>\n\t\t\t<HoverCard.Content __className__=\"HoverCardContent\" sideOffset={5}>\n\t\t\t\t…\n\t\t\t</HoverCard.Content>\n\t\t</HoverCard.Portal>\n\t</HoverCard.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled DropdownMenu Items in React and CSS\nDESCRIPTION: This example shows how to add special styles to disabled items in a DropdownMenu using the data-disabled attribute.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dropdown-menu.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { DropdownMenu } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<DropdownMenu.Root>\n\t\t<DropdownMenu.Trigger>…</DropdownMenu.Trigger>\n\t\t<DropdownMenu.Portal>\n\t\t\t<DropdownMenu.Content>\n\t\t\t\t<DropdownMenu.Item __className__=\"DropdownMenuItem\" __disabled__>\n\t\t\t\t\t…\n\t\t\t\t</DropdownMenu.Item>\n\t\t\t\t<DropdownMenu.Item className=\"DropdownMenuItem\">…</DropdownMenu.Item>\n\t\t\t</DropdownMenu.Content>\n\t\t</DropdownMenu.Portal>\n\t</DropdownMenu.Root>\n);\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.DropdownMenuItem[__data-disabled__] {\n\tcolor: gainsboro;\n}\n```\n\n----------------------------------------\n\nTITLE: Switch Component with High Contrast in JSX\nDESCRIPTION: Shows the Switch component with and without the highContrast prop for different colors, demonstrating increased color contrast in light mode.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/switch.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid rows=\"2\" gapX=\"2\" gapY=\"3\" display=\"inline-grid\" flow=\"column\">\n\t<Switch color=\"indigo\" defaultChecked />\n\t<Switch color=\"indigo\" defaultChecked highContrast />\n\t<Switch color=\"cyan\" defaultChecked />\n\t<Switch color=\"cyan\" defaultChecked highContrast />\n\t<Switch color=\"orange\" defaultChecked />\n\t<Switch color=\"orange\" defaultChecked highContrast />\n\t<Switch color=\"crimson\" defaultChecked />\n\t<Switch color=\"crimson\" defaultChecked highContrast />\n\t<Switch color=\"gray\" defaultChecked />\n\t<Switch color=\"gray\" defaultChecked highContrast />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Open Items in Accordion\nDESCRIPTION: Example of setting the type prop to 'multiple' to allow multiple items to be open simultaneously.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/accordion.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion.Root type=\"__multiple__\">\n\t<Accordion.Item value=\"item-1\">…</Accordion.Item>\n\t<Accordion.Item value=\"item-2\">…</Accordion.Item>\n</Accordion.Root>\n```\n\n----------------------------------------\n\nTITLE: High-contrast Slider Examples in React\nDESCRIPTION: Demonstrates the 'highContrast' prop which increases color contrast in light mode. Shows comparison between regular and high contrast variants of different colors.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/slider.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid columns=\"2\" gap=\"4\">\n\t<Slider defaultValue={[10]} color=\"indigo\" />\n\t<Slider defaultValue={[10]} color=\"indigo\" highContrast />\n\t<Slider defaultValue={[30]} color=\"cyan\" />\n\t<Slider defaultValue={[30]} color=\"cyan\" highContrast />\n\t<Slider defaultValue={[50]} color=\"orange\" />\n\t<Slider defaultValue={[50]} color=\"orange\" highContrast />\n\t<Slider defaultValue={[70]} color=\"crimson\" />\n\t<Slider defaultValue={[70]} color=\"crimson\" highContrast />\n\t<Slider defaultValue={[90]} color=\"gray\" />\n\t<Slider defaultValue={[90]} color=\"gray\" highContrast />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Setting Color for Checkbox Group - React\nDESCRIPTION: This snippet demonstrates how to use the `color` prop to assign distinctive colors to each Checkbox Group component. Various color options are illustrated, enhancing the visual appeal according to specified themes.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox-group.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"2\">\n\t<CheckboxGroup.Root color=\"indigo\" defaultValue=\"1\">\n\t\t<CheckboxGroup.Item value=\"1\" />\n\t</CheckboxGroup.Root>\n\n\t<CheckboxGroup.Root color=\"cyan\" defaultValue=\"1\">\n\t\t<CheckboxGroup.Item value=\"1\" />\n\t</CheckboxGroup.Root>\n\n\t<CheckboxGroup.Root color=\"orange\" defaultValue=\"1\">\n\t\t<CheckboxGroup.Item value=\"1\" />\n\t</CheckboxGroup.Root>\n\n\t<CheckboxGroup.Root color=\"crimson\" defaultValue=\"1\">\n\t\t<CheckboxGroup.Item value=\"1\" />\n\t</CheckboxGroup.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Radio Button Sizes in JSX\nDESCRIPTION: This example shows how to use the 'size' prop to control the size of radio buttons. It displays three pairs of radio buttons in different sizes: small, medium, and large.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"center\" gap=\"4\">\n\t<Flex gap=\"2\">\n\t\t<Radio size=\"1\" name=\"size-1\" value=\"1\" defaultChecked />\n\t\t<Radio size=\"1\" name=\"size-1\" value=\"2\" />\n\t</Flex>\n\n\t<Flex gap=\"2\">\n\t\t<Radio size=\"2\" name=\"size-2\" value=\"1\" defaultChecked />\n\t\t<Radio size=\"2\" name=\"size-2\" value=\"2\" />\n\t</Flex>\n\n\t<Flex gap=\"2\">\n\t\t<Radio size=\"3\" name=\"size-3\" value=\"1\" defaultChecked />\n\t\t<Radio size=\"3\" name=\"size-3\" value=\"2\" />\n\t</Flex>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Preventing Thumb Overlap\nDESCRIPTION: Shows how to implement a minimum distance between thumbs using the minStepsBetweenThumbs prop, ensuring thumbs cannot have equal values.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/slider.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Slider } from \"radix-ui\";\n\nexport default () => (\n\t<Slider.Root defaultValue={[25, 75]} step={10} __minStepsBetweenThumbs__={1}>\n\t\t<Slider.Track>\n\t\t\t<Slider.Range />\n\t\t</Slider.Track>\n\t\t<Slider.Thumb />\n\t\t<Slider.Thumb />\n\t</Slider.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying a Basic Callout Component in React\nDESCRIPTION: This snippet shows the basic structure of a callout component using Radix UI. It includes an icon and text to deliver a message. The `Callout.Root` acts as the container with `Callout.Icon` and `Callout.Text` as children. No additional props are specified, so default styles are applied. Prerequisites include the installation of Radix UI components and icons like `InfoCircledIcon`.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/callout.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout.Root>\\n\\t<Callout.Icon>\\n\\t\\t<InfoCircledIcon />\\n\\t</Callout.Icon>\\n\\t<Callout.Text>\\n\\t\\tYou will need admin privileges to install and access this application.\\n\\t</Callout.Text>\\n</Callout.Root>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Button with asChild Prop\nDESCRIPTION: Example of implementing a flexible button component using Slot for dynamic rendering based on asChild prop\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/utilities/slot.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { Slot } from \"radix-ui\";\n\nfunction Button({ asChild, ...props }) {\n\tconst Comp = asChild ? Slot.Root : \"button\";\n\treturn <Comp {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Truncated Link Component\nDESCRIPTION: Demonstrates the `truncate` prop to truncate the text within a Radix UI Link component with an ellipsis when it exceeds the container's width. A `maxWidth` is applied to the Flex container to constrain the link's width.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/link.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex maxWidth=\"150px\">\n\t<Link href=\"#\" truncate>\n\t\tSign up to the newsletter\n\t</Link>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Card as a Link with 'asChild' Prop - JSX\nDESCRIPTION: This snippet demonstrates how to render the Radix UI Card component as a link using the `asChild` prop.  This is useful for creating interactive cards that navigate to other pages or sections.  Interactive states like hover and focus are automatically styled.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/card.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n\"<Box maxWidth=\\\"350px\\\">\\n\\t<Card asChild>\\n\\t\t<a href=\\\"#\\\">\\n\\t\t\t<Text as=\\\"div\\\" size=\\\"2\\\" weight=\\\"bold\\\">\\n\\t\t\t\tQuick start\\n\\t\t\t</Text>\\n\\t\t\t<Text as=\\\"div\\\" color=\\\"gray\\\" size=\\\"2\\\">\\n\\t\t\t\tStart building your next project in minutes\\n\\t\t\t</Text>\\n\\t\t</a>\\n\\t</Card>\\n</Box>\"\n```\n\n----------------------------------------\n\nTITLE: Adjusting Radio Card Colors in React with Radix\nDESCRIPTION: Explores the \"color\" prop, allowing developers to set the theme color of Radio Cards in Radix UI. The snippet highlights how different color options can be applied to visually distinguish cards according to user preference or branding requirements. Integration of Radix UI in a React project is necessary.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio-cards.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\" maxWidth=\"200px\">\\n\\t<RadioCards.Root defaultValue=\"1\" color=\"indigo\">\\n\\t\\t<RadioCards.Item value=\"1\">8-core CPU</RadioCards.Item>\\n\\t</RadioCards.Root>\\n\\n\\t<RadioCards.Root defaultValue=\"1\" color=\"cyan\">\\n\\t\\t<RadioCards.Item value=\"1\">8-core CPU</RadioCards.Item>\\n\\t</RadioCards.Root>\\n\\n\\t<RadioCards.Root defaultValue=\"1\" color=\"orange\">\\n\\t\\t<RadioCards.Item value=\"1\">8-core CPU</RadioCards.Item>\\n\\t</RadioCards.Root>\\n\\n\\t<RadioCards.Root defaultValue=\"1\" color=\"crimson\">\\n\\t\\t<RadioCards.Item value=\"1\">8-core CPU</RadioCards.Item>\\n\\t</RadioCards.Root>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Controlled Toggle Group Example\nDESCRIPTION: This example demonstrates how to create a controlled ToggleGroup component in React. The `value` and `onValueChange` props are used to manage the state of the ToggleGroup, ensuring there's always a selected value.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toggle-group.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { ToggleGroup } from \"radix-ui\";\n\nexport default () => {\n\tconst [value, setValue] = React.useState(\"left\");\n\n\treturn (\n\t\t<ToggleGroup.Root\n\t\t\ttype=\"single\"\n\t\t\tvalue={value}\n\t\t\tonValueChange={(value) => {\n\t\t\t\tif (value) setValue(value);\n\t\t\t}}\n\t\t>\n\t\t\t<ToggleGroup.Item value=\"left\">\n\t\t\t\t<TextAlignLeftIcon />\n\t\t\t</ToggleGroup.Item>\n\t\t\t<ToggleGroup.Item value=\"center\">\n\t\t\t\t<TextAlignCenterIcon />\n\t\t\t</ToggleGroup.Item>\n\t\t\t<ToggleGroup.Item value=\"right\">\n\t\t\t\t<TextAlignRightIcon />\n\t\t\t</ToggleGroup.Item>\n\t\t</ToggleGroup.Root>\n\t);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Size Variants of Segmented Control in JSX\nDESCRIPTION: This example shows how to use the 'size' prop to control the size of the Segmented Control. It demonstrates three different sizes: 1, 2, and 3.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/segmented-control.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"start\" direction=\"column\" gap=\"4\">\n\t<SegmentedControl.Root defaultValue=\"inbox\" size=\"1\">\n\t\t<SegmentedControl.Item value=\"inbox\">Inbox</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"drafts\">Drafts</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"sent\">Sent</SegmentedControl.Item>\n\t</SegmentedControl.Root>\n\n\t<SegmentedControl.Root defaultValue=\"inbox\" size=\"2\">\n\t\t<SegmentedControl.Item value=\"inbox\">Inbox</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"drafts\">Drafts</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"sent\">Sent</SegmentedControl.Item>\n\t</SegmentedControl.Root>\n\n\t<SegmentedControl.Root defaultValue=\"inbox\" size=\"3\">\n\t\t<SegmentedControl.Item value=\"inbox\">Inbox</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"drafts\">Drafts</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"sent\">Sent</SegmentedControl.Item>\n\t</SegmentedControl.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: High-Contrast Checkbox Cards in React\nDESCRIPTION: Demonstrates the use of high-contrast mode for improved visual accessibility across different color themes\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox-cards.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid columns=\"2\" gap=\"3\" display=\"inline-grid\">\n\t<CheckboxCards.Root defaultValue={[\"1\"]} color=\"indigo\">\n\t\t<CheckboxCards.Item value=\"1\">Agree to Terms</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n\n\t<CheckboxCards.Root defaultValue={[\"1\"]} color=\"indigo\" highContrast>\n\t\t<CheckboxCards.Item value=\"1\">Agree to Terms</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n\n\t<CheckboxCards.Root defaultValue={[\"1\"]} color=\"cyan\">\n\t\t<CheckboxCards.Item value=\"1\">Agree to Terms</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n\n\t<CheckboxCards.Root defaultValue={[\"1\"]} color=\"cyan\" highContrast>\n\t\t<CheckboxCards.Item value=\"1\">Agree to Terms</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n\n\t<CheckboxCards.Root defaultValue={[\"1\"]} color=\"orange\">\n\t\t<CheckboxCards.Item value=\"1\">Agree to Terms</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n\n\t<CheckboxCards.Root defaultValue={[\"1\"]} color=\"orange\" highContrast>\n\t\t<CheckboxCards.Item value=\"1\">Agree to Terms</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n\n\t<CheckboxCards.Root defaultValue={[\"1\"]} color=\"crimson\">\n\t\t<CheckboxCards.Item value=\"1\">Agree to Terms</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n\n\t<CheckboxCards.Root defaultValue={[\"1\"]} color=\"crimson\" highContrast>\n\t\t<CheckboxCards.Item value=\"1\">Agree to Terms</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Setting Dark Mode Appearance in Radix UI Theme\nDESCRIPTION: Basic example showing how to force dark mode appearance by passing the 'appearance' prop to the Theme component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/dark-mode.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Theme appearance=\"dark\">\n\t<MyApp />\n</Theme>\n```\n\n----------------------------------------\n\nTITLE: Rendering Soft Icon Buttons and Menu Items with Gray/Pink Colors in JSX\nDESCRIPTION: This code demonstrates how to implement soft icon buttons and menu items using gray and pink colors from the Radix color scale. It shows proper usage of steps 3-5 for component backgrounds in normal, hover, and selected states.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/palette-composition/understanding-the-scale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex wrap=\"wrap\" gap=\"5\" my=\"5\">\n  <IconButton variant=\"soft\" color=\"gray\"><PlusIcon /></IconButton>\n  <IconButton variant=\"soft\" color=\"pink\"><PlusIcon /></IconButton>\n\n{' '}\n\n<Flex direction=\"column\" maxWidth=\"max-content\">\n\t<MenuItemButton color=\"gray\" data-state=\"active\">\n\t\tMenu item\n\t</MenuItemButton>\n\t<MenuItemButton color=\"gray\">Second menu item</MenuItemButton>\n\t<MenuItemButton color=\"gray\">Third menu item</MenuItemButton>\n</Flex>\n\n  <Flex direction=\"column\" maxWidth=\"max-content\">\n    <MenuItemButton color=\"pink\" data-state=\"active\">\n      Menu item\n    </MenuItemButton>\n    <MenuItemButton color=\"pink\">\n      Second menu item\n    </MenuItemButton>\n    <MenuItemButton color=\"pink\">\n      Third menu item\n    </MenuItemButton>\n  </Flex>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Custom Duration\nDESCRIPTION: Shows how to use the duration prop to indicate the approximate time for an indeterminate task\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/progress.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Progress duration=\"30s\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and using Radix Colors in Vanilla CSS\nDESCRIPTION: This snippet demonstrates how to import Radix Colors CSS files and use the colors as CSS variables. It includes examples for both light and dark themes. The light scales apply to `:root` and `.light` classes, while dark scales apply to `.dark` class.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/overview/usage.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Import only the scales you need */\n@import \"@radix-ui/colors/gray.css\";\n@import \"@radix-ui/colors/blue.css\";\n@import \"@radix-ui/colors/green.css\";\n@import \"@radix-ui/colors/red.css\";\n@import \"@radix-ui/colors/gray-dark.css\";\n@import \"@radix-ui/colors/blue-dark.css\";\n@import \"@radix-ui/colors/green-dark.css\";\n@import \"@radix-ui/colors/red-dark.css\";\n\n/* Use the colors as CSS variables */\n.button {\n\tbackground-color: var(--blue-4);\n\tcolor: var(--blue-11);\n\tborder-color: var(--blue-7);\n}\n.button:hover {\n\tbackground-color: var(--blue-5);\n\tborder-color: var(--blue-8);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Radius of Segmented Control in JSX\nDESCRIPTION: This example shows how to use the 'radius' prop to assign specific radius values to the Segmented Control. It demonstrates five different radius options: none, small, medium, large, and full.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/segmented-control.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"start\" direction=\"column\" gap=\"4\">\n\t<SegmentedControl.Root defaultValue=\"inbox\" radius=\"none\">\n\t\t<SegmentedControl.Item value=\"inbox\">Inbox</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"drafts\">Drafts</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"sent\">Sent</SegmentedControl.Item>\n\t</SegmentedControl.Root>\n\n\t<SegmentedControl.Root defaultValue=\"inbox\" radius=\"small\">\n\t\t<SegmentedControl.Item value=\"inbox\">Inbox</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"drafts\">Drafts</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"sent\">Sent</SegmentedControl.Item>\n\t</SegmentedControl.Root>\n\n\t<SegmentedControl.Root defaultValue=\"inbox\" radius=\"medium\">\n\t\t<SegmentedControl.Item value=\"inbox\">Inbox</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"drafts\">Drafts</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"sent\">Sent</SegmentedControl.Item>\n\t</SegmentedControl.Root>\n\n\t<SegmentedControl.Root defaultValue=\"inbox\" radius=\"large\">\n\t\t<SegmentedControl.Item value=\"inbox\">Inbox</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"drafts\">Drafts</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"sent\">Sent</SegmentedControl.Item>\n\t</SegmentedControl.Root>\n\n\t<SegmentedControl.Root defaultValue=\"inbox\" radius=\"full\">\n\t\t<SegmentedControl.Item value=\"inbox\">Inbox</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"drafts\">Drafts</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"sent\">Sent</SegmentedControl.Item>\n\t</SegmentedControl.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Long-form Content with Different Text Sizes in JSX\nDESCRIPTION: Example showing how sizes 2-4 are designed to work well for long-form content, with different paragraph sizes demonstrating appropriate typography for extended text.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Text as=\"p\" mb=\"5\" size=\"4\">\n  The goal of typography is to relate font size, line height, and line width in a proportional way that maximizes beauty and makes reading easier and more pleasant. The question is: What proportion(s) will give us the best results? The golden ratio is often observed in nature where beauty and utility intersect; perhaps we can use this \"divine\" proportion to enhance these attributes in our typography.\n</Text>\n\n<Text as=\"p\" mb=\"5\" size=\"3\">\n  The goal of typography is to relate font size, line height, and line width in a proportional way that maximizes beauty and makes reading easier and more pleasant. The question is: What proportion(s) will give us the best results? The golden ratio is often observed in nature where beauty and utility intersect; perhaps we can use this \"divine\" proportion to enhance these attributes in our typography.\n</Text>\n\n<Text as=\"p\" size=\"2\" color=\"gray\">\n  The goal of typography is to relate font size, line height, and line width in a proportional way that maximizes beauty and makes reading easier and more pleasant. The question is: What proportion(s) will give us the best results? The golden ratio is often observed in nature where beauty and utility intersect; perhaps we can use this \"divine\" proportion to enhance these attributes in our typography.\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom DropdownMenu API with Abstract Components\nDESCRIPTION: Shows how to create a custom API by abstracting Radix UI DropdownMenu primitive parts into reusable components, including automatic arrow placement and item indicators for checkbox and radio items.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dropdown-menu.mdx#2025-04-21_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\tDropdownMenu,\n\tDropdownMenuTrigger,\n\tDropdownMenuContent,\n\tDropdownMenuLabel,\n\tDropdownMenuItem,\n\tDropdownMenuGroup,\n\tDropdownMenuCheckboxItem,\n\tDropdownMenuRadioGroup,\n\tDropdownMenuRadioItem,\n\tDropdownMenuSeparator,\n} from \"./your-dropdown-menu\";\n\nexport default () => (\n\t<DropdownMenu>\n\t\t<DropdownMenuTrigger>DropdownMenu trigger</DropdownMenuTrigger>\n\t\t<DropdownMenuContent>\n\t\t\t<DropdownMenuItem>Item</DropdownMenuItem>\n\t\t\t<DropdownMenuLabel>Label</DropdownMenuLabel>\n\t\t\t<DropdownMenuGroup>Group</DropdownMenuGroup>\n\t\t\t<DropdownMenuCheckboxItem>CheckboxItem</DropdownMenuCheckboxItem>\n\t\t\t<DropdownMenuSeparator>Separator</DropdownMenuSeparator>\n\t\t\t<DropdownMenuRadioGroup>\n\t\t\t\t<DropdownMenuRadioItem>RadioItem</DropdownMenuRadioItem>\n\t\t\t\t<DropdownMenuRadioItem>RadioItem</DropdownMenuRadioItem>\n\t\t\t</DropdownMenuRadioGroup>\n\t\t</DropdownMenuContent>\n\t</DropdownMenu>\n);\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// your-dropdown-menu.jsx\nimport * as React from \"react\";\nimport { DropdownMenu as DropdownMenuPrimitive } from \"radix-ui\";\nimport { CheckIcon, DividerHorizontalIcon } from \"@radix-ui/react-icons\";\n\nexport const DropdownMenu = DropdownMenuPrimitive.Root;\nexport const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;\n\nexport const DropdownMenuContent = React.forwardRef(\n\t({ children, ...props }, forwardedRef) => {\n\t\treturn (\n\t\t\t<DropdownMenuPrimitive.Portal>\n\t\t\t\t<DropdownMenuPrimitive.Content {...props} ref={forwardedRef}>\n\t\t\t\t\t{children}\n\t\t\t\t\t<DropdownMenuPrimitive.Arrow />\n\t\t\t\t</DropdownMenuPrimitive.Content>\n\t\t\t</DropdownMenuPrimitive.Portal>\n\t\t);\n\t},\n);\n\nexport const DropdownMenuLabel = DropdownMenuPrimitive.Label;\nexport const DropdownMenuItem = DropdownMenuPrimitive.Item;\nexport const DropdownMenuGroup = DropdownMenuPrimitive.Group;\n\nexport const DropdownMenuCheckboxItem = React.forwardRef(\n\t({ children, ...props }, forwardedRef) => {\n\t\treturn (\n\t\t\t<DropdownMenuPrimitive.CheckboxItem {...props} ref={forwardedRef}>\n\t\t\t\t{children}\n\t\t\t\t<DropdownMenuPrimitive.ItemIndicator>\n\t\t\t\t\t{props.checked === \"indeterminate\" && <DividerHorizontalIcon />}\n\t\t\t\t\t{props.checked === true && <CheckIcon />}\n\t\t\t\t</DropdownMenuPrimitive.ItemIndicator>\n\t\t\t</DropdownMenuPrimitive.CheckboxItem>\n\t\t);\n\t},\n);\n\nexport const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;\n\nexport const DropdownMenuRadioItem = React.forwardRef(\n\t({ children, ...props }, forwardedRef) => {\n\t\treturn (\n\t\t\t<DropdownMenuPrimitive.RadioItem {...props} ref={forwardedRef}>\n\t\t\t\t{children}\n\t\t\t\t<DropdownMenuPrimitive.ItemIndicator>\n\t\t\t\t\t<CheckIcon />\n\t\t\t\t</DropdownMenuPrimitive.ItemIndicator>\n\t\t\t</DropdownMenuPrimitive.RadioItem>\n\t\t);\n\t},\n);\n\nexport const DropdownMenuSeparator = DropdownMenuPrimitive.Separator;\n```\n\n----------------------------------------\n\nTITLE: Using Callout as an Alert in React\nDESCRIPTION: Explains the integration of a WAI-ARIA `alert` role for callout components to immediately capture users' attention in critical scenarios. This feature is crucial when displaying urgent messages such as errors. Required configurations involve setting the `role` attribute to `alert`, and this technique requires Radix UI and familiarity with ARIA roles.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/callout.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout.Root color=\\\"red\\\" role=\\\"alert\\\">\\n\\t<Callout.Icon>\\n\\t\\t<ExclamationTriangleIcon />\\n\\t</Callout.Icon>\\n\\t<Callout.Text>\\n\\t\\tAccess denied. Please contact the network administrator to view this page.\\n\\t</Callout.Text>\\n</Callout.Root>\n```\n\n----------------------------------------\n\nTITLE: Component-level Theme Overrides in React\nDESCRIPTION: This example demonstrates how to override theme configuration for specific components by passing supported props directly to those components. It shows custom styling for Switch and Button components.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/theme.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box maxWidth=\"400px\">\n\t<Card size=\"2\">\n\t\t<Flex direction=\"column\" gap=\"3\">\n\t\t\t<Grid gap=\"1\">\n\t\t\t\t<Text as=\"div\" weight=\"bold\" size=\"2\" mb=\"1\">\n\t\t\t\t\tFeedback\n\t\t\t\t</Text>\n\t\t\t\t<TextArea placeholder=\"Write your feedback…\" />\n\t\t\t</Grid>\n\t\t\t<Flex asChild justify=\"between\">\n\t\t\t\t<label>\n\t\t\t\t\t<Text color=\"gray\" size=\"2\">\n\t\t\t\t\t\tAttach screenshot?\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Switch\n\t\t\t\t\t\tsize=\"1\"\n\t\t\t\t\t\t__color__=\"orange\"\n\t\t\t\t\t\t__radius__=\"full\"\n\t\t\t\t\t\tdefaultChecked\n\t\t\t\t\t/>\n\t\t\t\t</label>\n\t\t\t</Flex>\n\t\t\t<Grid columns=\"2\" gap=\"2\">\n\t\t\t\t<Button variant=\"surface\">Back</Button>\n\t\t\t\t<Button __color__=\"cyan\" __radius__=\"full\">\n\t\t\t\t\tSend\n\t\t\t\t</Button>\n\t\t\t</Grid>\n\t\t</Flex>\n\t</Card>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Defining ItemIndicator Properties in React\nDESCRIPTION: This snippet details properties for the ItemIndicator component which visually indicates if a parent CheckboxItem or RadioItem is checked. It includes properties such as 'asChild' and 'forceMount', explaining their utility in styling and rendering logic within a React application.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<PropsTable\n\tdata={[\n\t\t{\n\t\t\tname: \"asChild\",\n\t\t\trequired: false,\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: \"false\",\n\t\t\tdescription: (\n\t\t\t\t<>Change the default rendered element for the one passed as a child,\n\t\t\t\tmerging their props and behavior.<br /><br />Read our <a href=\"../guides/composition\">Composition</a> guide for more details.</>\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\tname: \"forceMount\",\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: (\n\t\t\t\t<span>Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries.</span>\n\t\t\t),\n\t\t},\n\t]}/>\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Button in JSX\nDESCRIPTION: This snippet demonstrates the basic usage of the `IconButton` component with a `MagnifyingGlassIcon` inside. It shows how to create a simple icon button using the Radix UI library.  The MagnifyingGlassIcon is likely a component defined elsewhere and imported for use here.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/icon-button.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n\"<IconButton>\\n\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n</IconButton>\"\n```\n\n----------------------------------------\n\nTITLE: Duplicate Toasts Implementation in React\nDESCRIPTION: This snippet illustrates how to render multiple instances of the same toast by using React state to manage the number of toasts to display.  Each time the save button is clicked, a new toast is rendered.  This demonstrates a declarative approach to toast duplication.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toast.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => {\n\tconst [savedCount, setSavedCount] = React.useState(0);\n\n\treturn (\n\t\t<div>\n\t\t\t<form onSubmit={() => setSavedCount((count) => count + 1)}>\n\t\t\t\t{/* ... */}\n\t\t\t\t<button>save</button>\n\t\t\t</form>\n\n\t\t\t{Array.from({ length: savedCount }).map((_, index) => (\n\t\t\t\t<Toast.Root key={index}>\n\t\t\t\t\t<Toast.Description>Saved!</Toast.Description>\n\t\t\t\t</Toast.Root>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Popover Component in JSX\nDESCRIPTION: This JSX snippet illustrates how to add custom CSS class names to the Popover component elements, allowing for personalized styling of the Popover.Trigger, Popover.Content, and Popover.Arrow.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/overview/getting-started.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport * as React from \"react\";\nimport { Popover } from \"radix-ui\";\nimport \"./styles.css\";\n\nconst PopoverDemo = () => (\n\t<Popover.Root>\n\t\t<Popover.Trigger __className__=\"PopoverTrigger\">Show info</Popover.Trigger>\n\t\t<Popover.Portal>\n\t\t\t<Popover.Content __className__=\"PopoverContent\">\n\t\t\t\tSome content\n\t\t\t\t<Popover.Arrow __className__=\"PopoverArrow\" />\n\t\t\t</Popover.Content>\n\t\t</Popover.Portal>\n\t</Popover.Root>\n);\n\nexport default PopoverDemo;\n```\n\n----------------------------------------\n\nTITLE: Enhancing Contrast for Buttons in JSX\nDESCRIPTION: This code snippet demonstrates the use of the 'highContrast' prop to improve button visibility against backgrounds. It shows grey-colored buttons with and without high contrast, provided in 'classic', 'solid', 'soft', 'surface', and 'outline' variants.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/button.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\">\n\t<Flex gap=\"3\">\n\t\t<Button color=\"gray\" variant=\"classic\">\n\t\t\tEdit profile\n\t\t</Button>\n\t\t<Button color=\"gray\" variant=\"solid\">\n\t\t\tEdit profile\n\t\t</Button>\n\t\t<Button color=\"gray\" variant=\"soft\">\n\t\t\tEdit profile\n\t\t</Button>\n\t\t<Button color=\"gray\" variant=\"surface\">\n\t\t\tEdit profile\n\t\t</Button>\n\t\t<Button color=\"gray\" variant=\"outline\">\n\t\t\tEdit profile\n\t\t</Button>\n\t</Flex>\n\t<Flex gap=\"3\">\n\t\t<Button color=\"gray\" variant=\"classic\" highContrast>\n\t\t\tEdit profile\n\t\t</Button>\n\t\t<Button color=\"gray\" variant=\"solid\" highContrast>\n\t\t\tEdit profile\n\t\t</Button>\n\t\t<Button color=\"gray\" variant=\"soft\" highContrast>\n\t\t\tEdit profile\n\t\t</Button>\n\t\t<Button color=\"gray\" variant=\"surface\" highContrast>\n\t\t\tEdit profile\n\t\t</Button>\n\t\t<Button color=\"gray\" variant=\"outline\" highContrast>\n\t\t\tEdit profile\n\t\t</Button>\n\t</Flex>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Defining Menubar CheckboxItem Props\nDESCRIPTION: Props configuration for a checkbox-style menu item with controllable checked state, disabled status, and event handling\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/menubar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  asChild?: boolean\n  checked?: boolean | 'indeterminate'\n  onCheckedChange?: (checked: boolean) => void\n  disabled?: boolean\n  onSelect?: (event: Event) => void\n  textValue?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RadioGroup Properties in React\nDESCRIPTION: This snippet defines properties for the RadioGroup component that allows grouping multiple radio items. It includes properties such as 'asChild', 'value', and 'onValueChange' which dictate the functionality of the radio group in a controlled manner within a React application.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<PropsTable\n\tdata={[\n\t\t{\n\t\t\tname: \"asChild\",\n\t\t\trequired: false,\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: \"false\",\n\t\t\tdescription: (\n\t\t\t\t<>Change the default rendered element for the one passed as a child,\n\t\t\t\tmerging their props and behavior.<br /><br />Read our <a href=\"../guides/composition\">Composition</a> guide for more details.</>\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\tname: \"value\",\n\t\t\ttype: \"string\",\n\t\t\tdescription: \"The value of the selected item in the group.\",\n\t\t},\n\t\t{\n\t\t\tname: \"onValueChange\",\n\t\t\ttype: \"(value: string) => void\",\n\t\t\ttypeSimple: \"function\",\n\t\t\tdescription: \"Event handler called when the value changes.\"\n\t\t},\n\t]}/>\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Hover Card Component\nDESCRIPTION: Command to install the Hover Card component package from npm.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/hover-card.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-hover-card\n```\n\n----------------------------------------\n\nTITLE: Applying Colors to Radio Group in JSX\nDESCRIPTION: Demonstrates the use of the 'color' prop to assign specific colors to radio buttons.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio-group.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"2\">\n\t<RadioGroup.Root color=\"indigo\" defaultValue=\"1\">\n\t\t<RadioGroup.Item value=\"1\" />\n\t</RadioGroup.Root>\n\n\t<RadioGroup.Root color=\"cyan\" defaultValue=\"1\">\n\t\t<RadioGroup.Item value=\"1\" />\n\t</RadioGroup.Root>\n\n\t<RadioGroup.Root color=\"orange\" defaultValue=\"1\">\n\t\t<RadioGroup.Item value=\"1\" />\n\t</RadioGroup.Root>\n\n\t<RadioGroup.Root color=\"crimson\" defaultValue=\"1\">\n\t\t<RadioGroup.Item value=\"1\" />\n\t</RadioGroup.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Implementing DropdownMenu with Complex Items in React\nDESCRIPTION: Shows how to add decorative elements like images to dropdown menu items. The example demonstrates creating menu items with images alongside text content.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dropdown-menu.mdx#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DropdownMenu } from \"radix-ui\";\n\nexport default () => (\n\t<DropdownMenu.Root>\n\t\t<DropdownMenu.Trigger>…</DropdownMenu.Trigger>\n\t\t<DropdownMenu.Portal>\n\t\t\t<DropdownMenu.Content>\n\t\t\t\t<DropdownMenu.Item>\n\t\t\t\t\t<img src=\"…\" />\n\t\t\t\t\tAdolfo Hess\n\t\t\t\t</DropdownMenu.Item>\n\t\t\t\t<DropdownMenu.Item>\n\t\t\t\t\t<img src=\"…\" />\n\t\t\t\t\tMiyah Myles\n\t\t\t\t</DropdownMenu.Item>\n\t\t\t</DropdownMenu.Content>\n\t\t</DropdownMenu.Portal>\n\t</DropdownMenu.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Sized Link Components\nDESCRIPTION: Demonstrates the usage of the `size` prop to control the size of the Radix UI Link component. Different size values are used to display links with varying text sizes and associated line height and letter spacing.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/link.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\">\n\t<Link href=\"#\" size=\"1\">\n\t\tSign up\n\t</Link>\n\t<Link href=\"#\" size=\"2\">\n\t\tSign up\n\t</Link>\n\t<Link href=\"#\" size=\"3\">\n\t\tSign up\n\t</Link>\n\t<Link href=\"#\" size=\"4\">\n\t\tSign up\n\t</Link>\n\t<Link href=\"#\" size=\"5\">\n\t\tSign up\n\t</Link>\n\t<Link href=\"#\" size=\"6\">\n\t\tSign up\n\t</Link>\n\t<Link href=\"#\" size=\"7\">\n\t\tSign up\n\t</Link>\n\t<Link href=\"#\" size=\"8\">\n\t\tSign up\n\t</Link>\n\t<Link href=\"#\" size=\"9\">\n\t\tSign up\n\t</Link>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Router Integration with Tab Navigation\nDESCRIPTION: Example showing how to integrate the tab navigation with a router using the asChild prop and NextLink component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/tab-nav.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<TabNav.Root>\n\t<TabNav.Link asChild active={pathname === \"/account\"}>\n\t\t<NextLink href=\"/account\">Account</NextLink>\n\t</TabNav.Link>\n\t<TabNav.Link asChild active={pathname === \"/documents\"}>\n\t\t<NextLink href=\"/documents\">Documents</NextLink>\n\t</TabNav.Link>\n\t<TabNav.Link asChild active={pathname === \"/settings\"}>\n\t\t<NextLink href=\"/settings\">Settings</NextLink>\n\t</TabNav.Link>\n</TabNav.Root>\n```\n\n----------------------------------------\n\nTITLE: Displaying Content with Aspect Ratio in React\nDESCRIPTION: This JSX snippet demonstrates how to use the `AspectRatio` component from Radix UI to display an image with a specified aspect ratio of 16:8. The `ratio` prop controls the aspect ratio, and the `img` element's styles ensure it covers the container while maintaining the specified ratio.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/aspect-ratio.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n\"<AspectRatio ratio={16 / 8}>\\n\\t<img\\n\\t\tsrc=\\\"https://images.unsplash.com/photo-1479030160180-b1860951d696?&auto=format&fit=crop&w=1200&q=80\\\"\\n\\t\talt=\\\"A house in a forest\\\"\\n\\t\tstyle={{\\n\\t\t\tobjectFit: \\\"cover\\\",\\n\\t\t\twidth: \\\"100%\\\",\\n\\t\t\theight: \\\"100%\\\",\\n\\t\t\tborderRadius: \\\"var(--radius-2)\\\",\\n\\t\t}}\\n\\t/>\\n</AspectRatio>\"\n```\n\n----------------------------------------\n\nTITLE: Adding Separators to DropdownMenu in React\nDESCRIPTION: This snippet demonstrates how to use the Separator part to add separators between items in a DropdownMenu.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dropdown-menu.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<DropdownMenu.Root>\n\t<DropdownMenu.Trigger>…</DropdownMenu.Trigger>\n\t<DropdownMenu.Portal>\n\t\t<DropdownMenu.Content>\n\t\t\t<DropdownMenu.Item>…</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Item>…</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Item>…</DropdownMenu.Item>\n\t\t</DropdownMenu.Content>\n\t</DropdownMenu.Portal>\n</DropdownMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Defining Menubar RadioGroup Props\nDESCRIPTION: Props configuration for a radio group component with value selection and change event handling\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/menubar.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  asChild?: boolean\n  value: string\n  onValueChange?: (value: string) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Step Size for Slider\nDESCRIPTION: Demonstrates how to set a custom stepping interval using the step prop, allowing the slider to move in increments of the specified value.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/slider.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Slider } from \"radix-ui\";\n\nexport default () => (\n\t<Slider.Root defaultValue={[50]} __step__={10}>\n\t\t<Slider.Track>\n\t\t\t<Slider.Range />\n\t\t</Slider.Track>\n\t\t<Slider.Thumb />\n\t</Slider.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Slider with Custom Colors in React\nDESCRIPTION: Demonstrates applying different colors to the Slider component using the 'color' prop.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/slider.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"4\" maxWidth=\"300px\">\n\t<Slider defaultValue={[20]} color=\"indigo\" />\n\t<Slider defaultValue={[40]} color=\"cyan\" />\n\t<Slider defaultValue={[60]} color=\"orange\" />\n\t<Slider defaultValue={[80]} color=\"crimson\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Toolbar with DropdownMenu Example\nDESCRIPTION: This code snippet demonstrates how to compose a Radix UI Toolbar with other primitives, specifically the DropdownMenu component. It showcases how to use the `asChild` prop to integrate the DropdownMenu's Trigger within a Toolbar.Button.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toolbar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toolbar, DropdownMenu } from \"radix-ui\";\n\nexport default () => (\n\t<Toolbar.Root>\n\t\t<Toolbar.Button>Action 1</Toolbar.Button>\n\t\t<Toolbar.Separator />\n\t\t<DropdownMenu.Root>\n\t\t\t<Toolbar.Button __asChild__>\n\t\t\t\t<DropdownMenu.Trigger>Trigger</DropdownMenu.Trigger>\n\t\t\t</Toolbar.Button>\n\t\t\t<DropdownMenu.Content>…</DropdownMenu.Content>\n\t\t</DropdownMenu.Root>\n\t</Toolbar.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Radio Group Component in JSX\nDESCRIPTION: Demonstrates the basic usage of the Radio Group component with default values and multiple items.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio-group.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RadioGroup.Root defaultValue=\"1\" name=\"example\">\n\t<RadioGroup.Item value=\"1\">Default</RadioGroup.Item>\n\t<RadioGroup.Item value=\"2\">Comfortable</RadioGroup.Item>\n\t<RadioGroup.Item value=\"3\">Compact</RadioGroup.Item>\n</RadioGroup.Root>\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Checkboxes - React\nDESCRIPTION: This snippet showcases the creation of a Checkbox Group with items that can be disabled using the native `disabled` attribute. Disabled checkboxes visually prevent user interaction while being displayed.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox-group.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"2\">\n\t<CheckboxGroup.Root defaultValue=\"2\">\n\t\t<CheckboxGroup.Item value=\"1\">Off</CheckboxGroup.Item>\n\t\t<CheckboxGroup.Item value=\"2\">On</CheckboxGroup.Item>\n\t</CheckboxGroup.Root>\n\n\t<CheckboxGroup.Root defaultValue=\"2\">\n\t\t<CheckboxGroup.Item value=\"1\" disabled>\n\t\t\tOff\n\t\t</CheckboxGroup.Item>\n\t\t<CheckboxGroup.Item value=\"2\" disabled>\n\t\t\tOn\n\t\t</CheckboxGroup.Item>\n\t</CheckboxGroup.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Setting Visual Style Variants for Code Snippets in JSX\nDESCRIPTION: This snippet demonstrates the use of the 'variant' prop in the 'Code' component to specify different visual styles like solid, soft, outline, and ghost.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/code.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" align=\"start\" gap=\"2\">\n\t<Code variant=\"solid\">console.log()</Code>\n\t<Code variant=\"soft\">console.log()</Code>\n\t<Code variant=\"outline\">console.log()</Code>\n\t<Code variant=\"ghost\">console.log()</Code>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Size for Radix UI Kbd Component in JSX\nDESCRIPTION: This JSX snippet illustrates how to adjust text size of the Kbd component using the `size` prop. It utilizes a Flex container to organize multiple Kbd components with varying sizes. The snippet supports interaction with live and scrollable features, as indicated by `live=true` and `scroll=true`.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/kbd.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" align=\"start\" gap=\"3\">\n\t<Kbd size=\"1\">Shift + Tab</Kbd>\n\t<Kbd size=\"2\">Shift + Tab</Kbd>\n\t<Kbd size=\"3\">Shift + Tab</Kbd>\n\t<Kbd size=\"4\">Shift + Tab</Kbd>\n\t<Kbd size=\"5\">Shift + Tab</Kbd>\n\t<Kbd size=\"6\">Shift + Tab</Kbd>\n\t<Kbd size=\"7\">Shift + Tab</Kbd>\n\t<Kbd size=\"8\">Shift + Tab</Kbd>\n\t<Kbd size=\"9\">Shift + Tab</Kbd>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Defining Select Content Component Props\nDESCRIPTION: Comprehensive props configuration for Select Content with positioning, event handling, and collision management options\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/select.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  asChild?: boolean,\n  onCloseAutoFocus?: (event: Event) => void,\n  onEscapeKeyDown?: (event: KeyboardEvent) => void,\n  position?: \"item-aligned\" | \"popper\",\n  side?: \"top\" | \"right\" | \"bottom\" | \"left\",\n  sideOffset?: number,\n  align?: \"start\" | \"center\" | \"end\"\n}\n```\n\n----------------------------------------\n\nTITLE: Color Customization of Avatars in a Flex Container\nDESCRIPTION: This snippet illustrates the use of the 'color' prop to assign specific colors to Avatar components. It showcases several Avatar components of solid variant with different colors within a Flex container.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/avatar.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"2\">\n\t<Avatar variant=\"solid\" color=\"indigo\" fallback=\"A\" />\n\t<Avatar variant=\"solid\" color=\"cyan\" fallback=\"A\" />\n\t<Avatar variant=\"solid\" color=\"orange\" fallback=\"A\" />\n\t<Avatar variant=\"solid\" color=\"crimson\" fallback=\"A\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Color Styling for Icon Button in JSX\nDESCRIPTION: This snippet shows how to use the `color` prop on the `IconButton` to apply a specific color from the theme. Different color values such as \"crimson\", \"indigo\", \"grass\", and \"orange\" are applied to `IconButton` components, with a `soft` variant.  These colors are likely defined within the Radix UI theme.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/icon-button.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n\"<Flex gap=\\\"3\\\">\\n\\t<IconButton color=\\\"crimson\\\" variant=\\\"soft\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t</IconButton>\\n\\t<IconButton color=\\\"indigo\\\" variant=\\\"soft\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t</IconButton>\\n\\t<IconButton color=\\\"grass\\\" variant=\\\"soft\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t</IconButton>\\n\\t<IconButton color=\\\"orange\\\" variant=\\\"soft\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t</IconButton>\\n</Flex>\"\n```\n\n----------------------------------------\n\nTITLE: Popover with Collision-Aware Animations (JSX)\nDESCRIPTION: This example demonstrates how to use the `data-side` and `data-align` attributes exposed by the Radix UI Popover component to create collision and direction-aware animations. It imports the Popover component and defines a basic Popover structure with a Trigger and Content.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/popover.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n\"// index.jsx\nimport { Popover } from \\\"radix-ui\\\";\nimport \\\"./styles.css\\\";\n\nexport default () => (\n\t<Popover.Root>\n\t\t<Popover.Trigger>…</Popover.Trigger>\n\t\t<Popover.Portal>\n\t\t\t<Popover.Content __className__=\\\"PopoverContent\\\">…</Popover.Content>\n\t\t</Popover.Portal>\n\t</Popover.Root>\n);\"\n```\n\n----------------------------------------\n\nTITLE: Choosing Avatar Variants in a Flex Container\nDESCRIPTION: This snippet demonstrates how to use the 'variant' prop to select the visual style of the Avatar components. It showcases two different variants of the Avatar within a Flex container, both using a fallback character.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/avatar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"2\">\n\t<Avatar variant=\"solid\" fallback=\"A\" />\n\t<Avatar variant=\"soft\" fallback=\"A\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Tabs Color Variants Example\nDESCRIPTION: Demonstrates different color variations for tab lists including indigo, cyan, orange, and crimson options using the color prop.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/tabs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"4\" pb=\"2\">\n\t<Tabs.Root defaultValue=\"account\">\n\t\t<Tabs.List color=\"indigo\">\n\t\t\t<Tabs.Trigger value=\"account\">Account</Tabs.Trigger>\n\t\t\t<Tabs.Trigger value=\"documents\">Documents</Tabs.Trigger>\n\t\t\t<Tabs.Trigger value=\"settings\">Settings</Tabs.Trigger>\n\t\t</Tabs.List>\n\t</Tabs.Root>\n\n\t<Tabs.Root defaultValue=\"account\">\n\t\t<Tabs.List color=\"cyan\">\n\t\t\t<Tabs.Trigger value=\"account\">Account</Tabs.Trigger>\n\t\t\t<Tabs.Trigger value=\"documents\">Documents</Tabs.Trigger>\n\t\t\t<Tabs.Trigger value=\"settings\">Settings</Tabs.Trigger>\n\t\t</Tabs.List>\n\t</Tabs.Root>\n\n\t<Tabs.Root defaultValue=\"account\">\n\t\t<Tabs.List color=\"orange\">\n\t\t\t<Tabs.Trigger value=\"account\">Account</Tabs.Trigger>\n\t\t\t<Tabs.Trigger value=\"documents\">Documents</Tabs.Trigger>\n\t\t\t<Tabs.Trigger value=\"settings\">Settings</Tabs.Trigger>\n\t\t</Tabs.List>\n\t</Tabs.Root>\n\n\t<Tabs.Root defaultValue=\"account\">\n\t\t<Tabs.List color=\"crimson\">\n\t\t\t<Tabs.Trigger value=\"account\">Account</Tabs.Trigger>\n\t\t\t<Tabs.Trigger value=\"documents\">Documents</Tabs.Trigger>\n\t\t\t<Tabs.Trigger value=\"settings\">Settings</Tabs.Trigger>\n\t\t</Tabs.List>\n\t</Tabs.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Applying Grid Children Props to Box Component in JSX\nDESCRIPTION: Illustrates the use of grid children props on the Box component to control its placement and sizing within a grid container.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/layout.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Box gridArea=\"header\" />\n\n<Box gridColumn=\"1 / 3\" />\n<Box gridColumnStart=\"2\">\n<Box gridColumnEnd={{ initial: \"-1\", md: \"3\", lg: \"auto\" }} />\n\n<Box gridRow=\"1 / 3\" />\n<Box gridRowStart=\"2\">\n<Box gridRowEnd={{ initial: \"-1\", md: \"3\", lg: \"auto\" }} />\n```\n\n----------------------------------------\n\nTITLE: Auto-Submitting Form with One-Time Passwords\nDESCRIPTION: Shows how to use the autoSubmit prop to automatically submit a form when the One-Time Password Field is completely filled. The example includes a handleSubmit function that verifies the entered code against a validCode and performs navigation on success.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/one-time-password-field.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Verify({ validCode }) {\n\tconst PASSWORD_LENGTH = 6;\n\tfunction handleSubmit(event) {\n\t\tevent.preventDefault();\n\t\tconst formData = event.formData;\n\t\tif (formData.get(\"otp\") === validCode) {\n\t\t\tredirect(\"/authenticated\");\n\t\t} else {\n\t\t\twindow.alert(\"Invalid code\");\n\t\t}\n\t}\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<OneTimePasswordField.Root name=\"otp\" autoSubmit>\n\t\t\t\t{PASSWORD_LENGTH.map((_, i) => (\n\t\t\t\t\t<OneTimePasswordField.Input key={i} />\n\t\t\t\t))}\n\t\t\t\t{/* HiddenInput is required for the form to have data associated with the field */}\n\t\t\t\t<OneTimePasswordField.HiddenInput />\n\t\t\t</OneTimePasswordField.Root>\n\t\t\t<button>Submit</button>\n\t\t</form>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: HoverCard Content with Origin-Aware Animation in React JSX\nDESCRIPTION: This JSX snippet demonstrates the basic structure of a Radix UI HoverCard component in React, similar to the previous examples, but focusing on integration with origin-aware animations. It imports the HoverCard component and includes a Trigger and Content element.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/hover-card.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HoverCard } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<HoverCard.Root>\n\t\t<HoverCard.Trigger>…</HoverCard.Trigger>\n\t\t<HoverCard.Content __className__=\"HoverCardContent\">…</HoverCard.Content>\n\t</HoverCard.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Switch Component with Different Radius Values in JSX\nDESCRIPTION: Demonstrates the Switch component with different radius values using the radius prop, including 'none', 'small', and 'full'.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/switch.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"3\">\n\t<Switch radius=\"none\" defaultChecked />\n\t<Switch radius=\"small\" defaultChecked />\n\t<Switch radius=\"full\" defaultChecked />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Disabled Switch Component in JSX\nDESCRIPTION: Demonstrates the Switch component in disabled states, both checked and unchecked, using the native disabled attribute.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/switch.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"2\">\n\t<Text as=\"label\" size=\"2\">\n\t\t<Flex gap=\"2\">\n\t\t\t<Switch size=\"1\" />\n\t\t\tOff\n\t\t</Flex>\n\t</Text>\n\n\t<Text as=\"label\" size=\"2\">\n\t\t<Flex gap=\"2\">\n\t\t\t<Switch size=\"1\" defaultChecked />\n\t\t\tOn\n\t\t</Flex>\n\t</Text>\n\n\t<Text as=\"label\" size=\"2\" color=\"gray\">\n\t\t<Flex gap=\"2\">\n\t\t\t<Switch size=\"1\" disabled />\n\t\t\tOn\n\t\t</Flex>\n\t</Text>\n\n\t<Text as=\"label\" size=\"2\" color=\"gray\">\n\t\t<Flex gap=\"2\">\n\t\t\t<Switch size=\"1\" disabled defaultChecked />\n\t\t\tOff\n\t\t</Flex>\n\t</Text>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Using Em Component with Truncate Prop - JSX\nDESCRIPTION: This example illustrates the application of the truncate prop with the Em component to ensure that the emphasized text does not overflow its container. It showcases the integration of layout props for responsive design.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/em.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n\"<Flex maxWidth=\\\"300px\\\">\\n\\t<Em truncate>\\n\\t\\tThe goal of typography is to relate font size, line height, and line width\\n\\t\\tin a proportional way that maximizes beauty and makes reading easier and\\n\\t\\tmore pleasant.\\n\\t</Em>\\n</Flex>\"\n```\n\n----------------------------------------\n\nTITLE: Radius Styling for Icon Button in JSX\nDESCRIPTION: This snippet shows how to use the `radius` prop on the `IconButton` component to control the border radius. The values \"none\", \"large\", and \"full\" are used to demonstrate different radius options, with the variant set to \"soft\".\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/icon-button.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n\"<Flex gap=\\\"3\\\">\\n\\t<IconButton radius=\\\"none\\\" variant=\\\"soft\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t</IconButton>\\n\\t<IconButton radius=\\\"large\\\" variant=\\\"soft\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t</IconButton>\\n\\t<IconButton radius=\\\"full\\\" variant=\\\"soft\\\">\\n\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t</IconButton>\\n</Flex>\"\n```\n\n----------------------------------------\n\nTITLE: High Contrast Badge Display in JSX\nDESCRIPTION: This snippet displays Badge components with high contrast using the 'highContrast' prop. The contrast enhancement differentiates badge visuals against backgrounds, demonstrated in both standard and high-contrast modes.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/badge.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"2\">\\n\t<Flex gap=\"2\">\\n\t\t<Badge color=\"gray\" variant=\"solid\">\\n\t\t\tNew\\n\t\t</Badge>\\n\t\t<Badge color=\"gray\" variant=\"soft\">\\n\t\t\tNew\\n\t\t</Badge>\\n\t\t<Badge color=\"gray\" variant=\"surface\">\\n\t\t\tNew\\n\t\t</Badge>\\n\t\t<Badge color=\"gray\" variant=\"outline\">\\n\t\t\tNew\\n\t\t</Badge>\\n\t</Flex>\\n\t<Flex gap=\"2\">\\n\t\t<Badge color=\"gray\" variant=\"solid\" highContrast>\\n\t\t\tNew\\n\t\t</Badge>\\n\t\t<Badge color=\"gray\" variant=\"soft\" highContrast>\\n\t\t\tNew\\n\t\t</Badge>\\n\t\t<Badge color=\"gray\" variant=\"surface\" highContrast>\\n\t\t\tNew\\n\t\t</Badge>\\n\t\t<Badge color=\"gray\" variant=\"outline\" highContrast>\\n\t\t\tNew\\n\t\t</Badge>\\n\t</Flex>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Defining Button Radius in JSX\nDESCRIPTION: This snippet illustrates the use of the 'radius' prop to define the button's corner radius. It shows buttons with 'none', 'large', and 'full' radius values. Inputs are JSX markup, and output is buttons with different corner radii.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/button.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"3\">\n\t<Button radius=\"none\" variant=\"soft\">\n\t\tEdit profile\n\t</Button>\n\t<Button radius=\"large\" variant=\"soft\">\n\t\tEdit profile\n\t</Button>\n\t<Button radius=\"full\" variant=\"soft\">\n\t\tEdit profile\n\t</Button>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Basic Skeleton Usage in React\nDESCRIPTION: Simple implementation of the Skeleton component wrapping loading text.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/skeleton.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Skeleton>Loading</Skeleton>\n```\n\n----------------------------------------\n\nTITLE: Change DataList Label Color in Radix UI using JSX\nDESCRIPTION: Illustrates using the 'color' prop on the DataList's Label component to apply different color themes. The code shows labels with colors 'indigo', 'cyan', 'orange', and 'crimson'. Understanding Radix UI's theming system is essential. Requires Radix UI components.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/data-list.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<DataList.Root orientation=\"vertical\">\n\t<DataList.Item>\n\t\t<DataList.Label color=\"indigo\">Name</DataList.Label>\n\t\t<DataList.Value>Indigo</DataList.Value>\n\t</DataList.Item>\n\t<DataList.Item>\n\t\t<DataList.Label color=\"cyan\">Name</DataList.Label>\n\t\t<DataList.Value>Cyan</DataList.Value>\n\t</DataList.Item>\n\t<DataList.Item>\n\t\t<DataList.Label color=\"orange\">Name</DataList.Label>\n\t\t<DataList.Value>Orange</DataList.Value>\n\t</DataList.Item>\n\t<DataList.Item>\n\t\t<DataList.Label color=\"crimson\">Name</DataList.Label>\n\t\t<DataList.Value>Crimson</DataList.Value>\n\t</DataList.Item>\n</DataList.Root>\n```\n\n----------------------------------------\n\nTITLE: Applying Visual Variants to Checkbox Group - React\nDESCRIPTION: This snippet illustrates the usage of the `variant` prop to alter the visual styles of the Checkbox Group. It contains examples of multiple variants being applied to achieve different visual appearances.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox-group.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"2\">\n\t<Flex direction=\"column\" asChild gap=\"2\">\n\t\t<CheckboxGroup.Root variant=\"surface\" defaultValue=\"1\">\n\t\t\t<CheckboxGroup.Item value=\"1\" />\n\t\t\t<CheckboxGroup.Item value=\"2\" />\n\t\t</CheckboxGroup.Root>\n\t</Flex>\n\n\t<Flex direction=\"column\" asChild gap=\"2\">\n\t\t<CheckboxGroup.Root variant=\"classic\" defaultValue=\"1\">\n\t\t\t<CheckboxGroup.Item value=\"1\" />\n\t\t\t<CheckboxGroup.Item value=\"2\" />\n\t\t</CheckboxGroup.Root>\n\t</Flex>\n\n\t<Flex direction=\"column\" asChild gap=\"2\">\n\t\t<CheckboxGroup.Root variant=\"soft\" defaultValue=\"1\">\n\t\t\t<CheckboxGroup.Item value=\"1\" />\n\t\t\t<CheckboxGroup.Item value=\"2\" />\n\t\t</CheckboxGroup.Root>\n\t</Flex>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Text Component with Pretty Wrapping in JSX\nDESCRIPTION: Example using the 'wrap' prop set to 'pretty' to implement the experimental CSS text-wrap:pretty feature, which improves typography by preventing orphaned words at the end of paragraphs.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text.mdx#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex maxWidth=\"270px\">\n\t<Text wrap=\"pretty\">\n\t\tThe goal of typography is to relate font size, line height, and line width\n\t\tin a proportional way that maximizes beauty and makes reading easier and\n\t\tmore pleasant.\n\t</Text>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Assigning Colors to Badge Components in JSX\nDESCRIPTION: This example shows how to apply different colors to Badge components using the 'color' prop within a Flex container. Radix UI themes enable a rich color palette selection which is demonstrated here.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/badge.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"2\">\\n\t<Badge color=\"indigo\">New</Badge>\\n\t<Badge color=\"cyan\">New</Badge>\\n\t<Badge color=\"orange\">New</Badge>\\n\t<Badge color=\"crimson\">New</Badge>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Styling Radix UI Accordion Item with styled-components\nDESCRIPTION: This example shows how to style a Radix UI Accordion Item using styled-components. It imports the Accordion and styled-components libraries, then uses the `styled` function to create a styled Accordion.Item component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/guides/styling.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { Accordion } from \"radix-ui\";\nimport styled from \"styled-components\";\n\nconst StyledItem = __styled__(Accordion.Item)`\n  border-bottom: 1px solid gainsboro;\n`;\n\nconst AccordionDemo = () => (\n\t<Accordion.Root>\n\t\t<StyledItem value=\"item-1\" />\n\t\t{/* … */}\n\t</Accordion.Root>\n);\n\nexport default AccordionDemo;\n```\n\n----------------------------------------\n\nTITLE: Content Size Animation with Keyframes in CSS\nDESCRIPTION: This CSS snippet defines the animation rules for the accordion content, specifying the changes in height during open and close animations. It includes keyframes for slide down and slide up effects, utilizing custom properties for the content dimensions. The output is an accordion that smoothly expands and collapses.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/accordion.mdx#2025-04-21_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.AccordionContent {\n\toverflow: hidden;\n}\n.AccordionContent[data-state=\"open\"] {\n\tanimation: slideDown 300ms ease-out;\n}\n.AccordionContent[data-state=\"closed\"] {\n\tanimation: slideUp 300ms ease-out;\n}\n\n@keyframes slideDown {\n\tfrom {\n\t\theight: 0;\n\t}\n\tto {\n\t\theight: var(__--radix-accordion-content-height__);\n\t}\n}\n\n@keyframes slideUp {\n\tfrom {\n\t\theight: var(__--radix-accordion-content-height__);\n\t}\n\tto {\n\t\theight: 0;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Scroll Area Radius in JSX\nDESCRIPTION: This example demonstrates how to use the 'radius' prop to assign specific radii to the scrollbar handles. It shows two variations: no radius and full radius.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/scroll-area.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\">\n\t<ScrollArea\n\t\tradius=\"none\"\n\t\ttype=\"always\"\n\t\tscrollbars=\"horizontal\"\n\t\tstyle={{ width: 350, height: 20 }}\n\t>\n\t\t<Box width=\"800px\" height=\"1px\" />\n\t</ScrollArea>\n\n\t<ScrollArea\n\t\tradius=\"full\"\n\t\ttype=\"always\"\n\t\tscrollbars=\"horizontal\"\n\t\tstyle={{ width: 350, height: 20 }}\n\t>\n\t\t<Box width=\"800px\" height=\"1px\" />\n\t</ScrollArea>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Basic Tab Navigation Implementation in JSX\nDESCRIPTION: Basic implementation of a tab navigation menu with three links, where the first tab is active.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/tab-nav.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TabNav.Root>\n\t<TabNav.Link href=\"#\" active>\n\t\tAccount\n\t</TabNav.Link>\n\t<TabNav.Link href=\"#\">Documents</TabNav.Link>\n\t<TabNav.Link href=\"#\">Settings</TabNav.Link>\n</TabNav.Root>\n```\n\n----------------------------------------\n\nTITLE: Adjust DataList Size in Radix UI with JSX\nDESCRIPTION: Demonstrates changing the size of the DataList using the 'size' prop, applying different size values ('1', '2', '3') to illustrate the component's scalability within a column layout. Radix UI and Flex components are utilized to manage styling and layout. Import these from the Radix UI library.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/data-list.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"6\">\n\t<DataList.Root size=\"1\">\n\t\t<DataList.Item>\n\t\t\t<DataList.Label minWidth=\"88px\">Name</DataList.Label>\n\t\t\t<DataList.Value>Vlad Moroz</DataList.Value>\n\t\t</DataList.Item>\n\t\t<DataList.Item>\n\t\t\t<DataList.Label minWidth=\"88px\">Email</DataList.Label>\n\t\t\t<DataList.Value>\n\t\t\t\t<Link href=\"mailto:vlad@workos.com\">vlad@workos.com</Link>\n\t\t\t</DataList.Value>\n\t\t</DataList.Item>\n\t\t<DataList.Item>\n\t\t\t<DataList.Label minWidth=\"88px\">Company</DataList.Label>\n\t\t\t<DataList.Value>\n\t\t\t\t<Link target=\"_blank\" href=\"https://workos.com\">\n\t\t\t\t\tWorkOS\n\t\t\t\t</Link>\n\t\t\t</DataList.Value>\n\t\t</DataList.Item>\n\t</DataList.Root>\n\n\t<DataList.Root size=\"2\">\n\t\t<DataList.Item>\n\t\t\t<DataList.Label minWidth=\"88px\">Name</DataList.Label>\n\t\t\t<DataList.Value>Vlad Moroz</DataList.Value>\n\t\t</DataList.Item>\n\t\t<DataList.Item>\n\t\t\t<DataList.Label minWidth=\"88px\">Email</DataList.Label>\n\t\t\t<DataList.Value>\n\t\t\t\t<Link href=\"mailto:vlad@workos.com\">vlad@workos.com</Link>\n\t\t\t</DataList.Value>\n\t\t</DataList.Item>\n\t\t<DataList.Item>\n\t\t\t<DataList.Label minWidth=\"88px\">Company</DataList.Label>\n\t\t\t<DataList.Value>\n\t\t\t\t<Link target=\"_blank\" href=\"https://workos.com\">\n\t\t\t\t\tWorkOS\n\t\t\t\t</Link>\n\t\t\t</DataList.Value>\n\t\t</DataList.Item>\n\t</DataList.Root>\n\n\t<DataList.Root size=\"3\">\n\t\t<DataList.Item>\n\t\t\t<DataList.Label minWidth=\"88px\">Name</DataList.Label>\n\t\t\t<DataList.Value>Vlad Moroz</DataList.Value>\n\t\t</DataList.Item>\n\t\t<DataList.Item>\n\t\t\t<DataList.Label minWidth=\"88px\">Email</DataList.Label>\n\t\t\t<DataList.Value>\n\t\t\t\t<Link href=\"mailto:vlad@workos.com\">vlad@workos.com</Link>\n\t\t\t</DataList.Value>\n\t\t</DataList.Item>\n\t\t<DataList.Item>\n\t\t\t<DataList.Label minWidth=\"88px\">Company</DataList.Label>\n\t\t\t<DataList.Value>\n\t\t\t\t<Link target=\"_blank\" href=\"https://workos.com\">\n\t\t\t\t\tWorkOS\n\t\t\t\t</Link>\n\t\t\t</DataList.Value>\n\t\t</DataList.Item>\n\t</DataList.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Text Component with High Contrast in JSX\nDESCRIPTION: Example demonstrating the 'highContrast' prop to increase color contrast with the background, making text more readable especially for accessibility concerns.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text.mdx#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\">\n\t<Text color=\"gray\">The quick brown fox jumps over the lazy dog.</Text>\n\t<Text color=\"gray\" highContrast>\n\t\tThe quick brown fox jumps over the lazy dog.\n\t</Text>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Weighted Link Components\nDESCRIPTION: Illustrates the usage of the `weight` prop to adjust the text weight of the Radix UI Link component. The example shows links with regular, medium, and bold text weights.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/link.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\">\n\t<Link href=\"#\" weight=\"regular\">\n\t\tSign up\n\t</Link>\n\t<Link href=\"#\" weight=\"medium\">\n\t\tSign up\n\t</Link>\n\t<Link href=\"#\" weight=\"bold\">\n\t\tSign up\n\t</Link>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: High Contrast Icon Button in JSX\nDESCRIPTION: This snippet demonstrates the use of the `highContrast` prop to increase the color contrast of the `IconButton`. It shows a comparison between IconButtons with and without `highContrast` for different variants and a gray color. This helps in improving accessibility.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/icon-button.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n\"<Flex direction=\\\"column\\\" gap=\\\"3\\\">\\n\\t<Flex gap=\\\"3\\\">\\n\\t\\t<IconButton color=\\\"gray\\\" variant=\\\"classic\\\">\\n\\t\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t\\t</IconButton>\\n\\t\\t<IconButton color=\\\"gray\\\" variant=\\\"solid\\\">\\n\\t\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t\\t</IconButton>\\n\\t\\t<IconButton color=\\\"gray\\\" variant=\\\"soft\\\">\\n\\t\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t\\t</IconButton>\\n\\t\\t<IconButton color=\\\"gray\\\" variant=\\\"surface\\\">\\n\\t\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t\\t</IconButton>\\n\\t\\t<IconButton color=\\\"gray\\\" variant=\\\"outline\\\">\\n\\t\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t\\t</IconButton>\\n\\t</Flex>\\n\\t<Flex gap=\\\"3\\\">\\n\\t\\t<IconButton color=\\\"gray\\\" variant=\\\"classic\\\" highContrast>\\n\\t\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t\\t</IconButton>\\n\\t\\t<IconButton color=\\\"gray\\\" variant=\\\"solid\\\" highContrast>\\n\\t\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t\\t</IconButton>\\n\\t\\t<IconButton color=\\\"gray\\\" variant=\\\"soft\\\" highContrast>\\n\\t\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t\\t</IconButton>\\n\\t\\t<IconButton color=\\\"gray\\\" variant=\\\"surface\\\" highContrast>\\n\\t\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t\\t</IconButton>\\n\\t\\t<IconButton color=\\\"gray\\\" variant=\\\"outline\\\" highContrast>\\n\\t\\t\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n\\t\\t</IconButton>\\n\\t</Flex>\\n</Flex>\"\n```\n\n----------------------------------------\n\nTITLE: Using Theme Scaling in Radix UI Components\nDESCRIPTION: JSX example showing how to apply scaling to Radix UI components using the Theme component with a scaling prop. This affects layout density uniformly across the application.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/spacing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Theme scaling=\"100%\">\n\t<Card variant=\"surface\">\n\t\t<Flex gap=\"3\" align=\"center\">\n\t\t\t<Avatar size=\"3\" src={person.image} fallback={person.name} />\n\t\t\t<Box>\n\t\t\t\t<Text as=\"div\" size=\"2\" weight=\"bold\">\n\t\t\t\t\t{person.name}\n\t\t\t\t</Text>\n\t\t\t\t<Text as=\"div\" size=\"2\" color=\"gray\">\n\t\t\t\t\tApproved invoice <Link>#3461</Link>\n\t\t\t\t</Text>\n\t\t\t</Box>\n\t\t</Flex>\n\t</Card>\n</Theme>\n```\n\n----------------------------------------\n\nTITLE: CSS Animation for Collision-aware Tooltips\nDESCRIPTION: This CSS snippet defines animations for Tooltip components, making them responsive to data-side attributes which reflect their collision state. It includes slideUp and slideDown animations to adjust tooltip display smoothly based on collision direction.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/tooltip.mdx#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.TooltipContent {\n\tanimation-duration: 0.6s;\n\tanimation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.TooltipContent[data-side=\"top\"] {\n\tanimation-name: slideUp;\n}\n.TooltipContent[data-side=\"bottom\"] {\n\tanimation-name: slideDown;\n}\n\n@keyframes slideDown {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: translateY(-10px);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: translateY(0);\n\t}\n}\n\n@keyframes slideUp {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: translateY(10px);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: translateY(0);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Aligning Radio Group Items with Text in JSX\nDESCRIPTION: Demonstrates how to compose RadioGroup.Item within Text components for automatic centering with the first line of text, including multiple size options.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio-group.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\">\n\t<RadioGroup.Root size=\"1\" defaultValue=\"1\">\n\t\t<Text as=\"label\" size=\"2\">\n\t\t\t<Flex gap=\"2\">\n\t\t\t\t<RadioGroup.Item value=\"1\" /> Default\n\t\t\t</Flex>\n\t\t</Text>\n\n\t\t<Text as=\"label\" size=\"2\">\n\t\t\t<Flex gap=\"2\">\n\t\t\t\t<RadioGroup.Item value=\"2\" /> Compact\n\t\t\t</Flex>\n\t\t</Text>\n\t</RadioGroup.Root>\n\n\t<RadioGroup.Root size=\"2\" defaultValue=\"1\">\n\t\t<Text as=\"label\" size=\"3\">\n\t\t\t<Flex gap=\"2\">\n\t\t\t\t<RadioGroup.Item value=\"1\" /> Default\n\t\t\t</Flex>\n\t\t</Text>\n\n\t\t<Text as=\"label\" size=\"3\">\n\t\t\t<Flex gap=\"2\">\n\t\t\t\t<RadioGroup.Item value=\"2\" /> Compact\n\t\t\t</Flex>\n\t\t</Text>\n\t</RadioGroup.Root>\n\n\t<RadioGroup.Root size=\"3\" defaultValue=\"1\">\n\t\t<Text as=\"label\" size=\"4\">\n\t\t\t<Flex gap=\"2\">\n\t\t\t\t<RadioGroup.Item value=\"1\" /> Default\n\t\t\t</Flex>\n\t\t</Text>\n\n\t\t<Text as=\"label\" size=\"4\">\n\t\t\t<Flex gap=\"2\">\n\t\t\t\t<RadioGroup.Item value=\"2\" /> Compact\n\t\t\t</Flex>\n\t\t</Text>\n\t</RadioGroup.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Composing Form Control with Select Element\nDESCRIPTION: Shows how to use the asChild prop to compose a Form Control with a select element.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/form.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Form.Field name=\"country\">\n\t<Form.Label>Country</Form.Label>\n\t<Form.Control __asChild__>\n\t\t<select>\n\t\t\t<option value=\"uk\">United Kingdom</option>…\n\t\t</select>\n\t</Form.Control>\n</Form.Field>\n```\n\n----------------------------------------\n\nTITLE: Rendering Simple Code Snippet Using JSX\nDESCRIPTION: This snippet demonstrates the basic rendering of a code fragment using the 'Code' component in JSX. It shows an example of logging to the console.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/code.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Code>console.log()</Code>\n```\n\n----------------------------------------\n\nTITLE: Styling Radix UI Accordion Item state with CSS\nDESCRIPTION: This code snippet shows how to style the state of a Radix UI Accordion Item using the `data-state` attribute in CSS. When the accordion item is open, it includes `data-state=\"open\"`, which is targeted in CSS to apply different styles.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/guides/styling.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.AccordionItem {\n\tborder-bottom: 1px solid gainsboro;\n}\n\n.AccordionItem[__data-state__=\"open\"] {\n\tborder-bottom-width: 2px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Scrollbar for Select Component\nDESCRIPTION: CSS styles for the custom scrollbar implementation used with the Radix UI Select and ScrollArea components. Defines dimensions, spacing, and appearance for the scrollbar elements.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/select.mdx#2025-04-21_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.ScrollAreaRoot {\n\twidth: 100%;\n\theight: 100%;\n}\n\n.ScrollAreaViewport {\n\twidth: 100%;\n\theight: 100%;\n}\n\n.ScrollAreaScrollbar {\n\twidth: 4px;\n\tpadding: 5px 2px;\n}\n\n.ScrollAreaThumb {\n\tbackground: rgba(0, 0, 0, 0.3);\n\tborder-radius: 3px;\n}\n```\n\n----------------------------------------\n\nTITLE: Size Variant Tab Navigation Implementation\nDESCRIPTION: Example showing different size variants of the tab navigation using the size prop with values 1 and 2.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/tab-nav.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"4\" pb=\"2\">\n\t<TabNav.Root size=\"1\">\n\t\t<TabNav.Link href=\"#\" active>\n\t\t\tAccount\n\t\t</TabNav.Link>\n\t\t<TabNav.Link href=\"#\">Documents</TabNav.Link>\n\t\t<TabNav.Link href=\"#\">Settings</TabNav.Link>\n\t</TabNav.Root>\n\n\t<TabNav.Root size=\"2\">\n\t\t<TabNav.Link href=\"#\" active>\n\t\t\tAccount\n\t\t</TabNav.Link>\n\t\t<TabNav.Link href=\"#\">Documents</TabNav.Link>\n\t\t<TabNav.Link href=\"#\">Settings</TabNav.Link>\n\t</TabNav.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Context Menu Visual Styling with Variants\nDESCRIPTION: Shows different visual styles for context menus using the `variant` prop, demonstrating how to customize the appearance between solid and soft variants.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/context-menu.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid columns=\"2\" gap=\"3\">\\n\\t<ContextMenu.Root>\\n\\t\\t<ContextMenu.Trigger>\\n\\t\\t\\t<RightClickZone title=\"Solid\" />\\n\\t\\t</ContextMenu.Trigger>\\n\\t\\t<ContextMenu.Content variant=\"solid\">\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ E\">Edit</ContextMenu.Item>\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ D\">Duplicate</ContextMenu.Item>\\n\\t\\t\\t<ContextMenu.Separator />\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ N\">Archive</ContextMenu.Item>\\n\\n\\t\\t\\t<ContextMenu.Separator />\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ ⌫\" color=\"red\">\\n\\t\\t\\t\\tDelete\\n\\t\\t\\t</ContextMenu.Item>\\n\\t\\t</ContextMenu.Content>\\n\\t</ContextMenu.Root>\\n\\n\\t<ContextMenu.Root>\\n\\t\\t<ContextMenu.Trigger>\\n\\t\\t\\t<RightClickZone title=\"Soft\" />\\n\\t\\t</ContextMenu.Trigger>\\n\\t\\t<ContextMenu.Content variant=\"soft\">\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ E\">Edit</ContextMenu.Item>\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ D\">Duplicate</ContextMenu.Item>\\n\\t\\t\\t<ContextMenu.Separator />\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ N\">Archive</ContextMenu.Item>\\n\\n\\t\\t\\t<ContextMenu.Separator />\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ ⌫\" color=\"red\">\\n\\t\\t\\t\\tDelete\\n\\t\\t\\t</ContextMenu.Item>\\n\\t\\t</ContextMenu.Content>\\n\\t</ContextMenu.Root>\\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Form Element Reset Examples\nDESCRIPTION: Examples of applying Reset to form-related elements like inputs, buttons, and textareas. These examples show how Reset handles elements that typically have strong browser defaults.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/reset.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Reset>\n\t<button>Button</button>\n</Reset>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Reset>\n\t<input placeholder=\"Input control\" />\n</Reset>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Reset>\n\t<textarea placeholder=\"Text area\" />\n</Reset>\n```\n\n----------------------------------------\n\nTITLE: Styling Text with Slate Color in JSX\nDESCRIPTION: This snippet shows how to style text using the Slate color variable, demonstrating a practical example of using Radix Colors to achieve a harmonious and functional text appearance in JSX components. Presuming a React-based setup, it depends on the Radix color system being integrated as CSS variables.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/palette-composition/composing-a-palette.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Box my=\"5\">\n\t<Text\n\t\tas=\"p\"\n\t\tsize=\"7\"\n\t\talign=\"center\"\n\t\tweight=\"bold\"\n\t\tstyle={{ color: \"var(--slate-12)\" }}\n\t>\n\t\tThis text is Slate 12\n\t</Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Truncating Quote Text in JSX\nDESCRIPTION: This example illustrates the use of the `truncate` prop with the Quote component to manage text overflow by introducing an ellipsis. The component is contained within a Flex component restricting maximum width, demonstrating responsive design capabilities within a React project using Radix UI. Dependencies include Radix UI's Flex and Quote components, and the setup occurs in an environment supporting JSX. The code handles long text inputs cleanly by truncating overflow, thus ensuring visual consistency.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/quote.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex maxWidth=\\\"300px\\\">\\n\\t<Quote truncate>\\n\\t\\tThe goal of typography is to relate font size, line height, and line width\\n\\t\\tin a proportional way that maximizes beauty and makes reading easier and\\n\\t\\tmore pleasant.\\n\\t</Quote>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Items with Data Attributes\nDESCRIPTION: Shows how to apply custom styles to disabled Select items using data-disabled attribute\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/select.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Select } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<Select.Root>\n\t\t<Select.Trigger>…</Select.Trigger>\n\t\t<Select.Portal>\n\t\t\t<Select.Content>\n\t\t\t\t<Select.Viewport>\n\t\t\t\t\t<Select.Item __className__=\"SelectItem\" __disabled__>\n\t\t\t\t\t\t…\n\t\t\t\t\t</Select.Item>\n\t\t\t\t\t<Select.Item>…</Select.Item>\n\t\t\t\t\t<Select.Item>…</Select.Item>\n\t\t\t\t</Select.Viewport>\n\t\t\t</Select.Content>\n\t\t</Select.Portal>\n\t</Select.Root>\n);\n```\n\nLANGUAGE: css\nCODE:\n```\n.SelectItem[__data-disabled__] {\n\tcolor: \"gainsboro\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Collision-Aware Animations for Context Menu in Radix UI\nDESCRIPTION: Example of using data-side and data-align attributes to create animations that adapt based on collision direction, with different animations for top and bottom collisions.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { ContextMenu } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<ContextMenu.Root>\n\t\t<ContextMenu.Trigger>…</ContextMenu.Trigger>\n\t\t<ContextMenu.Portal>\n\t\t\t<ContextMenu.Content __className__=\"ContextMenuContent\">\n\t\t\t\t…\n\t\t\t</ContextMenu.Content>\n\t\t</ContextMenu.Portal>\n\t</ContextMenu.Root>\n);\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.ContextMenuContent {\n\tanimation-duration: 0.6s;\n\tanimation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.ContextMenuContent[__data-side=\"top\"__] {\n\tanimation-name: slideUp;\n}\n.ContextMenuContent[__data-side=\"bottom\"__] {\n\tanimation-name: slideDown;\n}\n\n@keyframes slideUp {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: translateY(10px);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: translateY(0);\n\t}\n}\n\n@keyframes slideDown {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: translateY(-10px);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: translateY(0);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Component Radius in React\nDESCRIPTION: This snippet demonstrates how to use the 'radius' prop to assign specific radius values to the Select component. It shows examples with 'none', 'large', and 'full' radius values.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/select.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"3\">\n\t<Select.Root defaultValue=\"apple\">\n\t\t<Select.Trigger radius=\"none\" />\n\t\t<Select.Content>\n\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t</Select.Content>\n\t</Select.Root>\n\n\t<Select.Root defaultValue=\"apple\">\n\t\t<Select.Trigger radius=\"large\" />\n\t\t<Select.Content>\n\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t</Select.Content>\n\t</Select.Root>\n\n\t<Select.Root defaultValue=\"apple\">\n\t\t<Select.Trigger radius=\"full\" />\n\t\t<Select.Content>\n\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t</Select.Content>\n\t</Select.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Underlined Link Components\nDESCRIPTION: Demonstrates the usage of the `underline` prop to control the visibility of the underline for the Radix UI Link component. The example shows links with underline on hover and always visible.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/link.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\">\n\t<Link href=\"#\" underline=\"hover\">\n\t\tSign up\n\t</Link>\n\t<Link href=\"#\" underline=\"always\">\n\t\tSign up\n\t</Link>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Family in CSS\nDESCRIPTION: Demonstrates how to override the default font family tokens to use custom fonts in Radix Themes.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/typography.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.radix-themes {\n\t--default-font-family:  /* Your custom default font */ --heading-font-family:\n\t\t/* Your custom font for <Heading> components */ --code-font-family:\n\t\t/* Your custom font for <Code> components */ --strong-font-family:\n\t\t/* Your custom font for <Strong> components */ --em-font-family:\n\t\t/* Your custom font for <Em> components */ --quote-font-family:\n\t\t/* Your custom font for <Quote> components */;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Heading and Text Components in JSX\nDESCRIPTION: Demonstrates the use of Heading and Text components to render titles and body copy with consistent typography.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/typography.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Heading mb=\"2\" size=\"4\">Typographic principles</Heading>\n<Text>The goal of typography is to relate font size, line height, and line width in a proportional way that maximizes beauty and makes reading easier and more pleasant.</Text>\n```\n\n----------------------------------------\n\nTITLE: Basic TextArea Implementation\nDESCRIPTION: Simple implementation of a TextArea component with a placeholder.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text-area.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TextArea placeholder=\"Reply to comment…\" />\n```\n\n----------------------------------------\n\nTITLE: Styling disabled Menubar items (Radix UI, React)\nDESCRIPTION: This example shows how to style disabled menu items using the `data-disabled` attribute. The JavaScript code creates a basic menu structure with a disabled item, while the CSS styles the disabled item with a specific color.  It relies on the `Menubar` component from `radix-ui` and a custom CSS class.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/menubar.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { Menubar } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<Menubar.Root>\n\t\t<Menubar.Menu>\n\t\t\t<Menubar.Trigger>…</Menubar.Trigger>\n\t\t\t<Menubar.Portal>\n\t\t\t\t<Menubar.Content>\n\t\t\t\t\t<Menubar.Item __className__=\"MenubarItem\" __disabled__>\n\t\t\t\t\t\t…\n\t\t\t\t\t</Menubar.Item>\n\t\t\t\t\t<Menubar.Item className=\"MenubarItem\">…</Menubar.Item>\n\t\t\t\t</Menubar.Content>\n\t\t\t</Menubar.Portal>\n\t\t</Menubar.Menu>\n\t</Menubar.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Styling Links in Radix UI with Client-Side Routing\nDESCRIPTION: This CSS snippet provides basic styling for the custom `NavigationMenuLink` component used in the client-side routing example. It removes the default text decoration and adds an underline when the link is active.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/navigation-menu.mdx#2025-04-21_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.NavigationMenuLink {\n\ttext-decoration: none;\n}\n.NavigationMenuLink[data-active] {\n\ttext-decoration: \"underline\";\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Avatar Radius in a Flex Container\nDESCRIPTION: This snippet shows how to use the 'radius' prop to set the border radius of Avatar components. It displays several Avatar components with different radius values within a Flex container.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/avatar.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"2\">\n\t<Avatar radius=\"none\" fallback=\"A\" />\n\t<Avatar radius=\"large\" fallback=\"A\" />\n\t<Avatar radius=\"full\" fallback=\"A\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Weights in CSS\nDESCRIPTION: Demonstrates how to remap font weight tokens to custom values in Radix Themes.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/typography.mdx#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.radix-themes {\n\t--font-weight-light: 200;\n\t--font-weight-regular: 300;\n\t--font-weight-medium: 600;\n\t--font-weight-bold: 800;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Text as Different HTML Elements in JSX\nDESCRIPTION: Example showing how to use the 'as' prop to render the Text component as different HTML elements like paragraph, label, div, or span, while maintaining the same styling.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Text as=\"p\">This is a <Strong>paragraph</Strong> element.</Text>\n<Text as=\"label\">This is a <Strong>label</Strong> element.</Text>\n<Text as=\"div\">This is a <Strong>div</Strong> element.</Text>\n<Text as=\"span\">This is a <Strong>span</Strong> element.</Text>\n```\n\n----------------------------------------\n\nTITLE: Disabled Checkbox States in JSX\nDESCRIPTION: Shows how to implement disabled states for Checkbox components using the native disabled attribute. It adds checkboxes in different states (checked and unchecked) and demonstrates how a disabled style appears with some text wrapping using Flex and Text components.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"2\">\n\t<Text as=\"label\" size=\"2\">\n\t\t<Flex as=\"span\" gap=\"2\">\n\t\t\t<Checkbox />\n\t\t\tNot checked\n\t\t</Flex>\n\t</Text>\n\n\t<Text as=\"label\" size=\"2\">\n\t\t<Flex as=\"span\" gap=\"2\">\n\t\t\t<Checkbox defaultChecked />\n\t\t\tChecked\n\t\t</Flex>\n\t</Text>\n\n\t<Text as=\"label\" size=\"2\" color=\"gray\">\n\t\t<Flex as=\"span\" gap=\"2\">\n\t\t\t<Checkbox disabled />\n\t\t\tNot checked\n\t\t</Flex>\n\t</Text>\n\n\t<Text as=\"label\" size=\"2\" color=\"gray\">\n\t\t<Flex as=\"span\" gap=\"2\">\n\t\t\t<Checkbox disabled defaultChecked />\n\t\t\tChecked\n\t\t</Flex>\n\t</Text>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Text Component with Leading Trim in JSX\nDESCRIPTION: Example demonstrating the 'trim' prop to remove extra leading space at the start, end, or both sides of text. This provides visual appearance similar to the upcoming CSS half-leading control spec.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\">\n\t<Text\n\t\ttrim=\"normal\"\n\t\tstyle={{\n\t\t\tbackground: \"var(--gray-a2)\",\n\t\t\tborderTop: \"1px dashed var(--gray-a7)\",\n\t\t\tborderBottom: \"1px dashed var(--gray-a7)\",\n\t\t}}\n\t>\n\t\tWithout trim\n\t</Text>\n\t<Text\n\t\ttrim=\"both\"\n\t\tstyle={{\n\t\t\tbackground: \"var(--gray-a2)\",\n\t\t\tborderTop: \"1px dashed var(--gray-a7)\",\n\t\t\tborderBottom: \"1px dashed var(--gray-a7)\",\n\t\t}}\n\t>\n\t\tWith trim\n\t</Text>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Implementing High-contrast Radio Groups in JSX\nDESCRIPTION: Shows how to use the 'highContrast' prop to increase color contrast with the background for various color options.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio-group.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid rows=\"2\" gap=\"2\" display=\"inline-grid\" flow=\"column\">\n\t<RadioGroup.Root color=\"indigo\" defaultValue=\"1\">\n\t\t<RadioGroup.Item value=\"1\" />\n\t</RadioGroup.Root>\n\n\t<RadioGroup.Root color=\"indigo\" defaultValue=\"1\" highContrast>\n\t\t<RadioGroup.Item value=\"1\" />\n\t</RadioGroup.Root>\n\n\t<RadioGroup.Root color=\"cyan\" defaultValue=\"1\">\n\t\t<RadioGroup.Item value=\"1\" />\n\t</RadioGroup.Root>\n\n\t<RadioGroup.Root color=\"cyan\" defaultValue=\"1\" highContrast>\n\t\t<RadioGroup.Item value=\"1\" />\n\t</RadioGroup.Root>\n\n\t<RadioGroup.Root color=\"orange\" defaultValue=\"1\">\n\t\t<RadioGroup.Item value=\"1\" />\n\t</RadioGroup.Root>\n\n\t<RadioGroup.Root color=\"orange\" defaultValue=\"1\" highContrast>\n\t\t<RadioGroup.Item value=\"1\" />\n\t</RadioGroup.Root>\n\n\t<RadioGroup.Root color=\"crimson\" defaultValue=\"1\">\n\t\t<RadioGroup.Item value=\"1\" />\n\t</RadioGroup.Root>\n\n\t<RadioGroup.Root color=\"crimson\" defaultValue=\"1\" highContrast>\n\t\t<RadioGroup.Item value=\"1\" />\n\t</RadioGroup.Root>\n\n\t<RadioGroup.Root color=\"gray\" defaultValue=\"1\">\n\t\t<RadioGroup.Item value=\"1\" />\n\t</RadioGroup.Root>\n\n\t<RadioGroup.Root color=\"gray\" defaultValue=\"1\" highContrast>\n\t\t<RadioGroup.Item value=\"1\" />\n\t</RadioGroup.Root>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Slider with Custom Radius in React\nDESCRIPTION: Shows how to customize the border radius of the Slider component using the 'radius' prop with none, small, and full values.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/slider.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"4\" maxWidth=\"300px\">\n\t<Slider defaultValue={[25]} radius=\"none\" />\n\t<Slider defaultValue={[50]} radius=\"small\" />\n\t<Slider defaultValue={[75]} radius=\"full\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Slider Size Variations in React\nDESCRIPTION: Demonstrates using the 'size' prop to control the Slider component's size with three different values.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/slider.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"4\" maxWidth=\"300px\">\n\t<Slider defaultValue={[25]} size=\"1\" />\n\t<Slider defaultValue={[50]} size=\"2\" />\n\t<Slider defaultValue={[75]} size=\"3\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Flex component with fixed width\nDESCRIPTION: This snippet demonstrates how to set a fixed width for the Flex component in Radix Themes. It creates a flexbox layout that is 500px wide.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/blog/themes-3.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex width=\"500px\" />\n```\n\n----------------------------------------\n\nTITLE: TextArea Radius Options\nDESCRIPTION: Demonstrates different border radius options for the TextArea using the radius prop.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text-area.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\" maxWidth=\"250px\">\n\t<TextArea radius=\"none\" placeholder=\"Search the docs…\" />\n\t<TextArea radius=\"large\" placeholder=\"Search the docs…\" />\n\t<TextArea radius=\"full\" placeholder=\"Search the docs…\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision-Aware Animations for Menubar (CSS)\nDESCRIPTION: This CSS snippet demonstrates how to create collision-aware animations for a Radix UI Menubar. It uses 'data-side' attributes to apply different animations based on the content's position, and defines 'slideUp' and 'slideDown' keyframe animations.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/menubar.mdx#2025-04-21_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.MenubarContent {\n\tanimation-duration: 0.6s;\n\tanimation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.MenubarContent[__data-side=\"top\"__] {\n\tanimation-name: slideUp;\n}\n.MenubarContent[__data-side=\"bottom\"__] {\n\tanimation-name: slideDown;\n}\n\n@keyframes slideUp {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: translateY(10px);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: translateY(0);\n\t}\n}\n\n@keyframes slideDown {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: translateY(-10px);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: translateY(0);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using High-contrast Avatars in a Grid\nDESCRIPTION: This snippet demonstrates how to use the 'highContrast' prop to enhance color contrast of Avatar components. The example displays pairs of solid variant Avatars in a Grid layout, one with high contrast and one without.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/avatar.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid rows=\"2\" gap=\"2\" display=\"inline-grid\" flow=\"column\">\n\t<Avatar variant=\"solid\" color=\"indigo\" fallback=\"A\" />\n\t<Avatar variant=\"solid\" color=\"indigo\" fallback=\"A\" highContrast />\n\t<Avatar variant=\"solid\" color=\"cyan\" fallback=\"A\" />\n\t<Avatar variant=\"solid\" color=\"cyan\" fallback=\"A\" highContrast />\n\t<Avatar variant=\"solid\" color=\"orange\" fallback=\"A\" />\n\t<Avatar variant=\"solid\" color=\"orange\" fallback=\"A\" highContrast />\n\t<Avatar variant=\"solid\" color=\"crimson\" fallback=\"A\" />\n\t<Avatar variant=\"solid\" color=\"crimson\" fallback=\"A\" highContrast />\n\t<Avatar variant=\"solid\" color=\"gray\" fallback=\"A\" />\n\t<Avatar variant=\"solid\" color=\"gray\" fallback=\"A\" highContrast />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Allowing Collapsing of All Accordion Items\nDESCRIPTION: Example of using the collapsible prop to allow all items to be closed.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/accordion.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion.Root type=\"single\" __collapsible__>\n\t<Accordion.Item value=\"item-1\">…</Accordion.Item>\n\t<Accordion.Item value=\"item-2\">…</Accordion.Item>\n</Accordion.Root>\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Navigation Menu Package\nDESCRIPTION: Command to install the Navigation Menu component package via npm.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/navigation-menu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-navigation-menu\n```\n\n----------------------------------------\n\nTITLE: Setting Text Weight for Code Snippets in JSX\nDESCRIPTION: This snippet demonstrates how to use the 'weight' prop to change the text weight of the 'Code' component, illustrating options for regular and bold weights.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/code.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"2\" align=\"start\">\n\t<Code weight=\"regular\">console.log()</Code>\n\t<Code weight=\"bold\">console.log()</Code>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Quotation in JSX\nDESCRIPTION: This snippet demonstrates how to render a short inline quotation within a Text component using the Radix UI library. The Quote component encapsulates the quote text, made possible through the use of the HTML `q` element. There are no additional dependencies aside from those provided by Radix UI and a React environment. Inputs are the quote text itself, and the output is a styled quotation within a text block.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/quote.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Text>\\n\\tHis famous quote,{\" \"}\\n\\t<Quote>Styles come and go. Good design is a language, not a style</Quote>,\\n\\telegantly summs up Massimo’s philosophy of design.\\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Applying Visual Variants to Segmented Control in JSX\nDESCRIPTION: This example demonstrates the use of the 'variant' prop to control the visual style of the Segmented Control. It shows two variants: 'surface' and 'classic'.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/segmented-control.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"start\" direction=\"column\" gap=\"4\">\n\t<SegmentedControl.Root defaultValue=\"inbox\" variant=\"surface\">\n\t\t<SegmentedControl.Item value=\"inbox\">Inbox</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"drafts\">Drafts</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"sent\">Sent</SegmentedControl.Item>\n\t</SegmentedControl.Root>\n\n\t<SegmentedControl.Root defaultValue=\"inbox\" variant=\"classic\">\n\t\t<SegmentedControl.Item value=\"inbox\">Inbox</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"drafts\">Drafts</SegmentedControl.Item>\n\t\t<SegmentedControl.Item value=\"sent\">Sent</SegmentedControl.Item>\n\t</SegmentedControl.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Applying Color to Buttons in JSX\nDESCRIPTION: This snippet shows how to use the 'color' prop to change the color of buttons in JSX. It showcases buttons in four different colors (indigo, cyan, orange, crimson), using a 'soft' variant. Dependencies include JSX with Flex layout support.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/button.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"3\">\n\t<Button color=\"indigo\" variant=\"soft\">\n\t\tEdit profile\n\t</Button>\n\t<Button color=\"cyan\" variant=\"soft\">\n\t\tEdit profile\n\t</Button>\n\t<Button color=\"orange\" variant=\"soft\">\n\t\tEdit profile\n\t</Button>\n\t<Button color=\"crimson\" variant=\"soft\">\n\t\tEdit profile\n\t</Button>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Spinner with Children Components\nDESCRIPTION: Shows how to use the Spinner component with children elements, demonstrating the loading prop functionality with a Switch component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/spinner.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"4\">\n\t<Spinner loading={true}>\n\t\t<Switch defaultChecked />\n\t</Spinner>\n\n\t<Spinner loading={false}>\n\t\t<Switch defaultChecked />\n\t</Spinner>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Direction.Provider in React\nDESCRIPTION: This snippet shows how to import the Direction.Provider component from the Radix UI library and use it to wrap a React application. By utilizing this component, developers can ensure that all child components inherit the specified reading direction.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/utilities/direction-provider.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Direction } from \"radix-ui\";\n\nexport default () => <Direction.Provider />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Text with Unicode Character in JSX\nDESCRIPTION: Shows text content with Unicode character insertion for proper text formatting\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/case-studies/basement-studio.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nWe've used it for [Livepeer](https://livepeer.com/dashboard) design system, but we mainly use it for websites{'\\u2060'}—[Akash](https://akash.network), [Lettermatic](https://lettermatic.com), and others coming up.\n```\n\n----------------------------------------\n\nTITLE: Implementing Select with Placeholder\nDESCRIPTION: Demonstrates how to add a placeholder to Select component and style it using data-placeholder attribute\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/select.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Select } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<Select.Root>\n\t\t<Select.Trigger __className__=\"SelectTrigger\">\n\t\t\t<Select.Value __placeholder__=\"Pick an option\" />\n\t\t\t<Select.Icon />\n\t\t</Select.Trigger>\n\t\t<Select.Portal>\n\t\t\t<Select.Content>…</Select.Content>\n\t\t</Select.Portal>\n\t</Select.Root>\n);\n```\n\nLANGUAGE: css\nCODE:\n```\n.SelectTrigger[__data-placeholder__] {\n\tcolor: \"gainsboro\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using Box Component with Padding Props in JSX\nDESCRIPTION: Demonstrates how to use the Box component with various padding prop configurations, including responsive object values.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/layout.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box p=\"4\" />\n<Box p=\"100px\">\n<Box p={{ sm: '6', lg: '9' }}>\n```\n\n----------------------------------------\n\nTITLE: Styling a Radix UI Accordion Item with CSS\nDESCRIPTION: This code snippet demonstrates how to style a Radix UI Accordion Item component using CSS classes. It imports the Accordion component and assigns a className to the Accordion.Item.  A CSS file then targets this className to apply the desired styling.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/guides/styling.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { Accordion } from \"radix-ui\";\nimport \"./styles.css\";\n\nconst AccordionDemo = () => (\n\t<Accordion.Root>\n\t\t<Accordion.Item __className__=\"AccordionItem\" value=\"item-1\" />\n\t\t{/* … */}\n\t</Accordion.Root>\n);\n\nexport default AccordionDemo;\n```\n\n----------------------------------------\n\nTITLE: Defining SubTrigger Properties in React\nDESCRIPTION: This snippet outlines properties for the SubTrigger component that opens a submenu. It details properties like 'asChild', 'disabled', and 'textValue', elaborating on their roles in managing user interactions and enabling typeahead behavior in a React application.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n<PropsTable\n\tdata={[\n\t\t{\n\t\t\tname: \"asChild\",\n\t\t\trequired: false,\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: \"false\",\n\t\t\tdescription: (\n\t\t\t\t<>Change the default rendered element for the one passed as a child,\n\t\t\t\tmerging their props and behavior.<br /><br />Read our <a href=\"../guides/composition\">Composition</a> guide for more details.</>\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\tname: \"disabled\",\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: (\n\t\t\t\t<span>When <Code>true</Code>, prevents the user from interacting with the item.</span>\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\tname: \"textValue\",\n\t\t\ttype: \"string\",\n\t\t\tdescription: (\n\t\t\t\t<span>Optional text used for typeahead purposes. By default the typeahead behavior will use the <Code>.textContent</Code> of the item. Use this when the content is complex, or you have non-textual content inside.</span>\n\t\t\t),\n\t\t},\n\t]}/>\n```\n\n----------------------------------------\n\nTITLE: Instant Tooltip Display without Delay\nDESCRIPTION: Shows how to configure a tooltip to appear instantly by setting delayDuration to 0\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/tooltip.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tooltip } from \"radix-ui\";\n\nexport default () => (\n\t<Tooltip.Root __delayDuration__={0}>\n\t\t<Tooltip.Trigger>…</Tooltip.Trigger>\n\t\t<Tooltip.Content>…</Tooltip.Content>\n\t</Tooltip.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Basic Usage of Slot Component\nDESCRIPTION: Demonstrates how to import and use the Slot component with basic React component structure\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/utilities/slot.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Slot } from \"radix-ui\";\n\nexport default () => (\n\t<Slot.Root>\n\t\t<div>Hello</div>\n\t</Slot.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Aligning Checkbox Items with Text - React\nDESCRIPTION: This snippet shows how to compose Checkbox Group items within Text elements, ensuring proper alignment with the text. It's demonstrated with various sizes to show consistent alignment behavior.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox-group.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\">\n\t<CheckboxGroup.Root size=\"1\" defaultValue=\"1\">\n\t\t<Text as=\"label\" size=\"2\">\n\t\t\t<Flex gap=\"2\">\n\t\t\t\t<CheckboxGroup.Item value=\"1\" /> Default\n\t\t\t</Flex>\n\t\t</Text>\n\n\t\t<Text as=\"label\" size=\"2\">\n\t\t\t<Flex gap=\"2\">\n\t\t\t\t<CheckboxGroup.Item value=\"2\" /> Compact\n\t\t\t</Flex>\n\t\t</Text>\n\t</CheckboxGroup.Root>\n\n\t<CheckboxGroup.Root size=\"2\" defaultValue=\"1\">\n\t\t<Text as=\"label\" size=\"3\">\n\t\t\t<Flex gap=\"2\">\n\t\t\t\t<CheckboxGroup.Item value=\"1\" /> Default\n\t\t\t</Flex>\n\t\t</Text>\n\n\t\t<Text as=\"label\" size=\"3\">\n\t\t\t<Flex gap=\"2\">\n\t\t\t\t<CheckboxGroup.Item value=\"2\" /> Compact\n\t\t\t</Flex>\n\t\t</Text>\n\t</CheckboxGroup.Root>\n\n\t<CheckboxGroup.Root size=\"3\" defaultValue=\"1\">\n\t\t<Text as=\"label\" size=\"4\">\n\t\t\t<Flex gap=\"2\">\n\t\t\t\t<CheckboxGroup.Item value=\"1\" /> Default\n\t\t\t</Flex>\n\t\t</Text>\n\n\t\t<Text as=\"label\" size=\"4\">\n\t\t\t<Flex gap=\"2\">\n\t\t\t\t<CheckboxGroup.Item value=\"2\" /> Compact\n\t\t\t</Flex>\n\t\t</Text>\n\t</CheckboxGroup.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Assigning Colors to Code Snippets in JSX\nDESCRIPTION: This snippet shows how to utilize the 'color' prop to assign different colors to the 'Code' component for better visibility. Examples include indigo, crimson, cyan, and orange.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/code.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" align=\"start\" gap=\"2\">\n\t<Code color=\"indigo\">console.log()</Code>\n\t<Code color=\"crimson\">console.log()</Code>\n\t<Code color=\"cyan\">console.log()</Code>\n\t<Code color=\"orange\">console.log()</Code>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Applying Color to Select Component in React\nDESCRIPTION: This snippet demonstrates how to use the 'color' prop on Trigger and Content to assign specific color values to the Select component. It shows examples with indigo, cyan, orange, and crimson colors.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/select.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"3\">\n\t<Select.Root defaultValue=\"apple\">\n\t\t<Select.Trigger color=\"indigo\" variant=\"soft\" />\n\t\t<Select.Content color=\"indigo\">\n\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t</Select.Content>\n\t</Select.Root>\n\n\t<Select.Root defaultValue=\"apple\">\n\t\t<Select.Trigger color=\"cyan\" variant=\"soft\" />\n\t\t<Select.Content color=\"cyan\">\n\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t</Select.Content>\n\t</Select.Root>\n\n\t<Select.Root defaultValue=\"apple\">\n\t\t<Select.Trigger color=\"orange\" variant=\"soft\" />\n\t\t<Select.Content color=\"orange\">\n\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t</Select.Content>\n\t</Select.Root>\n\n\t<Select.Root defaultValue=\"apple\">\n\t\t<Select.Trigger color=\"crimson\" variant=\"soft\" />\n\t\t<Select.Content color=\"crimson\">\n\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t</Select.Content>\n\t</Select.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Bar Initialization in React\nDESCRIPTION: Demonstrates a simple Progress component with default configuration inside a Box container\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/progress.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box maxWidth=\"300px\">\n\t<Progress />\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Example of Direction Provider with RTL Direction\nDESCRIPTION: This code snippet illustrates how to use the Direction.Provider with a specified reading direction of 'rtl' (right-to-left). This example demonstrates how to set the global reading direction for all primitives in the application.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/utilities/direction-provider.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Direction } from \"radix-ui\";\n\nexport default () => (\n\t<Direction.Provider dir=\"rtl\">\n\t\t{/* your app */}\n\t</Direction.Provider>\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Font Size in JSX\nDESCRIPTION: Illustrates the use of the size prop in the Text component to set font size according to the type scale.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/typography.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Text size=\"6\">The quick brown fox jumps over the lazy dog.</Text>\n```\n\n----------------------------------------\n\nTITLE: Rendering Surface Variant Buttons with Various Color Options in JSX\nDESCRIPTION: This code demonstrates how to implement surface variant buttons with various color options from the Radix color palette. It shows the usage of steps 6-8 for borders on interactive components.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/palette-composition/understanding-the-scale.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid columns=\"7\" gap=\"3\" my=\"5\">\n\t<Button variant=\"surface\" color=\"gold\">\n\t\tGold\n\t</Button>\n\t<Button variant=\"surface\" color=\"bronze\">\n\t\tBronze\n\t</Button>\n\t<Button variant=\"surface\" color=\"brown\">\n\t\tBrown\n\t</Button>\n\t<Button variant=\"surface\" color=\"yellow\">\n\t\tYellow\n\t</Button>\n\t<Button variant=\"surface\" color=\"amber\">\n\t\tAmber\n\t</Button>\n\t<Button variant=\"surface\" color=\"orange\">\n\t\tOrange\n\t</Button>\n\t<Button variant=\"surface\" color=\"tomato\">\n\t\tTomato\n\t</Button>\n\t<Button variant=\"surface\" color=\"red\">\n\t\tRed\n\t</Button>\n\t<Button variant=\"surface\" color=\"ruby\">\n\t\tRuby\n\t</Button>\n\t<Button variant=\"surface\" color=\"crimson\">\n\t\tCrimson\n\t</Button>\n\t<Button variant=\"surface\" color=\"pink\">\n\t\tPink\n\t</Button>\n\t<Button variant=\"surface\" color=\"plum\">\n\t\tPlum\n\t</Button>\n\t<Button variant=\"surface\" color=\"purple\">\n\t\tPurple\n\t</Button>\n\t<Button variant=\"surface\" color=\"violet\">\n\t\tViolet\n\t</Button>\n\t<Button variant=\"surface\" color=\"iris\">\n\t\tIris\n\t</Button>\n\t<Button variant=\"surface\" color=\"indigo\">\n\t\tIndigo\n\t</Button>\n\t<Button variant=\"surface\" color=\"blue\">\n\t\tBlue\n\t</Button>\n\t<Button variant=\"surface\" color=\"cyan\">\n\t\tCyan\n\t</Button>\n\t<Button variant=\"surface\" color=\"teal\">\n\t\tTeal\n\t</Button>\n\t<Button variant=\"surface\" color=\"jade\">\n\t\tJade\n\t</Button>\n\t<Button variant=\"surface\" color=\"green\">\n\t\tGreen\n\t</Button>\n\t<Button variant=\"surface\" color=\"grass\">\n\t\tGrass\n\t</Button>\n\t<Button variant=\"surface\" color=\"lime\">\n\t\tLime\n\t</Button>\n\t<Button variant=\"surface\" color=\"mint\">\n\t\tMint\n\t</Button>\n\t<Button variant=\"surface\" color=\"sky\">\n\t\tSky\n\t</Button>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Radio Buttons in JSX\nDESCRIPTION: This snippet shows how to create disabled radio buttons using the native 'disabled' attribute. It displays both enabled and disabled radio buttons for comparison.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\">\n\t<Flex align=\"start\" direction=\"column\" gap=\"1\">\n\t\t<Flex asChild gap=\"2\">\n\t\t\t<Text as=\"label\" size=\"2\">\n\t\t\t\t<Radio name=\"enabled\" value=\"1\" defaultChecked />\n\t\t\t\tOn\n\t\t\t</Text>\n\t\t</Flex>\n\t\t<Flex asChild gap=\"2\">\n\t\t\t<Text as=\"label\" size=\"2\">\n\t\t\t\t<Radio name=\"enabled\" value=\"2\" />\n\t\t\t\tOff\n\t\t\t</Text>\n\t\t</Flex>\n\t</Flex>\n\n\t<Flex align=\"start\" direction=\"column\" gap=\"1\">\n\t\t<Flex asChild gap=\"2\">\n\t\t\t<Text as=\"label\" size=\"2\" color=\"gray\">\n\t\t\t\t<Radio disabled name=\"disabled\" value=\"1\" defaultChecked />\n\t\t\t\tOn\n\t\t\t</Text>\n\t\t</Flex>\n\t\t<Flex asChild gap=\"2\">\n\t\t\t<Text as=\"label\" size=\"2\" color=\"gray\">\n\t\t\t\t<Radio disabled name=\"disabled\" value=\"2\" />\n\t\t\t\tOff\n\t\t\t</Text>\n\t\t</Flex>\n\t</Flex>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Text Component with Different Colors in JSX\nDESCRIPTION: Example showing how to use the 'color' prop to assign specific colors to text. The component's colors are designed to achieve sufficient contrast over common background colors.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text.mdx#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\">\n\t<Text color=\"indigo\">The quick brown fox jumps over the lazy dog.</Text>\n\t<Text color=\"cyan\">The quick brown fox jumps over the lazy dog.</Text>\n\t<Text color=\"orange\">The quick brown fox jumps over the lazy dog.</Text>\n\t<Text color=\"crimson\">The quick brown fox jumps over the lazy dog.</Text>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Using Flex Children Props on Box Component in JSX\nDESCRIPTION: Shows how to use flex children props on the Box component to control its behavior within a flex container.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/layout.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box flexBasis=\"100%\" />\n<Box flexShrink=\"0\">\n<Box flexGrow={{ initial: \"0\", lg: \"1\" }} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision-Aware Animations for Menubar (JSX)\nDESCRIPTION: This JSX snippet shows the setup for implementing collision-aware animations in a Radix UI Menubar. It demonstrates the basic structure of the Menubar component and applies a custom className to the Menubar.Content for styling.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/menubar.mdx#2025-04-21_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { Menubar } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<Menubar.Root>\n\t\t<Menubar.Menu>\n\t\t\t<Menubar.Trigger>…</Menubar.Trigger>\n\t\t\t<Menubar.Portal>\n\t\t\t\t<Menubar.Content __className__=\"MenubarContent\">…</Menubar.Content>\n\t\t\t</Menubar.Portal>\n\t\t</Menubar.Menu>\n\t</Menubar.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Styling Radix UI Accordion Item state with styled-components\nDESCRIPTION: This snippet illustrates how to style a Radix UI Accordion Item's state using styled-components and the `data-state` attribute. It uses the `&` selector to target the `data-state` attribute and apply specific styles when the item is open.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/guides/styling.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Accordion } from \"radix-ui\";\nimport styled from \"styled-components\";\n\nconst StyledItem = styled(Accordion.Item)`\n\tborder-bottom: 1px solid gainsboro;\n\n\t&[__data-state__=\"open\"] {\n\t\tborder-bottom-width: 2px;\n\t}\n`;\n```\n\n----------------------------------------\n\nTITLE: Renaming Radix UI Color Scales in CSS-in-JS\nDESCRIPTION: This snippet shows how to import Radix UI color scales in a JavaScript environment and rename them in a theme object. It demonstrates mapping variables from imported color scales to more intuitive or brand-specific names, such as renaming 'slate' to 'gray' or 'violet' to 'blurple'.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/overview/aliasing.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n\tslate,\n\tsky,\n\tgrass,\n\tviolet,\n\tcrimson\n} from \"@radix-ui/colors\";\n\nconst theme = {\n\tgray1: slate.slate1,\n\tgray2: slate.slate2,\n\n\tblue1: sky.sky1,\n\tblue2: sky.sky2,\n\n\tgreen1: grass.grass1,\n\tgreen2: grass.grass2,\n\n\tblurple1: violet.violet1,\n\tblurple2: violet.violet2,\n\n\tcaribbeanSunset1: crimson.crimson1,\n\tcaribbeanSunset2: crimson.crimson2,\n};\n```\n\n----------------------------------------\n\nTITLE: Illustrating Radio Button Variants in JSX\nDESCRIPTION: This code snippet demonstrates the use of the 'variant' prop to control the visual style of radio buttons. It shows three pairs of radio buttons with different variants: surface, classic, and soft.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"center\" gap=\"4\">\n\t<Flex gap=\"2\">\n\t\t<Radio variant=\"surface\" name=\"surface\" value=\"1\" defaultChecked />\n\t\t<Radio variant=\"surface\" name=\"surface\" value=\"2\" />\n\t</Flex>\n\n\t<Flex gap=\"2\">\n\t\t<Radio variant=\"classic\" name=\"classic\" value=\"1\" defaultChecked />\n\t\t<Radio variant=\"classic\" name=\"classic\" value=\"2\" />\n\t</Flex>\n\n\t<Flex gap=\"2\">\n\t\t<Radio variant=\"soft\" name=\"soft\" value=\"1\" defaultChecked />\n\t\t<Radio variant=\"soft\" name=\"soft\" value=\"2\" />\n\t</Flex>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Radius Options\nDESCRIPTION: Shows how to customize the border radius of the Progress component\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/progress.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"4\" maxWidth=\"300px\">\n\t<Progress value={25} radius=\"none\" />\n\t<Progress value={50} radius=\"small\" />\n\t<Progress value={75} radius=\"full\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Accessible Icon Component - JSX\nDESCRIPTION: This example demonstrates how to import and use the Accessible Icon component from Radix UI in a React application. It exemplifies the structure and basic usage of the component with 'AccessibleIcon.Root'.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/utilities/accessible-icon.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AccessibleIcon } from \"radix-ui\";\n\nexport default () => <AccessibleIcon.Root />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Section Component with DecorativeBox in JSX\nDESCRIPTION: Example showing how to use the Section component wrapped in a DecorativeBox with custom styling. The component is rendered inside a Box with padding and custom background color using CSS variables.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/section.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n\tpy=\"8\"\n\tstyle={{ backgroundColor: \"var(--gray-a2)\", borderRadius: \"var(--radius-3)\" }}\n>\n\t<DecorativeBox asChild>\n\t\t<Section size=\"2\" />\n\t</DecorativeBox>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: UI Labels with Different Text Sizes in JSX\nDESCRIPTION: Example showing how sizes 1-3 are designed to work well for UI labels, with different combinations of heading and subtext sizes for interface elements.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid align=\"center\" columns=\"2\" gap=\"5\" p=\"3\">\n\t<Flex direction=\"column\">\n\t\t<Text size=\"3\" weight=\"bold\">\n\t\t\tGet started\n\t\t</Text>\n\t\t<Text color=\"gray\" size=\"2\">\n\t\t\tStart your next project in minutes\n\t\t</Text>\n\t</Flex>\n\n\t<Flex direction=\"column\">\n\t\t<Text size=\"2\" weight=\"bold\">\n\t\t\tGet started\n\t\t</Text>\n\t\t<Text color=\"gray\" size=\"2\">\n\t\t\tStart your next project in minutes\n\t\t</Text>\n\t</Flex>\n\n\t<Flex direction=\"column\">\n\t\t<Text size=\"2\" weight=\"bold\">\n\t\t\tGet started\n\t\t</Text>\n\t\t<Text color=\"gray\" size=\"1\">\n\t\t\tStart your next project in minutes\n\t\t</Text>\n\t</Flex>\n\n\t<Flex direction=\"column\">\n\t\t<Text size=\"1\" weight=\"bold\">\n\t\t\tGet started\n\t\t</Text>\n\t\t<Text color=\"gray\" size=\"1\">\n\t\t\tStart your next project in minutes\n\t\t</Text>\n\t</Flex>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Rendering Color Scale Groups in JSX\nDESCRIPTION: This code snippet demonstrates how to render color scale groups using JSX components. It includes various color scales with their light, dark, and alpha versions.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/palette-composition/scales.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorScaleGroup>\n\t<ColorScale label=\"Gray\" name=\"gray\" />\n\t<ColorScale label=\"Gray Alpha\" name=\"grayA\" />\n\t<ColorScale label=\"Gray Dark\" name=\"grayDark\" />\n\t<ColorScale label=\"Gray Dark Alpha\" name=\"grayDarkA\" />\n</ColorScaleGroup>\n```\n\n----------------------------------------\n\nTITLE: Segmented Controls in One-Time Password Fields\nDESCRIPTION: Demonstrates how to create a visually segmented One-Time Password Field using separators between inputs. The Root component can accept arbitrary children, such as separators, made accessible with aria-hidden to assistive technologies, and maintaining the group role.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/one-time-password-field.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<OneTimePasswordField.Root>\n\t<OneTimePasswordField.Input />\n\t<Separator.Root aria-hidden />\n\t<OneTimePasswordField.Input />\n\t<Separator.Root aria-hidden />\n\t<OneTimePasswordField.Input />\n\t<Separator.Root aria-hidden />\n\t<OneTimePasswordField.Input />\n\t<OneTimePasswordField.HiddenInput />\n</OneTimePasswordField.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Color Prop in Blockquote Component with JSX\nDESCRIPTION: This snippet demonstrates the use of the 'color' prop to customize the text color of the Blockquote component. It shows multiple colors such as 'indigo', 'cyan', 'orange', and 'crimson' used within a Flex container.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/blockquote.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\" maxWidth=\"500px\">\n\t<Blockquote color=\"indigo\">\n\t\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\t\tstone alone comes near it in obstinacy.\n\t</Blockquote>\n\t<Blockquote color=\"cyan\">\n\t\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\t\tstone alone comes near it in obstinacy.\n\t</Blockquote>\n\t<Blockquote color=\"orange\">\n\t\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\t\tstone alone comes near it in obstinacy.\n\t</Blockquote>\n\t<Blockquote color=\"crimson\">\n\t\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\t\tstone alone comes near it in obstinacy.\n\t</Blockquote>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Compiled Flex element with CSS custom properties\nDESCRIPTION: This snippet shows how the Flex component with responsive width is compiled into HTML with CSS custom properties and utility classes. This approach ensures performance and server-side rendering compatibility.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/blog/themes-3.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n\tstyle={{ \"--width\": \"100%\", \"--width-md\": \"500px\", \"--width-sm\": \"300px\" }}\n\tclass=\"rt-Flex rt-r-w sm:rt-r-w md:rt-r-w\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Font in CSS\nDESCRIPTION: Shows how to assign a custom font loaded with next/font to the default font family in Radix Themes.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/typography.mdx#2025-04-21_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.radix-themes {\n\t--default-font-family: var(--font-inter);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Labels in DropdownMenu with React\nDESCRIPTION: This example shows how to use the Label part to add labels to sections in a DropdownMenu.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dropdown-menu.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<DropdownMenu.Root>\n\t<DropdownMenu.Trigger>…</DropdownMenu.Trigger>\n\t<DropdownMenu.Portal>\n\t\t<DropdownMenu.Content>\n\t\t\t<DropdownMenu.Label>Label</DropdownMenu.Label>\n\t\t\t<DropdownMenu.Item>…</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Item>…</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Item>…</DropdownMenu.Item>\n\t\t</DropdownMenu.Content>\n\t</DropdownMenu.Portal>\n</DropdownMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Context Menu Size Variations\nDESCRIPTION: Demonstrates how to control the context menu size using the `size` prop. Shows two different size configurations with identical menu structure.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/context-menu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid columns=\"2\" gap=\"3\">\\n\\t<ContextMenu.Root>\\n\\t\\t<ContextMenu.Trigger>\\n\\t\\t\\t<RightClickZone title=\"Size one\" />\\n\\t\\t</ContextMenu.Trigger>\\n\\t\\t<ContextMenu.Content size=\"1\">\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ E\">Edit</ContextMenu.Item>\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ D\">Duplicate</ContextMenu.Item>\\n\\t\\t\\t<ContextMenu.Separator />\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ N\">Archive</ContextMenu.Item>\\n\\n\\t\\t\\t<ContextMenu.Separator />\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ ⌫\" color=\"red\">\\n\\t\\t\\t\\tDelete\\n\\t\\t\\t</ContextMenu.Item>\\n\\t\\t</ContextMenu.Content>\\n\\t</ContextMenu.Root>\\n\\n\\t<ContextMenu.Root>\\n\\t\\t<ContextMenu.Trigger>\\n\\t\\t\\t<RightClickZone title=\"Size two\" />\\n\\t\\t</ContextMenu.Trigger>\\n\\t\\t<ContextMenu.Content size=\"2\">\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ E\">Edit</ContextMenu.Item>\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ D\">Duplicate</ContextMenu.Item>\\n\\t\\t\\t<ContextMenu.Separator />\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ N\">Archive</ContextMenu.Item>\\n\\n\\t\\t\\t<ContextMenu.Separator />\\n\\t\\t\\t<ContextMenu.Item shortcut=\"⌘ ⌫\" color=\"red\">\\n\\t\\t\\t\\tDelete\\n\\t\\t\\t</ContextMenu.Item>\\n\\t\\t</ContextMenu.Content>\\n\\t</ContextMenu.Root>\\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Switch Component with Different Variants in JSX\nDESCRIPTION: Shows different visual styles of the Switch component using the variant prop with values 'surface', 'classic', and 'soft', in both unchecked and checked states.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/switch.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"2\">\n\t<Flex direction=\"column\" gap=\"3\">\n\t\t<Switch variant=\"surface\" />\n\t\t<Switch variant=\"classic\" />\n\t\t<Switch variant=\"soft\" />\n\t</Flex>\n\n\t<Flex direction=\"column\" gap=\"3\">\n\t\t<Switch variant=\"surface\" defaultChecked />\n\t\t<Switch variant=\"classic\" defaultChecked />\n\t\t<Switch variant=\"soft\" defaultChecked />\n\t</Flex>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Tabs Size Customization Example\nDESCRIPTION: Shows how to implement different sized tab lists using the size prop. Demonstrates two variations with size='1' and size='2'.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/tabs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"4\" pb=\"2\">\n\t<Tabs.Root defaultValue=\"account\">\n\t\t<Tabs.List size=\"1\">\n\t\t\t<Tabs.Trigger value=\"account\">Account</Tabs.Trigger>\n\t\t\t<Tabs.Trigger value=\"documents\">Documents</Tabs.Trigger>\n\t\t\t<Tabs.Trigger value=\"settings\">Settings</Tabs.Trigger>\n\t\t</Tabs.List>\n\t</Tabs.Root>\n\n\t<Tabs.Root defaultValue=\"account\">\n\t\t<Tabs.List size=\"2\">\n\t\t\t<Tabs.Trigger value=\"account\">Account</Tabs.Trigger>\n\t\t\t<Tabs.Trigger value=\"documents\">Documents</Tabs.Trigger>\n\t\t\t<Tabs.Trigger value=\"settings\">Settings</Tabs.Trigger>\n\t\t</Tabs.List>\n\t</Tabs.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Semantic Aliases for the Same Color Scale in JavaScript\nDESCRIPTION: This snippet shows how to handle situations where multiple semantic terms need to map to the same color scale in JavaScript. It creates a theme object with multiple semantic aliases (like 'info'/'accent', 'valid'/'success', 'pending'/'warning') that reference the same Radix color values.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/overview/aliasing.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n\tblue,\n\tgreen,\n\tyellow\n} from \"@radix-ui/colors\";\n\nconst theme = {\n\t...blue,\n\t...green,\n\t...yellow,\n\n\taccent1: blue.blue1,\n\taccent2: blue.blue2,\n\tinfo1: blue.blue1,\n\tinfo2: blue.blue2,\n\n\tsuccess1: green.green1,\n\tsuccess2: green.green2,\n\tvalid1: green.green1,\n\tvalid2: green.green2,\n\n\twarning1: yellow.yellow1,\n\twarning2: yellow.yellow2,\n\tpending1: yellow.yellow1,\n\tpending2: yellow.yellow2,\n};\n```\n\n----------------------------------------\n\nTITLE: Text Component with Truncation in JSX\nDESCRIPTION: Example showing how to use the 'truncate' prop to truncate text with an ellipsis when it overflows its container, useful for preventing unwanted line wrapping.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex maxWidth=\"300px\">\n\t<Text truncate>\n\t\tThe goal of typography is to relate font size, line height, and line width\n\t\tin a proportional way that maximizes beauty and makes reading easier and\n\t\tmore pleasant.\n\t</Text>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Creating Semantic Color Aliases in JavaScript with Radix Colors\nDESCRIPTION: This snippet shows how to import Radix color scales in a JavaScript environment and create a theme object with semantic aliases. It demonstrates mapping color scale values to purpose-based property names for accent, success, warning, and danger colors.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/overview/aliasing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n\tblue,\n\tgreen,\n\tyellow,\n\tred\n} from \"@radix-ui/colors\";\n\nconst theme = {\n\t...blue,\n\t...green,\n\t...yellow,\n\t...red,\n\n\taccent1: blue.blue1,\n\taccent2: blue.blue2,\n\taccent3: blue.blue3,\n\taccent4: blue.blue4,\n\taccent5: blue.blue5,\n\taccent6: blue.blue6,\n\taccent7: blue.blue7,\n\taccent8: blue.blue8,\n\taccent9: blue.blue9,\n\taccent10: blue.blue10,\n\taccent11: blue.blue11,\n\taccent12: blue.blue12,\n\n\tsuccess1: green.green1,\n\tsuccess2: green.green2,\n\t// repeat for all steps\n\n\twarning1: yellow.yellow1,\n\twarning2: yellow.yellow2,\n\t// repeat for all steps\n\n\tdanger1: red.red1,\n\tdanger2: red.red2,\n\t// repeat for all steps\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Link Component\nDESCRIPTION: A basic example demonstrating the Radix UI Link component. It showcases a simple link with a default href attribute.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/link.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Link href=\"#\">Sign up</Link>\n```\n\n----------------------------------------\n\nTITLE: Using High-contrast Prop in Blockquote Component with JSX\nDESCRIPTION: This snippet illustrates the usage of the 'highContrast' prop to increase the color contrast of the Blockquote against its background, demonstrated alongside a regular colored Blockquote in a Flex layout.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/blockquote.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\" maxWidth=\"500px\">\n\t<Blockquote color=\"gray\">\n\t\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\t\tstone alone comes near it in obstinacy.\n\t</Blockquote>\n\t<Blockquote color=\"gray\" highContrast>\n\t\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\t\tstone alone comes near it in obstinacy.\n\t</Blockquote>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Progress Component\nDESCRIPTION: The command to install the Radix UI Progress component using npm. This is a prerequisite step for using the Progress component in a React project.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/progress.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-progress\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Radix UI Aspect Ratio Component in React\nDESCRIPTION: Example showing how to import the AspectRatio component from Radix UI and use it in a React component. This demonstrates the basic usage pattern with the Root element.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/aspect-ratio.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AspectRatio } from \"radix-ui\";\n\nexport default () => <AspectRatio.Root />;\n```\n\n----------------------------------------\n\nTITLE: Checkbox Color Assignment in JSX\nDESCRIPTION: Illustrates the use of the color prop to assign different colors to Checkbox components within a Flex layout. Examples include colors like indigo, cyan, orange, and crimson, with checkboxes set to default checked.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"2\">\n\t<Checkbox color=\"indigo\" defaultChecked />\n\t<Checkbox color=\"cyan\" defaultChecked />\n\t<Checkbox color=\"orange\" defaultChecked />\n\t<Checkbox color=\"crimson\" defaultChecked />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Variant Styles\nDESCRIPTION: Demonstrates different visual styles using the variant prop for Progress components\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/progress.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"4\" maxWidth=\"300px\">\n\t<Progress value={25} variant=\"classic\" />\n\t<Progress value={50} variant=\"surface\" />\n\t<Progress value={75} variant=\"soft\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Table with Surface Variant in Radix UI\nDESCRIPTION: Example showing how to apply variant=\"surface\" to create a table with a visually enclosed backplate, enhancing its visual separation from the background.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/table.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Table.Root variant=\"surface\">\n\t<Table.Header>\n\t\t<Table.Row>\n\t\t\t<Table.ColumnHeaderCell>Full name</Table.ColumnHeaderCell>\n\t\t\t<Table.ColumnHeaderCell>Email</Table.ColumnHeaderCell>\n\t\t\t<Table.ColumnHeaderCell>Group</Table.ColumnHeaderCell>\n\t\t</Table.Row>\n\t</Table.Header>\n\n\t<Table.Body>\n\t\t<Table.Row>\n\t\t\t<Table.RowHeaderCell>Danilo Sousa</Table.RowHeaderCell>\n\t\t\t<Table.Cell>danilo@example.com</Table.Cell>\n\t\t\t<Table.Cell>Developer</Table.Cell>\n\t\t</Table.Row>\n\n\t\t<Table.Row>\n\t\t\t<Table.RowHeaderCell>Zahra Ambessa</Table.RowHeaderCell>\n\t\t\t<Table.Cell>zahra@example.com</Table.Cell>\n\t\t\t<Table.Cell>Admin</Table.Cell>\n\t\t</Table.Row>\n\n\t\t<Table.Row>\n\t\t\t<Table.RowHeaderCell>Jasper Eriksson</Table.RowHeaderCell>\n\t\t\t<Table.Cell>jasper@example.com</Table.Cell>\n\t\t\t<Table.Cell>Developer</Table.Cell>\n\t\t</Table.Row>\n\t</Table.Body>\n</Table.Root>\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Radius in JSX\nDESCRIPTION: Demonstrates how to set the radius theme for a group of components using the Theme component with the radius prop.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/radius.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Theme radius=\"medium\">\n\t<TextField.Root size=\"3\" placeholder=\"Reply…\">\n\t\t<TextField.Slot side=\"right\" px=\"1\">\n\t\t\t<Button size=\"2\">Send</Button>\n\t\t</TextField.Slot>\n\t</TextField.Root>\n</Theme>\n```\n\n----------------------------------------\n\nTITLE: Applying Positioning Props to Box Component in JSX\nDESCRIPTION: Demonstrates the use of positioning props on the Box component, including responsive positioning and inset values.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/layout.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box position=\"relative\" />\n<Box position={{ initial: \"relative\", lg: \"sticky\" }} />\n\n<Box inset=\"4\" />\n<Box inset={{ initial: \"0\", xl: \"auto\" }} />\n\n<Box left=\"4\" />\n<Box left={{ initial: \"0\", xl: \"auto\" }} />\n```\n\n----------------------------------------\n\nTITLE: Trimming Leading Space\nDESCRIPTION: This snippet illustrates the usage of the 'trim' prop to adjust leading space on either side of the Heading text.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/heading.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\">\n\t<Heading\n\t\ttrim=\"normal\"\n\t\tstyle={{\n\t\t\tbackground: \"var(--gray-a2)\",\n\t\t\tborderTop: \"1px dashed var(--gray-a7)\",\n\t\t\tborderBottom: \"1px dashed var(--gray-a7)\",\n\t\t}}\n\t>\n\t\tWithout trim\n\t</Heading>\n\t<Heading\n\t\ttrim=\"both\"\n\t\tstyle={{\n\t\t\tbackground: \"var(--gray-a2)\",\n\t\t\tborderTop: \"1px dashed var(--gray-a7)\",\n\t\t\tborderBottom: \"1px dashed var(--gray-a7)\",\n\t\t}}\n\t>\n\t\tWith trim\n\t</Heading>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Creating Semantic Color Aliases in CSS with Radix Colors\nDESCRIPTION: This snippet demonstrates how to import Radix color scales via CDN and create semantic aliases by mapping color scales to purpose-based variable names. It shows mappings for accent, success, warning, and danger colors using CSS custom properties.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/overview/aliasing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/*\n * Note: Importing from the CDN in production is not recommended.\n * It's intended for prototyping only.\n */\n@import \"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/blue.css\";\n@import \"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/green.css\";\n@import \"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/yellow.css\";\n@import \"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/red.css\";\n\n:root {\n\t--accent-1: var(--blue-1);\n\t--accent-2: var(--blue-2);\n\t--accent-3: var(--blue-3);\n\t--accent-4: var(--blue-4);\n\t--accent-5: var(--blue-5);\n\t--accent-6: var(--blue-6);\n\t--accent-7: var(--blue-7);\n\t--accent-8: var(--blue-8);\n\t--accent-9: var(--blue-9);\n\t--accent-10: var(--blue-10);\n\t--accent-11: var(--blue-11);\n\t--accent-12: var(--blue-12);\n\n\t--success-1: var(--green-1);\n\t--success-2: var(--green-2);\n\t/* repeat for all steps */\n\n\t--warning-1: var(--yellow-1);\n\t--warning-2: var(--yellow-2);\n\t/* repeat for all steps */\n\n\t--danger-1: var(--red-1);\n\t--danger-2: var(--red-2);\n\t/* repeat for all steps */\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Portal Component in a React Application\nDESCRIPTION: This snippet demonstrates how to import the Portal component from Radix UI into a React application. The imported component is used in a functional component format.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/utilities/portal.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Portal } from \"radix-ui\";\n\nexport default () => <Portal.Root />;\n```\n\n----------------------------------------\n\nTITLE: Focus and Selection Color Example\nDESCRIPTION: Shows how focus and selection colors adapt to different accent colors\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/color.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Theme accentColor=\"indigo\">\n\t<Flex direction=\"column\" gap=\"4\">\n\t\t<Text>\n\t\t\tComplete your account setup in <Link href=\"#\">settings</Link>\n\t\t</Text>\n\t\t<Text color=\"gray\">\n\t\t\tComplete your account setup in <Link href=\"#\">settings</Link>\n\t\t</Text>\n\t\t<Text color=\"red\">\n\t\t\tComplete your account setup in <Link href=\"#\">settings</Link>\n\t\t</Text>\n\t</Flex>\n</Theme>\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Context Menu Package\nDESCRIPTION: Command for installing the Context Menu component from Radix UI using npm.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-context-menu\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled Items in ContextMenu with React\nDESCRIPTION: Example showing how to implement and style disabled items in a ContextMenu using the data-disabled attribute and CSS.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { ContextMenu } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<ContextMenu.Root>\n\t\t<ContextMenu.Trigger>…</ContextMenu.Trigger>\n\t\t<ContextMenu.Portal>\n\t\t\t<ContextMenu.Content>\n\t\t\t\t<ContextMenu.Item __className__=\"ContextMenuItem\" __disabled__>\n\t\t\t\t\t…\n\t\t\t\t</ContextMenu.Item>\n\t\t\t\t<ContextMenu.Item className=\"ContextMenuItem\">…</ContextMenu.Item>\n\t\t\t</ContextMenu.Content>\n\t\t</ContextMenu.Portal>\n\t</ContextMenu.Root>\n);\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.ContextMenuItem[__data-disabled__] {\n\tcolor: gainsboro;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Spinner Implementation in JSX\nDESCRIPTION: Simple implementation of the Spinner component with default settings.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/spinner.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Spinner />\n```\n\n----------------------------------------\n\nTITLE: TextArea Variant Styles\nDESCRIPTION: Shows different visual styles for the TextArea using the variant prop with surface, classic, and soft options.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text-area.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\" maxWidth=\"250px\">\n\t<TextArea variant=\"surface\" placeholder=\"Reply to comment…\" />\n\t<TextArea variant=\"classic\" placeholder=\"Reply to comment…\" />\n\t<TextArea variant=\"soft\" placeholder=\"Reply to comment…\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Text Field Radius Variants\nDESCRIPTION: Implementation showing different border radius options for text fields\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text-field.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\" maxWidth=\"250px\">\n\t<TextField.Root radius=\"none\" placeholder=\"Search the docs…\" />\n\t<TextField.Root radius=\"large\" placeholder=\"Search the docs…\" />\n\t<TextField.Root radius=\"full\" placeholder=\"Search the docs…\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Spinner Size Variations\nDESCRIPTION: Demonstrates different size variations of the Spinner component using the size prop within a Flex container.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/spinner.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"center\" gap=\"4\">\n\t<Spinner size=\"1\" />\n\t<Spinner size=\"2\" />\n\t<Spinner size=\"3\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Radix UI DropdownMenu.Group Props\nDESCRIPTION: This section describes the properties available for the `DropdownMenu.Group` component. This component is used to group multiple `DropdownMenu.Item` components.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dropdown-menu.mdx#2025-04-21_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Configuring Height on Box Component in JSX\nDESCRIPTION: Illustrates how to set height on the Box component using fixed values and responsive object notation.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/layout.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box height=\"100px\" />\n<Box height={{ md: '100vh', xl: '600px' }} />\n```\n\n----------------------------------------\n\nTITLE: Flex component with responsive width\nDESCRIPTION: This snippet demonstrates how to use responsive object syntax to set different widths for the Flex component at different breakpoints (initial, small, medium). The width will adjust based on the screen size.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/blog/themes-3.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex width={{ initial: \"100%\", sm: \"300px\", md: \"500px\" }} />\n```\n\n----------------------------------------\n\nTITLE: Text Component with No Wrapping in JSX\nDESCRIPTION: Example demonstrating the 'wrap' prop set to 'nowrap' to prevent text from wrapping to a new line, causing it to overflow its container instead.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex maxWidth=\"270px\">\n\t<Text wrap=\"nowrap\">\n\t\tThe goal of typography is to relate font size, line height, and line width\n\t\tin a proportional way that maximizes beauty and makes reading easier and\n\t\tmore pleasant.\n\t</Text>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Basic Collapsible Component Structure\nDESCRIPTION: Basic implementation showing the main structure of the Collapsible component with Root, Trigger, and Content parts.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/collapsible.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Collapsible } from \"radix-ui\";\n\nexport default () => (\n\t<Collapsible.Root>\n\t\t<Collapsible.Trigger />\n\t\t<Collapsible.Content />\n\t</Collapsible.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Spinner with Conditional Child Rendering in React\nDESCRIPTION: Shows how to use the Spinner component to conditionally render a child component (CubeIcon) based on a loading state. This approach preserves child dimensions to prevent layout shifts.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/blog/themes-3.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Spinner loading={loading}>\n\t<CubeIcon />\n</Spinner>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Switch Component Structure\nDESCRIPTION: Basic implementation showing the anatomy of a Switch component using Radix UI, demonstrating how to compose the Root and Thumb parts together.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/switch.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Switch } from \"radix-ui\";\n\nexport default () => (\n\t<Switch.Root>\n\t\t<Switch.Thumb />\n\t</Switch.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Separators to ContextMenu in React\nDESCRIPTION: Example demonstrating how to add separators between items in a ContextMenu to visually separate groups of menu items.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<ContextMenu.Root>\n\t<ContextMenu.Trigger>…</ContextMenu.Trigger>\n\t<ContextMenu.Portal>\n\t\t<ContextMenu.Content>\n\t\t\t<ContextMenu.Item>…</ContextMenu.Item>\n\t\t\t<ContextMenu.Separator />\n\t\t\t<ContextMenu.Item>…</ContextMenu.Item>\n\t\t\t<ContextMenu.Separator />\n\t\t\t<ContextMenu.Item>…</ContextMenu.Item>\n\t\t</ContextMenu.Content>\n\t</ContextMenu.Portal>\n</ContextMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Margin Props on Button Component in JSX\nDESCRIPTION: Demonstrates how to apply margin props to the Button component, including fixed values and responsive object notation.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/layout.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Button m=\"4\" />\n<Button m=\"100px\">\n<Button m={{ sm: '6', lg: '9' }}>\n```\n\n----------------------------------------\n\nTITLE: Animating Chevron rotation with CSS\nDESCRIPTION: This CSS snippet is responsible for the animation of the chevron icon within the accordion. It defines the rotation of the icon when the accordion trigger is in the open state. The output is a smoothly animated chevron that enhances the user interface. The key functionality includes using the 'transition' property for smooth animations.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/accordion.mdx#2025-04-21_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.AccordionChevron {\n\ttransition: transform 300ms;\n}\n.AccordionTrigger[data-state=\"open\"] > .AccordionChevron {\n\ttransform: rotate(180deg);\n}\n```\n\n----------------------------------------\n\nTITLE: Radix UI DropdownMenu.Label Props\nDESCRIPTION: This section outlines the properties for the `DropdownMenu.Label` component. It is used to render a label within the dropdown menu and is not focusable by arrow keys.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dropdown-menu.mdx#2025-04-21_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Package Structure and Breaking Changes\nDESCRIPTION: Details major structural changes to package exports and module organization to improve ESM compatibility and tree-shaking capabilities.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/releases.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Package structure\n  - Improve ESM compatibility\n  - Improve tree-shaking of individual component parts\n  - **[Breaking]** Drop named exports for multi-part components\n  - **[Breaking]** Remove component prop definitions and internal helpers\n```\n\n----------------------------------------\n\nTITLE: Truncating Overflowing Code Snippets in JSX\nDESCRIPTION: This snippet shows how to use the 'truncate' prop to truncate text with an ellipsis when it overflows its container, specifically demonstrating use with a long CSS gradient.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/code.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex maxWidth=\"200px\">\n\t<Code truncate>linear-gradient(red, orange, yellow, green, blue);</Code>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Controlling Text Wrapping\nDESCRIPTION: This snippet illustrates the use of the 'wrap' prop, showcasing different options for how text should wrap in the Heading component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/heading.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex maxWidth=\"300px\">\n\t<Heading wrap=\"nowrap\">The quick brown fox jumps over the lazy dog</Heading>\n</Flex>\n<Flex maxWidth=\"300px\">\n\t<Heading wrap=\"balance\">The quick brown fox jumps over the lazy dog</Heading>\n</Flex>\n<Flex maxWidth=\"300px\">\n\t<Heading wrap=\"pretty\">The quick brown fox jumps over the lazy dog</Heading>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Component Structure\nDESCRIPTION: Basic implementation showing the anatomy of the Checkbox component with Root and Indicator parts.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/checkbox.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Checkbox } from \"radix-ui\";\n\nexport default () => (\n\t<Checkbox.Root>\n\t\t<Checkbox.Indicator />\n\t</Checkbox.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Radio Card Size using Radix in React\nDESCRIPTION: Illustrates how to manipulate the size of Radio Card components using the \"size\" prop. This example shows three different size variations, allowing developers to adapt the size of the cards to fit different design requirements. Prerequisites include a React development environment and Radix UI included in the project.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio-cards.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"center\" gap=\"3\">\\n\\t<RadioCards.Root size=\"1\">\\n\\t\\t<RadioCards.Item value=\"1\">8-core CPU</RadioCards.Item>\\n\\t</RadioCards.Root>\\n\\n\\t<RadioCards.Root size=\"2\">\\n\\t\\t<RadioCards.Item value=\"1\">8-core CPU</RadioCards.Item>\\n\\t</RadioCards.Root>\\n\\n\\t<RadioCards.Root size=\"3\">\\n\\t\\t<RadioCards.Item value=\"1\">8-core CPU</RadioCards.Item>\\n\\t</RadioCards.Root>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Radio Group Items in JSX\nDESCRIPTION: Shows how to use the native 'disabled' attribute to create disabled radio buttons within a Radio Group.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio-group.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"2\">\n\t<RadioGroup.Root defaultValue=\"2\">\n\t\t<RadioGroup.Item value=\"1\">Off</RadioGroup.Item>\n\t\t<RadioGroup.Item value=\"2\">On</RadioGroup.Item>\n\t</RadioGroup.Root>\n\n\t<RadioGroup.Root defaultValue=\"2\">\n\t\t<RadioGroup.Item value=\"1\" disabled>\n\t\t\tOff\n\t\t</RadioGroup.Item>\n\t\t<RadioGroup.Item value=\"2\" disabled>\n\t\t\tOn\n\t\t</RadioGroup.Item>\n\t</RadioGroup.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Defining RadioItem Properties in React\nDESCRIPTION: This snippet defines properties for the RadioItem component used in the context of a RadioGroup. It includes properties such as 'asChild', 'value', 'disabled', and 'onSelect', detailing their types, requirements, and descriptions for use in a React application.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<PropsTable\n\tdata={[\n\t\t{\n\t\t\tname: \"asChild\",\n\t\t\trequired: false,\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: \"false\",\n\t\t\tdescription: (\n\t\t\t\t<>Change the default rendered element for the one passed as a child,\n\t\t\t\tmerging their props and behavior.<br /><br />Read our <a href=\"../guides/composition\">Composition</a> guide for more details.</>\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\tname: \"value\",\n\t\t\ttype: \"string\",\n\t\t\trequired: true,\n\t\t\tdescription: \"The unique value of the item.\",\n\t\t},\n\t\t{\n\t\t\tname: \"disabled\",\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: (\n\t\t\t\t<span>When <Code>true</Code>, prevents the user from interacting with the item.</span>\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\tname: \"onSelect\",\n\t\t\ttype: \"(event: Event) => void\",\n\t\t\ttypeSimple: \"function\",\n\t\t\tdescription: (\n\t\t\t\t<span>Event handler called when the user selects an item (via mouse or keyboard). Calling <Code>event.preventDefault</Code> in this handler will prevent the context menu from closing when selecting that item.</span>\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\tname: \"textValue\",\n\t\t\ttype: \"string\",\n\t\t\tdescription: (\n\t\t\t\t<span>Optional text used for typeahead purposes. By default the typeahead behavior will use the <Code>.textContent</Code> of the item. Use this when the content is complex, or you have non-textual content inside.</span>\n\t\t\t),\n\t\t},\n\t]}/>\n```\n\n----------------------------------------\n\nTITLE: Text Field Visual Variants\nDESCRIPTION: Demonstration of different visual styles using the variant prop\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text-field.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\" maxWidth=\"250px\">\n\t<TextField.Root variant=\"surface\" placeholder=\"Search the docs…\" />\n\t<TextField.Root variant=\"classic\" placeholder=\"Search the docs…\" />\n\t<TextField.Root variant=\"soft\" placeholder=\"Search the docs…\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Keyboard Interaction Table - Radix UI\nDESCRIPTION: This section describes the keyboard interactions for the Radix UI component. It outlines how different keys and key combinations affect focus, value manipulation, and form submission within the component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/one-time-password-field.mdx#2025-04-21_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: CSS Token Updates for Radix Themes 3.0\nDESCRIPTION: Changes to CSS custom property names and values introduced in version 3.0. Includes updates to color tokens, focus colors, and component-specific variables.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/releases.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n--color-surface-accent → --accent-surface\n--accent-9-contrast → --accent-contrast\n--color-autofill-root → --focus-a3\n--color-focus-root → --focus-8\n--color-selection-root → --focus-a5\n```\n\n----------------------------------------\n\nTITLE: Controlling Text Size for Code Snippets in JSX\nDESCRIPTION: This code snippet illustrates how to use the 'size' prop to control the text size of code snippets. It contains multiple instances of the 'Code' component demonstrating various size options.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/code.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\" align=\"start\">\n\t<Code size=\"1\">console.log()</Code>\n\t<Code size=\"2\">console.log()</Code>\n\t<Code size=\"3\">console.log()</Code>\n\t<Code size=\"4\">console.log()</Code>\n\t<Code size=\"5\">console.log()</Code>\n\t<Code size=\"6\">console.log()</Code>\n\t<Code size=\"7\">console.log()</Code>\n\t<Code size=\"8\">console.log()</Code>\n\t<Code size=\"9\">console.log()</Code>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkbox Card Sizes in React\nDESCRIPTION: Shows how to set different size variations for checkbox cards using the size prop\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox-cards.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"center\" gap=\"3\">\n\t<CheckboxCards.Root defaultValue={[\"1\"]} size=\"1\">\n\t\t<CheckboxCards.Item value=\"1\">Agree to Terms</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n\n\t<CheckboxCards.Root defaultValue={[\"1\"]} size=\"2\">\n\t\t<CheckboxCards.Item value=\"1\">Agree to Terms</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n\n\t<CheckboxCards.Root defaultValue={[\"1\"]} size=\"3\">\n\t\t<CheckboxCards.Item value=\"1\">Agree to Terms</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Text Field Color Variants\nDESCRIPTION: Examples of text fields with different color assignments\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text-field.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\" maxWidth=\"250px\">\n\t<TextField.Root\n\t\tcolor=\"indigo\"\n\t\tvariant=\"soft\"\n\t\tplaceholder=\"Search the docs…\"\n\t/>\n\t<TextField.Root color=\"green\" variant=\"soft\" placeholder=\"Search the docs…\" />\n\t<TextField.Root color=\"red\" variant=\"soft\" placeholder=\"Search the docs…\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Composing Radix UI Accordion Component\nDESCRIPTION: Example of how to import and compose the Accordion component parts.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/accordion.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Accordion } from \"radix-ui\";\n\nexport default () => (\n\t<Accordion.Root>\n\t\t<Accordion.Item>\n\t\t\t<Accordion.Header>\n\t\t\t\t<Accordion.Trigger />\n\t\t\t</Accordion.Header>\n\t\t\t<Accordion.Content />\n\t\t</Accordion.Item>\n\t</Accordion.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Disabled Checkbox Cards in React\nDESCRIPTION: Illustrates how to create disabled checkbox card items that cannot be interacted with\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/checkbox-cards.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"4\" maxWidth=\"450px\">\n\t<CheckboxCards.Root columns=\"2\" defaultValue=\"2\">\n\t\t<CheckboxCards.Item value=\"1\">Off</CheckboxCards.Item>\n\t\t<CheckboxCards.Item value=\"2\">On</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n\n\t<CheckboxCards.Root columns=\"2\" defaultValue=\"2\">\n\t\t<CheckboxCards.Item value=\"1\" disabled>\n\t\t\tOff\n\t\t</CheckboxCards.Item>\n\t\t<CheckboxCards.Item value=\"2\" disabled>\n\t\t\tOn\n\t\t</CheckboxCards.Item>\n\t</CheckboxCards.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Styling for Popover Components using CSS\nDESCRIPTION: This CSS snippet defines the styles for the Popover components, targeting the Popover.Trigger, Popover.Content, and Popover.Arrow, ensuring adequate spacing and background properties for better presentation.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/overview/getting-started.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.PopoverTrigger {\n\tbackground-color: white;\n\tborder-radius: 4px;\n}\n\n.PopoverContent {\n\tborder-radius: 4px;\n\tpadding: 20px;\n\twidth: 260px;\n\tbackground-color: white;\n}\n\n.PopoverArrow {\n\tfill: white;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Attributes for CheckboxItem\nDESCRIPTION: This snippet defines data attributes for the CheckboxItem component that provide information about its state, including whether it is checked, unchecked, or indeterminate. These attributes are used for styling and functionality purpose in a React application.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<DataAttributesTable\n\tdata={[\n\t\t{\n\t\t\tattribute: \"[data-state]\",\n\t\t\tvalues: [\"checked\", \"unchecked\", \"indeterminate\"],\n\t\t},\n\t\t{\n\t\t\tattribute: \"[data-highlighted]\",\n\t\t\tvalues: \"Present when highlighted\",\n\t\t},\n\t\t{\n\t\t\tattribute: \"[data-disabled]\",\n\t\t\tvalues: \"Present when disabled\",\n\t\t},\n\t]} />\n```\n\n----------------------------------------\n\nTITLE: Animating Swipe Gesture Styles in CSS\nDESCRIPTION: This CSS snippet styles the Toast component to animate a swipe-to-close gesture. It uses CSS variables (--radix-toast-swipe-move-x and --radix-toast-swipe-end-x) and data attributes (data-swipe) to control the transform and transition properties, creating the swipe animation effect. A keyframes animation named slideRight defines how the toast moves during the end of swipe.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toast.mdx#2025-04-21_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.ToastRoot[__data-swipe__=\"move\"] {\n\ttransform: translateX(var(__--radix-toast-swipe-move-x__));\n}\n.ToastRoot[__data-swipe__=\"cancel\"] {\n\ttransform: translateX(0);\n\ttransition: transform 200ms ease-out;\n}\n.ToastRoot[__data-swipe__=\"end\"] {\n\tanimation: slideRight 100ms ease-out;\n}\n\n@keyframes slideRight {\n\tfrom {\n\t\ttransform: translateX(var(__--radix-toast-swipe-end-x__));\n\t}\n\tto {\n\t\ttransform: translateX(100%);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Constraining Menubar Content Size (JSX)\nDESCRIPTION: This code snippet shows how to constrain the size of the Menubar content using CSS custom properties. It demonstrates the use of the 'className' prop to apply custom styles to the Menubar.Content component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/menubar.mdx#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport { Menubar } from \"radix-ui\";\nimport \"./styles.css\";\n\nexport default () => (\n\t<Menubar.Root>\n\t\t<Menubar.Trigger>…</Menubar.Trigger>\n\t\t<Menubar.Portal>\n\t\t\t<Menubar.Content __className__=\"MenubarContent\" sideOffset={5}>\n\t\t\t\t…\n\t\t\t</Menubar.Content>\n\t\t</Menubar.Portal>\n\t</Menubar.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes - October 2021\nDESCRIPTION: Release notes detailing version updates and fixes across all primitives including composability improvements and CSS animation fixes.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/overview/releases.mdx#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## October 15, 2021\n\n<PackageRelease name=\"All primitives\" />\n\n- All primitives are now versioned <Badge size=\"1\" color=\"blue\">0.1.1</Badge>\n- Fix composability issues between primitives by scoping context <PRLink id={906} />\n- Fix CSS unmount animations <PRLink id={851} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Hover Card to Show Instantly\nDESCRIPTION: Example demonstrating how to configure a Hover Card to open immediately by setting the openDelay prop to 0.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/hover-card.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HoverCard } from \"radix-ui\";\n\nexport default () => (\n\t<HoverCard.Root __openDelay__={0}>\n\t\t<HoverCard.Trigger>…</HoverCard.Trigger>\n\t\t<HoverCard.Content>…</HoverCard.Content>\n\t</HoverCard.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Composing Formatting Components in JSX\nDESCRIPTION: Shows how to compose formatting components like Em and Strong to add emphasis and signal importance in text.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/typography.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Text>\n\tThe <Em>most</Em> important thing to remember is,{\" \"}\n\t<Strong>stay positive</Strong>.\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Basic Text Component Usage in JSX\nDESCRIPTION: Simple example showing the basic usage of the Text component. This renders a span element with the provided text content.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Text>The quick brown fox jumps over the lazy dog.</Text>\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Form Component\nDESCRIPTION: Command to install the Radix UI Form component using npm.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/form.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-form\n```\n\n----------------------------------------\n\nTITLE: High-Contrast Link Components\nDESCRIPTION: Demonstrates the usage of the `highContrast` prop to increase the color contrast of the Radix UI Link component with its background.  It shows the same link with and without the `highContrast` prop to highlight the difference.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/link.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\">\n\t<Link href=\"#\" color=\"gray\">\n\t\tSign up\n\t</Link>\n\t<Link href=\"#\" color=\"gray\" highContrast>\n\t\tSign up\n\t</Link>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Rendering Separator Component with Text in JSX\nDESCRIPTION: This snippet demonstrates how to use the Separator component within a Text component, including both horizontal and vertical separators in a flex layout.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/separator.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Text size=\"2\">\n\tTools for building high-quality, accessible UI.\n\t<Separator my=\"3\" size=\"4\" />\n\t<Flex gap=\"3\" align=\"center\">\n\t\tThemes\n\t\t<Separator orientation=\"vertical\" />\n\t\tPrimitives\n\t\t<Separator orientation=\"vertical\" />\n\t\tIcons\n\t\t<Separator orientation=\"vertical\" />\n\t\tColors\n\t</Flex>\n</Text>\n```\n\n----------------------------------------\n\nTITLE: High Contrast Tab Navigation Implementation\nDESCRIPTION: Example showing the usage of highContrast prop to increase color contrast with the background.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/tab-nav.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"4\" pb=\"2\">\n\t<TabNav.Root color=\"gray\">\n\t\t<TabNav.Link href=\"#\" active>\n\t\t\tAccount\n\t\t</TabNav.Link>\n\t\t<TabNav.Link href=\"#\">Documents</TabNav.Link>\n\t\t<TabNav.Link href=\"#\">Settings</TabNav.Link>\n\t</TabNav.Root>\n\n\t<TabNav.Root color=\"gray\" highContrast>\n\t\t<TabNav.Link href=\"#\" active>\n\t\t\tAccount\n\t\t</TabNav.Link>\n\t\t<TabNav.Link href=\"#\">Documents</TabNav.Link>\n\t\t<TabNav.Link href=\"#\">Settings</TabNav.Link>\n\t</TabNav.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Importing Radix Colors with emotion\nDESCRIPTION: This snippet shows the import statements required to use Radix Colors with emotion.  It imports the color scales and the ThemeProvider from `@emotion/react`, and `styled` from `@emotion/styled`.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/overview/usage.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n\tgray,\n\tblue,\n\tred,\n\tgreen,\n\tgrayDark,\n\tblueDark,\n\tredDark,\n\tgreenDark,\n} from \"@radix-ui/colors\";\nimport { ThemeProvider } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes - September 2021\nDESCRIPTION: Documentation of primitives moving to Beta status and breaking changes including replacement of polymorphic 'as' prop.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/overview/releases.mdx#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## September 7, 2021\n\n<PackageRelease name=\"All primitives\" />\n\n- All primitives moved to **Beta** and are now versioned <Badge size=\"1\" color=\"blue\">0.1.0</Badge>\n- **\\[Breaking\\]** Replace polymorphic `as` prop with `asChild` boolean prop.\n```\n\n----------------------------------------\n\nTITLE: Popover Collision Animations (CSS)\nDESCRIPTION: This CSS code defines animations for the PopoverContent based on the `data-side` attribute. It uses keyframes to create slideUp and slideDown animations that are triggered when the popover is positioned at the top or bottom of the trigger element, respectively.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/popover.mdx#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n\"/* styles.css */\n.PopoverContent {\n\tanimation-duration: 0.6s;\n\tanimation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.PopoverContent[__data-side__=\\\"top\\\"] {\n\tanimation-name: slideUp;\n}\n.PopoverContent[__data-side__=\\\"bottom\\\"] {\n\tanimation-name: slideDown;\n}\n\n@keyframes slideDown {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: translateY(-10px);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: translateY(0);\n\t}\n}\n\n@keyframes slideUp {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: translateY(10px);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: translateY(0);\n\t}\n}\"\n```\n\n----------------------------------------\n\nTITLE: Custom Paragraph Style Example\nDESCRIPTION: Example of CSS and JSX code showing how to create and apply custom paragraph styles with Radix Themes Box component using asChild prop.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/styling.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.my-paragraph {\n\tmargin: 0;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyApp() {\n\treturn (\n\t\t<Theme>\n\t\t\t<Box asChild m=\"5\">\n\t\t\t\t<p className=\"my-paragraph\">My custom paragraph</p>\n\t\t\t</Box>\n\t\t</Theme>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Radio Group Size in JSX\nDESCRIPTION: Shows how to use the 'size' prop to control the radio button size with three different size options.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio-group.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"center\" gap=\"2\">\n\t<RadioGroup.Root size=\"1\" defaultValue=\"1\">\n\t\t<RadioGroup.Item value=\"1\" />\n\t</RadioGroup.Root>\n\n\t<RadioGroup.Root size=\"2\" defaultValue=\"1\">\n\t\t<RadioGroup.Item value=\"1\" />\n\t</RadioGroup.Root>\n\n\t<RadioGroup.Root size=\"3\" defaultValue=\"1\">\n\t\t<RadioGroup.Item value=\"1\" />\n\t</RadioGroup.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Controlling Heading Size\nDESCRIPTION: This code illustrates the size prop of the Heading component, which adjusts the heading size while maintaining appropriate line height and letter spacing.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/heading.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\">\n\t<Heading size=\"1\">The quick brown fox jumps over the lazy dog</Heading>\n\t<Heading size=\"2\">The quick brown fox jumps over the lazy dog</Heading>\n\t<Heading size=\"3\">The quick brown fox jumps over the lazy dog</Heading>\n\t<Heading size=\"4\">The quick brown fox jumps over the lazy dog</Heading>\n\t<Heading size=\"5\">The quick brown fox jumps over the lazy dog</Heading>\n\t<Heading size=\"6\">The quick brown fox jumps over the lazy dog</Heading>\n\t<Heading size=\"7\">The quick brown fox jumps over the lazy dog</Heading>\n\t<Heading size=\"8\">The quick brown fox jumps over the lazy dog</Heading>\n\t<Heading size=\"9\">The quick brown fox jumps over the lazy dog</Heading>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Switch Component with Different Sizes in JSX\nDESCRIPTION: Demonstrates different sizes of the Switch component using the size prop with values 1, 2, and 3, all with defaultChecked set to true.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/switch.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"center\" gap=\"2\">\n\t<Switch size=\"1\" defaultChecked />\n\t<Switch size=\"2\" defaultChecked />\n\t<Switch size=\"3\" defaultChecked />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Separator Sizes in JSX\nDESCRIPTION: This example shows how to use the 'size' prop to control the size of horizontal separators, with sizes ranging from 1 to 4.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/separator.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"4\">\n\t<Separator orientation=\"horizontal\" size=\"1\" />\n\t<Separator orientation=\"horizontal\" size=\"2\" />\n\t<Separator orientation=\"horizontal\" size=\"3\" />\n\t<Separator orientation=\"horizontal\" size=\"4\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Increasing Color Contrast\nDESCRIPTION: This snippet shows the 'highContrast' prop usage in the Heading component to enhance text visibility against the background.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/heading.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\">\n\t<Heading color=\"gray\">The quick brown fox jumps over the lazy dog.</Heading>\n\t<Heading color=\"gray\" highContrast>\n\t\tThe quick brown fox jumps over the lazy dog.\n\t</Heading>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Close Icon Button for Toasts in React\nDESCRIPTION: This snippet demonstrates how to label the close icon button in a Toast for screen reader users. The aria-label attribute provides a text description for the button, and the aria-hidden attribute hides the icon from screen readers, preventing redundant announcements.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toast.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Toast.Root type=\"foreground\">\n\t<Toast.Description>Saved!</Toast.Description>\n\t<Toast.Close aria-label=\"Close\">\n\t\t<span aria-hidden>×</span>\n\t</Toast.Close>\n</Toast.Root>\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Tabs Component Customization\nDESCRIPTION: CSS variables that can be added to the .radix-themes class for customizing the letter spacing and word spacing of active and inactive tabs to minimize apparent weight shifts when using custom fonts.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/releases.mdx#2025-04-21_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n--tabs-trigger-active-letter-spacing\n--tabs-trigger-active-word-spacing\n--tabs-trigger-inactive-letter-spacing\n--tabs-trigger-inactive-word-spacing\n```\n\n----------------------------------------\n\nTITLE: Installing Individual Radix UI Primitives - Bash\nDESCRIPTION: This snippet illustrates how to install individual Radix UI components. This method allows developers to include only the components they need in their project, optimizing bundle size.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/overview/introduction.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-dialog\nnpm install @radix-ui/react-dropdown-menu\nnpm install @radix-ui/react-tooltip\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Select Component using npm\nDESCRIPTION: This code installs the Radix UI Select component via npm command line, enabling the use of the select dropdown in a React project.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/select.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-select\n```\n\n----------------------------------------\n\nTITLE: Using Size Prop in Blockquote Component with JSX\nDESCRIPTION: This snippet illustrates the use of the 'size' prop to control the text size within the Blockquote component. It provides a range of sizes from 1 to 9, encapsulated within a Flex component for layout purposes.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/blockquote.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"5\">\n\t<Box maxWidth=\"300px\">\n\t\t<Blockquote size=\"1\">\n\t\t\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\t\t\tstone alone comes near it in obstinacy.\n\t\t</Blockquote>\n\t</Box>\n\t<Box maxWidth=\"350px\">\n\t\t<Blockquote size=\"2\">\n\t\t\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\t\t\tstone alone comes near it in obstinacy.\n\t\t</Blockquote>\n\t</Box>\n\t<Box maxWidth=\"400px\">\n\t\t<Blockquote size=\"3\">\n\t\t\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\t\t\tstone alone comes near it in obstinacy.\n\t\t</Blockquote>\n\t</Box>\n\t<Box maxWidth=\"450px\">\n\t\t<Blockquote size=\"4\">\n\t\t\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\t\t\tstone alone comes near it in obstinacy.\n\t\t</Blockquote>\n\t</Box>\n\t<Box maxWidth=\"500px\">\n\t\t<Blockquote size=\"5\">\n\t\t\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\t\t\tstone alone comes near it in obstinacy.\n\t\t</Blockquote>\n\t</Box>\n\t<Box maxWidth=\"550px\">\n\t\t<Blockquote size=\"6\">\n\t\t\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\t\t\tstone alone comes near it in obstinacy.\n\t\t</Blockquote>\n\t</Box>\n\t<Box maxWidth=\"600px\">\n\t\t<Blockquote size=\"7\">\n\t\t\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\t\t\tstone alone comes near it in obstinacy.\n\t\t</Blockquote>\n\t</Box>\n\t<Box maxWidth=\"650px\">\n\t\t<Blockquote size=\"8\">\n\t\t\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\t\t\tstone alone comes near it in obstinacy.\n\t\t</Blockquote>\n\t</Box>\n\t<Box maxWidth=\"1000px\">\n\t\t<Blockquote size=\"9\">\n\t\t\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\t\t\tstone alone comes near it in obstinacy.\n\t\t</Blockquote>\n\t</Box>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Tabs Package\nDESCRIPTION: Command to install the Radix UI Tabs component package via npm.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/tabs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-tabs\n```\n\n----------------------------------------\n\nTITLE: Custom Font Leading Trim CSS Variables\nDESCRIPTION: CSS variables for adjusting trim values when using custom fonts. These variables control the amount of space trimmed from the start and end of text for both default text and headings.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text.mdx#2025-04-21_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.radix-themes {\n\t--default-leading-trim-start: 0.42em;\n\t--default-leading-trim-end: 0.36em;\n\t--heading-leading-trim-start: 0.42em;\n\t--heading-leading-trim-end: 0.36em;\n}\n```\n\n----------------------------------------\n\nTITLE: Select Item Component Props Configuration\nDESCRIPTION: Props definition for Select Item with value, disabled state, and typeahead text configuration\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/select.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  value: string,\n  disabled?: boolean,\n  textValue?: string,\n  asChild?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Separator Colors in JSX\nDESCRIPTION: This example demonstrates how to use the 'color' prop to assign specific colors to separators, using predefined color values.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/separator.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\">\n\t<Separator color=\"indigo\" size=\"4\" />\n\t<Separator color=\"cyan\" size=\"4\" />\n\t<Separator color=\"orange\" size=\"4\" />\n\t<Separator color=\"crimson\" size=\"4\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Using Scaling Factor CSS Variable in Custom Components\nDESCRIPTION: Example of how to use the --scaling CSS variable to create custom components that respond to the theme's scaling factor, ensuring consistency with the rest of the application.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/spacing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.MyCustomComponent {\n\twidth: calc(200px * var(--scaling));\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Radix Colors via CDN\nDESCRIPTION: HTML code to load Radix Colors CSS files from CDN. This includes light and dark scales for various colors. Note that using CDN in production is not recommended.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/overview/installation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Load whichever light and dark scales you need -->\n<link\n\trel=\"stylesheet\"\n\thref=\"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/gray.css\"\n/>\n<link\n\trel=\"stylesheet\"\n\thref=\"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/blue.css\"\n/>\n<link\n\trel=\"stylesheet\"\n\thref=\"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/green.css\"\n/>\n<link\n\trel=\"stylesheet\"\n\thref=\"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/red.css\"\n/>\n<link\n\trel=\"stylesheet\"\n\thref=\"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/gray-dark.css\"\n/>\n<link\n\trel=\"stylesheet\"\n\thref=\"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/blue-dark.css\"\n/>\n<link\n\trel=\"stylesheet\"\n\thref=\"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/green-dark.css\"\n/>\n<link\n\trel=\"stylesheet\"\n\thref=\"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/red-dark.css\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Version of Radix Colors via CDN\nDESCRIPTION: HTML code to load a specific version (3.0.0) of Radix Colors CSS files from CDN. This example shows how to pin your scales to a specific version.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/overview/installation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link\n\trel=\"stylesheet\"\n\thref=\"https://cdn.jsdelivr.net/npm/@radix-ui/colors@3.0.0/blue.css\"\n/>\n<link\n\trel=\"stylesheet\"\n\thref=\"https://cdn.jsdelivr.net/npm/@radix-ui/colors@3.0.0/blue-dark.css\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Text with Color Steps 11-12 in JSX\nDESCRIPTION: This code shows how to apply steps 11 and 12 of the Radix color scale to text elements. It demonstrates using step 11 for low-contrast text and step 12 for high-contrast text across pink, slate, and gray colors.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/palette-composition/understanding-the-scale.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"2\" direction=\"column\" my=\"5\">\n\t<Text size=\"3\" style={{ color: \"var(--pink-11)\" }}>\n\t\tThis text is Pink 11\n\t</Text>\n\t<Text size=\"3\" style={{ color: \"var(--slate-11)\" }}>\n\t\tThis text is Slate 11\n\t</Text>\n\t<Text size=\"3\" style={{ color: \"var(--gray-11)\" }}>\n\t\tThis text is Gray 11\n\t</Text>\n\t<Text size=\"3\" weight=\"bold\" style={{ color: \"var(--pink-12)\" }}>\n\t\tThis text is Pink 12\n\t</Text>\n\t<Text size=\"3\" weight=\"bold\" style={{ color: \"var(--slate-12)\" }}>\n\t\tThis text is Slate 12\n\t</Text>\n\t<Text size=\"3\" weight=\"bold\" style={{ color: \"var(--gray-12)\" }}>\n\t\tThis text is Gray 12\n\t</Text>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: TextArea Color Customization\nDESCRIPTION: Examples of TextArea with different color variations using the color prop.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text-area.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\" maxWidth=\"250px\">\n\t<TextArea color=\"blue\" variant=\"soft\" placeholder=\"Reply to comment…\" />\n\t<TextArea color=\"green\" variant=\"soft\" placeholder=\"Reply to comment…\" />\n\t<TextArea color=\"red\" variant=\"soft\" placeholder=\"Reply to comment…\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Dropdown Menu Component - Bash\nDESCRIPTION: This snippet provides the command to install the Radix UI dropdown menu component using npm, which is essential for using the component in your project.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dropdown-menu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-dropdown-menu\n```\n\n----------------------------------------\n\nTITLE: Accessing Radius CSS Variables\nDESCRIPTION: Shows the CSS variables available for accessing radius values in custom styling, including responsive radius factors and special radius calculations.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/radius.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* Radius values that automatically respond to the radius factor */\nvar(--radius-1);\nvar(--radius-2);\nvar(--radius-3);\nvar(--radius-4);\nvar(--radius-5);\nvar(--radius-6);\n\n/* A multiplier that controls the theme radius */\nvar(--radius-factor);\n\n/*\n * A variable used to calculate a fully rounded radius.\n * Usually used within a CSS `max()` function.\n */\nvar(--radius-full);\n\n/*\n * A variable used to calculate radius of a thumb element.\n * Usually used within a CSS `max()` function.\n */\nvar(--radius-thumb);\n```\n\n----------------------------------------\n\nTITLE: Radix UI DropdownMenu.Content Props\nDESCRIPTION: This section describes the properties available for the `DropdownMenu.Content` component. These properties control the behavior and appearance of the dropdown menu content, including event handlers for focus and pointer events, positioning, collision handling, and animation control.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dropdown-menu.mdx#2025-04-21_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Setting Separator Orientation in JSX\nDESCRIPTION: This snippet shows how to use the 'orientation' prop to control whether the separator is horizontal or vertical within a flex container.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/separator.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"center\" gap=\"4\">\n\t<Separator orientation=\"horizontal\" />\n\t<Separator orientation=\"vertical\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Using next/font with Radix Themes in JSX\nDESCRIPTION: Shows how to load and apply custom fonts using next/font in a Next.js application with Radix Themes.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/typography.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Inter } from \"next/font/google\";\n\nconst inter = Inter({\n\tsubsets: [\"latin\"],\n\tdisplay: \"swap\",\n\tvariable: \"--font-inter\",\n});\n\nexport default function RootLayout({ children }) {\n\treturn (\n\t\t<html lang=\"en\" className={inter.variable}>\n\t\t\t<body>{children}</body>\n\t\t</html>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing High-Contrast Radio Buttons in JSX\nDESCRIPTION: This snippet demonstrates the use of the 'highContrast' prop to increase color contrast with the background. It shows a grid of radio buttons with and without high contrast for different colors.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid columns=\"5\" display=\"inline-grid\" gap=\"2\">\n\t<Radio color=\"indigo\" defaultChecked />\n\t<Radio color=\"cyan\" defaultChecked />\n\t<Radio color=\"orange\" defaultChecked />\n\t<Radio color=\"crimson\" defaultChecked />\n\t<Radio color=\"gray\" defaultChecked />\n\n\t<Radio color=\"indigo\" defaultChecked highContrast />\n\t<Radio color=\"cyan\" defaultChecked highContrast />\n\t<Radio color=\"orange\" defaultChecked highContrast />\n\t<Radio color=\"crimson\" defaultChecked highContrast />\n\t<Radio color=\"gray\" defaultChecked highContrast />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Files in Next.js Layout\nDESCRIPTION: Example showing the correct order for importing Radix Themes and custom CSS files in Next.js layout files. Note that Next.js 13.0-14.1 has issues with CSS import order.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/styling.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@radix-ui/themes/styles.css\";\nimport \"./my-styles.css\";\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Checkbox Package\nDESCRIPTION: Command to install the Radix UI Checkbox component package via npm.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/checkbox.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-checkbox\n```\n\n----------------------------------------\n\nTITLE: Custom Anchor Styling (CSS)\nDESCRIPTION: This CSS code provides basic styling for the `Row` component used as a custom anchor in the previous JSX example. It sets the background color and padding for the row.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/popover.mdx#2025-04-21_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n\"/* styles.css */\n.Row {\n\tbackground-color: gainsboro;\n\tpadding: 20px;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Width on Box Component in JSX\nDESCRIPTION: Shows examples of setting width on the Box component using fixed values and responsive object notation.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/layout.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box width=\"100px\" />\n<Box width={{ md: '100vw', xl: '1400px' }} />\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata in Markdown for Composer Case Study\nDESCRIPTION: This code snippet defines the metadata for the Composer case study page, including the title, description, author information, and company details. It uses YAML-like syntax within Markdown frontmatter.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/case-studies/composer.mdx#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\nmetaTitle: Composer\nmetaDescription: \"Composer have been able to make their product significantly more accessible and reduce code complexity while allowing them to focus on building complex trading software.\"\nauthor: Mitul Shah\nauthorAvatarUrl: /marketing/avatar-mitul-shah.jpg\nauthorPosition: UX Developer at Composer\ncompanyAbout: Composer is an automated trading platform. It provides investors with the power to build a portfolio of hedge fund-like strategies without a spreadsheet or line of code.\ncompanyUrl: composer.trade\ncompanyFounded: Distributed, 2020\ncompanyLogoVariant: Composer\n---\n```\n\n----------------------------------------\n\nTITLE: Customizing Cursor Tokens in CSS\nDESCRIPTION: Example of how to override default cursor tokens to set pointer cursors for interactive elements and specific cursors for slider interactions.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/cursors.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.radix-themes {\n\t--cursor-button: pointer;\n\t--cursor-checkbox: pointer;\n\t--cursor-disabled: default;\n\t--cursor-link: pointer;\n\t--cursor-menu-item: pointer;\n\t--cursor-radio: pointer;\n\t--cursor-slider-thumb: grab;\n\t--cursor-slider-thumb-active: grabbing;\n\t--cursor-switch: pointer;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Component Size in React\nDESCRIPTION: This example shows how to use the 'size' prop to control the size of the Select component. It demonstrates three different sizes: 1, 2, and 3.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/select.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"3\" align=\"center\">\n\t<Select.Root size=\"1\" defaultValue=\"apple\">\n\t\t<Select.Trigger />\n\t\t<Select.Content>\n\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t</Select.Content>\n\t</Select.Root>\n\n\t<Select.Root size=\"2\" defaultValue=\"apple\">\n\t\t<Select.Trigger />\n\t\t<Select.Content>\n\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t</Select.Content>\n\t</Select.Root>\n\n\t<Select.Root size=\"3\" defaultValue=\"apple\">\n\t\t<Select.Trigger />\n\t\t<Select.Content>\n\t\t\t<Select.Item value=\"apple\">Apple</Select.Item>\n\t\t\t<Select.Item value=\"orange\">Orange</Select.Item>\n\t\t</Select.Content>\n\t</Select.Root>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Size-Controlled Skeleton Component\nDESCRIPTION: Example showing how to manually control Skeleton dimensions using width and height props.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/skeleton.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Skeleton width=\"48px\" height=\"48px\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and rendering ToggleGroup component\nDESCRIPTION: This code snippet demonstrates how to import the `ToggleGroup` component from `radix-ui` and render a basic ToggleGroup. It initializes a `ToggleGroup.Root` and a `ToggleGroup.Item` within a React component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toggle-group.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ToggleGroup } from \"radix-ui\";\n\nexport default () => (\n\t<ToggleGroup.Root>\n\t\t<ToggleGroup.Item />\n\t</ToggleGroup.Root>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Importing Layout CSS for Standalone Usage in JSX\nDESCRIPTION: Shows how to import the necessary CSS for standalone usage of layout components from Radix Themes.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/layout.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport \"@radix-ui/themes/layout.css\";\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Scroll Area Component\nDESCRIPTION: Command to install the Scroll Area component from Radix UI using npm.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/scroll-area.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-scroll-area\n```\n\n----------------------------------------\n\nTITLE: Using HeroQuote Component in Markdown\nDESCRIPTION: A JSX component embedded in Markdown that displays a quote about how Radix Primitives helps Liveblocks create high-quality custom UI that behaves like native elements without spending excessive development time.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/case-studies/liveblocks.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<HeroQuote>\n\tWith Radix Primitives, we're able to create a high-quality custom UI that\n\tbehaves like native elements—without spending weeks on it. Instead, we can\n\tspend that time on our core product.\n</HeroQuote>\n```\n\n----------------------------------------\n\nTITLE: Using the Portal Root Component to Render Content\nDESCRIPTION: This snippet illustrates how to utilize the Portal component to render arbitrary content within the Portal's root. The content gets rendered in a separate DOM element within the document body by default.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/utilities/portal.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Portal } from \"radix-ui\";\n\nexport default () => <Portal.Root>Content</Portal.Root>;\n```\n\n----------------------------------------\n\nTITLE: ContextMenu Collision Padding Example\nDESCRIPTION: This example shows how to set the collisionPadding property of the ContextMenu.Content component.  The collisionPadding property defines the distance in pixels from the boundary edges where collision detection should occur. The example demonstrates setting the padding for the top and left sides.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"{ top: 20, left: 20 }\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Text with Color Variables in JSX\nDESCRIPTION: This snippet demonstrates how to display a text element using predefined Radix Color variables within a JSX component. The Radix Color variable is used to style the text color, providing a visually distinct appearance. This implementation requires a React environment and access to Radix Colors defined as CSS variables.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/palette-composition/composing-a-palette.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Box my=\"5\">\n\t<Text\n\t\tas=\"p\"\n\t\tsize=\"7\"\n\t\talign=\"center\"\n\t\tweight=\"bold\"\n\t\tstyle={{ color: \"var(--blue-12)\" }}\n\t>\n\t\tThis text is Blue 12\n\t</Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Initializing Box Component in JSX\nDESCRIPTION: This code snippet demonstrates the creation of a Box component in a JSX environment, setting its width and height attributes. The Box acts as a fundamental layout building block, and the implementation requires no additional dependencies besides standard JSX support. The parameters 'width' and 'height' determine the dimensions of the Box, and its children define the content adapted within this layout block. The example includes a DecorativeBox component, suggesting customization and style adaptation.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/box.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box width=\\\"64px\\\" height=\\\"64px\\\">\\n\\t<DecorativeBox />\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Text Wrapping with Skeleton\nDESCRIPTION: Shows different approaches to wrapping text content with Skeleton components, demonstrating proper text node wrapping.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/skeleton.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Container size=\"1\">\n\t<Flex direction=\"column\" gap=\"2\">\n\t\t<Text>\n\t\t\t<Skeleton>Lorem ipsum dolor sit amet.</Skeleton>\n\t\t</Text>\n\n\t\t<Skeleton>\n\t\t\t<Text>Lorem ipsum dolor sit amet</Text>\n\t\t</Skeleton>\n\t</Flex>\n</Container>\n```\n\n----------------------------------------\n\nTITLE: Accent Color CSS Variables\nDESCRIPTION: Lists all available CSS variables for accent colors including backgrounds, interactive components, borders, and text colors\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/color.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Backgrounds */\nvar(--accent-1);\nvar(--accent-2);\n\n/* Interactive components */\nvar(--accent-3);\nvar(--accent-4);\nvar(--accent-5);\n\n/* Borders and separators */\nvar(--accent-6);\nvar(--accent-7);\nvar(--accent-8);\n\n/* Solid colors */\nvar(--accent-9);\nvar(--accent-10);\n\n/* Accessible text */\nvar(--accent-11);\nvar(--accent-12);\n\n/* Functional colors */\nvar(--accent-surface);\nvar(--accent-indicator);\nvar(--accent-track);\nvar(--accent-contrast);\n```\n\n----------------------------------------\n\nTITLE: Initializing Segmented Control Component in JSX\nDESCRIPTION: This snippet demonstrates the basic usage of the Segmented Control component. It creates a control with three items: Inbox, Drafts, and Sent, with 'inbox' as the default selected value.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/segmented-control.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SegmentedControl.Root defaultValue=\"inbox\">\n\t<SegmentedControl.Item value=\"inbox\">Inbox</SegmentedControl.Item>\n\t<SegmentedControl.Item value=\"drafts\">Drafts</SegmentedControl.Item>\n\t<SegmentedControl.Item value=\"sent\">Sent</SegmentedControl.Item>\n</SegmentedControl.Root>\n```\n\n----------------------------------------\n\nTITLE: Import and Render OneTimePasswordField in React\nDESCRIPTION: This code snippet demonstrates how to import and render the `OneTimePasswordField` component from the `radix-ui` library in a React application. It showcases the basic structure of the component, including `Root`, `Input`, and `HiddenInput` sub-components, and highlights the unstable API.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/overview/releases.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unstable_OneTimePasswordField as OneTimePasswordField } from \"radix-ui\";\n\nexport function Verify() {\n\treturn (\n\t\t<OneTimePasswordField.Root>\n\t\t\t<OneTimePasswordField.Input />\n\t\t\t<OneTimePasswordField.Input />\n\t\t\t<OneTimePasswordField.Input />\n\t\t\t<OneTimePasswordField.Input />\n\t\t\t<OneTimePasswordField.Input />\n\t\t\t<OneTimePasswordField.Input />\n\t\t\t<OneTimePasswordField.HiddenInput />\n\t\t</OneTimePasswordField.Root>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Menubar Component\nDESCRIPTION: Command to install the Menubar component from Radix UI using npm.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/menubar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-menubar\n```\n\n----------------------------------------\n\nTITLE: Custom Brand Color CSS Override\nDESCRIPTION: Shows how to override theme colors with custom brand colors\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/color.mdx#2025-04-21_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.radix-themes {\n\t--my-brand-color: #3052f6;\n\t--indigo-9: var(--my-brand-color);\n\t--indigo-a9: var(--my-brand-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Separated Radix Theme CSS Files\nDESCRIPTION: Examples showing how to import individual Radix Themes CSS files separately for more granular control over style precedence.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/styling.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@radix-ui/themes/tokens.css\";\nimport \"@radix-ui/themes/components.css\";\nimport \"@radix-ui/themes/utilities.css\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@radix-ui/themes/layout/tokens.css\";\nimport \"@radix-ui/themes/layout/components.css\";\nimport \"@radix-ui/themes/layout/utilities.css\";\n```\n\n----------------------------------------\n\nTITLE: Space Scale Mapping for Width/Height Props\nDESCRIPTION: Conversion table for width and height prop values to pixel measurements in the new space scale system.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/releases.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nwidth=\"1\" → width=\"4px\"\nwidth=\"2\" → width=\"8px\"\nwidth=\"3\" → width=\"12px\"\nwidth=\"4\" → width=\"16px\"\nwidth=\"5\" → width=\"24px\"\nwidth=\"6\" → width=\"32px\"\nwidth=\"7\" → width=\"40px\"\nwidth=\"8\" → width=\"48px\"\nwidth=\"9\" → width=\"64px\"\n```\n\n----------------------------------------\n\nTITLE: Complex Element Reset Examples\nDESCRIPTION: Demonstrations of Reset component usage with more complex HTML structures like tables and lists, showing how it handles nested elements and maintains proper semantic structure.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/reset.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Reset>\n\t<table>\n\t\t<Reset>\n\t\t\t<caption>Table caption</caption>\n\t\t</Reset>\n\t\t<Reset>\n\t\t\t<thead>\n\t\t\t\t<Reset>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<Reset>\n\t\t\t\t\t\t\t<th scope=\"col\">Column header</th>\n\t\t\t\t\t\t</Reset>\n\t\t\t\t\t\t<Reset>\n\t\t\t\t\t\t\t<th scope=\"col\">Column header</th>\n\t\t\t\t\t\t</Reset>\n\t\t\t\t\t</tr>\n\t\t\t\t</Reset>\n\t\t\t</thead>\n\t\t</Reset>\n\t</table>\n</Reset>\n```\n\n----------------------------------------\n\nTITLE: Button Usage with asChild Prop\nDESCRIPTION: Example of using a custom button component with asChild to render as an anchor tag\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/utilities/slot.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from \"./your-button\";\n\nexport default () => (\n\t<Button asChild>\n\t\t<a href=\"/contact\">Contact</a>\n\t</Button>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Strong Component for Text Emphasis in JSX\nDESCRIPTION: Basic example showing how to use the Strong component to emphasize text within a Text component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/strong.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Text>\n\tThe most important thing to remember is, <Strong>stay positive</Strong>.\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Gray Scale CSS Variables\nDESCRIPTION: Lists all available CSS variables for gray scales including backgrounds, interactive components, borders, and text colors\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/color.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* Backgrounds */\nvar(--gray-1);\nvar(--gray-2);\n\n/* Interactive components */\nvar(--gray-3);\nvar(--gray-4);\nvar(--gray-5);\n\n/* Borders and separators */\nvar(--gray-6);\nvar(--gray-7);\nvar(--gray-8);\n\n/* Solid colors */\nvar(--gray-9);\nvar(--gray-10);\n\n/* Accessible text */\nvar(--gray-11);\nvar(--gray-12);\n\n/* Functional colors */\nvar(--gray-surface);\nvar(--gray-indicator);\nvar(--gray-track);\nvar(--gray-contrast);\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes - February 2022\nDESCRIPTION: Release notes documenting version updates and changes for Radix UI components including new Select, Toast and NavigationMenu primitives plus fixes and improvements.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/overview/releases.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## February 28, 2022\n\nThis release introduces 3 brand new primitives in preview: [`Select`](../components/select), [`Toast`](../components/toast) and [`NavigationMenu`](../components/navigation-menu), whilst also shipping a ton of fixes and improvements.\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with High Contrast\nDESCRIPTION: Demonstrates the highContrast prop to increase color contrast with the background\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/progress.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid columns=\"2\" gap=\"4\">\n\t<Progress value={10} color=\"indigo\" />\n\t<Progress value={10} color=\"indigo\" highContrast />\n\t<Progress value={30} color=\"cyan\" />\n\t<Progress value={30} color=\"cyan\" highContrast />\n\t<Progress value={50} color=\"orange\" />\n\t<Progress value={50} color=\"orange\" highContrast />\n\t<Progress value={70} color=\"crimson\" />\n\t<Progress value={70} color=\"crimson\" highContrast />\n\t<Progress value={90} color=\"gray\" />\n\t<Progress value={90} color=\"gray\" highContrast />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Heading\nDESCRIPTION: This JSX snippet demonstrates how to render a simple Headings component utilizing the default element.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/heading.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Heading>The quick brown fox jumps over the lazy dog</Heading>\n```\n\n----------------------------------------\n\nTITLE: Background Color CSS Variables\nDESCRIPTION: Lists the CSS variables used for different types of backgrounds\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/color.mdx#2025-04-21_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n/* Page background */\nvar(--color-background);\n\n/* Panel backgrounds, such as cards, tables, popovers, dropdown menus, etc. */\nvar(--color-panel-solid);\nvar(--color-panel-translucent);\n\n/* Form component backgrounds, such as text fields, checkboxes, select, etc. */\nvar(--color-surface);\n\n/* Dialog overlays */\nvar(--color-overlay);\n```\n\n----------------------------------------\n\nTITLE: CSS File Export Structure\nDESCRIPTION: Documents new CSS file export organization allowing for fine-grained control of CSS precedence and color imports.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/releases.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Add extra CSS file exports for advanced use-cases:\n  - Export individual `tokens.css`, `components.css`, and `utilities.css`\n  - Export `tokens/base.css` and `tokens/colors/*.css`\n  - Export `layout.css` for layout components\n```\n\n----------------------------------------\n\nTITLE: Basic Reset Component Examples\nDESCRIPTION: Collection of examples showing how Reset component can be applied to various HTML elements to remove default browser styling while maintaining semantic meaning. Each example demonstrates the Reset wrapper around a specific HTML element.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/reset.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Reset>\n\t<a href=\"#\">Anchor</a>\n</Reset>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Reset>\n\t<abbr title=\"Abbreviation\">ABR</abbr>\n</Reset>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Reset>\n\t<address>Address</address>\n</Reset>\n```\n\n----------------------------------------\n\nTITLE: Text Component with Different Alignments in JSX\nDESCRIPTION: Example showing how to use the 'align' prop to set text alignment to left, center, or right within its container.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Text align=\"left\" as=\"div\">Left-aligned</Text>\n<Text align=\"center\" as=\"div\">Center-aligned</Text>\n<Text align=\"right\" as=\"div\">Right-aligned</Text>\n```\n\n----------------------------------------\n\nTITLE: Implementing Truncation with Strong Component in JSX\nDESCRIPTION: Example demonstrating how to use the truncate prop with the Strong component to truncate overflowing text with an ellipsis within a container of limited width.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/strong.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex maxWidth=\"300px\">\n\t<Strong truncate>\n\t\tThe goal of typography is to relate font size, line height, and line width\n\t\tin a proportional way that maximizes beauty and makes reading easier and\n\t\tmore pleasant.\n\t</Strong>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Card-Style Components with Leading Trim in JSX\nDESCRIPTION: Example showing how trimming the leading space is useful for card or boxed components to create visually balanced spacing between text and container edges.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\">\n\t<Box\n\t\tstyle={{\n\t\t\tbackground: \"var(--gray-a2)\",\n\t\t\tborder: \"1px dashed var(--gray-a7)\",\n\t\t}}\n\t\tp=\"4\"\n\t>\n\t\t<Heading mb=\"1\" size=\"3\">\n\t\t\tWithout trim\n\t\t</Heading>\n\t\t<Text>\n\t\t\tThe goal of typography is to relate font size, line height, and line width\n\t\t\tin a proportional way that maximizes beauty and makes reading easier and\n\t\t\tmore pleasant.\n\t\t</Text>\n\t</Box>\n\n\t<Box\n\t\tp=\"4\"\n\t\tstyle={{\n\t\t\tbackground: \"var(--gray-a2)\",\n\t\t\tborder: \"1px dashed var(--gray-a7)\",\n\t\t}}\n\t>\n\t\t<Heading mb=\"1\" size=\"3\" trim=\"start\">\n\t\t\tWith trim\n\t\t</Heading>\n\t\t<Text trim=\"end\">\n\t\t\tThe goal of typography is to relate font size, line height, and line width\n\t\t\tin a proportional way that maximizes beauty and makes reading easier and\n\t\t\tmore pleasant.\n\t\t</Text>\n\t</Box>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Vertical Tabs Implementation\nDESCRIPTION: Example showing how to implement vertical tabs using the orientation prop, including triggers and content panels.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/tabs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tabs } from \"radix-ui\";\n\nexport default () => (\n\t<Tabs.Root defaultValue=\"tab1\" __orientation__=\"vertical\">\n\t\t<Tabs.List aria-label=\"tabs example\">\n\t\t\t<Tabs.Trigger value=\"tab1\">One</Tabs.Trigger>\n\t\t\t<Tabs.Trigger value=\"tab2\">Two</Tabs.Trigger>\n\t\t\t<Tabs.Trigger value=\"tab3\">Three</Tabs.Trigger>\n\t\t</Tabs.List>\n\t\t<Tabs.Content value=\"tab1\">Tab one content</Tabs.Content>\n\t\t<Tabs.Content value=\"tab2\">Tab two content</Tabs.Content>\n\t\t<Tabs.Content value=\"tab3\">Tab three content</Tabs.Content>\n\t</Tabs.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Separator Component\nDESCRIPTION: Command to install the Separator component from the Radix UI library using npm.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/separator.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-separator\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Color Options\nDESCRIPTION: Shows how to apply different color schemes to the Progress component using the color prop\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/progress.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"4\" maxWidth=\"300px\">\n\t<Progress value={20} color=\"indigo\" />\n\t<Progress value={40} color=\"cyan\" />\n\t<Progress value={60} color=\"orange\" />\n\t<Progress value={80} color=\"crimson\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Defining Sub Properties in React\nDESCRIPTION: This snippet defines properties for the Sub component in a React application representing a submenu. It includes properties such as 'defaultOpen', 'open', and 'onOpenChange', which aid in managing the open state of the submenu effectively.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<PropsTable\n\tdata={[\n\t\t{\n\t\t\tname: \"defaultOpen\",\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: (\n\t\t\t\t<span>The open state of the submenu when it is initially rendered. Use when you do not need to control its open state.</span>\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\tname: \"open\",\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: (\n\t\t\t\t<span>The controlled open state of the submenu. Must be used in conjunction with <Code>onOpenChange</Code>.</span>\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\tname: \"onOpenChange\",\n\t\t\ttype: \"(open: boolean) => void\",\n\t\t\ttypeSimple: \"function\",\n\t\t\tdescription: (\n\t\t\t\t<span>Event handler called when the open state of the submenu changes.</span>\n\t\t\t),\n\t\t},\n\t]}/>\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Variables for Cursor Styles\nDESCRIPTION: New CSS variables introduced to control cursor styles on interactive elements. These variables can be customized to change cursor appearance for different component states.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/releases.mdx#2025-04-21_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n--cursor-button: default;\n--cursor-checkbox: default;\n--cursor-disabled: not-allowed;\n--cursor-link: pointer;\n--cursor-menu-item: default;\n--cursor-radio: default;\n--cursor-slider-thumb: default;\n--cursor-slider-thumb-active: default;\n--cursor-switch: default;\n```\n\n----------------------------------------\n\nTITLE: Updating Transparent White Color Scale in CSS\nDESCRIPTION: Instructions for updating the transparent white color scale in custom styles. This change affects the values of --white-a1 through --white-a12 CSS variables.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/releases.mdx#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- Change `--white-a1` to `transparent`.\n- Change `--white-a2` to `rgba(255, 255, 255, 0.01)`.\n- Change `--white-a3` to `--white-a1` or `--white-a2`.\n- Change `--white-a4` to `--white-a2`.\n- Change `--white-a5` to `--white-a3`.\n- Change `--white-a6` to `--white-a3` or `--white-a4`.\n- Change `--white-a7` to `--white-a4`.\n- Change `--white-a8` to `--white-a5`.\n- Change `--white-a9` to `--white-a6`.\n- Change `--white-a10` to `--white-a7`.\n- Change `--white-a11` to `--white-a9`.\n- Change `--white-a12` to `--white-a11` or `--white-a12`.\n```\n\n----------------------------------------\n\nTITLE: Installing Radix AlertDialog via NPM\nDESCRIPTION: This snippet shows the command to install the AlertDialog component from the Radix UI library via npm, a package manager for JavaScript. Ensure npm is installed on your system before running this command.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/alert-dialog.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-alert-dialog\n```\n\n----------------------------------------\n\nTITLE: Truncating Text with Ellipsis\nDESCRIPTION: This code demonstrates the use of the 'truncate' prop in the Heading component to display an ellipsis when text overflows its container.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/heading.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex maxWidth=\"300px\">\n\t<Heading truncate>The quick brown fox jumps over the lazy dog</Heading>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Aligning Text\nDESCRIPTION: The following code shows how to set the text alignment of the Heading component using the 'align' prop.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/heading.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Heading align=\"left\">Left-aligned</Heading>\n<Heading align=\"center\">Center-aligned</Heading>\n<Heading align=\"right\">Right-aligned</Heading>\n```\n\n----------------------------------------\n\nTITLE: Text Component with Balanced Wrapping in JSX\nDESCRIPTION: Example showing the 'wrap' prop set to 'balance' to create more visually balanced line breaks, distributing text more evenly across lines.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/text.mdx#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex maxWidth=\"270px\">\n\t<Text wrap=\"balance\">\n\t\tThe goal of typography is to relate font size, line height, and line width\n\t\tin a proportional way that maximizes beauty and makes reading easier and\n\t\tmore pleasant.\n\t</Text>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Installing Direction Provider Component Using npm\nDESCRIPTION: This code snippet demonstrates how to install the Direction Provider component from the Radix UI library using npm. It is a prerequisite step that allows developers to use the component in their projects.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/utilities/direction-provider.mdx#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install @radix-ui/react-direction\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Size Variations\nDESCRIPTION: Shows how to use the size prop to control the visual dimensions of the Progress component across multiple sizes\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/progress.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"4\" maxWidth=\"300px\">\n\t<Progress value={25} size=\"1\" />\n\t<Progress value={50} size=\"2\" />\n\t<Progress value={75} size=\"3\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes Markdown Documentation\nDESCRIPTION: Release notes markdown documenting breaking changes, improvements and new features across multiple Radix UI components including Alert Dialog, Context Menu, Dialog, Dropdown Menu and others.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/overview/releases.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## July 21, 2022\n\nWith this release, we start following semantic versioning strictly. All primitives are now versioned 1.0.0.\n\nWe also move the `Select`, `Toast` and `NavigationMenu` from preview to stable.\n\n- Improve support for React 18\n- **[Breaking]** Improve RTL performance. You need to use `DirectionProvider` if you were relying on `dir` attribute inheritance from document (or any element).\n```\n\n----------------------------------------\n\nTITLE: Updating Transparent Black Color Scale in CSS\nDESCRIPTION: Instructions for updating the transparent black color scale in custom styles. This change affects the values of --black-a1 through --black-a12 CSS variables.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/releases.mdx#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- Change `--black-a1` to `rgba(0, 0, 0, 0.01)`.\n- Change `--black-a2` to `rgba(0, 0, 0, 0.024)`.\n- Change `--black-a3` to `--black-a1`.\n- Change `--black-a4` to `--black-a2`.\n- Change `--black-a5` to `--black-a2`.\n- Change `--black-a6` to `--black-a3`.\n- Change `--black-a7` to `--black-a3` or `--black-a4`.\n- Change `--black-a8` to `--black-a5`.\n- Change `--black-a9` to `--black-a6` or `--black-a7`.\n- Change `--black-a10` to `--black-a7`.\n- Change `--black-a11` to `--black-a8`.\n- Change `--black-a12` to `--black-a11`.\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Variables for Code Component Padding\nDESCRIPTION: New CSS variables introduced for customizing the padding of Code variants. These variables allow adjusting the padding to work better with custom code fonts.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/releases.mdx#2025-04-21_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n--code-padding-top\n--code-padding-bottom\n```\n\n----------------------------------------\n\nTITLE: Radix UI DropdownMenu.Arrow Props\nDESCRIPTION: This section details the properties for the `DropdownMenu.Arrow` component. These properties include the dimensions of the arrow, allowing for customization of its appearance to visually link the trigger and content.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dropdown-menu.mdx#2025-04-21_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Defining Separator Properties in React\nDESCRIPTION: This snippet includes properties for the Separator component which visually separates items within a context menu. It primarily consists of the 'asChild' property that defines how the separator can be rendered in a React application.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/context-menu.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<PropsTable\n\tdata={[\n\t\t{\n\t\t\tname: \"asChild\",\n\t\t\trequired: false,\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: \"false\",\n\t\t\tdescription: (\n\t\t\t\t<>Change the default rendered element for the one passed as a child,\n\t\t\t\tmerging their props and behavior.<br /><br />Read our <a href=\"../guides/composition\">Composition</a> guide for more details.</>\n\t\t\t),\n\t\t},\n\t]}/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Keyboard Input with Radix UI Kbd Component in JSX\nDESCRIPTION: This JSX snippet demonstrates how to render keyboard shortcuts using the Kbd component from Radix UI. The component represents keyboard inputs or hotkeys. There's a live preview setup indicated by `live=true` in the code block.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/kbd.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Kbd>Shift + Tab</Kbd>\n```\n\n----------------------------------------\n\nTITLE: Component Release Tag Component Usage\nDESCRIPTION: JSX component usage for displaying package release information with version and major release indicator.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/overview/releases.mdx#2025-04-21_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<PackageRelease name=\"Alert Dialog\" version=\"0.0.20\" major />\n```\n\n----------------------------------------\n\nTITLE: Using Weight Prop in Blockquote Component with JSX\nDESCRIPTION: This snippet exemplifies how to use the 'weight' prop to set the font weight of the text within a Blockquote. It contains variations for 'regular', 'medium', and 'bold' weights demonstrated in a Flex layout.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/blockquote.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\" maxWidth=\"500px\">\n\t<Blockquote weight=\"regular\">\n\t\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\t\tstone alone comes near it in obstinacy.\n\t</Blockquote>\n\n\t<Blockquote weight=\"medium\">\n\t\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\t\tstone alone comes near it in obstinacy.\n\t</Blockquote>\n\n\t<Blockquote weight=\"bold\">\n\t\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\t\tstone alone comes near it in obstinacy.\n\t</Blockquote>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Installing Radix Themes using npm\nDESCRIPTION: Command to install the Radix Themes package using npm package manager.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/getting-started.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/themes\n```\n\n----------------------------------------\n\nTITLE: Ghost Variant Icon Button in JSX\nDESCRIPTION: This snippet demonstrates the `ghost` variant of the `IconButton`, which creates a button without any background or border. It displays only the icon. This example uses the MagnifyingGlassIcon.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/icon-button.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n\"<IconButton variant=\\\"ghost\\\">\\n\\t<MagnifyingGlassIcon width=\\\"18\\\" height=\\\"18\\\" />\\n</IconButton>\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Hero Quote in HTML/Markdown\nDESCRIPTION: JSX/HTML markup for displaying a featured quote about Radix Primitives' benefits in helping Compound focus on core business needs.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/case-studies/compound.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<HeroQuote>\n\tRadix Primitives allow us to focus on our product and clients' needs instead\n\tof minute implementation details and other concepts like component\n\taccessibility.\n</HeroQuote>\n```\n\n----------------------------------------\n\nTITLE: Installing Tooltip Component with npm\nDESCRIPTION: This snippet illustrates how to install the Radix UI tooltip component using npm. It ensures users have the necessary package installed in their project to utilize tooltips effectively.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/tooltip.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-tooltip\n```\n\n----------------------------------------\n\nTITLE: Applying dark mode class in HTML\nDESCRIPTION: This snippet shows how to apply the `.dark` class to the `<body>` element (or a parent element) to enable dark mode styling using Radix Colors.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/overview/usage.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- For dark mode, apply a `.dark` class to <body> or a parent. -->\n<body class=\"dark\">\n\t<button class=\"button\">Button</button>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Slider Component\nDESCRIPTION: Command to install the Radix UI Slider component package from npm.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/slider.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-slider\n```\n\n----------------------------------------\n\nTITLE: Implementing Ghost Variant Icon Buttons with Multiple Colors in JSX\nDESCRIPTION: This code shows how to create ghost variant icon buttons using gray, blue, and red colors from the Radix color scale. It demonstrates using transparent backgrounds in the default state and step 3 for hover states.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/palette-composition/understanding-the-scale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex wrap=\"wrap\" gap=\"5\" my=\"5\">\n\t<IconButton variant=\"ghost\" color=\"gray\">\n\t\t<PlusIcon />\n\t</IconButton>\n\t<IconButton variant=\"ghost\" color=\"blue\">\n\t\t<PlusIcon />\n\t</IconButton>\n\t<IconButton variant=\"ghost\" color=\"red\">\n\t\t<PlusIcon />\n\t</IconButton>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Applying Reset Component to HTML Elements in React\nDESCRIPTION: Shows how to use the Reset component to remove default browser styles from HTML elements and set idiomatic layout defaults for custom component development.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/blog/themes-3.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Reset>\n\t<button>Button</button>\n</Reset>\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Package - Bash\nDESCRIPTION: This snippet demonstrates how to install the entire Radix UI package using npm. This approach is recommended for preventing version conflicts and simplifies managing updates.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/overview/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install radix-ui\n```\n\n----------------------------------------\n\nTITLE: Applying Colors to Radio Buttons in JSX\nDESCRIPTION: This example shows how to use the 'color' prop to assign specific colors to radio buttons. It displays four radio buttons with different colors: indigo, cyan, orange, and crimson.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex as=\"span\" gap=\"2\">\n\t<Radio color=\"indigo\" defaultChecked />\n\t<Radio color=\"cyan\" defaultChecked />\n\t<Radio color=\"orange\" defaultChecked />\n\t<Radio color=\"crimson\" defaultChecked />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Semantic Aliases for the Same Color Scale in CSS\nDESCRIPTION: This snippet demonstrates how to handle situations where multiple semantic terms need to map to the same color scale. It shows how to define multiple semantic aliases (like 'info'/'accent', 'valid'/'success', 'pending'/'warning') for the same color values using CSS custom properties.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/overview/aliasing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/*\n * Note: Importing from the CDN in production is not recommended.\n * It's intended for prototyping only.\n */\n@import \"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/blue.css\";\n@import \"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/green.css\";\n@import \"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/yellow.css\";\n\n:root {\n\t--accent-1: var(--blue-1);\n\t--accent-2: var(--blue-2);\n\t--info-1: var(--blue-1);\n\t--info-2: var(--blue-2);\n\n\t--success-1: var(--green-1);\n\t--success-2: var(--green-2);\n\t--valid-1: var(--green-1);\n\t--valid-2: var(--green-2);\n\n\t--warning-1: var(--yellow-1);\n\t--warning-2: var(--yellow-2);\n\t--pending-1: var(--yellow-1);\n\t--pending-2: var(--yellow-2);\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes - December 2021\nDESCRIPTION: Documentation of React 18 support changes and breaking changes related to portalling dialogs.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/overview/releases.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## December 13, 2021\n\nThis release focuses on React 18 support and introduces a number of breaking changes to some packages, mostly related to portalling dialogs.\n```\n\n----------------------------------------\n\nTITLE: Displaying Hero Quote in Markdown for Composer Case Study\nDESCRIPTION: This code snippet shows how to display a hero quote using a custom Markdown component called HeroQuote. It emphasizes Radix Primitives' impact on Composer's product accessibility and development focus.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/case-studies/composer.mdx#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<HeroQuote>\n\tRadix Primitives have made our product significantly more accessible and\n\treduced code complexity while allowing us to focus on building complex trading\n\tsoftware.\n</HeroQuote>\n```\n\n----------------------------------------\n\nTITLE: Renaming CSS Variables for Tabs and TabNav Components\nDESCRIPTION: CSS variable names were changed to support both Tabs and TabNav components, moving from tabs-trigger-specific names to more generic tab names for letter and word spacing properties.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/releases.mdx#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n    - `--tabs-trigger-active-letter-spacing` → `--tab-active-letter-spacing`\n    - `--tabs-trigger-active-word-spacing` → `--tab-active-word-spacing`\n    - `--tabs-trigger-inactive-letter-spacing` → `--tab-inactive-letter-spacing`\n    - `--tabs-trigger-inactive-word-spacing` → `--tab-inactive-word-spacing`\n```\n\n----------------------------------------\n\nTITLE: Displaying Font Weights in JSX\nDESCRIPTION: Shows how to apply different font weights using the weight prop in the Text component.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/typography.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Text size=\"6\">\n\t<Flex direction=\"column\">\n\t\t<Text weight=\"light\">Light</Text>\n\t\t<Text weight=\"regular\">Regular</Text>\n\t\t<Text weight=\"medium\">Medium</Text>\n\t\t<Text weight=\"bold\">Bold</Text>\n\t</Flex>\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Accent Color in React\nDESCRIPTION: Shows how to set the accent color on the Theme component\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/color.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Theme accentColor=\"indigo\">\n\t<MyApp />\n</Theme>\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Avatar Component\nDESCRIPTION: Command to install the Radix UI Avatar component package using npm.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/avatar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-avatar\n```\n\n----------------------------------------\n\nTITLE: Adjusting Badge Radius in JSX\nDESCRIPTION: Using the 'radius' prop, this code snippet alters the border-radius of Badge components to none, large, or full. This demonstrates flexible UI customization within Radix UI's Flex component setup.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/badge.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"2\">\\n\t<Badge variant=\"solid\" radius=\"none\" color=\"indigo\">\\n\t\tNew\\n\t</Badge>\\n\t<Badge variant=\"solid\" radius=\"large\" color=\"indigo\">\\n\t\tNew\\n\t</Badge>\\n\t<Badge variant=\"solid\" radius=\"full\" color=\"indigo\">\\n\t\tNew\\n\t</Badge>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Setting Text Weight\nDESCRIPTION: This snippet demonstrates the use of the 'weight' prop in the Heading component to set different text weights.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/heading.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Heading weight=\"regular\">\n  The quick brown fox jumps over the lazy dog.\n</Heading>\n\n<Heading weight=\"medium\">\n  The quick brown fox jumps over the lazy dog.\n</Heading>\n\n<Heading weight=\"bold\">\n  The quick brown fox jumps over the lazy dog.\n</Heading>\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Toggle Group\nDESCRIPTION: This command installs the Radix UI Toggle Group component from npm. It's a prerequisite for using the component in your project.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toggle-group.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-toggle-group\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Popover Component\nDESCRIPTION: Command to install the Popover component from the Radix UI library using npm.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/popover.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-popover\n```\n\n----------------------------------------\n\nTITLE: Rendering Hero Quote in Markdown\nDESCRIPTION: This snippet demonstrates how to render a hero quote using custom Markdown syntax. It encapsulates a testimonial about the benefits of using Radix Primitives.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/case-studies/acid-tango.mdx#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<HeroQuote>\n\tThanks to Radix, we have been able to focus on the product and our clients'\n\tneeds instead of worrying about implementation details. Before Radix, we had\n\tto build everything from scratch. Now it \"just works\".\n</HeroQuote>\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Gray Color in React\nDESCRIPTION: Demonstrates how to set a custom gray color on the Theme component\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/color.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Theme grayColor=\"mauve\">\n\t<MyApp />\n</Theme>\n```\n\n----------------------------------------\n\nTITLE: Alpha Colors CSS Variables\nDESCRIPTION: Shows the pattern for solid and alpha color variables\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/color.mdx#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n/* Solid colors */\nvar(--red-1);\nvar(--red-2);\n...\nvar(--red-12);\n\n/* Alpha colors */\nvar(--red-a1);\nvar(--red-a2);\n...\nvar(--red-a12);\n```\n\n----------------------------------------\n\nTITLE: Installing Radix Colors via Package Managers\nDESCRIPTION: Commands to install Radix Colors using npm, yarn, or pnpm. The current version is 3.0.0.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/overview/installation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# with npm\nnpm install @radix-ui/colors\n# with yarn\nyarn add @radix-ui/colors\n# with pnpm\npnpm add @radix-ui/colors\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Component via npm - JavaScript\nDESCRIPTION: This snippet shows how to install the Toggle component from Radix UI using npm from the command line. It assumes that npm is already installed on the system.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toggle.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-toggle\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Slot Component\nDESCRIPTION: Command to install the Slot component from npm package manager\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/utilities/slot.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-slot\n```\n\n----------------------------------------\n\nTITLE: Rendering Hero Quote Component in JSX\nDESCRIPTION: A simple JSX component example showing how a hero quote is rendered using custom HeroQuote component\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/case-studies/atom-learning.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<HeroQuote>\n\tCombined with Stitches in our design system, Radix Primitives allowed us to\n\tfocus on optimising the usability of our UI rather than building from scratch\n\tor hacking our way through inaccessible and prop-heavy UI libraries.\n</HeroQuote>\n```\n\n----------------------------------------\n\nTITLE: Implementing Shadow Tokens with CSS Variables\nDESCRIPTION: Demonstrates the usage of shadow CSS variables in the Radix UI theme system. The tokens range from subtle inset shadows (shadow-1) to prominent overlay shadows (shadow-6), allowing consistent shadow implementation across different component types.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/shadows.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Inset shadow */\nvar(--shadow-1);\n\n/* Shadows for variant=\"classic\" panels, like Card */\nvar(--shadow-2);\nvar(--shadow-3);\n\n/* Shadows for smaller overlay panels, like Hover Card and Popover */\nvar(--shadow-4);\nvar(--shadow-5);\n\n/* Shadows for larger overlay panels, like Dialog */\nvar(--shadow-6);\n```\n\n----------------------------------------\n\nTITLE: Panel Background Theme Settings\nDESCRIPTION: Shows how to set panel background appearance in Theme component\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/color.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Theme panelBackground=\"translucent\">\n\t<MyApp />\n</Theme>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Theme panelBackground=\"solid\">\n\t<MyApp />\n</Theme>\n```\n\n----------------------------------------\n\nTITLE: React Heroic Quote Component\nDESCRIPTION: A React component displaying a testimonial quote about Radix Primitives' impact on accessibility standards\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/case-studies/codesandbox.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<HeroQuote>\n\tRadix Primitives have significantly improved the accessibility standard in our\n\tcomponents. We spend far less time discussing and implementing keyboard\n\tnavigation, focus traps, and researching appropriate ARIA techniques for our\n\tcomponents.\n</HeroQuote>\n```\n\n----------------------------------------\n\nTITLE: Using Truncate Prop in Blockquote Component with JSX\nDESCRIPTION: This snippet demonstrates using the 'truncate' prop on the Blockquote component to limit the text display with an ellipsis when overflow occurs. It is implemented within a Flex layout with specified maximum width.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/blockquote.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex maxWidth=\"500px\">\n\t<Blockquote truncate>\n\t\tPerfect typography is certainly the most elusive of all arts. Sculpture in\n\t\tstone alone comes near it in obstinacy.\n\t</Blockquote>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Toolbar\nDESCRIPTION: This command installs the Radix UI Toolbar component from npm.  It adds the @radix-ui/react-toolbar package to your project's dependencies, allowing you to import and use the Toolbar components in your React application.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toolbar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-toolbar\n```\n\n----------------------------------------\n\nTITLE: Importing layout essentials CSS\nDESCRIPTION: This snippet shows how to import the layout essentials CSS from Radix Themes.  This is required if you only want to use the layout components from Radix Themes.  JavaScript tree-shaking must be enabled to remove unused styles.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/blog/themes-3.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport \"@radix-ui/themes/layout.css\";\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Color CSS Files in Radix Themes\nDESCRIPTION: This TypeScript snippet shows how to import individual CSS files for specific colors in Radix Themes. This approach reduces the CSS bundle size by including only the necessary color modules.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/color.mdx#2025-04-21_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\n// Base theme tokens\nimport \"@radix-ui/themes/tokens/base.css\";\n\n// Include just the colors you use, for example `ruby`, `teal`, and `slate`.\n// Remember to import the gray tint that matches your theme setting.\nimport \"@radix-ui/themes/tokens/colors/ruby.css\";\nimport \"@radix-ui/themes/tokens/colors/teal.css\";\nimport \"@radix-ui/themes/tokens/colors/slate.css\";\n\n// Rest of the CSS\nimport \"@radix-ui/themes/components.css\";\nimport \"@radix-ui/themes/utilities.css\";\n```\n\n----------------------------------------\n\nTITLE: Pull Request Link Component Usage\nDESCRIPTION: JSX component for linking to pull requests with PR ID reference.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/overview/releases.mdx#2025-04-21_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n<PRLink id={784} />\n```\n\n----------------------------------------\n\nTITLE: Using P3 Color Space Format in CSS\nDESCRIPTION: Example of using wide-gamut P3 color space format in CSS color definitions, which is supported by Apple displays for enhanced color reproduction.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/overview/custom-palettes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ncolor(display-p3 1 0.5 0)\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Visually Hidden Component\nDESCRIPTION: This command installs the `@radix-ui/react-visually-hidden` package from npm. This package provides the VisuallyHidden component for React applications, allowing developers to hide content visually while maintaining accessibility.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/utilities/visually-hidden.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm install @radix-ui/react-visually-hidden\n```\n```\n\n----------------------------------------\n\nTITLE: Adjust Orientation of DataList using Radix UI in JSX\nDESCRIPTION: Utilizes the 'orientation' prop of the DataList component to control layout orientation. This snippet modifies the layout to be vertical initially or horizontal on small screens, showcasing the flexibility provided by Radix UI's responsive design capabilities. Requires the Radix UI component library.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/data-list.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DataList.Root orientation={{ initial: \"vertical\", sm: \"horizontal\" }}>\n\t<DataList.Item>\n\t\t<DataList.Label minWidth=\"88px\">Name</DataList.Label>\n\t\t<DataList.Value>Vlad Moroz</DataList.Value>\n\t</DataList.Item>\n\t<DataList.Item>\n\t\t<DataList.Label minWidth=\"88px\">Email</DataList.Label>\n\t\t<DataList.Value>\n\t\t\t<Link href=\"mailto:vlad@workos.com\">vlad@workos.com</Link>\n\t\t</DataList.Value>\n\t</DataList.Item>\n\t<DataList.Item>\n\t\t<DataList.Label minWidth=\"88px\">Company</DataList.Label>\n\t\t<DataList.Value>\n\t\t\t<Link target=\"_blank\" href=\"https://workos.com\">\n\t\t\t\tWorkOS\n\t\t\t</Link>\n\t\t</DataList.Value>\n\t</DataList.Item>\n</DataList.Root>\n```\n\n----------------------------------------\n\nTITLE: Component Props Updates\nDESCRIPTION: Lists new layout-related props added to components and changes to existing prop implementations.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/releases.mdx#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- Add the following props to all layout components:\n  - `minWidth`, `maxWidth`\n  - `minHeight`, `maxHeight`\n  - `flexBasis`, `flexShrink`, `flexGrow`\n  - `gridColumn`, `gridColumnStart`, `gridColumnEnd`\n  - `gridRow`, `gridRowStart`, `gridRowEnd`\n  - `overflow`, `overflowX`, `overflowY`\n```\n\n----------------------------------------\n\nTITLE: Section Separator Component Usage\nDESCRIPTION: JSX component for visual separation between changelog sections with margin top spacing.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/overview/releases.mdx#2025-04-21_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\n<Separator mt=\"7\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Hero Quote Component in JSX\nDESCRIPTION: Demonstrates usage of HeroQuote component with escaped Unicode character for text formatting\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/case-studies/basement-studio.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<HeroQuote>\n\tRadix Primitives have helped us with faster development, and better quality of\n\tthe end product. It was super easy to get started{\"\\u2060\"}—the configuration\n\tand defaults are great.\n</HeroQuote>\n```\n\n----------------------------------------\n\nTITLE: Inserting Unicode Character in Markdown\nDESCRIPTION: This snippet demonstrates how to insert a Unicode character (U+2060 Word Joiner) in Markdown text. It's used within a sentence to potentially prevent line breaks at a specific point.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/case-studies/magnetis.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{'⁠'}\n```\n\n----------------------------------------\n\nTITLE: Enhancing Dropdown Menu Accessibility with High-Contrast Prop\nDESCRIPTION: This snippet illustrates how to apply the `highContrast` prop to enhance the dropdown menu's accessibility by increasing color contrast with the background. It provides various examples of toggle settings for triggering buttons and content items.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/dropdown-menu.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid columns=\"2\" gap=\"3\" display=\"inline-grid\">\n\t<DropdownMenu.Root>\n\t\t<DropdownMenu.Trigger>\n\t\t\t<Button color=\"gray\">\n\t\t\t\tOptions\n\t\t\t\t<DropdownMenu.TriggerIcon />\n\t\t\t</Button>\n\t\t</DropdownMenu.Trigger>\n\t\t<DropdownMenu.Content color=\"gray\">\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ E\">Edit</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ D\">Duplicate</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ N\">Archive</DropdownMenu.Item>\n\t\t</DropdownMenu.Content>\n\t</DropdownMenu.Root>\n\n\t<DropdownMenu.Root>\n\t\t<DropdownMenu.Trigger>\n\t\t\t<Button color=\"gray\" highContrast>\n\t\t\t\tOptions\n\t\t\t\t<DropdownMenu.TriggerIcon />\n\t\t\t</Button>\n\t\t</DropdownMenu.Trigger>\n\t\t<DropdownMenu.Content color=\"gray\" highContrast>\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ E\">Edit</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ D\">Duplicate</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ N\">Archive</DropdownMenu.Item>\n\t\t</DropdownMenu.Content>\n\t</DropdownMenu.Root>\n\n\t<DropdownMenu.Root>\n\t\t<DropdownMenu.Trigger>\n\t\t\t<Button color=\"gray\" variant=\"soft\">\n\t\t\t\tOptions\n\t\t\t\t<DropdownMenu.TriggerIcon />\n\t\t\t</Button>\n\t\t</DropdownMenu.Trigger>\n\t\t<DropdownMenu.Content color=\"gray\" variant=\"soft\">\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ E\">Edit</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ D\">Duplicate</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ N\">Archive</DropdownMenu.Item>\n\t\t</DropdownMenu.Content>\n\t</DropdownMenu.Root>\n\n\t<DropdownMenu.Root>\n\t\t<DropdownMenu.Trigger>\n\t\t\t<Button color=\"gray\" variant=\"soft\" highContrast>\n\t\t\t\tOptions\n\t\t\t\t<DropdownMenu.TriggerIcon />\n\t\t\t</Button>\n\t\t</DropdownMenu.Trigger>\n\t\t<DropdownMenu.Content color=\"gray\" variant=\"soft\" highContrast>\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ E\">Edit</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ D\">Duplicate</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Separator />\n\t\t\t<DropdownMenu.Item shortcut=\"⌘ N\">Archive</DropdownMenu.Item>\n\t\t</DropdownMenu.Content>\n\t</DropdownMenu.Root>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Installing Radix Themes using yarn\nDESCRIPTION: Command to install the Radix Themes package using yarn package manager.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/getting-started.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @radix-ui/themes\n```\n\n----------------------------------------\n\nTITLE: Installing Radix Themes using pnpm\nDESCRIPTION: Command to install the Radix Themes package using pnpm package manager.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/getting-started.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @radix-ui/themes\n```\n\n----------------------------------------\n\nTITLE: Color Override Example in React\nDESCRIPTION: Shows how to override theme colors for nested components using the color prop\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/color.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Theme accentColor=\"indigo\">\n\t<Flex align=\"start\" direction={{ initial: \"column\", sm: \"row\" }} gap=\"4\">\n\t\t<Callout.Root>\n\t\t\t<Callout.Icon>\n\t\t\t\t<InfoCircledIcon />\n\t\t\t</Callout.Icon>\n\t\t\t<Callout.Text>\n\t\t\t\t<Flex as=\"span\" align=\"center\" gap=\"4\">\n\t\t\t\t\t<Text>There are new commits.</Text>\n\t\t\t\t\t<Button variant=\"surface\" size=\"1\" my=\"-2\">\n\t\t\t\t\t\tRefresh\n\t\t\t\t\t</Button>\n\t\t\t\t</Flex>\n\t\t\t</Callout.Text>\n\t\t</Callout.Root>\n\n\t\t<Callout.Root color=\"gray\">\n\t\t\t<Callout.Icon>\n\t\t\t\t<InfoCircledIcon />\n\t\t\t</Callout.Icon>\n\t\t\t<Callout.Text>\n\t\t\t\t<Flex as=\"span\" align=\"center\" gap=\"4\">\n\t\t\t\t\t<Text>There are new commits.</Text>\n\t\t\t\t\t<Button variant=\"surface\" size=\"1\" my=\"-2\">\n\t\t\t\t\t\tRefresh\n\t\t\t\t\t</Button>\n\t\t\t\t</Flex>\n\t\t\t</Callout.Text>\n\t\t</Callout.Root>\n\t</Flex>\n</Theme>\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Accordion Component\nDESCRIPTION: Command to install the Accordion component from npm.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/accordion.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-accordion\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Dialog Component\nDESCRIPTION: Command to install the Dialog component from the Radix UI library using npm.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/dialog.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-dialog\n```\n\n----------------------------------------\n\nTITLE: Advanced Typography Customization in CSS\nDESCRIPTION: Shows how to customize advanced typographic features like font size multiplier, font style, letter spacing, and leading trim for headings in Radix Themes.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/typography.mdx#2025-04-21_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.radix-themes {\n\t--heading-font-family: \"Untitled Sans\", sans-serif;\n\t--heading-font-size-adjust: 1.05;\n\t--heading-font-style: normal;\n\t--heading-leading-trim-start: 0.42em;\n\t--heading-leading-trim-end: 0.38em;\n\t--heading-letter-spacing: -0.01em;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Collapsible Package\nDESCRIPTION: Command to install the Radix UI Collapsible component package using npm.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/collapsible.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-collapsible\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Portal Component via npm\nDESCRIPTION: This snippet shows how to install the Radix UI portal component using npm. It requires Node.js and npm to be installed on your system.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/utilities/portal.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-portal\n```\n\n----------------------------------------\n\nTITLE: Accessing Space Scale with CSS Variables in Radix UI\nDESCRIPTION: CSS variables for accessing the 9-step space scale tokens in Radix UI. These variables can be used to style custom components to maintain consistency with the rest of the theme.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/spacing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Space scale */\nvar(--space-1);\nvar(--space-2);\nvar(--space-3);\nvar(--space-4);\nvar(--space-5);\nvar(--space-6);\nvar(--space-7);\nvar(--space-8);\nvar(--space-9);\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server for Radix UI Website\nDESCRIPTION: Command to start the local development server for the Radix UI website project. Uses pnpm as the package manager and runs the development server on localhost:3000.\nSOURCE: https://github.com/radix-ui/website/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Vertical Separator Sizes in JSX\nDESCRIPTION: This snippet illustrates the use of the 'size' prop for vertical separators, with sizes ranging from 1 to 4, within a flex container.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/separator.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"center\" gap=\"4\" height=\"96px\">\n\t<Separator orientation=\"vertical\" size=\"1\" />\n\t<Separator orientation=\"vertical\" size=\"2\" />\n\t<Separator orientation=\"vertical\" size=\"3\" />\n\t<Separator orientation=\"vertical\" size=\"4\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Basic Tabs Implementation in React\nDESCRIPTION: Demonstrates the basic structure of a tabbed interface with three sections: Account, Documents, and Settings. Shows how to set up tab triggers and their associated content.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/tabs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs.Root defaultValue=\"account\">\n\t<Tabs.List>\n\t\t<Tabs.Trigger value=\"account\">Account</Tabs.Trigger>\n\t\t<Tabs.Trigger value=\"documents\">Documents</Tabs.Trigger>\n\t\t<Tabs.Trigger value=\"settings\">Settings</Tabs.Trigger>\n\t</Tabs.List>\n\n\t<Box pt=\"3\">\n\t\t<Tabs.Content value=\"account\">\n\t\t\t<Text size=\"2\">Make changes to your account.</Text>\n\t\t</Tabs.Content>\n\n\t\t<Tabs.Content value=\"documents\">\n\t\t\t<Text size=\"2\">Access and update your documents.</Text>\n\t\t</Tabs.Content>\n\n\t\t<Tabs.Content value=\"settings\">\n\t\t\t<Text size=\"2\">Edit your profile or update contact information.</Text>\n\t\t</Tabs.Content>\n\t</Box>\n</Tabs.Root>\n```\n\n----------------------------------------\n\nTITLE: Constraining Content Size with CSS Variables\nDESCRIPTION: This CSS snippet constrains the width of the Popover.Content to match the trigger width and limits its maximum height using CSS custom properties exposed by Radix UI. It uses `--radix-popover-trigger-width` and `--radix-popover-content-available-height` to achieve this.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/popover.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n\"/* styles.css */\n.PopoverContent {\n\twidth: var(__--radix-popover-trigger-width__);\n\tmax-height: var(__--radix-popover-content-available-height__);\n}\"\n```\n\n----------------------------------------\n\nTITLE: Adding separators to Menubar (Radix UI, React)\nDESCRIPTION: This example demonstrates how to use the `Menubar.Separator` component to add visual separators between menu items.  The separators help organize the menu content and improve readability.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/menubar.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Menubar.Root>\n\t<Menubar.Menu>\n\t\t<Menubar.Trigger>…</Menubar.Trigger>\n\t\t<Menubar.Portal>\n\t\t\t<Menubar.Content>\n\t\t\t\t<Menubar.Item>…</Menubar.Item>\n\t\t\t\t<Menubar.Separator />\n\t\t\t\t<Menubar.Item>…</Menubar.Item>\n\t\t\t\t<Menubar.Separator />\n\t\t\t\t<Menubar.Item>…</Menubar.Item>\n\t\t\t</Menubar.Content>\n\t\t</Menubar.Portal>\n\t</Menubar.Menu>\n</Menubar.Root>\n```\n\n----------------------------------------\n\nTITLE: Slot Component with Multiple Children\nDESCRIPTION: Advanced usage of Slot with Slottable to handle multiple child elements and prop passing\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/utilities/slot.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Button({ asChild, children, leftElement, rightElement, ...props }) {\n\tconst Comp = asChild ? Slot.Root : \"button\";\n\treturn (\n\t\t<Comp {...props}>\n\t\t\t{leftElement}\n\t\t\t<Slot.Slottable>{children}</Slot.Slottable>\n\t\t\t{rightElement}\n\t\t</Comp>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Visually Hidden with an Icon\nDESCRIPTION: This example demonstrates how to use the `VisuallyHidden.Root` component to provide accessible text for an icon. The `GearIcon` component is displayed visually, while the \"Settings\" text is hidden visually but remains accessible to screen readers.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/utilities/visually-hidden.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { VisuallyHidden } from \"radix-ui\";\nimport { GearIcon } from \"@radix-ui/react-icons\";\n\nexport default () => (\n\t<button>\n\t\t<GearIcon />\n\t\t<VisuallyHidden.Root>Settings</VisuallyHidden.Root>\n\t</button>\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Switch Component Aligned with Text in JSX\nDESCRIPTION: Shows how the Switch component aligns with different sizes of text when composed within Text components, automatically centering with the first line of text.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/switch.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"3\">\n\t<Text as=\"label\" size=\"2\">\n\t\t<Flex gap=\"2\">\n\t\t\t<Switch size=\"1\" defaultChecked /> Sync settings\n\t\t</Flex>\n\t</Text>\n\n\t<Text as=\"label\" size=\"3\">\n\t\t<Flex gap=\"2\">\n\t\t\t<Switch size=\"2\" defaultChecked /> Sync settings\n\t\t</Flex>\n\t</Text>\n\n\t<Text as=\"label\" size=\"4\">\n\t\t<Flex gap=\"2\">\n\t\t\t<Switch size=\"3\" defaultChecked /> Sync settings\n\t\t</Flex>\n\t</Text>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Renaming Radix UI Color Scales in CSS\nDESCRIPTION: This snippet demonstrates how to import Radix UI color scales via CDN and rename them using CSS custom properties. It shows how to map standard scales like 'slate' to more intuitive names like 'gray' or create brand-specific names like 'blurple'.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/overview/aliasing.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/*\n * Note: Importing from the CDN in production is not recommended.\n * It's intended for prototyping only.\n */\n@import \"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/slate.css\";\n@import \"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/sky.css\";\n@import \"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/grass.css\";\n@import \"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/violet.css\";\n@import \"https://cdn.jsdelivr.net/npm/@radix-ui/colors@latest/crimson.css\";\n\n:root {\n\t--gray-1: var(--slate-1);\n\t--gray-2: var(--slate-2);\n\n\t--blue-1: var(--sky-1);\n\t--blue-2: var(--sky-2);\n\n\t--green-1: var(--grass-1);\n\t--green-2: var(--grass-2);\n\n\t--blurple-1: var(--violet-1);\n\t--blurple-2: var(--violet-2);\n\n\t--caribbean-sunset-1: var(--crimson-1);\n\t--caribbean-sunset-2: var(--crimson-2);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Visually Hidden Component\nDESCRIPTION: This code snippet shows how to import the `VisuallyHidden` component from the `@radix-ui/react-visually-hidden` package. It also demonstrates its basic usage by rendering the `VisuallyHidden.Root` component, which visually hides its children.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/utilities/visually-hidden.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { VisuallyHidden } from \"radix-ui\";\n\nexport default () => <VisuallyHidden.Root />;\n```\n```\n\n----------------------------------------\n\nTITLE: Adding ThemePanel to React Application\nDESCRIPTION: Example of how to add the ThemePanel component to a React application for real-time theme previewing.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/getting-started.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Theme, ThemePanel } from \"@radix-ui/themes\";\n\nexport default function () {\n\treturn (\n\t\t<Theme>\n\t\t\t<MyApp />\n\t\t\t<ThemePanel />\n\t\t</Theme>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for disabled Menubar items (Radix UI)\nDESCRIPTION: This CSS snippet provides styling for disabled menu items in a Radix UI Menubar.  It targets elements with both the `MenubarItem` class and the `data-disabled` attribute, setting their color to gainsboro.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/menubar.mdx#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.MenubarItem[__data-disabled__] {\n\tcolor: gainsboro;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Solid Variant Buttons with Full Color Spectrum in JSX\nDESCRIPTION: This code displays solid variant buttons across the full Radix color spectrum. It demonstrates the application of steps 9-10 for solid backgrounds, where step 9 is used for normal states and step 10 for hover states.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/colors/docs/palette-composition/understanding-the-scale.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid columns=\"7\" gap=\"3\" my=\"5\">\n\t<Button variant=\"solid\" color=\"gold\">\n\t\tGold\n\t</Button>\n\t<Button variant=\"solid\" color=\"bronze\">\n\t\tBronze\n\t</Button>\n\t<Button variant=\"solid\" color=\"brown\">\n\t\tBrown\n\t</Button>\n\t<Button variant=\"solid\" color=\"yellow\">\n\t\tYellow\n\t</Button>\n\t<Button variant=\"solid\" color=\"amber\">\n\t\tAmber\n\t</Button>\n\t<Button variant=\"solid\" color=\"orange\">\n\t\tOrange\n\t</Button>\n\t<Button variant=\"solid\" color=\"tomato\">\n\t\tTomato\n\t</Button>\n\t<Button variant=\"solid\" color=\"red\">\n\t\tRed\n\t</Button>\n\t<Button variant=\"solid\" color=\"ruby\">\n\t\tRuby\n\t</Button>\n\t<Button variant=\"solid\" color=\"crimson\">\n\t\tCrimson\n\t</Button>\n\t<Button variant=\"solid\" color=\"pink\">\n\t\tPink\n\t</Button>\n\t<Button variant=\"solid\" color=\"plum\">\n\t\tPlum\n\t</Button>\n\t<Button variant=\"solid\" color=\"purple\">\n\t\tPurple\n\t</Button>\n\t<Button variant=\"solid\" color=\"violet\">\n\t\tViolet\n\t</Button>\n\t<Button variant=\"solid\" color=\"iris\">\n\t\tIris\n\t</Button>\n\t<Button variant=\"solid\" color=\"indigo\">\n\t\tIndigo\n\t</Button>\n\t<Button variant=\"solid\" color=\"blue\">\n\t\tBlue\n\t</Button>\n\t<Button variant=\"solid\" color=\"cyan\">\n\t\tCyan\n\t</Button>\n\t<Button variant=\"solid\" color=\"teal\">\n\t\tTeal\n\t</Button>\n\t<Button variant=\"solid\" color=\"jade\">\n\t\tJade\n\t</Button>\n\t<Button variant=\"solid\" color=\"green\">\n\t\tGreen\n\t</Button>\n\t<Button variant=\"solid\" color=\"grass\">\n\t\tGrass\n\t</Button>\n\t<Button variant=\"solid\" color=\"lime\">\n\t\tLime\n\t</Button>\n\t<Button variant=\"solid\" color=\"mint\">\n\t\tMint\n\t</Button>\n\t<Button variant=\"solid\" color=\"sky\">\n\t\tSky\n\t</Button>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Disabling Options in Radix Radio Cards Component\nDESCRIPTION: This example illustrates the ability to disable specific Radio Card items, rendering them non-selectable by the user. This feature is useful in scenarios where certain options should not be available under specific conditions. It requires setting up a React application and including Radix UI.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/radio-cards.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"4\" maxWidth=\"450px\">\\n\\t<RadioCards.Root columns=\"2\" defaultValue=\"2\">\\n\\t\\t<RadioCards.Item value=\"1\">Off</RadioCards.Item>\\n\\t\\t<RadioCards.Item value=\"2\">On</RadioCards.Item>\\n\\t</RadioCards.Root>\\n\\n\\t<RadioCards.Root columns=\"2\" defaultValue=\"2\">\\n\\t\\t<RadioCards.Item value=\"1\" disabled>\\n\\t\\t\\tOff\\n\\t\\t</RadioCards.Item>\\n\\t\\t<RadioCards.Item value=\"2\" disabled>\\n\\t\\t\\tOn\\n\\t\\t</RadioCards.Item>\\n\\t</RadioCards.Root>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Available Cursor Tokens in CSS\nDESCRIPTION: Lists all available cursor CSS variables (tokens) that can be used for styling custom components in the theme.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/cursors.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Available cursor tokens */\nvar(--cursor-button);\nvar(--cursor-checkbox);\nvar(--cursor-disabled);\nvar(--cursor-link);\nvar(--cursor-menu-item);\nvar(--cursor-radio);\nvar(--cursor-slider-thumb);\nvar(--cursor-slider-thumb-active);\nvar(--cursor-switch);\n```\n\n----------------------------------------\n\nTITLE: Remapping Color Tokens in Radix Themes CSS\nDESCRIPTION: This CSS snippet demonstrates how to alias color tokens in Radix Themes. It remaps the 'ruby' color scale to 'red', allowing developers to use more generic color names while maintaining the original color values.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/theme/color.mdx#2025-04-21_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.radix-themes {\n\t--red-1: var(--ruby-1);\n\t--red-2: var(--ruby-2);\n\t--red-3: var(--ruby-3);\n\t--red-4: var(--ruby-4);\n\t--red-5: var(--ruby-5);\n\t--red-6: var(--ruby-6);\n\t--red-7: var(--ruby-7);\n\t--red-8: var(--ruby-8);\n\t--red-9: var(--ruby-9);\n\t--red-10: var(--ruby-10);\n\t--red-11: var(--ruby-11);\n\t--red-12: var(--ruby-12);\n\n\t--red-a1: var(--ruby-a1);\n\t--red-a2: var(--ruby-a2);\n\t--red-a3: var(--ruby-a3);\n\t--red-a4: var(--ruby-a4);\n\t--red-a5: var(--ruby-a5);\n\t--red-a6: var(--ruby-a6);\n\t--red-a7: var(--ruby-a7);\n\t--red-a8: var(--ruby-a8);\n\t--red-a9: var(--ruby-a9);\n\t--red-a10: var(--ruby-a10);\n\t--red-a11: var(--ruby-a11);\n\t--red-a12: var(--ruby-a12);\n\n\t--red-surface: var(--ruby-surface);\n\t--red-indicator: var(--ruby-indicator);\n\t--red-track: var(--ruby-track);\n\t--red-contrast: var(--ruby-contrast);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing AlertDialog Portal Container in React\nDESCRIPTION: Demonstrates how to specify a custom HTML container for the AlertDialog portal using React. This customization is useful for managing dialog positioning within specific DOM elements. Dependencies: Radix UI, React.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/alert-dialog.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => {\n\tconst [container, setContainer] = React.useState(null);\n\treturn (\n\t\t<div>\n\t\t\t<AlertDialog.Root>\n\t\t\t\t<AlertDialog.Trigger />\n\t\t\t\t<AlertDialog.Portal __container__={container}>\n\t\t\t\t\t<AlertDialog.Overlay />\n\t\t\t\t\t<AlertDialog.Content>...</AlertDialog.Content>\n\t\t\t\t</AlertDialog.Portal>\n\t\t\t</AlertDialog.Root>\n\n\t\t\t<div ref={setContainer} />\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Slider Variant Styling in React\nDESCRIPTION: Shows how to use the 'variant' prop to control the visual style of the Slider with surface, classic, and soft variants.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/slider.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"4\" maxWidth=\"300px\">\n\t<Slider defaultValue={[25]} variant=\"surface\" />\n\t<Slider defaultValue={[50]} variant=\"classic\" />\n\t<Slider defaultValue={[75]} variant=\"soft\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Aspect Ratio Component with npm\nDESCRIPTION: Command to install the Aspect Ratio component from Radix UI using npm package manager.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/aspect-ratio.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-aspect-ratio\n```\n\n----------------------------------------\n\nTITLE: Importing Toggle Component - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the Toggle component from Radix UI. It is essential to do this before using the component in a React application.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toggle.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Toggle } from \"radix-ui\";\n\nexport default () => <Toggle.Root />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Badge with Colors in JSX\nDESCRIPTION: This snippet demonstrates rendering a Flex container with Badge components using the Radix UI library. Each Badge is styled with a color prop, showcasing different states such as 'In progress', 'In review', and 'Complete'. Dependencies include Radix UI components such as Flex and Badge.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/components/badge.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"2\">\\n\t<Badge color=\"orange\">In progress</Badge>\\n\t<Badge color=\"blue\">In review</Badge>\\n\t<Badge color=\"green\">Complete</Badge>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Switch Component\nDESCRIPTION: Command to install the Switch component from the Radix UI library using npm package manager.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/switch.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-switch\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Label Component via npm\nDESCRIPTION: Command to install the Label component from Radix UI using npm package manager.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/label.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-label\n```\n\n----------------------------------------\n\nTITLE: Installing Radio Group Component with npm\nDESCRIPTION: Command to install the Radio Group component from the command line using npm.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/radio-group.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-radio-group\n```\n\n----------------------------------------\n\nTITLE: Updating ScrollArea Scrollbar Margin Variables\nDESCRIPTION: Renamed scrollbar margin variables for ScrollArea component. The new variables are more specific and can be set at the component level for easier customization.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/themes/docs/overview/releases.mdx#2025-04-21_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n--scrollarea-scrollbar-horizontal-margin-top\n--scrollarea-scrollbar-horizontal-margin-bottom\n--scrollarea-scrollbar-horizontal-margin-left\n--scrollarea-scrollbar-horizontal-margin-right\n--scrollarea-scrollbar-vertical-margin-top\n--scrollarea-scrollbar-vertical-margin-bottom\n--scrollarea-scrollbar-vertical-margin-left\n--scrollarea-scrollbar-vertical-margin-right\n```\n\n----------------------------------------\n\nTITLE: Install Radix UI Toast via NPM\nDESCRIPTION: This command installs the Radix UI Toast component as a dependency in your project using npm.  It adds the `@radix-ui/react-toast` package to your project's `node_modules` directory and updates your `package.json` file.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/components/toast.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install @radix-ui/react-toast\"\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Accessible Icon Component - Bash\nDESCRIPTION: This snippet illustrates how to install the Radix UI Accessible Icon component via npm from the command line. The installation is a prerequisite for using the component in a project.\nSOURCE: https://github.com/radix-ui/website/blob/main/data/primitives/docs/utilities/accessible-icon.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-accessible-icon\n```"
  }
]